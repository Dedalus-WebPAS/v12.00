. **********************************************************************
. * System    :   Accounting System                                    *
. * Program   :   IBAFMS73                                             *
. * Desc      :   Journal Authorization                                *
. **********************************************************************
. * Date      :   20.11.1990                                           *
. * Author    :   Paul Duncan                                          *
. * Mods      :                                                        *
. **********************************************************************
. * V9.02.00  03.05.2002 Glenn Saunders                                *
. *           Export to new release i.e. v9.02 from vf.09              *
. **********************************************************************
. * VF.09.B02 31.01.2001 Charles Handaya                               *
. *           Display BAS Code on Transaction screen                   *
. * VF.09.B01 29.11.2000 Sandra Barcham                                *
. *           Added BAS Code                                           *
. **********************************************************************
. * VF.00.03  17.11.1999 Sandra Barcham                                *
. *           Allow Cancelled Direct Debits                            *
. *           srf 635048                                               *
. * VF.00.02  31.08.1999 Sandra Barcham                                *
. *           Don't allow delete of periodic journals if any already   *
. *           Authorised                                               *
. *           srf 645667                                               *
. * VF.00.01  03.08.1999 Sandra Barcham                                *
. *           Stop authorising journals still in input                 *
. *           srf 645667                                               *
. *           Stop authorising journals if batch update in progress    *
. *           srf 630614                                               *
. **********************************************************************
.$$$$$$
.        PROGRAM IBAFMS73
.             open files and initialise variables
.             Display all the Batches waiting for Authorization
.             WHILE user wants to authorize journals DO
.                  Select batch to authorize
.             END WHILE
.        END
.$$$$$$
. Standard FMS Accounting System Include
.---------------------------------------
          INC       STDGENDF
.
.==============================================================================
.FILE DESCRIPTION INCLUDES
.-------------------------
.
          INC       FMSAMAFD/INC
          INC       FMSBCFFD/INC
          INC       FMSCSAFD/INC
          INC       FMSCONFD/INC
          INC       FMSCTRFD/INC
          INC       FMSJDTFD/INC
          INC       FMSJPDFD/INC
          INC       FMSJMAFD/INC
          INC       FMSLMAFD/INC
          INC       FMSLMCFD/INC
          INC       FMSLMCDF
          INC       FMSTDSFD/INC
          INC       FMSTRNFD/INC
          INC       FMSSIBFD/INC
          INC       IBACONFD/INC
          INC       IBABASFD/INC
          INC       IBABATFD/INC
          INC       IBAPASFD/INC
.
.==============================================================================
.LOCAL VARIABLE DEFINITION
.-------------------------
BCH       INIT      "bch"
FMSR      INIT      "fmsr"
FMST      INIT      "fmst"
.
ACCDESC   DIM       15
ACCEND    DIM       10
ACCYEAR   DIM       4 
BASDESC   DIM       3
BATCHNO   FORM      5
BATDESC   DIM       18
BATFNAME  DIM       8
CASHDATE  DIM       10
CASDESC   DIM       15
CASEND    DIM       10
CASHFLAG  FORM      1
CASYEAR   DIM       4 
.
D30       DIM       30
DEBCRED   DIM       2
DISPCNT   FORM      2
ENTRDATE  DIM       10
FILNAME   DIM       8
ITEM      FORM      5
.
MAXDISP   FORM      2
MODE      FORM      1
.
NEXT      FORM      1
NEXTSCRF  FORM      1
NODATA    FORM      1
NUMREC    FORM      2
.
OUTFORM   DIM       20
PAGENO     FORM     3
POSTDATE  DIM       10
PROCC01   DIM      10
PROCC02   DIM      10
PROCC03   DIM      10
PROCC04   DIM      10
PROCC05   DIM      10
PROCC06   DIM      10
PROCC07   DIM      10
PROCC08   DIM      10
PROCC09   DIM      10
PROCC10   DIM      10
PROCC11   DIM      10
PROCC12   DIM      10
PROCC13   DIM      10
PROCC14   DIM      10
PROCC15   DIM      10
PROCC16   DIM      10
PROCC17   DIM      10
PROCC18   DIM      10
RECCNT    FORM      2
RECCOUNT  FORM      2
ROW       FORM      2
SCRNUMB   FORM      4
SCRCOUNT  FORM      4
SECTOR01  FORM      3 
SECTOR02  FORM      3 
SECTOR03  FORM      3 
SECTOR04  FORM      3 
SECTOR05  FORM      3 
SECTOR06  FORM      3 
SECTOR07  FORM      3 
SECTOR08  FORM      3 
SECTOR09  FORM      3 
SECTOR10  FORM      3 
SECTOR11  FORM      3 
SECTOR12  FORM      3 
SECTOR13  FORM      3 
SECTOR14  FORM      3 
SECTOR15  FORM      3 
SECTOR16  FORM      3 
SECTOR17  FORM      3 
SECTOR18  FORM      3 
SIBFNAME  DIM       8
STATUS    DIM       1
STATDESC  DIM       30
.
SEL01     DIM       6
SEL02     DIM       6
SEL03     DIM       6
SEL04     DIM       6
SEL05     DIM       6
SEL06     DIM       6
SEL07     DIM       6
SEL08     DIM       6
SEL09     DIM       6
SEL10     DIM       6
SEL11     DIM       6
SEL12     DIM       6
SEL13     DIM       6
SEL14     DIM       6
SEL15     DIM       6
SEL16     DIM       6
SEL17     DIM       6
.
VALIDFLG  FORM      1
VALOPTN   DIM       6
.
FAMT      INIT      "(999,999,999,999.99 "
DAMT      DIM       20
.
PRGID     INIT      "IBAFMS73"
PRGNAM    INIT      "Journal Authorization"
VERSION   INIT      "V12.00.00"
.
.******************************************************************************
.*  MAINLINE - Controlling Logic                                              *
.******************************************************************************
ML0000    CALL      INIT0000           * display heading and open files
.
ML1000    CALL      AUTH0000           * display screen A
.
ML9999    CHAIN     PGM                * chain back to menu
.
.******************************************************************************
.* INIT - Open Files                             Called by ML0000             *
.******************************************************************************
INIT0000  CALL      DISPHEAD
.
          DISPLAY   *P56:24,"Opening controlf";  * control file
          OPEN      CONTROLF,"controlf"
          CALL      RDFMCO50                     * read sector 50
          CALL      RDFMCO51                     * read sector 51 
          CALL      RDFMCO52                     * read sector 52 
.
          READ      CONTROLF,ZERO;*107,IBCNUBAS
          IF        IBCNUBAS=1
            MOVE      "BAS",BASDESC
            DISPLAY   *P64:24,"ibabasaf";
            OPEN      IBABASA1,"ibabasaf"
          ELSE
            MOVE      SP3,BASDESC
          ENDIF
.
          DISPLAY   *P64:24,"fmsbcfaf";  * Batch control
          OPEN      FMSBCFA1,"fmsbcfaf"
          OPEN      FMSBCFA2,"fmsbcfaf"
.
          DISPLAY   *P64:24,"fmscsaaf";  * selected cont acc
          OPEN      FMSCSAA1,"fmscsaaf"
.
          DISPLAY   *P64:24,"fmsjmaaf";  * journal master
          OPEN      FMSJMAA1,"fmsjmaaf"
.
          DISPLAY   *P64:24,"fmsjdtaf";  * journal details
          OPEN      FMSJDTA1,"fmsjdtaf"
.
          DISPLAY   *P64:24,"fmsjpdaf";  * posting details
          OPEN      FMSJPDA1,"fmsjpdaf"
          OPEN      FMSJPDA2,"fmsjpdaf"
          OPEN      FMSJPDA3,"fmsjpdaf"
.
          DISPLAY   *P64:24,"fmslmaaf"           * ledger master
          OPEN      FMSLMAA1,"fmslmaaf"
.
          DISPLAY   *P64:24,"fmslmcaf"           * ledger callendar
          OPEN      FMSLMCA1,"fmslmcaf"
.
          DISPLAY   *P64:24,"fmsamaaf"           * ledger callendar
          OPEN      FMSAMAA1,"fmsamaaf"
.
          DISPLAY   *P64:24,"fmstdsaf"           * transaction description
          OPEN      FMSTDSA1,"fmstdsaf"
.
          DISPLAY   *P64:24,"ihapassf"           * passcode
          OPEN      IHAPASS1,"ihapassf"
          OPEN      IHAPASS2,"ihapassf"
.
INIT9999  DISPLAY   *P1:24,*EL;
          RETURN
.*************************************************************************
.* AUTH - Process all transaction Details                                *
.*        Returns : EXIT = 1 - exit = 0 - valid item chosen              *
.*                     called by : ML2000                                *
.*************************************************************************
AUTH0000  MOVE      ONE,NEXT           *assume no next screen
          MOVE      ONE,MODE
          MOVE      SIX,CVERT
          MOVE      ONE,DISPCNT
          CALL      HEAD0000           * display page header
.
          MATCH     SP2,FMCOBUPD
          IF        !@EQUAL
             CLEAR    DISPMSG
             APPEND   "Batch Update in Progress on Port ",DISPMSG
             APPEND   FMCOBUPD,DISPMSG
             APPEND   " - ",DISPMSG
             RESET     DISPMSG
             CALL      MESSAGE1
             GOTO      AUTH9999
          ENDIF
.
          IF        FMCOJAUT=1
            MOVE      "Someone else is already Authorising Journals - ",DISPMSG
            CALL      MESSAGE1
            GOTO      AUTH9999
          ENDIF
.
          WRITAB    CONTROLF,FIFTY;*246,ONE
.
AUTH0010  PACK      KEY6,ZERO,SP10
          CALL      RSFMJP3
.
          MOVE      ONE,PAGENO
.
AUTH1000  MOVE      "17",NUMREC
          CALL      DACN0000            * Display next page of relative accounts
          COMPARE   TWO,EXIT            * none there - straight out
          GOTO      AUTH6000 IF EQUAL
.
AUTH1500  MOVE      ONE,MODE
          CLEAR     VALOPTN
          DISPLAY   *P1:24,*EL,"Select Item, (",*V2LON,"A",*HOFF,")ll, (":
                               *V2LON,"D",*HOFF,")elete All, ";
          APPEND    ANSA,VALOPTN
          APPEND    ANSD,VALOPTN
          MOVE      "44",CCOL
.
          BRANCH    NEXT,AUTH2000       * is there a next page
          DISPLAY   "(",*V2LON,"N",*HOFF,")ext Page, ";
          ADD       "13",CCOL
          APPEND    ANSN,VALOPTN
.
AUTH2000  COMPARE   ONE,PAGENO         * no previous page if we are on page one
          GOTO      AUTH3000 IF EQUAL
.
          DISPLAY   "(",*V2LON,"P",*HOFF,")revious Page, ";
          ADD       "17",CCOL
          APPEND    ANSP,VALOPTN
.
AUTH3000  DISPLAY   "e(",*V2LON,"X",*HOFF,")it ?"
          APPEND    ANSX,VALOPTN
.
AUTH4000  KEYIN     *PCCOL:24,*EL,*DV,UNDLN2,*JR,*PCCOL:24,*V2LON,DIM2
          REP       UPPLOW,DIM2
          TYPE      DIM2
          GOTO      AUTH9000 IF EQUAL
.
          MATCH     SP1,DIM2         * cant enter two letters
          GOTO      AUTH4000 IF NOT EQUAL
          UNPACK    DIM2,ANS,ANS
          RESET     VALOPTN
          SCAN      ANS,VALOPTN            * valid option chosen?
          GOTO      AUTH4000 IF NOT EQUAL
          RESET     VALOPTN
.
          REP       "N1P2X3A4D5",ANS
          MOVE      ANS,FORM1
          BRANCH    FORM1,AUTH4500,AUTH5000,AUTH8000,AUTH7000,AUTH7500
.
          GOTO      AUTH4000
.
AUTH4500  ADD       ONE,PAGENO
          DISPLAY   *P1:6,*EF
          GOTO      AUTH1000
.
AUTH5000  COMPARE   "2",PAGENO       * if on second page - go from start
          GOTO      AUTH0000 IF EQUAL
          CALL      PREV0000          * read back a page so we can read 
                                      * forward a page
          GOTO      AUTH1000
.
AUTH6000  DISPLAY   *P1:24,*EL,"No batches awaiting Authorization. ";
          CALL      HITENTER
          GOTO      AUTH8000
.
AUTH7000  CALL      ALL0000           * authorize them all
          GOTO      AUTH8000
.
AUTH7500  CALL      DELQST
          SUB       ONE,CEXIT
          BRANCH    CEXIT,AUTH1500,AUTH8000
          CALL      DAL0000           * delete them all
          GOTO      AUTH8000
.
AUTH8000  MOVE      TRUE,EXIT          
          WRITAB    CONTROLF,FIFTY;*246,ZERO
          GOTO      AUTH9999
.
AUTH9000  MOVE      DIM2,CCITEM
.
AUTH9100  COMPARE   CCITEM,ZERO    * cant be less than zero
          GOTO      AUTH4000 IF NOT LESS
. 
          COMPARE   CCITEM,MAXDISP    * a valid selection?
          GOTO      AUTH4000 IF LESS
. 
AUTH9200  CALL      DATA0000           * display data
.
AUTH9250  MOVE      "20",CCOL
          DISPLAY   *P1:24,"(";
.
          BRANCH    NODATA,AUTH9270    * data found ?
          ADD       "29",CCOL
          DISPLAY   *V2LON,"A",*HOFF,")uthorise, (":
                    *V2LON,"T",*HOFF,")ransactions, (";
.
AUTH9270  KEYIN     *V2LON,"D",*HOFF,")elete, e(":
                    *V2LON,"X",*HOFF,")it : _",*EL:
                    *PCCOL:24,*V2LON,ANS;
          PACK      ANS,ANS,SP70
          REP       UPPLOW,ANS
.
          BRANCH    NODATA,AUTH9280    * data found ?
          MATCH     "A",ANS
          GOTO      AUTH9300 IF EQUAL  * authorise
          MATCH     "T",ANS
          GOTO      AUTH9350 IF EQUAL  * view transactions
.
AUTH9280  MATCH     "D",ANS
          GOTO      AUTH9400 IF EQUAL  * delete
          MATCH     "X",ANS
          GOTO      AUTH9500 IF EQUAL  * exit
          BEEP
          GOTO      AUTH9250
.
AUTH9300  CALL      ABAT0000        * authorize a batch
          GOTO      AUTH9500
.
AUTH9350  CALL      TRAN0000        * display transactions
          GOTO      AUTH9200        * return to auth, delete, exit
.
AUTH9400  CALL      DELQST
          SUB       ONE,CEXIT
          BRANCH    CEXIT,AUTH9250,AUTH9500
          CALL      DELR0000        * delete record
.
AUTH9500  CALL      CURP0000        * display current page
          GOTO      AUTH1500
.
AUTH9999  RETURN
.**********************************************************************
.  HEAD - Display page header                          Called By AUTH
.**********************************************************************
HEAD0000  DISPLAY   *P1:4,*EF,*P21:4,*V2LON,"Journals Awaiting Authorization":
                    *P1:5,*V2LON,*ULON,"Item",*P6:5,"Jnl Id.":
                    *P14:5,"Batch",*P20:5,"Description    ",SP5,SP10:
                    *P51:5,"Post Date":
                    *P69:5,"Debit Total";
.
HEAD9999  RETURN
.**********************************************************************
.  DATA - Display selected record                      Called By AUTH
.**********************************************************************
DATA0000  DISPLAY   *P1:4,*EF:
                    *P5:4,"Batch No          : ":
                    *P5:6,"Status            : ":
                    *P5:7,"Ledger Number     : ":
                    *P5:8,"Transaction Type  : ":
                    *P5:9,"Number of Entries : ":
                    *P5:10,"Batch Total       : ":
                    *P5:11,"Operator ID       : ":
                    *P5:12,"Date Entered      : ": 
                    *P5:13,"Post to Date      : "
.
          LOAD      KEY6,CCITEM,SEL01,SEL02,SEL03,SEL04,SEL05,SEL06:
                                SEL07,SEL08,SEL09,SEL10,SEL11,SEL12:
                                SEL13,SEL14,SEL15,SEL16,SEL17
.
          UNPACK    KEY6,DIM1,FMJPBAT
          DISPLAY   *P25:4,*V2LON,FMJPBAT;
          CALL      RDFMJP3
          CLEAR     BATFNAME
          APPEND    "bch",BATFNAME
          APPEND    FMJPBAT,BATFNAME
          RESET     BATFNAME
          REP       " 0",BATFNAME
.
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      BATFILE,BATFNAME
          TRAPCLR   IO
          MOVE      OVRCD,NODATA     * save data flag
          BRANCH    OVRCD,DATA9500
.
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF FORMAT
          CALL      RDBAT0           * read first sector
          TRAPCLR   IO
          MOVE      OVRCD,NODATA     * save data flag
          BRANCH    OVRCD,DATA9700
.
          CALL      RDBAT1           * read second sector
.
          MOVE      BC1BATCH,FMBCBAT
          MOVE      TWO,FMBCSTA    * set to awaiting Printing
          MOVE      BC0NXTSC,FMBCSEC
          MOVE      BC1KEYT,FMBCTOT
          MOVE      ZERO,FMBCDIS     * no discounts
          MOVE      BC1OPER,FMBCUID
          REP       " 0",FMBCDAT
          PACK      FMBCDAT,CCC,CYY,CMM,CDD
          MOVE      FMJPPDAT,FMBCPDAT
          MOVE      FMJPCDAT,FMBCCDAT
          MOVE      BC1LEDG,FMBCLED
          BRANCH    FMJPTYP,DATA0010
          MOVE      "JA",FMBCTRT    * set to journal transaction type
          GOTO      DATA0020
.
DATA0010  MOVE      "CJ",FMBCTRT    * set to cash journal transaction type
.
DATA0020  MOVE      ZERO,FMBCINV    * no inventory directory number
.
          MOVE      FMBCSTA,FORM1
          MOVE      FMBCBAT,BATCHNO
          BRANCH    FORM1,DATA0100,DATA0200,DATA0300,DATA0400
.
          MOVE      "Batch in Use",STATDESC
          GOTO      DATA1000
.
DATA0100  MOVE      "Batch Awaiting Mods",STATDESC
          GOTO      DATA1000
.
DATA0200  MOVE      "Batch Awaiting Printing",STATDESC
          GOTO      DATA1000
.
DATA0300  MOVE      "Batch Awaiting Update",STATDESC
          GOTO      DATA1000
.
DATA0400  MOVE      "Batch Processed",STATDESC
.
DATA1000  MATCH      "CE",FMBCTRT
          GOTO       DATA1100 IF NOT EQUAL
          MOVE       "Committed Expend. ",BATDESC
          GOTO        DATA2000
.
DATA1100  MATCH      "CR",FMBCTRT
          GOTO       DATA1200 IF NOT EQUAL
          MOVE       "Credit Notes      ",BATDESC
          GOTO        DATA2000
.
DATA1200  MATCH      "CS",FMBCTRT
          GOTO       DATA1300 IF NOT EQUAL
          MOVE       "Cash Receipts     ",BATDESC
          GOTO        DATA2000
.
DATA1300  MATCH      "IN",FMBCTRT
          GOTO       DATA1400 IF NOT EQUAL
          MOVE       "Invoices          ",BATDESC
          GOTO        DATA2000
.
DATA1400  MATCH      "JA",FMBCTRT
          GOTO       DATA1450 IF NOT EQUAL
          MOVE       "Journals          ",BATDESC
          GOTO        DATA2000
.
DATA1450  MATCH      "JC",FMBCTRT
          GOTO       DATA1500 IF NOT EQUAL
          MOVE       "Journals          ",BATDESC
          GOTO        DATA2000
.
DATA1500  MATCH      "PY",FMBCTRT
          GOTO       DATA1600 IF NOT EQUAL
          MOVE       "Payments          ",BATDESC
          GOTO        DATA2000
.
DATA1600  MATCH      "RF",FMBCTRT
          GOTO       DATA1700 IF NOT EQUAL
          MOVE       "Refunds           ",BATDESC
          GOTO        DATA2000
.
DATA1700  MATCH      "SC",FMBCTRT
          GOTO       DATA1800 IF NOT EQUAL
          MOVE       "Supply Credits    ",BATDESC
          GOTO        DATA2000
.
DATA1800  MATCH      "RI",FMBCTRT
          GOTO       DATA1900 IF NOT EQUAL
          MOVE       "Reinstate Invoices",BATDESC
          GOTO        DATA2000
.
DATA1900  MATCH      "CJ",FMBCTRT
          GOTO       DATA1950 IF NOT EQUAL
          MOVE       "Cash Journals     ",BATDESC
          GOTO       DATA2000
.
DATA1950  MATCH      "CC",FMBCTRT
          GOTO       DATA1960 IF NOT EQUAL
          MOVE       "Cancelled Payments",BATDESC
          GOTO       DATA2000
.
DATA1960  MATCH      "PP",FMBCTRT
          GOTO       DATA2000 IF NOT EQUAL
          MOVE       "Prompt Payments   ",BATDESC
          GOTO       DATA2000
.
DATA2000  CLEAR      FMLALEDG
          PACK       KEY2,FMBCLED
          CALL       RDFMLA1
.
          UNPACK     FMBCPDAT,CCENT,CYEAR,CMON,CDAY
          CALL       PACDATE
          MOVE       CPCDATE,POSTDATE
.
          UNPACK     FMBCCDAT,CCENT,CYEAR,CMON,CDAY
          CALL       PACDATE
          MOVE       CPCDATE,CASHDATE
.
          MOVE       FMBCPDAT,WORKDATE
          PACK       KEY2,FMBCLED
          CALL       RDFMLA1
.
          CALL       CFYR0000
          UNPACK     PEREDAT,CCENT,CYEAR,CMON,CDAY
          CALL       PACDATE
          MOVE       CPCDATE,ACCEND
          MOVE       PERDESC,ACCDESC
          MOVE       CURYEAR,ACCYEAR
          MOVE       CURYEAR,CASYEAR
          MATCH      "CJ",FMBCTRT
          GOTO       DATA3000 IF NOT EQUAL
.
          MOVE       FMBCCDAT,WORKDATE
          CALL       CFYR0000
          UNPACK     PEREDAT,CCENT,CYEAR,CMON,CDAY
          CALL       PACDATE
          MOVE       CPCDATE,CASEND
          MOVE       PERDESC,CASDESC
          MOVE       CURYEAR,CASYEAR
.
DATA3000  UNPACK     SP70,CCENT,CYEAR,CMON,CDAY
          REP        " 0",FMBCDAT
          UNPACK     FMBCDAT,CCENT,CYEAR,CMON,CDAY
          CALL       PACDATE
          MOVE       CPCDATE,ENTRDATE
.
          CLEAR      SECUSER
          PACK       KEY4,FMBCUID
          CALL       RDPASS1
.
          MOVE      FAMT,DAMT
          FEDIT     FMJPDTOT,DAMT
.
          MOVE      FMBCSEC,F5
          SUB       "2",F5
          DISPLAY   *P25:6,*V2LON,FMBCSTA,*HOFF,*P32:6,STATDESC:
                    *P25:7,*V2LON,FMBCLED,*HOFF,*P32:7,FMLADESC:
                    *P25:8,*V2LON,FMBCTRT,*HOFF,*P32:8,BATDESC:
                    *P25:9,*V2LON,F5:
                    *P25:10,DAMT:
                    *P25:11,SECUSER:
                    *P25:12,ENTRDATE;
.
          MATCH     SP70,POSTDATE
          GOTO      DATA4000 IF EQUAL
.
          DISPLAY   *P25:13,*V2LON,POSTDATE,*HOFF,SP2,ACCDESC:
                    *P52:13,"Ending ",*V2LON,ACCEND 
.
DATA4000  MATCH     "CJ",FMBCTRT
          GOTO      DATA9999 IF NOT EQUAL
.
          DISPLAY   *P5:14,"Cash Post to Date : ",*V2LON:
                    *P25:14,CASHDATE,*HOFF,SP2,CASDESC:
                    *P52:14,"Ending ",*V2LON,CASEND 
          GOTO      DATA9999
.
DATA9500  DISPLAY   *P1:24,*EL,*B:
                    "File for Batch number ",FMJPBAT," missing. ";
          CALL      HITENTER  
          GOTO      DATA9999
.
DATA9700  DISPLAY   *P1:24,*EL,*B:
                    "File for Batch number ",FMJPBAT," unreadable. ";
          CALL      HITENTER  
          GOTO      DATA9999
.
DATA9999  RETURN
.**********************************************************************
.  DELR - Delete selected record                       Called By AUTH
.**********************************************************************
DELR0000  DISPLAY   *P1:24,*EL,"Deleting Batch : ",*V2LON,FMJPBAT;
.
.                   * note : KEY6 is set and ccitem=0
.                   *        when deleting all items
.
          LOAD      KEY6,CCITEM,SEL01,SEL02,SEL03,SEL04,SEL05,SEL06:
                                SEL07,SEL08,SEL09,SEL10,SEL11,SEL12:
                                SEL13,SEL14,SEL15,SEL16,SEL17
.
          UNPACK    KEY6,DIM1,FMJPBAT
          CALL      RDFMJP3
.
          MATCH     FMJOPRE3,FMJPJTY
          GOTO      DELR0500 IF NOT EQUAL
.
          PACK      KEY12,FMJPJTY,FMJPJID,SP70
          CALL      RSFMJP2
.
DELR0100  CALL      RKFMJP2
          BRANCH    OVRCD,DELR0400
.
          PACK      KEY7,FMJPJTY,FMJPJID,SP70
          MATCH     KEY7,KEY12
          GOTO      DELR0400 IF NOT EQUAL
.
          MATCH     "0",FMJPAUTH
          GOTO      DELR0100 IF EQUAL
.
          DISPLAY   *P24:24,*EL,*B,"Part of Journal ":
                    "Already Authorised - ";
          CALL      HITENTER
          GOTO      DELR9999
.
DELR0400  UNPACK    KEY6,DIM1,FMJPBAT
          CALL      RDFMJP3
.
DELR0500  CALL      DEFMJP3
.
          CLEAR     BATFNAME
          APPEND    "bch",BATFNAME
          APPEND    FMJPBAT,BATFNAME
          RESET     BATFNAME
          REP       " 0",BATFNAME
.
          CLEAR     SIBFNAME
          APPEND    "sib",SIBFNAME
          APPEND    FMJPBAT,SIBFNAME
          RESET     SIBFNAME
          REP       " 0",SIBFNAME
.
          PREP      BATFILE,BATFNAME
          CLOSE     BATFILE
.
          PREP      FMSSIBA1,SIBFNAME
          CLOSE     FMSSIBA1
.
          PACK      KEY5,FMJPBAT,SP70
          CALL      DEFMBC1
.
          PACK      KEY7,FMJPJTY,FMJPJID,SP70
          CALL      RDFMJM1
          BRANCH    OVRCD,DELR9999
.
          MATCH     FMJOPRE1,FMJPJTY
          GOTO      DELR1100 IF EQUAL
          MATCH     FMJOPRE2,FMJPJTY
          GOTO      DELR1200 IF EQUAL
          MATCH     FMJOPRE3,FMJPJTY
          GOTO      DELR1300 IF EQUAL
          MATCH     FMJOPRE4,FMJPJTY
          GOTO      DELR1400 IF EQUAL
          MATCH     FMJOPRE5,FMJPJTY
          GOTO      DELR1400 IF EQUAL
          GOTO      DELR9999
.
DELR1100  MOVE      "1",FMJMSTAT
          UNPACK    SP70,FMJMPDAT,FMJMPBAT,FMJMRDAT,FMJMRBAT
          CALL      UPFMJM1
          GOTO      DELR9999
.
DELR1200  GOTO      DELR9999
.
DELR1300  MOVE      "1",FMJMSTAT
          CALL      UPFMJM1
          GOTO      DELR9999
.
DELR1400  CALL      DEFMJM1
          GOTO      DELR9999
.
DELR9999  RETURN
.*************************************************************************
.* DACN - Display the next page of accounts on file  Called by Lots      *
.*        Requires the file pointer to be positioned before the first    *
.*        record that we wish to display                                 *
.*************************************************************************
DACN0000  MOVE      ONE,DISPCNT
          MOVE      ONE,NEXT
          MOVE      SIX,CVERT
          MOVE      ZERO,RECCNT
          DISPLAY   *P1:6,*EF
          CALL      CSEL0000          * clear screen variables(SEL)
.
DACN1000  CALL      RKFMJP3           * read next record
          BRANCH    OVRCD,DACN9000
          MATCH     "0",FMJPAUTH     * authorized?
          GOTO      DACN9000 IF NOT EQUAL
...          COMPARE   FMJPREV,ONE         * reversal?
...          GOTO      DACN1000 IF EQUAL
.
          COMPARE   "23",CVERT        * full page?
          GOTO      DACN8000 IF EQUAL
.
          UNPACK    FMJPPDAT,CCENT,CYEAR,CMON,CDAY
          CALL      PACDATE
          MOVE      "Unknown                              ",FMJMDESC
          PACK      KEY7,FMJPJTY,FMJPJID,SP70
          CALL      RDFMJM1
          BRANCH    FMJPREV,DACN2003
.
          UNPACK    FMJMDESC,KEY4
          CALL      RDFMTD1
          BRANCH    OVRCD,DACN2007
          PACK      FMJMDESC,FMTDDESC,SP70
          GOTO      DACN2007
.
DACN2003  MULT      SEQ,FMJPDTOT
.
DACN2007  MOVE      FAMT,DAMT
          FEDIT     FMJPDTOT,DAMT
          MOVE      FMJMDESC,D30
          DISPLAY   *P1:CVERT,*EL,*V2LON,DISPCNT,*HOFF,DOT:
                    *P6:CVERT,FMJPJTY,FMJPJID:
                    *P14:CVERT,FMJPBAT:
                    *P20:CVERT,D30:
                    *P51:CVERT,CPCDATE,DAMT
.
DACN2010  ADD       ONE,RECCNT
          MOVE      CVERT,FORM2
          SUB       "5",FORM2
          PACK      KEY6,ZERO,FMJPBAT
          STORE     KEY6,FORM2,SEL01,SEL02,SEL03,SEL04,SEL05,SEL06,SEL07:
                               SEL08,SEL09,SEL10,SEL11,SEL12,SEL13,SEL14:
                               SEL15,SEL16,SEL17
          MOVE      DISPCNT,MAXDISP
          ADD       ONE,CVERT
          ADD       ONE,DISPCNT
          COMPARE   "17",NUMREC         * do we want to display the whole screen
          GOTO      DACN1000 IF EQUAL
.
          COMPARE   RECCNT,NUMREC       * if not have we displayed enough?
          GOTO      DACN1000 IF NOT EQUAL
          MOVE      ZERO,EXIT        * there is a next page
          GOTO      DACN9999
.
DACN8000  MOVE      ZERO,NEXT        * there is a next page
          CALL      RPFMJP3          * read back so when next page only 
.                                    * have to read forward
          MOVE      ZERO,EXIT        * there is a next page
          GOTO      DACN9999
.
DACN9000  COMPARE   "6",CVERT
          GOTO      DACN9500 IF NOT EQUAL
          MOVE      ZERO,MAXDISP
.
          MOVE      TWO,EXIT        * straight to insert thanks
          GOTO      DACN9999
.
DACN9500  MOVE      ONE,EXIT         * no next page
.
DACN9999  RETURN
. 
.*************************************************************************
.* CURP - Display current page                 Called by RBPFFM30        *
.*************************************************************************
CURP0000  MOVE      SEL01,KEY6
          MOVE      MAXDISP,NUMREC
          CALL      RSFMJP3           * read details of first record on screen
          CALL      RPFMJP3
          BRANCH    OVRCD,CURP1000
          GOTO      CURP2000
.
CURP1000  MOVE      SP20,KEY6
          CALL      RSFMJP3    
CURP2000  CALL      HEAD0000
.
CURP4000  MOVE      MAXDISP,NUMREC
          CALL      DACN0000          * display screen
.
CURP9999  RETURN
.*************************************************************************
.* CSEL - Clear the SEL variables               Called by DACN0000       *
.*************************************************************************
CSEL0000  UNPACK    SP70,SEL01,SEL02,SEL03,SEL04,SEL05
          UNPACK    SP70,SEL06,SEL07,SEL08,SEL09,SEL10
          UNPACK    SP70,SEL11,SEL12,SEL13,SEL14,SEL15,SEL16,SEL17
.
CSEL9999  RETURN
.*************************************************************************
.* PREV - read back 15 records from first one on screen for previous     *
.*        page                                                           *
.*                     called by : SACN                                  *
.*************************************************************************
PREV0000  MOVE      SEL01,KEY6
          CALL      RSFMJP3
          MOVE      ONE,FORM2
          SUB       ONE,PAGENO
.
PREV1000  CALL      RPFMJP3         * read back one
          BRANCH    OVRCD,PREV9000
.
          COMPARE   "17",FORM2      * have we read back far enough
          GOTO      PREV9999 IF EQUAL * go out if so
.
          ADD       ONE,FORM2
          GOTO      PREV1000
.
PREV9000  MOVE      SP70,KEY6       * reached eof - posy at start
          CALL      RSFMJP3
.
PREV9999  RETURN
.************************************************************************
.* ABAT - Authorize a batch.                                            *
.*                   called by : AUTH9000                               *
.************************************************************************
ABAT0000  LOAD      KEY6,CCITEM,SEL01,SEL02,SEL03,SEL04,SEL05,SEL06:
                                SEL07,SEL08,SEL09,SEL10,SEL11,SEL12:
                                SEL13,SEL14,SEL15,SEL16,SEL17
.
          UNPACK    KEY6,DIM1,FMJPBAT
          CALL      RDFMJP3
          CLEAR     BATFNAME
          APPEND    "bch",BATFNAME
          APPEND    FMJPBAT,BATFNAME
          RESET     BATFNAME
          REP       " 0",BATFNAME
.
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      BATFILE,BATFNAME
          TRAPCLR   IO
          BRANCH    OVRCD,ABAT9500
.
          CALL      ASBT0000               * authorize the batch
          GOTO      ABAT9999
.
ABAT9500  DISPLAY   *P1:24,*EL,*B:
                    "File for Batch number ",FMJPBAT," missing. ";
          CALL      HITENTER  
.
ABAT9999  RETURN
.************************************************************************
.* ASBT - Authorize a single batch.          Called by ABAT0000 ALL0000 *
.*        authorizes the batch that is open.                            *
.************************************************************************
ASBT0000  PACK      KEY7,FMJPJTY,FMJPJID,SP70
          CALL      RLFMJM1
          BRANCH    OVRCD,ASBT0050,ASBT0030
          GOTO      ASBT0050
.
ASBT0030  DISPLAY   *P1:24,*B,*EF,"Journal ",*V2LON,KEY7,*HOFF:
                    " is Locked - Try Again Later. ";
          CALL      HITENTER
          GOTO      ASBT9999
.
ASBT0050  CALL      RDBAT0           * read first sector
          CALL      RDBAT1           * read second sector
.
. set up batch control file variables & check accounting periods
.
          MOVE      FMJPPDAT,WORKDATE
          MOVE      BC1LEDG,FMLALEDG
          CALL      CFYR0000
          IF        EXIT=1
            MOVE      ERRMSG,DISPMSG
            BEEP
            CALL      MESSAGE1
            GOTO      ASBT9999
          ENDIF
          IF        PERLOCK=1
            MOVE      "Accrual Accounting Period Locked - ",DISPMSG
            BEEP
            CALL      MESSAGE1
            GOTO      ASBT9999
          ENDIF
.
          COMPARE   ONE,FMJPTYP
          GOTO      ASBT0090 IF NOT EQUAL
.
          MOVE      FMJPCDAT,WORKDATE
          MOVE      BC1LEDG,FMLALEDG
          CALL      CFYR0000
          IF        EXIT=1
            MOVE      ERRMSG,DISPMSG
            BEEP
            CALL      MESSAGE1
            GOTO      ASBT9999
          ENDIF
          IF        PERLOCK=1
            MOVE      "Cash Accounting Period Locked - ",DISPMSG
            BEEP
            CALL      MESSAGE1
            GOTO      ASBT9999
          ENDIF
.
ASBT0090  DISPLAY   *P1:24,*EL,"Authorizing Batch : ",*V2LON,FMJPBAT;
.
          MOVE      BC1BATCH,FMBCBAT
          MOVE      TWO,FMBCSTA    * set to awaiting Printing
          MOVE      BC0NXTSC,FMBCSEC
          MOVE      BC1KEYT,FMBCTOT
          MOVE      ZERO,FMBCDIS     * no discounts
          MOVE      BC1OPER,FMBCUID
          PACK      FMBCDAT,CCC,CYY,CMM,CDD
          REP       " 0",FMBCDAT
          MOVE      FMJPPDAT,FMBCPDAT
          MOVE      FMJPCDAT,FMBCCDAT
          MOVE      BC1LEDG,FMBCLED
          BRANCH    FMJPTYP,ASBT0100
          MOVE      "JA",FMBCTRT    * set to journal transaction type
          GOTO      ASBT0200
.
ASBT0100  MOVE      "CJ",FMBCTRT    * set to cash journal transaction type
.
ASBT0200  MOVE      ZERO,FMBCINV    * no inventory directory number
.
. Write to the batch control file
.
          PACK      KEY5,FMBCBAT
          CALL      RAFMBC1         * is it on file
          BRANCH    OVRCD,ASBT1000
.
          CALL      UPFMBC1
          GOTO      ASBT2000
.
ASBT1000  CALL      WRFMBC1
.
. Update the posting file status to Authorized
.
ASBT2000  PACK      KEY5,FMJPBAT
          CALL      RDFMJP1
          BRANCH    OVRCD,ASBT3000
.
          MOVE      ONE,FMJPAUTH
          CALL      UPFMJP1
          GOTO      ASBT4000
.
ASBT3000  MOVE      ZERO,FMJPAUTH
          CALL      WRFMJP1
.
ASBT4000  PACK      KEY7,FMJPJTY,FMJPJID,SP70
          CALL      UUFMJM1
.
ASBT9999  RETURN
.************************************************************************
.* ALL - all bathces to be authorized                                   *
.************************************************************************
ALL0000   PACK      KEY6,ZERO,SP10
          CALL      RSFMJP3
.
ALL1000   CALL      RKFMJP3           * read next record
          BRANCH    OVRCD,ALL9999
.
          MOVE      ZERO,DIM1
          MATCH     DIM1,FMJPAUTH     * authorized?
          GOTO      ALL9999 IF NOT EQUAL
.
          CLEAR     BATFNAME
          APPEND    "bch",BATFNAME
          APPEND    FMJPBAT,BATFNAME
          RESET     BATFNAME
          REP       " 0",BATFNAME
.
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      BATFILE,BATFNAME
          TRAPCLR   IO
          BRANCH    OVRCD,ALL9500 
.
          CALL      ASBT0000               * authorize the batch
          GOTO      ALL1000
.
ALL9500   DISPLAY   *P1:24,*EL,"File for Batch number ",FMJPBAT," missing. ";
          CALL      HITENTER  
          GOTO      ALL1000
.
ALL9999   RETURN 
.************************************************************************
.* DAL - all bathces to be deleted                                      *
.************************************************************************
DAL0000   PACK      KEY6,ZERO,SP10
          CALL      RSFMJP3
.
DAL1000   CALL      RKFMJP3           * read next record
          BRANCH    OVRCD,DAL9999
.
          MOVE      ZERO,DIM1
          MATCH     DIM1,FMJPAUTH     * authorized?
          GOTO      DAL9999 IF NOT EQUAL
.
          MOVE      ZERO,CCITEM
          PACK      KEY6,ZERO,FMJPBAT,SP70
          CALL      DELR0000               * delete the batch
          GOTO      DAL1000
.
DAL9999   RETURN 
.**********************************************************************
.*                         TRAN0000                                   *
.*                   handle the display of transactions               *
.**********************************************************************
.
TRAN0000  MATCH     "PY",FMBCTRT
          GOTO      TRAN0100 IF EQUAL
          MATCH     "CS",FMBCTRT
          GOTO      TRAN0100 IF EQUAL
          MATCH     "CJ",FMBCTRT
          GOTO      TRAN0100 IF EQUAL
          MOVE      ZERO,CASHFLAG
          GOTO      TRAN0500

TRAN0100  DISPLAY   *P1:24,*EL,"Display Cash Details (",*V2LON,"Y",*HOFF,"/":
                    *V2LON,"N",*HOFF,") : ";
          MOVE      "24",CVERT
          MOVE      "30",CCOL
          CALL      YORN0000
          MOVE      FYESNO,CASHFLAG
.
TRAN0500  MATCH     "4",FMBCSTA
          GOTO      TRAN6000 IF EQUAL
.
          PACK      FILNAME,BCH,BATCHNO
          REP       " 0",FILNAME
          OPEN      BATFILE,FILNAME
          CALL      DTDH0000             * display the headings
.
          MOVE      ONE,SCRNUMB
          MOVE      TWO,SECTOR
          MOVE      TWO,BC0NXTSC       
          CALL      DTXT0000             * display the screen
.
TRAN1000  CALL      NPEX0000             * select item next, previous
.
          BRANCH    EXIT,TRAN3000,TRAN4000,TRAN5000
          GOTO      TRAN9999
.
TRAN3000  GOTO      TRAN1000
TRAN4000  CALL      NPTX0000             * display next page
          GOTO      TRAN1000
TRAN5000  CALL      PPTX0000             * display previous page
          GOTO      TRAN1000
.
TRAN6000  BRANCH    CASHFLAG,TRAN6100
          PACK      FILNAME,FMST,ACCYEAR
          OPEN      FMSTRNA1,FILNAME
          GOTO      TRAN6200
.
TRAN6100  PACK      FILNAME,FMSR,CASYEAR
          OPEN      FMSTRNA1,FILNAME
.
TRAN6200  CALL      DTDH0000             * display the headings
.
          MOVE      ONE,SCRNUMB
          PACK      KEY10,BATCHNO,SP10
          CALL      DTRN0000             * display the screen
.
TRAN7000  CALL      NPEX0000             * select item next, previous
.
          BRANCH    EXIT,TRAN7100,TRAN7200,TRAN7300
          GOTO      TRAN9999
.
TRAN7100  GOTO      TRAN7000
.
TRAN7200  CALL      NPPR0000             * display next page
          GOTO      TRAN7000
.
TRAN7300  CALL      PPPR0000             * display previous page
          GOTO      TRAN7000
.
TRAN9999  RETURN
.
.**********************************************************************
.*                        DTRN0000                                    *
.*                  Display the sub-accounts                          *
.**********************************************************************
.
.----  The key should already be passed correctly packed -----
.
DTRN0000  DISPLAY   *P1:7,*EF
          MOVE      ZERO,RECCOUNT
          MOVE      ZERO,NEXTSCRF
          MOVE      SIX,ROW
          CALL      CTRN0000
 
          CALL      RSFMTR1
DTRN1000  CALL      RKFMTR1
          BRANCH    OVRCD,DTRN9999
.
          MOVE      FMTRBAT,F5        * check if same batch      
          COMPARE   BATCHNO,F5        * check if same batch      
          GOTO      DTRN9999 IF NOT EQUAL
.
          ADD       ONE,RECCOUNT         * increment the record count
.
          ADD       ONE,ROW              * increment the row
.
          COMPARE   TEN7,RECCOUNT        * test for a full screen
          GOTO      DTRN8000 IF EQUAL
.
DTRN4000  CALL      STRN0000             * store the key
.
          CALL      DSPR0000             * display the record
.
          GOTO      DTRN1000
.
.----- Full screen ---
.
DTRN8000  MOVE      ONE,NEXTSCRF         * set next screen flag
          CALL      RPFMTR1              * re-set record pointer
          SUB       ONE,ROW              * re-set the row
          SUB       ONE,RECCOUNT         * re-set the record count
.
DTRN9999  RETURN
.
.**********************************************************************
.*                          DSPR0000                                  8
.*                Display a sub-account record                        *
.**********************************************************************
.
DSPR0000  CLEAR     FMAMDESC
          PACK      KEY14,FMTRLEDG,FMTRACCT
          CALL      RDFMAM1
.
          MATCH     "JA",FMTRTYPE
          GOTO      DSPR1000 IF EQUAL
.
          MATCH     "PY",FMTRTYPE
          GOTO      DSPR1000 IF EQUAL
.
          MATCH     "IN",FMTRTYPE
          GOTO      DSPR1000 IF EQUAL
.
          MOVE      "Cr",DEBCRED
          GOTO      DSPR5000
DSPR1000  MOVE      "Dr",DEBCRED
DSPR5000  MOVE      FAMT,OUTFORM
          FEDIT     FMTRAMT,OUTFORM
.
          DISPLAY   *P1:ROW,FMTRLEDG,"/",FMTRACCT,*P17:ROW,FMAMDESC:
                    *P56:ROW,DEBCRED,*P61:ROW,OUTFORM
.
DSPR9999 RETURN
.**********************************************************************
.*                         DTDH0000                                   *
.*                    display transaction details heading             *
.**********************************************************************
.
DTDH0000
          IF        IBCNUBAS=1
            DISPLAY   *P1:6,*EF:
                      *P1:6,*V2LON,*ULON:
                      *P1:6,"Ledger/Account ":                
                      *P17:6,"Description                        ":
                      *P53:6,BASDESC:       
                      *P57:6,"D/C":         
                      *P63:6,"Transaction Amount"               
          ELSE
            DISPLAY   *P1:6,*EF:
                      *P1:6,*V2LON,*ULON:
                      *P1:6,"Ledger/Account ":                
                      *P17:6,"Description                        ":
                      *P57:6,"D/C":         
                      *P63:6,"Transaction Amount"               
          ENDIF
DTDH9999  RETURN
.         
.**********************************************************************
.*                        NPPR0000                                    *
.*               Display the next page                                *
.**********************************************************************
.
NPPR0000  MOVE      TEN6,ITEM
          CALL      LTRN0000
.
          PACK      KEY10,DIM10
          CALL      DTRN0000
.
NPPR9999  RETURN
.
.**********************************************************************
.*                        PPPR0000                                    *
.*                Display the previous page                           *
.**********************************************************************
.
PPPR0000  MOVE      ONE,ITEM
          CALL      LTRN0000
.
          PACK      KEY10,DIM10
.
          CALL      RAFMTR1
          MOVE      ZERO,ITEM
.
.-----  read no-of-lines-on-screen + 1 back ----
.
PPPR1000  CALL      RPFMTR1
          BRANCH    OVRCD,PPPR6000
          ADD       ONE,ITEM
.
          COMPARE   TEN7,ITEM
          GOTO      PPPR5000 IF EQUAL
.
          GOTO      PPPR1000
.
PPPR5000  PACK      KEY10,FMTRBAT,FMTRUNIQ
          CALL      DTRN0000
          GOTO      PPPR9999
PPPR6000  PACK      KEY10,SP10       
          CALL      DTRN0000
.
PPPR9999  RETURN
.**********************************************************************
.*                         STRN0000                                   *
.*                 Store the batch details                            *
.**********************************************************************
.
STRN0000  PACK      DIM10,FMTRBAT,FMTRUNIQ
          STORE     DIM10,RECCOUNT,PROCC01,PROCC02,PROCC03,PROCC04,PROCC05:
                                   PROCC06,PROCC07,PROCC08,PROCC09,PROCC10:
                                   PROCC11,PROCC12,PROCC13,PROCC14,PROCC15:
                                   PROCC16,PROCC17,PROCC18
STRN9999  RETURN 
.
LTRN0000  LOAD      DIM10,ITEM,PROCC01,PROCC02,PROCC03,PROCC04,PROCC05:
                               PROCC06,PROCC07,PROCC08,PROCC09,PROCC10:
                               PROCC11,PROCC12,PROCC13,PROCC14,PROCC15:
                                   PROCC16,PROCC17,PROCC18
LTRN9999  RETURN
.
CTRN0000  MOVE      ZERO,ITEM 
CTRN1000  ADD       ONE,ITEM 
          PACK      DIM10,SP20
          STORE     DIM10,ITEM,PROCC01,PROCC02,PROCC03,PROCC04,PROCC05:
                                   PROCC06,PROCC07,PROCC08,PROCC09,PROCC10:
                                   PROCC11,PROCC12,PROCC13,PROCC14,PROCC15:
                                   PROCC16,PROCC17,PROCC18
          COMPARE   TEN5,ITEM
          GOTO      CTRN9999 IF EQUAL
.
          GOTO      CTRN1000
.
CTRN9999  RETURN
.
.**********************************************************************
.*                        DTXT0000                                    *
.*                  Display the sub-accounts                          *
.**********************************************************************
.
.----  The key should already be passed correctly packed -----
.
DTXT0000  DISPLAY   *P1:7,*EF
          MOVE      ZERO,RECCOUNT
          MOVE      ZERO,NEXTSCRF
          MOVE      SIX,ROW
          CALL      CTXT0000
.
DTXT1000  CALL      RDBATC
          GOTO      DTXT9999 IF OVER
.
          ADD       ONE,RECCOUNT         * increment the record count
          ADD       ONE,SECTOR
          MOVE      SECTOR,BC0NXTSC
          ADD       ONE,ROW              * increment the row
.
          COMPARE   TEN7,RECCOUNT        * test for a full screen
          GOTO      DTXT8000 IF EQUAL
.
DTXT4000  CALL      STXT0000             * store the key
.
          CALL      DSTX0000             * display the record
.
          GOTO      DTXT1000
.
.----- Full screen ---
.
DTXT8000  MOVE      ONE,NEXTSCRF         * set next screen flag
          SUB       ONE,ROW              * re-set the row
          SUB       ONE,RECCOUNT         * re-set the record count
.
DTXT9999  RETURN
.
.**********************************************************************
.*                          DSTX0000                                  *
.*                Display a sub-account record                        *
.**********************************************************************
.
DSTX0000  CLEAR     FMAMDESC
.
          BRANCH    CASHFLAG,DSTX0200
DSTX0100  PACK      KEY14,BCLEDG,BCACCT   
          CALL      RDFMAM1
          GOTO      DSTX0300
.
DSTX0200  MATCH     "CJ",FMBCTRT
          GOTO      DSTX0100 IF EQUAL
          MATCH     SP70,BCACCTP
          GOTO      DSTX0100 IF EQUAL
          MOVE      BCACCTP,BCACCT        
          GOTO      DSTX0100
.
DSTX0300  MATCH     "PY",BCTRAN  
          GOTO      DSTX1000 IF EQUAL
.
          MATCH     "JA",BCTRAN  
          GOTO      DSTX1000 IF EQUAL
.
          MATCH     "IN",BCTRAN  
          GOTO      DSTX1000 IF EQUAL
.
          MOVE      "Cr",DEBCRED
          GOTO      DSTX5000
DSTX1000  MOVE      "Dr",DEBCRED
DSTX5000  MOVE      FAMT,OUTFORM
          FEDIT     BCAMT,OUTFORM
          IF        IBCNUBAS=1
            DISPLAY   *P1:ROW,BCLEDG,"/",BCACCT,*P17:ROW,FMAMDESC:
                      *P53:ROW,BCBASC,*P58:ROW,DEBCRED,*P61:ROW,OUTFORM
          ELSE
            DISPLAY   *P1:ROW,BCLEDG,"/",BCACCT,*P17:ROW,FMAMDESC:
                      *P58:ROW,DEBCRED,*P61:ROW,OUTFORM
          ENDIF
.
DSTX9999  RETURN
          
.**********************************************************************
.*                        NPTX0000                                    *
.*               Display the next page                                *
.**********************************************************************
.
NPTX0000  MOVE      TEN6,ITEM
          CALL      LTXT0000
.
          MOVE      SECTOR,BC0NXTSC
          CALL      DTXT0000
.
NPTX9999  RETURN
.
.**********************************************************************
.*                        PPTX0000                                    *
.*                Display the previous page                           *
.**********************************************************************
.
PPTX0000  MOVE      ONE,ITEM
          CALL      LTXT0000
.
          SUB       TEN7,SECTOR
          MOVE      SECTOR,BC0NXTSC
          CALL      DTXT0000
.
PPTX9999  RETURN
.**********************************************************************
.*                         STXT0000                                   *
.*                 Store the batch details                            *
.**********************************************************************
STXT0000 STORE     SECTOR,RECCOUNT,SECTOR01,SECTOR02,SECTOR03,SECTOR04,SECTOR05:
                                   SECTOR06,SECTOR07,SECTOR08,SECTOR09,SECTOR10:
                                   SECTOR11,SECTOR12,SECTOR13,SECTOR14,SECTOR15:
                                   SECTOR16,SECTOR17,SECTOR18
STXT9999  RETURN 
.
LTXT0000 LOAD      SECTOR,ITEM,SECTOR01,SECTOR02,SECTOR03,SECTOR04,SECTOR05:
                               SECTOR06,SECTOR07,SECTOR08,SECTOR09,SECTOR10:
                               SECTOR11,SECTOR12,SECTOR13,SECTOR14,SECTOR15:
                                   SECTOR16,SECTOR17,SECTOR18

LTXT9999  RETURN
.
CTXT0000  MOVE      ZERO,ITEM 
CTXT1000  ADD       ONE,ITEM 
          MOVE      ZERO,FORM1 
          STORE     FORM1,ITEM,SECTOR01,SECTOR02,SECTOR03,SECTOR04,SECTOR05:
                                   SECTOR06,SECTOR07,SECTOR08,SECTOR09,SECTOR10:
                                   SECTOR11,SECTOR12,SECTOR13,SECTOR14,SECTOR15:
                                   SECTOR16,SECTOR17,SECTOR18
          COMPARE   TEN5,ITEM
          GOTO      CTXT9999 IF EQUAL
.
          GOTO      CTXT1000
.
CTXT9999  RETURN
.**********************************************************************
.*                         NPEX0000                                   *
.*         This handles the         next, previous, exit prompts      *
.**********************************************************************
NPEX0000  BRANCH    NEXTSCRF,NPEX5000
.
          BRANCH    SCRNUMB,NPEX1000
.
.----- Prompt is - select, previous, exit -----
.
          CALL      PPEX0000
          GOTO      NPEX9999
.
.----  Prompt is - select, exit -----
.
NPEX1000  CALL      PEEX0000
          GOTO      NPEX9999
.
	
NPEX5000  BRANCH    SCRNUMB,NPEX6000
.
.----  Prompt is - select, next, previous, exit ----
.
          CALL      PNPE0000
          GOTO      NPEX9999
.
.---- Prompt is - Select, next, exit ----
.
NPEX6000  CALL      PNEX0000
          
NPEX9999  RETURN
.
.*********************************************************************
.*                         PEEX0000                                  *
.*                handles select exit prompt                         *
.*********************************************************************
.
PEEX0000  MOVE      ZERO,EXIT
          DISPLAY   *P1:24,*EL:
                    "e(",*V2LON,"X",*HOFF,")it : "
.
PEEX1000  KEYIN     *P10:24,*DV,UNDLN1:
                    *P10:24,*V2LON,DIM1:
                    *P10:24,*DV,DIM1
.
.
          REP       UPPLOW,DIM1
          MATCH     "X    ",DIM1
          GOTO      PEEX9999 IF EQUAL
.
          BEEP
          GOTO      PEEX1000
.
.
PEEX9999  RETURN
.
.*********************************************************************
.*                         PNEX0000                                  *
.*              handles select, next, exit prompt                    *
.*********************************************************************
.
PNEX0000  MOVE      ZERO,EXIT
          DISPLAY   *P1:24,*EL:
                    "(",*V2LON,"N",*HOFF,")ext, ":
                    "e(",*V2LON,"X",*HOFF,")it : "
.
PNEX1000  KEYIN     *P18:24,*DV,UNDLN1:
                    *P18:24,*V2LON,DIM1:
                    *P18:24,*DV,DIM1
.
          REP       UPPLOW,DIM1
          MATCH     "X",DIM1
          GOTO      PNEX9999 IF EQUAL
.
          MATCH     "N",DIM1
          GOTO      PNEX3000 IF NOT EQUAL
. 
          MOVE      TWO,EXIT 
          ADD       ONE,SCRNUMB
.
          COMPARE   SCRNUMB,SCRCOUNT
          GOTO      PNEX9999 IF NOT EQUAL
.
          ADD       ONE,SCRCOUNT
          GOTO      PNEX9999
PNEX3000  BEEP
          GOTO      PNEX1000
.
.
PNEX9999  RETURN
.
.*********************************************************************
.*                        PPEX0000                                   *
.*           handles select, previous, exit prompt                   *
.*********************************************************************
.
PPEX0000  MOVE      ZERO,EXIT
          DISPLAY   *P1:24,*EL:
                    "(",*V2LON,"P",*HOFF,")revious, ":
                    "e(",*V2LON,"X",*HOFF,")it : "
.
PPEX1000  KEYIN     *P22:24,*DV,UNDLN1:
                    *P22:24,*V2LON,DIM1:
                    *P22:24,*DV,DIM1
.
          REP       UPPLOW,DIM1
          MATCH     "X",DIM1
          GOTO      PPEX9999 IF EQUAL
.
          MATCH     "P",DIM1
          GOTO      PPEX3000 IF NOT EQUAL
.
          SUB       ONE,SCRNUMB
          MOVE      THREE,EXIT 
          GOTO      PPEX9999
PPEX3000  BEEP
          GOTO      PPEX1000
.
PPEX9999  RETURN
.
.**********************************************************************
.*                         PNPE0000                                   *
.*            Handles select, next, previous, exit, prompt            *
.**********************************************************************
.
PNPE0000  MOVE      ZERO,EXIT
          DISPLAY   *P1:24,*EL:
                    "(",*V2LON,"P",*HOFF,")revious, ":
                    "(",*V2LON,"N",*HOFF,")ext, ":
                    "e(",*V2LON,"X",*HOFF,")it : "
.
PNPE1000  KEYIN     *P30:24,*DV,UNDLN1:
                    *P30:24,*V2LON,DIM1:
                    *P30:24,*DV,DIM1
.
          REP       UPPLOW,DIM1
          MATCH     "X",DIM1
          GOTO      PNPE9999 IF EQUAL
.
          MATCH     "P",DIM1
          GOTO      PNPE3000 IF NOT EQUAL
.
          SUB       ONE,SCRNUMB
          MOVE      THREE,EXIT 
          GOTO      PNPE9999
PNPE3000  MATCH     "N",DIM1
          GOTO      PNPE4000 IF NOT EQUAL
          MOVE      TWO,EXIT
          ADD       ONE,SCRNUMB
          COMPARE   SCRNUMB,SCRCOUNT
          GOTO      PNPE9999 IF NOT EQUAL
.
          ADD       ONE,SCRCOUNT
          GOTO      PNPE9999
PNPE4000  BEEP     
          GOTO      PNPE1000
.
PNPE9999  RETURN
.******************************************************************************
.* Redisplays                                                                 *
.******************************************************************************
RLMCFM00
          RETURN
.******************************************************************************
.* INCLUDES FOR I/O'S                                                         *
.******************************************************************************
.
          INC       STDGENCD           * FMS Acc. standard routines
          INC       FMSAMAIO/INC
          INC       FMSBCFIO/INC
          INC       FMSCSAIO/INC
          INC       FMSCONIO/INC
          INC       FMSCTRIO/INC
          INC       FMSJDTIO/INC
          INC       FMSJPDIO/INC
          INC       FMSJMAIO/INC
          INC       FMSLMAIO/INC
          INC       FMSLMCIO/INC
          INC       FMSTDSIO/INC
          INC       FMSTRNIO/INC
          INC       FMSSIBIO/INC
          INC       IBABASIO/INC
          INC       IBABATIO/INC
          INC       IBAPASIO/INC
.
          INC       FMSLMCKY 
.
