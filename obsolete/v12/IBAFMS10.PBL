. **********************************************************************
. * System    :   Accounting System                                    *
. * Program   :   IBAFMS10                                             *
. * Desc      :   Group Allocation Maintenance                         *
. **********************************************************************
. * Date      :   12.10.1990                                           *
. * Author    :   Neeriem Dye (IBA)                                    *
. * Mods      :                                                        *
. **********************************************************************
. * V9.02.00  03.05.2002 Glenn Saunders                                *
. *           Export to new release i.e. v9.02 from vf.09              *
. **********************************************************************
. * VF.00.02  23.12.1999 Sandra Barcham                                *
. *           Recompiled for FMSCCAFD                                  *
. *           srf 646145                                               *
. * VF.00.01  09.11.1999 Charles Handaya                               *
. *           Fix Y2K of Audit Files Date (CCYYMMDD)                   *
. **********************************************************************
.$$$$$$
.        PROGRAM IBAFMS10
.             open files and initialise variables
.             WHILE user wants to add/modify/delete DO
.                  get desired option (add, modify or delete)
.                  CASE option OF
.                       ADD     : WHILE user wants to add records DO
.                                      accept initial values for screens A,B,C
.                                      IF user wants to post data
.                                           THEN write new data
.                                      END IF
.                                 END WHILE
.                       MODIFY  : WHILE user wants to modify records DO
.                                      get used to select screen (A,B,C)
.                                      get and display desired record
.                                      WHILE user wants modify screen data DO
.                                           get number of item to be modified
.                                           allow user to modify option
.                                      END WHILE
.                                      IF user wants to post data
.                                           THEN update data
.                                      END IF
.                                 END WHILE
.                       DELETE  : WHILE user wants to delete records DO
.                                      get and display desired record's screen A
.                                      IF user wants to delete data
.                                           THEN delete data
.                                      END IF
.                                 END WHILE
.                  END CASE
.             END WHILE
.        END
.$$$$$$
. Standard FMS Accounting System Include
.---------------------------------------
          INC       FMSSTDDF
          INC       FMSUPDDF           * standard update include
          INC       FMSUDADF           * FMS audit update variables
.
.==============================================================================
.FILE DESCRIPTION INCLUDES
.-------------------------
          INC       FMSBPFFD/INC
          INC       FMSCCAFD/INC       * cost centre
          INC       FMSCCCFD/INC       * consolidated cost centre
          INC       FMSCTRFD/INC       * normal tran file
          INC       FMSGRCFD/INC       * cc Group Allocation
          INC       FMSGRPFD/INC       * Group Allocation
          INC       FMSGRSFD/INC       * subj Group Allocation
          INC       FMSLEVFD/INC
          INC       FMSRSFFD/INC       * report seq file
          INC       FMSSBAFD/INC       * subjective
          INC       FMSSLBFD/INC       * subjective budg link
          INC       FMSSSCFD/INC
          INC       FMSSTRFD/INC       * stat tran file
          INC       FMSTRNFD/INC       * normal tran file
          INC       FMSUWPFD/INC       * wp
          INC       FMSXCSFD/INC
.
.==============================================================================
.LOCAL VARIABLE DEFINITION
.-------------------------
.
DSIX      INIT      "6"
DSEVEN    INIT      "7"
DEIGHT    INIT      "8"
DESC1     DIM       127
DNINE     INIT      "9"
CCLEV     DIM       3        * cc level
DELALL    FORM      1        * delete all the way up data tree in DREC   1=yes
FILENAME  DIM       8
SLBNAME   DIM       8
FMSO      INIT      "fmso"
HEADSEQ   INIT      "00000"
TOTSEQ    INIT      "ZZZZZ"
.
MAXITEMS  FORM      "16"               * maximum no. of items on screen B, C + 1
.
ACCEPT    FORM      1                  * accept mode (1=on)
COSTCODE  DIM       12                 * cost centre code
CURPAGE   FORM      3                  * current page number
CURPRTP   DIM       5                  * new print position
DESC2     DIM       30                 * temp description
FROMCOCE  DIM       12                 * from cost centre code
FROMLEDG  DIM       2                  * from ledger
ITEMNUM   FORM      2                  * item number
MORE      FORM      1
OPTIONA   FORM      1                  * screen selection keyin var
OPTIONC   FORM      2                  * screen selection keyin var
PAGENO    FORM      3                  * current page number
POSTACCT  DIM       12                 * posting account "add to account"
SAVGROUP  DIM       3                  * save group allocation code
SAVITEM   FORM      2                  * item number for screen C
SAVKEY19  DIM       19                 * key save for audits
SAVLEDG   DIM       2                  * key save for ledger
SCRNO     FORM      1                  * screen number
SKEY      DIM       35                 * key save for screen C
SUBJCODE  DIM       12                 * subjective code
TEMPACCT  DIM       12                 * temp account
TEMPCPOS  DIM       5                  * temp cc print position
TEMPCOST  DIM       12                 * temp cc
TEMPDESC  DIM       30                 * temp description
TEMPSPOS  DIM       5                  * temp subj print position
TEMPSUBJ  DIM       12                 * temp subj
TOCOCE    DIM       12                 * from cost centre code
WAUDTYPE  FORM      1                  * write audit parameter
.
.
OLDDCOST  FORM      1        * 1=use old cc data
OLDDSUBJ  FORM      1        * 1=use old subj data
OLDADDT   DIM       12       * old subj add to
OLDPPOS   DIM       5        * old subj print pos
OLDSTAT   FORM      2        * old status type
RESTFMSA  DIM       14
SFMTS01   DIM       43
SFMTS02   DIM       43
SFMTS03   DIM       43
SFMTS04   DIM       43
SFMTS05   DIM       43
SFMTS06   DIM       43
SFMTS07   DIM       43
SFMTS08   DIM       43
SFMTS09   DIM       43
SFMTS10   DIM       43
SKEY31    DIM       31
SKEY27    DIM       27
SKEY43    DIM       43
SKIPFMTU  FORM      1
WRECLEV   FORM      2
.
DIM1E     DIM       1
DIMA14    DIM       14
DIMB14    DIM       14
DIMC5     DIM       5
DIMD35    DIM       35
DIME5     DIM       5
SAVEDATA  DIM       50
SAVECCC   DIM       50       * field to ccc data
.
MODESC    INIT      "      "                  * description type
MODESC1   INIT      "Insert"
MODESC2   INIT      "Delete"
RANGFLAG  FORM      1
SKIPLINE  FORM      1
NORMFIL1  DIM       8                  * norm tran file
NORMFIL2  DIM       8                  * norm tran file
STATFILE  DIM       8                  * stat tran file
F4YEAR    FORM      4
FMST      INIT      "fmst"
FMSA      INIT      "fmsa"
.
PRGID     INIT      "IBAFMS10"
PRGNAM    INIT      "Group Allocation Maintenance"
VERSION   INIT      "V12.00.00"
.
.******************************************************************************
.*  MAINLINE - Controlling Logic                                              *
.******************************************************************************
ML0000    CALL      INIT0000           * display heading and open files
.
ML0100    CALL      SELOPTN            * insert/modify/delete/exit ?
          COMPARE   ZERO,COPTION
          GOTO      ML9999 IF EQUAL    * exit program
.
ML0200    CALL      PROC0000           * get gp alloc code
          BRANCH    EXIT,ML0100,ML0100 * exit option
.
          BRANCH    COPTION,ML1000,ML2000,ML3000
.
.---- add data ----
.
ML1000    CALL      DEFV0000           * set up default values
          MOVE      ONE,ACCEPT         * accept mode
          CALL      SELA0000           * modify screen A
          BRANCH    EXIT,ML0200        * don't save data
.
          CALL      POST0000           * post data
          MOVE      ONE,ACCEPT         * accept mode
          CALL      SELB0000           * modify screen B
          MOVE      ONE,ACCEPT         * accept mode
          CALL      SELC0000           * modify screen C
          GOTO      ML0200             * get next entry
.
.---- modify data ----
.
ML2000    MOVE      ZERO,ACCEPT        * modify mode
          CALL      OPTN0000           * get screen to modify
          BRANCH    OPTIONA,ML2100,ML2200,ML2300
          GOTO      ML0200             * exit screen
.
ML2100    CALL      SELA0000           * modify screen A
          BRANCH    EXIT,ML2000        * quit
.
          CALL      POST0000           * post data
          GOTO      ML2000
.
ML2200    CALL      SELB0000           * modify screen B
          GOTO      ML2000
.
ML2300    CALL      SELC0000           * modify screen C
          GOTO      ML2000
.
.---- delete data ----
.
ML3000    MOVE      ZERO,ACCEPT        * modify mode
          CALL      SCRA0000           * display basic details screen
          CALL      DELQST             * ok to delete (y/n/c) ?
          SUB       ONE,CEXIT
          BRANCH    CEXIT,ML0200,ML0100
.
          CALL      DELT0000           * delete data
          GOTO      ML0200             * get next entry
.
.
ML9999    MOVE      PORT,PORTCODE
          CALL      CTUP0000           * Update all changed accounts
          CHAIN     PGM                * chain back to menu
.
.******************************************************************************
.* INIT - Open Files                             Called by ML0000             *
.******************************************************************************
INIT0000  CALL      DISPHEAD                     * display screen
          CALL      OUPD0000                     * open files for update procs
.
          DISPLAY   *P56:24,"Opening fmsbpfaf";  * report seq file
          OPEN      FMSBPFA1,"fmsbpfaf"
.
          DISPLAY   *P64:24,"fmsgrpaf";  * group allocation file
          OPEN      FMSGRPA1,"fmsgrpaf"
.
          DISPLAY   *P64:24,"fmsgrcaf";  * cc group allocation file
          OPEN      FMSGRCA1,"fmsgrcaf"
.
          DISPLAY   *P64:24,"fmsgrsaf";  * subj group allocation file
          OPEN      FMSGRSA1,"fmsgrsaf"
.
          DISPLAY   *P64:24,"fmslevaf";
          OPEN      FMSLEVA1,"fmslevaf"
.
          DISPLAY   *P64:24,"fmsccaaf";  * cost centre file
          OPEN      FMSCCAA1,"fmsccaaf"
          OPEN      FMSCCAA2,"fmsccaaf"
.
          DISPLAY   *P64:24,"fmscccaf";  * consolidated cost centre file
          OPEN      FMSCCCA1,"fmscccaf"
          OPEN      FMSCCCA2,"fmscccaf"
.
          DISPLAY   *P64:24,"fmssbaaf";  * subjective master file
          OPEN      FMSSBAA1,"fmssbaaf"
          OPEN      FMSSBAA2,"fmssbaaf"
.
          DISPLAY   *P64:24,"fmsuwpaf";  * wp file
          OPEN      FMSUWPA1,"fmsuwpaf"
.
          DISPLAY   *P64:24,"fmsaudam";  * account audit file
          OPEN      FMSAUDAM,"fmsaudam"
.
          DISPLAY   *P64:24,"fmsaudsa";  * subjective audit file
          OPEN      FMSAUDSA,"fmsaudsa"
.
          DISPLAY   *P64:24,"fmsrsfaf";  * report seq file
          OPEN      FMSRSFA1,"fmsrsfaf"
          OPEN      FMSRSFA2,"fmsrsfaf"
.
          DISPLAY   *P64:24,"fmsxcsaf";
          OPEN      FMSXCSA1,"fmsxcsaf"
          OPEN      FMSXCSA2,"fmsxcsaf"
          OPEN      FMSXCSA3,"fmsxcsaf"
.
          DISPLAY   *P64:24,"fmssscaf";
          OPEN      FMSSSCA1,"fmssscaf"
          OPEN      FMSSSCA2,"fmssscaf"
.
          UNPACK    SP70,FILENAME,SLBNAME,LBUNAME,UTYPE
          UNPACK    SP70,NORMFIL1,NORMFIL2,STATFILE
.
          MOVE      ONE,CCENTRY        * we want century in date keyins
          MOVE      ONE,CCENTRY
          MOVE      ONE,CCANLDTE
          MOVE      ONE,CDEFDTE
          MOVE      ZERO,CHIGHLT
.
INIT9999  DISPLAY   *P1:24,*EL;
          RETURN
.******************************************************************************
.* SCRA - Display Screen A                       Called by SELA0000, redisps  *
.******************************************************************************
SCRA0000  MOVE      "1",SCRNO                    * screen number
          DISPLAY   *P1:4,"    Group Allocation     : ":
                    *V2LON,FMGPCODE,*EF:
                    *P1:6,*V2LON," 1",*HOFF,". Description          : ":
                    *V2LON,FMGPDESC;
.
SCRA9999  RETURN
.******************************************************************************
.* SCRB - Display screen B                       Called by SELB0000, redisps  *
.******************************************************************************
SCRB0000  MOVE      "2",SCRNO                    * screen number
          DISPLAY   *P1:4,"    Group Allocation     : ":
                    *V2LON,FMGPCODE,SP2,*HOFF,FMGPDESC,*EF:
                    *P28:6,*V2LON,"Related Subjectives":
                    *P1:7,*ULON,"Item",*P7:7,"Ledger/Subjectives":
                    *P66:7,"Seq. No."
.
SCRB9999  RETURN
.******************************************************************************
.* SCRC - Display screen C                       Called by SELC0000, redisps  *
.******************************************************************************
SCRC0000  MOVE      "4",SCRNO                    * screen number
          DISPLAY   *P1:4,"    Group Allocation     : ":
                    *V2LON,FMGPCODE,SP2,*HOFF,FMGPDESC,*EF:
                    *P28:6,*V2LON,"Related Cost Centres":
                    *P1:7,*ULON,"Item",*P7:7,"Ledger/Cost Centre":
                    *P66:7,"Seq. No."
.
SCRC9999  RETURN
.******************************************************************************
.* OPTN - Select option to display               Called by ML0000             *
.*        Returns : OPTIONA  (screen no. selected)                            *
.******************************************************************************
OPTN0000  PACK      KEY3,SAVGROUP
          CALL      RDFMGS1            * read current data
          DISPLAY   *P1:4,"    Group Allocation     : ":
                    *V2LON,FMGPCODE,*HOFF,SP2,FMGPDESC,*EF:
                    *P1:7,*V2LON," 0",*HOFF," = Exit":
                    *P1:8,*V2LON," 1",*HOFF," = Reporting Details":
                    *P1:9,*V2LON," 2",*HOFF," = Related Subjectives":
                   *P1:10,*V2LON," 3",*HOFF," = Related Cost Centres";
.
OPTN1000  KEYIN     *P5:12,"Select Option : _",*P21:12,*V2LON,OPTIONA
          COMPARE   ZERO,OPTIONA
          GOTO      OPTN9999 IF EQUAL            * exit
          BRANCH    OPTIONA,OPTN9999,OPTN9999,OPTN9999
          BEEP                                   * illegal option
          GOTO      OPTN1000
.
OPTN9999  RETURN
.******************************************************************************
.* DEFV - set up default variables               Called by ML0000             *
.******************************************************************************
DEFV0000  MOVE      SP70,FMGPDESC                * set description
.
DEFV9999  RETURN
.******************************************************************************
.* PROC - Enter Group Allocation                 Called by ML0000             *
.*       Returns : EXIT     (2=EXITCHAR entered, 1=nothing entered, 0=cont.)  *
.*                 FMGPCODE (Group Allocation Code)                           *
.******************************************************************************
PROC0000  MOVE      ZERO,SCRNO         * clear screen number
          DISPLAY   *P1:4,"    Group Allocation     : ",*EF;
          MOVE      "28",CCOL          * set up screen address
          MOVE      "4",CVERT
.
          COMPARE   ONE,COPTION
          CALL      AGRPFM00 IF EQUAL      * insert mode
.
          COMPARE   ONE,COPTION
          CALL      KGRPFM00 IF NOT EQUAL  * not in insert mode
.
          MOVE      FMGPCODE,SAVGROUP      * save group code
.
PROC9999  RETURN
.******************************************************************************
.* SELA - Modify screen A data                   Called by ML0000             *
.*        Returns : EXIT     (1=quit, 0=post)                                 *
.******************************************************************************
SELA0000  CALL      SCRA0000                     * display screen A
          BRANCH    ACCEPT,SELA1100              * in accept mode ?
.
.---- determine option to execute ----
.
SELA0100  CALL      MAINQST                      * select/post/cancel ?
.
          COMPARE   ZERO,CCITEM
          GOTO      SELA9000 IF EQUAL            * post ?
.
          COMPARE   SEQ,CCITEM
          GOTO      SELA9500 IF EQUAL            * cancel ?
.
          BRANCH    CCITEM,SELA1100              * execute option
          BEEP
          GOTO      SELA0100
.
.---- option 1 ----
.
SELA1100  MATCH     FMGPDESC,SP70
          GOTO      SELA1150 IF NOT EQUAL        * description spaces ?
          PACK      FMGPDESC,UNDLN70
.
SELA1150  KEYIN     *P28:6,*DV,FMGPDESC:         * read in description
                    *P28:6,*V2LON,*RV,FMGPDESC;
          PACK      FMGPDESC,FMGPDESC,SP70
.
          MATCH     FMGPDESC,SP70
          GOTO      SELA1100 IF EQUAL            * spaces entered ?
          MATCH     FMGPDESC,UNDLN70
          GOTO      SELA9500 IF EQUAL            * nothing entered ?
          MATCH     FMGPDESC,EXITCHAR
          GOTO      SELA9500 IF EQUAL            * EXITCHAR entered ?
.
          DISPLAY   *P28:6,*V2LON,FMGPDESC;
          GOTO      SELA0100
.
.---- exit points ----
.
SELA9000  MOVE      ZERO,EXIT                    * post
          GOTO      SELA9999
.
SELA9500  MOVE      SP70,FMGPDESC
          PACK      KEY3,SAVGROUP,SP70
          CALL      RDFMGP1
          MOVE      ONE,EXIT                     * cancel
.
SELA9999  RETURN
.******************************************************************************
.* SELB - screen B                               Called By ML0000             *
.******************************************************************************
SELB0000  CALL      SCRB0000           * display screen B
          MOVE      "0",ITEMNUM
          MOVE      "1",PAGENO
          MOVE      "1",SKIPLINE
          BRANCH    ACCEPT,SELB5000    * in accept mode
.
SELB1000  CALL      DATB0000           * display data
.
SELB1010  CALL      MQSB0000           * get desired action
          BRANCH    EXIT,SELB9500      * quit screen ?
          MOVE      SP70,SKEY
          LOAD      SKEY,OPTIONC,ST1,ST2,ST3,ST4,ST5,ST6,ST7: 
                                 ST8,ST9,ST10,ST11,ST12,ST13: 
                                 ST14,ST15,ST16,ST17
.
          PACK      KEY22,SKEY,SP70
          CALL      RDFMGS1
          BRANCH    OVRCD,SELB5000     * in insert mode ?
.
.---- modify mode ----
.
          CALL      CKTS0000           * check if in calc details
          BRANCH    EXIT,SELB1010
.
          CALL      DEGS0000           * delete old records
.
          MOVE      OPTIONC,ITEMNUM
          MOVE      OPTIONC,SAVITEM
          MOVE      "7",LINENO
          ADD       ITEMNUM,LINENO     * get lineno
          MOVE      "0",SKIPLINE 
          CALL      KDAB0000           * get data
          MOVE      "1",SKIPLINE 
          GOTO      SELB1000
.
.---- insert mode ----
.
SELB5000  ADD       ONE,ITEMNUM
          COMPARE   MAXITEMS,ITEMNUM
          CALL      ADDB0000 IF NOT LESS         * get first free position
          MOVE      "7",LINENO
          ADD       ITEMNUM,LINENO               * get lineno
          MOVE      ITEMNUM,SAVITEM
.
SELB6000  CALL      KDAB0000           * get data
          BRANCH    EXIT,SELB1000
.
          MOVE      SAVITEM,ITEMNUM
          GOTO      SELB5000           * get more entries
.
SELB9000  MOVE      ZERO,EXIT          * continue
          GOTO      SELB9999
.
SELB9500  MOVE      ONE,EXIT           * quit
.
SELB9999  RETURN
.**********************************************************************
.  KDAB - get data for screen B                        Called By SELB
.        Returns  - EXIT     (1=quit)
.**********************************************************************
KDAB0000  DISPLAY   *P1:LINENO,*V2LON,SAVITEM,DOT,*EL;
.
          MOVE      "11",CCOL
          MOVE      LINENO,CVERT
          CALL      KLMAFM00           * get ledger
          BRANCH    EXIT,KDAB9500,KDAB9500
          DISPLAY   *PCCOL:CVERT,*V2LON,FMLALEDG,*HOFF,SLASH;
.
KDAB7000  MOVE      "14",CCOL
          MOVE      "2",CSUBJIND       * set for non total subjectives
          CALL      KSBAFM00           * subjective
          BRANCH    EXIT,KDAB0000,KDAB9500
.
          DISPLAY   *PCCOL:CVERT,*V2LON,FMSASUBJ,*HOFF,SP2,FMSADESC:
                    *P68:CVERT,*V2LON,FMSAPPOS;
.
          MATCH     "1",FMSASTYP
          GOTO      KDAB7500 IF NOT EQUAL
          DISPLAY   *P1:24,*B,*EL,"Cannot Be A Total Type Subjective - ";
          CALL      HITENTER
          GOTO      KDAB7000
.
KDAB7500  PACK      KEY22,SAVGROUP,FMSAPPOS,FMLALEDG,FMSASUBJ,SP70
          CALL      RAFMGS1            * record already on file ?
          BRANCH    OVRCD,KDAB8000
          DISPLAY   *P1:24,*EL,*B,"Subjective Already Exists - ";
          CALL      HITENTER
          GOTO      KDAB7000
.
KDAB8000  CALL      WRGS0000           * write new record
.
KDAB9000  MOVE      ZERO,EXIT          * continue
          GOTO      KDAB9999
.
KDAB9500  MOVE      ONE,EXIT           * quit
.
KDAB9999  RETURN
.**********************************************************************
. DEGS - deletes subjective                           Called By SELB
.        Requires - KEY22    (key of record to delete)
.**********************************************************************
DEGS0000  UNPACK    KEY22,FMGSCODE,FMGSSEQ,FMGSLEDG,FMGSSUBJ
          CALL      DEFMGS1            * delete old record
.
          MOVE      FMGSSUBJ,SUBJCODE  * set up vars for DREC
          MOVE      FMGSLEDG,LEDGER
          PACK      KEY22,SAVGROUP,SP70
.
DEGS0100  CALL      RSFMGC1            * read through subjective file and update
          CALL      RKFMGC1            * get next record
          BRANCH    OVRCD,DEGS9999     * no more records
          MATCH     SAVGROUP,FMGCCODE
          GOTO      DEGS9999 IF NOT EQUAL
          PACK      KEY22,FMGCCODE,FMGCSEQ,FMGCLEDG,FMGCCC,SP70
          MOVE      FMGCCC,COSTCODE
.
          CALL      BCOD0000
          PACK      KEY14,LEDGER,ACCOUNT,SP70
          CALL      CDAT0000             * check for data
          BRANCH    EXIT,DEGS0100
.
          DISPLAY   *P1:24,"       Deleting Ledger/Account : ":
                    *V2LON,LEDGER,SLASH,ACCOUNT,*EL;
          MOVE      ZERO,DELALL
          MOVE      ZERO,OLDDSUBJ
          MOVE      ZERO,OLDDCOST
          MOVE      ZERO,SKIPFMTU
          CALL      DREC0000           * delete records
          GOTO      DEGS0100
.
DEGS9999  DISPLAY   *P1:24,*EL;
          RETURN
.**********************************************************************
. WRGS - write record from new subjective             Called By SELB
.        Requires - KEY22    (key of record to save)
.**********************************************************************
WRGS0000  UNPACK    KEY22,FMGSCODE,FMGSSEQ,FMGSLEDG,FMGSSUBJ
          CALL      RDFMGS1            * read record
          COMPARE   ONE,OVRCD
          CALL      WRFMGS1 IF EQUAL   * write new record (if req)
.
          MOVE      FMGSSUBJ,SUBJCODE  * set up vars for WREC
          MOVE      FMGSLEDG,LEDGER
          PACK      KEY22,SAVGROUP,SP70
          CALL      RSFMGC1            * read through subjective file and update
.
WRGS0100  CALL      RKFMGC1            * get next record
          BRANCH    OVRCD,WRGS9999     * no more records
          MATCH     SAVGROUP,FMGCCODE
          GOTO      WRGS9999 IF NOT EQUAL
.
          MATCH     LEDGER,FMGCLEDG
          GOTO      WRGS0100 IF NOT EQUAL   * same ledger ?
.
          MOVE      FMGCCC,COSTCODE
          CALL      BCOD0000           * build account code
          DISPLAY   *P1:24,"       Creating Ledger/Account : ":
                    *V2LON,LEDGER,SLASH,ACCOUNT,*EL;
          MOVE      ZERO,WRECLEV
          MOVE      ZERO,SKIPFMTU
          CALL      WREC0000           * update records
          GOTO      WRGS0100
.
WRGS9999  DISPLAY   *P1:24,*EL;
          RETURN
.******************************************************************************
.* DATB - display screen B data                  Called By MQSB,SELB          *
.*       Requires - PAGENO   (page to display)                                *
.*                  MAXITEMS (maximum no. of items per page + 1)              *
.*                  SKIPLINE (0=dont display data on line cvert (redisplays)) *
.*        Returns - ITEMNUM  (number of data items displayed)                 *
.*                  ST1..ST17 (save keys for displayed data)                  *
.*        Uses    - CURPAGE  (page counter)                                   *
.*                  LINENO   (line to display data)                           *
.******************************************************************************
DATB0000  UNPACK    SP70,ST1,ST2                 * clear save keys
          UNPACK    SP70,ST3,ST4
          UNPACK    SP70,ST5,ST6
          UNPACK    SP70,ST7,ST8
          UNPACK    SP70,ST9,ST10
          UNPACK    SP70,ST11,ST12
          UNPACK    SP70,ST13,ST14
          UNPACK    SP70,ST15,ST16
          UNPACK    SP70,ST17,SKEY
          PACK      KEY22,SAVGROUP,SP70
          CALL      RSFMGS1                      * go to start of records
          MOVE      "7",LINENO
          MOVE      "1",CURPAGE                  * start at page 1
          MOVE      "0",ITEMNUM                  * start at item 1
          DISPLAY   *P1:8,*EF;                   * clear data area on screen
.
DATB1000  CALL      RKFMGS1                      * get next record
          BRANCH    OVRCD,DATB9000               * no more records ?
          MATCH     SAVGROUP,FMGSCODE
          GOTO      DATB9000 IF NOT EQUAL        * no more records ?
.
DATB1500  ADD       "1",ITEMNUM                  * increment item number
          COMPARE   MAXITEMS,ITEMNUM
          GOTO      DATB2000 IF LESS             * at start of next screen ?
.
          MOVE      "1",ITEMNUM
          ADD       ONE,CURPAGE
.
DATB2000  COMPARE   PAGENO,CURPAGE
          GOTO      DATB1000 IF LESS             * not up to current page ?
          GOTO      DATB9500 IF NOT EQUAL        * past current page ?
.
.---- display data ----
.
          ADD       "1",LINENO
          DISPLAY   *P1:LINENO,*V2LON,ITEMNUM,*HOFF,DOT;
          BRANCH    SKIPLINE,DATB5000            * display line CVERT ?
          COMPARE   LINENO,CVERT
          GOTO      DATB1500 IF EQUAL            * get next line
.
DATB5000  MOVE      SP70,FMSADESC
          PACK      KEY14,FMGSLEDG,FMGSSUBJ,SP70
          CALL      RDFMSA1                      * get subjective description
.
          DISPLAY   *P1:LINENO,*V2LON,ITEMNUM,*HOFF,DOT:
                    *P11:LINENO,FMGSLEDG,SLASH,FMGSSUBJ,SP2,FMSADESC:
                    *P68:LINENO,FMGSSEQ;
          PACK      KEY22,FMGSCODE,FMGSSEQ,FMGSLEDG,FMGSSUBJ,SP70  * save key
          STORE     KEY22,ITEMNUM,ST1,ST2,ST3,ST4,ST5,ST6,ST7: 
                                  ST8,ST9,ST10,ST11,ST12,ST13: 
                                  ST14,ST15,ST16,ST17
.
          GOTO      DATB1000                     * get next record
.
.---- reached EOF before EOP ----
.
DATB9000  COMPARE   PAGENO,CURPAGE
          GOTO      DATB9100 IF NOT LESS          * not up to current page ?
          MOVE      ZERO,ITEMNUM                  * reset pointer
.
DATB9100  ADD       ONE,ITEMNUM                   * reached end of data
          COMPARE   MAXITEMS,ITEMNUM
          GOTO      DATB9200 IF NOT LESS          * at end of page ?
          ADD       ONE,LINENO
          DISPLAY   *P1:LINENO,*V2LON,ITEMNUM,*HOFF,DOT;
.
DATB9200  SUB       ONE,ITEMNUM
          MOVE      ZERO,MORE                    * no more data
          GOTO      DATB9999
.
.---- reached EOP before EOF ----
.
DATB9500  MOVE      ONE,MORE                      * more data
          MOVE      MAXITEMS,ITEMNUM
.
DATB9999  RETURN
.******************************************************************************
.* ADDB - get first blank position               Called By SELB0000           *
.******************************************************************************
ADDB0000  ADD       ONE,PAGENO         * try next page
          CALL      DATB0000           * display next page
.
          ADD       ONE,ITEMNUM        * get next item
          COMPARE   MAXITEMS,ITEMNUM
          GOTO      ADDB0000 IF NOT LESS  * at end of page
.
ADDB9999  RETURN
.******************************************************************************
.* MQSB - Main question for screen B             Called By SELB0000           *
.******************************************************************************
MQSB0000  DISPLAY   *P1:24,"Select Item, (",*V2LON,"R":
                    *HOFF,")ange";               * display prompt
          MOVE      "20",CCOL
          COMPARE   ONE,MORE
          GOTO      MQSB1000 IF NOT EQUAL
.
          DISPLAY   ", (",*V2LON,"N",*HOFF,")ext Page";
          ADD       "13",CCOL
.
MQSB1000  COMPARE   PAGENO,ONE
          GOTO      MQSB2000 IF EQUAL
.
          DISPLAY   ", (",*V2LON,"P",*HOFF,")revious Page";
          ADD       "17",CCOL
.
MQSB2000  DISPLAY   ", e(",*V2LON,"X",*HOFF,")it :  ";
          ADD       "12",CCOL
.
MQSB3000  KEYIN     *PCCOL:24,"__",*PCCOL:24,*JR,*V2LON,DIM2,*EL; * get option
          PACK      DIM2,DIM2,SP70
          REP       UPPLOW,DIM2
          COMPARE   ONE,MORE
          GOTO      MQSB4000 IF NOT EQUAL
.
          MATCH     " N",DIM2
          GOTO      MQSB4000 IF NOT EQUAL
          ADD       ONE,PAGENO         * get next page
          CALL      DATB0000
          GOTO      MQSB0000
.
MQSB4000  COMPARE   PAGENO,ONE
          GOTO      MQSB4500 IF EQUAL
.
          MATCH     " P",DIM2
          GOTO      MQSB4500 IF NOT EQUAL
          SUB       ONE,PAGENO         * get last page
          CALL      DATB0000
          GOTO      MQSB0000
.
MQSB4500  MATCH     " R",DIM2
          GOTO      MQSB5000 IF NOT EQUAL
          CALL      RANB0000           * enter data for range
          CALL      DATB0000
          GOTO      MQSB0000
.
MQSB5000  MATCH     " X",DIM2
          GOTO      MQSB9500 IF EQUAL
.
          MOVE      ZERO,OPTIONC
          MOVE      DIM2,OPTIONC
          COMPARE   OPTIONC,ZERO
          GOTO      MQSB9000 IF LESS   * valid number input ?
          BEEP                         * illegal option
          GOTO      MQSB3000           * get another option
.
MQSB9000  MOVE      ZERO,EXIT          * continue
          GOTO      MQSB9999
.
MQSB9500  MOVE      ONE,EXIT           * quit
.
MQSB9999  RETURN
.**********************************************************************
. RANB - create records for a range of subjectives    Called By MQSB
.**********************************************************************
RANB0000  MOVE      "3",SCRNO          * set up redisplays for scr B range keyin
.
RANB0010  KEYIN     *P1:22,*EF,*P1:24,"(",*V2LON:
                    "A",*HOFF,")dd Range, (",*V2LON:
                    "D",*HOFF,")elete Range, e(",*V2LON:
                    "X",*HOFF,")it : _",*P39:24,*V2LON,ANS;
          PACK      ANS,ANS,SP70
          REP       "1x2x3xa1A1d2D2x3X3",ANS
          MOVE      ZERO,RANGFLAG
          MOVE      ANS,RANGFLAG
          BRANCH    RANGFLAG,RANB0015,RANB0015,RANB9999
          BEEP
          GOTO      RANB0010
.
RANB0015  LOAD      MODESC,RANGFLAG,MODESC1,MODESC2
          UNPACK    SP70,FROMCOCE,TEMPDESC
          UNPACK    SP70,DESC2
          DISPLAY   *P1:22,MODESC," From Ledger/Subjective  : ",*EF;
          MOVE      "34",CCOL
          MOVE      "22",CVERT
          CALL      KLMAFM00           * get ledger code
          BRANCH    EXIT,RANB0000,RANB9999
          MOVE      FMLALEDG,FROMLEDG
.
RANB0100  DISPLAY   *P1:22,MODESC:
                    " From Ledger/Subjective  : ",*V2LON,FMLALEDG,"/",*EF;
          UNPACK    SP70,FROMCOCE,TEMPDESC
          UNPACK    SP70,DESC2
          MOVE      "37",CCOL
          MOVE      "22",CVERT
          MOVE      "2",CSUBJIND       * set for non total subjectives
          CALL      KSBAFM00           * get start of range
          BRANCH    EXIT,RANB0015,RANB9999
          MOVE      FMSASUBJ,FROMCOCE
          MOVE      FMSADESC,TEMPDESC
.
          MATCH     "1",FMSASTYP
          GOTO      RANB0200 IF NOT EQUAL
          DISPLAY   *P1:24,*B,*EL,"Cannot Be A Total Type Subjective - ";
          CALL      HITENTER
          GOTO      RANB0100
.
RANB0200  DISPLAY   *P1:22,MODESC:
                    " From Ledger/Subjective  : ",*V2LON,FMLALEDG,"/":
                    FROMCOCE,*HOFF,"  ",TEMPDESC,*EL:
                    *P1:23,"       To   Ledger/Subjective  : ":
                    *V2LON,FMLALEDG,"/",*EF;
.
          MOVE      "37",CCOL
          MOVE      "23",CVERT
          MOVE      "2",CSUBJIND       * set for non total subjectives
          CALL      KSBAFM00           * get end of range
          BRANCH    EXIT,RANB0100,RANB9999
          MOVE      FMSASUBJ,TOCOCE
          MOVE      FMSADESC,DESC2
          DISPLAY   *P1:23,"       To   Ledger/Subjective  : ":
                    *V2LON,FMLALEDG,"/":
                    TOCOCE,*HOFF,"  ",DESC2,*EF;
.
          MATCH     "1",FMSASTYP
          GOTO      RANB0250 IF NOT EQUAL
          DISPLAY   *P1:24,*B,*EL,"Cannot Be A Total Type Subjective - ";
          CALL      HITENTER
          GOTO      RANB0200
.
RANB0250  MATCH     FROMCOCE,TOCOCE
          GOTO      RANB0300 IF NOT LESS
          DISPLAY   *P1:24,*B,*EL,"Illegal Range Entered - ";
          CALL      HITENTER
          GOTO      RANB0200
.
RANB0300  KEYIN     *P1:22,*DV,MODESC:
                    " From Ledger/Subjective  : ",*V2LON,*DV,FMLALEDG,"/":
                    *DV,FROMCOCE,*HOFF,"  ",*DV,TEMPDESC,*EL:
                    *P1:23,"       To   Ledger/Subjective  : ":
                    *V2LON,*DV,FMLALEDG,"/":
                    *DV,TOCOCE,*HOFF,"  ",*DV,DESC2,*EF,*P25:24:
                    "  Ok (Y/N) ? ",*EF,*V2LON,ANS; * confirm if range is ok
          PACK      ANS,ANS,SP70
          REP       UPPLOW,ANS
          MATCH     "Y",ANS
          GOTO      RANB0400 IF EQUAL  * continue
          MATCH     "N",ANS
          GOTO      RANB0000 IF EQUAL  * rekey range
          BEEP
          GOTO      RANB0300
.
RANB0400  PACK      KEY14,FROMLEDG,FROMCOCE,SP70
          CALL      RSFMSA1
          CALL      RPFMSA1
.
RANB0500  CALL      RKFMSA1            * create records
          BRANCH    OVRCD,RANB9999     * no more records
          MATCH     FMSALEDG,FROMLEDG
          GOTO      RANB9999 IF NOT EQUAL   * end of ledger
.
          MATCH     FMSASUBJ,TOCOCE
          GOTO      RANB9999 IF LESS   * past end of range
.
          PACK      KEY22,SAVGROUP,FMSAPPOS,FMLALEDG,FMSASUBJ,SP70
.
          COMPARE   "1",RANGFLAG
          CALL      DEGS0000 IF NOT EQUAL   * delete required records
          COMPARE   "1",RANGFLAG
          CALL      WRGS0000 IF EQUAL       * create required records
.
          GOTO      RANB0500
.
RANB9999  MOVE      "2",SCRNO          * set up redisplays for scr B data keyins
          RETURN
.******************************************************************************
.* SELC - screen C                               Called By ML0000             *
.******************************************************************************
SELC0000  CALL      SCRC0000           * display screen C
          MOVE      "0",ITEMNUM
          MOVE      "1",PAGENO
          MOVE      "1",SKIPLINE
          BRANCH    ACCEPT,SELC5000    * in accept mode
.
SELC1000  CALL      DATC0000           * display data
.
          CALL      MQSC0000           * get desired action
          BRANCH    EXIT,SELC9500      * quit screen ?
          MOVE      SP70,SKEY
          LOAD      SKEY,OPTIONC,ST1,ST2,ST3,ST4,ST5,ST6,ST7: 
                                 ST8,ST9,ST10,ST11,ST12,ST13: 
                                 ST14,ST15,ST16,ST17
.
          PACK      KEY22,SKEY,SP70
          CALL      RDFMGC1
          BRANCH    OVRCD,SELC5000     * in insert mode ?
.
.---- modify mode ----
.
          CALL      DEGC0000           * delete old records
.
          MOVE      OPTIONC,ITEMNUM
          MOVE      OPTIONC,SAVITEM
          MOVE      "7",LINENO
          ADD       ITEMNUM,LINENO     * get lineno
          MOVE      "0",SKIPLINE 
          CALL      KDAC0000           * get data
          MOVE      "1",SKIPLINE 
          GOTO      SELC1000
.
.---- insert mode ----
.
SELC5000  ADD       ONE,ITEMNUM
          COMPARE   MAXITEMS,ITEMNUM
          CALL      ADDC0000 IF NOT LESS         * get first free position
          MOVE      "7",LINENO
          ADD       ITEMNUM,LINENO               * get lineno
          MOVE      ITEMNUM,SAVITEM
.
SELC6000  CALL      KDAC0000           * get data
          BRANCH    EXIT,SELC1000
.
          MOVE      SAVITEM,ITEMNUM
          GOTO      SELC5000           * get more entries
.
SELC9000  MOVE      ZERO,EXIT          * continue
          GOTO      SELC9999
.
SELC9500  MOVE      ONE,EXIT           * quit
.
SELC9999  RETURN
.**********************************************************************
.  KDAC - get data for screen C                        Called By SELC
.        Returns  - EXIT     (1=quit)
.**********************************************************************
KDAC0000  DISPLAY   *P1:LINENO,*V2LON,SAVITEM,DOT,*EL;
.
          MOVE      "11",CCOL
          MOVE      LINENO,CVERT
          CALL      KLMAFM00           * get ledger
          BRANCH    EXIT,KDAC9500,KDAC9500
          DISPLAY   *PCCOL:CVERT,*V2LON,FMLALEDG,*HOFF,SLASH;
.
KDAC7000  MOVE      "14",CCOL
          CALL      KCCAFM00           * get cost centre
          BRANCH    EXIT,KDAC0000,KDAC9500
.
          DISPLAY   *PCCOL:CVERT,*V2LON,FMCCCOCE,*HOFF,SP2,FMCCDESC:
                    *P68:CVERT,*V2LON,FMCCPPOS;
.
          PACK      KEY22,SAVGROUP,FMCCPPOS,FMLALEDG,FMCCCOCE,SP70
          CALL      RAFMGC1            * record already on file ?
          BRANCH    OVRCD,KDAC8000
          DISPLAY   *P1:24,*EL,*B,"Cost Centre Already Exists - ";
          CALL      HITENTER
          GOTO      KDAC7000
.
KDAC8000  CALL      WRGC0000           * write records
.
KDAC9000  MOVE      ZERO,EXIT          * continue
          GOTO      KDAC9999
.
KDAC9500  MOVE      ONE,EXIT           * quit
.
KDAC9999  RETURN
.**********************************************************************
. DEGC - delete cost centre                           Called By SELB
.        Requires - KEY22    (key of record to delete)
.**********************************************************************
DEGC0000  UNPACK    KEY22,FMGCCODE,FMGCSEQ,FMGCLEDG,FMGCCC
          CALL      DEFMGC1            * delete old record
.
          MOVE      FMGCCC,COSTCODE    * set up vars for DREC
          MOVE      FMGCLEDG,LEDGER
          PACK      KEY22,SAVGROUP,SP70
.
DEGC0100  CALL      RSFMGS1            * read through subjective file and update
          CALL      RKFMGS1            * get next record
          BRANCH    OVRCD,DEGC9999     * no more records
          MATCH     SAVGROUP,FMGSCODE
          GOTO      DEGC9999 IF NOT EQUAL
          PACK      KEY22,FMGSCODE,FMGSSEQ,FMGSLEDG,FMGSSUBJ,SP70
          MOVE      FMGSSUBJ,SUBJCODE
.
          CALL      BCOD0000
          PACK      KEY14,LEDGER,ACCOUNT,SP70
          CALL      CDAT0000             * check for data
          BRANCH    EXIT,DEGC0100
.
          DISPLAY   *P1:24,"       Deleting Ledger/Account : ":
                    *V2LON,LEDGER,SLASH,ACCOUNT,*EL;
          MOVE      ZERO,DELALL
          MOVE      ZERO,OLDDSUBJ
          MOVE      ZERO,OLDDCOST
          MOVE      ZERO,SKIPFMTU
          CALL      DREC0000           * delete records
          GOTO      DEGC0100
.
DEGC9999  DISPLAY   *P1:24,*EL;
          RETURN
.**********************************************************************
. WRGC - write record from new cost centre            Called By SELC
.        Requires - KEY22    (key of record to save)
.**********************************************************************
WRGC0000  UNPACK    KEY22,FMGCCODE,FMGCSEQ,FMGCLEDG,FMGCCC
          CALL      RDFMGC1            * read record
          COMPARE   ONE,OVRCD
          CALL      WRFMGC1 IF EQUAL   * write new record (if req)
.
          MOVE      FMGCCC,COSTCODE    * set up vars for WREC
          MOVE      FMGCLEDG,LEDGER
          PACK      KEY22,SAVGROUP,SP70
          CALL      RSFMGS1            * read through subjective file and update
.
WRGC0100  CALL      RKFMGS1            * get next record
          BRANCH    OVRCD,WRGC9999     * no more records
          MATCH     SAVGROUP,FMGSCODE
          GOTO      WRGC9999 IF NOT EQUAL
.
          MATCH     LEDGER,FMGSLEDG
          GOTO      WRGC0100 IF NOT EQUAL   * same ledger ?
.
          MOVE      FMGSSUBJ,SUBJCODE
          CALL      BCOD0000           * build account code
          DISPLAY   *P1:24,"       Creating Ledger/Account : ":
                    *V2LON,LEDGER,SLASH,ACCOUNT,*EL;
          MOVE      ZERO,WRECLEV
          MOVE      ZERO,SKIPFMTU
          CALL      WREC0000           * update records
          GOTO      WRGC0100
.
WRGC9999  DISPLAY   *P1:24,*EL;
          RETURN
.******************************************************************************
.* DATC - display screen C data                  Called By MQSC,SELC          *
.*       Requires - PAGENO   (page to display)                                *
.*                  MAXITEMS (maximum no. of items per page + 1)              *
.*                  SKIPLINE (0=dont display data on line cvert (redisplays)) *
.*        Returns - ITEMNUM  (number of data items displayed)                 *
.*                  ST1..ST17 (save keys for displayed data)                  *
.*        Uses    - CURPAGE  (page counter)                                   *
.*                  LINENO   (line to display data)                           *
.******************************************************************************
DATC0000  UNPACK    SP70,ST1,ST2                 * clear save keys
          UNPACK    SP70,ST3,ST4
          UNPACK    SP70,ST5,ST6
          UNPACK    SP70,ST7,ST8
          UNPACK    SP70,ST9,ST10
          UNPACK    SP70,ST11,ST12
          UNPACK    SP70,ST13,ST14
          UNPACK    SP70,ST15,ST16
          UNPACK    SP70,ST17,SKEY
          PACK      KEY22,SAVGROUP,SP70
          CALL      RSFMGC1                      * go to start of records
          MOVE      "7",LINENO
          MOVE      "1",CURPAGE                  * start at page 1
          MOVE      "0",ITEMNUM                  * start at item 1
          DISPLAY   *P1:8,*EF;                   * clear data area on screen
.
DATC1000  CALL      RKFMGC1                      * get next record
          BRANCH    OVRCD,DATC9000               * no more records ?
          MATCH     SAVGROUP,FMGCCODE
          GOTO      DATC9000 IF NOT EQUAL        * no more records ?
.
DATC1500  ADD       "1",ITEMNUM                  * increment item number
          COMPARE   MAXITEMS,ITEMNUM
          GOTO      DATC2000 IF LESS             * at start of next screen ?
.
          MOVE      "1",ITEMNUM
          ADD       ONE,CURPAGE
.
DATC2000  COMPARE   PAGENO,CURPAGE
          GOTO      DATC1000 IF LESS             * not up to current page ?
          GOTO      DATC9500 IF NOT EQUAL        * past current page ?
.
.---- display data ----
.
          ADD       "1",LINENO
          DISPLAY   *P1:LINENO,*V2LON,ITEMNUM,*HOFF,DOT;
          BRANCH    SKIPLINE,DATC5000            * display line CVERT ?
          COMPARE   LINENO,CVERT
          GOTO      DATC1500 IF EQUAL            * get next line
.
DATC5000  MOVE      SP70,FMCCDESC
          PACK      KEY14,FMGCLEDG,FMGCCC,SP70
          CALL      RDFMCC1                      * get cost code description
.
          DISPLAY   *P1:LINENO,*V2LON,ITEMNUM,*HOFF,DOT:
                    *P11:LINENO,FMGCLEDG,SLASH,FMGCCC,SP2,FMCCDESC:
                    *P68:LINENO,FMGCSEQ;
          PACK      KEY22,FMGCCODE,FMGCSEQ,FMGCLEDG,FMGCCC,SP70  * save key
          STORE     KEY22,ITEMNUM,ST1,ST2,ST3,ST4,ST5,ST6,ST7: 
                                  ST8,ST9,ST10,ST11,ST12,ST13: 
                                  ST14,ST15,ST16,ST17
.
          GOTO      DATC1000                     * get next record
.
.---- reached EOF before EOP ----
.
DATC9000  COMPARE   PAGENO,CURPAGE
          GOTO      DATC9100 IF NOT LESS          * not up to current page ?
          MOVE      ZERO,ITEMNUM                  * reset pointer
.
DATC9100  ADD       ONE,ITEMNUM                   * reached end of data
          COMPARE   MAXITEMS,ITEMNUM
          GOTO      DATC9200 IF NOT LESS          * at end of page ?
          ADD       ONE,LINENO
          DISPLAY   *P1:LINENO,*V2LON,ITEMNUM,*HOFF,DOT;
.
DATC9200  SUB       ONE,ITEMNUM
          MOVE      ZERO,MORE                    * no more data
          GOTO      DATC9999
.
.---- reached EOP before EOF ----
.
DATC9500  MOVE      ONE,MORE                      * more data
          MOVE      MAXITEMS,ITEMNUM
.
DATC9999  RETURN
.******************************************************************************
.* ADDC - get first blank position               Called By SELC0000           *
.******************************************************************************
ADDC0000  ADD       ONE,PAGENO         * try next page
          CALL      DATC0000           * display next page
.
          ADD       ONE,ITEMNUM        * get next item
          COMPARE   MAXITEMS,ITEMNUM
          GOTO      ADDC0000 IF NOT LESS  * at end of page
.
ADDC9999  RETURN
.******************************************************************************
.* MQSC - Main question for screen C             Called By SELC0000           *
.******************************************************************************
MQSC0000  DISPLAY   *P1:24,"Select Item, (",*V2LON,"R":
                    *HOFF,")ange";               * display prompt
          MOVE      "20",CCOL
          COMPARE   ONE,MORE
          GOTO      MQSC1000 IF NOT EQUAL
.
          DISPLAY   ", (",*V2LON,"N",*HOFF,")ext Page";
          ADD       "13",CCOL
.
MQSC1000  COMPARE   PAGENO,ONE
          GOTO      MQSC2000 IF EQUAL
.
          DISPLAY   ", (",*V2LON,"P",*HOFF,")revious Page";
          ADD       "17",CCOL
.
MQSC2000  DISPLAY   ", e(",*V2LON,"X",*HOFF,")it :  ";
          ADD       "12",CCOL
.
MQSC3000  KEYIN     *PCCOL:24,"__",*PCCOL:24,*JR,*V2LON,DIM2,*EL; * get option
          PACK      DIM2,DIM2,SP70
          REP       UPPLOW,DIM2
          COMPARE   ONE,MORE
          GOTO      MQSC4000 IF NOT EQUAL
.
          MATCH     " N",DIM2
          GOTO      MQSC4000 IF NOT EQUAL
          ADD       ONE,PAGENO         * get next page
          CALL      DATC0000
          GOTO      MQSC0000
.
MQSC4000  COMPARE   PAGENO,ONE
          GOTO      MQSC4500 IF EQUAL
.
          MATCH     " P",DIM2
          GOTO      MQSC4500 IF NOT EQUAL
          SUB       ONE,PAGENO         * get last page
          CALL      DATC0000
          GOTO      MQSC0000
.
MQSC4500  MATCH     " R",DIM2
          GOTO      MQSC5000 IF NOT EQUAL
          CALL      RANC0000           * enter data for range
          CALL      DATC0000
          GOTO      MQSC0000
.
MQSC5000  MATCH     " X",DIM2
          GOTO      MQSC9500 IF EQUAL
.
          MOVE      ZERO,OPTIONC
          MOVE      DIM2,OPTIONC
          COMPARE   OPTIONC,ZERO
          GOTO      MQSC9000 IF LESS   * valid number input ?
          BEEP                         * illegal option
          GOTO      MQSC3000           * get another option
.
MQSC9000  MOVE      ZERO,EXIT          * continue
          GOTO      MQSC9999
.
MQSC9500  MOVE      ONE,EXIT           * quit
.
MQSC9999  RETURN
.**********************************************************************
. RANC - create records for a range of Cost Centres    Called By MQSC
.**********************************************************************
RANC0000  MOVE      "5",SCRNO          * set up redisplays for scr C range keyin
.
RANC0010  KEYIN     *P1:22,*EF,*P1:24,"(",*V2LON:
                    "A",*HOFF,")dd Range, (",*V2LON:
                    "D",*HOFF,")elete Range, e(",*V2LON:
                    "X",*HOFF,")it : _",*P39:24,*V2LON,ANS;
          PACK      ANS,ANS,SP70
          REP       "1x2x3xa1A1d2D2x3X3",ANS
          MOVE      ZERO,RANGFLAG
          MOVE      ANS,RANGFLAG
          BRANCH    RANGFLAG,RANC0015,RANC0015,RANC9999
          BEEP
          GOTO      RANC0010
.
RANC0015  LOAD      MODESC,RANGFLAG,MODESC1,MODESC2
          UNPACK    SP70,FROMCOCE,TEMPDESC
          UNPACK    SP70,DESC2
          DISPLAY   *P1:22,MODESC," From Ledger/Cost Centre : ",*EF;
          MOVE      "34",CCOL
          MOVE      "22",CVERT
          CALL      KLMAFM00           * get ledger code
          BRANCH    EXIT,RANC0000,RANC9999
          MOVE      FMLALEDG,FROMLEDG
.
RANC0100  DISPLAY   *P1:22,MODESC:
                    " From Ledger/Cost Centre : ",*V2LON,FMLALEDG,"/",*EF;
          UNPACK    SP70,FROMCOCE,TEMPDESC
          UNPACK    SP70,DESC2
          MOVE      "37",CCOL
          MOVE      "22",CVERT
          CALL      KCCAFM00           * get start of range
          BRANCH    EXIT,RANC0015,RANC9999
          MOVE      FMCCCOCE,FROMCOCE
          MOVE      FMCCDESC,TEMPDESC
.
RANC0200  DISPLAY   *P1:22,MODESC:
                    " From Ledger/Cost Centre : ",*V2LON,FMLALEDG,"/":
                    FROMCOCE,*HOFF,"  ",TEMPDESC,*EL:
                    *P1:23,"       To   Ledger/Cost Centre : ":
                    *V2LON,FMLALEDG,"/",*EF;
.
          MOVE      "37",CCOL
          MOVE      "23",CVERT
          CALL      KCCAFM00           * get end of range
          BRANCH    EXIT,RANC0100,RANC9999
          MOVE      FMCCCOCE,TOCOCE
          MOVE      FMCCDESC,DESC2
          DISPLAY   *P1:23,"       To   Ledger/Cost Centre : ":
                    *V2LON,FMLALEDG,"/":
                    TOCOCE,*HOFF,"  ",DESC2,*EF;
.
          MATCH     FROMCOCE,TOCOCE
          GOTO      RANC0300 IF NOT LESS
          DISPLAY   *P1:24,*B,*EL,"Illegal Range Entered - ";
          CALL      HITENTER
          GOTO      RANC0200
.
RANC0300  KEYIN     *P1:22,*DV,MODESC:
                    " From Ledger/Cost Centre : ",*V2LON,*DV,FMLALEDG,"/":
                    *DV,FROMCOCE,*HOFF,"  ",*DV,TEMPDESC,*EL:
                    *P1:23,"       To   Ledger/Cost Centre : ":
                    *V2LON,*DV,FMLALEDG,"/":
                    *DV,TOCOCE,*HOFF,"  ",*DV,DESC2,*EF,*P25:24:
                    "  Ok (Y/N) ? ",*EF,*V2LON,ANS; * confirm if range is ok
          PACK      ANS,ANS,SP70
          REP       UPPLOW,ANS
          MATCH     "Y",ANS
          GOTO      RANC0400 IF EQUAL  * continue
          MATCH     "N",ANS
          GOTO      RANC0000 IF EQUAL  * rekey range
          BEEP
          GOTO      RANC0300
.
RANC0400  PACK      KEY14,FROMLEDG,FROMCOCE,SP70
          CALL      RSFMCC1
          CALL      RPFMCC1
.
RANC0500  CALL      RKFMCC1            * create records
          BRANCH    OVRCD,RANC9999     * no more records
          MATCH     FMCCLEDG,FROMLEDG
          GOTO      RANC9999 IF NOT EQUAL   * end of ledger
.
          MATCH     FMCCCOCE,TOCOCE
          GOTO      RANC9999 IF LESS   * past end of range
.
          PACK      KEY22,SAVGROUP,FMCCPPOS,FMLALEDG,FMCCCOCE,SP70
          COMPARE   "1",RANGFLAG
          CALL      DEGC0000 IF NOT EQUAL   * delete required records
          COMPARE   "1",RANGFLAG
          CALL      WRGC0000 IF EQUAL       * create required records
.
          GOTO      RANC0500
.
RANC9999  MOVE      "4",SCRNO          * set up redisplays for scr C data keyins
          RETURN
.******************************************************************************
.* POST - Post data                              Called by ML0000             *
.******************************************************************************
POST0000  PACK      KEY3,SAVGROUP
.
          COMPARE   ONE,COPTION
          GOTO      POST1000 IF NOT EQUAL
          CALL      RAFMGP1                 * record exists ?
          BRANCH    OVRCD,POST1000
          DISPLAY   *P1:24,*B,*EF:
                    "Group Allocation Code Has Just Been Entered - ";
          CALL      HITENTER
          GOTO      POST9999
.
POST1000  CALL      DEFMGP1            * delete old data
          CALL      WRFMGP1            * write current data
.
POST9999  RETURN
.******************************************************************************
.* CKTS - Check whether there are any Calc Details   Called by lots           *
.*        Returns : EXIT     (0=ok, 1=calc det)                               *
.******************************************************************************
CKTS0000  PACK      KEY31,FMGSLEDG,FMGSSUBJ,SP70
          CALL      RSFMTS2                      * position file pointer
          CALL      RKFMTS2                      * get next record
          BRANCH    OVRCD,CKTS9000               * no more records ?
.
          MATCH     FMTSTLED,FMGSLEDG
          GOTO      CKTS9000 IF NOT EQUAL        * no more records ?
.
          MATCH     FMTSSACC,FMGSSUBJ
          GOTO      CKTS9000 IF NOT EQUAL        * no more records ?
.
          DISPLAY   *P1:24,*B,*EF:
                    "Subj Used In ",FMTSTLED,SLASH,FMTSTACC:
                    " Calculation Details - ";
          CALL      HITENTER
          MATCH     "1426",PASSCODE
          GOTO      CKTS9500 IF NOT EQUAL
          MATCH     "*",ANS
          GOTO      CKTS9000 IF EQUAL
          GOTO      CKTS9500
.
CKTS9000  MOVE      ZERO,EXIT
          GOTO      CKTS9999
.
CKTS9500  MOVE      ONE,EXIT
.
CKTS9999  RETURN
.******************************************************************************
.* DELT - Delete data                            Called by ML0000             *
.******************************************************************************
DELT0000  PACK      KEY22,SAVGROUP,SP70
          CALL      RSFMGS1            * check if allocated to any subj
          CALL      RKFMGS1
          BRANCH    OVRCD,DELT0100     * no more records ?
          MATCH     KEY22,FMGSCODE
          GOTO      DELT0100 IF NOT EQUAL        * any allocated records ?
.
          DISPLAY   *P1:24,*EL,*B:
                    "ERROR - Subjective Related To This Group Code - ";
          CALL      HITENTER
          GOTO      DELT9999
.
DELT0100  PACK      KEY22,SAVGROUP,SP70
          CALL      RSFMGC1            * check if allocated to any cc
          CALL      RKFMGC1
          BRANCH    OVRCD,DELT0200     * no more records ?
          MATCH     KEY22,FMGCCODE
          GOTO      DELT0200 IF NOT EQUAL        * any allocated records ?
.
          DISPLAY   *P1:24,*EL,*B:
                    "ERROR - Cost Centre Related To This Group Code - ";
          CALL      HITENTER
          GOTO      DELT9999
.
DELT0200  PACK      KEY3,SAVGROUP
          CALL      DEFMGP1            * delete old data
.
DELT9999  RETURN
.**********************************************************************
.  CDAT - Check for data on file                       Called By lots
.        Requires - KEY14    (ledger/account)
.                   NORMFIL1 & 2, STATFILE (filenames - blank if closed)
.        Returns  - EXIT     (1=quit)
.**********************************************************************
CDAT0000  CALL      RDFMAM1
          BRANCH    OVRCD,CDAT9000     * account exists ?
.
          MATCH     "6",FMAMTYPE       * only check for posting accounts
          GOTO      CDAT1000 IF LESS
          MATCH     "8",FMAMTYPE
          GOTO      CDAT2000 IF EQUAL
          GOTO      CDAT9000
.
.---- check for normal data ----
.
CDAT1000  
          MOVE      SP70,KEY2
          CALL      RSFMLA1
          CALL      RKFMLA1
.
. Current Year
.
          PACK      FILENAME,FMST,FMLACYRR,SP70
          MATCH     FILENAME,NORMFIL1
          GOTO      CDAT1100 IF EQUAL  * file open ?
.
          MOVE      SP70,NORMFIL1
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      FMSTRNA2,FILENAME
          TRAPCLR   IO
          BRANCH    OVRCD,CDAT1200     * file missing ?
          MOVE      FILENAME,NORMFIL1
.
CDAT1100  PACK      KEY32,KEY14,SP70
          CALL      RSFMTR2
          CALL      RKFMTR2
          BRANCH    OVRCD,CDAT1200
          PACK      KEY15,FMTRLEDG,FMTRACCT,SP70
          MATCH     KEY15,KEY14
          GOTO      CDAT1200 IF NOT EQUAL
          GOTO      CDAT9500           * data exists
.
. Last Year
.
CDAT1200  MOVE      FMLACYRR,F4YEAR
          SUB       ONE,F4YEAR
          PACK      FILENAME,FMST,F4YEAR,SP70
          REP       " 0",FILENAME
          MATCH     FILENAME,NORMFIL2
          GOTO      CDAT1300 IF EQUAL  * file open ?
.
          MOVE      SP70,NORMFIL2
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      FMSCTRA2,FILENAME
          TRAPCLR   IO
          BRANCH    OVRCD,CDAT9000     * file missing ?
          MOVE      FILENAME,NORMFIL2
.
CDAT1300  PACK      KEY32,KEY14,SP70
          CALL      RSFMCT2
          CALL      RKFMCT2
          BRANCH    OVRCD,CDAT9000
          PACK      KEY15,FMCTLEDG,FMCTACCT,SP70
          MATCH     KEY15,KEY14
          GOTO      CDAT9000 IF NOT EQUAL
          GOTO      CDAT9500           * data exists
.
.---- check for stat data ----
.
CDAT2000  
          MOVE      SP70,KEY2
          CALL      RSFMLA1
          CALL      RKFMLA1
.
          PACK      FILENAME,FMSA,FMLACYRR,SP70
          MATCH     FILENAME,STATFILE
          GOTO      CDAT2100 IF EQUAL  * file open ?
.
          MOVE      SP70,STATFILE
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      FMSSTRA2,FILENAME
          TRAPCLR   IO
          BRANCH    OVRCD,CDAT9000     * file missing ?
          MOVE      FILENAME,STATFILE
.
CDAT2100  PACK      KEY30,KEY14,SP70
          CALL      RSFMSR2
          CALL      RKFMSR2
          BRANCH    OVRCD,CDAT9000
          PACK      KEY15,FMSRLEDG,FMSRACCT,SP70
          MATCH     KEY15,KEY14
          GOTO      CDAT9000 IF NOT EQUAL
          GOTO      CDAT9500           * data exists
.
.
CDAT9000  MOVE      ZERO,EXIT          * continue
          GOTO      CDAT9999
.
CDAT9500  MOVE      ONE,EXIT           * quit
          DISPLAY   *P1:23,*B,*EF:
                    "Data Found In Transaction File ",*V2LON,FILENAME,*HOFF:
                    *P1:24:
                    "For Account ",*V2LON,FMAMLEDG,SLASH,FMAMACCT,*HOFF," - ";
          CALL      HITENTER
          DISPLAY   *P1:23,*EF;
          MATCH     "1426",PASSCODE
          GOTO      CDAT9999 IF NOT EQUAL
          MATCH     "*",ANS
          GOTO      CDAT9000 IF EQUAL
.
CDAT9999  RETURN
.**********************************************************************
. Write Audit record for account master file (fmsamaaf)
.         Requires  WAUDTYPE (1=add,2=before change,3=after change,4=delete)
.                   Sector 51 of CONTROLF read for FMSAUDA (1=on, 0=off)
.**********************************************************************
WAUD0000  COMPARE   ONE,FMSAUDA
          GOTO      WAUD9999 IF NOT EQUAL
          PACK      FMAMAUDD,CCC,CYY,CMM,CDD
          REP       " 0",FMAMAUDD
          CLOCK     TIME,FMAMAUDT
          MOVE      PORT,FMAMAUDP
          LOAD      FMAMAUDR,WAUDTYPE,ANSA,ANSB,ANSC,ANSD
          MOVE      ONE,FMAMAUDS
          MOVE      PASSCODE,FMAMAUDO
          PACK      KEY19,FMAMAUDD,FMAMAUDT,FMAMAUDP,FMAMAUDR
          CALL      AWFMAM                       * write audit file record
WAUD9999  RETURN
.*****************************************************************************
. DAUD - Delete Before Change Audit                    Called by ML0000
.        Requires - SAVKEY19 (audit file record)
.*****************************************************************************
DAUD0000  COMPARE   ONE,FMSAUDA
          GOTO      DAUD9999 IF NOT EQUAL
          MOVE      SAVKEY19,KEY19
          CALL      ADFMAM                       * write audit file record
DAUD9999  RETURN
.******************************************************************************
.* INCLUDES FOR I/O'S                                                         *
.******************************************************************************
RGRPFM00  
RSBAFM00  
RLMAFM00  
RCCAFM00  
RAMAFM00  
RCATFM00  
RCODFM00  
RLEVFM00  
RLMBFM00  
RONCFM00  
RPRCFM00  
RSECFM00  
          BRANCH    SCRNO,RDISA000,RDISB000,RDISC000,RDISD000,RDISE000
          GOTO      RDISA000
.
RDISA000  DISPLAY   *P1:4,"    Group Allocation     : ",*EF;
          RETURN
.
RDISB000  CALL      SCRB0000           * redisplay for screen B data keyins
          CALL      DATB0000
          DISPLAY   *P11:CVERT,*V2LON,FMLALEDG,*HOFF,SLASH;
          RETURN
.
RDISC000  CALL      SCRB0000           * redisplay for screen B range keyins
          CALL      DATB0000
          MOVE      "3",SCRNO          * ensure still set up for range
          DISPLAY   *P1:22,MODESC:
                    " From Ledger/Subjective  : ",*V2LON,FMLALEDG,"/":
                    FROMCOCE,*HOFF,"  ",TEMPDESC,*EF;
          MATCH     SP70,FROMCOCE
          GOTO      RDISC999 IF EQUAL
          DISPLAY   *P1:23,"       To   Ledger/Subjective  : ":
                    *V2LON,FMLALEDG,"/",*EF;
RDISC999  RETURN
.
RDISD000  CALL      SCRC0000           * redisplay for screen C data keyins
          CALL      DATC0000
          DISPLAY   *P11:CVERT,*V2LON,FMLALEDG,*HOFF,SLASH;
          RETURN
.
RDISE000  CALL      SCRC0000           * redisplay for screen C range keyins
          CALL      DATC0000
          MOVE      "5",SCRNO          * ensure still set up for range
          DISPLAY   *P1:22,MODESC:
                    " From Ledger/Cost Centre : ",*V2LON,FMLALEDG,"/":
                    FROMCOCE,*HOFF,"  ",TEMPDESC,*EF;
          MATCH     SP70,FROMCOCE
          GOTO      RDISE999 IF EQUAL
          DISPLAY   *P1:23,"       To   Ledger/Cost Centre : ":
                    *V2LON,FMLALEDG,"/",*EF;
RDISE999  RETURN
.
.
          INC       FMSBPFIO/INC
          INC       FMSCCAIO/INC       * cost centre
          INC       FMSCCCIO/INC       * consolidated cost centre
          INC       FMSCTRIO/INC       * normal tran file
          INC       FMSGRCIO/INC       * cc Group Allocation
          INC       FMSGRPIO/INC       * Group Allocation
          INC       FMSGRSIO/INC       * subj Group Allocation
          INC       FMSLEVIO/INC
          INC       FMSRSFIO/INC       * report seq file
          INC       FMSSBAIO/INC       * subjective
          INC       FMSSLBIO/INC       * subjective budg link
          INC       FMSSSCIO/INC
          INC       FMSSTRIO/INC       * stat tran file
          INC       FMSTRNIO/INC       * normal tran file
          INC       FMSUWPIO/INC       * wp
          INC       FMSXCSIO/INC
.
          INC       FMSAMAKY           * account master file
          INC       FMSCCAKY           * cost centre
          INC       FMSGRPKY           * Group Allocation file
          INC       FMSLMAKY           * ledger
          INC       FMSSBAKY           * subjective
.
          INC       FMSACCCD           * subj/cc creation routines
          INC       FMSUPDCD           * standard update routines
          INC       FMSSTDCD           * FMS Acc. standard routines
          INC       FMSUDACD           * FMS audit update routines 
