.-------------------------------------------------------
          INC       STDGENDF     * Required Include
.
VERSION   INIT      "V12.00.00"
.-------------------------------------------------------
. V9.02.00  04.07.2002  Glenn Saunders
.           Export to new release i.e. v9.02 from r5.09
.-------------------------------------------------------
.-------------------------------------------------------
.@@@@@ Start of Generated Code @@@@@
. NB - Code & Comments Included Before the above line 
.      will not be overwritten by the generation of a 
.      program. The STDGENDF file and VERSION must appear
.      before the line. 
.-----------------------------------------
.   Program       :   IBACCS26
.   Function      :   Actual Indirect Cost Allocation         
.   Generated  On :   04/07/2002
.-----------------------------------------
.=========================
.File Description Includes
.-------------------------
          INC       CCSAWGFD/INC
          INC       CCSCALFD/INC
          INC       CCSCDTFD/INC
          INC       CCSDALFD/INC
          INC       CCSDCOFD/INC
          INC       CCSDPTFD/INC
          INC       CCSSDCFD/INC
          INC       CCSTMPDF    
.=========================
.Local Variable Definition
.-------------------------
PROCYEAR  DIM       4 * Scr 00 Fld     2
PROCPER   DIM       2 * Scr 00 Fld     3
FLAGALL   FORM      1 * Scr 00 Fld     7
.
ACCEPT    FORM      1
SACCEPT   FORM      1
.
PRGID     INIT      "IBACCS26"
PRGNAM    INIT      "Actual Indirect Cost Allocation         "
.
.--------------------------------
. MAINLINE - Controlling Logic
.--------------------------------
          TOPIC     PRGID
          CLOCK     PORT,DIM2
          MOVE      DIM2,PORT
ML0000
          CALL      INIT0000
          CALL      SC00L000
          CHAIN     PGM
.---------------------------------------
. INIT - Open Files & Display Heading
.---------------------------------------
INIT0000  CALL      DISPHEAD
          MOVE      ONE,CCENTRY
          MOVE      ONE,CCANLDTE
          MOVE      ONE,CDEFDTE
          MOVE      ZERO,CHIGHLT
          DISPLAY   *P56:24,"Opening controlf";
          OPEN      CONTROLF,"controlf"
          DISPLAY   *P56:24,"Opening scrsbga1";
          OPEN      SCRSBGA1,"scrsbgaf"
          DISPLAY   *P56:24,"Opening scrpsta1";
          OPEN      SCRPSTA1,"scrpstaf"
          DISPLAY   *P56:24,"Opening scrpsta1";
          OPEN      SCRPSTA2,"scrpstaf"
          DISPLAY   *P56:24,"Opening scrslta1";
          OPEN      SCRSLTA1,"scrsltaf"
          DISPLAY   *P56:24,"Opening ccsawgaf";
          OPEN      CCSAWGA1,"ccsawgaf"
          DISPLAY   *P56:24,"Opening ccsawgaf";
          OPEN      CCSAWGA2,"ccsawgaf"
          DISPLAY   *P56:24,"Opening ccscalaf";
          OPEN      CCSCALA1,"ccscalaf"
          DISPLAY   *P56:24,"Opening ccscalaf";
          OPEN      CCSCALA2,"ccscalaf"
          DISPLAY   *P56:24,"Opening ccscalaf";
          OPEN      CCSCALA3,"ccscalaf"
          DISPLAY   *P56:24,"Opening ccscdtaf";
          OPEN      CCSCDTA1,"ccscdtaf"
          DISPLAY   *P56:24,"Opening ccscdtaf";
          OPEN      CCSCDTA2,"ccscdtaf"
          DISPLAY   *P56:24,"Opening ccscdtaf";
          OPEN      CCSCDTA3,"ccscdtaf"
          DISPLAY   *P56:24,"Opening ccsdalaf";
          OPEN      CCSDALA1,"ccsdalaf"
          DISPLAY   *P56:24,"Opening ccsdalaf";
          OPEN      CCSDALA2,"ccsdalaf"
          DISPLAY   *P56:24,"Opening ccsdptaf";
          OPEN      CCSDPTA1,"ccsdptaf"
          DISPLAY   *P56:24,"Opening ccsdptaf";
          OPEN      CCSDPTA2,"ccsdptaf"
          DISPLAY   *P56:24,"Opening ccsdptaf";
          OPEN      CCSDPTA3,"ccsdptaf"
          DISPLAY   *P56:24,"Opening ccsdptaf";
          OPEN      CCSDPTA4,"ccsdptaf"
          DISPLAY   *P56:24,"Opening ccssdcaf";
          OPEN      CCSSDCA1,"ccssdcaf"
          DISPLAY   *P56:24,"Opening ccssdcaf";
          OPEN      CCSSDCA2,"ccssdcaf"
INIT9999  DISPLAY   *P1:24,*EL;
          RETURN
.
.------------------------------------
. Called for Print Screen Routine 
.------------------------------------
PRTSVARS
          MATCH     "00",SCRID
          IF         @EQUAL
            CALL       PS00L000   * Indirect Cost Allocation           
          ENDIF
          RETURN
.--------------------------------
. Screen - Indirect Cost Allocation           
.--------------------------------
SC00L000
SC00L100
          MOVE      "00",SCRID
          MOVE      ZERO,PRCOL
          MOVE      ZERO,PRVERT
          MOVE      "    4",FLDID
          CALL      GETPOSIT
          IF        EXIT=0
            MOVE     SCPSCOL,PRCOL
            MOVE     SCPSROW,PRVERT
          ENDIF
          CALL      SBACK000 * Display Background
.
SC00L200
          CALL      CF00L000 * Clear Fields
          CALL      MVACCEPT
SC00L300
          CALL      KY00L000 * Enter Key Fields
          BRANCH    EXIT,SC00L999,SC00L999
SC00L400
          CALL      WP00L000 * Load any WP Details
SC00L500
          CALL      LM00L000 * Load any Batch Details
SC00L600
          CALL      DF00L000 * Display Fields
SC00L700
          CALL      SF00L000 * Select Fields
          BRANCH    EXIT,SC00L100,SC00L100,SC00L200
          IF        EXIT=4
            MOVE      ONE,EXIT
          ENDIF
SC00L800
SC00L900
SC00L999  RETURN
.--------------------------------------------------------
. Clear Fields for Screen : Indirect Cost Allocation           
.-------------------------------------------------------
CF00L000  COMPARE   ZERO,ACCEPT
              GOTO      CF00L999 IF EQUAL
          MOVE      SP70,PROCYEAR
          MOVE      SP70,PROCPER 
          MOVE      ZERO,FLAGALL 
          MOVE      SP70,CCCADES 
CF00L999  RETURN
.--------------------------------------------------------
. Enter Key Fields for Indirect Cost Allocation           
.--------------------------------------------------------
KY00L000
          MOVE      ZERO,EXIT
          GOTO      KY00L999
.
KY00L900  MOVE      ONE,EXIT
KY00L999  RETURN
.---------------------------------------------------------
. Load WP files for : Indirect Cost Allocation           
.---------------------------------------------------------
WP00L000
          RETURN
.---------------------------------------------------------
. Load Batch Screen for : Indirect Cost Allocation           
.---------------------------------------------------------
LM00L000
          RETURN
.---------------------------------------------------------
. Display Fields for : Indirect Cost Allocation           
.---------------------------------------------------------
DF00L000
          BRANCH   ACCEPT,DF00L999
          PACK     KEY15,PRGID,SCRID,SP70
          CALL     RSSCPS1
DF00L010
          CALL     RKSCPS1
          BRANCH   OVRCD,DF00L900
          MATCH    PRGID,SCPSPID
          GOTO     DF00L900 IF NOT EQUAL
          MATCH    SCRID,SCPSSID
          GOTO     DF00L900 IF NOT EQUAL
          MATCH    SP70,SCPSMTY
          GOTO     DF00L010 IF NOT EQUAL
.
          CALL     PS00L000 * Display Field
          GOTO     DF00L010
DF00L900
DF00L999
          RETURN
.---------------------------------------------------------
. Display/Print Fields for : Indirect Cost Allocation           
.---------------------------------------------------------
PS00L000   PACK      VAR,SP70,SP70
          PACK     PRINTVAR,SP70,SP70
          MOVE     SCPSITM,FIELDNO
          BRANCH    FIELDNO,PS00L999,PS00L101,PS00L102,PS00L999:
                            PS00L999,PS00L999,PS00L103,PS00L104
          GOTO     PS00L999
.
PS00L101
          MOVE      PROCYEAR,VAR     
          CALL      DISPITEM
          GOTO     PS00L999
.
PS00L102
          MOVE      PROCPER,VAR      
          CALL      DISPITEM
          GOTO     PS00L999
.
PS00L103
          MOVE      FLAGALL,VAR      
          CALL      DISPITEM
          GOTO     PS00L999
.
PS00L104
          MOVE      CCCADES,VAR      
          CALL      DISPITEM
          GOTO     PS00L999
PS00L999
          RETURN
.---------------------------------------------------------
. Selections for : Indirect Cost Allocation           
.---------------------------------------------------------
SF00L000  PACK     KEY13,PRGID,SCRID,SP70
          CALL     RSSCSL1
SF00L001  BRANCH   ACCEPT,SF00L020
.
SF00L005  CALL     MTSTQ000
          MOVE     SCSLITM,FIELDNO
          BRANCH    FIELDNO,SF00L006,SF00L101,SF00L102,SF00L006:
                            SF00L103,SF00L104,SF00L006,SF00L006
SF00L006  BEEP
          GOTO     SF00L005
SF00L020  CALL     RKSCSL1
          BRANCH   OVRCD,SF00L090
          MATCH    PRGID,SCSLPID
          GOTO     SF00L090 IF NOT EQUAL
          MATCH    SCRID,SCSLSID
          GOTO     SF00L090 IF NOT EQUAL
          MOVE     SCSLITM,FIELDNO
          BRANCH    FIELDNO,SF00L020,SF00L101,SF00L102,SF00L020:
                            SF00L020,SF00L020,SF00L020,SF00L020
          GOTO     SF00L020
SF00L090  MOVE     ZERO,ACCEPT
          GOTO     SF00L001
.
SF00L101
          CALL      CCCACL00
          CALL     SELECTED
          MOVE      "0",CKEYTYP
          CALL      KCCCAB00
          MOVE      CCCAYEAR,PROCYEAR
          IF        SCPSMAN=1
            IF        EXIT=1
              MOVE      "Mandatory Field - ",DISPMSG
              BEEP
              CALL      MESSAGE1
              GOTO      SF00L101
            ENDIF
            BRANCH    EXIT,SF00L101,SF00L990
          ELSE
            COMPARE   TWO,EXIT
            GOTO      SF00L990 IF EQUAL
          ENDIF
          MOVE      PROCYEAR,VAR     
          CALL      DISPITEM
          GOTO     SF00L001
.
SF00L102
.
.
          MOVE      "    8",FLDID
          CALL      GETPOSIT
          IF        EXIT=0
            MOVE     SP70,CCCADES 
            PACK      VAR,SP70,SP70
            CALL      DISPITEM
          ENDIF
          CALL     SELECTED
          MOVE      "0",CKEYTYP
          CALL      EPERD000
          IF        SCPSMAN=1
            IF        EXIT=1
              MOVE      "Mandatory Field - ",DISPMSG
              BEEP
              CALL      MESSAGE1
              GOTO      SF00L102
            ENDIF
            BRANCH    EXIT,SF00L102,SF00L990
          ELSE
            COMPARE   TWO,EXIT
            GOTO      SF00L990 IF EQUAL
          ENDIF
          MOVE      PROCPER,VAR      
          CALL      DISPITEM
.
.
          MOVE      "    8",FLDID
          CALL      GETPOSIT
          IF        EXIT=0
            MOVE      CCCADES,VAR      
            CALL      DISPITEM
          ENDIF
          GOTO     SF00L001
.
SF00L103
          MOVE      ZERO,EXIT
          GOTO      SF00L999
.
SF00L104
          CALL      STEPDOWN
          MOVE      ZERO,EXIT
          GOTO      SF00L999
SF00L990  MOVE      FOUR,EXIT * Exit Char Exit
SF00L999  RETURN
.@@@@@ Function Restart Point @@@@@
.----------------------------------------
. Move one to accept to for insert mode
.----------------------------------------
MVACCEPT  MOVE      ONE,ACCEPT
          RETURN
.-----------------------------------------------
. Clinical Costing Clear Fields for Keyin Year
.-----------------------------------------------
CCCACL00  MOVE      SP70,CCCAYEAR
          MOVE      SP70,CCCAPER
          RETURN
.
.----------------------------------------
. Enter Costing Period
.----------------------------------------
EPERD000  MOVE      ZERO,CKEYTYP
          CALL      KCCCAA00
          BRANCH    EXIT,EPERD900
          MOVE      CCCAPER,PROCPER
          GOTO      EPERD999
.
EPERD900  MOVE      ZERO,EXIT
          MOVE      "All Periods",CCCADES
          MOVE      SP70,PROCPER
EPERD999  RETURN
.----------------------------------------------------------------------
. Stepdown through the Departments.
.----------------------------------------------------------------------
STEPDOWN  MOVE      SP70,DISPMSG
          CALL      MESSAGE2
          MATCH     SP70,PROCPER
          GOTO      STEPD800 IF NOT EQUAL
          PACK      KEY6,PROCYEAR,SP70
          CALL      RSCCCA1
STEPD100  CALL      RKCCCA1
          BRANCH    OVRCD,STEPD999
          MATCH     CCCAYEAR,PROCYEAR
          GOTO      STEPD999 IF NOT EQUAL
          MOVE      CCCAPER,PROCPER
          CALL      STEP0000
          GOTO      STEPD100
.
STEPD800  CALL      STEP0000
.
STEPD999  CALL      MESSAGE3
          RETURN
.
STEP0000  DISPLAY   *P1:24,"Period ",PROCPER," Departments : ";
.
          CALL      CLEAR000 * Clear any Current Indirect Costs & Summary
          PACK      KEY15,SP70
          CALL      RSCCDP4
          GOTO      STEP1100
.
STEP1000  PACK      KEY15,SAVEHCD,SAVESEQ,SAVEDPT
          CALL      RDCCDP4
.
STEP1100  CALL      RKCCDP4
          BRANCH    OVRCD,STEP9999
          MATCH     "1",CCDPDTY
          GOTO      STEP1100 IF NOT EQUAL
.
          DISPLAY   *P28:24,*V2LON,CCDPHCD,"/",CCDPDPT
.
          PACK      KEY15,CCDPHCD,CCDPSEQ,CCDPDPT
          UNPACK    KEY15,SAVEHCD,SAVESEQ,SAVEDPT
.
          MOVE      CCDPATY,ALLOCATE
          MOVE      CCDPATY,SAVEATY
          CALL      TALL0000  * Calculate Totals for the Default Allocation Type
          MOVE      TOTALLOC,DEFALLOC
.
          CALL      PROC0000  * Process Costs
.
          GOTO      STEP1000
.
STEP9999  CALL      SUMM0000 * Calculate Summary Totals.
          RETURN
.----------------------------------------------------------------------
. Total the Allocation type from here down.
.----------------------------------------------------------------------
TALL0000
          PACK      KEY15,SAVEHCD,SAVESEQ,SAVEDPT
          MOVE      ZERO,TOTALLOC
          CALL      RDCCDP4
TALL1100  CALL      RKCCDP4
          BRANCH    OVRCD,TALL9999
.
          MATCH     CCDPHCD,SAVEHCD
          GOTO      TALL9999 IF NOT EQUAL
.
          PACK      KEY14,CCDPHCD,CCDPDPT,ALLOCATE
          CALL      RDCCAW1
          BRANCH    OVRCD,TALL1100
          ADD       CCAWQTY,TOTALLOC
          GOTO      TALL1100
.
TALL9999  RETURN
.----------------------------------------------------------------------
. Process Department Cost Details File
.----------------------------------------------------------------------
PROC0000  PACK      KEY20,SAVEHCD,SAVEDPT,PROCYEAR,PROCPER,SP70
          CALL      RSCCDC1
          GOTO      PROC1100
.
PROC1000  MOVE      SAVKEY20,KEY20
          CALL      RDCCDC1
PROC1100  CALL      RKCCDC1
          BRANCH    OVRCD,PROC9999
          MATCH     SAVEHCD,CCDCHCD
          GOTO      PROC9999 IF NOT EQUAL
          MATCH     SAVEDPT,CCDCDPT
          GOTO      PROC9999 IF NOT EQUAL
          MATCH     PROCYEAR,CCDCYEAR
          GOTO      PROC9999 IF NOT EQUAL
          MATCH     PROCPER,CCDCPER
          GOTO      PROC9999 IF NOT EQUAL
.
          PACK      SAVKEY20,CCDCHCD,CCDCDPT,CCDCYEAR,CCDCPER,CCDCCTY
          UNPACK    SAVKEY20,SAVEHCD,SAVEDPT,SAVEYEAR,SAVEPER,SAVECTY
.
          ASSIGN    CCDCIND+CCDCDIR,TOTALAMT
          COMPARE   ZERO,TOTALAMT
          GOTO      PROC1100 IF EQUAL
.
          MOVE      DEFALLOC,TOTALLOC
          MOVE      SAVEATY,ALLOCATE
          PACK      KEY14,CCDCHCD,CCDCDPT,CCDCCTY    * Check for Allocation
          CALL      RDCCDA1                          * of This Cost Type
          BRANCH    OVRCD,PROC2000
.
          MATCH     SP70,CCDAATY
          GOTO      PROC2000 IF EQUAL
          MOVE      CCDAATY,ALLOCATE
          CALL      TALL0000  * Calculate Totals for the Allocation Type
.
PROC2000
          PACK      KEY15,SAVEHCD,SAVESEQ,SAVEDPT
          CALL      RDCCDP4
PROC3000  CALL      RKCCDP4
          BRANCH    OVRCD,PROC1000
.
          MATCH     CCDPHCD,SAVEHCD
          GOTO      PROC1000 IF NOT EQUAL
.
          PACK      KEY14,CCDPHCD,CCDPDPT,ALLOCATE
          CALL      RDCCAW1
          BRANCH    OVRCD,PROC3000
.
          ASSIGN    (CCAWQTY/TOTALLOC)*TOTALAMT,ALLOCAMT
          PACK      KEY20,CCAWHCD,CCAWDPT,SAVEYEAR,SAVEPER,SAVECTY
          CALL      RDCCDC1
          IF        OVRCD=0
            ADD       ALLOCAMT,CCDCIND
            CALL      UPCCDC1
          ELSE
            UNPACK    KEY20,CCDCHCD,CCDCDPT,CCDCYEAR,CCDCPER,CCDCCTY
            MOVE      ZERO,CCDCDIR
            MOVE      ALLOCAMT,CCDCIND
            MOVE      ZERO,CCDCCAL
            MOVE      ZERO,CCDCDBU
            MOVE      ZERO,CCDCIBU
            MOVE      ZERO,CCDCCBU
            MOVE      ZERO,CCDCFBU
            CALL      WRCCDC1
          ENDIF
.
          MOVE      ALLOCATE,CCCDATY
          MOVE      TOTALLOC,CCCDTWG
          UNPACK    SAVKEY20,CCCDHCD,CCCDFDPT,CCCDYEAR,CCCDPER,CCCDCTY
          MOVE      TOTALAMT,CCCDTOT
          MOVE      CCAWQTY,CCCDWGT
          MOVE      ALLOCAMT,CCCDAMT
          MOVE      CCAWDPT,CCCDTDPT
          PACK      KEY28,CCCDHCD,CCCDFDPT,CCCDYEAR,CCCDPER,CCCDTDPT,CCCDCTY
          CALL      RDCCCD1
          IF        OVRCD=0
            ADD       ALLOCAMT,CCCDAMT
            CALL      UPCCCD1
          ELSE
            CALL      WRCCCD1
          ENDIF
          GOTO      PROC3000
.
PROC9999  RETURN
.----------------------------------------------------------------------
. Clear File Totals
.----------------------------------------------------------------------
CLEAR000  PACK      KEY10,SP70
          CALL      RSCCDP1
CLEAR100  CALL      RKCCDP1
          BRANCH    OVRCD,CLEAR999
.
          PACK      KEY16,CCDPHCD,CCDPDPT,PROCYEAR,PROCPER
          CALL      RDCCSD1
          IF        OVRCD=0
            MOVE      ZERO,CCSDDIR
            MOVE      ZERO,CCSDDRB
            MOVE      ZERO,CCSDIND
            MOVE      ZERO,CCSDINB
            CALL      UPCCSD1
          ENDIF
.
          PACK      KEY16,CCDPHCD,CCDPDPT,PROCYEAR,PROCPER,SP70
          PACK      KEY20,CCDPHCD,CCDPDPT,PROCYEAR,PROCPER,SP70
          CALL      RSCCDC1
CLEAR200  CALL      RKCCDC1
          BRANCH    OVRCD,CLEAR290
          PACK      KEY20,CCDCHCD,CCDCDPT,CCDCYEAR,CCDCPER,CCDCCTY
          MATCH     KEY16,KEY20
          GOTO      CLEAR290 IF NOT EQUAL
          MOVE      ZERO,CCDCIND
          MOVE      ZERO,CCDCCAL
          CALL      UPCCDC1
          GOTO      CLEAR200
.
CLEAR290  PACK      KEY16,CCDPHCD,CCDPDPT,PROCYEAR,PROCPER,SP70
          PACK      KEY28,CCDPHCD,CCDPDPT,PROCYEAR,PROCPER,SP70
          CALL      RSCCCD1
CLEAR300  CALL      RKCCCD1
          BRANCH    OVRCD,CLEAR100
          PACK      KEY28,CCCDHCD,CCCDFDPT,CCCDYEAR,CCCDPER,CCCDTDPT,CCCDCTY
          MATCH     KEY16,KEY28
          GOTO      CLEAR100 IF NOT EQUAL
          CALL      DECCCD1
          GOTO      CLEAR300
CLEAR999  RETURN
.
.----------------------------------------------------------------------
. Summarize File
.----------------------------------------------------------------------
SUMM0000
          PACK      KEY10,SP70
          CALL      RSCCDP1
SUMM0100  CALL      RKCCDP1
          BRANCH    OVRCD,SUMM9999
          PACK      KEY16,CCDPHCD,CCDPDPT,PROCYEAR,PROCPER,SP70
          PACK      KEY20,CCDPHCD,CCDPDPT,PROCYEAR,PROCPER,SP70
          CALL      RSCCDC1
SUMM0200  CALL      RKCCDC1
          BRANCH    OVRCD,SUMM0100
          PACK      KEY20,CCDCHCD,CCDCDPT,CCDCYEAR,CCDCPER,CCDCCTY
          MATCH     KEY16,KEY20
          GOTO      SUMM0100 IF NOT EQUAL
.
          PACK      KEY16,CCDCHCD,CCDCDPT,CCDCYEAR,CCDCPER
          CALL      RDCCSD1
          IF        OVRCD=0
            ADD       CCDCDIR,CCSDDIR
            ADD       CCDCIND,CCSDIND
            ADD       CCDCDBU,CCSDDRB
            ADD       CCDCIBU,CCSDINB
            CALL      UPCCSD1
          ELSE
            MOVE      CCDCDIR,CCSDDIR
            MOVE      CCDCIND,CCSDIND
            MOVE      CCDCDBU,CCSDDRB
            MOVE      CCDCIBU,CCSDINB
            MOVE      ZERO,CCSDFBU
            MOVE      ZERO,CCSDSTD
            MOVE      ZERO,CCSDCHG
            UNPACK    KEY16,CCSDHCD,CCSDDPT,CCSDYEAR,CCSDPER
            CALL      WRCCSD1
          ENDIF
          GOTO      SUMM0200
SUMM9999
          RETURN
.
.-------------------------------
. Includes for I/O and Keyins
.-------------------------------
          INC       CCSAWGIO/INC
          INC       CCSCALIO/INC
          INC       CCSCALKY    
          INC       CCSCDTIO/INC
          INC       CCSDALIO/INC
          INC       CCSDCOIO/INC
          INC       CCSDPTIO/INC
          INC       CCSSDCIO/INC
.
          INC       STDGENCD
.
