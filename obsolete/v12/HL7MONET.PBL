.*****************************************************************************
.* System    :   Patient Management System                                   *
.* Program   :   HL7MONET                                                    *
.* Desc      :   webPAS Message receiver for Monet Interface                 *
.*****************************************************************************
.* Date      :   17/12/2007                                                  *
.* Author    :   Steve Armstrong                                             *
.* Function  :   This program will poll the hl7recaf table looking for       *
.*               and processing any "received" records (from Monet), either  *
.*               registering a new patient, or updating the PMI details for  *
.*               an existing patient.                                        *
.* Mods      :                                                               *
.*****************************************************************************
.*        V11.02.01 01/04/2022  Thanh T         TSK 0903453                  *
.*                  Added SPPXUCC4, SPPXUCC5, SPPXATF1 and SPPXATF2 for      *
.*                  DEATHAUD changes                                         *
.*****************************************************************************
.*        V11.01.02 20/12/2021  Thanh T         TSK 0877055                  *
.*                  Added DEATHATD for common variables to be used in        *
.*                  DEATHAUD                                                 *
.*        V11.01.01 15/09/2021  Thanh T         TSK 0889595                  *
.*                  Recompiled for PMSDAUFD/DEATHAUD changes                 *
.*****************************************************************************
.*        V11.00.02 23/06/2020  Peter Vela      TSK 0878550                  *
.*                  Recompiled for DEATHAUD                                  *
.*        V11.00.01 10/06/2020  Peter Vela       Task 0878550                *
.*                  Recompiled for DEATHAUD                                  *
.*        V10.14.01 13/06/2019  Peter Vela       Task 0871798                *
.*                  Recompiled for DEATHAUD                                  *
.*        V10.13.01 13/08/2018  Peter Vela       Task 0845218             *
.*                  Recompiled for DEATHAUD                               *
.*        V10.12.01 11/07/2018 Peter Vela     TSK 0845218                    *
.*                  Recompiled for DEATHAUD                                  *
.*        V10.06.03 18/05/2015 Patrick Adair  CAR 208170                     *
.*                  Recompiled for changes to UPDUR                          *
.*        V10.06.02 15/04/2015  Peter Vela       CAR 312723                  *
.*                  Recompiled for DEATHAUD                                  *
.*        V10.06.01 12/03/2015  Steve Armstrong  CAR 314108                  *
.*                  Removed reference to PATCGPFD (No Longer in use)         *
.*****************************************************************************
.*        V10.03.06 26/07/2013  Steve Armstrong  CAR 287787                  *
.*                  Recompiled for changes to DGCLICUA.                      *
.*        V10.03.05 30/06/2013  Davin             CAR 283202                 *
.*                  Recompiled for changes to hl7 messaging                  *
.*        V10.03.04 23/07/2012 Patrick Adair     CAR 269159                  *
.*                  Recompiled for changes to PATCOMN2                       *
.*        V10.03.03 19/07/2012  Steve Armstrong   CAR 268870                 *
.*                  Recompiled for changes to UPDUR & PATCOMN2.              *
.*        V10.03.02 09/07/2012  Steve Armstrong   CAR 267675                 *
.*                  Recompiled for changes to PATCOMN2.                      *
.*        V10.03.01 09/11/2011  Steve Armstrong   CAR 254774                 *
.*                  Recompiled for changes to UPDUR.                         *
.*****************************************************************************
.*        V10.02.01 25/06/2011 Steve Armstrong    CAR 240722                 *
.*                  Recompiled for changes to PMSCURFD.                      *
.*                  Recompiled for changes to PATLOCFD.                      *
.*                  Mods to load extended surname and given name fields.     *
.*****************************************************************************
.*        V10.01.01 02/02/2011  Steve Armstrong   CAR 237520                 *
.*                  Mods to remove Detente interface (PATDETNT)              *
.*****************************************************************************
.*        V10.00.02 04/06/2010  Steve Armstrong   CAR 223417                 *
.*                  Mods to split given names field (pmsrptaf.pmrpgnam) into *
.*                  first and second given names (for Eclipse).              *
.*        V10.00.01 09/04/2010 Steve Armstrong   CAR 219045                  *
.*                  Recompiled for changes PATMRGFD.                         *
.*****************************************************************************
.*        V9.11.04 23/04/2009  Steve Armstrong   CAR 184640                  *
.*                 Mods for changes to PMSRPTFD - new fields PMRPMEXP,       *
.*                 PMRPPAD1, PMRPPAD2, PMRPPAD3, PMRPPAD4 & PMRPPPCD         *
.*        V9.11.03 05/12/2008  J.Tan             CAR 182987                  *
.*                 Mods to get default code for PCONT,PMPXABRG,PTYPE         *
.*        V9.11.02 28/10/2008  Steve Armstrong   CAR 181793                  *
.*                 Fixed setting of EXIT flag in GAID routine                *
.*        V9.11.01 22/10/2008  Steve Armstrong   CAR 181066                  *
.*                 Mods to use ERORFLAG instead of ERRCOUNT when checking    *
.*                 for errors.  ERRCOUNT now only used to populate           *
.*                 hl7reraf.h7rrscnt.                                        *
.*                 16/10/2008  Steve Armstrong   CAR 181066                  *
.*                 Mods to increment ERRCOUNT for warnings as well as errors.*
.*****************************************************************************
.*        V9.10.05 18/09/2008  Steve Armstrong   CAR 179004                  *
.*                 Fixed validation of mandatory fields to use PMRPTITL      *
.*                 instead of PTITL.                                         *
.*                 Also added to code to ensure surname and given name are   *
.*                 converted to uppercase.                                   *
.*        V9.10.04 21/08/2008  Steve Armstrong   CAR 176710                  *
.*                 Mods to not increment error count for warnings            *
.*        V9.10.03 06/08/2008  Steve Armstrong   CAR 175607                  *
.*                 Mods to continue processing other records after an error. *
.*                 Also halted processing of record if validation (VPMI0000) *
.*                 failed in WPAT0000.                                       *
.*        V9.10.02 31/07/2008  Steve Armstrong   CAR 175370                  *
.*                 Mods to abort processing if an error is encountered in    *
.*                 VMES0000 or CMAN0000.                                     *
.*        V9.10.01 11/06/2008  Steve Armstrong   CAR 170510                  *
.*                 Mods to accept a U/R number from Monet if the field is    *
.*                 populated.                                                *
.*****************************************************************************
.*        V9.09.01 16/01/2008  Steve Armstrong   CAR 159539                  *
.*                 Mods to accept consultant/GP provider number and convert  *
.*                 it to a HCP code.                                         *
.*        V9.09.00 20/12/2007  Steve Armstrong   CAR 155887                  *
.*                 Program created.                                          *
.*****************************************************************************
.
          INC       STD002FD
.
. FILE DESCRIPTION INCLUDES
. -------------------------
          INC       BOKRC1FD/INC
          INC       HL7RECFD/INC
          INC       HL7RERFD/INC
          INC       DEATHATD/INC
          INC       NHIETHFD/INC
          INC       NHIMASFD/INC
          INC       OUTCLIFD/INC
          INC       PATAK1FD/INC
          INC       PATALRFD/INC
          INC       PATAM1FD/INC
          INC       PATCALAG/INC
          INC       PATCODFD/INC
          INC       PATCONFD/INC
          INC       PATCOMM/INC
          INC       PATDHEAD/INC
          INC       PATDO1FD/INC
          INC       PATDSCFD/INC
          INC       PATGSRFD/INC
          INC       PATINVFD/INC
          INC       PATLOCFD/INC
          INC       PATMA1FD/INC
          INC       PATMI1FD/INC
          INC       PATMRGFD/INC
          INC       PATNIDFD/INC
          INC       PATPA1FD/INC
          INC       PATPR1FD/INC
          INC       PATRE1FD/INC
          INC       PATURAFD/INC
          INC       PATVISFD/INC
          INC       PMSAIDFD/INC
          INC       PMSCURFD/INC
          INC       PMSDAUFD/INC
          INC       PMSHCPFD/INC
          INC       PMSPX2FD/INC
          INC       PMSRFLFD/INC
          INC       PMSRPTFD/INC
          INC       PMSTLEFD/INC
          INC       WEBSECFD/INC
.
.
. LOCAL VARIABLE DEFINITION
. -------------------------
ACTION    DIM       1
ACC       DIM       2
ADD       DIM       2
AMM       DIM       2
AYY       DIM       2
.
BJDAY     FORM      3
.
CJDAY     FORM      3
CMDLINE   DIM       80
CURRDATE  DIM       8
CURRTIME  DIM       8
.
DEFCONT   DIM       3
DEFABRG   DIM       3
DEFPTYP   DIM       3
DETNTREC  FORM      2
DIM4      DIM       4
DIM8      DIM       8
DIM10     DIM       10
DIM20     DIM       20
DIM25     DIM       25
.
ERORCODE  DIM       3
ERORDESC  DIM       70
ERORFLAG  FORM      1
ERRCOUNT  FORM      3
.
FORM6     FORM      6
FORM8     FORM      8
FRSTGNAM  DIM       40
FULLGNAM  DIM       80
.
MESSTYPE  FORM      1                  * message type
.                                          1 = A28
.                                          2 = A31
NMPNUMB   DIM       20
.
OLDBED    DIM       3
OLDWARD   DIM       3
OPERCODE  DIM       4
.
REFCOUNT  FORM      1                  * referral count
.
ALIASSTS  DIM       1
SAVEUSR1  DIM       3
.
SAVEALIA  FORM      1
SAVECODE  DIM       3
SAVEPCTR  DIM       2
SAVEPHCP  DIM       10
SAVEPRAC  DIM       10
SAVCONCD  DIM       10
SAVRGPCD  DIM       10
.
SAVESNAM  DIM       40
SAVEXFNM  DIM       40
SAVEXSNM  DIM       40
SAVETITL  DIM       4
SAVEPSEX  DIM       1
SAVEPDOB  DIM       8
SAVEPFGN  DIM       25
SAVEPMST  DIM       3
SAVEPREG  DIM       3
SAVEPCNT  DIM       3
SAVEPTYP  DIM       3
SAVEABRG  DIM       3
SAVEUSR7  DIM       3
SAVEMEDI  DIM       10
SAVEMCCD  DIM       2
SAVEMEDC  DIM       8
SAVECONP  DIM       1
SAVEUPRF  DIM       3
SAVEINTR  DIM       1
SAVELNG1  DIM       3
SAVEPRVI  DIM       3
SAVEFLDR  DIM       3
SAVESN16  DIM       1
SPPXUCC4  DIM       3
SPPXUCC5  DIM       3
SPPXATF1  DIM       80
SPPXATF2  DIM       80
SAVECUID  DIM       8
SAVECDAT  DIM       8
SAVECTIM  DIM       8
.
SCORENUM  FORM      1
SCNDGNAM  DIM       40
SURSYST   FORM      1
.
TIMEIS     DIM          8
.
URCHKDGT  FORM      4
URCHKPRD  FORM      2
URNLNGTH  FORM      2
URNOWGHT  FORM      1
URNUMBER  DIM       8
USERID    DIM       10
USERNAME  DIM       10
.
.
. PROGRAM CONSTANTS
. -----------------
CATTC     INIT      "tc"
.
MESTYA28  INIT      "ADT^A28"
MESTYA31  INIT      "ADT^A31"
.
SEC1      FORM      "00001"
.
URWTARAY  INIT      "234567"
.
.
PRGID     INIT      "HL7MONET"
PRGNAM    INIT      "Inbound Message Handler"
VERSION   INIT      "V12.00.00"
+
.*****************************************************************************
.*                              MAIN0000                                     *
.*                      Controlling Logic (Mainline code)                    *
.*****************************************************************************
.
MAIN0000  CALL      INIT0000               * initialisation and open files
          BRANCH    EXIT,MAIN9999          * error with Alt. Id code
.
          CALL      PROC0000               * process
.
MAIN9999  STOP
+
.*****************************************************************************
.*                                INIT0000             Called by: MAIN0000   *
.*                             initialisation                                *
.*  The initialisation routine is used to display headings and open files.   *
.*****************************************************************************
.
INIT0000  CALL      DISPHEAD                  * display heading
.
          DISPLAY   *P56:24,*EL,"Opening ":
                    *P64:24,"hl7recaf";
          OPEN      HL7RECA2,"hl7recaf"
.
          DISPLAY   *P64:24,"hl7reraf";
          OPEN      HL7RERA1,"hl7reraf"
.
          DISPLAY   *P64:24,"patcodes";
          OPEN      PATCODE1,"patcodes"
.
          DISPLAY   *P64:24,"patgsrnf";
          OPEN      PATGSRN1,"patgsrnf"
.
          DISPLAY   *P64:24,"patma1af";
          OPEN      PATMA1A1,"patma1af"
          OPEN      PATMX1A1,"patmx1af"
.
          DISPLAY   *P64:24,"patvisaf";
          OPEN      PATVISA2,"patvisaf"
.
          DISPLAY   *P64:24,"pmsaidaf";
          OPEN      PMSAIDA1,"pmsaidaf"
          OPEN      PMSAIDA2,"pmsaidaf"
.
          DISPLAY   *P64:24,"pmshcpaf";
          OPEN      PMSHCPA1,"pmshcpaf"
          OPEN      PMSHCPA3,"pmshcpaf"
.
          DISPLAY   *P64:24,"pmspx2af";
          OPEN      PMSPX2A1,"pmspx2af"
.
          DISPLAY   *P64:24,"pmsrflaf";
          OPEN      PMSRFLA1,"pmsrflaf"
.
          DISPLAY   *P64:24,"pmsrptaf";
          OPEN      PMSRPTA1,"pmsrptaf"
.
          DISPLAY   *P64:24,"pmstleaf";
          OPEN      PMSTLEA1,"pmstleaf"
.
          DISPLAY   *P64:24,"websecaf";
          OPEN      WEBSECA1,"websecaf"
.
          DISPLAY   *P64:24,"controlf";
          OPEN      CONTROLF,"controlf"
          READ      CONTROLF,TEN;*213,CAUDM
          READ      CONTROLF,TEN9;*208,CPMIAD
.
          CALL      GDEF0000                     * Get default codes
.
          CALL      GCOD0000                     * get Alt. Id code for Monet
          BRANCH    EXIT,INIT9100                * code not found
.
INIT5000  KEYIN     *P1:24,*EL,"Keep old names as aliases (",*V2LON,*DV,ANSY:
                    *HOFF,*DV,SLASH,*V2LON,*DV,ANSN,*HOFF,"):":
                    *P34:24,*V2LON,ANS
.
          PACK      ANS,ANS,SP1
          REP       UPPLOW,ANS
          MATCH     ANSY,ANS
          IF        @EQUAL
            MOVE      ONE,SAVEALIA
            GOTO      INIT9000
          ENDIF
.
          MATCH     ANSN,ANS
          IF        @EQUAL
            MOVE      ZERO,SAVEALIA
            GOTO      INIT9000
          ENDIF
.
          BEEP
          GOTO      INIT5000
.
INIT9000  MOVE      ZERO,EXIT
          GOTO      INIT9999
.
INIT9100  MOVE      ONE,EXIT
.
INIT9999  RETURN
+
.*****************************************************************************
.*                               PROC0000              Called by: MAIN0000   *
.*         Keep looping through hl7recaf looking for messages that           *
.*         are waiting to be processed (status = "R")                        *
.*****************************************************************************
.
PROC0000  PACK      KEY37,ANSR,SP30,SP10
          CALL      RSH7REC2                     * position in file
          CALL      RKH7REC2                     * read next record
          IF        OVRCD = 1
            DISPLAY   *W5;                       * wait for 5 seconds
            GOTO      PROC0000                   * get next waiting record
          ENDIF
.
          MOVE      ZERO,ERRCOUNT                * initialise msg. error count
          MOVE      ZERO,ERORFLAG                * initialise error flag
.
          CALL      IBACLOCK                     * get current date/time
          PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
          MOVE      CTIMEIS,CURRTIME
          REP       " 0",CURRTIME
.
          CALL      VMES0000                     * validate basic msg. details
          COMPARE   ZERO,ERORFLAG                * message errors ?
          GOTO      PROC9000 IF NOT EQUAL        * yes - don't write
.
.         Check that all the PMI mandatory fields are populated in the message
.
          CALL      CMAN0000
          COMPARE   ZERO,ERORFLAG                * message errors ?
          GOTO      PROC9000 IF NOT EQUAL        * yes - don't write
.
.         If this an update message (A31), then use the alternate id to get
.         the patient's U/R number, then match the patient details
.
          IF        MESSTYPE = 2
              CALL      GAID0000                 * get alt. id record
              BRANCH    EXIT,PROC9000            * missing PMI record
          ENDIF
.
          PERFORM   MESSTYPE,WPAT0000:           * register new patient
                             UPAT0000            * update existing patient
          BRANCH    EXIT,PROC9000                * error - update status
.
.         Message was processed successfully, so update the status
.         to "P" (Processed Ok).
.
          MOVE      ANSP,H7RESTAT
          GOTO      PROC9100
.
.         There were one or more errors in the message, so simply update
.         the hl7recaf status to "E" (Error).
.
PROC9000  MOVE      ANSE,H7RESTAT
          CALL      ALRT0000                     * send email alert
.
PROC9100  IF        ERORFLAG = 0
            MOVE      PURNO,H7REURNO
          ENDIF
          PACK      H7REDTPR,CURRDATE,CURRTIME
          CALL      UPH7REC2
          IF        ERORFLAG = 1
            GOTO      PROC0000
          ENDIF
.
.         Now update the U/R into pmsrptaf
.
          MOVE      PURNO,PMRPURNO
          CALL      UPPMRPT1
          GOTO      PROC0000                     * get next record
.
PROC9999  RETURN
+
.*****************************************************************************
.*                           GAID0000              Called by: PROC0000       *
.*           Get the alternate id record for this patient to identify        *
.*           the patient's U/R number.                                       *
.* Requires: PMRPALID - alternate id from Monet.                             *
.* Returns:  PURNO - patient U/R number                                      *
.*           MESSTYPE - Message Type                                         *
.*           EXIT  0 = Ok to continue                                        *
.*                 1 = Error                                                 *
.*****************************************************************************
.
GAID0000  PACK      KEY31,PMRPALID,SP30,SP10
          CALL      RSPMAID2                     * position on alt. id
GAID0500  CALL      RKPMAID2                     * read next record
          BRANCH    OVRCD,GAID5000               * eof - error
.
          MATCH     PMRPALID,PMAIALID            * same Alt. id still ?
          GOTO      GAID5000 IF NOT EQUAL        * no - error
.
          MATCH     SAVECODE,PMAITYPE            * matching alt id. code ?
          GOTO      GAID0500 IF NOT EQUAL        * no - get next record
.
.         The alternate id record has been found, so get the current
.         patient details
.
          MOVE      PMAIURNO,KEY8
          CALL      RDMAST1                      * patient on file ?
          IF        OVRCD = 1
            MOVE      "207",ERORCODE
            MOVE      "patma1af record missing",ERORDESC
            MOVE      ONE,ERORFLAG               * set error flag
            CALL      EROR0000                   * write error record
            GOTO      GAID9100
          ELSE
            MOVE      PMAIURNO,KEY8
            CALL      RDPMPX21
            IF        OVRCD = 1
              MOVE      "207",ERORCODE
              MOVE      "pmspx2af record missing",ERORDESC
              MOVE      ONE,ERORFLAG               * set error flag
              CALL      EROR0000                   * write error record
              GOTO      GAID9100
            ENDIF
            CALL      ACTMSAV                    * save current PMI details
            CALL      MACH0000                   * match patient details
            GOTO      GAID9000
          ENDIF
.
.         Register as new patient as no alternate id record was found
.
GAID5000  MOVE      ONE,MESSTYPE                 * change to register
          MOVE      "0  ",ERORCODE
          MOVE      "Warning: Update changed to Register",ERORDESC
          CALL      EROR0000                     * write error record
.
GAID9000  MOVE      ZERO,EXIT
          GOTO      GAID9999
.
GAID9100  MOVE      ONE,EXIT
.
GAID9999  RETURN
+
.*****************************************************************************
.*                            GCOD0000             Called by: INIT0000       *
.*         Get the category/code that is set up for Monet alternate id's     *
.*         (Where indicator 2 = "M" in Category AI).                         *
.* Returns:  EXIT  0 = Code found                                            *
.*                 1 = Code not found                                        *
.*****************************************************************************
.
GCOD0000  PACK      KEY5,ANSA,ANSI,SP5
          CALL      RDSCODE1                     * position on alt. id
GCOD0500  CALL      RDKCODE1                     * read next record
          BRANCH    OVRCD,GCOD9100               * eof - error
.
          MATCH     "AI",TCODE                   * same category still ?
          GOTO      GCOD9100 IF NOT EQUAL        * eof - error
.
          MATCH     ANSM,TCINDC2                 * Monet Alt. Id set ?
          GOTO      GCOD0500 IF NOT EQUAL        * no - get next record
.
          MOVE      ACODE,SAVECODE               * save code
.
          MOVE      ZERO,EXIT
          GOTO      GCOD9999
.
GCOD9100  DISPLAY   *P1:24,*EL,"Alternate Id code for Monet not found.  ";
          CALL      HITENTER
          MOVE      ONE,EXIT
.
GCOD9999  RETURN
+
.*****************************************************************************
.*                          WPAT0000               Called by: PROC0000       *
.*        Write a new PMI record to patma1af, patmx1af, pmspx2af & patgsrnf  *
.* Returns:  EXIT   0 = record processed successfully                        *
.*                  1 = record has errors                                    *
.*****************************************************************************
.
WPAT0000  CALL      CLPATMAS
          CALL      CLPATMSX
          CALL      CLPMSPX2
.
          CALL      VPMI0000                     * validate and load pmi fields
          COMPARE   ZERO,ERORFLAG                * message errors ?
          GOTO      WPAT9100 IF NOT EQUAL        * yes - don't write
.
          MATCH     SP8,H7REURNO                 * blank U/R ?
          IF        @EQUAL
            CALL      TEMP0000                   * yes - generate Temporary #
          ELSE
            MOVE    H7REURNO,KEY8
            CALL    RDAMAST1
            IF      OVRCD = 0
              MOVE      "207",ERORCODE
              MOVE      "patma1af record already exists",ERORDESC
              MOVE      ONE,ERORFLAG               * set error flag
              CALL      EROR0000                   * write error record
            ELSE
              MOVE      H7REURNO,PURNO
            ENDIF
          ENDIF
.
.         Create an alternate id (pmsaidaf) record
.
          PACK      KEY31,PURNO,SAVECODE,PMRPALID
          CALL      RAPMAID1
          IF        OVRCD = 0
            MOVE      "207",ERORCODE
            MOVE      "pmsaidaf record already exists",ERORDESC
            MOVE      ONE,ERORFLAG               * set error flag
            CALL      EROR0000                   * write error record
          ENDIF
.
          COMPARE   ZERO,ERORFLAG                * message errors ?
          GOTO      WPAT9100 IF NOT EQUAL        * yes - don't write
.
          MOVE      PURNO,PMAIURNO
          MOVE      SAVECODE,PMAITYPE
          MOVE      PMRPALID,PMAIALID
          MOVE      ZERO,PMAIDISU
          MOVE      SP3,PMAIHOSP
          MATCH     SP10,PMRPUSID
          IF        @EQUAL
            MOVE      "Monet     ",PMAICRUD
          ELSE
            MOVE      PMRPUSID,PMAICRUD
          ENDIF
          MOVE      CURRDATE,PMAIRDAT
          MOVE      PMAIRDAT,PMAICRDT
          MOVE      CURRTIME,PMAICRTM
          MOVE      SP8,PMAIUPDT
          MOVE      SP8,PMAIUPTM
          MOVE      SP10,PMAIUPUD
          MOVE      SP70,PMAISPAR
.
          CALL      WRPMAID1
.
.         Create the PMI data records
.
          CALL      SGNM0000                     * separate given names
          CALL      SDEF0000                     * set default codes
          CALL      WRTUR
.
.         See if a patient referral record needs to be written
.
          CALL      PRFL0000
.
          MOVE      ZERO,EXIT
          GOTO      WPAT9999
.
WPAT9100  MOVE      ONE,EXIT
.
WPAT9999  RETURN
+
.*****************************************************************************
.*                          UPAT0000               Called by: PROC0000       *
.*        Update an existing patient's details                               *
.* Returns:  EXIT   0 = record processed successfully                        *
.*                  1 = record has errors                                    *
.*****************************************************************************
.
UPAT0000  CALL      VPMI0000                     * validate and load pmi fields
          COMPARE   ZERO,ERORFLAG                * message errors ?
          GOTO      UPAT9100 IF NOT EQUAL        * yes - don't write
.
          CALL      SDEF0000                     * set default codes
          CALL      UPDUR
          CALL      SGNM0000                     * separate given names
          CALL      UPPMPX21
.
.         See if a patient referral record needs to be written
.
          CALL      PRFL0000
.
          MOVE      ZERO,EXIT
          GOTO      UPAT9999
.
UPAT9100  MOVE      ONE,EXIT
.
UPAT9999  RETURN
+
.*****************************************************************************
.*                           CMAN0000              Called by: PROC0000       *
.*                 Check mandatory PMI fields are populated                  *
.*****************************************************************************
.
CMAN0000  MATCH     SP1,PMRPPSEX                 * Blank sex ?
          IF        @EQUAL
            MOVE      "101",ERORCODE
            MOVE      "Gender is mandatory",ERORDESC
            MOVE      ONE,ERORFLAG               * set error flag
            CALL      EROR0000                   * write error record
          ENDIF
.
          MATCH     SP8,PMRPPDOB                 * blank date of birth ?
          IF        @EQUAL
            MOVE      "101",ERORCODE
            MOVE      "Date of birth is mandatory",ERORDESC
            MOVE      ONE,ERORFLAG               * set error flag
            CALL      EROR0000                   * write error record
          ENDIF
.
          MATCH     SP4,PMRPTITL                 * title blank ?
          IF        @EQUAL
            MOVE      "101",ERORCODE
            MOVE      "Title is mandatory",ERORDESC
            MOVE      ONE,ERORFLAG               * set error flag
            CALL      EROR0000                   * write error record
          ENDIF
.
          MATCH     SP25,PMRPGNAM                * given name blank ?
          IF        @EQUAL
            MOVE      "101",ERORCODE
            MOVE      "Given Name is mandatory",ERORDESC
          ENDIF
          REP       UPPLOW,PMRPGNAM
.
          MATCH     SP20,PMRPSNAM                * surname blank ?
          IF        @EQUAL
            MOVE      "101",ERORCODE
            MOVE      "Surname is mandatory",ERORDESC
            MOVE      ONE,ERORFLAG               * set error flag
            CALL      EROR0000                   * write error record
          ENDIF
          REP       UPPLOW,PMRPSNAM
.
CMAN9999  RETURN
+
.*****************************************************************************
.*                           MACH0000              Called by: PROC0000       *
.*       Validate that the patient in patma1af is a match for the patient    *
.*       received from Monet by comparing details.  For each detail that     *
.*       matches, a score is totalled (based on scores below).  The final    *
.*       score must be at least 5 for a match.                               *
.* Requires:  PMRPPSEX, PMRPSNAM, PMRPGNAM, PMRPPDOB, PMRPMEDI, PMRPTITL     *
.*            PSEX, PSNAME, PGNAME, PBDATE, PMEDI, PTITL                     *
.* Returns:   SCORENUM - total matching score                                *
.*                                                                           *
.*  Field       Score                                                        *
.* ------------ -----                                                        *
.*  Surname       2                                                          *
.*  Given Name    2                                                          *
.*  Initial       1                                                          *
.*  Medicare No   2                                                          *
.*  Date of Birth 2                                                          *
.*  Sex           1                                                          *
.*****************************************************************************
.
MACH0000  MOVE      ZERO,SCORENUM                * initialise score
.
          MATCH     PMRPPSEX,PSEX                * same sex ?
          IF        @EQUAL
            ADD       ONE,SCORENUM               * yes - update score
          ENDIF
.
          MATCH     PMRPPDOB,PBDATE              * same dob ?
          IF        @EQUAL
            ADD       TWO,SCORENUM               * yes - update score
          ENDIF
.
          MATCH     PMRPSNAM,PSNAME              * same surname ?
          IF        @EQUAL
            ADD       TWO,SCORENUM               * yes - update score
          ENDIF
.
          MATCH     PMRPGNAM,PGNAME              * same given name ?
          IF        @EQUAL
            ADD       TWO,SCORENUM               * yes - update score
          ELSE
            MOVE    PMRPGNAM,ANS
            MATCH   ANS,PGNAME                   * no - same initial ?
            IF      @EQUAL
              ADD     ONE,SCORENUM               * yes - update score
            ENDIF
          ENDIF
.
          MATCH     PMEDI,PMRPMEDI               * same medicare number ?
          IF        @EQUAL
            ADD       TWO,SCORENUM               * yes - update score
          ENDIF
.
          IF        SCORENUM < 5
            MOVE      "207",ERORCODE
            MOVE      "Patient details don't match",ERORDESC
            MOVE      ONE,ERORFLAG               * set error flag
            CALL      EROR0000                   * write error record
          ENDIF
.
MACH9999  RETURN
+
.*****************************************************************************
.*                            VPMI0000             Called by: WPAT0000       *
.*                                                            UPAT0000       *
.*        Load and validate the PMI data fields                              *
.*****************************************************************************
.
VPMI0000  MOVE      PMRPSNAM,PSNAME
          PACK      PTMASNAM,PMRPSNAM,SP70
          MOVE      PMRPGNAM,PGNAME
.
          PACK      FULLGNAM,PMRPGNAM,SP70,SP70
          CALL      SEPRNAME
          PACK      PMPXFNAM,FRSTGNAM,SP70
          PACK      PMPXSNAM,SCNDGNAM,SP70
.
          MOVE      PMRPTITL,PTITL
          MOVE      PMRPADD1,PADD1
          MOVE      PMRPADD2,PADD2
          MOVE      PMRPADD3,PSUBRB
          MOVE      PMRPADD4,PADD4
          MOVE      PMRPPOST,PPOST
          MOVE      PMRPTELP,PTELEP
          MOVE      PMRPTELB,PTELEB
          MOVE      PMRPPDOB,PBDATE
          MOVE      PMRPPSEX,PSEX
          MOVE      PMRPMOBL,PTMXCELL
          MOVE      PMRPDOFD,PDECDTE
          MOVE      PMRPPAD1,PTMXADD1
          MOVE      PMRPPAD2,PTMXADD2
          MOVE      PMRPPAD3,PTMXADD3
          MOVE      PMRPPAD4,PTMXADD4
          MOVE      PMRPPPCD,PTMXPOST
.
.         If there is a Medicare Expiry Date, then calulate the last day
.         of the month
.
          MATCH     SP6,PMRPMEXP                 * blank medicare expiry date ?
          GOTO      VPMI1000 IF EQUAL            * yes
.
          TYPE      PMRPMEXP
          IF        !@EQUAL
            MOVE      "103",ERORCODE
            MOVE      "Medicare Expiry Date not valid",ERORDESC
            MOVE      ONE,ERORFLAG               * set error flag
            CALL      EROR0000                   * write error record
          ENDIF
.
          UNPACK    PMRPMEXP,DIM4,DIM2
          MOVE      DIM2,FORM2
          BRANCH    FORM2,VPMI0100:              * Jan
                          VPMI0300:              * Feb
                          VPMI0100:              * Mar
                          VPMI0200:              * Apr
                          VPMI0100:              * May
                          VPMI0200:              * Jun
                          VPMI0100:              * Jul
                          VPMI0100:              * Aug
                          VPMI0200:              * Sep
                          VPMI0100:              * Oct
                          VPMI0200:              * Nov
                          VPMI0100               * Dec
.
.         Invalid month
.
          MOVE      "103",ERORCODE
          MOVE      "Medicare Expiry Date not valid",ERORDESC
          MOVE      ONE,ERORFLAG               * set error flag
          CALL      EROR0000                   * write error record
          GOTO      VPMI1000
.
.         Set last day for month of 31 days
.
VPMI0100  MOVE      THIRTY1,DIM2
          GOTO      VPMI0900
.
.         Set last day for month of 30 days
.
VPMI0200  MOVE      THIRTY,DIM2
          GOTO      VPMI0900
.                         
.         Set last day for February             
.         A leap year is one where:              
.           1. Every year divisible by 4 is a leap year.
.           2. But every year divisible by 100 is NOT a leap year
.           3. Unless the year is also divisible by 400, then it is still a
.              leap year. 
.
VPMI0300  MOVE      DIM4,FORM4
          IF        (FORM4%4) = 0
            IF        (FORM4%100) = 0
              IF        (FORM4%400) = 0
                MOVE      TWENTY9,DIM2
                GOTO      VPMI0900
              ENDIF
            ENDIF
          ENDIF
.
.         Set last day for normal Feb
.
          MOVE      TWENTY8,DIM2
.
VPMI0900  PACK      PMPXMEDC,PMRPMEXP,DIM2
.
.         Check that title is a valid code
.
VPMI1000  MOVE      PMRPTITL,KEY4
          CALL      RDPMTLE1
          IF        OVRCD = 1
            MOVE      "103",ERORCODE
            MOVE      "Title code not valid",ERORDESC
            MOVE      ONE,ERORFLAG               * set error flag
            CALL      EROR0000                   * write error record
          ENDIF
.
          MATCH     ANSN,PMRPCEAS
          IF        @EQUAL
            MOVE      ZERO,PCEASE
          ELSE
            MATCH     ANSY,PMRPCEAS
            IF        @EQUAL
              MOVE      ONE,PCEASE
            ELSE
              MOVE      "103",ERORCODE
              MOVE      "Deceased indicator is not valid",ERORDESC
              MOVE      ONE,ERORFLAG             * set error flag
              CALL      EROR0000                 * write error record
            ENDIF
          ENDIF
.
          IF        PCEASE = 1
            MATCH     SP8,PDECDTE
            IF        @EQUAL
              MOVE      "101",ERORCODE
              MOVE      "Date of death is missing",ERORDESC
              MOVE      ONE,ERORFLAG             * set error flag
              CALL      EROR0000                 * write error record
            ENDIF
          ELSE
            MATCH     SP8,PDECDTE
            IF        !@EQUAL
              MOVE      "207",ERORCODE
              MOVE      "Non-deceased patient has date of death",ERORDESC
              MOVE      ONE,ERORFLAG             * set error flag
              CALL      EROR0000                 * write error record
            ENDIF
          ENDIF
.
.         Split out medicare number into relevant fields
.
          UNPACK    PMRPMEDI,DIM10,ANS
          MOVE      DIM10,PMEDI
          PACK      PTMXMCCD,ANS,SP1
.
.         Validate Referral Expiry/Consultant/Ref. GP if present
.
          MOVE      ZERO,REFCOUNT                * initialise count
          MATCH     SP8,PMRPEXPD                 * blank expiry date ?
          IF        !@EQUAL
            ADD       ONE,REFCOUNT               * no - increment count
          ENDIF
.
          MATCH     SP10,PMRPCONS                * blank consultant code ?
          IF        !@EQUAL
            ADD       ONE,REFCOUNT               * no - increment count
          ENDIF
.
          MATCH     SP10,PMRPRFGP                * blank referring GP ?
          IF        !@EQUAL
            ADD       ONE,REFCOUNT               * no - increment count
          ENDIF
.
          IF        REFCOUNT > 0 & REFCOUNT < 3
            MOVE      "207",ERORCODE
            MOVE      "Inconsistency in Referral details",ERORDESC
            MOVE      ONE,ERORFLAG               * set error flag
            CALL      EROR0000                   * write error record
          ENDIF
.
          MOVE      SP10,SAVCONCD                * init. consultant  save code
.
.         Validate Consultant code
.
          MATCH     SP10,PMRPCONS
          IF        !@EQUAL
            PACK      KEY20,PMRPCONS,SP20
            CALL      RSPMHCP3                   * position on provider number
            CALL      RKPMHCP3                   * read next record
            IF        OVRCD = 1
              MOVE      "103",ERORCODE
              MOVE      "Consultant provider number not on file",ERORDESC
              MOVE      ONE,ERORFLAG             * set error flag
              CALL      EROR0000                 * write error record
              GOTO      VPMI5000
            ENDIF
.
            MATCH     PMRPCONS,PMHCPRV1          * same provider number ?
            IF        !@EQUAL
              MOVE      "103",ERORCODE
              MOVE      "Consultant provider number not on file",ERORDESC
              MOVE      ONE,ERORFLAG             * set error flag
              CALL      EROR0000                 * write error record
              GOTO      VPMI5000
            ENDIF
          ENDIF
.
          MOVE      PMHCHCPC,SAVCONCD            * save consultant HCP code
.
.         Validate Referring GP code
.
.
VPMI5000  MOVE      SP10,SAVRGPCD                * init. ref. GP  save code
.
          MATCH     SP10,PMRPRFGP
          IF        !@EQUAL
            PACK      KEY20,PMRPRFGP,SP20
            CALL      RSPMHCP3                   * position on provider number
            CALL      RKPMHCP3                   * read next record
            IF        OVRCD = 1
              MOVE      "103",ERORCODE
              MOVE      "Referring GP code not on file",ERORDESC
              MOVE      ONE,ERORFLAG             * set error flag
              CALL      EROR0000                 * write error record
              GOTO      VPMI9999
            ENDIF
.
            MATCH     PMRPRFGP,PMHCPRV1          * same provider number ?
            IF        !@EQUAL
              MOVE      "103",ERORCODE
              MOVE      "Referring GP code not on file",ERORDESC
              MOVE      ONE,ERORFLAG             * set error flag
              CALL      EROR0000                 * write error record
            ENDIF
          ENDIF
.
          MOVE      PMHCHCPC,SAVRGPCD            * save ref. GP HCP code
.
VPMI9999  RETURN
+
.*****************************************************************************
.*                            VMES0000             Called by: PROC0000       *
.*              Validate basic message details                               *
.* Requires - Valid read on hl7recaf record                                  *
.*****************************************************************************
.
VMES0000  COMPARE   ZERO,H7REMESI                * zero message id ?
          IF        @EQUAL
            MOVE      "101",ERORCODE
            MOVE      "Zero Message ID is not valid",ERORDESC
            MOVE      ONE,ERORFLAG               * set error flag
            CALL      EROR0000                   * write error record
          ENDIF
.
          MOVE      H7REMESI,KEY20
          CALL      RDPMRPT1                     * PMI message details found ?
          IF        OVRCD = 1
            MOVE      "207",ERORCODE
            MOVE      "pmsrptaf record not found",ERORDESC
            MOVE      ONE,ERORFLAG               * set error flag
            CALL      EROR0000                   * write error record
          ENDIF
.
          MATCH     SP20,PMRPALID                 * alt. id blank ?
          IF        @EQUAL
            MOVE      "101",ERORCODE              * yes
            MOVE      "Alternate Id is blank",ERORDESC
            MOVE      ONE,ERORFLAG               * set error flag
            CALL      EROR0000                   * write error record
          ENDIF
.
          MATCH     SP7,H7REMTYP                 * blank message type ?
          IF        @EQUAL
            MOVE      "101",ERORCODE
            MOVE      "Message type is blank",ERORDESC
            MOVE      ONE,ERORFLAG               * set error flag
            CALL      EROR0000                   * write error record
          ENDIF
.
          MATCH     MESTYA28,H7REMTYP            * A28 message ?
          IF        !@EQUAL
            MATCH     MESTYA31,H7REMTYP          * no - A31 message ?
            IF        !@EQUAL
              MOVE      "200",ERORCODE
              MOVE      "Message type is not valid",ERORDESC
              MOVE      ONE,ERORFLAG             * set error flag
              CALL      EROR0000                 * write error record
            ELSE
              MOVE      TWO,MESSTYPE             * set flag for A31 message
            ENDIF
          ELSE
            MOVE     ONE,MESSTYPE                * set flag for A28 message
          ENDIF
.
VMES9999  RETURN
+
.*****************************************************************************
.*                           EROR0000              Called by:                *
.*        Error handling routine - Write a record to hl7reraf                *
.* Requires: ERORDESC - error description                                    *
.*           ERORCODE - (HL7) error code                                     *
.*           PMRPMESI - message id                                           *
.*****************************************************************************
.
EROR0000  ADD       ONE,ERRCOUNT               * increment msg. error count
.
          MOVE      PMRPMESI,H7RRMESI
          MOVE      ERRCOUNT,H7RRSCNT
.
          ENDSET    ERORDESC
          APPEND    SP70,ERORDESC
          RESET     ERORDESC
          MOVE      ERORDESC,H7RRDESC
.
          MOVE      ERORCODE,H7RRCODE
          MOVE      SP30,H7RRSPAR
.
          CALL      WRH7RER1
.
EROR9999  RETURN
+
.*****************************************************************************
.*                          ALRT0000               Called by: PROC0000       *
.*           Send an email alert for the message                             *
.*****************************************************************************
.
ALRT0000  MOVE      "hl7monet.us1 ",KEY13
          PACK      CMDLINE,KEY13,PRGID,SP1,H7REMESI,SP70
          EXECUTE   CMDLINE,TASKID
.
ALRT9999  RETURN
+
.*****************************************************************************
.*                             TEMP0000            Called by: WPAT0000       *
.*        Generate the next T- (Temporary) number                            *
.* Returns: PURNO - Patient U/R number                                       *
.*****************************************************************************
.
TEMP0000  MOVE      " 80",PRXCODE                   
          CALL      GETSLK00
          READ      CONTROLF,EIGHTY;*223,PTCNNXTT   * Next temp NMPI
          ADD       ONE,PTCNNXTT                    * increment
          WRITAB    CONTROLF,EIGHTY;*223,PTCNNXTT   * write back to controlf
          CALL      RELSLK00
.
          MOVE      PTCNNXTT,FORM6          
          MOVE      FORM6,KEY6
          REP       " 0",KEY6           
          MOVE      "T-",KEY2                    * set temp number prefix
          PACK      KEY8,KEY2,KEY6               * load new U/R number
          CALL      RDAMAST1                     * U/R already on file ?
          COMPARE   ZERO,OVRCD
          GOTO      TEMP0000 IF EQUAL            * yes - get next number
.
          MOVE      KEY8,PURNO                   * no
.
TEMP9999  RETURN
+
.*****************************************************************************
.*                            PRFL0000             Called by: WPAT0000       *
.*                                                            UPAT0000       *
.*             Check the patient referral record and add a record            *
.*             if the referral doesn't exist, or update an existing record   *
.*****************************************************************************
.
PRFL0000  COMPARE   THREE,REFCOUNT               * referral details present ?
          GOTO      PRFL9999 IF NOT EQUAL        * no - finished
.
          PACK      KEY26,PURNO,SAVCONCD,PMRPEXPD
          CALL      RDPMRFL1
          IF        OVRCD = 1
            MOVE      PURNO,PMRFURNO
            MOVE      SAVCONCD,PMRFCONS
            MOVE      PMRPEXPD,PMRFEXPD
            MOVE      SAVRGPCD,PMRFRFGP
            MOVE      CURRDATE,PMRFCDAT
            MOVE      CURRTIME,PMRFCTIM
            MATCH     SP10,PMRPUSID
            IF        @EQUAL
              MOVE      "Monet     ",PMRFCUID
            ELSE
              MOVE      PMRPUSID,PMRFCUID
            ENDIF
            MOVE      SP8,PMRFUDAT
            MOVE      SP8,PMRFUTIM
            MOVE      SP10,PMRFUUID
            PACK      PMRFSPAR,SP30,SP20
.
            CALL      WRPMRFL1
          ELSE
            MOVE      PMRPRFGP,PMRFRFGP
            CALL      UPPMRFL1
          ENDIF
.
PRFL9999  RETURN
+
.*****************************************************************************
.*                           SDEF0000              Called by: WPAT0000       *
.*                   Set default codes                        UPAT0000       *
.*****************************************************************************
.
SDEF0000  MATCH     SP70,PCONT
          IF        @EQUAL
            MOVE      DEFCONT,PCONT
          ENDIF
.
          MATCH     SP70,PMPXABRG
          IF        @EQUAL
            MOVE      DEFABRG,PMPXABRG
          ENDIF
.
          MATCH     SP70,PTYPE
          IF        @EQUAL
            MOVE      DEFPTYP,PTYPE
          ENDIF
.
SDEF9999  RETURN
+
.*****************************************************************************
.         Get default codes
.*****************************************************************************
GDEF0000  UNPACK    SP70,DEFCONT,DEFABRG,DEFPTYP
          PACK      KEY2,ANSC,SP70
          CALL      SRCD0000              * Search for default
          IF        EXIT=0
            MOVE      KEY3,DEFCONT
          ENDIF
.
          PACK      KEY2,ANSV,ANSA,SP70
          CALL      SRCD0000              * Search for default
          IF        EXIT=0
            MOVE      KEY3,DEFABRG
          ENDIF
.
          PACK      KEY2,ANST,SP70
          CALL      SRCD0000              * Search for default
          IF        EXIT=0
            MOVE      KEY3,DEFPTYP
          ENDIF
GDEF9999  RETURN
+
.*****************************************************************************
.         Search for default code
.*****************************************************************************
SRCD0000  MOVE      SP70,KEY3
          PACK      KEY5,KEY2,SP70
          CALL      RDSCODE1
SRCD1000  CALL      RDKCODE1
          BRANCH    OVRCD,SRCD9000
          MATCH     KEY2,TCODE
          GOTO      SRCD9000 IF NOT EQUAL
.
          MATCH     "1",PTCDDEFT
          GOTO      SRCD1000 IF NOT EQUAL     * Not default code
.
          MOVE      ACODE,KEY3
          MOVE      ZERO,EXIT
          GOTO      SRCD9999
.
SRCD9000  MOVE      ONE,EXIT
SRCD9999  RETURN
+
.******************************************************************************
.*                                 SGNM0000                                   *
.*  Convert PMRPGNAM (Given Names) to PMPXFNAM & PMPXSNAM                     *
.******************************************************************************
.
SGNM0000  MATCH     SP70,PMRPGNAM                * blank full given name ?
          GOTO      SGNM9999 IF EQUAL            * yes - finished
.
.         Find the first space in the name
.
          MOVE      PMRPGNAM,DIM25
          SCAN      SP1,DIM25                    * space found ?
          GOTO      SGNM1000 IF EQUAL            * yes
.
.         No space found, so single name fills whole field
.
          PACK      PMPXFNAM,PMRPGNAM,SP70       * save first name
          MOVE      SP70,PMPXSNAM
          GOTO      SGNM9999
.
.         A space was found in the full given name, so save the first name
.
SGNM1000  MOVEFPTR  DIM25,F2                     * save position of last char.
          RESET     DIM25                        * set FP back to start
          SETLPTR   DIM25,F2                     * set LL to last char.
          PACK      PMPXFNAM,DIM25,SP70          * load first given name
.
.         Check the remainder of the full given name field until the first
.         non-blank character is found, which will be the start of the
.         second given name
.
          SETLPTR   DIM25,25
          BUMP      DIM25,F2
.
SGNM2000  MATCH     SP1,DIM25                    * blank character ?
          GOTO      SGNM3000 IF NOT EQUAL        * no - load second given name
.
          BUMP      DIM25,1                      * move to character
          GOTO      SGNM3000 IF EOS              * end of string - finished
.
          GOTO      SGNM2000                     * check character
.
SGNM3000  PACK      PMPXSNAM,DIM25,SP70          * save second names
.
SGNM9999  RETURN
+
. =========================================================================
.         I/O Includes
. =========================================================================
.
          INC       STD002IO
.
          INC       ACTMSAV
          INC       CALCAGE
          INC       CLPATMAS
          INC       CLPATMSX
          INC       CLPMSDAU
          INC       CLPMSPX2
          INC       DEATHAUD
          INC       DGCLICUP
          INC       PATCOMN2
          INC       SEPRNAME
          INC       UPDUR
.
          INC       BOKRC1IO/INC
          INC       HL7RECIO/INC
          INC       HL7RERIO/INC
          INC       NHIETHIO/INC
          INC       NHIMASIO/INC
          INC       PATAM1IO/INC
          INC       PATCODIO/INC
          INC       PATGSRIO/INC
          INC       PATINVIO/INC
          INC       PATLOCIO/INC
          INC       PATMA1IO/INC
          INC       PATNIDIO/INC
          INC       PATPA1IO/INC
          INC       PATPR1IO/INC
          INC       PATURAIO/INC
          INC       PATVISIO/INC
          INC       PMSAIDIO/INC
          INC       PMSCURIO/INC
          INC       PMSDAUIO/INC
          INC       PMSHCPIO/INC
          INC       PMSPX2IO/INC
          INC       PMSRFLIO/INC
          INC       PMSRPTIO/INC
          INC       PMSTLEIO/INC
          INC       WEBSECIO/INC
