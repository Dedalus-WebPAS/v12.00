. **********************************************************************
. * System    :   Accounting System                                    *
. * Program   :   IBAFMS64                                             *
. * Desc      :   Monthly HCS Payroll Interface                        *
. **********************************************************************
. * Date      :   18.06.1991                                           *
. * Author    :   Neeriem Dye (IBA)                                    *
. * Notes     :   All of the budget update routines should be identical*
. *               those found in IBAFMS63.PBL                          *
. * Mods      :                                                        *
. **********************************************************************
. * V9.02.00  03.05.2002 Glenn Saunders                                *
. *           Export to new release i.e. v9.02 from vf.09              *
. **********************************************************************
. * VF.00.02  11.01.2000 Charles Handaya                               *
. *           Recompiled for Audit File date                           *
. * VF.00.01  23.12.1999 Sandra Barcham                                *
. *           Recompiled for FMSCCAFD                                  *
. *           srf 646145                                               *
. **********************************************************************
.$$$$$$
.        PROGRAM IBAFMS64
.             open files and initialise variables
.             WHILE user wants to execute program DO
.                  do program
.             END
.        END
.$$$$$$
. Standard FMS Accounting System Include
.---------------------------------------
          INC       FMSSTDDF
          INC       FMSUPDDF           * standard update include
          INC       FMSUDADF           * FMS audit update variables
.
.==============================================================================
.FILE DESCRIPTION INCLUDES
.-------------------------
.
          INC       FMSBCFFD/INC       * batch control file
          INC       FMSBPFFD/INC       * Budget Profile
          INC       FMSCCAFD/INC       * CC
          INC       FMSCSAFD/INC       * Control Account
          INC       FMSHCCFD/INC       * HCS CC conversion
          INC       FMSHCLFD/INC       * Institution
          INC       IBABATFD/INC       * batch
.
.==============================================================================
.LOCAL VARIABLE DEFINITION
.-------------------------
ISBUILD   INIT      "isbuild "         * define temp file variables
ISERASE   INIT      "iserase "
.
TMP0ADAT  INIT      " 40 U1-1,2-3,4-5,6-17"
NEZTMP0A  IFILE     SQL, FIXED=40, KEY="U1-1,2-3,4-5,6-17"
NAMEA     INIT      "neztmA"
FILENAMA  DIM       8
KILLTMPA  DIM       80
MAKETMPA  DIM       80
.                            * temp file definition
.Name     Type      Length Physical Start Description
.----     ----      ------ -------- ----- -----------
NEZACASH  DIM       1      1        1     batch type (0=accrual, 1=cash)
NEZATYPE  DIM       2      2        2     transaction type
NEZALEDG  DIM       2      2        4     ledger
NEZAACCT  DIM       12     12       6     account
NEZAAMT   FORM      12.2   8        18    amount
NEZASPAR  DIM       14     14       26    spare
.
.End of file                        40
.
.
.General Ledger Payroll Interface File
.-------------------------------------
.
FMSPINA1  FILE      ASCII,FIXED=300
FMPIICOD  DIM       3                  * institution code
FMPICOST  DIM       5                  * cost centre
FMPIBS01  DIM       1                  * basic budget period nn prefix
FMPIBB01  FORM      9                  * basic budget period nn
FMPIOS01  DIM       1                  * overhead budget period nn prefix
FMPIOB01  FORM      9                  * overhead budget period nn
FMPIBS02  DIM       1
FMPIBB02  FORM      9
FMPIOS02  DIM       1
FMPIOB02  FORM      9
FMPIBS03  DIM       1
FMPIBB03  FORM      9
FMPIOS03  DIM       1
FMPIOB03  FORM      9
FMPIBS04  DIM       1
FMPIBB04  FORM      9
FMPIOS04  DIM       1
FMPIOB04  FORM      9
FMPIBS05  DIM       1
FMPIBB05  FORM      9
FMPIOS05  DIM       1
FMPIOB05  FORM      9
FMPIBS06  DIM       1
FMPIBB06  FORM      9
FMPIOS06  DIM       1
FMPIOB06  FORM      9
FMPIBS07  DIM       1
FMPIBB07  FORM      9
FMPIOS07  DIM       1
FMPIOB07  FORM      9
FMPIBS08  DIM       1
FMPIBB08  FORM      9
FMPIOS08  DIM       1
FMPIOB08  FORM      9
FMPIBS09  DIM       1
FMPIBB09  FORM      9
FMPIOS09  DIM       1
FMPIOB09  FORM      9
FMPIBS10  DIM       1
FMPIBB10  FORM      9
FMPIOS10  DIM       1
FMPIOB10  FORM      9
FMPIBS11  DIM       1
FMPIBB11  FORM      9
FMPIOS11  DIM       1
FMPIOB11  FORM      9
FMPIBS12  DIM       1
FMPIBB12  FORM      9
FMPIOS12  DIM       1
FMPIOB12  FORM      9
.
FMPIBASS  DIM       1
FMPIBASX  FORM      11                 * monthly basic cash read
FMPIMOHS  DIM       1
FMPIMOHX  FORM      11                 * monthly overhead cash read
FMPIMLSS  DIM       1
FMPIMLSX  FORM      11                 * monthly LSL cash read
FMPIMWKS  DIM       1
FMPIMWKX  FORM      11                 * monthly WC cash read
FMPIMNAS  DIM       1
FMPIMNAX  FORM      11                 * monthly net accrual cash read
.
FMPIBASM  FORM      11.2               * monthly basic cash
FMPIMOHD  FORM      11.2               * monthly overhead cash
FMPIMLSL  FORM      11.2               * monthly LSL cash
FMPIMWKC  FORM      11.2               * monthly WC cash
FMPIMNAC  FORM      11.2               * monthly net accrual cash
.
FMPISPAR  DIM       19                 * spare
.
.End of record      300
.
.
CJ        INIT      "CJ"
JA        INIT      "JA"
JC        INIT      "JC"
.
ACCBATCH  DIM       5        * accrual batch number
ACCEPT    FORM      1        * accept mode (1=on)
ANBUDGET  FORM      14.5     * annual budget
BASICIND  FORM      1        * 0=overhead bud, 1=basic bud
BATCHNO   DIM       5        * batch number
BUDGTEMP  DIM       4        * budget
BUDGET01  FORM      12.5     * budget
BUDGET02  FORM      12.5     * budget
BUDGET03  FORM      12.5     * budget
BUDGET04  FORM      12.5     * budget
BUDGET05  FORM      12.5     * budget
BUDGET06  FORM      12.5     * budget
BUDGET07  FORM      12.5     * budget
BUDGET08  FORM      12.5     * budget
BUDGET09  FORM      12.5     * budget
BUDGET10  FORM      12.5     * budget
BUDGET11  FORM      12.5     * budget
BUDGET12  FORM      12.5     * budget
BUDGET13  FORM      12.5     * budget
CASBATCH  DIM       5        * cash batch number
CASHTYPE  DIM       1        * batch type
CURDATE   DIM       8        * batch date
CURPERD   DIM       2        * current period
COSTCODE  DIM       12       * cost centre
DEBTOT    FORM      12.2     * debit total
ENDDAT    DIM       8        * end date
FILENAME  DIM       8        * filename
FMSBFILE  DIM       8        * filename fmsbxxxx
FMSCFILE  DIM       8        * filename fmscxxxx
FORM12P2  FORM      12.2     * form 12.2
FORM12P5  FORM      12.5     * form 12.5
FORM13    FORM      13       * form 13
FORM13P2  FORM      13.2     * form 13.2
FYEAR     DIM       4        * financial year
INTFILE   DIM       20       * filename
INTFILE2  DIM       20       * filename
KKMM      DIM       2
KKYY      DIM       2
NOPERD    FORM      2        * number of periods
OPTIONA   FORM      2        * screen A selection keyin var
PROFTEMP  DIM       3        * profile  
SAVPERS   FORM      1        * number of periods
SCRFLAG   FORM      1        * redisplay flag
STRING    DIM       40       * parameter for routine RMTB
SUBJCODE  DIM       12       * subjective code
TEMPACCT  DIM       12       * account
TEMPAMT   FORM      12.2     * amount
.
COUNT     FORM      7
FILEPRE   INIT      "BUDTOGL/"
FILEPRE2  INIT      "BUDTOGL."
BANKNAME  DIM       35
CREDNAME  DIM       35
DEBTNAME  DIM       35
DISCNAME  DIM       35
PAYMNAME  DIM       35
AGSTNAME  DIM       35
CGSTNAME  DIM       35
.
PRGID     INIT      "IBAFMS64"
PRGNAM    INIT      "Monthly HCS Payroll Interface"
VERSION   INIT      "V12.00.00"
.
.******************************************************************************
.   MAINLINE - Controlling Logic
.******************************************************************************
ML0000    CALL      INIT0000           * display heading and open files
.
ML0100    CALL      SELA0000           * perform screen A
.
ML9999    CLOSE     NEZTMP0A           * delete temp file
          EXECUTE   KILLTMPA,TASKID
          MOVE      PORT,PORTCODE
          CALL      CTUP0000           * Update all changed accounts
          CHAIN     PGM                * chain back to menu
.
.******************************************************************************
.  INIT - Open Files                             Called by ML
.******************************************************************************
INIT0000  CALL      DISPHEAD                     * display screen
          CALL      OUPD0000                     * open files for update procs
          CALL      OUDA0000                 * Open budget audit files
.
          MOVE      ONE,CCENTRY
          MOVE      ONE,CDEFDTE
          MOVE      ZERO,CHIGHLT
.
          DISPLAY   *P64:24,"fmsbcfaf";  * batch control file
          OPEN      FMSBCFA1,"fmsbcfaf"
.
          DISPLAY   *P64:24,"fmsbpfaf";  * Budget Profile
          OPEN      FMSBPFA1,"fmsbpfaf"
.
          DISPLAY   *P64:24,"fmsccaaf";  * CC
          OPEN      FMSCCAA1,"fmsccaaf"
          OPEN      FMSCCAA2,"fmsccaaf"
.
          DISPLAY   *P64:24,"fmshccaf";  * CC conv
          OPEN      FMSHCCA1,"fmshccaf"
.
          DISPLAY   *P64:24,"fmscsaaf";  * Control Account
          OPEN      FMSCSAA1,"fmscsaaf"
.
          DISPLAY   *P64:24,"fmshclaf";  * Inst
          OPEN      FMSHCLA1,"fmshclaf"
.
          PACK      FILENAMA,NAMEA,PORT,SP70     * set up and open temp file
          REP       " 0",FILENAMA
          PACK      MAKETMPA,ISBUILD,FILENAMA,TMP0ADAT
          PACK      KILLTMPA,ISERASE,FILENAMA
          EXECUTE   KILLTMPA,TASKID
          EXECUTE   MAKETMPA,TASKID
          OPEN      NEZTMP0A,FILENAMA
.
          UNPACK    SP70,FMSBFILE,FMSCFILE
          PACK      CURDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURDATE
.
          MOVE      SP70,KEY2
          CALL      RSFMLA1
          CALL      RKFMLA1
          PACK      FMLCYEAR,FMLACYRR,SP70
.
INIT9999  DISPLAY   *P1:24,*EF;
          RETURN
.******************************************************************************
.  SCRA - Display Screen A                       Called by SELA, redisps
.******************************************************************************
SCRA0000  DISPLAY   *P1:3,*EF,*V2LON:
                    *P1:4," 1",*HOFF,". Month/Year           : ",*V2LON:
                    *P28:4,*V2LON,KKMM,SLASH,KKYY;
.
SCRA9999  RETURN
.******************************************************************************
.  SELA - Perform Screen A                       Called by ML
.         Returns : EXIT     (1=exit)
.******************************************************************************
SELA0000  UNPACK    SP70,KKYY,KKMM
.
          MOVE      ONE,ACCEPT         * in accept mode
          MOVE      ZERO,OPTIONA       * reset item desired
          CALL      SCRA0000           * display screen A
.
SELA0100  ADD       ONE,OPTIONA        * get next item
          BRANCH    ACCEPT,SELA0110    * in accept mode ?
          CALL      MQSA0000           * get option if not in accept mode
          MOVE      CCITEM,OPTIONA
.
SELA0110  MOVE      "28",CCOL          * get screen address
          MOVE      "3",CVERT
          MOVE      "1",SCRFLAG        * set redisplay flag
          ADD       OPTIONA,CVERT
          MOVE      OPTIONA,F2         * adjust selection for quit/continue
          ADD       TWO,F2
          BRANCH    F2,SELA9500,SELA9000:                       * quit, continue
                       SELA1100                                 * execute option
          BRANCH    ACCEPT,SELA0500    * at end of accept mode ?
          BEEP                         * illegal option
          GOTO      SELA0100           * get another option
.
SELA0500  MOVE      ZERO,ACCEPT        * clear accept mode
          GOTO      SELA0100
.
.---- option 1 ----
.
SELA1100  MOVE      CMM,F2
          KEYIN     *PCCOL:CVERT,*DV,F2:
                    *PCCOL:CVERT,*V2LON,*RV,F2;
          BRANCH    F2,SELA1110,SELA1110,SELA1110,SELA1110,SELA1110,SELA1110:
                       SELA1110,SELA1110,SELA1110,SELA1110,SELA1110,SELA1110
          BEEP
          GOTO      SELA1100
.
SELA1110  MOVE      F2,KKMM
          DISPLAY   *PCCOL:CVERT,*V2LON,KKMM,SLASH;
.
          MOVE      CYY,F2
          KEYIN     *P31:CVERT,*DV,F2:
                    *P31:CVERT,*V2LON,*RV,F2:
                    *P31:CVERT,*DV,F2;
          MOVE      F2,KKYY
          GOTO      SELA0100
.
.
SELA9000  MOVE      ZERO,EXIT          * continue
          MOVE      SP70,KEY2
          CALL      RSFMLA1
          CALL      RKFMLA1
          BRANCH    OVRCD,SELA9010
.
          PACK      WORKDATE,CCC,KKYY,KKMM,TEN5,SP70
          CALL      CFYR0000
          BRANCH    EXIT,SELA9005
.
          PACK      FYEAR,CURYEAR,SP70
          PACK      CURPERD,PERCNT,SP70
          PACK      ENDDAT,PEREDAT,SP70
.
          COMPARE   ONE,PERLOCK
          GOTO      SELA9100 IF NOT EQUAL
          DISPLAY   *P1:24,*B,*EF,"ERROR - Period ",CURPERD," Locked - ";
          CALL      HITENTER
          GOTO      SELA0100
.
SELA9005  DISPLAY   *P1:24,*B,*EF,*+,"ERROR - ",ERRMSG;
          CALL      HITENTER
          GOTO      SELA0100
.
SELA9010  DISPLAY   *P1:24,*B,*EF,"ERROR - Could Not Find Any Ledgers  - ";
          CALL      HITENTER
          GOTO      SELA0100
.
SELA9100  MOVE      SP70,INTFILE
          PACK      INTFILE,FILEPRE,KKMM,KKYY
          REP       " 0",INTFILE
          PACK      INTFILE2,FILEPRE2,KKMM,KKYY
          REP       " 0",INTFILE2
          CALL      POST0000
          GOTO      SELA0100
.
SELA9500  MOVE      ONE,EXIT           * quit
.
SELA9999  RETURN
.**********************************************************************
.  MQSA - select, post, cancel, run report              Called By lots
.        Returns  - CCITEM   (0=run interface, -1=exit, other=select
.**********************************************************************
MQSA0000  MOVE      SP10,CCITEMD
          KEYIN     *P1:22,*EF:
                    *P1:24,"Select Item, (",*V2LON:
                    "R",*HOFF,")un Interface, e(",*V2LON:
                    "X",*HOFF,")it ? ",*V2LON,*JR,CCITEMD;
.
          RESET     CCITEMD
          GOTO      MQSA0000 IF EOS    * nothing entered ?
          REP       UPPLOW,CCITEMD
.
          MOVE      " 0",CCITEM
          MATCH     "  R",CCITEMD      * run interface ?
          GOTO      MQSA9999 IF EQUAL
.
          MOVE      "-1",CCITEM
          MATCH     "  X",CCITEMD      * exit ?
          GOTO      MQSA9999 IF EQUAL
.
          MOVE      ZERO,CCITEM
          MOVE      CCITEMD,CCITEM
          COMPARE   ONE,CCITEM         * select item ?
          GOTO      MQSA9999 IF NOT LESS
.
          BEEP
          GOTO      MQSA0000
.
MQSA9999  RETURN
.**********************************************************************
.  POST - Post Data                                    Called By ML
.**********************************************************************
POST0000  MOVE      ZERO,COUNT
          MOVE      INTFILE,STRING
          CALL      RMTB0000           * remove trailing blanks
          MOVE      STRING,INTFILE
.
          MOVE      INTFILE2,STRING
          CALL      RMTB0000           * remove trailing blanks
          MOVE      STRING,INTFILE2
.
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO     * look for file opening error
          OPEN      FMSPINA1,INTFILE   * open file (if possible)
          TRAPCLR   IO
          BRANCH    OVRCD,POST9000
          CLOSE     FMSPINA1
.
          CALL      CLRB0000           * clear bugets
          BRANCH    EXIT,POST9500
.
          CALL      DTMP0000           * clear temp file
.
POST1000  CALL      RDFMCOCJ           * get next batch code
          MATCH     "00000",FMBCJBAT
          GOTO      POST1000 IF EQUAL
          PACK      ACCBATCH,FMBCJBAT,SP70
          PACK      KEY5,ACCBATCH,SP70
          CALL      RDFMBC1
          COMPARE   ONE,OVRCD
          GOTO      POST1000 IF NOT EQUAL
.
POST1100  CALL      RDFMCOCJ           * get next batch code
          MATCH     "00000",FMBCJBAT
          GOTO      POST1100 IF EQUAL
          PACK      CASBATCH,FMBCJBAT,SP70
          COMPARE   ONE,OVRCD
          GOTO      POST1100 IF NOT EQUAL
.
          DISPLAY   *P1:14,*EF:
                    *P1:14,"    Accrual Batch Number : ",*V2LON,ACCBATCH,*HOFF:
                    *P1:15,"    Cash    Batch Number : ",*V2LON,CASBATCH
.
          CLOSE     FMSPINA1           * open file (if possible)
          OPEN      FMSPINA1,INTFILE
.
POST2000  CALL      RKFMPI1
          BRANCH    OVRCD,POST8000,POST9100 * no more records
.
          PACK      FMPICOST,FMPICOST,SP70
          MATCH     FMPICOST,SP70
          GOTO      POST2000 IF EQUAL       * cost centre blank ?
.
          PACK      KEY3,FMPIICOD,SP70
          CALL      RDFMHL1
          BRANCH    OVRCD,POST9200          * institution does not exist ?
.
          PACK      KEY8,FMPIICOD,FMPICOST,SP70
          CALL      RDFMHA1
          LOAD      FMHALEDG,OVRCD,FMHLPILE      * default to default ledger
          LOAD      FMHACOCE,OVRCD,FMPICOST      * default to current cost cent
.
          PACK      KEY14,FMHALEDG,FMHACOCE,SP70
          CALL      RDFMCC1
          COMPARE   ONE,OVRCD
          GOTO      POST4000 IF NOT EQUAL
.
          MOVE      "0",SCRFLAG        * set redisplay flag
          UNPACK    SP70,FMLALEDG,FMCCCOCE,FMCCDESC
          CALL      DISE0000           * display error screen
.
POST3000  MOVE      "23",CVERT
          MOVE      "28",CCOL
          PACK      UNDLN70,FMHALEDG,SP70
          CALL      KLMAFM00
          PACK      UNDLN70,UNDLN30,UNDLN30,UNDLN30
          BRANCH    EXIT,POST3100,POST9500
          GOTO      POST3200
.
POST3100  MOVE      FMHALEDG,FMLALEDG
.
POST3200  DISPLAY   *PCCOL:CVERT,*V2LON,FMLALEDG,SLASH;
.
POST3500  MOVE      "31",CCOL
          CALL      KCCAFM00
          BRANCH    EXIT,POST3000,POST9500
          DISPLAY   *PCCOL:CVERT,*V2LON,FMCCCOCE;
.
          PACK      KEY8,FMPIICOD,FMPICOST,SP70      * write new CC to file
          UNPACK    KEY8,FMHAINST,FMHAHCCC
          PACK      FMHALEDG,FMCCLEDG
          PACK      FMHACOCE,FMCCCOCE
          CALL      DEFMHA1
          CALL      WRFMHA1
.
POST4000  SUB       ONE,COUNT
          DISPLAY   *P1:22,*EL:
                    *P1:23,"Items Left    ",*V2LON,COUNT,*HOFF,*EL:
                    *P1:24,"Pass 2  : ",*V2LON,FMCCLEDG,SLASH,FMCCCOCE,*EL;
.
          PACK      SUBJCODE,FMHLPIS1,SP70
          MOVE      ONE,BASICIND       * set for basic budget
          CALL      WBUD0000           * write budget data
.
          PACK      SUBJCODE,FMHLPIS2,SP70
          MOVE      ZERO,BASICIND      * set for overhead budget
          CALL      WBUD0000           * write budget data
.
          PACK      SUBJCODE,FMHLPIS1,SP70
          PACK      COSTCODE,FMCCCOCE,SP70
          CALL      BCOD0000
          MOVE      FMPIBASM,TEMPAMT
          MOVE      ONE,CASHTYPE
          MOVE      FMHLPIC1,TEMPACCT
          CALL      WTMP0000           * write temp file data
.
          PACK      SUBJCODE,FMHLPIS2,SP70
          PACK      COSTCODE,FMCCCOCE,SP70
          CALL      BCOD0000
          MOVE      FMPIMOHD,TEMPAMT
          MOVE      ONE,CASHTYPE
          MOVE      FMHLPIC1,TEMPACCT
          CALL      WTMP0000           * write temp file data
.
          PACK      ACCOUNT,FMHLPIS3,SP70
          MOVE      FMPIMLSL,TEMPAMT
          MOVE      ONE,CASHTYPE
          MOVE      FMHLPIC1,TEMPACCT
          CALL      WTMP0000           * write temp file data
.
          PACK      SUBJCODE,FMHLPIS4,SP70
          PACK      COSTCODE,FMCCCOCE,SP70
          CALL      BCOD0000
          MOVE      FMPIMWKC,TEMPAMT
          MOVE      ONE,CASHTYPE
          MOVE      FMHLPIC1,TEMPACCT
          CALL      WTMP0000           * write temp file data
.
          PACK      SUBJCODE,FMHLPIS5,SP70
          PACK      COSTCODE,FMCCCOCE,SP70
          CALL      BCOD0000
          MOVE      FMPIMNAC,TEMPAMT
          MOVE      ZERO,CASHTYPE
          MOVE      FMHLPIC2,TEMPACCT
          CALL      WTMP0000           * write temp file data
.
          GOTO      POST2000
.
POST8000  MOVE      CASBATCH,BATCHNO
          MOVE      ONE,CASHTYPE
          CALL      CBCH0000           * create cash batch
.
          MOVE      ACCBATCH,BATCHNO
          MOVE      ZERO,CASHTYPE
          CALL      CBCH0000           * create accrual batch
          GOTO      POST9999
.
.
POST9000  DISPLAY   *P1:24,*B,*EL,"ERROR File ",*+,INTFILE2:
                    " Does Not Exist - ";
          CALL      HITENTER
          GOTO      POST9999
.
POST9100  DISPLAY   *P1:24,*B,*EL,"ERROR File ",*+,INTFILE2:
                    " Is In An Invalid Format - ";
          CALL      HITENTER
          GOTO      POST9999
.
POST9200  DISPLAY   *P1:24,*B,*EL,"ERROR Institution ",FMPIICOD:
                    " Does Not Exist - ";
          CALL      HITENTER
          GOTO      POST9999
.
POST9500  
.
POST9999  RETURN
.**********************************************************************
.  CLRB - first pass to clear budgets to be written to  Called By POST
.        Returns  - EXIT     (1=quit)
.**********************************************************************
CLRB0000  CLOSE     FMSPINA1                * open file (if possible)
          OPEN      FMSPINA1,INTFILE
.
CLRB2000  CALL      RKFMPI1
          BRANCH    OVRCD,CLRB8000,CLRB9100 * no more records
.
          PACK      FMPICOST,FMPICOST,SP70
          MATCH     FMPICOST,SP70
          GOTO      CLRB2000 IF EQUAL       * cost centre blank ?
.
          PACK      KEY3,FMPIICOD,SP70
          CALL      RDFMHL1
          BRANCH    OVRCD,CLRB9200          * institution does not exist ?
.
          PACK      KEY8,FMPIICOD,FMPICOST,SP70
          CALL      RDFMHA1
          LOAD      FMHALEDG,OVRCD,FMHLPILE      * default to default ledger
          LOAD      FMHACOCE,OVRCD,FMPICOST      * default to current cost cent
.
          PACK      KEY14,FMHALEDG,FMHACOCE,SP70
          CALL      RDFMCC1
          COMPARE   ONE,OVRCD
          GOTO      CLRB4000 IF NOT EQUAL
.
          MOVE      "0",SCRFLAG        * set redisplay flag
          UNPACK    SP70,FMLALEDG,FMCCCOCE,FMCCDESC
          CALL      DISE0000           * display error screen
.
CLRB3000  MOVE      "23",CVERT
          MOVE      "28",CCOL
          PACK      UNDLN70,FMHALEDG,SP70
          CALL      KLMAFM00
          PACK      UNDLN70,UNDLN30,UNDLN30,UNDLN30
          BRANCH    EXIT,CLRB3100,CLRB9500
          GOTO      CLRB3200
.
CLRB3100  MOVE      FMHALEDG,FMLALEDG
.
CLRB3200  DISPLAY   *PCCOL:CVERT,*V2LON,FMLALEDG,SLASH;
.
CLRB3500  MOVE      "31",CCOL
          CALL      KCCAFM00
          BRANCH    EXIT,CLRB3000,CLRB9500
          DISPLAY   *PCCOL:CVERT,*V2LON,FMCCCOCE;
.
          PACK      KEY8,FMPIICOD,FMPICOST,SP70      * write new CC to file
          UNPACK    KEY8,FMHAINST,FMHAHCCC
          PACK      FMHALEDG,FMCCLEDG
          PACK      FMHACOCE,FMCCCOCE
          CALL      DEFMHA1
          CALL      WRFMHA1
.
CLRB4000  ADD       ONE,COUNT
          DISPLAY   *P1:22,*EL:
                    *P1:23,"Items Cleared ",*V2LON,COUNT,*HOFF,*EL:
                    *P1:24,"Pass 1  : ",*V2LON,FMCCLEDG,SLASH,FMCCCOCE,*EL;
.
          PACK      SUBJCODE,FMHLPIS1,SP70
          CALL      DBUD0000           * write budget data
          BRANCH    EXIT,CLRB9500
.
          PACK      SUBJCODE,FMHLPIS2,SP70
          CALL      DBUD0000           * write budget data
          BRANCH    EXIT,CLRB9500
          GOTO      CLRB2000
.
CLRB8000  
.
CLRB9000  MOVE      ZERO,EXIT          * continue
          GOTO      CLRB9999
.
CLRB9100  DISPLAY   *P1:24,*B,*EL,"ERROR File ",*+,INTFILE2:
                    " Is In An Invalid Format - ";
          CALL      HITENTER
          GOTO      CLRB9500
.
CLRB9200  DISPLAY   *P1:24,*B,*EL,"ERROR Institution ",FMPIICOD:
                    " Does Not Exist - ";
          CALL      HITENTER
          GOTO      CLRB9500
.
CLRB9500  MOVE      ONE,EXIT           * quit
.
CLRB9999  RETURN
.**********************************************************************
.  DBUD - clear budget data                            Called By POST
.        Requires : SUBJCODE (subjective)
.                   FMCCCOCE (cost centre)
.**********************************************************************
DBUD0000  PACK      COSTCODE,FMCCCOCE,SP70
          CALL      BCOD0000
.
          PACK      KEY2,FMCCLEDG,SP70
          CALL      RDFMLA1
          MOVE      "12",NOPERD
          ADD       FMLAPERS,NOPERD
.
          MOVE      ZERO,BUDGET01
          MOVE      ZERO,BUDGET02
          MOVE      ZERO,BUDGET03
          MOVE      ZERO,BUDGET04
          MOVE      ZERO,BUDGET05
          MOVE      ZERO,BUDGET06
          MOVE      ZERO,BUDGET07
          MOVE      ZERO,BUDGET08
          MOVE      ZERO,BUDGET09
          MOVE      ZERO,BUDGET10
          MOVE      ZERO,BUDGET11
          MOVE      ZERO,BUDGET12
          MOVE      ZERO,BUDGET13
.
          PACK      LEDGER,FMCCLEDG,SP70
          PACK      BUDGTEMP,FMHLPIB2,SP70
          CALL      DELB0000           * accrual budget
          BRANCH    EXIT,DBUD9999
.
          PACK      LEDGER,FMCCLEDG,SP70
          PACK      BUDGTEMP,FMHLPIB1,SP70
          CALL      DELB0000           * cash budget
          BRANCH    EXIT,DBUD9999
.
DBUD9999  RETURN
.**********************************************************************
.  DELB - clear budget data                            Called By POST
.**********************************************************************
DELB0000  PACK      KEY4,BUDGTEMP,SP70
          CALL      RDFMBT1
          BRANCH    OVRCD,DELB8000
.
          MATCH     FYEAR,FMBTYEAR
          GOTO      DELB81000 IF NOT EQUAL  * budget year correct ?
.
          MATCH     "2",FMBTSTAT
          GOTO      DELB82000 IF EQUAL      * budget file locked ?
.
          PACK      FMBUCUPR,PROFTEMP,SP70
.
          MOVE      BUDGTEMP,BUDTYPE
          CLEAR     FILENAME
          APPEND    FMSB,FILENAME
          APPEND    BUDTYPE,FILENAME
          RESET     FILENAME
          REP       " 0",FILENAME
          MATCH     FILENAME,FMSBFILE
          GOTO      DELB0100 IF EQUAL  * file already open
.
          PACK      FMSBFILE,FILENAME,SP70
          OPEN      FMSBUDA1,FILENAME
.
DELB0100  MOVE      BUDGET01,FMBUCA01
          MOVE      BUDGET02,FMBUCA02
          MOVE      BUDGET03,FMBUCA03
          MOVE      BUDGET04,FMBUCA04
          MOVE      BUDGET05,FMBUCA05
          MOVE      BUDGET06,FMBUCA06
          MOVE      BUDGET07,FMBUCA07
          MOVE      BUDGET08,FMBUCA08
          MOVE      BUDGET09,FMBUCA09
          MOVE      BUDGET10,FMBUCA10
          MOVE      BUDGET11,FMBUCA11
          MOVE      BUDGET12,FMBUCA12
          MOVE      BUDGET13,FMBUCA13
.
DELB2000  MOVE      LEDGER,FMBUCULD
          MOVE      ACCOUNT,FMBUCUAC
          PACK      KEY14,FMBUCULD,FMBUCUAC
          CALL      RAFMBU1            * is it already there
          PACK      FMBUCUPR,PROFTEMP,SP70
          BRANCH    OVRCD,DELB3000
.
          CALL      UPBUD000           * yes - update
          GOTO      DELB4000
.
DELB3000  MOVE      ONE,AUDTTYPE
          CALL      WAFMBU00
          CALL      WRFMBU1            * no - write
.
DELB4000  MOVE      ZERO,EXIT
          GOTO      DELB9999
.
.
DELB8000  DISPLAY   *P1:24,*B,*EF,"Budget Type ",BUDGTEMP," Does Not Exist - ";
          CALL      HITENTER
          GOTO      DELB9500
.
DELB8100  DISPLAY   *P1:24,*B,*EF,"Budget Year Mismatch For Budget ":
                    BUDGTEMP," - ";
          CALL      HITENTER
          GOTO      DELB9500
.
DELB8200  DISPLAY   *P1:24,*B,*EF,"Budget Type ",BUDGTEMP," Locked - ";
          CALL      HITENTER
          GOTO      DELB9500
.
DELB9500  MOVE      ONE,EXIT
.
DELB9999  RETURN
.**********************************************************************
.  WBUD - write budget data                            Called By POST
.        Requires : SUBJCODE (subjective)
.                   FMCCCOCE (cost centre)
.                   BASICIND (0=overhead bud, 1=basic bud)
.**********************************************************************
WBUD0000  PACK      COSTCODE,FMCCCOCE,SP70
          CALL      BCOD0000
.
          PACK      KEY2,FMCCLEDG,SP70
          CALL      RDFMLA1
          MOVE      "12",NOPERD
          ADD       FMLAPERS,NOPERD
          BRANCH    BASICIND,WBUD1000
          GOTO      WBUD2000
.
.---- basic budget ----
.
WBUD1000  MOVE      FMPIBB01,BUDGET01
          MOVE      FMPIBB02,BUDGET02
          MOVE      FMPIBB03,BUDGET03
          MOVE      FMPIBB04,BUDGET04
          MOVE      FMPIBB05,BUDGET05
          MOVE      FMPIBB06,BUDGET06
          MOVE      FMPIBB07,BUDGET07
          MOVE      FMPIBB08,BUDGET08
          MOVE      FMPIBB09,BUDGET09
          MOVE      FMPIBB10,BUDGET10
          MOVE      FMPIBB11,BUDGET11
          MOVE      FMPIBB12,BUDGET12
          MOVE      ZERO,BUDGET13
.
          PACK      LEDGER,FMCCLEDG,SP70
          PACK      BUDGTEMP,FMHLPIB2,SP70
          PACK      PROFTEMP,SP70
          CALL      ABUD0000           * accrual budget
.
          PACK      LEDGER,FMCCLEDG,SP70
          PACK      BUDGTEMP,FMHLPIB1,SP70
          PACK      PROFTEMP,FMHLPIP1,SP70
          CALL      CBUD0000           * cash budget
          GOTO      WBUD9999
.
.---- overhead budget ----
.
WBUD2000  MOVE      FMPIOB01,BUDGET01
          MOVE      FMPIOB02,BUDGET02
          MOVE      FMPIOB03,BUDGET03
          MOVE      FMPIOB04,BUDGET04
          MOVE      FMPIOB05,BUDGET05
          MOVE      FMPIOB06,BUDGET06
          MOVE      FMPIOB07,BUDGET07
          MOVE      FMPIOB08,BUDGET08
          MOVE      FMPIOB09,BUDGET09
          MOVE      FMPIOB10,BUDGET10
          MOVE      FMPIOB11,BUDGET11
          MOVE      FMPIOB12,BUDGET12
          MOVE      ZERO,BUDGET13
.
          PACK      LEDGER,FMCCLEDG,SP70
          PACK      BUDGTEMP,FMHLPIB2,SP70
          PACK      PROFTEMP,SP70
          CALL      ABUD0000           * accrual budget
.
          PACK      LEDGER,FMCCLEDG,SP70
          PACK      BUDGTEMP,FMHLPIB1,SP70
          PACK      PROFTEMP,FMHLPIP2,SP70
          CALL      CBUD0000           * cash budget
          GOTO      WBUD9999
.
WBUD9999  RETURN
.**********************************************************************
.  ABUD - write budget data                            Called By POST
.**********************************************************************
ABUD0000  PACK      KEY4,BUDGTEMP,SP70
          CALL      RDFMBT1
          BRANCH    OVRCD,ABUD9999
.
          PACK      FMBUCUPR,PROFTEMP,SP70
.
          MOVE      BUDGTEMP,BUDTYPE
          CLEAR     FILENAME
          APPEND    FMSB,FILENAME
          APPEND    BUDTYPE,FILENAME
          RESET     FILENAME
          REP       " 0",FILENAME
          MATCH     FILENAME,FMSBFILE
          GOTO      ABUD0100 IF EQUAL  * file already open
.
          PACK      FMSBFILE,FILENAME,SP70
          OPEN      FMSBUDA1,FILENAME
.
ABUD0100  CLEAR     FILENAME
          APPEND    FMSC,FILENAME
          APPEND    BUDTYPE,FILENAME
          RESET     FILENAME
          REP       " 0",FILENAME
          MATCH     FILENAME,FMSCFILE
          GOTO      ABUD2000 IF EQUAL  * file already open
.
          PACK      FMSCFILE,FILENAME,SP70
          OPEN      FMSSBUA1,FILENAME
.
ABUD2000  MOVE      LEDGER,FMBUCULD
          MOVE      ACCOUNT,FMBUCUAC
          PACK      KEY14,FMBUCULD,FMBUCUAC
          CALL      RDFMBU1            * is it already there
          PACK      FMBUCUPR,PROFTEMP,SP70
          BRANCH    OVRCD,ABUD3000
.
          ADD       BUDGET01,FMBUCA01
          ADD       BUDGET02,FMBUCA02
          ADD       BUDGET03,FMBUCA03
          ADD       BUDGET04,FMBUCA04
          ADD       BUDGET05,FMBUCA05
          ADD       BUDGET06,FMBUCA06
          ADD       BUDGET07,FMBUCA07
          ADD       BUDGET08,FMBUCA08
          ADD       BUDGET09,FMBUCA09
          ADD       BUDGET10,FMBUCA10
          ADD       BUDGET11,FMBUCA11
          ADD       BUDGET12,FMBUCA12
          ADD       BUDGET13,FMBUCA13
.
          CALL      UPBUD000           * yes - update
          GOTO      ABUD4000
.
ABUD3000  MOVE      BUDGET01,FMBUCA01
          MOVE      BUDGET02,FMBUCA02
          MOVE      BUDGET03,FMBUCA03
          MOVE      BUDGET04,FMBUCA04
          MOVE      BUDGET05,FMBUCA05
          MOVE      BUDGET06,FMBUCA06
          MOVE      BUDGET07,FMBUCA07
          MOVE      BUDGET08,FMBUCA08
          MOVE      BUDGET09,FMBUCA09
          MOVE      BUDGET10,FMBUCA10
          MOVE      BUDGET11,FMBUCA11
          MOVE      BUDGET12,FMBUCA12
          MOVE      BUDGET13,FMBUCA13
          MOVE      ONE,AUDTTYPE
          CALL      WAFMBU00
          CALL      WRFMBU1            * no - write
.
.
ABUD4000  COMPARE   ONE,FMCOCALC
          GOTO      ABUD9999 IF NOT EQUAL
          MOVE      FMBUCULD,LEDGER               * set up file variables
          MOVE      FMBUCUAC,ACCOUNT
          PACK      UTYPE,BUDTYPE,SP70
          PROC      FMSUA000           * set for update
.
ABUD9999  RETURN
.**********************************************************************
.  CBUD - write budget data                            Called By POST
.         NOTE : this routine modifies the variables BUDGET01..13
.**********************************************************************
CBUD0000  MOVE      BUDGET01,ANBUDGET
          ADD       BUDGET02,ANBUDGET
          ADD       BUDGET03,ANBUDGET
          ADD       BUDGET04,ANBUDGET
          ADD       BUDGET05,ANBUDGET
          ADD       BUDGET06,ANBUDGET
          ADD       BUDGET07,ANBUDGET
          ADD       BUDGET08,ANBUDGET
          ADD       BUDGET09,ANBUDGET
          ADD       BUDGET10,ANBUDGET
          ADD       BUDGET11,ANBUDGET
          ADD       BUDGET12,ANBUDGET
          ADD       BUDGET13,ANBUDGET
.
          PACK      KEY4,BUDGTEMP,SP70
          CALL      RDFMBT1
          BRANCH    OVRCD,CBUD9999
.
          PACK      KEY9,LEDGER,FYEAR,PROFTEMP,SP70
          CALL      RDFMBP1
          BRANCH    OVRCD,CBUD9999
.
          PACK      FMBUCUPR,PROFTEMP,SP70
.
          MOVE      BUDGTEMP,BUDTYPE
          CLEAR     FILENAME
          APPEND    FMSB,FILENAME
          APPEND    BUDTYPE,FILENAME
          RESET     FILENAME
          REP       " 0",FILENAME
          MATCH     FILENAME,FMSBFILE
          GOTO      CBUD0100 IF EQUAL  * file already open
.
          PACK      FMSBFILE,FILENAME,SP70
          OPEN      FMSBUDA1,FILENAME
.
CBUD0100  CLEAR     FILENAME
          APPEND    FMSC,FILENAME
          APPEND    BUDTYPE,FILENAME
          RESET     FILENAME
          REP       " 0",FILENAME
          MATCH     FILENAME,FMSCFILE
          GOTO      CBUD0200 IF EQUAL  * file already open
.
          PACK      FMSCFILE,FILENAME,SP70
          OPEN      FMSSBUA1,FILENAME
.
CBUD0200  MATCH     SP3,FMBUCUPR        * have we got a profile
          GOTO      CBUD0500 IF NOT EQUAL
.
          CALL      CBTS0000            * calculate budget - 1/12 each
          GOTO      CBUD2000
.
CBUD0500  
          MOVE      ANBUDGET,FORM12P2   * move the annual budget into each feild
          DIV       "100",FORM12P2    * Divide each period by 100 to get value
          MULT      FMBPPC1,FORM12P2    * Multiply each period by its percentage
          MOVE      FORM12P2,BUDGET01   * move the annual budget into each feild
.
          MOVE      ANBUDGET,FORM12P2
          DIV       "100",FORM12P2
          MULT      FMBPPC2,FORM12P2
          MOVE      FORM12P2,BUDGET02
.
          MOVE      ANBUDGET,FORM12P2
          DIV       "100",FORM12P2
          MULT      FMBPPC3,FORM12P2
          MOVE      FORM12P2,BUDGET03
.
          MOVE      ANBUDGET,FORM12P2
          DIV       "100",FORM12P2
          MULT      FMBPPC4,FORM12P2
          MOVE      FORM12P2,BUDGET04
.
          MOVE      ANBUDGET,FORM12P2
          DIV       "100",FORM12P2
          MULT      FMBPPC5,FORM12P2
          MOVE      FORM12P2,BUDGET05
.
          MOVE      ANBUDGET,FORM12P2
          DIV       "100",FORM12P2
          MULT      FMBPPC6,FORM12P2
          MOVE      FORM12P2,BUDGET06
.
          MOVE      ANBUDGET,FORM12P2
          DIV       "100",FORM12P2
          MULT      FMBPPC7,FORM12P2
          MOVE      FORM12P2,BUDGET07
.
          MOVE      ANBUDGET,FORM12P2
          DIV       "100",FORM12P2
          MULT      FMBPPC8,FORM12P2
          MOVE      FORM12P2,BUDGET08
.
          MOVE      ANBUDGET,FORM12P2
          DIV       "100",FORM12P2
          MULT      FMBPPC9,FORM12P2
          MOVE      FORM12P2,BUDGET09
.
          MOVE      ANBUDGET,FORM12P2
          DIV       "100",FORM12P2
          MULT      FMBPPC10,FORM12P2
          MOVE      FORM12P2,BUDGET10
.
          MOVE      ANBUDGET,FORM12P2
          DIV       "100",FORM12P2
          MULT      FMBPPC11,FORM12P2
          MOVE      FORM12P2,BUDGET11
.
          MOVE      ANBUDGET,FORM12P2
          DIV       "100",FORM12P2
          MULT      FMBPPC12,FORM12P2
          MOVE      FORM12P2,BUDGET12
.
          MOVE      ANBUDGET,FORM12P2       * calculate the budget for the last
          SUB       BUDGET01,FORM12P2       * period of the year
          SUB       BUDGET02,FORM12P2
          SUB       BUDGET03,FORM12P2
          SUB       BUDGET04,FORM12P2
          SUB       BUDGET05,FORM12P2
          SUB       BUDGET06,FORM12P2
          SUB       BUDGET07,FORM12P2
          SUB       BUDGET08,FORM12P2
          SUB       BUDGET09,FORM12P2
          SUB       BUDGET10,FORM12P2
          SUB       BUDGET11,FORM12P2
.
          BRANCH    FMLAPERS,CBUD1000
          MOVE      FORM12P2,FMBUCA12
          GOTO      CBUD2000
.
CBUD1000  SUB       FMBUCA12,FORM12P2
          MOVE      FORM12P2,FMBUCA13
          GOTO      CBUD2000
.
.
CBUD2000  MOVE      LEDGER,FMBUCULD
          MOVE      ACCOUNT,FMBUCUAC
          PACK      KEY14,FMBUCULD,FMBUCUAC
          CALL      RDFMBU1            * is it already there
          PACK      FMBUCUPR,PROFTEMP,SP70
          BRANCH    OVRCD,CBUD3000
.
          ADD       BUDGET01,FMBUCA01
          ADD       BUDGET02,FMBUCA02
          ADD       BUDGET03,FMBUCA03
          ADD       BUDGET04,FMBUCA04
          ADD       BUDGET05,FMBUCA05
          ADD       BUDGET06,FMBUCA06
          ADD       BUDGET07,FMBUCA07
          ADD       BUDGET08,FMBUCA08
          ADD       BUDGET09,FMBUCA09
          ADD       BUDGET10,FMBUCA10
          ADD       BUDGET11,FMBUCA11
          ADD       BUDGET12,FMBUCA12
          ADD       BUDGET13,FMBUCA13
          CALL      UPBUD000           * yes - update
          GOTO      CBUD4000
.
CBUD3000  MOVE      BUDGET01,FMBUCA01
          MOVE      BUDGET02,FMBUCA02
          MOVE      BUDGET03,FMBUCA03
          MOVE      BUDGET04,FMBUCA04
          MOVE      BUDGET05,FMBUCA05
          MOVE      BUDGET06,FMBUCA06
          MOVE      BUDGET07,FMBUCA07
          MOVE      BUDGET08,FMBUCA08
          MOVE      BUDGET09,FMBUCA09
          MOVE      BUDGET10,FMBUCA10
          MOVE      BUDGET11,FMBUCA11
          MOVE      BUDGET12,FMBUCA12
          MOVE      BUDGET13,FMBUCA13
          MOVE      ONE,AUDTTYPE
          CALL      WAFMBU00
          CALL      WRFMBU1            * no - write
.
CBUD4000  COMPARE   ONE,FMCOCALC
          GOTO      CBUD9999 IF NOT EQUAL
          MOVE      FMBUCULD,LEDGER               * set up file variables
          MOVE      FMBUCUAC,ACCOUNT
          PACK      UTYPE,BUDTYPE,SP70
          PROC      FMSUA000           * set for update
.
CBUD9999  RETURN
.*************************************************************************
.* CBTS - Calculate the annual budget from the period budgets entered    *
.*                     called by : PROC4000                              *
.*************************************************************************
CBTS0000  MOVE      ANBUDGET,FORM13
          DIV       NOPERD,FORM13
          MOVE      ZERO,FORM2
          MOVE      ANBUDGET,FORM13P2
.
CBTS1400  
          ADD       ONE,FORM2
.
          COMPARE   NOPERD,FORM2
          GOTO      CBTS1450 IF EQUAL
          STORE     FORM13,FORM2,BUDGET01,BUDGET02,BUDGET03,BUDGET04:
                                 BUDGET05,BUDGET06,BUDGET07,BUDGET08:
                                 BUDGET09,BUDGET10,BUDGET11,BUDGET12:
                                 BUDGET13
          SUB       FORM13,FORM13P2
          GOTO      CBTS1400
.
CBTS1450  
          MOVE      NOPERD,FORM2
          SUB       "11",FORM2      * if 12 periods - form2 = 1
          STORE     FORM13P2,FORM2,BUDGET12,BUDGET13
.
CBTS9999  RETURN
.**********************************************************************
.  WTMP - write to temp file                           Called By POST
.        Requires : SUBJCODE (subjective)
.                   FMCCCOCE (cost centre)
.**********************************************************************
.
.---- write debit entry ----
.
WTMP0000  PACK      KEY17,CASHTYPE,JA,FMCCLEDG,ACCOUNT,SP70
          UNPACK    KEY17,NEZACASH,NEZATYPE,NEZALEDG,NEZAACCT
          CALL      RDNEZA1
          BRANCH    OVRCD,WTMP1000
.
          ADD       TEMPAMT,NEZAAMT
          CALL      UPNEZA1
          GOTO      WTMP5000
.
WTMP1000  MOVE      TEMPAMT,NEZAAMT
          CALL      WRNEZA1
.
.---- write credit entry ----
.
WTMP5000  PACK      KEY17,CASHTYPE,JC,FMCCLEDG,TEMPACCT,SP70
          UNPACK    KEY17,NEZACASH,NEZATYPE,NEZALEDG,NEZAACCT
          CALL      RDNEZA1
          BRANCH    OVRCD,WTMP6000
.
          ADD       TEMPAMT,NEZAAMT
          CALL      UPNEZA1
          GOTO      WTMP9999
.
WTMP6000  MOVE      TEMPAMT,NEZAAMT
          CALL      WRNEZA1
.
WTMP9999  RETURN
.**********************************************************************
.  CBCH - create batches                               Called By POST
.        Requires : BATCHNO  (batch number)
.                   CASHTYPE (batch type)
.**********************************************************************
CBCH0000  
.
. --- Create the file ---
.
          CLEAR     FILENAME
          APPEND    "bch",FILENAME
          APPEND    BATCHNO,FILENAME
          APPEND    SP10,FILENAME
          RESET     FILENAME
          REP       " 0",FILENAME
          PREP      BATFILE,FILENAME
.
. --- Do Header Sectors first ---
. 
. --- Set up null feilds
.
          UNPACK    SP70,BC0DIM2,BC0DIM6,BC1PAYT,BC1RESP
          MOVE      ZERO,BC0NXTSW
          MOVE      ZERO,BC0BTCHT
          MOVE      ZERO,BC0SUPBC
          MOVE      ZERO,BC0SPLTK
          MOVE      ZERO,BC0SPLTP
          MOVE      ZERO,BC0SPSEC
          MOVE      ZERO,BC0DISC 
.
. --- Set up header values ---
.
          UNPACK    ENDDAT,CCENT,CYEAR,CMON,CDAY
          PACK      BC1BDATE,CDAY,CMON,CCENT,CYEAR,SP70
          REP       " 0",BC1BDATE
.
          MOVE      ONE,BC0ONE
          MOVE      TWO,BC0NXTSC
          MOVE      FIVE,BC1STAT
          MOVE      "HD",BC1HEAD
          MOVE      BATCHNO,BC1BATCH
          MOVE      ZERO,BC1KEYT
          MOVE      ZERO,BC1ACCT
          MOVE      ONE,BC1NOTR
          PACK      BC1DATE,CDD,CMM,CCC,CYY
          REP       " 0",BC1DATE
          MOVE      PASSCODE,BC1OPER
          MOVE      NEZALEDG,BC1LEDG
.
          MOVE      JA,BC1TRAN              * set up batch type
          MOVE      CASHTYPE,F1
          LOAD      BC1TRAN,F1,CJ
.
          MOVE      ZERO,BC1REORG
          MOVE      ZERO,BC1DISS
          MOVE      ZERO,BC1REST
          MOVE      ZERO,BC1UTYPE
.
          CALL      WRBAT0                 * write sector 0 
          CALL      WRBAT1                 * write sector 1
.
          CALL      PDTL0000               * process data for details sectors
          CLOSE     BATFILE
.
CBCH9999  RETURN 
.*************************************************************************
.* PDTL - Process the detail sectors of the batch file   Called by CBCH  *
.*************************************************************************
PDTL0000  PACK      KEY17,CASHTYPE,SP70
          MOVE      ZERO,DEBTOT
          CALL      RSNEZA1
.
PDTL1000  CALL      RKNEZA1               * read next transaction detail record
          BRANCH    OVRCD,PDTL9000
.
          MATCH     CASHTYPE,NEZACASH     * still on the right batch type ?
          GOTO      PDTL9000 IF NOT EQUAL
.
. --- set up sector variables
.
          MOVE      FIVE,BCSTAT
          MOVE      ZERO,BCINVT
          MOVE      ZERO,BCDISC
          MOVE      ZERO,BCCOMXA
          UNPACK    SP70,BCCHEQ,BCCOMX,BCCONT,BCDISCC
          MOVE      NEZATYPE,BCTRAN
.
PDTL3000  MOVE      NEZALEDG,BCLEDG
          MOVE      NEZAACCT,BCACCT
          MOVE      NEZAACCT,BCACCTP
          MOVE      FMHLPIDS,BCDISS
          MOVE      "00000",BCRED
          MOVE      "00000000",BCDATCX
          MOVE      BC1BATCH,BCBATCH
          MOVE      FMHLPIRS,BCRESP
          MOVE      FMHLPITD,BCTRAND
          MOVE      BC1BDATE,BCDATEE
          MOVE      BC1BDATE,BCDATED
          UNPACK    SP70,BCCEORD,BCCELNE,BCCATA,BCCHQAC,BCCDESC,BCCSPAR
          MOVE      NEZAAMT,BCAMT
.
          COMPARE   ZERO,BCAMT          * dont post a batch with zero amount
          GOTO      PDTL1000 IF EQUAL
          CALL      WRBATC
          ADD       ONE,BC0NXTSC
          MATCH     JC,NEZATYPE
          GOTO      PDTL1000 IF NOT EQUAL
.
          ADD       BCAMT,DEBTOT
          GOTO      PDTL1000
.
PDTL9000  COMPARE   TWO,BC0NXTSC        * no details sectors?
          GOTO      PDTL9500 IF NOT EQUAL * update file if there is some
          CLOSE     BATFILE             * delete file if none
          CLEAR     CMDLINE
          APPEND    "rm ",CMDLINE
          APPEND    FILENAME,CMDLINE
          APPEND    ".txt",CMDLINE
          RESET     CMDLINE
          EXECUTE   CMDLINE,TASKID
.
          GOTO      PDTL9999
.
PDTL9500  CALL      WRBATS0              * update next available sector variable
          CALL      RDBAT1
          MOVE      BC0NXTSC,BC1NOTR
          SUB       TWO,BC1NOTR
          MOVE      DEBTOT,BC1KEYT
          MOVE      DEBTOT,BC1ACCT
          CALL      WRBAT1
.
          PACK      KEY5,BC1BATCH,SP70
          UNPACK    KEY5,FMBCBAT
          MOVE      "2",FMBCSTA
          MOVE      BC0NXTSC,FMBCSEC
          MOVE      BC1ACCT,FMBCTOT
          MOVE      ZERO,FMBCDIS
          MOVE      BC1OPER,FMBCUID
          MOVE      BC1LEDG,FMBCLED 
          MOVE      BC1TRAN,FMBCTRT 
          MOVE      BC0SUPBC,FMBCINV 
.
          UNPACK    BC1DATE,CDAY,CMON,CCENT,CYEAR
          PACK      FMBCDAT,CCENT,CYEAR,CMON,CDAY
          UNPACK    BC1BDATE,CDAY,CMON,CCENT,CYEAR
          PACK      FMBCPDAT,CCENT,CYEAR,CMON,CDAY
          PACK      FMBCCDAT,CCENT,CYEAR,CMON,CDAY
          MOVE      SP70,FMBCSPAR
          CALL      DEFMBC1
          CALL      WRFMBC1
.
PDTL9999  RETURN 
.**********************************************************************
.  DTMP - clear temp file                              Called By lots
.**********************************************************************
DTMP0000  PACK      KEY17,SP70
.
DTMP0100  CALL      RSNEZA1
          CALL      RKNEZA1            * get next record
          BRANCH    OVRCD,DTMP9999     * no more records ?
.
          PACK      KEY17,NEZACASH,NEZATYPE,NEZALEDG,NEZAACCT,SP70
          CALL      DENEZA1
          GOTO      DTMP0100
.
DTMP9999  RETURN
.**********************************************************************
.  DISE - Keyin correct ledger/cc                      Called By lots
.**********************************************************************
DISE0000  DISPLAY   *P1:22,"Missing Ledger/Cost Centre ",*V2LON:
                    FMHALEDG,SLASH,FMHACOCE,*HOFF:
                    " For Institution ",*V2LON,FMPIICOD,*HOFF:
                    *P1:23,"Please Re-Enter          : ",*EF;
          MATCH     SP70,FMLALEDG
          GOTO      DISE9999 IF EQUAL
          DISPLAY   *V2LON,FMLALEDG,SLASH;
.
DISE9999  RETURN
.****************************************************************************
.  BCOD - get account code from subjective and cost codes    Called by lots
.        Requires - SUBJCODE  (subjective code)
.                   COSTCODE  (cost centre code)
.                   FMSUUD2A  (separate CC/Subj 1=yes)
.                   FMSUUD2B  (separater char)
.                   FMSUUD4A  (cost centre code length)
.        Returns  - ACCOUNT   (account code)
.****************************************************************************
BCOD0000  STORE     COSTCODE,FMSUUD4A,KEY1,KEY2,KEY3,KEY4,KEY5,KEY6:
                                      KEY7,KEY8,KEY9,KEY10,KEY11,KEY12
          LOAD      ACCOUNT,FMSUUD4A,KEY1,KEY2,KEY3,KEY4,KEY5,KEY6:
                                     KEY7,KEY8,KEY9,KEY10,KEY11,KEY12
          COMPARE   FMSUUD2A,ONE
          GOTO      BCOD1000 IF NOT EQUAL         * separator char in use ?
.
          PACK      ACCOUNT,ACCOUNT,FMSUUD2B      * include sep. char
.
BCOD1000  PACK      ACCOUNT,ACCOUNT,SUBJCODE,SP70 * add subj code
.
BCOD9999  RETURN
.**********************************************************************
.  RMTB - Remove trailing blanks                       Called By lots
.        Requires - STRING   (input string)
.        Returns  - STRING   (output string without trailing blanks)
.**********************************************************************
RMTB0000  PACK      STRING,STRING,SP70      * Ensure string filled to end
          ENDSET    STRING                  * Move form ptr to end of string
.
RMTB1000  CMATCH    SP1,STRING              * Quit loop if char pointed to by
          GOTO      RMTB9000 IF NOT EQUAL   *    form pointer is blank
.
          BUMP      STRING,-1               * Decrement form pointer
          GOTO      RMTB1000 IF NOT EOS     * Quit loop if form ptr = 1
.
          SETLPTR   STRING,ZERO             * Set form and length pointers to 0
          GOTO      RMTB9999                *    since we are at start of string
.                                           *    and exit routine
.
RMTB9000  LENSET    STRING                  * Set length pointer to form pointer
          RESET     STRING                  * Set form pointer to one
.
RMTB9999  RETURN
.******************************************************************************
.  Redisplays
.******************************************************************************
RBTYFM00  
RBPFFM00  
RCCAFM00  
RLMAFM00  
RLMCFM00  
          CALL      SCRA0000
          BRANCH    SCRFLAG,RZZZFM99
          CALL      DISE0000
.
RZZZFM99  RETURN
.**********************************************************************
. FMSPINA1 IO routines                           Called by Lots
. returns OVRCD = 0 record read ok
.         OVRCD = 1 no more records
.         OVRCD = 2 file not in desired format
.**********************************************************************
RKFMPI1   MOVE      ZERO,OVRCD
          TRAP      IFOR0000 IF FORMAT
          READ      FMSPINA1,SEQ;FMPIICOD,FMPICOST,FMPIBS01,FMPIBB01:
                                 FMPIOS01,FMPIOB01,FMPIBS02,FMPIBB02:
                                 FMPIOS02,FMPIOB02,FMPIBS03,FMPIBB03:
                                 FMPIOS03,FMPIOB03,FMPIBS04,FMPIBB04:
                                 FMPIOS04,FMPIOB04,FMPIBS05,FMPIBB05:
                                 FMPIOS05,FMPIOB05,FMPIBS06,FMPIBB06:
                                 FMPIOS06,FMPIOB06,FMPIBS07,FMPIBB07:
                                 FMPIOS07,FMPIOB07,FMPIBS08,FMPIBB08:
                                 FMPIOS08,FMPIOB08,FMPIBS09,FMPIBB09:
                                 FMPIOS09,FMPIOB09,FMPIBS10,FMPIBB10:
                                 FMPIOS10,FMPIOB10,FMPIBS11,FMPIBB11:
                                 FMPIOS11,FMPIOB11,FMPIBS12,FMPIBB12:
                                 FMPIOS12,FMPIOB12,FMPIBASS,FMPIBASX:
                                 FMPIMOHS,FMPIMOHX,FMPIMLSS,FMPIMLSX:
                                 FMPIMWKS,FMPIMWKX,FMPIMNAS,FMPIMNAX,FMPISPAR
          TRAPCLR   FORMAT
          GOTO      OVERCOND IF OVER
.
          MOVE      "0",F2
.
RKFMPI1A  ADD       ONE,F2
          COMPARE   "30",F2
          GOTO      RKFMPI1C IF NOT LESS
.
          LOAD      ANS,F2,FMPIBS01,FMPIOS01,FMPIBS02,FMPIOS02:
                           FMPIBS03,FMPIOS03,FMPIBS04,FMPIOS04:
                           FMPIBS05,FMPIOS05,FMPIBS06,FMPIOS06:
                           FMPIBS07,FMPIOS07,FMPIBS08,FMPIOS08:
                           FMPIBS09,FMPIOS09,FMPIBS10,FMPIOS10:
                           FMPIBS11,FMPIOS11,FMPIBS12,FMPIOS12:
                           FMPIBASS,FMPIMOHS,FMPIMLSS,FMPIMWKS,FMPIMNAS
          LOAD      F12P2,F2,FMPIBB01,FMPIOB01,FMPIBB02,FMPIOB02:
                           FMPIBB03,FMPIOB03,FMPIBB04,FMPIOB04:
                           FMPIBB05,FMPIOB05,FMPIBB06,FMPIOB06:
                           FMPIBB07,FMPIOB07,FMPIBB08,FMPIOB08:
                           FMPIBB09,FMPIOB09,FMPIBB10,FMPIOB10:
                           FMPIBB11,FMPIOB11,FMPIBB12,FMPIOB12:
                           FMPIBASX,FMPIMOHX,FMPIMLSX,FMPIMWKX,FMPIMNAX
.
          MATCH     "+",ANS
          GOTO      RKFMPI1B IF EQUAL       * value negative
.
          MULT      SEQ,F12P2
.
RKFMPI1B  STORE     F12P2,F2,FMPIBB01,FMPIOB01,FMPIBB02,FMPIOB02:
                           FMPIBB03,FMPIOB03,FMPIBB04,FMPIOB04:
                           FMPIBB05,FMPIOB05,FMPIBB06,FMPIOB06:
                           FMPIBB07,FMPIOB07,FMPIBB08,FMPIOB08:
                           FMPIBB09,FMPIOB09,FMPIBB10,FMPIOB10:
                           FMPIBB11,FMPIOB11,FMPIBB12,FMPIOB12:
                           FMPIBASX,FMPIMOHX,FMPIMLSX,FMPIMWKX,FMPIMNAX
          GOTO      RKFMPI1A
.
RKFMPI1C  MOVE      FMPIBASX,FMPIBASM       * fix for decimal places
          DIV       "100",FMPIBASM
          MOVE      FMPIMOHX,FMPIMOHD
          DIV       "100",FMPIMOHD
          MOVE      FMPIMLSX,FMPIMLSL
          DIV       "100",FMPIMLSL
          MOVE      FMPIMWKX,FMPIMWKC
          DIV       "100",FMPIMWKC
          MOVE      FMPIMNAX,FMPIMNAC
          DIV       "100",FMPIMNAC
.
          RETURN
.
IFOR0000  MOVE      "2",OVRCD
          RETURN
.**********************************************************************
. NEZTMP0A IO routines                           Called by Lots
.**********************************************************************
RSNEZA1   RESET     KEY17
          READ      NEZTMP0A,KEY17;;
          RETURN
.
RANEZA1   RESET     KEY17
          MOVE      ZERO,OVRCD
          READ      NEZTMP0A,KEY17;ANS
          GOTO      OVERCOND IF OVER
          RETURN
.
RDNEZA1   RESET     KEY17
          MOVE      ZERO,OVRCD
          READ      NEZTMP0A,KEY17;NEZACASH,NEZATYPE,NEZALEDG,NEZAACCT:
                                   NEZAAMT,NEZASPAR
          GOTO      OVERCOND IF OVER
          RETURN
.
RKNEZA1   MOVE      ZERO,OVRCD
          READKS    NEZTMP0A;NEZACASH,NEZATYPE,NEZALEDG,NEZAACCT:
                                   NEZAAMT,NEZASPAR
          GOTO      OVERCOND IF OVER
          RETURN
.
RPNEZA1   MOVE      ZERO,OVRCD
          READKP    NEZTMP0A;NEZACASH,NEZATYPE,NEZALEDG,NEZAACCT:
                                   NEZAAMT,NEZASPAR
          GOTO      OVERCOND IF OVER
          RETURN
.
UPNEZA1   UPDATE    NEZTMP0A;NEZACASH,NEZATYPE,NEZALEDG,NEZAACCT:
                                   NEZAAMT,NEZASPAR
          RETURN
.
WRNEZA1   RESET     KEY17
          WRITE     NEZTMP0A,KEY17;NEZACASH,NEZATYPE,NEZALEDG,NEZAACCT:
                                   NEZAAMT,NEZASPAR
          RETURN
.
DENEZA1   RESET     KEY17
          DELETE    NEZTMP0A,KEY17
          RETURN
.
.******************************************************************************
.  INCLUDES FOR I/O'S
.******************************************************************************
.
          INC       FMSBCFIO/INC       * batch control file
          INC       FMSBPFIO/INC       * Budget Profile
          INC       FMSCCAIO/INC       * CC
          INC       FMSCSAIO/INC       * Control Account
          INC       FMSHCCIO/INC       * HCS CC conversion
          INC       FMSHCLIO/INC       * Institution
          INC       IBABATIO/INC       * batch
.
          INC       FMSBPFKY           * budget prof
          INC       FMSBTYKY           * budget
          INC       FMSCCAKY           * cost centre
          INC       FMSLMAKY           * ledger
          INC       FMSLMCKY           * ledger cal
.
          INC       FMSUPDCD           * standard update routines
          INC       FMSSTDCD           * FMS Acc. standard routines
          INC       FMSUDACD           * FMS audit update variables
