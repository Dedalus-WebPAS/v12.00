.*****************************************************************************
.* System    :   All                                                         *
.* Program   :   CODFIXIT                                                    *
.* Desc      :   Fixit for Coded fields for Northpark                        *
.*****************************************************************************
.* Date      :   06/11/2009                                                  *
.* Author    :   Steve Armstrong                                             *
.* Function  :   This program will load mapping data from an ascii file      *
.*               (set up by the user) and then process all the webPAS        *
.*               fields using that mapping data to map the old codes to      *
.*               new codes.                                                  *
.*                                                                           *
.* Mods      :                                                               *
.*       V10.13.01 26/07/2018  J.Tan         TSK 0848506                     *
.*                 Changed PP Doctor from DIM6 to DIM10                      *
.*       V10.12.01 15.01.2018  J.Tan   TSK 0848146                           *
.*                 Added CACCFEE=5 - Accumulation FI by Claim code           *
.*       V10.10.01 22/03/2017  Steve Armstrong TSK 0832066                   *
.*                 Mods to only use Concession Card file for DVA data        *
.*                 instead of PMPXDVAC (Cat DX) - added CDVA0000 routine.    *
.*****************************************************************************
.*       V10.08.02 10/07/2016  J.Tan         TSK 0822042                     *
.*                 Mods checking CFEETYP before opening pmsmteaf             *
.*       V10.08.01 18/04/2016  Peter Vela        CAR 0294177                 *
.*                 Changed read to prihdb to KEY27                           *
.*       V10.06.01 02/06/2015  J.Tan             CAR 300346                  *
.*                 Added Category YG for Clinic Group code                   *
.*       V10.03.02 06/05/2013  Ebon Clements     CAR 261630                  *
.*                 Removed port number from temp file name                   *
.*       V10.03.01 30/11/2011  Jill Parkinson CAR 249362                     *
.*                 Changed keys for alert tables                             *
.*       V10.01.09 24/03/2011  J.Tan         CAR 233054                      *
.*                 Removed new multiple procedure file                       *
.*       V10.01.08 22/02/2011  Peter Vela    CAR 233034                      *
.*                 Removed new bed fee file - PATBF1FD/IO                    *
.*                 Removed new theatre fee file - PATTF1FD/IO                *
.*       V10.01.07 15/02/2011  Ebon Clements CAR 233048                      *
.*                 Removed new casemix theatre fee file - PATCT2FD/IO        *
.*       V10.01.06 02/02/2011  Mike Laming   CAR 233046                      *
.*                 Remove new Misc.Charges "newmchgf" file - PATMC1FD/IO     *
.*       V10.01.05 02/02/2011  Davin         CAR 233055                      *
.*                 Removed newasdaf (nasd0000) and newlsdaf (nlsd0000)       *
.*                 Removed obsolete tables: newhlfaf,newldfaf,newhdfaf,      *
.*                 newafeaf,newovbaf,newiovaf,newsrbaf,newsinaf.             *
.*       V10.01.04 28/01/2011  Ebon Clements CAR 233050                      *
.*                 Fixed keys after changes to PATCMXFD                      *
.*       V10.01.03 24/01/2011  Mike Laming   CAR 233054                      *
.*                 Mods to PMSMPRaf (Multiple Proc. Billing) for Contract Id.*
.*                 24/01/2011  Ebon Clements CAR 233051                      *
.*                 Mods to PMSCMTaf (Casemix Matrix ) for Contract Id.       *
.*       V10.01.02 21/12/2010  Mike Laming   CAR 233046                      *
.*                 Mods to Misc.Charges PATMCHFD - Key change, logic changes *
.*                 13/01/2011  J.Tan         CAR 233048                      *
.*                 Mods PATBFEFD to use HF Table type                        *
.*                 Mods PATTFEFD to use HF Table type                        *
.*       V10.01.01 09/12/2010  Steve Armstrong   CAR 235021                  *
.*                 Mods for pmsalnal for alert changes (H1-H9)               *
.*                 01/12/2010  J.Tan             CAR 233034                  *
.*                 Mods Bed Fees file to use health fund table type          *
.*****************************************************************************
.*       V10.00.03 24/08/2010  Steve Armstrong   CAR 229006                  *
.*                 Further mods for FD changes for V10.00 - pmsltfaf         *
.*       V10.00.02 27/04/2010  Steve Armstrong   CAR 217389                  *
.*                 Mods to handle additional categories - H1, H2, H3, H4,    *
.*                 H5, ST, SP, OC, VA, R and LA.                             *
.*                 Mods to allow codes to be mapped from one category to     *
.*                 another (for H1 to H5).                                   *
.*                 Also, mods for FD changes for V10.00 - pmsdvaaf, pmshpgaf,*
.*                 pmshpoaf, pmsupgaf and pmsupoaf                           *
.*                 Changed program name from FX186131 to CODFIXIT.           *
.*****************************************************************************
.*        V9.12.01 06/11/2009  WeeLee Koo                                    *
.*                 Sourced from v9.11                                        *
.*                 Changed KEYS to cater FD changes in V9.12                 *
.*****************************************************************************
.
          INC       STD001FD
.
. FILE DESCRIPTION INCLUDES
. -------------------------
          INC       BOKRC1FD/INC
          INC       BOKRX1FD/INC
          INC       MEHDPSFD/INC
          INC       MEHHLSFD/INC
          INC       MRTEXTFD/INC
          INC       IBASEQFD/INC
          INC       OPRCOUFD/INC
          INC       OPRCSCFD/INC
          INC       OPRCSUFD/INC
          INC       OPRCLIFD/INC
          INC       OPRDEAFD/INC
          INC       OPRDEPFD/INC
          INC       OPRSEMFD/INC
          INC       OPRSESFD/INC
          INC       OPRTPSFD/INC
          INC       OUTATTFD/INC
          INC       OUTBCHFD/INC
          INC       OUTBOAFD/INC
          INC       OUTBB1FD/INC
          INC       OUTCANFD/INC
          INC       OUTDTRFD/INC
          INC       OUTLADFD/INC
          INC       OUTMXSFD/INC
          INC       OUTRF1FD/INC
          INC       OUTSITFD/INC
          INC       OUTUATFD/INC
          INC       PATACCFD/INC
          INC       PATAFEFD/INC
          INC       PATALRFD/INC
          INC       PATASDFD/INC
          INC       PATBCHFD/INC
          INC       PATBFEFD/INC
          INC       PATC1SFD/INC
          INC       PATCERFD/INC
          INC       PATCHCFD/INC
          INC       PATCLCFD/INC
          INC       PATCMXFD/INC
          INC       PATCODFD/INC
          INC       PATCONFD/INC
          INC       PATCTFFD/INC
          INC       PATDO1FD/INC
          INC       PATDTRFD/INC
          INC       PATDEPFD/INC
          INC       PATDSCFD/INC
          INC       PATEBHFD/INC
          INC       PATECAFD/INC
          INC       PATECHFD/INC
          INC       PATEDSFD/INC
          INC       PATFACFD/INC
          INC       PATFCMFD/INC
          INC       PATFIGFD/INC
          INC       PATFINFD/INC
          INC       PATFMOFD/INC
          INC       PATFMSFD/INC
          INC       PATFN1FD/INC
          INC       PATFN2FD/INC
          INC       PATFX1FD/INC
          INC       PATHDFFD/INC
          INC       PATHGPFD/INC
          INC       PATHLFFD/INC
          INC       PATHSPFD/INC
          INC       PATIBLFD/INC
          INC       PATINLFD/INC
          INC       PATINMFD/INC
          INC       PATINVFD/INC
          INC       PATIOVFD/INC
          INC       PATIT1FD/INC
          INC       PATITMFD/INC
          INC       PATJRNFD/INC
          INC       PATLDFFD/INC
          INC       PATLISFD/INC
          INC       PATLSDFD/INC
          INC       PATMA1FD/INC
          INC       PATMCHFD/INC
          INC       PATMI1FD/INC
          INC       PATNIPFD/INC
          INC       PATOVBFD/INC
          INC       PATPR1FD/INC
          INC       PATRBLFD/INC
          INC       PATSGCFD/INC
          INC       PATSRBFD/INC
          INC       PATTFEFD/INC
          INC       PATTRNFD/INC
          INC       PATWR1FD/INC
          INC       PATWSPFD/INC
          INC       PATWSSFD/INC
          INC       PMSALNFD/INC
          INC       PMSCCDFD/INC
          INC       PMSCMTFD/INC
          INC       PMSDVAFD/INC
          INC       PMSEBHFD/INC
          INC       PMSECOFD/INC
          INC       PMSECTFD/INC
          INC       PMSEVTFD/INC
          INC       PMSFCIFD/INC
          INC       PMSFEDFD/INC
          INC       PMSFESFD/INC
          INC       PMSFMSFD/INC
          INC       PMSHCPFD/INC
          INC       PMSHPGFD/INC
          INC       PMSHPOFD/INC
          INC       PMSLTFFD/INC
          INC       PMSMPRFD/INC
          INC       PMSMTEFD/INC
          INC       PMSMTIFD/INC
          INC       PMSPX2FD/INC
          INC       PMSSGAFD/INC
          INC       PMSSINFD/INC
          INC       PMSTSPFD/INC
          INC       PMSUPGFD/INC
          INC       PMSUPOFD/INC
          INC       PMSVX1FD/INC
          INC       PRICONFD/INC
          INC       PRIDOCFD/INC
          INC       PRIDTRFD/INC
          INC       PRIEXCFD/INC
          INC       PRIFCIFD/INC
          INC       PRIFIGFD/INC
          INC       PRIFINFD/INC
          INC       PRIFMSFD/INC
          INC       PRIHDBFD/INC
          INC       PRIHREFD/INC
          INC       PRIINVFD/INC
          INC       PRIJRNFD/INC
          INC       RCPBNKFD/INC
          INC       RCPBULFD/INC
          INC       TFILEVAR/INC
          INC       WEBERRFD/INC
.
.
.         ASCII Mapping File Definition
.         -----------------------------
AMAPFILE  FILE      ASCII,FIXED=26
.
.Name     Type      Length	Start Pos.     Description
.-------- ----      ------      ----------     ----------------------------
CODETYPE  DIM       1              1           Type of Code
.                                                1 - Category/Code
.                                                2 - Health Fund
.                                                3 - Health Fund Table
.                                                4 - Health Fund Group
CATEGORY  DIM       6              2           Category 
.                                                (Category for CODETYPE 1)
.                                                (Health Fund for CODETYPE = 3)
OLDCODE   DIM       8              8           Old code to be replaced
NEWCATG   DIM       2             16           New Category (Cat/Codes only)
.                                                 (if blank - use old category)
NEWCODE   DIM       8             18           New code to replace old code
.
.End of Record                    26
.
.
.
.         Indexed Mapping Temporary File Definition
.         -----------------------------------------
.         Filename : maptmpxx.dat          (xx = port id)
.
MAPTEMP1  IFILE SQL, FIXED=26, KEY="U1-1,2-7,8-15"
.
.NAME     TYPE    LENGTH   PHYSICAL   START   DESCRIPTION
.----     ----    ------   --------   -----   -----------
.CODETYPE DIM       1         1         1     Type of Code
.                                                1 - Category/Code
.                                                2 - Health Fund
.                                                3 - Health Fund Table
.CATEGORY DIM       6         6         2     Category
.                                                (Category for CODETYPE 1)
.                                                (Health Fund for CODETYPE = 3)
.OLDCODE  DIM       8         8         8     Old code to be replaced
.NEWCATG  DIM       2         2        16     New Category (H1-9 Cat/Codes only)
.                                                 (if blank - use old category)
.NEWCODE  DIM       8         8        18     New code to replace old code
.
.End of Record                         26
.
.
. LOCAL VARIABLE DEFINITION
. -------------------------
ADMNTYPE  DIM       3
.
CLAMCODE  DIM       3
CMDLINE   DIM       80
CODEDFLD  DIM       8
COUNTER   FORM      2
.
DOCTCODE  DIM       10
.
ERORFLAG  FORM      1             * Load Error Flag
.                                    0 = No error occurred
.                                    1 = Error occurred
FILENAME  DIM       8
FINFLAG   FORM      1             * Finance Flag
.                                       0 = using patfinsf
.                                       1 = using patfigaf
FUNDCODE  DIM       6
.
GROUPCDE  DIM       3
.
ITEMFLAG  DIM       2
ITEMCODE  DIM       9
.
JRNLCODE  DIM       3
.
KEYFIELD  FORM      1             * key field flag
.                                    0 = key field has not been changed
.                                    1 = key field has been changed
.
PREFCHAR  DIM       1
.
SAVCAT01  DIM       2
SAVCOD01  DIM       8
SAVCOD02  DIM       8
SAVCOD03  DIM       8
SAVCOD04  DIM       8
SAVCOD05  DIM       8
SAVCOD06  DIM       8
SAVCOD07  DIM       8
SAVCOD08  DIM       8
SAVCOD09  DIM       8
SAVCOD10  DIM       8
SAVCOD11  DIM       8
SAVCOD12  DIM       8
SAVCOD13  DIM       8
SAVCOD14  DIM       8
SAVCOD15  DIM       8
SAVCOD16  DIM       8
SAVCOD17  DIM       8
SAVCOD18  DIM       8
SAVFRM01  FORM      12.2
SAVFRM02  FORM      12.2
SAVFRM03  FORM      12.2
SAVFRM04  FORM      12.2
SAVFRM05  FORM      12.2
SAVFRM06  FORM      12.2
SAVFRM07  FORM      12.2
SAVFRM08  FORM      12.2
SAVFRM09  FORM      12.2
SAVFRM10  FORM      12.2
SAVFRM11  FORM      12.2
SAVFRM12  FORM      12.2
SAVFRM13  FORM      12.2
SAVFRM14  FORM      12.2
SAVFRM15  FORM      12.2
SAVFRM16  FORM      8
SAVFRM17  FORM      8
SAVFRM18  FORM      8
SAVFRM19  FORM      8
SAVFRM20  FORM      8
SAVFRM21  FORM      8
SAVFRM22  FORM      8
SAVFRM23  FORM      8
SAVFRM24  FORM      8
SAVFRM25  FORM      8
SAVKEY3   DIM       4
SAVKEY4   DIM       4
SAVKEY5   DIM       5
SAVKEY6   DIM       6
SAVKEY8   DIM       8
SAVKEY9   DIM       9
SAVKEY12  DIM       12
SAVKEY13  DIM       13
SAVKEY14  DIM       14
SAVKEY15  DIM       15
SAVKEY16  DIM       16
SAVKEY17  DIM       17
SAVKEY18  DIM       18
SAVKEY19  DIM       19
SAVKEY20  DIM       20
SAVKEY21  DIM       21
SAVKEY22  DIM       22
SAVKEY23  DIM       23
SAVKEY24  DIM       24
SAVKEY25  DIM       25
SAVKEY26  DIM       26
SAVKEY27  DIM       27
SAVKEY28  DIM       28
SAVKEY29  DIM       29
SAVKEY30  DIM       30
SAVKEY31  DIM       32
SAVKEY32  DIM       32
SAVKEY33  DIM       33
SAVKEY34  DIM       34
SAVKEY35  DIM       35
SAVKEY39  DIM       39
SUBITEMC  DIM       3
.
TEMPFILE  DIM       8
.
UPDTFLAG  FORM      1             * Update Flag
.                                    0 = Update record
.                                    1 = Don't update record
.
WARDCODE  DIM       3
WBSEUID   INIT      "          "
.
.
. PROGRAM CONSTANTS
. -----------------
ERASE     INIT      "iserase "
ISBUILD   INIT      "isbuild "
CATA      INIT      "A "
CATBT     INIT      "BT"
CATCC     INIT      "CC"
CATCL     INIT      "CL"
CATCR     INIT      "cr"
CATCT     INIT      "ct"
CATDD     INIT      "DD"
CATDT     INIT      "DT"
CATDX     INIT      "DX"
CATFI     INIT      "FI"
CATHT     INIT      "HT"
CATH1     INIT      "H1"
CATH2     INIT      "H2"
CATH3     INIT      "H3"
CATH4     INIT      "H4"
CATH5     INIT      "H5"
CATH6     INIT      "H6"
CATH7     INIT      "H7"
CATH8     INIT      "H8"
CATH9     INIT      "H9"
CATJ      INIT      "J "
CATLA     INIT      "LA"
CATOC     INIT      "OC"
CATP      INIT      "P "
CATR      INIT      "R "
CATS      INIT      "S "
CATSP     INIT      "SP"
CATST     INIT      "ST"
CATVA     INIT      "VA"
UKEY      INIT      " 26 U1-1,2-7,8-15"
.
.
PRGID     INIT      "CODFIXIT"
PRGNAM    INIT      "Fixit for Coded Fields"
VERSION   INIT      "V10.14.00"
+
.*****************************************************************************
.*                              MAIN0000                                     *
.*                      Controlling Logic (Mainline code)                    *
.*****************************************************************************
.
MAIN0000  CALL      INIT0000               * initialisation and open files
.
MAIN0100  CALL      OPTN0000               * select options
          BRANCH    EXIT,MAIN9000          * EXIT = 1 if 0 chosen in menu
          BRANCH    COPTION,MAIN1000       * proceed with fixit
.
MAIN1000  CALL      GMAP0000               * get ascii map file name
          BRANCH    EXIT,MAIN0100          * nothing input or not found
.
          CALL      CREA0000               * create temp indexed file
.
          CALL      LOAD0000               * load code mappings into temp file
.
          CALL      CONTQST                * Ok to continue ?
          BRANCH    CEXIT,MAIN2000:        * yes
                          MAIN0100:        * no
                          MAIN0100         * cancel
.
MAIN2000  CALL      PROC0000               * process files with coded fields
.
MAIN9000  CALL      KILL0000               * clean up temp files
.
MAIN9999  CHAIN     PGM                    * chain back to program
+
.*****************************************************************************
.*                                INIT0000             Called by: MAIN0000   *
.*                             initialisation                                *
.*  The initialisation routine is used to display headings and open files.   *
.*****************************************************************************
.
INIT0000  CALL      DISPHEAD                  * display heading
.
          DISPLAY   *P56:24,*EL,"Opening ":
                    *P64:24,"bokrc1af";
          OPEN      BOKRC1A1,"bokrc1af"
.
          DISPLAY   *P64:24,"bokrx1af";
          OPEN      BOKRX1A1,"bokrx1af"
.
          DISPLAY   *P64:24,"controlf";
          OPEN      CONTROLF,"controlf"
.
          DISPLAY   *P64:24,"mehdpsaf";
          OPEN      MEHDPSA1,"mehdpsaf"
.
          DISPLAY   *P64:24,"mehhlsaf";
          OPEN      MEHHLSA1,"mehhlsaf"
.
          DISPLAY   *P64:24,"mrtextaf";
          OPEN      MRTEXTA1,"mrtextaf"
.
          DISPLAY   *P64:24,"newitemn";
          OPEN      PATIT1M1,"newitemn"
.
          DISPLAY   *P64:24,"oprcouaf";
          OPEN      OPRCOUA1,"oprcouaf"
.
          DISPLAY   *P64:24,"oprcscaf";
          OPEN      OPRCSCA1,"oprcscaf"
.
          DISPLAY   *P64:24,"oprcsuaf";
          OPEN      OPRCSUA1,"oprcsuaf"
.
          DISPLAY   *P64:24,"oprcliaf";
          OPEN      OPRCLIA1,"oprcliaf"
.
          DISPLAY   *P64:24,"oprdepaf";
          OPEN      OPRDEPA1,"oprdepaf"
.
          DISPLAY   *P64:24,"oprdetaf";
          OPEN      OPRDETA3,"oprdetaf"
.
          DISPLAY   *P64:24,"oprsemaf";
          OPEN      OPRSEMA1,"oprsemaf"
.
          DISPLAY   *P64:24,"oprsesaf";
          OPEN      OPRSESA1,"oprsesaf"
.
          DISPLAY   *P64:24,"oprtpsaf";
          OPEN      OPRTPSA1,"oprtpsaf"
.
          DISPLAY   *P64:24,"outbchaf";
          OPEN      OUTBCHA1,"outbchaf"
.
          DISPLAY   *P64:24,"outrf1af";
          OPEN      OUTRF1A1,"outrf1af"
.
          DISPLAY   *P64:24,"outsitaf";
          OPEN      OUTSITA1,"outsitaf"
.
          DISPLAY   *P64:24,"pataccaf";
          OPEN      PATACCA1,"pataccaf"
.
          DISPLAY   *P64:24,"patafeaf";
          OPEN      PATAFEA1,"patafeaf"
.
          DISPLAY   *P64:24,"patafeaf";
          OPEN      PATAFEA1,"patafeaf"
.
          DISPLAY   *P64:24,"pmsalnaf";
          OPEN      PMSALNA1,"pmsalnaf"
.
          DISPLAY   *P64:24,"patalrtf";
          OPEN      PATALRT1,"patalrtf"
.
          DISPLAY   *P64:24,"pataltaf";
          OPEN      PATALTT1,"pataltaf"
.
          DISPLAY   *P64:24,"patasdaf";
          OPEN      PATASDA1,"patasdaf"
.
          DISPLAY   *P64:24,"patbchaf";
          OPEN      PATBCHA1,"patbchaf"
.
          DISPLAY   *P64:24,"patbfeef";
          OPEN      PATBFEE1,"patbfeef"
.
          DISPLAY   *P64:24,"patc1sad";
          OPEN      PATC1SA1,"patc1sad"
.
          DISPLAY   *P64:24,"patceraf";
          OPEN      PATCERA1,"patceraf"
.
          DISPLAY   *P64:24,"patchcof";
          OPEN      PATCHCO1,"patchcof"
.
          DISPLAY   *P64:24,"patclcaf";
          OPEN      PATCLCA1,"patclcaf"
.
          DISPLAY   *P64:24,"patcmxaf";
          OPEN      PATCMXA1,"patcmxaf"
.
          DISPLAY   *P64:24,"patcodes";
          OPEN      PATCODE1,"patcodes"
.
          DISPLAY   *P64:24,"patctfaf";
          OPEN      PATCTFA1,"patctfaf"
.
          DISPLAY   *P64:24,"patdepaf";
          OPEN      PATDEPA1,"patdepaf"
.
          DISPLAY   *P64:24,"patdo1af";
          OPEN      PATDO1A1,"patdo1af"
.
          DISPLAY   *P64:24,"patdtraf";
          OPEN      PATDTRA1,"patdtraf"
.
          DISPLAY   *P64:24,"patdschf";
          OPEN      PATDSCH1,"patdschf"
.
          DISPLAY   *P64:24,"patebhaf";
          OPEN      PATEBHA1,"patebhaf"
.
          DISPLAY   *P64:24,"patecaaf";
          OPEN      PATECAA1,"patecaaf"
.
          DISPLAY   *P64:24,"patechaf";
          OPEN      PATECHA1,"patechaf"
.
          DISPLAY   *P64:24,"patedsaf";
          OPEN      PATEDSA1,"patedsaf"
.
          DISPLAY   *P64:24,"patfactf";
          OPEN      PATFACT1,"patfactf"
.
          DISPLAY   *P64:24,"patfcmmf";
          OPEN      PATFCMM1,"patfcmmf"
.
          DISPLAY   *P64:24,"patfigaf";
          OPEN      PATFIGA1,"patfigaf"
.
          DISPLAY   *P64:24,"patfinsf";
          OPEN      PATFINS1,"patfinsf"
.
          DISPLAY   *P64:24,"patfmoaf";
          OPEN      PATFMOA1,"patfmoaf"
.
          DISPLAY   *P64:24,"patfmsaf";
          OPEN      PATFMSA1,"patfmsaf"
.
          DISPLAY   *P64:24,"patfn1af";
          OPEN      PATFN1A1,"patfn1af"
.
          DISPLAY   *P64:24,"patfn2af";
          OPEN      PATFN2A1,"patfn2af"
.
          DISPLAY   *P64:24,"patfx1af";
          OPEN      PATFX1A1,"patfx1af"
.
          DISPLAY   *P64:24,"pathdfaf";
          OPEN      PATHDFA1,"pathdfaf"
.
          DISPLAY   *P64:24,"pathgrpf";
          OPEN      PATHGRP1,"pathgrpf"
.
          DISPLAY   *P64:24,"pathlfaf";
          OPEN      PATHLFA1,"pathlfaf"
.
          DISPLAY   *P64:24,"pathspaf";
          OPEN      PATHSPA1,"pathspaf"
.
          DISPLAY   *P64:24,"patiblaf";
          OPEN      PATIBLA1,"patiblaf"
.
          DISPLAY   *P64:24,"patinlaf";
          OPEN      PATINLA1,"patinlaf"
.
          DISPLAY   *P64:24,"patinmaf";
          OPEN      PATINMA1,"patinmaf"
.
          DISPLAY   *P64:24,"patinvrf";
          OPEN      PATINVR1,"patinvrf"
.
          DISPLAY   *P64:24,"patiovaf";
          OPEN      PATIOVA1,"patiovaf"
.
          DISPLAY   *P64:24,"patitemn";
          OPEN      PATITEM1,"patitemn"
.
          DISPLAY   *P64:24,"patjrnlf";
          OPEN      PATJRNL1,"patjrnlf"
.
          DISPLAY   *P64:24,"patldfaf";
          OPEN      PATLDFA1,"patldfaf"
.
          DISPLAY   *P64:24,"patlisaf";
          OPEN      PATLISA1,"patlisaf"
.
          DISPLAY   *P64:24,"patlsdaf";
          OPEN      PATLSDA1,"patlsdaf"
.
          DISPLAY   *P64:24,"patma1af";
          OPEN      PATMA1A1,"patma1af"
          OPEN      PATMX1A1,"patmx1af"
.
          DISPLAY   *P64:24,"patmchgf";
          OPEN      PATMCHG1,"patmchgf"
.
          DISPLAY   *P64:24,"patmi1af";
          OPEN      PATMI1A1,"patmi1af"
.
          DISPLAY   *P64:24,"patnipbf";
          OPEN      PATNIPB1,"patnipbf"
.
          DISPLAY   *P64:24,"patovbaf";
          OPEN      PATOVBA1,"patovbaf"
.
          DISPLAY   *P64:24,"patpr1af";
          OPEN      PATPR1A1,"patpr1af"
          OPEN      PATPX1A1,"patpx1af"
.
          DISPLAY   *P64:24,"patrblaf";
          OPEN      PATRBLA1,"patrblaf"
.
          DISPLAY   *P64:24,"patsgcaf";
          OPEN      PATSGCA1,"patsgcaf"
.
          DISPLAY   *P64:24,"patsrbaf";
          OPEN      PATSRBA1,"patsrbaf"
.
          DISPLAY   *P64:24,"pattfeef";
          OPEN      PATTFEE1,"pattfeef"
.
          DISPLAY   *P64:24,"pattranf";
          OPEN      PATTRAN1,"pattranf"
.
          DISPLAY   *P64:24,"patwr1af";
          OPEN      PATWR1A1,"patwr1af"
.
          DISPLAY   *P64:24,"patwspaf";
          OPEN      PATWSPA1,"patwspaf"
.
          DISPLAY   *P64:24,"patwssaf";
          OPEN      PATWSSA1,"patwssaf"
.
          DISPLAY   *P64:24,"pmsccdaf";
          OPEN      PMSCCDA1,"pmsccdaf"
.
          DISPLAY   *P64:24,"pmscmtaf";
          OPEN      PMSCMTA1,"pmscmtaf"
.
          DISPLAY   *P64:24,"pmsdvaaf";
          OPEN      PMSDVAA1,"pmsdvaaf"
.
          DISPLAY   *P64:24,"pmsebhaf";
          OPEN      PMSEBHA1,"pmsebhaf"
.
          DISPLAY   *P64:24,"pmsecoaf";
          OPEN      PMSECOA1,"pmsecoaf"
.
          DISPLAY   *P64:24,"pmsectaf";
          OPEN      PMSECTA2,"pmsectaf"
.
          DISPLAY   *P64:24,"pmsevtaf";
          OPEN      PMSEVTA1,"pmsevtaf"
.
          DISPLAY   *P64:24,"pmsfciaf";
          OPEN      PMSFCIA1,"pmsfciaf"
.
          DISPLAY   *P64:24,"pmsfedaf";
          OPEN      PMSFEDA1,"pmsfedaf"
.
          DISPLAY   *P64:24,"pmsfesaf";
          OPEN      PMSFESA1,"pmsfesaf"
.
          DISPLAY   *P64:24,"pmsfmsaf";
          OPEN      PMSFMSA1,"pmsfmsaf"
.
          DISPLAY   *P64:24,"pmshcpaf";
          OPEN      PMSHCPA1,"pmshcpaf"
.
          DISPLAY   *P64:24,"pmshpgaf";
          OPEN      PMSHPGA1,"pmshpgaf"
.
          DISPLAY   *P64:24,"pmshpoaf";
          OPEN      PMSHPOA1,"pmshpoaf"
.
          DISPLAY   *P64:24,"pmsltfaf";
          OPEN      PMSLTFA1,"pmsltfaf"
.
          DISPLAY   *P64:24,"pmsmpraf";
          OPEN      PMSMPRA1,"pmsmpraf"
.
          DISPLAY   *P64:24,"pmsmtiaf";
          OPEN      PMSMTIA1,"pmsmtiaf"
.
          DISPLAY   *P64:24,"pmspx2af";
          OPEN      PMSPX2A1,"pmspx2af"
.
          DISPLAY   *P64:24,"pmssgaaf";
          OPEN      PMSSGAA1,"pmssgaaf"
.
          DISPLAY   *P64:24,"pmssinaf";
          OPEN      PMSSINA1,"pmssinaf"
.
          DISPLAY   *P64:24,"pmstspaf";
          OPEN      PMSTSPA1,"pmstspaf"
.
          DISPLAY   *P64:24,"pmsupgaf";
          OPEN      PMSUPGA1,"pmsupgaf"
.
          DISPLAY   *P64:24,"pmsupoaf";
          OPEN      PMSUPOA1,"pmsupoaf"
.
          DISPLAY   *P64:24,"pmsvx1af";
          OPEN      PMSVX1A1,"pmsvx1af"
.
          DISPLAY   *P64:24,"pridoctf";
          OPEN      PRIDOCT1,"pridoctf"
.
          DISPLAY   *P64:24,"pridtraf";
          OPEN      PRIDTRA1,"pridtraf"
.
          DISPLAY   *P64:24,"priexcaf";
          OPEN      PRIEXCA1,"priexcaf"
.
          DISPLAY   *P64:24,"prifciaf";
          OPEN      PRIFCIA1,"prifciaf"
.
          DISPLAY   *P64:24,"prifigaf";
          OPEN      PRIFIGA1,"prifigaf"
.
          DISPLAY   *P64:24,"prifinsf";
          OPEN      PRIFINS1,"prifinsf"
.
          DISPLAY   *P64:24,"prifmsaf";
          OPEN      PRIFMSA1,"prifmsaf"
.
          DISPLAY   *P64:24,"prihdbtf";
          OPEN      PRIHDBT1,"prihdbtf"
.
          DISPLAY   *P64:24,"prihreff";
          OPEN      PRIHREF1,"prihreff"
.
          DISPLAY   *P64:24,"priinvof";
          OPEN      PRIINVO1,"priinvof"
.
          DISPLAY   *P64:24,"prijrnlf";
          OPEN      PRIJRNL1,"prijrnlf"
.
          DISPLAY   *P64:24,"rcpbnkaf";
          OPEN      RCPBNKA1,"rcpbnkaf"
.
          DISPLAY   *P64:24,"rcpbulaf";
          OPEN      RCPBULA1,"rcpbulaf"
.
          CALL      TFILENAM                * Get temp file name
          MOVE      TFILNAME,TEMPFILE
.
.         Read billing parameters
.
          READ      CONTROLF,TEN;*192,CACCFEE
          READ      CONTROLF,TEN9;*212,CFEETYP
          READ      CONTROLF,THIRTY4;*199,PRCNAFEE
          READ      CONTROLF,SEVENTY9;*68,PTCNMFEE,*69,PTCNJFEE
.
INIT9999  RETURN
+
.*****************************************************************************
.*                                OPTN0000             Called by: MAIN0000   *
.*                        Get user options or exit                           *
.*    Returns:  EXIT    = FALSE (0)  Run fixit                               *
.*                        TRUE  (1)  Exit option selected                    *
.*****************************************************************************
.
OPTN0000  DISPLAY   *P1:3,*EF,*P1:4,*V2LON,ZERO,*HOFF,". Exit":
                    *P1:5,*V2LON,ONE,*HOFF,". Run Fixit"
.
OPTN0500  KEYIN     *P1:7,*EL,"Select Option : ":
                    *P17:7,*V2LON,COPTION
.
          COMPARE   ZERO,COPTION                 * exit selected ?
          GOTO      OPTN9500 IF EQUAL            * yes
.
          BRANCH    COPTION,OPTN9000             * run fixit
.
          BEEP
          GOTO      OPTN0500
.
OPTN9000  MOVE      ZERO,EXIT
          GOTO      OPTN9999
.
OPTN9500  MOVE      ONE,EXIT
.
OPTN9999  RETURN
+
.*****************************************************************************
.*                               GMAP0000              Called by: MAIN0000   *
.*         Get the user to input the ASCII Mapping filename, then            *
.*         open the file                                                     *
.* Returns:  FILENAME - ascii mapping file name                              *
.*           EXIT  0 = Ok to continue                                        *
.*                 1 = Error                                                 *
.*****************************************************************************
.
GMAP0000  KEYIN     *P1:11,*EF,"ASCII Mapping Filename: ",*V2LON,FILENAME
.
          PACK      FILENAME,FILENAME,SP8
          MATCH     SP8,FILENAME                 * anything entered ?
          GOTO      GMAP9100 IF EQUAL            * no
.
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      AMAPFILE,FILENAME            * ascii file opened ?
          TRAPCLR   IO
          BRANCH    OVRCD,GMAP8000               * no - error
.
          MOVE      ZERO,EXIT                    * yes
          GOTO      GMAP9999
.
GMAP8000  DISPLAY   *P1:24,*EL,*B,"File not found.  ";
          CALL      HITENTER
          GOTO      GMAP0000
.
GMAP9100  MOVE      ONE,EXIT
.
GMAP9999  RETURN
+
.*****************************************************************************
.*                               LOAD0000              Called by: MAIN0000   *
.*     Loop through the ASCII mapping file and load each of the codes        *
.*     to be mapped and their corresponding new codes.                       *
.*****************************************************************************
.
LOAD0000  MOVE      ZERO,ERORFLAG                * initialise error flag
.
.         Loop through the ascii map file
.
LOAD0500  READ      AMAPFILE,SEQ;CODETYPE,CATEGORY,OLDCODE,NEWCATG,NEWCODE 
          GOTO      LOAD9000 IF OVER             * eof - finished
.
.         Make sure the record doesn't already exist on the temp file
.
          PACK      KEY15,CODETYPE,CATEGORY,OLDCODE
          CALL      RATEMP1               
          IF        OVRCD = 0
            DISPLAY   *P1:24,*EL,*B,"Key: [",*V2LON,CODETYPE,CATEGORY,OLDCODE:
                      *HOFF,"] already exists.  ";
            CALL      HITENTER
            MOVE      ONE,ERORFLAG               * error occurred
            GOTO      LOAD0500
          ENDIF
.
          CALL      WRTEMP1                      * write new map record
          GOTO      LOAD0500                     * get next ascii record
.
LOAD9000  IF        ERORFLAG = 1
            DISPLAY   *P1:23,*EL,*B,"Errors occurred while loading.";
          ENDIF
.
LOAD9999  RETURN
+
.*****************************************************************************
.*                               PROC0000              Called by: MAIN0000   *
.*       Process all the relevant files containing coded fields              *
.*****************************************************************************
.
PROC0000  CALL      IBACLOCK
          DISPLAY   *P1:15,*EF,"Started:",*V2LON,CTIMEIS,*HOFF:
                    *P1:24,"Processing ";
.
          CALL      BREC0000                     * process bokrc1af
          CALL      BREX0000                     * process bokrx1af
          CALL      CDVA0000                     * process pmsccdaf
          CALL      MDPS0000                     * process mehdpsaf
          CALL      MEBH0000                     * process pmsebhaf
          CALL      MHLS0000                     * process mehhlsaf
          CALL      MREX0000                     * process mrtextaf
          CALL      NITM0000                     * process newitemn
          CALL      OCOU0000                     * process oprcouaf
          CALL      OCSC0000                     * process oprcscaf
          CALL      OCSU0000                     * process oprcsuaf
          CALL      OCLI0000                     * process oprcliaf
          CALL      ODEA0000                     * process oprdetaf
          CALL      ODEP0000                     * process oprdepaf
          CALL      OSEM0000                     * process oprsemaf
          CALL      OSES0000                     * process oprsesaf
          CALL      OTPS0000                     * process oprtpsaf
          CALL      POUT0000                     * process site dep. o/p files
          CALL      OBCH0000                     * process outbchaf
          CALL      ORFL0000                     * process outrf1af
          CALL      PACC0000                     * process pataccaf
          CALL      PAFE0000                     * process patafeaf
          CALL      PALN0000                     * process patalnaf
          CALL      PALR0000                     * process patalrtf
          CALL      PALT0000                     * process pataltaf
          CALL      PASD0000                     * process patasdaf
          CALL      PBCH0000                     * process patbchaf
          CALL      PBFE0000                     * process patbfeef
          CALL      PC1S0000                     * process patc1sad
          CALL      PCER0000                     * process patceraf
          CALL      PCHC0000                     * process patchcof
          CALL      PCLC0000                     * process patclcaf
          CALL      PCMT0000                     * process pmscmtaf
          CALL      PCMX0000                     * process patcmxaf
          CALL      PCOD0000                     * process patcodes
          CALL      PCTF0000                     * process patctfaf
          CALL      PDEP0000                     * process patdepaf
          CALL      PDOC0000                     * process patdo1af
          CALL      PDSC0000                     * process patdschf
          CALL      PDTR0000                     * process patdtraf
          CALL      PDVA0000                     * process pmsdvaaf
          CALL      PEBH0000                     * process patebhaf
          CALL      PECA0000                     * process patecaaf
          CALL      PECH0000                     * process patechaf
          CALL      PECO0000                     * process pmsecoaf
          CALL      PECT0000                     * process pmsectaf
          CALL      PEDS0000                     * process patedsaf
          CALL      PEVT0000                     * process pmsevtaf
          CALL      PFAC0000                     * process patfactf
          CALL      PFCI0000                     * process pmsfciaf
          CALL      PFCM0000                     * process patfcmmf
          CALL      PFED0000                     * process pmsfedaf
          CALL      PFES0000                     * process pmsfesaf
          CALL      PFIN0000                     * process patfinsf
          CALL      PFIG0000                     * process patfigaf
          CALL      PFMO0000                     * process patfmoaf
          CALL      PFMS0000                     * process patfmsaf
          CALL      MFMS0000                     * process pmsfmsaf
          CALL      PFND0000                     * process patfn1af
          CALL      PFN20000                     * process patfn2af
          CALL      PFXT0000                     * process patfx1af
          CALL      PHCP0000                     * process pmshcpaf
          CALL      PHPG0000                     * process pmshpgaf
          CALL      PHPO0000                     * process pmshpoaf
          CALL      PHDF0000                     * process pathdfaf
          CALL      PHGR0000                     * process pathgrpf
          CALL      PHLF0000                     * process pathlfaf
          CALL      PHSP0000                     * process pathspaf
          CALL      PIBL0000                     * process patiblaf
          CALL      PINL0000                     * process patinlaf
          CALL      PINM0000                     * process patinmaf
          CALL      PINV0000                     * process patinvrf
          CALL      PIOV0000                     * process patiovaf
          CALL      PITM0000                     * process patitemn
          CALL      PJRN0000                     * process patjrnlf
          CALL      PLDF0000                     * process patldfaf
          CALL      PLIS0000                     * process patlisaf
          CALL      PLSD0000                     * process patlsdaf
          CALL      PLTF0000                     * process pmsltfaf
          CALL      PMAS0000                     * process patma1af
          CALL      PMCH0000                     * process patmchgf
          CALL      PMIS0000                     * process patmi1af
          CALL      PMPR0000                     * process pmsmpraf
          CALL      PMTE0000                     * process pmsmteaf
          CALL      PMTI0000                     * process pmsmtiaf
          CALL      PNIP0000                     * process patnipbf
          CALL      POVB0000                     * process patovbaf
          CALL      PPRA0000                     * process patpr1af
          CALL      PPX20000                     * process pmspx2af
          CALL      PRBL0000                     * process patrblaf
          CALL      PSGA0000                     * process pmssgaaf
          CALL      PSGC0000                     * process patsgcaf
          CALL      PSIN0000                     * process pmssinaf
          CALL      PSRB0000                     * process patsrbaf
          CALL      PTFE0000                     * process pattfeef
          CALL      PTRN0000                     * process pattranf
          CALL      PTSP0000                     * process pmstspaf
          CALL      PUPG0000                     * process pmsupgaf
          CALL      PUPO0000                     * process pmsupoaf
          CALL      PVX10000                     * process pmsvx1af
          CALL      PWRD0000                     * process patwr1af
          CALL      PWSP0000                     * process patwspaf
          CALL      PWSS0000                     * process patwssaf
          CALL      IDOC0000                     * process pridoctf
          CALL      IDTR0000                     * process pridtraf
          CALL      IEXC0000                     * process priexcaf
          CALL      IFCI0000                     * process prifciaf
          CALL      IFIN0000                     * process prifinsf
          CALL      IFIG0000                     * process prifigaf
          CALL      IFMS0000                     * process prifmsaf
          CALL      IHDB0000                     * process prihdbtf
          CALL      IHRE0000                     * process prihreff
          CALL      IINV0000                     * process priinvof
          CALL      IJRN0000                     * process prijrnlf
          CALL      RBNK0000                     * process rcpbnkaf
          CALL      RBUL0000                     * process rcpbulaf
.
          CALL      IBACLOCK
          DISPLAY   *P1:16,*EF,"Stopped:",*V2LON,CTIMEIS,*HOFF:
                    *P1:24,"Fixit completed.  ";
          CALL      HITENTER
.
PROC9999  RETURN
+
.*****************************************************************************
.*                               POUT0000              Called by: PROC0000   *
.*       Process all the site dependent outpatient files                     *
.*****************************************************************************
.
.         Loop through the site file to get each site prefix
.
POUT0000  DISPLAY   *P1:23,*EL,"O/P Site:";
.
          MOVE      SP6,KEY6
          CALL      RDSSITA1                     * position at start of file
POUT0500  CALL      RDKSITA1                     * read next record
          BRANCH    OVRCD,POUT9000               * eof - finished
.
          DISPLAY   *P11:23,*EL,*V2LON,OSTSITE;
.
          CALL      OATT0000                     * process outattaf
          CALL      OBB10000                     * process outbb1af
          CALL      OCAN0000                     * process outcanaf
          CALL      ODTR0000                     * process outdtrof
          CALL      OLAD0000                     * process outladaf
          CALL      OMXS0000                     * process outmxsaf
          CALL      OUAT0000                     * process outuataf
.
          GOTO      POUT0500                     * get next site
.
POUT9000  DISPLAY   *P1:23,*EL;
.
POUT9999  RETURN
+
.*****************************************************************************
.*                               BREC0000              Called by: PROC0000   *
.*       Loop through bokrc1af and fix any relevant coded fields             *
.*****************************************************************************
.
BREC0000  DISPLAY   *P12:24,*EL,"bokrc1af:";
          MOVE      SP8,KEY8
          CALL      RSBKREC1                     * position at start of file
BREC0500  CALL      RKBKREC1                     * read next record
          BRANCH    OVRCD,BREC9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,BKREBOOK
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check BKREATYP
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,BKREATYP,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,BREC1000                * no 
.
          MOVE      NEWCODE,BKREATYP             * yes - load new code
.
.         Check BKREEATY
.
BREC1000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSC,SP10      * set to Category CC
          PACK      CODEDFLD,BKREEATY,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,BREC2000                * no 
.
          MOVE      NEWCODE,BKREEATY             * yes - load new code
.
.         Check BKRECLMT - Category CL
.
BREC2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,BKRECLMT,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,BREC3000                * no 
.
          MOVE      NEWCODE,BKRECLMT             * yes - load new code
.
.         Check BKRECLSS - Category P
.
BREC3000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSP,SP10           * set to Category P
          PACK      CODEDFLD,BKRECLSS,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,BREC9000                * no 
.
          MOVE      NEWCODE,BKRECLSS             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
BREC9000  BRANCH    UPDTFLAG,BREC0500            * no mappings
          CALL      UPBKREC1
          GOTO      BREC0500                     * get next record
.
BREC9999  RETURN
+
.*****************************************************************************
.*                               BREX0000              Called by: PROC0000   *
.*       Loop through bokrx1af and fix any relevant coded fields             *
.*****************************************************************************
.
BREX0000  DISPLAY   *P12:24,*EL,"bokrx1af:";
          MOVE      SP8,KEY8
          CALL      RSBKRX11                     * position at start of file
BREX0500  CALL      RKBKRX11                     * read next record
          BRANCH    OVRCD,BREX9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,BKRXBNUM
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check BKRXASRC
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSS,SP10           * set to Category S
          PACK      CODEDFLD,BKRXASRC,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,BREX9000                * no 
.
          MOVE      NEWCODE,BKRXASRC             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
BREX9000  BRANCH    UPDTFLAG,BREX0500            * no mappings
          CALL      UPBKRX11
          GOTO      BREX0500                     * get next record
.
BREX9999  RETURN
+
.*****************************************************************************
.*                              MDPS0000              Called by: PROC0000    *
.*       Loop through mehdpsaf and fix any relevant coded fields             *
.*****************************************************************************
.
MDPS0000  DISPLAY   *P12:24,*EL,"mehdpsaf:";
          MOVE      SP9,KEY9
MDPS0200  CALL      RSMHDPS1                     * position at start of file
MDPS0500  CALL      RKMHDPS1                     * read next record
          BRANCH    OVRCD,MDPS9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,MHDPDATE,MHDPDEPT
          PACK      SAVKEY9,MHDPDATE,MHDPDEPT
          PACK      SAVCOD01,MHDPDEPT,SP8        * save current code
          MOVE      MHDPBEDS,SAVFRM01            * save current totals
          MOVE      MHDPINST,SAVFRM02
          MOVE      MHDPSLST,SAVFRM03
          MOVE      MHDPADMI,SAVFRM04
          MOVE      MHDPADMS,SAVFRM05
          MOVE      MHDPADMC,SAVFRM06
          MOVE      MHDPTRNO,SAVFRM07
          MOVE      MHDPTRNI,SAVFRM08
          MOVE      MHDPRETH,SAVFRM09
          MOVE      MHDPRETT,SAVFRM10
          MOVE      MHDPRETA,SAVFRM11
          MOVE      MHDPLVEH,SAVFRM12
          MOVE      MHDPLVET,SAVFRM13
          MOVE      MHDPLVEA,SAVFRM14
          MOVE      MHDPDSCH,SAVFRM15
          MOVE      MHDPDEAD,SAVFRM16
          MOVE      MHDPINBD,SAVFRM17
          MOVE      MHDPSLBD,SAVFRM18
          MOVE      MHDPHLBD,SAVFRM19
          MOVE      MHDPTLBD,SAVFRM20
          MOVE      MHDPAWBD,SAVFRM21
          MOVE      MHDPSEPB,SAVFRM22
          MOVE      MHDPSSLB,SAVFRM23
          MOVE      MHDPDSCB,SAVFRM24
          MOVE      MHDPDSLB,SAVFRM25
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check MHDPDEPT
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,MHDPDEPT,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,MDPS9000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
MDPS9000  BRANCH    UPDTFLAG,MDPS0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,MDPS9200            * key fields changed
.
.         Just need to update the current record
.
MDPS9100  MOVE      SAVCOD01,MHDPDEPT            * load new code
          CALL      UPMHDPS1                     * update record
          GOTO      MDPS9500
.
.         The key has changed, so check if the new key already exists
.
MDPS9200  MOVE      SAVCOD01,MHDPDEPT
          PACK      KEY9,MHDPDATE,MHDPDEPT
          CALL      RDMHDPS1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY9,KEY9               * no
            CALL      RDMHDPS1                   * re-read original record
            BRANCH    OVRCD,MDPS9500             * shouldn't happen
            GOTO      MDPS9100
          ELSE
            ADD       SAVFRM01,MHDPBEDS
            ADD       SAVFRM02,MHDPINST
            ADD       SAVFRM03,MHDPSLST
            ADD       SAVFRM04,MHDPADMI
            ADD       SAVFRM05,MHDPADMS
            ADD       SAVFRM06,MHDPADMC
            ADD       SAVFRM07,MHDPTRNO
            ADD       SAVFRM08,MHDPTRNI
            ADD       SAVFRM09,MHDPRETH
            ADD       SAVFRM10,MHDPRETT
            ADD       SAVFRM11,MHDPRETA
            ADD       SAVFRM12,MHDPLVEH
            ADD       SAVFRM13,MHDPLVET
            ADD       SAVFRM14,MHDPLVEA
            ADD       SAVFRM15,MHDPDSCH
            ADD       SAVFRM16,MHDPDEAD
            ADD       SAVFRM17,MHDPINBD
            ADD       SAVFRM18,MHDPSLBD
            ADD       SAVFRM19,MHDPHLBD
            ADD       SAVFRM20,MHDPTLBD
            ADD       SAVFRM21,MHDPAWBD
            ADD       SAVFRM22,MHDPSEPB
            ADD       SAVFRM23,MHDPSSLB
            ADD       SAVFRM24,MHDPDSCB
            ADD       SAVFRM25,MHDPDSLB
            CALL      UPMHDPS1                   * update new record
.
            MOVE      SAVKEY9,KEY9
            CALL      DEMHDPS1                   * delete original record
          ENDIF
.
MDPS9500  MOVE      SAVKEY9,KEY9
          GOTO      MDPS0200                     * get next record
.
MDPS9999  RETURN
+
.*****************************************************************************
.*                              MEBH0000              Called by: PROC0000    *
.*       Loop through pmsebhaf and fix any relevant coded fields             *
.*****************************************************************************
.
MEBH0000  DISPLAY   *P12:24,*EL,"pmsebhaf:";
          MOVE      SP8,KEY8
          CALL      RSPMEBH1                     * position at start of file
MEBH0500  CALL      RKPMEBH1                     * read next record
          BRANCH    OVRCD,MEBH9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PMEBBTHN
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PMEBHFND
.
          IF        PMEBEETP = 1
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSC,ANSL,SP10    * set to Category CL
          ELSE
            MOVE      TWO,CODETYPE               * set for health fund
            MOVE      SP10,CATEGORY
          ENDIF
          PACK      CODEDFLD,PMEBHFND,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,MEBH9000                * no 
.
          MOVE      NEWCODE,PMEBHFND             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
MEBH9000  BRANCH    UPDTFLAG,MEBH0500            * no mappings
          CALL      UPPMEBH1
          GOTO      MEBH0500                     * get next record
.
MEBH9999  RETURN
+
.*****************************************************************************
.*                              MHLS0000              Called by: PROC0000    *
.*       Loop through mehhlsaf and fix any relevant coded fields             *
.*****************************************************************************
.
MHLS0000  DISPLAY   *P12:24,*EL,"mehhlsaf:";
          MOVE      SP20,KEY16
          CALL      RSMHHLS1                     * position at start of file
MHLS0500  CALL      RKMHHLS1                     * read next record
          BRANCH    OVRCD,MHLS9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,MHHLURNO,MHHLUNIQ
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check MHHLSREF
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSS,SP10           * set to Category S
          PACK      CODEDFLD,MHHLSREF,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,MHLS9000                * no 
.
          MOVE      NEWCODE,MHHLSREF             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
MHLS9000  BRANCH    UPDTFLAG,MHLS0500            * no mappings
          CALL      UPMHHLS1
          GOTO      MHLS0500                     * get next record
.
MHLS9999  RETURN
+
.*****************************************************************************
.*                              MREX0000              Called by: PROC0000    *
.*       Loop through mrtextaf and fix any relevant coded fields             *
.*****************************************************************************
.
MREX0000  DISPLAY   *P12:24,*EL,"mrtextaf:";
          MOVE      SP4,KEY4
          CALL      RSMREX1                      * position at start of file
MREX0500  CALL      RKMREX1                      * read next record
          BRANCH    OVRCD,MREX9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,MREXEID
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check MREXATYP
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,MREXATYP,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,MREX1000                * no 
.
          MOVE      NEWCODE,MREXATYP             * yes - load new code
.
.         Check MREXPTYP
.
MREX1000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSP,SP10           * set to Category P
          PACK      CODEDFLD,MREXPTYP,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,MREX9000                * no 
.
          MOVE      NEWCODE,MREXPTYP             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
MREX9000  BRANCH    UPDTFLAG,MREX0500            * no mappings
          CALL      UPMREX1
          GOTO      MREX0500                     * get next record
.
MREX9999  RETURN
+
.*****************************************************************************
.*                              NITM0000              Called by: PROC0000    *
.*       Loop through newitemn and fix any relevant coded fields             *
.*****************************************************************************
.
NITM0000  DISPLAY   *P12:24,*EL,"newitemn:";
          MOVE      SP9,KEY9
          CALL      RDSIT1M1                     * position at start of file
NITM0500  CALL      RDKIT1M1                     * read next record
          BRANCH    OVRCD,NITM9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,ITEMNO
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check IMISGRP
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSF,ANSI,SP10      * set to Category FI
          PACK      CODEDFLD,IMISGRP,SP10        * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,NITM1000                * no 
.
          MOVE      NEWCODE,IMISGRP              * yes - load new code
.
.         Check ICLSS
.
NITM1000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,ICLSS,SP10          * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,NITM2000                * no 
.
          MOVE      NEWCODE,ICLSS                * yes - load new code
.
.         Check PTITDCSC
.
NITM2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,PTITDCSC,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,NITM3000                * no 
.
          MOVE      NEWCODE,PTITDCSC             * yes - load new code
.
.         Check PTITTCER
.
NITM3000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,CATCR,SP10          * set to Category cr
          PACK      CODEDFLD,PTITTCER,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,NITM9000                * no 
.
          MOVE      NEWCODE,PTITTCER             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
NITM9000  BRANCH    UPDTFLAG,NITM0500            * no mappings
          CALL      UPIT1M1
          GOTO      NITM0500                     * get next record
.
NITM9999  RETURN
+
.*****************************************************************************
.*                              OCOU0000              Called by: PROC0000    *
.*       Loop through oprcouaf and fix any relevant coded fields             *
.*****************************************************************************
.
OCOU0000  DISPLAY   *P12:24,*EL,"oprcouaf:";
          MOVE      SP30,KEY21
OCOU0200  CALL      RSOPCOU1                     * position at start of file
OCOU0500  CALL      RKOPCOU1                     * read next record
          BRANCH    OVRCD,OCOU9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,OPCODATE,OPCODOCT,OPCOTYPE,OPCOOTYP:
                             OPCOTPER,OPCOATYP,OPCOOWN
          PACK      SAVKEY21,OPCODATE,OPCODOCT,OPCOTYPE,OPCOOTYP,OPCOTPER:
                             OPCOATYP,OPCOOWN 
          PACK      SAVCOD01,OPCOTPER,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check OPCOTPER
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSS,ANSP,SP10      * set to Category SP
          PACK      CODEDFLD,OPCOTPER,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OCOU9000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
OCOU9000  BRANCH    UPDTFLAG,OCOU0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,OCOU9200            * key fields changed
.
.         Just need to update the current record
.
OCOU9100  MOVE      SAVCOD01,OPCOTPER
          CALL      UPOPCOU1                     * update record
          GOTO      OCOU9500
.
.         The key has changed, so check if the new key already exists
.
OCOU9200  MOVE      SAVCOD01,OPCOTPER
          PACK      KEY21,OPCODATE,OPCODOCT,OPCOTYPE,OPCOOTYP,OPCOTPER:
                                   OPCOATYP,OPCOOWN
          CALL      RDOPCOU1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY21,KEY21             * no
            CALL      RDOPCOU1                   * re-read original record
            BRANCH    OVRCD,OCOU9500             * shouldn't happen
            GOTO      OCOU9100
          ELSE
            MOVE      SAVKEY21,KEY21             * delete record
            CALL      DEOPCOU1
          ENDIF
.
OCOU9500  MOVE      SAVKEY21,KEY21
          GOTO      OCOU0200                     * get next record
.
OCOU9999  RETURN
+
.*****************************************************************************
.*                              OCSC0000              Called by: PROC0000    *
.*       Loop through oprcscaf and fix any relevant coded fields             *
.*****************************************************************************
.
OCSC0000  DISPLAY   *P12:24,*EL,"oprcscaf:";
          MOVE      SP20,KEY20
OCSC0200  CALL      RSOPCSC1                     * position at start of file
OCSC0500  CALL      RKOPCSC1                     * read next record
          BRANCH    OVRCD,OCSC9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,OPCCDATE,OPCCDOCT,OPCCTYPE,OPCCTIME:
                             OPCCCTYP,OPCCCODE
          PACK      SAVKEY20,OPCCDATE,OPCCDOCT,OPCCTYPE,OPCCTIME:
                             OPCCCTYP,OPCCCODE
          PACK      SAVCOD01,OPCCTIME,SP8        * save current code
          PACK      SAVCOD02,OPCCCODE,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check OPCCTIME
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSS,ANSP,SP10      * set to Category SP
          PACK      CODEDFLD,OPCCTIME,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OCSC1000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check OPCCCODE
.
OCSC1000  COMPARE   ONE,OPCCCTYP                 * cancellation code type ?
          GOTO      OCSC9000 IF NOT EQUAL        * no
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSO,ANSC,SP10      * set to Category OC
          PACK      CODEDFLD,OPCCCODE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OCSC9000                * no 
.
          MOVE      NEWCODE,SAVCOD02             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
OCSC9000  BRANCH    UPDTFLAG,OCSC0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,OCSC9200            * key fields changed
.
.         Just need to update the current record
.
OCSC9100  MOVE      SAVCOD01,OPCCTIME
          MOVE      SAVCOD02,OPCCCODE
          CALL      UPOPCSC1                     * update record
          GOTO      OCSC9500
.
.         The key has changed, so check if the new key already exists
.
OCSC9200  MOVE      SAVCOD01,OPCCTIME
          MOVE      SAVCOD02,OPCCCODE
          PACK      KEY20,OPCCDATE,OPCCDOCT,OPCCTYPE,OPCCTIME:
                          OPCCCTYP,OPCCCODE
          CALL      RDOPCSC1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY20,KEY20             * no
            CALL      RDOPCSC1                   * re-read original record
            BRANCH    OVRCD,OCSC9500             * shouldn't happen
            GOTO      OCSC9100
          ELSE
            MOVE      SAVKEY20,KEY20             * delete record
            CALL      DEOPCSC1
          ENDIF
.
OCSC9500  MOVE      SAVKEY20,KEY20
          GOTO      OCSC0200                     * get next record
.
OCSC9999  RETURN
+
.*****************************************************************************
.*                              OCSU0000              Called by: PROC0000    *
.*       Loop through oprcsuaf and fix any relevant coded fields             *
.*****************************************************************************
.
OCSU0000  DISPLAY   *P12:24,*EL,"oprcsuaf:";
          MOVE      SP20,KEY16
OCSU0200  CALL      RSOPCSU1                     * position at start of file
OCSU0500  CALL      RKOPCSU1                     * read next record
          BRANCH    OVRCD,OCSU9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,OPCSDATE,OPCSDOCT,OPCSTYPE,OPCSTIME
          PACK      SAVKEY16,OPCSDATE,OPCSDOCT,OPCSTYPE,OPCSTIME
          PACK      SAVCOD01,OPCSTIME,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check OPCSTIME
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSS,ANSP,SP10      * set to Category SP
          PACK      CODEDFLD,OPCSTIME,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OCSU9000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
OCSU9000  BRANCH    UPDTFLAG,OCSU0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,OCSU9200            * key fields changed
.
.         Just need to update the current record
.
OCSU9100  MOVE      SAVCOD01,OPCSTIME
          CALL      UPOPCSU1                     * update record
          GOTO      OCSU9500
.
.         The key has changed, so check if the new key already exists
.
OCSU9200  MOVE      SAVCOD01,OPCSTIME
          PACK      KEY16,OPCSDATE,OPCSDOCT,OPCSTYPE,OPCSTIME
          CALL      RDOPCSU1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY16,KEY16             * no
            CALL      RDOPCSU1                   * re-read original record
            BRANCH    OVRCD,OCSU9500             * shouldn't happen
            GOTO      OCSU9100
          ELSE
            MOVE      SAVKEY16,KEY16             * delete record
            CALL      DEOPCSU1
          ENDIF
.
OCSU9500  MOVE      SAVKEY16,KEY16
          GOTO      OCSU0200                     * get next record
.
OCSU9999  RETURN
+
.*****************************************************************************
.*                              OCLI0000              Called by: PROC0000    *
.*       Loop through oprcliaf and fix any relevant coded fields             *
.*****************************************************************************
.
OCLI0000  DISPLAY   *P12:24,*EL,"oprcliaf:";
          MOVE      SP30,KEY6
          CALL      RSOPCLI1                     * position at start of file
OCLI0500  CALL      RKOPCLI1                     * read next record
          BRANCH    OVRCD,OCLI9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,OPCLCLIN
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check OPCLCAT
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSY,ANSG,SP10      * set to Category YG
          PACK      CODEDFLD,OPCLCAT,SP10        * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OCLI9000                * no
.
          MOVE      NEWCODE,OPCLCAT              * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
OCLI9000  BRANCH    UPDTFLAG,OCLI0500            * no mappings
          CALL      UPOPCLI1
          GOTO      OCLI0500                     * get next record
.
OCLI9999  RETURN
+
.*****************************************************************************
.*                              ODEA0000              Called by: PROC0000    *
.*       Loop through oprdetaf and fix any relevant coded fields             *
.*****************************************************************************
.
ODEA0000  DISPLAY   *P12:24,*EL,"oprdetaf:";
          MOVE      SP30,KEY10
          CALL      RSOPDEA3                     * position at start of file
ODEA0500  CALL      RKOPDEA3                     * read next record
          BRANCH    OVRCD,ODEA9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,OPDAUNIQ
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check OPDAASRC
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSS,SP10           * set to Category S
          PACK      CODEDFLD,OPDAASRC,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,ODEA1000                * no 
.
          MOVE      NEWCODE,OPDAASRC             * yes - load new code
.
.         Check OPDAUNIT
.
ODEA1000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSS,ANST,SP10      * set to Category ST
          PACK      CODEDFLD,OPDAUNIT,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,ODEA9000                * no 
.
          MOVE      NEWCODE,OPDAUNIT             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
ODEA9000  BRANCH    UPDTFLAG,ODEA0500            * no mappings
          CALL      UPOPDEA3
          GOTO      ODEA0500                     * get next record
.
ODEA9999  RETURN
+
.*****************************************************************************
.*                              ODEP0000              Called by: PROC0000    *
.*       Loop through oprdepaf and fix any relevant coded fields             *
.*****************************************************************************
.
ODEP0000  DISPLAY   *P12:24,*EL,"oprdepaf:";
          MOVE      SP30,KEY9
ODEP0200  CALL      RSOPDEP1                     * position at start of file
ODEP0500  CALL      RKOPDEP1                     * read next record
          BRANCH    OVRCD,ODEP9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,OPDEDATE,OPDEDEPT
          PACK      SAVKEY9,OPDEDATE,OPDEDEPT
          PACK      SAVCOD01,OPDEDEPT,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check OPDEDEPT
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,OPDEDEPT,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,ODEP9000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
ODEP9000  BRANCH    UPDTFLAG,ODEP0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,ODEP9200            * key fields changed
.
.         Just need to update the current record
.
ODEP9100  MOVE      SAVCOD01,OPDEDEPT
          CALL      UPOPDEP1                     * update record
          GOTO      ODEP9500
.
.         The key has changed, so check if the new key already exists
.
ODEP9200  MOVE      SAVCOD01,OPDEDEPT
          PACK      KEY9,OPDEDATE,OPDEDEPT
          CALL      RDOPDEP1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY9,KEY9               * no
            CALL      RDOPDEP1                   * re-read original record
            BRANCH    OVRCD,ODEP9500             * shouldn't happen
            GOTO      ODEP9100
          ELSE
            MOVE      SAVKEY9,KEY9               * delete record
            CALL      DEOPDEP1
          ENDIF
.
ODEP9500  MOVE      SAVKEY9,KEY9
          GOTO      ODEP0200                     * get next record
.
ODEP9999  RETURN
+
.*****************************************************************************
.*                              OSEM0000              Called by: PROC0000    *
.*       Loop through oprsemaf and fix any relevant coded fields             *
.*****************************************************************************
.
OSEM0000  DISPLAY   *P12:24,*EL,"oprsemaf:";
          MOVE      SP20,KEY12
          CALL      RSOPSEM1                     * position at start of file
OSEM0500  CALL      RKOPSEM1                     * read next record
          BRANCH    OVRCD,OSEM9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,OPSMCLIN,OPSMDAYI,OPSMTIME
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check OPSMTPER
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSS,ANSP,SP10      * set to Category SP
          PACK      CODEDFLD,OPSMTPER,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OSEM1000                * no 
.
          MOVE      NEWCODE,OPSMTPER             * yes - load new code
.
.         Check OPSMTYPE
.
OSEM1000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSS,ANST,SP10      * set to Category ST
          PACK      CODEDFLD,OPSMTYPE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OSEM9000                * no 
.
          MOVE      NEWCODE,OPSMTYPE             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
OSEM9000  BRANCH    UPDTFLAG,OSEM0500            * no mappings
          CALL      UPOPSEM1                     * update record
          GOTO      OSEM0500
.
OSEM9999  RETURN
+
.*****************************************************************************
.*                              OSES0000              Called by: PROC0000    *
.*       Loop through oprsesaf and fix any relevant coded fields             *
.*****************************************************************************
.
OSES0000  DISPLAY   *P12:24,*EL,"oprsesaf:";
          MOVE      SP20,KEY19
          CALL      RSOPSES1                     * position at start of file
OSES0500  CALL      RKOPSES1                     * read next record
          BRANCH    OVRCD,OSES9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,OPSEDATE,OPSETIME,OPSECLIN
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check OPSETPER
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSS,ANSP,SP10      * set to Category SP
          PACK      CODEDFLD,OPSETPER,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OSES1000                * no 
.
          MOVE      NEWCODE,OPSETPER             * yes - load new code
.
.         Check OPSETYPE
.
OSES1000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSS,ANST,SP10      * set to Category ST
          PACK      CODEDFLD,OPSETYPE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OSES2000                * no 
.
          MOVE      NEWCODE,OPSETYPE             * yes - load new code
.
.         Check OPSECANC
.
OSES2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSO,ANSC,SP10      * set to Category OC
          PACK      CODEDFLD,OPSECANC,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OSES9000                * no 
.
          MOVE      NEWCODE,OPSECANC             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
OSES9000  BRANCH    UPDTFLAG,OSES0500            * no mappings
          CALL      UPOPSES1                     * update record
          GOTO      OSES0500
.
OSES9999  RETURN
+
.*****************************************************************************
.*                              OTPS0000              Called by: PROC0000    *
.*       Loop through oprtpsaf and fix any relevant coded fields             *
.*****************************************************************************
.
OTPS0000  DISPLAY   *P12:24,*EL,"oprtpsaf:";
          MOVE      SP3,KEY3
OTPS0200  CALL      RSOPTPS1                     * position at start of file
OTPS0500  CALL      RKOPTPS1                     * read next record
          BRANCH    OVRCD,OTPS9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,OPTPSPEC
          MOVE      OPTPSPEC,SAVKEY3
          PACK      SAVCOD01,OPTPSPEC,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check OPTPSPEC
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSS,ANST,SP10      * set to Category ST
          PACK      CODEDFLD,OPTPSPEC,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OTPS9000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
OTPS9000  BRANCH    UPDTFLAG,OTPS0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,OTPS9200            * key fields changed
.
.         Just need to update the current record
.
OTPS9100  MOVE      SAVCOD01,OPTPSPEC
          CALL      UPOPTPS1                     * update record
          GOTO      OTPS9500
.
.         The key has changed, so check if the new key already exists
.
OTPS9200  MOVE      SAVCOD01,OPTPSPEC
          MOVE      OPTPSPEC,KEY3
          CALL      RDOPTPS1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY3,KEY3               * no
            CALL      RDOPTPS1                   * re-read original record
            BRANCH    OVRCD,OTPS9500             * shouldn't happen
            GOTO      OTPS9100
          ELSE
            MOVE      SAVKEY3,KEY3               * delete record
            CALL      DEOPTPS1
          ENDIF
.
OTPS9500  MOVE      SAVKEY3,KEY3
          GOTO      OTPS0200                     * get next record
.
OTPS9999  RETURN
+
.*****************************************************************************
.*                              OATT0000              Called by: PROC0000    *
.*       Loop through outattaf and fix any relevant coded fields             *
.*****************************************************************************
.
OATT0000  DISPLAY   *P12:24,*EL,OSTFILE,"attaf:";
          PACK      CFNAME,OSTFILE,FILATTA1
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTATTA1,CFNAME              * file opened ?
          TRAPCLR   IO
          BRANCH    OVRCD,OATT9999               * no - get next site
.
.         Process all the records for this site
.         
          MOVE      SP30,KEY24
OATT0200  CALL      RDSATTA1                     * position at start of file
OATT0500  CALL      RDKATTA1                     * read next record
          BRANCH    OVRCD,OATT9900               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,OATSITE,OATGRUP,OATCTYP,OATREFR,OATDATE
          PACK      SAVKEY24,OATSITE,OATGRUP,OATCTYP,OATREFR,OATDATE
          PACK      SAVCOD01,OATREFR,SP8         * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check OATREFR
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSS,SP10           * set to Category S
          PACK      CODEDFLD,OATREFR,SP10        * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OATT9000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
OATT9000  BRANCH    UPDTFLAG,OATT0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,OATT9200            * key fields changed
.
.         Just need to update the current record
.
OATT9100  MOVE      SAVCOD01,OATREFR
          CALL      UPATTA1                      * update record
          GOTO      OATT9500
.
.         The key has changed, so check if the new key already exists
.
OATT9200  MOVE      SAVCOD01,OATREFR
          PACK      KEY24,OATSITE,OATGRUP,OATCTYP,OATREFR,OATDATE
          CALL      RDATTA1                      * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY24,KEY24             * no
            CALL      RDATTA1                    * re-read original record
            BRANCH    OVRCD,OATT9500             * shouldn't happen
            GOTO      OATT9100
          ELSE
            MOVE      SAVKEY24,KEY24             * delete record
            CALL      DEATTA1 
          ENDIF
.
OATT9500  MOVE      SAVKEY24,KEY24
          GOTO      OATT0200                     * get next record
.
OATT9900  CLOSE     OUTATTA1
.
OATT9999  RETURN
+
.*****************************************************************************
.*                              OBB10000              Called by: PROC0000    *
.*       Loop through outbb1af and fix any relevant coded fields             *
.*****************************************************************************
.
OBB10000  DISPLAY   *P12:24,*EL,OSTFILE,"bb1af:";
          PACK      CFNAME,OSTFILE,FILBB1A1
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTBB1A1,CFNAME              * file opened ?
          TRAPCLR   IO
          BRANCH    OVRCD,OBB19999               * no - get next site
.
.         Process all the records for this site
.         
          MOVE      SP8,KEY8
          CALL      RDSBOKB1                     * position at start of file
OBB10500  CALL      RDKBOKB1                     * read next record
          BRANCH    OVRCD,OBB19900               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,OBAOUTNO
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check OBASRCR
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSS,SP10           * set to Category S
          PACK      CODEDFLD,OBASRCR,SP10        * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OBB11000                * no 
.
          MOVE      NEWCODE,OBASRCR              * yes - load new code
.
.         Check OBACOMP
.
OBB11000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,OBACOMP,SP10        * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OBB12000                * no 
.
          MOVE      NEWCODE,OBACOMP              * yes - load new code
.
.         Check OBACLASS
.
OBB12000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,OBACLASS,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OBB13000                * no 
.
          MOVE      NEWCODE,OBACLASS             * yes - load new code
.
.         Check OBACAT
.
OBB13000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSP,SP10           * set to Category P
          PACK      CODEDFLD,OBACAT,SP10         * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OBB14000                * no 
.
          MOVE      NEWCODE,OBACAT               * yes - load new code
.         
.         Check OTBBTBLE
.
OBB14000  MOVE      THREE,CODETYPE               * set for health fund table
          PACK      CATEGORY,OTBBFUND,SP10       * set health fund
          PACK      CODEDFLD,OTBBTBLE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OBB15000                * no
.
          MOVE      NEWCODE,OTBBTBLE             * yes - load new code
.
.         Check OTBBFUND         
.
OBB15000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,OTBBFUND,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OBB19000                * no 
.
          MOVE      NEWCODE,OTBBFUND             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
OBB19000  BRANCH    UPDTFLAG,OBB10500            * no mappings
          CALL      UPBOKB1
          GOTO      OBB10500                     * get next record
.         
OBB19900  CLOSE     OUTBB1A1
.
OBB19999  RETURN
+
.*****************************************************************************
.*                              OBCH0000              Called by: PROC0000    *
.*       Loop through outbchaf and fix any relevant coded fields             *
.*****************************************************************************
.
OBCH0000  DISPLAY   *P12:24,*EL,"outbchaf:";
          MOVE      SP20,KEY18
OBCH0200  CALL      RSOTBCH1                     * position at start of file
OBCH0500  CALL      RKOTBCH1                     * read next record
          BRANCH    OVRCD,OBCH9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,OTBCCLM,OTBCBRD,OTBCDEPT,OTBCAGEG:
                             OTBCNVIS
          PACK      SAVKEY18,OTBCCLM,OTBCBRD,OTBCDEPT,OTBCAGEG,OTBCNVIS
          PACK      SAVCOD01,OTBCCLM,SP8         * save current code
          PACK      SAVCOD02,OTBCBRD,SP8         * save current code
          PACK      SAVCOD03,OTBCDEPT,SP8        * save current code
          PACK      SAVCOD04,OTBCITEM,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check OTBCCLM
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,OTBCCLM,SP10        * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OBCH1000                * no 
.
          MOVE      NEWCODE,SAVCOD01              * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check OTBCBRD         
.
OBCH1000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,OTBCBRD,SP10        * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OBCH2000                * no 
.
          MOVE      NEWCODE,SAVCOD02              * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check OTBCDEPT
.
OBCH2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,OTBCDEPT,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OBCH3000                * no 
.
          MOVE      NEWCODE,SAVCOD03             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check OTBCITEM
.
OBCH3000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSF,ANSI,SP10      * set to Category FI
          PACK      CODEDFLD,OTBCITEM,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OBCH9000                * no 
.
          MOVE      NEWCODE,SAVCOD04             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
OBCH9000  BRANCH    UPDTFLAG,OBCH0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,OBCH9200            * key fields changed
.
.         Just need to update the current record
.
OBCH9100  MOVE      SAVCOD01,OTBCCLM
          MOVE      SAVCOD02,OTBCBRD
          MOVE      SAVCOD03,OTBCDEPT
          MOVE      SAVCOD04,OTBCITEM
          CALL      UPOTBCH1                     * update record
          GOTO      OBCH9500
.
.         The key has changed, so check if the new key already exists
.         
OBCH9200  MOVE      SAVCOD01,OTBCCLM
          MOVE      SAVCOD02,OTBCBRD
          MOVE      SAVCOD03,OTBCDEPT
          PACK      KEY18,OTBCCLM,OTBCBRD,OTBCDEPT,OTBCAGEG,OTBCNVIS
          CALL      RDOTBCH1                     * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY18,KEY18             * no
            CALL      RDOTBCH1                   * re-read original record
            BRANCH    OVRCD,OBCH9500             * shouldn't happen 
            GOTO      OBCH9100
          ELSE
            MOVE      SAVKEY18,KEY18             * delete record
            CALL      DEOTBCH1
          ENDIF
.
OBCH9500  MOVE      SAVKEY18,KEY18
          GOTO      OBCH0200                     * get next record
.
OBCH9999  RETURN
+
.*****************************************************************************
.*                              OCAN0000              Called by: PROC0000    *
.*       Loop through outcanaf and fix any relevant coded fields             *
.*****************************************************************************
.
OCAN0000  DISPLAY   *P12:24,*EL,OSTFILE,"canaf:";
          PACK      CFNAME,OSTFILE,FILCANA1
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTCANA1,CFNAME              * file opened ?
          TRAPCLR   IO
          BRANCH    OVRCD,OCAN9999               * no - get next site
.
.         Process all the records for this site
.         
          MOVE      SP8,KEY8
          CALL      RSOTCAN1                     * position at start of file
OCAN0500  CALL      RKOTCAN1                     * read next record
          BRANCH    OVRCD,OCAN9900               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,OPCNOUTN
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check OPCNSRCR
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSS,SP10           * set to Category S
          PACK      CODEDFLD,OPCNSRCR,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OCAN1000                * no 
.
          MOVE      NEWCODE,OPCNSRCR             * yes - load new code
.
.         Check OPCNCOMP
.
OCAN1000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,OPCNCOMP,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OCAN2000                * no 
.
          MOVE      NEWCODE,OPCNCOMP             * yes - load new code
.
.         Check OPCNCLAS
.
OCAN2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,OPCNCLAS,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OCAN3000                * no 
.
          MOVE      NEWCODE,OPCNCLAS             * yes - load new code
.
.         Check OPCNCAT
.
OCAN3000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSP,SP10           * set to Category P
          PACK      CODEDFLD,OPCNCAT,SP10        * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OCAN9000                * no 
.
          MOVE      NEWCODE,OPCNCAT              * yes - load new code
.         
.         Check if there were any mappings and if so, update the record
.
OCAN9000  BRANCH    UPDTFLAG,OCAN0500            * no mappings
          CALL      UPOTCAN1
          GOTO      OCAN0500                     * get next record
.         
OCAN9900  CLOSE     OUTCANA1
.
OCAN9999  RETURN
+
.*****************************************************************************
.*                              ODTR0000              Called by: PROC0000    *
.*       Loop through outdtrof and fix any relevant coded fields             *
.*****************************************************************************
.
ODTR0000  DISPLAY   *P12:24,*EL,OSTFILE,"dtrof:";
          PACK      CFNAME,OSTFILE,FILDTRO1
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTDTRO1,CFNAME              * file opened ?
          TRAPCLR   IO
          BRANCH    OVRCD,ODTR9999               * no - get next site
.
.         Process all the records for this site
.         
          MOVE      SP30,KEY22
          CALL      RDSDTRO1                     * position at start of file
ODTR0500  CALL      RDKDTRO1                     * read next record
          BRANCH    OVRCD,ODTR9900               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,OTNUMB,OTINVNO,OTTRANS
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check OTMISGRP
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSF,ANSI,SP10      * set to Category FI
          PACK      CODEDFLD,OTMISGRP,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,ODTR9000                * no 
.
          MOVE      NEWCODE,OTMISGRP             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
ODTR9000  BRANCH    UPDTFLAG,ODTR0500            * no mappings
          CALL      UPDTRO1
          GOTO      ODTR0500                     * get next record
.         
ODTR9900  CLOSE     OUTDTRO1
.
ODTR9999  RETURN
+
.*****************************************************************************
.*                              OLAD0000              Called by: PROC0000    *
.*       Loop through outladaf and fix any relevant coded fields             *
.*****************************************************************************
.
OLAD0000  DISPLAY   *P12:24,*EL,OSTFILE,"ladaf:";
          PACK      CFNAME,OSTFILE,FILLADA1
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTLADA1,CFNAME              * file opened ?
          TRAPCLR   IO
          BRANCH    OVRCD,OLAD9999               * no - get next site
.
.         Process all the records for this site
.         
          MOVE      SP30,KEY25
          CALL      RSOTLAD1                     * position at start of file
OLAD0500  CALL      RKOTLAD1                     * read next record
          BRANCH    OVRCD,OLAD9900               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,OTLASEID,OTLAPCLS,OTLAOUTN,OTLACLID:
                                       OTLACLTY
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check OTLASREF
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSS,SP10           * set to Category S
          PACK      CODEDFLD,OTLASREF,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OLAD1000                * no 
.
          MOVE      NEWCODE,OTLASREF             * yes - load new code
.
.         Check OTLACOMP
.
OLAD1000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,OTLACOMP,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OLAD2000                * no 
.
          MOVE      NEWCODE,OTLACOMP             * yes - load new code
.
.         Check OTLACLSS
.
OLAD2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,OTLACLSS,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OLAD3000                * no 
.
          MOVE      NEWCODE,OTLACLSS             * yes - load new code
.
.         Check OTLAPCAT
.
OLAD3000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSP,SP10           * set to Category P
          PACK      CODEDFLD,OTLAPCAT,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OLAD9000                * no 
.
          MOVE      NEWCODE,OTLAPCAT             * yes - load new code
.         
.         Check if there were any mappings and if so, update the record
.
OLAD9000  BRANCH    UPDTFLAG,OLAD0500            * no mappings
          CALL      UPOTLAD1
          GOTO      OLAD0500                     * get next record
.         
OLAD9900  CLOSE     OUTLADA1
.
OLAD9999  RETURN
+
.*****************************************************************************
.*                              OMXS0000              Called by: PROC0000    *
.*       Loop through outmxsaf and fix any relevant coded fields             *
.*****************************************************************************
.
OMXS0000  DISPLAY   *P12:24,*EL,OSTFILE,"mxsaf:";
          PACK      CFNAME,OSTFILE,FILMXSA1
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTMXSA1,CFNAME              * file opened ?
          TRAPCLR   IO
          BRANCH    OVRCD,OMXS9999               * no - get next site
.
.         Process all the records for this site
.         
          MOVE      SP20,KEY20
          CALL      RSOTMXS1                     * position at start of file
OMXS0500  CALL      RKOTMXS1                     * read next record
          BRANCH    OVRCD,OMXS9900               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,OTXSSITE,OTXSCLIN,OTXSDAY,OTXSTIME:
                                       OTXSCNT
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check OTXSSPEC
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,OTXSSPEC,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OMXS9000                * no 
.
          MOVE      NEWCODE,OTXSSPEC             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
OMXS9000  BRANCH    UPDTFLAG,OMXS0500            * no mappings
          CALL      UPOTMXS1
          GOTO      OMXS0500                     * get next record
.         
OMXS9900  CLOSE     OUTMXSA1
.
OMXS9999  RETURN
+
.*****************************************************************************
.*                              ORFL0000              Called by: PROC0000    *
.*       Loop through outrf1af and fix any relevant coded fields             *
.*****************************************************************************
.
ORFL0000  DISPLAY   *P12:24,*EL,"outrf1af:";
          MOVE      SP8,KEY8
          CALL      RSOTRFL1                     * position at start of file
ORFL0500  CALL      RKOTRFL1                     * read next record
          BRANCH    OVRCD,ORFL9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,OTRLOUTN
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check OTRLCLAM
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,OTRLCLAM,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,ORFL1000                * no 
.
          MOVE      NEWCODE,OTRLCLAM             * yes - load new code
.
.         Check OTRLDEPT
.
ORFL1000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,OTRLDEPT,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,ORFL2000                * no 
.
          MOVE      NEWCODE,OTRLDEPT             * yes - load new code
.
.         Check OTRLSRCE
.
ORFL2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSS,SP10           * set to Category S
          PACK      CODEDFLD,OTRLSRCE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,ORFL9000                * no 
.
          MOVE      NEWCODE,OTRLSRCE             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
ORFL9000  BRANCH    UPDTFLAG,ORFL0500            * no mappings
          CALL      UPOTRFL1
          GOTO      ORFL0500                     * get next record
.
ORFL9999  RETURN
+
.*****************************************************************************
.*                              OUAT0000              Called by: PROC0000    *
.*       Loop through outuataf and fix any relevant coded fields             *
.*****************************************************************************
.
OUAT0000  DISPLAY   *P12:24,*EL,OSTFILE,"uataf:";
          PACK      CFNAME,OSTFILE,FILUATA1
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTUATA1,CFNAME              * file opened ?
          TRAPCLR   IO
          BRANCH    OVRCD,OUAT9999               * no - get next site
.
.         Process all the records for this site
.         
          MOVE      SP20,KEY19
          CALL      RSOPUAT1                     * position at start of file
OUAT0500  CALL      RKOPUAT1                     * read next record
          BRANCH    OVRCD,OUAT9900               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,OPUAOUTN,OPUAURNO,OPUAUNIQ
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check OPUACLAS
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,OPUACLAS,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OUAT1000                * no 
.
          MOVE      NEWCODE,OPUACLAS             * yes - load new code
.
.         Check OPUASRCR
.
OUAT1000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSS,SP10           * set to Category S
          PACK      CODEDFLD,OPUASRCR,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OUAT2000                * no 
.
          MOVE      NEWCODE,OPUASRCR             * yes - load new code
.
.         Check OPUACOMP
.
OUAT2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,OPUACOMP,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OUAT3000                * no 
.
          MOVE      NEWCODE,OPUACOMP             * yes - load new code
.
.         Check OPUAPCAT
.
OUAT3000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSP,SP10           * set to Category P
          PACK      CODEDFLD,OPUAPCAT,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,OUAT9000                * no 
.
          MOVE      NEWCODE,OPUAPCAT             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
OUAT9000  BRANCH    UPDTFLAG,OUAT0500            * no mappings
          CALL      UPOPUAT1
          GOTO      OUAT0500                     * get next record
.         
OUAT9900  CLOSE     OUTUATA1
.
OUAT9999  RETURN
+
.*****************************************************************************
.*                              PACC0000              Called by: PROC0000    *
.*       Loop through pataccaf and fix any relevant coded fields             *
.*****************************************************************************
.
PACC0000  DISPLAY   *P12:24,*EL,"pataccaf:";
          MOVE      SP9,KEY9
PACC0200  CALL      RSPTACC1                     * position at start of file
PACC0500  CALL      RKPTACC1                     * read next record
          BRANCH    OVRCD,PACC9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTASCLAM,PTASATYP,PTASHDAY
          PACK      SAVKEY9,PTASCLAM,PTASATYP,PTASHDAY
          PACK      SAVCOD01,PTASCLAM,SP8        * save current code
          PACK      SAVCOD02,PTASATYP,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTASCLAM
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PTASCLAM,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PACC1000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTASATYP
.
PACC1000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,PTASATYP,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PACC9000                * no 
.
          MOVE      NEWCODE,SAVCOD02             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PACC9000  BRANCH    UPDTFLAG,PACC0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PACC9200            * key fields changed
.
.         Just need to update the current record
.
PACC9100  MOVE      SAVCOD01,PTASCLAM
          MOVE      SAVCOD02,PTASATYP
          CALL      UPPTACC1                     * update record
          GOTO      PACC9500
.
.         The key has changed, so check if the new key already exists
.         
PACC9200  MOVE      SAVCOD01,PTASCLAM
          MOVE      SAVCOD02,PTASATYP
          PACK      KEY9,PTASCLAM,PTASATYP,PTASHDAY
          CALL      RDPTACC1                     * new record already on file ?
          IF        OVRCD = 1                         
            MOVE      SAVKEY9,KEY9               * no
            CALL      RDPTACC1                   * re-read original record
            BRANCH    OVRCD,PACC9500             * shouldn't happen
            GOTO      PACC9100
          ELSE
            MOVE      SAVKEY9,KEY9               * delete record
            CALL      DEPTACC1
          ENDIF
.
PACC9500  MOVE      SAVKEY9,KEY9
          GOTO      PACC0200                     * get next record
.
PACC9999  RETURN
+
.*****************************************************************************
.*                              PAFE0000              Called by: PROC0000    *
.*       Loop through patafeaf and fix any relevant coded fields             *
.*****************************************************************************
.
PAFE0000  DISPLAY   *P12:24,*EL,"patafeaf:";
          MOVE      SP70,KEY34
PAFE0200  CALL      RSPTAFE1                     * position at start of file
PAFE0500  CALL      RKPTAFE1                     * read next record
          BRANCH    OVRCD,PAFE9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTFECNID,PTFECLMN,PTFEHFND,PTFETABT:
                             PTFECASM,PTFEBTYP,PTFEEDAY
          PACK      SAVKEY34,PTFECNID,PTFECLMN,PTFEHFND,PTFETABT,PTFECASM:
                             PTFEBTYP,PTFEEDAY
          PACK      SAVCOD01,PTFECLMN,SP8        * save current code
          PACK      SAVCOD02,PTFEHFND,SP8        * save current code
          PACK      SAVCOD03,PTFETABT,SP8        * save current code
          PACK      SAVCOD04,PTFEBTYP,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTFECLMN
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PTFECLMN,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PAFE1000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTFEHFND
.
PAFE1000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PTFEHFND,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PAFE2000                * no 
.
          MOVE      NEWCODE,SAVCOD02             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTFETABT
.
PAFE2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSH,ANST,SP10      * set to Category HT
          PACK      CODEDFLD,PTFETABT,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PAFE3000                * no 
.
          MOVE      NEWCODE,SAVCOD03             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTFEBTYP
.
PAFE3000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSB,ANST,SP10      * set to Category BT
          PACK      CODEDFLD,PTFEBTYP,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PAFE9000                * no 
.
          MOVE      NEWCODE,SAVCOD04             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PAFE9000  BRANCH    UPDTFLAG,PAFE0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PAFE9200            * key fields changed
.
.         Just need to update the current record
.
PAFE9100  MOVE      SAVCOD01,PTFECLMN          
          MOVE      SAVCOD02,PTFEHFND          
          MOVE      SAVCOD03,PTFETABT          
          MOVE      SAVCOD04,PTFEBTYP          
          CALL      UPPTAFE1                     * update record
          GOTO      PAFE9500
.
.         The key has changed, so check if the new key already exists
.         
PAFE9200  MOVE      SAVCOD01,PTFECLMN          
          MOVE      SAVCOD02,PTFEHFND          
          MOVE      SAVCOD03,PTFETABT          
          MOVE      SAVCOD04,PTFEBTYP          
          PACK      KEY34,PTFECNID,PTFECLMN,PTFEHFND,PTFETABT,PTFECASM,PTFEBTYP,PTFEEDAY
          CALL      RDPTAFE1                     * new record already on file ?
          IF        OVRCD = 1                         
            MOVE      SAVKEY34,KEY34             * no
            CALL      RDPTAFE1                   * re-read original record
            BRANCH    OVRCD,PAFE9500             * shouldn't happen
            GOTO      PAFE9100
          ELSE
            MOVE      SAVKEY34,KEY34             * delete record
            CALL      DEPTAFE1
          ENDIF
.
PAFE9500  MOVE      SAVKEY34,KEY34
          GOTO      PAFE0200                     * get next record
.
PAFE9999  RETURN
+
.*****************************************************************************
.*                              PALN0000              Called by: PROC0000    *
.*       Loop through pmsalnaf and fix any relevant coded fields             *
.*****************************************************************************
.
PALN0000  DISPLAY   *P12:24,*EL,"pmsalnaf:";
          MOVE      SP20,KEY19
PALN0200  CALL      RSPMALN1                     * position at start of file
PALN0500  CALL      RKPMALN1                     * read next record
          BRANCH    OVRCD,PALN9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PMANURNO,PMANACAT,PMANACOD,PMANLNNO
          PACK      SAVKEY19,PMANURNO,PMANACAT,PMANACOD,PMANCNTR,PMANLNNO
          PACK      SAVCOD01,PMANACOD,SP8        * save current code
          MOVE      PMANACAT,SAVCAT01            * save current cat
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PMANACOD
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,PMANACAT,SP10       * set to Category H?
          PACK      CODEDFLD,PMANACOD,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PALN9000                * no
.
          MATCH     SP2,NEWCATG
          IF        !@EQUAL
            MOVE      NEWCATG,SAVCAT01           * yes - load new cat/code
          ENDIF
          MOVE      NEWCODE,SAVCOD01
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PALN9000  BRANCH    UPDTFLAG,PALN0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PALN9200            * key fields changed
.
.         Just need to update the current record
.
PALN9100  MOVE      SAVCAT01,PMANACAT
          MOVE      SAVCOD01,PMANACOD
          CALL      UPPMALN1                     * update record
          GOTO      PALN9500
.
.         The key has changed, so check if the new key already exists
.
PALN9200  MOVE      SAVCAT01,PMANACAT
          MOVE      SAVCOD01,PMANACOD
          PACK      KEY19,PMANURNO,PMANACAT,PMANACOD,PMANCNTR,PMANLNNO
          CALL      RDPMALN1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY19,KEY19             * no
            CALL      RDPMALN1                   * re-read original record
            BRANCH    OVRCD,PALN9500             * shouldn't happen
            GOTO      PALN9100
          ELSE
            MOVE      SAVKEY19,KEY19             * delete record
            CALL      DEPMALN1
          ENDIF
.
PALN9500  MOVE      SAVKEY19,KEY19
          GOTO      PALN0200                     * get next record
.
PALN9999  RETURN
+
.*****************************************************************************
.*                              PALR0000              Called by: PROC0000    *
.*       Loop through patalrtf and fix any relevant coded fields             *
.*****************************************************************************
.
PALR0000  DISPLAY   *P12:24,*EL,"patalrtf:";
          MOVE      SP20,KEY16
PALR0200  CALL      RSPTALR1                     * position at start of file
PALR0500  CALL      RKPTALR1                     * read next record
          BRANCH    OVRCD,PALR9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTALURNO,PTALCATG,PTALCODE
          PACK      SAVKEY16,PTALURNO,PTALCATG,PTALCODE,PTALCNTR
          PACK      SAVCOD01,PTALCODE,SP8        * save current code
          MOVE      PTALCATG,SAVCAT01            * save current cat
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTALCODE
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,PTALCATG,SP10       * set to Category H?
          PACK      CODEDFLD,PTALCODE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PALR9000                * no 
.
          MATCH     SP2,NEWCATG
          IF        !@EQUAL
            MOVE      NEWCATG,SAVCAT01           * yes - load new cat/code
          ENDIF
          MOVE      NEWCODE,SAVCOD01
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PALR9000  BRANCH    UPDTFLAG,PALR0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PALR9200            * key fields changed
.
.         Just need to update the current record
.
PALR9100  MOVE      SAVCAT01,PTALCATG
          MOVE      SAVCOD01,PTALCODE
          CALL      UPPTALR1                     * update record
          GOTO      PALR9500
.
.         The key has changed, so check if the new key already exists
.         
PALR9200  MOVE      SAVCAT01,PTALCATG
          MOVE      SAVCOD01,PTALCODE
          PACK      KEY16,PTALURNO,PTALCATG,PTALCODE,PTALCNTR
          CALL      RDPTALR1                     * new record already on file ?
          IF        OVRCD = 1                         
            MOVE      SAVKEY16,KEY16             * no
            CALL      RDPTALR1                   * re-read original record
            BRANCH    OVRCD,PALR9500             * shouldn't happen
            GOTO      PALR9100
          ELSE
            MOVE      SAVKEY16,KEY16             * delete record
            CALL      DEPTALR1
          ENDIF
.
PALR9500  MOVE      SAVKEY16,KEY16
          GOTO      PALR0200                     * get next record
.
PALR9999  RETURN
+
.*****************************************************************************
.*                              PALT0000              Called by: PROC0000    *
.*       Loop through pataltaf and fix any relevant coded fields             *
.*****************************************************************************
.
PALT0000  DISPLAY   *P12:24,*EL,"pataltaf:";
          MOVE      SP20,KEY16
PALT0200  CALL      RSPTALT1                     * position at start of file
PALT0500  CALL      RKPTALT1                     * read next record
          BRANCH    OVRCD,PALT9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTALURNO,PTALCATG,PTALCODE
          PACK      SAVKEY16,PTALURNO,PTALCATG,PTALCODE,PTALCNTR
          PACK      SAVCOD01,PTALCODE,SP8        * save current code
          MOVE      PTALCATG,SAVCAT01            * save current cat
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTALCODE
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,PTALCATG,SP10       * set to Category H?
          PACK      CODEDFLD,PTALCODE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PALT9000                * no 
.
          MATCH     SP2,NEWCATG
          IF        !@EQUAL
            MOVE      NEWCATG,SAVCAT01           * yes - load new cat/code
          ENDIF
          MOVE      NEWCODE,SAVCOD01
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PALT9000  BRANCH    UPDTFLAG,PALT0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PALT9200            * key fields changed
.
.         Just need to update the current record
.
PALT9100  MOVE      SAVCAT01,PTALCATG
          MOVE      SAVCOD01,PTALCODE
          CALL      UPPTALT1                     * update record
          GOTO      PALT9500
.
.         The key has changed, so check if the new key already exists
.         
PALT9200  MOVE      SAVCAT01,PTALCATG
          MOVE      SAVCOD01,PTALCODE
          PACK      KEY16,PTALURNO,PTALCATG,PTALCODE,PTALCNTR
          CALL      RDPTALT1                     * new record already on file ?
          IF        OVRCD = 1                         
            MOVE      SAVKEY16,KEY16             * no
            CALL      RDPTALT1                   * re-read original record
            BRANCH    OVRCD,PALT9500             * shouldn't happen
            GOTO      PALT9100
          ELSE
            MOVE      SAVKEY16,KEY16             * delete record
            CALL      DEPTALT1
          ENDIF
.
PALT9500  MOVE      SAVKEY16,KEY16
          GOTO      PALT0200                     * get next record
.
PALT9999  RETURN
+
.*****************************************************************************
.*                              PASD0000              Called by: PROC0000    *
.*       Loop through patasdaf and fix any relevant coded fields             *
.*****************************************************************************
.
PASD0000  DISPLAY   *P12:24,*EL,"patasdaf:";
          MOVE      SP30,KEY30
PASD0200  CALL      RSPTASD1                     * position at start of file
PASD0500  CALL      RKPTASD1                     * read next record
          BRANCH    OVRCD,PASD9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTADCNID,PTADCLMN,PTADHFND,PTADTABT:
                             PTADCASM,PTADBTYP
          PACK      SAVKEY30,PTADCNID,PTADCLMN,PTADHFND,PTADTABT,PTADCASM:
                             PTADBTYP
          PACK      SAVCOD01,PTADCLMN,SP8        * save current code
          PACK      SAVCOD02,PTADHFND,SP8        * save current code
          PACK      SAVCOD03,PTADTABT,SP8        * save current code
          PACK      SAVCOD04,PTADBTYP,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTADCLMN
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PTADCLMN,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PASD1000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTADHFND
.
PASD1000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PTADHFND,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PASD2000                * no 
.
          MOVE      NEWCODE,SAVCOD02             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTADTABT
.
PASD2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSH,ANST,SP10      * set to Category HT
          PACK      CODEDFLD,PTADTABT,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PASD3000                * no 
.
          MOVE      NEWCODE,SAVCOD03             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTADBTYP
.
PASD3000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSB,ANST,SP10      * set to Category BT
          PACK      CODEDFLD,PTADBTYP,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PASD9000                * no 
.
          MOVE      NEWCODE,SAVCOD04             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PASD9000  BRANCH    UPDTFLAG,PASD0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PASD9200            * key fields changed
.
.         Just need to update the current record
.
PASD9100  MOVE      SAVCOD01,PTADCLMN
          MOVE      SAVCOD02,PTADHFND          
          MOVE      SAVCOD03,PTADTABT          
          MOVE      SAVCOD04,PTADBTYP          
          CALL      UPPTASD1                     * update record
          GOTO      PASD9500
.
.         The key has changed, so check if the new key already exists
.         
PASD9200  MOVE      SAVCOD01,PTADCLMN
          MOVE      SAVCOD02,PTADHFND          
          MOVE      SAVCOD03,PTADTABT          
          MOVE      SAVCOD04,PTADBTYP          
          PACK      KEY30,PTADCNID,PTADCLMN,PTADHFND,PTADTABT,PTADCASM,PTADBTYP
          CALL      RDPTASD1                     * new record already on file ?
          IF        OVRCD = 1                         
            MOVE      SAVKEY30,KEY30             * no
            CALL      RDPTASD1                   * re-read original record
            BRANCH    OVRCD,PASD9500             * shouldn't happen
            GOTO      PASD9100
          ELSE
            MOVE      SAVKEY30,KEY30             * delete record
            CALL      DEPTASD1
          ENDIF
.
PASD9500  MOVE      SAVKEY30,KEY30
          GOTO      PASD0200                     * get next record
.
PASD9999  RETURN
+
.*****************************************************************************
.*                              PBCH0000              Called by: PROC0000    *
.*       Loop through patbchaf and fix any relevant coded fields             *
.*****************************************************************************
.
PBCH0000  DISPLAY   *P12:24,*EL,"patbchaf:";
          MOVE      SP20,KEY15
PBCH0200  CALL      RSPTBCH1                     * position at start of file
PBCH0500  CALL      RKPTBCH1                     * read next record
          BRANCH    OVRCD,PBCH9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTBCCLM,PTBCBRD,PTBCDEPT,PTBCENDD
          PACK      SAVKEY15,PTBCCLM,PTBCBRD,PTBCDEPT,PTBCENDD
          PACK      SAVCOD01,PTBCCLM,SP8         * save current code
          PACK      SAVCOD02,PTBCBRD,SP8         * save current code
          PACK      SAVCOD03,PTBCDEPT,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTBCCLM
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PTBCCLM,SP10        * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PBCH1000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTBCBRD
.
PBCH1000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PTBCBRD,SP10        * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PBCH2000                * no 
.
          MOVE      NEWCODE,SAVCOD02             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTBCDEPT
.
PBCH2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,PTBCDEPT,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PBCH9000                * no 
.
          MOVE      NEWCODE,SAVCOD03             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PBCH9000  BRANCH    UPDTFLAG,PBCH0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PBCH9200            * key fields changed
.
.         Just need to update the current record
.
PBCH9100  MOVE      SAVCOD01,PTBCCLM
          MOVE      SAVCOD02,PTBCBRD
          MOVE      SAVCOD03,PTBCDEPT
          CALL      UPPTBCH1                     * update record
          GOTO      PBCH9500
.
.         The key has changed, so check if the new key already exists
.
PBCH9200  MOVE      SAVCOD01,PTBCCLM
          MOVE      SAVCOD02,PTBCBRD
          MOVE      SAVCOD03,PTBCDEPT
          PACK      KEY15,PTBCCLM,PTBCBRD,PTBCDEPT,PTBCENDD
          CALL      RDPTBCH1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY15,KEY15             * no
            CALL      RDPTBCH1                   * re-read original record
            BRANCH    OVRCD,PBCH9500             * shouldn't happen
            GOTO      PBCH9100
          ELSE
            MOVE      SAVKEY15,KEY15             * delete record
            CALL      DEPTBCH1
          ENDIF
.
PBCH9500  MOVE      SAVKEY15,KEY15
          GOTO      PBCH0200                     * get next record
.
PBCH9999  RETURN
+
.*****************************************************************************
.*                              PBFE0000              Called by: PROC0000    *
.*       Loop through patbfeef and fix any relevant coded fields             *
.*****************************************************************************
.
PBFE0000  DISPLAY   *P12:24,*EL,"patbfeef:";
          MOVE      SP30,KEY27
PBFE0200  CALL      RDSBFEE1                     * position at start of file
PBFE0500  CALL      RDKBFEE1                     * read next record
          BRANCH    OVRCD,PBFE9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,BFCLM,BFHFUND,BFHFTAB,BFATYPE,BFBTYPE:
                             BFENDDY,PTBFCNID
.
          PACK      SAVKEY27,BFCLM,BFHFUND,PTBFHTYP,BFATYPE,BFBTYPE:
                             BFENDDY,PTBFCNID
          PACK      SAVCOD01,BFCLM,SP8           * save current code
          PACK      SAVCOD02,PTBFHTYP,SP8        * save current code
          PACK      SAVCOD03,BFHFUND,SP8         * save current code
          PACK      SAVCOD04,BFATYPE,SP8         * save current code
          PACK      SAVCOD05,BFBTYPE,SP8         * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check BFCLM
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,BFCLM,SP10          * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PBFE1000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTBFHTYP
.
PBFE1000  MOVE      THREE,CODETYPE               * set for health fund table
          PACK      CATEGORY,BFHFUND,SP10        * set health fund
.
          PACK      CODEDFLD,PTBFHTYP,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PBFE2000                * no 
.
          MOVE      NEWCODE,SAVCOD02             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check BFHFUND
.
PBFE2000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,BFHFUND,SP10        * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PBFE3000                * no 
.
          MOVE      NEWCODE,SAVCOD03             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check BFATYPE
.
PBFE3000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,BFATYPE,SP10        * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PBFE4000                * no 
.
          MOVE      NEWCODE,SAVCOD04             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check BFBTYPE
.
PBFE4000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSB,ANST,SP10      * set to Category BT
          PACK      CODEDFLD,BFBTYPE,SP10        * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PBFE9000                * no 
.
          MOVE      NEWCODE,SAVCOD05            * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PBFE9000  BRANCH    UPDTFLAG,PBFE0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PBFE9200            * key fields changed
.
.         Just need to update the current record
.
PBFE9100  MOVE      SAVCOD01,BFCLM           
          MOVE      SAVCOD02,PTBFHTYP           
          MOVE      SAVCOD03,BFHFUND          
          MOVE      SAVCOD04,BFATYPE          
          MOVE      SAVCOD05,BFBTYPE          
          CALL      UPBFEE1                      * update record
          GOTO      PBFE9500
.
.         The key has changed, so check if the new key already exists
.
PBFE9200  MOVE      SAVCOD01,BFCLM           
          MOVE      SAVCOD02,PTBFHTYP           
          MOVE      SAVCOD03,BFHFUND          
          MOVE      SAVCOD04,BFATYPE          
          MOVE      SAVCOD05,BFBTYPE          
.
          PACK      KEY27,BFCLM,BFHFUND,PTBFHTYP,BFATYPE,BFBTYPE:
                          BFENDDY,PTBFCNID
          CALL      RDBFEE1                      * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY27,KEY27             * no
            CALL      RDBFEE1                    * re-read original record
            BRANCH    OVRCD,PBFE9500             * shouldn't happen
            GOTO      PBFE9100
          ELSE
            MOVE      SAVKEY27,KEY27             * delete record
            CALL      DEBFEE1 
          ENDIF
.
PBFE9500  MOVE      SAVKEY27,KEY27
          GOTO      PBFE0200                     * get next record
.
PBFE9999  RETURN
+
.*****************************************************************************
.*                              PC1S0000              Called by: PROC0000    *
.*       Loop through patc1sad and fix any relevant coded fields             *
.*****************************************************************************
.
PC1S0000  DISPLAY   *P12:24,*EL,"patc1sad:";
          MOVE      SP20,KEY16
PC1S0200  CALL      RSPTC1S1                     * position at start of file
PC1S0500  CALL      RKPTC1S1                     * read next record
          BRANCH    OVRCD,PC1S9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTC1DATE,PTC1TYPE,PTC1DOCT,PTC1TYPP
          PACK      SAVKEY16,PTC1DATE,PTC1TYPE,PTC1DOCT,PTC1TYPP
          PACK      SAVCOD01,PTC1TYPE,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTC1TYPE
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSD,ANST,SP10      * set to Category DT
          PACK      CODEDFLD,PTC1TYPE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PC1S9000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PC1S9000  BRANCH    UPDTFLAG,PC1S0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PC1S9200            * key fields changed
.
.         Just need to update the current record
.
PC1S9100  MOVE      SAVCOD01,PTC1TYPE        
          CALL      UPPTC1S1                     * update record
          GOTO      PC1S9500
.
.         The key has changed, so check if the new key already exists
.
PC1S9200  MOVE      SAVCOD01,PTC1TYPE        
          PACK      KEY16,PTC1DATE,PTC1TYPE,PTC1DOCT,PTC1TYPP
          CALL      RDPTC1S1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY16,KEY16             * no 
            CALL      RDPTC1S1                   * re-read original record   
            BRANCH    OVRCD,PC1S9500             * shouldn't happen
            GOTO      PC1S9100
          ELSE
            MOVE      SAVKEY16,KEY16             * delete record
            CALL      DEPTC1S1
          ENDIF
.
PC1S9500  MOVE      SAVKEY16,KEY16
          GOTO      PC1S0200                     * get next record
.
PC1S9999  RETURN
+
.*****************************************************************************
.*                              PCER0000              Called by: PROC0000    *
.*       Loop through patceraf and fix any relevant coded fields             *
.*****************************************************************************
.
PCER0000  DISPLAY   *P12:24,*EL,"patceraf:";
          MOVE      SP20,KEY19
PCER0200  CALL      RSPTCER1                     * position at start of file
PCER0500  CALL      RKPTCER1                     * read next record
          BRANCH    OVRCD,PCER9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTCEURNO,PTCETYPE,PTCEFDAT
          PACK      SAVKEY19,PTCEURNO,PTCETYPE,PTCEFDAT
          PACK      SAVCOD01,PTCETYPE,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTCETYPE
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,CATCR,SP10          * set to Category cr
          PACK      CODEDFLD,PTCETYPE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PCER9000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PCER9000  BRANCH    UPDTFLAG,PCER0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PCER9200            * key fields changed
.
.         Just need to update the current record
.
PCER9100  MOVE      SAVCOD01,PTCETYPE          
          CALL      UPPTCER1                     * update record
          GOTO      PCER9500
.
.         The key has changed, so check if the new key already exists
.
PCER9200  MOVE      SAVCOD01,PTCETYPE          
          PACK      KEY19,PTCEURNO,PTCETYPE,PTCEFDAT
          CALL      RDPTCER1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY19,KEY19             * no
            CALL      RDPTCER1                   * re-read original record
            BRANCH    OVRCD,PCER9500             * shouldn't happen
            GOTO      PCER9100
          ELSE
            MOVE      SAVKEY19,KEY19             * delete record
            CALL      DEPTCER1
          ENDIF
.
PCER9500  MOVE      SAVKEY19,KEY19
          GOTO      PCER0200                     * get next record
.
PCER9999  RETURN
+
.*****************************************************************************
.*                              PCHC0000              Called by: PROC0000    *
.*       Loop through patchcof and fix any relevant coded fields             *
.*****************************************************************************
.
PCHC0000  DISPLAY   *P12:24,*EL,"patchcof:";
          MOVE      SP30,KEY24
          CALL      RDSCHCO1                     * position at start of file
PCHC0500  CALL      RDKCHCO1                     * read next record
          BRANCH    OVRCD,PCHC9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,CHADMN,CHDATE,CHTIME 
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check CHCODE
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSC,SP10      * set to Category CC
          PACK      CODEDFLD,CHCODE,SP10         * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PCHC9000                * no 
.
          MOVE      NEWCODE,CHCODE               * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PCHC9000  BRANCH    UPDTFLAG,PCHC0500            * no mappings
          CALL      UPCHCO1
          GOTO      PCHC0500                     * get next record
.
PCHC9999  RETURN
+
.*****************************************************************************
.*                              PCLC0000              Called by: PROC0000    *
.*       Loop through patclcaf and fix any relevant coded fields             *
.*****************************************************************************
.
PCLC0000  DISPLAY   *P12:24,*EL,"patclcaf:";
          MOVE      SP30,KEY22
PCLC0200  CALL      RSPTCLC1                     * position at start of file
PCLC0500  CALL      RKPTCLC1                     * read next record
          BRANCH    OVRCD,PCLC9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTCLURNO,PTCLTYPE,PTCLFDAT,PTCLLCNT
          PACK      SAVKEY22,PTCLURNO,PTCLTYPE,PTCLFDAT,PTCLLCNT
          PACK      SAVCOD01,PTCLTYPE,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTCLTYPE
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,CATCR,SP10          * set to Category cr
          PACK      CODEDFLD,PTCLTYPE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PCLC9000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PCLC9000  BRANCH    UPDTFLAG,PCLC0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PCLC9200            * key fields changed
.
.         Just need to update the current record
.
PCLC9100  MOVE      SAVCOD01,PTCLTYPE
          CALL      UPPTCLC1                     * update record
          GOTO      PCLC9500
.
.         The key has changed, so check if the new key already exists
.
PCLC9200  MOVE      SAVCOD01,PTCLTYPE
          PACK      KEY22,PTCLURNO,PTCLTYPE,PTCLFDAT,PTCLLCNT
          CALL      RDPTCLC1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY22,KEY22             * no
            CALL      RDPTCLC1                   * re-read original record
            BRANCH    OVRCD,PCLC9500             * shouldn't happen
            GOTO      PCLC9100
          ELSE
            MOVE      SAVKEY22,KEY22             * delete record
            CALL      DEPTCLC1
          ENDIF
.
PCLC9500  MOVE      SAVKEY22,KEY22
          GOTO      PCLC0200                     * get next record
.
PCLC9999  RETURN
+
.*****************************************************************************
.*                              PCMX0000              Called by: PROC0000    *
.*       Loop through patcmxaf and fix any relevant coded fields             *
.*****************************************************************************
.
PCMX0000  DISPLAY   *P12:24,*EL,"patcmxaf:";
          MOVE      SP70,KEY24
PCMX0200  CALL      RSPTCMX1                     * position at start of file
PCMX0500  CALL      RKPTCMX1                     * read next record
          BRANCH    OVRCD,PCMX9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTCMCLMN,PTCMHFND,PTCMCASM:
                             PTCMCNID
          PACK      SAVKEY24,PTCMCLMN,PTCMHFND,PTCMCASM:
                             PTCMCNID
          PACK      SAVCOD01,PTCMCLMN,SP8        * save current code
          PACK      SAVCOD02,PTCMHFND,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTCMCLMN
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PTCMCLMN,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PCMX1000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTCMHFND
.
PCMX1000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PTCMHFND,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PCMX9000                * no 
.
          MOVE      NEWCODE,SAVCOD02             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PCMX9000  BRANCH    UPDTFLAG,PCMX0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PCMX9200            * key fields changed
.
.         Just need to update the current record
.
PCMX9100  MOVE      SAVCOD01,PTCMCLMN          
          MOVE      SAVCOD02,PTCMHFND          
          CALL      UPPTCMX1                     * update record
          GOTO      PCMX9500
.
.         The key has changed, so check if the new key already exists
.
PCMX9200  MOVE      SAVCOD01,PTCMCLMN          
          MOVE      SAVCOD02,PTCMHFND          
          PACK      KEY24,PTCMCLMN,PTCMHFND,PTCMCASM,PTCMCNID
          CALL      RDPTCMX1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY24,KEY24             * no
            CALL      RDPTCMX1                   * re-read original record
            BRANCH    OVRCD,PCMX9500             * shouldn't happen
            GOTO      PCMX9100
          ELSE
            MOVE      SAVKEY24,KEY24             * delete record
            CALL      DEPTCMX1
          ENDIF
.
PCMX9500  MOVE      SAVKEY24,KEY24
          GOTO      PCMX0200                     * get next record
.
PCMX9999  RETURN
+
.*****************************************************************************
.*                              PCOD0000              Called by: PROC0000    *
.*       Loop through patcodes and fix any relevant coded fields             *
.*****************************************************************************
.
PCOD0000  DISPLAY   *P12:24,*EL,"patcodes:";
          MOVE      ZERO,COUNTER                 * initialise counter
          MOVE      ONE,CODETYPE                 * set for category-code
.
PCOD0100  WHILE     COUNTER < 28
            ADD       ONE,COUNTER                * increment counter
            LOAD      CATEGORY,COUNTER,CATA,CATBT,CATCC,CATCL,CATCR,CATDD:
                      CATDT,CATDX,CATFI,CATHT,CATJ,CATP,CATS,CATH1,CATH2,CATH3:
                      CATH4,CATH5,CATH6,CATH7,CATH8,CATH9,CATLA,CATOC,CATR:
                      CATSP,CATST,CATVA
            PACK      CATEGORY,CATEGORY,SP5
.
            PACK      KEY5,CATEGORY,SP5
PCOD0200    CALL      RDSCODE1                   * position at start of cat.
PCOD0500    CALL      RDKCODE1                   * read next record
            IF        OVRCD = 0
              MATCH     TCODE,CATEGORY           * same category still ?
              IF        @EQUAL
                DISPLAY   *P22:24,*EL,*V2LON,TCODE,ACODE   * yes
                PACK      SAVKEY5,TCODE,ACODE
                MOVE      TCODE,SAVCAT01         * save current cat
                PACK      SAVCOD01,ACODE,SP8     * save current code
.
                PACK      CODEDFLD,ACODE,SP10    * load coded field
                CALL      CMAP0000               * mapping required ?
                BRANCH    EXIT,PCOD0500          * no - get next code
.
                MATCH     SP2,NEWCATG
                IF        !@EQUAL
                  MOVE      NEWCATG,SAVCAT01     * yes - load new cat
                ENDIF
                MOVE      NEWCODE,SAVCOD01       * load new code
                MOVE      ONE,KEYFIELD           * set key field flag
.
.               Need to update this record, so first see if any of the fields
.               to be updated were part of the key.
.
                BRANCH    KEYFIELD,PCOD9200            * key fields changed
.
.               Just need to update the current record
.
PCOD9100        MOVE      SAVCAT01,TCODE
                MOVE      SAVCOD01,ACODE
                CALL      UPCODE1                * update record
                GOTO      PCOD9500
.
.               The key has changed, so check if the new key already exists
.
PCOD9200        MOVE      SAVCAT01,TCODE
                MOVE      SAVCOD01,ACODE
                PACK      KEY5,TCODE,ACODE
                CALL      RDCODE1                * new record already on file ?
                IF        OVRCD = 1
                  MOVE      SAVKEY5,KEY5         * no
                  CALL      RDCODE1              * re-read original record
                  BRANCH    OVRCD,PCOD9500       * shouldn't happen
                  GOTO      PCOD9100
                ELSE
                  MOVE      SAVKEY5,KEY5         * delete record
                  CALL      DECODE1 
                ENDIF
.
PCOD9500        MOVE      SAVKEY5,KEY5
                GOTO      PCOD0200               * get next code
              ENDIF
            ENDIF
          DO
.
PCOD9999  RETURN
+
.*****************************************************************************
.*                              PCMT0000              Called by: PROC0000    *
.*       Loop through pmscmtaf and fix any relevant coded fields             *
.*****************************************************************************
.
PCMT0000  DISPLAY   *P12:24,*EL,"pmscmtaf:";
          MOVE      SP30,KEY34
PCMT0200  CALL      RSPMCMT1                     * position at start of file
PCMT0500  CALL      RKPMCMT1                     * read next record
          BRANCH    OVRCD,PCMT9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PMCCCCOD,PMCCCONT,PMCCHFUN,PMCCHFTY:
                                       PMCCTYPE,PMCCCMCD,PMCCCNTR
          PACK      SAVKEY34,PMCCCCOD,PMCCCONT,PMCCHFUN,PMCCHFTY,PMCCTYPE:
                             PMCCCMCD,PMCCCNTR
          PACK      SAVCOD01,PMCCCCOD,SP8        * save current code
          PACK      SAVCOD02,PMCCHFUN,SP8        * save current code
          PACK      SAVCOD03,PMCCHFTY,SP8        * save current code
          PACK      SAVCOD04,PMCCATYP,SP8        * save current code
          PACK      SAVCOD05,PMCCATY2,SP8        * save current code
          PACK      SAVCOD06,PMCCATY3,SP8        * save current code
          PACK      SAVCOD07,PMCCATY4,SP8        * save current code
          PACK      SAVCOD08,PMCCATY5,SP8        * save current code
          PACK      SAVCOD09,PMCCDDES,SP8        * save current code
          PACK      SAVCOD10,PMCCDDE2,SP8        * save current code
          PACK      SAVCOD11,PMCCDDE3,SP8        * save current code
          PACK      SAVCOD12,PMCCDDE4,SP8        * save current code
          PACK      SAVCOD13,PMCCDDE5,SP8        * save current code
          PACK      SAVCOD14,PMCCASRC,SP8        * save current code
          PACK      SAVCOD15,PMCCASR2,SP8        * save current code
          PACK      SAVCOD16,PMCCASR3,SP8        * save current code
          PACK      SAVCOD17,PMCCASR4,SP8        * save current code
          PACK      SAVCOD18,PMCCASR5,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PMCCCCOD
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PMCCCCOD,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PCMT1000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PMCCHFUN
.
PCMT1000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PMCCHFUN,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PCMT2000                * no 
.
          MOVE      NEWCODE,SAVCOD02             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PMCCHFTY
.
PCMT2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSH,ANST,SP10      * set to Category HT
          PACK      CODEDFLD,PMCCHFTY,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PCMT3000                * no 
.
          MOVE      NEWCODE,SAVCOD03             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PMCCATYP
.
PCMT3000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,PMCCATYP,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PCMT3100                * no 
.
          MOVE      NEWCODE,SAVCOD04             * yes - load new code
.
.         Check PMCCATY2
.
PCMT3100  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,PMCCATY2,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PCMT3200                * no 
.
          MOVE      NEWCODE,SAVCOD05             * yes - load new code
.
.         Check PMCCATY3
.
PCMT3200  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,PMCCATY3,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PCMT3300                * no 
.
          MOVE      NEWCODE,SAVCOD06             * yes - load new code
.
.         Check PMCCATY4
.
PCMT3300  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,PMCCATY4,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PCMT3400                * no 
.
          MOVE      NEWCODE,SAVCOD07             * yes - load new code
.
.         Check PMCCATY5
.
PCMT3400  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,PMCCATY5,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PCMT4000                * no 
.
          MOVE      NEWCODE,SAVCOD08             * yes - load new code
.
.         Check PMCCDDES
.
PCMT4000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSD,ANSD,SP10      * set to Category DD
          PACK      CODEDFLD,PMCCDDES,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PCMT4100                * no 
.
          MOVE      NEWCODE,SAVCOD09             * yes - load new code
.
.         Check PMCCDDE2
.
PCMT4100  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSD,ANSD,SP10      * set to Category DD
          PACK      CODEDFLD,PMCCDDE2,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PCMT4200                * no 
.
          MOVE      NEWCODE,SAVCOD10             * yes - load new code
.
.         Check PMCCDDE3
.
PCMT4200  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSD,ANSD,SP10      * set to Category DD
          PACK      CODEDFLD,PMCCDDE3,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PCMT4300                * no 
.
          MOVE      NEWCODE,SAVCOD11             * yes - load new code
.
.         Check PMCCDDE4
.
PCMT4300  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSD,ANSD,SP10      * set to Category DD
          PACK      CODEDFLD,PMCCDDE4,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PCMT4400                * no 
.
          MOVE      NEWCODE,SAVCOD12             * yes - load new code
.
.         Check PMCCDDE5
.
PCMT4400  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSD,ANSD,SP10      * set to Category DD
          PACK      CODEDFLD,PMCCDDE5,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PCMT5000                * no 
.
          MOVE      NEWCODE,SAVCOD13             * yes - load new code
.
.         Check PMCCASRC
.
PCMT5000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSS,SP10           * set to Category S
          PACK      CODEDFLD,PMCCASRC,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PCMT5100                * no 
.
          MOVE      NEWCODE,SAVCOD14             * yes - load new code
.
.         Check PMCCASR2
.
PCMT5100  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSS,SP10           * set to Category S
          PACK      CODEDFLD,PMCCASR2,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PCMT5200                * no 
.
          MOVE      NEWCODE,SAVCOD15             * yes - load new code
.
.         Check PMCCASR3
.
PCMT5200  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSS,SP10           * set to Category S
          PACK      CODEDFLD,PMCCASR3,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PCMT5300                * no 
.
          MOVE      NEWCODE,SAVCOD16             * yes - load new code
.
.         Check PMCCASR4
.
PCMT5300  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSS,SP10           * set to Category S
          PACK      CODEDFLD,PMCCASR4,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PCMT5400                * no 
.
          MOVE      NEWCODE,SAVCOD17             * yes - load new code
.
.         Check PMCCASR5
.
PCMT5400  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSS,SP10           * set to Category S
          PACK      CODEDFLD,PMCCASR5,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PCMT9000                * no 
.
          MOVE      NEWCODE,SAVCOD18             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PCMT9000  BRANCH    UPDTFLAG,PCMT0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PCMT9200            * key fields changed
.
.         Just need to update the current record
.
PCMT9100  MOVE      SAVCOD01,PMCCCCOD
          MOVE      SAVCOD02,PMCCHFUN
          MOVE      SAVCOD03,PMCCHFTY
          MOVE      SAVCOD04,PMCCATYP
          MOVE      SAVCOD05,PMCCATY2
          MOVE      SAVCOD06,PMCCATY3
          MOVE      SAVCOD07,PMCCATY4
          MOVE      SAVCOD08,PMCCATY5
          MOVE      SAVCOD09,PMCCDDES
          MOVE      SAVCOD10,PMCCDDE2
          MOVE      SAVCOD11,PMCCDDE3
          MOVE      SAVCOD12,PMCCDDE4
          MOVE      SAVCOD13,PMCCDDE5
          MOVE      SAVCOD14,PMCCASRC
          MOVE      SAVCOD15,PMCCASR2
          MOVE      SAVCOD16,PMCCASR3
          MOVE      SAVCOD17,PMCCASR4
          MOVE      SAVCOD18,PMCCASR5
          CALL      UPPMCMT1                     * update record
          GOTO      PCMT9500
.
.         The key has changed, so check if the new key already exists
.
PCMT9200  MOVE      SAVCOD01,PMCCCCOD
          MOVE      SAVCOD02,PMCCHFUN
          MOVE      SAVCOD03,PMCCHFTY
          PACK      KEY34,PMCCCCOD,PMCCCONT,PMCCHFUN,PMCCHFTY,PMCCTYPE,PMCCCMCD:
                          PMCCCNTR
          CALL      RDPMCMT1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY34,KEY34             * no
            CALL      RDPMCMT1                   * re-read original record
            BRANCH    OVRCD,PCMT9500             * shouldn't happen
            GOTO      PCMT9100
          ELSE
            MOVE      SAVKEY34,KEY34             * delete record
            CALL      DEPMCMT1
          ENDIF
.
PCMT9500  MOVE      SAVKEY34,KEY34
          GOTO      PCMT0200                     * get next record
.
PCMT9999  RETURN
+
.*****************************************************************************
.*                              PCTF0000              Called by: PROC0000    *
.*       Loop through patctfaf and fix any relevant coded fields             *
.*****************************************************************************
.
PCTF0000  DISPLAY   *P12:24,*EL,"patctfaf:";
          MOVE      SP70,KEY33
PCTF0200  CALL      RSPTCTF1                     * position at start of file
PCTF0500  CALL      RKPTCTF1                     * read next record
          BRANCH    OVRCD,PCTF9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTCTCNID,PTCTCLMN,PTCTHFND,PTCTTABT:
                             PTCTCASM,PTCTMBSB,PTCTDCAS,PTCTITMS
          PACK      SAVKEY33,PTCTCNID,PTCTCLMN,PTCTHFND,PTCTTABT,PTCTCASM:
                             PTCTMBSB,PTCTDCAS,PTCTITMS
          PACK      SAVCOD01,PTCTCLMN,SP8        * save current code
          PACK      SAVCOD02,PTCTHFND,SP8        * save current code
          PACK      SAVCOD03,PTCTTABT,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTCTCLMN
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PTCTCLMN,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PCTF1000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTCTHFND
.
PCTF1000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PTCTHFND,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PCTF2000                * no 
.
          MOVE      NEWCODE,SAVCOD02             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTCTTABT
.
PCTF2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSH,ANST,SP10      * set to Category HT
          PACK      CODEDFLD,PTCTTABT,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PCTF9000                * no 
.
          MOVE      NEWCODE,SAVCOD03             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PCTF9000  BRANCH    UPDTFLAG,PCTF0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PCTF9200            * key fields changed
.
.         Just need to update the current record
.
PCTF9100  MOVE      SAVCOD01,PTCTCLMN
          MOVE      SAVCOD02,PTCTHFND
          MOVE      SAVCOD03,PTCTTABT
          CALL      UPPTCTF1                     * update record
          GOTO      PCTF9500
.
.         The key has changed, so check if the new key already exists
.
PCTF9200  MOVE      SAVCOD01,PTCTCLMN
          MOVE      SAVCOD02,PTCTHFND
          MOVE      SAVCOD03,PTCTTABT
          PACK      KEY33,PTCTCNID,PTCTCLMN,PTCTHFND,PTCTTABT,PTCTCASM,PTCTMBSB:
                          PTCTDCAS,PTCTITMS   
          CALL      RDPTCTF1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY33,KEY33             * no
            CALL      RDPTCTF1                   * re-read original record
            BRANCH    OVRCD,PCTF9500             * shouldn't happen
            GOTO      PCTF9100
          ELSE
            MOVE      SAVKEY33,KEY33             * delete record
            CALL      DEPTCTF1
          ENDIF
.
PCTF9500  MOVE      SAVKEY33,KEY33
          GOTO      PCTF0200                     * get next record
.
PCTF9999  RETURN
+
.*****************************************************************************
.*                              PDEP0000              Called by: PROC0000    *
.*       Loop through patdepaf and fix any relevant coded fields             *
.*****************************************************************************
.
PDEP0000  DISPLAY   *P12:24,*EL,"patdepaf:";
          MOVE      SP20,KEY14
PDEP0200  CALL      RSPTDEP1                     * position at start of file
PDEP0500  CALL      RKPTDEP1                     * read next record
          BRANCH    OVRCD,PDEP9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTDPDEPT,PTDPWARD,PTDPDATE
          PACK      SAVKEY14,PTDPDEPT,PTDPWARD,PTDPDATE
          PACK      SAVCOD01,PTDPDEPT,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTDPDEPT
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,PTDPDEPT,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PDEP9000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PDEP9000  BRANCH    UPDTFLAG,PDEP0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PDEP9200            * key fields changed
.
.         Just need to update the current record
.
PDEP9100  MOVE      SAVCOD01,PTDPDEPT          
          CALL      UPPTDEP1                     * update record
          GOTO      PDEP9500
.
.         The key has changed, so check if the new key already exists
.
PDEP9200  MOVE      SAVCOD01,PTDPDEPT          
          PACK      KEY14,PTDPDEPT,PTDPWARD,PTDPDATE
          CALL      RDPTDEP1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY14,KEY14             * no
            CALL      RDPTDEP1                   * re-read original record
            BRANCH    OVRCD,PDEP9500             * shouldn't happen
            GOTO      PDEP9100
          ELSE
            MOVE      SAVKEY14,KEY14             * delete record
            CALL      DEPTDEP1
          ENDIF
.
PDEP9500  MOVE      SAVKEY14,KEY14
          GOTO      PDEP0200                     * get next record
.
PDEP9999  RETURN
+
.*****************************************************************************
.*                              PDOC0000              Called by: PROC0000    *
.*       Loop through patdo1af and fix any relevant coded fields             *
.*****************************************************************************
.
PDOC0000  DISPLAY   *P12:24,*EL,"patdo1af:";
          MOVE      SP6,KEY6
          CALL      RDSDOCT1                     * position at start of file
PDOC0500  CALL      RDKDOCT1                     * read next record
          BRANCH    OVRCD,PDOC9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,DCODE
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check DRTYPE
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSD,ANST,SP10      * set to Category DT
          PACK      CODEDFLD,DRTYPE,SP10         * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PDOC1000                * no 
.
          MOVE      NEWCODE,DRTYPE               * yes - load new code
.
.         Check DRTYPE2
.
PDOC1000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSD,ANST,SP10      * set to Category DT
          PACK      CODEDFLD,DRTYPE2,SP10        * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PDOC2000                * no 
.
          MOVE      NEWCODE,DRTYPE2              * yes - load new code
.
.         Check DRTYPE3
.
PDOC2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSD,ANST,SP10      * set to Category DT
          PACK      CODEDFLD,DRTYPE3,SP10        * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PDOC3000                * no 
.
          MOVE      NEWCODE,DRTYPE3              * yes - load new code
.
.         Check DRTYPE4
.
PDOC3000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSD,ANST,SP10      * set to Category DT
          PACK      CODEDFLD,DRTYPE4,SP10        * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PDOC4000                * no 
.
          MOVE      NEWCODE,DRTYPE4              * yes - load new code
.
.         Check DRTYPE5
.
PDOC4000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSD,ANST,SP10      * set to Category DT
          PACK      CODEDFLD,DRTYPE5,SP10        * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PDOC9000                * no 
.
          MOVE      NEWCODE,DRTYPE5              * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PDOC9000  BRANCH    UPDTFLAG,PDOC0500            * no mappings
          CALL      UPDOCT1
          GOTO      PDOC0500                     * get next record
.
PDOC9999  RETURN
+
.*****************************************************************************
.*                              PDSC0000              Called by: PROC0000    *
.*       Loop through patdschf and fix any relevant coded fields             *
.*****************************************************************************
.
PDSC0000  DISPLAY   *P12:24,*EL,"patdschf:";
          MOVE      SP8,KEY8
          CALL      RDSDSCH1                     * position at start of file
PDSC0500  CALL      RDKDSCH1                     * read next record
          BRANCH    OVRCD,PDSC9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,DADMNO
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check DDEST
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSD,ANSD,SP10      * set to Category DD
          PACK      CODEDFLD,DDEST,SP10          * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PDSC9000                * no 
.
          MOVE      NEWCODE,DDEST                * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PDSC9000  BRANCH    UPDTFLAG,PDSC0500            * no mappings
          CALL      UPDSCH1
          GOTO      PDSC0500                     * get next record
.
PDSC9999  RETURN
+
.*****************************************************************************
.*                              PDTR0000              Called by: PROC0000    *
.*       Loop through patdtraf and fix any relevant coded fields             *
.*****************************************************************************
.
PDTR0000  DISPLAY   *P12:24,*EL,"patdtraf:";
          MOVE      SP30,KEY22
          CALL      RDSDTRN1                     * position at start of file
PDTR0500  CALL      RDKDTRN1                     * read next record
          BRANCH    OVRCD,PDTR9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,TADMNO,TTRANSN1,TREF
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check TADMTYP
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,TADMTYP,SP10        * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PDTR1000                * no 
.
          MOVE      NEWCODE,TADMTYP              * yes - load new code
.
.         Check PTDTBTYP
.
PDTR1000  COMPARE   ONE,TRECTYPE                 * accommodation record ?
          GOTO      PDTR2000 IF NOT EQUAL        * no
.
          MOVE      ONE,CODETYPE                 * yes - set for category-code
          PACK      CATEGORY,ANSB,ANST,SP10      * set to Category BT
          PACK      CODEDFLD,PTDTBTYP,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PDTR2000                * no 
.
          MOVE      NEWCODE,PTDTBTYP             * yes - load new code
.
.         Check TCLMTYP
.
PDTR2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,TCLMTYP,SP10        * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PDTR3000                * no 
.
          MOVE      NEWCODE,TCLMTYP              * yes - load new code
.
.         Check TMISGRP (theatre or misc. charges only)
.
PDTR3000  IF        TRECTYPE =2 | TRECTYPE = 3
            MOVE      ONE,CODETYPE                 * set for category-code
            PACK      CATEGORY,ANSF,ANSI,SP10      * set to Category FI
            PACK      CODEDFLD,TMISGRP,SP10        * load coded field
            CALL      CMAP0000                     * mapping required ?
            BRANCH    EXIT,PDTR4000                * no 
.
            MOVE      NEWCODE,TMISGRP              * yes - load new code
          ENDIF
.
.         Check TDCODE
.
PDTR4000  COMPARE   FIVE,TRECTYPE                * cash record ?
          GOTO      PDTR5000 IF NOT EQUAL        * no
.
          MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,TDCODE,SP10         * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PDTR5000                * no 
.
          MOVE      NEWCODE,TDCODE               * yes - load new code
.
.         Check TTYPE
.
PDTR5000  COMPARE   SIX,TRECTYPE                 * journal record ?
          GOTO      PDTR9000 IF NOT EQUAL        * no
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSJ,SP10           * set to Category J
          PACK      CODEDFLD,TTYPE,SP10          * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PDTR9000                * no 
.
          MOVE      NEWCODE,TTYPE                * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PDTR9000  BRANCH    UPDTFLAG,PDTR0500            * no mappings
          CALL      UPDTRN1
          GOTO      PDTR0500                     * get next record
.
PDTR9999  RETURN
+
.*****************************************************************************
.*                              PDVA0000              Called by: PROC0000    *
.*       Loop through pmsdvaaf and fix any relevant coded fields             *
.*****************************************************************************
.
PDVA0000  DISPLAY   *P12:24,*EL,"pmsdvaaf:";
          MOVE      SP5,KEY5
PDVA0200  CALL      RSPMDVA1                     * position at start of file
PDVA0500  CALL      RKPMDVA1                     * read next record
          BRANCH    OVRCD,PDVA9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PMDVACAT,PMDVACOD
          PACK      SAVKEY5,PMDVACAT,PMDVACOD
          PACK      SAVCOD01,PMDVACOD,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PMDVACOD
.
          MOVE      ONE,CODETYPE                 * set for category-code
          MATCH     "A ",PMDVACAT                * Cat A code record ?
          IF        @EQUAL
            PACK      CATEGORY,ANSA,SP10         * yes - set to Category A
          ELSE
            PACK      CATEGORY,ANSB,ANST,SP10    * no - set to Category BT
          ENDIF
          PACK      CODEDFLD,PMDVACOD,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PDVA9000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PDVA9000  BRANCH    UPDTFLAG,PDVA0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PDVA9200            * key fields changed
.
.         Just need to update the current record
.
PDVA9100  MOVE      SAVCOD01,PMDVACOD
          CALL      UPPMDVA1                     * update record
          GOTO      PDVA9500
.
.         The key has changed, so check if the new key already exists
.         
PDVA9200  MOVE      SAVCOD01,PMDVACOD
          PACK      KEY5,PMDVACAT,PMDVACOD
          CALL      RDPMDVA1                     * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY5,KEY5               * no
            CALL      RDPMDVA1                   * re-read original record
            BRANCH    OVRCD,PDVA9500             * shouldn't happen 
            GOTO      PDVA9100
          ELSE
            MOVE      SAVKEY5,KEY5               * delete record
            CALL      DEPMDVA1
          ENDIF
.
PDVA9500  MOVE      SAVKEY5,KEY5
          GOTO      PDVA0200                     * get next record
.
PDVA9999  RETURN
+
.*****************************************************************************
.*                              PEBH0000              Called by: PROC0000    *
.*       Loop through patebhaf and fix any relevant coded fields             *
.*****************************************************************************
.
PEBH0000  DISPLAY   *P12:24,*EL,"patebhaf:";
          MOVE      SP8,KEY8
          CALL      RSPTEBH1                     * position at start of file
PEBH0500  CALL      RKPTEBH1                     * read next record
          BRANCH    OVRCD,PEBH9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTEHBTHN
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTEHHFGP
.
          MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PTEHHFGP,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PEBH9000                * no 
.
          MOVE      NEWCODE,PTEHHFGP             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PEBH9000  BRANCH    UPDTFLAG,PEBH0500            * no mappings
          CALL      UPPTEBH1
          GOTO      PEBH0500                     * get next record
.
PEBH9999  RETURN
+
.*****************************************************************************
.*                              PECA0000              Called by: PROC0000    *
.*       Loop through patecaaf and fix any relevant coded fields             *
.*****************************************************************************
.
PECA0000  DISPLAY   *P12:24,*EL,"patecaaf:";
          MOVE      SP10,KEY10
          CALL      RSPTECA1                     * position at start of file
PECA0500  CALL      RKPTECA1                     * read next record
          BRANCH    OVRCD,PECA9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTEAADMN,PTEAEPNO
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTEACLSS
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSP,SP10           * set to Category P
          PACK      CODEDFLD,PTEACLSS,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PECA9000                * no 
.
          MOVE      NEWCODE,PTEACLSS             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PECA9000  BRANCH    UPDTFLAG,PECA0500            * no mappings
          CALL      UPPTECA1
          GOTO      PECA0500                     * get next record
.
PECA9999  RETURN
+
.*****************************************************************************
.*                              PECH0000              Called by: PROC0000    *
.*       Loop through patechaf and fix any relevant coded fields             *
.*****************************************************************************
.
PECH0000  DISPLAY   *P12:24,*EL,"patechaf:";
          MOVE      SP20,KEY18
PECH0200  CALL      RSPTECH1                     * position at start of file
PECH0500  CALL      RKPTECH1                     * read next record
          BRANCH    OVRCD,PECH9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTECCTYP,PTECATYP,PTECMBSC,PTECUNIQ
          PACK      SAVKEY18,PTECCTYP,PTECATYP,PTECMBSC,PTECUNIQ
          PACK      SAVCOD01,PTECCTYP,SP8        * save current code
          PACK      SAVCOD02,PTECATYP,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTECCTYP
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PTECCTYP,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PECH1000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTECATYP
.
PECH1000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,PTECATYP,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PECH9000                * no 
.
          MOVE      NEWCODE,SAVCOD02             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PECH9000  BRANCH    UPDTFLAG,PECH0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PECH9200            * key fields changed
.
.         Just need to update the current record
.
PECH9100  MOVE      SAVCOD01,PTECCTYP
          MOVE      SAVCOD02,PTECATYP
          CALL      UPPTECH1                     * update record
          GOTO      PECH9500
.
.         The key has changed, so check if the new key already exists
.         
PECH9200  MOVE      SAVCOD01,PTECCTYP
          MOVE      SAVCOD02,PTECATYP
          PACK      KEY18,PTECCTYP,PTECATYP,PTECMBSC,PTECUNIQ
          CALL      RDPTECH1                     * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY18,KEY18             * no
            CALL      RDPTECH1                   * re-read original record
            BRANCH    OVRCD,PECH9500             * shouldn't happen 
            GOTO      PECH9100
          ELSE
            MOVE      SAVKEY18,KEY18             * delete record
            CALL      DEPTECH1
          ENDIF
.
PECH9500  MOVE      SAVKEY18,KEY18
          GOTO      PECH0200                     * get next record
.
PECH9999  RETURN
+
.*****************************************************************************
.*                              PECO0000              Called by: PROC0000    *
.*       Loop through pmsecoaf and fix any relevant coded fields             *
.*****************************************************************************
.
PECO0000  DISPLAY   *P12:24,*EL,"pmsecoaf:";
          MOVE      SP20,KEY31
PECO0200  CALL      RSPMECO1                     * position at start of file
PECO0500  CALL      RKPMECO1                     * read next record
          BRANCH    OVRCD,PECO9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PMEOHFND,PMEODFLG,PMEOTRID
          PACK      SAVKEY31,PMEOHFND,PMEODFLG,PMEOTRID
          PACK      SAVCOD01,PMEOHFND,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PMEOHFND
.
          MATCH     "1",PMEOCTYP
          IF        @EQUAL
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSC,ANSL,SP10    * set to Category CL
          ELSE
            MOVE      TWO,CODETYPE               * set for health fund
            MOVE      SP10,CATEGORY
          ENDIF
          PACK      CODEDFLD,PMEOHFND,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PECO9000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PECO9000  BRANCH    UPDTFLAG,PECO0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PECO9200            * key fields changed
.
.         Just need to update the current record
.
PECO9100  MOVE      SAVCOD01,PMEOHFND
          CALL      UPPMECO1                     * update record
          GOTO      PECO9500
.
.         The key has changed, so check if the new key already exists
.         
PECO9200  MOVE      SAVCOD01,PMEOHFND
          PACK      KEY31,PMEOHFND,PMEODFLG,PMEOTRID
          CALL      RDPMECO1                     * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY31,KEY31             * no
            CALL      RDPMECO1                   * re-read original record
            BRANCH    OVRCD,PECO9500             * shouldn't happen 
            GOTO      PECO9100
          ELSE
            MOVE      SAVKEY31,KEY31             * delete record
            CALL      DEPMECO1
          ENDIF
.
PECO9500  MOVE      SAVKEY31,KEY31
          GOTO      PECO0200                     * get next record
.
PECO9999  RETURN
+
.*****************************************************************************
.*                              PECT0000              Called by: PROC0000    *
.*       Loop through pmsectaf and fix any relevant coded fields             *
.*****************************************************************************
.
PECT0000  DISPLAY   *P12:24,*EL,"pmsectaf:";
          MOVE      SP20,KEY16
PECT0200  CALL      RSPMECT2                     * position at start of file
PECT0500  CALL      RKPMECT2                     * read next record
          BRANCH    OVRCD,PECT9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PMECINVN,PMECBATN
          PACK      SAVKEY16,PMECINVN,PMECBATN
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PMECHFND
.
          IF        PMECEETP = 1
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSC,ANSL,SP10    * set to Category CL
          ELSE
            MOVE      TWO,CODETYPE               * set for health fund
            MOVE      SP10,CATEGORY
          ENDIF
          PACK      CODEDFLD,PMECHFND,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PECT9000                * no 
.
          MOVE      NEWCODE,PMECHFND             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PECT9000  BRANCH    UPDTFLAG,PECT0500            * no mappings
          CALL      UPPMECT2
.
          MOVE      SAVKEY16,KEY16
          GOTO      PECT0200                     * get next record
.
PECT9999  RETURN
+
.*****************************************************************************
.*                              PEDS0000              Called by: PROC0000    *
.*       Loop through patedsaf and fix any relevant coded fields             *
.*****************************************************************************
.
PEDS0000  DISPLAY   *P12:24,*EL,"patedsaf:";
          PACK      KEY32,SP30,SP10
PEDS0200  CALL      RSPTEDS1                     * position at start of file
PEDS0500  CALL      RKPTEDS1                     * read next record
          BRANCH    OVRCD,PEDS9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTESFLAG,PTESHFND,PTESADMN,PTESINVN:
                                       PTESBATN
          PACK      SAVKEY32,PTESFLAG,PTESHFND,PTESADMN,PTESINVN,PTESBATN
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTESHFND
.
          MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PTESHFND,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PEDS9000                * no 
.
          MOVE      NEWCODE,PTESHFND             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PEDS9000  BRANCH    UPDTFLAG,PEDS0500            * no mappings
          CALL      UPPTEDS1
.
          MOVE      SAVKEY32,KEY32
          GOTO      PEDS0200                     * get next record
.
PEDS9999  RETURN
+
.*****************************************************************************
.*                              PEVT0000              Called by: PROC0000    *
.*       Loop through pmsevtaf and fix any relevant coded fields             *
.*****************************************************************************
.
PEVT0000  DISPLAY   *P12:24,*EL,"pmsevtaf:";
          MOVE      SP8,KEY8
          CALL      RSPMEVT1                     * position at start of file
PEVT0500  CALL      RKPMEVT1                     * read next record
          BRANCH    OVRCD,PEVT9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PMEVVISN
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PMEVCCOD
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PMEVCCOD,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PEVT1000                * no 
.
          MOVE      NEWCODE,PMEVCCOD             * yes - load new code
.
.         Check PMEVADMT
.
PEVT1000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,PMEVADMT,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PEVT2000                * no 
.
          MOVE      NEWCODE,PMEVADMT             * yes - load new code
.
.         Check PMEVBTYP
.
PEVT2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSS,SP10           * set to Category S
          PACK      CODEDFLD,PMEVBTYP,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PEVT3000                * no 
.
          MOVE      NEWCODE,PMEVBTYP             * yes - load new code
.
.         Check PMEVDSTT
.
PEVT3000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSD,ANSD,SP10      * set to Category DD
          PACK      CODEDFLD,PMEVDSTT,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PEVT9000                * no 
.
          MOVE      NEWCODE,PMEVDSTT             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PEVT9000  BRANCH    UPDTFLAG,PEVT0500            * no mappings
          CALL      UPPMEVT1
          GOTO      PEVT0500                     * get next record
.
PEVT9999  RETURN
+
.*****************************************************************************
.*                              PFAC0000              Called by: PROC0000    *
.*       Loop through patfactf and fix any relevant coded fields             *
.*****************************************************************************
.
PFAC0000  DISPLAY   *P12:24,*EL,"patfactf:";
          MOVE      SP20,KEY19
          CALL      RDSFACT1                     * position at start of file
PFAC0500  CALL      RDKFACT1                     * read next record
          BRANCH    OVRCD,PFAC9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,FADATE,FADMNO,FACODE 
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTFCHFND
.
          MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PTFCHFND,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PFAC9000                * no 
.
          MOVE      NEWCODE,PTFCHFND             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PFAC9000  BRANCH    UPDTFLAG,PFAC0500            * no mappings
          CALL      UPFACT1
          GOTO      PFAC0500                     * get next record
.
PFAC9999  RETURN
+
.*****************************************************************************
.*                              PFCI0000              Called by: PROC0000    *
.*       Loop through pmsfciaf and fix any relevant coded fields             *
.*****************************************************************************
.
PFCI0000  DISPLAY   *P12:24,*EL,"pmsfciaf:";
          PACK      KEY32,SP30,SP10
          CALL      RSPMFCI1                     * position at start of file
PFCI0500  CALL      RKPMFCI1                     * read next record
          BRANCH    OVRCD,PFCI9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PMFCVISN,PMFCINVN,PMFCTRAN,PMFCSYST:
                             PMFCCRNO
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PMFCMGRP
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSF,ANSI,SP10      * set to Category FI
          PACK      CODEDFLD,PMFCMGRP,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PFCI1000                * no 
.
          MOVE      NEWCODE,PMFCMGRP             * yes - load new code
.
.         Check PMFCCTYP
.
PFCI1000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PMFCCTYP,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PFCI2000                * no 
.
          MOVE      NEWCODE,PMFCCTYP             * yes - load new code
.
.         Check PMFCATYP
.
PFCI2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,PMFCATYP,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PFCI9000                * no 
.
          MOVE      NEWCODE,PMFCATYP             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PFCI9000  BRANCH    UPDTFLAG,PFCI0500            * no mappings
          CALL      UPPMFCI1
          GOTO      PFCI0500                     * get next record
.
PFCI9999  RETURN
+
.*****************************************************************************
.*                              PFCM0000              Called by: PROC0000    *
.*       Loop through patfcmmf and fix any relevant coded fields             *
.*****************************************************************************
.
PFCM0000  DISPLAY   *P12:24,*EL,"patfcmmf:";
          MOVE      SP8,KEY8
PFCM0200  CALL      RDSFCMM1                     * position at start of file
PFCM0500  CALL      RDKFCMM1                     * read next record
          BRANCH    OVRCD,PFCM9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,FUNDCOD,FCOUNT
          PACK      SAVKEY8,FUNDCOD,FCOUNT
          PACK      SAVCOD01,FUNDCOD,SP8         * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check FUNDCOD
.
          MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,FUNDCOD,SP10        * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PFCM9000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PFCM9000  BRANCH    UPDTFLAG,PFCM0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PFCM9200            * key fields changed
.
.         Just need to update the current record
.
PFCM9100  MOVE      SAVCOD01,FUNDCOD          
          CALL      UPFCMM1                      * update record
          GOTO      PFCM9500
.
.         The key has changed, so check if the new key already exists
.
PFCM9200  MOVE      SAVCOD01,FUNDCOD          
          PACK      KEY8,FUNDCOD,FCOUNT
          CALL      RDFCMM1                      * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY8,KEY8               * no
            CALL      RDFCMM1                    * re-read original record
            BRANCH    OVRCD,PFCM9500             * shouldn't happen
            GOTO      PFCM9100
          ELSE      
            MOVE      SAVKEY8,KEY8               * delete record
            CALL      DEFCMM1 
          ENDIF
.
PFCM9500  MOVE      SAVKEY8,KEY8
          GOTO      PFCM0200                     * get next record
.
PFCM9999  RETURN
+
.*****************************************************************************
.*                              PFED0000              Called by: PROC0000    *
.*       Loop through pmsfedaf and fix any relevant coded fields             *
.*****************************************************************************
.
PFED0000  DISPLAY   *P12:24,*EL,"pmsfedaf:";
          MOVE      SP20,KEY12
          CALL      RSPMFED1                     * position at start of file
PFED0500  CALL      RKPMFED1                     * read next record
          BRANCH    OVRCD,PFED9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PMFDQUOT
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PMFDCLTY
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PMFDCLTY,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PFED1000                * no 
.
          MOVE      NEWCODE,PMFDCLTY             * yes - load new code
.
.         Check PMFDHFTB
.
PFED1000  MOVE      THREE,CODETYPE               * set for health fund table
          PACK      CATEGORY,PMFDHFUN,SP10       * set health fund
          PACK      CODEDFLD,PMFDHFTB,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PFED2000                * no
.
          MOVE      NEWCODE,PMFDHFTB             * yes - load new code
.
.         Check PMFDHFUN
.
PFED2000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PMFDHFUN,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PFED3000                * no 
.
          MOVE      NEWCODE,PMFDHFUN             * yes - load new code
.
.         Check PMFDBDTY
.
PFED3000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSB,ANST,SP10      * set to Category BT
          PACK      CODEDFLD,PMFDBDTY,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PFED4000                * no 
.
          MOVE      NEWCODE,PMFDBDTY             * yes - load new code
.
.         Check PMFDBDT2
.
PFED4000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSB,ANST,SP10      * set to Category BT
          PACK      CODEDFLD,PMFDBDT2,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PFED5000                * no 
.
          MOVE      NEWCODE,PMFDBDT2             * yes - load new code
.
.         Check PMFDBDT3
.
PFED5000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSB,ANST,SP10      * set to Category BT
          PACK      CODEDFLD,PMFDBDT3,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PFED6000                * no 
.
          MOVE      NEWCODE,PMFDBDT3             * yes - load new code
.
.         Check PMFDBDT4
.
PFED6000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSB,ANST,SP10      * set to Category BT
          PACK      CODEDFLD,PMFDBDT4,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PFED7000                * no 
.
          MOVE      NEWCODE,PMFDBDT4             * yes - load new code
.
.         Check PMFDBDT5
.
PFED7000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSB,ANST,SP10      * set to Category BT
          PACK      CODEDFLD,PMFDBDT5,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PFED9000                * no 
.
          MOVE      NEWCODE,PMFDBDT5             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PFED9000  BRANCH    UPDTFLAG,PFED0500            * no mappings
          CALL      UPPMFED1
          GOTO      PFED0500                     * get next record
.
PFED9999  RETURN
+
.*****************************************************************************
.*                              PFES0000              Called by: PROC0000    *
.*       Loop through pmsfesaf and fix any relevant coded fields             *
.*****************************************************************************
.
PFES0000  DISPLAY   *P12:24,*EL,"pmsfesaf:";
          MOVE      SP20,KEY17
          CALL      RSPMFES1                     * position at start of file
PFES0500  CALL      RKPMFES1                     * read next record
          BRANCH    OVRCD,PFES9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PMFSQUOT,PMFSUNIQ
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PMFSBTYP
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSB,ANST,SP10      * set to Category BT
          PACK      CODEDFLD,PMFSBTYP,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PFES9000                * no 
.
          MOVE      NEWCODE,PMFSBTYP             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PFES9000  BRANCH    UPDTFLAG,PFES0500            * no mappings
          CALL      UPPMFES1
          GOTO      PFES0500                     * get next record
.
PFES9999  RETURN
+
.*****************************************************************************
.*                              PFIN0000              Called by: PROC0000    *
.*       Loop through patfinsf and fix any relevant coded fields             *
.*****************************************************************************
.
PFIN0000  DISPLAY   *P12:24,*EL,"patfinsf:";
.
          MOVE      SP30,KEY28
PFIN0200  CALL      RDSFINS1                     * position at start of file
PFIN0500  CALL      RDKFINS1                     * read next record
          BRANCH    OVRCD,PFIN9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE:
                             FINHOSP
          PACK      SAVKEY28,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE,FINHOSP
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Convert the financial type to a number
.
          MOVE      ZERO,FORM1
          MOVE      FINTYPE,ANS
          REP       "A1B2C3D4E5F6G7",ANS
          MOVE      ANS,FORM1
          BRANCH    FORM1,PFIN1000:              * fees generated
                          PFIN2000:              * cash received
                          PFIN3000               * journals
          GOTO      PFIN0500
.
.         Processing a "Fees Generated" record.
.         First, convert the finance code first character to a number.
.
PFIN1000  MOVE      ZERO,FORM1
          MOVE      FINCODE,ANS
          REP       "A3C4D0G0H4I0J0M1N3P2Q1R0S0T2",ANS
          MOVE      ANS,FORM1
          BRANCH    FORM1,PFIN1100:              * misc. non-casemix
                          PFIN1200:              * misc. casemix
                          PFIN1300:              * accommodation for non-casemix
                          PFIN1400               * accommodation for casemix
          GOTO      PFIN0500
.
.         We have a Miscellaneous Non-Casemix value of "M" or "Q".
.         "M" is for misc. item charges, while "Q" is for credit notes against
.         misc. item charges.
.         If PTCNMFEE is set to "1", then FINCODE is made up of "M" or "Q"
.         + Claim Code (Cat CL) + Misc. Charge Group Code (Cat FI).
.         If PTCNMFEE is set to "0", then FINCODE is made up of "M" or "Q"
.         + Misc. Charge Group Code (Cat FI) + Misc. Item Code.
.
PFIN1100  IF        PTCNMFEE = 1
            UNPACK    FINCODE,PREFCHAR,CLAMCODE,GROUPCDE
.
            PACK      SAVCOD01,CLAMCODE,SP8      * save current code
            PACK      SAVCOD02,GROUPCDE,SP8      * save current code
            MOVE      FINPER,SAVFRM01            * save period totals
            MOVE      FINMTH1,SAVFRM02
            MOVE      FINMTH2,SAVFRM03
            MOVE      FINMTH3,SAVFRM04
            MOVE      FINMTH4,SAVFRM05
            MOVE      FINMTH5,SAVFRM06
            MOVE      FINMTH6,SAVFRM07
            MOVE      FINMTH7,SAVFRM08
            MOVE      FINMTH8,SAVFRM09
            MOVE      FINMTH9,SAVFRM10
            MOVE      FINMTH10,SAVFRM11
            MOVE      FINMTH11,SAVFRM12
            MOVE      FINMTH12,SAVFRM13
            MOVE      FINMTH13,SAVFRM14
            MOVE      FLSTYR,SAVFRM15
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSC,ANSL,SP10    * set to Category CL
            PACK      CODEDFLD,CLAMCODE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD01         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSF,ANSI,SP10    * set to Category FI
            PACK      CODEDFLD,GROUPCDE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD02         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            BRANCH    UPDTFLAG,PFIN0500          * no mappings
.
.           Need to update this record, so first see if any of the fields
.           to be updated were part of the key.
.
            BRANCH    KEYFIELD,PFIN1120          * key fields changed
.
.           Just need to update the current record
.
PFIN1110    MOVE      SAVCOD01,CLAMCODE
            MOVE      SAVCOD02,GROUPCDE
            PACK      FINCODE,PREFCHAR,CLAMCODE,GROUPCDE,SP20
            CALL      UPFINS1                    * update record
            GOTO      PFIN9500
.
.           The key has changed, so check if the new key already exists
.         
PFIN1120    MOVE      SAVCOD01,CLAMCODE
            MOVE      SAVCOD02,GROUPCDE
            PACK      FINCODE,PREFCHAR,CLAMCODE,GROUPCDE,SP20
            PACK      KEY28,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE,FINHOSP
            CALL      RDFINS1                    * new record already on file ?
            IF        OVRCD = 1                    
              MOVE      SAVKEY28,KEY28           * no
              CALL      RDFINS1                  * re-read original record
              BRANCH    OVRCD,PFIN9500           * shouldn't happen
              GOTO      PFIN1110
            ELSE
              ADD       SAVFRM01,FINPER  
              ADD       SAVFRM02,FINMTH1 
              ADD       SAVFRM03,FINMTH2 
              ADD       SAVFRM04,FINMTH3 
              ADD       SAVFRM05,FINMTH4 
              ADD       SAVFRM06,FINMTH5 
              ADD       SAVFRM07,FINMTH6 
              ADD       SAVFRM08,FINMTH7 
              ADD       SAVFRM09,FINMTH8 
              ADD       SAVFRM10,FINMTH9 
              ADD       SAVFRM11,FINMTH10
              ADD       SAVFRM12,FINMTH11
              ADD       SAVFRM13,FINMTH12
              ADD       SAVFRM14,FINMTH13
              ADD       SAVFRM15,FLSTYR
              CALL      UPFINS1                  * update record
.
              MOVE      SAVKEY28,KEY28           * delete record
              CALL      DEFINS1 
            ENDIF
          ELSE
            UNPACK    FINCODE,PREFCHAR,GROUPCDE,ITEMCODE
.
            PACK      SAVCOD01,GROUPCDE,SP8      * save current code
            MOVE      FINPER,SAVFRM01            * save period totals
            MOVE      FINMTH1,SAVFRM02
            MOVE      FINMTH2,SAVFRM03
            MOVE      FINMTH3,SAVFRM04
            MOVE      FINMTH4,SAVFRM05
            MOVE      FINMTH5,SAVFRM06
            MOVE      FINMTH6,SAVFRM07
            MOVE      FINMTH7,SAVFRM08
            MOVE      FINMTH8,SAVFRM09
            MOVE      FINMTH9,SAVFRM10
            MOVE      FINMTH10,SAVFRM11
            MOVE      FINMTH11,SAVFRM12
            MOVE      FINMTH12,SAVFRM13
            MOVE      FINMTH13,SAVFRM14
            MOVE      FLSTYR,SAVFRM15
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSF,ANSI,SP10    * set to Category FI
            PACK      CODEDFLD,GROUPCDE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD01         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            BRANCH    UPDTFLAG,PFIN0500          * no mappings
.
.           Need to update this record, so first see if any of the fields
.           to be updated were part of the key.
.
            BRANCH    KEYFIELD,PFIN1140          * key fields changed
.
.           Just need to update the current record
.
PFIN1130    MOVE      SAVCOD01,GROUPCDE
            PACK      FINCODE,PREFCHAR,GROUPCDE,ITEMCODE,SP20
            CALL      UPFINS1                    * update record
            GOTO      PFIN9500
.
.           The key has changed, so check if the new key already exists
.
PFIN1140    MOVE      SAVCOD01,GROUPCDE
            PACK      FINCODE,PREFCHAR,GROUPCDE,ITEMCODE,SP20
            PACK      KEY28,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE,FINHOSP
            CALL      RDFINS1                    * new record already on file ?
            IF        OVRCD = 1                    
              MOVE      SAVKEY28,KEY28           * no
              CALL      RDFINS1                  * re-read original record
              BRANCH    OVRCD,PFIN9500           * shouldn't happen
              GOTO      PFIN1130
            ELSE
              ADD       SAVFRM01,FINPER  
              ADD       SAVFRM02,FINMTH1 
              ADD       SAVFRM03,FINMTH2 
              ADD       SAVFRM04,FINMTH3 
              ADD       SAVFRM05,FINMTH4 
              ADD       SAVFRM06,FINMTH5 
              ADD       SAVFRM07,FINMTH6 
              ADD       SAVFRM08,FINMTH7 
              ADD       SAVFRM09,FINMTH8 
              ADD       SAVFRM10,FINMTH9 
              ADD       SAVFRM11,FINMTH10
              ADD       SAVFRM12,FINMTH11
              ADD       SAVFRM13,FINMTH12
              ADD       SAVFRM14,FINMTH13
              ADD       SAVFRM15,FLSTYR
              CALL      UPFINS1                  * update record
.
              MOVE      SAVKEY28,KEY28           * delete record
              CALL      DEFINS1 
            ENDIF
          ENDIF
          GOTO      PFIN9500
.
.         We have a Miscellaneous Casemix value of "T" or "P".
.         "T" is for misc. item charges, while "P" is for credit notes against
.         misc. item charges.
.         If PTCNMFEE is set to "1", then FINCODE is made up of "T" or "P"
.         + Episode Type (0 or 1) + Claim Code (Cat CL) + Misc. Charge Group
.         Code (Cat FI).
.         If PTCNMFEE is set to "0", then FINCODE is made up of "T" or "P"
.         + Episode Type (0 or 1) + Misc. Charge Group Code (Cat FI) + Misc.
.         Item Code.
.
PFIN1200  IF        PTCNMFEE = 1
            UNPACK    FINCODE,PREFCHAR,ANS,CLAMCODE,GROUPCDE
.
            PACK      SAVCOD01,CLAMCODE,SP8      * save current code
            PACK      SAVCOD02,GROUPCDE,SP8      * save current code
            MOVE      FINPER,SAVFRM01            * save period totals
            MOVE      FINMTH1,SAVFRM02
            MOVE      FINMTH2,SAVFRM03
            MOVE      FINMTH3,SAVFRM04
            MOVE      FINMTH4,SAVFRM05
            MOVE      FINMTH5,SAVFRM06
            MOVE      FINMTH6,SAVFRM07
            MOVE      FINMTH7,SAVFRM08
            MOVE      FINMTH8,SAVFRM09
            MOVE      FINMTH9,SAVFRM10
            MOVE      FINMTH10,SAVFRM11
            MOVE      FINMTH11,SAVFRM12
            MOVE      FINMTH12,SAVFRM13
            MOVE      FINMTH13,SAVFRM14
            MOVE      FLSTYR,SAVFRM15
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSC,ANSL,SP10    * set to Category CL
            PACK      CODEDFLD,CLAMCODE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD01         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSF,ANSI,SP10    * set to Category FI
            PACK      CODEDFLD,GROUPCDE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD02         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            BRANCH    UPDTFLAG,PFIN0500          * no mappings
.
.           Need to update this record, so first see if any of the fields
.           to be updated were part of the key.
.
            BRANCH    KEYFIELD,PFIN1220          * key fields changed
.
.           Just need to update the current record
.
PFIN1210    MOVE      SAVCOD01,CLAMCODE
            MOVE      SAVCOD02,GROUPCDE
            PACK      FINCODE,PREFCHAR,ANS,CLAMCODE,GROUPCDE,SP20
            CALL      UPFINS1                    * update record
            GOTO      PFIN9500
.
.           The key has changed, so check if the new key already exists
.         
PFIN1220    MOVE      SAVCOD01,CLAMCODE
            MOVE      SAVCOD02,GROUPCDE
            PACK      FINCODE,PREFCHAR,ANS,CLAMCODE,GROUPCDE,SP20
            PACK      KEY28,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE,FINHOSP
            CALL      RDFINS1                    * new record already on file ?
            IF        OVRCD = 1                    
              MOVE      SAVKEY28,KEY28           * no
              CALL      RDFINS1                  * re-read original record
              BRANCH    OVRCD,PFIN9500           * shouldn't happen
              GOTO      PFIN1210
            ELSE
              ADD       SAVFRM01,FINPER  
              ADD       SAVFRM02,FINMTH1 
              ADD       SAVFRM03,FINMTH2 
              ADD       SAVFRM04,FINMTH3 
              ADD       SAVFRM05,FINMTH4 
              ADD       SAVFRM06,FINMTH5 
              ADD       SAVFRM07,FINMTH6 
              ADD       SAVFRM08,FINMTH7 
              ADD       SAVFRM09,FINMTH8 
              ADD       SAVFRM10,FINMTH9 
              ADD       SAVFRM11,FINMTH10
              ADD       SAVFRM12,FINMTH11
              ADD       SAVFRM13,FINMTH12
              ADD       SAVFRM14,FINMTH13
              ADD       SAVFRM15,FLSTYR
              CALL      UPFINS1                  * update record
.
              MOVE      SAVKEY28,KEY28           * delete record
              CALL      DEFINS1 
            ENDIF
          ELSE
            UNPACK    FINCODE,PREFCHAR,ANS,GROUPCDE,ITEMCODE
.
            PACK      SAVCOD01,GROUPCDE,SP8      * save current code
            MOVE      FINPER,SAVFRM01            * save period totals
            MOVE      FINMTH1,SAVFRM02
            MOVE      FINMTH2,SAVFRM03
            MOVE      FINMTH3,SAVFRM04
            MOVE      FINMTH4,SAVFRM05
            MOVE      FINMTH5,SAVFRM06
            MOVE      FINMTH6,SAVFRM07
            MOVE      FINMTH7,SAVFRM08
            MOVE      FINMTH8,SAVFRM09
            MOVE      FINMTH9,SAVFRM10
            MOVE      FINMTH10,SAVFRM11
            MOVE      FINMTH11,SAVFRM12
            MOVE      FINMTH12,SAVFRM13
            MOVE      FINMTH13,SAVFRM14
            MOVE      FLSTYR,SAVFRM15
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSF,ANSI,SP10    * set to Category FI
            PACK      CODEDFLD,GROUPCDE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD01         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            BRANCH    UPDTFLAG,PFIN0500          * no mappings
.
.           Need to update this record, so first see if any of the fields
.           to be updated were part of the key.
.
            BRANCH    KEYFIELD,PFIN1240          * key fields changed
.
.           Just need to update the current record
.
PFIN1230    MOVE      SAVCOD01,GROUPCDE
            PACK      FINCODE,PREFCHAR,ANS,GROUPCDE,ITEMCODE,SP20
            CALL      UPFINS1                    * update record
            GOTO      PFIN9500
.
.         The key has changed, so check if the new key already exists
.
PFIN1240    MOVE      SAVCOD01,GROUPCDE
            PACK      FINCODE,PREFCHAR,ANS,GROUPCDE,ITEMCODE,SP20
            PACK      KEY28,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE,FINHOSP
            CALL      RDFINS1                    * new record already on file ?
            IF        OVRCD = 1                    
              MOVE      SAVKEY28,KEY28           * no
              CALL      RDFINS1                  * re-read original record
              BRANCH    OVRCD,PFIN9500           * shouldn't happen
              GOTO      PFIN1230
            ELSE
              ADD       SAVFRM01,FINPER  
              ADD       SAVFRM02,FINMTH1 
              ADD       SAVFRM03,FINMTH2 
              ADD       SAVFRM04,FINMTH3 
              ADD       SAVFRM05,FINMTH4 
              ADD       SAVFRM06,FINMTH5 
              ADD       SAVFRM07,FINMTH6 
              ADD       SAVFRM08,FINMTH7 
              ADD       SAVFRM09,FINMTH8 
              ADD       SAVFRM10,FINMTH9 
              ADD       SAVFRM11,FINMTH10
              ADD       SAVFRM12,FINMTH11
              ADD       SAVFRM13,FINMTH12
              ADD       SAVFRM14,FINMTH13
              ADD       SAVFRM15,FLSTYR
              CALL      UPFINS1                  * update record
.
              MOVE      SAVKEY28,KEY28           * delete record
              CALL      DEFINS1 
            ENDIF
          ENDIF
          GOTO      PFIN9500
.
.         We have an Accommodation Non-Casemix value of "A" or "N".
.         "A" is for accommodation charges, while "N" is for credit notes
.         against accommodation charges.
.         If CACCFEE is set to "0", then FINCODE is made up of "A" or "N"
.         + Admission Type Code (Cat A).
.         If CACCFEE is set to "1", then FINCODE is made up of "A" or "N"
.         + Ward Code + Claim Code (Cat CL).
.         If CACCFEE is set to "2", then FINCODE is made up of "A" or "N"
.         + Ward Code + Admission Type Code (Cat A).
.         If CACCFEE is set to "3", then FINCODE is made up of "A" or "N"
.         + Ward Code + Claim Code (Cat CL) + Admission Type Code (Cat A).
.         If CACCFEE is set to "4", then FINCODE is made up of "A" or "N"
.         + Ward Code + Admission Type Code (Cat A) + Claim Code (Cat CL).
.         If CACCFEE is set to "5", then FINCODE is made up of "A" or "N"
.         + Claim Code (Cat CL).
.
PFIN1300  COMPARE     THREE,FINSYS               * I/P ?
          GOTO        PFIN0500 IF NOT EQUAL      * no - ignore record
.
          BRANCH      CACCFEE,PFIN1310:          * A+Ward+Claim Code
                              PFIN1320:          * A+Ward+Adm.Type
                              PFIN1330:          * A+Ward+Clm Code+Adm.Type
                              PFIN1340:          * A+Ward+Adm.Type+Clm Code
                              PFIN1350           * A+Clm Code
.
.         CACCFEE = 0: "A"+ Admission Type Code (Cat A)
.
          UNPACK    FINCODE,PREFCHAR,ADMNTYPE
.
          PACK      SAVCOD01,ADMNTYPE,SP8        * save current code
          MOVE      FINPER,SAVFRM01              * save period totals
          MOVE      FINMTH1,SAVFRM02
          MOVE      FINMTH2,SAVFRM03
          MOVE      FINMTH3,SAVFRM04
          MOVE      FINMTH4,SAVFRM05
          MOVE      FINMTH5,SAVFRM06
          MOVE      FINMTH6,SAVFRM07
          MOVE      FINMTH7,SAVFRM08
          MOVE      FINMTH8,SAVFRM09
          MOVE      FINMTH9,SAVFRM10
          MOVE      FINMTH10,SAVFRM11
          MOVE      FINMTH11,SAVFRM12
          MOVE      FINMTH12,SAVFRM13
          MOVE      FINMTH13,SAVFRM14
          MOVE      FLSTYR,SAVFRM15
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,ADMNTYPE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,PFIN0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PFIN1302            * key fields changed
.
.         Just need to update the current record
.
PFIN1301  MOVE      SAVCOD01,ADMNTYPE
          PACK      FINCODE,PREFCHAR,ADMNTYPE,SP20
          CALL      UPFINS1                      * update record
          GOTO      PFIN9500
.
.         The key has changed, so check if the new key already exists
.         
PFIN1302  MOVE      SAVCOD01,ADMNTYPE
          PACK      FINCODE,PREFCHAR,ADMNTYPE,SP20
          PACK      KEY28,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE,FINHOSP
          CALL      RDFINS1                      * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY28,KEY28             * no
            CALL      RDFINS1                    * re-read original record
            BRANCH    OVRCD,PFIN9500             * shouldn't happen
            GOTO      PFIN1301
          ELSE
            ADD       SAVFRM01,FINPER  
            ADD       SAVFRM02,FINMTH1 
            ADD       SAVFRM03,FINMTH2 
            ADD       SAVFRM04,FINMTH3 
            ADD       SAVFRM05,FINMTH4 
            ADD       SAVFRM06,FINMTH5 
            ADD       SAVFRM07,FINMTH6 
            ADD       SAVFRM08,FINMTH7 
            ADD       SAVFRM09,FINMTH8 
            ADD       SAVFRM10,FINMTH9 
            ADD       SAVFRM11,FINMTH10
            ADD       SAVFRM12,FINMTH11
            ADD       SAVFRM13,FINMTH12
            ADD       SAVFRM14,FINMTH13
            ADD       SAVFRM15,FLSTYR
            CALL      UPFINS1                    * update record
.
            MOVE      SAVKEY28,KEY28             * delete record
            CALL      DEFINS1 
          ENDIF
          GOTO      PFIN9500
.
.         CACCFEE = 1: "A"+ Ward Code + Claim Code (Cat CL)
.
PFIN1310  UNPACK    FINCODE,PREFCHAR,WARDCODE,CLAMCODE
.
          PACK      SAVCOD01,CLAMCODE,SP8        * save current code
          MOVE      FINPER,SAVFRM01              * save period totals
          MOVE      FINMTH1,SAVFRM02
          MOVE      FINMTH2,SAVFRM03
          MOVE      FINMTH3,SAVFRM04
          MOVE      FINMTH4,SAVFRM05
          MOVE      FINMTH5,SAVFRM06
          MOVE      FINMTH6,SAVFRM07
          MOVE      FINMTH7,SAVFRM08
          MOVE      FINMTH8,SAVFRM09
          MOVE      FINMTH9,SAVFRM10
          MOVE      FINMTH10,SAVFRM11
          MOVE      FINMTH11,SAVFRM12
          MOVE      FINMTH12,SAVFRM13
          MOVE      FINMTH13,SAVFRM14
          MOVE      FLSTYR,SAVFRM15
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,CLAMCODE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,PFIN0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PFIN1312            * key fields changed
.
.         Just need to update the current record
.
PFIN1311  MOVE      SAVCOD01,CLAMCODE
          PACK      FINCODE,PREFCHAR,WARDCODE,CLAMCODE,SP20
          CALL      UPFINS1                      * update record
          GOTO      PFIN9500
.
.         The key has changed, so check if the new key already exists
.         
PFIN1312  MOVE      SAVCOD01,CLAMCODE
          PACK      FINCODE,PREFCHAR,WARDCODE,CLAMCODE,SP20
          PACK      KEY28,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE,FINHOSP
          CALL      RDFINS1                      * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY28,KEY28             * no
            CALL      RDFINS1                    * re-read original record
            BRANCH    OVRCD,PFIN9500             * shouldn't happen
            GOTO      PFIN1311
          ELSE
            ADD       SAVFRM01,FINPER  
            ADD       SAVFRM02,FINMTH1 
            ADD       SAVFRM03,FINMTH2 
            ADD       SAVFRM04,FINMTH3 
            ADD       SAVFRM05,FINMTH4 
            ADD       SAVFRM06,FINMTH5 
            ADD       SAVFRM07,FINMTH6 
            ADD       SAVFRM08,FINMTH7 
            ADD       SAVFRM09,FINMTH8 
            ADD       SAVFRM10,FINMTH9 
            ADD       SAVFRM11,FINMTH10
            ADD       SAVFRM12,FINMTH11
            ADD       SAVFRM13,FINMTH12
            ADD       SAVFRM14,FINMTH13
            ADD       SAVFRM15,FLSTYR
            CALL      UPFINS1                    * update record
.
            MOVE      SAVKEY28,KEY28             * delete record
            CALL      DEFINS1 
          ENDIF
          GOTO      PFIN9500
.
.         CACCFEE = 2: "A"+ Ward Code + Admission Type Code (Cat A)
.
PFIN1320  UNPACK    FINCODE,PREFCHAR,WARDCODE,ADMNTYPE
.
          PACK      SAVCOD01,ADMNTYPE,SP8        * save current code
          MOVE      FINPER,SAVFRM01              * save period totals
          MOVE      FINMTH1,SAVFRM02
          MOVE      FINMTH2,SAVFRM03
          MOVE      FINMTH3,SAVFRM04
          MOVE      FINMTH4,SAVFRM05
          MOVE      FINMTH5,SAVFRM06
          MOVE      FINMTH6,SAVFRM07
          MOVE      FINMTH7,SAVFRM08
          MOVE      FINMTH8,SAVFRM09
          MOVE      FINMTH9,SAVFRM10
          MOVE      FINMTH10,SAVFRM11
          MOVE      FINMTH11,SAVFRM12
          MOVE      FINMTH12,SAVFRM13
          MOVE      FINMTH13,SAVFRM14
          MOVE      FLSTYR,SAVFRM15
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,ADMNTYPE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,PFIN0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PFIN1322            * key fields changed
.
.         Just need to update the current record
.
PFIN1321  MOVE      SAVCOD01,ADMNTYPE
          PACK      FINCODE,PREFCHAR,WARDCODE,ADMNTYPE,SP20
          CALL      UPFINS1                      * update record
          GOTO      PFIN9500
.
.         The key has changed, so check if the new key already exists
.         
PFIN1322  MOVE      SAVCOD01,ADMNTYPE
          PACK      FINCODE,PREFCHAR,WARDCODE,ADMNTYPE,SP20
          PACK      KEY28,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE,FINHOSP
          CALL      RDFINS1                      * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY28,KEY28             * no
            CALL      RDFINS1                    * re-read original record
            BRANCH    OVRCD,PFIN9500             * shouldn't happen
            GOTO      PFIN1321
          ELSE
            ADD       SAVFRM01,FINPER  
            ADD       SAVFRM02,FINMTH1 
            ADD       SAVFRM03,FINMTH2 
            ADD       SAVFRM04,FINMTH3 
            ADD       SAVFRM05,FINMTH4 
            ADD       SAVFRM06,FINMTH5 
            ADD       SAVFRM07,FINMTH6 
            ADD       SAVFRM08,FINMTH7 
            ADD       SAVFRM09,FINMTH8 
            ADD       SAVFRM10,FINMTH9 
            ADD       SAVFRM11,FINMTH10
            ADD       SAVFRM12,FINMTH11
            ADD       SAVFRM13,FINMTH12
            ADD       SAVFRM14,FINMTH13
            ADD       SAVFRM15,FLSTYR
            CALL      UPFINS1                    * update record
.
            MOVE      SAVKEY28,KEY28             * delete record
            CALL      DEFINS1 
          ENDIF
          GOTO      PFIN9500
.
.         CACCFEE = 3: "A"+ Ward Code + Claim Code (Cat CL) +
.                       Admission Type Code (Cat A)
.
PFIN1330  UNPACK    FINCODE,PREFCHAR,WARDCODE,CLAMCODE,ADMNTYPE
.
          PACK      SAVCOD01,CLAMCODE,SP8        * save current code
          PACK      SAVCOD02,ADMNTYPE,SP8        * save current code
          MOVE      FINPER,SAVFRM01              * save period totals
          MOVE      FINMTH1,SAVFRM02
          MOVE      FINMTH2,SAVFRM03
          MOVE      FINMTH3,SAVFRM04
          MOVE      FINMTH4,SAVFRM05
          MOVE      FINMTH5,SAVFRM06
          MOVE      FINMTH6,SAVFRM07
          MOVE      FINMTH7,SAVFRM08
          MOVE      FINMTH8,SAVFRM09
          MOVE      FINMTH9,SAVFRM10
          MOVE      FINMTH10,SAVFRM11
          MOVE      FINMTH11,SAVFRM12
          MOVE      FINMTH12,SAVFRM13
          MOVE      FINMTH13,SAVFRM14
          MOVE      FLSTYR,SAVFRM15
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,CLAMCODE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,ADMNTYPE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD02           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,PFIN0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PFIN1332            * key fields changed
.
.         Just need to update the current record
.
PFIN1331  MOVE      SAVCOD01,CLAMCODE
          MOVE      SAVCOD02,ADMNTYPE
          PACK      FINCODE,PREFCHAR,WARDCODE,CLAMCODE,ADMNTYPE,SP20
          CALL      UPFINS1                      * update record
          GOTO      PFIN9500
.
.         The key has changed, so check if the new key already exists
.         
PFIN1332  MOVE      SAVCOD01,CLAMCODE
          MOVE      SAVCOD02,ADMNTYPE
          PACK      FINCODE,PREFCHAR,WARDCODE,CLAMCODE,ADMNTYPE,SP20
          PACK      KEY28,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE,FINHOSP
          CALL      RDFINS1                      * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY28,KEY28             * no
            CALL      RDFINS1                    * re-read original record
            BRANCH    OVRCD,PFIN9500             * shouldn't happen
            GOTO      PFIN1331
          ELSE
            ADD       SAVFRM01,FINPER  
            ADD       SAVFRM02,FINMTH1 
            ADD       SAVFRM03,FINMTH2 
            ADD       SAVFRM04,FINMTH3 
            ADD       SAVFRM05,FINMTH4 
            ADD       SAVFRM06,FINMTH5 
            ADD       SAVFRM07,FINMTH6 
            ADD       SAVFRM08,FINMTH7 
            ADD       SAVFRM09,FINMTH8 
            ADD       SAVFRM10,FINMTH9 
            ADD       SAVFRM11,FINMTH10
            ADD       SAVFRM12,FINMTH11
            ADD       SAVFRM13,FINMTH12
            ADD       SAVFRM14,FINMTH13
            ADD       SAVFRM15,FLSTYR
            CALL      UPFINS1                    * update record
.
            MOVE      SAVKEY28,KEY28             * delete record
            CALL      DEFINS1 
          ENDIF
          GOTO      PFIN9500
.
.         CACCFEE = 4: "A"+ Ward Code + Admission Type Code (Cat CL) +
.                       Claim Code (Cat A)
.
PFIN1340  UNPACK    FINCODE,PREFCHAR,WARDCODE,ADMNTYPE,CLAMCODE
.
          PACK      SAVCOD01,ADMNTYPE,SP8        * save current code
          PACK      SAVCOD02,CLAMCODE,SP8        * save current code
          MOVE      FINPER,SAVFRM01              * save period totals
          MOVE      FINMTH1,SAVFRM02
          MOVE      FINMTH2,SAVFRM03
          MOVE      FINMTH3,SAVFRM04
          MOVE      FINMTH4,SAVFRM05
          MOVE      FINMTH5,SAVFRM06
          MOVE      FINMTH6,SAVFRM07
          MOVE      FINMTH7,SAVFRM08
          MOVE      FINMTH8,SAVFRM09
          MOVE      FINMTH9,SAVFRM10
          MOVE      FINMTH10,SAVFRM11
          MOVE      FINMTH11,SAVFRM12
          MOVE      FINMTH12,SAVFRM13
          MOVE      FINMTH13,SAVFRM14
          MOVE      FLSTYR,SAVFRM15
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,ADMNTYPE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,CLAMCODE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD02           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,PFIN0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PFIN1342            * key fields changed
.
.         Just need to update the current record
.
PFIN1341  MOVE      SAVCOD01,ADMNTYPE
          MOVE      SAVCOD02,CLAMCODE
          PACK      FINCODE,PREFCHAR,WARDCODE,ADMNTYPE,CLAMCODE,SP20
          CALL      UPFINS1                      * update record
          GOTO      PFIN9500
.
.         The key has changed, so check if the new key already exists
.         
PFIN1342  MOVE      SAVCOD01,ADMNTYPE
          MOVE      SAVCOD02,CLAMCODE
          PACK      FINCODE,PREFCHAR,WARDCODE,ADMNTYPE,CLAMCODE,SP20
          PACK      KEY28,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE,FINHOSP
          CALL      RDFINS1                      * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY28,KEY28             * no
            CALL      RDFINS1                    * re-read original record
            BRANCH    OVRCD,PFIN9500             * shouldn't happen
            GOTO      PFIN1341
          ELSE
            ADD       SAVFRM01,FINPER  
            ADD       SAVFRM02,FINMTH1 
            ADD       SAVFRM03,FINMTH2 
            ADD       SAVFRM04,FINMTH3 
            ADD       SAVFRM05,FINMTH4 
            ADD       SAVFRM06,FINMTH5 
            ADD       SAVFRM07,FINMTH6 
            ADD       SAVFRM08,FINMTH7 
            ADD       SAVFRM09,FINMTH8 
            ADD       SAVFRM10,FINMTH9 
            ADD       SAVFRM11,FINMTH10
            ADD       SAVFRM12,FINMTH11
            ADD       SAVFRM13,FINMTH12
            ADD       SAVFRM14,FINMTH13
            ADD       SAVFRM15,FLSTYR
            CALL      UPFINS1                    * update record
.
            MOVE      SAVKEY28,KEY28             * delete record
            CALL      DEFINS1 
          ENDIF
          GOTO      PFIN9500
.
.         CACCFEE = 5: "A"+ Claim Type Code (Cat CL)
.
PFIN1350  UNPACK    FINCODE,PREFCHAR,CLAMCODE
.
          PACK      SAVCOD01,CLAMCODE,SP8        * save current code
          MOVE      FINPER,SAVFRM01              * save period totals
          MOVE      FINMTH1,SAVFRM02
          MOVE      FINMTH2,SAVFRM03
          MOVE      FINMTH3,SAVFRM04
          MOVE      FINMTH4,SAVFRM05
          MOVE      FINMTH5,SAVFRM06
          MOVE      FINMTH6,SAVFRM07
          MOVE      FINMTH7,SAVFRM08
          MOVE      FINMTH8,SAVFRM09
          MOVE      FINMTH9,SAVFRM10
          MOVE      FINMTH10,SAVFRM11
          MOVE      FINMTH11,SAVFRM12
          MOVE      FINMTH12,SAVFRM13
          MOVE      FINMTH13,SAVFRM14
          MOVE      FLSTYR,SAVFRM15
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,CLAMCODE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,PFIN0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PFIN1352            * key fields changed
.
.         Just need to update the current record
.
PFIN1351  MOVE      SAVCOD01,CLAMCODE
          PACK      FINCODE,PREFCHAR,CLAMCODE,SP20
          CALL      UPFINS1                      * update record
          GOTO      PFIN9500
.
.         The key has changed, so check if the new key already exists
.
PFIN1352  MOVE      SAVCOD01,CLAMCODE
          PACK      FINCODE,PREFCHAR,CLAMCODE,SP20
          PACK      KEY28,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE,FINHOSP
          CALL      RDFINS1                      * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY28,KEY28             * no
            CALL      RDFINS1                    * re-read original record
            BRANCH    OVRCD,PFIN9500             * shouldn't happen
            GOTO      PFIN1351
          ELSE
            ADD       SAVFRM01,FINPER
            ADD       SAVFRM02,FINMTH1
            ADD       SAVFRM03,FINMTH2
            ADD       SAVFRM04,FINMTH3
            ADD       SAVFRM05,FINMTH4
            ADD       SAVFRM06,FINMTH5
            ADD       SAVFRM07,FINMTH6
            ADD       SAVFRM08,FINMTH7
            ADD       SAVFRM09,FINMTH8
            ADD       SAVFRM10,FINMTH9
            ADD       SAVFRM11,FINMTH10
            ADD       SAVFRM12,FINMTH11
            ADD       SAVFRM13,FINMTH12
            ADD       SAVFRM14,FINMTH13
            ADD       SAVFRM15,FLSTYR
            CALL      UPFINS1                    * update record
.
            MOVE      SAVKEY28,KEY28             * delete record
            CALL      DEFINS1
          ENDIF
          GOTO      PFIN9500
.
.         We have an Accommodation Casemix value of "C" or "H".
.         "C" is for accommodation charges, while "H" is for credit notes
.         against accommodation charges.
.         FINCODE is made up of "C" or "H" + Episode Type (0 or 1)
.         + Adm. Type (Cat A).
.
PFIN1400  UNPACK    FINCODE,PREFCHAR,ANS,ADMNTYPE
.
          PACK      SAVCOD01,ADMNTYPE,SP8        * save current code
          MOVE      FINPER,SAVFRM01              * save period totals
          MOVE      FINMTH1,SAVFRM02
          MOVE      FINMTH2,SAVFRM03
          MOVE      FINMTH3,SAVFRM04
          MOVE      FINMTH4,SAVFRM05
          MOVE      FINMTH5,SAVFRM06
          MOVE      FINMTH6,SAVFRM07
          MOVE      FINMTH7,SAVFRM08
          MOVE      FINMTH8,SAVFRM09
          MOVE      FINMTH9,SAVFRM10
          MOVE      FINMTH10,SAVFRM11
          MOVE      FINMTH11,SAVFRM12
          MOVE      FINMTH12,SAVFRM13
          MOVE      FINMTH13,SAVFRM14
          MOVE      FLSTYR,SAVFRM15
.
          MOVE      ONE,CODETYPE               * set for category-code
          PACK      CATEGORY,ANSA,SP10         * set to Category A
          PACK      CODEDFLD,ADMNTYPE,SP10     * load coded field
          CALL      CMAP0000                   * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01         * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,PFIN0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PFIN1420            * key fields changed
.
.         Just need to update the current record
.
PFIN1410  MOVE      SAVCOD01,ADMNTYPE
          PACK      FINCODE,PREFCHAR,ANS,ADMNTYPE,SP20
          CALL      UPFINS1                      * update record
          GOTO      PFIN9500
.
.         The key has changed, so check if the new key already exists
.         
PFIN1420  MOVE      SAVCOD01,ADMNTYPE
          PACK      FINCODE,PREFCHAR,ANS,ADMNTYPE,SP20
          PACK      KEY28,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE,FINHOSP
          CALL      RDFINS1                      * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY28,KEY28             * no
            CALL      RDFINS1                    * re-read original record
            BRANCH    OVRCD,PFIN9500             * shouldn't happen
            GOTO      PFIN1410
          ELSE
            ADD       SAVFRM01,FINPER  
            ADD       SAVFRM02,FINMTH1 
            ADD       SAVFRM03,FINMTH2 
            ADD       SAVFRM04,FINMTH3 
            ADD       SAVFRM05,FINMTH4 
            ADD       SAVFRM06,FINMTH5 
            ADD       SAVFRM07,FINMTH6 
            ADD       SAVFRM08,FINMTH7 
            ADD       SAVFRM09,FINMTH8 
            ADD       SAVFRM10,FINMTH9 
            ADD       SAVFRM11,FINMTH10
            ADD       SAVFRM12,FINMTH11
            ADD       SAVFRM13,FINMTH12
            ADD       SAVFRM14,FINMTH13
            ADD       SAVFRM15,FLSTYR
            CALL      UPFINS1                    * update record
.
            MOVE      SAVKEY28,KEY28             * delete record
            CALL      DEFINS1 
          ENDIF
          GOTO      PFIN9500
.
.         Processing a "Cash Received" record.
.         First, convert the finance code first character to a number.
.
PFIN2000  MOVE      ZERO,FORM1
          MOVE      FINCODE,ANS
          REP       "A0B1C0D0I0M0",ANS
          MOVE      ANS,FORM1
          BRANCH    FORM1,PFIN2100               * from health fund
          GOTO      PFIN0500
.
.         We have a Receipt of type "B" (from a health fund).
.
PFIN2100  UNPACK    FINCODE,PREFCHAR,FUNDCODE
.
          PACK      SAVCOD01,FUNDCODE,SP8        * save current code
          MOVE      FINPER,SAVFRM01              * save period totals
          MOVE      FINMTH1,SAVFRM02
          MOVE      FINMTH2,SAVFRM03
          MOVE      FINMTH3,SAVFRM04
          MOVE      FINMTH4,SAVFRM05
          MOVE      FINMTH5,SAVFRM06
          MOVE      FINMTH6,SAVFRM07
          MOVE      FINMTH7,SAVFRM08
          MOVE      FINMTH8,SAVFRM09
          MOVE      FINMTH9,SAVFRM10
          MOVE      FINMTH10,SAVFRM11
          MOVE      FINMTH11,SAVFRM12
          MOVE      FINMTH12,SAVFRM13
          MOVE      FINMTH13,SAVFRM14
          MOVE      FLSTYR,SAVFRM15
.
          MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY                
          PACK      CODEDFLD,FUNDCODE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,PFIN0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PFIN2120            * key fields changed
.
.         Just need to update the current record
.
PFIN2110  MOVE      SAVCOD01,FUNDCODE
          PACK      FINCODE,PREFCHAR,FUNDCODE,SP20
          CALL      UPFINS1                      * update record
          GOTO      PFIN9500
.
.         The key has changed, so check if the new key already exists
.         
PFIN2120  MOVE      SAVCOD01,FUNDCODE
          PACK      FINCODE,PREFCHAR,FUNDCODE,SP20
          PACK      KEY28,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE,FINHOSP
          CALL      RDFINS1                      * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY28,KEY28             * no
            CALL      RDFINS1                    * re-read original record
            BRANCH    OVRCD,PFIN9500             * shouldn't happen
            GOTO      PFIN2110
          ELSE
            ADD       SAVFRM01,FINPER  
            ADD       SAVFRM02,FINMTH1 
            ADD       SAVFRM03,FINMTH2 
            ADD       SAVFRM04,FINMTH3 
            ADD       SAVFRM05,FINMTH4 
            ADD       SAVFRM06,FINMTH5 
            ADD       SAVFRM07,FINMTH6 
            ADD       SAVFRM08,FINMTH7 
            ADD       SAVFRM09,FINMTH8 
            ADD       SAVFRM10,FINMTH9 
            ADD       SAVFRM11,FINMTH10
            ADD       SAVFRM12,FINMTH11
            ADD       SAVFRM13,FINMTH12
            ADD       SAVFRM14,FINMTH13
            ADD       SAVFRM15,FLSTYR
            CALL      UPFINS1                    * update record
.
            MOVE      SAVKEY28,KEY28             * delete record
            CALL      DEFINS1 
          ENDIF
          GOTO      PFIN9500
.
.         Processing a "Journal" record.
.         If PTCNJFEE is set to "1", then FINCODE is made up of Claim Code
.         (Cat CL) + Journal Code (Cat J).
.         If PTCNJFEE is set to "0", then FINCODE is the Journal Code (Cat J).
.
PFIN3000  IF        PTCNJFEE = 1
            UNPACK    FINCODE,CLAMCODE,JRNLCODE
.
            PACK      SAVCOD01,CLAMCODE,SP8      * save current code
            PACK      SAVCOD02,JRNLCODE,SP8      * save current code
            MOVE      FINPER,SAVFRM01            * save period totals
            MOVE      FINMTH1,SAVFRM02
            MOVE      FINMTH2,SAVFRM03
            MOVE      FINMTH3,SAVFRM04
            MOVE      FINMTH4,SAVFRM05
            MOVE      FINMTH5,SAVFRM06
            MOVE      FINMTH6,SAVFRM07
            MOVE      FINMTH7,SAVFRM08
            MOVE      FINMTH8,SAVFRM09
            MOVE      FINMTH9,SAVFRM10
            MOVE      FINMTH10,SAVFRM11
            MOVE      FINMTH11,SAVFRM12
            MOVE      FINMTH12,SAVFRM13
            MOVE      FINMTH13,SAVFRM14
            MOVE      FLSTYR,SAVFRM15
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSC,ANSL,SP10    * set to Category CL
            PACK      CODEDFLD,CLAMCODE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD01         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSJ,SP10         * set to Category J
            PACK      CODEDFLD,JRNLCODE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD02         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            BRANCH    UPDTFLAG,PFIN0500          * no mappings
.
.           Need to update this record, so first see if any of the fields
.           to be updated were part of the key.
.
            BRANCH    KEYFIELD,PFIN3020          * key fields changed
.
.           Just need to update the current record
.
PFIN3010    MOVE      SAVCOD01,CLAMCODE
            MOVE      SAVCOD02,JRNLCODE
            PACK      FINCODE,CLAMCODE,JRNLCODE,SP20
            CALL      UPFINS1                    * update record
            GOTO      PFIN9500
.
.           The key has changed, so check if the new key already exists
.         
PFIN3020    MOVE      SAVCOD01,CLAMCODE
            MOVE      SAVCOD02,JRNLCODE
            PACK      FINCODE,CLAMCODE,JRNLCODE,SP20
            PACK      KEY28,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE,FINHOSP
            CALL      RDFINS1                    * new record already on file ?
            IF        OVRCD = 1                    
              MOVE      SAVKEY28,KEY28           * no
              CALL      RDFINS1                  * re-read original record
              BRANCH    OVRCD,PFIN9500           * shouldn't happen
              GOTO      PFIN3010
            ELSE
              ADD       SAVFRM01,FINPER  
              ADD       SAVFRM02,FINMTH1 
              ADD       SAVFRM03,FINMTH2 
              ADD       SAVFRM04,FINMTH3 
              ADD       SAVFRM05,FINMTH4 
              ADD       SAVFRM06,FINMTH5 
              ADD       SAVFRM07,FINMTH6 
              ADD       SAVFRM08,FINMTH7 
              ADD       SAVFRM09,FINMTH8 
              ADD       SAVFRM10,FINMTH9 
              ADD       SAVFRM11,FINMTH10
              ADD       SAVFRM12,FINMTH11
              ADD       SAVFRM13,FINMTH12
              ADD       SAVFRM14,FINMTH13
              ADD       SAVFRM15,FLSTYR
              CALL      UPFINS1                  * update record
.
              MOVE      SAVKEY28,KEY28           * delete record
              CALL      DEFINS1 
            ENDIF
          ELSE
            MOVE      FINCODE,JRNLCODE
.
            PACK      SAVCOD01,JRNLCODE,SP8      * save current code
            MOVE      FINPER,SAVFRM01            * save period totals
            MOVE      FINMTH1,SAVFRM02
            MOVE      FINMTH2,SAVFRM03
            MOVE      FINMTH3,SAVFRM04
            MOVE      FINMTH4,SAVFRM05
            MOVE      FINMTH5,SAVFRM06
            MOVE      FINMTH6,SAVFRM07
            MOVE      FINMTH7,SAVFRM08
            MOVE      FINMTH8,SAVFRM09
            MOVE      FINMTH9,SAVFRM10
            MOVE      FINMTH10,SAVFRM11
            MOVE      FINMTH11,SAVFRM12
            MOVE      FINMTH12,SAVFRM13
            MOVE      FINMTH13,SAVFRM14
            MOVE      FLSTYR,SAVFRM15
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSJ,SP10         * set to Category J
            PACK      CODEDFLD,JRNLCODE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD01         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            BRANCH    UPDTFLAG,PFIN0500          * no mappings
.
.           Need to update this record, so first see if any of the fields
.           to be updated were part of the key.
.
            BRANCH    KEYFIELD,PFIN3040          * key fields changed
.
.           Just need to update the current record
.
PFIN3030    MOVE      SAVCOD01,JRNLCODE
            PACK      FINCODE,JRNLCODE,SP20
            CALL      UPFINS1                    * update record
            GOTO      PFIN9500
.
.           The key has changed, so check if the new key already exists
.         
PFIN3040    MOVE      SAVCOD01,JRNLCODE
            PACK      FINCODE,JRNLCODE,SP20
            PACK      KEY28,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE,FINHOSP
            CALL      RDFINS1                    * new record already on file ?
            IF        OVRCD = 1                    
              MOVE      SAVKEY28,KEY28           * no
              CALL      RDFINS1                  * re-read original record
              BRANCH    OVRCD,PFIN9500           * shouldn't happen
              GOTO      PFIN3030
            ELSE
              ADD       SAVFRM01,FINPER  
              ADD       SAVFRM02,FINMTH1 
              ADD       SAVFRM03,FINMTH2 
              ADD       SAVFRM04,FINMTH3 
              ADD       SAVFRM05,FINMTH4 
              ADD       SAVFRM06,FINMTH5 
              ADD       SAVFRM07,FINMTH6 
              ADD       SAVFRM08,FINMTH7 
              ADD       SAVFRM09,FINMTH8 
              ADD       SAVFRM10,FINMTH9 
              ADD       SAVFRM11,FINMTH10
              ADD       SAVFRM12,FINMTH11
              ADD       SAVFRM13,FINMTH12
              ADD       SAVFRM14,FINMTH13
              ADD       SAVFRM15,FLSTYR
              CALL      UPFINS1                  * update record
.
              MOVE      SAVKEY28,KEY28           * delete record
              CALL      DEFINS1 
            ENDIF
          ENDIF
.
PFIN9500  MOVE      SAVKEY28,KEY28
          GOTO      PFIN0200                     * get next record
.
PFIN9999  RETURN
+
.*****************************************************************************
.*                              PFIG0000              Called by: PROC0000    *
.*       Loop through patfigaf and fix any relevant coded fields             *
.*****************************************************************************
.
PFIG0000  DISPLAY   *P12:24,*EL,"patfigaf:";
.
          MOVE      SP30,KEY28
PFIG0200  CALL      RDSFIGA1                     * position at start of file
PFIG0500  CALL      RDKFIGA1                     * read next record
          BRANCH    OVRCD,PFIG9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE:
                             FINHOSP
          PACK      SAVKEY28,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE,FINHOSP
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Convert the financial type to a number
.
          MOVE      ZERO,FORM1
          MOVE      FINTYPE,ANS
          REP       "A1B2C3D4E5F6G7",ANS
          MOVE      ANS,FORM1
          BRANCH    FORM1,PFIG1000:              * fees generated
                          PFIG2000:              * cash received
                          PFIG3000               * journals
          GOTO      PFIG0500
.
.         Processing a "Fees Generated" record.
.         First, convert the finance code first character to a number.
.
PFIG1000  MOVE      ZERO,FORM1
          MOVE      FINCODE,ANS
          REP       "A3C4D0G0H4I0J0M1N3P2Q1R0S0T2",ANS
          MOVE      ANS,FORM1
          BRANCH    FORM1,PFIG1100:              * misc. non-casemix
                          PFIG1200:              * misc. casemix
                          PFIG1300:              * accommodation for non-casemix
                          PFIG1400               * accommodation for casemix
          GOTO      PFIG0500
.
.         We have a Miscellaneous Non-Casemix value of "M" or "Q".
.         "M" is for misc. item charges, while "Q" is for credit notes against
.         misc. item charges.
.         If PTCNMFEE is set to "1", then FINCODE is made up of "M" or "Q"
.         + Claim Code (Cat CL) + Misc. Charge Group Code (Cat FI).
.         If PTCNMFEE is set to "0", then FINCODE is made up of "M" or "Q"
.         + Misc. Charge Group Code (Cat FI) + Misc. Item Code.
.
PFIG1100  IF        PTCNMFEE = 1
            UNPACK    FINCODE,PREFCHAR,CLAMCODE,GROUPCDE
.
            PACK      SAVCOD01,CLAMCODE,SP8      * save current code
            PACK      SAVCOD02,GROUPCDE,SP8      * save current code
            MOVE      FINPER,SAVFRM01            * save period totals
            MOVE      FINMTH1,SAVFRM02
            MOVE      FINMTH2,SAVFRM03
            MOVE      FINMTH3,SAVFRM04
            MOVE      FINMTH4,SAVFRM05
            MOVE      FINMTH5,SAVFRM06
            MOVE      FINMTH6,SAVFRM07
            MOVE      FINMTH7,SAVFRM08
            MOVE      FINMTH8,SAVFRM09
            MOVE      FINMTH9,SAVFRM10
            MOVE      FINMTH10,SAVFRM11
            MOVE      FINMTH11,SAVFRM12
            MOVE      FINMTH12,SAVFRM13
            MOVE      FINMTH13,SAVFRM14
            MOVE      FLSTYR,SAVFRM15
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSC,ANSL,SP10    * set to Category CL
            PACK      CODEDFLD,CLAMCODE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD01         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSF,ANSI,SP10    * set to Category FI
            PACK      CODEDFLD,GROUPCDE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD02         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            BRANCH    UPDTFLAG,PFIG0500          * no mappings
.
.           Need to update this record, so first see if any of the fields
.           to be updated were part of the key.
.
            BRANCH    KEYFIELD,PFIG1120          * key fields changed
.
.           Just need to update the current record
.
PFIG1110    MOVE      SAVCOD01,CLAMCODE
            MOVE      SAVCOD02,GROUPCDE
            PACK      FINCODE,PREFCHAR,CLAMCODE,GROUPCDE,SP20
            CALL      UPFIGA1                    * update record
            GOTO      PFIG9500
.
.           The key has changed, so check if the new key already exists
.         
PFIG1120    MOVE      SAVCOD01,CLAMCODE
            MOVE      SAVCOD02,GROUPCDE
            PACK      FINCODE,PREFCHAR,CLAMCODE,GROUPCDE,SP20
            PACK      KEY28,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE,FINHOSP
            CALL      RDFIGA1                    * new record already on file ?
            IF        OVRCD = 1                    
              MOVE      SAVKEY28,KEY28           * no
              CALL      RDFIGA1                  * re-read original record
              BRANCH    OVRCD,PFIG9500           * shouldn't happen
              GOTO      PFIG1110
            ELSE
              ADD       SAVFRM01,FINPER  
              ADD       SAVFRM02,FINMTH1 
              ADD       SAVFRM03,FINMTH2 
              ADD       SAVFRM04,FINMTH3 
              ADD       SAVFRM05,FINMTH4 
              ADD       SAVFRM06,FINMTH5 
              ADD       SAVFRM07,FINMTH6 
              ADD       SAVFRM08,FINMTH7 
              ADD       SAVFRM09,FINMTH8 
              ADD       SAVFRM10,FINMTH9 
              ADD       SAVFRM11,FINMTH10
              ADD       SAVFRM12,FINMTH11
              ADD       SAVFRM13,FINMTH12
              ADD       SAVFRM14,FINMTH13
              ADD       SAVFRM15,FLSTYR
              CALL      UPFIGA1                  * update record
.
              MOVE      SAVKEY28,KEY28           * delete record
              CALL      DEFIGA1 
            ENDIF
          ELSE
            UNPACK    FINCODE,PREFCHAR,GROUPCDE,ITEMCODE
.
            PACK      SAVCOD01,GROUPCDE,SP8      * save current code
            MOVE      FINPER,SAVFRM01            * save period totals
            MOVE      FINMTH1,SAVFRM02
            MOVE      FINMTH2,SAVFRM03
            MOVE      FINMTH3,SAVFRM04
            MOVE      FINMTH4,SAVFRM05
            MOVE      FINMTH5,SAVFRM06
            MOVE      FINMTH6,SAVFRM07
            MOVE      FINMTH7,SAVFRM08
            MOVE      FINMTH8,SAVFRM09
            MOVE      FINMTH9,SAVFRM10
            MOVE      FINMTH10,SAVFRM11
            MOVE      FINMTH11,SAVFRM12
            MOVE      FINMTH12,SAVFRM13
            MOVE      FINMTH13,SAVFRM14
            MOVE      FLSTYR,SAVFRM15
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSF,ANSI,SP10    * set to Category FI
            PACK      CODEDFLD,GROUPCDE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD01         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            BRANCH    UPDTFLAG,PFIG0500          * no mappings
.
.           Need to update this record, so first see if any of the fields
.           to be updated were part of the key.
.
            BRANCH    KEYFIELD,PFIG1140          * key fields changed
.
.           Just need to update the current record
.
PFIG1130    MOVE      SAVCOD01,GROUPCDE
            PACK      FINCODE,PREFCHAR,GROUPCDE,ITEMCODE,SP20
            CALL      UPFIGA1                    * update record
            GOTO      PFIG9500
.
.           The key has changed, so check if the new key already exists
.         
PFIG1140    MOVE      SAVCOD01,GROUPCDE
            PACK      FINCODE,PREFCHAR,GROUPCDE,ITEMCODE,SP20
            PACK      KEY28,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE,FINHOSP
            CALL      RDFIGA1                    * new record already on file ?
            IF        OVRCD = 1                    
              MOVE      SAVKEY28,KEY28           * no
              CALL      RDFIGA1                  * re-read original record
              BRANCH    OVRCD,PFIG9500           * shouldn't happen
              GOTO      PFIG1130
            ELSE
              ADD       SAVFRM01,FINPER  
              ADD       SAVFRM02,FINMTH1 
              ADD       SAVFRM03,FINMTH2 
              ADD       SAVFRM04,FINMTH3 
              ADD       SAVFRM05,FINMTH4 
              ADD       SAVFRM06,FINMTH5 
              ADD       SAVFRM07,FINMTH6 
              ADD       SAVFRM08,FINMTH7 
              ADD       SAVFRM09,FINMTH8 
              ADD       SAVFRM10,FINMTH9 
              ADD       SAVFRM11,FINMTH10
              ADD       SAVFRM12,FINMTH11
              ADD       SAVFRM13,FINMTH12
              ADD       SAVFRM14,FINMTH13
              ADD       SAVFRM15,FLSTYR
              CALL      UPFIGA1                  * update record
.
              MOVE      SAVKEY28,KEY28           * delete record
              CALL      DEFIGA1 
            ENDIF
          ENDIF
          GOTO      PFIG9500
.
.         We have a Miscellaneous Casemix value of "T" or "P".
.         "T" is for misc. item charges, while "P" is for credit notes against
.         misc. item charges.
.         If PTCNMFEE is set to "1", then FINCODE is made up of "T" or "P"
.         + Episode Type (0 or 1) + Claim Code (Cat CL) + Misc. Charge Group
.         Code (Cat FI).
.         If PTCNMFEE is set to "0", then FINCODE is made up of "T" or "P"
.         + Episode Type (0 or 1) + Misc. Charge Group Code (Cat FI) + Misc.
.         Item Code.
.
PFIG1200  IF        PTCNMFEE = 1
            UNPACK    FINCODE,PREFCHAR,ANS,CLAMCODE,GROUPCDE
.
            PACK      SAVCOD01,CLAMCODE,SP8      * save current code
            PACK      SAVCOD02,GROUPCDE,SP8      * save current code
            MOVE      FINPER,SAVFRM01            * save period totals
            MOVE      FINMTH1,SAVFRM02
            MOVE      FINMTH2,SAVFRM03
            MOVE      FINMTH3,SAVFRM04
            MOVE      FINMTH4,SAVFRM05
            MOVE      FINMTH5,SAVFRM06
            MOVE      FINMTH6,SAVFRM07
            MOVE      FINMTH7,SAVFRM08
            MOVE      FINMTH8,SAVFRM09
            MOVE      FINMTH9,SAVFRM10
            MOVE      FINMTH10,SAVFRM11
            MOVE      FINMTH11,SAVFRM12
            MOVE      FINMTH12,SAVFRM13
            MOVE      FINMTH13,SAVFRM14
            MOVE      FLSTYR,SAVFRM15
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSC,ANSL,SP10    * set to Category CL
            PACK      CODEDFLD,CLAMCODE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD01         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSF,ANSI,SP10    * set to Category FI
            PACK      CODEDFLD,GROUPCDE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD02         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            BRANCH    UPDTFLAG,PFIG0500          * no mappings
.
.           Need to update this record, so first see if any of the fields
.           to be updated were part of the key.
.
            BRANCH    KEYFIELD,PFIG1220          * key fields changed
.
.           Just need to update the current record
.
PFIG1210    MOVE      SAVCOD01,CLAMCODE
            MOVE      SAVCOD02,GROUPCDE
            PACK      FINCODE,PREFCHAR,ANS,CLAMCODE,GROUPCDE,SP20
            CALL      UPFIGA1                    * update record
            GOTO      PFIG9500
.
.           The key has changed, so check if the new key already exists
.         
PFIG1220    MOVE      SAVCOD01,CLAMCODE
            MOVE      SAVCOD02,GROUPCDE
            PACK      FINCODE,PREFCHAR,ANS,CLAMCODE,GROUPCDE,SP20
            PACK      KEY28,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE,FINHOSP
            CALL      RDFIGA1                    * new record already on file ?
            IF        OVRCD = 1                    
              MOVE      SAVKEY28,KEY28           * no
              CALL      RDFIGA1                  * re-read original record
              BRANCH    OVRCD,PFIG9500           * shouldn't happen
              GOTO      PFIG1210
            ELSE
              ADD       SAVFRM01,FINPER  
              ADD       SAVFRM02,FINMTH1 
              ADD       SAVFRM03,FINMTH2 
              ADD       SAVFRM04,FINMTH3 
              ADD       SAVFRM05,FINMTH4 
              ADD       SAVFRM06,FINMTH5 
              ADD       SAVFRM07,FINMTH6 
              ADD       SAVFRM08,FINMTH7 
              ADD       SAVFRM09,FINMTH8 
              ADD       SAVFRM10,FINMTH9 
              ADD       SAVFRM11,FINMTH10
              ADD       SAVFRM12,FINMTH11
              ADD       SAVFRM13,FINMTH12
              ADD       SAVFRM14,FINMTH13
              ADD       SAVFRM15,FLSTYR
              CALL      UPFIGA1                  * update record
.
              MOVE      SAVKEY28,KEY28           * delete record
              CALL      DEFIGA1 
            ENDIF
          ELSE
            UNPACK    FINCODE,PREFCHAR,ANS,GROUPCDE,ITEMCODE
.
            PACK      SAVCOD01,GROUPCDE,SP8      * save current code
            MOVE      FINPER,SAVFRM01            * save period totals
            MOVE      FINMTH1,SAVFRM02
            MOVE      FINMTH2,SAVFRM03
            MOVE      FINMTH3,SAVFRM04
            MOVE      FINMTH4,SAVFRM05
            MOVE      FINMTH5,SAVFRM06
            MOVE      FINMTH6,SAVFRM07
            MOVE      FINMTH7,SAVFRM08
            MOVE      FINMTH8,SAVFRM09
            MOVE      FINMTH9,SAVFRM10
            MOVE      FINMTH10,SAVFRM11
            MOVE      FINMTH11,SAVFRM12
            MOVE      FINMTH12,SAVFRM13
            MOVE      FINMTH13,SAVFRM14
            MOVE      FLSTYR,SAVFRM15
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSF,ANSI,SP10    * set to Category FI
            PACK      CODEDFLD,GROUPCDE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD01         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            BRANCH    UPDTFLAG,PFIG0500          * no mappings
.
.           Need to update this record, so first see if any of the fields
.           to be updated were part of the key.
.
            BRANCH    KEYFIELD,PFIG1240          * key fields changed
.
.           Just need to update the current record
.
PFIG1230    MOVE      SAVCOD01,GROUPCDE
            PACK      FINCODE,PREFCHAR,ANS,GROUPCDE,ITEMCODE,SP20
            CALL      UPFIGA1                    * update record
            GOTO      PFIG9500
.
.           The key has changed, so check if the new key already exists
.         
PFIG1240    MOVE      SAVCOD01,GROUPCDE
            PACK      FINCODE,PREFCHAR,ANS,GROUPCDE,ITEMCODE,SP20
            PACK      KEY28,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE,FINHOSP
            CALL      RDFIGA1                    * new record already on file ?
            IF        OVRCD = 1                    
              MOVE      SAVKEY28,KEY28           * no
              CALL      RDFIGA1                  * re-read original record
              BRANCH    OVRCD,PFIG9500           * shouldn't happen
              GOTO      PFIG1230
            ELSE
              ADD       SAVFRM01,FINPER  
              ADD       SAVFRM02,FINMTH1 
              ADD       SAVFRM03,FINMTH2 
              ADD       SAVFRM04,FINMTH3 
              ADD       SAVFRM05,FINMTH4 
              ADD       SAVFRM06,FINMTH5 
              ADD       SAVFRM07,FINMTH6 
              ADD       SAVFRM08,FINMTH7 
              ADD       SAVFRM09,FINMTH8 
              ADD       SAVFRM10,FINMTH9 
              ADD       SAVFRM11,FINMTH10
              ADD       SAVFRM12,FINMTH11
              ADD       SAVFRM13,FINMTH12
              ADD       SAVFRM14,FINMTH13
              ADD       SAVFRM15,FLSTYR
              CALL      UPFIGA1                  * update record
.
              MOVE      SAVKEY28,KEY28           * delete record
              CALL      DEFIGA1 
            ENDIF
          ENDIF
          GOTO      PFIG9500
.
.         We have an Accommodation Non-Casemix value of "A" or "N".
.         "A" is for accommodation charges, while "N" is for credit notes
.         against accommodation charges.
.         If CACCFEE is set to "0", then FINCODE is made up of "A" or "N"
.         + Admission Type Code (Cat A).
.         If CACCFEE is set to "1", then FINCODE is made up of "A" or "N"
.         + Ward Code + Claim Code (Cat CL).
.         If CACCFEE is set to "2", then FINCODE is made up of "A" or "N"
.         + Ward Code + Admission Type Code (Cat A).
.         If CACCFEE is set to "3", then FINCODE is made up of "A" or "N"
.         + Ward Code + Claim Code (Cat CL) + Admission Type Code (Cat A).
.         If CACCFEE is set to "4", then FINCODE is made up of "A" or "N"
.         + Ward Code + Admission Type Code (Cat A) + Claim Code (Cat CL).
.         If CACCFEE is set to "5", then FINCODE is made up of "A" or "N"
.         + Claim Code (Cat CL).
.
PFIG1300  COMPARE     THREE,FINSYS               * I/P ?
          GOTO        PFIG0500 IF NOT EQUAL      * no - ignore record
.
          BRANCH      CACCFEE,PFIG1310:          * A+Ward+Claim Code
                              PFIG1320:          * A+Ward+Adm.Type
                              PFIG1330:          * A+Ward+Clm Code+Adm.Type
                              PFIG1340:          * A+Ward+Adm.Type+Clm Code
                              PFIG1350           * A+Clm Code
.
.         CACCFEE = 0: "A"+ Admission Type Code (Cat A)
.
          UNPACK    FINCODE,PREFCHAR,ADMNTYPE
.
          PACK      SAVCOD01,ADMNTYPE,SP8        * save current code
          MOVE      FINPER,SAVFRM01              * save period totals
          MOVE      FINMTH1,SAVFRM02
          MOVE      FINMTH2,SAVFRM03
          MOVE      FINMTH3,SAVFRM04
          MOVE      FINMTH4,SAVFRM05
          MOVE      FINMTH5,SAVFRM06
          MOVE      FINMTH6,SAVFRM07
          MOVE      FINMTH7,SAVFRM08
          MOVE      FINMTH8,SAVFRM09
          MOVE      FINMTH9,SAVFRM10
          MOVE      FINMTH10,SAVFRM11
          MOVE      FINMTH11,SAVFRM12
          MOVE      FINMTH12,SAVFRM13
          MOVE      FINMTH13,SAVFRM14
          MOVE      FLSTYR,SAVFRM15
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,ADMNTYPE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,PFIG0500          * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PFIG1302            * key fields changed
.
.         Just need to update the current record
.
PFIG1301  MOVE      SAVCOD01,ADMNTYPE
          PACK      FINCODE,PREFCHAR,ADMNTYPE,SP20
          CALL      UPFIGA1                      * update record
          GOTO      PFIG9500
.
.         The key has changed, so check if the new key already exists
.         
PFIG1302  MOVE      SAVCOD01,ADMNTYPE
          PACK      FINCODE,PREFCHAR,ADMNTYPE,SP20
          PACK      KEY28,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE,FINHOSP
          CALL      RDFIGA1                      * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY28,KEY28             * no
            CALL      RDFIGA1                    * re-read original record
            BRANCH    OVRCD,PFIG9500             * shouldn't happen
            GOTO      PFIG1301
          ELSE
            ADD       SAVFRM01,FINPER  
            ADD       SAVFRM02,FINMTH1 
            ADD       SAVFRM03,FINMTH2 
            ADD       SAVFRM04,FINMTH3 
            ADD       SAVFRM05,FINMTH4 
            ADD       SAVFRM06,FINMTH5 
            ADD       SAVFRM07,FINMTH6 
            ADD       SAVFRM08,FINMTH7 
            ADD       SAVFRM09,FINMTH8 
            ADD       SAVFRM10,FINMTH9 
            ADD       SAVFRM11,FINMTH10
            ADD       SAVFRM12,FINMTH11
            ADD       SAVFRM13,FINMTH12
            ADD       SAVFRM14,FINMTH13
            ADD       SAVFRM15,FLSTYR
            CALL      UPFIGA1                    * update record
.
            MOVE      SAVKEY28,KEY28             * delete record
            CALL      DEFIGA1 
          ENDIF
          GOTO      PFIG9500
.
.         CACCFEE = 1: "A"+ Ward Code + Claim Code (Cat CL)
.
PFIG1310  UNPACK    FINCODE,PREFCHAR,WARDCODE,CLAMCODE
.
          PACK      SAVCOD01,CLAMCODE,SP8        * save current code
          MOVE      FINPER,SAVFRM01              * save period totals
          MOVE      FINMTH1,SAVFRM02
          MOVE      FINMTH2,SAVFRM03
          MOVE      FINMTH3,SAVFRM04
          MOVE      FINMTH4,SAVFRM05
          MOVE      FINMTH5,SAVFRM06
          MOVE      FINMTH6,SAVFRM07
          MOVE      FINMTH7,SAVFRM08
          MOVE      FINMTH8,SAVFRM09
          MOVE      FINMTH9,SAVFRM10
          MOVE      FINMTH10,SAVFRM11
          MOVE      FINMTH11,SAVFRM12
          MOVE      FINMTH12,SAVFRM13
          MOVE      FINMTH13,SAVFRM14
          MOVE      FLSTYR,SAVFRM15
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,CLAMCODE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,PFIG0500          * no mappings
.           
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.         
          BRANCH    KEYFIELD,PFIG1312            * key fields changed
.           
.         Just need to update the current record
.           
PFIG1311  MOVE      SAVCOD01,CLAMCODE
          PACK      FINCODE,PREFCHAR,WARDCODE,CLAMCODE,SP20
          CALL      UPFIGA1                      * update record
          GOTO      PFIG9500
.
.         The key has changed, so check if the new key already exists
.         
PFIG1312  MOVE      SAVCOD01,CLAMCODE
          PACK      FINCODE,PREFCHAR,WARDCODE,CLAMCODE,SP20
          PACK      KEY28,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE,FINHOSP
          CALL      RDFIGA1                      * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY28,KEY28             * no
            CALL      RDFIGA1                    * re-read original record
            BRANCH    OVRCD,PFIG9500             * shouldn't happen
            GOTO      PFIG1311
          ELSE
            ADD       SAVFRM01,FINPER  
            ADD       SAVFRM02,FINMTH1 
            ADD       SAVFRM03,FINMTH2 
            ADD       SAVFRM04,FINMTH3 
            ADD       SAVFRM05,FINMTH4 
            ADD       SAVFRM06,FINMTH5 
            ADD       SAVFRM07,FINMTH6 
            ADD       SAVFRM08,FINMTH7 
            ADD       SAVFRM09,FINMTH8 
            ADD       SAVFRM10,FINMTH9 
            ADD       SAVFRM11,FINMTH10
            ADD       SAVFRM12,FINMTH11
            ADD       SAVFRM13,FINMTH12
            ADD       SAVFRM14,FINMTH13
            ADD       SAVFRM15,FLSTYR
            CALL      UPFIGA1                    * update record
.
            MOVE      SAVKEY28,KEY28             * delete record
            CALL      DEFIGA1 
          ENDIF
          GOTO      PFIG9500
.
.         CACCFEE = 2: "A"+ Ward Code + Admission Type Code (Cat A)
.
PFIG1320  UNPACK    FINCODE,PREFCHAR,WARDCODE,ADMNTYPE
.
          PACK      SAVCOD01,ADMNTYPE,SP8        * save current code
          MOVE      FINPER,SAVFRM01              * save period totals
          MOVE      FINMTH1,SAVFRM02
          MOVE      FINMTH2,SAVFRM03
          MOVE      FINMTH3,SAVFRM04
          MOVE      FINMTH4,SAVFRM05
          MOVE      FINMTH5,SAVFRM06
          MOVE      FINMTH6,SAVFRM07
          MOVE      FINMTH7,SAVFRM08
          MOVE      FINMTH8,SAVFRM09
          MOVE      FINMTH9,SAVFRM10
          MOVE      FINMTH10,SAVFRM11
          MOVE      FINMTH11,SAVFRM12
          MOVE      FINMTH12,SAVFRM13
          MOVE      FINMTH13,SAVFRM14
          MOVE      FLSTYR,SAVFRM15
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,ADMNTYPE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,PFIG0500          * no mappings
.           
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.         
          BRANCH    KEYFIELD,PFIG1322            * key fields changed
.           
.         Just need to update the current record
.           
PFIG1321  MOVE      SAVCOD01,ADMNTYPE
          PACK      FINCODE,PREFCHAR,WARDCODE,ADMNTYPE,SP20
          CALL      UPFIGA1                      * update record
          GOTO      PFIG9500
.
.         The key has changed, so check if the new key already exists
.         
PFIG1322  MOVE      SAVCOD01,ADMNTYPE
          PACK      FINCODE,PREFCHAR,WARDCODE,ADMNTYPE,SP20
          PACK      KEY28,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE,FINHOSP
          CALL      RDFIGA1                      * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY28,KEY28             * no
            CALL      RDFIGA1                    * re-read original record
            BRANCH    OVRCD,PFIG9500             * shouldn't happen
            GOTO      PFIG1321
          ELSE
            ADD       SAVFRM01,FINPER  
            ADD       SAVFRM02,FINMTH1 
            ADD       SAVFRM03,FINMTH2 
            ADD       SAVFRM04,FINMTH3 
            ADD       SAVFRM05,FINMTH4 
            ADD       SAVFRM06,FINMTH5 
            ADD       SAVFRM07,FINMTH6 
            ADD       SAVFRM08,FINMTH7 
            ADD       SAVFRM09,FINMTH8 
            ADD       SAVFRM10,FINMTH9 
            ADD       SAVFRM11,FINMTH10
            ADD       SAVFRM12,FINMTH11
            ADD       SAVFRM13,FINMTH12
            ADD       SAVFRM14,FINMTH13
            ADD       SAVFRM15,FLSTYR
            CALL      UPFIGA1                    * update record
.
            MOVE      SAVKEY28,KEY28             * delete record
            CALL      DEFIGA1 
          ENDIF
          GOTO      PFIG9500
.
.         CACCFEE = 3: "A"+ Ward Code + Claim Code (Cat CL) +
.                       Admission Type Code (Cat A)
.
PFIG1330  UNPACK    FINCODE,PREFCHAR,WARDCODE,CLAMCODE,ADMNTYPE
.
          PACK      SAVCOD01,CLAMCODE,SP8        * save current code
          PACK      SAVCOD02,ADMNTYPE,SP8        * save current code
          MOVE      FINPER,SAVFRM01              * save period totals
          MOVE      FINMTH1,SAVFRM02
          MOVE      FINMTH2,SAVFRM03
          MOVE      FINMTH3,SAVFRM04
          MOVE      FINMTH4,SAVFRM05
          MOVE      FINMTH5,SAVFRM06
          MOVE      FINMTH6,SAVFRM07
          MOVE      FINMTH7,SAVFRM08
          MOVE      FINMTH8,SAVFRM09
          MOVE      FINMTH9,SAVFRM10
          MOVE      FINMTH10,SAVFRM11
          MOVE      FINMTH11,SAVFRM12
          MOVE      FINMTH12,SAVFRM13
          MOVE      FINMTH13,SAVFRM14
          MOVE      FLSTYR,SAVFRM15
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,CLAMCODE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,ADMNTYPE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD02           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,PFIG0500          * no mappings
.           
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.         
          BRANCH    KEYFIELD,PFIG1332            * key fields changed
.           
.         Just need to update the current record
.           
PFIG1331  MOVE      SAVCOD01,CLAMCODE
          MOVE      SAVCOD02,ADMNTYPE
          PACK      FINCODE,PREFCHAR,WARDCODE,CLAMCODE,ADMNTYPE,SP20
          CALL      UPFIGA1                      * update record
          GOTO      PFIG9500
.
.         The key has changed, so check if the new key already exists
.         
PFIG1332  MOVE      SAVCOD01,CLAMCODE
          MOVE      SAVCOD02,ADMNTYPE
          PACK      FINCODE,PREFCHAR,WARDCODE,CLAMCODE,ADMNTYPE,SP20
          PACK      KEY28,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE,FINHOSP
          CALL      RDFIGA1                      * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY28,KEY28             * no
            CALL      RDFIGA1                    * re-read original record
            BRANCH    OVRCD,PFIG9500             * shouldn't happen
            GOTO      PFIG1331
          ELSE
            ADD       SAVFRM01,FINPER  
            ADD       SAVFRM02,FINMTH1 
            ADD       SAVFRM03,FINMTH2 
            ADD       SAVFRM04,FINMTH3 
            ADD       SAVFRM05,FINMTH4 
            ADD       SAVFRM06,FINMTH5 
            ADD       SAVFRM07,FINMTH6 
            ADD       SAVFRM08,FINMTH7 
            ADD       SAVFRM09,FINMTH8 
            ADD       SAVFRM10,FINMTH9 
            ADD       SAVFRM11,FINMTH10
            ADD       SAVFRM12,FINMTH11
            ADD       SAVFRM13,FINMTH12
            ADD       SAVFRM14,FINMTH13
            ADD       SAVFRM15,FLSTYR
            CALL      UPFIGA1                    * update record
.
            MOVE      SAVKEY28,KEY28             * delete record
            CALL      DEFIGA1 
          ENDIF
          GOTO      PFIG9500
.
.         CACCFEE = 4: "A"+ Ward Code + Admission Type Code (Cat CL) +
.                       Claim Code (Cat A)
.
PFIG1340  UNPACK    FINCODE,PREFCHAR,WARDCODE,ADMNTYPE,CLAMCODE
.
          PACK      SAVCOD01,ADMNTYPE,SP8        * save current code
          PACK      SAVCOD02,CLAMCODE,SP8        * save current code
          MOVE      FINPER,SAVFRM01              * save period totals
          MOVE      FINMTH1,SAVFRM02
          MOVE      FINMTH2,SAVFRM03
          MOVE      FINMTH3,SAVFRM04
          MOVE      FINMTH4,SAVFRM05
          MOVE      FINMTH5,SAVFRM06
          MOVE      FINMTH6,SAVFRM07
          MOVE      FINMTH7,SAVFRM08
          MOVE      FINMTH8,SAVFRM09
          MOVE      FINMTH9,SAVFRM10
          MOVE      FINMTH10,SAVFRM11
          MOVE      FINMTH11,SAVFRM12
          MOVE      FINMTH12,SAVFRM13
          MOVE      FINMTH13,SAVFRM14
          MOVE      FLSTYR,SAVFRM15
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,ADMNTYPE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,CLAMCODE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD02           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,PFIG0500          * no mappings
.           
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.         
          BRANCH    KEYFIELD,PFIG1342            * key fields changed
.           
.         Just need to update the current record
.           
PFIG1341  MOVE      SAVCOD01,ADMNTYPE
          MOVE      SAVCOD02,CLAMCODE
          PACK      FINCODE,PREFCHAR,WARDCODE,ADMNTYPE,CLAMCODE,SP20
          CALL      UPFIGA1                      * update record
          GOTO      PFIG9500
.
.         The key has changed, so check if the new key already exists
.         
PFIG1342  MOVE      SAVCOD01,ADMNTYPE
          MOVE      SAVCOD02,CLAMCODE
          PACK      FINCODE,PREFCHAR,WARDCODE,ADMNTYPE,CLAMCODE,SP20
          PACK      KEY28,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE,FINHOSP
          CALL      RDFIGA1                      * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY28,KEY28             * no
            CALL      RDFIGA1                    * re-read original record
            BRANCH    OVRCD,PFIG9500             * shouldn't happen
            GOTO      PFIG1341
          ELSE
            ADD       SAVFRM01,FINPER  
            ADD       SAVFRM02,FINMTH1 
            ADD       SAVFRM03,FINMTH2 
            ADD       SAVFRM04,FINMTH3 
            ADD       SAVFRM05,FINMTH4 
            ADD       SAVFRM06,FINMTH5 
            ADD       SAVFRM07,FINMTH6 
            ADD       SAVFRM08,FINMTH7 
            ADD       SAVFRM09,FINMTH8 
            ADD       SAVFRM10,FINMTH9 
            ADD       SAVFRM11,FINMTH10
            ADD       SAVFRM12,FINMTH11
            ADD       SAVFRM13,FINMTH12
            ADD       SAVFRM14,FINMTH13
            ADD       SAVFRM15,FLSTYR
            CALL      UPFIGA1                    * update record
.
            MOVE      SAVKEY28,KEY28             * delete record
            CALL      DEFIGA1 
          ENDIF
          GOTO      PFIG9500
.
.         CACCFEE = 5: "A"+ Claim Type Code (Cat CL)
.
PFIG1350  UNPACK    FINCODE,PREFCHAR,CLAMCODE
.
          PACK      SAVCOD01,CLAMCODE,SP8        * save current code
          MOVE      FINPER,SAVFRM01              * save period totals
          MOVE      FINMTH1,SAVFRM02
          MOVE      FINMTH2,SAVFRM03
          MOVE      FINMTH3,SAVFRM04
          MOVE      FINMTH4,SAVFRM05
          MOVE      FINMTH5,SAVFRM06
          MOVE      FINMTH6,SAVFRM07
          MOVE      FINMTH7,SAVFRM08
          MOVE      FINMTH8,SAVFRM09
          MOVE      FINMTH9,SAVFRM10
          MOVE      FINMTH10,SAVFRM11
          MOVE      FINMTH11,SAVFRM12
          MOVE      FINMTH12,SAVFRM13
          MOVE      FINMTH13,SAVFRM14
          MOVE      FLSTYR,SAVFRM15
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,CLAMCODE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,PFIG0500          * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PFIG1352            * key fields changed
.
.         Just need to update the current record
.
PFIG1351  MOVE      SAVCOD01,CLAMCODE
          PACK      FINCODE,PREFCHAR,CLAMCODE,SP20
          CALL      UPFIGA1                      * update record
          GOTO      PFIG9500
.
.         The key has changed, so check if the new key already exists
.
PFIG1352  MOVE      SAVCOD01,CLAMCODE
          PACK      FINCODE,PREFCHAR,CLAMCODE,SP20
          PACK      KEY28,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE,FINHOSP
          CALL      RDFIGA1                      * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY28,KEY28             * no
            CALL      RDFIGA1                    * re-read original record
            BRANCH    OVRCD,PFIG9500             * shouldn't happen
            GOTO      PFIG1351
          ELSE
            ADD       SAVFRM01,FINPER
            ADD       SAVFRM02,FINMTH1
            ADD       SAVFRM03,FINMTH2
            ADD       SAVFRM04,FINMTH3
            ADD       SAVFRM05,FINMTH4
            ADD       SAVFRM06,FINMTH5
            ADD       SAVFRM07,FINMTH6
            ADD       SAVFRM08,FINMTH7
            ADD       SAVFRM09,FINMTH8
            ADD       SAVFRM10,FINMTH9
            ADD       SAVFRM11,FINMTH10
            ADD       SAVFRM12,FINMTH11
            ADD       SAVFRM13,FINMTH12
            ADD       SAVFRM14,FINMTH13
            ADD       SAVFRM15,FLSTYR
            CALL      UPFIGA1                    * update record
.
            MOVE      SAVKEY28,KEY28             * delete record
            CALL      DEFIGA1
          ENDIF
          GOTO      PFIG9500
.
.         We have an Accommodation Casemix value of "C" or "H".
.         "C" is for accommodation charges, while "H" is for credit notes
.         against accommodation charges.
.         FINCODE is made up of "C" or "H" + Episode Type (0 or 1)
.         + Adm. Type (Cat A).
.
PFIG1400  UNPACK    FINCODE,PREFCHAR,ANS,ADMNTYPE
.
          PACK      SAVCOD01,ADMNTYPE,SP8        * save current code
          MOVE      FINPER,SAVFRM01              * save period totals
          MOVE      FINMTH1,SAVFRM02
          MOVE      FINMTH2,SAVFRM03
          MOVE      FINMTH3,SAVFRM04
          MOVE      FINMTH4,SAVFRM05
          MOVE      FINMTH5,SAVFRM06
          MOVE      FINMTH6,SAVFRM07
          MOVE      FINMTH7,SAVFRM08
          MOVE      FINMTH8,SAVFRM09
          MOVE      FINMTH9,SAVFRM10
          MOVE      FINMTH10,SAVFRM11
          MOVE      FINMTH11,SAVFRM12
          MOVE      FINMTH12,SAVFRM13
          MOVE      FINMTH13,SAVFRM14
          MOVE      FLSTYR,SAVFRM15
.
          MOVE      ONE,CODETYPE               * set for category-code
          PACK      CATEGORY,ANSA,SP10         * set to Category A
          PACK      CODEDFLD,ADMNTYPE,SP10     * load coded field
          CALL      CMAP0000                   * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,ADMNTYPE         * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,PFIG0500          * no mappings
.           
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.         
          BRANCH    KEYFIELD,PFIG1420            * key fields changed
.           
.         Just need to update the current record
.           
PFIG1410  MOVE      SAVCOD01,ADMNTYPE
          PACK      FINCODE,PREFCHAR,ANS,ADMNTYPE,SP20
          CALL      UPFIGA1                      * update record
          GOTO      PFIG9500
.
.         The key has changed, so check if the new key already exists
.         
PFIG1420  MOVE      SAVCOD01,ADMNTYPE
          PACK      FINCODE,PREFCHAR,ANS,ADMNTYPE,SP20
          PACK      KEY28,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE,FINHOSP
          CALL      RDFIGA1                      * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY28,KEY28             * no
            CALL      RDFIGA1                    * re-read original record
            BRANCH    OVRCD,PFIG9500             * shouldn't happen
            GOTO      PFIG1410
          ELSE
            ADD       SAVFRM01,FINPER  
            ADD       SAVFRM02,FINMTH1 
            ADD       SAVFRM03,FINMTH2 
            ADD       SAVFRM04,FINMTH3 
            ADD       SAVFRM05,FINMTH4 
            ADD       SAVFRM06,FINMTH5 
            ADD       SAVFRM07,FINMTH6 
            ADD       SAVFRM08,FINMTH7 
            ADD       SAVFRM09,FINMTH8 
            ADD       SAVFRM10,FINMTH9 
            ADD       SAVFRM11,FINMTH10
            ADD       SAVFRM12,FINMTH11
            ADD       SAVFRM13,FINMTH12
            ADD       SAVFRM14,FINMTH13
            ADD       SAVFRM15,FLSTYR
            CALL      UPFIGA1                    * update record
.
            MOVE      SAVKEY28,KEY28             * delete record
            CALL      DEFIGA1 
          ENDIF
          GOTO      PFIG9500
.
.         Processing a "Cash Received" record.
.         First, convert the finance code first character to a number.
.
PFIG2000  MOVE      ZERO,FORM1
          MOVE      FINCODE,ANS
          REP       "A0B1C0D0I0M0",ANS
          MOVE      ANS,FORM1
          BRANCH    FORM1,PFIG2100               * from health fund
          GOTO      PFIG0500
.
.         We have a Receipt of type "B" (from a health fund).
.
PFIG2100  UNPACK    FINCODE,PREFCHAR,FUNDCODE
.
          PACK      SAVCOD01,FUNDCODE,SP8        * save current code
          MOVE      FINPER,SAVFRM01              * save period totals
          MOVE      FINMTH1,SAVFRM02
          MOVE      FINMTH2,SAVFRM03
          MOVE      FINMTH3,SAVFRM04
          MOVE      FINMTH4,SAVFRM05
          MOVE      FINMTH5,SAVFRM06
          MOVE      FINMTH6,SAVFRM07
          MOVE      FINMTH7,SAVFRM08
          MOVE      FINMTH8,SAVFRM09
          MOVE      FINMTH9,SAVFRM10
          MOVE      FINMTH10,SAVFRM11
          MOVE      FINMTH11,SAVFRM12
          MOVE      FINMTH12,SAVFRM13
          MOVE      FINMTH13,SAVFRM14
          MOVE      FLSTYR,SAVFRM15
.
          MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY                
          PACK      CODEDFLD,FUNDCODE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,PFIG0500          * no mappings
.           
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.         
          BRANCH    KEYFIELD,PFIG2120            * key fields changed
.           
.         Just need to update the current record
.           
PFIG2110  MOVE      SAVCOD01,FUNDCODE
          PACK      FINCODE,PREFCHAR,FUNDCODE,SP20
          CALL      UPFIGA1                      * update record
          GOTO      PFIG9500
.
.         The key has changed, so check if the new key already exists
.         
PFIG2120  MOVE      SAVCOD01,FUNDCODE
          PACK      FINCODE,PREFCHAR,FUNDCODE,SP20
          PACK      KEY28,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE,FINHOSP
          CALL      RDFIGA1                      * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY28,KEY28             * no
            CALL      RDFIGA1                    * re-read original record
            BRANCH    OVRCD,PFIG9500             * shouldn't happen
            GOTO      PFIG2110
          ELSE
            ADD       SAVFRM01,FINPER  
            ADD       SAVFRM02,FINMTH1 
            ADD       SAVFRM03,FINMTH2 
            ADD       SAVFRM04,FINMTH3 
            ADD       SAVFRM05,FINMTH4 
            ADD       SAVFRM06,FINMTH5 
            ADD       SAVFRM07,FINMTH6 
            ADD       SAVFRM08,FINMTH7 
            ADD       SAVFRM09,FINMTH8 
            ADD       SAVFRM10,FINMTH9 
            ADD       SAVFRM11,FINMTH10
            ADD       SAVFRM12,FINMTH11
            ADD       SAVFRM13,FINMTH12
            ADD       SAVFRM14,FINMTH13
            ADD       SAVFRM15,FLSTYR
            CALL      UPFIGA1                    * update record
.
            MOVE      SAVKEY28,KEY28             * delete record
            CALL      DEFIGA1 
          ENDIF
          GOTO      PFIG9500
.
.         Processing a "Journal" record.
.         If PTCNJFEE is set to "1", then FINCODE is made up of Claim Code
.         (Cat CL) + Journal Code (Cat J).
.         If PTCNJFEE is set to "0", then FINCODE is the Journal Code (Cat J).
.
PFIG3000  IF        PTCNJFEE = 1
            UNPACK    FINCODE,CLAMCODE,JRNLCODE
.
            PACK      SAVCOD01,CLAMCODE,SP8      * save current code
            PACK      SAVCOD02,JRNLCODE,SP8      * save current code
            MOVE      FINPER,SAVFRM01            * save period totals
            MOVE      FINMTH1,SAVFRM02
            MOVE      FINMTH2,SAVFRM03
            MOVE      FINMTH3,SAVFRM04
            MOVE      FINMTH4,SAVFRM05
            MOVE      FINMTH5,SAVFRM06
            MOVE      FINMTH6,SAVFRM07
            MOVE      FINMTH7,SAVFRM08
            MOVE      FINMTH8,SAVFRM09
            MOVE      FINMTH9,SAVFRM10
            MOVE      FINMTH10,SAVFRM11
            MOVE      FINMTH11,SAVFRM12
            MOVE      FINMTH12,SAVFRM13
            MOVE      FINMTH13,SAVFRM14
            MOVE      FLSTYR,SAVFRM15
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSC,ANSL,SP10    * set to Category CL
            PACK      CODEDFLD,CLAMCODE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD01         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSJ,SP10         * set to Category J
            PACK      CODEDFLD,JRNLCODE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD02         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            BRANCH    UPDTFLAG,PFIG0500          * no mappings
.           
.           Need to update this record, so first see if any of the fields
.           to be updated were part of the key.
.         
            BRANCH    KEYFIELD,PFIG3020          * key fields changed
.           
.           Just need to update the current record
.           
PFIG3010    MOVE      SAVCOD01,CLAMCODE
            MOVE      SAVCOD02,JRNLCODE
            PACK      FINCODE,CLAMCODE,JRNLCODE,SP20
            CALL      UPFIGA1                    * update record
            GOTO      PFIG9500
.
.           The key has changed, so check if the new key already exists
.         
PFIG3020    MOVE      SAVCOD01,CLAMCODE
            MOVE      SAVCOD02,JRNLCODE
            PACK      FINCODE,CLAMCODE,JRNLCODE,SP20
            PACK      KEY28,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE,FINHOSP
            CALL      RDFIGA1                    * new record already on file ?
            IF        OVRCD = 1                    
              MOVE      SAVKEY28,KEY28           * no
              CALL      RDFIGA1                  * re-read original record
              BRANCH    OVRCD,PFIG9500           * shouldn't happen
              GOTO      PFIG3010
            ELSE
              ADD       SAVFRM01,FINPER  
              ADD       SAVFRM02,FINMTH1 
              ADD       SAVFRM03,FINMTH2 
              ADD       SAVFRM04,FINMTH3 
              ADD       SAVFRM05,FINMTH4 
              ADD       SAVFRM06,FINMTH5 
              ADD       SAVFRM07,FINMTH6 
              ADD       SAVFRM08,FINMTH7 
              ADD       SAVFRM09,FINMTH8 
              ADD       SAVFRM10,FINMTH9 
              ADD       SAVFRM11,FINMTH10
              ADD       SAVFRM12,FINMTH11
              ADD       SAVFRM13,FINMTH12
              ADD       SAVFRM14,FINMTH13
              ADD       SAVFRM15,FLSTYR
              CALL      UPFIGA1                  * update record
.
              MOVE      SAVKEY28,KEY28           * delete record
              CALL      DEFIGA1 
            ENDIF
          ELSE
            MOVE      FINCODE,JRNLCODE
.
            PACK      SAVCOD01,JRNLCODE,SP8      * save current code
            MOVE      FINPER,SAVFRM01            * save period totals
            MOVE      FINMTH1,SAVFRM02
            MOVE      FINMTH2,SAVFRM03
            MOVE      FINMTH3,SAVFRM04
            MOVE      FINMTH4,SAVFRM05
            MOVE      FINMTH5,SAVFRM06
            MOVE      FINMTH6,SAVFRM07
            MOVE      FINMTH7,SAVFRM08
            MOVE      FINMTH8,SAVFRM09
            MOVE      FINMTH9,SAVFRM10
            MOVE      FINMTH10,SAVFRM11
            MOVE      FINMTH11,SAVFRM12
            MOVE      FINMTH12,SAVFRM13
            MOVE      FINMTH13,SAVFRM14
            MOVE      FLSTYR,SAVFRM15
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSJ,SP10         * set to Category J
            PACK      CODEDFLD,JRNLCODE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD01         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            BRANCH    UPDTFLAG,PFIG0500          * no mappings
.           
.           Need to update this record, so first see if any of the fields
.           to be updated were part of the key.
.         
            BRANCH    KEYFIELD,PFIG3040          * key fields changed
.           
.           Just need to update the current record
.           
PFIG3030    MOVE      SAVCOD01,JRNLCODE
            PACK      FINCODE,JRNLCODE,SP20
            CALL      UPFIGA1                    * update record
            GOTO      PFIG9500
.
.           The key has changed, so check if the new key already exists
.         
PFIG3040    MOVE      SAVCOD01,JRNLCODE
            PACK      FINCODE,JRNLCODE,SP20
            PACK      KEY28,FINSYS,FINSITE,FINYEAR,FINTYPE,FINCODE,FINHOSP
            CALL      RDFIGA1                    * new record already on file ?
            IF        OVRCD = 1                    
              MOVE      SAVKEY28,KEY28           * no
              CALL      RDFIGA1                  * re-read original record
              BRANCH    OVRCD,PFIG9500           * shouldn't happen
              GOTO      PFIG3030
            ELSE
              ADD       SAVFRM01,FINPER  
              ADD       SAVFRM02,FINMTH1 
              ADD       SAVFRM03,FINMTH2 
              ADD       SAVFRM04,FINMTH3 
              ADD       SAVFRM05,FINMTH4 
              ADD       SAVFRM06,FINMTH5 
              ADD       SAVFRM07,FINMTH6 
              ADD       SAVFRM08,FINMTH7 
              ADD       SAVFRM09,FINMTH8 
              ADD       SAVFRM10,FINMTH9 
              ADD       SAVFRM11,FINMTH10
              ADD       SAVFRM12,FINMTH11
              ADD       SAVFRM13,FINMTH12
              ADD       SAVFRM14,FINMTH13
              ADD       SAVFRM15,FLSTYR
              CALL      UPFIGA1                  * update record
.
              MOVE      SAVKEY28,KEY28           * delete record
              CALL      DEFIGA1 
            ENDIF
          ENDIF
          GOTO      PFIG9500
.
PFIG9500  MOVE      SAVKEY28,KEY28
          GOTO      PFIG0200                     * get next record
.
PFIG9999  RETURN
+
.*****************************************************************************
.*                              PFMO0000              Called by: PROC0000    *
.*       Loop through patfmoaf and fix any relevant coded fields             *
.*****************************************************************************
.
PFMO0000  DISPLAY   *P12:24,*EL,"patfmoaf:";
          MOVE      SP20,KEY17
PFMO0200  CALL      RSPTFMO1                     * position at start of file
PFMO0500  CALL      RKPTFMO1                     * read next record
          BRANCH    OVRCD,PFMO9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTFMHFCD,PTFMHFTB,PTFMBTYP
          PACK      SAVKEY17,PTFMHFCD,PTFMHFTB,PTFMBTYP
          PACK      SAVCOD01,PTFMHFTB,SP8        * save current code
          PACK      SAVCOD02,PTFMHFCD,SP8        * save current code
          PACK      SAVCOD03,PTFMBTYP,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTFMHFTB
.
          MOVE      THREE,CODETYPE               * set for health fund table
          PACK      CATEGORY,PTFMHFCD,SP10       * set health fund
          PACK      CODEDFLD,PTFMHFTB,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PBFE1000                * no
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTFMHFCD
.
PFMO1000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PTFMHFCD,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PFMO2000                * no 
.
          MOVE      NEWCODE,SAVCOD02             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTFMBTYP
.
PFMO2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSB,ANST,SP10      * set to Category BT
          PACK      CODEDFLD,PTFMBTYP,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PFMO9000                * no 
.
          MOVE      NEWCODE,SAVCOD03             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PFMO9000  BRANCH    UPDTFLAG,PFMO0500            * no mappings
.           
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.         
          BRANCH    KEYFIELD,PFMO9200            * key fields changed
.           
.         Just need to update the current record
.           
PFMO9100  MOVE      SAVCOD01,PTFMHFTB          
          MOVE      SAVCOD02,PTFMHFCD          
          MOVE      SAVCOD03,PTFMBTYP          
          CALL      UPPTFMO1                     * update record
          GOTO      PFMO9500
.
.         The key has changed, so check if the new key already exists
.
PFMO9200  MOVE      SAVCOD01,PTFMHFTB          
          MOVE      SAVCOD02,PTFMHFCD          
          MOVE      SAVCOD03,PTFMBTYP          
          PACK      KEY17,PTFMHFCD,PTFMHFTB,PTFMBTYP
          CALL      RDPTFMO1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY17,KEY17             * no
            CALL      RDPTFMO1                   * re-read original record
            BRANCH    OVRCD,PFMO9500             * shouldn't happen
            GOTO      PFMO9100
          ELSE      
            MOVE      SAVKEY17,KEY17             * delete record
            CALL      DEPTFMO1
          ENDIF
.
PFMO9500  MOVE      SAVKEY17,KEY17
          GOTO      PFMO0200                     * get next record
.
PFMO9999  RETURN
+
.*****************************************************************************
.*                              PFMS0000              Called by: PROC0000    *
.*       Loop through patfmsaf and fix any relevant coded fields             *
.*****************************************************************************
.
PFMS0000  DISPLAY   *P12:24,*EL,"patfmsaf:";
.
          MOVE      SP20,KEY17
PFMS0200  CALL      RSPTFM1                      * position at start of file
PFMS0500  CALL      RKPTFM1                      * read next record
          BRANCH    OVRCD,PFMS9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTFMHOSP,PTFMSUB,PTFMCOD
          PACK      SAVKEY17,PTFMHOSP,PTFMSUB,PTFMCOD
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Convert the financial type to a number
.
          MOVE      ZERO,FORM1
          MOVE      PTFMSUB,FORM1
          BRANCH    FORM1,PFMS1000:              * accommodation
                          PFMS0500:              * theatre - ignore
                          PFMS1000:              * miscellaneous items
                          PFMS0500:              * not used - ignore
                          PFMS3000               * journals
          GOTO      PFMS0500
.
.         First, convert the finance code first character to a number.
.
PFMS1000  MOVE      ZERO,FORM1
          MOVE      PTFMCOD,ANS
          REP       "A3C4D0F0G0M1T2",ANS
          MOVE      ANS,FORM1
          BRANCH    FORM1,PFMS1100:              * misc. non-casemix
                          PFMS1200:              * misc. casemix
                          PFMS1300:              * accommodation for non-casemix
                          PFMS1400               * accommodation for casemix
          GOTO      PFMS0500
.
.         We have a Miscellaneous Non-Casemix value of "M".
.         "M" is for misc. item charges.
.         If PTCNMFEE is set to "1", then PTFMCOD is made up of "M"
.         + Claim Code (Cat CL) + Misc. Charge Group Code (Cat FI).
.         If PTCNMFEE is set to "0", then PTFMCOD is made up of "M"
.         + Misc. Charge Group Code (Cat FI) + Misc. Item Code.
.
PFMS1100  IF        PTCNMFEE = 1
            UNPACK    PTFMCOD,PREFCHAR,CLAMCODE,GROUPCDE
.
            PACK      SAVCOD01,CLAMCODE,SP8      * save current code
            PACK      SAVCOD02,GROUPCDE,SP8      * save current code
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSC,ANSL,SP10    * set to Category CL
            PACK      CODEDFLD,CLAMCODE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD01         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSF,ANSI,SP10    * set to Category FI
            PACK      CODEDFLD,GROUPCDE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD02         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            BRANCH    UPDTFLAG,PFMS0500          * no mappings
.           
.           Need to update this record, so first see if any of the fields
.           to be updated were part of the key.
.         
            BRANCH    KEYFIELD,PFMS1120          * key fields changed
.           
.           Just need to update the current record
.           
PFMS1110    MOVE      SAVCOD01,CLAMCODE
            MOVE      SAVCOD02,GROUPCDE
            PACK      PTFMCOD,PREFCHAR,CLAMCODE,GROUPCDE,SP20
            CALL      UPPTFM1                    * update record
            GOTO      PFMS9500
.
.           The key has changed, so check if the new key already exists
.         
PFMS1120    MOVE      SAVCOD01,CLAMCODE
            MOVE      SAVCOD02,GROUPCDE
            PACK      PTFMCOD,PREFCHAR,CLAMCODE,GROUPCDE,SP20
            PACK      KEY17,PTFMHOSP,PTFMSUB,PTFMCOD
            CALL      RDPTFM1                    * new record already on file ?
            IF        OVRCD = 1                    
              MOVE      SAVKEY17,KEY17           * no
              CALL      RDPTFM1                  * re-read original record
              BRANCH    OVRCD,PFMS9500           * shouldn't happen
              GOTO      PFMS1110
            ELSE
              MOVE      SAVKEY17,KEY17           * delete record
              CALL      DEPTFM1 
            ENDIF
          ELSE
            UNPACK    PTFMCOD,PREFCHAR,GROUPCDE,ITEMCODE
.
            PACK      SAVCOD01,GROUPCDE,SP8      * save current code
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSF,ANSI,SP10    * set to Category FI
            PACK      CODEDFLD,GROUPCDE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD01         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            BRANCH    UPDTFLAG,PFMS0500          * no mappings
.           
.           Need to update this record, so first see if any of the fields
.           to be updated were part of the key.  
.             
            BRANCH    KEYFIELD,PFMS1140          * key fields changed
.           
.           Just need to update the current record 
.             
PFMS1130    MOVE      SAVCOD01,GROUPCDE
            PACK      PTFMCOD,PREFCHAR,GROUPCDE,ITEMCODE,SP20
            CALL      UPPTFM1                    * update record
            GOTO      PFMS9500
.
.           The key has changed, so check if the new key already exists
.         
PFMS1140    MOVE      SAVCOD01,GROUPCDE
            PACK      PTFMCOD,PREFCHAR,GROUPCDE,ITEMCODE,SP20
            PACK      KEY17,PTFMHOSP,PTFMSUB,PTFMCOD
            CALL      RDPTFM1                    * new record already on file ?
            IF        OVRCD = 1                    
              MOVE      SAVKEY17,KEY17           * no
              CALL      RDPTFM1                  * re-read original record
              BRANCH    OVRCD,PFMS9500           * shouldn't happen
              GOTO      PFMS1130
            ELSE
              MOVE      SAVKEY17,KEY17           * delete record
              CALL      DEPTFM1 
            ENDIF
          ENDIF
          GOTO      PFMS9500
.
.         We have a Miscellaneous Casemix value of "T".
.         "T" is for misc. item charges.
.         misc. item charges.
.         If PTCNMFEE is set to "1", then PTFMCOD is made up of "T"
.         + Episode Type (0 or 1) + Claim Code (Cat CL) + Misc. Charge Group
.         Code (Cat FI).
.         If PTCNMFEE is set to "0", then PTFMCOD is made up of "T"
.         + Episode Type (0 or 1) + Misc. Charge Group Code (Cat FI) + Misc.
.         Item Code.
.
PFMS1200  IF        PTCNMFEE = 1
            UNPACK    PTFMCOD,PREFCHAR,ANS,CLAMCODE,GROUPCDE
.
            PACK      SAVCOD01,CLAMCODE,SP8      * save current code
            PACK      SAVCOD02,GROUPCDE,SP8      * save current code
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSC,ANSL,SP10    * set to Category CL
            PACK      CODEDFLD,CLAMCODE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD01         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSF,ANSI,SP10    * set to Category FI
            PACK      CODEDFLD,GROUPCDE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD02         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            BRANCH    UPDTFLAG,PFMS0500          * no mappings
.           
.           Need to update this record, so first see if any of the fields
.           to be updated were part of the key.  
.             
            BRANCH    KEYFIELD,PFMS1220          * key fields changed
.           
.           Just need to update the current record 
.             
PFMS1210    MOVE      SAVCOD01,CLAMCODE
            MOVE      SAVCOD02,GROUPCDE
            PACK      PTFMCOD,PREFCHAR,ANS,CLAMCODE,GROUPCDE,SP20
            CALL      UPPTFM1                    * update record
            GOTO      PFMS9500
.
.           The key has changed, so check if the new key already exists
.         
PFMS1220    MOVE      SAVCOD01,CLAMCODE
            MOVE      SAVCOD02,GROUPCDE
            PACK      PTFMCOD,PREFCHAR,ANS,CLAMCODE,GROUPCDE,SP20
            PACK      KEY17,PTFMHOSP,PTFMSUB,PTFMCOD
            CALL      RDPTFM1                    * new record already on file ?
            IF        OVRCD = 1                    
              MOVE      SAVKEY17,KEY17           * no
              CALL      RDPTFM1                  * re-read original record
              BRANCH    OVRCD,PFMS9500           * shouldn't happen
              GOTO      PFMS1210
            ELSE
              MOVE      SAVKEY17,KEY17           * delete record
              CALL      DEPTFM1 
            ENDIF
          ELSE
            UNPACK    PTFMCOD,PREFCHAR,ANS,GROUPCDE,ITEMCODE
.
            PACK      SAVCOD01,GROUPCDE,SP8      * save current code
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSF,ANSI,SP10    * set to Category FI
            PACK      CODEDFLD,GROUPCDE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD01         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            BRANCH    UPDTFLAG,PFMS0500          * no mappings
.           
.           Need to update this record, so first see if any of the fields
.           to be updated were part of the key.  
.             
            BRANCH    KEYFIELD,PFMS1240          * key fields changed
.           
.           Just need to update the current record 
.             
PFMS1230    MOVE      SAVCOD01,GROUPCDE
            PACK      PTFMCOD,PREFCHAR,ANS,GROUPCDE,ITEMCODE,SP20
            CALL      UPPTFM1                    * update record
            GOTO      PFMS9500
.
.           The key has changed, so check if the new key already exists
.         
PFMS1240    MOVE      SAVCOD01,GROUPCDE
            PACK      PTFMCOD,PREFCHAR,ANS,GROUPCDE,ITEMCODE,SP20
            PACK      KEY17,PTFMHOSP,PTFMSUB,PTFMCOD
            CALL      RDPTFM1                    * new record already on file ?
            IF        OVRCD = 1                    
              MOVE      SAVKEY17,KEY17           * no
              CALL      RDPTFM1                  * re-read original record
              BRANCH    OVRCD,PFMS9500           * shouldn't happen
              GOTO      PFMS1230
            ELSE
              MOVE      SAVKEY17,KEY17           * delete record
              CALL      DEPTFM1 
            ENDIF
          ENDIF
          GOTO      PFMS9500
.
.         We have an Accommodation non-casemix value of "A".
.         "A" is for accommodation charges.
.         If CACCFEE is set to "0", then PTFMCOD is made up of "A"
.         + Admission Type Code (Cat A).
.         If CACCFEE is set to "1", then PTFMCOD is made up of "A"
.         + Ward Code + Claim Code (Cat CL).
.         If CACCFEE is set to "2", then PTFMCOD is made up of "A"
.         + Ward Code + Admission Type Code (Cat A).
.         If CACCFEE is set to "3", then PTFMCOD is made up of "A"
.         + Ward Code + Claim Code (Cat CL) + Admission Type Code (Cat A).
.         If CACCFEE is set to "4", then PTFMCOD is made up of "A"
.         + Ward Code + Admission Type Code (Cat A) + Claim Code (Cat CL).
.         If CACCFEE is set to "5", then FINCODE is made up of "A" or "N"
.         + Claim Code (Cat CL).
.
PFMS1300  BRANCH      CACCFEE,PFMS1310:          * A+Ward+Claim Code
                              PFMS1320:          * A+Ward+Adm.Type
                              PFMS1330:          * A+Ward+Clm Code+Adm.Type
                              PFMS1340:          * A+Ward+Adm.Type+Clm Code
                              PFMS1350           * A+Clm Code
.
.         CACCFEE = 0: "A"+ Admission Type Code (Cat A)
.
          UNPACK    PTFMCOD,PREFCHAR,ADMNTYPE
.
          PACK      SAVCOD01,ADMNTYPE,SP8        * save current code
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,ADMNTYPE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,PFMS0500            * no mappings
.           
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.  
.             
          BRANCH    KEYFIELD,PFMS1302            * key fields changed
.           
.         Just need to update the current record 
.             
PFMS1301  MOVE      SAVCOD01,ADMNTYPE
          PACK      PTFMCOD,PREFCHAR,ADMNTYPE,SP20
          CALL      UPPTFM1                      * update record
          GOTO      PFMS9500
.
.         The key has changed, so check if the new key already exists
.         
PFMS1302  MOVE      SAVCOD01,ADMNTYPE
          PACK      PTFMCOD,PREFCHAR,ADMNTYPE,SP20
          PACK      KEY17,PTFMHOSP,PTFMSUB,PTFMCOD
          CALL      RDPTFM1                      * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY17,KEY17             * no
            CALL      RDPTFM1                    * re-read original record
            BRANCH    OVRCD,PFMS9500             * shouldn't happen
            GOTO      PFMS1301
          ELSE
            MOVE      SAVKEY17,KEY17             * delete record
            CALL      DEPTFM1 
          ENDIF
          GOTO      PFMS9500
.
.         CACCFEE = 1: "A"+ Ward Code + Claim Code (Cat CL)
.
PFMS1310  UNPACK    PTFMCOD,PREFCHAR,WARDCODE,CLAMCODE
.
          PACK      SAVCOD01,CLAMCODE,SP8        * save current code
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,CLAMCODE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,PFMS0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.  
.
          BRANCH    KEYFIELD,PFMS1312            * key fields changed
.
.         Just need to update the current record  
.
PFMS1311  MOVE      SAVCOD01,CLAMCODE
          PACK      PTFMCOD,PREFCHAR,WARDCODE,CLAMCODE,SP20
          CALL      UPPTFM1                      * update record
          GOTO      PFMS9500
.
.         The key has changed, so check if the new key already exists
.         
PFMS1312  MOVE      SAVCOD01,CLAMCODE
          PACK      PTFMCOD,PREFCHAR,WARDCODE,CLAMCODE,SP20
          PACK      KEY17,PTFMHOSP,PTFMSUB,PTFMCOD
          CALL      RDPTFM1                      * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY17,KEY17             * no
            CALL      RDPTFM1                    * re-read original record
            BRANCH    OVRCD,PFMS9500             * shouldn't happen
            GOTO      PFMS1311
          ELSE
            MOVE      SAVKEY17,KEY17             * delete record
            CALL      DEPTFM1 
          ENDIF
          GOTO      PFMS9500
.
.         CACCFEE = 2: "A"+ Ward Code + Admission Type Code (Cat A)
.
PFMS1320  UNPACK    PTFMCOD,PREFCHAR,WARDCODE,ADMNTYPE
.
          PACK      SAVCOD01,ADMNTYPE,SP8        * save current code
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,ADMNTYPE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,PFMS0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.  
.
          BRANCH    KEYFIELD,PFMS1322            * key fields changed
.
.         Just need to update the current record  
.
PFMS1321  MOVE      SAVCOD01,ADMNTYPE
          PACK      PTFMCOD,PREFCHAR,WARDCODE,ADMNTYPE,SP20
          CALL      UPPTFM1                      * update record
          GOTO      PFMS9500
.
.         The key has changed, so check if the new key already exists
.         
PFMS1322  MOVE      SAVCOD01,ADMNTYPE
          PACK      PTFMCOD,PREFCHAR,WARDCODE,ADMNTYPE,SP20
          PACK      KEY17,PTFMHOSP,PTFMSUB,PTFMCOD
          CALL      RDPTFM1                      * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY17,KEY17             * no
            CALL      RDPTFM1                    * re-read original record
            BRANCH    OVRCD,PFMS9500             * shouldn't happen
            GOTO      PFMS1321
          ELSE
            MOVE      SAVKEY17,KEY17             * delete record
            CALL      DEPTFM1 
          ENDIF
          GOTO      PFMS9500
.
.         CACCFEE = 3: "A"+ Ward Code + Claim Code (Cat CL) +
.                       Admission Type Code (Cat A)
.
PFMS1330  UNPACK    PTFMCOD,PREFCHAR,WARDCODE,CLAMCODE,ADMNTYPE
.
          PACK      SAVCOD01,CLAMCODE,SP8        * save current code
          PACK      SAVCOD02,ADMNTYPE,SP8        * save current code
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,CLAMCODE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,ADMNTYPE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD02           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,PFMS0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.  
.
          BRANCH    KEYFIELD,PFMS1332            * key fields changed
.
.         Just need to update the current record  
.
PFMS1331  MOVE      SAVCOD01,CLAMCODE
          MOVE      SAVCOD02,ADMNTYPE
          PACK      PTFMCOD,PREFCHAR,WARDCODE,CLAMCODE,ADMNTYPE,SP20
          CALL      UPPTFM1                      * update record
          GOTO      PFMS9500
.
.         The key has changed, so check if the new key already exists
.         
PFMS1332  MOVE      SAVCOD01,CLAMCODE
          MOVE      SAVCOD02,ADMNTYPE
          PACK      PTFMCOD,PREFCHAR,WARDCODE,CLAMCODE,ADMNTYPE,SP20
          PACK      KEY17,PTFMHOSP,PTFMSUB,PTFMCOD
          CALL      RDPTFM1                      * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY17,KEY17             * no
            CALL      RDPTFM1                    * re-read original record
            BRANCH    OVRCD,PFMS9500             * shouldn't happen
            GOTO      PFMS1331
          ELSE
            MOVE      SAVKEY17,KEY17             * delete record
            CALL      DEPTFM1 
          ENDIF
          GOTO      PFMS9500
.
.         CACCFEE = 4: "A"+ Ward Code + Admission Type Code (Cat CL) +
.                       Claim Code (Cat A)
.
PFMS1340  UNPACK    PTFMCOD,PREFCHAR,WARDCODE,ADMNTYPE,CLAMCODE
.
          PACK      SAVCOD01,ADMNTYPE,SP8        * save current code
          PACK      SAVCOD02,CLAMCODE,SP8        * save current code
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,ADMNTYPE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,CLAMCODE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD02           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,PFMS0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.  
.
          BRANCH    KEYFIELD,PFMS1342            * key fields changed
.
.         Just need to update the current record  
.
PFMS1341  MOVE      SAVCOD01,ADMNTYPE
          MOVE      SAVCOD02,CLAMCODE
          PACK      PTFMCOD,PREFCHAR,WARDCODE,ADMNTYPE,CLAMCODE,SP20
          CALL      UPPTFM1                      * update record
          GOTO      PFMS9500
.
.         The key has changed, so check if the new key already exists
.         
PFMS1342  MOVE      SAVCOD01,ADMNTYPE
          MOVE      SAVCOD02,CLAMCODE
          PACK      PTFMCOD,PREFCHAR,WARDCODE,ADMNTYPE,CLAMCODE,SP20
          PACK      KEY17,PTFMHOSP,PTFMSUB,PTFMCOD
          CALL      RDPTFM1                      * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY17,KEY17             * no
            CALL      RDPTFM1                    * re-read original record
            BRANCH    OVRCD,PFMS9500             * shouldn't happen
            GOTO      PFMS1341
          ELSE
            MOVE      SAVKEY17,KEY17             * delete record
            CALL      DEPTFM1 
          ENDIF
          GOTO      PFMS9500
.
.         CACCFEE = 5: "A"+ Claim Type Code (Cat CL)
.
PFMS1350  UNPACK    PTFMCOD,PREFCHAR,CLAMCODE
.
          PACK      SAVCOD01,CLAMCODE,SP8        * save current code
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,CLAMCODE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,PFMS0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PFMS1352            * key fields changed
.
.         Just need to update the current record
.
PFMS1351  MOVE      SAVCOD01,CLAMCODE
          PACK      PTFMCOD,PREFCHAR,CLAMCODE,SP20
          CALL      UPPTFM1                      * update record
          GOTO      PFMS9500
.
.         The key has changed, so check if the new key already exists
.
PFMS1352  MOVE      SAVCOD01,CLAMCODE
          PACK      PTFMCOD,PREFCHAR,CLAMCODE,SP20
          PACK      KEY17,PTFMHOSP,PTFMSUB,PTFMCOD
          CALL      RDPTFM1                      * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY17,KEY17             * no
            CALL      RDPTFM1                    * re-read original record
            BRANCH    OVRCD,PFMS9500             * shouldn't happen
            GOTO      PFMS1351
          ELSE
            MOVE      SAVKEY17,KEY17             * delete record
            CALL      DEPTFM1
          ENDIF
          GOTO      PFMS9500
.
.         We have an Accommodation Casemix value of "C".
.         "C" is for accommodation charges.
.         PTFMCOD is made up of "C" + Episode Type (0 or 1) + Adm. Type (Cat A).
.
PFMS1400  UNPACK    PTFMCOD,PREFCHAR,ANS,ADMNTYPE
.
          PACK      SAVCOD01,ADMNTYPE,SP8        * save current code
.
          MOVE      ONE,CODETYPE               * set for category-code
          PACK      CATEGORY,ANSA,SP10         * set to Category A
          PACK      CODEDFLD,ADMNTYPE,SP10     * load coded field
          CALL      CMAP0000                   * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01         * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,PFMS0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.  
.
          BRANCH    KEYFIELD,PFMS1420            * key fields changed
.
.         Just need to update the current record  
.
PFMS1410  MOVE      SAVCOD01,ADMNTYPE
          PACK      PTFMCOD,PREFCHAR,ANS,ADMNTYPE,SP20
          CALL      UPPTFM1                      * update record
          GOTO      PFMS9500
.
.         The key has changed, so check if the new key already exists
.         
PFMS1420  MOVE      SAVCOD01,ADMNTYPE
          PACK      PTFMCOD,PREFCHAR,ANS,ADMNTYPE,SP20
          PACK      KEY17,PTFMHOSP,PTFMSUB,PTFMCOD
          CALL      RDPTFM1                      * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY17,KEY17             * no
            CALL      RDPTFM1                    * re-read original record
            BRANCH    OVRCD,PFMS9500             * shouldn't happen
            GOTO      PFMS1410
          ELSE
            MOVE      SAVKEY17,KEY17             * delete record
            CALL      DEPTFM1 
          ENDIF
          GOTO      PFMS9500
.
.         Processing a "Journal" record.
.         If PTCNJFEE is set to "1", then PTFMCOD is made up of Claim Code
.         (Cat CL) + Journal Code (Cat J).
.         If PTCNJFEE is set to "0", then PTFMCOD is the Journal Code (Cat J).
.
PFMS3000  IF        PTCNJFEE = 1
            UNPACK    PTFMCOD,CLAMCODE,JRNLCODE
.
            PACK      SAVCOD01,CLAMCODE,SP8      * save current code
            PACK      SAVCOD02,JRNLCODE,SP8      * save current code
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSC,ANSL,SP10    * set to Category CL
            PACK      CODEDFLD,CLAMCODE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD01         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSJ,SP10         * set to Category J
            PACK      CODEDFLD,JRNLCODE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD02         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            BRANCH    UPDTFLAG,PFMS0500          * no mappings
.
.           Need to update this record, so first see if any of the fields
.           to be updated were part of the key.  
.
            BRANCH    KEYFIELD,PFMS3020          * key fields changed
.
.           Just need to update the current record  
.
PFMS3010    MOVE      SAVCOD01,CLAMCODE
            MOVE      SAVCOD02,JRNLCODE
            PACK      PTFMCOD,CLAMCODE,JRNLCODE,SP20
            CALL      UPPTFM1                    * update record
            GOTO      PFMS9500
.
.           The key has changed, so check if the new key already exists
.         
PFMS3020    MOVE      SAVCOD01,CLAMCODE
            MOVE      SAVCOD02,JRNLCODE
            PACK      PTFMCOD,CLAMCODE,JRNLCODE,SP20
            PACK      KEY17,PTFMHOSP,PTFMSUB,PTFMCOD
            CALL      RDPTFM1                    * new record already on file ?
            IF        OVRCD = 1                    
              MOVE      SAVKEY17,KEY17           * no
              CALL      RDPTFM1                  * re-read original record
              BRANCH    OVRCD,PFMS9500           * shouldn't happen
              GOTO      PFMS3010
            ELSE
              MOVE      SAVKEY17,KEY17           * delete record
              CALL      DEPTFM1 
            ENDIF
          ELSE
            MOVE      PTFMCOD,JRNLCODE
.
            PACK      SAVCOD01,JRNLCODE,SP8      * save current code
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSJ,SP10         * set to Category J
            PACK      CODEDFLD,JRNLCODE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD01         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            BRANCH    UPDTFLAG,PFMS0500          * no mappings
.
.           Need to update this record, so first see if any of the fields
.           to be updated were part of the key.  
.
            BRANCH    KEYFIELD,PFMS3040          * key fields changed
.
.           Just need to update the current record  
.
PFMS3030    MOVE      SAVCOD01,JRNLCODE
            PACK      PTFMCOD,JRNLCODE,SP20
            CALL      UPPTFM1                    * update record
            GOTO      PFMS9500
.
.           The key has changed, so check if the new key already exists
.         
PFMS3040    MOVE      SAVCOD01,JRNLCODE
            PACK      PTFMCOD,JRNLCODE,SP20
            PACK      KEY17,PTFMHOSP,PTFMSUB,PTFMCOD
            CALL      RDPTFM1                    * new record already on file ?
            IF        OVRCD = 1                    
              MOVE      SAVKEY17,KEY17           * no
              CALL      RDPTFM1                  * re-read original record
              BRANCH    OVRCD,PFMS9500           * shouldn't happen
              GOTO      PFMS3030
            ELSE
              MOVE      SAVKEY17,KEY17           * delete record
              CALL      DEPTFM1 
            ENDIF
          ENDIF
.
PFMS9500  MOVE      SAVKEY17,KEY17
          GOTO      PFMS0200                     * get next record
.
PFMS9999  RETURN
+
.*****************************************************************************
.*                              MFMS0000              Called by: PROC0000    *
.*       Loop through pmsfmsaf and fix any relevant coded fields             *
.*****************************************************************************
.
MFMS0000  DISPLAY   *P12:24,*EL,"pmsfmsaf:";
.
          MOVE      SP20,KEY18
MFMS0200  CALL      RSPMFMS1                     * position at start of file
MFMS0500  CALL      RKPMFMS1                     * read next record
          BRANCH    OVRCD,MFMS9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PMFMHOSP,PMFMSYST,PMFMRSUB,PMFMCODE
          PACK      SAVKEY18,PMFMHOSP,PMFMSYST,PMFMRSUB,PMFMCODE
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Convert the financial type to a number
.
          MOVE      ZERO,FORM1
          MOVE      PMFMRSUB,FORM1
          BRANCH    FORM1,MFMS1000:              * accommodation
                          MFMS0500:              * not used - ignore
                          MFMS1000:              * miscellaneous items
                          MFMS0500:              * not used - ignore
                          MFMS3000               * journals
          GOTO      MFMS0500
.
.         First, convert the finance code first character to a number.
.
MFMS1000  MOVE      ZERO,FORM1
          MOVE      PMFMCODE,ANS
          REP       "A3C4D0G0M1T2",ANS
          MOVE      ANS,FORM1
          BRANCH    FORM1,MFMS1100:              * misc. non-casemix
                          MFMS1200:              * misc. casemix
                          MFMS1300:              * accommodation for non-casemix
                          MFMS1400               * accommodation for casemix
          GOTO      MFMS0500
.
.         We have a Miscellaneous Non-Casemix value of "M".
.         "M" is for misc. item charges.
.         If PTCNMFEE is set to "1", then PMFMCODE is made up of "M"
.         + Claim Code (Cat CL) + Misc. Charge Group Code (Cat FI).
.         If PTCNMFEE is set to "0", then PMFMCODE is made up of "M"
.         + Misc. Charge Group Code (Cat FI) + Misc. Item Code.
.
MFMS1100  IF        PTCNMFEE = 1
            UNPACK    PMFMCODE,PREFCHAR,CLAMCODE,GROUPCDE
.
            PACK      SAVCOD01,CLAMCODE,SP8      * save current code
            PACK      SAVCOD02,GROUPCDE,SP8      * save current code
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSC,ANSL,SP10    * set to Category CL
            PACK      CODEDFLD,CLAMCODE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD01         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSF,ANSI,SP10    * set to Category FI
            PACK      CODEDFLD,GROUPCDE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD02         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            BRANCH    UPDTFLAG,MFMS0500          * no mappings
.
.           Need to update this record, so first see if any of the fields
.           to be updated were part of the key.  
.
            BRANCH    KEYFIELD,MFMS1120          * key fields changed
.
.           Just need to update the current record  
.
MFMS1110    MOVE      SAVCOD01,CLAMCODE
            MOVE      SAVCOD02,GROUPCDE
            PACK      PMFMCODE,PREFCHAR,CLAMCODE,GROUPCDE,SP20
            CALL      UPPMFMS1                   * update record
            GOTO      MFMS9500
.
.           The key has changed, so check if the new key already exists
.         
MFMS1120    MOVE      SAVCOD01,CLAMCODE
            MOVE      SAVCOD02,GROUPCDE
            PACK      PMFMCODE,PREFCHAR,CLAMCODE,GROUPCDE,SP20
            PACK      KEY18,PMFMHOSP,PMFMSYST,PMFMRSUB,PMFMCODE
            CALL      RDPMFMS1                   * new record already on file ?
            IF        OVRCD = 1                    
              MOVE      SAVKEY18,KEY18           * no
              CALL      RDPMFMS1                 * re-read original record
              BRANCH    OVRCD,MFMS9500           * shouldn't happen
              GOTO      MFMS1110
            ELSE
              MOVE      SAVKEY18,KEY18           * delete record
              CALL      DEPMFMS1
            ENDIF
          ELSE
            UNPACK    PMFMCODE,PREFCHAR,GROUPCDE,ITEMCODE
.
            PACK      SAVCOD01,GROUPCDE,SP8      * save current code
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSF,ANSI,SP10    * set to Category FI
            PACK      CODEDFLD,GROUPCDE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD01         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            BRANCH    UPDTFLAG,MFMS0500          * no mappings
.
.           Need to update this record, so first see if any of the fields
.           to be updated were part of the key.  
.
            BRANCH    KEYFIELD,MFMS1140          * key fields changed
.
.           Just need to update the current record  
.
MFMS1130    MOVE      SAVCOD01,GROUPCDE
            PACK      PMFMCODE,PREFCHAR,GROUPCDE,ITEMCODE,SP20
            CALL      UPPMFMS1                   * update record
            GOTO      MFMS9500
.
.           The key has changed, so check if the new key already exists
.         
MFMS1140    MOVE      SAVCOD01,GROUPCDE
            PACK      PMFMCODE,PREFCHAR,GROUPCDE,ITEMCODE,SP20
            PACK      KEY18,PMFMHOSP,PMFMSYST,PMFMRSUB,PMFMCODE
            CALL      RDPMFMS1                   * new record already on file ?
            IF        OVRCD = 1                    
              MOVE      SAVKEY18,KEY18           * no
              CALL      RDPMFMS1                 * re-read original record
              BRANCH    OVRCD,MFMS9500           * shouldn't happen
              GOTO      MFMS1130
            ELSE
              MOVE      SAVKEY18,KEY18           * delete record
              CALL      DEPMFMS1
            ENDIF
          ENDIF
          GOTO      MFMS9500
.
.         We have a Miscellaneous Casemix value of "T".
.         "T" is for misc. item charges.
.         misc. item charges.
.         If PTCNMFEE is set to "1", then PMFMCODE is made up of "T"
.         + Episode Type (0 or 1) + Claim Code (Cat CL) + Misc. Charge Group
.         Code (Cat FI).
.         If PTCNMFEE is set to "0", then PMFMCODE is made up of "T"
.         + Episode Type (0 or 1) + Misc. Charge Group Code (Cat FI) + Misc.
.         Item Code.
.
MFMS1200  IF        PTCNMFEE = 1
            UNPACK    PMFMCODE,PREFCHAR,ANS,CLAMCODE,GROUPCDE
.
            PACK      SAVCOD01,CLAMCODE,SP8      * save current code
            PACK      SAVCOD02,GROUPCDE,SP8      * save current code
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSC,ANSL,SP10    * set to Category CL
            PACK      CODEDFLD,CLAMCODE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD01         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSF,ANSI,SP10    * set to Category FI
            PACK      CODEDFLD,GROUPCDE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD02         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            BRANCH    UPDTFLAG,MFMS0500          * no mappings
.
.           Need to update this record, so first see if any of the fields
.           to be updated were part of the key.  
.
            BRANCH    KEYFIELD,MFMS1220          * key fields changed
.
.           Just need to update the current record  
.
MFMS1210    MOVE      SAVCOD01,CLAMCODE
            MOVE      SAVCOD02,GROUPCDE
            PACK      PMFMCODE,PREFCHAR,ANS,CLAMCODE,GROUPCDE,SP20
            CALL      UPPMFMS1                   * update record
            GOTO      MFMS9500
.
.           The key has changed, so check if the new key already exists
.         
MFMS1220    MOVE      SAVCOD01,CLAMCODE
            MOVE      SAVCOD02,GROUPCDE
            PACK      PMFMCODE,PREFCHAR,ANS,CLAMCODE,GROUPCDE,SP20
            PACK      KEY18,PMFMHOSP,PMFMSYST,PMFMRSUB,PMFMCODE
            CALL      RDPMFMS1                   * new record already on file ?
            IF        OVRCD = 1                    
              MOVE      SAVKEY18,KEY18           * no
              CALL      RDPMFMS1                 * re-read original record
              BRANCH    OVRCD,MFMS9500           * shouldn't happen
              GOTO      MFMS1210
            ELSE
              MOVE      SAVKEY18,KEY18           * delete record
              CALL      DEPMFMS1
            ENDIF
          ELSE
            UNPACK    PMFMCODE,PREFCHAR,ANS,GROUPCDE,ITEMCODE
.
            PACK      SAVCOD01,GROUPCDE,SP8      * save current code
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSF,ANSI,SP10    * set to Category FI
            PACK      CODEDFLD,GROUPCDE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD01         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            BRANCH    UPDTFLAG,MFMS0500          * no mappings
.
.           Need to update this record, so first see if any of the fields
.           to be updated were part of the key.  
.
            BRANCH    KEYFIELD,MFMS1240          * key fields changed
.
.           Just need to update the current record  
.
MFMS1230    MOVE      SAVCOD01,GROUPCDE
            PACK      PMFMCODE,PREFCHAR,ANS,GROUPCDE,ITEMCODE,SP20
            CALL      UPPMFMS1                   * update record
            GOTO      MFMS9500
.
.           The key has changed, so check if the new key already exists
.         
MFMS1240    MOVE      SAVCOD01,GROUPCDE
            PACK      PMFMCODE,PREFCHAR,ANS,GROUPCDE,ITEMCODE,SP20
            PACK      KEY18,PMFMHOSP,PMFMSYST,PMFMRSUB,PMFMCODE
            CALL      RDPMFMS1                   * new record already on file ?
            IF        OVRCD = 1                    
              MOVE      SAVKEY18,KEY18           * no
              CALL      RDPMFMS1                 * re-read original record
              BRANCH    OVRCD,MFMS9500           * shouldn't happen
              GOTO      MFMS1230
            ELSE
              MOVE      SAVKEY18,KEY18           * delete record
              CALL      DEPMFMS1
            ENDIF
          ENDIF
          GOTO      MFMS9500
.
.         We have an Accommodation non-casemix value of "A".
.         "A" is for accommodation charges.
.         If CACCFEE is set to "0", then PMFMCODE is made up of "A"
.         + Admission Type Code (Cat A).
.         If CACCFEE is set to "1", then PMFMCODE is made up of "A"
.         + Ward Code + Claim Code (Cat CL).
.         If CACCFEE is set to "2", then PMFMCODE is made up of "A"
.         + Ward Code + Admission Type Code (Cat A).
.         If CACCFEE is set to "3", then PMFMCODE is made up of "A"
.         + Ward Code + Claim Code (Cat CL) + Admission Type Code (Cat A).
.         If CACCFEE is set to "4", then PMFMCODE is made up of "A"
.         + Ward Code + Admission Type Code (Cat A) + Claim Code (Cat CL).
.         If CACCFEE is set to "5", then FINCODE is made up of "A" or "N"
.         + Claim Code (Cat CL).
.
MFMS1300  MATCH       "3",PMFMSYST               * I/P ?
          GOTO        MFMS0500 IF NOT EQUAL      * no - ignore
.
          BRANCH      CACCFEE,MFMS1310:          * A+Ward+Claim Code
                              MFMS1320:          * A+Ward+Adm.Type
                              MFMS1330:          * A+Ward+Clm Code+Adm.Type
                              MFMS1340:          * A+Ward+Adm.Type+Clm Code
                              MFMS1350           * A+Clm Code
.
.         CACCFEE = 0: "A"+ Admission Type Code (Cat A)
.
          UNPACK    PMFMCODE,PREFCHAR,ADMNTYPE
.
          PACK      SAVCOD01,ADMNTYPE,SP8        * save current code
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,ADMNTYPE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,MFMS0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.  
.
          BRANCH    KEYFIELD,MFMS1302            * key fields changed
.
.         Just need to update the current record  
.
MFMS1301  MOVE      SAVCOD01,ADMNTYPE
          PACK      PMFMCODE,PREFCHAR,ADMNTYPE,SP20
          CALL      UPPMFMS1                     * update record
          GOTO      MFMS9500
.
.         The key has changed, so check if the new key already exists
.         
MFMS1302  MOVE      SAVCOD01,ADMNTYPE
          PACK      PMFMCODE,PREFCHAR,ADMNTYPE,SP20
          PACK      KEY18,PMFMHOSP,PMFMSYST,PMFMRSUB,PMFMCODE
          CALL      RDPMFMS1                     * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY18,KEY18             * no
            CALL      RDPMFMS1                   * re-read original record
            BRANCH    OVRCD,MFMS9500             * shouldn't happen
            GOTO      MFMS1301
          ELSE
            MOVE      SAVKEY18,KEY18             * delete record
            CALL      DEPMFMS1
          ENDIF
          GOTO      MFMS9500
.
.         CACCFEE = 1: "A"+ Ward Code + Claim Code (Cat CL)
.
MFMS1310  UNPACK    PMFMCODE,PREFCHAR,WARDCODE,CLAMCODE
.
          PACK      SAVCOD01,CLAMCODE,SP8        * save current code
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,CLAMCODE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,MFMS0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.  
.
          BRANCH    KEYFIELD,MFMS1312            * key fields changed
.
.         Just need to update the current record  
.
MFMS1311  MOVE      SAVCOD01,CLAMCODE
          PACK      PMFMCODE,PREFCHAR,WARDCODE,CLAMCODE,SP20
          CALL      UPPMFMS1                     * update record
          GOTO      MFMS9500
.
.         The key has changed, so check if the new key already exists
.         
MFMS1312  MOVE      SAVCOD01,CLAMCODE
          PACK      PMFMCODE,PREFCHAR,WARDCODE,CLAMCODE,SP20
          PACK      KEY18,PMFMHOSP,PMFMSYST,PMFMRSUB,PMFMCODE
          CALL      RDPMFMS1                     * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY18,KEY18             * no
            CALL      RDPMFMS1                   * re-read original record
            BRANCH    OVRCD,MFMS9500             * shouldn't happen
            GOTO      MFMS1311
          ELSE
            MOVE      SAVKEY18,KEY18             * delete record
            CALL      DEPMFMS1
          ENDIF
          GOTO      MFMS9500
.
.         CACCFEE = 2: "A"+ Ward Code + Admission Type Code (Cat A)
.
MFMS1320  UNPACK    PMFMCODE,PREFCHAR,WARDCODE,ADMNTYPE
.
          PACK      SAVCOD01,ADMNTYPE,SP8        * save current code
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,ADMNTYPE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,MFMS0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.  
.
          BRANCH    KEYFIELD,MFMS1322            * key fields changed
.
.         Just need to update the current record  
.
MFMS1321  MOVE      SAVCOD01,ADMNTYPE
          PACK      PMFMCODE,PREFCHAR,WARDCODE,ADMNTYPE,SP20
          CALL      UPPMFMS1                     * update record
          GOTO      MFMS9500
.
.         The key has changed, so check if the new key already exists
.         
MFMS1322  MOVE      SAVCOD01,ADMNTYPE
          PACK      PMFMCODE,PREFCHAR,WARDCODE,ADMNTYPE,SP20
          PACK      KEY18,PMFMHOSP,PMFMSYST,PMFMRSUB,PMFMCODE
          CALL      RDPMFMS1                     * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY18,KEY18             * no
            CALL      RDPMFMS1                   * re-read original record
            BRANCH    OVRCD,MFMS9500             * shouldn't happen
            GOTO      MFMS1321
          ELSE
            MOVE      SAVKEY18,KEY18             * delete record
            CALL      DEPMFMS1
          ENDIF
          GOTO      MFMS9500
.
.         CACCFEE = 3: "A"+ Ward Code + Claim Code (Cat CL) +
.                       Admission Type Code (Cat A)
.
MFMS1330  UNPACK    PMFMCODE,PREFCHAR,WARDCODE,CLAMCODE,ADMNTYPE
.
          PACK      SAVCOD01,CLAMCODE,SP8        * save current code
          PACK      SAVCOD02,ADMNTYPE,SP8        * save current code
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,CLAMCODE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,ADMNTYPE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD02           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,MFMS0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.  
.
          BRANCH    KEYFIELD,MFMS1332            * key fields changed
.
.         Just need to update the current record  
.
MFMS1331  MOVE      SAVCOD01,CLAMCODE
          MOVE      SAVCOD02,ADMNTYPE
          PACK      PMFMCODE,PREFCHAR,WARDCODE,CLAMCODE,ADMNTYPE,SP20
          CALL      UPPMFMS1                     * update record
          GOTO      MFMS9500
.
.         The key has changed, so check if the new key already exists
.         
MFMS1332  MOVE      SAVCOD01,CLAMCODE
          MOVE      SAVCOD02,ADMNTYPE
          PACK      PMFMCODE,PREFCHAR,WARDCODE,CLAMCODE,ADMNTYPE,SP20
          PACK      KEY18,PMFMHOSP,PMFMSYST,PMFMRSUB,PMFMCODE
          CALL      RDPMFMS1                     * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY18,KEY18             * no
            CALL      RDPMFMS1                   * re-read original record
            BRANCH    OVRCD,MFMS9500             * shouldn't happen
            GOTO      MFMS1331
          ELSE
            MOVE      SAVKEY18,KEY18             * delete record
            CALL      DEPMFMS1
          ENDIF
          GOTO      MFMS9500
.
.         CACCFEE = 4: "A"+ Ward Code + Admission Type Code (Cat CL) +
.                       Claim Code (Cat A)
.
MFMS1340  UNPACK    PMFMCODE,PREFCHAR,WARDCODE,ADMNTYPE,CLAMCODE
.
          PACK      SAVCOD01,ADMNTYPE,SP8        * save current code
          PACK      SAVCOD02,CLAMCODE,SP8        * save current code
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,ADMNTYPE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,CLAMCODE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD02           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,MFMS0500             * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.  
.
          BRANCH    KEYFIELD,MFMS1342            * key fields changed
.
.         Just need to update the current record  
.
MFMS1341  MOVE      SAVCOD01,ADMNTYPE
          MOVE      SAVCOD02,CLAMCODE
          PACK      PMFMCODE,PREFCHAR,WARDCODE,ADMNTYPE,CLAMCODE,SP20
          CALL      UPPMFMS1                      * update record
          GOTO      MFMS9500
.
.         The key has changed, so check if the new key already exists
.         
MFMS1342  MOVE      SAVCOD01,ADMNTYPE
          MOVE      SAVCOD02,CLAMCODE
          PACK      PMFMCODE,PREFCHAR,WARDCODE,ADMNTYPE,CLAMCODE,SP20
          PACK      KEY18,PMFMHOSP,PMFMSYST,PMFMRSUB,PMFMCODE
          CALL      RDPMFMS1                      * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY18,KEY18              * no
            CALL      RDPMFMS1                    * re-read original record
            BRANCH    OVRCD,MFMS9500              * shouldn't happen
            GOTO      MFMS1341
          ELSE
            MOVE      SAVKEY18,KEY18              * delete record
            CALL      DEPMFMS1
          ENDIF
          GOTO      MFMS9500
.
.         CACCFEE = 5: "A"+ Claim Type Code (Cat CL)
.
MFMS1350  UNPACK    PMFMCODE,PREFCHAR,CLAMCODE
.
          PACK      SAVCOD01,CLAMCODE,SP8        * save current code
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,CLAMCODE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,MFMS0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,MFMS1352            * key fields changed
.
.         Just need to update the current record
.
MFMS1351  MOVE      SAVCOD01,CLAMCODE
          PACK      PMFMCODE,PREFCHAR,CLAMCODE,SP20
          CALL      UPPMFMS1                     * update record
          GOTO      MFMS9500
.
.         The key has changed, so check if the new key already exists
.
MFMS1352  MOVE      SAVCOD01,CLAMCODE
          PACK      PMFMCODE,PREFCHAR,CLAMCODE,SP20
          PACK      KEY18,PMFMHOSP,PMFMSYST,PMFMRSUB,PMFMCODE
          CALL      RDPMFMS1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY18,KEY18             * no
            CALL      RDPMFMS1                   * re-read original record
            BRANCH    OVRCD,MFMS9500             * shouldn't happen
            GOTO      MFMS1351
          ELSE
            MOVE      SAVKEY18,KEY18             * delete record
            CALL      DEPMFMS1
          ENDIF
          GOTO      MFMS9500
.
.         We have an Accommodation Casemix value of "C".
.         "C" is for accommodation charges.
.         PMFMCODE is made up of "C" + Episode Type (0 or 1) + Adm. Type (Cat A).
.
MFMS1400  UNPACK    PMFMCODE,PREFCHAR,ANS,ADMNTYPE
.
          PACK      SAVCOD01,ADMNTYPE,SP8        * save current code
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,ADMNTYPE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,MFMS0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.  
.
          BRANCH    KEYFIELD,MFMS1420            * key fields changed
.
.         Just need to update the current record  
.
MFMS1410  MOVE      SAVCOD01,ADMNTYPE
          PACK      PMFMCODE,PREFCHAR,ANS,ADMNTYPE,SP20
          CALL      UPPMFMS1                     * update record
          GOTO      MFMS9500
.
.         The key has changed, so check if the new key already exists
.         
MFMS1420  MOVE      SAVCOD01,ADMNTYPE
          PACK      PMFMCODE,PREFCHAR,ANS,ADMNTYPE,SP20
          PACK      KEY18,PMFMHOSP,PMFMSYST,PMFMRSUB,PMFMCODE
          CALL      RDPMFMS1                     * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY18,KEY18             * no
            CALL      RDPMFMS1                   * re-read original record
            BRANCH    OVRCD,MFMS9500             * shouldn't happen
            GOTO      MFMS1410
          ELSE
            MOVE      SAVKEY18,KEY18             * delete record
            CALL      DEPMFMS1
          ENDIF
          GOTO      MFMS9500
.
.         Processing a "Journal" record.
.         If PTCNJFEE is set to "1", then PMFMCODE is made up of Claim Code
.         (Cat CL) + Journal Code (Cat J).
.         If PTCNJFEE is set to "0", then PMFMCODE is the Journal Code (Cat J).
.
MFMS3000  IF        PTCNJFEE = 1
            UNPACK    PMFMCODE,CLAMCODE,JRNLCODE
.
            PACK      SAVCOD01,CLAMCODE,SP8      * save current code
            PACK      SAVCOD02,JRNLCODE,SP8      * save current code
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSC,ANSL,SP10    * set to Category CL
            PACK      CODEDFLD,CLAMCODE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD01         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSJ,SP10         * set to Category J
            PACK      CODEDFLD,JRNLCODE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD02         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            BRANCH    UPDTFLAG,MFMS0500          * no mappings
.
.           Need to update this record, so first see if any of the fields
.           to be updated were part of the key.  
.
            BRANCH    KEYFIELD,MFMS3020          * key fields changed
.
.           Just need to update the current record  
.
MFMS3010    MOVE      SAVCOD01,CLAMCODE
            MOVE      SAVCOD02,JRNLCODE
            PACK      PMFMCODE,CLAMCODE,JRNLCODE,SP20
            CALL      UPPMFMS1                   * update record
            GOTO      MFMS9500
.
.           The key has changed, so check if the new key already exists
.         
MFMS3020    MOVE      SAVCOD01,CLAMCODE
            MOVE      SAVCOD02,JRNLCODE
            PACK      PMFMCODE,CLAMCODE,JRNLCODE,SP20
            PACK      KEY18,PMFMHOSP,PMFMSYST,PMFMRSUB,PMFMCODE
            CALL      RDPMFMS1                   * new record already on file ?
            IF        OVRCD = 1                    
              MOVE      SAVKEY18,KEY18           * no
              CALL      RDPMFMS1                 * re-read original record
              BRANCH    OVRCD,MFMS9500           * shouldn't happen
              GOTO      MFMS3010
            ELSE
              MOVE      SAVKEY18,KEY18           * delete record
              CALL      DEPMFMS1
            ENDIF
          ELSE
            MOVE      PMFMCODE,JRNLCODE
.
            PACK      SAVCOD01,JRNLCODE,SP8      * save current code
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSJ,SP10         * set to Category J
            PACK      CODEDFLD,JRNLCODE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD01         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            BRANCH    UPDTFLAG,MFMS0500          * no mappings
.
.           Need to update this record, so first see if any of the fields
.           to be updated were part of the key.  
.
            BRANCH    KEYFIELD,MFMS3040          * key fields changed
.
.           Just need to update the current record  
.
MFMS3030    MOVE      SAVCOD01,JRNLCODE
            PACK      PMFMCODE,JRNLCODE,SP20
            CALL      UPPMFMS1                   * update record
            GOTO      MFMS9500
.
.           The key has changed, so check if the new key already exists
.         
MFMS3040    MOVE      SAVCOD01,JRNLCODE
            PACK      PMFMCODE,JRNLCODE,SP20
            PACK      KEY18,PMFMHOSP,PMFMSYST,PMFMRSUB,PMFMCODE
            CALL      RDPMFMS1                   * new record already on file ?
            IF        OVRCD = 1                    
              MOVE      SAVKEY18,KEY18           * no
              CALL      RDPMFMS1                 * re-read original record
              BRANCH    OVRCD,MFMS9500           * shouldn't happen
              GOTO      MFMS3030
            ELSE
              MOVE      SAVKEY18,KEY18           * delete record
              CALL      DEPMFMS1
            ENDIF
          ENDIF
.
MFMS9500  MOVE      SAVKEY18,KEY18
          GOTO      MFMS0200                     * get next record
.
MFMS9999  RETURN
+
.*****************************************************************************
.*                              PFND0000              Called by: PROC0000    *
.*       Loop through patfn1af and fix any relevant coded fields             *
.*****************************************************************************
.
PFND0000  DISPLAY   *P12:24,*EL,"patfn1af:";
.
          MOVE      SP20,KEY14
PFND0200  CALL      RDSFUND1                     * position at start of file
PFND0500  CALL      RDKFUND1                     * read next record
          BRANCH    OVRCD,PFND9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,HCODE,HFTABL
          PACK      SAVKEY14,HCODE,HFTABL
          PACK      SAVCOD01,HFTABL,SP8          * save current code
          PACK      SAVCOD02,HCODE,SP8           * save current code
          PACK      SAVCOD03,PTHFBCAT,SP8        * save current code
          PACK      SAVCOD04,PTHFHGRP,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check HFTABL
.
          MOVE      THREE,CODETYPE               * set for health fund table
          PACK      CATEGORY,HCODE,SP10          * set health fund
          PACK      CODEDFLD,HFTABL,SP10         * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PFND1000                * no
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                  * set key field flag
.
.         Check HCODE
.
PFND1000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,HCODE,SP10          * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PFND2000                * no 
.
          MOVE      NEWCODE,SAVCOD02             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTHFBCAT
.
PFND2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSH,ANST,SP10      * set to Category HT
          PACK      CODEDFLD,PTHFBCAT,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PFND3000                * no 
.
          MOVE      NEWCODE,SAVCOD03             * yes - load new code
.
.         Check PTHFHGRP
.
PFND3000  MOVE      FOUR,CODETYPE                * set for health fund group
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PTHFHGRP,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PFND9000                * no 
.
          MOVE      NEWCODE,SAVCOD04             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PFND9000  BRANCH    UPDTFLAG,PFND0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PFND9200            * key fields changed
.
.         Just need to update the current record
.
PFND9100  MOVE      SAVCOD01,HFTABL          
          MOVE      SAVCOD02,HCODE          
          MOVE      SAVCOD03,PTHFBCAT          
          MOVE      SAVCOD04,PTHFHGRP          
          CALL      UPFUND1                      * update record
          GOTO      PFND9500
.
.         The key has changed, so check if the new key already exists
.
PFND9200  MOVE      SAVCOD01,HFTABL          
          MOVE      SAVCOD02,HCODE          
          PACK      KEY14,HCODE,HFTABL
          CALL      RDFUND1                      * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY14,KEY14             * no
            CALL      RDFUND1                    * re-read original record
            BRANCH    OVRCD,PFND9500             * shouldn't happen
            GOTO      PFND9100                   * update record
          ELSE      
            MOVE      SAVKEY14,KEY14             * delete record
            CALL      DEFUND1  
          ENDIF
.
PFND9500  MOVE      SAVKEY14,KEY14
          GOTO      PFND0200                     * get next record
.
PFND9999  RETURN
+
.*****************************************************************************
.*                              PFN20000              Called by: PROC0000    *
.*       Loop through patfn2af and fix any relevant coded fields             *
.*****************************************************************************
.
PFN20000  DISPLAY   *P12:24,*EL,"patfn2af:";
          MOVE      SP6,KEY6
PFN20200  CALL      RSPTFN21                     * position at start of file
PFN20500  CALL      RKPTFN21                     * read next record
          BRANCH    OVRCD,PFN29999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTFNHFND
          PACK      SAVKEY6,PTFNHFND
          PACK      SAVCOD01,PTFNHFND,SP8          * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTFNHFND
.
          MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PTFNHFND,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PFN29000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PFN29000  BRANCH    UPDTFLAG,PFN20500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.  
.
          BRANCH    KEYFIELD,PFN29200            * key fields changed
.
.         Just need to update the current record  
.
PFN29100  MOVE      SAVCOD01,PTFNHFND
          CALL      UPPTFN21                     * update record
          GOTO      PFN29500
.
.         The key has changed, so check if the new key already exists
.
PFN29200  MOVE      SAVCOD01,PTFNHFND
          PACK      KEY6,PTFNHFND
          CALL      RDPTFN21                     * new record already on file ?
          IF        OVRCD = 1   
            MOVE      SAVKEY6,KEY6               * no
            CALL      RDPTFN21                   * re-read original record
            BRANCH    OVRCD,PFN29500             * shouldn't happen
            GOTO      PFN29100
          ELSE
            MOVE      SAVKEY6,KEY6               * delete record
            CALL      DEPTFN21
          ENDIF
.
PFN29500  MOVE      SAVKEY6,KEY6
          GOTO      PFN20200                     * get next record
.
PFN29999  RETURN
+
.*****************************************************************************
.*                              PFXT0000              Called by: PROC0000    *
.*       Loop through patfx1af and fix any relevant coded fields             *
.*****************************************************************************
.
PFXT0000  DISPLAY   *P12:24,*EL,"patfx1af:";
          MOVE      SP6,KEY6
PFXT0200  CALL      RSPTFX11                     * position at start of file
PFXT0500  CALL      RKPTFX11                     * read next record
          BRANCH    OVRCD,PFXT9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTFXHFND
          PACK      SAVKEY6,PTFXHFND
          PACK      SAVCOD01,PTFXHFND,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTFXHFND
.
          MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PTFXHFND,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PFXT9000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PFXT9000  BRANCH    UPDTFLAG,PFXT0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.  
.
          BRANCH    KEYFIELD,PFXT9200            * key fields changed
.
.         Just need to update the current record  
.
PFXT9100  MOVE      SAVCOD01,PTFXHFND          
          CALL      UPPTFX11                     * update record
          GOTO      PFXT9500
.
.         The key has changed, so check if the new key already exists
.
PFXT9200  MOVE      SAVCOD01,PTFXHFND          
          PACK      KEY6,PTFXHFND
          CALL      RDPTFX11                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY6,KEY6               * no
            CALL      RDPTFX11                   * re-read original record
            BRANCH    OVRCD,PFXT9500             * shouldn't happen
            GOTO      PFXT9100
          ELSE
            MOVE      SAVKEY6,KEY6               * delete record
            CALL      DEPTFX11
          ENDIF
.
PFXT9500  MOVE      SAVKEY6,KEY6
          GOTO      PFXT0200                     * get next record
.
PFXT9999  RETURN
+
.*****************************************************************************
.*                              PHCP0000              Called by: PROC0000    *
.*       Loop through pmshcpaf and fix any relevant coded fields             *
.*****************************************************************************
.
PHCP0000  DISPLAY   *P12:24,*EL,"pmshcpaf:";
          MOVE      SP10,KEY10
          CALL      RSPMHCP1                     * position at start of file
PHCP0500  CALL      RKPMHCP1                     * read next record
          BRANCH    OVRCD,PHCP9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PMHCHCPC
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PMHCSPC1
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSD,ANST,SP10      * set to Category DT
          PACK      CODEDFLD,PMHCSPC1,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PHCP1000                * no 
.
          MOVE      NEWCODE,PMHCSPC1             * yes - load new code
.
.         Check PMHCSPC2
.
PHCP1000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSD,ANST,SP10      * set to Category DT
          PACK      CODEDFLD,PMHCSPC2,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PHCP2000                * no 
.
          MOVE      NEWCODE,PMHCSPC2             * yes - load new code
.
.         Check PMHCSPC3
.
PHCP2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSD,ANST,SP10      * set to Category DT
          PACK      CODEDFLD,PMHCSPC3,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PHCP3000                * no 
.
          MOVE      NEWCODE,PMHCSPC3             * yes - load new code
.
.         Check PMHCSPC4
.
PHCP3000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSD,ANST,SP10      * set to Category DT
          PACK      CODEDFLD,PMHCSPC4,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PHCP4000                * no 
.
          MOVE      NEWCODE,PMHCSPC4             * yes - load new code
.
.         Check PMHCSPC5
.
PHCP4000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSD,ANST,SP10      * set to Category DT
          PACK      CODEDFLD,PMHCSPC5,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PHCP9000                * no 
.
          MOVE      NEWCODE,PMHCSPC5             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PHCP9000  BRANCH    UPDTFLAG,PHCP0500            * no mappings
          CALL      UPPMHCP1
          GOTO      PHCP0500                     * get next record
.
PHCP9999  RETURN
+
.*****************************************************************************
.*                              PHPG0000              Called by: PROC0000    *
.*       Loop through pmshpgaf and fix any relevant coded fields             *
.*****************************************************************************
.
PHPG0000  DISPLAY   *P12:24,*EL,"pmshpgaf:";
          MOVE      SP30,KEY23
PHPG0200  CALL      RSPMHPG1                     * position at start of file
PHPG0500  CALL      RKPMHPG1                     * read next record
          BRANCH    OVRCD,PHPG9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PMHPATYP,PMHPCLAM,PMHPFUND,PMHPTABT:
                             PMHPEDAT
          PACK      SAVKEY23,PMHPATYP,PMHPCLAM,PMHPFUND,PMHPTABT,PMHPEDAT
          PACK      SAVCOD01,PMHPATYP,SP8        * save current code
          PACK      SAVCOD02,PMHPCLAM,SP8        * save current code
          PACK      SAVCOD03,PMHPFUND,SP8        * save current code
          PACK      SAVCOD04,PMHPTABT,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PMHPATYP
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,PMHPATYP,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PHPG1000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PMHPCLAM
.
PHPG1000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PMHPCLAM,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PHPG2000                * no 
.
          MOVE      NEWCODE,SAVCOD02             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PMHPFUND
.
PHPG2000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PMHPFUND,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PHPG3000                * no 
.
          MOVE      NEWCODE,SAVCOD03             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PMHPTABT
.
PHPG3000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSH,ANST,SP10      * set to Category HT
          PACK      CODEDFLD,PMHPTABT,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PHPG9000                * no 
.
          MOVE      NEWCODE,SAVCOD04             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PHPG9000  BRANCH    UPDTFLAG,PHPG0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.  
.
          BRANCH    KEYFIELD,PHPG9200            * key fields changed
.
.         Just need to update the current record  
.
PHPG9100  MOVE      SAVCOD01,PMHPATYP          
          MOVE      SAVCOD02,PMHPCLAM          
          MOVE      SAVCOD03,PMHPFUND          
          MOVE      SAVCOD04,PMHPTABT          
          CALL      UPPMHPG1                     * update record
          GOTO      PHPG9500
.
.         The key has changed, so check if the new key already exists
.
PHPG9200  MOVE      SAVCOD01,PMHPATYP          
          MOVE      SAVCOD02,PMHPCLAM          
          MOVE      SAVCOD03,PMHPFUND          
          MOVE      SAVCOD04,PMHPTABT          
          PACK      KEY23,PMHPATYP,PMHPCLAM,PMHPFUND,PMHPTABT,PMHPEDAT
          CALL      RDPMHPG1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY23,KEY23             * no
            CALL      RDPMHPG1                   * re-read original record
            BRANCH    OVRCD,PHPG9500             * shouldn't happen
            GOTO      PHPG9100
          ELSE
            MOVE      SAVKEY23,KEY23             * delete record
            CALL      DEPMHPG1
          ENDIF
.
PHPG9500  MOVE      SAVKEY23,KEY23
          GOTO      PHPG0200                     * get next record
.
PHPG9999  RETURN
+
.*****************************************************************************
.*                              PHPO0000              Called by: PROC0000    *
.*       Loop through pmshpoaf and fix any relevant coded fields             *
.*****************************************************************************
.
PHPO0000  DISPLAY   *P12:24,*EL,"pmshpoaf:";
          MOVE      SP30,KEY26
PHPO0200  CALL      RSPMHPO1                     * position at start of file
PHPO0500  CALL      RKPMHPO1                     * read next record
          BRANCH    OVRCD,PHPO9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PMHOATYP,PMHOCLAM,PMHOFUND,PMHOTABT:
                             PMHOEDAT,PMHOVTYP
          PACK      SAVKEY26,PMHOATYP,PMHOCLAM,PMHOFUND,PMHOTABT,PMHOEDAT:
                             PMHOVTYP
          PACK      SAVCOD01,PMHOATYP,SP8        * save current code
          PACK      SAVCOD02,PMHOCLAM,SP8        * save current code
          PACK      SAVCOD03,PMHOFUND,SP8        * save current code
          PACK      SAVCOD04,PMHOTABT,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PMHOATYP
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,PMHOATYP,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PHPO1000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PMHOCLAM
.
PHPO1000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PMHOCLAM,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PHPO2000                * no 
.
          MOVE      NEWCODE,SAVCOD02             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PMHOFUND
.
PHPO2000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PMHOFUND,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PHPO3000                * no 
.
          MOVE      NEWCODE,SAVCOD03             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PMHOTABT
.
PHPO3000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSH,ANST,SP10      * set to Category HT
          PACK      CODEDFLD,PMHOTABT,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PHPO9000                * no 
.
          MOVE      NEWCODE,SAVCOD04             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PHPO9000  BRANCH    UPDTFLAG,PHPO0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.  
.
          BRANCH    KEYFIELD,PHPO9200            * key fields changed
.
.         Just need to update the current record  
.
PHPO9100  MOVE      SAVCOD01,PMHOATYP          
          MOVE      SAVCOD02,PMHOCLAM          
          MOVE      SAVCOD03,PMHOFUND          
          MOVE      SAVCOD04,PMHOTABT          
          CALL      UPPMHPO1                     * update record
          GOTO      PHPO9500
.
.         The key has changed, so check if the new key already exists
.
PHPO9200  MOVE      SAVCOD01,PMHOATYP          
          MOVE      SAVCOD02,PMHOCLAM          
          MOVE      SAVCOD03,PMHOFUND          
          MOVE      SAVCOD04,PMHOTABT          
          PACK      KEY26,PMHOATYP,PMHOCLAM,PMHOFUND,PMHOTABT,PMHOEDAT,PMHOVTYP
          CALL      RDPMHPO1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY26,KEY26             * no
            CALL      RDPMHPO1                   * re-read original record
            BRANCH    OVRCD,PHPO9500             * shouldn't happen
            GOTO      PHPO9100
          ELSE
            MOVE      SAVKEY26,KEY26             * delete record
            CALL      DEPMHPO1
          ENDIF
.
PHPO9500  MOVE      SAVKEY26,KEY26
          GOTO      PHPO0200                     * get next record
.
PHPO9999  RETURN
+
.*****************************************************************************
.*                              PHDF0000              Called by: PROC0000    *
.*       Loop through pathdfaf and fix any relevant coded fields             *
.*****************************************************************************
.
PHDF0000  DISPLAY   *P12:24,*EL,"pathdfaf:";
          MOVE      SP70,KEY31
PHDF0200  CALL      RSPTHDF1                     * position at start of file
PHDF0500  CALL      RKPTHDF1                     * read next record
          BRANCH    OVRCD,PHDF9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTHDCNID,PTHDCLMN,PTHDHFND,PTHDTABT:
                             PTHDCASM,PTHDEDAY
          PACK      SAVKEY31,PTHDCNID,PTHDCLMN,PTHDHFND,PTHDTABT,PTHDCASM:
                             PTHDEDAY
          PACK      SAVCOD01,PTHDCLMN,SP8        * save current code
          PACK      SAVCOD02,PTHDHFND,SP8        * save current code
          PACK      SAVCOD03,PTHDTABT,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTHDCLMN
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PTHDCLMN,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PHDF1000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTHDHFND
.
PHDF1000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PTHDHFND,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PHDF2000                * no 
.
          MOVE      NEWCODE,SAVCOD02             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTHDTABT
.
PHDF2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSH,ANST,SP10      * set to Category HT
          PACK      CODEDFLD,PTHDTABT,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PHDF9000                * no 
.
          MOVE      NEWCODE,SAVCOD03             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PHDF9000  BRANCH    UPDTFLAG,PHDF0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.  
.
          BRANCH    KEYFIELD,PHDF9200            * key fields changed
.
.         Just need to update the current record  
.
PHDF9100  MOVE      SAVCOD01,PTHDCLMN
          MOVE      SAVCOD02,PTHDHFND
          MOVE      SAVCOD03,PTHDTABT
          CALL      UPPTHDF1                     * update record
          GOTO      PHDF9500
.
.         The key has changed, so check if the new key already exists
.
PHDF9200  MOVE      SAVCOD01,PTHDCLMN
          MOVE      SAVCOD02,PTHDHFND
          MOVE      SAVCOD03,PTHDTABT
          PACK      KEY31,PTHDCNID,PTHDCLMN,PTHDHFND,PTHDTABT,PTHDCASM,PTHDEDAY
          CALL      RDPTHDF1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY31,KEY31             * no
            CALL      RDPTHDF1                   * re-read original record
            BRANCH    OVRCD,PHDF9500             * shouldn't happen
            GOTO      PHDF9100
          ELSE
            MOVE      SAVKEY31,KEY31             * delete record
            CALL      DEPTHDF1
          ENDIF
.
PHDF9500  MOVE      SAVKEY31,KEY31
          GOTO      PHDF0200                     * get next record
.
PHDF9999  RETURN
+
.*****************************************************************************
.*                              PHGR0000              Called by: PROC0000    *
.*       Loop through pathgrpf and fix any relevant coded fields             *
.*****************************************************************************
.
PHGR0000  DISPLAY   *P12:24,*EL,"pathgrpf:";
          MOVE      SP6,KEY6
PHGR0200  CALL      RSPAHGP1                     * position at start of file
PHGR0500  CALL      RKPAHGP1                     * read next record
          BRANCH    OVRCD,PHGR9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTHGCODE
          PACK      SAVKEY6,PTHGCODE
          PACK      SAVCOD01,PTHGCODE,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTHGCODE
.
PHGR1000  MOVE      FOUR,CODETYPE                * set for health fund group
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PTHGCODE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PHGR9000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PHGR9000  BRANCH    UPDTFLAG,PHGR0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.  
.
          BRANCH    KEYFIELD,PHGR9200            * key fields changed
.
.         Just need to update the current record  
.
PHGR9100  MOVE      SAVCOD01,PTHGCODE          
          CALL      UPPAHGP1                     * update record
          GOTO      PHGR9500
.
.         The key has changed, so check if the new key already exists
.
PHGR9200  MOVE      SAVCOD01,PTHGCODE          
          PACK      KEY6,PTHGCODE
          CALL      RDPAHGP1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY6,KEY6               * no
            CALL      RDPAHGP1                   * re-read original record
            BRANCH    OVRCD,PHGR9500             * shouldn't happen
            GOTO      PHGR9100
          ELSE
            MOVE      SAVKEY6,KEY6               * delete record
            CALL      DEPAHGP1
          ENDIF
.
PHGR9500  MOVE      SAVKEY6,KEY6
          GOTO      PHGR0200                     * get next record
.
PHGR9999  RETURN
+
.*****************************************************************************
.*                              PHLF0000              Called by: PROC0000    *
.*       Loop through pathlfaf and fix any relevant coded fields             *
.*****************************************************************************
.
PHLF0000  DISPLAY   *P12:24,*EL,"pathlfaf:";
          MOVE      SP30,KEY27
PHLF0200  CALL      RSPTHLF1                     * position at start of file
PHLF0500  CALL      RKPTHLF1                     * read next record
          BRANCH    OVRCD,PHLF9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTHLCNID,PTHLCLMN,PTHLHFND,PTHLTABT:
                             PTHLCASM
          PACK      SAVKEY27,PTHLCNID,PTHLCLMN,PTHLHFND,PTHLTABT,PTHLCASM
          PACK      SAVCOD01,PTHLCLMN,SP8        * save current code
          PACK      SAVCOD02,PTHLHFND,SP8        * save current code
          PACK      SAVCOD03,PTHLTABT,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTHLCLMN
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PTHLCLMN,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PHLF1000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTHLHFND
.
PHLF1000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PTHLHFND,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PHLF2000                * no 
.
          MOVE      NEWCODE,SAVCOD02             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTHLTABT
.
PHLF2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSH,ANST,SP10      * set to Category HT
          PACK      CODEDFLD,PTHLTABT,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PHLF9000                * no 
.
          MOVE      NEWCODE,SAVCOD03             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PHLF9000  BRANCH    UPDTFLAG,PHLF0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.  
.
          BRANCH    KEYFIELD,PHLF9200            * key fields changed
.
.         Just need to update the current record  
.
PHLF9100  MOVE      SAVCOD01,PTHLCLMN          
          MOVE      SAVCOD02,PTHLHFND          
          MOVE      SAVCOD03,PTHLTABT          
          CALL      UPPTHLF1                     * update record
          GOTO      PHLF9500
.
.         The key has changed, so check if the new key already exists
.
PHLF9200  MOVE      SAVCOD01,PTHLCLMN          
          MOVE      SAVCOD02,PTHLHFND          
          MOVE      SAVCOD03,PTHLTABT          
          PACK      KEY27,PTHLCNID,PTHLCLMN,PTHLHFND,PTHLTABT,PTHLCASM
          CALL      RDPTHLF1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY27,KEY27             * no
            CALL      RDPTHLF1                   * re-read original record
            BRANCH    OVRCD,PHLF9500             * shouldn't happen
            GOTO      PHLF9100
          ELSE
            MOVE      SAVKEY27,KEY27             * delete record
            CALL      DEPTHLF1
          ENDIF
.
PHLF9500  MOVE      SAVKEY27,KEY27
          GOTO      PHLF0200                     * get next record
.
PHLF9999  RETURN
+
.*****************************************************************************
.*                              PHSP0000              Called by: PROC0000    *
.*       Loop through pathspaf and fix any relevant coded fields             *
.*****************************************************************************
.
PHSP0000  DISPLAY   *P12:24,*EL,"pathspaf:";
          MOVE      SP3,KEY3
          CALL      RSPTHSP1                     * position at start of file
PHSP0500  CALL      RKPTHSP1                     * read next record
          BRANCH    OVRCD,PHSP9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTHSHOSP
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTHSDCLM
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PTHSDCLM,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PHSP9000                * no 
.
          MOVE      NEWCODE,PTHSDCLM             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PHSP9000  BRANCH    UPDTFLAG,PHSP0500            * no mappings
          CALL      UPPTHSP1
          GOTO      PHSP0500                     * get next record
.
PHSP9999  RETURN
+
.*****************************************************************************
.*                              PIBL0000              Called by: PROC0000    *
.*       Loop through patiblaf and fix any relevant coded fields             *
.*****************************************************************************
.
PIBL0000  DISPLAY   *P12:24,*EL,"patiblaf:";
          MOVE      SP20,KEY19
PIBL0200  CALL      RSPTIBL1                     * position at start of file
PIBL0500  CALL      RKPTIBL1                     * read next record
          BRANCH    OVRCD,PIBL9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTIBADMN,PTIBINVN,PTIBBRCD
          PACK      SAVKEY19,PTIBADMN,PTIBINVN,PTIBBRCD
          PACK      SAVCOD01,PTIBBRCD,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTIBBRCD
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSF,ANSI,SP10      * set to Category FI
          PACK      CODEDFLD,PTIBBRCD,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PIBL9000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PIBL9000  BRANCH    UPDTFLAG,PIBL0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.  
.
          BRANCH    KEYFIELD,PIBL9200            * key fields changed
.
.         Just need to update the current record  
.
PIBL9100  MOVE      SAVCOD01,PTIBBRCD
          CALL      UPPTIBL1                     * update record
          GOTO      PIBL9500
.
.         The key has changed, so check if the new key already exists
.
PIBL9200  MOVE      SAVCOD01,PTIBBRCD
          PACK      KEY19,PTIBADMN,PTIBINVN,PTIBBRCD
          CALL      RDPTIBL1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY19,KEY19             * no
            CALL      RDPTIBL1                   * re-read original record
            BRANCH    OVRCD,PIBL9500             * shouldn't happen
            GOTO      PIBL9100
          ELSE
            MOVE      SAVKEY19,KEY19             * delete record
            CALL      DEPTIBL1
          ENDIF
.
PIBL9500  MOVE      SAVKEY19,KEY19
          GOTO      PIBL0200                     * get next record
.
PIBL9999  RETURN
+
.*****************************************************************************
.*                              PINL0000              Called by: PROC0000    *
.*       Loop through patinlaf and fix any relevant coded fields             *
.*****************************************************************************
.
PINL0000  DISPLAY   *P12:24,*EL,"patinlaf:";
          MOVE      SP30,KEY21
PINL0200  CALL      RSPTINL1                     * position at start of file
PINL0500  CALL      RKPTINL1                     * read next record
          BRANCH    OVRCD,PINL9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTILINVN,PTILTYPE,PTILGRP,PTILCODE
          PACK      SAVKEY21,PTILINVN,PTILTYPE,PTILGRP,PTILCODE
          PACK      SAVCOD01,PTILGRP,SP8         * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTILGRP
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSF,ANSI,SP10      * set to Category FI
          PACK      CODEDFLD,PTILGRP,SP10        * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PINL9000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PINL9000  BRANCH    UPDTFLAG,PINL0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.  
.
          BRANCH    KEYFIELD,PINL9200            * key fields changed
.
.         Just need to update the current record  
.
PINL9100  MOVE      SAVCOD01,PTILGRP          
          CALL      UPPTINL1                     * update record
          GOTO      PINL9500
.
.         The key has changed, so check if the new key already exists
.
PINL9200  MOVE      SAVCOD01,PTILGRP          
          PACK      KEY21,PTILINVN,PTILTYPE,PTILGRP,PTILCODE
          CALL      RDPTINL1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY21,KEY21             * no
            CALL      RDPTINL1                   * re-read original record
            BRANCH    OVRCD,PINL9500             * shouldn't happen
            GOTO      PINL9100
          ELSE
            MOVE      SAVKEY21,KEY21             * delete record
            CALL      DEPTINL1
          ENDIF
.
PINL9500  MOVE      SAVKEY21,KEY21
          GOTO      PINL0200                     * get next record
.
PINL9999  RETURN
+
.*****************************************************************************
.*                              PINM0000              Called by: PROC0000    *
.*       Loop through patinmaf and fix any relevant coded fields             *
.*****************************************************************************
.
PINM0000  DISPLAY   *P12:24,*EL,"patinmaf:";
          MOVE      SP4,KEY4
PINM0200  CALL      RSPTINM1                     * position at start of file
PINM0500  CALL      RKPTINM1                     * read next record
          BRANCH    OVRCD,PINM9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTIMSYS,PTIMCLM 
          PACK      SAVKEY4,PTIMSYS,PTIMCLM
          PACK      SAVCOD01,PTIMCLM,SP8         * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTIMCLM
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PTIMCLM,SP10        * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PINM9000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PINM9000  BRANCH    UPDTFLAG,PINM0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.  
.
          BRANCH    KEYFIELD,PINM9200            * key fields changed
.
.         Just need to update the current record  
.
PINM9100  MOVE      SAVCOD01,PTIMCLM
          CALL      UPPTINM1                     * update record
          GOTO      PINM9500
.
.         The key has changed, so check if the new key already exists
.
PINM9200  MOVE      SAVCOD01,PTIMCLM
          PACK      KEY4,PTIMSYS,PTIMCLM
          CALL      RDPTINM1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY4,KEY4               * no
            CALL      RDPTINM1                   * re-read original record
            BRANCH    OVRCD,PINM9500             * shouldn't happen
            GOTO      PINM9100
          ELSE
            MOVE      SAVKEY4,KEY4               * delete record
            CALL      DEPTINM1
          ENDIF
.
PINM9500  MOVE      SAVKEY4,KEY4
          GOTO      PINM0200                     * get next record
.
PINM9999  RETURN
+
.*****************************************************************************
.*                              PINV0000              Called by: PROC0000    *
.*       Loop through patinvrf and fix any relevant coded fields             *
.*****************************************************************************
.
PINV0000  DISPLAY   *P12:24,*EL,"patinvrf:";
          MOVE      SP8,KEY8
          CALL      RSPTINV1                     * position at start of file
PINV0500  CALL      RKPTINV1                     * read next record
          BRANCH    OVRCD,PINV9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PINVNO
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PINVCLM
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PINVCLM,SP10        * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PINV9000                * no 
.
          MOVE      NEWCODE,PINVCLM              * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PINV9000  BRANCH    UPDTFLAG,PINV0500            * no mappings
          CALL      UPPTINV1
          GOTO      PINV0500                     * get next record
.
PINV9999  RETURN
+
.*****************************************************************************
.*                              PIOV0000              Called by: PROC0000    *
.*       Loop through patiovaf and fix any relevant coded fields             *
.*****************************************************************************
.
PIOV0000  DISPLAY   *P12:24,*EL,"patiovaf:";
          MOVE      SP30,KEY30
PIOV0200  CALL      RSPTIOV1                     * position at start of file
PIOV0500  CALL      RKPTIOV1                     * read next record
          BRANCH    OVRCD,PIOV9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTIOCNID,PTIOCODE,PTIOFUND,PTIOTBLT:
                             PTIOCSCD,PTIOBRCD
          PACK      SAVKEY30,PTIOCNID,PTIOCODE,PTIOFUND,PTIOTBLT,PTIOCSCD:
                             PTIOBRCD
          PACK      SAVCOD01,PTIOCODE,SP8        * save current code
          PACK      SAVCOD02,PTIOFUND,SP8        * save current code
          PACK      SAVCOD03,PTIOTBLT,SP8        * save current code
          PACK      SAVCOD04,PTIOBRCD,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTIOCODE
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PTIOCODE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PIOV1000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTIOFUND
.
PIOV1000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PTIOFUND,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PIOV2000                * no 
.
          MOVE      NEWCODE,SAVCOD02             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTIOTBLT
.
PIOV2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSH,ANST,SP10      * set to Category HT
          PACK      CODEDFLD,PTIOTBLT,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PIOV3000                * no 
.
          MOVE      NEWCODE,SAVCOD03             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTIOBRCD
.
PIOV3000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSF,ANSI,SP10      * set to Category FI
          PACK      CODEDFLD,PTIOBRCD,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PIOV9000                * no 
.
          MOVE      NEWCODE,SAVCOD04             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PIOV9000  BRANCH    UPDTFLAG,PIOV0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.  
.
          BRANCH    KEYFIELD,PIOV9200            * key fields changed
.
.         Just need to update the current record  
.
PIOV9100  MOVE      SAVCOD01,PTIOCODE
          MOVE      SAVCOD02,PTIOFUND
          MOVE      SAVCOD03,PTIOTBLT
          MOVE      SAVCOD04,PTIOBRCD
          CALL      UPPTIOV1                     * update record
          GOTO      PIOV9500
.
.         The key has changed, so check if the new key already exists
.
PIOV9200  MOVE      SAVCOD01,PTIOCODE
          MOVE      SAVCOD02,PTIOFUND
          MOVE      SAVCOD03,PTIOTBLT
          MOVE      SAVCOD04,PTIOBRCD
          PACK      KEY30,PTIOCNID,PTIOCODE,PTIOFUND,PTIOTBLT,PTIOCSCD,PTIOBRCD
          CALL      RDPTIOV1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY30,KEY30             * no
            CALL      RDPTIOV1                   * re-read original record
            BRANCH    OVRCD,PIOV9500             * shouldn't happen
            GOTO      PIOV9100
          ELSE
            MOVE      SAVKEY30,KEY30             * delete record
            CALL      DEPTIOV1
          ENDIF
.
PIOV9500  MOVE      SAVKEY30,KEY30
          GOTO      PIOV0200                     * get next record
.
PIOV9999  RETURN
+
.*****************************************************************************
.*                              PITM0000              Called by: PROC0000    *
.*       Loop through patitemn and fix any relevant coded fields             *
.*****************************************************************************
.
PITM0000  DISPLAY   *P12:24,*EL,"patitemn:";
          MOVE      SP9,KEY9
          CALL      RDSITEM1                     * position at start of file
PITM0500  CALL      RDKITEM1                     * read next record
          BRANCH    OVRCD,PITM9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,ITEMNO
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check IMISGRP
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSF,ANSI,SP10      * set to Category FI
          PACK      CODEDFLD,IMISGRP,SP10        * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PITM1000                * no 
.
          MOVE      NEWCODE,IMISGRP              * yes - load new code
.
.         Check ICLSS
.
PITM1000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,ICLSS,SP10          * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PITM2000                * no 
.
          MOVE      NEWCODE,ICLSS                * yes - load new code
.
.         Check PTITDCSC
.
PITM2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,PTITDCSC,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PITM3000                * no 
.
          MOVE      NEWCODE,PTITDCSC             * yes - load new code
.
.         Check PTITTCER
.
PITM3000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,CATCR,SP10          * set to Category cr
          PACK      CODEDFLD,PTITTCER,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PITM9000                * no 
.
          MOVE      NEWCODE,PTITTCER             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PITM9000  BRANCH    UPDTFLAG,PITM0500            * no mappings
          CALL      UPITEM1
          GOTO      PITM0500                     * get next record
.
PITM9999  RETURN
+
.*****************************************************************************
.*                              PJRN0000              Called by: PROC0000    *
.*       Loop through patjrnlf and fix any relevant coded fields             *
.*****************************************************************************
.
PJRN0000  DISPLAY   *P12:24,*EL,"patjrnlf:";
          MOVE      SP30,KEY24
PJRN0200  CALL      RDSJRNL1                     * position at start of file
PJRN0500  CALL      RDKJRNL1                     * read next record
          BRANCH    OVRCD,PJRN9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,JCODE,JDATE,JADMN,JTRNS
          PACK      SAVKEY24,JCODE,JDATE,JADMN,JTRNS
          PACK      SAVCOD01,JCODE,SP8           * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check JCODE
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSJ,SP10           * set to Category J
          PACK      CODEDFLD,JCODE,SP10          * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PJRN9000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PJRN9000  BRANCH    UPDTFLAG,PJRN0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.  
.
          BRANCH    KEYFIELD,PJRN9200            * key fields changed
.
.         Just need to update the current record  
.
PJRN9100  MOVE      SAVCOD01,JCODE
          CALL      UPJRNL1                      * update record
          GOTO      PJRN9500
.
.         The key has changed, so check if the new key already exists
.         
PJRN9200  MOVE      SAVCOD01,JCODE
          PACK      KEY24,JCODE,JDATE,JADMN,JTRNS
          CALL      RDJRNL1                      * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY24,KEY24             * no
            CALL      RDJRNL1                    * re-read original record
            BRANCH    OVRCD,PJRN9500             * shouldn't happen 
            GOTO      PJRN9100
          ELSE
            MOVE      SAVKEY24,KEY24             * delete record
            CALL      DEJRNL1 
          ENDIF
.
PJRN9500  MOVE      SAVKEY24,KEY24
          GOTO      PJRN0200                     * get next record
.
PJRN9999  RETURN
+
.*****************************************************************************
.*                              PLDF0000              Called by: PROC0000    *
.*       Loop through patldfaf and fix any relevant coded fields             *
.*****************************************************************************
.
PLDF0000  DISPLAY   *P12:24,*EL,"patldfaf:";
          MOVE      SP70,KEY31
PLDF0200  CALL      RSPTLDF1                     * position at start of file
PLDF0500  CALL      RKPTLDF1                     * read next record
          BRANCH    OVRCD,PLDF9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTLDCNID,PTLDCLMN,PTLDHFND,PTLDTABT:
                             PTLDCASM,PTLDEDAY
          PACK      SAVKEY31,PTLDCNID,PTLDCLMN,PTLDHFND,PTLDTABT,PTLDCASM:
                             PTLDEDAY
          PACK      SAVCOD01,PTLDCLMN,SP8        * save current code
          PACK      SAVCOD02,PTLDHFND,SP8        * save current code
          PACK      SAVCOD03,PTLDTABT,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTLDCLMN
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PTLDCLMN,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PLDF1000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTLDHFND
.
PLDF1000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PTLDHFND,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PLDF2000                * no 
.
          MOVE      NEWCODE,SAVCOD02             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTLDTABT
.
PLDF2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSH,ANST,SP10      * set to Category HT
          PACK      CODEDFLD,PTLDTABT,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PLDF9000                * no 
.
          MOVE      NEWCODE,SAVCOD03             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PLDF9000  BRANCH    UPDTFLAG,PLDF0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.  
.
          BRANCH    KEYFIELD,PLDF9200            * key fields changed
.
.         Just need to update the current record  
.
PLDF9100  MOVE      SAVCOD01,PTLDCLMN             
          MOVE      SAVCOD02,PTLDHFND             
          MOVE      SAVCOD03,PTLDTABT             
          CALL      UPPTLDF1                     * update record
          GOTO      PLDF9500
.
.         The key has changed, so check if the new key already exists
.                               
PLDF9200  MOVE      SAVCOD01,PTLDCLMN             
          MOVE      SAVCOD02,PTLDHFND             
          MOVE      SAVCOD03,PTLDTABT             
          PACK      KEY31,PTLDCNID,PTLDCLMN,PTLDHFND,PTLDTABT,PTLDCASM,PTLDEDAY
          CALL      RDPTLDF1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY31,KEY31             * no
            CALL      RDPTLDF1                   * re-read original record
            BRANCH    OVRCD,PLDF9500             * shouldn't happen  
            GOTO      PLDF9100
          ELSE
            MOVE      SAVKEY31,KEY31             * delete record
            CALL      DEPTLDF1
          ENDIF
.
PLDF9500  MOVE      SAVKEY31,KEY31
          GOTO      PLDF0200                     * get next record
.
PLDF9999  RETURN
+
.*****************************************************************************
.*                              PLIS0000              Called by: PROC0000    *
.*       Loop through patlisaf and fix any relevant coded fields             *
.*****************************************************************************
.
PLIS0000  DISPLAY   *P12:24,*EL,"patlisaf:";
          MOVE      SP20,KEY14
PLIS0200  CALL      RSPTLIS1                     * position at start of file
PLIS0500  CALL      RKPTLIS1                     * read next record
          BRANCH    OVRCD,PLIS9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTLIFUND,PTLITABL
          PACK      SAVKEY14,PTLIFUND,PTLITABL
          PACK      SAVCOD01,PTLITABL,SP8        * save current code
          PACK      SAVCOD02,PTLIFUND,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTLITABL
.
          MOVE      THREE,CODETYPE               * set for health fund table
          PACK      CATEGORY,PTLIFUND,SP10       * set health fund
          PACK      CODEDFLD,PTLITABL,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PLIS1000                * no
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTLIFUND
.
PLIS1000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PTLIFUND,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PLIS9000                * no 
.
          MOVE      NEWCODE,SAVCOD02             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PLIS9000  BRANCH    UPDTFLAG,PLIS0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.  
.
          BRANCH    KEYFIELD,PLIS9200            * key fields changed
.
.         Just need to update the current record  
.
PLIS9100  MOVE      SAVCOD01,PTLIFUND             
          MOVE      SAVCOD02,PTLITABL             
          CALL      UPPTLIS1                     * update record
          GOTO      PLIS9500
.
.         The key has changed, so check if the new key already exists
.
PLIS9200  MOVE      SAVCOD01,PTLIFUND             
          MOVE      SAVCOD02,PTLITABL             
          PACK      KEY14,PTLIFUND,PTLITABL
          CALL      RDPTLIS1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY14,KEY14             * no
            CALL      RDPTLIS1                   * re-read original record
            BRANCH    OVRCD,PLIS9500             * shouldn't happen
            GOTO      PLIS9100
          ELSE
            MOVE      SAVKEY14,KEY14             * delete record
            CALL      DEPTLIS1
          ENDIF
.
PLIS9500  MOVE      SAVKEY14,KEY14
          GOTO      PLIS0200                     * get next record
.
PLIS9999  RETURN
+
.*****************************************************************************
.*                              PLSD0000              Called by: PROC0000    *
.*       Loop through patlsdaf and fix any relevant coded fields             *
.*****************************************************************************
.
PLSD0000  DISPLAY   *P12:24,*EL,"patlsdaf:";
          MOVE      SP30,KEY27
PLSD0200  CALL      RSPTLSD1                     * position at start of file
PLSD0500  CALL      RKPTLSD1                     * read next record
          BRANCH    OVRCD,PLSD9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTLSCNID,PTLSCLMN,PTLSHFND,PTLSTABT:
                             PTLSCASM
          PACK      SAVKEY27,PTLSCNID,PTLSCLMN,PTLSHFND,PTLSTABT,PTLSCASM
          PACK      SAVCOD01,PTLSCLMN,SP8        * save current code
          PACK      SAVCOD02,PTLSHFND,SP8        * save current code
          PACK      SAVCOD03,PTLSTABT,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTLSCLMN
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PTLSCLMN,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PLSD1000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTLSHFND
.
PLSD1000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PTLSHFND,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PLSD2000                * no 
.
          MOVE      NEWCODE,SAVCOD02             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTLSTABT
.
PLSD2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSH,ANST,SP10      * set to Category HT
          PACK      CODEDFLD,PTLSTABT,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PLSD9000                * no 
.
          MOVE      NEWCODE,SAVCOD03             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PLSD9000  BRANCH    UPDTFLAG,PLSD0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PLSD9200            * key fields changed
.           
.         Just need to update the current record
.
PLSD9100  MOVE      SAVCOD01,PTLSCLMN             
          MOVE      SAVCOD02,PTLSHFND             
          MOVE      SAVCOD03,PTLSTABT             
          CALL      UPPTLSD1                     * update record
          GOTO      PLSD9500
.
.         The key has changed, so check if the new key already exists
.
PLSD9200  MOVE      SAVCOD01,PTLSCLMN             
          MOVE      SAVCOD02,PTLSHFND             
          MOVE      SAVCOD03,PTLSTABT             
          PACK      KEY27,PTLSCNID,PTLSCLMN,PTLSHFND,PTLSTABT,PTLSCASM
          CALL      RDPTLSD1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY27,KEY27             * no
            CALL      RDPTLSD1                   * re-read original record
            BRANCH    OVRCD,PLSD9500             * shouldn't happen
            GOTO      PLSD9100
          ELSE
            MOVE      SAVKEY27,KEY27             * delete record
            CALL      DEPTLSD1
          ENDIF
.
PLSD9500  MOVE      SAVKEY27,KEY27
          GOTO      PLSD0200                     * get next record
.
PLSD9999  RETURN
+
.*****************************************************************************
.*                              PLTF0000              Called by: PROC0000    *
.*       Loop through pmsltfaf and fix any relevant coded fields             *
.*****************************************************************************
.
PLTF0000  DISPLAY   *P12:24,*EL,"pmsltfaf:";
          MOVE      SP4,KEY4
PLTF0200  CALL      RSPMLTF1                     * position at start of file
PLTF0500  CALL      RKPMLTF1                     * read next record
          BRANCH    OVRCD,PLTF9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PMLTSEID
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PMLTCCFR
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PMLTCCFR,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PLTF1000                * no 
.
          MOVE      NEWCODE,PMLTCCFR             * yes - load new code
.
.         Check PMLTCCTO
.
PLTF1000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PMLTCCTO,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PLTF2000                * no 
.
          MOVE      NEWCODE,PMLTCCTO             * yes - load new code
.
.         Check PMLTATFR
.
PLTF2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,PMLTATFR,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PLTF3000                * no 
.
          MOVE      NEWCODE,PMLTATFR             * yes - load new code
.
.         Check PMLTATTO
.
PLTF3000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,PMLTATTO,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PLTF4000                * no 
.
          MOVE      NEWCODE,PMLTATTO             * yes - load new code
.
.         Check PMLTHFUN
.
PLTF4000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PMLTHFUN,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PLTF9000                * no 
.
          MOVE      NEWCODE,PMLTHFUN             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PLTF9000  BRANCH    UPDTFLAG,PLTF0500            * no mappings
          CALL      UPPMLTF1                     * update record
          GOTO      PLTF0500                     * get next record
.
PLTF9999  RETURN
+
.*****************************************************************************
.*                              PMAS0000              Called by: PROC0000    *
.*       Loop through patma1af and fix any relevant coded fields             *
.*****************************************************************************
.
PMAS0000  DISPLAY   *P12:24,*EL,"patma1af:";
          MOVE      SP8,KEY8
          CALL      RDSMAST1                     * position at start of file
PMAS0500  CALL      RDKMAST1                     * read next record
          BRANCH    OVRCD,PMAS9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PURNO
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PFNDTB
.
          MOVE      THREE,CODETYPE               * set for health fund table
          PACK      CATEGORY,PFUNDH,SP10         * set health fund
          PACK      CODEDFLD,PFNDTB,SP10         * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PMAS1000                * no
.
          MOVE      NEWCODE,PFNDTB               * yes - load new code
.
.         Check PFUNDH
.
PMAS1000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PFUNDH,SP10         * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PMAS2000                * no 
.
          MOVE      NEWCODE,PFUNDH               * yes - load new code
.
.         Check PREG
.
PMAS2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSR,SP1,SP10       * set to Category R
          PACK      CODEDFLD,PREG,SP10           * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PMAS9000                * no 
.
          MOVE      NEWCODE,PREG                 * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PMAS9000  BRANCH    UPDTFLAG,PMAS0500            * no mappings
          CALL      UPMAST1
          GOTO      PMAS0500                     * get next record
.
PMAS9999  RETURN
+
.*****************************************************************************
.*                              PMCH0000              Called by: PROC0000    *
.*       Loop through patmchgf and fix any relevant coded fields             *
.*****************************************************************************
.
PMCH0000  DISPLAY   *P12:24,*EL,"patmchgf:";
          PACK      KEY29,SP30,SP10                                   *C-233046
PMCH0200  CALL      RDSMCHG1                     * position at start of file
PMCH0500  CALL      RDKMCHG1                     * read next record
          BRANCH    OVRCD,PMCH9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,MCLMCOD,MHFUND,PTMCHFTT,MCHARGE,PTMCEFDT
          PACK      SAVKEY29,MCLMCOD,MHFUND,PTMCHFTT,MCHARGE,PTMCEFDT
          PACK      SAVCOD01,MCLMCOD,SP8         * save current code
          PACK      SAVCOD02,PTMCHFTT,SP8        * save current code
          PACK      SAVCOD03,MHFUND,SP8          * save current code
          PACK      SAVCOD04,MMSCGRP,SP8         * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check MCLMCOD
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,MCLMCOD,SP10        * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PMCH1000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTMCHFTT      (was MHFTAB)
.
PMCH1000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSH,ANST,SP10      * set to Category HT
          PACK      CODEDFLD,PTMCHFTT,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PMCH2000                * no 
.
          MOVE      NEWCODE,SAVCOD02             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check MHFUND
.
PMCH2000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,MHFUND,SP10         * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PMCH3000                * no 
.
          MOVE      NEWCODE,SAVCOD03             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check MMSCGRP
.
PMCH3000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSF,ANSI,SP10      * set to Category FI
          PACK      CODEDFLD,MMSCGRP,SP10        * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PMCH9000                * no 
.
          MOVE      NEWCODE,SAVCOD04             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PMCH9000  BRANCH    UPDTFLAG,PMCH0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PMCH9200            * key fields changed
.           
.         Just need to update the current record
.
PMCH9100  MOVE      SAVCOD01,MCLMCOD             
          MOVE      SAVCOD02,PTMCHFTT           
          MOVE      SAVCOD03,MHFUND             
          MOVE      SAVCOD04,MMSCGRP             
          CALL      UPMCHG1                      * update record
          GOTO      PMCH9500
.
.         The key has changed, so check if the new key already exists
.
PMCH9200  MOVE      SAVCOD01,MCLMCOD             
          MOVE      SAVCOD02,PTMCHFTT           
          MOVE      SAVCOD03,MHFUND             
          PACK      KEY29,MCLMCOD,MHFUND,PTMCHFTT,MCHARGE,PTMCEFDT
          CALL      RDMCHG1                      * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY29,KEY29             * no
            CALL      RDMCHG1                    * re-read original record
            BRANCH    OVRCD,PMCH9500             * shouldn't happen
            GOTO      PMCH9100
          ELSE
            MOVE      SAVKEY29,KEY29             * delete record
            CALL      DEMCHG1 
          ENDIF
.
PMCH9500  MOVE      SAVKEY29,KEY29
          GOTO      PMCH0200                     * get next record
.
PMCH9999  RETURN
+
.*****************************************************************************
.*                              PMIS0000              Called by: PROC0000    *
.*       Loop through patmi1af and fix any relevant coded fields             *
.*****************************************************************************
.
PMIS0000  DISPLAY   *P12:24,*EL,"patmi1af:";
          MOVE      SP8,KEY8
          CALL      RDSMISS1                     * position at start of file
PMIS0500  CALL      RDKMISS1                     * read next record
          BRANCH    OVRCD,PMIS9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,AADMNO
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check AFNDTB
.
          MOVE      THREE,CODETYPE               * set for health fund table
          PACK      CATEGORY,AFUNDH,SP10         * set health fund
          PACK      CODEDFLD,AFNDTB,SP10         * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PMIS1000                * no
.
          MOVE      NEWCODE,AFNDTB               * yes - load new code
.
.         Check AFUNDH
.
PMIS1000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,AFUNDH,SP10         * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PMIS2000                * no 
.
          MOVE      NEWCODE,AFUNDH               * yes - load new code
.
.         Check ATYPE
.
PMIS2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,ATYPE,SP10          * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PMIS3000                * no 
.
          MOVE      NEWCODE,ATYPE                * yes - load new code
.
.         Check ACARE
.
PMIS3000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSC,SP10      * set to Category CC
          PACK      CODEDFLD,ACARE,SP10          * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PMIS4000                * no 
.
          MOVE      NEWCODE,ACARE                * yes - load new code
.
.         Check ACLAIM
.
PMIS4000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,ACLAIM,SP10         * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PMIS5000                * no 
.
          MOVE      NEWCODE,ACLAIM               * yes - load new code
.
.         Check ACLSS
.
PMIS5000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSP,SP10           * set to Category P
          PACK      CODEDFLD,ACLSS,SP10          * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PMIS6000                * no 
.
          MOVE      NEWCODE,ACLSS                * yes - load new code
.
.         Check ASRCE
.
PMIS6000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSS,SP10           * set to Category S
          PACK      CODEDFLD,ASRCE,SP10          * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PMIS9000                * no 
.
          MOVE      NEWCODE,ASRCE                * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PMIS9000  BRANCH    UPDTFLAG,PMIS0500            * no mappings
          CALL      UPMISS1
          GOTO      PMIS0500                     * get next record
.
PMIS9999  RETURN
+
.*****************************************************************************
.*                              PMPR0000              Called by: PROC0000    *
.*       Loop through pmsmpraf and fix any relevant coded fields             *
.*****************************************************************************
.
PMPR0000  DISPLAY   *P12:24,*EL,"pmsmpraf:";
          MOVE      SP30,KEY28
PMPR0200  CALL      RSPMMPR1                     * position at start of file
PMPR0500  CALL      RKPMMPR1                     * read next record
          BRANCH    OVRCD,PMPR9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PMMPCNID,PMMPCCOD,PMMPHFUN,PMMPHFTY:
                             PMMPMPRC,PMMPCOUN
          PACK      SAVKEY28,PMMPCNID,PMMPCCOD,PMMPHFUN,PMMPHFTY,PMMPMPRC:
                             PMMPCOUN
          PACK      SAVCOD01,PMMPCCOD,SP8        * save current code
          PACK      SAVCOD02,PMMPHFUN,SP8        * save current code
          PACK      SAVCOD03,PMMPHFTY,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PMMPCCOD
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PMMPCCOD,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PMPR1000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PMMPHFUN
.
PMPR1000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PMMPHFUN,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PMPR2000                * no 
.
          MOVE      NEWCODE,SAVCOD02             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PMMPHFTY
.
PMPR2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSH,ANST,SP10      * set to Category HT
          PACK      CODEDFLD,PMMPHFTY,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PMPR9000                * no 
.
          MOVE      NEWCODE,SAVCOD03             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PMPR9000  BRANCH    UPDTFLAG,PMPR0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PMPR9200            * key fields changed
.           
.         Just need to update the current record
.
PMPR9100  MOVE      SAVCOD01,PMMPCCOD
          MOVE      SAVCOD02,PMMPHFUN              
          MOVE      SAVCOD03,PMMPHFTY              
          CALL      UPPMMPR1                     * update record
          GOTO      PMPR9500
.
.         The key has changed, so check if the new key already exists
.
PMPR9200  MOVE      SAVCOD01,PMMPCCOD
          MOVE      SAVCOD02,PMMPHFUN              
          MOVE      SAVCOD03,PMMPHFTY              
          PACK      KEY28,PMMPCNID,PMMPCCOD,PMMPHFUN,PMMPHFTY,PMMPMPRC,PMMPCOUN
          CALL      RDPMMPR1                     * new record already on file ?
          IF        OVRCD = 1   
            MOVE      SAVKEY28,KEY28             * no
            CALL      RDPMMPR1                   * re-read original record
            BRANCH    OVRCD,PMPR9500             * shouldn't happen
            GOTO      PMPR9100
          ELSE
            MOVE      SAVKEY28,KEY28             * delete record
            CALL      DEPMMPR1
          ENDIF
.
PMPR9500  MOVE      SAVKEY28,KEY28
          GOTO      PMPR0200                     * get next record
.
PMPR9999  RETURN
+
.*****************************************************************************
.*                              PMTE0000              Called by: PROC0000    *
.*       Loop through pmsmteaf and fix any relevant coded fields             *
.*****************************************************************************
.
PMTE0000  COMPARE   NINE,CFEETYP
          GOTO      PMTE9999 IF NOT EQUAL       * Not using Johns Hopkins Bedfee
.
          DISPLAY   *P12:24,*EL,"pmsmteaf:";
          OPEN      PMSMTEA1,"pmsmteaf"
.
          MOVE      SP20,KEY14
          CALL      RSPMMTE1                     * position at start of file
PMTE0500  CALL      RKPMMTE1                     * read next record
          BRANCH    OVRCD,PMTE9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PMMIVISN,PMMITRAN
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PMMIMGRP
.
          MOVE      PMMIRTYP,FORM1
          IF        FORM1 = 2 | FORM1 = 3
            MOVE      ONE,CODETYPE                 * set for category-code
            PACK      CATEGORY,ANSF,ANSI,SP10      * set to Category FI
            PACK      CODEDFLD,PMMIMGRP,SP10       * load coded field
            CALL      CMAP0000                     * mapping required ?
            BRANCH    EXIT,PMTE9000                * no 
.
            MOVE      NEWCODE,PMMIMGRP             * yes - load new code
          ENDIF
.
.         Check if there were any mappings and if so, update the record
.
PMTE9000  BRANCH    UPDTFLAG,PMTE0500            * no mappings
          CALL      UPPMMTE1
          GOTO      PMTE0500                     * get next record
.
PMTE9999  RETURN
+
.*****************************************************************************
.*                              PMTI0000              Called by: PROC0000    *
.*       Loop through pmsmtiaf and fix any relevant coded fields             *
.*****************************************************************************
.
PMTI0000  DISPLAY   *P12:24,*EL,"pmsmtiaf:";
          MOVE      SP20,KEY14
          CALL      RSPMMTI1                     * position at start of file
PMTI0500  CALL      RKPMMTI1                     * read next record
          BRANCH    OVRCD,PMTI9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PMMIVISN,PMMITRAN
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PMMIMGRP
.
          MOVE      PMMIRTYP,FORM1
          IF        FORM1 = 2 | FORM1 = 3
            MOVE      ONE,CODETYPE                 * set for category-code
            PACK      CATEGORY,ANSF,ANSI,SP10      * set to Category FI
            PACK      CODEDFLD,PMMIMGRP,SP10       * load coded field
            CALL      CMAP0000                     * mapping required ?
            BRANCH    EXIT,PMTI9000                * no 
.
            MOVE      NEWCODE,PMMIMGRP             * yes - load new code
          ENDIF
.
.         Check if there were any mappings and if so, update the record
.
PMTI9000  BRANCH    UPDTFLAG,PMTI0500            * no mappings
          CALL      UPPMMTI1
          GOTO      PMTI0500                     * get next record
.
PMTI9999  RETURN
+
.*****************************************************************************
.*                              PNIP0000              Called by: PROC0000    *
.*       Loop through patnipbf and fix any relevant coded fields             *
.*****************************************************************************
.
PNIP0000  DISPLAY   *P12:24,*EL,"patnipbf:";
          MOVE      SP20,KEY13
PNIP0200  CALL      RDSNIPB1                     * position at start of file
PNIP0500  CALL      RDKNIPB1                     * read next record
          BRANCH    OVRCD,PNIP9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,NBSYST,NBINDC,NBRESD,NBCOMP,NBINDV 
          PACK      SAVKEY13,NBSYST,NBINDC,NBRESD,NBCOMP,NBINDV
          PACK      SAVCOD01,NBCOMP,SP8          * save current code
          PACK      SAVCOD02,NBITEM,SP8          * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check NBCOMP
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,NBCOMP,SP10         * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PNIP1000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check NBITEM
.
PNIP1000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSF,ANSI,SP10      * set to Category FI
          PACK      CODEDFLD,NBITEM,SP10         * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PNIP9000                * no 
.
          MOVE      NEWCODE,SAVCOD02             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PNIP9000  BRANCH    UPDTFLAG,PNIP0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PNIP9200            * key fields changed
.           
.         Just need to update the current record
.
PNIP9100  MOVE      SAVCOD01,NBCOMP
          MOVE      SAVCOD02,NBITEM
          CALL      UPNIPB1                      * update record
          GOTO      PNIP9500
.
.         The key has changed, so check if the new key already exists
.
PNIP9200  MOVE      SAVCOD01,NBCOMP
          PACK      KEY13,NBSYST,NBINDC,NBRESD,NBCOMP,NBINDV
          CALL      RDNIPB1                      * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY13,KEY13             * no
            CALL      RDNIPB1                    * re-read original record
            BRANCH    OVRCD,PNIP9500             * shouldn't happen
            GOTO      PNIP9100
          ELSE
            MOVE      SAVKEY13,KEY13             * delete record
            CALL      DENIPB1 
          ENDIF
.
PNIP9500  MOVE      SAVKEY13,KEY13
          GOTO      PNIP0200                     * get next record
.
PNIP9999  RETURN
+
.*****************************************************************************
.*                              POVB0000              Called by: PROC0000    *
.*       Loop through patovbaf and fix any relevant coded fields             *
.*****************************************************************************
.
POVB0000  DISPLAY   *P12:24,*EL,"patovbaf:";
          MOVE      SP30,KEY30
POVB0200  CALL      RSPTOVB1                     * position at start of file
POVB0500  CALL      RKPTOVB1                     * read next record
          BRANCH    OVRCD,POVB9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTOBCNID,PTOBCODE,PTOBFUND,PTOBTBLT:
                             PTOBCSCD,PTOBBRCD
          PACK      SAVKEY30,PTOBCNID,PTOBCODE,PTOBFUND,PTOBTBLT,PTOBCSCD:
                             PTOBBRCD
          PACK      SAVCOD01,PTOBCODE,SP8        * save current code
          PACK      SAVCOD02,PTOBFUND,SP8        * save current code
          PACK      SAVCOD03,PTOBTBLT,SP8        * save current code
          PACK      SAVCOD04,PTOBBRCD,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTOBCODE
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PTOBCODE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,POVB1000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTOBFUND
.
POVB1000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PTOBFUND,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,POVB2000                * no 
.
          MOVE      NEWCODE,SAVCOD02             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTOBTBLT
.
POVB2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSH,ANST,SP10      * set to Category HT
          PACK      CODEDFLD,PTOBTBLT,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,POVB3000                * no 
.
          MOVE      NEWCODE,SAVCOD03             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTOBBRCD
.
POVB3000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSF,ANSI,SP10      * set to Category FI
          PACK      CODEDFLD,PTOBBRCD,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,POVB9000                * no 
.
          MOVE      NEWCODE,SAVCOD04             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
POVB9000  BRANCH    UPDTFLAG,POVB0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,POVB9200            * key fields changed
.           
.         Just need to update the current record
.
POVB9100  MOVE      SAVCOD01,PTOBCODE            
          MOVE      SAVCOD02,PTOBFUND            
          MOVE      SAVCOD03,PTOBTBLT            
          MOVE      SAVCOD04,PTOBBRCD            
          CALL      UPPTOVB1                     * update record
          GOTO      POVB9500
.
.         The key has changed, so check if the new key already exists
.
POVB9200  MOVE      SAVCOD01,PTOBCODE            
          MOVE      SAVCOD02,PTOBFUND            
          MOVE      SAVCOD03,PTOBTBLT            
          MOVE      SAVCOD04,PTOBBRCD            
          PACK      KEY30,PTOBCNID,PTOBCODE,PTOBFUND,PTOBTBLT,PTOBCSCD,PTOBBRCD
          CALL      RDPTOVB1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY30,KEY30             * no
            CALL      RDPTOVB1                   * re-read original record
            BRANCH    OVRCD,POVB9500             * shouldn't happen
            GOTO      POVB9100
          ELSE
            MOVE      SAVKEY30,KEY30             * delete record
            CALL      DEPTOVB1
          ENDIF
.
POVB9500  MOVE      SAVKEY30,KEY30
          GOTO      POVB0200                     * get next record
.
POVB9999  RETURN
+
.*****************************************************************************
.*                              PPRA0000              Called by: PROC0000    *
.*       Loop through patpr1af and fix any relevant coded fields             *
.*****************************************************************************
.
PPRA0000  DISPLAY   *P12:24,*EL,"patpr1af:";
          MOVE      SP8,KEY8
          CALL      RDSPRAM1                     * position at start of file
PPRA0500  CALL      RDKPRAM1                     * read next record
          BRANCH    OVRCD,PPRA9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PURNO
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PFNDTB
.
          MOVE      THREE,CODETYPE               * set for health fund table
          PACK      CATEGORY,PFUNDH,SP10         * set health fund
          PACK      CODEDFLD,PFNDTB,SP10         * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PPRA1000                * no
.
          MOVE      NEWCODE,PFNDTB               * yes - load new code
.
.         Check PFUNDH
.
PPRA1000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PFUNDH,SP10         * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PPRA9000                * no 
.
          MOVE      NEWCODE,PFUNDH               * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PPRA9000  BRANCH    UPDTFLAG,PPRA0500            * no mappings
          CALL      UPPRAM1
          GOTO      PPRA0500                     * get next record
.
PPRA9999  RETURN
+
.*****************************************************************************
.*                              PPX20000              Called by: PROC0000    *
.*       Loop through pmspx2af and fix any relevant coded fields             *
.*****************************************************************************
.
PPX20000  DISPLAY   *P12:24,*EL,"pmspx2af:";
          MOVE      SP8,KEY8
          CALL      RSPMPX21                     * position at start of file
PPX20500  CALL      RKPMPX21                     * read next record
          BRANCH    OVRCD,PPX29999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PMPXURNO
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PMPXABRG
.
PPX21000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSV,ANSA,SP10      * set to Category VA
          PACK      CODEDFLD,PMPXABRG,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PPX22000                * no 
.
          MOVE      NEWCODE,PMPXABRG             * yes - load new code
.
.         Check PMPXLNG1
.
PPX22000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSL,ANSA,SP10      * set to Category LA
          PACK      CODEDFLD,PMPXLNG1,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PPX23000                * no 
.
          MOVE      NEWCODE,PMPXLNG1             * yes - load new code
.
.         Check PMPXLNG2
.
PPX23000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSL,ANSA,SP10      * set to Category LA
          PACK      CODEDFLD,PMPXLNG2,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PPX24000                * no 
.
          MOVE      NEWCODE,PMPXLNG2             * yes - load new code
.
.         Check PMPXLNG3
.
PPX24000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSL,ANSA,SP10      * set to Category LA
          PACK      CODEDFLD,PMPXLNG3,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PPX29000                * no 
.
          MOVE      NEWCODE,PMPXLNG3             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PPX29000  BRANCH    UPDTFLAG,PPX20500            * no mappings
          CALL      UPPMPX21
          GOTO      PPX20500                     * get next record
.
PPX29999  RETURN
+
.*****************************************************************************
.*                              PRBL0000              Called by: PROC0000    *
.*       Loop through patrblaf and fix any relevant coded fields             *
.*****************************************************************************
.
PRBL0000  DISPLAY   *P12:24,*EL,"patrblaf:";
          MOVE      SP20,KEY19
PRBL0200  CALL      RSPTRBL1                     * position at start of file
PRBL0500  CALL      RKPTRBL1                     * read next record
          BRANCH    OVRCD,PRBL9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTRBADMN,PTRBINVN,PTRBBRCD
          PACK      SAVKEY19,PTRBADMN,PTRBINVN,PTRBBRCD
          PACK      SAVCOD01,PTRBBRCD,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTRBBRCD
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PTRBBRCD,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PRBL9000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PRBL9000  BRANCH    UPDTFLAG,PRBL0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PRBL9200            * key fields changed
.           
.         Just need to update the current record
.
PRBL9100  MOVE      SAVCOD01,PTRBBRCD
          CALL      UPPTRBL1                     * update record
          GOTO      PRBL9500
.
.         The key has changed, so check if the new key already exists
.
PRBL9200  MOVE      SAVCOD01,PTRBBRCD
          PACK      KEY19,PTRBADMN,PTRBINVN,PTRBBRCD
          CALL      RDPTRBL1                     * new record already on file ?
          IF        OVRCD = 1   
            MOVE      SAVKEY19,KEY19             * no
            CALL      RDPTRBL1                   * re-read original record
            BRANCH    OVRCD,PRBL9500             * shouldn't happen
            GOTO      PRBL9100
          ELSE
            MOVE      SAVKEY19,KEY19             * delete record
            CALL      DEPTRBL1
          ENDIF
.
PRBL9500  MOVE      SAVKEY19,KEY19
          GOTO      PRBL0200                     * get next record
.
PRBL9999  RETURN
+
.*****************************************************************************
.*                              PSGA0000              Called by: PROC0000    *
.*       Loop through pmssgaaf and fix any relevant coded fields             *
.*****************************************************************************
.
PSGA0000  DISPLAY   *P12:24,*EL,"pmssgaaf:";
          MOVE      SP30,KEY26
PSGA0200  CALL      RSPMSGA1                     * position at start of file
PSGA0500  CALL      RKPMSGA1                     * read next record
          BRANCH    OVRCD,PSGA9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PMSGCLMN,PMSGHFND,PMSGHFTB,PMSGICDC
          PACK      SAVKEY26,PMSGCLMN,PMSGHFND,PMSGHFTB,PMSGICDC
          PACK      SAVCOD01,PMSGCLMN,SP8        * save current code
          PACK      SAVCOD02,PMSGHFND,SP8        * save current code
          PACK      SAVCOD03,PMSGHFTB,SP8        * save current code
          PACK      SAVCOD04,PMSGCLSS,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PMSGCLMN
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PMSGCLMN,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PSGA1000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PMSGHFND
.
PSGA1000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PMSGHFND,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PSGA2000                * no  
.
          MOVE      NEWCODE,SAVCOD02             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PMSGHFTB
.
PSGA2000  MOVE      THREE,CODETYPE               * set for health fund table
          PACK      CATEGORY,PMSGHFND,SP10       * set health fund
          PACK      CODEDFLD,PMSGHFTB,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PSGA3000                * no
.
          MOVE      NEWCODE,SAVCOD03             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PMSGCLSS
.
PSGA3000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,PMSGCLSS,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PSGA9000                * no 
.
          MOVE      NEWCODE,SAVCOD04             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PSGA9000  BRANCH    UPDTFLAG,PSGA0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PSGA9200            * key fields changed
.           
.         Just need to update the current record
.
PSGA9100  MOVE      SAVCOD01,PMSGCLMN
          MOVE      SAVCOD02,PMSGHFND
          MOVE      SAVCOD03,PMSGHFTB
          MOVE      SAVCOD04,PMSGCLSS
          CALL      UPPMSGA1                     * update record
          GOTO      PSGA9500
.
.         The key has changed, so check if the new key already exists
.         
PSGA9200  MOVE      SAVCOD01,PMSGCLMN
          MOVE      SAVCOD02,PMSGHFND
          MOVE      SAVCOD03,PMSGHFTB
          PACK      KEY26,PMSGCLMN,PMSGHFND,PMSGHFTB,PMSGICDC
          CALL      RDPMSGA1                     * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY26,KEY26             * no
            CALL      RDPMSGA1                   * re-read original record
            BRANCH    OVRCD,PSGA9500             * shouldn't happen 
            GOTO      PSGA9100
          ELSE
            MOVE      SAVKEY26,KEY26             * delete record
            CALL      DEPMSGA1
          ENDIF
.
PSGA9500  MOVE      SAVKEY26,KEY26
          GOTO      PSGA0200                     * get next record
.
PSGA9999  RETURN
+
.*****************************************************************************
.*                              PSGC0000              Called by: PROC0000    *
.*       Loop through patsgcaf and fix any relevant coded fields             *
.*****************************************************************************
.
PSGC0000  DISPLAY   *P12:24,*EL,"patsgcaf:";
          MOVE      SP20,KEY18
PSGC0200  CALL      RSPTSGC1                     * position at start of file
PSGC0500  CALL      RKPTSGC1                     * read next record
          BRANCH    OVRCD,PSGC9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTSGCLMN,PTSGFUND,PTSGMBS
          PACK      SAVKEY18,PTSGCLMN,PTSGFUND,PTSGMBS
          PACK      SAVCOD01,PTSGCLMN,SP8        * save current code
          PACK      SAVCOD02,PTSGFUND,SP8        * save current code
          PACK      SAVCOD03,PTSGCLSS,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTSGCLMN
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PTSGCLMN,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PSGC1000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTSGFUND
.
PSGC1000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PTSGFUND,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PSGC2000                * no 
.
          MOVE      NEWCODE,SAVCOD02             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTSGCLSS
.
PSGC2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,PTSGCLSS,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PSGC9000                * no 
.
          MOVE      NEWCODE,SAVCOD03             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PSGC9000  BRANCH    UPDTFLAG,PSGC0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PSGC9200            * key fields changed
.           
.         Just need to update the current record
.
PSGC9100  MOVE      SAVCOD01,PTSGCLMN          
          MOVE      SAVCOD02,PTSGFUND          
          MOVE      SAVCOD03,PTSGCLSS          
          CALL      UPPTSGC1                     * update record
          GOTO      PSGC9500
.
.         The key has changed, so check if the new key already exists
.
PSGC9200  MOVE      SAVCOD01,PTSGCLMN          
          MOVE      SAVCOD02,PTSGFUND          
          PACK      KEY18,PTSGCLMN,PTSGFUND,PTSGMBS
          CALL      RDPTSGC1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY18,KEY18             * no
            CALL      RDPTSGC1                   * re-read original record
            BRANCH    OVRCD,PSGC9500             * shouldn't happen
            GOTO      PSGC9100
          ELSE
            MOVE      SAVKEY18,KEY18             * delete record
            CALL      DEPTSGC1
          ENDIF
.
PSGC9500  MOVE      SAVKEY18,KEY18
          GOTO      PSGC0200                     * get next record
.
PSGC9999  RETURN
+
.*****************************************************************************
.*                              PSIN0000              Called by: PROC0000    *
.*       Loop through pmssinaf and fix any relevant coded fields             *
.*****************************************************************************
.
PSIN0000  DISPLAY   *P12:24,*EL,"pmssinaf:";
          MOVE      SP30,KEY30
PSIN0200  CALL      RSPMSIN1                     * position at start of file
PSIN0500  CALL      RKPMSIN1                     * read next record
          BRANCH    OVRCD,PSIN9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PMSICNID,PMSICODE,PMSIFUND,PMSITBLT:
                             PMSICSCD,PMSIBKCD
          PACK      SAVKEY30,PMSICNID,PMSICODE,PMSIFUND,PMSITBLT,PMSICSCD:
                             PMSIBKCD
          PACK      SAVCOD01,PMSICODE,SP8        * save current code
          PACK      SAVCOD02,PMSIFUND,SP8        * save current code
          PACK      SAVCOD03,PMSITBLT,SP8        * save current code
          PACK      SAVCOD04,PMSIBKCD,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PMSICODE
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PMSICODE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PSIN1000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PMSIFUND
.
PSIN1000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PMSIFUND,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PSIN2000                * no 
.
          MOVE      NEWCODE,SAVCOD02             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PMSITBLT
.
PSIN2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSH,ANST,SP10      * set to Category HT
          PACK      CODEDFLD,PMSITBLT,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PSIN3000                * no 
.
          MOVE      NEWCODE,SAVCOD03             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PMSIBKCD
.
PSIN3000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSF,ANSI,SP10      * set to Category FI
          PACK      CODEDFLD,PMSIBKCD,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PSIN9000                * no 
.
          MOVE      NEWCODE,SAVCOD04             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PSIN9000  BRANCH    UPDTFLAG,PSIN0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PSIN9200            * key fields changed
.           
.         Just need to update the current record
.
PSIN9100  MOVE      SAVCOD01,PMSICODE
          MOVE      SAVCOD02,PMSIFUND
          MOVE      SAVCOD03,PMSITBLT
          MOVE      SAVCOD04,PMSIBKCD
          CALL      UPPMSIN1                     * update record
          GOTO      PSIN9500
.
.         The key has changed, so check if the new key already exists
.
PSIN9200  MOVE      SAVCOD01,PMSICODE
          MOVE      SAVCOD02,PMSIFUND
          MOVE      SAVCOD03,PMSITBLT
          MOVE      SAVCOD04,PMSIBKCD
          PACK      KEY30,PMSICNID,PMSICODE,PMSIFUND,PMSITBLT,PMSICSCD,PMSIBKCD
          CALL      RDPMSIN1                     * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY30,KEY30             * no
            CALL      RDPMSIN1                   * re-read original record
            BRANCH    OVRCD,PSIN9500             * shouldn't happen
            GOTO      PSIN9100
          ELSE
            MOVE      SAVKEY30,KEY30             * delete record
            CALL      DEPMSIN1
          ENDIF
.
PSIN9500  MOVE      SAVKEY30,KEY30
          GOTO      PSIN0200                     * get next record
.
PSIN9999  RETURN
+
.*****************************************************************************
.*                              PSRB0000              Called by: PROC0000    *
.*       Loop through patsrbaf and fix any relevant coded fields             *
.*****************************************************************************
.
PSRB0000  DISPLAY   *P12:24,*EL,"patsrbaf:";
          MOVE      SP30,KEY30
PSRB0200  CALL      RSPTSRB1                     * position at start of file
PSRB0500  CALL      RKPTSRB1                     * read next record
          BRANCH    OVRCD,PSRB9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PTSBCNID,PTSBCODE,PTSBFUND,PTSBTBLT:
                             PTSBCSCD,PTSBBRCD
          PACK      SAVKEY30,PTSBCNID,PTSBCODE,PTSBFUND,PTSBTBLT,PTSBCSCD:
                             PTSBBRCD
          PACK      SAVCOD01,PTSBCODE,SP8        * save current code
          PACK      SAVCOD02,PTSBFUND,SP8        * save current code
          PACK      SAVCOD03,PTSBTBLT,SP8        * save current code
          PACK      SAVCOD04,PTSBBRCD,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PTSBCODE
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PTSBCODE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PSRB1000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTSBFUND
.
PSRB1000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PTSBFUND,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PSRB2000                * no 
.
          MOVE      NEWCODE,SAVCOD02             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTSBTBLT
.
PSRB2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSH,ANST,SP10      * set to Category HT
          PACK      CODEDFLD,PTSBTBLT,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PSRB3000                * no 
.
          MOVE      NEWCODE,SAVCOD03             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTSBBRCD
.
PSRB3000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSF,ANSI,SP10      * set to Category FI
          PACK      CODEDFLD,PTSBBRCD,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PSRB9000                * no 
.
          MOVE      NEWCODE,SAVCOD04             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PSRB9000  BRANCH    UPDTFLAG,PSRB0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PSRB9200            * key fields changed
.           
.         Just need to update the current record
.
PSRB9100  MOVE      SAVCOD01,PTSBCODE
          MOVE      SAVCOD02,PTSBFUND          
          MOVE      SAVCOD03,PTSBTBLT          
          MOVE      SAVCOD04,PTSBBRCD          
          CALL      UPPTSRB1                     * update record
          GOTO      PSRB9500
.
.         The key has changed, so check if the new key already exists
.
PSRB9200  MOVE      SAVCOD01,PTSBCODE
          MOVE      SAVCOD02,PTSBFUND          
          MOVE      SAVCOD03,PTSBTBLT          
          MOVE      SAVCOD04,PTSBBRCD          
          PACK      KEY30,PTSBCNID,PTSBCODE,PTSBFUND,PTSBTBLT,PTSBCSCD,PTSBBRCD
          CALL      RDPTSRB1                     * new record already on file ?
          IF        OVRCD = 1   
            MOVE      SAVKEY30,KEY30             * no
            CALL      RDPTSRB1                   * re-read original record
            BRANCH    OVRCD,PSRB9500             * shouldn't happen
            GOTO      PSRB9100
          ELSE
            MOVE      SAVKEY30,KEY30             * delete record
            CALL      DEPTSRB1
          ENDIF
.
PSRB9500  MOVE      SAVKEY30,KEY30
          GOTO      PSRB0200                     * get next record
.
PSRB9999  RETURN
+
.*****************************************************************************
.*                              PTFE0000              Called by: PROC0000    *
.*       Loop through pattfeef and fix any relevant coded fields             *
.*****************************************************************************
.
PTFE0000  DISPLAY   *P12:24,*EL,"pattfeef:";
          MOVE      SP30,KEY24
PTFE0200  CALL      RDSTFEE1                     * position at start of file
PTFE0500  CALL      RDKTFEE1                     * read next record
          BRANCH    OVRCD,PTFE9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,TFCLM,TFHFUND,PTTFHTYP,TFDAYC,TFENDMBS
          PACK      SAVKEY24,TFCLM,TFHFUND,PTTFHTYP,TFDAYC,TFENDMBS
          PACK      SAVCOD01,TFCLM,SP8           * save current code
          PACK      SAVCOD02,PTTFHTYP,SP8        * save current code
          PACK      SAVCOD03,TFHFUND,SP8         * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check TFCLM
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,TFCLM,SP10          * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PTFE1000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PTTFHTYP
.
PTFE1000  MOVE      THREE,CODETYPE               * set for health fund table
          PACK      CATEGORY,TFHFUND,SP10        * set health fund
          PACK      CODEDFLD,PTTFHTYP,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PTFE2000                * no 
.
          MOVE      NEWCODE,SAVCOD02             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check TFHFUND
.
PTFE2000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,TFHFUND,SP10        * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PTFE9000                * no 
.
          MOVE      NEWCODE,SAVCOD03             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PTFE9000  BRANCH    UPDTFLAG,PTFE0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PTFE9200            * key fields changed
.           
.         Just need to update the current record
.
PTFE9100  MOVE      SAVCOD01,TFCLM
          MOVE      SAVCOD02,PTTFHTYP          
          MOVE      SAVCOD03,TFHFUND          
          CALL      UPTFEE1                      * update record
          GOTO      PTFE9500
.
.         The key has changed, so check if the new key already exists
.
PTFE9200  MOVE      SAVCOD01,TFCLM
          MOVE      SAVCOD02,PTTFHTYP          
          MOVE      SAVCOD03,TFHFUND          
          PACK      KEY24,TFCLM,TFHFUND,PTTFHTYP,TFDAYC,TFENDMBS,PTTFCNID
          CALL      RDTFEE1                      * new record already on file ?
          IF        OVRCD = 1   
            MOVE      SAVKEY24,KEY24             * no
            CALL      RDTFEE1                    * re-read original record
            BRANCH    OVRCD,PTFE9500             * shouldn't happen
            GOTO      PTFE9100
          ELSE
            MOVE      SAVKEY24,KEY24             * delete record
            CALL      DETFEE1 
          ENDIF
.
PTFE9500  MOVE      SAVKEY24,KEY24
          GOTO      PTFE0200                     * get next record
.
PTFE9999  RETURN
+
.*****************************************************************************
.*                              PTRN0000              Called by: PROC0000    *
.*       Loop through pattranf and fix any relevant coded fields             *
.*****************************************************************************
.
PTRN0000  DISPLAY   *P12:24,*EL,"pattranf:";
          MOVE      SP30,KEY30
          CALL      RDSTRAN1                     * position at start of file
PTRN0500  CALL      RDKTRAN1                     * read next record
          BRANCH    OVRCD,PTRN9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,TWARD,TBED,TDATE,TTIME,TADMN
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check TATYPE
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,TATYPE,SP10         * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PTRN1000                * no 
.
          MOVE      NEWCODE,TATYPE               * yes - load new code
.
.         Check TRBTYP
.
PTRN1000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSB,ANST,SP10      * set to Category BT
          PACK      CODEDFLD,TRBTYP,SP10         * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PTRN9000                * no 
.
          MOVE      NEWCODE,TRBTYP               * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PTRN9000  BRANCH    UPDTFLAG,PTRN0500            * no mappings
          PACK      TRCDATE,CCC,CYY,CMM,CDD
          REP       " 0",TRCDATE
          CLOCK     TIME,TRCTIME
          MOVE      WBSEUID,PTTRUUID
.
          CALL      UPTRAN1
          GOTO      PTRN0500                     * get next record
.
PTRN9999  RETURN
+
.*****************************************************************************
.*                              PTSP0000              Called by: PROC0000    *
.*       Loop through pmstspaf and fix any relevant coded fields             *
.*****************************************************************************
.
PTSP0000  DISPLAY   *P12:24,*EL,"pmstspaf:";
          MOVE      SP20,KEY19
          CALL      RSPMTSP1                     * position at start of file
PTSP0500  CALL      RKPMTSP1                     * read next record
          BRANCH    OVRCD,PTSP9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PMTSURNO,PMTSVISN,PMTSUNIQ
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PMTSCLAM
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PMTSCLAM,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PTSP9000                * no 
.
          MOVE      NEWCODE,PMTSCLAM             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PTSP9000  BRANCH    UPDTFLAG,PTSP0500            * no mappings
          CALL      UPPMTSP1
          GOTO      PTSP0500                     * get next record
.
PTSP9999  RETURN
+
.*****************************************************************************
.*                              PUPG0000              Called by: PROC0000    *
.*       Loop through pmsupgaf and fix any relevant coded fields             *
.*****************************************************************************
.
PUPG0000  DISPLAY   *P12:24,*EL,"pmsupgaf:";
          PACK      KEY31,SP30,SP10
PUPG0200  CALL      RSPMUPG1                     * position at start of file
PUPG0500  CALL      RKPMUPG1                     * read next record
          BRANCH    OVRCD,PUPG9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PMUGURNO,PMUGATYP,PMUGCLAM,PMUGFUND:
                             PMUGTABT,PMUGEDAT
          PACK      SAVKEY31,PMUGURNO,PMUGATYP,PMUGCLAM,PMUGFUND,PMUGTABT:
                             PMUGEDAT
          PACK      SAVCOD01,PMUGATYP,SP8        * save current code
          PACK      SAVCOD02,PMUGCLAM,SP8        * save current code
          PACK      SAVCOD03,PMUGFUND,SP8        * save current code
          PACK      SAVCOD04,PMUGTABT,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PMUGATYP
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,PMUGATYP,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PUPG1000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PMUGCLAM
.
PUPG1000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PMUGCLAM,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PUPG2000                * no 
.
          MOVE      NEWCODE,SAVCOD02             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PMUGFUND
.
PUPG2000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PMUGFUND,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PUPG3000                * no 
.
          MOVE      NEWCODE,SAVCOD03             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PMUGTABT
.
PUPG3000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSH,ANST,SP10      * set to Category HT
          PACK      CODEDFLD,PMUGTABT,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PUPG9000                * no 
.
          MOVE      NEWCODE,SAVCOD04             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PUPG9000  BRANCH    UPDTFLAG,PUPG0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PUPG9200            * key fields changed
.           
.         Just need to update the current record
.
PUPG9100  MOVE      SAVCOD01,PMUGATYP
          MOVE      SAVCOD02,PMUGCLAM          
          MOVE      SAVCOD03,PMUGFUND          
          MOVE      SAVCOD04,PMUGTABT          
          CALL      UPPMUPG1                     * update record
          GOTO      PUPG9500
.
.         The key has changed, so check if the new key already exists
.
PUPG9200  MOVE      SAVCOD01,PMUGATYP
          MOVE      SAVCOD02,PMUGCLAM          
          MOVE      SAVCOD03,PMUGFUND          
          MOVE      SAVCOD04,PMUGTABT          
          PACK      KEY31,PMUGURNO,PMUGATYP,PMUGCLAM,PMUGFUND,PMUGTABT,PMUGEDAT
          CALL      RDPMUPG1                     * new record already on file ?
          IF        OVRCD = 1   
            MOVE      SAVKEY31,KEY31             * no
            CALL      RDPMUPG1                   * re-read original record
            BRANCH    OVRCD,PUPG9500             * shouldn't happen
            GOTO      PUPG9100
          ELSE
            MOVE      SAVKEY31,KEY31             * delete record
            CALL      DEPMUPG1
          ENDIF
.
PUPG9500  MOVE      SAVKEY31,KEY31
          GOTO      PUPG0200                     * get next record
.
PUPG9999  RETURN
+
.*****************************************************************************
.*                              PUPO0000              Called by: PROC0000    *
.*       Loop through pmsupoaf and fix any relevant coded fields             *
.*****************************************************************************
.
PUPO0000  DISPLAY   *P12:24,*EL,"pmsupoaf:";
          PACK      KEY34,SP30,SP10
PUPO0200  CALL      RSPMUPO1                     * position at start of file
PUPO0500  CALL      RKPMUPO1                     * read next record
          BRANCH    OVRCD,PUPO9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PMUOURNO,PMUOATYP,PMUOCLAM,PMUOFUND:
                             PMUOTABT,PMUOEDAT,PMUOVTYP
          PACK      SAVKEY34,PMUOURNO,PMUOATYP,PMUOCLAM,PMUOFUND,PMUOTABT:
                             PMUOEDAT,PMUOVTYP
          PACK      SAVCOD01,PMUOATYP,SP8        * save current code
          PACK      SAVCOD02,PMUOCLAM,SP8        * save current code
          PACK      SAVCOD03,PMUOFUND,SP8        * save current code
          PACK      SAVCOD04,PMUOTABT,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PMUOATYP
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,PMUOATYP,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PUPO1000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PMUOCLAM
.
PUPO1000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PMUOCLAM,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PUPO2000                * no 
.
          MOVE      NEWCODE,SAVCOD02             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PMUOFUND
.
PUPO2000  MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY
          PACK      CODEDFLD,PMUOFUND,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PUPO3000                * no 
.
          MOVE      NEWCODE,SAVCOD03             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check PMUOTABT
.
PUPO3000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSH,ANST,SP10      * set to Category HT
          PACK      CODEDFLD,PMUOTABT,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PUPO9000                * no 
.
          MOVE      NEWCODE,SAVCOD04             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PUPO9000  BRANCH    UPDTFLAG,PUPO0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PUPO9200            * key fields changed
.           
.         Just need to update the current record
.
PUPO9100  MOVE      SAVCOD01,PMUOATYP
          MOVE      SAVCOD02,PMUOCLAM          
          MOVE      SAVCOD03,PMUOFUND          
          MOVE      SAVCOD04,PMUOTABT          
          CALL      UPPMUPO1                     * update record
          GOTO      PUPO9500
.
.         The key has changed, so check if the new key already exists
.
PUPO9200  MOVE      SAVCOD01,PMUOATYP
          MOVE      SAVCOD02,PMUOCLAM          
          MOVE      SAVCOD03,PMUOFUND          
          MOVE      SAVCOD04,PMUOTABT          
          PACK      KEY34,PMUOURNO,PMUOATYP,PMUOCLAM,PMUOFUND,PMUOTABT:
                          PMUOEDAT,PMUOVTYP
          CALL      RDPMUPO1                     * new record already on file ?
          IF        OVRCD = 1   
            MOVE      SAVKEY34,KEY34             * no
            CALL      RDPMUPO1                   * re-read original record
            BRANCH    OVRCD,PUPO9500             * shouldn't happen
            GOTO      PUPO9100
          ELSE
            MOVE      SAVKEY34,KEY34             * delete record
            CALL      DEPMUPO1
          ENDIF
.
PUPO9500  MOVE      SAVKEY34,KEY34
          GOTO      PUPO0200                     * get next record
.
PUPO9999  RETURN
+
.*****************************************************************************
.*                              PVX10000              Called by: PROC0000    *
.*       Loop through pmsvx1af and fix any relevant coded fields             *
.*****************************************************************************
.
PVX10000  DISPLAY   *P12:24,*EL,"pmsvx1af:";
          MOVE      SP8,KEY8
          CALL      RSPMVX11                     * position at start of file
PVX10500  CALL      RKPMVX11                     * read next record
          BRANCH    OVRCD,PVX19999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PMVXVISN
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PMVXABRG
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSV,ANSA,SP10      * set to Category VA
          PACK      CODEDFLD,PMVXABRG,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PVX11000                * no 
.
          MOVE      NEWCODE,PMVXABRG             * yes - load new code
.
.         Check PMVXLNG1
.
PVX11000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSL,ANSA,SP10      * set to Category LA
          PACK      CODEDFLD,PMVXLNG1,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PVX19000                * no 
.
          MOVE      NEWCODE,PMVXLNG1             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PVX19000  BRANCH    UPDTFLAG,PVX10500            * no mappings
          CALL      UPPMVX11
          GOTO      PVX10500                     * get next record
.
PVX19999  RETURN
+
.*****************************************************************************
.*                              PWRD0000              Called by: PROC0000    *
.*       Loop through patwr1af and fix any relevant coded fields             *
.*****************************************************************************
.
PWRD0000  DISPLAY   *P12:24,*EL,"patwr1af:";
          MOVE      SP6,KEY6
          CALL      RDSWARD1                     * position at start of file
PWRD0500  CALL      RDKWARD1                     * read next record
          BRANCH    OVRCD,PWRD9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,WWARD,WBED 
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check WEFRBT
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSB,ANST,SP10      * set to Category BT
          PACK      CODEDFLD,WEFRBT,SP10         * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PWRD9000                * no 
.
          MOVE      NEWCODE,WEFRBT               * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
PWRD9000  BRANCH    UPDTFLAG,PWRD0500            * no mappings
          CALL      UPWARD1
          GOTO      PWRD0500                     * get next record
.
PWRD9999  RETURN
+
.*****************************************************************************
.*                              PWSP0000              Called by: PROC0000    *
.*       Loop through patwspaf and fix any relevant coded fields             *
.*****************************************************************************
.
PWSP0000  DISPLAY   *P12:24,*EL,"patwspaf:";
          MOVE      SP6,KEY6
PWSP0200  CALL      RDSWSPA1                     * position at start of file
PWSP0500  CALL      RDKWSPA1                     * read next record
          BRANCH    OVRCD,PWSP9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,WSPWARD,WSPSPEC
          PACK      SAVKEY6,WSPWARD,WSPSPEC
          PACK      SAVCOD01,WSPSPEC,SP8         * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check WSPSPEC
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSD,ANST,SP10      * set to Category DT
          PACK      CODEDFLD,WSPSPEC,SP10        * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PWSP9000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PWSP9000  BRANCH    UPDTFLAG,PWSP0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PWSP9200            * key fields changed
.           
.         Just need to update the current record
.
PWSP9100  MOVE      SAVCOD01,WSPSPEC
          CALL      UPWSPA1                      * update record
          GOTO      PWSP9500
.
.         The key has changed, so check if the new key already exists
.         
PWSP9200  MOVE      SAVCOD01,WSPSPEC
          PACK      KEY6,WSPWARD,WSPSPEC
          CALL      RDWSPA1                      * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY6,KEY6               * no
            CALL      RDWSPA1                    * re-read original record
            BRANCH    OVRCD,PWSP9500             * shouldn't happen 
            GOTO      PWSP9100
          ELSE
            MOVE      SAVKEY6,KEY6               * delete record
            CALL      DEWSPA1 
          ENDIF
.
PWSP9500  MOVE      SAVKEY6,KEY6
          GOTO      PWSP0200                     * get next record
.
PWSP9999  RETURN
+
.*****************************************************************************
.*                              PWSS0000              Called by: PROC0000    *
.*       Loop through patwssaf and fix any relevant coded fields             *
.*****************************************************************************
.
PWSS0000  DISPLAY   *P12:24,*EL,"patwssaf:";
          MOVE      SP20,KEY12
PWSS0200  CALL      RDSWSSA1                     * position at start of file
PWSS0500  CALL      RDKWSSA1                     * read next record
          BRANCH    OVRCD,PWSS9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,WSSDATE,WSSWARD,WSSSPEC
          PACK      SAVKEY12,WSSDATE,WSSWARD,WSSSPEC
          PACK      SAVCOD01,WSSSPEC,SP8         * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check WSSSPEC
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSD,ANST,SP10      * set to Category DT
          PACK      CODEDFLD,WSSSPEC,SP10        * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,PWSS9000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
PWSS9000  BRANCH    UPDTFLAG,PWSS0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,PWSS9200            * key fields changed
.           
.         Just need to update the current record
.
PWSS9100  MOVE      SAVCOD01,WSSSPEC           
          CALL      UPWSSA1                      * update record
          GOTO      PWSS9500
.
.         The key has changed, so check if the new key already exists
.                               
PWSS9200  MOVE      SAVCOD01,WSSSPEC           
          PACK      KEY12,WSSDATE,WSSWARD,WSSSPEC
          CALL      RDWSSA1                      * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY12,KEY12             * no
            CALL      RDWSSA1                    * re-read original record
            BRANCH    OVRCD,PWSS9500             * shouldn't happen  
            GOTO      PWSS9100
          ELSE
            MOVE      SAVKEY12,KEY12             * delete record
            CALL      DEWSSA1
          ENDIF
.
PWSS9500  MOVE      SAVKEY12,KEY12
          GOTO      PWSS0200                     * get next record
.
PWSS9999  RETURN
+
.*****************************************************************************
.*                              IDOC0000              Called by: PROC0000    *
.*       Loop through pridoctf and fix any relevant coded fields             *
.*****************************************************************************
.
IDOC0000  DISPLAY   *P12:24,*EL,"pridoctf:";
          MOVE      SP70,KEY22
IDOC0200  CALL      RSPRDO1                      * position at start of file
IDOC0500  CALL      RKPRDO1                      * read next record
          BRANCH    OVRCD,IDOC9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PRDOPRAC,PRDODOCT,PRDOCLAM,PRDOPIND
          PACK      SAVKEY22,PRDOPRAC,PRDODOCT,PRDOCLAM,PRDOPIND
          PACK      SAVCOD01,PRDOCLAM,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PRDOCLAM
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PRDOCLAM,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,IDOC9000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
IDOC9000  BRANCH    UPDTFLAG,IDOC0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,IDOC9200            * key fields changed
.           
.         Just need to update the current record
.
IDOC9100  MOVE      SAVCOD01,PRDOCLAM
          CALL      UPPRDO1                      * update record
          GOTO      IDOC9500
.
.         The key has changed, so check if the new key already exists
.                               
IDOC9200  MOVE      SAVCOD01,PRDOCLAM
          PACK      KEY22,PRDOPRAC,PRDODOCT,PRDOCLAM,PRDOPIND
          CALL      RDPRDO1                      * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY22,KEY22             * no
            CALL      RDPRDO1                    * re-read original record
            BRANCH    OVRCD,IDOC9500             * shouldn't happen  
            GOTO      IDOC9100
          ELSE
            MOVE      SAVKEY22,KEY22             * delete record
            CALL      DEPRDO1
          ENDIF
.
IDOC9500  MOVE      SAVKEY22,KEY22
          GOTO      IDOC0200                     * get next record
.
IDOC9999  RETURN
+
.*****************************************************************************
.*                              IDTR0000              Called by: PROC0000    *
.*       Loop through pridtraf and fix any relevant coded fields             *
.*****************************************************************************
.
IDTR0000  DISPLAY   *P12:24,*EL,"pridtraf:";
          MOVE      SP30,KEY22
          CALL      RSPRDT1                      * position at start of file
IDTR0500  CALL      RKPRDT1                      * read next record
          BRANCH    OVRCD,IDTR9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PRDTUNIQ,PRDTINVN,PRDTTRAN
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PRDTCLAM
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PRDTCLAM,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,IDTR1000                * no 
.
          MOVE      NEWCODE,PRDTCLAM             * yes - load new code
.
.         Check PRDTITMN
.
IDTR1000  IF        PRDTRTYP = 2 & PRDTIFLG = 2
            MOVE      TWO,CODETYPE               * set for health fund
            MOVE      SP10,CATEGORY
            PACK      CODEDFLD,PRDTITMN,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            BRANCH    EXIT,IDTR2000              * no 
.
            MOVE      NEWCODE,PRDTITMN           * yes - load new code
          ENDIF
.
.         Check PRDTSETC
.
IDTR2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSF,ANSI,SP10      * set to Category FI
          PACK      CODEDFLD,PRDTSETC,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,IDTR3000                * no 
.
          MOVE      NEWCODE,PRDTSETC             * yes - load new code
.
.         Check PRDTADMN
.
IDTR3000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,PRDTADMN,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,IDTR9000                * no 
.
          MOVE      NEWCODE,PRDTADMN             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
IDTR9000  BRANCH    UPDTFLAG,IDTR0500            * no mappings
          CALL      UPPRDT1 
          GOTO      IDTR0500                     * get next record
.
IDTR9999  RETURN
+
.*****************************************************************************
.*                              IEXC0000              Called by: PROC0000    *
.*       Loop through priexcaf and fix any relevant coded fields             *
.*****************************************************************************
.
IEXC0000  DISPLAY   *P12:24,*EL,"priexcaf:";
          MOVE      SP30,KEY25
IEXC0200  CALL      RSPREX1                      * position at start of file
IEXC0500  CALL      RKPREX1                      * read next record
          BRANCH    OVRCD,IEXC9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PREXCLM,PREXFLAG,PREXITMN,PREXSUBN:
                             PREXDAT1
          PACK      SAVKEY25,PREXCLM,PREXFLAG,PREXITMN,PREXSUBN,PREXDAT1
          PACK      SAVCOD01,PREXCLM,SP8         * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PREXCLM
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PREXCLM,SP10        * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,IEXC9000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
IEXC9000  BRANCH    UPDTFLAG,IEXC0500            * no mappings
.           
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.    
.           
          BRANCH    KEYFIELD,IEXC9200            * key fields changed
.
.         Just need to update the current record
.
IEXC9100  MOVE      SAVCOD01,PREXCLM
          CALL      UPPREX1                      * update record
          GOTO      IEXC9500
.
.         The key has changed, so check if the new key already exists
.                               
IEXC9200  MOVE      SAVCOD01,PREXCLM
          PACK      KEY25,PREXCLM,PREXFLAG,PREXITMN,PREXSUBN,PREXDAT1
          CALL      RDPREX1                      * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY25,KEY25             * no
            CALL      RDPREX1                    * re-read original record
            BRANCH    OVRCD,IEXC9500             * shouldn't happen
            GOTO      IEXC9100
          ELSE
            MOVE      SAVKEY25,KEY25             * delete record
            CALL      DEPREX1
          ENDIF
.
IEXC9500  MOVE      SAVKEY25,KEY25
          GOTO      IEXC0200                     * get next record
.
IEXC9999  RETURN
+
.*****************************************************************************
.*                              IFCI0000              Called by: PROC0000    *
.*       Loop through prifciaf and fix any relevant coded fields             *
.*****************************************************************************
.
IFCI0000  DISPLAY   *P12:24,*EL,"prifciaf:";
          PACK      KEY32,SP30,SP10
          CALL      RSPRFCI1                     * position at start of file
IFCI0500  CALL      RKPRFCI1                     * read next record
          BRANCH    OVRCD,IFCI9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PRFCDEBT,PRFCSCAN,PRFCINVN,PRFCTRAN:
                                       PRFCCRNO
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PRFCCLMC
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PRFCCLMC,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,IFCI1000                * no 
.
          MOVE      NEWCODE,PRFCCLMC             * yes - load new code
.
.         Check PRFCINUM
.
IFCI1000  IF        PRFCRTYP = 2 & PRFCIFLG = 2
            MOVE      TWO,CODETYPE               * set for health fund
            MOVE      SP10,CATEGORY
            PACK      CODEDFLD,PRFCINUM,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            BRANCH    EXIT,IFCI2000              * no 
.
            MOVE      NEWCODE,PRFCINUM           * yes - load new code
          ENDIF
.
.         Check PRFCMSCG
.
IFCI2000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSF,ANSI,SP10      * set to Category FI
          PACK      CODEDFLD,PRFCMSCG,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,IFCI3000                * no 
.
          MOVE      NEWCODE,PRFCMSCG             * yes - load new code
.
.         Check PRFCADMC
.
IFCI3000  MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,PRFCADMC,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,IFCI9000                * no 
.
          MOVE      NEWCODE,PRFCADMC             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
IFCI9000  BRANCH    UPDTFLAG,IFCI0500            * no mappings
          CALL      UPPRFCI1
          GOTO      IFCI0500                     * get next record
.
IFCI9999  RETURN
+
.*****************************************************************************
.*                              IFIN0000              Called by: PROC0000    *
.*       Loop through prifinsf and fix any relevant coded fields             *
.*****************************************************************************
.
IFIN0000  DISPLAY   *P12:24,*EL,"prifinsf:";
.
          MOVE      SP70,KEY39
IFIN0200  CALL      RSPRFN1                      * position at start of file
IFIN0500  CALL      RKPRFN1                      * read next record
          BRANCH    OVRCD,IFIN9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PRFNYEAR,PRFNTYPE,PRFNCODE,PRFNMPRA
          PACK      SAVKEY39,PRFNYEAR,PRFNTYPE,PRFNCODE,PRFNMPRA
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Convert the financial type to a number
.
          MOVE      ZERO,FORM1
          MOVE      PRFNTYPE,ANS
          REP       "A1B2C3D4E5F6G7",ANS
          MOVE      ANS,FORM1
          BRANCH    FORM1,IFIN1000:              * fees generated
                          IFIN2000               * cash received
          GOTO      IFIN0500
.
.         Processing a "Fees Generated" record.
.         First, convert the finance code first character to a number.
.
IFIN1000  MOVE      ZERO,FORM1
          MOVE      PRFNCODE,ANS
          REP       "M1N1",ANS
          MOVE      ANS,FORM1
          BRANCH    FORM1,IFIN1100               * Fees
          GOTO      IFIN0500
.
.         We have a Fees value of "M" or "N".
.         "M" is for fees raised, while "N" is for credit notes against
.         fees raised.
.         If PRCNAFEE is set to "0", then PRFNCODE is made up of "M" or "N"
.         + Misc. Charge Group Code (Cat FI) + Item Flag + Item Code
.         + Sub-item Code.
.         If PRCNAFEE is set to "1", then PRFNCODE is made up of "M" or "N"
.         + Doctor Code + Misc. Charge Group Code (Cat FI) + Item Flag
.         + Item Code + Sub-item Code.
.
IFIN1100  IF        PRCNAFEE = 1
            UNPACK    PRFNCODE,PREFCHAR,DOCTCODE,GROUPCDE,ITEMFLAG,ITEMCODE:
                               SUBITEMC
.
            PACK      SAVCOD01,GROUPCDE,SP8      * save current code
            MOVE      PRFNPERA,SAVFRM01  
            MOVE      PRFNPR01,SAVFRM02
            MOVE      PRFNPR02,SAVFRM03
            MOVE      PRFNPR03,SAVFRM04
            MOVE      PRFNPR04,SAVFRM05
            MOVE      PRFNPR05,SAVFRM06
            MOVE      PRFNPR06,SAVFRM07
            MOVE      PRFNPR07,SAVFRM08
            MOVE      PRFNPR08,SAVFRM09
            MOVE      PRFNPR09,SAVFRM10
            MOVE      PRFNPR10,SAVFRM11
            MOVE      PRFNPR11,SAVFRM12
            MOVE      PRFNPR12,SAVFRM13
            MOVE      PRFNPR13,SAVFRM14
            MOVE      PRFNLAST,SAVFRM15
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSF,ANSI,SP10    * set to Category FI
            PACK      CODEDFLD,GROUPCDE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD01         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            BRANCH    UPDTFLAG,IFIN0500          * no mappings
.
.           Need to update this record, so first see if any of the fields
.           to be updated were part of the key.
.
            BRANCH    KEYFIELD,IFIN1120          * key fields changed
.           
.           Just need to update the current record
.
IFIN1110    MOVE      SAVCOD01,GROUPCDE
            PACK      PRFNCODE,PREFCHAR,DOCTCODE,GROUPCDE,ITEMFLAG,ITEMCODE:
                               SUBITEMC,SP30
            CALL      UPPRFN1                    * update record
            GOTO      IFIN9500
.
.           The key has changed, so check if the new key already exists
.                               
IFIN1120    MOVE      SAVCOD01,GROUPCDE
            PACK      PRFNCODE,PREFCHAR,DOCTCODE,GROUPCDE,ITEMFLAG,ITEMCODE:
                               SUBITEMC,SP30
            PACK      KEY39,PRFNYEAR,PRFNTYPE,PRFNCODE,PRFNMPRA
            CALL      RDPRFN1                    * new record already on file ?
            IF        OVRCD = 1
              MOVE      SAVKEY39,KEY39           * no
              CALL      RDPRFN1                  * re-read original record
              BRANCH    OVRCD,IFIN9500           * shouldn't happen  
              GOTO      IFIN1110
            ELSE
              ADD       SAVFRM01,PRFNPERA  
              ADD       SAVFRM02,PRFNPR01 
              ADD       SAVFRM03,PRFNPR02 
              ADD       SAVFRM04,PRFNPR03 
              ADD       SAVFRM05,PRFNPR04 
              ADD       SAVFRM06,PRFNPR05 
              ADD       SAVFRM07,PRFNPR06 
              ADD       SAVFRM08,PRFNPR07 
              ADD       SAVFRM09,PRFNPR08 
              ADD       SAVFRM10,PRFNPR09 
              ADD       SAVFRM11,PRFNPR10
              ADD       SAVFRM12,PRFNPR11
              ADD       SAVFRM13,PRFNPR12
              ADD       SAVFRM14,PRFNPR13
              ADD       SAVFRM15,PRFNLAST
              CALL      UPPRFN1                  * update record
.
              MOVE      SAVKEY39,KEY39           * delete record
              CALL      DEPRFN1
            ENDIF
          ELSE
            UNPACK    PRFNCODE,PREFCHAR,GROUPCDE,ITEMFLAG,ITEMCODE,SUBITEMC
.
            PACK      SAVCOD01,GROUPCDE,SP8      * save current code
            MOVE      PRFNPERA,SAVFRM01  
            MOVE      PRFNPR01,SAVFRM02
            MOVE      PRFNPR02,SAVFRM03
            MOVE      PRFNPR03,SAVFRM04
            MOVE      PRFNPR04,SAVFRM05
            MOVE      PRFNPR05,SAVFRM06
            MOVE      PRFNPR06,SAVFRM07
            MOVE      PRFNPR07,SAVFRM08
            MOVE      PRFNPR08,SAVFRM09
            MOVE      PRFNPR09,SAVFRM10
            MOVE      PRFNPR10,SAVFRM11
            MOVE      PRFNPR11,SAVFRM12
            MOVE      PRFNPR12,SAVFRM13
            MOVE      PRFNPR13,SAVFRM14
            MOVE      PRFNLAST,SAVFRM15
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSF,ANSI,SP10    * set to Category FI
            PACK      CODEDFLD,GROUPCDE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD01         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            BRANCH    UPDTFLAG,IFIN0500          * no mappings
.
.           Need to update this record, so first see if any of the fields
.           to be updated were part of the key.
.
            BRANCH    KEYFIELD,IFIN1140          * key fields changed
.           
.           Just need to update the current record
.
IFIN1130    MOVE      SAVCOD01,GROUPCDE
            PACK      PRFNCODE,PREFCHAR,GROUPCDE,ITEMFLAG,ITEMCODE:
                               SUBITEMC,SP30
            CALL      UPPRFN1                    * update record
            GOTO      IFIN9500
.
.           The key has changed, so check if the new key already exists
.                               
IFIN1140    MOVE      SAVCOD01,GROUPCDE
            PACK      PRFNCODE,PREFCHAR,GROUPCDE,ITEMFLAG,ITEMCODE,SUBITEMC,SP30
            PACK      KEY39,PRFNYEAR,PRFNTYPE,PRFNCODE,PRFNMPRA
            CALL      RDPRFN1                    * new record already on file ?
            IF        OVRCD = 1
              MOVE      SAVKEY39,KEY39           * no
              CALL      RDPRFN1                  * re-read original record
              BRANCH    OVRCD,IFIN9500           * shouldn't happen  
              GOTO      IFIN1130
            ELSE
              ADD       SAVFRM01,PRFNPERA  
              ADD       SAVFRM02,PRFNPR01 
              ADD       SAVFRM03,PRFNPR02 
              ADD       SAVFRM04,PRFNPR03 
              ADD       SAVFRM05,PRFNPR04 
              ADD       SAVFRM06,PRFNPR05 
              ADD       SAVFRM07,PRFNPR06 
              ADD       SAVFRM08,PRFNPR07 
              ADD       SAVFRM09,PRFNPR08 
              ADD       SAVFRM10,PRFNPR09 
              ADD       SAVFRM11,PRFNPR10
              ADD       SAVFRM12,PRFNPR11
              ADD       SAVFRM13,PRFNPR12
              ADD       SAVFRM14,PRFNPR13
              ADD       SAVFRM15,PRFNLAST
              CALL      UPPRFN1                  * update record
.
              MOVE      SAVKEY39,KEY39           * delete record
              CALL      DEPRFN1
            ENDIF
          ENDIF
          GOTO      IFIN9500
.
.         Processing a "Cash Received" record.
.         First, convert the finance code first character to a number.
.
IFIN2000  MOVE      ZERO,FORM1
          MOVE      PRFNCODE,ANS
          REP       "A0B1C0I0",ANS
          MOVE      ANS,FORM1
          BRANCH    FORM1,IFIN2100               * from health fund
          GOTO      IFIN0500
.
.         We have a Receipt of type "B" (from a health fund).
.
IFIN2100  UNPACK    PRFNCODE,PREFCHAR,FUNDCODE
.
          PACK      SAVCOD01,FUNDCODE,SP8        * save current code
          MOVE      PRFNPERA,SAVFRM01  
          MOVE      PRFNPR01,SAVFRM02
          MOVE      PRFNPR02,SAVFRM03
          MOVE      PRFNPR03,SAVFRM04
          MOVE      PRFNPR04,SAVFRM05
          MOVE      PRFNPR05,SAVFRM06
          MOVE      PRFNPR06,SAVFRM07
          MOVE      PRFNPR07,SAVFRM08
          MOVE      PRFNPR08,SAVFRM09
          MOVE      PRFNPR09,SAVFRM10
          MOVE      PRFNPR10,SAVFRM11
          MOVE      PRFNPR11,SAVFRM12
          MOVE      PRFNPR12,SAVFRM13
          MOVE      PRFNPR13,SAVFRM14
          MOVE      PRFNLAST,SAVFRM15
.
          MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY                
          PACK      CODEDFLD,FUNDCODE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,IFIN0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,IFIN2120            * key fields changed
.           
.         Just need to update the current record
.
IFIN2110  MOVE      SAVCOD01,FUNDCODE
          PACK      PRFNCODE,PREFCHAR,FUNDCODE,SP20
          CALL      UPPRFN1                      * update record
          GOTO      IFIN9500
.
.         The key has changed, so check if the new key already exists
.                               
IFIN2120  MOVE      SAVCOD01,FUNDCODE
          PACK      PRFNCODE,PREFCHAR,FUNDCODE,SP20
          PACK      KEY39,PRFNYEAR,PRFNTYPE,PRFNCODE,PRFNMPRA
          CALL      RDPRFN1                      * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY39,KEY39             * no
            CALL      RDPRFN1                    * re-read original record
            BRANCH    OVRCD,IFIN9500             * shouldn't happen  
            GOTO      IFIN2110
          ELSE
            ADD       SAVFRM01,PRFNPERA  
            ADD       SAVFRM02,PRFNPR01 
            ADD       SAVFRM03,PRFNPR02 
            ADD       SAVFRM04,PRFNPR03 
            ADD       SAVFRM05,PRFNPR04 
            ADD       SAVFRM06,PRFNPR05 
            ADD       SAVFRM07,PRFNPR06 
            ADD       SAVFRM08,PRFNPR07 
            ADD       SAVFRM09,PRFNPR08 
            ADD       SAVFRM10,PRFNPR09 
            ADD       SAVFRM11,PRFNPR10
            ADD       SAVFRM12,PRFNPR11
            ADD       SAVFRM13,PRFNPR12
            ADD       SAVFRM14,PRFNPR13
            ADD       SAVFRM15,PRFNLAST
            CALL      UPPRFN1                    * update record
.
            MOVE      SAVKEY39,KEY39             * delete record
            CALL      DEPRFN1
          ENDIF
.
IFIN9500  MOVE      SAVKEY39,KEY39
          GOTO      IFIN0200                     * get next record
.
IFIN9999  RETURN
+
.*****************************************************************************
.*                              IFIG0000              Called by: PROC0000    *
.*       Loop through prifigaf and fix any relevant coded fields             *
.*****************************************************************************
.
IFIG0000  DISPLAY   *P12:24,*EL,"prifigaf:";
.
          MOVE      SP70,KEY39
IFIG0200  CALL      RSPRFG1                      * position at start of file
IFIG0500  CALL      RKPRFG1                      * read next record
          BRANCH    OVRCD,IFIG9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PRFNYEAR,PRFNTYPE,PRFNCODE,PRFNMPRA
          PACK      SAVKEY39,PRFNYEAR,PRFNTYPE,PRFNCODE,PRFNMPRA
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Convert the financial type to a number
.
          MOVE      ZERO,FORM1
          MOVE      PRFNTYPE,ANS
          REP       "A1B2C3D4E5F6G7",ANS
          MOVE      ANS,FORM1
          BRANCH    FORM1,IFIG1000:              * fees generated
                          IFIG2000               * cash received
          GOTO      IFIG0500
.
.         Processing a "Fees Generated" record.
.         First, convert the finance code first character to a number.
.
IFIG1000  MOVE      ZERO,FORM1
          MOVE      PRFNCODE,ANS
          REP       "M1N1",ANS
          MOVE      ANS,FORM1
          BRANCH    FORM1,IFIG1100               * Fees
          GOTO      IFIG0500
.
.         We have a Fees value of "M" or "N".
.         "M" is for fees raised, while "N" is for credit notes against
.         fees raised.
.         If PRCNAFEE is set to "0", then PRFNCODE is made up of "M" or "N"
.         + Misc. Charge Group Code (Cat FI) + Item Flag + Item Code
.         + Sub-item Code.
.         If PRCNAFEE is set to "1", then PRFNCODE is made up of "M" or "N"
.         + Doctor Code + Misc. Charge Group Code (Cat FI) + Item Flag
.         + Item Code + Sub-item Code.
.
IFIG1100  IF        PRCNAFEE = 1
            UNPACK    PRFNCODE,PREFCHAR,DOCTCODE,GROUPCDE,ITEMFLAG,ITEMCODE:
                               SUBITEMC
.
            PACK      SAVCOD01,GROUPCDE,SP8      * save current code
            MOVE      PRFNPERA,SAVFRM01  
            MOVE      PRFNPR01,SAVFRM02
            MOVE      PRFNPR02,SAVFRM03
            MOVE      PRFNPR03,SAVFRM04
            MOVE      PRFNPR04,SAVFRM05
            MOVE      PRFNPR05,SAVFRM06
            MOVE      PRFNPR06,SAVFRM07
            MOVE      PRFNPR07,SAVFRM08
            MOVE      PRFNPR08,SAVFRM09
            MOVE      PRFNPR09,SAVFRM10
            MOVE      PRFNPR10,SAVFRM11
            MOVE      PRFNPR11,SAVFRM12
            MOVE      PRFNPR12,SAVFRM13
            MOVE      PRFNPR13,SAVFRM14
            MOVE      PRFNLAST,SAVFRM15
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSF,ANSI,SP10    * set to Category FI
            PACK      CODEDFLD,GROUPCDE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD01         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            BRANCH    UPDTFLAG,IFIG0500          * no mappings
.
.           Need to update this record, so first see if any of the fields
.           to be updated were part of the key.
.
            BRANCH    KEYFIELD,IFIG1120          * key fields changed
.           
.           Just need to update the current record
.
IFIG1110    MOVE      SAVCOD01,GROUPCDE
            PACK      PRFNCODE,PREFCHAR,DOCTCODE,GROUPCDE,ITEMFLAG,ITEMCODE:
                               SUBITEMC,SP30
            CALL      UPPRFG1                    * update record
            GOTO      IFIG9500
.
.           The key has changed, so check if the new key already exists
.                               
IFIG1120    MOVE      SAVCOD01,GROUPCDE
            PACK      PRFNCODE,PREFCHAR,DOCTCODE,GROUPCDE,ITEMFLAG,ITEMCODE:
                               SUBITEMC,SP30
            PACK      KEY39,PRFNYEAR,PRFNTYPE,PRFNCODE,PRFNMPRA
            CALL      RDPRFG1                    * new record already on file ?
            IF        OVRCD = 1
              MOVE      SAVKEY39,KEY39           * no
              CALL      RDPRFG1                  * re-read original record
              BRANCH    OVRCD,IFIG9500           * shouldn't happen  
              GOTO      IFIG1110
            ELSE
              ADD       SAVFRM01,PRFNPERA  
              ADD       SAVFRM02,PRFNPR01
              ADD       SAVFRM03,PRFNPR02 
              ADD       SAVFRM04,PRFNPR03
              ADD       SAVFRM05,PRFNPR04
              ADD       SAVFRM06,PRFNPR05
              ADD       SAVFRM07,PRFNPR06
              ADD       SAVFRM08,PRFNPR07
              ADD       SAVFRM09,PRFNPR08
              ADD       SAVFRM10,PRFNPR09
              ADD       SAVFRM11,PRFNPR10
              ADD       SAVFRM12,PRFNPR11
              ADD       SAVFRM13,PRFNPR12
              ADD       SAVFRM14,PRFNPR13
              ADD       SAVFRM15,PRFNLAST
              CALL      UPPRFG1                  * update record
.
              MOVE      SAVKEY39,KEY39           * delete record
              CALL      DEPRFG1
            ENDIF
          ELSE
            UNPACK    PRFNCODE,PREFCHAR,GROUPCDE,ITEMFLAG,ITEMCODE,SUBITEMC
.
            PACK      SAVCOD01,GROUPCDE,SP8      * save current code
            MOVE      PRFNPERA,SAVFRM01  
            MOVE      PRFNPR01,SAVFRM02
            MOVE      PRFNPR02,SAVFRM03
            MOVE      PRFNPR03,SAVFRM04
            MOVE      PRFNPR04,SAVFRM05
            MOVE      PRFNPR05,SAVFRM06
            MOVE      PRFNPR06,SAVFRM07
            MOVE      PRFNPR07,SAVFRM08
            MOVE      PRFNPR08,SAVFRM09
            MOVE      PRFNPR09,SAVFRM10
            MOVE      PRFNPR10,SAVFRM11
            MOVE      PRFNPR11,SAVFRM12
            MOVE      PRFNPR12,SAVFRM13
            MOVE      PRFNPR13,SAVFRM14
            MOVE      PRFNLAST,SAVFRM15
.
            MOVE      ONE,CODETYPE               * set for category-code
            PACK      CATEGORY,ANSF,ANSI,SP10    * set to Category FI
            PACK      CODEDFLD,GROUPCDE,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            IF        EXIT = 0
              MOVE      NEWCODE,SAVCOD01         * yes - load new code
              MOVE      ONE,KEYFIELD             * set key field flag
            ENDIF
.
            BRANCH    UPDTFLAG,IFIG0500          * no mappings
.
.           Need to update this record, so first see if any of the fields
.           to be updated were part of the key.
.
            BRANCH    KEYFIELD,IFIG1140          * key fields changed
.           
.           Just need to update the current record
.
IFIG1130    MOVE      SAVCOD01,GROUPCDE
            PACK      PRFNCODE,PREFCHAR,GROUPCDE,ITEMFLAG,ITEMCODE:
                               SUBITEMC,SP30
            CALL      UPPRFG1                    * update record
            GOTO      IFIG9500
.
.           The key has changed, so check if the new key already exists
.                               
IFIG1140    MOVE      SAVCOD01,GROUPCDE
            PACK      PRFNCODE,PREFCHAR,GROUPCDE,ITEMFLAG,ITEMCODE,SUBITEMC,SP30
            PACK      KEY39,PRFNYEAR,PRFNTYPE,PRFNCODE,PRFNMPRA
            CALL      RDPRFG1                    * new record already on file ?
            IF        OVRCD = 1
              MOVE      SAVKEY39,KEY39           * no
              CALL      RDPRFG1                  * re-read original record
              BRANCH    OVRCD,IFIG9500           * shouldn't happen  
              GOTO      IFIG1130
            ELSE
              ADD       SAVFRM01,PRFNPERA  
              ADD       SAVFRM02,PRFNPR01
              ADD       SAVFRM03,PRFNPR02 
              ADD       SAVFRM04,PRFNPR03
              ADD       SAVFRM05,PRFNPR04
              ADD       SAVFRM06,PRFNPR05
              ADD       SAVFRM07,PRFNPR06
              ADD       SAVFRM08,PRFNPR07
              ADD       SAVFRM09,PRFNPR08
              ADD       SAVFRM10,PRFNPR09
              ADD       SAVFRM11,PRFNPR10
              ADD       SAVFRM12,PRFNPR11
              ADD       SAVFRM13,PRFNPR12
              ADD       SAVFRM14,PRFNPR13
              ADD       SAVFRM15,PRFNLAST
              CALL      UPPRFG1                  * update record
.
              MOVE      SAVKEY39,KEY39           * delete record
              CALL      DEPRFG1
            ENDIF
          ENDIF
          GOTO      IFIG9500
.
.         Processing a "Cash Received" record.
.         First, convert the finance code first character to a number.
.
IFIG2000  MOVE      ZERO,FORM1
          MOVE      PRFNCODE,ANS
          REP       "A0B1C0I0",ANS
          MOVE      ANS,FORM1
          BRANCH    FORM1,IFIG2100               * from health fund
          GOTO      IFIG0500
.
.         We have a Receipt of type "B" (from a health fund).
.
IFIG2100  UNPACK    PRFNCODE,PREFCHAR,FUNDCODE
.
          PACK      SAVCOD01,FUNDCODE,SP8        * save current code
          MOVE      PRFNPERA,SAVFRM01  
          MOVE      PRFNPR01,SAVFRM02
          MOVE      PRFNPR02,SAVFRM03
          MOVE      PRFNPR03,SAVFRM04
          MOVE      PRFNPR04,SAVFRM05
          MOVE      PRFNPR05,SAVFRM06
          MOVE      PRFNPR06,SAVFRM07
          MOVE      PRFNPR07,SAVFRM08
          MOVE      PRFNPR08,SAVFRM09
          MOVE      PRFNPR09,SAVFRM10
          MOVE      PRFNPR10,SAVFRM11
          MOVE      PRFNPR11,SAVFRM12
          MOVE      PRFNPR12,SAVFRM13
          MOVE      PRFNPR13,SAVFRM14
          MOVE      PRFNLAST,SAVFRM15
.
          MOVE      TWO,CODETYPE                 * set for health fund
          MOVE      SP10,CATEGORY                
          PACK      CODEDFLD,FUNDCODE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,IFIG0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,IFIG2120            * key fields changed
.           
.         Just need to update the current record
.
IFIG2110  MOVE      SAVCOD01,FUNDCODE
          PACK      PRFNCODE,PREFCHAR,FUNDCODE,SP20
          CALL      UPPRFG1                      * update record
          GOTO      IFIG9500
.
.         The key has changed, so check if the new key already exists
.                               
IFIG2120  MOVE      SAVCOD01,FUNDCODE
          PACK      PRFNCODE,PREFCHAR,FUNDCODE,SP20
          PACK      KEY39,PRFNYEAR,PRFNTYPE,PRFNCODE,PRFNMPRA
          CALL      RDPRFG1                      * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY39,KEY39             * no
            CALL      RDPRFG1                    * re-read original record
            BRANCH    OVRCD,IFIG9500             * shouldn't happen  
            GOTO      IFIG2110
          ELSE
            ADD       SAVFRM01,PRFNPERA  
            ADD       SAVFRM02,PRFNPR01
            ADD       SAVFRM03,PRFNPR02 
            ADD       SAVFRM04,PRFNPR03
            ADD       SAVFRM05,PRFNPR04
            ADD       SAVFRM06,PRFNPR05
            ADD       SAVFRM07,PRFNPR06
            ADD       SAVFRM08,PRFNPR07
            ADD       SAVFRM09,PRFNPR08
            ADD       SAVFRM10,PRFNPR09
            ADD       SAVFRM11,PRFNPR10
            ADD       SAVFRM12,PRFNPR11
            ADD       SAVFRM13,PRFNPR12
            ADD       SAVFRM14,PRFNPR13
            ADD       SAVFRM15,PRFNLAST
            CALL      UPPRFG1                    * update record
.
            MOVE      SAVKEY39,KEY39             * delete record
            CALL      DEPRFG1
          ENDIF
.
IFIG9500  MOVE      SAVKEY39,KEY39
          GOTO      IFIG0200                     * get next record
.
IFIG9999  RETURN
+
.*****************************************************************************
.*                              IFMS0000              Called by: PROC0000    *
.*       Loop through prifmsaf and fix any relevant coded fields             *
.*****************************************************************************
.
IFMS0000  DISPLAY   *P12:24,*EL,"prifmsaf:";
.
          MOVE      SP20,KEY18
IFMS0200  CALL      RSPRFM1                      * position at start of file
IFMS0500  CALL      RKPRFM1                      * read next record
          BRANCH    OVRCD,IFMS9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PRFMSUB,PRFMCOD 
          PACK      SAVKEY18,PRFMSUB,PRFMCOD
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Convert the financial type to a number
.
          MOVE      ZERO,FORM1
          MOVE      PRFMSUB,FORM1
          BRANCH    FORM1,IFMS1000:              * items
                          IFMS0500:              * gst - ignore
                          IFMS2000               * journals
          GOTO      IFMS0500
.
.         Processing an "Item" record.
.         PRFMCOD is made up of Misc. Charge Group Code (Cat FI)
.         + Item Flag + Item Code + Sub-item Code.
.
IFMS1000  UNPACK    PRFMCOD,GROUPCDE,ITEMFLAG,ITEMCODE,SUBITEMC
.
          PACK      SAVCOD01,GROUPCDE,SP8        * save current code
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSF,ANSI,SP10      * set to Category FI
          PACK      CODEDFLD,GROUPCDE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,IFMS0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,IFMS1020            * key fields changed
.           
.         Just need to update the current record
.
IFMS1010  MOVE      SAVCOD01,GROUPCDE
          PACK      PRFMCOD,GROUPCDE,ITEMFLAG,ITEMCODE,SUBITEMC,SP30
          CALL      UPPRFM1                      * update record
          GOTO      IFMS9500
.
.         The key has changed, so check if the new key already exists
.         
IFMS1020  MOVE      SAVCOD01,GROUPCDE
          PACK      PRFMCOD,GROUPCDE,ITEMFLAG,ITEMCODE,SUBITEMC,SP30
          PACK      KEY18,PRFMSUB,PRFMCOD
          CALL      RDPRFM1                      * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY18,KEY18             * no
            CALL      RDPRFM1                    * re-read original record
            BRANCH    OVRCD,IFMS9500             * shouldn't happen
            GOTO      IFMS1010
          ELSE
            MOVE      SAVKEY18,KEY18             * delete record
            CALL      DEPRFM1 
          ENDIF
          GOTO      IFMS9500
.
.         Processing a "Journal" record.
.
IFMS2000  UNPACK    PRFMCOD,JRNLCODE
.
          PACK      SAVCOD01,JRNLCODE,SP8        * save current code
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSJ,SP10           * set to Category J
          PACK      CODEDFLD,JRNLCODE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          IF        EXIT = 0
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
          BRANCH    UPDTFLAG,IFMS0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,IFMS2020            * key fields changed
.           
.         Just need to update the current record
.
IFMS2010  MOVE      SAVCOD01,JRNLCODE
          PACK      PRFMCOD,JRNLCODE,SP20
          CALL      UPPRFM1                      * update record
          GOTO      IFMS9500
.
.         The key has changed, so check if the new key already exists
.         
IFMS2020  MOVE      SAVCOD01,JRNLCODE
          PACK      PRFMCOD,JRNLCODE,SP20
          PACK      KEY18,PRFMSUB,PRFMCOD
          CALL      RDPRFM1                      * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY18,KEY18             * no
            CALL      RDPRFM1                    * re-read original record
            BRANCH    OVRCD,IFMS9500             * shouldn't happen
            GOTO      IFMS2010
          ELSE
            MOVE      SAVKEY18,KEY18             * delete record
            CALL      DEPRFM1 
          ENDIF
.
IFMS9500  MOVE      SAVKEY18,KEY18
          GOTO      IFMS0200                     * get next record
.
IFMS9999  RETURN
+
.*****************************************************************************
.*                              IHDB0000              Called by: PROC0000    *
.*       Loop through prihdbtf and fix any relevant coded fields             *
.*****************************************************************************
.
IHDB0000  DISPLAY   *P12:24,*EL,"prihdbtf:";
          MOVE      SP70,KEY27
IHDB0200  CALL      RSPRHD1                      * position at start of file
IHDB0500  CALL      RKPRHD1                      * read next record
          BRANCH    OVRCD,IHDB9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PRHDDEBT,PRHDSCAN,PRHDCLAM,PRHDACCD:
                                       PRHDHFND
          PACK      SAVKEY27,PRHDDEBT,PRHDSCAN,PRHDCLAM,PRHDACCD,PRHDHFND
          PACK      SAVCOD01,PRHDCLAM,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PRHDCLAM
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PRHDCLAM,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,IHDB9000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
IHDB9000  BRANCH    UPDTFLAG,IHDB0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,IHDB9200            * key fields changed
.           
.         Just need to update the current record
.
IHDB9100  MOVE      SAVCOD01,PRHDCLAM
          CALL      UPPRHD1                      * update record
          GOTO      IHDB9500
.
.         The key has changed, so check if the new key already exists
.                               
IHDB9200  MOVE      SAVCOD01,PRHDCLAM
          PACK      KEY27,PRHDDEBT,PRHDSCAN,PRHDCLAM,PRHDACCD,PRHDHFND
          CALL      RDPRHD1                      * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY27,KEY27             * no
            CALL      RDPRHD1                    * re-read original record
            BRANCH    OVRCD,IHDB9500             * shouldn't happen  
            GOTO      IHDB9100
          ELSE
            MOVE      SAVKEY27,KEY27             * delete record
            CALL      DEPRHD1
          ENDIF
.
IHDB9500  MOVE      SAVKEY27,KEY27
          GOTO      IHDB0200                     * get next record
.
IHDB9999  RETURN
+
.*****************************************************************************
.*                              IHRE0000              Called by: PROC0000    *
.*       Loop through prihreff and fix any relevant coded fields             *
.*****************************************************************************
.
IHRE0000  DISPLAY   *P12:24,*EL,"prihreff:";
          MOVE      SP30,KEY27
          CALL      RSPRHR1                      * position at start of file
IHRE0500  CALL      RKPRHR1                      * read next record
          BRANCH    OVRCD,IHRE9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PRHRUNIQ,PRHRPRAC,PRHRDOCT,PRHRPIND
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PRHRADMN
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSA,SP10           * set to Category A
          PACK      CODEDFLD,PRHRADMN,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,IHRE9000                * no 
.
          MOVE      NEWCODE,PRHRADMN             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
IHRE9000  BRANCH    UPDTFLAG,IHRE0500            * no mappings
          CALL      UPPRHR1
          GOTO      IHRE0500                     * get next record
.
IHRE9999  RETURN
+
.*****************************************************************************
.*                              IINV0000              Called by: PROC0000    *
.*       Loop through priinvof and fix any relevant coded fields             *
.*****************************************************************************
.
IINV0000  DISPLAY   *P12:24,*EL,"priinvof:";
          MOVE      SP8,KEY8
          CALL      RSPRIN1                      * position at start of file
IINV0500  CALL      RKPRIN1                      * read next record
          BRANCH    OVRCD,IINV9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PRINNUMB
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PRINCLAM
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSC,ANSL,SP10      * set to Category CL
          PACK      CODEDFLD,PRINCLAM,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,IINV9000                * no 
.
          MOVE      NEWCODE,PRINCLAM             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
IINV9000  BRANCH    UPDTFLAG,IINV0500            * no mappings
          CALL      UPPRIN1
          GOTO      IINV0500                     * get next record
.
IINV9999  RETURN
+
.*****************************************************************************
.*                              IJRN0000              Called by: PROC0000    *
.*       Loop through prijrnlf and fix any relevant coded fields             *
.*****************************************************************************
.
IJRN0000  DISPLAY   *P12:24,*EL,"prijrnlf:";
          PACK      KEY35,SP30,SP10
IJRN0200  CALL      RSPRJR1                      * position at start of file
IJRN0500  CALL      RKPRJR1                      * read next record
          BRANCH    OVRCD,IJRN9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,PRJRCODE,PRJRDATE,PRJRDEBT,PRJRSCAN:
                             PRJRTRAN,PRJRINVN
          PACK      SAVKEY35,PRJRCODE,PRJRDATE,PRJRDEBT,PRJRSCAN,PRJRTRAN:
                             PRJRINVN
          PACK      SAVCOD01,PRJRCODE,SP8        * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check PRJRCODE
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSJ,SP10           * set to Category J
          PACK      CODEDFLD,PRJRCODE,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,IJRN9000                * no 
.
          MOVE      NEWCODE,SAVCOD01             * yes - load new code
          MOVE      ONE,KEYFIELD                 * set key field flag
.
.         Check if there were any mappings and if so, update the record
.
IJRN9000  BRANCH    UPDTFLAG,IJRN0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,IJRN9200            * key fields changed
.           
.         Just need to update the current record
.
IJRN9100  MOVE      SAVCOD01,PRJRCODE
          CALL      UPPRJR1                      * update record
          GOTO      IJRN9500
.
.         The key has changed, so check if the new key already exists
.                               
IJRN9200  MOVE      SAVCOD01,PRJRCODE
          PACK      KEY35,PRJRCODE,PRJRDATE,PRJRDEBT,PRJRSCAN,PRJRTRAN,PRJRINVN
          CALL      RDPRJR1                      * new record already on file ?
          IF        OVRCD = 1                    
            MOVE      SAVKEY35,KEY35             * no
            CALL      RDPRJR1                    * re-read original record
            BRANCH    OVRCD,IJRN9500             * shouldn't happen  
            GOTO      IJRN9100
          ELSE
            MOVE      SAVKEY35,KEY35             * delete record
            CALL      DEPRJR1
          ENDIF
.
IJRN9500  MOVE      SAVKEY35,KEY35
          GOTO      IJRN0200                     * get next record
.
IJRN9999  RETURN
+
.*****************************************************************************
.*                              RBNK0000              Called by: PROC0000    *
.*       Loop through rcpbnkaf and fix any relevant coded fields             *
.*****************************************************************************
.
RBNK0000  DISPLAY   *P12:24,*EL,"rcpbnkaf:";
          MOVE      SP20,KEY12
          CALL      RSRCBNK1                     * position at start of file
RBNK0500  CALL      RKRCBNK1                     * read next record
          BRANCH    OVRCD,RBNK9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,RCBNRECN
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check RCBNRCOD
.
          MOVE      RCBNTTYP,FORM1
          IF        FORM1 = 1 | FORM1 = 4
            IF        FORM1 = 1
              MOVE      TWO,CODETYPE             * set for health fund
            ELSE
              MOVE      FOUR,CODETYPE            * set for health fund group
            ENDIF
            MOVE      SP10,CATEGORY
            PACK      CODEDFLD,RCBNRCOD,SP10     * load coded field
            CALL      CMAP0000                   * mapping required ?
            BRANCH    EXIT,RBNK9000              * no 
.
            MOVE      NEWCODE,RCBNRCOD           * yes - load new code
          ENDIF
.
.         Check if there were any mappings and if so, update the record
.
RBNK9000  BRANCH    UPDTFLAG,RBNK0500            * no mappings
          CALL      UPRCBNK1
          GOTO      RBNK0500                     * get next record
.
RBNK9999  RETURN
+
.*****************************************************************************
.*                              RBUL0000              Called by: PROC0000    *
.*       Loop through rcpbulaf and fix any relevant coded fields             *
.*****************************************************************************
.
RBUL0000  DISPLAY   *P12:24,*EL,"rcpbulaf:";
          MOVE      SP20,KEY15
RBUL0200  CALL      RDSBULA1                     * position at start of file
RBUL0500  CALL      RDKBULA1                     * read next record
          BRANCH    OVRCD,RBUL9999               * eof - finished
.
          DISPLAY   *P22:24,*EL,*V2LON,RBCLAIM,RBCODE,RBCNT  
          PACK      SAVKEY15,RBCLAIM,RBCODE,RBCNT
          PACK      SAVCOD01,RBCODE,SP8          * save current code
          MOVE      ZERO,KEYFIELD                * initialise key field flag
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
.         Check RBCODE
.
          IF        RBTYPE = 1
            MOVE      TWO,CODETYPE               * set for health fund
            MOVE      SP10,CATEGORY
            PACK      CODEDFLD,RBCODE,SP10       * load coded field
            CALL      CMAP0000                   * mapping required ?
            BRANCH    EXIT,RBUL9000              * no 
.
            MOVE      NEWCODE,SAVCOD01           * yes - load new code
            MOVE      ONE,KEYFIELD               * set key field flag
          ENDIF
.
.         Check if there were any mappings and if so, update the record
.
RBUL9000  BRANCH    UPDTFLAG,RBUL0500            * no mappings
.
.         Need to update this record, so first see if any of the fields
.         to be updated were part of the key.
.
          BRANCH    KEYFIELD,RBUL9200            * key fields changed
.           
.         Just need to update the current record
.
RBUL9100  MOVE      SAVCOD01,RBCODE          
          CALL      UPBULA1                      * update record
          GOTO      RBUL9500
.
.         The key has changed, so check if the new key already exists
.                               
RBUL9200  MOVE      SAVCOD01,RBCODE          
          PACK      KEY15,RBCLAIM,RBCODE,RBCNT
          CALL      RDBULA1                      * new record already on file ?
          IF        OVRCD = 1
            MOVE      SAVKEY15,KEY15             * no
            CALL      RDBULA1                    * re-read original record
            BRANCH    OVRCD,RBUL9500             * shouldn't happen  
            GOTO      RBUL9100
          ELSE
            MOVE      SAVKEY15,KEY15             * delete record
            CALL      DEBULA1 
          ENDIF
.
RBUL9500  MOVE      SAVKEY15,KEY15
          GOTO      RBUL0200                     * get next record
.
RBUL9999  RETURN
+
.*****************************************************************************
.*                              CMAP0000               Called by: PROC0000   *
.*             Check for a mapped code on the temp index file                *
.* Requires:  CODEDFLD - the old code from the current record                *
.*            CATEGORY - category for coded field                            *
.*            CODETYPE - type of coded field                                 *
.*                         1 - Category/Code                                 *
.*                         2 - Health Fund                                   *
.*                         3 - Health Fund Table                             *
.* Returns:   NEWCODE - the new mapped code                                  *
.*            NEWCATG - the new mapped category (only applies to Cat H1-H9)  *
.*            EXIT  0 = mapped code on file for old code                     *
.*                  1 = no mapped code on file for old code                  *
.*            UPDTFLAG 0 = no fields mapped, so don't update record          *
.*                     1 = one or more fields mapped, so update record       *
.*****************************************************************************
.
CMAP0000  MATCH     SP8,CODEDFLD                 * blank code ?
          GOTO      CMAP9100 IF EQUAL            * yes - no mapping req'd
.
          PACK      KEY15,CODETYPE,CATEGORY,CODEDFLD,SP20
          CALL      RDTEMP1                      * old code on map file ?
          BRANCH    OVRCD,CMAP9100               * no - no mapping req'd.
.
          MOVE      ZERO,UPDTFLAG                * set flag for record update
.
          MOVE      ZERO,EXIT
          GOTO      CMAP9999
.
CMAP9100  MOVE      ONE,EXIT
.
CMAP9999  RETURN
+
.*****************************************************************************
.*                              CDVA0000           Called by: PROC0000       *
.*     Update any cat DX codes for pmsccdaf (DVA Concession Cards)           *
.*****************************************************************************
.
CDVA0000  DISPLAY   *P12:24,*EL,"pmsccdaf:";
.
          MOVE      SP20,KEY19
          CALL      RSPMCCD1                     * position on card type
CDVA0500  CALL      RKPMCCD1                     * read next record
          BRANCH    OVRCD,CDVA9999               * eof - get next code record
.
          DISPLAY   *P22:24,*EL,*V2LON,PMCDURNO,PMCDCTYP,PMCDCNUM;
.
          MATCH     SP3,PMCDDVAC                 * DVA colour code blank ?
          GOTO      CDVA0500 IF EQUAL            * yes - ignore record
.
          MOVE      ONE,UPDTFLAG                 * initialise flag for no update
.
          MOVE      ONE,CODETYPE                 * set for category-code
          PACK      CATEGORY,ANSD,ANSX,SP10      * set to Category DX
          PACK      CODEDFLD,PMCDDVAC,SP10       * load coded field
          CALL      CMAP0000                     * mapping required ?
          BRANCH    EXIT,CDVA9000                * no - get next code record
.
          MOVE      NEWCODE,PMCDDVAC             * yes - load new code
.
.         Check if there were any mappings and if so, update the record
.
CDVA9000  BRANCH    UPDTFLAG,CDVA0500            * no mappings
          CALL      UPPMCCD1                     * update record
          GOTO      CDVA0500                     * get next code record
.
CDVA9999  RETURN
+
.*****************************************************************************
.*                              CREA0000               Called by: MAIN0000   *
.*             Create a new temporary file                                   *
.*****************************************************************************
.
CREA0000  CALL      KILL0000                     * remove existing file
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ISBUILD,TEMPFILE,UKEY
          EXECUTE   CMDLINE,TASKID               * create temporary index file
.
          OPEN      MAPTEMP1,TEMPFILE            * open temp index file
.
CREA9999  RETURN
+
.****************************************************************************
.*                              KILL0000               Called by: MAIN0000  *
.*               Close and erase the temporary file               CREA0000  *
.****************************************************************************
.
KILL0000  CLOSE     MAPTEMP1                     * close file
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ERASE,TEMPFILE       * set file erase command
          EXECUTE   CMDLINE,TASKID               * erase temp file
.
KILL9999 RETURN
+
.****************************************************************************
.*        IO ROUTINES FOR TEMPORARY FILE                                    *
.****************************************************************************
.
RATEMP1   MOVE      ZERO,OVRCD
          RESET     KEY15
          READ      MAPTEMP1,KEY15;ANS
          GOTO      OVERCOND IF OVER
          RETURN
.
RSTEMP1   READ      MAPTEMP1,KEY15;;
          RETURN
.
RDTEMP1   MOVE      ZERO,OVRCD
          READ      MAPTEMP1,KEY15;CODETYPE,CATEGORY,OLDCODE,NEWCATG,NEWCODE
          GOTO      OVERCOND IF OVER
          RETURN
.
RKTEMP1   MOVE      ZERO,OVRCD
          READKS    MAPTEMP1;CODETYPE,CATEGORY,OLDCODE,NEWCATG,NEWCODE
          GOTO      OVERCOND IF OVER
          RETURN
.
RPTEMP1   MOVE      ZERO,OVRCD
          READKP    MAPTEMP1;CODETYPE,CATEGORY,OLDCODE,NEWCATG,NEWCODE
          GOTO      OVERCOND IF OVER
          RETURN
.
WRTEMP1   WRITE     MAPTEMP1,KEY15;CODETYPE,CATEGORY,OLDCODE,NEWCATG,NEWCODE
          RETURN
.
UPTEMP1   UPDATE    MAPTEMP1;CODETYPE,CATEGORY,OLDCODE,NEWCATG,NEWCODE
          RETURN
.
DETEMP1   DELETE    MAPTEMP1,KEY15
          RETURN
+
. =========================================================================
.         I/O Includes
. =========================================================================
.
          INC       STD001IO
          INC       TFILENAM
.
          INC       BOKRC1IO/INC
          INC       BOKRX1IO/INC
          INC       IBASEQIO/INC
          INC       MEHDPSIO/INC
          INC       MEHHLSIO/INC
          INC       MRTEXTIO/INC
          INC       OPRCOUIO/INC
          INC       OPRCSCIO/INC
          INC       OPRCSUIO/INC
          INC       OPRCLIIO/INC
          INC       OPRDEAIO/INC
          INC       OPRDEPIO/INC
          INC       OPRSEMIO/INC
          INC       OPRSESIO/INC
          INC       OPRTPSIO/INC
          INC       OUTATTIO/INC
          INC       OUTBB1IO/INC
          INC       OUTBCHIO/INC
          INC       OUTCANIO/INC
          INC       OUTDTRIO/INC
          INC       OUTLADIO/INC
          INC       OUTMXSIO/INC
          INC       OUTRF1IO/INC
          INC       OUTSITIO/INC
          INC       OUTUATIO/INC
          INC       PATACCIO/INC
          INC       PATAFEIO/INC
          INC       PATALRIO/INC
          INC       PATASDIO/INC
          INC       PATBCHIO/INC
          INC       PATBFEIO/INC
          INC       PATC1SIO/INC
          INC       PATCERIO/INC
          INC       PATCHCIO/INC
          INC       PATCLCIO/INC
          INC       PATCMXIO/INC
          INC       PATCODIO/INC
          INC       PATCTFIO/INC
          INC       PATDEPIO/INC
          INC       PATDO1IO/INC
          INC       PATDSCIO/INC
          INC       PATDTRIO/INC
          INC       PATEBHIO/INC
          INC       PATECAIO/INC
          INC       PATECHIO/INC
          INC       PATEDSIO/INC
          INC       PATFACIO/INC
          INC       PATFCMIO/INC
          INC       PATFIGIO/INC
          INC       PATFINIO/INC
          INC       PATFMOIO/INC
          INC       PATFMSIO/INC
          INC       PATFN1IO/INC
          INC       PATFN2IO/INC
          INC       PATFX1IO/INC
          INC       PATHDFIO/INC
          INC       PATHGPIO/INC
          INC       PATHLFIO/INC
          INC       PATHSPIO/INC
          INC       PATIBLIO/INC
          INC       PATINLIO/INC
          INC       PATINMIO/INC
          INC       PATINVIO/INC
          INC       PATIOVIO/INC
          INC       PATIT1IO/INC
          INC       PATITMIO/INC
          INC       PATJRNIO/INC
          INC       PATLDFIO/INC
          INC       PATLISIO/INC
          INC       PATLSDIO/INC
          INC       PATMA1IO/INC
          INC       PATMCHIO/INC
          INC       PATMI1IO/INC
          INC       PATNIPIO/INC
          INC       PATOVBIO/INC
          INC       PATPR1IO/INC
          INC       PATRBLIO/INC
          INC       PATSGCIO/INC
          INC       PATSRBIO/INC
          INC       PATTFEIO/INC
          INC       PATTRNIO/INC
          INC       PATWR1IO/INC
          INC       PATWSPIO/INC
          INC       PATWSSIO/INC
          INC       PMSALNIO/INC
          INC       PMSCCDIO/INC
          INC       PMSCMTIO/INC
          INC       PMSDVAIO/INC
          INC       PMSEBHIO/INC
          INC       PMSECOIO/INC
          INC       PMSECTIO/INC
          INC       PMSEVTIO/INC
          INC       PMSFCIIO/INC
          INC       PMSFEDIO/INC
          INC       PMSFESIO/INC
          INC       PMSFMSIO/INC
          INC       PMSHCPIO/INC
          INC       PMSHPGIO/INC
          INC       PMSHPOIO/INC
          INC       PMSLTFIO/INC
          INC       PMSMPRIO/INC
          INC       PMSMTEIO/INC
          INC       PMSMTIIO/INC
          INC       PMSPX2IO/INC
          INC       PMSSGAIO/INC
          INC       PMSSINIO/INC
          INC       PMSTSPIO/INC
          INC       PMSUPGIO/INC
          INC       PMSUPOIO/INC
          INC       PMSVX1IO/INC
          INC       PRIDOCIO/INC
          INC       PRIDTRIO/INC
          INC       PRIEXCIO/INC
          INC       PRIFCIIO/INC
          INC       PRIFIGIO/INC
          INC       PRIFINIO/INC
          INC       PRIFMSIO/INC
          INC       PRIHDBIO/INC
          INC       PRIHREIO/INC
          INC       PRIINVIO/INC
          INC       PRIJRNIO/INC
          INC       RCPBNKIO/INC
          INC       RCPBULIO/INC
          INC       WEBERRIO/INC
.
