.*****************************************************************************
.* System    :   Patient Management System                                   *
.* Program   :   CONVADDR                                                    *
.* Desc      :   Data Migration Program to upload previous address data from *
.*               a third party legacy system into the PMI webPAS module.     *
.*****************************************************************************
.* Date      :   04/03/2011                                                  *
.* Author    :   Steve Armstrong                                             *
.* Function  :   This program will loop through the convaddr.txt file and    *
.*               for each valid record found, it will write a new patpa1af   *
.*               record for the patient.                                     *
.* Mods      :                                                               *
.*        V10.07.01  04/01/2016  Ebon Clements     TSK 0294154               *
.*                   Clear opt out of SMS in prev address file write         *
.*****************************************************************************
.*        V10.06.01  22/07/2015  Steve Armstrong   CAR 319752                *
.*                   Mods to make suburb field non-mandatory for NZ sites    *
.*****************************************************************************
.*        V10.04.03  04/06/2014  Steve Armstrong   CAR 301985                *
.*                   Mods to handle new time field (PATIME) which has been   *
.*                   added to the patpa1af file as part of the key.          *
.*        V10.04.02  17/03/2014  Steve Armstrong   CAR 296128                *
.*                   Added display of warning message if error records found.*
.*        V10.04.01  22/01/2014  Don Nguyen        CAR 295972                *
.*                   Changed KEY16 to KEY24 for IO calls on patpa1af         *
.*****************************************************************************
.*        V10.02.00  04/03/2011  Steve Armstrong   CAR 240677                *
.*                   Created program                                         *
.*****************************************************************************
.
          INC       STD001FD
.
. FILE DESCRIPTION INCLUDES
. -------------------------
          INC       PATCONFD/INC
          INC       PATMA1FD/INC
          INC       PATPA1FD/INC
.
.         Previous Address Upload file layout - convaddr.txt
.
ADDRSUPL  FILE      HL7, FIXED=4000         * Pipe delimited upload file
.
.         Fields must be pipe delimited and in the following sequence.
.         Field lengths are irrelevant other than the fact that where
.         a field is longer than allowed, the extra data will be ignored.
.
ADDRURNO  DIM       8    1   * U/R Number                             (paurno)
ADDRDATE  DIM       8    9   * Date actual address changed (ccyymmdd) (padate)
ADDRTIME  DIM       8    17  * Time actual address changed (hh:mm:ss) (patime)
ADDRADD1  DIM       35   25  * Previous Address Line 1                (paadd1)
ADDRADD2  DIM       35   60  * Previous Address Line 2                (paadd2)
ADDRSUBR  DIM       35   95  * Previous Address Suburb                (pasubr)
ADDRADD4  DIM       35   130 * Previous Address Line 4                (paadd4)
ADDRPOST  DIM       8    165 * Previous Postcode                      (papost)
ADDRTELP  DIM       20   173 * Previous Private Phone No.             (patelep)
ADDRTELB  DIM       20   193 * Previous Business Phone No.            (pateleb)
ADDRDOFR  DIM       3    213 * District of Residence                  (ptpador)
ADDRMOBL  DIM       20   216 * Previous Mobile Phone No.              (ptpamobl)
ADDREMAL  DIM       80   236 * Previous Email Address                 (ptpaemal)
ADDRCDTE  DIM       8    316 * Date Record Created (ccyymmdd)         (ptpacdte)
ADDRCTIM  DIM       8    324 * Time Record Created (hh:mm:ss)         (ptpactim)
ADDRWEBC  DIM       10   332 * User Who Created the Record            (ptpawebc)
ADDRLUPD  DIM       8    342 * Date Record Last Updated (ccyymmdd)    (ptpalupd)
ADDRLUPT  DIM       8    350 * Time Record Last Updated (hh:mm:ss)    (ptpalupt)
ADDRWEBU  DIM       10   358 * User Who Last Updated the Record       (ptpawebu)
.
. End of Record          368
.
.
. LOCAL VARIABLE DEFINITION
. -------------------------
ADDCOUNT  FORM      8             * added record count
.
CURRCENT  FORM      2             * current date
CURRDATE  DIM       8             * current date
.
DATEFLG1  FORM      1             * Date Type flag
.                                     0 = full date (ccyymmdd)
.                                     1 = partial date (ccyymm)
DATEFLG2  FORM      1             * Dates Allowed flag
.                                     0 = any date allowed
.                                     1 = future dates not allowed
DIM1A     DIM       1
DIM1B     DIM       1
DIM2C     DIM       2
DIM2D     DIM       2
DIM2H     DIM       2
DIM2M     DIM       2
DIM2S     DIM       2
DIM2Y     DIM       2
DIM4      DIM       4
DTECOUNT  FORM      8             * date error record count
DUPCOUNT  FORM      8             * duplicate record count
.
ERORDESC  DIM       70
ERORFLAG  FORM      1             * Field Validation Error Flag
.                                     0 = No Errors on Field Validations
.                                     1 = Errors on Field Validations
.
FORM10    FORM      10
.
MANCOUNT  FORM      8             * mandatory field error record count
.
RECCOUNT  FORM      8             * record read counter
.
TEMPDATE  DIM       8
TEMPTIME  DIM       8
TIMCOUNT  FORM      8             * Time error record count
TMPFIELD  DIM       8             * Field name
TMPSTRNG  DIM       8             * Temporary string (max field length)
.
UNKCOUNT  FORM      8             * unknown U/R counter
.
VCHKFLAG  FORM      1             * Validation flag
.                                     0 = writing data to database
.                                     1 = only validating import data file
.
.
.
. PROGRAM CONSTANTS
. -----------------
PIPE      INIT      "|"
.
.
.
PRGID     INIT      "CONVADDR"
PRGNAM    INIT      "Upload PMI Previous Addresses"
VERSION   INIT      "V12.00.00"
+
.*****************************************************************************
.*                              MAIN0000                                     *
.*                      Controlling Logic (Mainline code)                    *
.*****************************************************************************
.
MAIN0000  CALL      INIT0000               * initialisation and open files
.
MAIN0100  CALL      OPTN0000               * select options
          BRANCH    EXIT,MAIN9999          * EXIT = 1 if 0 chosen in menu
          BRANCH    COPTION,MAIN1000       * proceed with upload
.
MAIN1000  CALL      OPEN0000               * open upload file
          BRANCH    EXIT,MAIN0100          * file not found
.
          CALL      ASKQ0000               * validation run only ?
.
          CALL      CONTQST                * Ok to continue ?
          BRANCH    CEXIT,MAIN2000:        * yes
                          MAIN0100:        * no
                          MAIN0100         * cancel
.
MAIN2000  CALL      UPLD0000               * process upload
.
MAIN9999  CHAIN     PGM                    * chain back to program
+
.*****************************************************************************
.*                                INIT0000             Called by: MAIN0000   *
.*                             initialisation                                *
.*  The initialisation routine is used to display headings and open files.   *
.*****************************************************************************
.
INIT0000  CALL      DISPHEAD                  * display heading
.
          DISPLAY   *P56:24,*EL,"Opening ":
                    *P64:24,"patma1af";
          OPEN      PATMA1A1,"patma1af"
          OPEN      PATMX1A1,"patmx1af"
.
          DISPLAY   *P64:24,"patpa1af";
          OPEN      PATPA1A1,"patpa1af"
.
          DISPLAY   *P64:24,"controlf"
          OPEN      CONTROLF,"controlf"
          READ      CONTROLF,EIGHTY;*250,PTCNHDPS
.
INIT9999  RETURN
+
.*****************************************************************************
.*                                OPTN0000             Called by: MAIN0000   *
.*                        get user options or exit                           *
.*    Returns:  EXIT    = FALSE (0)  Run data upload                         *
.*                        TRUE  (1)  Exit selected                           *
.*****************************************************************************
.
OPTN0000  DISPLAY   *P1:3,*EF,*P1:4,*V2LON,ZERO,*HOFF,". Exit":
                    *P1:5,*V2LON,ONE,*HOFF,". Run Data Upload"
.
OPTN0500  KEYIN     *P1:7,*EL,"Select Option : ":
                    *P17:7,*V2LON,COPTION
.
          COMPARE   ZERO,COPTION                 * exit selected ?
          GOTO      OPTN9500 IF EQUAL            * yes
.
          BRANCH    COPTION,OPTN9000             * run data upload
.
          BEEP
          GOTO      OPTN0500
.
OPTN9000  MOVE      ZERO,EXIT
          GOTO      OPTN9999
.
OPTN9500  MOVE      ONE,EXIT
.
OPTN9999  RETURN
+
.*****************************************************************************
.*                               OPEN0000              Called by: MAIN0000   *
.*                  Open upload file (convaddr.txt)                          *
.*****************************************************************************
.
OPEN0000  MOVE      ZERO,OVRCD
.
          TRAP      OVERCOND IF IO
          OPEN      ADDRSUPL,"convaddr"
          TRAPCLR   IO
          BRANCH    OVRCD,OPEN9100
.
          MOVE      ZERO,EXIT
          GOTO      OPEN9999
.
OPEN9100  DISPLAY   *P1:24,*EL,*B,"Upload file - convaddr.txt - not found.  ";
          CALL      HITENTER
          MOVE      ONE,EXIT
.
OPEN9999  RETURN
+
.*****************************************************************************
.*                               ASKQ0000              Called by: MAIN0000   *
.*                  Ask if running validation only                           *
.* Returns: VCHKFLAG  - validation flag                                      *
.*                       0 = normal mode                                     *
.*                       1 = validation only mode                            *
.*****************************************************************************
.
ASKQ0000  MOVE      ANSY,ANS
          KEYIN     *P1:10,*EL,"Validation only (",*V2LON,*DV,ANSY,*HOFF:
                    *DV,SLASH,*V2LON,*DV,ANSN,*HOFF,") ?":
                    *P25:10,*V2LON,*RV,ANS
.
          PACK      ANS,ANS,SP1
          REP       UPPLOW,ANS
.
          MATCH     ANSY,ANS                     * Y input ?
          IF        @EQUAL
            DISPLAY   *P25:10,*V2LON,DYES,*HOFF:
                      *P35:10,"(No data will be uploaded)"
            MOVE      ONE,VCHKFLAG               * yes
            GOTO      ASKQ9999
          ENDIF
.
          MATCH     ANSN,ANS                     * N input ?
          IF        @EQUAL
            DISPLAY   *P25:10,*V2LON,DNO,*HOFF:
                      *P35:10,"(Data will be uploaded)"
            MOVE      ZERO,VCHKFLAG              * yes
            GOTO      ASKQ9999
          ENDIF
.
          GOTO      ASKQ0000                     * invalid input
.
ASKQ9999  RETURN
+
.******************************************************************************
.*                                  UPLD0000              Called by: MAIN0000 *
.*             Process the Patient Previous Address upload records            *
.******************************************************************************
.
UPLD0000  CALL      IBACLOCK
          PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
          MOVE      CCC,CURRCENT
.
          DISPLAY   *P1:13,"Processing ",*V2LON,"convaddr.txt",*HOFF:
                    *P1:15,"Started    : ",*V2LON,CTIMEIS,*HOFF:
                    *P1:17,"U/R Number : ":
                    *P1:18,"Date       : ":
                    *P1:19,"Records    : "
.
          MOVE      ZERO,RECCOUNT                * initialise records read
          MOVE      ZERO,ADDCOUNT                * initialise added record count
          MOVE      ZERO,DUPCOUNT                * initialise dup. record count
          MOVE      ZERO,DTECOUNT                * init. date error record count
          MOVE      ZERO,TIMCOUNT                * init. time error record count
          MOVE      ZERO,MANCOUNT                * init. mand error record count
          MOVE      ZERO,UNKCOUNT                * init. unknown pt record count
.
          CALL      HEAD0000                     * Print the report header
.
.         Loop through upload file records
.
UPLD1000  READ      ADDRSUPL,SEQ;ADDRURNO,ADDRDATE,ADDRTIME,ADDRADD1,ADDRADD2:
                                 ADDRSUBR,ADDRADD4,ADDRPOST,ADDRTELP,ADDRTELB:
                                 ADDRDOFR,ADDRMOBL,ADDREMAL,ADDRCDTE,ADDRCTIM:
                                 ADDRWEBC,ADDRLUPD,ADDRLUPT,ADDRWEBU
          GOTO      UPLD9000 IF OVER
.
          ADD       ONE,RECCOUNT                 * increment records read
          IF        (RECCOUNT%1000) = 0 | RECCOUNT = 1
            UNPACK    ADDRDATE,CCENT,CYEAR,CMON,CDAY
            CALL      PACDATE
            DISPLAY   *P14:17,*V2LON,ADDRURNO:
                      *P14:18,CPCDATE,SP1,ADDRTIME:
                      *P14:19,RECCOUNT;
          ENDIF
.
          REP       UPPLOW,PAADD1
          REP       UPPLOW,PAADD2
          REP       UPPLOW,PASUBR
          REP       UPPLOW,PAADD4
.
          CALL      POUT0000                     * pad out fields with spaces
.
          CALL      CLER0000                     * clear database variables
          CALL      CLPATMAS                     * clear patient master vars.
.
          CALL      VURN0000                     * validate U/R
          IF        EXIT = 1 & VCHKFLAG = 0
            GOTO      UPLD1000                   * errors on validation
          ENDIF
.
          CALL      MAND0000                     * check for Mandatory fields
          IF        EXIT = 1 & VCHKFLAG = 0
            GOTO      UPLD1000                   * errors on validation
          ENDIF
.
          CALL      DVAL0000                     * date validation
          IF        EXIT = 1 & VCHKFLAG = 0
            GOTO      UPLD1000                   * errors on validation
          ENDIF
.
          CALL      TVAL0000                     * time validation
          IF        EXIT = 1 & VCHKFLAG = 0
            GOTO      UPLD1000                   * errors on validation
          ENDIF
.
          CALL      SETV0000                     * set up file variables
.
          PACK      KEY24,PAURNO,PADATE,PATIME
          CALL      RDAPADD1
          IF        OVRCD = 1
            BRANCH    VCHKFLAG,UPLD1000          * error checking only
            CALL      WRPADD1                    * write new record
            ADD       ONE,ADDCOUNT               * increment added record count
          ELSE
            MOVE      "Address record already exists ",ERORDESC
            CALL      PERR0000                   * print error line
            ADD       ONE,DUPCOUNT               * increment dupl. record count
          ENDIF
.
          GOTO      UPLD1000                     * get next record
.
.         Upload completed
.
UPLD9000  ASSIGN    (DUPCOUNT+DTECOUNT+TIMCOUNT+MANCOUNT+UNKCOUNT),FORM10
          IF        FORM10 > 0
            CALL      LINE0000                   * print bottom line if errors
          ENDIF
.
          COMPARE   CLNO,FIFTY5                  * room for stats ?
          CALL      HEAD0000 IF LESS             * no - new page req'd.
.
          CLOCK     TIME,CTIMEIS
          DISPLAY   *P14:19,*V2LON,RECCOUNT,*HOFF:
                    *P1:21,"Finished   : ",*V2LON,CTIMEIS
.
.         Warn the user if there were any records with errors
.
          IF        FORM10 > 0
            DISPLAY   *P1:22,*V2LON,*BLINKON,"Warning:  Records found with ":
                      "errors.  Refer to error report."
          ENDIF
.
          DISPLAY   *P1:24,*EL,*B,"Upload complete.  ";
          CALL      HITENTER
.
          PRINT     *N:
                    *1,"Total records read                    - ",RECCOUNT,*N:
                    *1,"Records added                         - ",ADDCOUNT,*N:
                    *1,"Duplicate Records detected            - ",DUPCOUNT,*N:
                    *1,"Records with invalid dates detected   - ",DTECOUNT,*N:
                    *1,"Records with invalid times detected   - ",TIMCOUNT,*N:
                    *1,"Records with unknown U/R numbers      - ",UNKCOUNT,*N:
                    *1,"Records with blank mandatory fields   - ",MANCOUNT:
                    *N,*N,*1,"*** End of Report ***"
.
UPLD9999  RETURN
+
.****************************************************************************
.*                             MAND0000                Called by: UPLD0000  *
.*                 Check for standard Mandatory fields                      *
.* Returns: EXIT   0 = all mandatory fields are populated                   *
.*                 1 = one or more mandatory fields are blank               *
.*          MANCOUNT - updated count of records with mandatory fields       *
.*                     missing                                              *
.****************************************************************************
.
MAND0000  MOVE      ZERO,ERORFLAG                * init. mandatory field flag
.
          MOVE      ADDRDATE,TMPSTRNG
          MOVE      "ADDRDATE",TMPFIELD          * date of actual address change
          CALL      CHKM0000
.
          MOVE      ADDRTIME,TMPSTRNG
          MOVE      "ADDRTIME",TMPFIELD          * time of actual address change
          CALL      CHKM0000
.
          MOVE      ADDRADD1,TMPSTRNG
          MOVE      "ADDRADD1",TMPFIELD          * address line 1
          CALL      CHKM0000
.
.         Suburb is not mandatory for NZ sites (CAR 319752)
.
          COMPARE   ONE,PTCNHDPS                 * nz ?
          IF        !@EQUAL
            MOVE      ADDRSUBR,TMPSTRNG          * no
            MOVE      "ADDRSUBR",TMPFIELD        * address line 3 (suburb)
            CALL      CHKM0000
          ENDIF
.
MAND9000  BRANCH    ERORFLAG,MAND9100            * errors on mand. fields
.
          MOVE      ZERO,EXIT                    * no errors on mand. fields
          GOTO      MAND9999
.
MAND9100  ADD       ONE,MANCOUNT                 * incr. mand error record count
          MOVE      ONE,EXIT
.
MAND9999  RETURN
+
.*****************************************************************************
.*                            CHKM0000             Called by: MAND0000       *
.*                    Check if a mandatory field is blank                    *
.* Requires: TMPSTRNG - field to be checked                                  *
.*           TMPFIELD - 8 character field name                               *
.* Returns:  ERORFLAG = 1   field is blank (error)                           *
.*****************************************************************************
.
CHKM0000  MATCH     TMPSTRNG,SP8                 * blank field ?
          GOTO      CHKM9999 IF NOT EQUAL        * no - finished
.
          MOVE      "Mandatory Field blank ",ERORDESC
          ENDSET    ERORDESC
          APPEND    LBRACK,ERORDESC
          APPEND    TMPFIELD,ERORDESC
          APPEND    RBRACK,ERORDESC
          APPEND    SP70,ERORDESC
          RESET     ERORDESC
          CALL      PERR0000                     * print error line
.
          MOVE      ONE,ERORFLAG                 * set error flag
.
CHKM9999  RETURN
+
.******************************************************************************
.*                                  HEAD0000              Called by: UPLD0000 *
.*                           Print The Report Header                 PERR0000 *
.******************************************************************************
.
HEAD0000  MOVE      ONE,CNOUNDLN
          MOVE      "- Error Report",CPHDROPT
          CALL      HEAD132                 * Print the report header
.
          PRINT     *1,"< convaddr.txt >"
.
          CALL      LINE0000                     * draw line across page
.
          PRINT     *1,PIPE,*3,"U/R No.",*12,PIPE,*14,"Date/Time":
                    *59,PIPE,*61,"Error Description",*132,PIPE
.
          CALL      LINE0000                     * draw line across page
.
          MOVE      SEVEN,CLNO                   * initialise line count
.
HEAD9999  RETURN
+
.****************************************************************************
.*                            LINE0000                 Called by: HEAD0000  *
.*                      Draw line across page                               *
.****************************************************************************
.
LINE0000  PRINT     "*-----------------------------------------------":
                    "------------------------------------------------":
                    "-----------------------------------*"
.
LINE9999  RETURN
+
.******************************************************************************
.*                                  SETV0000              Called by: UPLD0000 *
.*                       Load the patpa1af record variables                   *
.******************************************************************************
.
SETV0000  MOVE      ADDRDATE,PADATE
          MOVE      ADDRTIME,PATIME
          MOVE      ADDRADD1,PAADD1
          MOVE      ADDRADD2,PAADD2
          MOVE      ADDRSUBR,PASUBR
          MOVE      ADDRADD4,PAADD4
          MOVE      ADDRPOST,PAPOST
          MOVE      ADDRTELP,PATELEP
          MOVE      ADDRTELB,PATELEB
          MOVE      ADDRDOFR,PTPADOR
          MOVE      ADDRMOBL,PTPAMOBL
          MOVE      ADDREMAL,PTPAEMAL
          MOVE      ADDRCDTE,PTPACDTE
          MOVE      ADDRCTIM,PTPACTIM
          MOVE      ADDRLUPD,PTPALUPD
          MOVE      ADDRLUPT,PTPALUPT
          MOVE      ADDRWEBU,PTPAWEBU
          MOVE      SP70,PTPAOSMS
.
.         If there is no user id for creation of the record, then
.         default to program name and date/time of upload.
.
          MATCH     SP10,ADDRWEBC
          IF        @EQUAL
            MOVE      "CONVADDR  ",PTPAWEBC
            MOVE      CURRDATE,PTPACDTE
            MOVE      CTIMEIS,PTPACTIM
          ELSE
            MOVE      ADDRWEBC,PTPAWEBC
          ENDIF
.
SETV9999  RETURN
+
.*****************************************************************************
.*                            POUT0000             Called by: UPLD0000       *
.*            Pad out all the record fields with spaces given that we        *
.*            are dealing with pipe delimited records                        *
.*****************************************************************************
.
POUT0000  PACK      ADDRURNO,ADDRURNO,SP8 
          RJUSTIFY  ADDRURNO
          PACK      ADDRDATE,ADDRDATE,SP8 
          PACK      ADDRTIME,ADDRTIME,SP8 
          PACK      ADDRADD1,ADDRADD1,SP70
          PACK      ADDRADD2,ADDRADD2,SP70
          PACK      ADDRSUBR,ADDRSUBR,SP70
          PACK      ADDRADD4,ADDRADD4,SP70
          PACK      ADDRPOST,ADDRPOST,SP8 
          PACK      ADDRTELP,ADDRTELP,SP20
          PACK      ADDRTELB,ADDRTELB,SP20
          PACK      ADDRDOFR,ADDRDOFR,SP3 
          PACK      ADDRMOBL,ADDRMOBL,SP20
          PACK      ADDREMAL,ADDREMAL,SP70,SP10
          PACK      ADDRCDTE,ADDRCDTE,SP8 
          PACK      ADDRCTIM,ADDRCTIM,SP8 
          PACK      ADDRWEBC,ADDRWEBC,SP10
          PACK      ADDRLUPD,ADDRLUPD,SP8 
          PACK      ADDRLUPT,ADDRLUPT,SP8 
          PACK      ADDRWEBU,ADDRWEBU,SP10
.
POUT9999  RETURN
+
.*****************************************************************************
.*                              DVAL0000           Called by: UPLD0000       *
.*                  Validate all date fields                                 *
.* Returns:  EXIT - 0 = No date validation errors                            *
.*                  1 = Date validation errors                               *
.*          DTECOUNT - updated count of records with date field errors       *
.*****************************************************************************
.
DVAL0000  MOVE      ZERO,ERORFLAG                * initialise date error flag
.
          MOVE      ADDRDATE,TEMPDATE
          MOVE      ZERO,DATEFLG1                * ccyymmdd
          MOVE      ONE,DATEFLG2                 * future date not allowed
          MOVE      "ADDRDATE",TMPFIELD
          CALL      VDAT0000
.
          BRANCH    ERORFLAG,DVAL1000            * error on change date
.
          MATCH     ADDRDATE,CURRDATE            * same date ?
          GOTO      DVAL1000 IF NOT EQUAL        * no
.
          MATCH     ADDRTIME,CTIMEIS             * yes - time in future ?
          IF        @LESS
            MOVE      "Time cannot be in the future ",ERORDESC
            CALL      DERR0000
          ENDIF
.
DVAL1000  MOVE      ADDRCDTE,TEMPDATE
          MOVE      ZERO,DATEFLG1                * ccyymmdd
          MOVE      ONE,DATEFLG2                 * future date not allowed
          MOVE      "ADDRCDTE",TMPFIELD
          CALL      VDAT0000
.
          MOVE      ADDRLUPD,TEMPDATE
          MOVE      ZERO,DATEFLG1                * ccyymmdd
          MOVE      ONE,DATEFLG2                 * future date not allowed
          MOVE      "ADDRLUPD",TMPFIELD
          CALL      VDAT0000
.
          BRANCH    ERORFLAG,DVAL9100            * errors on date validation
.
          MOVE      ZERO,EXIT                    * no errors on date validation
          GOTO      DVAL9999
.
DVAL9100  ADD       ONE,DTECOUNT                 * incr. date error record count
          MOVE      ONE,EXIT
.
DVAL9999  RETURN
+
.*****************************************************************************
.*                              VDAT0000           Called by: DVAL0000       *
.*                  Validate a date field                                    *
.* Requires:  TEMPDATE - Date in format ccyymmdd                             *
.*            DATEFLG1 - Date Type flag                                      *
.*                          0 = full date (ccyymmdd)                         *
.*                          1 = partial date (ccyymm)                        *
.*            DATEFLG2 - Dates Allowed flag                                  *
.*                          0 = any date allowed                             *
.*                          1 = no future dates allowed                      *
.*            TMPFIELD - Date field name                                     *
.* Returns:   ERORFLAG = 1 if an error in date validation occurs.            *
.*****************************************************************************
.
VDAT0000  MATCH     SP8,TEMPDATE                 * blank date ?
          GOTO      VDAT9999 IF EQUAL            * yes
.
.         Validate that the date has been fully populated
.
          SQUEEZE   TEMPDATE
          MOVELPTR  TEMPDATE,FORM1
          IF        DATEFLG1 = 0 & FORM1 <> 8 | DATEFLG1 = 1 & FORM1 <> 6
            MOVE      "Insufficient digits ",ERORDESC
            CALL      DERR0000
            GOTO      VDAT9999
          ENDIF
.
.         Validate that the date is numeric
.
VDAT0100  TYPE      TEMPDATE
          IF        !@EQUAL
            MOVE      "Not numeric ",ERORDESC
            CALL      DERR0000
            GOTO      VDAT9999
          ENDIF
.
          UNPACK    TEMPDATE,DIM2C,DIM2Y,DIM2M,DIM2D
.
.         Validate the century is >= 18
.
          MOVE      DIM2C,FORM2
          IF        FORM2 < 18 | FORM2 > CURRCENT
            MOVE      "Century not valid ",ERORDESC
            CALL      DERR0000
            GOTO      VDAT9999
          ENDIF
.
.         Validate the month
.
          MOVE      DIM2M,FORM2
          IF        FORM2 < 1 | FORM2 > 12
            MOVE      "Month not valid ",ERORDESC
            CALL      DERR0000
            GOTO      VDAT9999
          ENDIF
.
          COMPARE   ONE,DATEFLG1                 * short date (ccyymm) ?
          GOTO      VDAT9999 IF EQUAL            * yes - finished
.
.         Validate the day is:
.              < 32 for January, March, May, July, August, October & December
.              < 31 for April, June, September & November
.              < 29 for February, except in a leap year where it is < 30
.
          BRANCH    FORM2,VDAT1000:              * Jan
                          VDAT3000:              * Feb
                          VDAT1000:              * Mar
                          VDAT2000:              * Apr
                          VDAT1000:              * May
                          VDAT2000:              * Jun
                          VDAT1000:              * Jul
                          VDAT1000:              * Aug
                          VDAT2000:              * Sep
                          VDAT1000:              * Oct
                          VDAT2000:              * Nov
                          VDAT1000               * Dec
.
.         Validate days for month of 31 days
.
VDAT1000  MOVE      DIM2D,FORM2
          IF        FORM2 < 1 | FORM2 > 31
            GOTO      VDAT3900
          ENDIF
          GOTO      VDAT4000
.
.         Validate days for month of 30 days
.
VDAT2000  MOVE      DIM2D,FORM2
          IF        FORM2 < 1 | FORM2 > 30
            GOTO      VDAT3900
          ENDIF
          GOTO      VDAT4000
.
.         Validate days for February
.         A leap year is one where:
.           1. Every year divisible by 4 is a leap year.
.           2. But every year divisible by 100 is NOT a leap year
.           3. Unless the year is also divisible by 400, then it is still a
.              leap year.
.
VDAT3000  MOVE      DIM2D,FORM2
          PACK      DIM4,DIM2C,DIM2Y
          MOVE      DIM4,FORM4
          IF        (FORM4%4) = 0
            IF        (FORM4%100) = 0
              IF        (FORM4%400) = 0
                GOTO      VDAT3200
              ENDIF
            ELSE
              GOTO      VDAT3200
            ENDIF
          ENDIF
.
.         Check for normal Feb days
.
VDAT3100  IF        FORM2 < 1 | FORM2 > 28
            GOTO      VDAT3900
          ENDIF
          GOTO      VDAT4000
.
.         Check for leap year Feb days
.
VDAT3200  IF        FORM2 < 1 | FORM2 > 29
            GOTO      VDAT3900
          ENDIF
          GOTO      VDAT4000
.
VDAT3900  MOVE      "Day not valid ",ERORDESC
          CALL      DERR0000
          GOTO      VDAT9999
.
VDAT4000  COMPARE   ZERO,DATEFLG2                * any date allowed ?
          GOTO      VDAT9999 IF EQUAL            * yes
.
.         Make sure the date is not in the future
.
          MATCH     TEMPDATE,CURRDATE
          IF        @LESS
            MOVE      "Cannot be in the future ",ERORDESC
            CALL      DERR0000
            GOTO      VDAT9999
          ENDIF
.
VDAT9999  RETURN
+
.*****************************************************************************
.*                            DERR0000             Called by: VDAT0000       *
.*                    Process date error                                     *
.* Requires: TMPFIELD - field name                                           *
.*           ERORDESC - error description                                    *
.* Returns:  ERORFLAG = 1 if an error in date validation occurs.             *
.*****************************************************************************
.
DERR0000  ENDSET    ERORDESC
          APPEND    LBRACK,ERORDESC
          APPEND    TMPFIELD,ERORDESC
          APPEND    RBRACK,ERORDESC
          APPEND    SP70,ERORDESC
          RESET     ERORDESC
          CALL      PERR0000                     * print error line
.
          MOVE      ONE,ERORFLAG                 * set date error flag
.
DERR9999  RETURN
+
.*****************************************************************************
.*                              TVAL0000           Called by: UPLD0000       *
.*                  Validate all time fields                                 *
.* Returns:  EXIT - 0 = No time validation errors                            *
.*                  1 = Time validation errors                               *
.*          TIMCOUNT - updated count of records with time field errors       *
.*****************************************************************************
.
TVAL0000  MOVE      ZERO,ERORFLAG                * initialise time error flag
.
          MOVE      ADDRCDTE,TEMPDATE
          MOVE      ADDRCTIM,TEMPTIME            * address create time
          MOVE      "ADDRCTIM",TMPFIELD
          CALL      VTIM0000
.
          MOVE      ADDRLUPD,TEMPDATE
          MOVE      ADDRLUPT,TEMPTIME            * address update time
          MOVE      "ADDRLUPT",TMPFIELD
          CALL      VTIM0000
.
          BRANCH    ERORFLAG,TVAL9100            * errors on time validation
.
          MOVE      ZERO,EXIT                    * no errors on time validation
          GOTO      TVAL9999
.
TVAL9100  ADD       ONE,TIMCOUNT                 * incr. time error record count
          MOVE      ONE,EXIT
.
TVAL9999  RETURN
+
.*****************************************************************************
.*                            VTIM0000             Called by: TVAL0000       *
.*                    Validate time fields                                   *
.* Requires:  TEMPTIME - Time in format hh:mm:ss                             *
.*            TEMPDATE - Date in format ccyymmdd                             *
.*            TMPFIELD - Time field name                                     *
.* Returns:   ERORFLAG = 1 if an error in time validation occurs.            *
.*****************************************************************************
.
VTIM0000  MATCH     SP8,TEMPTIME                 * blank time ?
          GOTO      VTIM9999 IF EQUAL            * yes
.
          MATCH     SP8,TEMPDATE                 * blank date ?
          IF        @EQUAL
            MOVE      "Time without corresponding date ",ERORDESC
            CALL      TERR0000
            GOTO      VTIM9999
          ENDIF
.
          UNPACK    TEMPTIME,DIM2H,DIM1A,DIM2M,DIM1B,DIM2S    * (hh:mm:ss)
.
.         Make sure colon's separate the hours, minutes and seconds
.
          MATCH     DIM1A,DIM1B
          GOTO      VTIM1000 IF NOT EQUAL
.
          MATCH     COLON,DIM1A
          GOTO      VTIM1000 IF NOT EQUAL
.
          GOTO      VTIM2000
.
VTIM1000  MOVE      "Format not valid ",ERORDESC
          CALL      TERR0000
          GOTO      VTIM9999
.
.         Validate the hour
.
VTIM2000  MOVE      DIM2H,FORM2
          IF        FORM2 < 0 | FORM2 > 23
            MOVE      "Hour not valid ",ERORDESC
            CALL      TERR0000
            GOTO      VTIM9999
          ENDIF
.
.         Validate the minute
.
          MOVE      DIM2M,FORM2
          IF        FORM2 < 0 | FORM2 > 59
            MOVE      "Minutes not valid ",ERORDESC
            CALL      TERR0000
            GOTO      VTIM9999
          ENDIF
.
.         Validate the second
.
          MOVE      DIM2S,FORM2
          IF        FORM2 < 0 | FORM2 > 59
            MOVE      "Seconds not valid ",ERORDESC
            CALL      TERR0000
            GOTO      VTIM9999
          ENDIF
.
          MATCH     SP8,TEMPDATE                 * date blank ?
          GOTO      VTIM9999 IF EQUAL            * yes
.
.         Make sure that the transaction time is not in the future
.
          MATCH     TEMPDATE,CURRDATE
          IF        @EQUAL
            MATCH     TEMPTIME,CTIMEIS
            IF        @LESS
              MOVE      "Time in the future ",ERORDESC
              CALL      TERR0000
            ENDIF
          ENDIF
.
VTIM9999  RETURN
+
.*****************************************************************************
.*                            TERR0000             Called by: VTIM0000       *
.*                    Process time error                                     *
.* Requires: TMPFIELD - field name                                           *
.*           ERORDESC - error description                                    *
.*****************************************************************************
.
TERR0000  ENDSET    ERORDESC
          APPEND    LBRACK,ERORDESC
          APPEND    TMPFIELD,ERORDESC
          APPEND    RBRACK,ERORDESC
          APPEND    SP70,ERORDESC
          RESET     ERORDESC
          CALL      PERR0000                     * print error line
.
          MOVE      ONE,ERORFLAG                 * set time error flag
.
TERR9999  RETURN
+
.*****************************************************************************
.*                              PERR0000           Called by: UPLD0000       *
.*                   Print an error detail line               CHKM0000       *
.* Requires: Valid read on PMI records (for name fields)      DERR0000       *
.*           ERORDESC - error description                     TERR0000       *
.*           CLNO - current page line count                   VURN0000       *
.* Returns:  CLNO - updated page line count                                  *
.*****************************************************************************
.
PERR0000  COMPARE   CLNO,SIXTY3                  * page full ?
          IF        @LESS
            CALL      LINE0000                   * yes - print bottom line
            CALL      HEAD0000                   * print header
          ENDIF
.
          UNPACK    ADDRDATE,CCENT,CYEAR,CMON,CDAY
          CALL      PACDATE
.
          PRINT     *1,PIPE,*3,ADDRURNO,*12,PIPE,*14,CPCDATE,SP1,ADDRTIME:
                    *59,PIPE,*61,ERORDESC,*132,PIPE
          ADD       ONE,CLNO                     * increment page line count
.
PERR9999  RETURN
+
.*****************************************************************************
.*                             CLER0000            Called by: UPLD0000       *
.*               Clear all the record variables for patpa1af                 *
.*****************************************************************************
.
CLER0000  MOVE      SP8,PAURNO
          MOVE      SP8,PADATE
          PACK      PAADD1,SP30,SP5
          PACK      PAADD2,SP30,SP5
          PACK      PASUBR,SP30,SP5
          PACK      PAADD4,SP30,SP5
          MOVE      SP8,PAPOST
          MOVE      SP20,PATELEP
          MOVE      SP20,PATELEB
          MOVE      SP3,PTPADOR
          MOVE      SP20,PTPAMOBL
          PACK      PTPAEMAL,SP30,SP30,SP30
          MOVE      SP8,PTPACDTE
          MOVE      SP8,PTPACTIM
          MOVE      SP10,PTPAWEBC
          MOVE      SP8,PTPALUPD
          MOVE      SP8,PTPALUPT
          MOVE      SP10,PTPAWEBU
          MOVE      SP20,PTPASPAR
.
CLER9999  RETURN
+
.*****************************************************************************
.*                              VURN0000           Called by: UPLD0000       *
.*                        Validate U/R Number                                *
.* Requires: ADDRURNO - U/R number (right justified)                         *
.* Returns:  Valid read on PMI data                                          *
.*           EXIT  0 = PMI record found - ok to continue                     *
.*                 1 = PMI record not found - ignore record                  *
.*          UNKCOUNT - updated count of unknown U/R numbers                  *
.*          PAURNO   - U/R number right justified                            *
.*****************************************************************************
.
VURN0000  MATCH     SP8,ADDRURNO                 * blank U/R ?
          IF        @EQUAL
            MOVE      "U/R missing ",ERORDESC    * yes
            GOTO      VURN9150
          ENDIF
.
          MOVE      ADDRURNO,KEY8
          CALL      RDMAST1                      * U/R on file ?
          BRANCH    OVRCD,VURN9100               * no - error
.
          COMPARE   ONE,PSTAT                    * merged U/R ?
          GOTO      VURN9000 IF NOT EQUAL        * no
.
.         We have a merged U/R record, so get the new U/R
.
          MATCH     PPSNAME,SP20                 * blank previous name field ?
          GOTO      VURN9100 IF EQUAL            * yes - error
.
          MOVE      PPSNAME,ADDRURNO             * no - load new U/R
          GOTO      VURN0000                     * get new pmi record
.
VURN9000  MOVE      ADDRURNO,PAURNO              * load U/R number
          MOVE      ZERO,EXIT
          GOTO      VURN9999
.
VURN9100  MOVE      "PMI Record not found ",ERORDESC
VURN9150  CALL      PERR0000                     * print error line
          ADD       ONE,UNKCOUNT                 * increment unknown U/R count
          MOVE      ONE,EXIT
.
VURN9999  RETURN
+
. =========================================================================
.         I/O Includes
. =========================================================================
.
          INC       STD001IO
.
          INC       CLPATMAS
.
          INC       PATMA1IO/INC
          INC       PATPA1IO/INC
