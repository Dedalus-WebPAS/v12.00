.***************************************************************************
.* System    :   Private Practice                                          *
.* Program   :   IBAPRI16                                                  *
.* Desc      :   Item File Maintenance (MBS/AMA)                           *
.***************************************************************************
.* Date      :   16/01/91                                                  *
.* Author    :   Stephen Armstrong                                         *
.* Function  :   Provide the normal maintenance functions for the MBS/AMA  *
.*               item file                                                 *
.* Mods.     :                                                             *
.***************************************************************************
.* V11.03.02 03/05/2023  Thanh T.        TSK 0929137                       *
.*           Call CEASE000 to update all the previous MBS/AMA items        *
.*           with the blank end date to the new effective date minus 1 day *
.*           in Insert and Change mode                                     * 
.* V11.03.01 13/04/2023  Thanh T.        TSK 0929137                       *
.*           Changed CEASE000 to update all the previous MBS/AMA items     *
.*           with the blank end date to the new effective date minus 1 day *
.***************************************************************************
.*        V10.15.01 07/11/2019  Peter Vela     TSK 0882715                 *
.*                  Reread priitemf record before call to keyword          *
.*                  subroutine LMBS0000                                    *
.*        V10.10.01 23/05/2017  J.Tan          TSK 0836940                 *
.*                  Mod to set cease date of existing data                 *
.*        V10.04.01 15/04/2014  J.Tan          CAR 261630                  *
.*                  Removed port number from temp file name                *
.*        V10.01.01 15/11/2010      Ebon Clements  CAR 233162              *
.*                  Added option 6 - Upload MBS items from text file       *
.*        V9.08.01  25/05/2007      Peter Vela     SJOG ED Billing         *
.*                  Added input of the following new priitemf variables    *
.*        V9.04.01  19.08.2005      J.Tan          CAR 62750               *
.*                  Removed redefined amount variables                     *
.*        V9.03.01  05/01/2004  Pat Dirito       CAR 44121                 *
.*                  Added Print statments for warnings in PERC0000 &       *
.*                  FUPD0000                                               *
.***************************************************************************
.*        V9.02.01  27/05/2002  Dean Cramer                                *
.*                  Fix where "keyin indicator" entry not written to file  *
.*                  when insert mode.                                      *   
.*        V5.08.B04 12/06/2000  Jill Habasque                              *
.*                  Added ? search for items in % increase                 *
.*        V5.08.B03 31/03/2000  Steve Downing                              *
.*                  Made GST code mandatory                                *
.*        V5.08.B02 21/03/2000  Jill Habasque                              *
.*                  Added check of IBCNUGST                                *
.*        V5.08.B01 03/02/2000  Caleb Sharman                              *
.*                  Mods to include GST into Private Practise              *
.*        V5.07.01  15/10/1999  D.Di Paola                                 *
.*                  Recompiled for PRIITMFD                                *
.*       V5.07.B01  05/11/1998  Jim Stathopoulos                           *
.*                  507 Changes                                            *
.***************************************************************************
.*        V5.05.01  08/10/1997  Steve Armstrong         WWH Mods           *
.*                  Mods for change from GETITEM to KYPRIITM               *
.***************************************************************************
.*               V6.01 26/03/92 Steve Armstrong                            *
.*                     Recompiled for change to PRIITMDS                   *
.*               V6.00.02 16/12/1992  Steve Armstrong                      *
.*                        Fixed % increase to update prigrpaf file also    *
.*        V6.02.01  27/10/1994  Graeme Williams                            *
.*                  Added the option to update fees from a data file       *
.*        V6.03.B1  25/02/1995  Graeme Williams   R6.03 enhancements       *
.*                  Added Stepdown To and Fixed Charged fields             *
.*        V5.02.01  10/03/1995  Graeme Williams                            *
.*                  Port release 6.03 enhancements to 5.02                 *
.*        V5.03.01  14/08/1995  Steve Armstrong                            *
.*                  Recompiled for PRIITMFD                                *
.***************************************************************************
.
.$$$$$
.         Item File Maintenance Program ( IBAPRI16 )
.         ------------------------------------------
.
.         ML0000
.         Initialise and open files
.              priaudit
.              priitemf
.              prigrpaf
.              patcodes
.              controlf
.         Erase any existing temporary file, prior to creating a new one.
.
.         ML0100
.         See which option is selected - insert, change, delete.
.         If 0 is selected, chain back to the calling program.
.
.         ML1000
.         Insert option selected
.
.         User prompted to input item type.
.           If nothing input, returns to get next menu option
.         User prompted to input item number
.           If nothing/exitchar input, returns to get item type
.           If "?" input, items on file are displayed
.         User prompted to input effective from date
.           If nothing input, returns to get item number
.           If "?" input, displays any effective dates for that item number
.              already on file
.
.         If the item input is not already on file, the program proceeds to
.         accept input for the rest of the fields.  All fields for this screen
.         are mandatory.
.         If exitchar is input for description, the program returns to get the
.         next option.
.         Keyin indicator must be either "0" or "1".  Default is "0".
.         Set code must be a code from category PG. If exitchar is input, the
.         program returns to get the next option.  If "?" is input, the codes
.         on file are displayed.
.         Schedule fee is the full item fee.
.         Pathology test must be either Y (yes) or N (no).  If exitchar is input
.         the program returns to get the next option.  Default entry is "N".
.
.         If No is input for pathology item, the user is prompted to post.
.         If an item number is selected, that field can be edited.
.         If (C)ancel is input, the program returns to get the next item flag.
.         If (P)ost is input, the record is written to the item file (and audits
.         if required), and the program returns to get the next item flag.
.
.         If Yes is input for pathology item, user is prompted to input
.         frequency related fields.  These entries must be > zero.
.         Once these details are input, the user is prompted to post.
.         If an item number is selected, that field can be edited.
.         If (C)ancel is input, the program returns to get the next item flag.
.         If (P)ost is input, the user is prompted to input subitems
.         to this item.  
.         Up to 14 subitems may be input.  They must be on file
.         with the same item flag and appropriate date.  "?" option exists for
.         every item entry.  If exitchar is input for any entry, the program
.         returns to get the next option.  If nothing is input for any item,
.         input finishes, and the user is prompted to post.
.
.         Once all the subitems have been input, the user is prompted to post.
.         If (C)ancel is input, the program returns to get the next item flag.
.         If (A)dd is input, the user is prompted to add another subitem.
.         If (D)elete is input, the user is prompted to select a line number
.         for deletion. 
.         If an Item is selected, the user can edit that item entry.
.         If (P)ost is input, the record is written to the item file (and audits
.         if required). If there were subitems input, they are written to the 
.         group file, and the program returns to get the next item flag.
.
.         ML2000
.         Change option selected
.
.         Change mode begins as for insert mode, accept that item number
.         must be on file already.
.         Once a record is selected, the details for the first screen are
.         displayed, and the user is prompted to edit.
.         If (C)ancel is input, the program returns to get the next item type.
.         If an item is selected, the user can edit that field.
.         If (P)ost is input and the item is not a pathology item, the changes
.         are written to the item file (and audit files if required), then
.         the program returns to get the next item type.
.         If (P)ost is input and the item is a pathology item, the subitem
.         screen is displayed and the user has the same options as in the insert
.         mode.
.
.         ML3000
.         Delete option selected
.
.         The delete option proceeds the same as the change mode, except that
.         once a specific item is selected, all the related details are
.         displayed, and the user is prompted to confirm the deletion.
.         If (C)ancel is input, the program returns to get the next option.
.         If (N)o is input, the program returns to get the item type.
.         If (Y)es is input, the item, and any associated subitems in the group
.         file, are deleted.
.
.         ML9999
.         Erase any existing temporary file, then chaim back to calling program
.
.
.$$$$$
.
          INC       STDGENDF
          INC       IBASEQFD/INC                 * Sequential Numbers File
          INC       TFILEVAR/INC                 * Generate Temp File Name
          INC       WEBERRFD/INC                 * Web Server Error Logging
.
. FILE DESCRIPTION INCLUDES
. -------------------------
          INC       PRIITMFD/INC                 * item file
          INC       PRIGRPFD/INC                 * group file
          INC       PRITESFD/INC                 * Pathology 
          INC       PATCODFD/INC                 * codes file
          INC       IBAGSTFD/INC                 * GST file
          INC       PRICONFD/INC                 * control file
          INC       WEBSECFD/INC                 * web user id
          INC       STDKWSDF                     * gst search
.
.         Temporary File Definition
.         -------------------------
.
.         Filename : PRI16Axx.dat          (xx = port id)
.
ITMTEMP1  IFILE SQL, FIXED=57, KEY="U1-2,3-11,12-14,15-22,23-31,32-34"
.
.NAME     TYPE    LENGTH     PHYSICAL     START     DESCRIPTION
.----     ----    ------     --------     -----     -----------
XIFLAG    DIM       2           2           1       item flag
.                                                      0 = MBS
.                                                      1 = AMA
XITEM1    DIM       9           9           3       main item number
XSITEM1   DIM       3           3           12      main subitem number
XEDATE    DIM       8           8           15      effective date (CCYYMMDD)
.
XITEM2    DIM       9           9           23      secondary item number
XSITEM2   DIM       3           3           32      secondary subitem number
XDESC     DIM       18          18          35      secondary item description
XSPARE    DIM       4           4           53      spare variable
.
.End of Record                              57
.
.         Upload Private Practice MBS/AMA items from text file
.
LPMBSTXT  FILE       HL7, FIXED=1000        * Upload file for MBS Items
.
.
. PROGRAM CONSTANTS
. -----------------
.
AMA       INIT      "AMA"
CODEPG    INIT      "PG"                         * set codes
EITH      INIT      "Either"
ERASE     INIT      "iserase "
FINISH    INIT      "Finish"
ISBUILD   INIT      "isbuild "
GSTF      INIT      "GST Free"
GSTP      INIT      "GST Payable"
MBS       INIT      "MBS"
NINE8     FORM      "999999999"                  * for PRIITMDS
NKEY      INIT      "Normal"
ONEHUND   FORM      "100"
OPKEY     INIT      "Operator keyin"
START     INIT      "Start"
UKEY      INIT      " 57 U1-2,3-11,12-14,15-22,23-31,32-34"
ZEDS      INIT      "ZZZZZZZZZZZZZZZZZZZZ"
.
.
. LOCAL VARIABLE DEFINITION
. -------------------------
.
CEASEDT   DIM       8                            * cease date for item
CHOICE    DIM       2                            * QSTN/E input variable
CMDLINE   DIM       127                          * Command line
CMDLIN1   DIM       53                           * tempfile command
CMDLIN2   DIM       16                           * tempfile command
CODE      DIM       3                            * for PATDSCOD routine
COUNTER   FORM      2                            * record counter
.
DISITEM1  DIM       9
DISITEM2  DIM       9
DISPPERC  DIM       7
.
ENDATE    DIM       8                            * effective date (CCYYMMDD)
ERRORMES  DIM       60
.
FEETYPE   DIM       1                            * item fee type
FNAMEI    DIM       150
FILENAME  DIM       40
FIXED     FORM      1                            * fixed charge item (1=Yes)
FORM12P4  FORM      12.4
FORM5P2   FORM      5.2
FROMDATE  DIM       8
GKEY      FORM      1                            * GST Charge Indicator
.
IBCNUGST  FORM      1
ICAT      DIM       3                            * item category
IDESC     DIM       30                           * item description
IFEE      FORM      12.2                         * item schedule fee
IFLAG     FORM      2                            * item type flag
.                                                       0 = MBS
.                                                       1 = AMA
ITEMDESC  DIM       30
ITEMNO    DIM       9
ITEMTYP   DIM       2
IGROUP    DIM       3                            * item group
IKEY      FORM      1                            * keyin indicator
INPFILE   FILE      ASCII, FIXED=256             * input data file (Option 5)
IPATH     FORM      1                            * path test indicator
ITDESC    DIM       18                           * short item description
ITEM1     DIM       9
ITEM2     DIM       9
ITEMNUMB  DIM       9                            * item number
ITEMTYPE  FORM      2
ITMDESC   DIM       30                           * for PRIITMDS
ITMFLAG   FORM      1                            * for PRIITMDS
ITNUMB    FORM      3
ITYPE     DIM       1                            * item type
ISF75     FORM      12.2
ISF85     FORM      12.2
ISAFE     FORM      12.2
IPDTI     FORM       1
.
KEYDESC   DIM       15                           * keyin ind. display field
.
LINENUMB  FORM      8                            * Text file line number
.
MAXNUM    FORM      3                            * max. no. times test ordered
.
PRITM001  DIM       2      * Item Type
PRITM002  DIM       9      * MBS Item Number
PRITM003  DIM       3      * MBS Subitem Number
PRITM004  DIM       8      * Date item commenced (CCYYMMDD format)
PREVEFDT  DIM       8    
WORKDATE  DATE      8
.
PATHFLAG  FORM      1                            * for PRIITMDS
PATHNAME  DIM       150                          * Text file original name
PDESC     DIM       3                            * pathology test desc field
PERCENT   FORM      3.2
PERDAY    FORM      3                            * period of days for tests
PITEM     DIM       9                            * primary item number
PRIVGSTC  DIM       6                            * GST code
PROVTYPE  DIM       3                            * provider number
PSITEM    DIM       3                            * primary subitem number
.
RECCNT    FORM      8                            * record counter
.
SAVFLAG   FORM      2
SAVITMN   DIM       9
SAVSUBN   DIM       3
SAVDAT1   DIM       8
SAVDESC   DIM       30
SAVKEYI   FORM      1
SAVSFEE   FORM      12.2
SAVSETC   DIM       3
SAVDAT2   DIM       8
SAVICAT   DIM       3
SAVIGRP   DIM       3
SAVSGRP   DIM       3
SAVFTYP   DIM       1
SAVPTYP   DIM       3
SAVPATH   FORM      1
SAVMAXR   FORM      3
SAVDAYS   FORM      3
SAVSTEP   DIM       9
SAVSTSB   DIM       3
SAVFIXD   FORM      1
SAVSF75   FORM      12.2
SAVSF85   FORM      12.2
SAVSAFE   FORM      12.2
SAVPRDT   FORM       1
SAVCOL    FORM      3
SAVERT    FORM      2
SAVKEY22  DIM       22
SAVKY22B  DIM       22
SAVKEY34  DIM       34
SETCODE   DIM       3                            * set code
SETDESC   DIM       15                           * set code description
SERDATE   DIM       8                            * for PRIITMDS
SHTDESC   DIM       23                           * for PRIITMDS
SPARE     DIM       4                            * spare item field
STEPDOWN  DIM       9                            * stepdown item
STEPSUBN  DIM       3                            * stepdown subitem
SUBGRP    DIM       3                            * item subgroup
SUBITEM   DIM       3                            * subitem number
.
TEMPDESC  DIM       18                           * temporary item description
TEMPFILE  DIM       8
TEMPITEM  DIM       9                            * temporary item number
TEMPSITM  DIM       3                            * temporary subitem number
TESTCODE  DIM       9
TNUMB     FORM      2                            * record identifier
TOTALERR  FORM      5                            * total errors
TOTALADD  FORM      5                            * total added
TOTALUPD  FORM      5                            * total updated
TYPDESC   DIM       3                            * MBS or AMA display field
.
WBUSERID  DIM       10                           * Web user id
.
XFLD0001  DIM       30
XFLD0002  DIM       30
XFLD0003  DIM       30
XFLD0004  DIM       30
XFLD0005  DIM       30
XFLD0006  DIM       30
XFLD0007  DIM       30
XFLD0008  DIM       30
XFLD0009  DIM       30
XFLD0010  DIM       30
XFLD0011  DIM       30
XFLD0012  DIM       30
XFLD0013  DIM       30
XFLD0014  DIM       30
XFLD0015  DIM       30
XFLD0016  DIM       30
XFLD0017  DIM       30
XFLD0018  DIM       30
XFLD0019  DIM       30
XFLD0020  DIM       30
XFLD0021  DIM       30
XFLD0022  DIM       30
XFLD0023  DIM       30
XFLD0024  DIM       30
XFLD0025  DIM       30
XFLD0026  DIM       30
.
PRGID     INIT      "IBAPRI16"
PRGNAM    INIT      "Item Maintenance"
VERSION   INIT      "V12.00.00"
+
.**************************************************************************
.*                              ML0000                                    *
.*                      Controlling Logic (Mainline code)                 *
.**************************************************************************
.
ML0000    CALL      INIT0000               * initialization and open files
.
          CALL      CREA0000               * create temporary file
.
ML0100    CALL      OPTN0000               * select options
          BRANCH    EXIT,ML9999            * EXIT = 1 if 0 chosen in menu
          BRANCH    COPTION,ML1000:        * insert
                            ML2000:        * change
                            ML3000:        * delete
                            ML4000:        * % increase
                            ML5000:        * update from data file
                            ML6000         * Upload MBS Item from data file
.
. ---- add a procedure code ----
.
ML1000    CALL      SCRA0000               * display first screen format
          CALL      CLR0000                      * Clear the record variables
.
ML1100    CALL      TYPE0000               * get item type
          BRANCH    EXIT,ML0100            * nothing entered
.
ML1200    CALL      PROC0000               * input procedure code
          BRANCH    EXIT,ML1100            * nothing input, get next option
.
          CALL      DATE0000               * get effective date
          BRANCH    EXIT,ML1200            * nothing entered
.
          CALL      ACPT0000               * accept initial values
          BRANCH    EXIT,ML0100            * (C)ancel selected
          CALL      SEL0000                * select field to modify
          BRANCH    EXIT,ML1000            * (C)ancel selected
.
          BRANCH    IPATH,ML1500           * not pathology item
.
          CALL      SECD0000               * input subtests
          BRANCH    EXIT,ML1000            * (C)ancel selected
.
          CALL      TDIS0000               * redisplay subtests
          CALL      EDIT0000               * edit subtests
          BRANCH    EXIT,ML1000            * (C)ancel selected
.
ML1500    CALL      WRT0000                * write to file
          GOTO      ML1000                 * get next record
.
. ---- modify a procedure code ----
.
ML2000    CALL      SCRA0000               * display screen format
          CALL      CLR0000                * Clear the record variables
.
ML2100    CALL      TYPE0000               * get item type
          BRANCH    EXIT,ML0100            * nothing entered
.
ML2200    CALL      PROC0000               * input procedure code
          BRANCH    EXIT,ML2100            * nothing input, get next option
.
          CALL      DATE0000               * get effective date
          BRANCH    EXIT,ML2200            * nothing entered
.
          CALL      LOAD0000               * get details on file
          CALL      DISA0000               * display details
          BRANCH    IPATH,ML2800           * not pathology item
.
          CALL      SCRB0000               * display pathology fields
          CALL      DISB0000               * display pathology details
ML2800    CALL      SEL0000                * select field to modify
          BRANCH    EXIT,ML2000            * (C)ancel selected
          BRANCH    IPATH,ML2900           * not pathology item - update record
.
          CALL      READ0000               * load temp file with subitems
          BRANCH    EXIT,ML2000            * error reading subitem number - exit
          CALL      TDIS0000               * display subitems
.
          CALL      EDIT0000               * edit subitems
          BRANCH    EXIT,ML2000            * (C)ancel selected
.
ML2900    CALL      UPD0000                * update record
          GOTO      ML2000                 * get next record
.
. ---- delete a procedure code ----
.
ML3000    CALL      SCRA0000               * display screen format
          CALL      CLR0000                * Clear the record variables
ML3100    CALL      TYPE0000               * get item type
          BRANCH    EXIT,ML0100            * nothing entered
.
ML3200    CALL      PROC0000               * input procedure code
          BRANCH    EXIT,ML3100:           * nothing input, get next type
                         ML3000            * abort selected - get next code
.
          CALL      DATE0000               * get effective date
          BRANCH    EXIT,ML3200            * nothing entered
.
          CALL      LOAD0000               * get details on file
          BRANCH    IPATH,ML3300           * not pathology item
.
.         Pathology item
.
          CALL      SCRB0000               * display patholgy fields
          CALL      DISA0000               * display details
          CALL      DISB0000               * display pathology details
.
          CALL      READ0000               * load temp file with subitems
          BRANCH    EXIT,ML3000            * error reading subitem number - exit
          CALL      TDIS0000               * display subitems
          GOTO      ML3400
.
ML3300    CALL      DISA0000               * display details
.
ML3400    CALL      DELQST                 * ok to delete ?
          BRANCH    CEXIT,ML3500:          * Yes 
                          ML3000:          * No
                          ML0100           * Cancel
ML3500    CALL      DEL0000                * delete this record
          GOTO      ML3000                 * get next record
.
.------ % increase option chosen ------
.
ML4000    CALL      DETA0000               * enter details for % increase
          BRANCH    EXIT,ML0100            * exit
.
          CALL      CONTQST                * see if O.K. to continue
          BRANCH    CEXIT,ML4100,ML4000,ML0100
.
.------ it is O.K. to continue ------
.
ML4100    CALL      PERC0000               * do % increase
.
          GOTO      ML0100
.
.------ update from data file option chosen ------
.
ML5000    CALL      FILE0000               * enter name of data file
          BRANCH    EXIT,ML0100            * exit
.
          CALL      CONTQST                * see if O.K. to continue
          BRANCH    CEXIT,ML5100,ML5000,ML0100
.
.------ it is O.K. to continue ------
.
ML5100    CALL      FUPD0000               * do file update
.
          GOTO      ML0100
.
.------ upload MBS Items from data file option chosen ------
.
ML6000    CALL      KASC0000               * enter name of data file
          BRANCH    EXIT,ML0100            * exit
.
          CALL      KPTH0000               * enter data path and name
          BRANCH    EXIT,ML0100            * exit
.
          CALL      KUSR0000               * Keyin user id
          BRANCH    EXIT,ML0100            * exit
.
          CALL      CONTQST                * see if O.K. to continue
          BRANCH    CEXIT,ML6100,ML6000,ML0100
.
.------ it is O.K. to continue ------
.
ML6100    CALL      LMBS0000               * Load MBS items from text file
.
          GOTO      ML0100
.
ML9999    CALL      KILL0000               * erase temporary file
          CHAIN     PGM                    * chain back to program
+
.****************************************************************************
.*                                INIT0000             Called by: ML0000    *
.*                Open files and initialise variables                       *
.****************************************************************************
.
INIT0000  CALL      DISPHEAD                  * display heading
.
          CALL      IBACLOCK
.
          DISPLAY   *P56:24,*EL,"Opening ":
                    *P64:24,"controlf"
          OPEN      CONTROLF,"controlf"          * control file
          READ      CONTROLF,ZERO;*85,IBCNUGST
          READ      CONTROLF,THIRTY3;*59,PRCNAUDI
.
          DISPLAY   *P64:24,"priitemf";          * item file
          OPEN      PRIITEM1,"priitemf"
.
          DISPLAY   *P64:24,"priitemf";          * item file
          OPEN      PRIITEM2,"priitemf"
.
          DISPLAY   *P64:24,"prigrpaf";          * group file
          OPEN      PRIGRPA1,"prigrpaf"
.
          DISPLAY   *P64:24,"pritestf";          * pathology
          OPEN      PRITEST1,"pritestf"
.
          DISPLAY   *P64:24,"patcodes";          * codes file
          OPEN      PATCODE1,"patcodes"
.
          DISPLAY   *P64:24,"ibagstaf";          * GST
          OPEN      IBAGSTA1,"ibagstaf"
          OPEN      IBAGSTA2,"ibagstaf"
.
          DISPLAY   *P64:24,"websecaf";          * web user id 
          OPEN      WEBSECA1,"websecaf"
.
          BRANCH    PRCNAUDI,INIT9000            * item audit flag not set
.
          DISPLAY   *P64:24,"priaudit";          * item audit file
          OPEN      PRIAUDIT,"priaudit"
.
INIT9000  MOVE      ZERO,CHIGHLT
          MOVE      CODEPG,CODE
          MOVE      ONE,CNEWDS
.
          CALL      TFILENAM                * Get temp file name
          MOVE      TFILNAME,TEMPFILE
.
          MOVE      ZERO,ITNUMB
.
INIT9999  RETURN
+
.****************************************************************************
.*                                OPTN0000             Called by: ML0000    *
.*                        get user options or exit                          *
.*                                                                          *
.*    Returns:  EXIT    =       (0)  Valid option selected                  *
.*                              (1)  Exit option selected                   *
.****************************************************************************
.
. ---- display option screen ----
.
OPTN0000  HLINE     *G37,2,60,80
          DISPLAY   *P1:3,*EF,*P2:4,*V2LON,ZERO,*HOFF," = Exit":
                    *P2:5,*V2LON,ONE,*HOFF," = Insert":
                    *P2:6,*V2LON,TWO,*HOFF," = Change":
                    *P2:7,*V2LON,THREE,*HOFF," = Delete":
                    *P2:8,*V2LON,FOUR,*HOFF," = % Item Fee Increase":
                    *P2:9,*V2LON,FIVE,*HOFF," = Update Fees From a Data File":
                    *P2:10,*V2LON,SIX,*HOFF," = Upload Item from Data File";
.
OPTN0500  KEYIN     *P1:11,*EL,"Select Option : ",*DV,UNDLN1:
                    *P17:11,*V2LON,COPTION
.
          COMPARE   ZERO,COPTION                 * 0 entered ?
          GOTO      OPTN9000 IF EQUAL            * yes
.
          BRANCH    COPTION,OPTN1000:            * insert
                            OPTN2000:            * change
                            OPTN3000:            * delete
                            OPTN4000:            * % fee increase
                            OPTN5000:            * update from data file
                            OPTN6000             * Load MBS Item from text file
.
          GOTO      OPTN0500                     * invalid option selected
.
OPTN1000  DISPLAY   *P60:2,*V2LON,"Insert"
          GOTO      OPTN8000
.
OPTN2000  DISPLAY   *P60:2,*V2LON,"Change"
          GOTO      OPTN8000
.
OPTN3000  DISPLAY   *P60:2,*V2LON,"Delete"
          GOTO      OPTN8000
.
OPTN4000  DISPLAY   *P60:2,*V2LON,"% Item Fee Increase"
          GOTO      OPTN8000
.
OPTN5000  DISPLAY   *P60:2,*V2LON,"Update from Data File"
          GOTO      OPTN8000
.
OPTN6000  DISPLAY   *P60:2,*V2LON,"Upload MBS Item from Data File"
.
OPTN8000  MOVE      ZERO,EXIT
          GOTO      OPTN9999
.
OPTN9000  MOVE      ONE,EXIT                     * set EXIT = 1
.
OPTN9999  RETURN
+
.**************************************************************************
.*                                  CLR0000            Called by: PROC0000*
.*                            clear global variables                      *
.**************************************************************************
.
CLR0000   DISPLAY   *P24:4,*EL:
                    *P24:5,*EL:
                    *P24:6,*EL
.
          MOVE      SP1,ITYPE
          MOVE      SP9,ITEMNUMB
          MOVE      SP3,SUBITEM
          MOVE      SP2,CDAY
          MOVE      SP2,CMON
          MOVE      SP2,CYEAR
          MOVE      SP2,CCENT
          MOVE      SP8,ENDATE
          MOVE      SP30,IDESC
          MOVE      ZERO,IKEY
          MOVE      ZERO,GKEY
          MOVE      ZERO,IFEE
          MOVE      SP3,SETCODE
          MOVE      SP8,CEASEDT
          MOVE      SP3,ICAT
          MOVE      SP3,IGROUP
          MOVE      SP3,SUBGRP
          MOVE      SP1,FEETYPE
          MOVE      SP3,PROVTYPE
          MOVE      ONE,IPATH
          MOVE      SP3,PDESC
          MOVE      ZERO,MAXNUM
          MOVE      ZERO,PERDAY
          MOVE      SP9,STEPDOWN
          MOVE      SP3,STEPSUBN
          MOVE      TWO,FIXED
          MOVE      ZERO,ISF75
          MOVE      ZERO,ISF85
          MOVE      ZERO,ISAFE
          MOVE      ZERO,IPDTI
          MOVE      SP4,SPARE
.
          CALL      REMV0000                     * delete records from temp file
.
CLR9999   RETURN
+
.**************************************************************************
.*                               PROC0000              Called by: ML0000  *
.*                       input item code                                  *
.**************************************************************************
+
PROC0000  MOVE      TWENTY4,CCOL                 * set screen position
          MOVE      FIVE,CVERT 
          CALL      KYPRIITM                     * get an item #
          BRANCH    EXIT,PROC9000:               * exitchar entered
                         PROC4000:               * ? entered
                         PROC9000                * nothing entered
.
          MOVE      ITEMNUMB,PITEM               * save primary item numbers
          MOVE      SUBITEM,PSITEM
.
          BRANCH    COPTION,PROC8000             * insert mode
          CALL      CHKI0000                     * see if item on file
          BRANCH    EXIT,PROC0000
.
          GOTO      PROC8000
.
PROC4000  MOVE      ZERO,HLEF
          CALL      GETSCR00                     * save screen
PROC4200  MOVE      ONE,ITMFLAG
          MOVE      ONE,PATHFLAG
          CALL      PRIITMDS                     * list codes on file
.
PROC4500  DISPLAY   *P1:24,*EL,"Item Number: "
          MOVE      TEN4,CCOL
          MOVE      TWENTY4,CVERT
          CALL      KYPRIITM                     * get item number
          BRANCH    EXIT,PROC9000:               * exitchar entered
                         PROC4200:               * ? entered
                         PROC5000                * nothing entered
.
          MOVE      ITEMNUMB,PITEM               * save primary item numbers
          MOVE      SUBITEM,PSITEM
          BRANCH    COPTION,PROC7900             * insert option
          CALL      CHKI0000                     * item on file ?
          BRANCH    EXIT,PROC4500                * no
          GOTO      PROC7900
.
PROC5000  CALL      PUTSCR00                     * restore screen
          DISPLAY   *P24:5,*EL
          GOTO      PROC9000
.
PROC7900  CALL      PUTSCR00                     * restore screen
          DISPLAY   *P24:5,*V2LON,ITEMNUMB
.
          MATCH     SP3,SUBITEM                  * subitem number ?
          GOTO      PROC8000 IF EQUAL            * no
.
          DISPLAY   *P33:5,"(",*V2LON,SUBITEM,*HOFF,")"
PROC8000  MOVE      ZERO,EXIT
          GOTO      PROC9999
.
PROC9000  MOVE      ONE,EXIT
.
PROC9999  RETURN
+
.***************************************************************************
.*                             CHKI0000               Called by: PROC0000  *
.*                                                               STEP0000  *
.*                    check if item on file                                *
.***************************************************************************
.
CHKI0000  PACK      KEY22,IFLAG,ITEMNUMB,SUBITEM,SP8
          CALL      RSPRIT1                      * position in file
          CALL      RKPRIT1                      * read next record
          BRANCH    OVRCD,CHKI5000               * end of file
.
          COMPARE   PRITFLAG,IFLAG               * same item type ?
          GOTO      CHKI5000 IF NOT EQUAL        * no
.
          MATCH     ITEMNUMB,PRITITMN            * same item number ?
          GOTO      CHKI5000 IF NOT EQUAL        * no
.
          MATCH     SUBITEM,PRITSUBN             * same subitem number ?
          GOTO      CHKI5000 IF NOT EQUAL        * no
.
          GOTO      CHKI9000                     * item number on file
.
CHKI5000  DISPLAY   *P1:24,*EL,*B,"Item not on file.  ";
          CALL      HITENTER
          GOTO      CHKI9500
.
CHKI9000  MOVE      ZERO,EXIT
          GOTO      CHKI9999
.
CHKI9500  MOVE      ONE,EXIT
.
CHKI9999  RETURN
+
.****************************************************************************
.*                               DATE0000              Called by: ML0000    *
.*                     get effective date of the item                       *
.****************************************************************************
.
DATE0000  MOVE      TWENTY4,CCOL
          MOVE      SIX,CVERT
          UNPACK    SP6,CDAY,CMON,CYEAR
          MOVE      CCC,CCENT
          CALL      KEYDATE                      * get date
          BRANCH    CQUEST,DATE4000
          BRANCH    OVRCD,DATE9500               * invalid date input
.
          CALL      VALD0000                     * validate test & date
          BRANCH    EXIT,DATE0000                * not valid
.
          GOTO      DATE9000                     * valid
.
DATE4000  MOVE      ZERO,HLEF
          CALL      GETSCR00                     * save screen
.
DATE5000  CALL      GETD0000                     * display effective dates
          MOVE      TWENTY4,CCOL
          MOVE      SIX,CVERT
          UNPACK    SP6,CDAY,CMON,CYEAR
          MOVE      CCC,CCENT
          CALL      KEYDATE                      * get date
          BRANCH    CQUEST,DATE5000
          BRANCH    OVRCD,DATE9400               * invalid date input
.
          CALL      VALD0000                     * validate test & date
          BRANCH    EXIT,DATE5000                * invalid
.
          CALL      PACDATE
          CALL      PUTSCR00
          
DATE9000  MOVE      ZERO,EXIT
          GOTO      DATE9999
.
DATE9400  CALL      PUTSCR00
DATE9500  MOVE      ONE,EXIT
.
DATE9999  RETURN
+
.****************************************************************************
.*                                VALD0000             Called by: DATE0000  *
.*                validate the item and date input                          *
.*   RETURNS:      EXIT   0 = invalid item and date                         *
.*                        1 = valid item and date                           *
.****************************************************************************
.
VALD0000  PACK      ENDATE,CCENT,CYEAR,CMON,CDAY * save date
.
          PACK      KEY22,IFLAG,ITEMNUMB,SUBITEM,ENDATE
          CALL      RDPRIT1
          BRANCH    COPTION,VALD1000:            * insert mode
                            VALD2000:            * change mode
                            VALD2000             * delete mode
.
.         Insert mode
.
VALD1000  BRANCH    OVRCD,VALD9000               * not on file - ok
.
          DISPLAY   *P1:24,*EL,*B,"Item and date already on file.  ";
          CALL      HITENTER
          GOTO      VALD9500
.
.         Change / Delete mode
.
VALD2000  BRANCH    OVRCD,VALD3000               * not on file
.
          GOTO      VALD9000                     * on file - ok
.
VALD3000  DISPLAY   *P1:24,*EL,*B,"Item not on file for this date.  ";
          CALL      HITENTER
          GOTO      VALD9500
.
VALD9000  MOVE      ZERO,EXIT
          GOTO      VALD9999
.
VALD9500  MOVE      ONE,EXIT
.
VALD9999  RETURN
+
.***************************************************************************
.*                               GETD0000              Called by: DATE0000 *
.*                  display effective dates for item number                *
.***************************************************************************
.
GETD0000  DISPLAY   *P1:8,*EF,*V2LON,*ULON,"Effective Dates for ",ITEMNUMB
.
          MATCH     SP3,SUBITEM                  * subitem ?
          GOTO      GETD0500 IF EQUAL            * no
.
          DISPLAY   *P30:8,*V2LON,*ULON,"(",SUBITEM,")"
.
GETD0500  MOVE      EIGHT,CVERT
          PACK      KEY22,IFLAG,ITEMNUMB,SUBITEM,SP8
          CALL      RSPRIT1                      * position in file
          CALL      RKPRIT1                      * read next record
          BRANCH    OVRCD,GETD8000
.
          GOTO      GETD2000
.
GETD1000  CALL      RKPRIT1                      * read next record
          BRANCH    OVRCD,GETD9999               * no records on file
.
GETD2000  COMPARE   IFLAG,PRITFLAG               * same item type ?
          GOTO      GETD9999 IF NOT EQUAL        * no
.
          MATCH     ITEMNUMB,PRITITMN            * same item number ?
          GOTO      GETD9999 IF NOT EQUAL        * no
.
          MATCH     SUBITEM,PRITSUBN             * same sub item number ?
          GOTO      GETD9999 IF NOT EQUAL        * no
.
          COMPARE   TWENTY2,CVERT                * page full ?
          GOTO      GETD5000 IF NOT LESS         * yes
.
GETD3000  ADD       ONE,CVERT                    * increment line count
          UNPACK    PRITDAT1,CCENT,CYEAR,CMON,CDAY
          CALL      PACDATE
.
          DISPLAY   *P1:CVERT,CPCDATE            * display date
.
          GOTO      GETD1000                     * get next record
.
GETD5000  KEYIN     *P1:24,*EL,"(",*V2LON,*DV,ANSC,*HOFF,")ontinue, (":
                    *V2LON,*DV,ANSN,*HOFF,")ext page, (",*V2LON,*DV,ANSF,*HOFF:
                    ")irst page ? ":
                    *P41:24,*V2LON,ANS
.
          RESET     ANS
          REP       UPPLOW,ANS
.
          CMATCH    ANSC,ANS                     * continue ?
          GOTO      GETD9999 IF EQUAL            * yes
.
          CMATCH    ANSN,ANS                     * next ?
          GOTO      GETD7000 IF EQUAL            * yes
.
          CMATCH    ANSF,ANS                     * first
          GOTO      GETD0000 IF EQUAL            * yes
.
          BEEP
          GOTO      GETD5000
.
GETD7000  DISPLAY   *P1:9,*EF                    * clear page for next screen
          MOVE      EIGHT,CVERT
          GOTO      GETD3000
.
GETD8000  DISPLAY   *P1:24,*EL,*B,"No dates for this item on file.  ";
          CALL      HITENTER
.
GETD9999  RETURN
+
.**************************************************************************
.*                                  SCRA0000           Called by: ML0000  *
.*                    display initial screen format                       *
.**************************************************************************
.
SCRA0000  DISPLAY   *P1:3,*EF,*P5:4,"MBS or AMA (M/A)",*P22:4,COLON:
                    *P5:5,"Item Number",*P22:5,COLON:
                    *P5:6,"Effective From",*P22:6,COLON:
                    *P1:8,*V2LON,"1",*HOFF,". Description",*P22:8,COLON:
                    *P1:9,*V2LON,"2",*HOFF,". Keyin Indicator",*P22:9,COLON:
                    *P1:10,*V2LON,"3",*HOFF,". Set Code",*P22:10,COLON:
                    *P1:11,*V2LON,"4",*HOFF,". Schedule Fee",*P22:11,COLON:
                    *V2LON," $":
                    *P1:12,*V2LON,"5",*HOFF,". Fixed Charge (Y/N)",*P22:12:
                           COLON:
                    *P1:13,*V2LON,"6",*HOFF,". Schedule Fee 75 %",*P22:13:
                           COLON:
                    *P1:14,*V2LON,"7",*HOFF,". Schedule Fee 85 %",*P22:14:
                           COLON:
                    *P1:15,*V2LON,"8",*HOFF,". Suggested AMA Fee",*P22:15:
                           COLON:
                    *P1:16,*V2LON,"9",*HOFF,". Print Service Date",*P22:16:
                           COLON
.
          IF        IBCNUGST=2
            DISPLAY   *P45:9,*V2LON,"10",*HOFF,". GST Charge ",*P64:9:
                      COLON:
                      *P45:11,*V2LON,"11",*HOFF,". GST Payable Code ",*P64:11:
                      COLON
            MOVE      TEN2,ITNUMB
         ELSE
            MOVE      TEN,ITNUMB
         ENDIF
         DISPLAY      *P44:12,*V2LON,ITNUMB,*HOFF,". Path. Test (Y/N)",*P64:12:
                      COLON 
         ADD          ONE,ITNUMB
.
SCRA9999  RETURN
+
.**************************************************************************
.*                                 SCRB0000            Called by: ML0000  *
.*                       display pathology test fields            ACPT0000*
.*                                                                SEL0000 *
.**************************************************************************
.
SCRB0000  DISPLAY   *P44:13,*V2LON,ITNUMB,*HOFF,". Max No of Tests",*P64:13:
                    COLON 
          ADD       ONE,ITNUMB
          DISPLAY   *P44:14,*V2LON,ITNUMB,*HOFF,".Period of Days",*P64:14,COLON
          ADD       ONE,ITNUMB
          DISPLAY  *P44:15,*V2LON,ITNUMB,*HOFF,".Stepdown to item",*P64:15,COLON
          ADD       ONE,ITNUMB
.
SCRB9999  RETURN
+
.**************************************************************************
.*                                 HEAD0000            Called by: SECD0000*
.*                      display subitem header                    TDIS0000*
.**************************************************************************
.
HEAD0000  DISPLAY   *P1:13,*EF,*V2LON,*ULON,"Other Items Covered by this ":
                    "Item",*HOFF,*P5:15,*V2LON,"Item No.",*P21:15,"Description":
                    *P46:15,"Item No.",*P62:15,"Description"
.
HEAD9999  RETURN
+            
.**************************************************************************
.*                                  SCRE0000           Called by: ML0000  *
.*   display initial screen (including pathology information)     SECD0000*
.*             without field numbers                              MODI0000*
.*                                                                ADDI0000*
.**************************************************************************
.
SCRE0000  DISPLAY   *P1:3,*EF,*P5:4,"MBS or AMA (M/A)",*P22:4,COLON:
                    *P5:5,"Item Number",*P22:5,COLON:
                    *P5:6,"Effective From",*P22:6,COLON:
                    *P4:8,"Description",*P22:8,COLON:
                    *P4:9,"Keyin Indicator",*P22:9,COLON:
                    *P4:10,"Set Code",*P22:10,COLON:
                    *P4:11,"Schedule Fee",*P22:11,COLON:
                    *V2LON," $",*HOFF:
                    *P4:12,"Fixed Charge (Y/N)",*P22:12,COLON: 
                    *P4:13,"Schedule Fee 75%",*P22:13,COLON:
                    *P4:14,"Schedule Fee 85%",*P22:14,COLON:
                    *P4:15,"Suggested AMA Fee",*P22:15,COLON:
                    *P4:16,"Print Service Date/Time",*P22:16,COLON
.
          IF        IBCNUGST=2
            DISPLAY   *P48:9,"GST Charge",*P64:9,COLON:
                      *P48:11,"GST Payable Code",*P64:11,COLON
          ENDIF
          DISPLAY   *P48:12,"Path. Test (Y/N)",COLON:
                    *P48:13,"Max No of Tests",*P64:13:
                    COLON:
                    *P48:14,"Period of Days",*P64:14,COLON:
                    *P48:15,"Stepdown to item",*P64:15,COLON
.
SCRE9999  RETURN
+
.*************************************************************************
.*                                  ACPT0000           Called by: ML0000 *
.*   INPUT mode only :      accept initial values                        *
.*************************************************************************
.
ACPT0000  CALL      DESC0000                     * item description
          BRANCH    EXIT,ACPT9999                * exitchar
.
          CALL      KEYI0000                     * keyin indicator 
.
          CALL      SCOD0000                     * set code
          BRANCH    EXIT,ACPT9999
.
          CALL      SFEE0000                     * schedule fee
.
          CALL      FIXD0000                     * fixed charge item?
.
          CALL      SF750000                     * schedule fee 75%
.
          CALL      SF850000                     * schedule fee 85%
.
          CALL      SAFE0000                     * Suggested AMA Fee
.
          CALL      PRDT0000                     * Print Service Date/Time
.
          IF        IBCNUGST=2
            CALL      GSTA0000                     * GST Charge Applicable ?
          ENDIF
.
          CALL      GSTC0000                     * GST Payable Code
.
          CALL      PATH0000                     * path test indicator
          BRANCH    EXIT,ACPT9999
.
          BRANCH    IPATH,ACPT9000               * not pathology item
.
          CALL      SCRB0000                     * display extra fields
.
          CALL      MNUM0000                     * max. no. tests
          BRANCH    EXIT,ACPT9000                * zero entered
.
          CALL      DAYS0000                     * period of days
.                                                * covered by this item
          CALL      STEP0000                     * item number to stepdown to
          BRANCH    EXIT,SEL9999
.
ACPT9000  MOVE      ZERO,EXIT
.
ACPT9999  RETURN 
+ 
.**************************************************************************** 
.*                                  TYPE0000           Called by: PROC0000  *
.*                        get the type of item                              *
.****************************************************************************
.
TYPE0000  KEYIN        *P24:4,*EL,*DV,UNDLN1:
                       *P24:4,*V2LON,ITYPE
.
          ENDSET       ITYPE
          APPEND       SP1,ITYPE
          RESET        ITYPE
          REP          UPPLOW,ITYPE
.
          MATCH        SP1,ITYPE                 * anything entered ?
          GOTO         TYPE9500 IF EQUAL         * no
.
          MATCH        ANSM,ITYPE                * M entered ?
          GOTO         TYPE8000 IF EQUAL         * yes
.
          MATCH        ANSA,ITYPE                * A entered ?
          GOTO         TYPE8500 IF EQUAL         * yes
.
          DISPLAY      *P1:24,*EL,*B,"Type not valid. ";
          CALL         HITENTER
          GOTO         TYPE0000
.
TYPE8000  MOVE         MBS,TYPDESC
          MOVE         ZERO,IFLAG
          GOTO         TYPE9000
.
TYPE8500  MOVE         AMA,TYPDESC
          MOVE         ONE,IFLAG
.
TYPE9000  DISPLAY      *P24:4,*V2LON,TYPDESC
          MOVE         ZERO,EXIT
          GOTO         TYPE9999
.
TYPE9500  MOVE         ONE,EXIT
.
TYPE9999  RETURN
+
.****************************************************************************
.*                                  DESC0000           Called by: SEL0000   *
.*                        input item description                  ACPT0000  *
.****************************************************************************
.
DESC0000  KEYIN     *P24:8,*DV,UNDLN30:
                    *P24:8,*V2LON,IDESC:
                    *P24:8,*DV,IDESC
.
          ENDSET    IDESC
          APPEND    SP30,IDESC
          RESET     IDESC
.
          MATCH     SP30,IDESC                   * anything entered ?
          GOTO      DESC8000 IF EQUAL            * no
.
          MATCH     EXITCHAR,IDESC               * exitchar entered ?
          GOTO      DESC9500 IF EQUAL            * yes
.
          GOTO      DESC9000                     * something entered
.
DESC8000  DISPLAY   *P1:24,*EL,*B,"Description is a mandatory field. ";
          CALL      HITENTER
          GOTO      DESC0000
.
DESC9000  MOVE      ZERO,EXIT
          GOTO      DESC9999
.
DESC9500  MOVE      ONE,EXIT
.
DESC9999  RETURN
+
.****************************************************************************
.*                                  KEYI0000           Called by: SEL0000   *
.*                      input keyin indicator                     ACPT0000  *
.****************************************************************************
.
KEYI0000  DISPLAY   *P1:24,"Selections: ":
                    *P13:24,*V2LON,"0 - Normal,  1 - Operator keyin"
.
          MOVE      ZERO,IKEY
          KEYIN     *P24:9,*DV,SP20,*P24:9,*DV,ZERO:
                    *P24:9,*V2LON,*RV,IKEY:
                    *P24:9,*DV,IKEY
.
          COMPARE   ZERO,IKEY                    * 0 entered ?
          GOTO      KEYI8000 IF EQUAL            * yes
.
          COMPARE   ONE,IKEY                     * 1 entered ?
          GOTO      KEYI8500 IF EQUAL            * yes
.
          DISPLAY   *P1:24,*EL,*B,"Keyin indicator not valid. ";
          CALL      HITENTER
          GOTO      KEYI0000
.
KEYI8000  MOVE      NKEY,KEYDESC
          GOTO      KEYI9000
.
KEYI8500  MOVE      OPKEY,KEYDESC
.
KEYI9000  DISPLAY   *P1:24,*EL,*P28:9,KEYDESC
          MOVE      ZERO,EXIT
          GOTO      KEYI9999
.
KEYI9999  RETURN
+
.****************************************************************************
.*                                  SCOD0000           Called by: SEL0000   *
.*                         input set code for item                ACPT0000  *
.****************************************************************************
.
SCOD0000  KEYIN     *P24:10,*DV,SP20,*DV,SP4,*P24:10,*DV,UNDLN3:
                    *P24:10,*V2LON,SETCODE:
                    *P24:10,*DV,SETCODE
.
          CALL      CHKS0000                     * see what was entered
          BRANCH    EXIT,SCOD9000:               * exitchar entered
                         SCOD4000:               * ? entered
                         SCOD8000                * valid code
.
          GOTO      SCOD0000                     * invalid entry
.
SCOD4000  MOVE      ZERO,HLEF
          CALL      GETSCR00                     * save screen
SCOD4200  CALL      PATCODDS                     * list codes on file
.
SCOD4500  KEYIN     *P1:24,"Set Code: ",*DV,UNDLN3:
                    *P11:24,*V2LON,SETCODE:
                    *P11:24,*DV,SETCODE
.
          CALL      CHKS0000                     * see what was entered
          BRANCH    EXIT,SCOD8900:               * exitchar entered
                         SCOD4500:               * ? entered
                         SCOD7900                * valid entry
.
          GOTO      SCOD4200                     * invalid entry
.
SCOD7900  CALL      PUTSCR00
          DISPLAY   *P24:10,*V2LON,SETCODE
SCOD8000  MOVE      ZERO,EXIT
          MOVE      TDESC,SETDESC
          DISPLAY   *P28:10,SETDESC
          GOTO      SCOD9999
.
SCOD8900  CALL      FRESCR00
SCOD9000  MOVE      ONE,EXIT
.
SCOD9999  RETURN
+
.****************************************************************************
.*                                  CHKS0000           Called by: SCOD0000  *
.*                    see what was entered for set code                     *
.*           exit - 0 = invalid entry                                       *
.*                  1 = exitchar entered                                    *
.*                  2 = ? entered                                           *
.*                  3 = valid code                                          *
.****************************************************************************
.
CHKS0000  ENDSET    SETCODE
          APPEND    SP3,SETCODE
          RESET     SETCODE
.
          MATCH     SP3,SETCODE                  * anything entered ?
          GOTO      CHKS6000 IF EQUAL            * no
.
          CMATCH    EXITCHAR,SETCODE             * exitchar entered ?
          GOTO      CHKS9500 IF EQUAL            * yes
.
          CMATCH    QUEST,SETCODE                * ? entered ?
          GOTO      CHKS9000 IF EQUAL            * yes
.
          PACK      KEY5,CODEPG,SETCODE
          CALL      RDCODE1                      * code valid
          COMPARE   ZERO,OVRCD
          GOTO      CHKS8000 IF EQUAL            * yes
.
          DISPLAY   *P1:24,*EL,*B,"Code not on file. ";
          CALL      HITENTER
          GOTO      CHKS7000
.
CHKS6000  DISPLAY   *P1:24,*EL,*B,"Set code is a mandatory field. ";
          CALL      HITENTER
.
CHKS7000  MOVE      ZERO,EXIT                    * invalid entry
          GOTO      CHKS9999
.
CHKS8000  MOVE      THREE,EXIT                   * valid code
          GOTO      CHKS9999
.
CHKS9000  MOVE      TWO,EXIT
          GOTO      CHKS9999
.
CHKS9500  MOVE      ONE,EXIT
.
CHKS9999  RETURN
+
.****************************************************************************
.*                                  SFEE0000           Called by: SEL0000   *
.*                       input schedule fee for item              ACPT0000  *
.****************************************************************************
.
SFEE0000  KEYIN     *P25:11,*DV,SP10,*DV,SP1,*P25:11,*V2LON,IFEE:
                    *P25:11,*DV,IFEE
.
          MOVE      ZERO,EXIT
.
SFEE9999  RETURN
+
.****************************************************************************
.*                                  FIXD0000           Called by: SEL0000   *
.*                         input if item is a fixed charge        ACPT0000  *
.****************************************************************************
.
FIXD0000  KEYIN     *P24:12,*DV,UNDLN1:
                    *P24:12,*V2LON,ANS:
                    *P24:12,*DV,ANS
.
          ENDSET    ANS
          APPEND    SP1,ANS
          RESET     ANS
          REP       UPPLOW,ANS
.
          MATCH     SP1,ANS                      * anything entered ?
          GOTO      FIXD8500 IF EQUAL            * no
.
          MATCH     EXITCHAR,ANS                 * exitchar entered ?
          GOTO      FIXD9500 IF EQUAL            * yes
.
          MATCH     ANSY,ANS                     * Y entered ?
          GOTO      FIXD8000 IF EQUAL            * yes
.
          MATCH     ANSN,ANS                     * N entered ?
          GOTO      FIXD8500 IF EQUAL            * yes
.
          BEEP
          GOTO      FIXD0000
.
FIXD8000  MOVE      ONE,FIXED
          DISPLAY   *P24:12,*V2LON,"Yes"
          MOVE      ZERO,EXIT
          GOTO      FIXD9999
.
FIXD8500  MOVE      TWO,FIXED
          DISPLAY   *P24:12,*V2LON,"No "
          MOVE      ZERO,EXIT
          GOTO      FIXD9999
.
FIXD9500  MOVE      ONE,EXIT
.
FIXD9999  RETURN
+
.****************************************************************************
.*                                  GSTA0000           Called by: SEL0000   *
.*                         is GST applicable to this charge       ACPT0000  *
.****************************************************************************
GSTA0000  DISPLAY   *P1:24,"Selections: ":
                    *P13:24,*V2LON,"0 - GST Free ,  1 - GST Payable":
                    " ,  2 - Either"
.
          MOVE      ZERO,GKEY
          KEYIN     *P66:9,*EL,*DV,UNDLN1:
                    *P66:9,*V2LON,GKEY:
                    *P66:9,*DV,GKEY
.
          COMPARE   ZERO,GKEY
          GOTO      GSTA8000 IF EQUAL
.
          COMPARE   ONE,GKEY
          GOTO      GSTA8500 IF EQUAL
.
          COMPARE   TWO,GKEY
          GOTO      GSTA8700 IF EQUAL
.
          DISPLAY   *P1:24,*EL,*B," GST Charge not valid. ";
          CALL      HITENTER
          GOTO      GSTA0000
.
GSTA8000  MOVE      GSTF,KEYDESC
          MOVE      SP8,PRITGSTC
          DISPLAY   *P65:11,*EL,SP70
          GOTO      GSTA9000
.
GSTA8500  MOVE      GSTP,KEYDESC
          GOTO      GSTA9000
.
GSTA8700  MOVE      EITH,KEYDESC
          GOTO      GSTA9000
.
GSTA9000  DISPLAY   *P1:24,*EL,*P70:9,KEYDESC
          MOVE      ZERO,EXIT
          MOVE      GKEY,PRITGSTA      
          GOTO      GSTA9999
. 
GSTA9999  RETURN
+
.****************************************************************************
.*                                  GSTC0000           Called by: SEL0000   *
.*                GST payable code from GST rates table           ACPT0000  *
.****************************************************************************
GSTC0000  COMPARE ZERO,PRITGSTA
          GOTO    GSTC9999 IF EQUAL
.
          MOVE     SP30,IBGSDESC
          MOVE     "65",CCOL
          MOVE     "11",CVERT
          CALL     KIBGSA00
.
          PACK    KEY14,IBGSCODE,SP10
          CALL    RSIBGS1
.
          DISPLAY *P65:11,*EL,*V2LON,IBGSCODE:
          *P72:11,*HOFF,IBGSDESC
          MOVE    IBGSCODE,PRITGSTC
          MOVE    PRITGSTC,PRIVGSTC
          GOTO    GSTC9999
.
GSTC9999  RETURN
+
.****************************************************************************
.*                                  PATH0000           Called by: SEL0000   *
.*                         input if item is pathology test        ACPT0000  *
.****************************************************************************
.
PATH0000  KEYIN     *P66:12,*EL,*DV,UNDLN1:
                    *P66:12,*V2LON,ANS:
                    *P66:12,*DV,ANS
.
          ENDSET    ANS
          APPEND    SP1,ANS
          RESET     ANS
          REP       UPPLOW,ANS
.
          MATCH     SP1,ANS                      * anything entered ?
          GOTO      PATH8500 IF EQUAL            * no
.
          MATCH     EXITCHAR,ANS                 * exitchar entered ?
          GOTO      PATH9500 IF EQUAL            * yes
.
          MATCH     ANSY,ANS                     * Y entered ?
          GOTO      PATH8000 IF EQUAL            * yes
.
          MATCH     ANSN,ANS                     * N entered ?
          GOTO      PATH8500 IF EQUAL            * yes
.
          DISPLAY   *P1:24,*EL,*B,"Entry not valid. ";
          CALL      HITENTER
          GOTO      PATH0000
.
PATH8000  MOVE      YES,PDESC
          MOVE      ZERO,IPATH
          GOTO      PATH9000
.
PATH8500  MOVE      NO,PDESC
          MOVE      ONE,IPATH
          MOVE      ZERO,MAXNUM
          MOVE      ZERO,PERDAY
          DISPLAY   *P45:13,*EL:                 * remove fields 7, 8 & 9
                    *P45:14,*EL:
                    *P45:15,*EL
.
PATH9000  DISPLAY   *P66:12,*V2LON,PDESC
          MOVE      ZERO,EXIT
          GOTO      PATH9999
.
PATH9500  MOVE      ONE,EXIT
.
PATH9999  RETURN
+
.****************************************************************************
.*                                  MNUM0000           Called by: SEL0000   *
.*                     input maximum number of tests              ACPT0000  *
.****************************************************************************
.
MNUM0000  KEYIN     *P66:13,*EL,*V2LON,MAXNUM:
                    *P66:13,*DV,MAXNUM
.
          COMPARE   MAXNUM,ZERO                  * number > zero ?
          GOTO      MNUM9000 IF LESS             * yes
          GOTO      MNUM9500 IF EQUAL            * zero entered
.
          DISPLAY   *P1:24,*EL,*B,"Number must be greater than zero. ";
          CALL      HITENTER
          GOTO      MNUM0000
.
MNUM9000  MOVE      ZERO,EXIT
          GOTO      MNUM9999
.
MNUM9500  DISPLAY   *P66:13,*EL:
                    *P66:14,*EL:
                    *P66:15
          MOVE      ZERO,PERDAY
          MOVE      SP9,STEPDOWN
          MOVE      SP3,STEPSUBN
          MOVE      ONE,EXIT
.
MNUM9999  RETURN
+
.****************************************************************************
.*                                  DAYS000            Called by: SEL0000   *
.*                    input period of days                        ACPT0000  *
.****************************************************************************
.
DAYS0000  KEYIN     *P66:14,*EL,*V2LON,PERDAY:
                    *P66:14,*DV,PERDAY
.
          COMPARE   ONE,PERDAY                   * <= 0 entered ?
          GOTO      DAYS9000 IF NOT LESS         * no 
.
          DISPLAY   *P1:24,*EL,*B,"Number must be greater than zero. ";
          CALL      HITENTER
          GOTO      DAYS0000
.
DAYS9000  MOVE      ZERO,EXIT
.
DAYS9999  RETURN
+
.****************************************************************************
.*                                  STEP0000           Called by: SEL0000   *
.*                    input item to stepdown to                   ACPT0000  *
.****************************************************************************
.
STEP0000  MOVE      "66",CCOL                    * set screen position
          MOVE      TEN5,CVERT 
          CALL      KYPRIITM                     * get an item #
          BRANCH    EXIT,STEP9000:               * exitchar entered
                         STEP4000:               * ? entered
                         STEP8000                * nothing entered
.
          CALL      CHKI0000                     * see if item on file
          BRANCH    EXIT,STEP0000
.
          MOVE      ITEMNUMB,STEPDOWN            * save item numbers
          MOVE      SUBITEM,STEPSUBN
.
          MOVE      ZERO,EXIT
          GOTO      STEP9999
.
.         "?" option selected
.
STEP4000  MOVE      ZERO,HLEF
          CALL      GETSCR00                     * save screen
STEP4200  MOVE      ONE,ITMFLAG
          MOVE      ONE,PATHFLAG
          CALL      PRIITMDS                     * list codes on file
.
STEP4500  DISPLAY   *P1:24,*EL,"Item Number: "
          MOVE      TEN4,CCOL
          MOVE      TWENTY4,CVERT
          CALL      KYPRIITM                     * get item number
          BRANCH    EXIT,STEP8900:               * exitchar entered
                         STEP4200:               * ? entered
                         STEP5000                * nothing entered
.
          CALL      CHKI0000                     * item on file ?
          BRANCH    EXIT,STEP4500                * no
.
          MOVE      ITEMNUMB,STEPDOWN            * save item numbers
          MOVE      SUBITEM,STEPSUBN
          GOTO      STEP7900
.
.         Nothing input after "?"
.
STEP5000  CALL      PUTSCR00                     * restore screen
          DISPLAY   *P66:15,*EL
          GOTO      STEP8000
.
STEP7900  CALL      PUTSCR00                     * restore screen
          DISPLAY   *P66:15,*V2LON,STEPDOWN
.
          MATCH     SP3,STEPSUBN                 * subitem number ?
          GOTO      STEP9999 IF EQUAL            * no
.
          DISPLAY   *P75:15,SLASH,*V2LON,STEPSUBN
.
          MOVE      ZERO,EXIT
          GOTO      STEP9999
.
.         Nothing input
.
STEP8000  MOVE      SP9,STEPDOWN
          MOVE      SP3,STEPSUBN
          MOVE      ZERO,EXIT
          GOTO      STEP9999
.
.         Exitchar input
.
STEP8900  CALL      FRESCR00
.
STEP9000  MOVE      ONE,EXIT
.
STEP9999  RETURN
+
.****************************************************************************
.*                                  SECD0000           Called by: ML0000    *
.*                input secondary items for this item (input mode only)     *
.****************************************************************************
.
SECD0000  CALL      HEAD0000                     * display input fields
.
          MOVE      ZERO,COUNTER
          MOVE      FIVE,CCOL
          MOVE      TEN5,CVERT
.
SECD0500  ADD       ONE,COUNTER
          COMPARE   TEN5,COUNTER                 * last entry ?
          GOTO      SECD9999 IF EQUAL            * yes 
          ADD       ONE,CVERT                    * increment line count
          COMPARE   TWENTY3,CVERT                * bottom line ?
          GOTO      SECD1000 IF LESS             * no
.
          MOVE      TEN6,CVERT                   * second half of screen
          MOVE      FORTY6,CCOL
.
.         Display record number
.
SECD1000  MOVE      CCOL,SAVCOL
          MOVE      CVERT,SAVERT
          COMPARE   COUNTER,SEVEN                * 1st half of screen ?
          GOTO      SECD1100 IF LESS             * no
          DISPLAY   *P1:CVERT,*V2LON,COUNTER,*HOFF,"."
          GOTO      SECD1300
.
SECD1100  DISPLAY   *P42:CVERT,*V2LON,COUNTER,*HOFF,"."
.
SECD1300  CALL      KYPRIITM                     * get secondary item
          BRANCH    EXIT,SECD9000:               * abort
                         SECD4000:               * ? entered
                         SECD9999                * nothing entered
.
          CALL      CHEK0000                     * see if item valid
          MOVE      SAVERT,CVERT
          MOVE      SAVCOL,CCOL
          BRANCH    EXIT,SECD1300                * no
.
.         Valid subitem so write to temp file
.
SECD2500  DISPLAY   *PCCOL:CVERT,PRITITMN
.
          MATCH     SP3,PRITSUBN                 * subitem ?
          GOTO      SECD2600 IF EQUAL            * no
.
          ADD       NINE,CCOL
          DISPLAY   *PCCOL:CVERT,"(",PRITSUBN,")"
          SUB       NINE,CCOL
.
SECD2600  ADD       TEN6,CCOL
          DISPLAY   *PCCOL:CVERT,ITDESC
          SUB       TEN6,CCOL
.
          PACK      KEY34,IFLAG,PITEM,PSITEM,ENDATE,ITEMNUMB,SUBITEM 
          MOVE      SP4,XSPARE 
          MOVE      ITDESC,XDESC 
          CALL      WRTEMP1                      * write record to temp file 
          GOTO      SECD0500                     * get next subitem
.
SECD4000  MOVE      ZERO,HLEF
          CALL      GETSCR00
          MOVE      CCOL,SAVCOL
          MOVE      CVERT,SAVERT
SECD4050  MOVE      ZERO,ITMFLAG
          MOVE      ENDATE,SERDATE
          MOVE      ONE,PATHFLAG
          CALL      PRIITMDS                     * display items on file
.
SECD4100  DISPLAY   *P1:24,*EL,"Item Number: "
          MOVE      TEN4,CCOL
          MOVE      TWENTY4,CVERT
          CALL      KYPRIITM
          BRANCH    EXIT,SECD8900:               * exitchar entered
                         SECD4050:               * ? entered 
                         SECD4500                * nothing entered 
.
          CALL      CHEK0000                     * see if entry valid
          BRANCH    EXIT,SECD4100                * no
          MOVE      SAVERT,CVERT
          MOVE      SAVCOL,CCOL
          GOTO      SECD5000                     * yes
.
SECD4500  CALL      FRESCR00
          CALL      SCRE0000
          CALL      DISA0000
          CALL      DISB0000
          GOTO      SECD9999
.
SECD5000  CALL      PUTSCR00
          GOTO      SECD2500
.
SECD8900  CALL      FRESCR00
SECD9000  MOVE      ONE,EXIT
.
SECD9999  RETURN
+
.****************************************************************************
.*                                 CHEK0000            Called by: SECD0000  *
.*                see what was input for secondary item           ADDI0000  *
.*  RETURNS:      EXIT    0 = valid item                          MODI0000  *
.*                        1 = invalid entry                                 *
.****************************************************************************
.
CHEK0000  MATCH     ITEMNUMB,PITEM               * same as primary item ?
          GOTO      CHEK0500 IF NOT EQUAL        * no
.
          MATCH     SUBITEM,PSITEM               * same primary subitem ?
          GOTO      CHEK0500 IF NOT EQUAL        * no
.
          GOTO      CHEK3000
.
CHEK0500  PACK      KEY22,IFLAG,ITEMNUMB,SUBITEM,ENDATE
          CALL      RDPRIT1
          COMPARE   ZERO,OVRCD                   * on file ?
          GOTO      CHEK1000 IF EQUAL            * yes
.
          DISPLAY   *P1:24,*EL,*B,"Item not on file. ";
          CALL      HITENTER
          GOTO      CHEK9500
.
CHEK1000  COMPARE   ZERO,PRITPATH                * pathology item ?
          GOTO      CHEK2000 IF EQUAL            * yes
.
          DISPLAY   *P1:24,*EL,*B,"Not a pathology item. ";
          CALL      HITENTER
          GOTO      CHEK9500
.
CHEK2000  PACK      KEY34,IFLAG,PITEM,PSITEM,ENDATE,ITEMNUMB,SUBITEM
          CALL      RDTEMP1                      * item on file already ?
          BRANCH    OVRCD,CHEK9000               * no
.
          DISPLAY   *P1:24,*EL,*B,"Item already input. ";
          CALL      HITENTER
          GOTO      CHEK9500
.
CHEK3000  DISPLAY   *P1:24,*EL,*B,"Primary item not allowed.  ";
          CALL      HITENTER
          GOTO      CHEK9500
.
CHEK9000  MOVE      PRITDESC,ITDESC
          MOVE      ZERO,EXIT
          GOTO      CHEK9999
.
CHEK9500  MOVE      ONE,EXIT
.
CHEK9999  RETURN
+
.****************************************************************************
.*                                  READ0000           Called by: ML0000    *
.*     read secondary items from group file into temporary file             *
.****************************************************************************
.
READ0000  PACK      KEY34,IFLAG,PITEM,PSITEM,ENDATE,SP10,SP2
          CALL      RSPRGP1                      * position in file
READ1000  CALL      RKPRGP1                      * read next record
          BRANCH    OVRCD,READ8000               * no more records
.
          COMPARE   IFLAG,PRGPFLAG               * same item flag ?
          GOTO      READ8000 IF NOT EQUAL        * no
.
          MATCH     PITEM,PRGPITM1               * same primary item # ?
          GOTO      READ8000 IF NOT EQUAL        * no
.
          MATCH     PSITEM,PRGPSUB1              * same subitem # ?
          GOTO      READ8000 IF NOT EQUAL        * no
.
          MATCH     ENDATE,PRGPDATE              * same effective date ?
          GOTO      READ8000 IF NOT EQUAL        * no
.
.         Valid group record found, so write it to the temp file
.
          PACK      KEY34,PRGPFLAG,PRGPITM1,PRGPSUB1,PRGPDATE,PRGPITM2,PRGPSUB2
          MOVE      PRGPSPAR,XSPARE
.
.         Get the subitem description from the item file
.
          PACK      KEY22,PRGPFLAG,PRGPITM2,PRGPSUB2,PRGPDATE
          CALL      RDPRIT1
          BRANCH    OVRCD,READ7000
.
          MOVE      PRITDESC,XDESC
.
          CALL      WRTEMP1                      * write record to temp file
          GOTO      READ1000                     * get next record
.
READ7000  DISPLAY   *P1:24,*EL,*B,"Subitem not on file. ";
          CALL      HITENTER
          GOTO      READ9500
.
.         Re-read the primary item record again to restore values
.
READ8000  PACK      KEY22,IFLAG,PITEM,PSITEM,ENDATE
          CALL      RDPRIT1
          COMPARE   OVRCD,ZERO
          GOTO      READ9800 IF EQUAL
.
READ9500  MOVE      ONE,EXIT
          GOTO      READ9999
.
READ9800  MOVE      ZERO,EXIT
.
READ9999  RETURN
+
.****************************************************************************
.*                                   TDIS0000          Called by: MODI0000  *
.*                display records from temporary file             ADDI0000  *
.*                                                                DELI0000  *
.****************************************************************************
.
TDIS0000  CALL      HEAD0000
          PACK      KEY34,SP30,SP4               * position at start of file 
          MOVE      ZERO,COUNTER
          MOVE      TEN5,CVERT
          MOVE      FIVE,CCOL
          CALL      RSTEMP1
TDIS0500  CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,TDIS9999               * no more records on file
.
          ADD       ONE,COUNTER
          ADD       ONE,CVERT
          COMPARE   TWENTY3,CVERT                * bottom line ?
          GOTO      TDIS1000 IF LESS             * no
.
          COMPARE   FORTY6,CCOL                  * any more entries ?
          GOTO      TDIS9999 IF NOT LESS         * no
          MOVE      TEN6,CVERT
          MOVE      FORTY6,CCOL
.
TDIS1000  COMPARE   COUNTER,SEVEN
          GOTO      TDIS1100 IF LESS
          DISPLAY   *P1:CVERT,*V2LON,COUNTER,*HOFF,"." 
          GOTO      TDIS1200
.
TDIS1100  DISPLAY   *P42:CVERT,*V2LON,COUNTER,*HOFF,"."
.
TDIS1200  DISPLAY   *PCCOL:CVERT,XITEM2,XSITEM2,SP4,XDESC
          GOTO      TDIS0500
.
TDIS9999  RETURN
+
.****************************************************************************
.*                                  EDIT0000           Called by: ML0000    *
.*                    see if there are changes to temp file records         *
.*                    prior to posting                                      *
.****************************************************************************
.
EDIT0000  MOVE      SP2,CHOICE
          KEYIN     *P1:24,"Select Item, (",*V2LON:
                    *DV,ANSA,*HOFF,")dd, (",*V2LON,*DV,ANSD,*HOFF:
                    ")elete, (",*V2LON,*DV,ANSC,*HOFF,")ancel, (":
                    *V2LON,*DV,ANSP,*HOFF,")ost : ",*DV,UNDLN2:
                    *P50:24,*V2LON,CHOICE:
                    *P50:24,*DV,CHOICE
.
          TYPE      CHOICE
          GOTO      EDIT2000 IF EQUAL       * Number entered
.
          ENDSET    CHOICE
          APPEND    SP2,CHOICE
          RESET     CHOICE
          REP       UPPLOW,CHOICE
.
          MATCH     ANSA,CHOICE
          GOTO      EDIT7000 IF EQUAL       * add record selected
.
          MATCH     ANSD,CHOICE             * delete record selected
          GOTO      EDIT7500 IF EQUAL
.
          MATCH     ANSC,CHOICE             * Cancel
          GOTO      EDIT9000 IF EQUAL
.
          MATCH     ANSP,CHOICE
          GOTO      EDIT8000 IF EQUAL       * Post records            
.
          BEEP                              * Invalid entry
          GOTO      EDIT0000
.
.         See if a valid number was entered
.
EDIT2000  MOVE      CHOICE,TNUMB
.
          COMPARE   ZERO,TNUMB 
          GOTO      EDIT0000 IF LESS
          GOTO      EDIT4000 IF EQUAL
.
          COMPARE   TNUMB,COUNTER
          GOTO      EDIT6000 IF NOT LESS
.
EDIT4000  DISPLAY   *P1:24,*EL,*B,"You must select a number displayed on ":
                    "the screen. ";
          CALL      HITENTER
          GOTO      EDIT0000
.
EDIT6000  CALL      MODI0000                     * Modify item
          BRANCH    EXIT,EDIT9000                * exitchar
          GOTO      EDIT0000
.
EDIT7000  CALL      ADDI0000                     * Add item
          BRANCH    EXIT,EDIT9000
          GOTO      EDIT0000
.
EDIT7500  CALL      DELI0000                     * Delete item
          GOTO      EDIT0000
.
EDIT8000  MOVE      ZERO,EXIT                    * Post
          GOTO      EDIT9999
.
EDIT9000  MOVE      ONE,EXIT                     * Cancel
.
EDIT9999  RETURN
+
.****************************************************************************
.*                                  MODI0000           Called by: EDIT0000  *
.*                    modify an item in the list of subtests                *
.****************************************************************************
.
MODI0000  MOVE      ZERO,FORM2
          PACK      KEY34,SP30,SP4
          CALL      RSTEMP1                      * position at start of file
MODI1500  CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,MODI9000               * no more records 
.
          ADD       ONE,FORM2
          COMPARE   FORM2,TNUMB                  * record for modifying ?
          GOTO      MODI1500 IF NOT EQUAL        * no
.
.         Save current item prior to change
.
          MOVE      XITEM2,TEMPITEM
          MOVE      XSITEM2,TEMPSITM
          MOVE      XDESC,TEMPDESC
.
          MOVE      TNUMB,CVERT                  * set up column and row
          COMPARE   TNUMB,SEVEN                  * first half of screen ?
          GOTO      MODI2000 IF LESS             * no
.
          ADD       TEN5,CVERT
          MOVE      FIVE,CCOL
          DISPLAY   *PCCOL:CVERT,SP30,SP6        * clear previous item & desc.
          GOTO      MODI2500
.
MODI2000  ADD       EIGHT,CVERT
          MOVE      FORTY6,CCOL
          DISPLAY   *PCCOL:CVERT,SP30,SP6
.
MODI2500  CALL      KYPRIITM                     * input item number
          BRANCH    EXIT,MODI9700:               * exitchar entered
                         MODI4000:               * ? entered
                         MODI9000                * nothing entered
.
          CALL      CHEK0000                     * see if valid entry
          BRANCH    EXIT,MODI0000                * no
.
.         See if the same item has been re-entered
.
          MATCH     PRITITMN,TEMPITEM            * same item number ?
          GOTO      MODI3500 IF NOT EQUAL        * no
.
          MATCH     PRITSUBN,TEMPSITM            * same subitem number ?
          GOTO      MODI3500 IF NOT EQUAL        * no
.
          GOTO      MODI9000                     * same entry
.
.         Delete original entry then write new entry
.
MODI3500  PACK      KEY34,IFLAG,PITEM,PSITEM,ENDATE,TEMPITEM,TEMPSITM
          CALL      DETEMP1
          PACK      KEY34,IFLAG,PITEM,PSITEM,ENDATE,ITEMNUMB,SUBITEM 
          MOVE      SP4,XSPARE 
          MOVE      ITDESC,XDESC 
          CALL      WRTEMP1                      * write record to temp file 
          GOTO      MODI9000
.
MODI4000  MOVE      ZERO,HLEF
          CALL      GETSCR00                     * save screen
MODI4050  MOVE      ZERO,ITMFLAG
          MOVE      ENDATE,SERDATE
          MOVE      ONE,PATHFLAG
          CALL      PRIITMDS                     * display items on file
.
MODI4100  DISPLAY   *P1:24,*EL,"Item Number: "
          MOVE      TEN4,CCOL
          MOVE      TWENTY4,CVERT
          CALL      KYPRIITM
          BRANCH    EXIT,MODI9600:               * exitchar entered
                         MODI4050:               * ? entered
                         MODI8900                * nothing entered
.
          CALL      CHEK0000                     * see if valid entry
          BRANCH    EXIT,MODI4100                * no
.
.         See if the same item has been re-entered
.
          MATCH     PRITITMN,TEMPITEM            * same item number ?
          GOTO      MODI6000 IF NOT EQUAL        * no
.
          MATCH     PRITSUBN,TEMPSITM            * same subitem ?
          GOTO      MODI6000 IF NOT EQUAL        * no
.
          GOTO      MODI8900                     * same item input
.
MODI6000  CALL      FRESCR00
          CALL      SCRE0000
          CALL      DISA0000
          CALL      DISB0000
          GOTO      MODI3500
.
MODI8900  CALL      FRESCR00
          CALL      SCRE0000
          CALL      DISA0000
          CALL      DISB0000
.
MODI9000  CALL      TDIS0000
          MOVE      ZERO,EXIT
          GOTO      MODI9999
.
MODI9600  CALL      FRESCR00
MODI9700  MOVE      ONE,EXIT
.
MODI9999  RETURN
+
.****************************************************************************
.*                                  ADDI0000           Called by: EDIT0000  *
.*                       add item to list of subtests                       *
.****************************************************************************
.
ADDI0000  COMPARE   COUNTER,TEN3                 * maximum items already ?
          GOTO      ADDI9500 IF LESS             * yes
.
          ADD       ONE,COUNTER                  * increment record counter
          MOVE      COUNTER,CVERT
          COMPARE   COUNTER,SEVEN                * first half of screen ?
          GOTO      ADDI1000 IF LESS             * no
.
          ADD       TEN5,CVERT
          DISPLAY   *P1:CVERT,*V2LON,COUNTER,*HOFF,"." 
          MOVE      FIVE,CCOL
          GOTO      ADDI1500 
.
ADDI1000  ADD       EIGHT,CVERT
          DISPLAY   *P42:CVERT,*V2LON,COUNTER,*HOFF,"." 
          MOVE      FORTY6,CCOL
.
ADDI1500  CALL      KYPRIITM                     * input item
          BRANCH    EXIT,ADDI9000:               * exitchar entered
                         ADDI4000:               * ? entered
                         ADDI8000                * nothing entered
.
          CALL      CHEK0000                     * see if valid entry
          BRANCH    EXIT,ADDI1500                * no
.
          PACK      KEY34,IFLAG,PITEM,PSITEM,ENDATE,ITEMNUMB,SUBITEM 
          MOVE      ITDESC,XDESC
          MOVE      SP4,XSPARE 
          CALL      WRTEMP1                      * write record to temp file 
          GOTO      ADDI8000
.
ADDI4000  MOVE      ZERO,HLEF
          CALL      GETSCR00                     * save screen
ADDI4200  MOVE      ZERO,ITMFLAG
          MOVE      ENDATE,SERDATE
          MOVE      ONE,PATHFLAG
          CALL      PRIITMDS                     * display items on file
.
ADDI4500  DISPLAY   *P1:24,*EL,"Item Number: "
          MOVE      TEN4,CCOL
          MOVE      TWENTY4,CVERT
          CALL      KYPRIITM
          BRANCH    EXIT,ADDI8900:               * exitchar entered
                         ADDI4200:               * ? entered
                         ADDI6000                * nothing entered
.
          CALL      CHEK0000                     * see if valid entry
          BRANCH    EXIT,ADDI4500
.
          PACK      KEY34,IFLAG,PITEM,PSITEM,ENDATE,ITEMNUMB,SUBITEM 
          MOVE      SP4,XSPARE 
          CALL      WRTEMP1                      * write record to temp file 
.
.         Nothing entered
.
ADDI6000  CALL      FRESCR00
          CALL      SCRE0000
          CALL      DISA0000
          CALL      DISB0000
.
ADDI8000  CALL      TDIS0000
          MOVE      ZERO,EXIT
          GOTO      ADDI9999
.
.         Exitchar entered
.
ADDI8900  CALL      FRESCR00
ADDI9000  MOVE      ONE,EXIT
          GOTO      ADDI9999
.
ADDI9500  DISPLAY   *P1:24,*EL,*B,"No more items can be added. ";
          CALL      HITENTER
          MOVE      ZERO,EXIT
          GOTO      ADDI9999
.
ADDI9999  RETURN
+
.****************************************************************************
.*                                  DELI0000           Called by: EDIT0000  *
.*                  delete an item from the temp file                       *
.****************************************************************************
.
DELI0000  KEYIN     *P1:24,*EL,"Line Number: ",*DV,UNDLN2:
                    *P14:24,*V2LON,CHOICE:
                    *P14:24,*DV,CHOICE
.
          TYPE      CHOICE                       * number entered ?
          GOTO      DELI1000 IF EQUAL            * yes
.
          ENDSET    CHOICE
          APPEND    SP2,CHOICE
          RESET     CHOICE
          REP       UPPLOW,CHOICE
.
          MATCH     SP2,CHOICE                   * anything entered ?
          GOTO      DELI9500 IF EQUAL            * no
.
          BEEP                                   * invalid entry
          GOTO      DELI0000
.
DELI1000  MOVE      CHOICE,TNUMB
          COMPARE   TNUMB,COUNTER                * number displayed ?
          GOTO      DELI7000 IF LESS             * no 
.
          COMPARE   ONE,TNUMB                    * zero or less ?
          GOTO      DELI7000 IF LESS             * yes
.
          MOVE      ZERO,FORM2
          PACK      KEY34,SP30,SP4
          CALL      RSTEMP1                      * position at start of file
DELI1500  CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,DELI9500               * no more records
.
          ADD       ONE,FORM2
          COMPARE   FORM2,TNUMB
          GOTO      DELI1500 IF NOT EQUAL
.
.         Highlight selection
.
          MOVE      TNUMB,CVERT
          COMPARE   TNUMB,SEVEN
          GOTO      DELI2000 IF LESS
          ADD       TEN5,CVERT
          DISPLAY   *P1:CVERT,*HON,TNUMB,*HOFF,"." 
          MOVE      FIVE,CCOL
          GOTO      DELI2500 
.
DELI2000  ADD       EIGHT,CVERT
          DISPLAY   *P42:CVERT,*HON,TNUMB,*HOFF,"." 
          MOVE      FORTY6,CCOL
.
.         Verify deletion
.
DELI2500  CALL      DELQST
          BRANCH    CEXIT,DELI3000:              * yes
                          DELI4000:              * no
                          DELI9500               * cancel
.
DELI3000  PACK      KEY34,XIFLAG,XITEM1,XSITEM1,XEDATE,XITEM2,XSITEM2
          CALL      DETEMP1                      * delete record
          GOTO      DELI9500
.
.         Remove highlighted selection
.
DELI4000  MOVE      TNUMB,CVERT
          COMPARE   TNUMB,SEVEN
          GOTO      DELI5000 IF LESS
          ADD       TEN5,CVERT
          DISPLAY   *P1:CVERT,*V2LON,TNUMB,*HOFF,"." 
          GOTO      DELI0000
.
DELI5000  ADD       EIGHT,CVERT
          DISPLAY   *P42:CVERT,*V2LON,TNUMB,*HOFF,"."
          GOTO      DELI0000
.
.         Invalid number selected
.
DELI7000  DISPLAY   *P1:24,*EL,*B,"Line number not valid. ";
          CALL      HITENTER
          GOTO      DELI0000
.
.         Restore primary item details after reading subitem details
.
DELI9500  CALL      TDIS0000
.
DELI9999  RETURN
+
.****************************************************************************
.*                                   SEL0000           Called by: ML0000    *
.*                         select field to modify or post                   *
.*                                                                          *
.*    Returns:  EXIT    = FALSE (0)  Post was selected.                     *
.*                        TRUE  (1)  Cancel was selected.                   *
.****************************************************************************
.
SEL0000   CALL      MAINQST                  * Ask for an item, post or cancel
.
          COMPARE   ZERO,CCITEM              * What was entered ?
          GOTO      SEL8000 IF EQUAL         * Post was selected
          GOTO      SEL9000 IF LESS          * Cancel was selected
.
          BRANCH    IPATH,SEL0300
.
          COMPARE   TEN6,CCITEM               * maximum line exceeded
          GOTO      SEL0500 IF LESS          * yes
          GOTO      SEL0700
.
SEL0300   COMPARE   CCITEM,TEN5
          GOTO      SEL0700 IF LESS
.
SEL0500   IF        IBCNUGST=2
          BRANCH    CCITEM,SEL1000:          * item description
                           SEL1100:          * keyin indicator 
                           SEL1200:          * set code
                           SEL1300:          * schedule fee
                           SEL1400:          * fixed charge?
                           SEL2100:          * schedule fee 75%
                           SEL2200:          * schedule fee 85%
                           SEL2300:          * suggested ama fee
                           SEL2400:          * print service date/time
                           SEL1900:          * GST Charge Applicable ?
                           SEL2000:          * GST Rates Code
                           SEL1500:          * pathology test
                           SEL1600:          * max. no. of tests
                           SEL1700:          * period of days
                           SEL1800           * stepdown item
          ELSE
          BRANCH    CCITEM,SEL1000:          * item description
                           SEL1100:          * keyin indicator 
                           SEL1200:          * set code
                           SEL1300:          * schedule fee
                           SEL1400:          * fixed charge?
                           SEL2100:          * schedule fee 75%
                           SEL2200:          * schedule fee 85%
                           SEL2300:          * suggested ama fee
                           SEL2400:          * print service date/time
                           SEL1500:          * pathology test
                           SEL1600:          * max. no. of tests
                           SEL1700:          * period of days
                           SEL1800           * stepdown item
          ENDIF
.
SEL0700   BEEP
          GOTO      SEL0000
.
SEL1000   CALL      DESC0000
          BRANCH    EXIT,SEL9999
          GOTO      SEL0000
.
SEL1100   CALL      KEYI0000
          GOTO      SEL0000
.
SEL1200   CALL      SCOD0000
          BRANCH    EXIT,SEL9999
          GOTO      SEL0000
.
SEL1300   CALL      SFEE0000
          GOTO      SEL0000
.
SEL1400   CALL      FIXD0000
          GOTO      SEL0000
.
SEL1500   CALL      PATH0000
          BRANCH    EXIT,SEL9999
.
.         If the test has been changed to a pathology test, then get input for
.         the last three fields
.
          BRANCH    IPATH,SEL0000
          COMPARE   MAXNUM,ZERO
          GOTO      SEL0000 IF LESS
.
          CALL      SCRB0000
          DISPLAY   *P1:24,*EL
          CALL      MNUM0000
          BRANCH    EXIT,SEL0000             * max number = zero
          CALL      DAYS0000
          CALL      STEP0000
          BRANCH    EXIT,SEL9999
.         
          GOTO      SEL0000
.
SEL1600   CALL      MNUM0000
          GOTO      SEL0000
.
SEL1700   CALL      DAYS0000
          GOTO      SEL0000
.
SEL1800   CALL      STEP0000
          BRANCH    EXIT,SEL9999
          GOTO      SEL0000
.
SEL1900   CALL      GSTA0000
          GOTO      SEL0000
.
SEL2000   CALL      GSTC0000
          GOTO      SEL0000
.
SEL2100   CALL      SF750000
          GOTO      SEL0000
.
SEL2200   CALL      SF850000
          GOTO      SEL0000
.
SEL2300   CALL      SAFE0000
          GOTO      SEL0000
.
SEL2400   CALL      PRDT0000
          GOTO      SEL0000
.
SEL8000   MATCH     SP6,PRITGSTC     * if GST is applicable,code must be entered
          IF        @EQUAL
            IF        PRITGSTA=1
              DISPLAY   *P1:24,*EL,*B,*V2LON,"GST Code must be entered. ";
              CALL      HITENTER
              CALL      GSTC0000
              GOTO      SEL0000
            ENDIF
          ELSE
            DISPLAY   *P20:13,*V2LON,PRITGSTC,*P25:13,IBGSDESC
          ENDIF
.
.         Post was selected. Set the exit flag to tell the calling routine.
.
          MOVE      FALSE,EXIT               * Post was selected
          GOTO      SEL9999
.
.         Cancel was selected. Set the exit flag to tell the calling routine.
.
SEL9000   MOVE      TRUE,EXIT                * Cancel was selected
.
SEL9999   RETURN
+
.**************************************************************************
.*                             LOAD0000                Called by: ML0000  *
.*                 load program variables into file variables for editing *
.**************************************************************************
.
LOAD0000  MOVE      PRITDESC,IDESC
          MOVE      PRITKEYI,IKEY
          MOVE      PRITSFEE,IFEE
          MOVE      PRITSETC,SETCODE
.
          MOVE      PRITDAT2,CEASEDT
          MOVE      PRITICAT,ICAT
          MOVE      PRITIGRP,IGROUP
          MOVE      PRITSGRP,SUBGRP
          MOVE      PRITFTYP,FEETYPE
          MOVE      PRITPTYP,PROVTYPE
          MOVE      PRITPATH,IPATH
          MOVE      PRITMAXR,MAXNUM
          MOVE      PRITDAYS,PERDAY
          MOVE      PRITSTEP,STEPDOWN
          MOVE      PRITSTSB,STEPSUBN
          MOVE      PRITFIXD,FIXED
          MOVE      PRITGSTA,GKEY
          MOVE      PRITSF75,ISF75
          MOVE      PRITSF85,ISF85
          MOVE      PRITSAFE,ISAFE
          MOVE      PRITPDTI,IPDTI
.
LOAD9999  RETURN
+
.**************************************************************************
.*                              CREA0000               Called by: ML0000  *
.*             create a new temporary file                                *
.**************************************************************************
.
CREA0000  CALL      KILL0000                     * remove existing file
.
          PACK      CMDLIN1,ISBUILD,TEMPFILE,UKEY
          EXECUTE   CMDLIN1,TASKID               * create temporary index file
.
          OPEN      ITMTEMP1,TEMPFILE            * open temp index file
.
CREA9999  RETURN
+
.****************************************************************************
.*                              KILL0000               Called by: ML0000    *
.*               close and erase the temporary file               CREA0000  *
.****************************************************************************
.
KILL0000  CLOSE     ITMTEMP1                     * close file
.
          PACK      CMDLIN2,ERASE,TEMPFILE       * set file erase command
          EXECUTE   CMDLIN2,TASKID               * erase temp file
.
KILL9999 RETURN
+
.**************************************************************************
.*                             REMV0000                Called by: CLR0000 *
.*                delete records from temporary file                      *
.**************************************************************************
.
REMV0000  PACK      KEY34,SP30,SP4
          CALL      RSTEMP1                      * position at start of file
          CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,REMV9999               * no more records
.
          PACK      KEY34,XIFLAG,XITEM1,XSITEM1,XEDATE,XITEM2,XSITEM2,XSPARE
          CALL      DETEMP1                      * delete record
.
          GOTO      REMV0000                     * get next record
.
REMV9999  RETURN
+
.**************************************************************************
.*                              WRT0000                Called by: ML0000  *
.*                          write a new record                            *
.**************************************************************************
.
WRT0000   DISPLAY   *P50:24,*V2LON,"* Record Inserted *";
.
          CALL      SAVE0000                     * load file variables
.
.
.         Write item file record
.
          PACK      KEY22,PRITFLAG,PRITITMN,PRITSUBN,PRITDAT1
          CALL      WRPRIT1
.
          UNPACK    KEY22,PRITM001,PRITM002,PRITM003,PRITM004
          MOVE      KEY22,SAVKEY22 
          CALL      CEASE000
.
.         See if audit record needs to be written
.
          BRANCH    PRCNAUDI,WRT5000             * audit flag not set
.
          CALL      IBACLOCK
          PACK      PRITAUDD,CCC,CYY,CMM,CDD     * date
          REP       " 0",PRITAUDD
          MOVE      CTIMEIS,PRITAUDT
.
          MOVE      PORT,PRITAUDP                * port
          MOVE      ANSA,PRITAUDR                * added
          MOVE      ONE,PRITAUDS                 * not printed
          MOVE      PASSCODE,PRITAUDO            * operator
.
          PACK      KEY19,PRITAUDD,PRITAUDT,PRITAUDP,PRITAUDR
          CALL      AWPRIT                       * write audit record
.
.         Write secondary items to the group file
.
WRT5000   PACK      KEY34,SP30,SP4
          CALL      RSTEMP1                      * position at start of file
WRT6000   CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,WRT9999                * no more records
.
          PACK      KEY34,XIFLAG,XITEM1,XSITEM1,XEDATE,XITEM2,XSITEM2
          MOVE      XSPARE,PRGPSPAR
          CALL      WRPRGP1                      * write record
          GOTO      WRT6000                      * get next record
.
WRT9999   RETURN
+
.**************************************************************************
.*                                DISA0000             Called by: ML0000  *
.*       display details corresponse to procedure code.           MODI0000*
.*                 and save values read from file                 ADDI0000*
.*                                                                DELI0000*
.*                                                                SECD0000*
.**************************************************************************
.
DISA0000  BRANCH    IFLAG,DISA1000               * AMA item
.
          MOVE      MBS,TYPDESC
          GOTO      DISA2000
.
DISA1000  MOVE      AMA,TYPDESC
.
DISA2000  DISPLAY   *P24:4,*V2LON,TYPDESC:
                    *P24:5,PITEM
.
          MATCH     SP3,PSITEM                   * any subitem number
          GOTO      DISA3000 IF EQUAL            * no
.       
          DISPLAY   *P33:5,*V2LON,"(",PSITEM,")"    * display subitem
.
DISA3000  UNPACK    ENDATE,CCENT,CYEAR,CMON,CDAY
          CALL      PACDATE
.
          DISPLAY   *P24:6,*V2LON,CPCDATE:
                    *P24:8,IDESC:
                    *P24:9,IKEY
.
          BRANCH    IKEY,DISA4000                * Operator keyin
.
          MOVE      NKEY,KEYDESC
          GOTO      DISA5000
.
DISA4000  MOVE      OPKEY,KEYDESC
.
DISA5000  DISPLAY   *P28:9,KEYDESC:       * display keyin description
                    *P24:10,*V2LON,SETCODE
.
          MOVE      SP20,TDESC
          MATCH     SP3,SETCODE
          GOTO      DISA6000 IF EQUAL
.
          PACK      KEY5,CODEPG,SETCODE
          CALL      RDCODE1                      * read code from file
          BRANCH    OVRCD,DISA5500               * not on file
.
          GOTO      DISA6000                     * code found
.
DISA5500  MOVE      "Unknown code        ",TDESC
.
DISA6000  MOVE      TDESC,SETDESC
          DISPLAY   *P28:10,SETDESC,*V2LON:
                    *P25:11,IFEE
.
          IF        FIXED = 1
            DISPLAY   *P24:12,*V2LON,"Yes"
          ELSE
            DISPLAY   *P24:12,*V2LON,"No "
          ENDIF
.
          DISPLAY   *P25:13,*V2LON,ISF75,*V2LON:
                    *P25:14,ISF85,*V2LON:
                    *P25:15,ISAFE
.
          IF        IPDTI = 1
            DISPLAY   *P24:16,*V2LON,"Yes"
          ELSE
            DISPLAY   *P24:16,*V2LON,"No "
          ENDIF

          BRANCH    IPATH,DISA9000               * not pathology test
.
          MOVE      YES,PDESC
          GOTO      DISA9500 
.
DISA9000  MOVE      NO,PDESC                     
.
DISA9500  DISPLAY   *P66:12,*V2LON,PDESC
          COMPARE   TWO,IBCNUGST
          GOTO      DISA9999 IF NOT EQUAL
          BRANCH    PRITGSTA,DISA9700,DISA9800
          GOTO      DISA9600
.
DISA9600  MOVE      GSTF,KEYDESC
          DISPLAY   *P66:9,*V2LON,PRITGSTA,*P70:9,KEYDESC
          GOTO      DISA9999
.
DISA9700  MOVE      GSTP,KEYDESC
          DISPLAY   *P66:9,*V2LON,PRITGSTA,*P70:9,KEYDESC
          GOTO      DISA9900
.
DISA9800  MOVE      EITH,KEYDESC
          DISPLAY   *P66:9,*V2LON,PRITGSTA,*P70:9,KEYDESC
.
DISA9900  MATCH     SP6,PRITGSTC
          GOTO      DISA9999 IF EQUAL
          PACK      KEY6,PRITGSTC
          CALL      RDIBGS1
          IF        OVRCD<>0
            GOTO      DISA9999
          ENDIF
          DISPLAY   *P65:11,*V2LON,IBGSCODE,SP1,IBGSDESC
.
DISA9999  RETURN
+
.***************************************************************************
.*                              DISB0000               Called by: ML0000   *
.*                 display file variables for pathology           MODI0000 *
.*                                                                ADDI0000 *
.*                                                                SECD0000 *
.***************************************************************************
.
DISB0000  COMPARE   ZERO,MAXNUM                  * zero on file ?
          GOTO      DISB9999 IF EQUAL            * yes - dont display
.
          DISPLAY   *P66:13,*V2LON,MAXNUM:
                    *P66:14,PERDAY:
                    *P66:15,STEPDOWN
          MATCH     SP3,STEPSUBN
          GOTO      DISB9999 IF EQUAL
          DISPLAY   *P75:15,SLASH,*V2LON,STEPSUBN
.
DISB9999  RETURN
+
.***************************************************************************
.*                               UPD0000               Called by: ML0000   *
.*                      update record ad insert key if part of             *
.*                      key has been modified.                             *
.***************************************************************************
.
UPD0000   DISPLAY   *P50:24,*V2LON,"* Record Changed *";
.
          PACK      KEY22,IFLAG,PITEM,PSITEM,ENDATE  * re-read original item
          CALL      RDPRIT1
          BRANCH    OVRCD,UPD9800
.
.         See if audit record has to be written
.
          BRANCH    PRCNAUDI,UPD5000             * audit flag not set
.
          CALL      IBACLOCK
          PACK      PRITAUDD,CCC,CYY,CMM,CDD     * date
          REP       " 0",PRITAUDD
          MOVE      CTIMEIS,PRITAUDT
.
          MOVE      PORT,PRITAUDP                * port
          MOVE      ANSB,PRITAUDR                * before
          MOVE      ONE,PRITAUDS                 * not printed
          MOVE      PASSCODE,PRITAUDO            * operator
.
          PACK      KEY19,PRITAUDD,PRITAUDT,PRITAUDP,PRITAUDR
          CALL      AWPRIT                       * write audit record
.
.         Update item record
.
UPD5000   CALL      SAVE0000                     * load new file variables
          CALL      UPPRIT1
.
          UNPACK    KEY22,PRITM001,PRITM002,PRITM003,PRITM004
          MOVE      KEY22,SAVKEY22 
          CALL      CEASE000
.
          BRANCH    PRCNAUDI,UPD8000
.
          MOVE      ANSC,PRITAUDR                * after image
.
          PACK      KEY19,PRITAUDD,PRITAUDT,PRITAUDP,PRITAUDR
          CALL      AWPRIT
.
.         Delete all group file records, then rewrite them from the temp file
.
UPD8000   PACK      KEY34,IFLAG,PITEM,PSITEM,ENDATE,SP10,SP2
          CALL      RSPRGP1                      * position in file
          CALL      RKPRGP1                      * read next record
          BRANCH    OVRCD,UPD9000                * no more records
.
          COMPARE   IFLAG,PRGPFLAG               * same flag ?
          GOTO      UPD9000 IF NOT EQUAL         * no
.
          MATCH     PITEM,PRGPITM1               * same item ?
          GOTO      UPD9000 IF NOT EQUAL         * no
.
          MATCH     PSITEM,PRGPSUB1              * same subitem ?
          GOTO      UPD9000 IF NOT EQUAL         * no
.
          MATCH     ENDATE,PRGPDATE              * same date ?
          GOTO      UPD9000 IF NOT EQUAL         * no
.
.         Record for deletion found
.
          PACK      KEY34,PRGPFLAG,PRGPITM1,PRGPSUB1,PRGPDATE,PRGPITM2:
                    PRGPSUB2
          CALL      DEPRGP1                      * delete record
          GOTO      UPD8000
.
.         Rewrite group records
.
UPD9000   PACK      KEY34,SP30,SP4
          CALL      RSTEMP1                      * position at start of file
UPD9500   CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,UPD9999                * no more records
.
          PACK      KEY34,XIFLAG,XITEM1,XSITEM1,XEDATE,XITEM2,XSITEM2
          MOVE      XSPARE,PRGPSPAR
          CALL      WRPRGP1                      * write record
          GOTO      UPD9500                      * get next record
.
UPD9800   DISPLAY   *P1:24,"Item not found. ";
          CALL      HITENTER
.
UPD9999   RETURN
+
.****************************************************************************
.*                              DEL0000                Called by: ML0000    *
.*                         delete an existing record                        *
.****************************************************************************
.
DEL0000   DISPLAY   *P50:24,*V2LON,"* Record Deleted *";
.
.         See if audit record needs to be written
.
          BRANCH    PRCNAUDI,DEL5000             * audit flag not set
.
          CALL      IBACLOCK
          PACK      PRITAUDD,CCC,CYY,CMM,CDD     * date
          REP       " 0",PRITAUDD
          MOVE      CTIMEIS,PRITAUDT
.
          MOVE      PORT,PRITAUDP                * port
          MOVE      ANSD,PRITAUDR                * added
          MOVE      ONE,PRITAUDS                 * not printed
          MOVE      PASSCODE,PRITAUDO            * operator
.
          PACK      KEY19,PRITAUDD,PRITAUDT,PRITAUDP,PRITAUDR
          CALL      AWPRIT                       * write audit record
.
DEL5000   PACK      KEY22,IFLAG,PITEM,PSITEM,ENDATE
          CALL      DEPRIT1                      * delete file
.
.         Delete all associated secondary items from the group file
.
DEL6000   PACK      KEY34,IFLAG,PITEM,PSITEM,ENDATE,SP10,SP2
          CALL      RSPRGP1                      * position in file
          CALL      RKPRGP1                      * read next record
          BRANCH    OVRCD,DEL9999                * no more records
.
          COMPARE   IFLAG,PRGPFLAG               * same flag ?
          GOTO      DEL9999 IF NOT EQUAL         * no
.
          MATCH     PITEM,PRGPITM1               * same item ?
          GOTO      DEL9999 IF NOT EQUAL         * no
.
          MATCH     PSITEM,PRGPSUB1              * same subitem ?
          GOTO      DEL9999 IF NOT EQUAL         * no
.
          MATCH     ENDATE,PRGPDATE              * same date ?
          GOTO      DEL9999 IF NOT EQUAL         * no
.
.         Record for deletion found
.
          PACK      KEY34,PRGPFLAG,PRGPITM1,PRGPSUB1,PRGPDATE,PRGPITM2:
                    PRGPSUB2
          CALL      DEPRGP1                      * delete record
          GOTO      DEL6000
.
DEL9999   RETURN
.
+
.****************************************************************************
.*                                 SAVE0000            Called by: WRT0000   *
.*                load program variables into file variables      UPD0000   * 
.****************************************************************************
.
SAVE0000  MOVE      IFLAG,PRITFLAG
          MOVE      PITEM,PRITITMN
          MOVE      PSITEM,PRITSUBN
          MOVE      ENDATE,PRITDAT1
          MOVE      IDESC,PRITDESC
          MOVE      IKEY,PRITKEYI
          MOVE      IFEE,PRITSFEE
          MOVE      SETCODE,PRITSETC
          MOVE      CEASEDT,PRITDAT2
          MOVE      ICAT,PRITICAT
          MOVE      IGROUP,PRITIGRP
          MOVE      SUBGRP,PRITSGRP
          MOVE      FEETYPE,PRITFTYP
          MOVE      PROVTYPE,PRITPTYP
          MOVE      IPATH,PRITPATH
          MOVE      MAXNUM,PRITMAXR
          MOVE      PERDAY,PRITDAYS
          MOVE      STEPDOWN,PRITSTEP
          MOVE      STEPSUBN,PRITSTSB
          MOVE      FIXED,PRITFIXD
          MOVE      GKEY,PRITGSTA
          MOVE      PRIVGSTC,PRITGSTC
          MOVE      ISF75,PRITSF75
          MOVE      ISF85,PRITSF85
          MOVE      ISAFE,PRITSAFE
          MOVE      IPDTI,PRITPDTI
.
SAVE9999  RETURN
+
.****************************************************************************
.*                                   DETA0000                               *
.*                Enter the details required to do the % increase           *
.****************************************************************************
DETA0000  CALL      SCRN0000                * display screen details
.
          CALL      MORA0000                * enter MBS or AMA required 
          BRANCH    EXIT,DETA9999           * exit
.  
          CALL      FDTE0000                * enter effective from date 
          BRANCH    OVRCD,DETA0000          * nothing entered
.
          CALL      IRNG0000                * enter item range
.
          CALL      PINC0000                * enter percentage increase
.
DETA9999  RETURN
+
.****************************************************************************
.*                                 SCRN0000                                 *
.*                      Display the screen details                          *
.****************************************************************************
SCRN0000  DISPLAY   *P1:4,*EF,"(",*V2LON,ANSM,*HOFF,")BS or (",*V2LON,ANSA:
                          *HOFF,")MA ?    : _      (",*V2LON,"E",*HOFF,")xit":
                    *P1:5,"Effective from date : ":
                    *P1:6,"From Item           : ":
                    *P1:7,"% Increase          : ";
.
SCRN9999  RETURN
+
.****************************************************************************
.*                                 MORA0000                                 *
.*                 MBS or AMA items required for % increase ?               *
.****************************************************************************
MORA0000  MOVE      SP1,ANS
          MOVE      ZERO,ITEMTYPE
          DISPLAY   *P23:4,UNDLN1;
          KEYIN     *P23:4,*V2LON,ANS;
.
          REP       UPPLOW,ANS
.
          MOVE      ONE,EXIT
          MATCH     ANSE,ANS
          GOTO      MORA9999 IF EQUAL       * EXIT
.
          MOVE      ZERO,EXIT
          MATCH     ANSM,ANS                * see if MBS entered
          IF        @EQUAL
            MOVE      ZERO,IFLAG
            GOTO      MORA9999
          ENDIF
.
          MATCH     ANSA,ANS                * see if AMA entered
          IF        @EQUAL
            MOVE      ONE,IFLAG
            GOTO      MORA9000
          ENDIF
.
          BEEP                              * invalid selection
          GOTO      MORA0000
.
.------ AMA item types selected ------
.
MORA9000  MOVE      ONE,ITEMTYPE
.
MORA9999  RETURN
+
.****************************************************************************
.*                                   FDTE0000                               *
.*                        Keyin effective from date                         *
.****************************************************************************
FDTE0000  UNPACK    SP8,CCENT,CYEAR,CMON,CDAY
          MOVE      FIVE,CVERT
          MOVE      TWENTY3,CCOL
          MOVE      CCC,CCENT
          REP       " 0",CCENT
.
          CALL      KEYDATE                 * keyin date
          BRANCH    OVRCD,FDTE9999
.
          PACK      FROMDATE,CCENT,CYEAR,CMON,CDAY
          REP       " 0",FROMDATE
          MOVE      ZERO,OVRCD
.
FDTE9999  RETURN
+
.****************************************************************************
.*                                    IRNG0000                              *
.*                      Keyin the item number range                         *
.****************************************************************************
IRNG0000  MOVE      SP9,ITEM1
          MOVE      START,DISITEM1
          DISPLAY   *P23:6,*EL,UNDLN9;
          KEYIN     *P23:6,*V2LON,ITEM1;
.
IRNG0200  ENDSET    ITEM1                   * pad with blanks
          APPEND    SP9,ITEM1
          RESET     ITEM1
.
          MATCH     SP9,ITEM1               * anything entered ?
          GOTO      IRNG5000 IF EQUAL       * no
.
          MATCH     EXITCHAR,ITEM1          * exitchar entered ?
          GOTO      IRNG0000 IF EQUAL       * yes
.
          MATCH     QUEST,ITEM1             * ? entered 
          GOTO      IRNG0500 IF NOT EQUAL
.
          MOVE      ZERO,HLEF
          CALL      GETSCR00                     * save screen
          MOVE      ONE,ITMFLAG
          MOVE      ONE,PATHFLAG
          CALL      PRIITMDS                     * list codes on file
.
          DISPLAY   *P1:24,*EL,"Item Number: "
          MOVE      TEN4,CCOL
          MOVE      TWENTY4,CVERT
          KEYIN     *P14:24,*V2LON,ITEM1;
          CALL      PUTSCR00
          GOTO      IRNG0200
.
IRNG0500  PACK      KEY22,ITEMTYPE,ITEM1,SP20
          CALL      RSPRIT1                 * position on the item file
          CALL      RKPRIT1
          BRANCH    OVRCD,IRNG1000
.
          MATCH     ITEM1,PRITITMN          * match items
          GOTO      IRNG1000 IF NOT EQUAL
.
          COMPARE   ITEMTYPE,PRITFLAG       * compare item types
          GOTO      IRNG1000 IF NOT EQUAL
.
          MOVE      ITEM1,DISITEM1
.
          GOTO      IRNG5000
.
.------ item number not on file ------
.
IRNG1000  DISPLAY   *P1:24,*EL,*B,"Item not on file. ";
          CALL      HITENTER
          MOVE      ZERO,EXIT
.
          GOTO      IRNG0000
.
.------ display the from item details ------
.
IRNG5000  DISPLAY   *P23:6,*V2LON,DISITEM1;
.
.------ keyin the to item details ------
.
IRNG5100  MOVE      SP9,ITEM2
          MOVE      FINISH,DISITEM2
          DISPLAY   *P33:6,*HOFF,"to":
                    *P36:6,UNDLN9;
          KEYIN     *P36:6,*V2LON,ITEM2;
.
IRNG5200  ENDSET    ITEM2                   * pad with blanks
          APPEND    SP9,ITEM2
          RESET     ITEM2
.
          MATCH     SP9,ITEM2               * anything entered ?
          GOTO      IRNG8000 IF EQUAL       * no
.
          MATCH     EXITCHAR,ITEM2          * exitchar entered ?
          GOTO      IRNG5100 IF EQUAL       * yes
.
          MATCH     QUEST,ITEM2             * ? entered ?
          GOTO      IRNG5300 IF NOT EQUAL       * yes
.
          MOVE      ZERO,HLEF
          CALL      GETSCR00                     * save screen
          MOVE      ONE,ITMFLAG
          MOVE      ONE,PATHFLAG
          CALL      PRIITMDS                     * list codes on file
.
          DISPLAY   *P1:24,*EL,"Item Number: "
          MOVE      TEN4,CCOL
          MOVE      TWENTY4,CVERT
          KEYIN     *P14:24,*V2LON,ITEM2;
          CALL      PUTSCR00
          GOTO      IRNG5200
.
.
IRNG5300  PACK      KEY22,ITEMTYPE,ITEM2,SP20
          CALL      RSPRIT1                 * position on the item file
          CALL      RKPRIT1
          BRANCH    OVRCD,IRNG6000
.
          MATCH     ITEM2,PRITITMN          * match item codes
          GOTO      IRNG6000 IF NOT EQUAL
.
          COMPARE   ITEMTYPE,PRITFLAG       * compare item types
          GOTO      IRNG6000 IF NOT EQUAL
.
          MOVE      ITEM2,DISITEM2
.
          GOTO      IRNG7000
.
.------ item number not on file ------
.
IRNG6000  DISPLAY   *P1:24,*EL,*B,"Item not on file. ";
          CALL      HITENTER
          MOVE      ZERO,EXIT
.
          GOTO      IRNG5100
.
.------ match item codes ------
.
IRNG7000  MATCH     ITEM1,ITEM2
          GOTO      IRNG8100 IF NOT LESS
.
          DISPLAY   *P1:24,*EL,*B,"Invalid Item Code range - Hit <":
                           *V2LON,"ENTER",*HOFF,"> to continue";
          KEYIN     ANS;
          DISPLAY   *P1:24,*EL;
.
          GOTO      IRNG5100
.
.------ move Z's to the to item ------
.
IRNG8000  MOVE      ZEDS,ITEM2
.
.------ display the to item details ------
.
IRNG8100  DISPLAY   *P36:6,*V2LON,DISITEM2;
.
IRNG9999  RETURN
+
.****************************************************************************
.*                                    PINC0000                              *
.*                              Enter the % increase                        *
.****************************************************************************
PINC0000  MOVE      ZERO,PERCENT
          DISPLAY   *P23:7,*EL,UNDLN6;
          KEYIN     *P23:7,*V2LON,PERCENT;
.
          COMPARE   PERCENT,ZERO            * make sure a percentage has
          GOTO      PINC9000 IF NOT LESS      been entered
.
          MOVE      "$999.99",DISPPERC
          FEDIT     PERCENT,DISPPERC
          REP       "$%",DISPPERC
          DISPLAY   *P23:7,*V2LON,DISPPERC;
.
          GOTO      PINC9999
.
.------ invalid percentage entered ------
.
PINC9000  DISPLAY   *P1:24,*EL,*B,"Invalid percentage - Hit <":
                           *V2LON,"ENTER",*HOFF,"> to continue";
          KEYIN     ANS;
          DISPLAY   *P1:24,*EL;
.
          GOTO      PINC0000
.
PINC9999  RETURN
+
.****************************************************************************
.*                                 PERC0000                                 *
.*             Perform the percentage increase on the item file             *
.****************************************************************************
PERC0000  DISPLAY   *P1:24,*EL,"Scanning : ":
                    *P30:24,"Updating : ";
          MOVE      SP9,SAVITMN
          PACK      KEY22,ITEMTYPE,ITEM1,SP20
          CALL      RSPRIT1                 * position on the item file
.
.------ read through the item file ------
.
PERC1000  CALL      RKPRIT1
          BRANCH    OVRCD,PERC9000
.
          COMPARE   ITEMTYPE,PRITFLAG       * compare item type flags
          GOTO      PERC9000 IF NOT EQUAL
.
          MATCH     PRITITMN,ITEM2          * compare item numbers
          GOTO      PERC9000 IF LESS
.
          DISPLAY   *P12:24,*V2LON,PRITITMN;
.
          MATCH     SP9,SAVITMN             * see if we are processing the 
          GOTO      PERC1500 IF EQUAL         first record
.
          MATCH     SAVITMN,PRITITMN        * see if we have the same item
          GOTO      PERC2000 IF NOT EQUAL
.
.------ save the current record details ------
.
PERC1500  CALL      SAVV0000                * save this records details
.
          GOTO      PERC1000
.
.------ the item has changed so see if the previous item is valid to ------
.------ change the effective date for ------
.
PERC2000  MATCH     SAVDAT1,FROMDATE
          GOTO      PERC2100 IF NOT LESS
.
          MATCH     "IBARSH",PGM
          IF        @EQUAL
            PRINT     "WARNING - Item ",SAVITMN," is already in effect from":
                      " the given date. ---":
                      PERCENT,FROMDATE
          ELSE
            DISPLAY   *P1:23,*EL,*B,*V2LON,*BLINKON,"WARNING ",*HOFF,"- Item ":
                           *V2LON,SAVITMN,*HOFF," is already in effect from":
                           " the given date - Hit <",*V2LON,"ENTER",*HOFF,">";
            KEYIN     ANS;
            DISPLAY   *P1:23,*EL;
          ENDIF
.
          GOTO      PERC1500
.
.------ it is O.K. to update the item file record with the new details ------
.
PERC2100  PACK      SAVKEY22,PRITFLAG,PRITITMN,PRITSUBN,PRITDAT1
          DISPLAY   *P41:24,*V2LON,SAVITMN;
.
          CALL      REST0000                * restore the saved values
.
          PACK      KEY22,PRITFLAG,PRITITMN,PRITSUBN,FROMDATE
          CALL      RDPRIT1                 * read the item file
          BRANCH    OVRCD,PERC2200
.
          MOVE      FROMDATE,PRITDAT1
          MOVE      PRITSFEE,FORM12P4
          MULT      PERCENT,FORM12P4
          DIV       ONEHUND,FORM12P4
          ADD       FORM12P4,PRITSFEE
.
          CALL      UPPRIT1                 * update the item file
.
          GOTO      PERC2500
.
.------ write a new record to the item file ------
.
PERC2200  MOVE      FROMDATE,PRITDAT1
          MOVE      PRITSFEE,FORM12P4
          MULT      PERCENT,FORM12P4
          DIV       ONEHUND,FORM12P4
          ADD       FORM12P4,PRITSFEE
.
          CALL      WRPRIT1                 * write to the item file
.
.------ restore the next item record to process ------
.
PERC2500  CALL      GRPI0000                * create new group file records
          MOVE      SAVKEY22,KEY22
          CALL      RDPRIT1                 * read the item file
.
          GOTO      PERC1500
.
.------ we have reached the end of the file so see if the previous item ------
.------ is valid to change the effective date for ------
.
PERC9000  MATCH     SAVDAT1,FROMDATE
          GOTO      PERC9100 IF NOT LESS
.
          MATCH     "IBARSH",PGM
          IF        @EQUAL
            PRINT     "WARNING - Item ",SAVITMN," is already in effect from":
                      " the given date.":
                      PERCENT,FROMDATE
          ELSE
            DISPLAY   *P1:23,*EL,*B,*V2LON,*BLINKON,"WARNING ",*HOFF,"- Item ":
                           *V2LON,SAVITMN,*HOFF," is already in effect from":
                           " the given date - Hit <",*V2LON,"ENTER";
            KEYIN     ANS;
            DISPLAY   *P1:24,*EL;
          ENDIF
.
          GOTO      PERC9999
.
.------ it is O.K. to update the item file record with the new details ------
.
PERC9100  DISPLAY   *P41:24,*V2LON,SAVITMN;
.
          CALL      REST0000                * restore the saved values
.
          PACK      KEY22,PRITFLAG,PRITITMN,PRITSUBN,FROMDATE
          CALL      RDPRIT1                 * read the item file
          BRANCH    OVRCD,PERC9200
.
          MOVE      FROMDATE,PRITDAT1
          MOVE      PRITSFEE,FORM12P4
          MULT      PERCENT,FORM12P4
          DIV       ONEHUND,FORM12P4
          ADD       FORM12P4,PRITSFEE
.
          CALL      UPPRIT1                 * update the item file
.
          GOTO      PERC9300
.
.------ write a new record to the item file ------
.
PERC9200  MOVE      FROMDATE,PRITDAT1
          MOVE      PRITSFEE,FORM12P4
          MULT      PERCENT,FORM12P4
          DIV       ONEHUND,FORM12P4
          ADD       FORM12P4,PRITSFEE
.
          CALL      WRPRIT1                 * write to the item file
.
PERC9300  CALL      GRPI0000                * create new group records
.  
PERC9999  RETURN
+
.****************************************************************************
.*                                   SAVV0000                               *
.*        Routine to save the details of the current item file record       *
.****************************************************************************
SAVV0000  MOVE      PRITFLAG,SAVFLAG
          MOVE      PRITITMN,SAVITMN
          MOVE      PRITSUBN,SAVSUBN
          MOVE      PRITDAT1,SAVDAT1
          MOVE      PRITDESC,SAVDESC
          MOVE      PRITKEYI,SAVKEYI
          MOVE      PRITSFEE,SAVSFEE
          MOVE      PRITSETC,SAVSETC
          MOVE      PRITDAT2,SAVDAT2
          MOVE      PRITICAT,SAVICAT
          MOVE      PRITIGRP,SAVIGRP
          MOVE      PRITSGRP,SAVSGRP
          MOVE      PRITFTYP,SAVFTYP
          MOVE      PRITPTYP,SAVPTYP
          MOVE      PRITPATH,SAVPATH
          MOVE      PRITMAXR,SAVMAXR
          MOVE      PRITDAYS,SAVDAYS
          MOVE      PRITSTEP,SAVSTEP
          MOVE      PRITSTSB,SAVSTSB
          MOVE      PRITFIXD,SAVFIXD
          MOVE      PRITSF75,SAVSF75
          MOVE      PRITSF85,SAVSF85
          MOVE      PRITSAFE,SAVSAFE
          MOVE      PRITPDTI,SAVPRDT
.
SAVV9999  RETURN
+
.****************************************************************************
.*                              GRPI0000               Called by: PERC0000  *
.*              create new group records for the item                       *
.****************************************************************************
.
GRPI0000  PACK      KEY34,SAVFLAG,SAVITMN,SAVSUBN,SAVDAT1,SP20
          CALL      RSPRGP1                      * position in file
GRPI1000  CALL      RKPRGP1                      * read next record
          BRANCH    OVRCD,GRPI9999               * end of file
.
          COMPARE   SAVFLAG,PRGPFLAG             * same item flag ?
          GOTO      GRPI9999 IF NOT EQUAL        * no
.
          MATCH     SAVITMN,PRGPITM1             * same item number ?
          GOTO      GRPI9999 IF NOT EQUAL        * no
.
          MATCH     SAVSUBN,PRGPSUB1             * same sub item number ?
          GOTO      GRPI9999 IF NOT EQUAL        * no
.
          MATCH     SAVDAT1,PRGPDATE             * same effective date ?
          GOTO      GRPI9999 IF NOT EQUAL        * no
.
.         Valid group item found
.
          PACK      SAVKEY34,PRGPFLAG,PRGPITM1,PRGPSUB1,PRGPDATE,PRGPITM2:
                             PRGPSUB2
          PACK      KEY34,PRGPFLAG,PRGPITM1,PRGPSUB1,FROMDATE,PRGPITM2,PRGPSUB2
          CALL      RAPRGP1
          IF        OVRCD = 1
             MOVE      SP4,PRGPSPAR
             CALL      WRPRGP1
          ENDIF
          MOVE      SAVKEY34,KEY34
          CALL      RDPRGP1                      * reposition on group file
.
          GOTO      GRPI1000                     * get next record
.
GRPI9999  RETURN
+
.****************************************************************************
.*                                   REST0000                               *
.*        Routine to restore the details of the saved item file record      *
.****************************************************************************
REST0000  MOVE      SAVFLAG,PRITFLAG
          MOVE      SAVITMN,PRITITMN
          MOVE      SAVSUBN,PRITSUBN
          MOVE      SAVDAT1,PRITDAT1
          MOVE      SAVDESC,PRITDESC
          MOVE      SAVKEYI,PRITKEYI
          MOVE      SAVSFEE,PRITSFEE
          MOVE      SAVSETC,PRITSETC
          MOVE      SAVDAT2,PRITDAT2
          MOVE      SAVICAT,PRITICAT
          MOVE      SAVIGRP,PRITIGRP
          MOVE      SAVSGRP,PRITSGRP
          MOVE      SAVFTYP,PRITFTYP
          MOVE      SAVPTYP,PRITPTYP
          MOVE      SAVPATH,PRITPATH
          MOVE      SAVMAXR,PRITMAXR
          MOVE      SAVDAYS,PRITDAYS
          MOVE      SAVSTEP,PRITSTEP
          MOVE      SAVSTSB,PRITSTSB
          MOVE      SAVFIXD,PRITFIXD
          MOVE      SAVSF75,PRITSF75
          MOVE      SAVSF85,PRITSF85
          MOVE      SAVSAFE,PRITSAFE
          MOVE      SAVPRDT,PRITPDTI
.
REST9999  RETURN
+
.****************************************************************************
.*                                   FILE0000                               *
.*                Enter the details required to do the file update          *
.****************************************************************************
FILE0000  CALL      SCRF0000                * display screen details
.
          CALL      MORA0000                * enter MBS or AMA required 
          BRANCH    EXIT,FILE9999           * exit
.  
          CALL      FNAM0000                * enter file name
          BRANCH    EXIT,FILE0000           * nothing entered
.
FILE9999  RETURN
+
.****************************************************************************
.*                                 SCRF0000                                 *
.*                      Display the screen details                          *
.****************************************************************************
SCRF0000  DISPLAY   *P1:4,*EF,"(",*V2LON,ANSM,*HOFF,")BS or (",*V2LON,ANSA:
                          *HOFF,")MA ?    : _      (",*V2LON,"E",*HOFF,")xit":
                    *P1:5,"Data File Name      : ":
                    *P1:7,"The data file must contain one record for each ":
                          "item to be updated.":
                    *P1:8,"The format of each record must be as follows:":
                    *P10:10,"Item Number         1 -  9     Left Justified":
                    *P10:11,"Sub-Item Numer     10 - 12     Left Justified":
                    *P10:12,"Effective Date     13 - 20     CCYYMMDD":
                    *P10:13,"New Schedule Fee   21 - 28     NNNNN.NN":
                    *P1:15,"Note: Only existing items will be update. ":
                           "New items will not be created."
.
SCRF9999  RETURN
+
.****************************************************************************
.*                                 FNAM0000                                 *
.*                      Input the file name for update                      *
.****************************************************************************
FNAM0000  KEYIN     *P23:5,*V2LON,FILENAME
.
          PACK      FILENAME,FILENAME,SP30,SP30
          MATCH     SP30,FILENAME
          GOTO      FNAM9000 IF EQUAL        * nothing input
.
          CLOSE     INPFILE                  * make sure file is closed
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      INPFILE,FILENAME         * try to open file
          TRAPCLR   IO
.
          IF        OVRCD = 1
            DISPLAY   *P1:24,*EL,*B,"Cannot open this data file. ";
            CALL      HITENTER
            GOTO      FNAM0000
          ENDIF
          MOVE      ZERO,EXIT
          GOTO      FNAM9999
.
.         nothing input
.
FNAM9000  MOVE      ONE,EXIT
.
FNAM9999  RETURN
+
.****************************************************************************
.*                                 FUPD0000                                 *
.*                      Update from data file                               *
.****************************************************************************
FUPD0000  DISPLAY   *P1:22,*EL,"Processing: ";
.
          MOVE      ZERO,RECCNT
.
FUPD1000  READ      INPFILE,SEQ;SAVITMN,SAVSUBN,SAVDAT1,DIM8
          GOTO      FUPD9000 IF OVER
.
          ADD       ONE,RECCNT
          DISPLAY   *P13:22,*V2LON,SAVITMN;
.
.         Check that this record is in the correct format
.
          RESET     DIM8                    * check for a short record
          GOTO      FUPD8100 IF EOS
.
          MOVELPTR  DIM8,FORM2
          COMPARE   EIGHT,FORM2             * check for a short record
          GOTO      FUPD8100 IF NOT EQUAL
.
          TYPE      DIM8
          GOTO      FUPD8200 IF NOT EQUAL
.
          MOVE      DIM8,FORM5P2            * convert to numeric
          MOVE      FORM5P2,SAVSFEE         * save schedule fee
.
.         Locate an existing record for this item
.
          PACK      KEY22,ITEMTYPE,SAVITMN,SAVSUBN,ZEDS
          CALL      RSPRIT1
          CALL      RPPRIT1
          BRANCH    OVRCD,FUPD8300
.
          COMPARE   ITEMTYPE,PRITFLAG       * compare item type flags
          GOTO      FUPD8300 IF NOT EQUAL
.
          MATCH     PRITITMN,SAVITMN        * compare item numbers
          GOTO      FUPD8300 IF NOT EQUAL
.
          MATCH     SAVSUBN,PRITSUBN        * check sub-item number
          GOTO      FUPD8300 IF NOT EQUAL
.
          MATCH     PRITDAT1,SAVDAT1        * check effective date
          GOTO      FUPD8400 IF LESS
          IF        @EQUAL
            MOVE      SAVSFEE,PRITSFEE      * simply update with fee
            CALL      UPPRIT1
            GOTO      FUPD1000
          ENDIF
.
.         Post a new record with the new effective date and amount
.
          MOVE      PRITDAT1,SAVDAT2        * save original date
          MOVE      SAVDAT1,PRITDAT1
          MOVE      SAVSFEE,PRITSFEE
          PACK      KEY22,PRITFLAG,PRITITMN,PRITSUBN,PRITDAT1
          CALL      WRPRIT1
.
.         Post any group items with new effective date as well
.
          PACK      KEY34,PRITFLAG,PRITITMN,PRITSUBN,SAVDAT2,SP20
          CALL      RSPRGP1                      * position in file
FUPD2000  CALL      RKPRGP1                      * read next record
          BRANCH    OVRCD,FUPD1000               * end of file
.
          COMPARE   PRITFLAG,PRGPFLAG            * same item flag ?
          GOTO      FUPD1000 IF NOT EQUAL        * no
.
          MATCH     PRITITMN,PRGPITM1            * same item number ?
          GOTO      FUPD1000 IF NOT EQUAL        * no
.
          MATCH     PRITSUBN,PRGPSUB1            * same sub item number ?
          GOTO      FUPD1000 IF NOT EQUAL        * no
.
          MATCH     SAVDAT2,PRGPDATE             * same effective date ?
          GOTO      FUPD1000 IF NOT EQUAL        * no
.
.         Valid group item found
.
          PACK      SAVKEY34,PRGPFLAG,PRGPITM1,PRGPSUB1,PRGPDATE,PRGPITM2:
                             PRGPSUB2
          PACK      KEY34,PRGPFLAG,PRGPITM1,PRGPSUB1,PRITDAT1,PRGPITM2,PRGPSUB2
          CALL      RAPRGP1
          IF        OVRCD = 1
             MOVE      PRITDAT1,PRGPDATE
             MOVE      SP4,PRGPSPAR
             CALL      WRPRGP1
          ENDIF
          MOVE      SAVKEY34,KEY34
          CALL      RDPRGP1                      * reposition on group file
.
          GOTO      FUPD2000                     * get next record
.
.         Short record found
.
FUPD8100  MATCH     "IBARSH",PGM
          IF        @EQUAL
            PRINT     "Record number ",RECCNT:
                      " is not the correct length. Item number [",SAVITMN,"]":
                      "No update performed for this record. ";
          ELSE
            DISPLAY   *P1:23,*EF,*B,"Record number ",RECCNT:
                      " is not the correct length. Item number [",SAVITMN,"]":
                      *P1:24,"No update performed for this record. ";
            CALL      HITENTER
            DISPLAY   *P1:23,*EF;
          ENDIF
          GOTO      FUPD1000
.
.         Invalid record found
.
FUPD8200  MATCH     "IBARSH",PGM
          IF        @EQUAL
            PRINT     "Record number ",RECCNT:
                     " is not in the correct format. Item number [",SAVITMN,"]":
                      "No update performed for this record. ";
          ELSE
            DISPLAY   *P1:23,*EF,*B,"Record number ",RECCNT:
                     " is not in the correct format. Item number [",SAVITMN,"]":
                      *P1:24,"No update performed for this record. ";
            CALL      HITENTER
            DISPLAY   *P1:23,*EF;
          ENDIF
          GOTO      FUPD1000
.
.         No item record found
.
FUPD8300  MATCH     "IBARSH",PGM
          IF        @EQUAL
            PRINT     "Item number [",SAVITMN,"]":
                      " is a new item. Record number ",RECCNT;
          ELSE
            DISPLAY   *P1:24,*EF,"Item number [",SAVITMN,"]":
                      " is a new item. Record number ",RECCNT;
          ENDIF
          GOTO      FUPD1000
.
.         Item with a later effective date found
.
FUPD8400  MATCH     "IBARSH",PGM
          IF        @EQUAL
            UNPACK    PRITDAT1,CCENT,CYEAR,CMON,CDAY
            CALL      PACDATE
            PRINT     "Item number [",SAVITMN,"]":
                      " has a current effective date of ",CPCDATE,".";
            UNPACK    SAVDAT1,CCENT,CYEAR,CMON,CDAY
            CALL      PACDATE
            PRINT     "New date is ",CPCDATE,". No update performed. ";
         ELSE
            UNPACK    PRITDAT1,CCENT,CYEAR,CMON,CDAY
            CALL      PACDATE
            DISPLAY   *P1:23,*EF,*B,"Item number [",SAVITMN,"]":
                      " has a current effective date of ",CPCDATE,".";
            UNPACK    SAVDAT1,CCENT,CYEAR,CMON,CDAY
            CALL      PACDATE
            DISPLAY   *P1:24,"New date is ",CPCDATE,". No update performed. ";
            CALL      HITENTER
            DISPLAY   *P1:23,*EF;
          ENDIF
          GOTO      FUPD1000
.
.         Processing completed.
.
FUPD9000  MATCH     "IBARSH",PGM
          IF        @EQUAL
            PRINT      "Processing completed. ";
          ELSE
            DISPLAY    *P1:23,*EF,*P1:24,"Processing completed. ";
            CALL       HITENTER
          ENDIF
          CLOSE      INPFILE
.
FUPD9999  RETURN
+
.****************************************************************************
.*                                  PRDT0000           Called by: SEL0000   *
.*                         input the Service Date/Time            ACPT0000  *
.****************************************************************************
.
PRDT0000  KEYIN     *P24:16,*DV,UNDLN1:
                    *P24:16,*V2LON,ANS:
                    *P24:16,*DV,ANS
.
          ENDSET    ANS
          APPEND    SP1,ANS
          RESET     ANS
          REP       UPPLOW,ANS
.
          MATCH     SP1,ANS                      * anything entered ?
          GOTO      PRDT8500 IF EQUAL            * no
.
          MATCH     EXITCHAR,ANS                 * exitchar entered ?
          GOTO      PRDT9500 IF EQUAL            * yes
.
          MATCH     ANSY,ANS                     * Y entered ?
          GOTO      PRDT8000 IF EQUAL            * yes
.
          MATCH     ANSN,ANS                     * N entered ?
          GOTO      PRDT8500 IF EQUAL            * yes
.
          BEEP
          GOTO      PRDT0000
.
PRDT8000  MOVE      ONE,IPDTI
          DISPLAY   *P24:16,*V2LON,"Yes"
          MOVE      ZERO,EXIT
          GOTO      PRDT9999
.
PRDT8500  MOVE      ZERO,IPDTI
          DISPLAY   *P24:16,*V2LON,"No "
          MOVE      ZERO,EXIT
          GOTO      PRDT9999
.
PRDT9500  MOVE      ONE,EXIT
.
PRDT9999  RETURN
+
.****************************************************************************
.*                                  SF750000           Called by: SEL0000   *
.*                       input schedule fee 75%                   ACPT0000  *
.****************************************************************************
.
SF750000  KEYIN     *P25:13,*DV,SP10,*DV,SP1,*P25:13,*V2LON,ISF75:
                    *P25:13,*DV,ISF75
.
          MOVE      ZERO,EXIT
.
SF759999  RETURN
+
.****************************************************************************
.*                                  SF850000           Called by: SEL0000   *
.*                       input schedule fee 85%                   ACPT0000  *
.****************************************************************************
.
SF850000  KEYIN     *P25:14,*DV,SP10,*DV,SP1,*P25:14,*V2LON,ISF85:
                    *P25:14,*DV,ISF85
.
          MOVE      ZERO,EXIT
.
SF859999  RETURN
+
.****************************************************************************
.*                                  SAFE0000           Called by: SEL0000   *
.*                       input suggested ama fee                  ACPT0000  *
.****************************************************************************
.
SAFE0000  KEYIN     *P25:15,*DV,SP10,*DV,SP1,*P25:15,*V2LON,ISAFE:
                    *P25:15,*DV,IFEE
.
          MOVE      ZERO,EXIT
.
SAFE9999  RETURN
+
.******************************************************************************
.*                                 KASC0000                                   *
.*                            Keyin ASCI file for MBS item upload             *
.******************************************************************************
KASC0000  MOVE      ZERO,EXIT
          PACK      FNAMEI WITH SP70,SP70,SP70
.
          DISPLAY   *P19:13,*EF,"Private Practive MBS Items Load File";
.
          KEYIN     *P1:14,*EL,"Keyin Path & File Name : ",*V2LON,FNAMEI
.
          PACK      FNAMEI,FNAMEI,SP70,SP70,SP70
.
          MATCH     SP70,FNAMEI
          GOTO      KASC9000 IF EQUAL
.
          SCAN      ".txt",FNAMEI
          IF        !@EQUAL
            SQUEEZE   FNAMEI
            ENDSET    FNAMEI
            APPEND    ".txt",FNAMEI      * add ".txt" if there is a path
            APPEND    SP70,FNAMEI
            RESET     FNAMEI
          ENDIF
          RESET     FNAMEI
.
          DISPLAY   *P26:14,*V2LON,*EL,FNAMEI;
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      LPMBSTXT,FNAMEI
          TRAPCLR   IO
          BRANCH    OVRCD,KASC8000
.
          CALL      EXUS0000
          MOVE      ZERO,EXIT
          GOTO      KASC9999
.
KASC8000  DISPLAY   *P1:24,*EL,*B,"File not found.  ";
          CALL      PHED0000
          PRINT     *N,"Upload File Not Found. ",FNAMEI
          CALL      HITENTER
.
KASC9000  MOVE      ONE,EXIT
.
KASC9999  RETURN
+
.******************************************************************************
.*                                  KPTH0000                                  *
.*                     Keyin path name                                        *
.******************************************************************************
KPTH0000  PACK      PATHNAME,SP70,SP70,SP70
          KEYIN     *P1:15,*EL,"Keyin Path & File Name : ",*V2LON,PATHNAME;
          ENDSET    PATHNAME
          APPEND    SP70,PATHNAME
          APPEND    SP70,PATHNAME
          APPEND    SP70,PATHNAME
          RESET     PATHNAME
.
.         PACK      PATHNAME,PATHNAME,SP70,SP70,SP70
          MATCH     SP70,PATHNAME
          GOTO      KPTH9500 IF EQUAL
.
          MOVE      ZERO,EXIT
          GOTO      KPTH9999
.
KPTH9500  DISPLAY   *P1:24,*EL,*B,"Upload File is Mandatory .  ";
          CALL      PHED0000
          PRINT     *N,"Upload File is Mandatory. ",FNAMEI
          CALL      HITENTER
          MOVE      ONE,EXIT
.
KPTH9999  RETURN
+
.******************************************************************************
.*                                  KUSR0000                                  *
.*                     Keyin user id                                          *
.******************************************************************************
KUSR0000  KEYIN     *P1:16,*EL,"Web User Id : ",*V2LON,WBUSERID;
          PACK      WBUSERID,WBUSERID,SP70
.
          MATCH     SP70,WBUSERID
          GOTO      KUSR9500 IF EQUAL
.
          PACK      KEY10,WBUSERID,SP70
          CALL      RDWBSE1
          BRANCH    OVRCD,KUSR9500
.
          MOVE      ZERO,EXIT
          GOTO      KUSR9999
.
KUSR9500  DISPLAY   *P1:24,*EL,*B,"Invalid User ID. ",WBUSERID;
          CALL      PHED0000
          PRINT     *N,"Invalid User ID ",WBUSERID
          CALL      HITENTER
          MOVE      ONE,EXIT
.
KUSR9999  RETURN
+
.******************************************************************************
.         Execute us1 command before processing
.******************************************************************************
EXUS0000  CLEAR     CMDLINE
          APPEND    "ibapri16.us1 ",CMDLINE
          APPEND    FNAMEI,CMDLINE
          APPEND    SP70,CMDLINE
          RESET     CMDLINE
          EXECUTE   CMDLINE,TASKID
.
EXUS9999  RETURN
+
.******************************************************************************
.*                                  LMBS0000                                  *
.*                        Generate Fees of a health fund                      *
.******************************************************************************
LMBS0000  CALL      PHED0000                * Print page heading
.
          MOVE      ZERO,TOTALERR           * total errors
          MOVE      ZERO,TOTALADD           * total added
          MOVE      ZERO,TOTALUPD           * total updated
          MOVE      ZERO,LINENUMB           * line number
.
          OPEN      LPMBSTXT,FNAMEI
.
LMBS1000  READ      LPMBSTXT,SEQ;XFLD0001,XFLD0002,XFLD0003,XFLD0004,XFLD0005:
                                 XFLD0006,XFLD0007,XFLD0008,XFLD0009,XFLD0010:
                                 XFLD0011,XFLD0012,XFLD0013,XFLD0014,XFLD0015:
                                 XFLD0016,XFLD0017,XFLD0018,XFLD0019,XFLD0020:
                                 XFLD0021,XFLD0022,XFLD0023,XFLD0024,XFLD0025:
                                 XFLD0026
          GOTO      LMBS9000 IF OVER
.
LMBS2000  ADD       ONE,LINENUMB                 * Add 1 to line number
.
          MOVE      ZERO,PRITFLAG
          MOVE      XFLD0001,PRITFLAG            * Item Type
          PACK      DPRITFLG,XFLD0001,SP70       * DIM Item type for print error
          PACK      PRITITMN,XFLD0002,SP70       * MBS Item Number
          PACK      PRITSUBN,XFLD0003,SP70       * MBS Subitem Number
          PACK      PRITDAT1,XFLD0004,SP70       * Date item commenced
.
          PACK      KEY22,PRITFLAG,PRITITMN,PRITSUBN,PRITDAT1,SP70
          MOVE      KEY22,SAVKEY22
          UNPACK    KEY22,PRITM001,PRITM002,PRITM003,PRITM004
.
.         Make sure we are only adding item with the latest effective date
.
          CALL      RAPRIT1
          IF        OVRCD=1
            CALL      CITM0000             * Check Effective date
            IF        EXIT=1
              CLEAR     ERRORMES
              UNPACK    PRITDAT1,CCENT,CYEAR,CMON,CDAY
              CALL      PACDATE
              APPEND    "Date Item Commenced must be after ",ERRORMES
              APPEND    CPCDATE,ERRORMES
              APPEND    SP70,ERRORMES
              RESET     ERRORMES
.
              UNPACK    SAVKEY22,DPRITFLG,PRITITMN,PRITSUBN,PRITDAT1
              MOVE      DPRITFLG,PRITFLAG
              PACK      PRITDESC,XFLD0005,SP70     * Item Description
.
              CALL      PERR0000                   * print error
              GOTO      LMBS1000
            ENDIF
            UNPACK    SAVKEY22,DPRITFLG,PRITITMN,PRITSUBN,PRITDAT1
            MOVE      DPRITFLG,PRITFLAG
          ENDIF
          PACK      PRITDESC,XFLD0005,SP70       * Item Description
.
          MATCH     SP70,XFLD0001
          IF        @EQUAL
            MOVE      "Item type is a mandatory field",ERRORMES
            CALL      PERR0000                   * print error
            GOTO      LMBS1000
          ENDIF
.
          IF        PRITFLAG<>0 & PRITFLAG<>1
            MOVE      "Invalid item type",ERRORMES
            CALL      PERR0000                   * print error
            GOTO      LMBS1000
          ENDIF
.
          MATCH     SP70,PRITITMN
          IF        @EQUAL
            MOVE      "Item number is a mandatory field",ERRORMES
            CALL      PERR0000                   * print error
            GOTO      LMBS1000
          ENDIF
.
          MATCH     SP70,PRITDAT1
          IF        @EQUAL
            MOVE      "Date item commenced is a mandatory field",ERRORMES
            CALL      PERR0000                   * print error
            GOTO      LMBS1000
          ENDIF
.
          MATCH     SP70,PRITDESC
          IF        @EQUAL
            MOVE      "Item description is a mandatory field",ERRORMES
            CALL      PERR0000                   * print error
            GOTO      LMBS1000
          ENDIF
.
          MOVE      ZERO,PRITKEYI
          MOVE      XFLD0006,PRITKEYI            * Keyin Indicator
.
          MATCH     SP70,XFLD0006
          IF        @EQUAL |@EOS
            MOVE      "Keyin indicator is a mandatory field",ERRORMES
            CALL      PERR0000                   * print error
            GOTO      LMBS1000
          ENDIF
.
          IF        PRITKEYI<>0 & PRITKEYI<>1
            MOVE      "Invalid Keyin indicator",ERRORMES
            CALL      PERR0000                   * print error
            GOTO      LMBS1000
          ENDIF
.
          MOVE      ZERO,PRITSFEE
          MOVE      XFLD0007,PRITSFEE            * Item Schedule Fee ($)
.
          MATCH     SP70,XFLD0007
          IF        @EQUAL | @EOS
            MOVE      "Item schedule fee is a mandatory field",ERRORMES
            CALL      PERR0000                   * print error
            GOTO      LMBS1000
          ENDIF
.
          PACK      PRITSETC,XFLD0008,SP70       * Set Code (Category PG)
.
          MATCH     SP70,PRITSETC
          IF        @EQUAL
            MOVE      "Set code is a mandatory field",ERRORMES
            CALL      PERR0000                   * print error
            GOTO      LMBS1000
          ENDIF
.
          MATCH     SP70,PRITSETC
          IF        !@EQUAL
            PACK      KEY5,ANSP,ANSG,PRITSETC,SP70
            CALL      RDCODE1
            IF        OVRCD=1
              MOVE      "Invalid set code category PG value",ERRORMES
              CALL      PERR0000                   * print error
              GOTO      LMBS1000
            ENDIF
          ENDIF
.
          PACK      PRITDAT2,XFLD0009,SP70       * Date item will cease
          PACK      PRITICAT,XFLD0010,SP70       * Item Category
.
          PACK      PRITIGRP,XFLD0011,SP70       * Item Group
.
          PACK      PRITSGRP,XFLD0012,SP70       * Item Subgroup
          PACK      PRITFTYP,XFLD0013,SP70       * Fee Type
.
          MATCH     SP70,PRITFTYP
          IF        !@EQUAL
            MATCH     ANSS,PRITFTYP
            IF        !@EQUAL
              MATCH     ANSA,PRITFTYP
              IF        !@EQUAL
                MOVE      "Invalid fee type",ERRORMES
                CALL      PERR0000                   * print error
                GOTO      LMBS1000
              ENDIF
            ENDIF

          ENDIF
.
          PACK      PRITPTYP,XFLD0014,SP70       * Provider Type
.
          MOVE      ZERO,PRITPATH
          MOVE      XFLD0015,PRITPATH            * Pathology item indicator
.
          IF        PRITPATH<>0 & PRITPATH<>1
            MOVE      "Invalid pathology item indicator",ERRORMES
            CALL      PERR0000                   * print error
            GOTO      LMBS1000
          ENDIF
.
          MOVE      ZERO,PRITMAXR
          MOVE      XFLD0016,PRITMAXR            * Maximum no. of Requests
          MOVE      ZERO,PRITDAYS
          MOVE      XFLD0017,PRITDAYS            * Period of Days
.
          PACK      PRITSTEP,XFLD0018,SP70       * Item to stepdown max req.
          PACK      PRITSTSB,XFLD0019,SP70       * Sub-item to stepdown to
.
          MOVE      ZERO,PRITFIXD
          MOVE      XFLD0020,PRITFIXD            * Fixed charged item ?
.
          IF        PRITFIXD<>0 & PRITFIXD<>1
            IF         PRITFIXD<>2
              MOVE      "Invalid fixed charge item",ERRORMES
              CALL      PERR0000                   * print error
              GOTO      LMBS1000
            ENDIF
          ENDIF
.
          MOVE      ZERO,PRITGSTA
          MOVE      XFLD0021,PRITGSTA            * GST Charge
.
          IF        PRITGSTA<>0 & PRITGSTA<>1
            IF        PRITGSTA<>2
              MOVE      "Invalid GST chargeable",ERRORMES
              CALL      PERR0000                   * print error
              GOTO      LMBS1000
            ENDIF
          ENDIF
. 
          PACK      PRITGSTC,XFLD0022,SP70       * GST Payable Code
.
          IF        PRITGSTA=1 | PRITGSTA=2
            MATCH     SP70,PRITGSTC
            IF        @EQUAL
              MOVE      "GST payable code is a mandatory field",ERRORMES
              CALL      PERR0000                   * print error
              GOTO      LMBS1000
            ENDIF
.
            PACK    KEY6,PRITGSTC,SP70
            CALL    RDIBGS1
            IF      OVRCD=1
              MOVE      "Invalid GST payable code",ERRORMES
              CALL      PERR0000                   * print error
              GOTO      LMBS1000
            ENDIF
          ENDIF
.
          MOVE      ZERO,PRITSF75
          MOVE      XFLD0023,PRITSF75            * Schedule Fee 75%
          MOVE      ZERO,PRITSF85
          MOVE      XFLD0024,PRITSF85            * Schedule Fee 85%
          MOVE      ZERO,PRITSAFE
          MOVE      XFLD0025,PRITSAFE            * Suggested AMA Fee
.
          PACK      PRITPDTI,XFLD0026,SP70       * Print Service Date/Time Inv.
.
          PACK      KEY22,PRITFLAG,PRITITMN,PRITSUBN,PRITDAT1,SP70
LMBS8000  CALL      RAPRIT1
          IF        OVRCD=1
            CALL      WRPRIT1           * Write new Item
            ADD       ONE,TOTALADD
          ELSE
            CALL      UPPRIT1           * Update existing item
            ADD       ONE,TOTALUPD
          ENDIF
.
          MOVE      KEY22,SAVKY22B
.
          CALL      CEASE000          * add Cease Date to earlier Items
.
          MOVE      SAVKY22B,KEY22
          CALL      RDPRIT1
.
          MOVE      PRITFLAG,ITEMTYP  * Input var for PRIIKIUP
          MOVE      PRITITMN,ITEMNO   * Input var for PRIIKIUP
          MOVE      PRITDESC,ITEMDESC * Input var for PRIIKIUP
          PROC      PRIIKIUP
.
          COMPARE   ZERO,PRITPATH           * is this a Pathology test ?
          IF        @EQUAL
            CALL      ADDPTE00              * add the Item to "pritestf"
          ELSE
            CALL      DELPTE00              * delete Item from "pritestf"
          ENDIF
.
.
          GOTO      LMBS1000            * get next record
.
LMBS9000  CALL      PTOT0000            * Print totals
.
          CLOSE     LPMBSTXT
.
LMBS9999  RETURN
+
.-------------------------------------------------------------------------------
. Add Item to Pathology Test table
.-------------------------------------------------------------------------------
ADDPTE00  PACK      KEY17,PRITITMN,PRITDAT1,SP70
          CALL      RDPRTE1
          COMPARE   ZERO,OVRCD              * already exists ?
          GOTO      ADDPTE99 IF EQUAL
.
          MOVE      PRITITMN,PRTECODE   * Test Code
          MOVE      PRITDAT1,PRTEDATE   * Date Effective From
          MOVE      PRITDESC,PRTEDESC   * Test Description
          UNPACK    SP70,PRTEITMN,PRTESUBN,PRTEAMAN
          IF        PRITFLAG = 0
            MOVE      PRITITMN,PRTEITMN * MBS Item Number
            MOVE      PRITSUBN,PRTESUBN * MBS Subitem Number
          ELSE
            MOVE      PRITITMN,PRTEAMAN * AMA Item Number
          ENDIF
          MOVE      SP5,PRTEMSER        * Multiple Services Code
          MOVE      "  1",PRTETESN      * Number of Procedures
          MOVE      SP4,PRTEABRV        * Standard Abbreviation
          CALL      WRPRTE1             * Writes away the data
.
          MOVE      PRTECODE,TESTCODE   * Input var for PRITKIUP
          MOVE      PRTEDESC,ITEMDESC   * Input var for PRITKIUP
          PROC      PRITKIUP            * Update Pathology Test Keyword Index
.
ADDPTE99  RETURN
+
.-------------------------------------------------------------------------------
. Delete Item from Pathology Test table
.-------------------------------------------------------------------------------
DELPTE00  PACK      KEY17,PRITITMN,PRITDAT1,SP70
          CALL      RDPRTE1
          BRANCH    OVRCD,DELPTE99
.
          MATCH     SP3,PRITSUBN
          GOTO      DELPTE99 IF NOT EQUAL
.
          CALL      DEPRTE1             * Writes away the data
.
          MOVE      PRTECODE,TESTCODE   * Input var for PRITKIUP
          MOVE      PRTEDESC,ITEMDESC   * Input var for PRITKIUP
          PROC      PRITKIUP            * Update Pathology Test Keyword Index
.
DELPTE99  RETURN
+
.******************************************************************************
.*                                  PHED0000                                  *
.*                        Page heading for load items from text file          *
.******************************************************************************
PHED0000  CALL      HEAD132
.
          PRINT     *20,"Upload Private Practice MBS/AMA Items from Text File"
.
          PRINT     *20,"Upload File : ",PATHNAME
                    
          PRINT     *20,"Date        : ",CDATE," at ",CTIMEIS
.
          PACK      KEY10,WBUSERID,SP70
          CALL      RDWBSE1
          IF        OVRCD=1
            MOVE      WBUSERID,WBSENAM
          ENDIF
.
          PRINT     *20,"User Name   : ",WBSENAM
.
          CALL      UND132
          PRINT     *1,"| Line",*12,"| Record Key",*66,"| Error Message":
                    *132,"|"
          CALL      UND132
.
PHED9999  RETURN
+
.******************************************************************************
.*                                  PERR0000                                  *
.*                       Print error for load items from text file            *
.******************************************************************************
PERR0000  PACK      KEY52,DPRITFLG,PRITITMN,PRITSUBN,PRITDAT1,PRITDESC,SP70
.
          PRINT     *1,"| ",LINENUMB,*12,"| ",KEY52,*66,"| ",ERRORMES,*132,"|"
.
          ADD       ONE,TOTALERR
.           
PERR9999  RETURN
+
.******************************************************************************
.*                                  PTOT0000                                  *
.*                        Report totals for load items from text file         *
.******************************************************************************
PTOT0000  CALL      UND132
.
          PRINT     *1,"| Total Errors  : ",TOTALERR,*132,"|"
          PRINT     *1,"| Total Added   : ",TOTALADD,*132,"|"
          PRINT     *1,"| Total Updated : ",TOTALUPD,*132,"|"
.           
          CALL      UND132
.
PTOT9999  RETURN
+
.------------------------------------------------------------------------------
. Check if this is the latest date for the item
.------------------------------------------------------------------------------
CITM0000  MOVE      ZERO,EXIT
          PACK      KEY22,PRITFLAG,PRITITMN,PRITSUBN,Z70
          CALL      RSPRIT1
          CALL      RPPRIT1
          BRANCH    OVRCD,CITM9999
.
          MATCH     DPRITFLG,PRITM001
          GOTO      CITM9999 IF NOT EQUAL
.
          MATCH     PRITITMN,PRITM002
          GOTO      CITM9999 IF NOT EQUAL
          MATCH     PRITSUBN,PRITM003
          GOTO      CITM9999 IF NOT EQUAL
.
.         New Date item commenced must be greater than the last existing record
.
          MATCH     PRITDAT1,PRITM004      * New effective date is after 
          GOTO      CITM9999 IF NOT LESS
.
CITM9000  MOVE      ONE,EXIT
CITM9999  RETURN
+
.------------------------------------------------------------------------------
. Routine to insert Cease Date into all old Items
.------------------------------------------------------------------------------
CEASE000  MOVE      SAVKEY22,KEY22
          CALL      RDPRIT1
          BRANCH    OVRCD,CEASE999
.
          MOVE      PRITDAT1,WORKDATE       * save Effective Date of latest
          SUB       ONE,WORKDATE
          MOVE      WORKDATE,PREVEFDT       * read thru earlier Item records
.
CEASE100  CALL      RPPRIT1
          BRANCH    OVRCD,CEASE999
.
          MATCH     DPRITFLG,PRITM001
          GOTO      CEASE999 IF NOT EQUAL
.
          MATCH     PRITITMN,PRITM002
          GOTO      CEASE999 IF NOT EQUAL
.
          MATCH     PRITSUBN,PRITM003
          GOTO      CEASE999 IF NOT EQUAL
.
          MATCH     SP8,PRITDAT2            * don't change if already dated
          GOTO      CEASE200 IF NOT EQUAL
.
          MOVE      PREVEFDT,PRITDAT2
          CALL      UPPRIT1
.
CEASE200  MOVE      PRITDAT1,PREVEFDT       * update previous Effective date
          GOTO      CEASE100
.
CEASE999  RETURN
+
.****************************************************************************
.*        IO ROUTINES FOR TEMPORARY FILE                                    *
.****************************************************************************
.
RSTEMP1   READ      ITMTEMP1,KEY34;;
          RETURN
.
RDTEMP1   MOVE      ZERO,OVRCD
          READ      ITMTEMP1,KEY34;XIFLAG,XITEM1,XSITEM1,XEDATE,XITEM2,XSITEM2:
                    XDESC,XSPARE
          GOTO      OVERCOND IF OVER
          RETURN
.
RKTEMP1   MOVE      ZERO,OVRCD
          READKS    ITMTEMP1;XIFLAG,XITEM1,XSITEM1,XEDATE,XITEM2,XSITEM2:
                    XDESC,XSPARE
          GOTO      OVERCOND IF OVER
          RETURN
.
RPTEMP1   MOVE      ZERO,OVRCD
          READKP    ITMTEMP1;XIFLAG,XITEM1,XSITEM1,XEDATE,XITEM2,XSITEM2:
                    XDESC,XSPARE
          GOTO      OVERCOND IF OVER
          RETURN
.
WRTEMP1   WRITE     ITMTEMP1,KEY34;KEY34,XDESC,XSPARE
          RETURN
.
UPTEMP1   UPDATE    ITMTEMP1;XIFLAG,XITEM1,XSITEM1,XEDATE,XITEM2,XSITEM2:
                    XDESC,XSPARE
          RETURN
.
DETEMP1   DELETE    ITMTEMP1,KEY34
          RETURN
+
. =========================================================================
.        I/O INCLUDES
.==========================================================================
.
          INC       STDGENCD 
          INC       TFILENAM                * Generate Temp File Name
          INC       IBASEQIO/INC            * Sequential Numbers File
          INC       WEBERRIO/INC            * Web Server Error Logging
.
          INC       IBAGSTKY                     * gst keyins
          INC       IBAGKIKY
          INC       KYPRIITM
          INC       PATCODDS                     * codes listing
          INC       PRIITMDS                     * item listing
          INC       PRIIKIPR                     * AMA/MBS Item Keyword Proc
          INC       PRITKIPR                     * Pathology Test Keyword Proc
.
          INC       PRIITMIO/INC                 * item file
          INC       PRIGRPIO/INC                 * group file
          INC       PRITESIO/INC                 * pathology
          INC       PATCODIO/INC                 * codes file
          INC       IBAGSTIO/INC                 * GST file
          INC       WEBSECIO/INC                 * web user id
          INC       STDKWSCD                     * gst search
