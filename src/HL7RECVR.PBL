.***************************************************************************
.* System    :   System Management                                         *
.* Program   :   HL7RECVR                                                  *
.* Desc      :   HL7 General Receiving Server                              *
.***************************************************************************
.* Date      :   01/10/2006                                                *
.* Author    :   Steve Armstrong                                           *
.* Function  :   This program will accept HL7 messages via a TCP/IP port.  *
.*               It will then validate the message and send an             *
.*               acknowledgement message back to the sender.  All messages *
.*               received are recorded for reviewing.                      *
.*               The first stage of message validation is purely at the    *
.*               HL7 level.  If this validation is successful, then the    *
.*               message will be processed by a subroutine specific for the*
.*               message type.  This subroutine will validate data against *
.*               the data tables then, if successful, update the tables    *
.*               accordingly.                                              *
.*                                                                         *
.*       Note:   Each read from the socket (via RECV) is into a buffer     *
.*               which can hold 4000 characters.  We may receive as few as *
.*               one character or as many as 4000 characters on any given  *
.*               read (RECV), so we need to keep reading while there are   *
.*               characters coming through.                                *
.*               For example, a message which is 30 characters long, may   *
.*               come through in 3 reads (RECV), the first read receiving  *
.*               10 characters, the second 15 characters, and the third    *
.*               5 characters.  It may also be the case that characters    *
.*               from two separate messages may come through in a single   *
.*               read ie, the tail of one message and the start of the     *
.*               next message.                                             *
.*                                                                         *
.*  Segments Validated (34)                                                *
.*            MSH - Message Header                                         *
.*            EVN - Event Type                                             *
.*            PID - Patient Identification                                 *
.*            NK1 - Next of Kin                                            *
.*            PV1 - Patient Visit                                          *
.*            PV2 - Patient Visit (Additional Information)                 *
.*            MRG - Merge Patient Information                              *
.*            FT1 - Post Detail Financial Transactions                     *
.*            ZXV - Extra Visit Information                                *
.*            MFI - Master File Identification                             *
.*            MFE - Master File Entry                                      *
.*            STF - Staff                                                  *
.*            PRA - Practitioner Detail                                    *
.*            ZPR - Practice                                               *
.*            ZST - Extra Staff Information                                *
.*            ZSF - Hospital Specific Staff Information                    *
.*            SCH - Schedule Activity Information                          *
.*            RGS - Resource Group Segment                                 *
.*            ZSC - Additional Schedule Activity                           *
.*            ZFT - Additional Financial Transactions Detail               *
.*            ZXP - Extra Patient Information                              *
.*            ZAL - Patient Alert Information                              *
.*            RF1 - Referral Information                                   *
.*            PRD - Provider Data                                          *
.*            PR1 - Procedures                                             *
.*            ROL - Role                                                   *
.*            DG1 - Diagnosis                                              *
.*            NTE - Notes and Comments                                     *
.*            ARQ - Appointment Request (only to avoid rejection)          *
.*            GT1 - Guarantor                                              *
.*            IN1 - Insurance                                              *
.*            AIS - Appointment Information (Service)                      *
.*            AIL - Appointment Information (Location Resource)            *
.*            AIP - Appointment Information (Personnel Resource)           *
.*                                                                         *
.*  HL7 Messages Processed (20)                                            *
.*            A28 - Add Person Information                                 *
.*            A31 - Update Person Information                              *
.*            A34 - Merge Patient Information - Patient ID Only            *
.*            P03 - Post Detail Financial Transaction                      *
.*            I12 - Add Patient Referral                                   *
.*            I13 - Update Patient Referral                                *
.*            I14 - Delete Patient Referral                                *
.*            A03 - Allied Health Contact                                  *
.*            A04 - Attend O/P Booking                                     *
.*                - Triage Emergency Visit                                 *
.*            A05 - I/P Pre-admit                                          *
.*            M02 - Staff/Practitioner                                     *
.*            S14 - Update Theatre Details                                 *
.*                - Update O/P Appointment Booking                         *
.*                - Update I/P Appointment Booking                         *
.*            A08 - Update I/P Visit Details (limited fields)              *
.*                - Update Emergency Details                               *
.*            A21 - On-Leave                                               *
.*            A22 - Return from Leave                                      *
.*            S0x - O/P Appointment Message (S02/S03/S04)                  *
.*            S12 - New O/P Appointment Booking                            *
.*                - New I/P Appointment Booking                            *
.*            S13 - Reschedule O/P Appointment Booking                     *
.*            S15 - Cancel O/P Appointment Booking                         *
.*                - Cancel I/P Appointment Booking                         *
.*            S26 - Did Not Attend O/P Appointment Booking                 *
.***************************************************************************
.*  Mod's     :                                                            *
.***************************************************************************
.*        V12.00.07 16/10/2025  Davin          TSK 0968448                 *
.*                  Call CZXV0000 from CPV10000 to clear ZXV fields        *
.*                  15/10/2025  Davin          TSK 0968385                 *
.*                  Call CONV0000 from RZTR0000 to convert escape sequences*
.*                  for fields ZTR.2-ZTR.7                                 *
.*        V12.00.06 17/09/2025  Davin          TSK 0967016                 *
.*                  Check diag code doesn't already exist on emrvcd before *
.*                  writing new record (PDG10085)                          *
.*                  Initialise DG1COUNT and DG1FOUND in CLER0000           *
.*                  11/09/2025  Davin          TSK 0949457                 *
.*                  Added ZXP.76: Email Validation Flag (VZXP7600/PMPXSN21)*
.*                  10/09/2025  Davin          TSK 0959732                 *
.*                  Increased FIELDID to 7 chars to allow 3 digit fields   *
.*                  Do not allow "" in ZXV.103 (VA08E000)                  *
.*                  Do not allow "" in ZTR.1/8/10/12/13/43/45/46 (VZTR0000)*
.*                  08/08/2025  Davin          TSK 0959732                 *
.*                  Added ZTR znd ZNT segments to EMR A08                  *
.*                  Added new fields ZTR.47/48/49 and ZXV.103              *
.*                  Modified VZTR0000/VA08E000/PA08E000/STVIS000/WRECHA00  *
.*        V12.00.05 08/08/2025  Ebon Clements  TSK 0964891                 *
.*                  Fixed wattx1af read for ASA score - WESE0000           *
.*        V12.00.04 27/07/2025  Nikitha B     TSK 0963585                  *
.*                  Recompiled for WEBCHGUR                                *
.*        V12.00.03 08/07/2025  Jacob Jackson  TSK 0944962                 *
.*                  Validate SCH.22.4 based on either Hospital Code or     *
.*                  Approval Number                                        *
.*        V12.00.02 24/06/2025  J.Tan             TSK 0961696              *
.*                  Recompiled for WEBCHGUR-Patient Debt=4 Payment Plan adm*
.*        V12.00.01 14/05/2025  Ebon Clements  TSK 0955096                 *
.*                  Added alphanumeric visit number generation             *
.*                  ZUNK0000, SA050000, PI120000, ADDPRG00 SS12I050        *
.*                  - GENANVIS                                             *
.*                  14/05/2025  Davin          TSK 0955096                 *
.*                  Changed for Alphanumeric Visit Numbers                 *
.*        V11.05.13 17/04/2025  J.Tan          TSK 0958935                 *
.*                  Fixed Updating Hold invoice not to use EVN00201        *
.*        V11.05.12 16/04/2025  J.Tan          TSK 0958935                 *
.*                  Fixed Updating Hold invoice                            *
.*        V11.05.11 09/04/2025  Davin          TSK 0949466                 *
.*                  Trigger an outbound M02 when an incoming M02 has been  *
.*                  received and accepted (PTCNFNM2/PM029000/DGCLIM02)     *
.*        V11.05.10 03/04/2025  J.Tan          TSK 0958935                 *
.*                  Fixed Hold invoice from and perform by                 *
.*        V11.05.09 18.03.2025  DA Sarkies    Task 0955909                 *
.*                  Updated the ESIS extract to add the ASAS code          *
.*        V11.05.08 06.03.2025  David S        TSK 0955909                 *
.*                  Recompiled for MERGECOD                                *
.*        V11.05.07 27/02/2025  Davin          TSK 0957713                 *
.*                  Increased ZAL SetID from 2 to 3 characters  (ZAL00101) *
.*        V11.05.06 30/01/2025  Davin          TSK 0955764                 *
.*                  If direct read fails when validating post code, try    *
.*                  using first 35 chars of suburb only (VPID8730)         *
.*        V11.05.05 11/12/2024  Davin          TSK 0954083                 *
.*                  Only check for theatre items if this is an OPR visit   *
.*                  to stop potential misread of pmsmti for P03 (PP030095) *
.*        V11.05.04 02/12/2024  Davin          TSK 0952421                 *
.*                  Replace " with ' for ZXV.38 (RZXV3801)                 *
.*        V11.05.03 29/11/2024  Thanh T        TSK 0939466                 *
.*                  Added Distance in kms field                            *
.*        V11.05.02 22.11.2024  Ebon Clements  TSK 0953786                 *
.*                  Recompile for MERGECOD                                 *
.*        V11.05.01 21/11/2024  Davin          TSK 0953886                 *
.*                  Fixed default consumption type in P03 messages when    *
.*                  FT1.26 is not populated (LOADCTYP/AMIS0000)            *
.*        V11.04.15 30/10/2024  Davin          TSK 0951823                 *
.*                  Added check for preadmission when writing misc item to *
.*                  invoice pending from P03 (PTCNRP03/PROC6107/AMIS1500)  *
.*                  30/10/2024  PJ Le Febour   TSK 0950014                 *
.*                  Recompiled for WRITBOOK - UPMV0000 use SAVBCOMP        *
.*                  read RDPMEXT1                                          *
.*        V11.04.14 02/10/2024  Davin          TSK 0951749                 *
.*                  Don't accept an inactive gender code when processing   *
.*                  EMR A04 messages (GENDR000)                            *
.*        V11.04.13 12/09/2024  Davin          TSK 0951416                 *
.*                  Initialise DEATHFLG before each message (CLER0000)     *
.*        V11.04.12 26/07/2024  Davin          TSK 0931586                 *
.*                  Change to check emloactv not ptcoactv (VZTR0100)       *
.*                  Fixed typo in error message for Colour 1 (VZTR1100)    *
.*                  Added validation of ZNT Comments (VZNT0000)            *
.*        V11.04.11 28/06/2024  Davin          TSK 0946106                 *
.*                  Accept pension concession card that doesn't pass       *
.*                  validation if a cat ct code exists with indc5 = 'V'    *
.*                  (VPEN0000/CPDVA000/PCRD0000/SAVPCARD)                  *
.*        V11.04.10 24/06/2024  Davin          TSK 0948360                 *
.*                  Added open of pmsexta1 to fix I*C in WRITBOOK/UPMV0000 *
.*        V11.04.09 05/06/2024  Davin          TSK 0941543                 *
.*                  Added fields ZXP.72-75 for PMI ethnicity / language    *
.*                  Added contlan1 to Contacts Temp File and populate      *
.*                  pmscexaf.pmcelan1 with NK1.20 (Main Language at Home 1)*
.*        V11.04.08 09/05/2024  Davin          TSK 0943359                 *
.*                  Use existing card expiry date if one currently exists  *
.*                  for the dva card number sent in PID.3 (DVEXPOLD)       *
.*        V11.04.07 05/04/2024  Davin          TSK 0931586                 *
.*                  Added Pain Score (ZTR.35)                              *
.*                  Validate Presenting Complaint field lengths (ZTR.2-7)  *
.*                  Check ZTR coded fields are active and validate lengths *
.*        V11.04.06 27/03/2024  Ebon Clements  TSK 0944691                 *
.*                  Recompiled for WEBCHGUR - Future end dated alerts      *
.*        V11.04.05 18/03/2024  Davin          TSK 0931586                 *
.*                  Added new A04 EMR Triage message (PA04E000/VPIDE000)   *
.*                  Added new ZTR and ZNT segments for EMR A04 message     *
.*        V11.04.04 13/03/2024  J.Tan          TSK 0919335                 *
.*                  Mod checking for HF history                            *
.*        V11.04.03 29/01/2024  Jacob Jackson  TSK 0919335                 *
.*                  Add new local variable and recompile for GETTFEES      *
.*        V11.04.02 22/01/2024  Ebon Clements TSK 0932545                  *
.*                  Recompiled for PMSCEXTM - Added VAR, TEXTAREA and      *
.*                  CONFFILE                                               *
.*        V11.04.01 30/11/2023  Ebon Clements TSK 0925492                  *
.*                  Recompile for BEDBDPRO - Multiple theatre bookings per *
.*                  admission                                              *
.***************************************************************************
.*        V11.03.21 17/10/2023  Ebon Clements TSK 0888745                  *
.*                  Populate EMRHISFD created by fields - PA08E000         *
.*        V11.03.20 13/10/2023 Davin          TSK 0903933                  *
.*                  Recompiled for WRITBOOK - HL7 A11 (based on OTCNA11N)  *
.*        V11.03.19 12/10/2023 Thanh T         TSK 0935874                 *
.*                  Changed INIT0000, PS12O000 to comment out the codes    *
.*                  for PTCNUNET = '1' since it is no longer used          *
.*        V11.03.18 05/09/2023  Ebon Clements  TSK 0888745                 *
.*                  Added clear of EMRHISFD created/update by fields       *
.*                  PA08E100 and PA08E120                                  *
.*        V11.03.17 01/08/2023  Davin          TSK 0907196                 *
.*                  Receive time of birth in PID.7 based on new parameter  *
.*                  ptcntofb (VPID5000)                                    *
.*        V11.03.16 28/07/2023  Ebon Clements  TSK 0935527                 *
.*                  Recompiled for OPRQUEFD - Theatre booking hospital     *
.*        V11.03.15 26/07/2023  Davin          TSK 0929751                 *
.*                  Use CURRDATE instead of RF100701 (Ref Date) to validate*
.*                  PV100301 (Clinic ID) for referral messages (AZXV0620)  *
.*        V11.03.14 22/06/2023  J.Tan          TSK 0933980                 *
.*                  Mod to write to Hold invoice audit WHAU0000            *
.*        V11.03.13 16/06/2023  Davin          TSK 0932178                 *
.*                  Clear ZXP fields when PID fields are cleared (CPID9000)*
.*        V11.03.12 14/06/2023  Don Nguyen     TSK 0928367                 *
.*                  Recompiled for CALCCODE; Re-worked code to round up    *
.*                  ICU & NCU hrs for VIC only.                            *
.*        V11.03.11 17/05/2023  Don Nguyen     TSK 0928367                 *
.*                  Recompiled for CALCCODE; Rounded up ICU & NCU hrs for VIC
.*        V11.03.10 04/04/2023  Davin          TSK 0925875                 *
.*                  Allow inactive referring practice code if referral     *
.*                  status = rejected (AZXV1000)                           *
.*        V11.03.09 05/04/2023  Bella Turco    TSK 0911166                 *
.*                  Recompiled for PATIPERH - Hold Invoice Audit           *
.*        V11.03.08 03/04/2023  Davin          TSK 0930606                 *
.*                  Changed to ignore repeats of PID.5 (LPID0500/RPID0500) *
.*        V11.03.07 22/03/2023  Ebon Clements  TSK 0909393                 *
.*                  Added hospital to oprsesaf(1-6) and oprdetfa(1&5)      *
.*                  indexes. Cahnged CASEKEYZ to DIM 26                    *
.*        V11.03.06 17/03/2023  Davin          TSK 0929387                 *
.*                  Changed to allow Institution Inactivation Date (ZSF.7) *
.*                  to be in the future (VZSF0900)                         *
.*        V11.03.05 10/03/2023  Davin          TSK 0930148                 *
.*                  Changed to use transaction date instead of current date*
.*                  when validating misc items for P03 (GMIS0000)          *
.*        V11.03.04 06/03/2023  Jacob Jackson  TSK 0918711                 *
.*                  Added new options for PID.11.7 that save to pmpxsn18   *
.*                  to allow only a home phone number or only an address   *
.*                  to be secure                                           *
.*        V11.03.03 07/02/2023  Davin          TSK 0922254                 *
.*                  Added Invoice on Hold functionality using P03 inbound  *
.*                  message (VIOH0000/BVISUP00/PIOH0000/UPDIOH00/REMIOH00) *
.*        V11.03.02 18/01/2023  Davin          TSK 0918737                 *
.*                  Only overwrite ALREHOSN if SAVEHOSP is not blank       *
.*                  when updating a referral (PI132500)                    *
.*        V11.03.01 29/11/2022  Davin          TSK 0926165                 *
.*                  Set stafflag to zero in ss140000 to fix default staff  *
.*                  functionality in UPDDAY00 (code matches OPRWEB06)      *
.***************************************************************************
.*        V11.02.17 25/10/2022 Jacob Jackson   TSK 0867531                 *
.*                  Add validation for incoming Pension Numbers            *
.*        V11.02.16 10/10/2022 J.Tan           TSK 0906597                 *
.*                  Recompiled for ABFOTINV - ABF/NWAU Calculations        *
.*        V11.02.15 18/08/2022  Davin            TSK 0922637               *
.*                  Recompiled for VINAHHL7 - Mods to update ref status    *
.*                  change reason/date/time/userid for program referral    *
.*        V11.02.14 25/07/2022  Davin            TSK 0918843               *
.*                  Use existing card colour if one currently exists on    *
.*                  file for the dva card number sent in PID.3 (DVCOLOLD)  *
.*        V11.02.13 18/07/2022 Ebon Clements   TSK 0919769                 *
.*                  Corrected auto create program referral trigger         *
.*                  date/time for VINAH extract - ADDPRG00                 *
.*        V11.02.12 07/06/2022 Jacob Jackson   TSK 0918806                 *
.*                  Recompiled for WRITBOOK - add CNLH7FLG parameter       *
.*        V11.02.11 19/05/2022 J.Tan           TSK 0837128                 *
.*                  Recompiled for PRFAINSR - to use Cat CL indic 24       *
.*        V11.02.10 18/05/2022  Davin            TSK 0917392               *
.*                  Recompiled for VINAHHL7 - Mods to update ref status    *
.*                  change reason/date/time/userid for program referral    *
.*        V11.02.09 20/04/2022 J.Tan             TSK 0837128               *
.*                  Recompiled for WRITBOOK-Default PRFA based on ClaimType*
.*        V11.02.08 27/04/2022  Davin            TSK 0903453               *
.*                  Added ZXP.70:Identifying Gender (VADD1700)             *
.*                  Added ZXP.71:Identifying Pronoun (VADD1800)            *
.*        V11.02.07 26/04/2022  Davin            TSK 0864505               *
.*                  Uppercase PID.9 names (RPID0901/RPID0902/RPID0903)     *
.*        V11.02.06 01/04/2022  Thanh T          TSK 0903453               *
.*                  Added SPPXUCC4, SPPXUCC5, SPPXATF1 and SPPXATF2 for    *
.*                  DEATHAUD changes                                       *
.*        V11.02.05 17/03/2022  Davin            TSK 0915066               *
.*                  Recompiled for VINAHHL7 - check multiple Episode Refs  *
.*                  17/03/2022  Davin            TSK 0864505               *
.*                  Accept nulls in PID.9 to clear aliases/preferred names *
.*                  (VALIAS00/VALDIS00/PADI0000)                           *
.*        V11.02.04 03/03/2022  Davin            TSK 0917184               *
.*                  Clarified error message and allow external visit id    *
.*                  (padmavis) length to be up to 20 chars (CEVS0000)      *
.*        V11.02.03 15/02/2022  Davin            TSK 0915066               *
.*                  Replaced UPDPRG00 with VINAHHL7/VHL70000(if ptcncprg=1)*
.*                  Add 3 more fields to update program referral (PI138500)*
.*        V11.02.02 09/02/2022  Thanh T          TSK 0905641               *
.*                  Recompiled as OUTHEDFD/OUTMA1FD changes                *
.*        V11.02.01 31/01/2022  Davin            TSK 0907877               *
.*                  Added ZXP.69 Multiple Birth Type (VADD1600/MULBAT00)   *
.***************************************************************************
.*        V11.01.28 14/01/2022  Davin            TSK 0910220               *
.*                  Use external visit id as PV1.19 (PTCNUEVI/CEVS0000)    *
.*        V11.01.27 24/12/2021  Davin            TSK 0914403               *
.*                  Set pmshcpaf.pmhchoss when hospital is present in ZSF.2*
.*        V11.01.26 22/12/2021  Davin            TSK 0882972               *
.*                  Save PID.11.7:Address Type to pmpxsn18 - Secured       *
.*                  Address Indicator (VPID9500)                           *
.*        V11.01.25 13/12/2021  Davin            TSK 0864505               *
.*                  Receive name type and preferred name in PID.9 based on *
.*                  new parameter ptcnrnty (VALIAS00/VALDIS00/PADI0000)    *
.*        V11.01.24 20/12/2021  Thanh T          TSK 0877055               *
.*                  Added DEATHATD for common variables to be used in      *
.*                  DEATHAUD                                               *
.*        V11.01.23 30/11/2021  Davin            TSK 0914201               *
.*                  Populate Tier 2 Code for S12 OUT (outbb072/otbbtcod)   *
.*        V11.01.22 08/11/2021 J.Tan           TSK 0880410                 *
.*                  Recompiled for PATIPERH - added Hospital and System    *
.*        V11.01.21 17/11/2021  J.Tan          TSK 0913621                 *
.*                  Recompiled for ABFOTINV - Mod for Multiple NEP Values  *
.*        V11.01.20 19/10/2021  Davin            TSK 0912795               *
.*                  Don't process NTE.3 if NTEFOUND=1 (S12/S13/S14/S26)    *
.*        V11.01.19 15/10/2021  Davin            TSK 0912534               *
.*                  Reject S12/S13 message if no clinic open on the date   *
.*                  of the inbound MOSAIQ appointment (SS12O000/SS13O000)  *
.*        V11.01.18 15/09/2021  Thanh T         TSK 0889595                *
.*                  Recompiled for PMSDAUFD/DEATHAUD changes               *
.*        V11.01.17 13/09/2021  Ebon Clements  TSK 0910279                 *
.*                  Recompiled for BEDBDVCD (BEDBDPRO) - Post Op Ward      *
.*        V11.01.16 27/08/2021  Ebon Clements  TSK 0910383                 *
.*                  Recompiled for BEDBDVCD (BEDBDPRO) - Post Op Ward      *
.*        V11.01.15 11/08/2021  Davin            TSK 0910134               *
.*                  Mods to write ZSC.16 (Anaesthetic Time Out) to         *
.*                  OPARD061/OPARUT07 instead of OPARD105/OPARUT13         *
.*        V11.01.14 23/07/2021  Davin            TSK 0895165               *
.*                  Added new ZSC fields for theatre S14 message:          *
.*                  ZSC061,ZSC062,ZSC063,ZSC064 (VZSC0000/SS140000)        *
.*        V11.01.13 22/07/2021  Ebon Clements    TSK 0909330               *
.*                  Recompiled for BEDBDPRO - Post op ward                 *
.*        V11.01.12 21/07/2021  Davin            TSK 0900673               *
.*                  Don't write alternate visit record (ibaalvaf) when     *
.*                  adding program referrals for an I12 message (ADDPRG00) *
.*        V11.01.11 09/07/2021  Thanh T        TSK 0905755                 *
.*                  Recompiled for BEDBDPRO changes                        *
.*        V11.01.10 29/06/2021  Davin            TSK 0898004               *
.*                  Use NK1.22 for send letter/send sms flag in pmscexaf   *
.*                  (VNOK0000/VNKA0000/LODC0000/MATC0000/PNOK0000/PNKA0000)*
.*        V11.01.09 10/06/2021  Davin            TSK 0900673               *
.*                  Added PTCNCPRG/ADDPRG00/GVPRG000/UPDPRG00              *
.*                  Create and link a program referral to the vinah episode*
.*                  referral created from an I12 message (ADDPRG00)        *
.*                  Update the program referral linked to the episode      *
.*                  referral when updating from an I13 message (UPDPRG00)  *
.*        V11.01.08 28/04/2021  Thanh T          TSK 0895165               *
.*                  Recompiled for OPRARDFD changes                        *
.*        V11.01.07 19/04/2021  Davin            TSK 0900672               *
.*                  Added ZXV.101:Triage Date (AZXV0000/PI120000/PI130000) *
.*                  Added ZXV.102:Referral-In Receipt Acknowledgement Date *
.*                  19/04/2021  Davin            TSK 0902602               *
.*                  Changed to ignore ZXV.98 if populated (AZXV1900)       *
.*        V11.01.06 12/04/2021  Davin            TSK 0901390               *
.*                  Added PMI User Defined Fields P1-P5 (ZXP.64 to ZXP.68) *
.*        V11.01.05 31/03/2021  Tracey Nguyen   TSK 0904417                *
.*                  Recompiled for MEHPATFD in WEBCHGUR - added MHPTFAMW   *
.*                  Family/Whanau Involvement                              *
.*        V11.01.04 18/03/2021  J.Tan            TSK 0888639               *
.*                  Changed MBSTOTAL to FORM 3                             *
.*        V11.01.03 23/02/2021  Davin            TSK 0903060               *
.*                  Added AIL.5 to determine referral dept for MOSAIQ      *
.*        V11.01.02 22/02/2021  J.Tan            TSK 0888639               *
.*                  Changed patmmbs counter record to DIM3                 *
.*        V11.01.01 16/02/2021  Davin            TSK 0878747               *
.*                  Added multiple birth functionality for PMI messages    *
.*                  PID.24 / PID.25 (MULBAT00/MLTBIR00/VADD1080/VADD1090)  *
.***************************************************************************
.*        V11.00.27 29/01/2021  Davin            TSK 0901929               *
.*                  Initialise/clear webtitle (OUTIN000/INPIN000)          *
.*        V11.00.26 22/01/2021  Davin            TSK 0898347               *
.*                  Removed hard-coded mapping for PID.8 (VPID6000)        *
.*        V11.00.25 12/01/2021  Davin            TSK 0898615               *
.*                  Allow current date as inactivation date in STF.13      *
.*        V11.00.24 21/12/2020  Davin            TSK 0900581               *
.*                  Added validation of PID.8 against Cat.G code when      *
.*                  "Send gender as stored" (ptcngndr) = 1 (GENAS000)      *
.*        V11.00.23 09/12/2020  Davin            TSK 0890602               *
.*                  PV1.3 mandatory for SIU^S12 (INP) messages (MPV10000)  *
.*                  Clear various fields if sent as "" (SS14I000)          *
.*        V11.00.22 07/12/2020  Davin            TSK 0890602               *
.*                  Added New INP Appointment SIU^S12 (SS12I000/PS12I000)  *
.*                  Added New INP Update      SIU^S14 (SS14I000/PS14I000)  *
.*                  Added New INP Cancel      SIU^S15 (SS15I000/PS15I000)  *
.*        V11.00.21 12/11/2020  Davin            TSK 0890602               *
.*                  Recompiled for WRITBOOK - add slot if required(S12/S13)*
.*                  Don't allow future attendance time in MSH.7 (S14OA000) *
.*                  Check if attendance times already exist (S14OA000)     *
.*                  Blank out database fields if sent as "" (blankstr)     *
.*        V11.00.20 09/11/2020  Davin            TSK 0890602               *
.*                  Added New OUT Update     SIU^S14 (SS14O000/PS14O000)   *
.*                  Update PV1.8(obacomp) and PV1.20(otbbrfgp) for S13     *
.*                  Broadcast from HL7RECVR based on value of ptcngosm     *
.*        V11.00.19 30/10/2020  Davin            TSK 0890602               *
.*                  Validate SCH.22.4 against CAPPRVNO for single hospital *
.*                  Update pmsvx052/pmvxudf1 with NTE.3 for S12/S13/S26    *
.*        V11.00.18 13/10/2020  Davin            TSK 0890602               *
.*                  Added New OUT Reschedule SIU^S13 (SS13O000/PS13O000)   *
.*                  Added New OUT Cancel App SIU^S15 (SS15O000/PS15O000)   *
.*                  Added New OUT DNA    App SIU^S26 (SS26O000/PS26O000)   *
.*        V11.00.17 22/10/2020  J.Tan           TSK 0898866                *
.*                  Recompiled for PATIPERH - on hold invoice              *
.*        V11.00.16 01/10/2020  Davin            TSK 0890602               *
.*                  Added AIS,AIL,AIP segments for SIU messages            *
.*                  Added WRTBOK00/WRITBOOK for SIU messages               *
.*                  Added New OUT Appointment SIU^S12 (SS12O000/PS12O000)  *
.*                  09/09/2020  Peter Vela       TSK 0895969               *
.*                  Recompiled for WEBCHGUR                                *
.*        V11.00.15 15/07/2020  Davin            TSK 0889111               *
.*                  Added ZST.11,12,13 and ZPR.16,17,18 for SMD_ADHA       *
.*        V11.00.14 02/07/2020  Davin            TSK 0893999               *
.*                  Pad key9 with spaces before calling patitmrd in        *
.*                  ACMBNT00 and VITM0000                                  *
.*        V11.00.13 01/07/2020  Davin            TSK 0894011 (VINAH)       *
.*                  Removed mandatory check for ZXV.98                     *
.*        V11.00.12 24/06/2020  Davin            TSK 0892651 (VINAH)       *
.*                  Removed mandatory check for ZXV.99                     *
.*                  23/06/2020  Peter Vela       TSK 0878550               *
.*                  Recompiled for DEATHAUD                                *
.*        V11.00.11 10/06/2020  Peter Vela       TSK 0878550               *
.*                  Recompiled for DEATHAUD                                *
.*        V11.00.10 27/05/2020  Davin            TSK 0888624 (VINAH)       *
.*                  Fixed to only check ZXV.98.3 if ZXV.98.1 is populated  *
.*        V11.00.09 22/05/2020  Davin            TSK 0888624 (VINAH)       *
.*                  Fixed to save multiple health conditions (PRHLC000)    *
.*        V11.00.08 07/05/2020  Davin            TSK 0888624 (VINAH)       *
.*                  Use ZXV.40 to validate problem code (AZXV1940/VZXV0990)*
.*                  Only 1 Episode Health Condition mandatory (AZXV2000)   *
.*        V11.00.07 29/04/2020  Davin            TSK 0888624 (VINAH)       *
.*                  Added ZXV.98: Referral In Reason (AZXV1900)            *
.*                  Added ZXV.99: Episode Health Conditions (AZXV2000)     *
.*        V11.00.06 27/04/2020  Ebon Clements    TSK 0850105               *
.*                  Added procedure calls PMSCURTH - Theatre status        *
.*                  in patient header                                      *
.*        V11.00.05 27/04/2020  Davin            TSK 0887136               *
.*                  Rebound fixes for BETA_TR_F_11.00_240420_0887136.docx  *
.*        V11.00.04 22/04/2020  Davin            TSK 0881876               *
.*                  Added ZXP.63: Verified Address Flag (VZXP6300/PMPXSN19)*
.*        V11.00.03 21/04/2020  Davin            TSK 0879163               *
.*                  Added GENDR000 - validate PID.8 (sex) with Cat.G value *
.*        V11.00.02 15/04/2020  Davin            TSK 0887136               *
.*                  Post PMI details for IP A08 messages (MESSGNUM = 13)   *
.*                  Added GT1 and IN1 as valid segments                    *
.*        V11.00.01 03/03/2020  J.Tan          TSK 0838262                 *
.*                  Added Effective from and to date to MBS Item file      *
.***************************************************************************
.*        V10.15.12 14/02/2020  Davin            TSK 0886572               *
.*                  Added new option (value=3) to PTCNH7DA:                *
.*                  Use Sent Desc/Amt in P03 except when amount = 0        *
.*                  (In which case use webPAS desc/amnt for misc. charges) *
.*        V10.15.11 28/01/2019  J.Tan            TSK 0857392               *
.*                  Added FNAMEP for ABF                                   *
.*        V10.15.10 18/12/2019  Davin            TSK 0865311               *
.*                  Added ZST.10 (HCP National Registration Number)        *
.*        V10.15.09 16/12/2019  Davin            TSK 0882837               *
.*                  Trigger an A31 broadcast when ptcnb31r=1 (ppmi3000)    *
.*        V10.15.08 29/11/2019  J.Tan            TSK 0857392               *
.*                  Recompiled for ABFOTINV - ABF invoices                 *
.*        V10.15.07 21/11/2019  Davin            TSK 0861253               *
.*                  Check telehealth fields for blankstr ("") (PA08O000)   *
.*        V10.15.06 20/11/2019  Davin            TSK 0861253               *
.*                  Replace rather than add telehealth notes on viscmtaf   *
.*                  with the value in ZXV.96 (PTHI0000)                    *
.*        V10.15.05 13/11/2019  Peter Vela       TSK 0879283               *
.*                  Recompiled for PREADMIT                                *
.*        V10.15.04 11/11/2019  Davin            TSK 0861257               *
.*                  Changed comment line length from 100 to 60 (NTE.3.1)   *
.*                  Fixed error check for PV1.19 and UR in PID.3 (SPV11500)*
.*                  Validate message date/time for S0x (MSH.7 @ VMSH8000)  *
.*                  Make sure the requestor code is active (VMSH8000)      *
.*        V10.15.03 31/10/2019  Davin            TSK 0861253               *
.*                  Added ZXV.90-ZXV.97 for telehealth information         *
.*                  Added PA08O000/VA08O000 to write telehealth (outthiaf) *
.*                  Write TH notes to viscmtaf (PTHI0000/WTNT0000/WTLN0000)*
.*        V10.15.02 30/11/2019  Davin            TSK 0861257               *
.*                  Added SRM^S0x messages and NTE notes segment (NTE.3.1) *
.*        V10.15.01 09/10/2019  Thanh T          TSK 0860841               *
.*                  Get MRCNROUN for CALCCODE                              *
.***************************************************************************
.*        V10.14.23 25/09/2019  J.Tan            TSK 0857392               *
.*                  Recompiled for OUT002 - ABF invoice                    *
.*        V10.14.22 20/09/2019  Davin            TSK 0881816               *
.*                  Fixed default post code parameter check (ptcnunpc)     *
.*                  (VPID8800/VZPR1900/VNOK0327)                           *
.*        V10.14.21 16/09/2019  Davin            TSK 0881579               *
.*                  Accept blankstr ("") value in PRA.10 (VZPR5510)        *
.*        V10.14.20 13/09/2019  Davin            TSK 0881579               *
.*                  Accept blankstr ("") value in ZPR.8 (VZPR5505)         *
.*        V10.14.19 03/09/2019  Davin            TSK 0879964               *
.*                  Changed ZXV segment to be optional for A08 messages    *
.*        V10.14.18 08/08/2019  Davin            TSK 0879529               *
.*                  Don't use RF1.6 to determine the webPAS visit number   *
.*                  if RF1.11 is populated in REF^I13/REF^I14 (GVIS0000)   *
.*        V10.14.17 17/07/2019  Ebon Clements    TSK 0877986               *
.*                  Added 20 zero test to PTCNNSSI using EDWARD            *
.*                  12/07/2019  Davin            TSK 0867131               *
.*                  Initialise pmmiinct to zero (loadctyp @ AMIS0600)      *
.*                  Don't validate FT1.26.1 when nzpribil=1 @ VFT11100     *
.*                  Don't allow FT1.12.1 amount less than zero (VFT10800)  *
.*                  Populate pmmicntr with nzspcntr (nzpribil=1 @ AMIS0600)*
.*                  12/07/2019  Richa Phogat     TSK 0864951               *
.*                  Recompiled for WEBCHGUR                                *
.*        V10.14.16 11/07/2019  Davin            TSK 0871079               *
.*                  Added IBCNMHRI to validate MSH.11 (processing ID)      *
.*                  Added SAVMHPID to return MSH.11 (processing ID) in ACK *
.*                  11/07/2019  Davin            TSK 0867131               *
.*                  Don't accept inactive Cat.FI code in FT1.7.3 (GMIS7000)*
.*                  10/07/2019  Richa Phogat     TSK 0864951               *
.*                  Recompiled for WEBCHGUR                                *
.*        V10.14.15 04/07/2019  Davin            TSK 0876966               *
.*                  Don't write ALDOC record to emrhis if doctor is blank  *
.*                  (PA08E141)                                             *
.*        V10.14.14 03/07/2019  Steve Armstrong  TSK 0849316               *
.*                  Mods to also allow dates in the future for Institution *
.*                  Inactivation Date (STF.13) in M02 messages and updated *
.*                  validation of this date vs status (STF.7).             *
.*        V10.14.13 19/06/2019  Davin            TSK 0867131               *
.*                  Mods to P03 for nzprivate misc.charges (nzpribil=1)    *
.*                  (VFT10000/PP030000/AMIS0000/GMIS0000)                  *
.*        V10.14.12 29/05/2019  Steve Armstrong TSK 0869966                *
.*                  Recompiled for changes to ACONTACT.                    *
.*        V10.14.11 24/05/2019  Ebon Clements   TSK 0868837                *
.*                  Recompiled for VINAHDEF - Episode ready for care       *
.*                  22/05/2019  Davin           TSK 0829287                *
.*                  Allow any valid date in ZXV.52 for non-VINAH referrals *
.*                  (AZXV1350).                                            *
.*        V10.14.10 13/05/2019  Steve Armstrong TSK 0869966                *
.*                  Recompiled for changes to VINAHDEF.                    *
.*        V10.14.09 30/04/2019  Steve Armstrong  Task: 0871554             *
.*                  Added check for multi-hospital for BLANKSTR as well.   *
.*        V10.14.08 09/04/2019  Steve Armstrong  Task: 0871554             *
.*                  Added check for multi-hospital for ZAL.13 into         *
.*                  VZAL0000 (same as for VALA0000).                       *
.*        V10.14.07 05/04/2019  Jill Parkinson Task 0871554                *
.*                  Changed ZAL013 validation to only be required for multi*
.*                  hospital systems                                       *
.*        V10.14.06 05/04/2019  Jill Parkinson Task  0872438               *
.*                  Corrected pmewtype pack in WREDW000 to stop I*D        *
.*        V10.14.05 15/03/2019  Steve Armstrong  TSK 0870845               *
.*                  Mods to validation of PRA.6 to load spaces where the   *
.*                  field is null ("").                                    *
.*                  Updated ZPR.7 and ZPR.8 comments to show these fields  *
.*                  as Date/Time instead of just Date.                     *
.*        V10.14.04 01/03/2019  Ebon Clements    TSK 0871097               *
.*                  Recompiled for EDWARD ISP audit writes                 *
.*        V10.14.03 12/02/2019  Davin            TSK 0870006               *
.*                  Mods to receive DG1 segments for EMR(VDGE0000/PDG10000)*
.*        V10.14.02 12/02/2019  Davin            TSK 0870375               *
.*                  Only overwrite First Seen by Doctor Date/Time with     *
.*                  ZXV.65 value if EMVIDRDT is currently blank (PA08E080) *
.*        V10.14.01 30/01/2019  Davin            TSK 0869768               *
.*                  Allow any date/time for ED Ready to Discharge (ZXV.82) *
.*                  17/01/2019  Ebon Clements    Task 0868909              *
.*                  Added EDWARD ISP audit writes to M02 messages          *
.*                  20/12/2018  Steve Armstrong  Task 0868215              *
.*                  Mods to default missing ED data from Treating Doctor   *
.*                  Code/Date/Time to First Seen By Doctor Code/Date/Time  *
.*                  and vice versa.                                        *
.*                  18/12/2018  Steve Armstrong  Task 0868215              *
.*                  Mods to validate ZXV.66 (Treating Nurse Code) against  *
.*                  pmshcpaf (where HCP Status = 14 or 15), instead of     *
.*                  validating against oprnuraf.                           *
.*                  04/12/2018  Steve Armstrong  TSK 0867489               *
.*                  - Updated error messages.                              *
.*                  - Mods to fix check on STF00701 to use "I" instead of  *
.*                    "1", when checking for an inactive HCP as part of    *
.*                    the validation for ZPR.13.                           *
.*                  - Mods to use SAVOVRCD to determine if using item      *
.*                    amounts or theatre fee amounts for patient and       *
.*                    rebate portion amounts.                              *
.*                  - Mods to use PTCNUNPC as well as PTCNADDR to          *
.*                    determine if using default post code.                *
.*                  - Mods to change Overnight Indicator (ZSC.14), Fast    *
.*                    Post Recovery (ZSC.42), Admit Post Procedure         *
.*                    (ZSC.43), No Recovery (ZSC.44), Case Abandoned       *
.*                    (ZSC.45), Site Intact 1 (ZSC.51) and Site Intact 2   *
.*                    (ZSC.52) to be Y/N fields, but still also accept     *
.*                    0 or 1 for backward compatibility.                   *
.*                  - Fixed validation of ZSC.25 to use date and time      *
.*                    components when checking against admission and       *
.*                    discharge date, instead of using OPDADATE.           *
.***************************************************************************
.*        V10.13.10 14/11/2018  Steve Armstrong  TSK 0861628               *
.*                  Mods to handle Patient Identifier types SEN, CMO and   *
.*                  NDS for PID.3.                                         *
.*        V10.13.09 13/11/2018  Davin            TSK 0854372,0862686       *
.*                  Fix sent amount of zero for misc.charges (VFT10850)    *
.*        V10.13.08 12/11/2018  Davin            TSK 0854372               *
.*                  Allow update of Anaesthetic Type (PMVXUD15) with ZXV.88*
.*                  value when deleting mbs items through P03 (DCMBNT00).  *
.*                  Added check for inactive items (VITM0000).             *
.*                  Moved FT1.4 validation from VMES3000 to VFT14000.      *
.*        V10.13.07 24/10/2018  Steve Armstrong  Task 0863512              *
.*                  Recompiled for changes to HL7CISVR & HL7CLRVR.         *
.*                  25/10/2018  J.Tan            TSK 0854372               *
.*                  Recompiled for AUTOATYP for NOT 'Using Theatre'        *
.*                  23/10/2018  Davin            TSK 0854372               *
.*                  Mods to P03 message if not using theatre (CTHETR=0):   *
.*                  - Receive theatre times in new ZFT segment             *
.*                  - Receive Anaesthetic Type in new field ZXV.88         *
.*                  - Use P3NT0000 instead of PP030000 to add items        *
.*        V10.13.06 29/08/2018 J.Tan   TSK 0859742                         *
.*                  Mod initialising Eclipse claim fields (pmsmtiaf)       *
.*                  29/08/2018  Steve Armstrong  Task 0858058              *
.*                  Mods to check if Consumption Type (LOADCTYP) is        *
.*                  populated and if not, to default to "0" (Used).        *
.*                  23/08/2018  Steve Armstrong  Task 0845563              *
.*                  Updated WAUD0000 to use CLALLAUD.                      *
.*                  Recompiled for changes to ACONTACT.                    *
.*        V10.13.05 13/08/2018  Peter Vela       Task 0845218              *
.*                  Recompiled for DEATHAUD                                *
.*        V10.13.04 14/08/2018  Davin            TSK 0857732               *
.*                  Added functionality to receive PID.26 (if ptcnrp26=1)  *
.*        V10.13.03 09/08/2018  Davin            TSK 0849641               *
.*                  Added functionality to allow stepdowns for items in    *
.*                  P03 messages (quantity based on PTCNQP03)              *
.*        V10.13.02 02/08/2018  Steve Armstrong  TSK 0851661               *
.*                  Mods to handle additional theatre usage information    *
.*                  (ZSC.15 - ZSC.60) for SIU^S14 messages.                *
.*                  Also updated handling of ZSC.6 to use OPCNZSC6.        *
.*                  11/07/2018  Peter Vela       TSK 0845218               *
.*                  Recompiled for DEATHAUD                                *
.*        V10.13.01 31/07/2018  Thanh T          TSK 0845563               *
.*                  Recompiled for ALLAUDFD                                *
.***************************************************************************
.*        V10.12.16 05/07/2018  Steve Armstrong  TSK 0857366               *
.*                  Fixed postcode/suburb validations to only apply to     *
.*                  Australian sites and not NZ sites (based on PTCNHDPS). *
.*        V10.12.15 27/06/2018  Steve Armstrong  TSK 0856874               *
.*                  If 'Using Quick Reg in A31' (PTCNQA31 = 1) then allow  *
.*                  quick registration for A31 messages (QUICKREG=1).      *
.*                  Also changed PID.10 to allow a value of "8" for NSW    *
.*                  and SA (same as VIC).                                  *
.*        V10.12.14 25/06/2018  Ebon Clements    TSK 0845295               *
.*                  Recompiled for WEBCHGUR - eReferrals                   *
.*        V10.12.13 05/06/2018  Davin            TSK 0851377               *
.*                  Added extra ZXV fields 59-87 to receive EMR A08        *
.*                  messages (VA08E000/PA08E000) - based on PTCNA08E.      *
.*        V10.12.12 25/05/2018  Thanh T.         TSK 0856102               *
.*                  Added PMSEHB00 for pmsehbaf in WEBCHGUR                *
.*                  25/05/2018  Davin            TSK 0848311               *
.*                  Added quickreg validation to additional PMI fields     *
.*        V10.12.11 16/05/2018  Davin            TSK 0848311               *
.*                  If 'Using Quick Reg in A28' (PTCNQA28 = 1) then allow  *
.*                  quick registration for A28 messages (QUICKREG=1)       *
.*        V10.12.10 08/03/2018  Steve Armstrong  TSK 0850854               *
.*                  - Added code to handle an ADT^A08 (update admission)   *
.*                    message for limited I/P visit details (ZXV.1 -       *
.*                    Visitor's Allowed, ZXV,58 - Phone Calls Allowed &    *
.*                    PV2.9 - Expected Discharge Date/Time).               *
.*                  - Added code to handle an ADT^A21 (On-Leave) message.  *
.*                  - Added code to handle an ADT^A22 (Return from Leave)  *
.*                    message.                                             *
.*        V10.12.09 02/05/2018  Davin            TSK 0856391               *
.*                  Removed check for pvitype=3 for DFT^P03 (VPV13000)     *
.*        V10.12.08 06/04/2018  Davin            TSK 0844685               *
.*                  Added external PMI for death notification (VADD0550).  *
.*                  Added ZXP.59 for Est./Unknown Date of Death (VADD0540).*
.*                  Added 'UP' as 6th id type in PID.3 to receive UPI from *
.*                  NSLHD (VPID0000/PPMI0000/ADDUAI00/WREDW000).           *
.*                  Recompiled for UPI mods to WEBCHGUR.                   *
.*        V10.12.07 14/03/2018  Steve Armstrong  TSK 0854210               *
.*                  Fixed loading of ALREUDT1 for REF^I13 message.         *
.*        V10.12.06 05/03/2018  Steve Armstrong  TSK 0848310               *
.*                  Included Next of Kin (NK1.32 - VNOK0000 only) in       *
.*                  "Unknown Postcode" processing for A28 and A31 messages.*
.*                  Included Practitioner (ZPR.5) in "Unknown Postcode"    *
.*                  processing for M02 messages.                           *
.*        V10.12.05 28/02/2018  Steve Armstrong  TSK 0840185               *
.*                  Mods to fix translation of ZPR.13 and ZPR.14 values    *
.*                  when loading into PMHGFXDS and PMHGELDS.               *
.*        V10.12.04 28/02/2018  Steve Armstrong  TSK 0848310               *
.*                  Mods for JMPH to allow use of a default webPAS         *
.*                  "unknown" postcode when registering(A28) or            *
.*                  updating(A31) a PMI record where the message           *
.*                  address/postcode is not a valid webPAS postcode record *
.*                  (in ibapostf).                                         *
.*        V10.12.03 27/02/2018  Steve Armstrong  TSK 0840185               *
.*                  Fixed Update Flag (ZPR.12) to allow a new practice to  *
.*                  be added regardless of the auto update setting         *
.*                  (pmshcgaf.pmhgupfl).                                   *
.*        V10.12.02 27/02/2018  Steve Armstrong  TSK 0851873               *
.*                  Mods to delete any existing pmsccdaf records for a     *
.*                  given concession card type before writing a new record.*
.*                  This replaces the code that previously found the first *
.*                  matching record for the concession card type and       *
.*                  simply updated it.  There should only ever be a single *
.*                  pmsccdaf record for any given concession card type.    *
.*                  (See PCRD0000).                                        *
.*        V10.12.01 23/02/2018  Davin            TSK 0852301               *
.*                  Populate PCEHR flag (ZXP.58/pmpxsn10) for A28 and A31  *
.***************************************************************************
.*        V10.11.30 05/12/2017  Steve Armstrong  TSK 0840185               *
.*                  Mods to add four new fields to the ZPR segment for M02 *
.*                  messages:                                              *
.*                    ZPR.12 - Update Flag                                 *
.*                    ZPR.13 - Faxed Discharge Summary Flag                *
.*                    ZPR.14 - Electronic Discharge Summary Flag           *
.*                    ZPR.15 - Practice Link Active Flag                   *
.*        V10.11.29 18/12/2017  Ebon Clements    TSK 0846952               *
.*                  Recompiled for VINAHDEF Program referral triage status *
.*        V10.11.28 14/12/2017  Steve Armstrong  TSK 0847828               *
.*                  Mods to check new parameter (PTCNASNM) to see if       *
.*                  a mismatch of surnames is allowed in an inbound A34    *
.*                  (Merge) message.                                       *
.*        V10.11.27 04/12/2017  Steve Armstrong  TSK 0849640               *
.*                  Mods to change LOADCTYP as follows, before writing to  *
.*                  webPAS:                                                *
.*                    "0" is converted to "1" (Not Used)                   *
.*                    "1" is converted to "0" (Used)                       *
.*        V10.11.26 04/12/2017  Steve Armstrong  TSK 0849332               *
.*                  Mods to load spaces into the associated webPAS         *
.*                  database fields for clinic phone numbers (ZPR.6),      *
.*                  for phone (PH), fax (FX) and email (INTERNET)          *
.*                  communication types (Component 3 or 4), where the      *
.*                  value of the field (Component 1) is null (..|""|..).   *
.*        V10.11.25 04/12/2017  Steve Armstrong  TSK 0849398               *
.*                  Mods to not allow negative quantity in FT1.10.         *
.*        V10.11.24 30/11/2017  Steve Armstrong  TSK 0849184               *
.*                  Mods to remove PMBSFLAG check in PP030000 so that the  *
.*                  Provisional CMBS item doesn't get written to oprpmbaf. *
.*        V10.11.23 24/11/2017  Steve Armstrong  TSK 0847809               *
.*                  Mods to pass additional parameters to hl7recvr.us1     *
.*                  (including Message Type, Environment and U/R number).  *
.*        V10.11.22 22/11/2017  Davin            TSK 0846231               *
.*                  Mods to enable cmbs item cancel(type MD) (DCMB0000)    *
.*                  Write to Cancelled Items Table if no error is being    *
.*                  sent for failed P03s (WCIT0000)                        *
.*                  23/11/2017 Ania P            TSK 0261630               *
.*                  Moved TFILNAME to CFNAMEDP in INIT0000                 *
.*        V10.11.21 08/11/2017  Steve Armstrong  TSK 0848054               *
.*                  Fixed error messages for postcode in ZPR.5 to show     *
.*                  "Practice" instead of "Patient".                       *
.*        V10.11.20 30/10/2017  Steve Armstrong  TSK 0848054               *
.*                  Fixed error message in VALC0000 to show PID.11 or      *
.*                  NK1.32, instead of just PID.11, where Patient Address  *
.*                  Country not valid.                                     *
.*        V10.11.19 26/10/2017  Steve Armstrong  TSK 0847294               *
.*                  Removed default setting of quantity to "1" for CMBS    *
.*                  items (USCHP000) and changed to use temp file field    *
.*                  OPPMSERV.                                              *
.*        V10.11.18 17/10/2017  Steve Armstrong  TSK 0845757               *
.*                  Fixed to uppercase Surname (PID00501), First Given     *
.*                  Name (PID00502) and Second Given Name (PID00503).      *
.*        V10.11.17 16/10/2017  Thanh T.         TSK 0846191               *
.*                  Fixed the incorrect data being written to              *
.*                  opradtaf.opadchan                                      *  
.*        V10.11.16 11/10/2017  Steve Armstrong  TSK 0846002               *
.*                  Fixed initialisation of CHRGPMBS to "1".               *
.*        V10.11.15 09/10/2017  Davin            TSK 0846353               *
.*                  Initialize opdea/opard/opsrg fields to Z70 (SS140000)  *
.*        V10.11.14 09/10/2017  Steve Armstrong  TSK 0845800               *
.*                  Added clearing of PASSCODE in CLER0000.                *
.*        V10.11.13 09/10/2017  Davin            TSK 0846299               *
.*                  Write theatre unique id to pmsmti for misc (AMIS0000)  *
.*        V10.11.12 04/10/2017  Davin            TSK 0846201               *
.*                  Check if fields are populated before writing (SS140000)*
.*        V10.11.11 28/09/2017  Steve Armstrong  TSK 0846007               *
.*                  Mods for validation of DOB (PID.7) to allow a century  *
.*                  value of 18 or higher.                                 *
.*        V10.11.10 25/09/2017  Davin            TSK 0837479               *
.*                  Set audit type to 'S14 message received' (PS140000)    *
.*        V10.11.09 25/09/2017  Davin            TSK 0837479               *
.*                  Added check on oprsrg record before writing (UPDDAY00) *
.*        V10.11.08 21/09/2017  Steve Armstrong  TSK 0835351               *
.*                  Mods for Delacy interface to allow for cancellation    *
.*                  status update in REF^I13 messages (as per the current  *
.*                  functionality for rejection status).                   *
.*        V10.11.07 22/09/2017  Davin            TSK 0837479               *
.*                  Write to oprsrg and oprard if necessary (UPDDAY00)     *
.*        V10.11.06 21/09/2017 Thanh T.          TSK 0821710               *
.*                  Recompiled WEBCHGUR                                    *
.*        V10.11.05 18/09/2017 Thanh T.          TSK 0821710               *
.*                  Recompiled WEBCHGUR                                    *
.*        V10.11.04 05/09/2017  Davin            TSK 0837479               *
.*                  Added PS140000 for S14 message functionality           *
.*                  02/06/2017  Steve Armstrong  TSK 0837479               *
.*                  hTRAK Interface changes (for Jessie Mac)               *
.*                  - Added handling of CMBS items for P03 message.        *
.*                  - Mods to P03 to handle multiple FT1 segments.         *
.*                  - Mods to P03 to handle new "MB" Transaction Type      *
.*                    (FT1.6) for CMBS Items.                              *
.*                  31/08/2017  J.Tan            TSK 0837479               *
.*                  Added PMMICTYP - Consumption Type                      *
.*        V10.11.03 09/08/2017  Tracey Nguyen    TSK 0299206               *
.*                  Recompiled for PATDKIPR/PMSHKIPR/PMSPKIPR              *
.*        V10.11.02 04/08/2017  Ebon Clements    TSK 0843265               *
.*                  Recompiled for VINAHDEF Program referral triage status *
.*        V10.11.01 21/07/2017  Ebon Clements    TSK                       *
.*                  Recompiled for VINAHDEF Program referral triage status *
.***************************************************************************
.*        V10.10.10 28/06/2017  Steve Armstrong  TSK 0841110               *
.*                  Mods to only make Priority mandatory for VINAH         *
.*                  messages if Triage Status is accepted.                 *
.*                  Mods to only make Triage Status mandatory for VINAH    *
.*                  REF^I12 messages and not REF^I14 messages.             *
.*        V10.10.09 23/05/2017  Ebon Clements    TSK 0828866               *
.*                  Recompiled for VINAHDEF - Date referral accepted       *
.*        V10.10.08 22/05/2017  Ebon Clements    TSK 0836853               *
.*                  Recompiled for ACONTACT - VINAH defaults               *
.*        V10.10.07 02/05/2017  Steve Armstrong  TSK 0834336               *
.*                  Changed ZAL01201 from DIM 10 to DIM80 to handle Long   *
.*                  Login Name.                                            *
.*        V10.10.06 19/04/2017  Steve Armstrong  TSK 0834336               *
.*                  Mods to use PTCNH7LN to determine whether to use       *
.*                  Security User ID or Security Login Name for ZAL.12.    *
.*                  18/04/2017  Steve Armstrong  TSK 0833052               *
.*                  Mods to handle triage status (ZXV.56) for A/H          *
.*                  messages.                                              *
.*        V10.10.05 13/04/2017  Steve Armstrong  TSK 0818645               *
.*                  Mods to check alert end date (PTALEDAT) for a future   *
.*                  date.                                                  *
.*        V10.10.04 12/04/2017  Peter Vela       TSK 0836016               *
.*                  Recompiled for WEBCHGUR - Always keep bad debt in      *
.*                  FIXMAS                                                 *
.*        V10.10.03 21/03/2017  Steve Armstrong  TSK 0832066               *
.*                  Mods to only use Concession Card file for DVA data     *
.*                  instead of PREPAT and PMPXDVAC.                        *
.*        V10.10.02 06/03/2017  Davin            TSK 0833794               *
.*                  Allow unknown date of death (ptmaukdd @ VADD0560)      *
.*        V10.10.01 03/03/2017  Davin            TSK 0830797               *
.*                  Removed RJUSTIFY on medicare ref. number (ptmxmccd)    *
.***************************************************************************
.*        V10.09.01 27/01/2017  Steve Armstrong  TSK 0830055               *
.*                  Mods to match for eReferral type records only in       *
.*                  GVIS0000, CALT0000 & AVISA000.                         *
.*                  Mods to AVISA000 to set IBAVTYPE to " 0" (legacy).     *
.***************************************************************************
.*        V10.08.19 04/11/2016  Steve Armstrong  TSK 0828403               *
.*                  Changed SEGCOUNT to be FORM 3 instead of FORM 2 so     *
.*                  that more than 99 repeat segments can be handled.      *
.*        V10.08.18 18/10/2016  Steve Armstrong  TSK 0823079               *
.*                  Fixed check of hospital code in MATA0000 to use KEY3H  *
.*                  instead of KEY3 so that the alert code doesn't get     *
.*                  overwritten.                                           *
.*        V10.08.17 14/10/2016  Ebon Clements    TSK 0817582               *
.*                  Recompiled for VINAHDEF - Notified of first appointment*
.*                  default                                                *
.*        V10.08.16 07/09/2016  Steve Armstrong  TSK 0825771               *
.*                  For ZXV.49 for Referral messages, modified the         *
.*                  validation for a linked HCP/Practice to ignore the     *
.*                  validation if the Practice code is populated and the   *
.*                  HCP code is null.  Previously it was only checking for *
.*                  a blank HCP code and if the RP PRD segment was missing,*
.*                  then the HCP code will be null, not blank.             *
.*        V10.08.15 30/08/2016  Davin            TSK 0824760               *
.*                  Changed SAVKEY28 to BOKKEY28 to avoid incorrect read   *
.*                  of outbokaf after SLTCOUNT (PA040000)                  *
.*        V10.08.14 18/08/2016  Ebon Clements    TSK 0260691               *
.*                  Recompiled for WEBCHGUR - A/H equipment loans          *
.*                  08/08/2016  Davin            TSK 0321234               *
.*                  Added Chronic Condition Alert (PMPXSN11/SAVESN11)      *
.*                  29/07/2016  Don Nguyen       TSK 0809271               *
.*                  Recompiled for WEBCHGUR - Modified FXBKRES1 to call    *
.*                  UPESIS00                                               *
.*                  19/07/2016  Steve Armstrong  TSK 0304295/0314358       *
.*                  Mods to check for line break (..\.br\..) HL7 escape    *
.*                  sequences in multi-line comment fields                 *
.*                  (ZXV.48 - WBIN0000 and ZAL.14 - PCOM0000) and process  *
.*                  accordingly.                                           *
.*                  Also changed the CONV0000 routine for checking for     *
.*                  HL7 escape sequences, so that it works more            *
.*                  efficiently.                                           *
.*        V10.08.13 15/07/2016  Steve Armstrong  TSK 0813083               *
.*                  Fixed issue with overwriting existing Booking Comments *
.*                  from eReferrals.                                       *
.*        V10.08.12 16/06/2016  Davin            CAR 0317949               *
.*                  Commented out validation of Linked Doctor Code (ZST.2) *
.*                  17/06/2016  Peter Vela       TSK 0820868               *
.*                  Recompiled for MRGURPRI                                *
.*        V10.08.11 03/06/2016  Jill Parkinson   TSK 0813713               *
.*                  Mods to AZXV0500 - corrected direct read of outcliaf   *
.*                  for cases where referral is on the clinic effective date*
.*        V10.08.10 17/05/2016  Steve Armstrong  TSK 0813012               *
.*                  Mods to ZXV.52 to make it not mandatory for REF^I12 &  *
.*                  REF^I13 messages which have a status of Rejected.      *
.*        V10.08.09 16/05/2016  Steve Armstrong  TSK 0814486               *
.*                  Added resetting of SAVAPPLI & SAVFACIL in CMSH0000.    *
.*        V10.08.08 16/05/2016  Steve Armstrong  TSK 0813012               *
.*                  Fixed REF^I13 to populate the related SACS Rejected    *
.*                  fields in allrefaf where the referral is rejected.     *
.*                  Also fixed code to allow REF^I12 messages to have a    *
.*                  status of rejected.                                    *
.*        V10.08.07 13/05/2016  Don Nguyen       TSK 0319664               *
.*                  Recompiled for WEBCHGUR - added FIXOBSNT               *
.*        V10.08.06 29/04/2016  Steve Armstrong  TSK 0818207               *
.*                  Added error check after CALLs to VALF0000              *
.*        V10.08.05 28/04/2016  Don Nguyen       TSK 0316489               *
.*                  Recompiled for PATATRFD/IO                             *
.*        V10.08.04 18/04/2016  Peter Vela       TSK 0294177               *
.*                  Recompiled for MRGURPRI                                *
.*                  12/04/2016  Steve Armstrong  TSK 0814510               *
.*                  Mods to check parameter to see if message is turned    *
.*                  on and can be processed.                               *
.*        V10.08.03 01/04/2016  Steve Armstrong  TSK 0324703               *
.*                  Recompiled for changes to PATURCFD & WEBCHGUR          *
.*        V10.08.02 24/03/2016  Davin            CAR 0317949               *
.*                  Added COMMIT @ PROC0500.                               *
.*                  Enhancement for M02 message.                           *
.*        V10.08.01 23/03/2016  Steve Armstrong  CAR 0809144               *
.*                  Fixed CALT0000 to use PV100501 instead of PADMAVIS     *
.*                  as the latter only gets set in SA050000 after CALT0000 *
.*                  is called.                                             *
.***************************************************************************
.*        V10.07.05 23/02/2016  Steve Armstrong  CAR 0809146               *
.*                  Mods to accept a DG1 segment for A05 messages (pre-    *
.*                  admission) to populate free text diagnosis into ADIAG. *
.*                  19/02/2016  Steve Armstrong  CAR 0809109               *
.*                  Mods to handle non-mandatory title in PID.5 for        *
.*                  A28/A31 message                                        *
.*                  19/02/2016  Steve Armstrong  CAR 0809144               *
.*                  Mods to handle a duplicate alternate visit id for a    *
.*                  pre-admission message, but only where the existing     *
.*                  pre-admission is cancelled                             *
.*        V10.07.04 05/02/2016  Steve Armstrong  CAR 0813285               *
.*                  Mods to cater for Interpreter Required values - PID.15 *
.*        V10.07.03 04/02/2016  Peter Vela       CAR 0809659               *
.*                  Recompiled for WEBCHGUR                                *
.*        V10.07.02 05/11/2015  Steve Armstrong  CAR 303363                *
.*                  Recompiled for changes to RESHEAFD                     *
.*        V10.07.01 26/10/2015  Steve Armstrong  CAR 323085                *
.*                  Removed declaration for LOWUPP (now defined in IBACOMM)*
.***************************************************************************
.*        V10.06.08 30/09/2015  Ania P           CAR 321333                *
.*                  Recompiled for changes to WEBCHGUR                     *
.*        V10.06.07 17/08/2015  Steve Armstrong  CAR 316109                *
.*                  Further mods to ignore ZXV.15 (Source of Referral) as  *
.*                  this field is not required for VINAH Referrals.        *
.*                  Also moved extra validation for RF1.1 (status) from    *
.*                  VRF10000 into XRF10000.                                *
.*                  Also added code to handle a change in priority for a   *
.*                  VINAH Episode Referral.                                *
.*        V10.06.06 20/07/2015  Steve Armstrong  CAR 316109                *
.*                  Mods to referral messages for VINAH                    *
.*        V10.06.05 20/07/2015  Davin            CAR 314914                *
.*                  Further mods for new A05 preadmission message:         *
.*                  - Added PV2 to mandatory segments                      *
.*                  - Removed ZXP/ZXV from mandatory segments              *
.*                  - Removed redundant validation code for PV1 fields     *
.*        V10.06.04 08/07/2015  Davin            CAR 314914                *
.*                  New preadmission message A05 (ZXP.58 for PCEHR Flag)   *
.*        V10.06.03 08/07/2015  Steve Armstrong  CAR 319074                *
.*                  Fixed null concession card number issue                *
.*        V10.06.02 07/07/2015  Davin            CAR 318043                *
.*                  Added option to allow zero amount in P03 (ptcnh7da=2)  *
.*                  03/07/2015  J.Tan            CAR 316441                *
.*                  Recompiled for changes to WEBCHGUR - pmsdauaf file     *
.*                  10/06/2015  Steve Armstrong  CAR 313856                *
.*                  Recompiled for changes to WEBCHGUR                     *
.*                  15/04/2015  Peter Vela       CAR 312723                *
.*                  Recompiled for DEATHAUD                                *
.*        V10.06.01 18/03/2015  Steve Armstrong  CAR 314321                *
.*                  Fixed RESET of DIM20 for NoK names in VNK10000, where  *
.*                  there is no first or second given names                *
.***************************************************************************
.*        V10.05.17 04/03/2015  Davin            CAR 313811                *
.*                  Allow I and U as values for STF.5 (vstf3000)           *
.*                  Correct PostcodeSuburb error to refer to ZPR.5 not 11  *
.*        V10.05.16 17/02/2015  Steve Armstrong  CAR 312284                *
.*                  Mods to add IO TRAP around ACCEPT on socket.           *
.*        V10.05.15 16/02/2015  Davin            CAR 312918                *
.*                  Reset maximum prov.numbers to 5 (savcount @ vpra2100)  *
.*                  16/02/2015  Davin            CAR 312917                *
.*                  Fixed clear of practice name (zpr00301 @ czpr0000)     *
.*        V10.05.14 16/02/2015  Steve Armstrong  CAR 312931                *
.*                  Added call to KILL0000 into MAIN0000 after PROC0000    *
.*        V10.05.13 30/01/2015  Davin            CAR 312020                *
.*                  Don't validate conc.cards if equal to "" (ppmi0000)    *
.*        V10.05.12 28/01/2015  Davin            CAR 311429                *
.*                  Allow 6 char medicare expiry date (ZXP.2 @ vdtm0000)   *
.*        V10.05.11 22/12/2014  Davin            CAR 309821                *
.*                  Skip validation of STF00305 for update (vstf2000)      *
.*                  Accept M02 update times equal to current webPAS data   *
.*                  11/12/2014  Davin            CAR 309716                *
.*                  Use OTBBASTM to calc. direct units in A03 (mvalen00)   *
.*        V10.05.10 11/12/2014  Davin            CAR 310148                *
.*                  Make sure allpeid fields are blank if zxv fields not   *
.*                  populated in ref^I12 message (peid5000)                *
.*        V10.05.09 08/12/2014  Ebon Clements    CAR 305618                *
.*                  Added VINAHDEF - Default VINAH field functionality     *
.*        V10.05.08 24/11/2014  Steve Armstrong  CAR 309042                *
.*                  Mods to BRANCH on OVRCD when RDPMHCL1 fails in VPRA0000*
.*        V10.05.07 05/11/2014  Steve Armstrong  CAR 306617                *
.*                  Recompiled for changes to HL7CISVR, HL7CLRVR and       *
.*                  HL7COMN                                                *
.*        V10.05.06 16/10/2014  Ebon Clements    CAR 291413                *
.*                  Write record for polling server for AH referral expiry *
.*                  date recalculation on OP attendance - POLX0000         *
.*                  14/10/2014  Peter Vela       CAR 301518                *
.*                  Recompiled for MRGURWEB                                *
.*        V10.05.05 03/09/2014  Steve Armstrong  CAR 305839                *
.*                  Mods to ADT^A03 message handling:                      *
.*                      - Added code to handle additional PR1 and ROL      *
.*                        fields                                           *
.*                      - Populated ALENLINK using PV1.5 (O/P booking no.) *
.*                      - Added validation to ensure O/P booking has not   *
.*                        already been departed                            *
.*                  28/08/2014  Steve Armstrong  CAR 305555                *
.*                  Fixed validation error handling for PV1.20 for ADT^A03 *
.*                  messages.                                              *
.*        V10.05.04 27/08/2014  Steve Armstrong  CAR 305529                *
.*                  Fixed clearing of ZXV.50 and ZXV.51 components in      *
.*                  CZXV0000.                                              *
.*        V10.05.03 13/08/2014  Steve Armstrong  CAR 304138                *
.*                  Removed validation of Date Referral Received (ZXV.36)  *
.*                  against Referral Date.                                 *
.*        V10.05.02 04/08/2014  Peter Vela       CAR 302164                *
.*                  Added PMMIRBRS - Rebate Reason CAT Rr                  *
.*        V10.05.01 15/07/2014  Davin            CAR 303645                *
.*                  Fixed to make PV1.10 optional for A04 (vpv11027)       *
.***************************************************************************
.*        V10.04.18 05/06/2014  Steve Armstrong  CAR 299293                *
.*                  Mods to write records to patmrgaf, watesmaf and        *
.*                  prspmiaf for ADT-A34 (merge) messages, using MERGECOD  *
.*                  which is based on code from PATWEB83 and which is now  *
.*                  used by both these programs.                           *
.*                  Also recompiled for changes to WEBCHGUR & IBACOMN.     *
.*        V10.04.17 26/05/2014  Davin            CAR 301555                *
.*                  Removed close of file alleidaf in peid0000 to stop I*C *
.*        V10.04.16 20/05/2014  Davin            CAR 292355                *
.*                  Modified A03 O/P Discharge message to receive contact  *
.*                  information (pa030000/acontact/aconvars)               *
.*        V10.04.15 28/04/2014  Steve Armstrong   CAR 261630               *
.*                  Mods for non-port based tempfile use.                  *
.*        V10.04.14 05/05/2014  Steve Armstrong  CAR 299103                *
.*                  Fixed population of ALRERHCT & PMVXRH1C for REF        *
.*                  messages.                                              *
.*        V10.04.13 24/03/2014  Steve Armstrong  CAR 291310                *
.*                  Mods to receive and process an MFN^M02 message         *
.*        V10.04.12 12/03/2014  Davin            CAR 297562                *
.*                  Added ZXV.49 (Referring Practice - alrerhcr)           *
.*        V10.04.11 21/02/2014  Steve Armstrong  CAR 297531                *
.*                  Mods to accept inbound patient gender value O (Unknown)*
.*                  when webPAS value is I (Indeterminate) or R (Intersex).*
.*        V10.04.10 17/02/2014  Steve Armstrong  CAR 292355                *
.*                  Mods to reread the booking record (outbokaf) after     *
.*                  calling SLTCOUNT, to restore the booking details.      *
.*        V10.04.09 13/02/2014  Steve Armstrong  CAR 292355                *
.*                  Mods to allow a future booking time (PV2.8) on the     *
.*                  same day for an A04 message (O/P attendance), as the   *
.*                  patient may arrive and be processed earlier than the   *
.*                  booking.                                               *
.*        V10.04.08 11/02/2014  Steve Armstrong  CAR 292355                *
.*                  Mods to only validate check-in date (PV1.44) against   *
.*                  booking date (PV2.8).                                  *
.*        V10.04.07 06/02/2014  Steve Armstrong  CAR 295312                *
.*                  Removed TRAP on alleidaf OPEN and moved the OPEN into  *
.*                  INIT0000.                                              *
.*        V10.04.06 05/02/2014  Davin            CAR 296558                *
.*                  Mods to call deathpol for deceased patients (ppmi2000) *
.*        V10.04.05 28/01/2014  Davin            CAR 295948                *
.*                  Always populate msh.5 & msh.6 in ack from the incoming *
.*                  msh.3 & msh.4 (rmsh0000/savappli/savfacil)             *
.*        V10.04.04 17/01/2014  J.Tan        CAR 295008                    *
.*                  Mods to set PMMIDTCR,PMMITMCR,PMMIIDCR                 *
.*        V10.04.03 20/01/2014  J.Tan        CAR 249828                    *
.*                  Added PMMIPMBS - Patient MBS Team and Counter          *
.*                  20/01/2014  Davin            CAR 295986                *
.*                  Open outhedaf prior to deceasing patient (ppmi1000)    *
.*        V10.04.02 13/01/2014  Davin            CAR 295865                *
.*                  Stop validating PRD.7 if component 1 is null (vprd1000)*
.*        V10.04.01 02/12/2013  Steve Armstrong  CAR 292355                *
.*                  Mods to handle A04 O/P messages to populate check-in   *
.*                  date/time (attendance) and A03 O/P messages to         *
.*                  populate discharge date/time.                          *
.***************************************************************************
.*        V10.03.45 30/10/2013  Steve Armstrong  CAR 286923                *
.*                  Fixed loading of rejection/cancellation codes in       *
.*                  PI140000.                                              *
.*        V10.03.44 14/10/2013  Ania P           CAR 278232                *
.*                  Recompiled for changes to deceasing patient            *
.*        V10.03.43 07/10/2013  Steve Armstrong  CAR 286923                *
.*                  Mods to cater for changes to IBAALVFD where Referral   *
.*                  messages write to ibaalvaf with a record type of "1"   *
.*                  (eReferral) to distinguish these records from Legacy   *
.*                  records.                                               *
.*                  Also mods to accept the following new data fields:     *
.*                      ZXV.32 (Interpreter Required)                      *
.*                      ZXV.44 (Service)                                   *
.*                      ZXV.45 (Referred by Other)                         *
.*                      ZXV.46 (Referrer Contact)                          *
.*                      ZXV.47 (Reason for canc/rej/inactive/closure)      *
.*                      ZXV.48 (Booking instructions)                      *
.*        V10.03.42 04/10/2013  Steve Armstrong  CAR 279184                *
.*                  Fixed code in reset routine, which is checking for     *
.*                  double quotes on name and address fields (PID.5,       *
.*                  PID.11, NK1.4 & NK1.32), so that if the field is a     *
.*                  blank string (..|""|..), it remains unchanged.         *
.*        V10.03.41 09/09/2013  Steve Armstrong  CAR 279184                *
.*                  Mods to ignore RF1.11 if not populated, or populated   *
.*                  with null, for a REF^I13 or REF^I14 message.           *
.*                  Removed mandatory population check on PRD.1.2.         *
.*                  Mods to use MSH.3.1, where populated, to load into     *
.*                  ALRECUID & ALREUUID, otherwise default back to         *
.*                  use "HL7RECVR  ".                                      *
.*        V10.03.40 30/07/2013  Steve Armstrong  CAR 286689                *
.*                  Mods to convert hexidecimal tab (\X09\) to a space.    *
.*                  29/07/2013  Steve Armstrong  CAR 282976                *
.*                  Mods to replace double quotes in patient address with  *
.*                  single quotes (as per front-end functionality).        *
.*                  Mods to replace double quotes in patient names with    *
.*                  single quotes (as per front-end functionality).        *
.*        V10.03.39 26/07/2013  Steve Armstrong  CAR 287787                *
.*                  Recompiled for changes to DGCLICUA.                    *
.*        V10.03.38 09/07/2013 Sandra Barcham    CAR 288188                *
.*                  Recompiled for changes to WEBCHGUR                     *
.*        V10.03.37 28/06/2013  Patrick Adair    CAR 286757                *
.*                  Recompiled for changes to MRGURWEB (in WEBCHGUR)       *
.*        V10.03.36 24/07/2013  Steve Armstrong  CAR 279184                *
.*                  Added handling of REF^I12, REF^I13 & REF^I14 messages. *
.*        V10.03.35 15/04/2013  Steve Armstrong  CAR 267329                *
.*                  Recompiled for changes to deceasing patient            *
.*        V10.03.34 12/04/2013  Steve Armstrong   CAR 283973               *
.*                  Recompiled for changes to WEBCHGUR                     *
.*        V10.03.33 01/03/2013 Jill Parkinson CAR 257831                   *
.*                  Added write/update of demographics updated table       *
.*        V10.03.32 07/02/2013  Steve Armstrong CAR 280841                 *
.*                  Mods to validate overseas country descriptions using   *
.*                  both upper and lowercase matching in VALC0000.         *
.*        V10.03.31 07/11/2012  Steve Armstrong CAR 275865                 *
.*                  Mods to not trigger a broadcast message if called from *
.*                  HL7RECVR.                                              *
.*        V10.03.30 10/12/2012  Steve Armstrong    CAR 275430              *
.*                  Recompiled for changes to WEBCHGUR                     *
.*        V10.03.29 07/11/2012  Steve Armstrong    CAR 275865              *
.*                  Recompiled for changes to deceasing patient            *
.*        V10.03.28 02/11/2012  Saroeun Soeur      CAR 275430              *
.*                  Recompiled for WEBCHGUR                                *
.*        V10.03.27 31/08/2012  Steve Armstrong    CAR 270836              *
.*                  Added call to RAPMMTI1 to validate that the pmimtiaf   *
.*                  record doesn't already exist.                          *
.*                  31/08/2012  Jeni Tan  CAR 270090                       *
.*                  recompiled for changes to WEBCHGUR.                    *
.*        V10.03.26 15/08/2012  Steve Armstrong    CAR 270795              *
.*                  Mods to validation of PID.15 to reset the interpreter  *
.*                  required field (pmspx2af.pmpxintr) to "No" if the      *
.*                  preferred language is null.                            *
.*                  14/08/2012  Steve Armstrong  CAR 256888                *
.*                  Recompiled for changes to WEBCHGUR.                    *
.*                  23/07/2012 Patrick Adair     CAR 269159                *
.*                  Recompiled for changes to PATCOMN2                     *
.*        V10.03.25 01/05/2012  Steve Armstrong    CAR 265154              *
.*                  Mods when matching contacts to cater for a change in   *
.*                  contact type.                                          *
.*                  Mods to validation of postcode/suburb/state for NK1.32 *
.*                  in VNK10000.                                           *
.*                  Added call to VALC0000 to VNKA0000 and VNOK0000.       *
.*        V10.03.24 19/07/2012  Steve Armstrong  CAR 268870                *
.*                  Mods to RGSR0000 to only check for matches on name     *
.*                  fields and not DOB or Sex.                             *
.*                  Recompiled for changed to UPDUR & PATCOMN2.            *
.*        V10.03.23 09/07/2012  Steve Armstrong    CAR 267675              *
.*                  Recompiled for changes to PATCOMN2.                    *
.*        V10.03.22 18/05/2012  Steve Armstrong    CAR 265529              *
.*                  Mods to validation of postcode/suburb/state for NK1.32 *
.*                  and PID.11.                                            *
.*                  Removed reference to HL7COMN as this is no longer      *
.*                  required now that HL7QUERY handles incoming queries.   *
.*                  Copied SENDM000 routine from HL7COMN and renamed it    *
.*                  SEND0000.                                              *
.*                  Also removed unused local variables.                   *
.*        V10.03.21 19/04/2012  Steve Armstrong    CAR 263812              *
.*                  Mods to cater for ZXP.7 through ZXP.21 and allow       *
.*                  updating of Local GP (ZXP.7 - pmpxrhc1) and Local GP   *
.*                  Practice (ZXP.16 - pmpxrh1g).                          *
.*                  Also update the Medicare Number validation to allow    *
.*                  the test value of "123123123" to be used.              *
.*        V10.03.20 11/04/2012  Steve Armstrong    CAR 263369              *
.*                  Recompiled for changes to WEBCHGUR                     *
.*                  05/04/2012  Steve Armstrong    CAR 263261              *
.*                  Further mods for handling of Alerts including accepting*
.*                  and matching using a TOPAS Id.                         *
.*        V10.03.19 04/04/2012  Steve Armstrong    CAR 258310              *
.*                  Mods to handle defacto relationship for marital status *
.*                  for WA Health.                                         *
.*        V10.03.18 21/03/2012  Steve Armstrong    CAR 262798              *
.*                  Added validation routines for Safety Net number & DVA  *
.*                  number.                                                *
.*                  Also fixed patient identifier validation routine so    *
.*                  that when it finds a null identifier, it will process  *
.*                  any remaining identifiers, instead of moving on to the *
.*                  next field.                                            *
.*        V10.03.17 19/03/2012  Steve Armstrong    CAR 261452              *
.*                  Added check for TPS ID (TOPASID) as this is a mandatory*
.*                  field for NK1.29 data from TOPAS.                      *
.*        V10.03.16 16/03/2012  Steve Armstrong    CAR 261452              *
.*                  Mods to allow NK1.3 to not be populated when using     *
.*                  new contacts.                                          *
.*        V10.03.15 13/03/2012  Steve Armstrong    CAR 260140              *
.*                  Mods to only allow duplicate alerts where Indicator 7  *
.*                  of Cat Hx is set to "D".                               *
.*        V10.03.14 08/03/2012  Steve Armstrong    CAR 261505              *
.*                  Added checks for duplicate contact records when        *
.*                  writing to CONTEMP1 in MATC0000.                       *
.*                  06/03/2012  Steve Armstrong    CAR 260140              *
.*                  Added checks for duplicate alert records when writing  *
.*                  to ALRTEMP1 in MATA0000.                               *
.*        V10.03.13 28/02/2012  Steve Armstrong  CAR 257428                *
.*                  Recompiled for changes to HL7COMN.                     *
.*                  Also modified receiver to not delete existing webPAS   *
.*                  Alerts and Contacts where Indicator 21 is set to X.    *
.*        V10.03.12 15/02/2012  Davin              256006                  *
.*                  Recompiled for WATOPAFD & WATOPSFD                     *
.*        V10.03.11 14/02/2012  Steve Armstrong    253910                  *
.*                  Recompiled for changes to PATCOMN2.                    *
.*        V10.03.10 02/02/2012  Steve Armstrong    259401                  *
.*                  Mods to check for HL7 escape sequences when loading    *
.*                  alert comments (ZAL.14).                               *
.*                  Also, mods to make ZAL.12 (user who last updated)      *
.*                  non-mandatory.                                         *
.*        V10.03.09 30/01/2012  Steve Armstrong    259017                  *
.*                  Mods to not uppercase the address country (PID.11 -    *
.*                  Component 6).                                          *
.*        V10.03.08 21/01/2012  Davin              248529                  *
.*                  Changed NK102903 validation length to 3 for TPS        *
.*        V10.03.07 19/12/2011  Steve Armstrong    248529                  *
.*                  Mods to use the incoming webPAS id (where populated)   *
.*                  to match records and update TPS ID where it changes.   *
.*        V10.03.06 16/12/2011  Steve Armstrong    257556                  *
.*                  Fixed issues with postcode/suburb validation.          *
.*                  16/12/2011  Steve Armstrong    257333                  *
.*                  Mods to extend alias (PID.9) array from 30 to 80.      *
.*                  13/12/2011  Steve Armstrong    249362                  *
.*                  Mods to handle multiple alerts of the same type.       *
.*                  05/12/2011  Steve Armstrong    248529                  *
.*                  Mods to handle multiple contacts of the same type.     *
.*                  Mods to convert patient/contact address fields to      *
.*                  uppercase.                                             *
.*        V10.03.05 30/11/2011  Jill Parkinson CAR 249362                  *
.*                  Mods for changes to patalrtf key                       *
.*        V10.03.04 22/11/2011  Steve Armstrong   CAR 248529               *
.*                  Mods for changes to pmscexaf key.                      *
.*                  21/11/2011  Steve Armstrong   CAR 255891               *
.*                  Fixed deletion of middle name where null is sent.      *
.*                  21/11/2011  Steve Armstrong   CAR 255387               *
.*                  Fixed validation when comparing the Mother's and       *
.*                  Child's DOB.                                           *
.*        V10.03.03 18/11/2011  Steve Armstrong   CAR 255386               *
.*                  Fixed null NK1.32 to write blank fields to a temp      *
.*                  file record, so that when processing, the webPAS       *
.*                  fields get updated.                                    *
.*                  17/11/2011  Mike Laming     CAR 240184                 *
.*                  Changes to IBAPOSTF Post Code table-added State to Keys*
.*                  17/11/2011  Steve Armstrong   CAR 251665               *
.*                  Recompiled for changes to HL7COMN.                     *
.*        V10.03.02 10/11/2011  Steve Armstrong   CAR 254880               *
.*                  Further mods for validation of mandatory segments      *
.*                  09/11/2011  Steve Armstrong   CAR 254774               *
.*                  Recompiled for changes to UPDUR.                       *
.*        V10.03.01 03/11/2011  Steve Armstrong   CAR 253827               *
.*                  Mods to accept repeats for NK1.31 when using pmscexaf. *
.*                  Also fixed counter when processing repeats for PID.13  *
.*                  and PID.14 when using pmscexaf.                        *
.*                  02/11/2011  Steve Armstrong   CAR 254880               *
.*                  Mods to validate message segment sequences for A28,    *
.*                  A31 and A34 messages.                                  *
.*                  02/11/2011  Steve Armstrong   CAR 253910               *
.*                  Added further processing messages to the log file      *
.*                  28/10/2011  Peter McMullen    CAR 254584               *
.*                  Added TRAP around the LISTEN.                          *
.***************************************************************************
.*        V10.02.12 28/10/2011  Steve Armstrong   CAR 254059               *
.*                  Added PMI update after resetting PMI alert flags       *
.*                  following snapshot delete.                             *
.*                  25/10/2011  Steve Armstrong   CAR 252975               *
.*                  Added validation of country description for overseas   *
.*                  addresses.                                             *
.*        V10.02.11 24/10/2011  Steve Armstrong   CAR 252975               *
.*                  Fixed check for overseas postcode to use PID01105      *
.*                  instead of PID01103.                                   *
.*        V10.02.10 14/10/2011  Steve Armstrong   CAR 252975               *
.*                  Mods to use PID.11, Component 5 to determine an        *
.*                  overseas address.                                      *
.*                  13/10/2011  Steve Armstrong   CAR 252132               *
.*                  Mods to handle repeating fields in PID.11 (where the   *
.*                  patient's current address is the second address).      *
.*        V10.02.09 20/09/2011  Steve Armstrong   CAR 251138               *
.*                  Mods to write to or delete from patipenf for DFT^P03   *
.*                  messages                                               *
.*        V10.02.08 16/09/2011  Steve Armstrong   CAR 251302               *
.*                  Mods to accept 2 repeats for Patient Phone Number      *
.*                  (PID.13) and Business Phone Number (PID.14).           *
.*                  Mods to handle escape sequences for HL7 special        *
.*                  characters.                                            *
.*                  Added new error messages and standardised existing     *
.*                  error messages and error numbers.                      *
.*                  Added clear of PMI details before processing A28       *
.*                  messages.                                              *
.*                  General changes to accept data as per that output by   *
.*                  the broadcast message server (eg Gender, Phone         *
.*                  Numbers).                                              *
.*                  Added validation of component 3 where field is of type *
.*                  CE.                                                    *
.*                  Removed some validation for active codes.              *
.*                  06/09/2011 Steve Armstrong    CAR 250494               *
.*                  Added setting of PMI flags for wa alerts.              *
.*        V10.02.07 27/08/2011 Steve Armstrong    CAR 249780               *
.*                  Added saving of Medicare number to PMEDI & PTMXMCCD.   *
.*                  Also added handling for null identifiers in PID.3.     *
.*        V10.02.06 26/08/2011 Steve Armstrong    CAR 249780               *
.*                  Mods to handle overseas address in PID.11 and NK1.32.  *
.*                  Mods to handle ZXP segment.                            *
.*                  Removed handling of OBX segment (replaced by ZAL       *
.*                     segment).                                           *
.*                  Mods to handle repeating fields for patient            *
.*                     identifiers (PID.3) and aliases (PID.9).            *
.*                  Mods to handle ZAL segment.                            *
.*                  Mods to handle NK1 segment based on using extra        *
.*                     contacts (pmscexaf).                                *
.*                  Mods to handle repeating segments (ZAL & NK1).         *
.*                  Mods to handle Mother-Child links (PID.27).            *
.*                  Mods to handle patient aliases (PID.9).                *
.*                  Standardised Error numbers.                            *
.*                  Changed Sending Application (MSH.3) to webPAS instead  *
.*                     of ibaPAS.                                          *
.*        V10.02.05 26/07/2011 Steve Armstrong    CAR 240684               *
.*                  Recompiled for changes to LEGALTFD & WEBCHGUR          *
.*        V10.02.04 22/07/2011 Steve Armstrong    CAR 246136               *
.*                  Changed TMPSTRNG & RECVMESS to DIM 4000                *
.*                  Also recompiled for changes to HL7COMN.                *
.*        V10.02.03 25/06/2011 Steve Armstrong    CAR 240722               *
.*                  Recompiled for changes to PATLOCFD.                    *
.*                  Also recompiled for changes to HL7COMN.                *
.*                  Also recompiled for changes to PMSCURFD.               *
.*        V10.02.02 02/06/2011  Steve Armstrong   CAR 243484               *
.*                  Fixed issues with reading patmchgf for P03 messages.   *
.*        V10.02.01 05/01/2011  Davin Sloan      CAR 230955                *
.*                  Added PMSHCLFD and recompiled for changes to HL7COMN.  *
.*                  17/12/2010  Steve Armstrong  CAR 235689                *
.*                  Mods to handle incoming A28, A31 and A34 messages.     *
.*                  Also removed A19 handling (now in HL7QUERY).           *
.***************************************************************************
.*        V10.01.01 15/12/2010  Mike Laming   CAR 233046                   *
.*                  Mods to Misc.Charges PATMCHFD - at GMIS0000, include   *
.*                  new routine PATMCHRD                                   *
.***************************************************************************
.*        V10.00.05 23/06/2010  Steve Armstrong   CAR 223695               *
.*                  Mods for DFT-P03 to validate transaction date and      *
.*                  allow pending charges where an invoice has already     *
.*                  been raised.                                           *
.*        V10.00.04 27/05/2010  Steve Armstrong   CAR 222871               *
.*                  Mods to send AR as well as AE responses.               *
.*                  Also changed some error numbers returned in MSA.6:     *
.*           	         PV1.19: O/P Booking B record not found -          *
.*                               changed from 204 to 207                   *
.*                       PV1.19: Admission record not found -              *
.*                               changed from 204 to 207                   *
.*                       PV1.19: Emergency record not found -              *
.*                               changed from 204 to 207                   *
.*                       QRD.7 : Quantity Limited Amount units not         *
.*                               available - changed from 103 to 207       *
.*                       QRD.8 : Who Subject Filter id number not valid -  *
.*                               changed from 207 to 204                   *
.*                  Also changed error numbers from DIM's to FORM's for    *
.*                  easier handling.                                       *
.*        V10.00.03 30/04/2010  J.Tan        CAR 220887                    *
.*                  Mods checking for Active/Inactive of Misc.charge       *
.*        V10.00.02 29/04/2010  Steve Armstrong  CAR 220812                *
.*                  Mods to write response message to log file.            *
.*                  Also recompiled for changes to HL7CISVR & HL7COMN.     *
.*        V10.00.01 30/03/2010  Steve Armstrong  CAR 219065                *
.*                  Added PIPE after "QRD" in response message.            *
.*                  25/03/2009  Steve Armstrong  CAR 212224                *
.*                  Mods to accept an A19 query message.                   *
.*                  Also made mods to return to ACCEPT instead of LISTEN   *
.*                  when connection is lost or timeout occurs.             *
.***************************************************************************
.*        V9.11.01  25/03/2009  Steve Armstrong  CAR 190499                *
.*                  Mods to accept an emergency billing message            *
.***************************************************************************
.*        V9.09.01  01/04/2008  Steve Armstrong  CAR 160860                *
.*                  Mods to use PTCNH7DA to determine whether to use Sent  *
.*                  Description/Amount or Description/Amount from patmchgf *
.*                  in P03.                                                *
.***************************************************************************
.*        V9.08.07  07/05/2007 Peter Vela CAR SJOG ED Billing              *
.*                  Initialised new pmsmtiaf variables                     *
.*        V9.08.06  18/12/2006  Steve Armstrong  CAR 128644                *
.*                  Mods to restore check for I/P invoices, but only       *
.*                  allow new charges if the last invoice is before the    *
.*                  discharge date.                                        *
.*        V9.08.05  16/12/2006  Steve Armstrong  CAR 128509                *
.*                  Mods to ignore O/P invoices if they are cancelled      *
.*        V9.08.04  13/12/2006  Steve Armstrong  CAR 127850                *
.*                  Mods to restore check if invoice has already been      *
.*                  raised for O/P transactions only.                      *
.*        V9.08.03  11/12/2006  Steve Armstrong  CAR 127850                *
.*                  Mods to remove check if invoice has already been       *
.*                  raised.                                                *
.*                  01/12/2006  Steve Armstrong  CAR 126917                *
.*                  Mods to get log file directory from DPATH and change   *
.*                  log file extension to ".rec".                          *
.*                  Setting of OVRCD to ZERO prior to TRAP in in OLOG0000. *
.*        V9.08.02  21/11/2006  Steve Armstrong  CAR 125503                *
.*                  Mods to handle GST and Category FN/FI for Singapore    *
.*        V9.08.01  14/11/2006  Steve Armstrong  CAR 124794                *
.*                  Separated out final EndBlock and CR from WMSA0000      *
.*        V9.08.00  01/10/2006  Steve Armstrong  CAR 109687                *
.*                  Ported from HL7CISRC to make a more generic receiver   *
.*                  that can break messages down to the component level    *
.*                  and more specifically, can process P03 messages for    *
.*                  billing purposes.                                      *
.***************************************************************************
.
.  Things to do
. ---------------
. - Add code to fully validate segments and sequence of segments for a given
.   message.
. - Cater for subcomponents as well as field components.
. - Logging of messages and errors to file (also need to log messages when 
.   connection is lost or timed out, or message separator not found).
. - If no field separator found, where should code go (may be another SOB
.   in current tmpstrng
.
          INC       STD002FD
.
.         File Definitions
.         ----------------
.
          INC       AAEDE1FD/INC
          INC       ABFVARS/INC
          INC       ACCAUDFD/INC
          INC       ACONVARS/INC
          INC       ALLAUDFD/INC
          INC       ALLDEPFD/INC
          INC       ALLDIAFD/INC
          INC       ALLEIDFD/INC
          INC       ALLEDTFD/INC
          INC       ALLETXFD/INC
          INC       ALLLINFD/INC
          INC       ALLLONFD/INC
          INC       ALLPCTFD/INC
          INC       ALLQUEFD/INC
          INC       ALLRHLFD/INC
          INC       ALLRLNFD/INC
          INC       ALLSERFD/INC
          INC       ALLSTSFD/INC
          INC       BOKCONFD/INC
          INC       BOKRC1FD/INC
          INC       BOKRX1FD/INC
          INC       BOKSTAFD/INC
          INC       CCIEX7FD/INC
          INC       COMDEPFD/INC
          INC       DEATHATD/INC
          INC       DISMASFD/INC
          INC       DISPATFD/INC
          INC       DISPTLFD/INC
          INC       EMRCHAFD/INC
          INC       EMRDAYFD/INC
          INC       EMRINCFD/INC
          INC       EMRLOCFD/INC
          INC       EMRSITFD/INC
          INC       EMRUNKFD/INC
          INC       EOCLNKFD/INC
          INC       HICBCNFD/INC
          INC       HICCITFD/INC
          INC       HICCLMFD/INC
          INC       HL7CISVR/INC
          INC       HL7INBFD/INC
          INC       IBAPDFFD/INC
          INC       IBALPCFD/INC
          INC       IBAPOLFD/INC
          INC       LEGALTFD/INC
          INC       LEGBOAFD/INC
          INC       LEGDEAFD/INC
          INC       LEGDSCFD/INC
          INC       LEGINVFD/INC
          INC       LEGMISFD/INC
          INC       LEGTRNFD/INC
          INC       LEGVISFD/INC
          INC       MEHCONFD/INC
          INC       MEHCJAFD/INC
          INC       MEHLEGFD/INC
          INC       MEHLERFD/INC
          INC       MLTHCPFD/INC
          INC       MRTCONFD/INC
          INC       MRTVISFD/INC
          INC       MULTVISV/INC        * PATDPATH variables
          INC       NZPSPRFD/INC
          INC       OPRARDFD/INC
          INC       OPRCBDFD/INC
          INC       OPRDEDFD/INC
          INC       OPRITEFD/INC
          INC       OPRNURFD/INC
          INC       OPRPMBFD/INC
          INC       OPRSESFD/INC
          INC       OPRSRGFD/INC
          INC       OPRTSMFD/INC
          INC       OUTARTFD/INC
          INC       OUTARTTD/INC
          INC       OUTBITFD/INC
          INC       OUTBOCFD/INC
          INC       OUTBOXFD/INC
          INC       OUTCANFD/INC
          INC       OUTCPBFD/INC
          INC       OUTCPCFD/INC
          INC       OUTCMNFD/INC
          INC       OUTCTYFD/INC
          INC       OUTCVTFD/INC
          INC       OUTDANFD/INC
          INC       OUTDANTD/INC
          INC       OUTDIAFD/INC
          INC       OUTDCOFD/INC
          INC       OUTDTRFD/INC
          INC       OUTHEDFD/INC
          INC       OUTHISFD/INC
          INC       OUTLKBFD/INC
          INC       OUTLPCFD/INC
          INC       OUTMA1FD/INC
          INC       OUTMABFD/INC
          INC       OUTMSPFD/INC
          INC       OUTPRCFD/INC
          INC       OUTPRCTD/INC
          INC       OUTPREFD/INC
          INC       OUTRAPFD/INC
          INC       OUTRF1FD/INC
          INC       OUTRSHFD/INC
          INC       OUTSESFD/INC
          INC       OUTSRVFD/INC
          INC       OUTUSEFD/INC
          INC       OUTXSCFD/INC
          INC       OUTXSCTD/INC
          INC       OUTXWPFD/INC
          INC       PATAK1FD/INC
          INC       PATAM1FD/INC
          INC       PATASFFD/INC
          INC       PATATRFD/INC
          INC       PATAXEFD/INC
          INC       PATBMDFD/INC
          INC       PATCALAG/INC
          INC       PATCANFD/INC
          INC       PATCFAFD/INC
          INC       PATCOMM/INC
          INC       PATDHEAD/INC
          INC       PATDDHFD/INC
          INC       PATDKIFD/INC
          INC       PATDPTHV/INC        * PATDPATH variables
          INC       PATDRGFD/INC
          INC       PATDSTFD/INC
          INC       PATDTHFD/INC
          INC       PATDTRFD/INC
          INC       PATICUFD/INC
          INC       PATFINFD/INC
          INC       PATFX1FD/INC
          INC       PATFHIFD/INC
          INC       PATHOSFD/INC
          INC       PATIPEFD/INC
          INC       PATITMFD/INC
          INC       PATLOCFD/INC
          INC       PATMCHFD/INC                 * miscellaneous charge file
          INC       PATMMBFD/INC
          INC       PATNOBFD/INC
          INC       PATMRGFD/INC
          INC       PATNIPFD/INC
          INC       PATPA1FD/INC
          INC       PATPR1FD/INC
          INC       PATPNIFD/INC
          INC       PATSGCFD/INC
          INC       PATTFEFD/INC
          INC       PATUNAFD/INC
          INC       PATURAFD/INC
          INC       PATURCFD/INC
          INC       PATONHFD/INC
          INC       PMSADWFD/INC
          INC       PMSCAUFD/INC
          INC       PMSCEXTD/INC
          INC       PMSCIDFD/INC
          INC       PMSCMBFD/INC
          INC       PMSCTCFD/INC
          INC       PMSCURFD/INC
          INC       PMSDAUFD/INC
          INC       PMSDUNFD/INC
          INC       PMSEDWFD/INC
          INC       PMSHPGFD/INC
          INC       PMSHPOFD/INC
          INC       PMSIDWFD/INC
          INC       PMSIDWVR/INC
.          INC       PMSIPLFD/INC
          INC       PMSMTIFD/INC                 * misc. items file
          INC       PMSPAYFD/INC
          INC       PMSPTDFD/INC
          INC       PMSTLEFD/INC
          INC       PMSTSPFD/INC
          INC       PMSUPDFD/INC
          INC       PMSUPGFD/INC
          INC       PMSUPOFD/INC
          INC       PMSVX1TD/INC
          INC       PMSWORFD/INC
          INC       PREADMVR/INC
          INC       PRIPRAFD/INC
          INC       PRSPMIFD/INC
          INC       RCPBNKFD/INC
          INC       RCPDTEFD/INC
          INC       SAVPX2FD/INC
          INC       TFILEVAR/INC
          INC       VISIAUFD/INC
          INC       VISINTFD/INC
          INC       VISPAYFD/INC
          INC       WATCATFD/INC
          INC       WATCHAFD/INC
          INC       WATESEFD/INC
          INC       WATESMFD/INC
          INC       WATESNFD/INC
          INC       WATESPFD/INC
.         INC       WATTX1FD/INC
          INC       WEBCONFD/INC
.
.0890602  INC       DAVUVARS/INC
.0890602  INC       DAVWVARS/INC
          INC       WRBKVARS/INC
.
LISSOCKT  SOCKET    ASCII,FIXED=1   * socket on which to listen for connections
.
TEMP2     FILE      ASCII, FIXED=256
.
.
.         HL7 Field Temporary File Definition
.         -----------------------------------
.
RCVRTMP1  IFILE SQL, FIXED=516, KEY="U1-3,4-6,7-9,10-12,13-15"
.
.NAME     TYPE    LENGTH     PHYSICAL     START     DESCRIPTION
.----     ----    ------     --------     -----     -----------
RTMPSEGI  DIM       3           3           1       Segment Id
DRTMPSGC  DIM       3           3           4       Segment Count
DRTMPFLD  DIM       3           3           7       Field Number
DRTMPFCT  DIM       3           3           10      Field Number Count (repeats)
DRTMPCMP  DIM       3           3           13      Component Number
RTMPVRBL  DIM       500         500         16      Variable
.
.End of Record                              516
.
. Redefine FORM fields from key
. -----------------------------
RTMPSEGC  FORM      3
RTMPFLDN  FORM      3
RTMPFCNT  FORM      3
RTMPCMPN  FORM      3
.
.
.         Contacts Temporary File Definition
.         ----------------------------------
.
CONTEMP1   IFILE    SQL, FIXED=473, KEY="U1-1,2-4,5-7"
.
.Name     Type      Length Physical Start Description
.----     ----      ------ -------- ----- -----------
DCONTSTA  DIM       1      1        1     Record Status
.                                            0 = Delete
.                                            1 = Add
.                                            2 = Update
CONTTYPE  DIM       3      3        2     Type of Contact (Cat tc)
CONTCNTR  DIM       3      3        5     Counter       
CONTTITL  DIM       4      4        8     Title
CONTSNAM  DIM       40     40       12    Surname    
CONTGNAM  DIM       40     40       52    Given Name    
CONTGNM2  DIM       40     40       92    Second Given Name
CONTADD1  DIM       35     35       132   Address Line 1
CONTADD2  DIM       35     35       167   Address Line 2  
CONTADD3  DIM       35     35       202   Address Line 3
CONTADD4  DIM       35     35       237   Address Line 4
CONTPOST  DIM       8      8        272   Post Code
CONTTELP  DIM       20     20       280   Telephone Private
CONTTELB  DIM       20     20       300   Telephone Business
CONTTELM  DIM       20     20       320   Telephone Mobile
CONTRELP  DIM       10     10       340   Relationship
CONTEMAI  DIM       80     80       350   Email Address
CONTDINA  DIM       8      8        430   Inactivate Date (CCYYMMDD)
CONTTPID  DIM       20     20       438   Third Party Unique ID
CONTWPID  DIM       10     10       458   webPAS Unique ID
CONTSLET  DIM       1      1        468   Send Letter
CONTSSMS  DIM       1      1        469   Send SMS
CONTLAN1  DIM       3      3        470   Main Language Spoken at Home 1
.
.End of Record                      473
.
. Redefine FORM fields from key
. -----------------------------
CONTSTAT  FORM      1
.
.
.         Alerts Temporary File Definition
.         ----------------------------------
.
ALRTEMP1   IFILE    SQL, FIXED=355, KEY="U1-1,2-3,4-6,7-9"
.
.Name     Type      Length Physical Start Description
.----     ----      ------ -------- ----- -----------
DALRTSTA  DIM       1      1        1     Record Status
.                                            0 = Delete
.                                            1 = Add
.                                            2 = Update
ALRTCATG  DIM       2      2        2     Codes File Category (H1-H9)
ALRTCODE  DIM       3      3        4     Codes File Code (for Category)
ALRTCNTR  DIM       3      3        7     Counter
ALRTDATE  DIM       8      8        10    Alert Date (CCYYMMDD)
ALRTREAC  DIM       3      3        18    Reaction code (Category wn)
ALRTLSEV  DIM       1      1        21    Severity Level (0-9)
ALRTRDTE  DIM       8      8        22    Review Date (ccyymmdd)
ALRTDTIN  DIM       8      8        30    Date Inactive (ccyymmdd)
ALRTEDAT  DIM       8      8        38    End Date/Date Cleared (ccyymmdd)
ALRTRQBY  DIM       10     10       46    Requested By (HCP Code)
ALRTHOSP  DIM       3      3        56    Initiating Hospital
ALRTUDAT  DIM       8      8        59    Date Record Updated (ccyymmdd)
ALRTUTIM  DIM       8      8        67    Time Record Updated (hh:mm:ss)
ALRTUUID  DIM       10     10       75    WEB User ID Updated (websecaf)
ALRTCOMM  DIM       250    250      85    Comments
ALRTTPID  DIM       20     20       335   Third Party System Identifier
.
.End of Record                      355
.
. Redefine FORM fields from key
. -----------------------------
ALRTSTAT  FORM      1
.
.
.         Theatre Item Temporary File Definition
.         ----------------------------------
.
INPUSETF  IFILE     SQL, FIXED=54, KEY="U1-8,9-13,14-22,23-25"
.
.Name     Type      Length Physical Start Description
.----     ----      ------ -------- ----- -----------
DAMOUNT   DIM       8      8        1     Total Theatre Charge
DIAMT     DIM       5      5        9     MBS amount
PROVITEM  DIM       9      9        14    Provisional Item
UNIQUE    DIM       3      3        23    MBS counter record
.OPPMTMNO DIM       1      1        26    Team Number
.OPPMGSTA FORM      1      2        27    GST Applicable to item
.                                           0-No GST, 1-Yes, 2-Unknown GST
.OPPMGSTC DIM       6      6        29    GST Payable Code
.DOPPMCNT DIM       3      3        35    Counter
.OPPMSERV DIM       4      4        38    Quantity/Service number
ITEMREFN  DIM       12     12       42    Reference Number
.
. End of Record                     54
.
. Redefine FORM fields from key
. -----------------------------
AMOUNT    FORM      5.2
.IAMT     FORM      5
.OPPMCNTR FORM      3
.
.
.         Comment Line Temporary File Definition
.         ----------------------------------
.
COMTEMP1  IFILE     SQL, FIXED=76, KEY="U1-1,2-5"
.
.Name     Type      Length Physical Start Description
.----     ----      ------ -------- ----- -----------
COMMTYPE  DIM       1      1        1     Comment Type
.                                          1 = ZSC.46 Comments
.                                          2 = ZSC.47 Preadmission & Oper. Notes
DCOMMLIN  DIM       4      4        2     Comment Line Number
COMMTEXT  DIM       70     70       6     Comment Text
.
. End of Record                     76
.
. Redefine FORM fields from key
. -----------------------------
COMMLINE  FORM      4
.
.
.
. LOCAL VARIABLES
. ---------------
ACC       DIM       2
ACCPTCNT  FORM      1
ACDURMIN  FORM      4             * Actual Operation Duration (in Min)
ACTION    DIM       1
ADD       DIM       2
ADDSECND  FORM      1
ADMISSNO  DIM       8
ADMNTIME  DIM       8
ALERT001  DIM       2
ALERT002  DIM       3
ALERT013  DIM       3
ALRTSCOR  FORM      2
ALTERDSC  DIM       50            * error description for email alert
ALTKEY35  DIM       35
ALVISFLG  FORM      1             * alternate visit flag
.                                      0 = write record to ibaalvaf
.                                      1 = update existing ibaalvaf record
AMM       DIM       2
AYY       DIM       2
A03ARRAY  DIM       1[8]          * A03 mandatory segment array
.                                      element 1 = MSH
.                                      element 2 = EVN
.                                      element 3 = PID
.                                      element 4 = PV1
.                                      element 5 = PV2
.                                      element 6 = ZXV
.                                      element 7 = PR1
.                                      element 8 = ROL
A04ARRAY  DIM       1[6]          * A04 mandatory segment array
.                                      element 1 = MSH
.                                      element 2 = EVN
.                                      element 3 = PID
.                                      element 4 = PV1
.                                      element 5 = PV2 (ZTR for EMR)
.                                      element 6 = ZXV (ZNT for EMR)
A05ARRAY  DIM       1[6]          * A05 mandatory segment array
.                                      element 1 = MSH
.                                      element 2 = EVN
.                                      element 3 = PID
.                                      element 4 = PV1
.                                      element 5 = PV2
.                                      element 6 = DG1
A08ARRAY  DIM       1[6]          * A08 mandatory segment array
.                                      element 1 = MSH
.                                      element 2 = EVN
.                                      element 3 = PID
.                                      element 4 = PV1
.                                      element 5 = PV2 (DG1 for EMR)
.0879964                               element 6 = ZXV
A21ARRAY  DIM       1[5]          * A21 mandatory segment array
.                                      element 1 = MSH
.                                      element 2 = EVN
.                                      element 3 = PID
.                                      element 4 = PV1
.                                      element 5 = ZXV
A22ARRAY  DIM       1[5]          * A22 mandatory segment array
.                                      element 1 = MSH
.                                      element 2 = EVN
.                                      element 3 = PID
.                                      element 4 = PV1
.                                      element 5 = ZXV
A28ARRAY  DIM       1[5]          * A28 mandatory segment array
.                                      element 1 = MSH
.                                      element 2 = EVN
.                                      element 3 = PID
.                                      element 4 = PV1
.                                      element 5 = ZXP
A31ARRAY  DIM       1[5]          * A31 mandatory segment array
.                                      element 1 = MSH
.                                      element 2 = EVN
.                                      element 3 = PID
.                                      element 4 = PV1
.                                      element 5 = ZXP
A34ARRAY  DIM       1[5]          * A34 mandatory segment array
.                                      element 1 = MSH
.                                      element 2 = EVN
.                                      element 3 = PID
.                                      element 4 = MRG
.                                      element 5 = ZXP
A03FAIL   FORM      8
A03RECV   FORM      8
A03SUCC   FORM      8
A04FAIL   FORM      8
A04RECV   FORM      8
A04SUCC   FORM      8
A05FAIL   FORM      8
A05RECV   FORM      8
A05SUCC   FORM      8
A08FAIL   FORM      8
A08RECV   FORM      8
A08SUCC   FORM      8
A21FAIL   FORM      8
A21RECV   FORM      8
A21SUCC   FORM      8
A22FAIL   FORM      8
A22RECV   FORM      8
A22SUCC   FORM      8
A28FAIL   FORM      8
A28RECV   FORM      8
A28SUCC   FORM      8
A31FAIL   FORM      8
A31RECV   FORM      8
A31SUCC   FORM      8
A34FAIL   FORM      8
A34RECV   FORM      8
A34SUCC   FORM      8
.
AIL00101  DIM       500
AIL00201  DIM       500
AIL00301  DIM       500
AIL00302  DIM       500
AIL00303  DIM       500
AIL00304  DIM       500
AIL00305  DIM       500
AIL00306  DIM       500
AIL00307  DIM       500
AIL00308  DIM       500
AIL00309  DIM       500
AIL00401  DIM       500           * CE w
AIL00402  DIM       500           * CE w
AIL00403  DIM       500           * CE w
AIL00404  DIM       500           * CE w
AIL00405  DIM       500           * CE w
AIL00406  DIM       500           * CE w
AIL00501  DIM       500           * CE w
AIL00502  DIM       500           * CE w
AIL00503  DIM       500           * CE w
AIL00504  DIM       500           * CE w
AIL00505  DIM       500           * CE w
AIL00506  DIM       500           * CE w
AIL00601  DIM       500
AIL00701  DIM       500
AIL00801  DIM       500
AIL00901  DIM       500
AIL01001  DIM       500           * CE w
AIL01002  DIM       500           * CE w
AIL01003  DIM       500           * CE w
AIL01004  DIM       500           * CE w
AIL01005  DIM       500           * CE w
AIL01006  DIM       500           * CE w
AIL01101  DIM       500
AIL01201  DIM       500
AIL3CLIN  DIM       6             * clinic id for appt (OUT)
.
AIS00101  DIM       500
AIS00201  DIM       500
AIS00301  DIM       500           * CE w
AIS00302  DIM       500           * CE w
AIS00303  DIM       500           * CE w
AIS00304  DIM       500           * CE w
AIS00305  DIM       500           * CE w
AIS00306  DIM       500           * CE w
AIS00401  DIM       500
AIS00501  DIM       500
AIS00601  DIM       500
AIS00701  DIM       500
AIS00801  DIM       500
AIS00901  DIM       500
AIS01001  DIM       500
.
AIP00101  DIM       500
AIP00201  DIM       500
AIP00301  DIM       500           * XCN w
AIP00302  DIM       500           * XCN w
AIP00303  DIM       500           * XCN w
AIP00304  DIM       500           * XCN w
AIP00305  DIM       500           * XCN w
AIP00306  DIM       500           * XCN w
AIP00307  DIM       500           * XCN w
AIP00308  DIM       500           * XCN w
AIP00309  DIM       500           * XCN w
AIP00310  DIM       500           * XCN w
AIP00311  DIM       500           * XCN w
AIP00312  DIM       500           * XCN w
AIP00313  DIM       500           * XCN w
AIP00314  DIM       500           * XCN w
AIP00315  DIM       500           * XCN w
AIP00401  DIM       500           * CE w
AIP00402  DIM       500           * CE w
AIP00403  DIM       500           * CE w
AIP00404  DIM       500           * CE w
AIP00405  DIM       500           * CE w
AIP00406  DIM       500           * CE w
AIP00501  DIM       500
AIP00601  DIM       500
AIP00701  DIM       500
AIP00801  DIM       500
AIP00901  DIM       500
AIP01001  DIM       500
AIP01101  DIM       500
AIP01201  DIM       500
AIP3DOCT  DIM       6             * HCP linked doctor code for provider (OUT)
AIP3HCPC  DIM       10            * HCP code for provider (INP)
AIP3LDOC  DIM       6             * HCP linked doctor code for provider (INP)
.
.
AUDIFLAG  FORM      1             * audit record type flag
.                                     1 = add record
.                                     2 = before change record
.                                     3 = after change record
.                                     4 = delete record
.
BOUTFLAG  FORM      1
BABYDOBT  DIM       8
BABYTOBT  DIM       6
BJDAY     FORM      3
BOKKEY28  DIM       28
BOOKNUMB  DIM       8
BREAKFLG  FORM      1             * line break found flag
.                                    0 = No
.                                    1 = Yes
.
CALDAYS   FORM      4
CASEKEYZ  DIM       26            * theatre casekeys
CATEGORY  DIM       2
CBOOK     FORM      1
CCITE2CN  FORM      3
CDDRCTRY  DIM       80
CEFFDATE  DIM       8
CEVSFLAG  FORM      1             * check external visit flag
CHECKREF  DIM       8             * Auto activate internal referral
CHKGRPIN  FORM      1
CHRCOUNT  FORM      4
CISMFLAG  FORM      1
CJDAY     FORM      3
CLEXPIRY  DIM       8             * centrelink card expiry date
CONFFILE  FILE      ASCII, FIXED=250
CMBFOUND  FORM      1             * CMB found flag
.                                     0 = CMBS items in message
.                                     1 = no CMBS items in message
CMBSFEE   FORM      1
CMEXPIRY  DIM       8             * chemotherapy card expiry date
CNTRCEFR  FORM      1
CNLH7FLG  FORM      1             * flag to not send A08 HL7 Message
CODE      DIM       3
COMMVRBL  DIM       250
COMPCNT   FORM      2             * component count for a field
COMPFLAG  FORM      1             * Component Flag
.                                         0 = Component character not set
.                                         1 = Component character set
COMSEPAR  DIM       1             * component separator variable
COUNTR    FORM      2
COUNTRY   DIM       35
.
CPADM001  DIM       3                       * Booking Cancellation Reason CAT BC
CPADM002  DIM       1                       * Return to Waiting list? (Y/N)
CPADM003  DIM       3                       * Removal Reason
CPADM004  DIM       3                       * Reason for Change of Schedule Adm
CPADM006  DIM       3                       * Theatre Booking Cancellation Reas
CPADM007  DIM       3                       * Booking Cancellation Reason CAT BE
CPADM008  DIM       8                       * Removal Date
CPADM009  DIM       8                       * Removal Date Time
.
CSEC      DIM       2
CTCHGFLG  FORM      1             * contact type change flag
.                                    0 = no change in contact type
.                                    1 = contact type has changed
CURCASE   FORM      3
CURCHRGE  FORM      8.2
CURMRECN  FORM      3
CURRDATE  DIM       8
CURRDAY   FORM      1             * Current Day Indicator
.
DATEFLAG  DIM       1
DATFLAG1  FORM      1             * Dates Allowed flag
.                                     0 = any datetime allowed
.                                     1 = future datetime not allowed
.                                     2 = future time only allowed
.                                         (date must be past or current)
.                                     3 = datetime cannot be in the past
DATFLAG2  FORM      1             * Date Type
.                                     0 = Date only (ccyymmdd)
.                                     1 = Date and Time (ccyymmddhhmmss)
.                                     2 = Time only (hhmmss)
DATETIME  DIM       14            * message date/time (ccyymmddhhmmss)
DEATHFLG  FORM      1             * death flag
.                                    0 = patient not dead, or already dead
.                                    1 = new death, so call to DEATHPOL required
DEFCLAIM  DIM       3             * default claim code
DEFTCATG  DIM       2
DEFTCODE  DIM       3
DEFTINDC  FORM      2
DETNTREC  FORM      2
DG100101  DIM       4             * DG1 Component variables
DG100201  DIM       2
DG100301  DIM       10
DG100302  DIM       200
DG100303  DIM       10
DG100304  DIM       1
DG100305  DIM       1
DG100306  DIM       1
DG100401  DIM       80
DG100501  DIM       26
DG100601  DIM       2
DG100701  DIM       10
DG100702  DIM       200
DG100703  DIM       10
DG100704  DIM       1
DG100705  DIM       1
DG100706  DIM       1
DG100801  DIM       10
DG100802  DIM       200
DG100803  DIM       10
DG100804  DIM       1
DG100805  DIM       1
DG100806  DIM       1
DG100901  DIM       1
DG101001  DIM       2
DG101101  DIM       10
DG101102  DIM       200
DG101103  DIM       10
DG101104  DIM       1
DG101105  DIM       1
DG101106  DIM       1
DG101201  DIM       3
DG101301  DIM       10
DG101302  DIM       200
DG101303  DIM       10
DG101304  DIM       1
DG101305  DIM       1
DG101306  DIM       1
DG101401  DIM       4
DG101501  DIM       2
DG101601  DIM       10
DG101602  DIM       100
DG101603  DIM       100
DG101604  DIM       100
DG101605  DIM       100
DG101606  DIM       100
DG101607  DIM       100
DG101608  DIM       100
DG101609  DIM       100
DG101610  DIM       100
DG101611  DIM       100
DG101612  DIM       100
DG101613  DIM       100
DG101614  DIM       100
DG101615  DIM       100
DG101616  DIM       100
DG101701  DIM       3
DG101801  DIM       1
DG101901  DIM       26
DG1FOUND  FORM      1             * DG1 found flag
.                                     0 = one or more DG1 segments received
.                                     1 = no DG1 segments received
DIGIT01   FORM      1             * Medicare Number digit variables
DIGIT02   FORM      1
DIGIT03   FORM      1
DIGIT04   FORM      1
DIGIT05   FORM      1
DIGIT06   FORM      1
DIGIT07   FORM      1
DIGIT08   FORM      1
DIGIT09   FORM      1
DIGCOUNT  FORM      1
DIGNUM01  DIM       1
DIGNUM02  DIM       1
DIGNUM03  DIM       1
DIGNUM04  DIM       1
DIGNUM05  DIM       1
DIGNUM06  DIM       1
DIGNUM07  DIM       1
DIGNUM08  DIM       1
DIGNUM09  DIM       1
DIGNUM10  DIM       1
DIM1A     DIM       1
DIM1B     DIM       1
DIM2C     DIM       2             * century variable (cc)
DIM2Y     DIM       2             * year variable    (yy)
DIM2M     DIM       2             * month variable   (mm)
DIM2D     DIM       2             * day variable     (dd)
DIM2H     DIM       2             * hour variable    (hh)
DIM2N     DIM       2             * minute variable  (mm)
DIM2S     DIM       2             * second variable  (ss)
DIM4      DIM       4             * full year work variable (ccyy)
DIM5      DIM       5
DIM6A     DIM       6
DIM6B     DIM       6
DIM8      DIM       8             * date/time work variable 
.                                         (ccyymmdd) or (hh:mm:ss)
DIM8A     DIM       8
DIM9      DIM       9
DIM12     DIM       12            * reference no. work variable
DIM14     DIM       14            * date/time work variable (ccyymmddhhmmss)
DIM16     DIM       16
DIM18     DIM       18
DIM18A    DIM       18
DIM45     DIM       45
DIM50     DIM       50
DIM60     DIM       60
DIM127    DIM       127
DIM1000   DIM       1000
DISPFLAG  FORM      1             * display to screen flag
.                                     0 = don't display messages to screen
.                                     1 = display messages to screen (debug)
DPATHVAR  DIM       100
DRESDIND  FORM      1             * 'Dressing Time' Day Indicator
DRESTMIN  FORM      4             * 'Dressing Time' - Minute representation
DSCHTIME  DIM       8
DVCOLFLG  FORM      1             * dva card colour flag
.                                      0 = valid DVA colour code
.                                      1 = null ("")
.                                      2 = not populated
DVCOLOLD  DIM       3             * saved dva card colour (currently on file)
DVCOLOUR  DIM       3             * saved dva card colour (received in PID.27)
.
DVEXPFLG  FORM      1             * dva expiry date flag
.                                      0 = valid DVA expiry date
.                                      1 = null ("")
.                                      2 = not populated
DVEXPIRY  DIM       8             * dva expiry date (received in ZXP.5)
DVEXPOLD  DIM       8             * saved dva expiry date (currently on file)
.
DYCNT     FORM      4
EMRADTTM  DIM       14            * save existing emr arrival date/time
EMRDDTTM  DIM       14            * save existing emr discharge date/time
EMRTDTTM  DIM       14            * save existing emr triage date/time
EOSFLAG   FORM      1             * end of string flag
.                                     0 = not end of string
.                                     1 = end of string
EPAUDFLG  FORM      1             * Episode audit flag
.                                    0 = no audits written
.                                    1 = before audit written
EPSDPRTY  DIM       3             * Episide referral priority
EPSDTRGS  DIM       3             * Episode referral triage status (Cat ts)
EPSDTRGD  DIM       8             * Episode referral triage date (CCYYMMDD)
EPSDUDT1  DIM       8             * Episode referral date referral accepted
.
ERRORDSC  DIM       70            * error description for acknowledgement
ERRORCNT  FORM      4             * error count
ERRORNUM  FORM      3             * HL7 error number
ERORLINE  DIM       80            * save variable for 1st error description
ERORNUMB  FORM      3             * HL7 error number for MSH segment
ERORTEXT  DIM       26
ESCSEPAR  DIM       1             * escape character
EVN00101  DIM       500           * EVN Component variables
EVN00201  DIM       500
EVN00301  DIM       500
EVN00401  DIM       500
EVN00501  DIM       500
EVN00502  DIM       500
EVN00503  DIM       500
EVN00504  DIM       500
EVN00505  DIM       500
EVN00506  DIM       500
EVN00507  DIM       500
EVN00508  DIM       500
EVN00509  DIM       500
EVN00510  DIM       500
EVN00511  DIM       500
EVN00512  DIM       500
EVN00513  DIM       500
EVN00514  DIM       500
EVN00515  DIM       500
EVN00601  DIM       500
EXISTFL   FORM      1
.
FNAMEP    DIM       8
F3A       FORM      3
FIELDLEN  FORM      2
FLDITMNO  FORM      3
FIELDID   DIM       7
FIELDNO   FORM      3             * segment field counter
.FINYEAR   DIM       4
FINMON    DIM       2
FORMURNO  FORM      8
FORM3     FORM      3
FORM3A    FORM      3
FORM3C    FORM      3
FORM5     FORM      5
FORM6     FORM      6
FORM6A    FORM      6
FORM6P2   FORM      6.2
FORM8     FORM      8
FORM10    FORM      10
FORM12P2  FORM      12.2
FORM12D2  FORM      12.2
INVDFLAG  FORM      1
INTRVISN  DIM       8                  * episode referral visit number
FORMTOT   FORM      3
FPPOSITN  FORM      4
FROMDATE  DIM       8
FSDOCCOD  DIM       10
FT100101  DIM       3
FT100201  DIM       500
FT100301  DIM       500
FT100401  DIM       500
FT100501  DIM       500
FT100601  DIM       500
FT100701  DIM       500
FT100702  DIM       500
FT100703  DIM       500
FT100704  DIM       500
FT100705  DIM       500
FT100706  DIM       500
FT100801  DIM       500
FT100901  DIM       500
FT101001  DIM       500
FT101101  DIM       500
FT101102  DIM       500
FT101103  DIM       500
FT101104  DIM       500
FT101105  DIM       500
FT101106  DIM       500
FT101201  DIM       500
FT101202  DIM       500
FT101203  DIM       500
FT101204  DIM       500
FT101205  DIM       500
FT101206  DIM       500
FT101301  DIM       500
FT101302  DIM       500
FT101303  DIM       500
FT101304  DIM       500
FT101305  DIM       500
FT101306  DIM       500
FT101401  DIM       500
FT101402  DIM       500
FT101403  DIM       500
FT101404  DIM       500
FT101405  DIM       500
FT101406  DIM       500
FT101501  DIM       500
FT101502  DIM       500
FT101503  DIM       500
FT101504  DIM       500
FT101505  DIM       500
FT101506  DIM       500
FT101601  DIM       500
FT101602  DIM       500
FT101603  DIM       500
FT101604  DIM       500
FT101605  DIM       500
FT101606  DIM       500
FT101607  DIM       500
FT101608  DIM       500
FT101609  DIM       500
FT101701  DIM       500
FT101801  DIM       500
FT101901  DIM       500
FT101902  DIM       500
FT101903  DIM       500
FT101904  DIM       500
FT101905  DIM       500
FT101906  DIM       500
FT102001  DIM       500
FT102002  DIM       500
FT102003  DIM       500
FT102004  DIM       500
FT102005  DIM       500
FT102006  DIM       500
FT102007  DIM       500
FT102008  DIM       500
FT102009  DIM       500
FT102010  DIM       500
FT102011  DIM       500
FT102012  DIM       500
FT102013  DIM       500
FT102014  DIM       500
FT102015  DIM       500
FT102101  DIM       500
FT102102  DIM       500
FT102103  DIM       500
FT102104  DIM       500
FT102105  DIM       500
FT102106  DIM       500
FT102107  DIM       500
FT102108  DIM       500
FT102109  DIM       500
FT102110  DIM       500
FT102111  DIM       500
FT102112  DIM       500
FT102113  DIM       500
FT102114  DIM       500
FT102115  DIM       500
FT102201  DIM       500
FT102202  DIM       500
FT102203  DIM       500
FT102204  DIM       500
FT102205  DIM       500
FT102206  DIM       500
FT102301  DIM       500
FT102302  DIM       500
FT102303  DIM       500
FT102304  DIM       500
FT102401  DIM       500
FT102402  DIM       500
FT102403  DIM       500
FT102404  DIM       500
FT102405  DIM       500
FT102406  DIM       500
FT102407  DIM       500
FT102408  DIM       500
FT102409  DIM       500
FT102410  DIM       500
FT102411  DIM       500
FT102412  DIM       500
FT102413  DIM       500
FT102414  DIM       500
FT102415  DIM       500
FT102501  DIM       500
FT102502  DIM       500
FT102503  DIM       500
FT102504  DIM       500
FT102505  DIM       500
FT102506  DIM       500
FT102601  DIM       500
FT102602  DIM       500
FT102603  DIM       500
FT102604  DIM       500
FT102605  DIM       500
FT102606  DIM       500
FT1COUNT  FORM      3
FT1FOUND  FORM      1             * FT1 found flag
.                                     0 = one or more FT1 segments received
.                                     1 = no FT1 segments received
FULLPATH  DIM       100
.
GT100101  DIM       500
GT100201  DIM       500
GT100301  DIM       500           * XPN w
GT100302  DIM       500           * XPN w
GT100303  DIM       500           * XPN w
GT100304  DIM       500           * XPN w
GT100305  DIM       500           * XPN w
GT100306  DIM       500           * XPN w
GT100307  DIM       500           * XPN w
GT100308  DIM       500           * XPN w
GT100401  DIM       500
GT100501  DIM       500           * XAD w
GT100502  DIM       500           * XAD w
GT100503  DIM       500           * XAD w
GT100504  DIM       500           * XAD w
GT100505  DIM       500           * XAD w
GT100506  DIM       500           * XAD w
GT100507  DIM       500           * XAD w
GT100508  DIM       500           * XAD w
GT100509  DIM       500           * XAD w
GT100510  DIM       500           * XAD w
GT100511  DIM       500           * XAD w
GT100601  DIM       500[2]        * XTN w
GT100602  DIM       500[2]        * XTN w
GT100603  DIM       500[2]        * XTN w
GT100604  DIM       500[2]        * XTN w
GT100605  DIM       500[2]        * XTN w
GT100606  DIM       500[2]        * XTN w
GT100607  DIM       500[2]        * XTN w
GT100608  DIM       500[2]        * XTN w
GT100609  DIM       500[2]        * XTN w
GT100701  DIM       500           * XTN w
GT100702  DIM       500           * XTN w
GT100703  DIM       500           * XTN w
GT100704  DIM       500           * XTN w
GT100705  DIM       500           * XTN w
GT100706  DIM       500           * XTN w
GT100707  DIM       500           * XTN w
GT100708  DIM       500           * XTN w
GT100709  DIM       500           * XTN w
GT100801  DIM       500           * TS
GT100901  DIM       500           * IS
GT101001  DIM       500           * IS
GT101101  DIM       500           * CE w
GT101102  DIM       500           * CE w
GT101103  DIM       500           * CE w
GT101104  DIM       500           * CE w
GT101105  DIM       500           * CE w
GT101106  DIM       500           * CE w
.
HOSPCODE  DIM       4
HOSPITAL  DIM       25
HOUR      FORM      2
HOURD     DIM       2
HOURE     DIM       2
HOURTM    DIM       2
HFHIFUND  FORM      2
HTMLFILE  FIFO      ASCII, FIXED=250
.
I12FAIL   FORM      8
I12RECV   FORM      8
I12SUCC   FORM      8
I13FAIL   FORM      8
I13RECV   FORM      8
I13SUCC   FORM      8
I14FAIL   FORM      8
I14RECV   FORM      8
I14SUCC   FORM      8
IBAMFLAG  FORM      1
IGNORFLG  FORM      1             * flag for processing status
.                                     0 = process record as per normal
.                                     1 = do not process record, regardless of
.                                         whether or not there are any errors,
.                                         but send response as AA
.
IN100101  DIM       500
IN100201  DIM       500           * CE w
IN100202  DIM       500           * CE w
IN100203  DIM       500           * CE w
IN100204  DIM       500           * CE w
IN100205  DIM       500           * CE w
IN100206  DIM       500           * CE w
IN100301  DIM       500           * CX w
IN100302  DIM       500           * CX w
IN100303  DIM       500           * CX w
IN100304  DIM       500           * CX w
IN100305  DIM       500           * CX w
IN100306  DIM       500           * CX w
IN103601  DIM       500           * ST w
.
INITDTR   DIM       22[999]
INITMMBS  DIM       11[999]
INVOICED  FORM      1
.
KEEPBKTM  DIM       1
KEY3H     DIM       3
KEY10A    DIM       10
KEY10B    DIM       10
KEY21A    DIM       21
KEY250    DIM       250
.
LASTPOSN  FORM      4
LASTUPDT  DIM       8
LASTUPTM  DIM       8
LEGCFLAG  FORM      1
LENGTH    FORM      3
LINENUMB  FORM      3
LINKFLAG  FORM      1             * link record found flag
.                                     0 = record found
.                                     1 = record not found
LLPOSITN  FORM      4
LOADAMTP  FORM      12.2          * Patient portion amount
LOADAMTT  FORM      12.2          * Gross Total amount
LOADCTYP  DIM       1             * Consumption Type
LOADDESC  DIM       65            * Description
LOADITEM  DIM       9             * Item Number
LOADMGRP  DIM       3             * Misc.Group (Cat.FI code for nzpribil)
LOADPROC  DIM       9             * Procedure Code (FT1.25 for nzpribil)
LOADRBAT  FORM      12.2          * Estimate Rebate amount
LOADREFN  DIM       12            * Reference
LOADSERV  FORM      5             * Service Number
LOADTDAT  DIM       8             * Transaction date
LOADUNIQ  DIM       10            * Unique id for theatre booking
.
LOADPSTM  DIM       6             * Procedure Start Time
LOADPETM  DIM       6             * Procedure End Time
LOADTEDT  DIM       8             * Transaction End Date
LOADRPST  DIM       6             * Reporting Proc Start Time
LOADRPET  DIM       6             * Reporting Proc End Time
LOADAPRA  DIM       20            * AHPRA Identifier
.
LOADIOHC  DIM       3             * Reason for Hold (Cat rh)
LOADIOHD  DIM       80            * Reason for Hold Free Text
.
LOCNCNTR  FORM      4
.
MATCHREF  FORM      1             * match found for P03 item delete (1=No/2=Yes)
MATCHTYP  FORM      1             * P03 item type ((1=CMBS/2=MiscChg)
M02ARRAY  DIM       1[8]          * M02 mandatory segment array
.                                      element 1 = MSH
.                                      element 2 = MFI
.                                      element 3 = MFE
.                                      element 4 = STF
.                                      element 5 = PRA
.                                      element 6 = ZPR
.                                      element 7 = ZST
.                                      element 8 = ZSF
M02FAIL   FORM      8
M02RECV   FORM      8
M02SUCC   FORM      8
MANDFLAG  FORM      1
MAXCOUNT  FORM      1
MAXDREST  DIM       5             * Maximum 'Dressing Time'
MAXSCORE  FORM      2
MBSCNT    FORM      3
MBSCONTR  DIM       6
MBSCOUNT  FORM      3
MBSTOTAL  FORM      3
MBSFCODE  DIM       9
MCEXPIRY  DIM       8             * medicare expiry date
MESSAGID  DIM       20
MESSGNUM  FORM      2             * message number
.                                      1 = A28 (Add Person Information)
.                                      2 = A31 (Update Person Information)
.                                      3 = A34 (Merge Person Information)
.                                      4 = P03 (Financial Transaction)
.                                      5 = I12 (Add A/H Patient Referral)
.                                      6 = I13 (Modify A/H Patient Referral)
.                                      7 = I14 (Delete A/H Patient Referral)
.                                      8 = A04 (O/P Confirm Appointment)
.                                      9 = A03 (O/P A/H Contact)
.                                     10 = M02 (Staff/Practitioner)
.                                     11 = A05 (Preadmission)
.                                     12 = S14 (OUT/INP/Theatre Booking Update)
.                                     13 = A08 (I/P Visit Update)
.                                     14 = A21 (I/P On-Leave)
.                                     15 = A22 (I/P Return from Leave)
.                                     16 = S0x (O/P Appointment Message)
.                                     17 = S12 (New Appointment OUT/INP)
.                                     18 = S13 (Reschedule Appointment OUT)
.                                     19 = S15 (Cancel Appointment OUT/INP)
.                                     20 = S26 (DNA Appointment OUT)
MESSTYPE  DIM       3             * message type (ie A28)
MFE00101  DIM       3
MFE00201  DIM       1
MFE00301  DIM       26
MFE00401  DIM       100
MFE00402  DIM       1
MFE00403  DIM       100
MFE00404  DIM       1
MFE00405  DIM       1
MFE00406  DIM       1
MFE00501  DIM       3
MFI00101  DIM       250
MFI00102  DIM       1
MFI00103  DIM       60
MFI00104  DIM       1
MFI00105  DIM       1
MFI00106  DIM       1
MFI00201  DIM       180
MFI00202  DIM       1
MFI00203  DIM       1
MFI00301  DIM       3
MFI00401  DIM       26
MFI00501  DIM       26
MFI00601  DIM       2
MIN       DIM       2
MINPREPT  DIM       5             * Minimum 'Prep Start Time'
MINTIME   DIM       2
MINUTES   FORM      6
MRGODDAT  DIM       8
MRGURDAT  FORM      1
MRG00101  DIM       500
MRG00102  DIM       500
MRG00103  DIM       500
MRG00104  DIM       500
MRG00105  DIM       500
MRG00106  DIM       500
MRG00201  DIM       500
MRG00202  DIM       500
MRG00203  DIM       500
MRG00204  DIM       500
MRG00205  DIM       500
MRG00206  DIM       500
MRG00301  DIM       500
MRG00302  DIM       500
MRG00303  DIM       500
MRG00304  DIM       500
MRG00305  DIM       500
MRG00306  DIM       500
MRG00401  DIM       500
MRG00402  DIM       500
MRG00403  DIM       500
MRG00404  DIM       500
MRG00405  DIM       500
MRG00406  DIM       500
MRG00501  DIM       500
MRG00502  DIM       500
MRG00503  DIM       500
MRG00504  DIM       500
MRG00505  DIM       500
MRG00506  DIM       500
MRG00601  DIM       500
MRG00602  DIM       500
MRG00603  DIM       500
MRG00604  DIM       500
MRG00605  DIM       500
MRG00606  DIM       500
MRG00701  DIM       500
MRG00702  DIM       500
MRG00703  DIM       500
MRG00704  DIM       500
MRG00705  DIM       500
MRG00706  DIM       500
MRG00707  DIM       500
MRG00708  DIM       500
MSH00101  DIM       500           * MSH Component variables
MSH00201  DIM       500
MSH00301  DIM       500
MSH00302  DIM       500
MSH00303  DIM       500
MSH00401  DIM       500
MSH00402  DIM       500
MSH00403  DIM       500
MSH00501  DIM       500
MSH00502  DIM       500
MSH00503  DIM       500
MSH00601  DIM       500
MSH00602  DIM       500
MSH00603  DIM       500
MSH00701  DIM       500
MSH00801  DIM       500
MSH00901  DIM       3
MSH00902  DIM       3
MSH00903  DIM       7
MSH01001  DIM       500
MSH01101  DIM       500
MSH01102  DIM       500
MSH01201  DIM       500
MSH01202  DIM       500
MSH01203  DIM       500
MSH01301  DIM       500
MSH01401  DIM       500
MSH01501  DIM       500
MSH01601  DIM       500
MSH01701  DIM       500
MSH01801  DIM       500
MSH01901  DIM       500
MSH01902  DIM       500
MSH01903  DIM       500
MSH01904  DIM       500
MSH01905  DIM       500
MSH01906  DIM       500
MSH02001  DIM       500
MSH02101  DIM       100   * Note:  MSH fields from here on are only valid for
.                                  HL7 2.4
MTHNAM3   DIM       3
MTYPARRY  DIM       3[20]
MULTFLAG  FORM      1             * multihospital staff record found flag
.                                     0 = record found
.                                     1 = record not found
.
NWAUFLAG  FORM      "0"
NBRDAYS   FORM      4
NCCURNO   DIM       8
NDEXPIRY  DIM       8             * NDIS expiry date
NEWSTRNG  DIM       4000
NEWURNO   DIM       8
NEWURNUM  DIM       8
NK100101  DIM       500
NK100201  DIM       500
NK100202  DIM       500
NK100203  DIM       500
NK100204  DIM       500
NK100205  DIM       500
NK100206  DIM       500
NK100207  DIM       500
NK100208  DIM       500
NK100301  DIM       500
NK100302  DIM       500
NK100303  DIM       500
NK100304  DIM       500
NK100305  DIM       500
NK100306  DIM       500
NK100401  DIM       500
NK100402  DIM       500
NK100403  DIM       500
NK100404  DIM       500
NK100405  DIM       500
NK100406  DIM       500
NK100407  DIM       500
NK100408  DIM       500
NK100409  DIM       500
NK100410  DIM       500
NK100411  DIM       500
NK100501  DIM       500
NK100502  DIM       500
NK100503  DIM       500
NK100504  DIM       500
NK100505  DIM       500
NK100506  DIM       500
NK100507  DIM       500
NK100508  DIM       500
NK100509  DIM       500
NK100601  DIM       500
NK100602  DIM       500
NK100603  DIM       500
NK100604  DIM       500
NK100605  DIM       500
NK100606  DIM       500
NK100607  DIM       500
NK100608  DIM       500
NK100609  DIM       500
NK100701  DIM       500
NK100702  DIM       500
NK100703  DIM       500
NK100704  DIM       500
NK100705  DIM       500
NK100706  DIM       500
NK100801  DIM       500
NK100901  DIM       500
NK101001  DIM       500
NK101101  DIM       500
NK101102  DIM       500
NK101201  DIM       500
NK101202  DIM       500
NK101203  DIM       500
NK101204  DIM       500
NK101205  DIM       500
NK101206  DIM       500
NK101301  DIM       500
NK101302  DIM       500
NK101303  DIM       500
NK101304  DIM       500
NK101305  DIM       500
NK101306  DIM       500
NK101307  DIM       500
NK101308  DIM       500
NK101309  DIM       500
NK101401  DIM       500
NK101402  DIM       500
NK101403  DIM       500
NK101404  DIM       500
NK101405  DIM       500
NK101406  DIM       500
NK101501  DIM       500
NK101601  DIM       500
NK101701  DIM       500
NK101801  DIM       500
NK101901  DIM       500
NK101902  DIM       500
NK101903  DIM       500
NK101904  DIM       500
NK101905  DIM       500
NK101906  DIM       500
NK102001  DIM       500
NK102002  DIM       500
NK102003  DIM       500
NK102004  DIM       500
NK102005  DIM       500
NK102006  DIM       500
NK102101  DIM       500
NK102201  DIM       500
NK102202  DIM       500
NK102203  DIM       500
NK102204  DIM       500
NK102205  DIM       500
NK102206  DIM       500
NK102301  DIM       500
NK102401  DIM       500
NK102501  DIM       500
NK102502  DIM       500
NK102503  DIM       500
NK102504  DIM       500
NK102505  DIM       500
NK102506  DIM       500
NK102601  DIM       500
NK102602  DIM       500
NK102603  DIM       500
NK102604  DIM       500
NK102605  DIM       500
NK102606  DIM       500
NK102607  DIM       500
NK102608  DIM       500
NK102701  DIM       500
NK102702  DIM       500
NK102703  DIM       500
NK102704  DIM       500
NK102705  DIM       500
NK102706  DIM       500
NK102801  DIM       500
NK102802  DIM       500
NK102803  DIM       500
NK102804  DIM       500
NK102805  DIM       500
NK102806  DIM       500
NK102901  DIM       500[2]
NK102902  DIM       500[2]
NK102903  DIM       500[2]
NK102904  DIM       500[2]
NK102905  DIM       500[2]
NK102906  DIM       500[2]
NK103001  DIM       500
NK103002  DIM       500
NK103003  DIM       500
NK103004  DIM       500
NK103005  DIM       500
NK103006  DIM       500
NK103007  DIM       500
NK103008  DIM       500
NK103101  DIM       500[3]
NK103102  DIM       500[3]
NK103103  DIM       500[3]
NK103104  DIM       500[3]
NK103105  DIM       500[3]
NK103106  DIM       500[3]
NK103107  DIM       500[3]
NK103108  DIM       500[3]
NK103109  DIM       500[3]
NK103201  DIM       500
NK103202  DIM       500
NK103203  DIM       500
NK103204  DIM       500
NK103205  DIM       500
NK103206  DIM       500
NK103207  DIM       500
NK103208  DIM       500
NK103209  DIM       500
NK103210  DIM       500
NK103211  DIM       500
NK103301  DIM       500
NK103302  DIM       500
NK103303  DIM       500
NK103304  DIM       500
NK103305  DIM       500
NK103306  DIM       500
NK103401  DIM       500
NK103501  DIM       500
NK103502  DIM       500
NK103503  DIM       500
NK103504  DIM       500
NK103505  DIM       500
NK103506  DIM       500
NK103601  DIM       500
NK103701  DIM       500
NK1COUNT  FORM      3
NK1FOUND  FORM      1             * NK1 found flag
.                                     0 = one or more NK1 segments received
.                                     1 = no NK1 segments received
NTE00101  DIM       500
NTE00201  DIM       500
NTE00301  DIM       4000          * 0861257 limit ?
NTE00401  DIM       500
NTE00402  DIM       500
NTE00403  DIM       500
NTE00404  DIM       500
NTE00405  DIM       500
NTE00406  DIM       500
NTECOUNT  FORM      3
NTEFOUND  FORM      1             * NTE found flag
.                                     0 = one or more NTE segments received
.                                     1 = no NTE segments received
NZPRIBIL  FORM      1             * NZ Private Billing flag (0=No/1=yes)
OBADTFLG  FORM      1             * clinic date exists on outbokaf (0=No/1=Yes)
OCCURNO   DIM       8
OLDSTRNG  DIM       4000
OLDUNIQ   DIM       10            * .>>>>>>> not actually used anywhere!!!!
.                                        except in OPTHETAT, but OLDUNIQ
.                                        never populated!
OLDURNO   DIM       8
OLDURNUM  DIM       8
.
OPARD001  DIM       10                      * Unique ID.
OPARD002  DIM       8                       * Arrival Time (hh:mm:ss)
OPARD003  DIM       6                       * Admitting Nurse Code (oprnuraf)
OPARD004  DIM       3                       * Reason Patient Late  (Cat Os)
OPARD013  DIM       40                      * Prosthesis
OPARD016  DIM       3                       * Recovery Bay (Cat oc)
OPARD017  DIM       3                       * Acuity (Cat od)
OPARD029  DIM       8                       * Surgical Time Out (hh:mm:ss)
OPARD030  DIM       8                       * Clinical Review Date (ccyymmdd)
OPARD031  DIM       8                       * Clinical Review Time (hh:mm:ss)
OPARD034  DIM       6                       * Blood Loss
OPARD039  DIM       8                       * Time Called For (hh:mm:ss)
OPARD041  DIM       8                       * Anaesthetic Prep Start (hh:mm:ss)
OPARD042  DIM       8                       * Anaesthetic Start (hh:mm:ss)
OPARD043  DIM       8                       * Anaesthetic End (hh:mm:ss)
OPARD045  DIM       3                       * ASA Score (Category ok)
OPARD046  DIM       3                       * Anaesthetic Delay Reason (Cat ol)
.
.      Note: the following 5 fields are for the same value which is parameter
.      controlled as to which database field it is written to.
.
OPARD060  DIM       8                       * Ready For Recovery (hh:mm:ss)
OPARD061  DIM       8                       * Anaesthetic Time Out (hh:mm:ss)
OPARD062  DIM       8                       * Ready For Recovery (hh:mm:ss)
OPARD063  DIM       8                       * Ready For Recovery (hh:mm:ss)
OPARD064  DIM       8                       * Ready For Recovery (hh:mm:ss)
OPARD071  DIM       8                       * Time Into Recovery - Front
.                                             (hh:mm:ss)
OPARD072  DIM       6                       * Nurse 1 Attending Patient - Front
.                                             (oprnuraf)
OPARD073  DIM       6                       * Nurse 2 Attending Patient - Front
.                                             (oprnuraf)
OPARD074  DIM       8                       * Time Into Recovery - Back
.                                             (hh:mm:ss)
OPARD075  DIM       6                       * Nurse 1 Attending Patient - Back
.                                             (oprnuraf)
OPARD076  DIM       6                       * Nurse 2 Attending Patient - Back
.                                             (oprnuraf)
OPARD077  DIM       8                       * Time in Recovery - Day Procedure
OPARD078  DIM       6                       * Nurse 1 Attending Patient - Day
.                                             (oprnuraf)
OPARD079  DIM       6                       * Nurse 2 Attending Patient - Day
.                                             (oprnuraf)
OPARD080  DIM       8                       * Time Exit Theatre Compl.(hh:mm:ss)
OPARD082  DIM       8                       * Time Patient Died (hh:mm:ss)
OPARD083  DIM       8                       * Time Patient Went To ICU
.                                             (hh:mm:ss)
OPARD084  DIM       3                       * Recovery In Delay Code (Cat Ou)
OPARD085  DIM       8                       * Ready To Depart Time (hh:mm:ss)
OPARD086  DIM       3                       * Reason For Overnight (Cat ou)
OPARD105  DIM       8                       * User Defined Time Field 13
OPARD115  DIM       8                       * Adm Nurse Start Time (hh:mm:ss)
OPARD116  DIM       8                       * Adm Nurse End Time   (hh:mm:ss)
.
OPCBD002  DIM       2[20]                   * Caesarean Birth Count
OPCBD003  DIM       1[20]                   * Caesarean Birth Sex of Baby
OPCBD004  DIM       8[20]                   * Caesarean Birth Date of Birth
.                                               (ccyymmdd)
OPCBD005  DIM       8[20]                   * Caesarean Birth Time of Birth
.                                               (hh:mm:ss)
OPCBD006  DIM       8[20]                   * Caesarean Birth U/R Number
OPCBD007  DIM       6[20]                   * Caesarean Birth Baby Weight
OPCBD008  DIM       8[20]                   * Caesarean Birth Placenta Delivery
.                                               Time (hh:mm:ss)
.
OPDEA003  DIM       3                       * Anaesthetic Code (Cat. OA )
OPDEA020  DIM       5                       * Pre-operative time 1 (HH:MM)
OPDEA021  DIM       5                       * Pre-operative time 2 (HH:MM)
OPDEA022  DIM       5                       * Pre-operative time 3 (HH:MM)
OPDEA023  DIM       5                       * Pre-operative time 4 (HH:MM)
OPDEA024  DIM       5                       * Pre-operative time 5 (HH:MM)
OPDEA025  DIM       5                       * Post-operative time 1 (HH:MM)
OPDEA026  DIM       5                       * Post-operative time 2 (HH:MM)
OPDEA027  DIM       5                       * Post-operative time 3 (HH:MM)
OPDEA028  DIM       5                       * Post-operative time 3 (HH:MM)
.
OPERCODE  DIM       4
OPSES012  DIM       3                       * Session Type (cat ST)
.
OPPMB001  DIM       9                       * MBS Item Code
OPPMB002  DIM       3                       * Counter
.
OPSRG001  DIM       10                      * Unique ID
OPSRG002  DIM       1                       * Team Number
OPSRG003  DIM       8                       * Time Prep Start (hh:mm:ss)
OPSRG004  DIM       8                       * Time of Dressing (hh:mm:ss)
OPSRG005  DIM       8                       * Time Surgery Started (hh:mm:ss)
OPSRG006  DIM       8                       * Time Surgery Ended (hh:mm:ss)
OPSRG007  DIM       3                       * Delay Before Surgery Reason
.                                             (Cat TV)
OPSRG020  DIM       15                      * Diathermy 1 No. (free or opriteaf)
OPSRG022  DIM       1                       * Diathermy 1 Checked
OPSRG026  DIM       15                      * Diathermy 2 No. (free format)
OPSRG028  DIM       1                       * Diathermy 2 Checked
OPSRG053  DIM       3                       * Diathermy Type 1 (Cat Ti)
OPSRG054  DIM       3                       * Diathermy Type 2 (Cat Ti)
OPSRG055  DIM       3                       * Recovery Exit Delay Reason
.                                             (Cat Tk)
OPSRG060  DIM       3                       * User Defined Code 11
OPSRG071  DIM       1                       * User Defined Y/N 2
.                                             0 = No
.                                             1 = Yes
OPSRG072  DIM       1                       * Fast Post Recovery
.                                             0 = No
.                                             1 = Yes
OPSRG073  DIM       1                       * Admit Post Procedure
.                                             0 = No
.                                             1 = Yes
OPSRG074  DIM       1                       * Case Abandoned
.                                             0 = No
.                                             1 = Yes
OPSRG076  DIM       1                       * No Recovery
.                                             0 = No
.                                             1 = Yes
OPSRG080  DIM       8                       * Wheels In (Usr Def Tm 1 hh:mm:ss)
OPSRG081  DIM       8                       * Wheels Out(Usr Def Tm 2 hh:mm:ss)
.
OURNO     DIM       8
.
OUTFILPR  DIM       3             * save outpatient file prefix
OUTSITPR  DIM       6             * save outpatient site prefix
.
P03ARRAY  DIM       1[6]          * P03 mandatory segment array
.                                      element 1 = MSH
.                                      element 2 = EVN
.                                      element 3 = PID
.                                      element 4 = PV1
.                                      element 5 = FT1
.                                      element 6 = ZFT
PADMAVIS  DIM       20
PADMURNO  DIM       8
PENDADAT  DIM       8
PENDCLAM  DIM       3
PENDDDAT  DIM       8
PENDFUND  DIM       6
PENDHOSP  DIM       3
PENDSDAT  DIM       8
PENDSYST  DIM       2
PID00101  DIM       500
PID00201  DIM       500
PID00202  DIM       500
PID00203  DIM       500
PID00204  DIM       500
PID00205  DIM       500
PID00206  DIM       500
PID00301  DIM       100[11]
PID00302  DIM       100[11]
PID00303  DIM       5[11]
PID00304  DIM       6[11]
PID00305  DIM       100[11]
PID00306  DIM       100[11]
PID00401  DIM       500
PID00402  DIM       500
PID00403  DIM       500
PID00404  DIM       500
PID00405  DIM       500
PID00406  DIM       500
PID00501  DIM       500
PID00502  DIM       500
PID00503  DIM       500
PID00504  DIM       500
PID00505  DIM       500
PID00506  DIM       500
PID00507  DIM       500
PID00508  DIM       500
PID00601  DIM       500
PID00602  DIM       500
PID00603  DIM       500
PID00604  DIM       500
PID00605  DIM       500
PID00606  DIM       500
PID00607  DIM       500
PID00608  DIM       500
PID00701  DIM       500
PID00801  DIM       500
PID00901  DIM       40[80]
PID00902  DIM       40[80]
PID00903  DIM       40[80]
PID00904  DIM       2[80]
PID00905  DIM       2[80]
PID00906  DIM       2[80]
PID00907  DIM       2[80]
PID00908  DIM       2[80]
PID01001  DIM       500
PID01002  DIM       500
PID01003  DIM       500
PID01004  DIM       500
PID01005  DIM       500
PID01006  DIM       500
PID01101  DIM       35[2]
PID01102  DIM       35[2]
PID01103  DIM       35[2]
PID01104  DIM       35[2]
PID01105  DIM       8[2]
PID01106  DIM       35[2]
PID01107  DIM       2[2]
PID01108  DIM       2[2]
PID01109  DIM       2[2]
PID01110  DIM       2[2]
PID01111  DIM       2[2]
PID01201  DIM       500
PID01301  DIM       500[2]
PID01302  DIM       500[2]
PID01303  DIM       500[2]
PID01304  DIM       500[2]
PID01305  DIM       500[2]
PID01306  DIM       500[2]
PID01307  DIM       500[2]
PID01308  DIM       500[2]
PID01309  DIM       500[2]
PID01401  DIM       500[2]
PID01402  DIM       500[2]
PID01403  DIM       500[2]
PID01404  DIM       500[2]
PID01405  DIM       500[2]
PID01406  DIM       500[2]
PID01407  DIM       500[2]
PID01408  DIM       500[2]
PID01409  DIM       500[2]
PID01501  DIM       500
PID01502  DIM       500
PID01503  DIM       500
PID01504  DIM       500
PID01505  DIM       500
PID01506  DIM       500
PID01601  DIM       500
PID01602  DIM       500
PID01603  DIM       500
PID01604  DIM       500
PID01605  DIM       500
PID01606  DIM       500
PID01701  DIM       500
PID01702  DIM       500
PID01703  DIM       500
PID01704  DIM       500
PID01705  DIM       500
PID01706  DIM       500
PID01801  DIM       500
PID01802  DIM       500
PID01803  DIM       500
PID01804  DIM       500
PID01805  DIM       500
PID01806  DIM       500
PID01901  DIM       500
PID02001  DIM       500
PID02002  DIM       500
PID02003  DIM       500
PID02101  DIM       500
PID02102  DIM       500
PID02103  DIM       500
PID02104  DIM       500
PID02105  DIM       500
PID02106  DIM       500
PID02201  DIM       500
PID02202  DIM       500
PID02203  DIM       500
PID02204  DIM       500
PID02205  DIM       500
PID02206  DIM       500
PID02301  DIM       500
PID02401  DIM       500
PID02501  DIM       500
PID02601  DIM       500
PID02602  DIM       500
PID02603  DIM       500
PID02604  DIM       500
PID02605  DIM       500
PID02606  DIM       500
PID02701  DIM       500
PID02702  DIM       500
PID02703  DIM       500
PID02704  DIM       500
PID02705  DIM       500
PID02706  DIM       500
PID02801  DIM       500
PID02802  DIM       500
PID02803  DIM       500
PID02804  DIM       500
PID02805  DIM       500
PID02806  DIM       500
PID02901  DIM       500
PID03001  DIM       500
PMBSFLAG  FORM      1             * provisional CMBS flag
.                                     0 = provisional CMBS from oprdetaf
.                                     1 = provisional CMBS from oprpmbaf
PMHCACTN  DIM       1             * add/update PMSHCPFD flag for DGCLIM02
PMWORFLG  FORM      1             * pmsworaf record flag
.                                     0 = record exists
.                                     1 = record not on file
PNEXPIRY  DIM       8             * pension number expiry date
PNCHKSMT  FORM      5
PNCHKDIV  FORM      4
PNCHKREM  FORM      2
PNCHKARR  FORM      1[9]
PNCHKCNT  FORM      2
PNCHKSMK  DIM       1[11]
POSNDIFF  FORM      4
PR100101  DIM       4
PR100201  DIM       3
PR100301  DIM       3
PR100302  DIM       50
PR100303  DIM       6
PR100304  DIM       1
PR100305  DIM       1
PR100306  DIM       1
PR100401  DIM       1
PR100501  DIM       26
PR100601  DIM       3
PR100701  DIM       1
PR100801  DIM       10
PR100802  DIM       35
PR100803  DIM       35
PR100804  DIM       10
PR100805  DIM       6
PR100806  DIM       1
PR100807  DIM       1
PR100808  DIM       1
PR100809  DIM       1
PR100810  DIM       1
PR100811  DIM       1
PR100812  DIM       1
PR100813  DIM       1
PR100814  DIM       1
PR100815  DIM       1
PR100901  DIM       1
PR101001  DIM       1
PR101101  DIM       10
PR101102  DIM       35
PR101103  DIM       35
PR101104  DIM       10
PR101105  DIM       6
PR101106  DIM       1
PR101107  DIM       1
PR101108  DIM       1
PR101109  DIM       1
PR101110  DIM       1
PR101111  DIM       1
PR101112  DIM       1
PR101113  DIM       1
PR101114  DIM       1
PR101115  DIM       1
PR101201  DIM       10
PR101202  DIM       35
PR101203  DIM       35
PR101204  DIM       10
PR101205  DIM       6
PR101206  DIM       1
PR101207  DIM       1
PR101208  DIM       1
PR101209  DIM       1
PR101210  DIM       1
PR101211  DIM       1
PR101212  DIM       1
PR101213  DIM       1
PR101214  DIM       1
PR101215  DIM       1
PR101301  DIM       3
PR101302  DIM       50
PR101303  DIM       6
PR101304  DIM       1
PR101305  DIM       1
PR101306  DIM       1
PR101401  DIM       1
PR101501  DIM       3
PR101502  DIM       50
PR101503  DIM       6
PR101504  DIM       1
PR101505  DIM       1
PR101506  DIM       1
PR101601  DIM       3
PR101602  DIM       50
PR101603  DIM       6
PR101604  DIM       1
PR101605  DIM       1
PR101606  DIM       1
PRA00101  DIM       250
PRA00102  DIM       1
PRA00103  DIM       250
PRA00104  DIM       1
PRA00105  DIM       1
PRA00106  DIM       1
PRA00201  DIM       250
PRA00202  DIM       250
PRA00203  DIM       1
PRA00204  DIM       1
PRA00205  DIM       1
PRA00206  DIM       1
PRA00301  DIM       5
PRA00401  DIM       1
PRA00501  DIM       1
PRA00502  DIM       1
PRA00503  DIM       1
PRA00504  DIM       1
PRA00601  DIM       100[9]
PRA00602  DIM       100[9]
PRA00603  DIM       100[9]
PRA00604  DIM       100[9]
PRA00701  DIM       1
PRA00702  DIM       1
PRA00703  DIM       1
PRA00704  DIM       1
PRA00801  DIM       8
PRA00901  DIM       1   * Note:  PRA fields from here on are only valid for
PRA00902  DIM       1            HL7 2.4
PRA00903  DIM       1
PRA00904  DIM       1
PRA00905  DIM       1
PRA00906  DIM       1
PRA01001  DIM       8
PRA01101  DIM       1
PRA01102  DIM       1
PRA01103  DIM       1
PRA01104  DIM       1
PRA01105  DIM       1
PRA01106  DIM       1
PRA01201  DIM       1
PRACFLAG  FORM      1             * practice record found flag
.                                     0 = record found
.                                     1 = record not found
PRD00101  DIM       2
PRD00102  DIM       1
PRD00103  DIM       6
PRD00104  DIM       1
PRD00105  DIM       1
PRD00106  DIM       1
PRD00201  DIM       1
PRD00301  DIM       1
PRD00401  DIM       1
PRD00501  DIM       1
PRD00601  DIM       1
PRD00701  DIM       10
PRD00702  DIM       6
PRD00703  DIM       100
PRD00801  DIM       1
PRD00901  DIM       1
PRDCOUNT  FORM      3             * PRD provider type count
PREPDIND  FORM      1             * 'Prep Start Time' Day Indicator
PREPTMIN  FORM      4             * 'Prep Start Time' - Minute representation
PREVCHAR  DIM       1
PROGTYPE  FORM      1             * VINAH Program Type
                                     0 = Standard Internal Referral (not VINAH)
                                     1 = HARP
                                     2 = HBPCCT
                                     3 = Medi-Hotel
                                     4 = Palliative Care
                                     5 = Post Acute Care
                                     6 = RIR
                                     7 = SACS
                                     8 = SOP
                                     9 = TCP / HBD
PRSTRIGF  FORM      1             * ESIS PMI trigger flag
.                                     0 = change to ESIS related PMI fields
.                                     1 = no change to ESIS related PMI fields
PRVARRAY  DIM       10[5]
.
PTMIS001  DIM       8           * Patient Admission Date (adate)
PTMIS002  DIM       8           * Patient Admission Time (atime)
PTMIS003  DIM       3           * Reason for preadmission cancel (Cat PC)
.
PV100101  DIM       500
PV100201  DIM       500
PV100301  DIM       500
PV100302  DIM       500
PV100303  DIM       500
PV100304  DIM       500
PV100305  DIM       500
PV100306  DIM       500
PV100307  DIM       500
PV100308  DIM       500
PV100309  DIM       500
PV100401  DIM       500
PV100501  DIM       500
PV100502  DIM       500
PV100503  DIM       500
PV100504  DIM       500
PV100505  DIM       500
PV100506  DIM       500
PV100601  DIM       500
PV100602  DIM       500
PV100603  DIM       500
PV100604  DIM       500
PV100605  DIM       500
PV100606  DIM       500
PV100607  DIM       500
PV100608  DIM       500
PV100609  DIM       500
PV100701  DIM       500
PV100702  DIM       500
PV100703  DIM       500
PV100704  DIM       500
PV100705  DIM       500
PV100706  DIM       500
PV100707  DIM       500
PV100708  DIM       500
PV100709  DIM       500
PV100710  DIM       500
PV100711  DIM       500
PV100712  DIM       500
PV100713  DIM       500
PV100714  DIM       500
PV100715  DIM       500
PV100801  DIM       500
PV100802  DIM       500
PV100803  DIM       500
PV100804  DIM       500
PV100805  DIM       500
PV100806  DIM       500
PV100807  DIM       500
PV100808  DIM       500
PV100809  DIM       500
PV100810  DIM       500
PV100811  DIM       500
PV100812  DIM       500
PV100813  DIM       500
PV100814  DIM       500
PV100815  DIM       500
PV100901  DIM       500
PV100902  DIM       500
PV100903  DIM       500
PV100904  DIM       500
PV100905  DIM       500
PV100906  DIM       500
PV100907  DIM       500
PV100908  DIM       500
PV100909  DIM       500
PV100910  DIM       500
PV100911  DIM       500
PV100912  DIM       500
PV100913  DIM       500
PV100914  DIM       500
PV100915  DIM       500
PV101001  DIM       500
PV101101  DIM       500
PV101102  DIM       500
PV101103  DIM       500
PV101104  DIM       500
PV101105  DIM       500
PV101106  DIM       500
PV101107  DIM       500
PV101108  DIM       500
PV101109  DIM       500
PV101201  DIM       500
PV101301  DIM       500
PV101401  DIM       500
PV101501  DIM       500
PV101601  DIM       500
PV101701  DIM       500
PV101702  DIM       500
PV101703  DIM       500
PV101704  DIM       500
PV101705  DIM       500
PV101706  DIM       500
PV101707  DIM       500
PV101708  DIM       500
PV101709  DIM       500
PV101710  DIM       500
PV101711  DIM       500
PV101712  DIM       500
PV101713  DIM       500
PV101714  DIM       500
PV101715  DIM       500
PV101801  DIM       500
PV101901  DIM       500
PV101902  DIM       500
PV101903  DIM       500
PV101904  DIM       500
PV101905  DIM       500
PV101906  DIM       500
PV102001  DIM       500
PV102002  DIM       500
PV102101  DIM       500
PV102201  DIM       500
PV102301  DIM       500
PV102401  DIM       500
PV102501  DIM       500
PV102601  DIM       500
PV102701  DIM       500
PV102801  DIM       500
PV102901  DIM       500
PV103001  DIM       500
PV103101  DIM       500
PV103201  DIM       500
PV103301  DIM       500
PV103401  DIM       500
PV103501  DIM       500
PV103601  DIM       500
PV103701  DIM       500
PV103702  DIM       500
PV103801  DIM       500
PV103802  DIM       500
PV103803  DIM       500
PV103804  DIM       500
PV103805  DIM       500
PV103806  DIM       500
PV103901  DIM       500
PV104001  DIM       500
PV104101  DIM       500
PV104201  DIM       500
PV104202  DIM       500
PV104203  DIM       500
PV104204  DIM       500
PV104205  DIM       500
PV104206  DIM       500
PV104207  DIM       500
PV104208  DIM       500
PV104209  DIM       500
PV104301  DIM       500
PV104302  DIM       500
PV104303  DIM       500
PV104304  DIM       500
PV104305  DIM       500
PV104306  DIM       500
PV104307  DIM       500
PV104308  DIM       500
PV104309  DIM       500
PV104401  DIM       500
PV104501  DIM       500
PV104601  DIM       500
PV104701  DIM       500
PV104801  DIM       500
PV104901  DIM       500
PV105001  DIM       500
PV105002  DIM       500
PV105003  DIM       500
PV105004  DIM       500
PV105005  DIM       500
PV105006  DIM       500
PV105101  DIM       500
PV105201  DIM       500
PV105202  DIM       500
PV105203  DIM       500
PV105204  DIM       500
PV105205  DIM       500
PV105206  DIM       500
PV105207  DIM       500
PV105208  DIM       500
PV105209  DIM       500
PV105210  DIM       500
PV105211  DIM       500
PV105212  DIM       500
PV105213  DIM       500
PV105214  DIM       500
PV105215  DIM       500
PV18HCPC  DIM       10            * HCP code for provider
PV19HCPC  DIM       10            * HCP code for provider
PV200101  DIM       500
PV200102  DIM       500
PV200103  DIM       500
PV200104  DIM       500
PV200105  DIM       500
PV200106  DIM       500
PV200107  DIM       500
PV200108  DIM       500
PV200109  DIM       500
PV200201  DIM       500
PV200202  DIM       500
PV200203  DIM       500
PV200204  DIM       500
PV200205  DIM       500
PV200206  DIM       500
PV200301  DIM       500
PV200302  DIM       500
PV200303  DIM       500
PV200304  DIM       500
PV200305  DIM       500
PV200306  DIM       500
PV200401  DIM       500
PV200402  DIM       500
PV200403  DIM       500
PV200404  DIM       500
PV200405  DIM       500
PV200406  DIM       500
PV200501  DIM       500
PV200601  DIM       500
PV200701  DIM       500
PV200801  DIM       500
PV200901  DIM       500
PV201001  DIM       500
PV201101  DIM       500
PV201201  DIM       500
PV201301  DIM       500
PV201302  DIM       500
PV201303  DIM       500
PV201304  DIM       500
PV201305  DIM       500
PV201306  DIM       500
PV201307  DIM       500
PV201308  DIM       500
PV201309  DIM       500
PV201310  DIM       500
PV201311  DIM       500
PV201312  DIM       500
PV201313  DIM       500
PV201314  DIM       500
PV201315  DIM       500
PV201401  DIM       500
PV201501  DIM       500
PV201601  DIM       500
PV201701  DIM       500
PV201801  DIM       500
PV201901  DIM       500
PV202001  DIM       500
PV202101  DIM       500
PV202201  DIM       500
PV202301  DIM       500
PV202302  DIM       500
PV202303  DIM       500
PV202304  DIM       500
PV202305  DIM       500
PV202306  DIM       500
PV202307  DIM       500
PV202308  DIM       500
PV202309  DIM       500
PV202401  DIM       500
PV202501  DIM       500
PV202601  DIM       500
PV202701  DIM       500
PV202801  DIM       500
PV202901  DIM       500
PV203001  DIM       500
PV203002  DIM       500
PV203003  DIM       500
PV203004  DIM       500
PV203005  DIM       500
PV203006  DIM       500
PV203101  DIM       500
PV203201  DIM       500
PV203301  DIM       500
PV203401  DIM       500
PV203501  DIM       500
PV203601  DIM       500
PV203701  DIM       500
P03ANTYP  DIM       3
P03FAIL   FORM      8
P03RECV   FORM      8
P03SUCC   FORM      8
.
QRYDATA   DIM       240
QRYNAME   DIM       9
QUICKREG  FORM      1             * Quick registration flag
.                                   0 = Not in use (default value)
.                                   1 = Using Quick Registration
.
REASDESC  DIM       20
RECOPMIN  FORM      1             * Recalculate Actual Op Mins flag
RECVMESS  DIM       4000          * message buffer
REFARRAY  DIM       1[4]          * REF mandatory segment array
.                                      element 1 = MSH
.                                      element 2 = RF1
.                                      element 3 = PID
.                                      element 4 = PV1
REFRDEPT  DIM       3             * referral dept (Cat CG) used for MOSAIQ
REPSEPAR  DIM       1             * repetition separator character
REPTNCNT  FORM      3             * repetition count
RF100101  DIM       1
RF100102  DIM       15
RF100103  DIM       6
RF100104  DIM       1
RF100105  DIM       1
RF100106  DIM       1
RF100201  DIM       1
RF100301  DIM       1
RF100401  DIM       1
RF100501  DIM       1
RF100601  DIM       20
RF100602  DIM       15
RF100603  DIM       6
RF100604  DIM       1
RF100701  DIM       8
RF100801  DIM       1
RF100901  DIM       1
RF101001  DIM       1
RF101101  DIM       8
RF101102  DIM       1
RF101103  DIM       6
RF101104  DIM       1
RGS00101  DIM       4             * RGS Component variables
RGS00201  DIM       3
RGS00301  DIM       1
RGS00302  DIM       1
RGS00303  DIM       1
RGS00304  DIM       1
RGS00305  DIM       1
RGS00306  DIM       1
RIAUDFLG  FORM      1             * Referral In audit flag
.                                    0 = no audits written
.                                    1 = before audit written
ROL00101  DIM       1
ROL00102  DIM       1
ROL00103  DIM       1
ROL00104  DIM       1
ROL00201  DIM       2
ROL00301  DIM       3
ROL00302  DIM       50
ROL00303  DIM       6
ROL00304  DIM       1
ROL00305  DIM       1
ROL00306  DIM       1
ROL00401  DIM       10
ROL00402  DIM       35
ROL00403  DIM       35
ROL00404  DIM       10
ROL00405  DIM       6
ROL00406  DIM       1
ROL00407  DIM       1
ROL00408  DIM       1
ROL00409  DIM       1
ROL00410  DIM       1
ROL00411  DIM       1
ROL00412  DIM       1
ROL00413  DIM       1
ROL00414  DIM       1
ROL00415  DIM       1
ROL00501  DIM       26
ROL00601  DIM       26
ROL00701  DIM       3
ROL00702  DIM       50
ROL00703  DIM       6
ROL00704  DIM       1
ROL00705  DIM       1
ROL00706  DIM       1
ROL00801  DIM       3
ROL00802  DIM       50
ROL00803  DIM       6
ROL00804  DIM       1
ROL00805  DIM       1
ROL00806  DIM       1
ROL00901  DIM       3
ROL00902  DIM       50
ROL00903  DIM       6
ROL00904  DIM       1
ROL00905  DIM       1
ROL00906  DIM       1
ROL01001  DIM       3
ROL01002  DIM       50
ROL01003  DIM       6
ROL01004  DIM       1
ROL01005  DIM       1
ROL01006  DIM       1
RTDAYS    FORM      4
.
S12ARRAY  DIM       1[4]          * S12 mandatory segment array
.                                      element 1 = MSH
.                                      element 2 = SCH
.                                      element 3 = PID
.                                      element 4 = PV1
S12FAIL   FORM      8
S12RECV   FORM      8
S12SUCC   FORM      8
.
S13ARRAY  DIM       1[4]          * S13 mandatory segment array
.                                      element 1 = MSH
.                                      element 2 = SCH
.                                      element 3 = PID
.                                      element 4 = PV1
S13FAIL   FORM      8
S13RECV   FORM      8
S13SUCC   FORM      8
.
S14ARRAY  DIM       1[6]          * S14 mandatory segment array
.                                      element 1 = MSH
.                                      element 2 = SCH
.                                      element 3 = PID
.                                      element 4 = PV1
.                                      element 5 = RGS (only for Theatre)
.                                      element 6 = ZSC (only for Theatre)
S14FAIL   FORM      8
S14RECV   FORM      8
S14SUCC   FORM      8
.
S15ARRAY  DIM       1[4]          * S15 mandatory segment array
.                                      element 1 = MSH
.                                      element 2 = SCH
.                                      element 3 = PID
.                                      element 4 = PV1
S15FAIL   FORM      8
S15RECV   FORM      8
S15SUCC   FORM      8
.
S26ARRAY  DIM       1[4]          * S26 mandatory segment array
.                                      element 1 = MSH
.                                      element 2 = SCH
.                                      element 3 = PID
.                                      element 4 = PV1
S26FAIL   FORM      8
S26RECV   FORM      8
S26SUCC   FORM      8
.
SAVADMN   DIM       8             * save admission number
SAVAPPLI  DIM       180           * save application variable
SAVBOOK   DIM       8
SAVCLAIM  DIM       3             * save claim code variable
SAVCOMP2  DIM       3             * saved component 2 for NK1.31
SAVCOMP3  DIM       2             * saved component 3 for NK1.31
SAVCOUNT  FORM      1
SAVDATE   DIM       8
SAVEBED   DIM       3
SAVEBRQN  DIM       8
SAVECASE  DIM       28
SAVEDATE  DIM       8
SAVEDETL  FORM      1
SAVEHOSP  DIM       3
SAVEIND1  DIM       1
SAVEIND4  DIM       1
SAVEIND7  DIM       1
SAVEKEY9  DIM       9
SAVELINE  FORM      3
SAVELINK  DIM       3
SAVEMDOB  DIM       8
SAVEPCTR  DIM       2
SAVEPHCP  DIM       10
SAVEPRAC  DIM       10
SAVEPROV  DIM       10[2]
SAVEPRTY  DIM       3
SAVEREFN  DIM       8
SAVESNAM  DIM       40
SAVEXFNM  DIM       40
SAVEXSNM  DIM       40
SAVETITL  DIM       4
SAVEPSEX  DIM       1
SAVEPDOB  DIM       8
SAVEPFGN  DIM       25
SAVEPMST  DIM       3
SAVEPREG  DIM       3
SAVEPCNT  DIM       3
SAVEPTYP  DIM       3
SAVEABRG  DIM       3
SAVEUSR7  DIM       3
SAVEMEDI  DIM       10
SAVEMCCD  DIM       2
SAVEMEDC  DIM       8
SAVECONP  DIM       1
SAVEUPRF  DIM       3
SAVEINTR  DIM       1
SAVELNG1  DIM       3
SAVEPRVI  DIM       3
SAVEFLDR  DIM       3
SAVESN16  DIM       1
SPPXUCC4  DIM       3
SPPXUCC5  DIM       3
SPPXATF1  DIM       80
SPPXATF2  DIM       80
SAVECUID  DIM       8
SAVECDAT  DIM       8
SAVECTIM  DIM       8
SAVERSTA  DIM       1
SAVERDAT  DIM       8
SAVETIME  DIM       6            * saved time for WTEMHS00 (EMR WRTHIS00)
SAVETRGD  DIM       8
SAVETRGS  DIM       3
SAVERETN  FORM      1
SAVESIN1  DIM       1
SAVESIN7  DIM       1
SAVESIN8  DIM       1
SAVESIN9  DIM       1
SAVESN11  DIM       1
SAVESTAT  DIM       1
SAVEUDAT  DIM       8
SAVEUDT3  DIM       8
SAVEUTIM  DIM       8
SAVEURNO  DIM       8
SAVEWARD  DIM       3
SAVFACIL  DIM       180           * save facility variable
SAVFORM3  FORM      3
SAVFORM4  FORM      4
SAVHFUND  DIM       6             * save health fund variable
SAVHTBLE  DIM       8             * save health fund table
SAVKEY15  DIM       15
SAVKEY16  DIM       16
SAVKEY19  DIM       19
SAVKEY22  DIM       19
SAVKEY25  DIM       25
SAVKEY28  DIM       28
SAVKEY31  DIM       31
SAVKEY32  DIM       32
SAVKEY35  DIM       35
SAVKY115  DIM       115
SAVMESID  DIM       20            * saved incoming message id
SAVMHPID  DIM       3             * saved message header processing id
SAVMTYPE  DIM       3             * save message type for ACK
SAVNMPI   DIM       20
SAVOBAST  DIM       5             * save outbokaf.obastrt (session start time)
SAVOVRCD  FORM      1             * save overcond
SAVPCARD  DIM       3             * save pension concession card code (cat ct)
SAVPSSCD  DIM       4
SAVSEGMT  DIM       3
SAVTDEPT  DIM       3
SAVTIME   DIM       8
SAVTRDAT  DIM       8
SAVTRDOC  DIM       10
SAVTRTIM  DIM       6
SAVTXWRD  DIM       3
SAVVPRTY  DIM       3
SAVVREFN  DIM       8
SAVVRSTA  DIM       1
SAVVREFD  DIM       8
SAVVTRGD  DIM       8
SAVVTRGS  DIM       3
SAVVUDT3  DIM       8
.
.Save variables (from WATHISFD)
.--------------
NBRFLAG   FORM      1
SAVEOLDP  DIM       9
SAVEPCHG  DIM       3
SAVEPRIO  DIM       3      Priority (Cat TP)
SAVERANK  DIM       6      Patient Rank
SAVEDAT2  DIM       8      Date Last Reviewed (CCYYMMDD)
SAVEDAT3  DIM       8      Scheduled Adm Date (CCYYMMDD)
SAVERDT3  DIM       3      Reason Change Scheduled Adm Date
SAVESCHA  DIM       8      Scheduled Adm Date (CCYYMMDD)
SAVEBSCD  DIM       2      Booking Status Code
SAVERCSD  DIM       2      Reason for changing scheduled admission date
SAVBMDT   DIM       8
SAVDBFT   DIM       8
SAVRCDT   DIM       8
SAVDOCTR  DIM       6
SAVEBOOK  DIM       8
SAVEUNIT  DIM       3
.SAVESTAT  FORM      1
SAVEBOKC  DIM       3
SAVEBCAN  DIM       3
SAVEBRSR  DIM       3
SAVEDRSA  DIM       8
SAVEDOSA  DIM       8
SAVEPHSP  DIM       3
SAVEPCAT  DIM       3
SAVEDTAD  DIM       8
SAVECSST  DIM       1
SAVECSDT  DIM       8
SAVEASSR  DIM       10
.
.Save variables (from EMRWEB02)
SAVEDRDT  DIM       8
SAVEDRTM  DIM       6
SAVENRDT  DIM       8
SAVENRTM  DIM       6
SAVEDOCT  DIM       10
SAVENURS  DIM       10
SAVEOTDC  DIM       10
SAVEOTDT  DIM       8
SAVEOTTM  DIM       6
.
SCH00101  DIM       75
SCH00102  DIM       75
SCH00103  DIM       1
SCH00104  DIM       1
SCH00201  DIM       1
SCH00202  DIM       1
SCH00203  DIM       1
SCH00204  DIM       1
SCH00301  DIM       1
SCH00401  DIM       1
SCH00402  DIM       1
SCH00403  DIM       1
SCH00404  DIM       1
SCH00501  DIM       1
SCH00502  DIM       1
SCH00503  DIM       1
SCH00504  DIM       1
SCH00505  DIM       1
SCH00506  DIM       1
SCH00601  DIM       10
SCH00602  DIM       1
SCH00603  DIM       10
SCH00604  DIM       1
SCH00605  DIM       1
SCH00606  DIM       1
SCH00701  DIM       1
SCH00702  DIM       1
SCH00703  DIM       1
SCH00704  DIM       1
SCH00705  DIM       1
SCH00706  DIM       1
SCH00801  DIM       1
SCH00802  DIM       1
SCH00803  DIM       1
SCH00804  DIM       1
SCH00805  DIM       1
SCH00806  DIM       1
SCH00901  DIM       1
SCH01001  DIM       1
SCH01002  DIM       1
SCH01003  DIM       1
SCH01004  DIM       1
SCH01005  DIM       1
SCH01006  DIM       1
SCH01101  DIM       5
SCH01102  DIM       1
SCH01103  DIM       1
SCH01104  DIM       14
SCH01105  DIM       14
SCH01106  DIM       1
SCH01107  DIM       1
SCH01108  DIM       1
SCH01109  DIM       1
SCH01110  DIM       1
SCH01111  DIM       1
SCH01112  DIM       1
SCH01201  DIM       1
SCH01202  DIM       1
SCH01203  DIM       1
SCH01204  DIM       1
SCH01205  DIM       1
SCH01206  DIM       1
SCH01207  DIM       1
SCH01208  DIM       1
SCH01209  DIM       1
SCH01210  DIM       1
SCH01211  DIM       1
SCH01212  DIM       1
SCH01213  DIM       1
SCH01214  DIM       1
SCH01215  DIM       1
SCH01301  DIM       1
SCH01302  DIM       1
SCH01303  DIM       1
SCH01304  DIM       1
SCH01305  DIM       1
SCH01306  DIM       1
SCH01307  DIM       1
SCH01308  DIM       1
SCH01309  DIM       1
SCH01401  DIM       1
SCH01402  DIM       1
SCH01403  DIM       1
SCH01404  DIM       1
SCH01405  DIM       1
SCH01406  DIM       1
SCH01407  DIM       1
SCH01408  DIM       1
SCH01409  DIM       1
SCH01410  DIM       1
SCH01411  DIM       1
SCH01501  DIM       1
SCH01502  DIM       1
SCH01503  DIM       1
SCH01504  DIM       1
SCH01505  DIM       1
SCH01506  DIM       1
SCH01507  DIM       1
SCH01508  DIM       1
SCH01509  DIM       1
SCH01601  DIM       10
SCH01602  DIM       1
SCH01603  DIM       1
SCH01604  DIM       1
SCH01605  DIM       1
SCH01606  DIM       1
SCH01607  DIM       1
SCH01608  DIM       1
SCH01609  DIM       10
SCH01610  DIM       1
SCH01611  DIM       1
SCH01612  DIM       1
SCH01613  DIM       1
SCH01614  DIM       1
SCH01615  DIM       1
SCH01701  DIM       1
SCH01702  DIM       1
SCH01703  DIM       1
SCH01704  DIM       1
SCH01705  DIM       1
SCH01706  DIM       1
SCH01707  DIM       1
SCH01708  DIM       1
SCH01709  DIM       1
SCH01801  DIM       1
SCH01802  DIM       1
SCH01803  DIM       1
SCH01804  DIM       1
SCH01805  DIM       1
SCH01806  DIM       1
SCH01807  DIM       1
SCH01808  DIM       1
SCH01809  DIM       1
SCH01810  DIM       1
SCH01811  DIM       1
SCH01901  DIM       1
SCH01902  DIM       1
SCH01903  DIM       1
SCH01904  DIM       1
SCH01905  DIM       1
SCH01906  DIM       1
SCH01907  DIM       1
SCH01908  DIM       1
SCH01909  DIM       1
SCH02001  DIM       10
SCH02002  DIM       1
SCH02003  DIM       1
SCH02004  DIM       1
SCH02005  DIM       1
SCH02006  DIM       1
SCH02007  DIM       1
SCH02008  DIM       1
SCH02009  DIM       10
SCH02010  DIM       1
SCH02011  DIM       1
SCH02012  DIM       1
SCH02013  DIM       1
SCH02014  DIM       1
SCH02015  DIM       1
SCH02101  DIM       1
SCH02102  DIM       1
SCH02103  DIM       1
SCH02104  DIM       1
SCH02105  DIM       1
SCH02106  DIM       1
SCH02107  DIM       1
SCH02108  DIM       1
SCH02109  DIM       1
SCH02201  DIM       100
SCH02202  DIM       1
SCH02203  DIM       1
SCH02204  DIM       100
SCH02205  DIM       1
SCH02206  DIM       1
SCH02207  DIM       1
SCH02208  DIM       1
SCH02209  DIM       1
SCH02301  DIM       1
SCH02302  DIM       1
SCH02303  DIM       1
SCH02304  DIM       1
SCH02401  DIM       1
SCH02402  DIM       1
SCH02403  DIM       1
SCH02404  DIM       1
SCH02501  DIM       100
SCH02502  DIM       1
SCH02503  DIM       100
SCH02504  DIM       1
SCH02505  DIM       1
SCH02506  DIM       1
SCH22HSP  DIM       3             * save hospital code from SCH.22
SEC       DIM       2
SECTIME   DIM       2
SEENTIME  DIM       5
SEGCOUNT  FORM      3             * segment sequence count
SEGMENT   DIM       3             * 3 character HL7 segment code
SEGNUMBR  FORM      2             * segment number
.                                     1 = MSH
.                                     2 = EVN
.                                     3 = PID
.                                     4 = NK1
.                                     5 = PV1
.                                     6 = MRG
.                                     7 = FT1
.                                     8 = ZXP
.                                     9 = ZAL
.                                    10 = RF1
.                                    11 = PRD
.                                    12 = ZXV
.                                    13 = PV2
.                                    14 = MFI
.                                    15 = MFE
.                                    16 = STF
.                                    17 = PRA
.                                    18 = ZPR
.                                    19 = PR1
.                                    20 = ROL
.                                    21 = DG1
.                                    22 = ZST
.                                    23 = ZSF
.                                    24 = SCH
.                                    25 = RGS
.                                    26 = ZSC
.                                    27 = ZFT
.                                    28 = NTE
.                                    29 = ARQ
.                                    30 = GT1
.                                    31 = IN1
.                                    32 = AIS
.                                    33 = AIL
.                                    34 = AIP
.                                    35 = ZTR
.                                    36 = ZNT
SENTMESS  DIM       4000
SKEY30    DIM       30
SNEXPIRY  DIM       8             * safety net expiry date
SPCHFLAG  FORM      1             * special character flag
.                                    1 = pipe
.                                    2 = caret
.                                    3 = ampersand
.                                    4 = tilda
.                                    5 = backslash
.                                    6 = tab
SREXPIRY  DIM       8             * senior's card expiry date
SRMARRAY  DIM       1[6]          * SRM mandatory segment array
.                                      element 1 = MSH
.0861257                               element 2 = ARQ ? EVN
.                                      element 3 = PID
.                                      element 4 = PV1
.                                      element 5 = PV2
.0861257                               element 6 = NTE ?
STAFFFLG  FORM      1             * staff record found flag
.                                     0 = record found
.                                     1 = record not found
STAFFLAG  FORM      1             * Default staff flag: 1 = no, 0/2/blank = yes
STAFTYPE  FORM      2
STBYPAT   DIM       8
STBYBED   DIM       3
STBYWRD   DIM       3
STF00101  DIM       250
STF00102  DIM       1
STF00103  DIM       100
STF00104  DIM       1
STF00105  DIM       1
STF00106  DIM       1
STF00201  DIM       60
STF00202  DIM       1
STF00203  DIM       1
STF00204  DIM       1
STF00205  DIM       1
STF00206  DIM       1
STF00301  DIM       250
STF00302  DIM       250
STF00303  DIM       1
STF00304  DIM       1
STF00305  DIM       250
STF00306  DIM       1
STF00307  DIM       1
STF00308  DIM       1
STF00401  DIM       50
STF00501  DIM       1
STF00601  DIM       26
STF00701  DIM       1
STF00801  DIM       3[5]
STF00802  DIM       50[5]
STF00803  DIM       6[5]
STF00804  DIM       1[5]
STF00805  DIM       1[5]
STF00806  DIM       1[5]
STF00901  DIM       1
STF00902  DIM       1
STF00903  DIM       1
STF00904  DIM       1
STF00905  DIM       1
STF00906  DIM       1
STF01001  DIM       80[6]
STF01002  DIM       1[6]
STF01003  DIM       10[6]
STF01004  DIM       1[6]
STF01005  DIM       1[6]
STF01006  DIM       1[6]
STF01007  DIM       1[6]
STF01008  DIM       1[6]
STF01009  DIM       1[6]
STF01101  DIM       60[2]
STF01102  DIM       60[2]
STF01103  DIM       60[2]
STF01104  DIM       60[2]
STF01105  DIM       8[2]
STF01106  DIM       1[2]
STF01107  DIM       1[2]
STF01108  DIM       1[2]
STF01109  DIM       1[2]
STF01110  DIM       1[2]
STF01111  DIM       1[2]
STF01112  DIM       1[2]
STF01201  DIM       26
STF01202  DIM       1
STF01301  DIM       26
STF01302  DIM       1
STF01401  DIM       1
STF01402  DIM       1
STF01403  DIM       1
STF01404  DIM       1
STF01405  DIM       1
STF01406  DIM       1
STF01501  DIM       80[5]
STF01601  DIM       1
STF01602  DIM       1
STF01603  DIM       1
STF01604  DIM       1
STF01605  DIM       1
STF01606  DIM       1
STF01701  DIM       1
STF01702  DIM       1
STF01703  DIM       1
STF01704  DIM       1
STF01705  DIM       1
STF01706  DIM       1
STF01801  DIM       1
STF01901  DIM       1
STF01902  DIM       1
STF02001  DIM       1
STF02002  DIM       1
STF02003  DIM       1
STF02004  DIM       1
STF02005  DIM       1
STF02006  DIM       1
STF02101  DIM       1
STF02201  DIM       1
STF02202  DIM       1
STF02203  DIM       1
STF02301  DIM       1
STF02401  DIM       1
STF02501  DIM       1
STF02601  DIM       1
STF02701  DIM       1   * Note:  STF fields from here on are only valid for
STF02702  DIM       1            HL7 2.4
STF02703  DIM       1
STF02704  DIM       1
STF02705  DIM       1
STF02706  DIM       1
STF02801  DIM       1
STF02802  DIM       1
STF02803  DIM       1
STF02804  DIM       1
STF02805  DIM       1
STF02806  DIM       1
STF02901  DIM       1
STRNGLEN  FORM      4
STRTDATE  DIM       8
STRTPOSN  FORM      4
SUBSEPAR  DIM       1             * sub-component separator
SURSYST   FORM      1
SVALDIA1  DIM       9             * save alldiaaf.aldidiag (ZXV.99[1])
SVALDIA2  DIM       9             * save alldiaaf.aldidiag (ZXV.99[2])
SVALDIA3  DIM       9             * save alldiaaf.aldidiag (ZXV.99[3])
SVALDIA4  DIM       9             * save alldiaaf.aldidiag (ZXV.99[4])
SVALDIA5  DIM       9             * save alldiaaf.aldidiag (ZXV.99[5])
SVALPROB  DIM       9             * save allprraf.alprprob (ZXV.98)
SVKEY115  DIM       115
SVDG1CNT  FORM      4
SVFT1CNT  FORM      4
SVNK1CNT  FORM      4
SVNTECNT  FORM      4
SVZALCNT  FORM      4
SVZFTCNT  FORM      4
SVZSFCNT  FORM      4
SWPCHRGE  FORM      8.2
SWPMRECN  FORM      3
.
TSRVDATE  DIM       8
TADTTYPE  DIM       3
TCPIPORT  DIM       40            * receiving machine name and port number
TEAMNUMB  DIM       1
TEMPFILA  DIM       8
TEMPFILB  DIM       8
TEMPFILC  DIM       8
TEMPFILD  DIM       8
TEMPFILF  DIM       8
TEXTAREA  FORM      1
THCFLG    FORM      2
TIMEDONE  FORM      1
TIMEIS    DIM       8
TIMSTAMP  DIM       8
TMPSTRNG  DIM       4000          * buffer for reading in message
TODATE    DIM       8
TODYDATE  DIM       8
TOPASID   DIM       20
TOTMMBS   FORM      3
TOTDTRA   FORM      3
TRANFLAG  FORM      1             * transfer flag
.                                    1 = ward/bed
.                                    2 = ward only
.                                    3 = standby
TRANSFLG  FORM      1             * transaction type flag for P03
.                                   1 = Add Miscellaneous Charge
.                                   2 = Delete Miscellaneous Charge
.                                   3 = Add CMBS Item
.                                   4 = Delete CMBS Item
.                                   5 = Update Invoice on Hold
.                                   6 = Remove Invoice on Hold
TRDOCDAT  DIM       8
TXTFNAME  DIM       8             * text file name variable
.
UNIQUEKY  DIM       10
UPDDFLAG  FORM      1             * Update Data Flag
.                                    0 = No (don't write/update PAS data tables)
.                                    1 = Yes (write/update PAS data tables)
UPDTMFLG  FORM      1             * Update Team Indicator
UPDTTYPE  DIM       2
UPDTEMHI  DIM       5             * emrhisaf update type
NEWVALUE  DIM       80            * emrchaaf new field value
UPDFIELD  DIM       2             * emrchaaf update type
UPDVALUE  DIM       80            * emrchaaf old field value
URCHKDGT  FORM      4
URCHKPRD  FORM      2
URNFOUND  FORM      1             * U/R Number found flag
.                                     0 = U/R found
.                                     1 = no U/R found
URNLNGTH  FORM      2
URNOWGHT  FORM      1
URNUMBER  DIM       8
URWTARAY  INIT      "234567"
USERID    DIM       10
USERNAME  DIM       10
.
VAR       DIM       127
VINAHFLG  FORM      1             * VINAH Flag
.                                   0 = writing audits in VINAHDEF
.                                   1 = not writing audits in VINAHDEF
.
VINAHREF  DIM       8
.
WEBPASID  DIM       10
WLOTANAE  DIM       8
WLOTPACN  DIM       8
WTCNA38M  FORM      1
WTCNI13M  DIM       1
WTCNI14M  DIM       1
WTCNBRSR  FORM      1
WTCNUSBC  FORM      1
.
XCHGFLAG  FORM      1
XXDESC    DIM       80
XXFILE    DIM       8
.
ZAL00101  DIM       3
ZAL00201  DIM       2
ZAL00202  DIM       50
ZAL00203  DIM       6
ZAL00204  DIM       1
ZAL00205  DIM       1
ZAL00206  DIM       1
ZAL00301  DIM       3
ZAL00302  DIM       50
ZAL00303  DIM       6
ZAL00304  DIM       1
ZAL00305  DIM       1
ZAL00306  DIM       1
ZAL00401  DIM       3
ZAL00402  DIM       50
ZAL00403  DIM       6
ZAL00404  DIM       1
ZAL00405  DIM       1
ZAL00406  DIM       1
ZAL00501  DIM       8
ZAL00601  DIM       2
ZAL00701  DIM       8
ZAL00801  DIM       8
ZAL00901  DIM       8
ZAL01001  DIM       10
ZAL01002  DIM       35
ZAL01003  DIM       35
ZAL01004  DIM       10
ZAL01005  DIM       6
ZAL01006  DIM       1
ZAL01007  DIM       1
ZAL01008  DIM       1
ZAL01009  DIM       1
ZAL01010  DIM       1
ZAL01011  DIM       1
ZAL01012  DIM       1
ZAL01013  DIM       1
ZAL01014  DIM       1
ZAL01015  DIM       1
ZAL01101  DIM       14
ZAL01201  DIM       80
ZAL01202  DIM       30
ZAL01203  DIM       6
ZAL01204  DIM       1
ZAL01205  DIM       1
ZAL01206  DIM       1
ZAL01301  DIM       3
ZAL01302  DIM       50
ZAL01303  DIM       6
ZAL01304  DIM       1
ZAL01305  DIM       1
ZAL01306  DIM       1
ZAL01401  DIM       250
ZAL01501  DIM       500[2]
ZAL01502  DIM       500[2]
ZAL01503  DIM       500[2]
ZAL01504  DIM       500[2]
ZAL01505  DIM       500[2]
ZAL01506  DIM       500[2]
ZALCOUNT  FORM      3
ZALFOUND  FORM      1             * ZAL found flag
.                                     0 = one or more ZAL segments received
.                                     1 = no ZAL segments received
ZFT00101  DIM       500
ZFT00201  DIM       500
ZFT00301  DIM       500
ZFT00401  DIM       500
ZFT00501  DIM       500
ZFT00601  DIM       500
ZFTCOUNT  FORM      3
ZFTFOUND  FORM      1             * ZFT found flag
.                                     0 = one or more ZFT segments received
.                                     1 = no ZFT segments received
ZSC00101  DIM       75
ZSC00102  DIM       75
ZSC00103  DIM       1
ZSC00104  DIM       1
ZSC00201  DIM       8
ZSC00301  DIM       6
ZSC00401  DIM       6
ZSC00402  DIM       50
ZSC00403  DIM       10
ZSC00404  DIM       1
ZSC00405  DIM       1
ZSC00406  DIM       1
ZSC00501  DIM       6
ZSC00601  DIM       6
ZSC00701  DIM       6
ZSC00801  DIM       6
ZSC00901  DIM       6
ZSC01001  DIM       6
ZSC01002  DIM       50
ZSC01003  DIM       10
ZSC01004  DIM       1
ZSC01005  DIM       1
ZSC01006  DIM       1
ZSC01101  DIM       6
ZSC01102  DIM       50
ZSC01103  DIM       10
ZSC01104  DIM       1
ZSC01105  DIM       1
ZSC01106  DIM       1
ZSC01201  DIM       6
ZSC01301  DIM       6
ZSC01401  DIM       3
ZSC01501  DIM       20
ZSC01601  DIM       20
ZSC01701  DIM       20
ZSC01801  DIM       20
ZSC01901  DIM       20
ZSC02001  DIM       20
ZSC02101  DIM       20
ZSC02201  DIM       20
ZSC02301  DIM       20
ZSC02401  DIM       20
ZSC02501  DIM       26
ZSC02601  DIM       20
ZSC02602  DIM       40
ZSC02603  DIM       40
ZSC02604  DIM       40
ZSC02605  DIM       1
ZSC02606  DIM       10
ZSC02607  DIM       1
ZSC02608  DIM       6
ZSC02609  DIM       1
ZSC02610  DIM       1
ZSC02611  DIM       1
ZSC02612  DIM       1
ZSC02613  DIM       1
ZSC02614  DIM       1
ZSC02615  DIM       1
ZSC02701  DIM       20
ZSC02702  DIM       40
ZSC02703  DIM       40
ZSC02704  DIM       40
ZSC02705  DIM       1
ZSC02706  DIM       10
ZSC02707  DIM       1
ZSC02708  DIM       6
ZSC02709  DIM       1
ZSC02710  DIM       1
ZSC02711  DIM       1
ZSC02712  DIM       1
ZSC02713  DIM       1
ZSC02714  DIM       1
ZSC02715  DIM       1
ZSC02801  DIM       20
ZSC02802  DIM       40
ZSC02803  DIM       40
ZSC02804  DIM       40
ZSC02805  DIM       1
ZSC02806  DIM       10
ZSC02807  DIM       1
ZSC02808  DIM       6
ZSC02809  DIM       1
ZSC02810  DIM       1
ZSC02811  DIM       1
ZSC02812  DIM       1
ZSC02813  DIM       1
ZSC02814  DIM       1
ZSC02815  DIM       1
ZSC02901  DIM       20
ZSC02902  DIM       40
ZSC02903  DIM       40
ZSC02904  DIM       40
ZSC02905  DIM       1
ZSC02906  DIM       10
ZSC02907  DIM       1
ZSC02908  DIM       6
ZSC02909  DIM       1
ZSC02910  DIM       1
ZSC02911  DIM       1
ZSC02912  DIM       1
ZSC02913  DIM       1
ZSC02914  DIM       1
ZSC02915  DIM       1
ZSC03001  DIM       20
ZSC03002  DIM       40
ZSC03003  DIM       40
ZSC03004  DIM       40
ZSC03005  DIM       1
ZSC03006  DIM       10
ZSC03007  DIM       1
ZSC03008  DIM       6
ZSC03009  DIM       1
ZSC03010  DIM       1
ZSC03011  DIM       1
ZSC03012  DIM       1
ZSC03013  DIM       1
ZSC03014  DIM       1
ZSC03015  DIM       1
ZSC03101  DIM       20
ZSC03102  DIM       40
ZSC03103  DIM       40
ZSC03104  DIM       40
ZSC03105  DIM       1
ZSC03106  DIM       10
ZSC03107  DIM       1
ZSC03108  DIM       6
ZSC03109  DIM       1
ZSC03110  DIM       1
ZSC03111  DIM       1
ZSC03112  DIM       1
ZSC03113  DIM       1
ZSC03114  DIM       1
ZSC03115  DIM       1
ZSC03201  DIM       20
ZSC03202  DIM       40
ZSC03203  DIM       40
ZSC03204  DIM       40
ZSC03205  DIM       1
ZSC03206  DIM       10
ZSC03207  DIM       1
ZSC03208  DIM       6
ZSC03209  DIM       1
ZSC03210  DIM       1
ZSC03211  DIM       1
ZSC03212  DIM       1
ZSC03213  DIM       1
ZSC03214  DIM       1
ZSC03215  DIM       1
ZSC03301  DIM       10
ZSC03302  DIM       50
ZSC03303  DIM       6
ZSC03304  DIM       1
ZSC03305  DIM       1
ZSC03306  DIM       1
ZSC03401  DIM       10
ZSC03402  DIM       50
ZSC03403  DIM       6
ZSC03404  DIM       1
ZSC03405  DIM       1
ZSC03406  DIM       1
ZSC03501  DIM       10
ZSC03502  DIM       50
ZSC03503  DIM       6
ZSC03504  DIM       1
ZSC03505  DIM       1
ZSC03506  DIM       1
ZSC03601  DIM       10
ZSC03602  DIM       50
ZSC03603  DIM       6
ZSC03604  DIM       1
ZSC03605  DIM       1
ZSC03606  DIM       1
ZSC03701  DIM       10
ZSC03702  DIM       50
ZSC03703  DIM       6
ZSC03704  DIM       1
ZSC03705  DIM       1
ZSC03706  DIM       1
ZSC03801  DIM       10
ZSC03802  DIM       50
ZSC03803  DIM       6
ZSC03804  DIM       1
ZSC03805  DIM       1
ZSC03806  DIM       1
ZSC03901  DIM       10
ZSC03902  DIM       50
ZSC03903  DIM       6
ZSC03904  DIM       1
ZSC03905  DIM       1
ZSC03906  DIM       1
ZSC04001  DIM       10
ZSC04002  DIM       50
ZSC04003  DIM       6
ZSC04004  DIM       1
ZSC04005  DIM       1
ZSC04006  DIM       1
ZSC04101  DIM       20
ZSC04201  DIM       10
ZSC04301  DIM       10
ZSC04401  DIM       10
ZSC04501  DIM       10
ZSC04601  DIM       70
ZSC04701  DIM       70
ZSC04801  DIM       50
ZSC04901  DIM       10
ZSC04902  DIM       50
ZSC04903  DIM       6
ZSC04904  DIM       1
ZSC04905  DIM       1
ZSC04906  DIM       1
ZSC05001  DIM       10
ZSC05002  DIM       50
ZSC05003  DIM       6
ZSC05004  DIM       1
ZSC05005  DIM       1
ZSC05006  DIM       1
ZSC05101  DIM       10
ZSC05201  DIM       10
ZSC05301  DIM       15
ZSC05302  DIM       50
ZSC05303  DIM       6
ZSC05304  DIM       1
ZSC05305  DIM       1
ZSC05306  DIM       1
ZSC05401  DIM       15
ZSC05402  DIM       50
ZSC05403  DIM       6
ZSC05404  DIM       1
ZSC05405  DIM       1
ZSC05406  DIM       1
ZSC05501  DIM       3[20]
ZSC05601  DIM       50[20]
ZSC05701  DIM       200[20]
ZSC05801  DIM       150[20]
ZSC05901  DIM       100[20]
ZSC06001  DIM       100[20]
ZSC06101  DIM       6
ZSC06201  DIM       6
ZSC06301  DIM       6
ZSC06401  DIM       6
.
ZSC46CNT  FORM      4
ZSC47CNT  FORM      4
ZSFCOUNT  FORM      3
ZSFFOUND  FORM      1             * ZSF found flag
.                                     0 = one or more ZSF segments received
.                                     1 = no ZSF segments received
ZSF00101  DIM       100
ZSF00102  DIM       100
ZSF00103  DIM       100
ZSF00104  DIM       100
ZSF00105  DIM       100
ZSF00106  DIM       100
ZSF00201  DIM       100
ZSF00202  DIM       100
ZSF00203  DIM       100
ZSF00204  DIM       100
ZSF00205  DIM       100
ZSF00206  DIM       100
ZSF00301  DIM       100
ZSF00302  DIM       100
ZSF00303  DIM       100
ZSF00304  DIM       100
ZSF00305  DIM       100
ZSF00306  DIM       100
ZSF00401  DIM       100
ZSF00501  DIM       100
ZSF00601  DIM       100
ZSF00602  DIM       100
ZSF00603  DIM       100
ZSF00604  DIM       100
ZSF00701  DIM       100
ZSF00801  DIM       100
ZSF00901  DIM       100
.
ZST00101  DIM       100
ZST00102  DIM       100
ZST00103  DIM       100
ZST00104  DIM       100
ZST00105  DIM       100
ZST00106  DIM       100
ZST00201  DIM       100
ZST00202  DIM       100
ZST00203  DIM       100
ZST00204  DIM       100
ZST00205  DIM       100
ZST00206  DIM       100
ZST00301  DIM       100
ZST00401  DIM       100
ZST00501  DIM       100
ZST00601  DIM       100
ZST00602  DIM       100
ZST00603  DIM       100
ZST00604  DIM       100
ZST00701  DIM       100
ZST00702  DIM       100
ZST00703  DIM       100
ZST00801  DIM       100
ZST00802  DIM       100
ZST00803  DIM       100
ZST00804  DIM       100
ZST00805  DIM       100
ZST00901  DIM       100
ZST00902  DIM       100
ZST01001  DIM       100
ZST01101  DIM       100
ZST01201  DIM       100
ZST01301  DIM       100
.
ZPR00101  DIM       1
ZPR00201  DIM       50
ZPR00301  DIM       200
ZPR00401  DIM       5
ZPR00402  DIM       1
ZPR00403  DIM       1
ZPR00404  DIM       1
ZPR00501  DIM       100
ZPR00502  DIM       100
ZPR00503  DIM       100
ZPR00504  DIM       100
ZPR00505  DIM       100
ZPR00506  DIM       100
ZPR00507  DIM       100
ZPR00508  DIM       1
ZPR00509  DIM       1
ZPR00510  DIM       1
ZPR00511  DIM       1
ZPR00512  DIM       1
ZPR00601  DIM       100[5]
ZPR00602  DIM       100[5]
ZPR00603  DIM       100[5]
ZPR00604  DIM       100[5]
ZPR00605  DIM       100[5]
ZPR00606  DIM       100[5]
ZPR00607  DIM       100[5]
ZPR00608  DIM       100[5]
ZPR00609  DIM       100[5]
ZPR00701  DIM       26
ZPR00801  DIM       26
ZPR00901  DIM       200
ZPR01001  DIM       200
ZPR01101  DIM       200
ZPR01201  DIM       2
ZPR01301  DIM       2
ZPR01401  DIM       2
ZPR01501  DIM       2
ZPR01601  DIM       100
ZPR01701  DIM       100
ZPR01801  DIM       100
.
ZXP00101  DIM       8
ZXP00201  DIM       8
ZXP00301  DIM       3
ZXP00302  DIM       50
ZXP00303  DIM       6
ZXP00401  DIM       3
ZXP00402  DIM       50
ZXP00403  DIM       6
ZXP00501  DIM       8
ZXP00601  DIM       8
ZXP00701  DIM       10
ZXP00702  DIM       35
ZXP00703  DIM       35
ZXP00704  DIM       10
ZXP00705  DIM       6
ZXP00706  DIM       1
ZXP00707  DIM       1
ZXP00708  DIM       1
ZXP00709  DIM       1
ZXP00710  DIM       1
ZXP00711  DIM       1
ZXP00712  DIM       1
ZXP00713  DIM       1
ZXP00714  DIM       1
ZXP00715  DIM       1
ZXP00801  DIM       1
ZXP00802  DIM       1
ZXP00803  DIM       1
ZXP00804  DIM       1
ZXP00805  DIM       1
ZXP00806  DIM       1
ZXP00807  DIM       1
ZXP00808  DIM       1
ZXP00809  DIM       1
ZXP00810  DIM       1
ZXP00811  DIM       1
ZXP00901  DIM       1
ZXP01001  DIM       1
ZXP01101  DIM       1
ZXP01201  DIM       1
ZXP01301  DIM       1
ZXP01401  DIM       1
ZXP01501  DIM       1
ZXP01601  DIM       10
ZXP01602  DIM       80
ZXP01603  DIM       6
ZXP01604  DIM       1
ZXP01605  DIM       1
ZXP01606  DIM       1
ZXP01701  DIM       2
ZXP01801  DIM       1
ZXP01802  DIM       1
ZXP01803  DIM       1
ZXP01804  DIM       1
ZXP01805  DIM       1
ZXP01806  DIM       1
ZXP01807  DIM       1
ZXP01808  DIM       1
ZXP01809  DIM       1
ZXP01810  DIM       1
ZXP01811  DIM       1
ZXP01901  DIM       1
ZXP02001  DIM       1
ZXP02101  DIM       1
ZXP05701  DIM       8
ZXP05801  DIM       2
ZXP05901  DIM       1
ZXP06001  DIM       8
ZXP06101  DIM       3
ZXP06102  DIM       50
ZXP06103  DIM       6
ZXP06201  DIM       1
ZXP06301  DIM       2
ZXP06401  DIM       500           * CE w
ZXP06402  DIM       500           * CE w
ZXP06403  DIM       500           * CE w
ZXP06404  DIM       500           * CE w
ZXP06405  DIM       500           * CE w
ZXP06406  DIM       500           * CE w
ZXP06501  DIM       500           * CE w
ZXP06502  DIM       500           * CE w
ZXP06503  DIM       500           * CE w
ZXP06504  DIM       500           * CE w
ZXP06505  DIM       500           * CE w
ZXP06506  DIM       500           * CE w
ZXP06601  DIM       500           * CE w
ZXP06602  DIM       500           * CE w
ZXP06603  DIM       500           * CE w
ZXP06604  DIM       500           * CE w
ZXP06605  DIM       500           * CE w
ZXP06606  DIM       500           * CE w
ZXP06701  DIM       500           * CE w
ZXP06702  DIM       500           * CE w
ZXP06703  DIM       500           * CE w
ZXP06704  DIM       500           * CE w
ZXP06705  DIM       500           * CE w
ZXP06706  DIM       500           * CE w
ZXP06801  DIM       500           * CE w
ZXP06802  DIM       500           * CE w
ZXP06803  DIM       500           * CE w
ZXP06804  DIM       500           * CE w
ZXP06805  DIM       500           * CE w
ZXP06806  DIM       500           * CE w
ZXP06901  DIM       500           * CE w
ZXP06902  DIM       500           * CE w
ZXP06903  DIM       500           * CE w
ZXP06904  DIM       500           * CE w
ZXP06905  DIM       500           * CE w
ZXP06906  DIM       500           * CE w
ZXP07001  DIM       500           * CE w
ZXP07002  DIM       500           * CE w
ZXP07003  DIM       500           * CE w
ZXP07004  DIM       500           * CE w
ZXP07005  DIM       500           * CE w
ZXP07006  DIM       500           * CE w
ZXP07101  DIM       500           * CE w
ZXP07102  DIM       500           * CE w
ZXP07103  DIM       500           * CE w
ZXP07104  DIM       500           * CE w
ZXP07105  DIM       500           * CE w
ZXP07106  DIM       500           * CE w
ZXP07201  DIM       500           * CE w
ZXP07202  DIM       500           * CE w
ZXP07203  DIM       500           * CE w
ZXP07204  DIM       500           * CE w
ZXP07205  DIM       500           * CE w
ZXP07206  DIM       500           * CE w
ZXP07301  DIM       500           * CE w
ZXP07302  DIM       500           * CE w
ZXP07303  DIM       500           * CE w
ZXP07304  DIM       500           * CE w
ZXP07305  DIM       500           * CE w
ZXP07306  DIM       500           * CE w
ZXP07401  DIM       500           * CE w
ZXP07402  DIM       500           * CE w
ZXP07403  DIM       500           * CE w
ZXP07404  DIM       500           * CE w
ZXP07405  DIM       500           * CE w
ZXP07406  DIM       500           * CE w
ZXP07501  DIM       500           * CE w
ZXP07502  DIM       500           * CE w
ZXP07503  DIM       500           * CE w
ZXP07504  DIM       500           * CE w
ZXP07505  DIM       500           * CE w
ZXP07506  DIM       500           * CE w
ZXP07601  DIM       2             * NM w
.
ZXV00101  DIM       1
ZXV00201  DIM       1
ZXV00301  DIM       1
ZXV00401  DIM       1
ZXV00501  DIM       1
ZXV00601  DIM       3
ZXV00602  DIM       50
ZXV00603  DIM       6
ZXV00604  DIM       1
ZXV00605  DIM       1
ZXV00606  DIM       1
ZXV00701  DIM       9
ZXV00702  DIM       40
ZXV00703  DIM       6
ZXV00704  DIM       1
ZXV00705  DIM       1
ZXV00706  DIM       1
ZXV00801  DIM       1
ZXV00901  DIM       14
ZXV01001  DIM       1
ZXV01101  DIM       1
ZXV01201  DIM       1
ZXV01301  DIM       1
ZXV01401  DIM       1
ZXV01501  DIM       3
ZXV01502  DIM       50
ZXV01503  DIM       6
ZXV01504  DIM       1
ZXV01505  DIM       1
ZXV01506  DIM       1
ZXV01601  DIM       1
ZXV01701  DIM       1
ZXV01801  DIM       1
ZXV01901  DIM       1
ZXV02001  DIM       80
ZXV02002  DIM       80
ZXV02003  DIM       80
ZXV02004  DIM       1
ZXV02005  DIM       1
ZXV02006  DIM       1
ZXV02101  DIM       26
ZXV02201  DIM       26
ZXV02301  DIM       1
ZXV02401  DIM       1
ZXV02501  DIM       1
ZXV02601  DIM       1
ZXV02701  DIM       1
ZXV02801  DIM       1
ZXV02901  DIM       1
ZXV03001  DIM       26
ZXV03101  DIM       1
ZXV03201  DIM       2
ZXV03301  DIM       1
ZXV03401  DIM       3
ZXV03402  DIM       50
ZXV03403  DIM       6
ZXV03404  DIM       1
ZXV03405  DIM       1
ZXV03406  DIM       1
ZXV03501  DIM       6
ZXV03502  DIM       30
ZXV03503  DIM       6
ZXV03504  DIM       1
ZXV03505  DIM       1
ZXV03506  DIM       1
ZXV03601  DIM       8
ZXV03701  DIM       6
ZXV03702  DIM       30
ZXV03703  DIM       6
ZXV03704  DIM       1
ZXV03705  DIM       1
ZXV03706  DIM       1
ZXV03801  DIM       50
ZXV03901  DIM       9[3]
ZXV03902  DIM       40[3]
ZXV03903  DIM       6[3]
ZXV03904  DIM       1[3]
ZXV03905  DIM       1[3]
ZXV03906  DIM       1[3]
ZXV04001  DIM       3
ZXV04002  DIM       50
ZXV04003  DIM       6
ZXV04004  DIM       1
ZXV04005  DIM       1
ZXV04006  DIM       1
ZXV04101  DIM       14
ZXV04201  DIM       3
ZXV04202  DIM       50
ZXV04203  DIM       6
ZXV04204  DIM       1
ZXV04205  DIM       1
ZXV04206  DIM       1
ZXV04301  DIM       3
ZXV04302  DIM       50
ZXV04303  DIM       6
ZXV04304  DIM       1
ZXV04305  DIM       1
ZXV04306  DIM       1
ZXV04401  DIM       100
ZXV04501  DIM       50
ZXV04601  DIM       100
ZXV04701  DIM       3
ZXV04702  DIM       50
ZXV04703  DIM       6
ZXV04704  DIM       1
ZXV04705  DIM       1
ZXV04706  DIM       1
ZXV04801  DIM       1000
ZXV04901  DIM       10
ZXV04902  DIM       80
ZXV04903  DIM       6
ZXV04904  DIM       1
ZXV04905  DIM       1
ZXV04906  DIM       1
ZXV05001  DIM       3
ZXV05002  DIM       50
ZXV05003  DIM       6
ZXV05004  DIM       1
ZXV05005  DIM       1
ZXV05006  DIM       1
ZXV05101  DIM       6
ZXV05102  DIM       50
ZXV05103  DIM       6
ZXV05104  DIM       1
ZXV05105  DIM       1
ZXV05106  DIM       1
ZXV05201  DIM       8
ZXV05301  DIM       3
ZXV05302  DIM       50
ZXV05303  DIM       6
ZXV05304  DIM       1
ZXV05305  DIM       1
ZXV05306  DIM       1
ZXV05401  DIM       8
ZXV05501  DIM       3
ZXV05502  DIM       50
ZXV05503  DIM       6
ZXV05504  DIM       1
ZXV05505  DIM       1
ZXV05506  DIM       1
ZXV05601  DIM       3
ZXV05602  DIM       50
ZXV05603  DIM       6
ZXV05604  DIM       1
ZXV05605  DIM       1
ZXV05606  DIM       1
ZXV05701  DIM       3
ZXV05702  DIM       50
ZXV05703  DIM       6
ZXV05704  DIM       1
ZXV05705  DIM       1
ZXV05706  DIM       1
ZXV05801  DIM       1
ZXV05901  DIM       14
ZXV06001  DIM       1000
ZXV06101  DIM       14
ZXV06201  DIM       10
ZXV06202  DIM       35
ZXV06203  DIM       35
ZXV06204  DIM       10
ZXV06205  DIM       6
ZXV06206  DIM       1
ZXV06207  DIM       1
ZXV06208  DIM       1
ZXV06209  DIM       1
ZXV06210  DIM       1
ZXV06211  DIM       1
ZXV06212  DIM       1
ZXV06213  DIM       1
ZXV06214  DIM       1
ZXV06215  DIM       1
ZXV06301  DIM       14
ZXV06401  DIM       3
ZXV06402  DIM       50
ZXV06403  DIM       6
ZXV06404  DIM       1
ZXV06405  DIM       1
ZXV06406  DIM       1
ZXV06501  DIM       14
ZXV06601  DIM       10
ZXV06602  DIM       35
ZXV06603  DIM       35
ZXV06604  DIM       10
ZXV06605  DIM       6
ZXV06606  DIM       1
ZXV06607  DIM       1
ZXV06608  DIM       1
ZXV06609  DIM       1
ZXV06610  DIM       1
ZXV06611  DIM       1
ZXV06612  DIM       1
ZXV06613  DIM       1
ZXV06614  DIM       1
ZXV06615  DIM       1
ZXV06701  DIM       14
ZXV06801  DIM       10
ZXV06802  DIM       35
ZXV06803  DIM       35
ZXV06804  DIM       10
ZXV06805  DIM       6
ZXV06806  DIM       1
ZXV06807  DIM       1
ZXV06808  DIM       1
ZXV06809  DIM       1
ZXV06810  DIM       1
ZXV06811  DIM       1
ZXV06812  DIM       1
ZXV06813  DIM       1
ZXV06814  DIM       1
ZXV06815  DIM       1
ZXV06901  DIM       14
ZXV07001  DIM       10
ZXV07002  DIM       35
ZXV07003  DIM       35
ZXV07004  DIM       10
ZXV07005  DIM       6
ZXV07006  DIM       1
ZXV07007  DIM       1
ZXV07008  DIM       1
ZXV07009  DIM       1
ZXV07010  DIM       1
ZXV07011  DIM       1
ZXV07012  DIM       1
ZXV07013  DIM       1
ZXV07014  DIM       1
ZXV07015  DIM       1
ZXV07101  DIM       14
ZXV07201  DIM       14
ZXV07301  DIM       3
ZXV07302  DIM       50
ZXV07303  DIM       6
ZXV07304  DIM       1
ZXV07305  DIM       1
ZXV07306  DIM       1
ZXV07401  DIM       10
ZXV07402  DIM       35
ZXV07403  DIM       35
ZXV07404  DIM       10
ZXV07405  DIM       6
ZXV07406  DIM       1
ZXV07407  DIM       1
ZXV07408  DIM       1
ZXV07409  DIM       1
ZXV07410  DIM       1
ZXV07411  DIM       1
ZXV07412  DIM       1
ZXV07413  DIM       1
ZXV07414  DIM       1
ZXV07415  DIM       1
ZXV07501  DIM       1
ZXV07601  DIM       3
ZXV07602  DIM       50
ZXV07603  DIM       6
ZXV07604  DIM       1
ZXV07605  DIM       1
ZXV07606  DIM       1
ZXV07701  DIM       10
ZXV07702  DIM       50
ZXV07703  DIM       6
ZXV07704  DIM       1
ZXV07705  DIM       1
ZXV07706  DIM       1
ZXV07801  DIM       6
ZXV07901  DIM       1
ZXV08001  DIM       1000
ZXV08101  DIM       3
ZXV08102  DIM       50
ZXV08103  DIM       6
ZXV08104  DIM       1
ZXV08105  DIM       1
ZXV08106  DIM       1
ZXV08201  DIM       14
ZXV08301  DIM       3
ZXV08302  DIM       50
ZXV08303  DIM       6
ZXV08304  DIM       1
ZXV08305  DIM       1
ZXV08306  DIM       1
ZXV08401  DIM       3
ZXV08402  DIM       50
ZXV08403  DIM       6
ZXV08404  DIM       1
ZXV08405  DIM       1
ZXV08406  DIM       1
ZXV08501  DIM       3
ZXV08502  DIM       50
ZXV08503  DIM       6
ZXV08504  DIM       1
ZXV08505  DIM       1
ZXV08506  DIM       1
ZXV08601  DIM       6
ZXV08701  DIM       3
ZXV08702  DIM       50
ZXV08703  DIM       6
ZXV08704  DIM       1
ZXV08705  DIM       1
ZXV08706  DIM       1
ZXV08801  DIM       6
ZXV08802  DIM       50
ZXV08803  DIM       10
ZXV08804  DIM       1
ZXV08805  DIM       1
ZXV08806  DIM       1
ZXV08901  DIM       2
ZXV09001  DIM       3
ZXV09002  DIM       50
ZXV09003  DIM       6
ZXV09004  DIM       1
ZXV09005  DIM       1
ZXV09006  DIM       1
ZXV09101  DIM       255
ZXV09201  DIM       10
ZXV09301  DIM       512
ZXV09401  DIM       255
ZXV09501  DIM       20
ZXV09601  DIM       4000          * 0861253 limit = 1024 ?
ZXV09701  DIM       1
ZXV09801  DIM       9
ZXV09802  DIM       50
ZXV09803  DIM       6
ZXV09804  DIM       1
ZXV09805  DIM       1
ZXV09806  DIM       1
ZXV09901  DIM       9[5]
ZXV09902  DIM       40[5]
ZXV09903  DIM       6[5]
ZXV09904  DIM       1[5]
ZXV09905  DIM       1[5]
ZXV09906  DIM       1[5]
ZXV10001  DIM       3
ZXV10002  DIM       50
ZXV10003  DIM       6
ZXV10004  DIM       1
ZXV10005  DIM       1
ZXV10006  DIM       1
ZXV10101  DIM       8
ZXV10201  DIM       8
ZXV10301  DIM       14
.
ZTR00101  DIM       500           * CE webPAS using
ZTR00102  DIM       500           * CE w
ZTR00103  DIM       500           * CE w
ZTR00104  DIM       500           * CE w
ZTR00105  DIM       500           * CE w
ZTR00106  DIM       500           * CE w
ZTR00201  DIM       500           * ST webPAS using
ZTR00301  DIM       500           * ST webPAS using
ZTR00401  DIM       500           * ST webPAS using
ZTR00501  DIM       500           * ST webPAS using
ZTR00601  DIM       500           * ST webPAS using
ZTR00701  DIM       500           * ST webPAS using
ZTR00801  DIM       500           * CE webPAS using
ZTR00802  DIM       500           * CE w
ZTR00803  DIM       500           * CE w
ZTR00804  DIM       500           * CE w
ZTR00805  DIM       500           * CE w
ZTR00806  DIM       500           * CE w
.ZTR00901  DIM       500
ZTR01001  DIM       500           * CE webPAS using
ZTR01002  DIM       500           * CE w
ZTR01003  DIM       500           * CE w
ZTR01004  DIM       500           * CE w
ZTR01005  DIM       500           * CE w
ZTR01006  DIM       500           * CE w
.ZTR01101  DIM       500
ZTR01201  DIM       500           * CE webPAS using
ZTR01202  DIM       500           * CE w
ZTR01203  DIM       500           * CE w
ZTR01204  DIM       500           * CE w
ZTR01205  DIM       500           * CE w
ZTR01206  DIM       500           * CE w
ZTR01301  DIM       500           * CE webPAS using
ZTR01302  DIM       500           * CE w
ZTR01303  DIM       500           * CE w
ZTR01304  DIM       500           * CE w
ZTR01305  DIM       500           * CE w
ZTR01306  DIM       500           * CE w
.ZTR01401  DIM       500
ZTR01501  DIM       500           * CE webPAS using
ZTR01502  DIM       500           * CE w
ZTR01503  DIM       500           * CE w
ZTR01504  DIM       500           * CE w
ZTR01505  DIM       500           * CE w
ZTR01506  DIM       500           * CE w
.ZTR01601  DIM       500
ZTR01701  DIM       500           * CE webPAS using
ZTR01702  DIM       500           * CE w
ZTR01703  DIM       500           * CE w
ZTR01704  DIM       500           * CE w
ZTR01705  DIM       500           * CE w
ZTR01706  DIM       500           * CE w
.ZTR01801  DIM       500
.ZTR01901  DIM       500
ZTR02001  DIM       500           * CE webPAS using
ZTR02002  DIM       500           * CE w
ZTR02003  DIM       500           * CE w
ZTR02004  DIM       500           * CE w
ZTR02005  DIM       500           * CE w
ZTR02006  DIM       500           * CE w
.ZTR02101  DIM       500
.ZTR02201  DIM       500
ZTR02301  DIM       500           * CE webPAS using
ZTR02302  DIM       500           * CE w
ZTR02303  DIM       500           * CE w
ZTR02304  DIM       500           * CE w
ZTR02305  DIM       500           * CE w
ZTR02306  DIM       500           * CE w
.ZTR02401  DIM       500
.ZTR02501  DIM       500
.ZTR02601  DIM       500
.ZTR02701  DIM       500
.ZTR02801  DIM       500
.ZTR02901  DIM       500
.ZTR03001  DIM       500
.ZTR03101  DIM       500
.ZTR03201  DIM       500
.ZTR03301  DIM       500
.ZTR03401  DIM       500
ZTR03501  DIM       500           * CE webPAS using
ZTR03502  DIM       500           * CE w
ZTR03503  DIM       500           * CE w
ZTR03504  DIM       500           * CE w
ZTR03505  DIM       500           * CE w
ZTR03506  DIM       500           * CE w
.ZTR03601  DIM       500
.ZTR03701  DIM       500
.ZTR03801  DIM       500
.ZTR03901  DIM       500
.ZTR04001  DIM       500
.ZTR04101  DIM       500
ZTR04201  DIM       500           * CE webPAS using
ZTR04202  DIM       500           * CE w
ZTR04203  DIM       500           * CE w
ZTR04204  DIM       500           * CE w
ZTR04205  DIM       500           * CE w
ZTR04206  DIM       500           * CE w
ZTR04301  DIM       500           * YN webPAS using
.ZTR04401  DIM       500
ZTR04501  DIM       500           * TS webPAS using
ZTR04601  DIM       500           * CE webPAS using
ZTR04602  DIM       500           * CE w
ZTR04603  DIM       500           * CE w
ZTR04604  DIM       500           * CE w
ZTR04605  DIM       500           * CE w
ZTR04606  DIM       500           * CE w
ZTR04701  DIM       500           * XCN webPAS using
ZTR04702  DIM       500           * XCN w
ZTR04703  DIM       500           * XCN w
ZTR04704  DIM       500           * XCN w
ZTR04705  DIM       500           * XCN w
ZTR04706  DIM       500           * XCN w
ZTR04707  DIM       500           * XCN w
ZTR04708  DIM       500           * XCN w
ZTR04709  DIM       500           * XCN w
ZTR04710  DIM       500           * XCN w
ZTR04711  DIM       500           * XCN w
ZTR04712  DIM       500           * XCN w
ZTR04713  DIM       500           * XCN w
ZTR04714  DIM       500           * XCN w
ZTR04715  DIM       500           * XCN w
ZTR04801  DIM       500           * CE webPAS using
ZTR04802  DIM       500           * CE w
ZTR04803  DIM       500           * CE w
ZTR04804  DIM       500           * CE w
ZTR04805  DIM       500           * CE w
ZTR04806  DIM       500           * CE w
ZTR04901  DIM       500           * CE webPAS using
ZTR04902  DIM       500           * CE w
ZTR04903  DIM       500           * CE w
ZTR04904  DIM       500           * CE w
ZTR04905  DIM       500           * CE w
ZTR04906  DIM       500           * CE w
.
ZNT00101  DIM       500
ZNT00201  DIM       500
ZNT00301  DIM       500
ZNT00401  DIM       4000          * 0861253 limit = 1024 ?
ZNT00501  DIM       500
.
.   TIMEDIFF VARIABLES
.
FIRSTDAT  DIM       8
LASTDATE  DIM       8
FIRSTIME  DIM       4
LASTTIME  DIM       4
CALCTIME  FORM      6
CDYSDAYS  FORM      6
CDYSFDTE  DIM       8
CDYSTDTE  DIM       8
CDYSYEAR  FORM      2
FIRSTHR   DIM       2
FIRSTMIN  DIM       2
LASTHOUR  DIM       2
LASTMIN   DIM       2
HOUR1     FORM      6
HOUR2     FORM      6
MINUTE1   FORM      3
MINUTE2   FORM      3
.
HOURA     DIM       2
MINA      DIM       2
SECA      DIM       2
XDATTIME  DIM       14     * Date/Time (ccyymmddhhmmss)
ZERO1     INIT      "01"
ZERO6     INIT      "000000"
.
. The following fields are used in OUT002 - ABFOTINV
.
CONTRCID  DIM       6
NOFEE     FORM      "0"
PROGFLAG  FORM      1
SAVCONTR  DIM       6
WEBFLAG   FORM      1
GROSSTOT  FORM      12.2
LSTRATE   FORM      12.2
LINETOT   FORM      12.2
LINEGST   FORM      12.2
CNEXTINV  FORM      8
DFDATE    DIM       8
RECFLAG   FORM      1
FGSTFLAG  FORM      1
XLINETOT  FORM      6.2
XLINEGST  FORM      6.2
TOTAMNT   FORM      12.2
NODAYS    FORM      6
.
. PROGRAM CONSTANTS
. -----------------
ACTVCAPT  INIT      "Message Type not activated"
ALPHABET  INIT      "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
AISSEGMT  INIT      "AIS"
AILSEGMT  INIT      "AIL"
AIPSEGMT  INIT      "AIP"
ARQSEGMT  INIT      "ARQ"
.
CARET     INIT      "^"
CATCZ     INIT      "CZ"
CATLI     INIT      "LI"
CATLL     INIT      "LL"
CATLN     INIT      "LN"
CATea     INIT      "ea"
CATeb     INIT      "eb"
CATec     INIT      "ec"
CATed     INIT      "ed"
CATel     INIT      "el"
CATet     INIT      "et"
CATeu     INIT      "eu"
CATFI     INIT      "FI"
CATFW     INIT      "FW"
CATOA     INIT      "OA"
CAToc     INIT      "oc"
CATod     INIT      "od"
CATok     INIT      "ok"
CATol     INIT      "ol"
CATou     INIT      "ou"
CATOs     INIT      "Os"
CATrh     INIT      "rh"
CATrr     INIT      "rr"
CATrs     INIT      "rs"
CATRX     INIT      "RX"
CATTC     INIT      "tc"
CATTi     INIT      "Ti"
CATTk     INIT      "Tk"
CATTp     INIT      "Tp"
CATTL     INIT      "TL"
CATTV     INIT      "TV"
CATwl     INIT      "wl"
CATzG     INIT      "zG"
CATzH     INIT      "zH"
CATzI     INIT      "zI"
CATzK     INIT      "zK"
CATzL     INIT      "zL"
CATzN     INIT      "zN"
CATzU     INIT      "zU"
CHRGPMBS  FORM      "1"
COMECAPT  INIT      "Data committed"
COMSCAPT  INIT      "Commencing data commit"
CONNCAPT  INIT      "Connection Lost"
CRETURN   INIT      015                * Carriage Return
.
DASHLINE  INIT      "--------------------------------------------------":
                    "------------------------------"
DELESN    INIT      "DELETE"
DG1SEGMT  INIT      "DG1"
DVACHAR1  INIT      "QNVTSW"
.
ENDBLOCK  INIT      034                * End of Block
ENVVNAME  INIT      "DPATH"
ERORCAPT  INIT      "Data not committed based on message errors"
EVNSEGMT  INIT      "EVN"
.
FT1SEGMT  INIT      "FT1"
.
GT1SEGMT  INIT      "GT1"
.
HCPADTYP  INIT      "HO"
.
ICOMCAPT  INIT      "Timeout waiting for incoming message"
IGNRCAPT  INIT      "Record ignored based on referral status"
IN1SEGMT  INIT      "IN1"
.
LODECAPT  INIT      " segment loaded"
LODSCAPT  INIT      "Loading segment: "
LOGERR    FORM      "0"
LWRCASEU  INIT      "u"
.
MFESEGMT  INIT      "MFE"
MFISEGMT  INIT      "MFI"
MINUS3    FORM      "-3"
MRGSEGMT  INIT      "MRG"
MSASCAPT  INIT      "MSA Segment successfully sent"
MSEQCAPT  INIT      "Message segment sequence not valid"
MSHSCAPT  INIT      "MSH Segment successfully sent"
MSHSEGMT  INIT      "MSH"
MSHMCAPT  INIT      "MSH segment missing"
MTYPEA03  INIT      "A03"
MTYPEA04  INIT      "A04"
MTYPEA05  INIT      "A05"
MTYPEA08  INIT      "A08"
MTYPEA21  INIT      "A21"
MTYPEA22  INIT      "A22"
MTYPEA28  INIT      "A28"
MTYPEA31  INIT      "A31"
MTYPEA34  INIT      "A34"
MTYPEI12  INIT      "I12"
MTYPEI13  INIT      "I13"
MTYPEI14  INIT      "I14"
MTYPEM02  INIT      "M02"
MTYPEP03  INIT      "P03"
MTYPES02  INIT      "S02"
MTYPES03  INIT      "S03"
MTYPES04  INIT      "S04"
MTYPES0x  INIT      "S0"
MTYPES12  INIT      "S12"
MTYPES13  INIT      "S13"
MTYPES14  INIT      "S14"
MTYPES15  INIT      "S15"
MTYPES26  INIT      "S26"
.
NK1SEGMT  INIT      "NK1"
NTESEGMT  INIT      "NTE"
NUPDCAPT  INIT      "Data not committed based on update mode"
.
OUTGCAPT  INIT      "Timeout waiting for outgoing message"
.
PHONETYP  INIT      "INTERNETPHFXMOBBEPBPN"
PIPE      INIT      "|"
PIDSEGMT  INIT      "PID"
PR1SEGMT  INIT      "PR1"
PRASEGMT  INIT      "PRA"
PRDSEGMT  INIT      "PRD"
PV1SEGMT  INIT      "PV1"
PV2SEGMT  INIT      "PV2"
.
REASDSC2  INIT      "Closure Reason "
REASDSC3  INIT      "Inactive Reason "
REASDSC4  INIT      "Cancellation Reason "
REASDSC5  INIT      "Rejection Reason "
RECVCAPT  INIT      "Data received at: "
RF1SEGMT  INIT      "RF1"
RGSSEGMT  INIT      "RGS"
ROLSEGMT  INIT      "ROL"
.
ALIASSTS  DIM       1
SAVEUSR1  DIM       3
.
SCHSEGMT  INIT      "SCH"
SEC1      FORM      "00001"
SECONDS   INIT      ":00"
SENDCAPN  INIT      "Acknowledgement Message sent at: "
SP12      INIT      "            "
SP100     INIT      "                                                  ":
                    "                                                  "
STFSEGMT  INIT      "STF"
STRTBLOK  INIT      013                * Start of Block
.
TESTCAPT  INIT      "Data not committed based on Processing ID"
TILDA35   INIT      "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
.
UKEYA     INIT      " 516 U1-3,4-6,7-9,10-12,13-15"
UKEYB     INIT      " 473 U1-1,2-4,5-7"
UKEYC     INIT      " 355 U1-1,2-3,4-6,7-9"
UKEYD     INIT      " 54 U1-8,9-13,14-22,23-25"
UKEYF     INIT      " 76 U1-1,2-5"
.
VALECAPT  INIT      " segment validated"
VALSCAPT  INIT      "Validating segment: "
VOTSCAPT  INIT      "Validating message specific fields"
VOTECAPT  INIT      "Message specific fields validated"
.
ZALSEGMT  INIT      "ZAL"
ZERO8     INIT      "0000    "
ZFTSEGMT  INIT      "ZFT"
ZNTSEGMT  INIT      "ZNT"
ZPRSEGMT  INIT      "ZPR"
ZSCSEGMT  INIT      "ZSC"
ZSTSEGMT  INIT      "ZST"
ZSFSEGMT  INIT      "ZSF"
ZTRSEGMT  INIT      "ZTR"
ZXPSEGMT  INIT      "ZXP"
ZXVSEGMT  INIT      "ZXV"
.
JAN       INIT      "January"
FEB       INIT      "February"
MAR       INIT      "March"
APR       INIT      "April"
MAY       INIT      "May"
JUN       INIT      "June"
JUL       INIT      "July"
AUG       INIT      "August"
SEP       INIT      "September"
OCT       INIT      "October"
NOV       INIT      "November"
DEC       INIT      "December"
.
.-----------------------------------------------------------------------
PRGID     INIT      "HL7RECVR"
PRGNAM    INIT      "HL7 General Receiving Server"
VERSION   INIT      "V12.00.07"
.-----------------------------------------------------------------------
+
.*************************************************************************
.*                             MAIN0000                                  *
.*                  Main processing routine                              *
.*************************************************************************
.
MAIN0000  CALL      SETX0000                     * set up common
.
          CALL      INIT0000                     * initialisation routine
          BRANCH    EXIT,MAIN9999
.
          CALL      CREA0000                     * create temporary table
.
          CALL      PROC0000                     * listen for & process message
.
          CALL      KILL0000                     * remove temporary table
.
MAIN9999  STOP
+
.*****************************************************************************
.*                         INIT0000                Called by: MAIN0000       *
.*               Initialisation routine                                      *
.*****************************************************************************
.
INIT0000  CALL      DISPHEAD                     * display screen header
.
          DISPLAY   *P1:24,*EL,*P54:24,"Opening":
                    *P64:24,"controlf"
          OPEN      CONTROLF,"controlf"
.
          READ      CONTROLF,ZERO;*43,IBCNMHOS:       * multi hospital indicator
                                  *85,IBCNUGST:       * using GST
                                  *132,IBCNUMCI:      * using medclaims
                                  *250,IBCNMHRI       * Message Header ID - Rec
          READ      CONTROLF,TWO;*182,CSNAME          * company name
          READ      CONTROLF,TEN;*79,CAPPRVNO:        * hospital approval no.
                                 *213,CAUDM           * PMI audit maintenance
          READ      CONTROLF,TEN3;*188,CMABINS:       * TAC Insurance Co.
                                  *194,CVETINS        * Vet. Affairs Ins. Co.
          READ      CONTROLF,TEN5;*187,CBOOK:
                                  *189,CTHETR
          READ      CONTROLF,TEN9;*208,CPMIAD:        * UR audit
                                  *212,CFEETYP        * fee type
          READ      CONTROLF,TWENTY;*193,PTCNDCLM     * default claim code
          READ      CONTROLF,TWENTY1;*45,PTCNDRSM:
                                     *138,PTCNNHII    * using nhi ?
          READ      CONTROLF,TWENTY7;*46,HBWAIT
          READ      CONTROLF,THIRTY1;*51,HOAUDA:      * audit on outbokaf
                                     *52,HOAUDB:      * audit on outbb1af
                                     *163,OTCNFTYP    * type of O/P charging
          READ      CONTROLF,THIRTY2;*154,OTCNA11N
          READ      CONTROLF,THIRTY7;*241,WTCNUSBC
          READ      CONTROLF,FORTY2;*7,OPCNMREC:      * send details to MR
                                    *102,OPCNCHMB:    * bill for MBS items
                                    *235,OPCNFTIM:    * new op start time
                                    *237,OPCNTTIM     * new op end time
          READ      CONTROLF,SIXTY8;*249,OPCNSEMP     * Surgery End mandatory
          READ      CONTROLF,SIXTY9;*43,MHCNAUDA:     * auditing mehvi1af ?
                                    *69,MHCNUSE       * using Mental Health ?
          READ      CONTROLF,SEVENTY9;*82,PTCNDSCI:
                                      *248,PTCNIPEN   * using inv. pending file?
          READ      CONTROLF,EIGHTY;*250,PTCNHDPS     * state parameter
.0915066  MOVE      THREE,PTCNHDPS
          READ      CONTROLF,EIGHTY8;*116,CHCSDTE     * Start Date for HCS data
          READ      CONTROLF,EIGHTY9;*145,EMCNDDTM    * Entering Doc Seen DteTme
          READ      CONTROLF,NINTY7;*246,MRCNROUN
          READ      CONTROLF,HUND03;*196,PTCNCATA:    * allergy category
                                    *217,PTCNCKDG:    * sending U/R check digit
                                    *241,PTCNCLCD:
                                    *243,PTCNADIG:    * sending free text
                                    *244,PTCNNNK1     * sending non-compl. NK1
          READ      CONTROLF,HUND05;*202,PTCNCPAH
          READ      CONTROLF,HUND06;*27,ALCNRAUD:
                                    *28,ALCNEAUD:
                                    *201,ALCNACTW:
                                    *203,ALCNMDES:
                                    *224,ALCNDHOS:    * using dept. hospital
                                    *225,ALCNDEVP    * using VINAH event program
          READ      CONTROLF,HUND10;*94,PTCNPV04:
                                    *95,PTCNPV18:
                                    *96,PTCNPV36:
                                    *248,PTCNEPAY
          READ      CONTROLF,HUND12;*94,PTCNH7ME:
                                    *95,PTCNH7IN:     * sending interpreter reqd
                                    *97,PTCNH7HS:
                                    *98,PTCNH7AD:
                                    *247,PTCNH7DA     * use sent desc/amt
          READ      CONTROLF,HUND13;*59,OPCNPACU:
                                    *63,OPCNZSC6
          READ      CONTROLF,HUND14;*141,PTCNH7LS
          READ      CONTROLF,HUND17;*214,PTCNRS14
          READ      CONTROLF,HUND18;*138,PTCNNEWC:
                                    *179,PTCNH7ID:
                                    *241,PTCNH7RA
          READ      CONTROLF,HUND20;*158,PTCNUNET:
                                    *243,PTCNSMSN
          READ      CONTROLF,HUND21;*101,ALCNDAMR:
                                    *104,ALCNUPWR:    * only update waiting refs
                                    *105,ALCNDEWR:    * only delete waiting refs
                                    *106,ALCNEVPM:    * mand. Event Program
                                    *107,ALCNDRAM:    * mand. Date Ref Accpt
                                    *108,ALCNRISM:    * mand. Ref In Serv Type
                                    *109,ALCNRICM:    * mand. Ref In Clin Ref Dt
                                    *110,ALCNVTYM:    * mand. Visit Type
                                    *111,ALCNRRPM     * mand. Referral Reason
          READ      CONTROLF,HUND22;*8,EMCNURSE       * ED nurse 0=oprnur/1=hcp
          READ      CONTROLF,HUND23;*211,PTCNGNDR:    * receive gender as stored
                                    *212,PTCNTITL:    * mand. title
                                    *214,PTCNRA03:    * receive A03 messages
                                    *215,PTCNRA04:    * receive A04 messages
                                    *216,PTCNRA05:    * receive A05 messages
                                    *217,PTCNRA28:    * receive A28 messages
                                    *218,PTCNRA31:    * receive A31 messages
                                    *219,PTCNRA34:    * receive A34 messages
                                    *220,PTCNRI12:    * receive I12 messages
                                    *221,PTCNRI13:    * receive I13 messages
                                    *222,PTCNRI14:    * receive I14 messages
                                    *223,PTCNRM02:    * receive M02 messages
                                    *224,PTCNRP03:    * receive P03 messages
                                    *226,PTCNDSAE:    * no AE for failed P03 ?
                                    *227,PTCNASNM:    * A34 surname mismatch
                                    *228,PTCNUNPC:    * Using Def.Unk. Post Code
                                    *229,PTCNRA08:    * receive A08 messages
                                    *230,PTCNRA21:    * receive A21 messages
                                    *231,PTCNRA22:    * receive A22 messages
                                    *243,PTCNQA28:    * Using Quick Reg in A28?
                                    *244,PTCNA08E:    * Receive A08 EMR update
                                    *245,PTCNQA31:    * Using Quick Reg in A31?
                                    *246,PTCNRP26:    * Receive PID.26?
                                    *248,PTCNA04E     * Receive A04 EMR Triage
          READ      CONTROLF,HUND24;*146,PTCNH7LN:    * Using Security Login
                                    *220,PTCNQP03     * Use of Quantity in P03
          READ      CONTROLF,HUND25;*1,PTCNADDR:      * Default unknown postcode
                                    *93,PTCNNSSI:     * EDWARD source system
                                    *155,PTCNEPMI:    * Using External PMI
                                    *246,PTCNINVH:    * Send A08 when InvOnHold
                                    *248,PTCNTOFB     * Include TimeOfBirth PID7
          READ      CONTROLF,HUND28;*107,PTCNROPD:    * Receive S02/S03/S04 msgs
                                    *109,PTCNB31R:    * Broadcast HL7 A31
                                    *113,PTCNUP31:    * Update PMI for A08s
                                    *114,PTCNSSMD:    * Send SMD from webPas
                                    *197,PTCNOS12:    * Receive S12 (OUT)
                                    *198,PTCNOS13:    * Receive S13 (OUT)
                                    *199,PTCNOS14:    * Receive S14 (OUT)
                                    *200,PTCNOS15:    * Receive S15 (OUT)
                                    *201,PTCNOS26:    * Receive S26 (OUT)
                                    *202,PTCNIS12:    * Receive S12 (INP)
                                    *203,PTCNIS14:    * Receive S14 (INP)
                                    *204,PTCNIS15:    * Receive S15 (INP)
                                    *205,PTCNRS25:    * SCH.25 for OP book times
                                    *206,PTCNDCSM:    * Default codes for SIU
                                    *207,PTCNGOSM:    * Send outbound after SIU
                                    *208,PTCNAILP:    * AIL or AIP for SIU (OUT)
                                    *209,PTCNCPRG:    * Create Prog Ref for I12
                                    *225,PTCNRNTY:    * Receive Name Type PID.9
                                    *228,PTCNUEVI:    * use ext. id as PV1.19
                                    *251,PTCNPCVA     * type of pension num val
          READ      CONTROLF,HUND30;*113,PTCNFNM2:    * rebroadcast HL7 MFN^M02
                                    *119,PTCNVIMS     * Verify SIU^S12 Inp Msg
.
          IF        PTCNHDPS=3
            OPEN      WATESPA1,"watespaf"
            OPEN      WATESEA1,"wateseaf"
            OPEN      WATESNA1,"watesnaf"
            OPEN      WATESNA5,"watesnaf"
          ENDIF
.
          IF        MHCNUSE=1
            OPEN      MEHCJAA1,"mehcjaaf"
            OPEN      MEHDIAA1,"mehdiaaf"
            OPEN      MEHLEGA1,"mehlegaf"
          ENDIF
.
.          MATCH     "1",PTCNUNET
.          IF        @EQUAL
.            OPEN      PMSIPLA1,"pmsiplaf"     * Polling table for DHS Medicare
.          ENDIF
.
          IF         PTCNHDPS = 1 & CFEETYP = 5
            MOVE       "1",NZPRIBIL                   * using nzprivate billing
          ELSE
            MOVE       "0",NZPRIBIL
          ENDIF
.
          MATCH     SP70,PTCNNSSI
          IF        !@EQUAL
            MATCH     "0000000000",PTCNNSSI
            IF        !@EQUAL
              OPEN      PMSIDWA1,"pmsidwaf"           * EDWARD ISP Audit
            ENDIF
          ENDIF
.
          IF        CAUDM=0
            OPEN      PATAM1A1,"patam1af"
          ENDIF
.
          CALL      TFILENAM
          MOVE      TFILNAME,CFNAMEDP
.
.         Check the category being used for allergies (H1-H9)
.
          MATCH     ANSH,PTCNCATA
          IF        @EQUAL
            UNPACK    PTCNCATA,ANS,ANS
            MOVE      ZERO,FORM1
            MOVE      ANS,FORM1
            BRANCH    FORM1,INIT0500,INIT0500,INIT0500,INIT0500,INIT0500:
                            INIT0500,INIT0500,INIT0500,INIT0500
          ENDIF
.
          DISPLAY   *P1:24,*EL,*B,"Allergy alert category not set",*W5;
.         MOVE      "Not_Applicable",MESSAGID
.         MOVE      "Allergy_alert_category_not_set",ERRMESSG
.         CALL      ALTUSR00                   * send email warning
          GOTO      INIT9100
.
INIT0500  DISPLAY   *P64:24,"allaudaf"
          OPEN      ALLAUDA1,"allaudaf"
.
          DISPLAY   *P64:24,"alldepaf"
          OPEN      ALLDEPA1,"alldepaf"
.
          DISPLAY   *P64:24,"alldiaaf"
          OPEN      ALLDIAA1,"alldiaaf"
.
          DISPLAY   *P64:24,"alleidaf"
          OPEN      ALLEIDA1,"alleidaf"
.
          DISPLAY   *P64:24,"allencaf"
          OPEN      ALLENCA1,"allencaf"
.
          MATCH     "1",ALCNEAUD
          IF        @EQUAL
            OPEN      ALLAUDEN,"allauden"
            OPEN      ALLAUDEA,"allauden"
          ENDIF
.
          DISPLAY   *P64:24,"alllnkaf"
          OPEN      ALLLNKA1,"alllnkaf"
          OPEN      ALLLNKA2,"alllnkaf"
.
          DISPLAY   *P64:24,"allprraf"
          OPEN      ALLPRRA1,"allprraf"
.
          DISPLAY   *P64:24,"allrefaf"
          OPEN      ALLREFA1,"allrefaf"
          OPEN      ALLREFA2,"allrefaf"
          OPEN      ALLAUDRE,"allaudre"
.
          DISPLAY   *P64:24,"allrhlaf"
          OPEN      ALLRHLA1,"allrhlaf"
          OPEN      ALLRHLA2,"allrhlaf"
.
          DISPLAY   *P64:24,"allrlnaf"
          OPEN      ALLRLNA1,"allrlnaf"
          OPEN      ALLRLNA2,"allrlnaf"
.
          DISPLAY   *P64:24,"allseraf"
          OPEN      ALLSERA1,"allseraf"
.
          DISPLAY   *P64:24,"allstsaf";
          OPEN      ALLSTSA1,"allstsaf"
.
          DISPLAY   *P64:24,"bokrx1af";
          OPEN      BOKRX1A1,"bokrx1af"
.
          DISPLAY   *P64:24,"bokrc1af";
          OPEN      BOKRC1A1,"bokrc1af"
.
          DISPLAY   *P64:24,"emrcliaf";
          OPEN      EMRCLIA1,"emrcliaf"
.
          DISPLAY   *P64:24,"aaede1af";
          OPEN      AAEDE1A1,"aaede1af"
.
          DISPLAY   *P64:24,"emrchaaf";
          OPEN      EMRCHAA1,"emrchaaf"
.
          DISPLAY   *P64:24,"emrdayaf";
          OPEN      EMRDAYA1,"emrdayaf"
.
          DISPLAY   *P64:24,"emrhisaf";
          OPEN      EMRHISA1,"emrhisaf"
.
          DISPLAY   *P64:24,"emricdaf";
          OPEN      EMRICDA1,"emricdaf"
.
          DISPLAY   *P64:24,"emrincaf";
          OPEN      EMRINCA1,"emrincaf"
.
          DISPLAY   *P64:24,"emrlocaf";
          OPEN      EMRLOCA1,"emrlocaf"
.
          DISPLAY   *P64:24,"emrsitaf";
          OPEN      EMRSITA1,"emrsitaf"
.
          DISPLAY   *P64:24,"emrunkaf"
          OPEN      EMRUNKA1,"emrunkaf"
.
          DISPLAY   *P64:24,"emrvcdaf"
          OPEN      EMRVCDA1,"emrvcdaf"
.
          DISPLAY   *P64:24,"emrvisaf"
          OPEN      EMRVISA1,"emrvisaf"
          OPEN      EMRVISA7,"emrvisaf"
.
          DISPLAY   *P64:24,"ibapostf"
          OPEN      IBAPOST1,"ibapostf"
.
          DISPLAY   *P64:24,"ibapolaf"
          OPEN      IBAPOLA1,"ibapolaf"
.
          DISPLAY   *P64:24,"ibaalvaf"
          OPEN      IBAALVA1,"ibaalvaf"
          OPEN      IBAALVA2,"ibaalvaf"
.
          DISPLAY   *P64:24,"mehvi1af"
          OPEN      MEHVI1A1,"mehvi1af"
.
          DISPLAY   *P64:24,"mehauvi1"
          OPEN      MEHAUVI1,"mehauvi1"
.
          DISPLAY   *P64:24,"mlthcpaf"
          OPEN      MLTHCPA1,"mlthcpaf"
.
          DISPLAY   *P64:24,"mrtmasaf"
          OPEN      MRTMASA1,"mrtmasaf"
          OPEN      MRTMASA2,"mrtmasaf"
.
          DISPLAY   *P64:24,"mrtvisaf"
          OPEN      MRTVISA1,"mrtvisaf"
.
          DISPLAY   *P64:24,"nhiethaf"
          OPEN      NHIETHA1,"nhiethaf"
.
          DISPLAY   *P64:24,"oprardaf"
          OPEN      OPRARDA1,"oprardaf"
.
          DISPLAY   *P64:24,"oprcbdaf"
          OPEN      OPRCBDA1,"oprcbdaf"
.
          DISPLAY   *P64:24,"opriteaf"
          OPEN      OPRITEA1,"opriteaf"
.
          DISPLAY   *P64:24,"oprdedaf"
          OPEN      OPRDEDA1,"oprdedaf"
.
          DISPLAY   *P64:24,"oprdetaf"
          OPEN      OPRDETA1,"oprdetaf"
          OPEN      OPRDETA2,"oprdetaf"
          OPEN      OPRDETA3,"oprdetaf"
.
          DISPLAY   *P64:24,"oprnuraf";
          OPEN      OPRNURA1,"oprnuraf"
.
          DISPLAY   *P64:24,"oprpmbaf"
          OPEN      OPRPMBA1,"oprpmbaf"
          OPEN      OPRPMBA2,"oprpmbaf"
.
          DISPLAY   *P64:24,"oprsesaf"
          OPEN      OPRSESA1,"oprsesaf"
          OPEN      OPRSESA2,"oprsesaf"
.
          DISPLAY   *P64:24,"oprsrgaf"
          OPEN      OPRSRGA1,"oprsrgaf"
.
          DISPLAY   *P64:24,"oprtsmaf"
          OPEN      OPRTSMA1,"oprtsmaf"
.
          DISPLAY   *P64:24,"outpreaf"
          OPEN      OUTPREA1,"outpreaf"
.
          DISPLAY   *P64:24,"outsitaf"
          OPEN      OUTSITA1,"outsitaf"
.
          DISPLAY   *P64:24,"outthiaf"
          OPEN      OUTTHIA1,"outthiaf"
.
          DISPLAY   *P64:24,"patalrtf"
          OPEN      PATALRT1,"patalrtf"
          OPEN      PATAUDAL,"pataudal"
          OPEN      PATAUDA2,"pataudal"
.
          DISPLAY   *P64:24,"patatraf"
          OPEN      PATATRA1,"patatraf"
          OPEN      PATATRA3,"patatraf"
.
          DISPLAY   *P64:24,"patcfaaf"
          OPEN      PATCFAA1,"patcfaaf"
.
          DISPLAY   *P64:24,"patcodes"
          OPEN      PATCODE1,"patcodes"
          OPEN      PATCODE2,"patcodes"
.
          DISPLAY   *P64:24,"patdkiaf"
          OPEN      PATDKIA1,"patdkiaf"
          OPEN      PATDKIA2,"patdkiaf"
.
          DISPLAY   *P64:24,"patdo1af"
          OPEN      PATDO1A1,"patdo1af"
.
          DISPLAY   *P64:24,"patdrgaf"
          OPEN      PATDRGA1,"patdrgaf"
.
          DISPLAY   *P64:24,"patdstat"
          OPEN      PATDSTA1,"patdstat"
          OPEN      PATDSTA2,"patdstat"
.
          DISPLAY   *P64:24,"patdschf"
          OPEN      PATDSCH1,"patdschf"
          OPEN      PATDSCH3,"patdschf"
.
          DISPLAY   *P64:24,"patdtraf"
          OPEN      PATDTRA3,"patdtraf"
.
          DISPLAY   *P64:24,"patecdaf"
          OPEN      PATECDA1,"patecdaf"
.
          DISPLAY   *P64:24,"patfn1af"
          OPEN      PATFN1A1,"patfn1af"
.
          DISPLAY   *P64:24,"patfx1af"
          OPEN      PATFX1A1,"patfx1af"
.
          DISPLAY   *P64:24,"patgsrnf"
          OPEN      PATGSRN1,"patgsrnf"
.
          DISPLAY   *P64:24,"pathspaf"
          OPEN      PATHSPA1,"pathspaf"
.
          DISPLAY   *P64:24,"patin1af"
          OPEN      PATIN1A1,"patin1af"
.
          DISPLAY   *P64:24,"patinvrf"
          OPEN      PATINVR3,"patinvrf"
.
          DISPLAY   *P64:24,"patipenf"
          OPEN      PATIPEN1,"patipenf"
.
          DISPLAY   *P64:24,"patitemn"
          OPEN      PATITEM1,"patitemn"
.
          DISPLAY   *P64:24,"patlinkf"
          OPEN      PATLINK1,"patlinkf"
.
          DISPLAY   *P64:24,"patma1af"
          OPEN      PATMA1A1,"patma1af"
          OPEN      PATMX1A1,"patmx1af"
.
          DISPLAY   *P64:24,"patmchgf"
          OPEN      PATMCHG1,"patmchgf"
.
          DISPLAY   *P64:24,"patmi1af"
          OPEN      PATMI1A1,"patmi1af"
.
          DISPLAY   *P64:24,"patmmbsf"
          OPEN      PATMMBS1,"patmmbsf"
.
          DISPLAY   *P64:24,"patmrgaf"
          OPEN      PATMRGG1,"patmrgaf"
.
          DISPLAY   *P64:24,"patnobef"
          OPEN      PATNOBE1,"patnobef"
.
          DISPLAY   *P64:24,"patonlvf"
          OPEN      PATONLV1,"patonlvf"
.
          DISPLAY   *P64:24,"patpr1af"
          OPEN      PATPR1A1,"patpr1af"
.
          DISPLAY   *P64:24,"patpx1af"
          OPEN      PATPX1A1,"patpx1af"
.
          DISPLAY   *P64:24,"patre1af"
          OPEN      PATRE1A1,"patre1af"
.
          DISPLAY   *P64:24,"pattranf"
          OPEN      PATTRAN2,"pattranf"
.
          DISPLAY   *P64:24,"patvisaf"
          OPEN      PATVISA1,"patvisaf"
          OPEN      PATVISA2,"patvisaf"
          OPEN      PATVISA4,"patvisaf"
.
          DISPLAY   *P64:24,"patwc1af";
          OPEN      PATWC1A1,"patwc1af"
.
          DISPLAY   *P64:24,"patwmabf";
          OPEN      PATWMAB1,"patwmabf"
.
          DISPLAY   *P64:24,"patwr1af";
          OPEN      PATWR1A1,"patwr1af"
.
          DISPLAY   *P64:24,"patwvetf";
          OPEN      PATWVET1,"patwvetf"
.
          DISPLAY   *P64:24,"pmsalnaf"
          OPEN      PMSALNA1,"pmsalnaf"
          OPEN      PMSAUDAN,"pmsaudan"
          OPEN      PMSAUDA2,"pmsaudan"
.
          DISPLAY   *P64:24,"pmsaidaf"
          OPEN      PMSAIDA1,"pmsaidaf"
          OPEN      PMSAIDA2,"pmsaidaf"
.
          DISPLAY   *P64:24,"pmsccdaf"
          OPEN      PMSCCDA1,"pmsccdaf"
.
          DISPLAY   *P64:24,"pmscexaf"
          OPEN      PMSCEXA1,"pmscexaf"
          OPEN      PMSAUDCE,"pmsaudce"
          OPEN      PMSAUDC2,"pmsaudce"
.
          DISPLAY   *P64:24,"pmscuraf";
          OPEN      PMSCURA1,"pmscuraf"
.
          DISPLAY   *P64:24,"pmsdunaf";
          OPEN      PMSDUNA1,"pmsdunaf"
.
          DISPLAY   *P64:24,"pmsextaf";
          OPEN      PMSEXTA1,"pmsextaf"
.
          DISPLAY   *P64:24,"pmshcgaf"
          OPEN      PMSHCGA1,"pmshcgaf"
.
          DISPLAY   *P64:24,"pmshclaf"
          OPEN      PMSHCLA1,"pmshclaf"
.
          DISPLAY   *P64:24,"pmshcpaf"
          OPEN      PMSHCPA1,"pmshcpaf"
          OPEN      PMSHCPA3,"pmshcpaf"
          OPEN      PMSHCPA7,"pmshcpaf"
.
          DISPLAY   *P64:24,"pmsmtiaf"
          OPEN      PMSMTIA1,"pmsmtiaf"
          OPEN      PMSMTIA2,"pmsmtiaf"
.
          DISPLAY   *P64:24,"pmspx2af"
          OPEN      PMSPX2A1,"pmspx2af"
.
          DISPLAY   *P64:24,"pmsrelaf"
          OPEN      PMSRELA1,"pmsrelaf"
.
          DISPLAY   *P64:24,"pmstleaf"
          OPEN      PMSTLEA1,"pmstleaf"
.
          DISPLAY   *P64:24,"pmsvx1af"
          OPEN      PMSVX1A1,"pmsvx1af"
.
          DISPLAY   *P64:24,"pmsworaf"
          OPEN      PMSWORA1,"pmsworaf"
.
          DISPLAY   *P64:24,"prspmiaf"
          OPEN      PRSPMIA1,"prspmiaf"
.
          DISPLAY   *P64:24,"viscmtaf";
          OPEN      VISCMTA1,"viscmtaf"
.
          DISPLAY   *P64:24,"visiauaf";
          OPEN      VISIAUA1,"visiauaf"
.
          DISPLAY   *P64:24,"visintaf";
          OPEN      VISINTA1,"visintaf"
.
          DISPLAY   *P64:24,"vismdtaf"
          OPEN      VISMDTA1,"vismdtaf"
.
          DISPLAY   *P64:24,"vismtxaf"
          OPEN      VISMTXA1,"vismtxaf"
.
          DISPLAY   *P64:24,"wateseaf"
          OPEN      WATESEA1,"wateseaf"
.
          DISPLAY   *P64:24,"watesmaf"
          OPEN      WATESMA1,"watesmaf"
.
          DISPLAY   *P64:24,"watespaf"
          OPEN      WATESPA1,"watespaf"
.
          IF        HBWAIT = 1
            DISPLAY   *P64:24,"watopaaf"
            OPEN      WATOPAA2,"watopaaf"
.
            DISPLAY   *P64:24,"watopsaf"
            OPEN      WATOPSA2,"watopsaf"
          ENDIF
.
          DISPLAY   *P64:24,"wattr1af"
          OPEN      WATTR1A1,"wattr1af"
.
          DISPLAY   *P64:24,"wattx1af"
          OPEN      WATTX1A1,"wattx1af"
.
          DISPLAY   *P64:24,"websecaf"
          OPEN      WEBSECA1,"websecaf"
          OPEN      WEBSECA7,"websecaf"
.
          MATCH     "1",PTCNEPAY
          IF        @EQUAL
            DISPLAY   *P64:24,"pmspayaf";
            OPEN      PMSPAYA1,"pmspayaf"
.
            DISPLAY   *P64:24,"vispayaf";
            OPEN      VISPAYA1,"vispayaf"
            OPEN      VISPAYA2,"vispayaf"
          ENDIF
.
          MATCH     "1",PTCNROPD
          IF        @EQUAL
            DISPLAY   *P64:24,"outdanaf"
            OPEN      OUTDANA1,"outdanaf"          * Outpatient Direct Actions
            DISPLAY   *P64:24,"outdcoaf"
            OPEN      OUTDCOA1,"outdcoaf"          * Outpatient Direct Comments
          ENDIF
.
          CALL      IBACLOCK
          PACK      CPTDATE,CCC,CYY,CMM,CDD
          REP       " 0",CPTDATE
          CALL      GPERD
          IF        EXIT=1
           DISPLAY   *P1:24,*EL,*B,"Current Date Not Found In Period File.",*W5;
           GOTO      INIT9100
          ENDIF
.
          MOVE      DRGYR,FINYEAR
          MOVE      DRGNUM,FINMON
.
.         Get the first directory in the DPATH (cd directory) as this will
.         be where the log file will be created/updated if required
.
          GETENV    ENVVNAME,DPATHVAR            * get DPATH
          IF        @OVER
            DISPLAY   *P1:24,*EL,*B,"Problem getting DPATH (1)",*W5;
            GOTO      INIT9100
          ENDIF
.         
          MOVE      SP100,CDDRCTRY               * clear cd directory variable
          CLEAR     CDDRCTRY
          SCAN      ":",DPATHVAR                 * find end of first directory
          IF        @EOS
            DISPLAY   *P1:24,*EL,*B,"Problem getting DPATH (2)",*W5;
            GOTO      INIT9100
          ENDIF
.
          IF        @EQUAL
            MOVEFPTR  DPATHVAR,FORM3
            SUB       ONE,FORM3
            RESET     DPATHVAR
            SETLPTR   DPATHVAR,FORM3
          ENDIF
.
          MOVE      DPATHVAR,CDDRCTRY
          ENDSET    CDDRCTRY
          APPEND    SLASH,CDDRCTRY
          RESET     CDDRCTRY
.
.         Load up the message array with the valid messages which can
.         be accepted
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 20
            ADD       ONE,COUNTER               
            MOVE      SP3,MTYPARRY[COUNTER]
          DO
.
          MOVE      "A28",MTYPARRY[1]
          MOVE      "A31",MTYPARRY[2]
          MOVE      "A34",MTYPARRY[3]
          MOVE      "P03",MTYPARRY[4]
          MOVE      "I12",MTYPARRY[5]
          MOVE      "I13",MTYPARRY[6]
          MOVE      "I14",MTYPARRY[7]
          MOVE      "A04",MTYPARRY[8]
          MOVE      "A03",MTYPARRY[9]
          MOVE      "M02",MTYPARRY[10]
          MOVE      "A05",MTYPARRY[11]
          MOVE      "S14",MTYPARRY[12]
          MOVE      "A08",MTYPARRY[13]
          MOVE      "A21",MTYPARRY[14]
          MOVE      "A22",MTYPARRY[15]
          MOVE      "S0x",MTYPARRY[16]
          MOVE      "S12",MTYPARRY[17]
          MOVE      "S13",MTYPARRY[18]
          MOVE      "S15",MTYPARRY[19]
          MOVE      "S26",MTYPARRY[20]
.
          MOVE      "1000",RPLYTIME              * set timeout
.
          MOVE      ZERO,VINAHFLG
.
INIT1000  KEYIN     *P1:6,*EF,"Update data files (",*V2LON,*DV:
                    ANSY,*HOFF,*DV,SLASH,*V2LON,*DV,ANSN,*HOFF,") :":
                    *P40:6,*V2LON,ANS
.
          PACK      ANS,ANS,SP1
          REP       UPPLOW,ANS
.
          MATCH     ANSY,ANS
          iF        @EQUAL
            MOVE      ONE,UPDDFLAG
            GOTO      INIT2000
          ENDIF
.
          MATCH     ANSN,ANS
          IF        @EQUAL
            MOVE      ZERO,UPDDFLAG
            GOTO      INIT2000
          ENDIF
.
          BEEP
          GOTO      INIT1000
.
INIT2000  KEYIN     *P1:8,"Display messages to the screen (",*V2LON,*DV:
                    ANSY,*HOFF,*DV,SLASH,*V2LON,*DV,ANSN,*HOFF,") :":
                    *P40:8,*V2LON,ANS
.
          PACK      ANS,ANS,SP1
          REP       UPPLOW,ANS
.
          MATCH     ANSY,ANS
          IF        @EQUAL
            MOVE      ONE,DISPFLAG
            GOTO      INIT9050
          ENDIF
.
          MATCH     ANSN,ANS
          IF        @EQUAL
            MOVE      ZERO,DISPFLAG
            GOTO      INIT9000
          ENDIF
.
          BEEP
          GOTO      INIT2000
.
INIT9000  CALL      BACK0000
.
INIT9050  MOVE      ZERO,EXIT
          GOTO      INIT9999
.
INIT9100  MOVE      ONE,EXIT
.
INIT9999  RETURN
+
.*****************************************************************************
.*                              PROC0000             Called by: MAIN0000     *
.*           Listen for and process an incoming message                      *
.*****************************************************************************
.
.         Get the solicited socket on which we will be listening.
.
PROC0000  IF        DISPFLAG = 1
            DISPLAY   *P1:4,*EF;
          ENDIF
.
          READ      CONTROLF,ZERO;*181,IBCNSOLS
          MATCH     SP20,IBCNSOLS                * blank socket ?
          GOTO      PROC9100 IF EQUAL            * yes
.
.         Set port
.
          MOVE      IBCNSOLS,TCPIPORT
          STRIP     TCPIPORT
.
.         Listen on the port for a connection
.
          IF        DISPFLAG = 1
            DISPLAY   "Listening on port: ",TCPIPORT,*R,*N;
          ENDIF
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          LISTEN    LISSOCKT,TCPIPORT
          TRAPCLR   IO
          BRANCH    OVRCD,PROC9700
.
          MOVE      ZERO,ACCPTCNT                * init. accept try count
.
          IF        DISPFLAG = 1
            DISPLAY   "Accepting connections on port: ",TCPIPORT,*R,*N;
          ENDIF
PROC0100  MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          ACCEPT    COMSOCKT,LISSOCKT
          TRAPCLR   IO
          BRANCH    OVRCD,PROC9800
.
          MOVE      ZERO,ACCPTCNT                * init. accept try count
.
          IF        DISPFLAG = 1
            DISPLAY   "Accepted connection on port: ",TCPIPORT,*R,*N;
          ENDIF
.
.         Wait for a new message to come through
.
PROC0500  COMMIT
.
          IF        DISPFLAG = 1
            DISPLAY   "Waiting for next message....",*R,*N;
          ENDIF
.
          CLOSE     TEXTFILE                     * close text file
.
          CALL      CLER0000                     * clear mess. buffer and flags
          CALL      CTMP0000                     * clear temp table records
          CALL      OLOG0000                     * open message log file
.
          CALL      GTSTR000                     * get next 4000 chars (or less)
          BRANCH    EXIT,PROC9500:               * timeout
                         PROC9000                * connection lost
.
.         Search the string for a start of block (ASCII 11) character
.
          SCAN      STRTBLOK,TMPSTRNG            * sob found ?
          GOTO      PROC0500 IF NOT EQUAL        * no - ignore message
.
          APPEND    STRTBLOK,RECVMESS            * yes
.
          IF        DISPFLAG = 1
            DISPLAY   "Start of Block found",*R,*N;
          ENDIF
.
.         The next segment needs to be processed, so read in the next segment id
.
PROC4000  CALL      GSEG0000                     * validate segment code
          BRANCH    EXIT,PROC9500:               * connection timeout
                         PROC9000:               * connection lost
                         PROC4000:               * start of block
                         PROC6000:               * end of block
                         PROC4000:               * end of segment
                         PROC0500                * 1st segment not MSH
.
          IF        DISPFLAG = 1
            DISPLAY   "Loading segment: [",SEGMENT,"]",*R,*N;
          ENDIF
          WRITE     TEXTFILE,SEQ;LODSCAPT,SEGMENT
.
.         We need to validate the segment for the message type, and
.         make sure that the segment is in the correct sequence for the
.         message
.
          CALL      VSEG0000                     * validate segment
          IF        EXIT = 0
            ADD       ONE,SEGCOUNT               * increment segment count
            PERFORM   MESSGNUM,VA280000:         * validate ADT^A28 segments
                               VA310000:         * validate ADT^A31 segments
                               VA340000:         * validate ADT^A34 segments
                               VP030000:         * validate DFT^P03 segments
                               VREF0000:         * validate REF^I12 segments
                               VREF0000:         * validate REF^I13 segments
                               VREF0000:         * validate REF^I14 segments
                               VA040000:         * validate ADT^A04 segments
                               VA030000:         * validate ADT^A03 segments
                               VMFN0000:         * validate MFN^M02 segments
                               VA050000:         * validate ADT^A05 segments
                               VS140000:         * validate SIU^S14 segments
                               VA080000:         * validate ADT^A08 segments
                               VA210000:         * validate ADT^A21 segments
                               VA220000:         * validate ADT^A22 segments
                               VSRM0000:         * validate SRM^S0x segments
                               VS120000:         * validate SIU^S12 segments
                               VS130000:         * validate SIU^S13 segments
                               VS150000:         * validate SIU^S15 segments
                               VS260000          * validate SIU^S26 segments
          ENDIF
.
.         If a valid segment id has been found, clear the segment fields
.
          PERFORM   SEGNUMBR,CMSH0000:           * MSH
                             CEVN0000:           * EVN
                             CPID0000:           * PID
                             CNK10000:           * NK1
                             CPV10000:           * PV1
                             CMRG0000:           * MRG
                             CFT10000:           * FT1
                             CZXP0000:           * ZXP
                             CZAL0000:           * ZAL
                             CRF10000:           * RF1
                             CPRD0000:           * PRD
                             CZXV0000:           * ZXV
                             CPV20000:           * PV2
                             CMFI0000:           * MFI
                             CMFE0000:           * MFE
                             CSTF0000:           * STF
                             CPRA0000:           * PRA
                             CZPR0000:           * ZPR
                             CPR10000:           * PR1
                             CROL0000:           * ROL
                             CDG10000:           * DG1
                             CZST0000:           * ZST
                             CZSF0000:           * ZSF
                             CSCH0000:           * SCH
                             CRGS0000:           * RGS
                             CZSC0000:           * ZSC
                             CZFT0000:           * ZFT
                             CNTE0000:           * NTE
                             CARQ0000:           * ARQ
                             CGT10000:           * GT1
                             CIN10000:           * IN1
                             CAIS0000:           * AIS
                             CAIL0000:           * AIL
                             CAIP0000:           * AIP
                             CZTR0000:           * ZTR
                             CZNT0000            * ZNT
.
          MOVE      ZERO,FIELDNO                 * initialise seg. field count
.
.         Read in the rest of the segment until an end of segment character
.         (ASCII 13 - Carriage return) is found.
.
PROC5000  CALL      GCHR0000                     * get next character in message
          BRANCH    EXIT,PROC9500:               * connection timeout
                         PROC9000:               * connection lost
                         PROC4000:               * start of block
                         PROC6000:               * end of block
                         PROC5500:               * end of segment
                         PROC0500:               * no field separator
                         PROC0500                * missing encoding char(s)
.
.         Check if the character just read is a component separator,
.         as long as the field is not MSH.2 (which is where the component
.         separator is set).
.
          MATCH     MSHSEGMT,SEGMENT             * MSH segment & second field?
          IF        @EQUAL
            IF        FIELDNO = 2
              GOTO      PROC5100
            ENDIF
          ENDIF
.
.         If the character just read is a component separator, then reset
.         the previous field as long as there was data in the previous
.         field (ie the previous character was not a field separator or a
.         component separator or a repeat separator).
.
          MATCH     ANS,COMSEPAR                 * check if comp. separator
          IF        @EQUAL
            MATCH     PREVCHAR,ANS
            IF        !@EQUAL
              MATCH     PREVCHAR,MSH00101
              IF        !@EQUAL
                MATCH     PREVCHAR,COMSEPAR
                IF        !@EQUAL
                  MATCH     PREVCHAR,REPSEPAR
                  IF        !@EQUAL
                    CALL      RFLD0000           * reset component just loaded
                  ENDIF
                ENDIF
              ENDIF
            ENDIF
            ADD       ONE,COMPCNT                * increment component count
            GOTO      PROC5200                   * only load into full message
          ENDIF
.
          MATCH     ANS,REPSEPAR                 * check if repetition separator
          IF        @EQUAL
            MATCH     PREVCHAR,ANS
            IF        !@EQUAL
              MATCH     PREVCHAR,MSH00101
              IF        !@EQUAL
                MATCH     PREVCHAR,REPSEPAR
                IF        !@EQUAL
                  CALL      RFLD0000             * reset component just loaded
                ENDIF
              ENDIF
            ENDIF
            ADD       ONE,REPTNCNT               * increment repetition count
            MOVE      ONE,COMPCNT                * reset component count
            GOTO      PROC5200                   * only load into full message
          ENDIF
.
.         A valid character has been found so load it into the relevant
.         segment field/component (according to FIELDNO/COMPCNT/REPETITION).
.
PROC5100  PERFORM   SEGNUMBR,LMSH0000:           * MSH
                             LEVN0000:           * EVN
                             LPID0000:           * PID
                             LNK10000:           * NK1
                             LPV10000:           * PV1
                             LMRG0000:           * MRG
                             LFT10000:           * FT1
                             LZXP0000:           * ZXP
                             LZAL0000:           * ZAL
                             LRF10000:           * RF1
                             LPRD0000:           * PRD
                             LZXV0000:           * ZXV
                             LPV20000:           * PV2
                             LMFI0000:           * MFI
                             LMFE0000:           * MFE
                             LSTF0000:           * STF
                             LPRA0000:           * PRA
                             LZPR0000:           * ZPR
                             LPR10000:           * PR1
                             LROL0000:           * ROL
                             LDG10000:           * DG1
                             LZST0000:           * ZST
                             LZSF0000:           * ZSF
                             LSCH0000:           * SCH
                             LRGS0000:           * RGS
                             LZSC0000:           * ZSC
                             LZFT0000:           * ZFT
                             LNTE0000:           * NTE
                             LARQ0000:           * ARQ
                             LGT10000:           * GT1
                             LIN10000:           * IN1
                             LAIS0000:           * AIS
                             LAIL0000:           * AIL
                             LAIP0000:           * AIP
                             LZTR0000:           * ZTR
                             LZNT0000            * ZNT
.
PROC5200  APPEND    ANS,RECVMESS                 * append char. to full message
          MOVE      ANS,PREVCHAR                 * save character
          GOTO      PROC5000
.
PROC5500  WRITE     TEXTFILE,SEQ;SEGMENT,LODECAPT
          IF        DISPFLAG = 1
            DISPLAY   "Validating segment: [",SEGMENT,"]",*R,*N;
          ENDIF
          WRITE     TEXTFILE,SEQ;VALSCAPT,SEGMENT
.
          PERFORM   SEGNUMBR,VMSH0000:           * MSH
                             VEVN0000:           * EVN
                             VPID0000:           * PID
                             VNK10000:           * NK1
                             VPV10000:           * PV1
                             VMRG0000:           * MRG
                             VFT10000:           * FT1
                             VZXP0000:           * ZXP
                             VZAL0000:           * ZAL
                             VRF10000:           * RF1
                             VPRD0000:           * PRD
                             VZXV0000:           * ZXV
                             VPV20000:           * PV2
                             VMFI0000:           * MFI
                             VMFE0000:           * MFE
                             VSTF0000:           * STF
                             VPRA0000:           * PRA
                             VZPR0000:           * ZPR
                             VPR10000:           * PR1
                             VROL0000:           * ROL
                             VDG10000:           * DG1
                             VZST0000:           * ZST
                             VZSF0000:           * ZSF
                             VSCH0000:           * SCH
                             VRGS0000:           * RGS
                             VZSC0000:           * ZSC
                             VZFT0000:           * ZFT
                             VNTE0000:           * NTE
                             VARQ0000:           * ARQ
                             VGT10000:           * GT1
                             VIN10000:           * IN1
                             VAIS0000:           * AIS
                             VAIL0000:           * AIL
                             VAIP0000:           * AIP
                             VZTR0000:           * ZTR
                             VZNT0000            * ZNT
.
          IF        DISPFLAG = 1
            DISPLAY   "[",SEGMENT,"] segment validated",*R,*N;
          ENDIF
          WRITE     TEXTFILE,SEQ;SEGMENT,VALECAPT
.
          MATCH     ANS,ENDBLOCK                 * end of message received ?
          GOTO      PROC4000 IF NOT EQUAL        * no - get next segment
.
.         The end of message (EOB) has been found
.
PROC6000  RESET     RECVMESS
          IF        DISPFLAG = 1
            DISPLAY   "End of Block received",*R,*N;  * display full message
            STRIP     RECVMESS
            MOVE      ZERO,COUNTR
            MOVELPTR  RECVMESS,FORM4
            DISPLAY   *R,*N:
                      "----------------------------------------":
                      "----------------------------------------",*R,*N:
                      "Full Message received is ",FORM4," bytes (including ":
                      "control characters):",*R,*N,*R,*N;
            WHILE     FORM4 > 0
              ADD       ONE,COUNTR
              MATCH     CRETURN,RECVMESS
              IF        @EQUAL
                DISPLAY   *R,*N,*R,*N;
                MOVE      ZERO,COUNTR
              ELSE
                MOVE      RECVMESS,ANS
                DISPLAY   *HON,ANS,*HOFF;
                IF        COUNTR = 80
                  DISPLAY   "]",*R,*N;
                  MOVE      ZERO,COUNTR
                ENDIF
              ENDIF
              SUB       ONE,FORM4
              BUMP      RECVMESS
            DO
            DISPLAY   "----------------------------------------":
                      "----------------------------------------":
                      *R,*N,*R,*N;
            RESET     RECVMESS
          ENDIF
.
.         All general HL7 validations have been performed, so now we
.         need to validate that all mandatory segments have been received
.         for the message type
.
          CALL      MANR0000                     * check for mandatory segments
.
.         Finally validate message specific fields before writing the data
.         to the database
.
          IF        DISPFLAG = 1
            DISPLAY   "Validating message specific fields",*R,*N;
          ENDIF
          WRITE     TEXTFILE,SEQ;VOTSCAPT
          CALL      VMES0000                     * validate message
          WRITE     TEXTFILE,SEQ;VOTECAPT
.
.         If this is a VINAH Episode related I13 or I14 message, then
.         check if the ignore flag has been set and if so, then send back
.         an AA, but don't process the message.
.
PROC6050  MATCH     MTYPEI13,MESSTYPE            * I13 message ?
          IF        !@EQUAL
            MATCH     MTYPEI14,MESSTYPE          * no - I14 message ?
            GOTO      PROC6100 IF NOT EQUAL      * yes
          ENDIF
.
          COMPARE   ONE,IGNORFLG                 * ignoring message ?
          IF        @EQUAL
            WRITE     TEXTFILE,SEQ;IGNRCAPT      * yes
            MOVE      ZERO,ERRORCNT              * reset error count
            GOTO      PROC7000
          ENDIF
.
.         If we are writing/updating the PAS database, and there are no errors,
.         then process the messages
.
PROC6100  COMPARE   ZERO,ERRORCNT                * any errors ?
          IF        !@EQUAL
            WRITE     TEXTFILE,SEQ;ERORCAPT
            GOTO      PROC7000
          ENDIF
.
          COMPARE   ONE,UPDDFLAG                 * updating database ?
          IF        !@EQUAL
            WRITE     TEXTFILE,SEQ;NUPDCAPT
            GOTO      PROC7000
          ENDIF
.
          MOVE      ZERO,F1
          MOVE      IBCNMHRI,F1
          ADD       ONE,F1
          LOAD      D1,F1,ANSP,ANSD,ANST
          MATCH     D1,MSH01101                  * production message ?
          IF        !@EQUAL
            WRITE     TEXTFILE,SEQ;TESTCAPT
            GOTO      PROC7000
          ENDIF
.
          WRITE     TEXTFILE,SEQ;COMSCAPT
.
          MATCH     MTYPEA03,MESSTYPE            * A03 message ?
          GOTO      PROC6101 IF NOT EQUAL        * no
.
          MATCH     "1",PTCNRA03                 * yes - message activated ?
          IF        @EQUAL
            CALL      PA030000                   * yes
            GOTO      PROC6900
          ENDIF
          GOTO      PROC6500                     * no
.
PROC6101  MATCH     MTYPEA04,MESSTYPE            * A04 message ?
          GOTO      PROC6102 IF NOT EQUAL        * no
.
          MATCH     ANSE,PV100201
          IF        @EQUAL
            MATCH     "1",PTCNA04E               * EMR message activated ?
            IF        @EQUAL
              CALL      PA04E000                 * yes - EMR update
              GOTO      PROC6900
            ENDIF
            GOTO      PROC6500                   * no
          ENDIF
.
          MATCH     "1",PTCNRA04                 * yes - message activated ?
          IF        @EQUAL
            CALL      PA040000                   * yes
            GOTO      PROC6900
          ENDIF
          GOTO      PROC6500                     * no
.
PROC6102  MATCH     MTYPEA05,MESSTYPE            * A05 message ?
          GOTO      PROC6103 IF NOT EQUAL        * no
.
          MATCH     "1",PTCNRA05                 * yes - message activated ?
          IF        @EQUAL
            CALL      PA050000                   * yes
            GOTO      PROC6900
          ENDIF
          GOTO      PROC6500                     * no
.
PROC6103  MATCH     MTYPEA28,MESSTYPE            * A28 message ?
          GOTO      PROC6104 IF NOT EQUAL        * no
.
          MATCH     "1",PTCNRA28                 * yes - message activated ?
          IF        @EQUAL
            CALL      PPMI0000                   * yes
            GOTO      PROC6900
          ENDIF
          GOTO      PROC6500                     * no
.
PROC6104  MATCH     MTYPEA31,MESSTYPE            * A31 message ?
          GOTO      PROC6105 IF NOT EQUAL        * no
.
          MATCH     "1",PTCNRA31                 * yes - message activated ?
          IF        @EQUAL
            CALL      PPMI0000                   * yes
            GOTO      PROC6900
          ENDIF
          GOTO      PROC6500                     * no
.
PROC6105  MATCH     MTYPEA34,MESSTYPE            * A34 message ?
          GOTO      PROC6106 IF NOT EQUAL        * no
.
          MATCH     "1",PTCNRA34                 * yes - message activated ?
          IF        @EQUAL
            CALL      PA340000                   * yes
            GOTO      PROC6900
          ENDIF
          GOTO      PROC6500                     * no
.
PROC6106  MATCH     MTYPEM02,MESSTYPE            * M02 message ?
          GOTO      PROC6107 IF NOT EQUAL        * no
.
          MATCH     "1",PTCNRM02                 * yes - message activated ?
          IF        @EQUAL
            CALL      PM020000                   * yes
            GOTO      PROC6900
          ENDIF
          GOTO      PROC6500                     * no
.
PROC6107  MATCH     MTYPEP03,MESSTYPE            * P03 message ?
          GOTO      PROC6108 IF NOT EQUAL        * no
.
          MATCH     "1",PTCNRP03                 * yes - message activated ?
          IF        !@EQUAL
            MATCH     "2",PTCNRP03               * yes - message activated ?
            GOTO      PROC6500 IF NOT EQUAL      * no
          ENDIF
.
.0951823  MATCH     "1",PTCNRP03                 * yes - message activated ?
.0951823  IF        @EQUAL
            MATCH     "ID",FT100601              * invoice on hold ?
            IF        @EQUAL
              CALL      PIOH0000                 * yes
              GOTO      PROC6900
            ENDIF
            MATCH     "RD",FT100601              * remove invoice on hold ?
            IF        @EQUAL
              CALL      PIOH0000                 * yes
              GOTO      PROC6900
            ENDIF
.
            IF        CTHETR = 1
              CALL      PP030000                 * yes - normal P03
            ELSE
              CALL      P3NT0000                 * yes - 'no theatre' P03
            ENDIF
            GOTO      PROC6900
.0951823  ENDIF
.0951823  GOTO      PROC6500                     * P03 not activated
.
PROC6108  MATCH     MTYPEI12,MESSTYPE            * I12 message ?
          GOTO      PROC6109 IF NOT EQUAL        * no
.
          MATCH     "1",PTCNRI12                 * yes - message activated ?
          IF        @EQUAL
            CALL      PI120000                   * yes
            GOTO      PROC6900
          ENDIF
          GOTO      PROC6500                     * no
.
PROC6109  MATCH     MTYPEI13,MESSTYPE            * I13 message ?
          GOTO      PROC6110 IF NOT EQUAL        * no
.
          MATCH     "1",PTCNRI13                 * yes - message activated ?
          IF        @EQUAL
            CALL      PI130000                   * yes
            GOTO      PROC6900
          ENDIF
          GOTO      PROC6500                     * no
.
PROC6110  MATCH     MTYPEI14,MESSTYPE            * I14 message ?
          GOTO      PROC6111 IF NOT EQUAL        * no
.
          MATCH     "1",PTCNRI14                 * yes - message activated ?
          IF        @EQUAL
            CALL      PI140000                   * yes
            GOTO      PROC6900
          ENDIF
          GOTO      PROC6500                     * no
.
PROC6111  MATCH     MTYPES14,MESSTYPE            * S14 message ?
          GOTO      PROC6112 IF NOT EQUAL        * no
.
          MATCH     "2.4",MSH01201
          IF        !@EQUAL
            MATCH     "1",PTCNRS14               * yes - message activated ?
            IF        @EQUAL
              CALL      PS140000                 * yes - update Theatre Details
              GOTO      PROC6900
            ELSE
              GOTO      PROC6500                 * no
            ENDIF
          ENDIF
.
          MATCH     ANSO,PV100201
          IF        @EQUAL
            MATCH     "1",PTCNOS14               * yes - message activated ?
            IF        @EQUAL
              CALL      PS14O000                 * yes - update Outpatient
              GOTO      PROC6900
            ELSE
              GOTO      PROC6500                 * no
            ENDIF
          ENDIF
.
          MATCH     ANSI,PV100201
          IF        @EQUAL
            MATCH     "1",PTCNIS14               * yes - message activated ?
            IF        @EQUAL
              CALL      PS14I000                 * yes - update Inpatient
              GOTO      PROC6900
            ELSE
              GOTO      PROC6500                 * no
            ENDIF
          ENDIF
          GOTO      PROC6500                     * no
.
PROC6112  MATCH     MTYPEA08,MESSTYPE            * A08 message ?
          GOTO      PROC6113 IF NOT EQUAL        * no
.
          MATCH     "1",PTCNUP31
          IF        @EQUAL
            CALL      PPMI0000                   * update PMI for A08s (0887136)
            CALL      PGT10000                   * update GT1 for A08s (0887136)
            CALL      PIN1P000                   * update IN1 for A08s (0887136)
          ENDIF
.
          MATCH     ANSO,PV100201
          IF        @EQUAL
            CALL      PA08O000                   * yes - O/P (Telehealth update)
            GOTO      PROC6900
          ENDIF
.
          MATCH     ANSE,PV100201
          IF        @EQUAL
            MATCH     "1",PTCNA08E               * EMR message activated ?
            IF        @EQUAL
              CALL      PA08E000                 * yes - EMR update
              GOTO      PROC6900
            ENDIF
            GOTO      PROC6500                   * no
          ENDIF
.
          MATCH     "1",PTCNRA08                 * I/P message activated ?
          IF        @EQUAL
            CALL      PA080000                   * yes - I/P update
            GOTO      PROC6900
          ENDIF
          GOTO      PROC6500                     * no
.
PROC6113  MATCH     MTYPEA21,MESSTYPE            * A21 message ?
          GOTO      PROC6114 IF NOT EQUAL        * no
.
          MATCH     "1",PTCNRA21                 * yes - message activated ?
          IF        @EQUAL
            CALL      PA210000                   * yes
            GOTO      PROC6900
          ENDIF
          GOTO      PROC6500                     * no
.
PROC6114  MATCH     MTYPEA22,MESSTYPE            * A22 message ?
          GOTO      PROC6115 IF NOT EQUAL        * no
.
          MATCH     "1",PTCNRA22                 * yes - message activated ?
          IF        @EQUAL
            CALL      PA220000                   * yes
            GOTO      PROC6900
          ENDIF
          GOTO      PROC6500                     * no
.
PROC6115  MATCH     MTYPES0x,MESSTYPE            * S02/S03/S04 message ?
          GOTO      PROC6116 IF NOT EQUAL        * no
.
.0861257  MATCH     MTYPES03,MESSTYPE            * S02 message ?
.0861257  IF        !@EQUAL
.0861257    MATCH     MTYPES03,MESSTYPE          * S03 message ?
.0861257    IF        !@EQUAL
.0861257      MATCH     MTYPES04,MESSTYPE        * S04 message ?
.0861257      GOTO      PROC6900 IF NOT EQUAL    * no
.0861257    ENDIF
.0861257  ENDIF
.
          MATCH     "1",PTCNROPD                 * yes - message activated ?
          IF        @EQUAL
            CALL      POPD0000                   * yes
            GOTO      PROC6900
          ENDIF
          GOTO      PROC6500                     * no
.
PROC6116  MATCH     MTYPES12,MESSTYPE            * S12 message ?
          GOTO      PROC6117 IF NOT EQUAL        * no
.
          MATCH     ANSO,PV100201
          IF        @EQUAL
            MATCH     "1",PTCNOS12               * yes - message activated ?
            IF        @EQUAL
              CALL      PS12O000                 * yes - outpatient
              GOTO      PROC6900
            ENDIF
          ENDIF
.
          MATCH     ANSI,PV100201
          IF        @EQUAL
            MATCH     "1",PTCNIS12               * yes - message activated ?
            IF        @EQUAL
              CALL      PS12I000                 * yes - inpatient
              GOTO      PROC6900
            ENDIF
          ENDIF
          GOTO      PROC6500                     * no
.
PROC6117  MATCH     MTYPES13,MESSTYPE            * S13 message ?
          GOTO      PROC6118 IF NOT EQUAL        * no
.
          MATCH     ANSO,PV100201
          IF        @EQUAL
            MATCH     "1",PTCNOS13               * yes - message activated ?
            IF        @EQUAL
              CALL      PS13O000                 * yes - outpatient
              GOTO      PROC6900
            ENDIF
          ENDIF
          GOTO      PROC6500                     * no
.
PROC6118  MATCH     MTYPES15,MESSTYPE            * S15 message ?
          GOTO      PROC6119 IF NOT EQUAL        * no
.
          MATCH     ANSO,PV100201
          IF        @EQUAL
            MATCH     "1",PTCNOS15               * yes - message activated ?
            IF        @EQUAL
              CALL      PS15O000                 * yes - outpatient
              GOTO      PROC6900
            ENDIF
          ENDIF
.
          MATCH     ANSI,PV100201
          IF        @EQUAL
            MATCH     "1",PTCNIS15               * yes - message activated ?
            IF        @EQUAL
              CALL      PS15I000                 * yes - inpatient
              GOTO      PROC6900
            ENDIF
          ENDIF
          GOTO      PROC6500                     * no
.
PROC6119  MATCH     MTYPES26,MESSTYPE            * S26 message ?
          GOTO      PROC6900 IF NOT EQUAL        * no
.
          MATCH     ANSO,PV100201
          IF        @EQUAL
            MATCH     "1",PTCNOS26               * yes - message activated ?
            IF        @EQUAL
              CALL      PS26O000                 * yes - outpatient
              GOTO      PROC6900
            ENDIF
          ENDIF
          GOTO      PROC6500                     * no
.
.         Message not activated (parameter turned off)
.
PROC6500  MOVE      "Message Type not activated",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          WRITE     TEXTFILE,SEQ;ACTVCAPT
          GOTO      PROC7000
.
PROC6900  COMPARE   ZERO,ERRORCNT                * any errors ?
          IF        !@EQUAL
            WRITE     TEXTFILE,SEQ;ERORCAPT      * data not committed
          ELSE
            WRITE     TEXTFILE,SEQ;COMECAPT      * data committed
          ENDIF
.
.         Unlock the admission record if A21 (On-leave) or A22
.         (Return from Leave) message
.
PROC7000  IF        MESSGNUM = 14 | MESSGNUM = 15
            MOVE      AADMNO,KEY8
            CALL      UUPTMIS1
          ENDIF
.
          IF        ERRORCNT = 0
            CALL      USST0000                   * update successful stats
          ELSE
            CALL      UFST0000                   * update failed/rejected stats
          ENDIF
.
.         Send the reply acknowledgement message
.
          CLOCK     TIME,CTIMEIS
          REP       " 0",CTIMEIS
          WRITE     TEXTFILE,SEQ;
          WRITE     TEXTFILE,SEQ;SENDCAPN,CTIMEIS
          IF        DISPFLAG = 1
            DISPLAY   "Sending Acknowledgement",*R,*N;
          ENDIF
          CALL      WMSH0000                     * format MSH segment
          BRANCH    EXIT,PROC9000:               * connection lost
                         PROC9600                * timeout
          WRITE     TEXTFILE,SEQ;
          WRITE     TEXTFILE,SEQ;MSHSCAPT
.
          CALL      WMSA0000                     * format MSA segment
          BRANCH    EXIT,PROC9000:               * connection lost
                         PROC9600                * timeout
          WRITE     TEXTFILE,SEQ;
          WRITE     TEXTFILE,SEQ;MSASCAPT
.
.         Finish sending message with an end of block character and carriage
.         return
.
          IF        DISPFLAG = 1
            DISPLAY   "Sending end of message [",*HON,ENDBLOCK,ASK:
                      *HOFF,"]:  (* = carriage return)",*R,*N;
          ENDIF
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF SIGPIPE
          WRITE     COMSOCKT,2,1000;ENDBLOCK,CRETURN
          TRAPCLR   SIGPIPE
          GOTO      PROC9600 IF TIMEOUT          * timeout expired
          BRANCH    OVRCD,PROC9000               * connection lost
.
          GOTO      PROC0500                     * get next message
.
PROC9000  IF        DISPFLAG = 1
            DISPLAY   "Connection lost",*R,*N;
          ENDIF
          WRITE     TEXTFILE,SEQ;CONNCAPT
          GOTO      PROC9900
.
PROC9100  IF        DISPFLAG = 1
            DISPLAY   "Solicited Socket not set up",*R,*N;
          ENDIF
          GOTO      PROC9900
.
PROC9500  IF        DISPFLAG = 1
            DISPLAY   "Timeout waiting for incoming message",*R,*N;
          ENDIF
          WRITE     TEXTFILE,SEQ;ICOMCAPT
          GOTO      PROC0500
.
PROC9600  IF        DISPFLAG = 1
            DISPLAY   "Timeout waiting for outgoing message",*R,*N;
          ENDIF
          WRITE     TEXTFILE,SEQ;OUTGCAPT
          GOTO      PROC9900
.
PROC9700  IF        DISPFLAG = 1
            DISPLAY   "Unable to listen on socket",*R,*N;
          ENDIF
          GOTO      PROC9999                                 
.
PROC9800  IF        DISPFLAG = 1
            DISPLAY   "Unable to accept a socket connection",*R,*N;
          ENDIF
          ADD       ONE,ACCPTCNT                 * increment accept try count
          IF        ACCPTCNT < 5
            GOTO      PROC0100
          ELSE
            GOTO      PROC9999
          ENDIF
.
.         Close the communications socket and start again
.
PROC9900  CLOSE     COMSOCKT
          GOTO      PROC0100
.
PROC9999  RETURN
+
.*****************************************************************************
.*                          GTSTR000               Called by: PROC0000       *
.*                                                            GSEG0000       *
.*                                                            GCHR0000       *
.*        Read the next 4000 characters (or less) from the socket            *
.* Returns:   TMPSTRNG - buffer containing character string read in          *
.*            EXIT      0 = read ok                                          *
.*                      1 = timeout expired                                  *
.*                      2 = connection lost                                  *
.*****************************************************************************
.
GTSTR000  RECV      COMSOCKT,4000,30000;TMPSTRNG; * read first 4000 characters
          GOTO      GTSTR910 IF TIMEOUT          * timeout expired
          GOTO      GTSTR920 IF OVER             * connection lost
          IF        @LESS
.>>>>>>                                          * there are no more chars
.                                                  to be read
          ENDIF
.
.         Data received
.
          IF        DISPFLAG = 1
            STRIP     TMPSTRNG
            MOVE      ZERO,COUNTR
            MOVELPTR  TMPSTRNG,FORM4
            DISPLAY   "Received ",FORM4," bytes:  (* = carriage return)",*R,*N;
            WHILE     FORM4 > 0
              ADD       ONE,COUNTR
              MATCH     CRETURN,TMPSTRNG
              IF        @EQUAL
                MOVE      ASK,ANS
              ELSE
                MOVE      TMPSTRNG,ANS
              ENDIF
              IF        COUNTR = 1
                DISPLAY   "[";
              ENDIF
              DISPLAY   *HON,ANS,*HOFF;
              IF        COUNTR = 70
                DISPLAY   "]",*R,*N;
                MOVE      ZERO,COUNTR
              ENDIF
              SUB       ONE,FORM4
              BUMP      TMPSTRNG
            DO
            DISPLAY     "]",*R,*N;
            RESET       TMPSTRNG
          ENDIF
          CLOCK     TIME,TIMSTAMP                * get current date/time
          WRITE     TEXTFILE,SEQ;RECVCAPT,TIMSTAMP," by ",PRGID,SP1,VERSION
          WRITE     TEXTFILE,SEQ;TMPSTRNG
.
          MOVE      ZERO,EXIT
          GOTO      GTSTR999
.
GTSTR910  MOVE      ONE,EXIT                     * timeout
          GOTO      GTSTR999
.
GTSTR920  MOVE      TWO,EXIT                     * connection lost
          GOTO      GTSTR999
.
GTSTR999  RETURN
+
.*****************************************************************************
.*                              GDTM0000           Called by: WMSH0000       *
.*        Get the datetime the message is being sent                         *
.* Returns: DATETIME (ccyymmddhhmmss) - current date & time                  *
.*****************************************************************************
.
GDTM0000  OPEN      CONTROLF,"controlf"
          CALL      IBACLOCK
          UNPACK    CTIMEIS,HOURTM,ANS,MINTIME,ANS,SECTIME
          PACK      DATETIME,CCC,CYY,CMM,CDD,HOURTM,MINTIME,SECTIME
          REP       " 0",DATETIME
.
GDTM9999  RETURN
+
.*****************************************************************************
.*                                 LMSH0000        Called by: PROC0000       *
.*                          Load the MSH fields                              *
.*****************************************************************************
.
LMSH0000  BRANCH    FIELDNO,LMSH9999:            * Field Separator
                            LMSH0200:            * Encoding Characters
                            LMSH0300:            * Sending Application
                            LMSH0400:            * Sending Facility
                            LMSH0500:            * Receiving Application
                            LMSH0600:            * Receiving Facility
                            LMSH0700:            * Date/Time of Message
                            LMSH0800:            * Security
                            LMSH0900:            * Message Type
                            LMSH1000:            * Message Control ID
                            LMSH1100:            * Processing ID
                            LMSH1200:            * Version ID
                            LMSH1300:            * Sequence Number
                            LMSH1400:            * Continuation Pointer
                            LMSH1500:            * Accept Acknowledgement Type
                            LMSH1600:            * Appl. Acknowledgement Type
                            LMSH1700:            * Country Code
                            LMSH1800:            * Character Set
                            LMSH1900:            * Principal Language of Message
                            LMSH2000:            * Alt. Char Set Hand Scheme
                            LMSH2100             * Conformance Statement ID
.
.         Invalid MSH field received, so ignore it
.
          GOTO      LMSH9999
.
. Note: MSH00101 is set in GCHR0000
.
.         MSH.2 Encoding Characters (ST)
.
LMSH0200  BRANCH    COMPCNT,LMSH0201
          GOTO      LMSH9999
.
LMSH0201  APPEND    ANS,MSH00201
          GOTO      LMSH9999
.
.         MSH.3 Sending Application (HD)
.
LMSH0300  BRANCH    COMPCNT,LMSH0301:            * namespace ID
                            LMSH0302:            * universal ID
                            LMSH0303             * universal ID type
          GOTO      LMSH9999
.
LMSH0301  APPEND    ANS,MSH00301                 * load namespace id (IS)
          GOTO      LMSH9999
.
LMSH0302  APPEND    ANS,MSH00302                 * load universal id (ST)
          GOTO      LMSH9999
.
LMSH0303  APPEND    ANS,MSH00303                 * load universal id type (ID)
          GOTO      LMSH9999
.
.         MSH.4 Sending Facility
.
LMSH0400  BRANCH    COMPCNT,LMSH0401:            * namespace ID
                            LMSH0402:            * universal ID
                            LMSH0403             * universal ID type
          GOTO      LMSH9999
.
LMSH0401  APPEND    ANS,MSH00401                 * load namespace id (IS)
          GOTO      LMSH9999
.
LMSH0402  APPEND    ANS,MSH00402                 * load universal id (ST)
          GOTO      LMSH9999
.
LMSH0403  APPEND    ANS,MSH00403                 * load universal id type (ID)
          GOTO      LMSH9999
.
.         MSH.5 Receiving Application
.
LMSH0500  BRANCH    COMPCNT,LMSH0501:            * namespace ID
                            LMSH0502:            * universal ID
                            LMSH0503             * universal ID type
          GOTO      LMSH9999
.
LMSH0501  APPEND    ANS,MSH00501                 * load namespace id (IS)
          GOTO      LMSH9999
.
LMSH0502  APPEND    ANS,MSH00502                 * load universal id (ST)
          GOTO      LMSH9999
.
LMSH0503  APPEND    ANS,MSH00503                 * load universal id type (ID)
          GOTO      LMSH9999
.
.         MSH.6 Receiving Facility
.
LMSH0600  BRANCH    COMPCNT,LMSH0601:            * namespace ID
                            LMSH0602:            * universal ID
                            LMSH0603             * universal ID type
          GOTO      LMSH9999
.
LMSH0601  APPEND    ANS,MSH00601                 * load namespace id (IS)
          GOTO      LMSH9999
.
LMSH0602  APPEND    ANS,MSH00602                 * load universal id (ST)
          GOTO      LMSH9999
.
LMSH0603  APPEND    ANS,MSH00603                 * load universal id type (ID)
          GOTO      LMSH9999
.
.         MSH.7 Date/Time of Message (TS)
.
LMSH0700  BRANCH    COMPCNT,LMSH0701
          GOTO      LMSH9999
.
LMSH0701  APPEND    ANS,MSH00701
          GOTO      LMSH9999
.
.         MSH.8 Security (ST)
.
LMSH0800  BRANCH    COMPCNT,LMSH0801
          GOTO      LMSH9999
.
LMSH0801  APPEND    ANS,MSH00801
          GOTO      LMSH9999
.
.         MSH.9 Message Type (CM)
.
LMSH0900  BRANCH    COMPCNT,LMSH0901:            * message type
                            LMSH0902:            * trigger event
                            LMSH0903             * message structure
          GOTO      LMSH9999
.         
LMSH0901  APPEND    ANS,MSH00901                 * load message type (ID)
          GOTO      LMSH9999
.         
LMSH0902  APPEND    ANS,MSH00902                 * load trigger event (ID)
          GOTO      LMSH9999
.
LMSH0903  APPEND    ANS,MSH00903                 * load message structure (ID)
          GOTO      LMSH9999
.
.         MSH.10 Message Control ID (ST)
.
LMSH1000  BRANCH    COMPCNT,LMSH1001
          GOTO      LMSH9999
.
LMSH1001  APPEND    ANS,MSH01001
          GOTO      LMSH9999
.
.         MSH.11 Processing ID (PT)
.
LMSH1100  BRANCH    COMPCNT,LMSH1101:            * processing id
                            LMSH1102             * processing mode
          GOTO      LMSH9999
.         
LMSH1101  APPEND    ANS,MSH01101                 * load processing id (ID)
          GOTO      LMSH9999
.         
LMSH1102  APPEND    ANS,MSH01102                 * load processing mode (ID)
          GOTO      LMSH9999
.
.         MSH.12 Version ID (VID)
.
LMSH1200  BRANCH    COMPCNT,LMSH1201:            * version ID
                            LMSH1202:            * internationalisation code
                            LMSH1203             * internal version ID
          GOTO      LMSH9999
.         
LMSH1201  APPEND    ANS,MSH01201                 * load version id (ID)
          GOTO      LMSH9999
.         
LMSH1202  APPEND    ANS,MSH01202                 * load intern'ln code (CE)
          GOTO      LMSH9999
.
LMSH1203  APPEND    ANS,MSH01203                 * load internal version id (CE)
          GOTO      LMSH9999
.
.         MSH.13 Sequence Number (NM)
.
LMSH1300  BRANCH    COMPCNT,LMSH1301
          GOTO      LMSH9999
.
LMSH1301  APPEND    ANS,MSH01301
          GOTO      LMSH9999
.
.         MSH.14 Continuation Pointer (ST)
.
LMSH1400  BRANCH    COMPCNT,LMSH1401
          GOTO      LMSH9999
.
LMSH1401  APPEND    ANS,MSH01401
          GOTO      LMSH9999
.
.         MSH.15 Accept Acknowledgement Type (ID)
.
LMSH1500  BRANCH    COMPCNT,LMSH1501
          GOTO      LMSH9999
.
LMSH1501  APPEND    ANS,MSH01501
          GOTO      LMSH9999
.
.         MSH.16 Application Acknowledgement Type (ID)
.
LMSH1600  BRANCH    COMPCNT,LMSH1601
          GOTO      LMSH9999
.
LMSH1601  APPEND    ANS,MSH01601
          GOTO      LMSH9999
.
.         MSH.17 Country Code (ID)
.
LMSH1700  BRANCH    COMPCNT,LMSH1701
          GOTO      LMSH9999
.
LMSH1701  APPEND    ANS,MSH01701
          GOTO      LMSH9999
.
.         MSH.18 Character Set (ID)
.
LMSH1800  BRANCH    COMPCNT,LMSH1801
          GOTO      LMSH9999
.
LMSH1801  APPEND    ANS,MSH01801
          GOTO      LMSH9999
.
.         MSH.19 Principal Language of Message (CE)
.
LMSH1900  BRANCH    COMPCNT,LMSH1901:            * identifier
                            LMSH1902:            * text
                            LMSH1903:            * name of coding system
                            LMSH1904:            * alternate identifier
                            LMSH1905:            * alternate text
                            LMSH1906             * name of alternate coding syst
          GOTO      LMSH9999
.         
LMSH1901  APPEND    ANS,MSH01901                 * load identifier (ID)
          GOTO      LMSH9999
.         
LMSH1902  APPEND    ANS,MSH01902                 * load text (ST)
          GOTO      LMSH9999
.
LMSH1903  APPEND    ANS,MSH01903                 * load name of cod. system (ST)
          GOTO      LMSH9999
.         
LMSH1904  APPEND    ANS,MSH01904                 * load alternate ident. (ID)
          GOTO      LMSH9999
.         
LMSH1905  APPEND    ANS,MSH01905                 * load aternate text (ST)
          GOTO      LMSH9999
.
LMSH1906  APPEND    ANS,MSH01906                 * load name alt cod system (ST)
          GOTO      LMSH9999
.
.         MSH.20 Alternate Character Set Handling (ID)
.
LMSH2000  BRANCH    COMPCNT,LMSH2001
          GOTO      LMSH9999
.
LMSH2001  APPEND    ANS,MSH02001
          GOTO      LMSH9999
.
.         MSH.21 Conformance Statement ID (ID) (HL7 2.4 only)
.
LMSH2100  BRANCH    COMPCNT,LMSH2101
          GOTO      LMSH9999
.
LMSH2101  APPEND    ANS,MSH02101
          GOTO      LMSH9999
.
LMSH9999  RETURN
+
.*****************************************************************************
.*                                 LEVN0000        Called by: PROC0000       *
.*                          Load the EVN fields                              *
.*****************************************************************************
.
LEVN0000  BRANCH    FIELDNO,LEVN0100:            * Event Type Code
                            LEVN0200:            * Recorded Date/Time
                            LEVN0300:            * Date/Time Planned Event
                            LEVN0400:            * Event Reason Code
                            LEVN0500:            * Operator Id
                            LEVN0600             * Event Occurred
.
.         Invalid EVN field received, so ignore it
.
          GOTO      LEVN9999
.
.         EVN.1 Event Type Code (ID)
.
LEVN0100  BRANCH    COMPCNT,LEVN0101
          GOTO      LEVN9999
.
LEVN0101  APPEND    ANS,EVN00101
          GOTO      LEVN9999
.
.         EVN.2 Recorded Date/Time (TS)
.
LEVN0200  BRANCH    COMPCNT,LEVN0201
          GOTO      LEVN9999
.
LEVN0201  APPEND    ANS,EVN00201
          GOTO      LEVN9999
.
.         EVN.3 Date/Time Planned Event (TS)
.
LEVN0300  BRANCH    COMPCNT,LEVN0301
          GOTO      LEVN9999
.
LEVN0301  APPEND    ANS,EVN00301
          GOTO      LEVN9999
.
.         EVN.4 Event Reason Code (IS)
.
LEVN0400  BRANCH    COMPCNT,LEVN0401
          GOTO      LEVN9999
.
LEVN0401  APPEND    ANS,EVN00401
          GOTO      LEVN9999
.
.         EVN.5 Operator ID (XCN)
.
LEVN0500  BRANCH    COMPCNT,LEVN0501:            * id number (ST)
                            LEVN0502:            * family name (ST)
                            LEVN0503:            * given name (ST)
                            LEVN0504:            * middle name (ST)
                            LEVN0505:            * suffix (ST)
                            LEVN0506:            * prefix (ST)
                            LEVN0507:            * degree (IS)
                            LEVN0508:            * source table (IS)
                            LEVN0509:            * assigning authority (HD)
                            LEVN0510:            * name type code (ID)
                            LEVN0511:            * identifier check digit (ST)
                            LEVN0512:            * check digit code scheme (ID)
                            LEVN0513:            * identifier type code (IS)
                            LEVN0514:            * assigning facility (HD)
                            LEVN0515             * name representation code (ID)
          GOTO      LEVN9999
.
LEVN0501  APPEND    ANS,EVN00501
          GOTO      LEVN9999
.
LEVN0502  APPEND    ANS,EVN00502
          GOTO      LEVN9999
.
LEVN0503  APPEND    ANS,EVN00503
          GOTO      LEVN9999
.
LEVN0504  APPEND    ANS,EVN00504
          GOTO      LEVN9999
.
LEVN0505  APPEND    ANS,EVN00505
          GOTO      LEVN9999
.
LEVN0506  APPEND    ANS,EVN00506
          GOTO      LEVN9999
.
LEVN0507  APPEND    ANS,EVN00507
          GOTO      LEVN9999
.
LEVN0508  APPEND    ANS,EVN00508
          GOTO      LEVN9999
.
LEVN0509  APPEND    ANS,EVN00509
          GOTO      LEVN9999
.
LEVN0510  APPEND    ANS,EVN00510
          GOTO      LEVN9999
.
LEVN0511  APPEND    ANS,EVN00511
          GOTO      LEVN9999
.
LEVN0512  APPEND    ANS,EVN00512
          GOTO      LEVN9999
.
LEVN0513  APPEND    ANS,EVN00513
          GOTO      LEVN9999
.
LEVN0514  APPEND    ANS,EVN00514
          GOTO      LEVN9999
.
LEVN0515  APPEND    ANS,EVN00515
          GOTO      LEVN9999
.
.         EVN.6 Event Occurred (TS)
.
LEVN0600  BRANCH    COMPCNT,LEVN0601
          GOTO      LEVN9999
.
LEVN0601  APPEND    ANS,EVN00601
          GOTO      LEVN9999
.
LEVN9999  RETURN
+
.*****************************************************************************
.*                                 LPID0000        Called by: PROC0000       *
.*                          Load the PID fields                              *
.*****************************************************************************
.
LPID0000  BRANCH    FIELDNO,LPID0100:            * Set ID - Patient ID
                            LPID0200:            * Patient ID (External)
                            LPID0300:            * Patient ID (Internal)
                            LPID0400:            * Alternate Patient ID
                            LPID0500:            * Patient Name
                            LPID0600:            * Mother's Maiden name
                            LPID0700:            * Date/Time of Birth
                            LPID0800:            * Gender
                            LPID0900:            * Patient Alias
                            LPID1000:            * Race
                            LPID1100:            * Patient Address Information
                            LPID1200:            * County Code
                            LPID1300:            * Contact Information
                            LPID1400:            * Contact Information
                            LPID1500:            * Language Spoken
                            LPID1600:            * Marital Status
                            LPID1700:            * Religion
                            LPID1800:            * Patient Account Number
                            LPID1900:            * SSN Number - Patient
                            LPID2000:            * Driver's License No - Patient
                            LPID2100:            * Mother's Identifier
                            LPID2200:            * Ethnic Group
                            LPID2300:            * Place of Birth
                            LPID2400:            * Multiple Birth Indicator
                            LPID2500:            * Birth Order
                            LPID2600:            * Citizenship
                            LPID2700:            * Veterans Military Status
                            LPID2800:            * Nationality
                            LPID2900:            * Patient Death Date/Time
                            LPID3000             * Patient Death Indicator
.
.         Invalid PID field received, so ignore it
.
          GOTO      LPID9999
.
.         PID.1 Set ID (SI)
.
LPID0100  BRANCH    COMPCNT,LPID0101
          GOTO      LPID9999
.
LPID0101  APPEND    ANS,PID00101
          GOTO      LPID9999
.
.         PID.2 Patient ID (CX)
.
LPID0200  BRANCH    COMPCNT,LPID0201:            * id (ST)
                            LPID0202:            * check digit (ST)
                            LPID0203:            * check digit code scheme (ID)
                            LPID0204:            * assigning authority (HD)
                            LPID0205:            * identifier type code (IS)
                            LPID0206             * assigning facility (HD)
          GOTO      LPID9999
.
LPID0201  APPEND    ANS,PID00201                 * load id (ST)
          GOTO      LPID9999
.
LPID0202  APPEND    ANS,PID00202                 * load check digit (ST)
          GOTO      LPID9999
.
LPID0203  APPEND    ANS,PID00203                 * load check digit scheme (ID)
          GOTO      LPID9999
.
LPID0204  APPEND    ANS,PID00204                 * load assigning authority (HD)
          GOTO      LPID9999
.
LPID0205  APPEND    ANS,PID00205                 * load ident. type code (IS)
          GOTO      LPID9999
.
LPID0206  APPEND    ANS,PID00206                 * load assigning facility (HD)
          GOTO      LPID9999
.
.         PID.3 Patient Identifier List (CX)
.                 (maximum of 10 repeats - 11 identifiers in total)
.
LPID0300  COMPARE   REPTNCNT,TEN1                * maximum repeats reached ?
          GOTO      LPID9999 IF LESS             * yes
.
          BRANCH    COMPCNT,LPID0301:            * id (ST)
                            LPID0302:            * check digit (ST)
                            LPID0303:            * check digit code scheme (ID)
                            LPID0304:            * assigning authority (HD)
                            LPID0305:            * identifier type code (IS)
                            LPID0306             * assigning facility (HD)
          GOTO      LPID9999
.
LPID0301  APPEND    ANS,PID00301[REPTNCNT]       * load id (ST)
          GOTO      LPID9999
.
LPID0302  APPEND    ANS,PID00302[REPTNCNT]       * load check digit (ST)
          GOTO      LPID9999
.
LPID0303  APPEND    ANS,PID00303[REPTNCNT]       * load check digit scheme (ID)
          GOTO      LPID9999
.
LPID0304  APPEND    ANS,PID00304[REPTNCNT]       * load assigning authority (HD)
          GOTO      LPID9999
.
LPID0305  APPEND    ANS,PID00305[REPTNCNT]       * load ident. type code (IS)
          GOTO      LPID9999
.
LPID0306  APPEND    ANS,PID00306[REPTNCNT]       * load assigning facility (HD)
          GOTO      LPID9999
.
.         PID.4 Alternate Patient ID (CX)
.
LPID0400  BRANCH    COMPCNT,LPID0401:            * id (ST)
                            LPID0402:            * check digit (ST)
                            LPID0403:            * check digit code scheme (ID)
                            LPID0404:            * assigning authority (HD)
                            LPID0405:            * identifier type code (IS)
                            LPID0406             * assigning facility (HD)
          GOTO      LPID9999
.
LPID0401  APPEND    ANS,PID00401                 * load id (ST)
          GOTO      LPID9999
.
LPID0402  APPEND    ANS,PID00402                 * load check digit (ST)
          GOTO      LPID9999
.
LPID0403  APPEND    ANS,PID00403                 * load check digit scheme (ID)
          GOTO      LPID9999
.
LPID0404  APPEND    ANS,PID00404                 * load assigning authority (HD)
          GOTO      LPID9999
.
LPID0405  APPEND    ANS,PID00405                 * load ident. type code (IS)
          GOTO      LPID9999
.
LPID0406  APPEND    ANS,PID00406                 * load assigning facility (HD)
          GOTO      LPID9999
.
.         PID.5 Patient Name (XPN)
.                 (zero repeats - 1 name in total)
.
LPID0500  COMPARE   REPTNCNT,ONE                 * maximum repeats reached ?
          GOTO      LPID9999 IF LESS             * yes
.
          BRANCH    COMPCNT,LPID0501:            * family name (ST)
                            LPID0502:            * given name (ST)
                            LPID0503:            * middle name (ST)
                            LPID0504:            * suffix (ST)
                            LPID0505:            * prefix (ST)
                            LPID0506:            * degree (IS)
                            LPID0507:            * name type code (ID)
                            LPID0508             * name representation code (ID)
          GOTO      LPID9999
.
LPID0501  APPEND    ANS,PID00501                 * load family name (ST)
          GOTO      LPID9999
.
LPID0502  APPEND    ANS,PID00502                 * load given name (ST)
          GOTO      LPID9999
.
LPID0503  APPEND    ANS,PID00503                 * load middle name (ST)
          GOTO      LPID9999
.
LPID0504  APPEND    ANS,PID00504                 * load suffix (ST)
          GOTO      LPID9999
.
LPID0505  APPEND    ANS,PID00505                 * load prefix (ST)
          GOTO      LPID9999
.
LPID0506  APPEND    ANS,PID00506                 * load degree (IS)
          GOTO      LPID9999
.
LPID0507  APPEND    ANS,PID00507                 * load name type code (ID)
          GOTO      LPID9999
.
LPID0508  APPEND    ANS,PID00508                 * load name rep. code (ID)
          GOTO      LPID9999
.
.         PID.6 Mother's Maiden Name (XPN)
.
LPID0600  BRANCH    COMPCNT,LPID0601:            * family name (ST)
                            LPID0602:            * given name (ST)
                            LPID0603:            * middle name (ST)
                            LPID0604:            * suffix (ST)
                            LPID0605:            * prefix (ST)
                            LPID0606:            * degree (IS)
                            LPID0607:            * name type code (ID)
                            LPID0608             * name representation code (ID)
          GOTO      LPID9999
.
LPID0601  APPEND    ANS,PID00601                 * load family name (ST)
          GOTO      LPID9999
.
LPID0602  APPEND    ANS,PID00602                 * load given name (ST)
          GOTO      LPID9999
.
LPID0603  APPEND    ANS,PID00603                 * load middle name (ST)
          GOTO      LPID9999
.
LPID0604  APPEND    ANS,PID00604                 * load suffix (ST)
          GOTO      LPID9999
.
LPID0605  APPEND    ANS,PID00605                 * load prefix (ST)
          GOTO      LPID9999
.
LPID0606  APPEND    ANS,PID00606                 * load degree (IS)
          GOTO      LPID9999
.
LPID0607  APPEND    ANS,PID00607                 * load name type code (ID)
          GOTO      LPID9999
.
LPID0608  APPEND    ANS,PID00608                 * load name rep. code (ID)
          GOTO      LPID9999
.
.         PID.7 Date/Time for Birth (TS)
.
LPID0700  BRANCH    COMPCNT,LPID0701
          GOTO      LPID9999
.
LPID0701  APPEND    ANS,PID00701
          GOTO      LPID9999
.
.         PID.8 Sex (IS)
.
LPID0800  BRANCH    COMPCNT,LPID0801
          GOTO      LPID9999
.
LPID0801  APPEND    ANS,PID00801
          GOTO      LPID9999
.
.         PID.9 Patient Alias (XPN)
.                 (maximum of 79 repeats - 80 aliases in total)
.
LPID0900  COMPARE   REPTNCNT,EIGHTY              * maximum repeats reached ?
          GOTO      LPID9999 IF LESS             * yes
.
          BRANCH    COMPCNT,LPID0901:            * family name (ST)
                            LPID0902:            * given name (ST)
                            LPID0903:            * middle name (ST)
                            LPID0904:            * suffix (ST)
                            LPID0905:            * prefix (ST)
                            LPID0906:            * degree (IS)
                            LPID0907:            * name type code (ID)
                            LPID0908             * name representation code (ID)
          GOTO      LPID9999
.
LPID0901  APPEND    ANS,PID00901[REPTNCNT]       * load family name (ST)
          GOTO      LPID9999
.
LPID0902  APPEND    ANS,PID00902[REPTNCNT]       * load given name (ST)
          GOTO      LPID9999
.
LPID0903  APPEND    ANS,PID00903[REPTNCNT]       * load middle name (ST)
          GOTO      LPID9999
.
LPID0904  APPEND    ANS,PID00904[REPTNCNT]       * load suffix (ST)
          GOTO      LPID9999
.
LPID0905  APPEND    ANS,PID00905[REPTNCNT]       * load prefix (ST)
          GOTO      LPID9999
.
LPID0906  APPEND    ANS,PID00906[REPTNCNT]       * load degree (IS)
          GOTO      LPID9999
.
LPID0907  APPEND    ANS,PID00907[REPTNCNT]       * load name type code (ID)
          GOTO      LPID9999
.
LPID0908  APPEND    ANS,PID00908[REPTNCNT]       * load name rep. code (ID)
          GOTO      LPID9999
.
.         PID.10 Race (CE)
.
LPID1000  BRANCH    COMPCNT,LPID1001:            * identifier (ST)
                            LPID1002:            * text (ST)
                            LPID1003:            * name of coding system (ST)
                            LPID1004:            * alternate identifier (ST)
                            LPID1005:            * alternate text (ST)
                            LPID1006             * name alt. coding system (ST)
          GOTO      LPID9999
.
LPID1001  APPEND    ANS,PID01001                 * load identifier (ST)
          GOTO      LPID9999
.
LPID1002  APPEND    ANS,PID01002                 * load text (ST)
          GOTO      LPID9999
.
LPID1003  APPEND    ANS,PID01003                 * load name coding system (ST)
          GOTO      LPID9999
.
LPID1004  APPEND    ANS,PID01004                 * load alt. identifier (ST)
          GOTO      LPID9999
.
LPID1005  APPEND    ANS,PID01005                 * load alternate text (ST)
          GOTO      LPID9999
.
LPID1006  APPEND    ANS,PID01006                 * load name alt. cod. sys (HD)
          GOTO      LPID9999
.
.         PID.11 Patient Address (XAD)
.                (maximum of 1 repeat - 2 addresses in total)
.
LPID1100  COMPARE   REPTNCNT,TWO                 * maximum repeats reached ?
          GOTO      LPID9999 IF LESS             * yes
.
          BRANCH    COMPCNT,LPID1101:            * street address (ST)
                            LPID1102:            * other designation (ST)
                            LPID1103:            * city (ST)
                            LPID1104:            * state (ST)
                            LPID1105:            * postcode (ST)
                            LPID1106:            * country (ID)
                            LPID1107:            * address type (ID)
                            LPID1108:            * other geographic desig. (ST)
                            LPID1109:            * county (IS)
                            LPID1110:            * census tract (IS)
                            LPID1111             * address rep. code (ID)
          GOTO      LPID9999
.
LPID1101  APPEND    ANS,PID01101[REPTNCNT]       * load street address (ST)
          GOTO      LPID9999
.
LPID1102  APPEND    ANS,PID01102[REPTNCNT]       * load other designation (ST)
          GOTO      LPID9999
.
LPID1103  APPEND    ANS,PID01103[REPTNCNT]       * load city (ST)
          GOTO      LPID9999
.
LPID1104  APPEND    ANS,PID01104[REPTNCNT]       * load state (ST)
          GOTO      LPID9999
.
LPID1105  APPEND    ANS,PID01105[REPTNCNT]       * load postcode (ST)
          GOTO      LPID9999
.
LPID1106  APPEND    ANS,PID01106[REPTNCNT]       * load country (ID)
          GOTO      LPID9999
.
LPID1107  APPEND    ANS,PID01107[REPTNCNT]       * load address type (ID)
          GOTO      LPID9999
.
LPID1108  APPEND    ANS,PID01108[REPTNCNT]       * load other geog. desig. (ST)
          GOTO      LPID9999
.
LPID1109  APPEND    ANS,PID01109[REPTNCNT]       * load county (IS)
          GOTO      LPID9999
.
LPID1110  APPEND    ANS,PID01110[REPTNCNT]       * load census tract (IS)
          GOTO      LPID9999
.
LPID1111  APPEND    ANS,PID01111[REPTNCNT]       * load address rep code (ID)
          GOTO      LPID9999
.
.         PID.12 County Code (IS)
.
LPID1200  BRANCH    COMPCNT,LPID1201
          GOTO      LPID9999
.
LPID1201  APPEND    ANS,PID01201                 * load county code
          GOTO      LPID9999
.
.         PID.13 Phone Number - Home (XTN)
.                (maximum of 1 repeat - 2 phone numbers in total)
.
LPID1300  COMPARE   REPTNCNT,TWO                 * maximum repeats reached ?
          GOTO      LPID9999 IF LESS             * yes
.
          BRANCH    COMPCNT,LPID1301:            * text
                            LPID1302:            * telecomm. use code (ID)
                            LPID1303:            * telcomm. equipment type (ID)
                            LPID1304:            * email address (ST)
                            LPID1305:            * country code (NM)
                            LPID1306:            * area/city code (NM)
                            LPID1307:            * phone number (NM)
                            LPID1308:            * extension (NM)
                            LPID1309             * any text (ST)
          GOTO      LPID9999
.
LPID1301  APPEND    ANS,PID01301[REPTNCNT]       * load text
          GOTO      LPID9999
.
LPID1302  APPEND    ANS,PID01302[REPTNCNT]       * load telecomm. use code (ID)
          GOTO      LPID9999
.
LPID1303  APPEND    ANS,PID01303[REPTNCNT]       * load telcomm. equip.type (ID)
          GOTO      LPID9999
.
LPID1304  APPEND    ANS,PID01304[REPTNCNT]       * load email address (ST)
          GOTO      LPID9999
.
LPID1305  APPEND    ANS,PID01305[REPTNCNT]       * load country code (NM)
          GOTO      LPID9999
.
LPID1306  APPEND    ANS,PID01306[REPTNCNT]       * load area/city code (NM)
          GOTO      LPID9999
.
LPID1307  APPEND    ANS,PID01307[REPTNCNT]       * load phone number (NM)
          GOTO      LPID9999
.
LPID1308  APPEND    ANS,PID01308[REPTNCNT]       * load extension (NM)
          GOTO      LPID9999
.
LPID1309  APPEND    ANS,PID01309[REPTNCNT]       * load any text (ST)
          GOTO      LPID9999
.
.         PID.14 Phone Number - Business (XTN)
.                (maximum of 1 repeat - 2 phone numbers in total)
.
LPID1400  COMPARE   REPTNCNT,TWO                 * maximum repeats reached ?
          GOTO      LPID9999 IF LESS             * yes
.
          BRANCH    COMPCNT,LPID1401:            * text
                            LPID1402:            * telecomm. use code (ID)
                            LPID1403:            * telcomm. equipment type (ID)
                            LPID1404:            * email address (ST)
                            LPID1405:            * country code (NM)
                            LPID1406:            * area/city code (NM)
                            LPID1407:            * phone number (NM)
                            LPID1408:            * extension (NM)
                            LPID1409             * any text (ST)
          GOTO      LPID9999
.
LPID1401  APPEND    ANS,PID01401[REPTNCNT]       * load text
          GOTO      LPID9999
.
LPID1402  APPEND    ANS,PID01402[REPTNCNT]       * load telecomm. use code (ID)
          GOTO      LPID9999
.
LPID1403  APPEND    ANS,PID01403[REPTNCNT]       * load telcomm. equip.type (ID)
          GOTO      LPID9999
.
LPID1404  APPEND    ANS,PID01404[REPTNCNT]       * load email address (ST)
          GOTO      LPID9999
.
LPID1405  APPEND    ANS,PID01405[REPTNCNT]       * load country code (NM)
          GOTO      LPID9999
.
LPID1406  APPEND    ANS,PID01406[REPTNCNT]       * load area/city code (NM)
          GOTO      LPID9999
.
LPID1407  APPEND    ANS,PID01407[REPTNCNT]       * load phone number (NM)
          GOTO      LPID9999
.
LPID1408  APPEND    ANS,PID01408[REPTNCNT]       * load extension (NM)
          GOTO      LPID9999
.
LPID1409  APPEND    ANS,PID01409[REPTNCNT]       * load any text (ST)
          GOTO      LPID9999
.
.         PID.15 Primary Language (CE)
.
LPID1500  BRANCH    COMPCNT,LPID1501:            * identifier (ST)
                            LPID1502:            * text (ST)
                            LPID1503:            * name of coding system (ST)
                            LPID1504:            * alternate identifier (ST)
                            LPID1505:            * alternate text (ST)
                            LPID1506             * name of alt. coding sys. (ST)
          GOTO      LPID9999
.
LPID1501  APPEND    ANS,PID01501                 * load identifier (ST)
          GOTO      LPID9999
.
LPID1502  APPEND    ANS,PID01502                 * load text (ST)
          GOTO      LPID9999
.
LPID1503  APPEND    ANS,PID01503                 * load name of coding sys. (ST)
          GOTO      LPID9999
.
LPID1504  APPEND    ANS,PID01504                 * load alt. identifier (ST)
          GOTO      LPID9999
.
LPID1505  APPEND    ANS,PID01505                 * load alternate text (ST)
          GOTO      LPID9999
.
LPID1506  APPEND    ANS,PID01506                 * load name alt. cod. sys. (ST)
          GOTO      LPID9999
.
.         PID.16 Marital Status (CE)
.
LPID1600  BRANCH    COMPCNT,LPID1601:            * identifier (ST)
                            LPID1602:            * text (ST)
                            LPID1603:            * name of coding system (ST)
                            LPID1604:            * alternate identifier (ST)
                            LPID1605:            * alternate text (ST)
                            LPID1606             * name of alt. coding sys. (ST)
          GOTO      LPID9999
.
LPID1601  APPEND    ANS,PID01601                 * load identifier (ST)
          GOTO      LPID9999
.
LPID1602  APPEND    ANS,PID01602                 * load text (ST)
          GOTO      LPID9999
.
LPID1603  APPEND    ANS,PID01603                 * load name of coding sys. (ST)
          GOTO      LPID9999
.
LPID1604  APPEND    ANS,PID01604                 * load alt. identifier (ST)
          GOTO      LPID9999
.
LPID1605  APPEND    ANS,PID01605                 * load alternate text (ST)
          GOTO      LPID9999
.
LPID1606  APPEND    ANS,PID01606                 * load name alt. cod. sys. (ST)
          GOTO      LPID9999
.
.         PID.17 Religion (CE)
.
LPID1700  BRANCH    COMPCNT,LPID1701:            * identifier (ST)
                            LPID1702:            * text (ST)
                            LPID1703:            * name of coding system (ST)
                            LPID1704:            * alternate identifier (ST)
                            LPID1705:            * alternate text (ST)
                            LPID1706             * name of alt. coding sys. (ST)
          GOTO      LPID9999
.
LPID1701  APPEND    ANS,PID01701                 * load identifier (ST)
          GOTO      LPID9999
.
LPID1702  APPEND    ANS,PID01702                 * load text (ST)
          GOTO      LPID9999
.
LPID1703  APPEND    ANS,PID01703                 * load name of coding sys. (ST)
          GOTO      LPID9999
.
LPID1704  APPEND    ANS,PID01704                 * load alt. identifier (ST)
          GOTO      LPID9999
.
LPID1705  APPEND    ANS,PID01705                 * load alternate text (ST)
          GOTO      LPID9999
.
LPID1706  APPEND    ANS,PID01706                 * load name alt. cod. sys. (ST)
          GOTO      LPID9999
.
.         PID.18 Patient Account Number (CX)
.
LPID1800  BRANCH    COMPCNT,LPID1801:            * id (ST)
                            LPID1802:            * check digit (ST)
                            LPID1803:            * code ident. chk dig, sch (ID)
                            LPID1804:            * assigning authority (HD)
                            LPID1805:            * identifier type code (IS)
                            LPID1806             * assigning facility (HD)
          GOTO      LPID9999
.
LPID1801  APPEND    ANS,PID01801                 * load id (ST)
          GOTO      LPID9999
.
LPID1802  APPEND    ANS,PID01802                 * load check digit (ST)
          GOTO      LPID9999
.
LPID1803  APPEND    ANS,PID01803                 * load code ident chk dig (ID)
          GOTO      LPID9999
.
LPID1804  APPEND    ANS,PID01804                 * load assigning authority (HD)
          GOTO      LPID9999
.
LPID1805  APPEND    ANS,PID01805                 * load ident. type code (IS)
          GOTO      LPID9999
.
LPID1806  APPEND    ANS,PID01806                 * load assigning facility (HD)
          GOTO      LPID9999
.
.         PID.19 SSN Number - Patient (ST)
.
LPID1900  BRANCH    COMPCNT,LPID1901
          GOTO      LPID9999
.
LPID1901  APPEND    ANS,PID01901                 * load SSN number - patient
          GOTO      LPID9999
.
.         PID.20 Driver's License Number - Patient (DLN)
.
LPID2000  BRANCH    COMPCNT,LPID2001:            * license number (ST)
                            LPID2002:            * issuing state (IS)
                            LPID2003             * expiration date (DT)
          GOTO      LPID9999
.
LPID2001  APPEND    ANS,PID02001                 * load license number (ST)
          GOTO      LPID9999
.
LPID2002  APPEND    ANS,PID02002                 * load issuing state (IS)
          GOTO      LPID9999
.
LPID2003  APPEND    ANS,PID02003                 * load expiration date (DT)
          GOTO      LPID9999
.
.         PID.21 Mother's Identifier (CX)
.
LPID2100  BRANCH    COMPCNT,LPID2101:            * id (ST)
                            LPID2102:            * check digit (ST)
                            LPID2103:            * code ident. chk dig, sch (ID)
                            LPID2104:            * assigning authority (HD)
                            LPID2105:            * identifier type code (IS)
                            LPID2106             * assigning facility (HD)
          GOTO      LPID9999
.
LPID2101  APPEND    ANS,PID02101                 * load id (ST)
          GOTO      LPID9999
.
LPID2102  APPEND    ANS,PID02102                 * load check digit (ST)
          GOTO      LPID9999
.
LPID2103  APPEND    ANS,PID02103                 * load code ident chk dig (ID)
          GOTO      LPID9999
.
LPID2104  APPEND    ANS,PID02104                 * load assigning authority (HD)
          GOTO      LPID9999
.
LPID2105  APPEND    ANS,PID02105                 * load ident. type code (IS)
          GOTO      LPID9999
.
LPID2106  APPEND    ANS,PID02106                 * load assigning facility (HD)
          GOTO      LPID9999
.
.         PID.22 Ethnic Group (CE)
.
LPID2200  BRANCH    COMPCNT,LPID2201:            * identifier (ST)
                            LPID2202:            * text (ST)
                            LPID2203:            * name of coding system (ST)
                            LPID2204:            * alternate identifier (ST)
                            LPID2205:            * alternate text (ST)
                            LPID2206             * name of alt. coding sys. (ST)
          GOTO      LPID9999
.
LPID2201  APPEND    ANS,PID02201                 * load identifier (ST)
          GOTO      LPID9999
.
LPID2202  APPEND    ANS,PID02202                 * load text (ST)
          GOTO      LPID9999
.
LPID2203  APPEND    ANS,PID02203                 * load name of coding sys. (ST)
          GOTO      LPID9999
.
LPID2204  APPEND    ANS,PID02204                 * load alt. identifier (ST)
          GOTO      LPID9999
.
LPID2205  APPEND    ANS,PID02205                 * load alternate text (ST)
          GOTO      LPID9999
.
LPID2206  APPEND    ANS,PID02206                 * load name alt. cod. sys. (ST)
          GOTO      LPID9999
.
.         PID.23 Birth Place (ST)
.
LPID2300  BRANCH    COMPCNT,LPID2301
          GOTO      LPID9999
.
LPID2301  APPEND    ANS,PID02301                 * load place of birth
          GOTO      LPID9999
.
.         PID.24 Multiple Birth Indicator (ID)
.
LPID2400  BRANCH    COMPCNT,LPID2401
          GOTO      LPID9999
.
LPID2401  APPEND    ANS,PID02401                 * load multiple birth indicator
          GOTO      LPID9999
.
.         PID.25 Birth Order (NM)
.
LPID2500  BRANCH    COMPCNT,LPID2501
          GOTO      LPID9999
.
LPID2501  APPEND    ANS,PID02501                 * load birth order
          GOTO      LPID9999
.
.         PID.26 Citizenship (CE)
.
LPID2600  BRANCH    COMPCNT,LPID2601:            * identifier (ST)
                            LPID2602:            * text (ST)
                            LPID2603:            * name of coding system (ST)
                            LPID2604:            * alternate identifier (ST)
                            LPID2605:            * alternate text (ST)
                            LPID2606             * name of alt. coding sys. (ST)
          GOTO      LPID9999
.
LPID2601  APPEND    ANS,PID02601                 * load identifier (ST)
          GOTO      LPID9999
.
LPID2602  APPEND    ANS,PID02602                 * load text (ST)
          GOTO      LPID9999
.
LPID2603  APPEND    ANS,PID02603                 * load name of coding sys. (ST)
          GOTO      LPID9999
.
LPID2604  APPEND    ANS,PID02604                 * load alt. identifier (ST)
          GOTO      LPID9999
.
LPID2605  APPEND    ANS,PID02605                 * load alternate text (ST)
          GOTO      LPID9999
.
LPID2606  APPEND    ANS,PID02606                 * load name alt. cod. sys. (ST)
          GOTO      LPID9999
.
.         PID.27 Veterans Military Status (CE)
.
LPID2700  BRANCH    COMPCNT,LPID2701:            * identifier (ST)
                            LPID2702:            * text (ST)
                            LPID2703:            * name of coding system (ST)
                            LPID2704:            * alternate identifier (ST)
                            LPID2705:            * alternate text (ST)
                            LPID2706             * name of alt. coding sys. (ST)
          GOTO      LPID9999
.
LPID2701  APPEND    ANS,PID02701                 * load identifier (ST)
          GOTO      LPID9999
.
LPID2702  APPEND    ANS,PID02702                 * load text (ST)
          GOTO      LPID9999
.
LPID2703  APPEND    ANS,PID02703                 * load name of coding sys. (ST)
          GOTO      LPID9999
.
LPID2704  APPEND    ANS,PID02704                 * load alt. identifier (ST)
          GOTO      LPID9999
.
LPID2705  APPEND    ANS,PID02705                 * load alternate text (ST)
          GOTO      LPID9999
.
LPID2706  APPEND    ANS,PID02706                 * load name alt. cod. sys. (ST)
          GOTO      LPID9999
.
.         PID.28 Nationality (CE)
.
LPID2800  BRANCH    COMPCNT,LPID2801:            * identifier (ST)
                            LPID2802:            * text (ST)
                            LPID2803:            * name of coding system (ST)
                            LPID2804:            * alternate identifier (ST)
                            LPID2805:            * alternate text (ST)
                            LPID2806             * name of alt. coding sys. (ST)
          GOTO      LPID9999
.
LPID2801  APPEND    ANS,PID02801                 * load identifier (ST)
          GOTO      LPID9999
.
LPID2802  APPEND    ANS,PID02802                 * load text (ST)
          GOTO      LPID9999
.
LPID2803  APPEND    ANS,PID02803                 * load name of coding sys. (ST)
          GOTO      LPID9999
.
LPID2804  APPEND    ANS,PID02804                 * load alt. identifier (ST)
          GOTO      LPID9999
.
LPID2805  APPEND    ANS,PID02805                 * load alternate text (ST)
          GOTO      LPID9999
.
LPID2806  APPEND    ANS,PID02806                 * load name alt. cod. sys. (ST)
          GOTO      LPID9999
.
.         PID.29 Patient Death Date and Time (TS)
.
LPID2900  BRANCH    COMPCNT,LPID2901
          GOTO      LPID9999
.
LPID2901  APPEND    ANS,PID02901                 * load patient death date/time
          GOTO      LPID9999
.
.         PID.30 Patient Death Indicator (ID)
.
LPID3000  BRANCH    COMPCNT,LPID3001
          GOTO      LPID9999
.
LPID3001  APPEND    ANS,PID03001                 * load patient death indicator
          GOTO      LPID9999
.
LPID9999  RETURN
+
.*****************************************************************************
.*                                 LNK10000        Called by: PROC0000       *
.*                          Load the NK1 fields                              *
.*****************************************************************************
.
LNK10000  BRANCH    FIELDNO,LNK10100:            * Set ID
                            LNK10200:            * Name
                            LNK10300:            * Relationship
                            LNK10400:            * Address
                            LNK10500:            * Phone Number
                            LNK10600:            * Business Phone Number
                            LNK10700:            * Contact Role
                            LNK10800:            * Start Date
                            LNK10900:            * End Date
                            LNK11000:            * Job Title
                            LNK11100:            * Job Code/Class
                            LNK11200:            * Employee Number
                            LNK11300:            * Organisation Name
                            LNK11400:            * Marital Status
                            LNK11500:            * Sex
                            LNK11600:            * Date/Time of Birth
                            LNK11700:            * Living Dpendency
                            LNK11800:            * Ambulatory Status
                            LNK11900:            * Citizenship
                            LNK12000:            * Primary Language
                            LNK12100:            * Living Arrangement
                            LNK12200:            * Publicity Indicator
                            LNK12300:            * Protection Indicator
                            LNK12400:            * Student Indicator
                            LNK12500:            * Religion
                            LNK12600:            * Mother's Maiden Name
                            LNK12700:            * Nationality
                            LNK12800:            * Ethnic Group
                            LNK12900:            * Contact Reason
                            LNK13000:            * Contact Person's Name
                            LNK13100:            * Contact Person's Phone No.
                            LNK13200:            * Contact Person's Address
                            LNK13300:            * Identifiers
                            LNK13400:            * Job Status
                            LNK13500:            * Race
                            LNK13600:            * Handicap
                            LNK13700             * Social Security Number
.
.         Invalid NK1 field received, so ignore it
.
          GOTO      LNK19999
.
.         NK1.1 Set ID (SI)
.
LNK10100  BRANCH    COMPCNT,LNK10101
          GOTO      LNK19999
.
LNK10101  APPEND    ANS,NK100101
          GOTO      LNK19999
.
.         NK1.2 Name (XPN)
.
LNK10200  BRANCH    COMPCNT,LNK10201:            * family name (ST)
                            LNK10202:            * given name (ST)
                            LNK10203:            * middle name (ST)
                            LNK10204:            * suffix (ST)
                            LNK10205:            * prefix (ST)
                            LNK10206:            * degree (IS)
                            LNK10207:            * name type code (ID)
                            LNK10208             * name representation code (ID)
          GOTO      LNK19999
.
LNK10201  APPEND    ANS,NK100201                 * load family name (ST)
          GOTO      LNK19999
.
LNK10202  APPEND    ANS,NK100202                 * load given name (ST)
          GOTO      LNK19999
.
LNK10203  APPEND    ANS,NK100203                 * load middle name (ST)
          GOTO      LNK19999
.
LNK10204  APPEND    ANS,NK100204                 * load suffix (ST)
          GOTO      LNK19999
.
LNK10205  APPEND    ANS,NK100205                 * load prefix (ST)
          GOTO      LNK19999
.
LNK10206  APPEND    ANS,NK100206                 * load degree (IS)
          GOTO      LNK19999
.
LNK10207  APPEND    ANS,NK100207                 * load name type code (ID)
          GOTO      LNK19999
.
LNK10208  APPEND    ANS,NK100208                 * load name rep. code (ID)
          GOTO      LNK19999
.
.         NK1.3 Relationship (CE)
.
LNK10300  BRANCH    COMPCNT,LNK10301:            * identifier (ST)
                            LNK10302:            * text (ST)
                            LNK10303:            * name of coding system (ST)
                            LNK10304:            * alternate identifier (ST)
                            LNK10305:            * alternate text (ST)
                            LNK10306             * name of alt. cod. system (ST)
          GOTO      LNK19999
.
LNK10301  APPEND    ANS,NK100301                 * load identifier (ST)
          GOTO      LNK19999
.
LNK10302  APPEND    ANS,NK100302                 * load text (ST)
          GOTO      LNK19999
.
LNK10303  APPEND    ANS,NK100303                 * load name of cod. system (ST)
          GOTO      LNK19999
.
LNK10304  APPEND    ANS,NK100304                 * load alt. identifier (ST)
          GOTO      LNK19999
.
LNK10305  APPEND    ANS,NK100305                 * load alternate text (ST)
          GOTO      LNK19999
.
LNK10306  APPEND    ANS,NK100306                 * load alt. cod. sys. name (ST)
          GOTO      LNK19999
.
.         NK1.4 Address (XAD)
.
LNK10400  BRANCH    COMPCNT,LNK10401:            * street address (ST)
                            LNK10402:            * other designation (ST)
                            LNK10403:            * city (ST)
                            LNK10404:            * state (ST)
                            LNK10405:            * postcode (ST)
                            LNK10406:            * country (ID)
                            LNK10407:            * address type (ID)
                            LNK10408:            * other geographic desig. (ST)
                            LNK10409:            * county (IS)
                            LNK10410:            * census tract (IS)
                            LNK10411             * address rep. code (ID)
          GOTO      LNK19999
.
LNK10401  APPEND    ANS,NK100401                 * load street address (ST)
          GOTO      LNK19999
.
LNK10402  APPEND    ANS,NK100402                 * load other designation (ST)
          GOTO      LNK19999
.
LNK10403  APPEND    ANS,NK100403                 * load city (ST)
          GOTO      LNK19999
.
LNK10404  APPEND    ANS,NK100404                 * load state (ST)
          GOTO      LNK19999
.
LNK10405  APPEND    ANS,NK100405                 * load postcode (ST)
          GOTO      LNK19999
.
LNK10406  APPEND    ANS,NK100406                 * load country (ID)
          GOTO      LNK19999
.
LNK10407  APPEND    ANS,NK100407                 * load address type (ID)
          GOTO      LNK19999
.
LNK10408  APPEND    ANS,NK100408                 * load other geog. desig. (ST)
          GOTO      LNK19999
.
LNK10409  APPEND    ANS,NK100409                 * load county (IS)
          GOTO      LNK19999
.
LNK10410  APPEND    ANS,NK100410                 * load census tract (IS)
          GOTO      LNK19999
.
LNK10411  APPEND    ANS,NK100411                 * load address rep code (ID)
          GOTO      LNK19999
.
.         NK1.5 Phone Number (XTN)
.
LNK10500  BRANCH    COMPCNT,LNK10501:            * text
                            LNK10502:            * telecomm. use code (ID)
                            LNK10503:            * telcomm. equipment type (ID)
                            LNK10504:            * email address (ST)
                            LNK10505:            * country code (NM)
                            LNK10506:            * area/city code (NM)
                            LNK10507:            * phone number (NM)
                            LNK10508:            * extension (NM)
                            LNK10509             * any text (ST)
          GOTO      LNK19999
.
LNK10501  APPEND    ANS,NK100501                 * load text
          GOTO      LNK19999
.
LNK10502  APPEND    ANS,NK100502                 * load telecomm. use code (ID)
          GOTO      LNK19999
.
LNK10503  APPEND    ANS,NK100503                 * load telcomm. equip.type (ID)
          GOTO      LNK19999
.
LNK10504  APPEND    ANS,NK100504                 * load email address (ST)
          GOTO      LNK19999
.
LNK10505  APPEND    ANS,NK100505                 * load country code (NM)
          GOTO      LNK19999
.
LNK10506  APPEND    ANS,NK100506                 * load area/city code (NM)
          GOTO      LNK19999
.
LNK10507  APPEND    ANS,NK100507                 * load phone number (NM)
          GOTO      LNK19999
.
LNK10508  APPEND    ANS,NK100508                 * load extension (NM)
          GOTO      LNK19999
.
LNK10509  APPEND    ANS,NK100509                 * load any text (ST)
          GOTO      LNK19999
.
.         NK1.6 Business Phone Number (XTN)
.
LNK10600  BRANCH    COMPCNT,LNK10601:            * text
                            LNK10602:            * telecomm. use code (ID)
                            LNK10603:            * telcomm. equipment type (ID)
                            LNK10604:            * email address (ST)
                            LNK10605:            * country code (NM)
                            LNK10606:            * area/city code (NM)
                            LNK10607:            * phone number (NM)
                            LNK10608:            * extension (NM)
                            LNK10609             * any text (ST)
          GOTO      LNK19999
.
LNK10601  APPEND    ANS,NK100601                 * load text
          GOTO      LNK19999
.
LNK10602  APPEND    ANS,NK100602                 * load telecomm. use code (ID)
          GOTO      LNK19999
.
LNK10603  APPEND    ANS,NK100603                 * load telcomm. equip.type (ID)
          GOTO      LNK19999
.
LNK10604  APPEND    ANS,NK100604                 * load email address (ST)
          GOTO      LNK19999
.
LNK10605  APPEND    ANS,NK100605                 * load country code (NM)
          GOTO      LNK19999
.
LNK10606  APPEND    ANS,NK100606                 * load area/city code (NM)
          GOTO      LNK19999
.
LNK10607  APPEND    ANS,NK100607                 * load phone number (NM)
          GOTO      LNK19999
.
LNK10608  APPEND    ANS,NK100608                 * load extension (NM)
          GOTO      LNK19999
.
LNK10609  APPEND    ANS,NK100609                 * load any text (ST)
          GOTO      LNK19999
.
.         NK1.7 Contact Role (CE)
.
LNK10700  BRANCH    COMPCNT,LNK10701:            * identifier (ST)
                            LNK10702:            * text (ST)
                            LNK10703:            * name of coding system (ST)
                            LNK10704:            * alternate identifier (ST)
                            LNK10705:            * alternate text (ST)
                            LNK10706             * name of alt. cod. system (ST)
          GOTO      LNK19999
.
LNK10701  APPEND    ANS,NK100701                 * load identifier (ST)
          GOTO      LNK19999
.
LNK10702  APPEND    ANS,NK100702                 * load text (ST)
          GOTO      LNK19999
.
LNK10703  APPEND    ANS,NK100703                 * load name of cod. system (ST)
          GOTO      LNK19999
.
LNK10704  APPEND    ANS,NK100704                 * load alt. identifier (ST)
          GOTO      LNK19999
.
LNK10705  APPEND    ANS,NK100705                 * load alternate text (ST)
          GOTO      LNK19999
.
LNK10706  APPEND    ANS,NK100706                 * load alt. cod. sys. name (ST)
          GOTO      LNK19999
.
.         NK1.8 Start Date (DT)
.
LNK10800  BRANCH    COMPCNT,LNK10801
          GOTO      LNK19999
.
LNK10801  APPEND    ANS,NK100801
          GOTO      LNK19999
.
.         NK1.9 End Date (DT)
.
LNK10900  BRANCH    COMPCNT,LNK10901
          GOTO      LNK19999
.
LNK10901  APPEND    ANS,NK100901
          GOTO      LNK19999
.
.         NK1.10 Next of Kin / Associated Parties Job Title (ST)
.
LNK11000  BRANCH    COMPCNT,LNK11001
          GOTO      LNK19999
.
LNK11001  APPEND    ANS,NK101001                 * load title (ST)
          GOTO      LNK19999
.
.         NK1.11 Next of Kin / Associated Parties Job Code/Class (JCC)
.
LNK11100  BRANCH    COMPCNT,LNK11101:            * job code (ST)
                            LNK11102             * job class (IS)
          GOTO      LNK19999
.
LNK11101  APPEND    ANS,NK101101                 * job code (ST)
          GOTO      LNK19999
.
LNK11102  APPEND    ANS,NK101102                 * job class (IS)
          GOTO      LNK19999
.
.         NK1.12 Next of Kin / Associated Parties Employee Number (CX)
.
LNK11200  BRANCH    COMPCNT,LNK11201:            * id (ST)
                            LNK11202:            * check digit (ST)
                            LNK11203:            * check digit scheme code (ID)
                            LNK11204:            * assigning authority (HD)
                            LNK11205:            * identifier type code (IS)
                            LNK11206             * assigning facility (HD)
          GOTO      LNK19999
.
LNK11201  APPEND    ANS,NK101201                 * load id (ST)
          GOTO      LNK19999
.
LNK11202  APPEND    ANS,NK101202                 * load check digit (ST)
          GOTO      LNK19999
.
LNK11203  APPEND    ANS,NK101203                 * load chk dig scheme code (ID)
          GOTO      LNK19999
.
LNK11204  APPEND    ANS,NK101204                 * load assigning authority (HD)
          GOTO      LNK19999
.
LNK11205  APPEND    ANS,NK101205                 * load identifier typ code (IS)
          GOTO      LNK19999
.
LNK11206  APPEND    ANS,NK101206                 * load assigning facility (HD)
          GOTO      LNK19999
.
.         NK1.13 Organisation Name (XON)
.
LNK11300  BRANCH    COMPCNT,LNK11301:            * organisation name (ST)
                            LNK11302:            * org. name type code (IS)
                            LNK11303:            * id number (NM)
                            LNK11304:            * check digit (NM)
                            LNK11305:            * check digit scheme code (ID)
                            LNK11306:            * assigning authority (HD)
                            LNK11307:            * identifier type code (IS)
                            LNK11308:            * assigning facility (HD)
                            LNK11309             * name rep. code (ID)
          GOTO      LNK19999
.
LNK11301  APPEND    ANS,NK101301                 * organisation name (ST)
          GOTO      LNK19999
.
LNK11302  APPEND    ANS,NK101302                 * org. name type code (IS)
          GOTO      LNK19999
.
LNK11303  APPEND    ANS,NK101303                 * id number (NM)
          GOTO      LNK19999
.
LNK11304  APPEND    ANS,NK101304                 * load check digit (ST)
          GOTO      LNK19999
.
LNK11305  APPEND    ANS,NK101305                 * load chk dig scheme code (ID)
          GOTO      LNK19999
.
LNK11306  APPEND    ANS,NK101306                 * load assigning authority (HD)
          GOTO      LNK19999
.
LNK11307  APPEND    ANS,NK101307                 * load identifier typ code (IS)
          GOTO      LNK19999
.
LNK11308  APPEND    ANS,NK101308                 * load assigning facility (HD)
          GOTO      LNK19999
.
LNK11309  APPEND    ANS,NK101309                 * load name rep. code (ID)
          GOTO      LNK19999
.
.         NK1.14 Marital Status (CE)
.
LNK11400  BRANCH    COMPCNT,LNK11401:            * identifier (ST)
                            LNK11402:            * text (ST)
                            LNK11403:            * name of coding system (ST)
                            LNK11404:            * alternate identifier (ST)
                            LNK11405:            * alternate text (ST)
                            LNK11406             * name of alt. cod. system (ST)
          GOTO      LNK19999
.
LNK11401  APPEND    ANS,NK101401                 * load identifier (ST)
          GOTO      LNK19999
.
LNK11402  APPEND    ANS,NK101402                 * load text (ST)
          GOTO      LNK19999
.
LNK11403  APPEND    ANS,NK101403                 * load name of cod. system (ST)
          GOTO      LNK19999
.
LNK11404  APPEND    ANS,NK101404                 * load alt. identifier (ST)
          GOTO      LNK19999
.
LNK11405  APPEND    ANS,NK101405                 * load alternate text (ST)
          GOTO      LNK19999
.
LNK11406  APPEND    ANS,NK101406                 * load alt. cod. sys. name (ST)
          GOTO      LNK19999
.
.         NK1.15 Sex (IS)
.
LNK11500  BRANCH    COMPCNT,LNK11501
          GOTO      LNK19999
.
LNK11501  APPEND    ANS,NK101501
          GOTO      LNK19999
.
.         NK1.16 Date/Time of Birth (TS)
.
LNK11600  BRANCH    COMPCNT,LNK11601
          GOTO      LNK19999
.
LNK11601  APPEND    ANS,NK101601
          GOTO      LNK19999
.
.         NK1.17 Living Dependency (IS)
.
LNK11700  BRANCH    COMPCNT,LNK11701
          GOTO      LNK19999
.
LNK11701  APPEND    ANS,NK101701
          GOTO      LNK19999
.
.         NK1.18 Ambulatory Status (IS)
.
LNK11800  BRANCH    COMPCNT,LNK11801
          GOTO      LNK19999
.
LNK11801  APPEND    ANS,NK101801
          GOTO      LNK19999
.
.         NK1.19 Citizenship (CE)
.
LNK11900  BRANCH    COMPCNT,LNK11901:            * identifier (ST)
                            LNK11902:            * text (ST)
                            LNK11903:            * name of coding system (ST)
                            LNK11904:            * alternate identifier (ST)
                            LNK11905:            * alternate text (ST)
                            LNK11906             * name of alt. cod. system (ST)
          GOTO      LNK19999
.
LNK11901  APPEND    ANS,NK101901                 * load identifier (ST)
          GOTO      LNK19999
.
LNK11902  APPEND    ANS,NK101902                 * load text (ST)
          GOTO      LNK19999
.
LNK11903  APPEND    ANS,NK101903                 * load name of cod. system (ST)
          GOTO      LNK19999
.
LNK11904  APPEND    ANS,NK101904                 * load alt. identifier (ST)
          GOTO      LNK19999
.
LNK11905  APPEND    ANS,NK101905                 * load alternate text (ST)
          GOTO      LNK19999
.
LNK11906  APPEND    ANS,NK101906                 * load alt. cod. sys. name (ST)
          GOTO      LNK19999
.
.         NK1.20 Primary Language (CE)
.
LNK12000  BRANCH    COMPCNT,LNK12001:            * identifier (ST)
                            LNK12002:            * text (ST)
                            LNK12003:            * name of coding system (ST)
                            LNK12004:            * alternate identifier (ST)
                            LNK12005:            * alternate text (ST)
                            LNK12006             * name of alt. cod. system (ST)
          GOTO      LNK19999
.
LNK12001  APPEND    ANS,NK102001                 * load identifier (ST)
          GOTO      LNK19999
.
LNK12002  APPEND    ANS,NK102002                 * load text (ST)
          GOTO      LNK19999
.
LNK12003  APPEND    ANS,NK102003                 * load name of cod. system (ST)
          GOTO      LNK19999
.
LNK12004  APPEND    ANS,NK102004                 * load alt. identifier (ST)
          GOTO      LNK19999
.
LNK12005  APPEND    ANS,NK102005                 * load alternate text (ST)
          GOTO      LNK19999
.
LNK12006  APPEND    ANS,NK102006                 * load alt. cod. sys. name (ST)
          GOTO      LNK19999
.
.         NK1.21 Living Arrangement (IS)
.
LNK12100  BRANCH    COMPCNT,LNK12101
          GOTO      LNK19999
.
LNK12101  APPEND    ANS,NK102101
          GOTO      LNK19999
.
.         NK1.22 Publicity Code (CE)
.
LNK12200  BRANCH    COMPCNT,LNK12201:            * identifier (ST)
                            LNK12202:            * text (ST)
                            LNK12203:            * name of coding system (ST)
                            LNK12204:            * alternate identifier (ST)
                            LNK12205:            * alternate text (ST)
                            LNK12206             * name of alt. cod. system (ST)
          GOTO      LNK19999
.
LNK12201  APPEND    ANS,NK102201                 * load identifier (ST)
          GOTO      LNK19999
.
LNK12202  APPEND    ANS,NK102202                 * load text (ST)
          GOTO      LNK19999
.
LNK12203  APPEND    ANS,NK102203                 * load name of cod. system (ST)
          GOTO      LNK19999
.
LNK12204  APPEND    ANS,NK102204                 * load alt. identifier (ST)
          GOTO      LNK19999
.
LNK12205  APPEND    ANS,NK102205                 * load alternate text (ST)
          GOTO      LNK19999
.
LNK12206  APPEND    ANS,NK102206                 * load alt. cod. sys. name (ST)
          GOTO      LNK19999
.
.         NK1.23 Protection Indicator (ID)
.
LNK12300  BRANCH    COMPCNT,LNK12301
          GOTO      LNK19999
.
LNK12301  APPEND    ANS,NK102301
          GOTO      LNK19999
.
.         NK1.24 Student Indicator (IS)
.
LNK12400  BRANCH    COMPCNT,LNK12401
          GOTO      LNK19999
.
LNK12401  APPEND    ANS,NK102401
          GOTO      LNK19999
.
.         NK1.25 Religion (CE)
.
LNK12500  BRANCH    COMPCNT,LNK12501:            * identifier (ST)
                            LNK12502:            * text (ST)
                            LNK12503:            * name of coding system (ST)
                            LNK12504:            * alternate identifier (ST)
                            LNK12505:            * alternate text (ST)
                            LNK12506             * name of alt. cod. system (ST)
          GOTO      LNK19999
.
LNK12501  APPEND    ANS,NK102501                 * load identifier (ST)
          GOTO      LNK19999
.
LNK12502  APPEND    ANS,NK102502                 * load text (ST)
          GOTO      LNK19999
.
LNK12503  APPEND    ANS,NK102503                 * load name of cod. system (ST)
          GOTO      LNK19999
.
LNK12504  APPEND    ANS,NK102504                 * load alt. identifier (ST)
          GOTO      LNK19999
.
LNK12505  APPEND    ANS,NK102505                 * load alternate text (ST)
          GOTO      LNK19999
.
LNK12506  APPEND    ANS,NK102506                 * load alt. cod. sys. name (ST)
          GOTO      LNK19999
.
.         NK1.26 Mother's Maiden Name (XPN)
.
LNK12600  BRANCH    COMPCNT,LNK12601:            * family name (ST)
                            LNK12602:            * given name (ST)
                            LNK12603:            * middle name (ST)
                            LNK12604:            * suffix (ST)
                            LNK12605:            * prefix (ST)
                            LNK12606:            * degree (IS)
                            LNK12607:            * name type code (ID)
                            LNK12608             * name representation code (ID)
          GOTO      LNK19999
.
LNK12601  APPEND    ANS,NK102601                 * load family name (ST)
          GOTO      LNK19999
.
LNK12602  APPEND    ANS,NK102602                 * load given name (ST)
          GOTO      LNK19999
.
LNK12603  APPEND    ANS,NK102603                 * load middle name (ST)
          GOTO      LNK19999
.
LNK12604  APPEND    ANS,NK102604                 * load suffix (ST)
          GOTO      LNK19999
.
LNK12605  APPEND    ANS,NK102605                 * load prefix (ST)
          GOTO      LNK19999
.
LNK12606  APPEND    ANS,NK102606                 * load degree (IS)
          GOTO      LNK19999
.
LNK12607  APPEND    ANS,NK102607                 * load name type code (ID)
          GOTO      LNK19999
.
LNK12608  APPEND    ANS,NK102608                 * load name rep. code (ID)
          GOTO      LNK19999
.
.         NK1.27 Nationality (CE)
.
LNK12700  BRANCH    COMPCNT,LNK12701:            * identifier (ST)
                            LNK12702:            * text (ST)
                            LNK12703:            * name of coding system (ST)
                            LNK12704:            * alternate identifier (ST)
                            LNK12705:            * alternate text (ST)
                            LNK12706             * name of alt. cod. system (ST)
          GOTO      LNK19999
.
LNK12701  APPEND    ANS,NK102701                 * load identifier (ST)
          GOTO      LNK19999
.
LNK12702  APPEND    ANS,NK102702                 * load text (ST)
          GOTO      LNK19999
.
LNK12703  APPEND    ANS,NK102703                 * load name of cod. system (ST)
          GOTO      LNK19999
.
LNK12704  APPEND    ANS,NK102704                 * load alt. identifier (ST)
          GOTO      LNK19999
.
LNK12705  APPEND    ANS,NK102705                 * load alternate text (ST)
          GOTO      LNK19999
.
LNK12706  APPEND    ANS,NK102706                 * load alt. cod. sys. name (ST)
          GOTO      LNK19999
.
.         NK1.28 Ethnic Group (CE)
.
LNK12800  BRANCH    COMPCNT,LNK12801:            * identifier (ST)
                            LNK12802:            * text (ST)
                            LNK12803:            * name of coding system (ST)
                            LNK12804:            * alternate identifier (ST)
                            LNK12805:            * alternate text (ST)
                            LNK12806             * name of alt. cod. system (ST)
          GOTO      LNK19999
.
LNK12801  APPEND    ANS,NK102801                 * load identifier (ST)
          GOTO      LNK19999
.
LNK12802  APPEND    ANS,NK102802                 * load text (ST)
          GOTO      LNK19999
.
LNK12803  APPEND    ANS,NK102803                 * load name of cod. system (ST)
          GOTO      LNK19999
.
LNK12804  APPEND    ANS,NK102804                 * load alt. identifier (ST)
          GOTO      LNK19999
.
LNK12805  APPEND    ANS,NK102805                 * load alternate text (ST)
          GOTO      LNK19999
.
LNK12806  APPEND    ANS,NK102806                 * load alt. cod. sys. name (ST)
          GOTO      LNK19999
.
.         NK1.29 Contact Reason (CE)
.                 (maximum of 1 repeat - 2 reasons in total)
.
LNK12900  COMPARE   REPTNCNT,TWO                 * maximum repeats reached ?
          GOTO      LNK19999 IF LESS             * yes
.
          BRANCH    COMPCNT,LNK12901:            * identifier (ST)
                            LNK12902:            * text (ST)
                            LNK12903:            * name of coding system (ST)
                            LNK12904:            * alternate identifier (ST)
                            LNK12905:            * alternate text (ST)
                            LNK12906             * name of alt. cod. system (ST)
          GOTO      LNK19999
.
LNK12901  APPEND    ANS,NK102901[REPTNCNT]       * load identifier (ST)
          GOTO      LNK19999
.
LNK12902  APPEND    ANS,NK102902[REPTNCNT]       * load text (ST)
          GOTO      LNK19999
.
LNK12903  APPEND    ANS,NK102903[REPTNCNT]       * load name of cod. system (ST)
          GOTO      LNK19999
.
LNK12904  APPEND    ANS,NK102904[REPTNCNT]       * load alt. identifier (ST)
          GOTO      LNK19999
.
LNK12905  APPEND    ANS,NK102905[REPTNCNT]       * load alternate text (ST)
          GOTO      LNK19999
.
LNK12906  APPEND    ANS,NK102906[REPTNCNT]       * load alt. cod. sys. name (ST)
          GOTO      LNK19999
.
.         NK1.30 Contact Person's Name (XPN)
.
LNK13000  BRANCH    COMPCNT,LNK13001:            * family name (ST)
                            LNK13002:            * given name (ST)
                            LNK13003:            * middle name (ST)
                            LNK13004:            * suffix (ST)
                            LNK13005:            * prefix (ST)
                            LNK13006:            * degree (IS)
                            LNK13007:            * name type code (ID)
                            LNK13008             * name representation code (ID)
          GOTO      LNK19999
.
LNK13001  APPEND    ANS,NK103001                 * load family name (ST)
          GOTO      LNK19999
.
LNK13002  APPEND    ANS,NK103002                 * load given name (ST)
          GOTO      LNK19999
.
LNK13003  APPEND    ANS,NK103003                 * load middle name (ST)
          GOTO      LNK19999
.
LNK13004  APPEND    ANS,NK103004                 * load suffix (ST)
          GOTO      LNK19999
.
LNK13005  APPEND    ANS,NK103005                 * load prefix (ST)
          GOTO      LNK19999
.
LNK13006  APPEND    ANS,NK103006                 * load degree (IS)
          GOTO      LNK19999
.
LNK13007  APPEND    ANS,NK103007                 * load name type code (ID)
          GOTO      LNK19999
.
LNK13008  APPEND    ANS,NK103008                 * load name rep. code (ID)
          GOTO      LNK19999
.
.         NK1.31 Contact Person's Telephone Number (XTN)
.                 (maximum of 2 repeats - 3 phone numbers in total)
.
LNK13100  COMPARE   REPTNCNT,THREE               * maximum repeats reached ?
          GOTO      LNK19999 IF LESS             * yes
.
          BRANCH    COMPCNT,LNK13101:            * text
                            LNK13102:            * telecomm. use code (ID)
                            LNK13103:            * telcomm. equipment type (ID)
                            LNK13104:            * email address (ST)
                            LNK13105:            * country code (NM)
                            LNK13106:            * area/city code (NM)
                            LNK13107:            * phone number (NM)
                            LNK13108:            * extension (NM)
                            LNK13109             * any text (ST)
          GOTO      LNK19999
.
LNK13101  APPEND    ANS,NK103101[REPTNCNT]       * load text
          GOTO      LNK19999
.
LNK13102  APPEND    ANS,NK103102[REPTNCNT]       * load telecomm. use code (ID)
          GOTO      LNK19999
.
LNK13103  APPEND    ANS,NK103103[REPTNCNT]       * load telcomm. equip.type (ID)
          GOTO      LNK19999
.
LNK13104  APPEND    ANS,NK103104[REPTNCNT]       * load email address (ST)
          GOTO      LNK19999
.
LNK13105  APPEND    ANS,NK103105[REPTNCNT]       * load country code (NM)
          GOTO      LNK19999
.
LNK13106  APPEND    ANS,NK103106[REPTNCNT]       * load area/city code (NM)
          GOTO      LNK19999
.
LNK13107  APPEND    ANS,NK103107[REPTNCNT]       * load phone number (NM)
          GOTO      LNK19999
.
LNK13108  APPEND    ANS,NK103108[REPTNCNT]       * load extension (NM)
          GOTO      LNK19999
.
LNK13109  APPEND    ANS,NK103109[REPTNCNT]       * load any text (ST)
          GOTO      LNK19999
.
.         NK1.32 Contact Person's Address (XAD)
.
LNK13200  BRANCH    COMPCNT,LNK13201:            * street address (ST)
                            LNK13202:            * other designation (ST)
                            LNK13203:            * city (ST)
                            LNK13204:            * state (ST)
                            LNK13205:            * postcode (ST)
                            LNK13206:            * country (ID)
                            LNK13207:            * address type (ID)
                            LNK13208:            * other geographic desig. (ST)
                            LNK13209:            * county (IS)
                            LNK13210:            * census tract (IS)
                            LNK13211             * address rep. code (ID)
          GOTO      LNK19999
.
LNK13201  APPEND    ANS,NK103201                 * load street address (ST)
          GOTO      LNK19999
.
LNK13202  APPEND    ANS,NK103202                 * load other designation (ST)
          GOTO      LNK19999
.
LNK13203  APPEND    ANS,NK103203                 * load city (ST)
          GOTO      LNK19999
.
LNK13204  APPEND    ANS,NK103204                 * load state (ST)
          GOTO      LNK19999
.
LNK13205  APPEND    ANS,NK103205                 * load postcode (ST)
          GOTO      LNK19999
.
LNK13206  APPEND    ANS,NK103206                 * load country (ID)
          GOTO      LNK19999
.
LNK13207  APPEND    ANS,NK103207                 * load address type (ID)
          GOTO      LNK19999
.
LNK13208  APPEND    ANS,NK103208                 * load other geog. desig. (ST)
          GOTO      LNK19999
.
LNK13209  APPEND    ANS,NK103209                 * load county (IS)
          GOTO      LNK19999
.
LNK13210  APPEND    ANS,NK103210                 * load census tract (IS)
          GOTO      LNK19999
.
LNK13211  APPEND    ANS,NK103211                 * load address rep code (ID)
          GOTO      LNK19999
.
.         NK1.33 Next of Kin / Associated Party's Identifiers (CX)
.
LNK13300  BRANCH    COMPCNT,LNK13301:            * id (ST)
                            LNK13302:            * check digit (ST)
                            LNK13303:            * check digit scheme code (ID)
                            LNK13304:            * assigning authority (HD)
                            LNK13305:            * identifier type code (IS)
                            LNK13306             * assigning facility (HD)
          GOTO      LNK19999
.
LNK13301  APPEND    ANS,NK103301                 * load id (ST)
          GOTO      LNK19999
.
LNK13302  APPEND    ANS,NK103302                 * load check digit (ST)
          GOTO      LNK19999
.
LNK13303  APPEND    ANS,NK103303                 * load chk dig scheme code (ID)
          GOTO      LNK19999
.
LNK13304  APPEND    ANS,NK103304                 * load assigning authority (HD)
          GOTO      LNK19999
.
LNK13305  APPEND    ANS,NK103305                 * load identifier typ code (IS)
          GOTO      LNK19999
.
LNK13306  APPEND    ANS,NK103306                 * load assigning facility (HD)
          GOTO      LNK19999
.
.         NK1.34 Job Status (IS)
.
LNK13400  BRANCH    COMPCNT,LNK13401
          GOTO      LNK19999
.
LNK13401  APPEND    ANS,NK103401
          GOTO      LNK19999
.
.         NK1.35 Race (CE)
.
LNK13500  BRANCH    COMPCNT,LNK13501:            * identifier (ST)
                            LNK13502:            * text (ST)
                            LNK13503:            * name of coding system (ST)
                            LNK13504:            * alternate identifier (ST)
                            LNK13505:            * alternate text (ST)
                            LNK13506             * name of alt. cod. system (ST)
          GOTO      LNK19999
.
LNK13501  APPEND    ANS,NK103501                 * load identifier (ST)
          GOTO      LNK19999
.
LNK13502  APPEND    ANS,NK103502                 * load text (ST)
          GOTO      LNK19999
.
LNK13503  APPEND    ANS,NK103503                 * load name of cod. system (ST)
          GOTO      LNK19999
.
LNK13504  APPEND    ANS,NK103504                 * load alt. identifier (ST)
          GOTO      LNK19999
.
LNK13505  APPEND    ANS,NK103505                 * load alternate text (ST)
          GOTO      LNK19999
.
LNK13506  APPEND    ANS,NK103506                 * load alt. cod. sys. name (ST)
          GOTO      LNK19999
.
.         NK1.36 Handicap (IS)
.
LNK13600  BRANCH    COMPCNT,LNK13601
          GOTO      LNK19999
.
LNK13601  APPEND    ANS,NK103601
          GOTO      LNK19999
.
.         NK1.37 Contact Person Social Security Number (ST)
.
LNK13700  BRANCH    COMPCNT,LNK13701
          GOTO      LNK19999
.
LNK13701  APPEND    ANS,NK103701
          GOTO      LNK19999
.
LNK19999  RETURN
+
.*****************************************************************************
.*                                 LPV10000        Called by: PROC0000       *
.*                          Load the PV1 fields                              *
.*****************************************************************************
.
LPV10000  BRANCH    FIELDNO,LPV10100:            * Set ID
                            LPV10200:            * Patient Class
                            LPV10300:            * Assigned Pt. Location
                            LPV10400:            * Admission Type
                            LPV10500:            * Preadmit No.
                            LPV10600:            * Prior Pt. Location
                            LPV10700:            * Attending Doctor
                            LPV10800:            * Referring Doctor
                            LPV10900:            * Consulting Doctor
                            LPV11000:            * Hospital Service
                            LPV11100:            * Temporary Location
                            LPV11200:            * Preadmit Test Indicator
                            LPV11300:            * Readmission Indicator
                            LPV11400:            * Admit Source
                            LPV11500:            * Ambulatory Status
                            LPV11600:            * VIP Indicator
                            LPV11700:            * Admitting Doctor
                            LPV11800:            * Patient Type
                            LPV11900:            * Visit Number
                            LPV12000:            * Financial Class
                            LPV12100:            * Charge Price Indicator
                            LPV12200:            * Courtesy Code
                            LPV12300:            * Credit Rating
                            LPV12400:            * Contract Code
                            LPV12500:            * Contract Effective Date
                            LPV12600:            * Contract Amount
                            LPV12700:            * Contract Period
                            LPV12800:            * Interest Code
                            LPV12900:            * Transfer to Bad Debt Code
                            LPV13000:            * Transfer to Bad Debt Date
                            LPV13100:            * Bad Debt Agency Code
                            LPV13200:            * Bad Debt Transfer Amount
                            LPV13300:            * Bad Debt recovery Amount
                            LPV13400:            * Delete Account Indicator
                            LPV13500:            * Delete Account Date
                            LPV13600:            * Discharge Disposition
                            LPV13700:            * Discharged to Location
                            LPV13800:            * Diet Type
                            LPV13900:            * Servicing Facility
                            LPV14000:            * Bed Status
                            LPV14100:            * Account Status
                            LPV14200:            * Pending Location
                            LPV14300:            * Prior Temporary Location
                            LPV14400:            * Admit Date/Time
                            LPV14500:            * Discharge Date/Time
                            LPV14600:            * Current Patient Balance
                            LPV14700:            * Total Charges
                            LPV14800:            * Total Adjustments
                            LPV14900:            * Total Payments
                            LPV15000:            * Alternate Visit Id
                            LPV15100:            * Visit Indicator
                            LPV15200             * Other Healthcare Provider
.
.         Invalid PV1 field received, so ignore it
.
          GOTO      LPV19999
.                           
.         PV1.1 Set ID (SI)
.                           
LPV10100  BRANCH    COMPCNT,LPV10101
          GOTO      LPV19999
.                           
LPV10101  APPEND    ANS,PV100101
          GOTO      LPV19999
.                           
.         PV1.2 Patient Class (IS)
.                           
LPV10200  BRANCH    COMPCNT,LPV10201
          GOTO      LPV19999
.                           
LPV10201  APPEND    ANS,PV100201
          GOTO      LPV19999
.                           
.         PV1.3 Assigned Patient Location (PL)
.                           
LPV10300  BRANCH    COMPCNT,LPV10301:            * point of care (IS)
                            LPV10302:            * room (IS)
                            LPV10303:            * bed (IS)
                            LPV10304:            * facility (HD)
                            LPV10305:            * location status (IS)
                            LPV10306:            * person location type (IS)
                            LPV10307:            * building (IS)
                            LPV10308:            * floor (IS)
                            LPV10309             * location description (ST)
          GOTO      LPV19999
.                           
LPV10301  APPEND    ANS,PV100301                 * load point of care (IS)
          GOTO      LPV19999
.                           
LPV10302  APPEND    ANS,PV100302                 * load room (IS)
          GOTO      LPV19999
.                           
LPV10303  APPEND    ANS,PV100303                 * load bed (IS)
          GOTO      LPV19999
.                           
LPV10304  APPEND    ANS,PV100304                 * load facility (HD)
          GOTO      LPV19999
.                           
LPV10305  APPEND    ANS,PV100305                 * load location status (IS)
          GOTO      LPV19999
.                           
LPV10306  APPEND    ANS,PV100306                 * load person locat. type (IS)
          GOTO      LPV19999
.                           
LPV10307  APPEND    ANS,PV100307                 * load building (IS)
          GOTO      LPV19999
.                           
LPV10308  APPEND    ANS,PV100308                 * load floor (IS)
          GOTO      LPV19999
.                           
LPV10309  APPEND    ANS,PV100309                 * load locat. description (ST)
          GOTO      LPV19999
.                           
.         PV1.4 Admission Type (IS)
.                           
LPV10400  BRANCH    COMPCNT,LPV10401
          GOTO      LPV19999
.                           
LPV10401  APPEND    ANS,PV100401
          GOTO      LPV19999
.                           
.         PV1.5 Preadmit Number (CX)
.                           
LPV10500  BRANCH    COMPCNT,LPV10501:            * id (ST)
                            LPV10502:            * check digit (ST)
                            LPV10503:            * check digit scheme code (ID)
                            LPV10504:            * assigning authority (HD)
                            LPV10505:            * identifier type code (IS)
                            LPV10506             * assigning facility (HD)
          GOTO      LPV19999
.                           
LPV10501  APPEND    ANS,PV100501                 * load id (ST)
          GOTO      LPV19999
.                           
LPV10502  APPEND    ANS,PV100502                 * load check digit (ST)
          GOTO      LPV19999
.                           
LPV10503  APPEND    ANS,PV100503                 * load chk dig scheme code (ID)
          GOTO      LPV19999
.                           
LPV10504  APPEND    ANS,PV100504                 * load assigning authority (HD)
          GOTO      LPV19999
.                           
LPV10505  APPEND    ANS,PV100505                 * load identifier typ code (IS)
          GOTO      LPV19999
.                           
LPV10506  APPEND    ANS,PV100506                 * load assigning facility (HD)
          GOTO      LPV19999
.                           
.         PV1.6 Prior Patient Location (PL)
.                           
LPV10600  BRANCH    COMPCNT,LPV10601:            * point of care (IS)
                            LPV10602:            * room (IS)
                            LPV10603:            * bed (IS)
                            LPV10604:            * facility (HD)
                            LPV10605:            * location status (IS)
                            LPV10606:            * person location type (IS)
                            LPV10607:            * building (IS)
                            LPV10608:            * floor (IS)
                            LPV10609             * location description (ST)
          GOTO      LPV19999
.                           
LPV10601  APPEND    ANS,PV100601                 * load point of care (IS)
          GOTO      LPV19999
.                           
LPV10602  APPEND    ANS,PV100602                 * load room (IS)
          GOTO      LPV19999
.                           
LPV10603  APPEND    ANS,PV100603                 * load bed (IS)
          GOTO      LPV19999
.                           
LPV10604  APPEND    ANS,PV100604                 * load facility (HD)
          GOTO      LPV19999
.                           
LPV10605  APPEND    ANS,PV100605                 * load location status (IS)
          GOTO      LPV19999
.                           
LPV10606  APPEND    ANS,PV100606                 * load person locat. type (IS)
          GOTO      LPV19999
.                           
LPV10607  APPEND    ANS,PV100607                 * load building (IS)
          GOTO      LPV19999
.                           
LPV10608  APPEND    ANS,PV100608                 * load floor (IS)
          GOTO      LPV19999
.                           
LPV10609  APPEND    ANS,PV100609                 * load locat. description (ST)
          GOTO      LPV19999
.                           
.         PV1.7 Attending Doctor (XCN)
.                           
LPV10700  BRANCH    COMPCNT,LPV10701:            * id number (ST)
                            LPV10702:            * family name (ST)
                            LPV10703:            * given name (ST)
                            LPV10704:            * middle name (ST)
                            LPV10705:            * suffix (ST)
                            LPV10706:            * prefix (ST)
                            LPV10707:            * degree (IS)
                            LPV10708:            * source table (IS)
                            LPV10709:            * assigning authority (HD)
                            LPV10710:            * name type code (ID)
                            LPV10711:            * identifier check digit (ST)
                            LPV10712:            * check digit scheme code (ID)
                            LPV10713:            * identifier type code (IS)
                            LPV10714:            * assigning facility (HD)
                            LPV10715             * name representation code (ID)
          GOTO      LPV19999
.                           
LPV10701  APPEND    ANS,PV100701                 * load id number (ST)
          GOTO      LPV19999
.                           
LPV10702  APPEND    ANS,PV100702                 * load family name (ST)
          GOTO      LPV19999
.                           
LPV10703  APPEND    ANS,PV100703                 * load given name (ST)
          GOTO      LPV19999
.                           
LPV10704  APPEND    ANS,PV100704                 * load middle name (ST)
          GOTO      LPV19999
.                           
LPV10705  APPEND    ANS,PV100705                 * load suffix (ST)
          GOTO      LPV19999
.                           
LPV10706  APPEND    ANS,PV100706                 * load prefix (ST)
          GOTO      LPV19999
.                           
LPV10707  APPEND    ANS,PV100707                 * load degree (IS)
          GOTO      LPV19999
.                           
LPV10708  APPEND    ANS,PV100708                 * load source table (IS)
          GOTO      LPV19999
.                           
LPV10709  APPEND    ANS,PV100709                 * load assigning authority (HD)
          GOTO      LPV19999
.                           
LPV10710  APPEND    ANS,PV100710                 * load name type code (ID)
          GOTO      LPV19999
.                           
LPV10711  APPEND    ANS,PV100711                 * load ident. check digit (ST)
          GOTO      LPV19999
.                           
LPV10712  APPEND    ANS,PV100712                 * load chk dig scheme code (ID)
          GOTO      LPV19999
.                           
LPV10713  APPEND    ANS,PV100713                 * load ident. type code (IS)
          GOTO      LPV19999
.                           
LPV10714  APPEND    ANS,PV100714                 * load assigning facility (HD)
          GOTO      LPV19999
.                           
LPV10715  APPEND    ANS,PV100715                 * load name repres. code (ID)
          GOTO      LPV19999
.                           
.         PV1.8 Referring Doctor (XCN)
.                           
LPV10800  BRANCH    COMPCNT,LPV10801:            * id number (ST)
                            LPV10802:            * family name (ST)
                            LPV10803:            * given name (ST)
                            LPV10804:            * middle name (ST)
                            LPV10805:            * suffix (ST)
                            LPV10806:            * prefix (ST)
                            LPV10807:            * degree (IS)
                            LPV10808:            * source table (IS)
                            LPV10809:            * assigning authority (HD)
                            LPV10810:            * name type code (ID)
                            LPV10811:            * identifier check digit (ST)
                            LPV10812:            * check digit scheme code (ID)
                            LPV10813:            * identifier type code (IS)
                            LPV10814:            * assigning facility (HD)
                            LPV10815             * name representation code (ID)
          GOTO      LPV19999
.                           
LPV10801  APPEND    ANS,PV100801                 * load id number (ST)
          GOTO      LPV19999
.                           
LPV10802  APPEND    ANS,PV100802                 * load family name (ST)
          GOTO      LPV19999
.                           
LPV10803  APPEND    ANS,PV100803                 * load given name (ST)
          GOTO      LPV19999
.                           
LPV10804  APPEND    ANS,PV100804                 * load middle name (ST)
          GOTO      LPV19999
.                           
LPV10805  APPEND    ANS,PV100805                 * load suffix (ST)
          GOTO      LPV19999
.                           
LPV10806  APPEND    ANS,PV100806                 * load prefix (ST)
          GOTO      LPV19999
.                           
LPV10807  APPEND    ANS,PV100807                 * load degree (IS)
          GOTO      LPV19999
.                           
LPV10808  APPEND    ANS,PV100808                 * load source table (IS)
          GOTO      LPV19999
.                           
LPV10809  APPEND    ANS,PV100809                 * load assigning authority (HD)
          GOTO      LPV19999
.                           
LPV10810  APPEND    ANS,PV100810                 * load name type code (ID)
          GOTO      LPV19999
.                           
LPV10811  APPEND    ANS,PV100811                 * load ident. check digit (ST)
          GOTO      LPV19999
.                           
LPV10812  APPEND    ANS,PV100812                 * load chk dig scheme code (ID)
          GOTO      LPV19999
.                           
LPV10813  APPEND    ANS,PV100813                 * load ident. type code (IS)
          GOTO      LPV19999
.                           
LPV10814  APPEND    ANS,PV100814                 * load assigning facility (HD)
          GOTO      LPV19999
.                           
LPV10815  APPEND    ANS,PV100815                 * load name repres. code (ID)
          GOTO      LPV19999
.                           
.         PV1.9 Consulting Doctor (XCN)
.                           
LPV10900  BRANCH    COMPCNT,LPV10901:            * id number (ST)
                            LPV10902:            * family name (ST)
                            LPV10903:            * given name (ST)
                            LPV10904:            * middle name (ST)
                            LPV10905:            * suffix (ST)
                            LPV10906:            * prefix (ST)
                            LPV10907:            * degree (IS)
                            LPV10908:            * source table (IS)
                            LPV10909:            * assigning authority (HD)
                            LPV10910:            * name type code (ID)
                            LPV10911:            * identifier check digit (ST)
                            LPV10912:            * check digit scheme code (ID)
                            LPV10913:            * identifier type code (IS)
                            LPV10914:            * assigning facility (HD)
                            LPV10915             * name representation code (ID)
          GOTO      LPV19999
.                           
LPV10901  APPEND    ANS,PV100901                 * load id number (ST)
          GOTO      LPV19999
.                           
LPV10902  APPEND    ANS,PV100902                 * load family name (ST)
          GOTO      LPV19999
.                           
LPV10903  APPEND    ANS,PV100903                 * load given name (ST)
          GOTO      LPV19999
.                           
LPV10904  APPEND    ANS,PV100904                 * load middle name (ST)
          GOTO      LPV19999
.                           
LPV10905  APPEND    ANS,PV100905                 * load suffix (ST)
          GOTO      LPV19999
.                           
LPV10906  APPEND    ANS,PV100906                 * load prefix (ST)
          GOTO      LPV19999
.                           
LPV10907  APPEND    ANS,PV100907                 * load degree (IS)
          GOTO      LPV19999
.                           
LPV10908  APPEND    ANS,PV100908                 * load source table (IS)
          GOTO      LPV19999
.                           
LPV10909  APPEND    ANS,PV100909                 * load assigning authority (HD)
          GOTO      LPV19999
.                           
LPV10910  APPEND    ANS,PV100910                 * load name type code (ID)
          GOTO      LPV19999
.                           
LPV10911  APPEND    ANS,PV100911                 * load ident. check digit (ST)
          GOTO      LPV19999
.                           
LPV10912  APPEND    ANS,PV100912                 * load chk dig scheme code (ID)
          GOTO      LPV19999
.                           
LPV10913  APPEND    ANS,PV100913                 * load ident. type code (IS)
          GOTO      LPV19999
.                           
LPV10914  APPEND    ANS,PV100914                 * load assigning facility (HD)
          GOTO      LPV19999
.                           
LPV10915  APPEND    ANS,PV100915                 * load name repres. code (ID)
          GOTO      LPV19999
.                           
.         PV1.10 Hospital Service (IS)
.                           
LPV11000  BRANCH    COMPCNT,LPV11001
          GOTO      LPV19999
.
LPV11001  APPEND    ANS,PV101001    
          GOTO      LPV19999
.                           
.         PV1.11 Temporary  Location (PL)
.                           
LPV11100  BRANCH    COMPCNT,LPV11101:            * point of care (IS)
                            LPV11102:            * room (IS)
                            LPV11103:            * bed (IS)
                            LPV11104:            * facility (HD)
                            LPV11105:            * location status (IS)
                            LPV11106:            * person location type (IS)
                            LPV11107:            * building (IS)
                            LPV11108:            * floor (IS)
                            LPV11109             * location description (ST)
          GOTO      LPV19999
.                           
LPV11101  APPEND    ANS,PV101101                 * load point of care (IS)
          GOTO      LPV19999
.                           
LPV11102  APPEND    ANS,PV101102                 * load room (IS)
          GOTO      LPV19999
.                           
LPV11103  APPEND    ANS,PV101103                 * load bed (IS)
          GOTO      LPV19999
.                           
LPV11104  APPEND    ANS,PV101104                 * load facility (HD)
          GOTO      LPV19999
.                           
LPV11105  APPEND    ANS,PV101105                 * load location status (IS)
          GOTO      LPV19999
.                           
LPV11106  APPEND    ANS,PV101106                 * load person locat. type (IS)
          GOTO      LPV19999
.                           
LPV11107  APPEND    ANS,PV101107                 * load building (IS)
          GOTO      LPV19999
.                           
LPV11108  APPEND    ANS,PV101108                 * load floor (IS)
          GOTO      LPV19999
.                           
LPV11109  APPEND    ANS,PV101109                 * load locat. description (ST)
          GOTO      LPV19999
.
.         PV1.12 Preadmit Test Indicator (IS)
.
LPV11200  BRANCH    COMPCNT,LPV11201
          GOTO      LPV19999
.
LPV11201  APPEND    ANS,PV101201
          GOTO      LPV19999
.
.         PV1.13 Re-admission Indicator (IS)
.
LPV11300  BRANCH    COMPCNT,LPV11301
          GOTO      LPV19999
.
LPV11301  APPEND    ANS,PV101301
          GOTO      LPV19999
.
.         PV1.14 Admit Source (IS)
.
LPV11400  BRANCH    COMPCNT,LPV11401
          GOTO      LPV19999
.
LPV11401  APPEND    ANS,PV101401
          GOTO      LPV19999
.
.         PV1.15 Ambulatory Status (IS)
.
LPV11500  BRANCH    COMPCNT,LPV11501
          GOTO      LPV19999
.
LPV11501  APPEND    ANS,PV101501
          GOTO      LPV19999
.
.         PV1.16 VIP Indicator (IS)
.
LPV11600  BRANCH    COMPCNT,LPV11601
          GOTO      LPV19999
.
LPV11601  APPEND    ANS,PV101601
          GOTO      LPV19999
.                           
.         PV1.17 Admitting Doctor (XCN)
.                           
LPV11700  BRANCH    COMPCNT,LPV11701:            * id number (ST)
                            LPV11702:            * family name (ST)
                            LPV11703:            * given name (ST)
                            LPV11704:            * middle name (ST)
                            LPV11705:            * suffix (ST)
                            LPV11706:            * prefix (ST)
                            LPV11707:            * degree (IS)
                            LPV11708:            * source table (IS)
                            LPV11709:            * assigning authority (HD)
                            LPV11710:            * name type code (ID)
                            LPV11711:            * identifier check digit (ST)
                            LPV11712:            * check digit scheme code (ID)
                            LPV11713:            * identifier type code (IS)
                            LPV11714:            * assigning facility (HD)
                            LPV11715             * name representation code (ID)
          GOTO      LPV19999
.                           
LPV11701  APPEND    ANS,PV101701                 * load id number (ST)
          GOTO      LPV19999
.                           
LPV11702  APPEND    ANS,PV101702                 * load family name (ST)
          GOTO      LPV19999
.                           
LPV11703  APPEND    ANS,PV101703                 * load given name (ST)
          GOTO      LPV19999
.                           
LPV11704  APPEND    ANS,PV101704                 * load middle name (ST)
          GOTO      LPV19999
.                           
LPV11705  APPEND    ANS,PV101705                 * load suffix (ST)
          GOTO      LPV19999
.                           
LPV11706  APPEND    ANS,PV101706                 * load prefix (ST)
          GOTO      LPV19999
.                           
LPV11707  APPEND    ANS,PV101707                 * load degree (IS)
          GOTO      LPV19999
.                           
LPV11708  APPEND    ANS,PV101708                 * load source table (IS)
          GOTO      LPV19999
.                           
LPV11709  APPEND    ANS,PV101709                 * load assigning authority (HD)
          GOTO      LPV19999
.                           
LPV11710  APPEND    ANS,PV101710                 * load name type code (ID)
          GOTO      LPV19999
.                           
LPV11711  APPEND    ANS,PV101711                 * load ident. check digit (ST)
          GOTO      LPV19999
.                           
LPV11712  APPEND    ANS,PV101712                 * load chk dig scheme code (ID)
          GOTO      LPV19999
.                           
LPV11713  APPEND    ANS,PV101713                 * load ident. type code (IS)
          GOTO      LPV19999
.                           
LPV11714  APPEND    ANS,PV101714                 * load assigning facility (HD)
          GOTO      LPV19999
.                           
LPV11715  APPEND    ANS,PV101715                 * load name repres. code (ID)
          GOTO      LPV19999
.
.         PV1.18 Patient Type (IS)
.
LPV11800  BRANCH    COMPCNT,LPV11801
          GOTO      LPV19999
.
LPV11801  APPEND    ANS,PV101801
          GOTO      LPV19999
.                           
.         PV1.19 Visit Number (CX)
.                           
LPV11900  BRANCH    COMPCNT,LPV11901:            * id (ST)
                            LPV11902:            * check digit (ST)
                            LPV11903:            * check digit scheme code (ID)
                            LPV11904:            * assigning authority (HD)
                            LPV11905:            * identifier type code (IS)
                            LPV11906             * assigning facility (HD)
          GOTO      LPV19999
.                           
LPV11901  APPEND    ANS,PV101901                 * load id (ST)
          GOTO      LPV19999
.                           
LPV11902  APPEND    ANS,PV101902                 * load check digit (ST)
          GOTO      LPV19999
.                           
LPV11903  APPEND    ANS,PV101903                 * load chk dig scheme code (ID)
          GOTO      LPV19999
.                           
LPV11904  APPEND    ANS,PV101904                 * load assigning authority (HD)
          GOTO      LPV19999
.                           
LPV11905  APPEND    ANS,PV101905                 * load identifier typ code (IS)
          GOTO      LPV19999
.                           
LPV11906  APPEND    ANS,PV101906                 * load assigning facility (HD)
          GOTO      LPV19999
.                           
.         PV1.20 Financial Class (FC)
.                           
LPV12000  BRANCH    COMPCNT,LPV12001:            * financial class (IS)
                            LPV12002             * effective date (TS)
          GOTO      LPV19999
.                           
LPV12001  APPEND    ANS,PV102001                 * load financial class (IS)
          GOTO      LPV19999
.                           
LPV12002  APPEND    ANS,PV102002                 * load effective date (TS)
          GOTO      LPV19999
.
.         PV1.21 Charge Price Indicator (IS)
.
LPV12100  BRANCH    COMPCNT,LPV12101
          GOTO      LPV19999
.
LPV12101  APPEND    ANS,PV102101
          GOTO      LPV19999
.
.         PV1.22 Courtesy Code (IS)
.
LPV12200  BRANCH    COMPCNT,LPV12201
          GOTO      LPV19999
.
LPV12201  APPEND    ANS,PV102201
          GOTO      LPV19999
.
.         PV1.23 Credit Rating (IS)
.
LPV12300  BRANCH    COMPCNT,LPV12301
          GOTO      LPV19999
.
LPV12301  APPEND    ANS,PV102301
          GOTO      LPV19999
.
.         PV1.24 Contract Code (IS)
.
LPV12400  BRANCH    COMPCNT,LPV12401
          GOTO      LPV19999
.
LPV12401  APPEND    ANS,PV102401
          GOTO      LPV19999
.
.         PV1.25 Contract Effective Date (DT)
.
LPV12500  BRANCH    COMPCNT,LPV12501
          GOTO      LPV19999
.
LPV12501  APPEND    ANS,PV102501
          GOTO      LPV19999
.
.         PV1.26 Contract Amount (NM)
.
LPV12600  BRANCH    COMPCNT,LPV12601
          GOTO      LPV19999
.
LPV12601  APPEND    ANS,PV102601
          GOTO      LPV19999
.
.         PV1.27 Contract Period (NM)
.
LPV12700  BRANCH    COMPCNT,LPV12701
          GOTO      LPV19999
.
LPV12701  APPEND    ANS,PV102701
          GOTO      LPV19999
.
.         PV1.28 Interest Code (IS)
.
LPV12800  BRANCH    COMPCNT,LPV12801
          GOTO      LPV19999
.
LPV12801  APPEND    ANS,PV102801
          GOTO      LPV19999
.
.         PV1.29 Transfer To Bad Debt Code (IS)
.
LPV12900  BRANCH    COMPCNT,LPV12901
          GOTO      LPV19999
.
LPV12901  APPEND    ANS,PV102901
          GOTO      LPV19999
.
.         PV1.30 Transfer To Bad Debt Date (DT)
.
LPV13000  BRANCH    COMPCNT,LPV13001
          GOTO      LPV19999
.
LPV13001  APPEND    ANS,PV103001
          GOTO      LPV19999
.
.         PV1.31  Bad Debt Agency Code (IS)
.
LPV13100  BRANCH    COMPCNT,LPV13101
          GOTO      LPV19999
.
LPV13101  APPEND    ANS,PV103101
          GOTO      LPV19999
.
.         PV1.32  Bad Debt Transfer Amount (NM)
.
LPV13200  BRANCH    COMPCNT,LPV13201
          GOTO      LPV19999
.
LPV13201  APPEND    ANS,PV103201
          GOTO      LPV19999
.
.         PV1.33  Bad Debt Recovery Amount (NM)
.
LPV13300  BRANCH    COMPCNT,LPV13301
          GOTO      LPV19999
.
LPV13301  APPEND    ANS,PV103301
          GOTO      LPV19999
.
.         PV1.34  Delete Account Indicator (IS)
.
LPV13400  BRANCH    COMPCNT,LPV13401
          GOTO      LPV19999
.
LPV13401  APPEND    ANS,PV103401
          GOTO      LPV19999
.
.         PV1.35  Delete Account Date (DT)
.
LPV13500  BRANCH    COMPCNT,LPV13501
          GOTO      LPV19999
.
LPV13501  APPEND    ANS,PV103501
          GOTO      LPV19999
.
.         PV1.36  Discharge Disposition (IS)
.
LPV13600  BRANCH    COMPCNT,LPV13601
          GOTO      LPV19999
.
LPV13601  APPEND    ANS,PV103601
          GOTO      LPV19999
.
.         PV1.37  Discharged To Location (CM)
.
LPV13700  BRANCH    COMPCNT,LPV13701:            * discharge location (IS)
                            LPV13702             * effective date (TS)
          GOTO      LPV19999
.
LPV13701  APPEND    ANS,PV103701                 * load discharge location (IS)
          GOTO      LPV19999
.
LPV13702  APPEND    ANS,PV103702                 * load effective date (TS)
          GOTO      LPV19999
.                           
.         PV1.38 Diet Type (CE)
.                           
LPV13800  BRANCH    COMPCNT,LPV13801:            * identifier (ST)
                            LPV13802:            * text (ST)
                            LPV13803:            * name of coding system (ST)
                            LPV13804:            * alternate identifier (ST)
                            LPV13805:            * alternate text (ST)
                            LPV13806             * name of alt. cod. system (ST)
          GOTO      LPV19999
.                           
LPV13801  APPEND    ANS,PV103801                 * load identifier (ST)
          GOTO      LPV19999
.                           
LPV13802  APPEND    ANS,PV103802                 * load text (ST)
          GOTO      LPV19999
.                           
LPV13803  APPEND    ANS,PV103803                 * load name of cod. system (ST)
          GOTO      LPV19999
.                           
LPV13804  APPEND    ANS,PV103804                 * load alt. identifier (ST)
          GOTO      LPV19999
.                           
LPV13805  APPEND    ANS,PV103805                 * load alternate text (ST)
          GOTO      LPV19999
.                           
LPV13806  APPEND    ANS,PV103806                 * load alt. cod. sys. name (ST)
          GOTO      LPV19999
.
.         PV1.39  Servicing Facility (IS)
.                           
LPV13900  BRANCH    COMPCNT,LPV13901
          GOTO      LPV19999
.                           
LPV13901  APPEND    ANS,PV103901
          GOTO      LPV19999
.
.         PV1.40  Bed Status (IS)
.                           
LPV14000  BRANCH    COMPCNT,LPV14001
          GOTO      LPV19999
.                           
LPV14001  APPEND    ANS,PV104001
          GOTO      LPV19999
.
.         PV1.41  Account Status (IS)
.                           
LPV14100  BRANCH    COMPCNT,LPV14101
          GOTO      LPV19999
.                           
LPV14101  APPEND    ANS,PV104101
          GOTO      LPV19999
.                           
.         PV1.42 Pending Location (PL)
.                           
LPV14200  BRANCH    COMPCNT,LPV14201:            * point of care (IS)
                            LPV14202:            * room (IS)
                            LPV14203:            * bed (IS)
                            LPV14204:            * facility (HD)
                            LPV14205:            * location status (IS)
                            LPV14206:            * person location type (IS)
                            LPV14207:            * building (IS)
                            LPV14208:            * floor (IS)
                            LPV14209             * location description (ST)
          GOTO      LPV19999
.                           
LPV14201  APPEND    ANS,PV104201                 * load point of care (IS)
          GOTO      LPV19999
.                           
LPV14202  APPEND    ANS,PV104202                 * load room (IS)
          GOTO      LPV19999
.                           
LPV14203  APPEND    ANS,PV104203                 * load bed (IS)
          GOTO      LPV19999
.                           
LPV14204  APPEND    ANS,PV104204                 * load facility (HD)
          GOTO      LPV19999
.                           
LPV14205  APPEND    ANS,PV104205                 * load location status (IS)
          GOTO      LPV19999
.                           
LPV14206  APPEND    ANS,PV104206                 * load person locat. type (IS)
          GOTO      LPV19999
.                           
LPV14207  APPEND    ANS,PV104207                 * load building (IS)
          GOTO      LPV19999
.                           
LPV14208  APPEND    ANS,PV104208                 * load floor (IS)
          GOTO      LPV19999
.                           
LPV14209  APPEND    ANS,PV104209                 * load locat. description (ST)
          GOTO      LPV19999
.                           
.         PV1.43 Prior Temporary Location (PL)
.                           
LPV14300  BRANCH    COMPCNT,LPV14301:            * point of care (IS)
                            LPV14302:            * room (IS)
                            LPV14303:            * bed (IS)
                            LPV14304:            * facility (HD)
                            LPV14305:            * location status (IS)
                            LPV14306:            * person location type (IS)
                            LPV14307:            * building (IS)
                            LPV14308:            * floor (IS)
                            LPV14309             * location description (ST)
          GOTO      LPV19999
.                           
LPV14301  APPEND    ANS,PV104301                 * load point of care (IS)
          GOTO      LPV19999
.                           
LPV14302  APPEND    ANS,PV104302                 * load room (IS)
          GOTO      LPV19999
.                           
LPV14303  APPEND    ANS,PV104303                 * load bed (IS)
          GOTO      LPV19999
.                           
LPV14304  APPEND    ANS,PV104304                 * load facility (HD)
          GOTO      LPV19999
.                           
LPV14305  APPEND    ANS,PV104305                 * load location status (IS)
          GOTO      LPV19999
.                           
LPV14306  APPEND    ANS,PV104306                 * load person locat. type (IS)
          GOTO      LPV19999
.                           
LPV14307  APPEND    ANS,PV104307                 * load building (IS)
          GOTO      LPV19999
.                           
LPV14308  APPEND    ANS,PV104308                 * load floor (IS)
          GOTO      LPV19999
.                           
LPV14309  APPEND    ANS,PV104309                 * load locat. description (ST)
          GOTO      LPV19999
.         
.         PV1.44  Admit Date/Time (TS)
.                           
LPV14400  BRANCH    COMPCNT,LPV14401
          GOTO      LPV19999
.
LPV14401  APPEND    ANS,PV104401     
          GOTO      LPV19999
.         
.         PV1.45  Discharge Date/Time (TS)
.                           
LPV14500  BRANCH    COMPCNT,LPV14501
          GOTO      LPV19999
.
LPV14501  APPEND    ANS,PV104501     
          GOTO      LPV19999
.         
.         PV1.46  Current Patient Balance (NM)
.                           
LPV14600  BRANCH    COMPCNT,LPV14601
          GOTO      LPV19999
.
LPV14601  APPEND    ANS,PV104601     
          GOTO      LPV19999
.         
.         PV1.47  Total Charges (NM)
.                           
LPV14700  BRANCH    COMPCNT,LPV14701
          GOTO      LPV19999
.
LPV14701  APPEND    ANS,PV104701     
          GOTO      LPV19999
.         
.         PV1.48  Total Adjustments (NM)
.                           
LPV14800  BRANCH    COMPCNT,LPV14801
          GOTO      LPV19999
.
LPV14801  APPEND    ANS,PV104801     
          GOTO      LPV19999
.         
.         PV1.49  Total Payments (NM)
.                           
LPV14900  BRANCH    COMPCNT,LPV14901
          GOTO      LPV19999
.
LPV14901  APPEND    ANS,PV104901     
          GOTO      LPV19999
.                           
.         PV1.50 Alternate Visit ID (CX)
.                           
LPV15000  BRANCH    COMPCNT,LPV15001:            * id (ST)
                            LPV15002:            * check digit (ST)
                            LPV15003:            * check digit scheme code (ID)
                            LPV15004:            * assigning authority (HD)
                            LPV15005:            * identifier type code (IS)
                            LPV15006             * assigning facility (HD)
          GOTO      LPV19999
.                           
LPV15001  APPEND    ANS,PV105001                 * load id (ST)
          GOTO      LPV19999
.                           
LPV15002  APPEND    ANS,PV105002                 * load check digit (ST)
          GOTO      LPV19999
.                           
LPV15003  APPEND    ANS,PV105003                 * load chk dig scheme code (ID)
          GOTO      LPV19999
.                           
LPV15004  APPEND    ANS,PV105004                 * load assigning authority (HD)
          GOTO      LPV19999
.                           
LPV15005  APPEND    ANS,PV105005                 * load identifier typ code (IS)
          GOTO      LPV19999
.                           
LPV15006  APPEND    ANS,PV105006                 * load assigning facility (HD)
          GOTO      LPV19999
.         
.         PV1.51  Visit Indicator (IS)
.                           
LPV15100  BRANCH    COMPCNT,LPV15101
          GOTO      LPV19999
.
LPV15101  APPEND    ANS,PV105101     
          GOTO      LPV19999
.                           
.         PV1.52 Admitting Doctor (XCN)
.                           
LPV15200  BRANCH    COMPCNT,LPV15201:            * id number (ST)
                            LPV15202:            * family name (ST)
                            LPV15203:            * given name (ST)
                            LPV15204:            * middle name (ST)
                            LPV15205:            * suffix (ST)
                            LPV15206:            * prefix (ST)
                            LPV15207:            * degree (IS)
                            LPV15208:            * source table (IS)
                            LPV15209:            * assigning authority (HD)
                            LPV15210:            * name type code (ID)
                            LPV15211:            * identifier check digit (ST)
                            LPV15212:            * check digit scheme code (ID)
                            LPV15213:            * identifier type code (IS)
                            LPV15214:            * assigning facility (HD)
                            LPV15215             * name representation code (ID)
          GOTO      LPV19999
.                           
LPV15201  APPEND    ANS,PV105201                 * load id number (ST)
          GOTO      LPV19999
.                           
LPV15202  APPEND    ANS,PV105202                 * load family name (ST)
          GOTO      LPV19999
.                           
LPV15203  APPEND    ANS,PV105203                 * load given name (ST)
          GOTO      LPV19999
.                           
LPV15204  APPEND    ANS,PV105204                 * load middle name (ST)
          GOTO      LPV19999
.                           
LPV15205  APPEND    ANS,PV105205                 * load suffix (ST)
          GOTO      LPV19999
.                           
LPV15206  APPEND    ANS,PV105206                 * load prefix (ST)
          GOTO      LPV19999
.                           
LPV15207  APPEND    ANS,PV105207                 * load degree (IS)
          GOTO      LPV19999
.                           
LPV15208  APPEND    ANS,PV105208                 * load source table (IS)
          GOTO      LPV19999
.                           
LPV15209  APPEND    ANS,PV105209                 * load assigning authority (HD)
          GOTO      LPV19999
.                           
LPV15210  APPEND    ANS,PV105210                 * load name type code (ID)
          GOTO      LPV19999
.                           
LPV15211  APPEND    ANS,PV105211                 * load ident. check digit (ST)
          GOTO      LPV19999
.                           
LPV15212  APPEND    ANS,PV105212                 * load chk dig scheme code (ID)
          GOTO      LPV19999
.                           
LPV15213  APPEND    ANS,PV105213                 * load ident. type code (IS)
          GOTO      LPV19999
.                           
LPV15214  APPEND    ANS,PV105214                 * load assigning facility (HD)
          GOTO      LPV19999
.                           
LPV15215  APPEND    ANS,PV105215                 * load name repres. code (ID)
          GOTO      LPV19999
.
LPV19999  RETURN
+
.*****************************************************************************
.*                                 LPV20000        Called by: PROC0000       *
.*                          Load the PV2 fields                              *
.*****************************************************************************
.
LPV20000  BRANCH    FIELDNO,LPV20100:            * Prior Pending Location
                            LPV20200:            * Accommodation Code
                            LPV20300:            * Admit Reason
                            LPV20400:            * Transfer Reason
                            LPV20500:            * Patient Valuables
                            LPV20600:            * Patient Valuables Location
                            LPV20700:            * Visit User Code
                            LPV20800:            * Expected Admit Date/Time
                            LPV20900:            * Expected Discharge Date/Time
                            LPV21000:            * Est. Length of Inpatient Stay
                            LPV21100:            * Actual Length of I/P Stay
                            LPV21200:            * Visit Description
                            LPV21300:            * Referral Source Code
                            LPV21400:            * Previous Service Date
                            LPV21500:            * Empl. Illness Related Indic.
                            LPV21600:            * Purge Status Code
                            LPV21700:            * Purge Status Date
                            LPV21800:            * Special Program Code
                            LPV21900:            * Retention Indicator
                            LPV22000:            * Exp. No of Insurance Plans
                            LPV22100:            * Visit Publicity Code
                            LPV22200:            * Visit Protection Indicator
                            LPV22300:            * Clinic Organization Name
                            LPV22400:            * Patient Status Code
                            LPV22500:            * Visit Priority Code
                            LPV22600:            * Previous Treatment Date
                            LPV22700:            * Exp. Discharge Disposition
                            LPV22800:            * Signature on File Date
                            LPV22900:            * First Similar Illness Date
                            LPV23000:            * Pt. Charge Adjustment Code
                            LPV23100:            * Recurring Service Code
                            LPV23200:            * Billing Media Code
                            LPV23300:            * Expected Surgery Date & Time
                            LPV23400:            * Military Partnership Code
                            LPV23500:            * Mil. Non-Availability Code
                            LPV23600:            * Newborn Baby Indicator
                            LPV23700             * Baby Detained Indicator
.
.         Invalid PV2 field received, so ignore it
.
          GOTO      LPV29999
.
.         PV2.1 Prior Pending Location (PL)
.                           
LPV20100  BRANCH    COMPCNT,LPV20101:            * point of care (IS)
                            LPV20102:            * room (IS)
                            LPV20103:            * bed (IS)
                            LPV20104:            * facility (HD)
                            LPV20105:            * location status (IS)
                            LPV20106:            * person location type (IS)
                            LPV20107:            * building (IS)
                            LPV20108:            * floor (IS)
                            LPV20109             * location description (ST)
          GOTO      LPV29999
.                           
LPV20101  APPEND    ANS,PV200101                 * load point of care (IS)
          GOTO      LPV29999
.                           
LPV20102  APPEND    ANS,PV200102                 * load room (IS)
          GOTO      LPV29999
.                           
LPV20103  APPEND    ANS,PV200103                 * load bed (IS)
          GOTO      LPV29999
.                           
LPV20104  APPEND    ANS,PV200104                 * load facility (HD)
          GOTO      LPV29999
.                           
LPV20105  APPEND    ANS,PV200105                 * load location status (IS)
          GOTO      LPV29999
.                           
LPV20106  APPEND    ANS,PV200106                 * load person locat. type (IS)
          GOTO      LPV29999
.                           
LPV20107  APPEND    ANS,PV200107                 * load building (IS)
          GOTO      LPV29999
.                           
LPV20108  APPEND    ANS,PV200108                 * load floor (IS)
          GOTO      LPV29999
.                           
LPV20109  APPEND    ANS,PV200109                 * load locat. description (ST)
          GOTO      LPV29999
.
.         PV2.2 Accommodation Code (CE)
.                           
LPV20200  BRANCH    COMPCNT,LPV20201:            * identifier (ST)
                            LPV20202:            * text (ST)
                            LPV20203:            * name of coding system (ST)
                            LPV20204:            * alternate identifier (ST)
                            LPV20205:            * alternate text (ST)
                            LPV20206             * name of alt. cod. system (ST)
          GOTO      LPV29999
.                           
LPV20201  APPEND    ANS,PV200201                 * load identifier (ST)
          GOTO      LPV29999
.                           
LPV20202  APPEND    ANS,PV200202                 * load text (ST)
          GOTO      LPV29999
.                           
LPV20203  APPEND    ANS,PV200203                 * load name of cod. system (ST)
          GOTO      LPV29999
.                           
LPV20204  APPEND    ANS,PV200204                 * load alt. identifier (ST)
          GOTO      LPV29999
.                           
LPV20205  APPEND    ANS,PV200205                 * load alternate text (ST)
          GOTO      LPV29999
.                           
LPV20206  APPEND    ANS,PV200206                 * load alt. cod. sys. name (ST)
          GOTO      LPV29999
.
.         PV2.3 Admit Reason (CE)
.
LPV20300  BRANCH    COMPCNT,LPV20301:            * identifier (ST)
                            LPV20302:            * text (ST)
                            LPV20303:            * name of coding system (ST)
                            LPV20304:            * alternate identifier (ST)
                            LPV20305:            * alternate text (ST)
                            LPV20306             * name of alt. cod. system (ST)
          GOTO      LPV29999
.                           
LPV20301  APPEND    ANS,PV200301                 * load identifier (ST)
          GOTO      LPV29999
.                           
LPV20302  APPEND    ANS,PV200302                 * load text (ST)
          GOTO      LPV29999
.                           
LPV20303  APPEND    ANS,PV200303                 * load name of cod. system (ST)
          GOTO      LPV29999
.                           
LPV20304  APPEND    ANS,PV200304                 * load alt. identifier (ST)
          GOTO      LPV29999
.                           
LPV20305  APPEND    ANS,PV200305                 * load alternate text (ST)
          GOTO      LPV29999
.                           
LPV20306  APPEND    ANS,PV200306                 * load alt. cod. sys. name (ST)
          GOTO      LPV29999
.
.         PV2.4 Transfer Reason (CE)
.
LPV20400  BRANCH    COMPCNT,LPV20401:            * identifier (ST)
                            LPV20402:            * text (ST)
                            LPV20403:            * name of coding system (ST)
                            LPV20404:            * alternate identifier (ST)
                            LPV20405:            * alternate text (ST)
                            LPV20406             * name of alt. cod. system (ST)
          GOTO      LPV29999
.                           
LPV20401  APPEND    ANS,PV200401                 * load identifier (ST)
          GOTO      LPV29999
.                           
LPV20402  APPEND    ANS,PV200402                 * load text (ST)
          GOTO      LPV29999
.                           
LPV20403  APPEND    ANS,PV200403                 * load name of cod. system (ST)
          GOTO      LPV29999
.                           
LPV20404  APPEND    ANS,PV200404                 * load alt. identifier (ST)
          GOTO      LPV29999
.                           
LPV20405  APPEND    ANS,PV200405                 * load alternate text (ST)
          GOTO      LPV29999
.                           
LPV20406  APPEND    ANS,PV200406                 * load alt. cod. sys. name (ST)
          GOTO      LPV29999
.
.         PV2.5 Patient Valuables (ST)
.
LPV20500  BRANCH    COMPCNT,LPV20501
          GOTO      LPV29999
.
LPV20501  APPEND    ANS,PV200501                 * load patient valuables (ST)
          GOTO      LPV29999
.
.         PV2.6 Patient Valuables Location (ST)
.
LPV20600  BRANCH    COMPCNT,LPV20601
          GOTO      LPV29999
.
LPV20601  APPEND    ANS,PV200601                 * load pt. valuables loc'n (ST)
          GOTO      LPV29999
.
.         PV2.7 Visit User Code (IS)
.
LPV20700  BRANCH    COMPCNT,LPV20701
          GOTO      LPV29999
.
LPV20701  APPEND    ANS,PV200701                 * load visit user code (IS)
          GOTO      LPV29999
.
.         PV2.8 Expected Admit Date/Time (TS)
.
LPV20800  BRANCH    COMPCNT,LPV20801
          GOTO      LPV29999
.
LPV20801  APPEND    ANS,PV200801                 * load exp. admit datetime (TS)
          GOTO      LPV29999
.
.         PV2.9 Expected Discharge Date/Time (TS)
.
LPV20900  BRANCH    COMPCNT,LPV20901
          GOTO      LPV29999
.
LPV20901  APPEND    ANS,PV200901                 * load exp. disch datetime (TS)
          GOTO      LPV29999
.
.         PV2.10 Estimated Length of Inpatient Stay (NM)
.
LPV21000  BRANCH    COMPCNT,LPV21001
          GOTO      LPV29999
.
LPV21001  APPEND    ANS,PV201001                 * load exp. los (NM)
          GOTO      LPV29999
.
.         PV2.11 Actual Length of Inpatient Stay (NM)
.
LPV21100  BRANCH    COMPCNT,LPV21101
          GOTO      LPV29999
.
LPV21101  APPEND    ANS,PV201101                 * load actual los (NM)
          GOTO      LPV29999
.
.         PV2.12 Visit Description (ST)
.
LPV21200  BRANCH    COMPCNT,LPV21201
          GOTO      LPV29999
.
LPV21201  APPEND    ANS,PV201201                 * load visit desc (ST)
          GOTO      LPV29999
.
.         PV2.13 Referral Source Code (XCN)
.                           
LPV21300  BRANCH    COMPCNT,LPV21301:            * id number (ST)
                            LPV21302:            * family name (ST)
                            LPV21303:            * given name (ST)
                            LPV21304:            * middle name (ST)
                            LPV21305:            * suffix (ST)
                            LPV21306:            * prefix (ST)
                            LPV21307:            * degree (IS)
                            LPV21308:            * source table (IS)
                            LPV21309:            * assigning authority (HD)
                            LPV21310:            * name type code (ID)
                            LPV21311:            * identifier check digit (ST)
                            LPV21312:            * check digit scheme code (ID)
                            LPV21313:            * identifier type code (IS)
                            LPV21314:            * assigning facility (HD)
                            LPV21315             * name representation code (ID)
          GOTO      LPV29999
.                           
LPV21301  APPEND    ANS,PV201301                 * load id number (ST)
          GOTO      LPV29999
.                           
LPV21302  APPEND    ANS,PV201302                 * load family name (ST)
          GOTO      LPV29999
.                           
LPV21303  APPEND    ANS,PV201303                 * load given name (ST)
          GOTO      LPV29999
.                           
LPV21304  APPEND    ANS,PV201304                 * load middle name (ST)
          GOTO      LPV29999
.                           
LPV21305  APPEND    ANS,PV201305                 * load suffix (ST)
          GOTO      LPV29999
.                           
LPV21306  APPEND    ANS,PV201306                 * load prefix (ST)
          GOTO      LPV29999
.                           
LPV21307  APPEND    ANS,PV201307                 * load degree (IS)
          GOTO      LPV29999
.                           
LPV21308  APPEND    ANS,PV201308                 * load source table (IS)
          GOTO      LPV29999
.                           
LPV21309  APPEND    ANS,PV201309                 * load assigning authority (HD)
          GOTO      LPV29999
.                           
LPV21310  APPEND    ANS,PV201310                 * load name type code (ID)
          GOTO      LPV29999
.                           
LPV21311  APPEND    ANS,PV201311                 * load ident. check digit (ST)
          GOTO      LPV29999
.                           
LPV21312  APPEND    ANS,PV201312                 * load chk dig scheme code (ID)
          GOTO      LPV29999
.                           
LPV21313  APPEND    ANS,PV201313                 * load ident. type code (IS)
          GOTO      LPV29999
.                           
LPV21314  APPEND    ANS,PV201314                 * load assigning facility (HD)
          GOTO      LPV29999
.                           
LPV21315  APPEND    ANS,PV201315                 * load name repres. code (ID)
          GOTO      LPV29999
.
.         PV2.14 Previous Service Date (DT)
.
LPV21400  BRANCH    COMPCNT,LPV21401
          GOTO      LPV29999
.
LPV21401  APPEND    ANS,PV201401                 * load prev service date (DT)
          GOTO      LPV29999
.
.         PV2.15 Employment Illness Related Indicator (ID)
.
LPV21500  BRANCH    COMPCNT,LPV21501
          GOTO      LPV29999
.
LPV21501  APPEND    ANS,PV201501                 * load empl. illness ind (ID)
          GOTO      LPV29999
.
.         PV2.16 Purge Status Code (IS)
.
LPV21600  BRANCH    COMPCNT,LPV21601
          GOTO      LPV29999
.
LPV21601  APPEND    ANS,PV201601                 * load purge status code (IS)
          GOTO      LPV29999
.
.         PV2.17 Purge Status Date (DT)
.
LPV21700  BRANCH    COMPCNT,LPV21701
          GOTO      LPV29999
.
LPV21701  APPEND    ANS,PV201701                 * load purge status date (DT)
          GOTO      LPV29999
.
.         PV2.18 Special Program Code (IS)
.
LPV21800  BRANCH    COMPCNT,LPV21801
          GOTO      LPV29999
.
LPV21801  APPEND    ANS,PV201801                 * load special prog. code (IS)
          GOTO      LPV29999
.
.         PV2.19 Retention Indicator (ID)
.
LPV21900  BRANCH    COMPCNT,LPV21901
          GOTO      LPV29999
.
LPV21901  APPEND    ANS,PV201901                 * load retention indicator (ID)
          GOTO      LPV29999
.
.         PV2.20 Expected Number of Insurance Plans (NM)
.
LPV22000  BRANCH    COMPCNT,LPV22001
          GOTO      LPV29999
.
LPV22001  APPEND    ANS,PV202001                 * load exp. # ins. plans (NM)
          GOTO      LPV29999
.
.         PV2.21 Visit Publicity Code (IS)
.
LPV22100  BRANCH    COMPCNT,LPV22101
          GOTO      LPV29999
.
LPV22101  APPEND    ANS,PV202101                 * load visit pub. code (IS)
          GOTO      LPV29999
.
.         PV2.22 Visit Protection Indicator (ID)
.
LPV22200  BRANCH    COMPCNT,LPV22201
          GOTO      LPV29999
.
LPV22201  APPEND    ANS,PV202201                 * load visit prot. ind. (ID)
          GOTO      LPV29999
.
.         PV2.23 Clinic Organization Name (XON)
.
LPV22300  BRANCH    COMPCNT,LPV22301:            * organisation name (ST)
                            LPV22302:            * org. name type code (IS)
                            LPV22303:            * id number (NM)
                            LPV22304:            * check digit (NM)
                            LPV22305:            * check digit scheme code (ID)
                            LPV22306:            * assigning authority (HD)
                            LPV22307:            * identifier type code (IS)
                            LPV22308:            * assigning facility (HD)
                            LPV22309             * name rep. code (ID)
          GOTO      LPV29999
.
LPV22301  APPEND    ANS,PV202301                 * organisation name (ST)
          GOTO      LPV29999
.
LPV22302  APPEND    ANS,PV202302                 * org. name type code (IS)
          GOTO      LPV29999
.
LPV22303  APPEND    ANS,PV202303                 * id number (NM)
          GOTO      LPV29999
.
LPV22304  APPEND    ANS,PV202304                 * load check digit (ST)
          GOTO      LPV29999
.
LPV22305  APPEND    ANS,PV202305                 * load chk dig scheme code (ID)
          GOTO      LPV29999
.
LPV22306  APPEND    ANS,PV202306                 * load assigning authority (HD)
          GOTO      LPV29999
.
LPV22307  APPEND    ANS,PV202307                 * load identifier typ code (IS)
          GOTO      LPV29999
.
LPV22308  APPEND    ANS,PV202308                 * load assigning facility (HD)
          GOTO      LPV29999
.
LPV22309  APPEND    ANS,PV202309                 * load name rep. code (ID)
          GOTO      LPV29999
.
.         PV2.24 Patient Status Code (IS)
.
LPV22400  BRANCH    COMPCNT,LPV22401
          GOTO      LPV29999
.
LPV22401  APPEND    ANS,PV202401                 * load pt. status code (IS)
          GOTO      LPV29999
.
.         PV2.25 Visit Priority Code (IS)
.
LPV22500  BRANCH    COMPCNT,LPV22501
          GOTO      LPV29999
.
LPV22501  APPEND    ANS,PV202501                 * load visit priority code (IS)
          GOTO      LPV29999
.
.         PV2.26 Previous Treatment Date (DT)
.
LPV22600  BRANCH    COMPCNT,LPV22601
          GOTO      LPV29999
.
LPV22601  APPEND    ANS,PV202601                 * load prev.treatment date (DT)
          GOTO      LPV29999
.
.         PV2.27 Expected Discharge Disposition (IS)
.
LPV22700  BRANCH    COMPCNT,LPV22701
          GOTO      LPV29999
.
LPV22701  APPEND    ANS,PV202701                 * load exp. disch. disp. (IS)
          GOTO      LPV29999
.
.         PV2.28 Signature on File Date (DT)
.
LPV22800  BRANCH    COMPCNT,LPV22801
          GOTO      LPV29999
.
LPV22801  APPEND    ANS,PV202801                 * load sign. on file date (DT)
          GOTO      LPV29999
.
.         PV2.29 First Similar Illness Date (DT)
.
LPV22900  BRANCH    COMPCNT,LPV22901
          GOTO      LPV29999
.
LPV22901  APPEND    ANS,PV202901                 * load 1st sim. ill. date (DT)
          GOTO      LPV29999
.
.         PV2.30 Patient Charge Adjustment Code (CE)
.
LPV23000  BRANCH    COMPCNT,LPV23001:            * identifier (ST)
                            LPV23002:            * text (ST)
                            LPV23003:            * name of coding system (ST)
                            LPV23004:            * alternate identifier (ST)
                            LPV23005:            * alternate text (ST)
                            LPV23006             * name of alt. cod. system (ST)
          GOTO      LPV29999
.                           
LPV23001  APPEND    ANS,PV203001                 * load identifier (ST)
          GOTO      LPV29999
.                           
LPV23002  APPEND    ANS,PV203002                 * load text (ST)
          GOTO      LPV29999
.                           
LPV23003  APPEND    ANS,PV203003                 * load name of cod. system (ST)
          GOTO      LPV29999
.                           
LPV23004  APPEND    ANS,PV203004                 * load alt. identifier (ST)
          GOTO      LPV29999
.                           
LPV23005  APPEND    ANS,PV203005                 * load alternate text (ST)
          GOTO      LPV29999
.                           
LPV23006  APPEND    ANS,PV203006                 * load alt. cod. sys. name (ST)
.
.         PV2.31 Recurring Service Code (IS)
.
LPV23100  BRANCH    COMPCNT,LPV23101
          GOTO      LPV29999
.
LPV23101  APPEND    ANS,PV203101                 * load rec. service code (IS)
          GOTO      LPV29999
.
.         PV2.32 Billing Media Code (ID)
.
LPV23200  BRANCH    COMPCNT,LPV23201
          GOTO      LPV29999
.
LPV23201  APPEND    ANS,PV203201                 * load billing media code (ID)
          GOTO      LPV29999
.
.         PV2.33 Expected Surgery Date & Time (TS)
.
LPV23300  BRANCH    COMPCNT,LPV23301
          GOTO      LPV29999
.
LPV23301  APPEND    ANS,PV203301                 * load exp. surg. datetime (TS)
          GOTO      LPV29999
.
.         PV2.34 Military Partnership Code (ID)
.
LPV23400  BRANCH    COMPCNT,LPV23401
          GOTO      LPV29999
.
LPV23401  APPEND    ANS,PV203401                 * load mil. part. code (ID)
          GOTO      LPV29999
.
.         PV2.35 Military Non-Availability Code (ID)
.
LPV23500  BRANCH    COMPCNT,LPV23501
          GOTO      LPV29999
.
LPV23501  APPEND    ANS,PV203501                 * load mil. non-av. code (ID)
          GOTO      LPV29999
.
.         PV2.36 Newborn Baby Indicator (ID)
.
LPV23600  BRANCH    COMPCNT,LPV23601
          GOTO      LPV29999
.
LPV23601  APPEND    ANS,PV203601                 * load newborn baby ind. (ID)
          GOTO      LPV29999
.
.         PV2.37 Baby Detained Indicator (ID)
.
LPV23700  BRANCH    COMPCNT,LPV23701
          GOTO      LPV29999
.
LPV23701  APPEND    ANS,PV203701                 * load baby detained ind. (ID)
          GOTO      LPV29999
.
LPV29999  RETURN
+
.*****************************************************************************
.*                                 LMRG0000        Called by: PROC0000       *
.*                          Load the MRG fields                              *
.*****************************************************************************
.
LMRG0000  BRANCH    FIELDNO,LMRG0100:            * Prior Patient ID - Internal
                            LMRG0200:            * Prior Alternate Patient Id
                            LMRG0300:            * Prior Patient Account No.
                            LMRG0400:            * Prior Patient Id - External
                            LMRG0500:            * Prior Visit Number
                            LMRG0600:            * Prior Alternate Visit Id
                            LMRG0700             * Prior Patient Name
.
.         Invalid MRG field received, so ignore it
.
          GOTO      LMRG9999
.
.         MRG.1 Prior Patient Identifier List (CX)
.
LMRG0100  BRANCH    COMPCNT,LMRG0101:            * id (ST)
                            LMRG0102:            * check digit (ST)
                            LMRG0103:            * code ident. chk dig, sch (ID)
                            LMRG0104:            * assigning authority (HD)
                            LMRG0105:            * identifier type code (IS)
                            LMRG0106             * assigning facility (HD)
          GOTO      LMRG9999
.
LMRG0101  APPEND    ANS,MRG00101                 * load id (ST)
          GOTO      LMRG9999
.
LMRG0102  APPEND    ANS,MRG00102                 * load check digit (ST)
          GOTO      LMRG9999
.
LMRG0103  APPEND    ANS,MRG00103                 * load code ident chk dig (ID)
          GOTO      LMRG9999
.
LMRG0104  APPEND    ANS,MRG00104                 * load assigning authority (HD)
          GOTO      LMRG9999
.
LMRG0105  APPEND    ANS,MRG00105                 * load ident. type code (IS)
          GOTO      LMRG9999
.
LMRG0106  APPEND    ANS,MRG00106                 * load assigning facility (HD)
          GOTO      LMRG9999
.
.         MRG.2 Prior Patient Alternate ID (CX)
.
LMRG0200  BRANCH    COMPCNT,LMRG0201:            * id (ST)
                            LMRG0202:            * check digit (ST)
                            LMRG0203:            * code ident. chk dig, sch (ID)
                            LMRG0204:            * assigning authority (HD)
                            LMRG0205:            * identifier type code (IS)
                            LMRG0206             * assigning facility (HD)
          GOTO      LMRG9999
.
LMRG0201  APPEND    ANS,MRG00201                 * load id (ST)
          GOTO      LMRG9999
.
LMRG0202  APPEND    ANS,MRG00202                 * load check digit (ST)
          GOTO      LMRG9999
.
LMRG0203  APPEND    ANS,MRG00203                 * load code ident chk dig (ID)
          GOTO      LMRG9999
.
LMRG0204  APPEND    ANS,MRG00204                 * load assigning authority (HD)
          GOTO      LMRG9999
.
LMRG0205  APPEND    ANS,MRG00205                 * load ident. type code (IS)
          GOTO      LMRG9999
.
LMRG0206  APPEND    ANS,MRG00206                 * load assigning facility (HD)
          GOTO      LMRG9999
.
.         MRG.3 Prior Patient Account Number (CX)
.
LMRG0300  BRANCH    COMPCNT,LMRG0301:            * id (ST)
                            LMRG0302:            * check digit (ST)
                            LMRG0303:            * code ident. chk dig, sch (ID)
                            LMRG0304:            * assigning authority (HD)
                            LMRG0305:            * identifier type code (IS)
                            LMRG0306             * assigning facility (HD)
          GOTO      LMRG9999
.
LMRG0301  APPEND    ANS,MRG00301                 * load id (ST)
          GOTO      LMRG9999
.
LMRG0302  APPEND    ANS,MRG00302                 * load check digit (ST)
          GOTO      LMRG9999
.
LMRG0303  APPEND    ANS,MRG00303                 * load code ident chk dig (ID)
          GOTO      LMRG9999
.
LMRG0304  APPEND    ANS,MRG00304                 * load assigning authority (HD)
          GOTO      LMRG9999
.
LMRG0305  APPEND    ANS,MRG00305                 * load ident. type code (IS)
          GOTO      LMRG9999
.
LMRG0306  APPEND    ANS,MRG00306                 * load assigning facility (HD)
          GOTO      LMRG9999
.
.         MRG.4 Prior Patient ID (CX)
.
LMRG0400  BRANCH    COMPCNT,LMRG0401:            * id (ST)
                            LMRG0402:            * check digit (ST)
                            LMRG0403:            * code ident. chk dig, sch (ID)
                            LMRG0404:            * assigning authority (HD)
                            LMRG0405:            * identifier type code (IS)
                            LMRG0406             * assigning facility (HD)
          GOTO      LMRG9999
.
LMRG0401  APPEND    ANS,MRG00401                 * load id (ST)
          GOTO      LMRG9999
.
LMRG0402  APPEND    ANS,MRG00402                 * load check digit (ST)
          GOTO      LMRG9999
.
LMRG0403  APPEND    ANS,MRG00403                 * load code ident chk dig (ID)
          GOTO      LMRG9999
.
LMRG0404  APPEND    ANS,MRG00404                 * load assigning authority (HD)
          GOTO      LMRG9999
.
LMRG0405  APPEND    ANS,MRG00405                 * load ident. type code (IS)
          GOTO      LMRG9999
.
LMRG0406  APPEND    ANS,MRG00406                 * load assigning facility (HD)
          GOTO      LMRG9999
.
.         MRG.5 Prior Visit Number (CX)
.
LMRG0500  BRANCH    COMPCNT,LMRG0501:            * id (ST)
                            LMRG0502:            * check digit (ST)
                            LMRG0503:            * code ident. chk dig, sch (ID)
                            LMRG0504:            * assigning authority (HD)
                            LMRG0505:            * identifier type code (IS)
                            LMRG0506             * assigning facility (HD)
          GOTO      LMRG9999
.
LMRG0501  APPEND    ANS,MRG00501                 * load id (ST)
          GOTO      LMRG9999
.
LMRG0502  APPEND    ANS,MRG00502                 * load check digit (ST)
          GOTO      LMRG9999
.
LMRG0503  APPEND    ANS,MRG00503                 * load code ident chk dig (ID)
          GOTO      LMRG9999
.
LMRG0504  APPEND    ANS,MRG00504                 * load assigning authority (HD)
          GOTO      LMRG9999
.
LMRG0505  APPEND    ANS,MRG00505                 * load ident. type code (IS)
          GOTO      LMRG9999
.
LMRG0506  APPEND    ANS,MRG00506                 * load assigning facility (HD)
          GOTO      LMRG9999
.
.         MRG.6 Prior Alternate Visit ID (CX)
.
LMRG0600  BRANCH    COMPCNT,LMRG0601:            * id (ST)
                            LMRG0602:            * check digit (ST)
                            LMRG0603:            * code ident. chk dig, sch (ID)
                            LMRG0604:            * assigning authority (HD)
                            LMRG0605:            * identifier type code (IS)
                            LMRG0606             * assigning facility (HD)
          GOTO      LMRG9999
.
LMRG0601  APPEND    ANS,MRG00601                 * load id (ST)
          GOTO      LMRG9999
.
LMRG0602  APPEND    ANS,MRG00602                 * load check digit (ST)
          GOTO      LMRG9999
.
LMRG0603  APPEND    ANS,MRG00603                 * load code ident chk dig (ID)
          GOTO      LMRG9999
.
LMRG0604  APPEND    ANS,MRG00604                 * load assigning authority (HD)
          GOTO      LMRG9999
.
LMRG0605  APPEND    ANS,MRG00605                 * load ident. type code (IS)
          GOTO      LMRG9999
.
LMRG0606  APPEND    ANS,MRG00606                 * load assigning facility (HD)
          GOTO      LMRG9999
.
.         MRG.7 Prior Patient Name (XPN)
.
LMRG0700  BRANCH    COMPCNT,LMRG0701:            * family name (ST)
                            LMRG0702:            * given name (ST)
                            LMRG0703:            * middle name (ST)
                            LMRG0704:            * suffix (ST)
                            LMRG0705:            * prefix (ST)
                            LMRG0706:            * degree (IS)
                            LMRG0707:            * name type code (ID)
                            LMRG0708             * name representation code (ID)
          GOTO      LMRG9999
.
LMRG0701  APPEND    ANS,MRG00701                 * load family name (ST)
          GOTO      LMRG9999
.
LMRG0702  APPEND    ANS,MRG00702                 * load given name (ST)
          GOTO      LMRG9999
.
LMRG0703  APPEND    ANS,MRG00703                 * load middle name (ST)
          GOTO      LMRG9999
.
LMRG0704  APPEND    ANS,MRG00704                 * load suffix (ST)
          GOTO      LMRG9999
.
LMRG0705  APPEND    ANS,MRG00705                 * load prefix (ST)
          GOTO      LMRG9999
.
LMRG0706  APPEND    ANS,MRG00706                 * load degree (IS)
          GOTO      LMRG9999
.
LMRG0707  APPEND    ANS,MRG00707                 * load name type code (ID)
          GOTO      LMRG9999
.
LMRG0708  APPEND    ANS,MRG00708                 * load name rep. code (ID)
          GOTO      LMRG9999
.
LMRG9999  RETURN
+
.*****************************************************************************
.*                                 LFT10000        Called by: PROC0000       *
.*                          Load the FT1 fields                              *
.*****************************************************************************
.
LFT10000  BRANCH    FIELDNO,LFT10100:            * Set ID
                            LFT10200:            * Transaction ID
                            LFT10300:            * Transaction Batch ID
                            LFT10400:            * Transaction Date
                            LFT10500:            * Transaction Posting Date
                            LFT10600:            * Transaction Type
                            LFT10700:            * Transaction Code
                            LFT10800:            * Transaction Description
                            LFT10900:            * Transaction Description - Alt
                            LFT11000:            * Transaction Quantity
                            LFT11100:            * Transaction Amount - Ext.
                            LFT11200:            * Transaction Amount - Unit
                            LFT11300:            * Department Code
                            LFT11400:            * Insurance Plan ID
                            LFT11500:            * Insurance Amount
                            LFT11600:            * Assigned Patient Location
                            LFT11700:            * Fee Schedule
                            LFT11800:            * Patient Type
                            LFT11900:            * Diagnosis Code
                            LFT12000:            * Performed by Code
                            LFT12100:            * Ordered by Code
                            LFT12200:            * Unit Cost
                            LFT12300:            * Filler Order Number
                            LFT12400:            * Entered by Code
                            LFT12500:            * Procedure Code
                            LFT12600             * Procedure Code Modifier
.
.         Invalid FT1 field received, so ignore it
.
          GOTO      LFT19999
.
.         FT1.1  Set ID (SI)
.
LFT10100  BRANCH    COMPCNT,LFT10101
          GOTO      LFT19999
.
LFT10101  APPEND    ANS,FT100101
          GOTO      LFT19999
.
.         FT1.2  Transaction ID (ST)
.
LFT10200  BRANCH    COMPCNT,LFT10201
          GOTO      LFT19999
.
LFT10201  APPEND    ANS,FT100201
          GOTO      LFT19999
.
.         FT1.3  Transaction Batch ID (ST)
.
LFT10300  BRANCH    COMPCNT,LFT10301
          GOTO      LFT19999
.
LFT10301  APPEND    ANS,FT100301
          GOTO      LFT19999
.
.         FT1.4  Transaction Date (TS)
.
LFT10400  BRANCH    COMPCNT,LFT10401
          GOTO      LFT19999
.
LFT10401  APPEND    ANS,FT100401
          GOTO      LFT19999
.
.         FT1.5  Transaction Posting Date (TS)
.
LFT10500  BRANCH    COMPCNT,LFT10501
          GOTO      LFT19999
.
LFT10501  APPEND    ANS,FT100501
          GOTO      LFT19999
.
.         FT1.6  Transaction Type (IS)
.
LFT10600  BRANCH    COMPCNT,LFT10601
          GOTO      LFT19999
.
LFT10601  APPEND    ANS,FT100601
          GOTO      LFT19999
.                           
.         FT1.7 Transaction Code (CE)
.                           
LFT10700  BRANCH    COMPCNT,LFT10701:            * identifier (ST)
                            LFT10702:            * text (ST)
                            LFT10703:            * name of coding system (ST)
                            LFT10704:            * alternate identifier (ST)
                            LFT10705:            * alternate text (ST)
                            LFT10706             * name of alt. cod. system (ST)
          GOTO      LFT19999
.                           
LFT10701  APPEND    ANS,FT100701                 * load identifier (ST)
          GOTO      LFT19999
.                           
LFT10702  APPEND    ANS,FT100702                 * load text (ST)
          GOTO      LFT19999
.                           
LFT10703  APPEND    ANS,FT100703                 * load name of cod. system (ST)
          GOTO      LFT19999
.                           
LFT10704  APPEND    ANS,FT100704                 * load alt. identifier (ST)
          GOTO      LFT19999
.                           
LFT10705  APPEND    ANS,FT100705                 * load alternate text (ST)
          GOTO      LFT19999
.                           
LFT10706  APPEND    ANS,FT100706                 * load alt. cod. sys. name (ST)
          GOTO      LFT19999
.
.         FT1.8  Transaction Description (ST)
.
LFT10800  BRANCH    COMPCNT,LFT10801
          GOTO      LFT19999
.
LFT10801  APPEND    ANS,FT100801
          GOTO      LFT19999
.
.         FT1.9  Transaction Description - Alternate (ST)
.
LFT10900  BRANCH    COMPCNT,LFT10901
          GOTO      LFT19999
.
LFT10901  APPEND    ANS,FT100901
          GOTO      LFT19999
.
.         FT1.10  Transaction Quantity (NM)
.
LFT11000  BRANCH    COMPCNT,LFT11001
          GOTO      LFT19999
.
LFT11001  APPEND    ANS,FT101001
          GOTO      LFT19999
.
.         FT1.11  Transaction Amount - Extended (CP)
.
LFT11100  BRANCH    COMPCNT,LFT11101:            * price (MO)
                            LFT11102:            * price type (ID)
                            LFT11103:            * from value (NM)
                            LFT11104:            * to value (NM)
                            LFT11105:            * range units (CE)
                            LFT11106             * range type (ID)
          GOTO      LFT19999
.
LFT11101  APPEND    ANS,FT101101                 * load price (MO)
          GOTO      LFT19999
.
LFT11102  APPEND    ANS,FT101102                 * load price type (ID)
          GOTO      LFT19999
.
LFT11103  APPEND    ANS,FT101103                 * load from value (NM)
          GOTO      LFT19999
.
LFT11104  APPEND    ANS,FT101104                 * load to value (NM)
          GOTO      LFT19999
.
LFT11105  APPEND    ANS,FT101105                 * load range units (CE)
          GOTO      LFT19999
.
LFT11106  APPEND    ANS,FT101106                 * load range type (ID)
          GOTO      LFT19999
.
.         FT1.12  Transaction Amount - Unit (CP)
.
LFT11200  BRANCH    COMPCNT,LFT11201:            * price (MO)
                            LFT11202:            * price type (ID)
                            LFT11203:            * from value (NM)
                            LFT11204:            * to value (NM)
                            LFT11205:            * range units (CE)
                            LFT11206             * range type (ID)
          GOTO      LFT19999
.
LFT11201  APPEND    ANS,FT101201                 * load price (MO)
          GOTO      LFT19999
.
LFT11202  APPEND    ANS,FT101202                 * load price type (ID)
          GOTO      LFT19999
.
LFT11203  APPEND    ANS,FT101203                 * load from value (NM)
          GOTO      LFT19999
.
LFT11204  APPEND    ANS,FT101204                 * load to value (NM)
          GOTO      LFT19999
.
LFT11205  APPEND    ANS,FT101205                 * load range units (CE)
          GOTO      LFT19999
.
LFT11206  APPEND    ANS,FT101206                 * load range type (ID)
          GOTO      LFT19999
.                           
.         FT1.13 Department Code (CE)
.                           
LFT11300  BRANCH    COMPCNT,LFT11301:            * identifier (ST)
                            LFT11302:            * text (ST)
                            LFT11303:            * name of coding system (ST)
                            LFT11304:            * alternate identifier (ST)
                            LFT11305:            * alternate text (ST)
                            LFT11306             * name of alt. cod. system (ST)
          GOTO      LFT19999
.                           
LFT11301  APPEND    ANS,FT101301                 * load identifier (ST)
          GOTO      LFT19999
.                           
LFT11302  APPEND    ANS,FT101302                 * load text (ST)
          GOTO      LFT19999
.                           
LFT11303  APPEND    ANS,FT101303                 * load name of cod. system (ST)
          GOTO      LFT19999
.                           
LFT11304  APPEND    ANS,FT101304                 * load alt. identifier (ST)
          GOTO      LFT19999
.                           
LFT11305  APPEND    ANS,FT101305                 * load alternate text (ST)
          GOTO      LFT19999
.                           
LFT11306  APPEND    ANS,FT101306                 * load alt. cod. sys. name (ST)
          GOTO      LFT19999
.                           
.         FT1.14 Insurance Plan ID (CE)
.                           
LFT11400  BRANCH    COMPCNT,LFT11401:            * identifier (ST)
                            LFT11402:            * text (ST)
                            LFT11403:            * name of coding system (ST)
                            LFT11404:            * alternate identifier (ST)
                            LFT11405:            * alternate text (ST)
                            LFT11406             * name of alt. cod. system (ST)
          GOTO      LFT19999
.                           
LFT11401  APPEND    ANS,FT101401                 * load identifier (ST)
          GOTO      LFT19999
.                           
LFT11402  APPEND    ANS,FT101402                 * load text (ST)
          GOTO      LFT19999
.                           
LFT11403  APPEND    ANS,FT101403                 * load name of cod. system (ST)
          GOTO      LFT19999
.                           
LFT11404  APPEND    ANS,FT101404                 * load alt. identifier (ST)
          GOTO      LFT19999
.                           
LFT11405  APPEND    ANS,FT101405                 * load alternate text (ST)
          GOTO      LFT19999
.                           
LFT11406  APPEND    ANS,FT101406                 * load alt. cod. sys. name (ST)
          GOTO      LFT19999
.
.         FT1.15  Insurance Amount (CP)
.
LFT11500  BRANCH    COMPCNT,LFT11501:            * price (MO)
                            LFT11502:            * price type (ID)
                            LFT11503:            * from value (NM)
                            LFT11504:            * to value (NM)
                            LFT11505:            * range units (CE)
                            LFT11506             * range type (ID)
          GOTO      LFT19999
.
LFT11501  APPEND    ANS,FT101501                 * load price (MO)
          GOTO      LFT19999
.
LFT11502  APPEND    ANS,FT101502                 * load price type (ID)
          GOTO      LFT19999
.
LFT11503  APPEND    ANS,FT101503                 * load from value (NM)
          GOTO      LFT19999
.
LFT11504  APPEND    ANS,FT101504                 * load to value (NM)
          GOTO      LFT19999
.
LFT11505  APPEND    ANS,FT101505                 * load range units (CE)
          GOTO      LFT19999
.
LFT11506  APPEND    ANS,FT101506                 * load range type (ID)
          GOTO      LFT19999
.                           
.         FT1.16 Assigned Patient Location (PL)
.                           
LFT11600  BRANCH    COMPCNT,LFT11601:            * point of care (IS)
                            LFT11602:            * room (IS)
                            LFT11603:            * bed (IS)
                            LFT11604:            * facility (HD)
                            LFT11605:            * location status (IS)
                            LFT11606:            * person location type (IS)
                            LFT11607:            * building (IS)
                            LFT11608:            * floor (IS)
                            LFT11609             * location description (ST)
          GOTO      LFT19999
.                           
LFT11601  APPEND    ANS,FT101601                 * load point of care (IS)
          GOTO      LFT19999
.                           
LFT11602  APPEND    ANS,FT101602                 * load room (IS)
          GOTO      LFT19999
.                           
LFT11603  APPEND    ANS,FT101603                 * load bed (IS)
          GOTO      LFT19999
.                           
LFT11604  APPEND    ANS,FT101604                 * load facility (HD)
          GOTO      LFT19999
.                           
LFT11605  APPEND    ANS,FT101605                 * load location status (IS)
          GOTO      LFT19999
.                           
LFT11606  APPEND    ANS,FT101606                 * load person locat. type (IS)
          GOTO      LFT19999
.                           
LFT11607  APPEND    ANS,FT101607                 * load building (IS)
          GOTO      LFT19999
.                           
LFT11608  APPEND    ANS,FT101608                 * load floor (IS)
          GOTO      LFT19999
.                           
LFT11609  APPEND    ANS,FT101609                 * load locat. description (ST)
          GOTO      LFT19999
.         
.         FT1.17  Fee Schedule (IS)
.
LFT11700  BRANCH    COMPCNT,LFT11701
          GOTO      LFT19999
.
LFT11701  APPEND    ANS,FT101701           
          GOTO      LFT19999
.         
.         FT1.18  Patient Type (IS)
.
LFT11800  BRANCH    COMPCNT,LFT11801
          GOTO      LFT19999
.
LFT11801  APPEND    ANS,FT101801           
          GOTO      LFT19999
.                           
.         FT1.19 Diagnosis Code (CE)
.                           
LFT11900  BRANCH    COMPCNT,LFT11901:            * identifier (ST)
                            LFT11902:            * text (ST)
                            LFT11903:            * name of coding system (ST)
                            LFT11904:            * alternate identifier (ST)
                            LFT11905:            * alternate text (ST)
                            LFT11906             * name of alt. cod. system (ST)
          GOTO      LFT19999
.                           
LFT11901  APPEND    ANS,FT101901                 * load identifier (ST)
          GOTO      LFT19999
.                           
LFT11902  APPEND    ANS,FT101902                 * load text (ST)
          GOTO      LFT19999
.                           
LFT11903  APPEND    ANS,FT101903                 * load name of cod. system (ST)
          GOTO      LFT19999
.                           
LFT11904  APPEND    ANS,FT101904                 * load alt. identifier (ST)
          GOTO      LFT19999
.                           
LFT11905  APPEND    ANS,FT101905                 * load alternate text (ST)
          GOTO      LFT19999
.                           
LFT11906  APPEND    ANS,FT101906                 * load alt. cod. sys. name (ST)
          GOTO      LFT19999
.                           
.         FT1.20 Performed By Code (XCN)
.                           
LFT12000  BRANCH    COMPCNT,LFT12001:            * id number (ST)
                            LFT12002:            * family name (ST)
                            LFT12003:            * given name (ST)
                            LFT12004:            * middle name (ST)
                            LFT12005:            * suffix (ST)
                            LFT12006:            * prefix (ST)
                            LFT12007:            * degree (IS)
                            LFT12008:            * source table (IS)
                            LFT12009:            * assigning authority (HD)
                            LFT12010:            * name type code (ID)
                            LFT12011:            * identifier check digit (ST)
                            LFT12012:            * check digit scheme code (ID)
                            LFT12013:            * identifier type code (IS)
                            LFT12014:            * assigning facility (HD)
                            LFT12015             * name representation code (ID)
          GOTO      LFT19999
.                           
LFT12001  APPEND    ANS,FT102001                 * load id number (ST)
          GOTO      LFT19999
.                           
LFT12002  APPEND    ANS,FT102002                 * load family name (ST)
          GOTO      LFT19999
.                           
LFT12003  APPEND    ANS,FT102003                 * load given name (ST)
          GOTO      LFT19999
.                           
LFT12004  APPEND    ANS,FT102004                 * load middle name (ST)
          GOTO      LFT19999
.                           
LFT12005  APPEND    ANS,FT102005                 * load suffix (ST)
          GOTO      LFT19999
.                           
LFT12006  APPEND    ANS,FT102006                 * load prefix (ST)
          GOTO      LFT19999
.                           
LFT12007  APPEND    ANS,FT102007                 * load degree (IS)
          GOTO      LFT19999
.                           
LFT12008  APPEND    ANS,FT102008                 * load source table (IS)
          GOTO      LFT19999
.                           
LFT12009  APPEND    ANS,FT102009                 * load assigning authority (HD)
          GOTO      LFT19999
.                           
LFT12010  APPEND    ANS,FT102010                 * load name type code (ID)
          GOTO      LFT19999
.                           
LFT12011  APPEND    ANS,FT102011                 * load ident. check digit (ST)
          GOTO      LFT19999
.                           
LFT12012  APPEND    ANS,FT102012                 * load chk dig scheme code (ID)
          GOTO      LFT19999
.                           
LFT12013  APPEND    ANS,FT102013                 * load ident. type code (IS)
          GOTO      LFT19999
.                           
LFT12014  APPEND    ANS,FT102014                 * load assigning facility (HD)
          GOTO      LFT19999
.                           
LFT12015  APPEND    ANS,FT102015                 * load name repres. code (ID)
          GOTO      LFT19999
.                           
.         FT1.21 Ordered By Code (XCN)
.                           
LFT12100  BRANCH    COMPCNT,LFT12101:            * id number (ST)
                            LFT12102:            * family name (ST)
                            LFT12103:            * given name (ST)
                            LFT12104:            * middle name (ST)
                            LFT12105:            * suffix (ST)
                            LFT12106:            * prefix (ST)
                            LFT12107:            * degree (IS)
                            LFT12108:            * source table (IS)
                            LFT12109:            * assigning authority (HD)
                            LFT12110:            * name type code (ID)
                            LFT12111:            * identifier check digit (ST)
                            LFT12112:            * check digit scheme code (ID)
                            LFT12113:            * identifier type code (IS)
                            LFT12114:            * assigning facility (HD)
                            LFT12115             * name representation code (ID)
          GOTO      LFT19999
.                           
LFT12101  APPEND    ANS,FT102101                 * load id number (ST)
          GOTO      LFT19999
.                           
LFT12102  APPEND    ANS,FT102102                 * load family name (ST)
          GOTO      LFT19999
.                           
LFT12103  APPEND    ANS,FT102103                 * load given name (ST)
          GOTO      LFT19999
.                           
LFT12104  APPEND    ANS,FT102104                 * load middle name (ST)
          GOTO      LFT19999
.                           
LFT12105  APPEND    ANS,FT102105                 * load suffix (ST)
          GOTO      LFT19999
.                           
LFT12106  APPEND    ANS,FT102106                 * load prefix (ST)
          GOTO      LFT19999
.                           
LFT12107  APPEND    ANS,FT102107                 * load degree (IS)
          GOTO      LFT19999
.                           
LFT12108  APPEND    ANS,FT102108                 * load source table (IS)
          GOTO      LFT19999
.                           
LFT12109  APPEND    ANS,FT102109                 * load assigning authority (HD)
          GOTO      LFT19999
.                           
LFT12110  APPEND    ANS,FT102110                 * load name type code (ID)
          GOTO      LFT19999
.                           
LFT12111  APPEND    ANS,FT102111                 * load ident. check digit (ST)
          GOTO      LFT19999
.                           
LFT12112  APPEND    ANS,FT102112                 * load chk dig scheme code (ID)
          GOTO      LFT19999
.                           
LFT12113  APPEND    ANS,FT102113                 * load ident. type code (IS)
          GOTO      LFT19999
.                           
LFT12114  APPEND    ANS,FT102114                 * load assigning facility (HD)
          GOTO      LFT19999
.                           
LFT12115  APPEND    ANS,FT102115                 * load name repres. code (ID)
          GOTO      LFT19999
.
.         FT1.22  Unit Cost (CP)
.
LFT12200  BRANCH    COMPCNT,LFT12201:            * price (MO)
                            LFT12202:            * price type (ID)
                            LFT12203:            * from value (NM)
                            LFT12204:            * to value (NM)
                            LFT12205:            * range units (CE)
                            LFT12206             * range type (ID)
          GOTO      LFT19999
.
LFT12201  APPEND    ANS,FT102201                 * load price (MO)
          GOTO      LFT19999
.
LFT12202  APPEND    ANS,FT102202                 * load price type (ID)
          GOTO      LFT19999
.
LFT12203  APPEND    ANS,FT102203                 * load from value (NM)
          GOTO      LFT19999
.
LFT12204  APPEND    ANS,FT102204                 * load to value (NM)
          GOTO      LFT19999
.
LFT12205  APPEND    ANS,FT102205                 * load range units (CE)
          GOTO      LFT19999
.
LFT12206  APPEND    ANS,FT102206                 * load range type (ID)
          GOTO      LFT19999
.
.         FT1.23  Filler Order Number (EI)
.
LFT12300  BRANCH    COMPCNT,LFT12301:            * entity identifier (ST)
                            LFT12302:            * namespace id (IS)
                            LFT12303:            * universal id (ST)
                            LFT12304             * universal id type (ID)
          GOTO      LFT19999
.
LFT12301  APPEND    ANS,FT102301                 * load entity identifier (ST)
          GOTO      LFT19999
.
LFT12302  APPEND    ANS,FT102302                 * load namespace id (IS)
          GOTO      LFT19999
.
LFT12303  APPEND    ANS,FT102303                 * load universal id (ST)
          GOTO      LFT19999
.
LFT12304  APPEND    ANS,FT102304                 * load universal id type (ID)
          GOTO      LFT19999
.                           
.         FT1.24 Entered By Code (XCN)
.                           
LFT12400  BRANCH    COMPCNT,LFT12401:            * id number (ST)
                            LFT12402:            * family name (ST)
                            LFT12403:            * given name (ST)
                            LFT12404:            * middle name (ST)
                            LFT12405:            * suffix (ST)
                            LFT12406:            * prefix (ST)
                            LFT12407:            * degree (IS)
                            LFT12408:            * source table (IS)
                            LFT12409:            * assigning authority (HD)
                            LFT12410:            * name type code (ID)
                            LFT12411:            * identifier check digit (ST)
                            LFT12412:            * check digit scheme code (ID)
                            LFT12413:            * identifier type code (IS)
                            LFT12414:            * assigning facility (HD)
                            LFT12415             * name representation code (ID)
          GOTO      LFT19999
.                           
LFT12401  APPEND    ANS,FT102401                 * load id number (ST)
          GOTO      LFT19999
.                           
LFT12402  APPEND    ANS,FT102402                 * load family name (ST)
          GOTO      LFT19999
.                           
LFT12403  APPEND    ANS,FT102403                 * load given name (ST)
          GOTO      LFT19999
.                           
LFT12404  APPEND    ANS,FT102404                 * load middle name (ST)
          GOTO      LFT19999
.                           
LFT12405  APPEND    ANS,FT102405                 * load suffix (ST)
          GOTO      LFT19999
.                           
LFT12406  APPEND    ANS,FT102406                 * load prefix (ST)
          GOTO      LFT19999
.                           
LFT12407  APPEND    ANS,FT102407                 * load degree (IS)
          GOTO      LFT19999
.                           
LFT12408  APPEND    ANS,FT102408                 * load source table (IS)
          GOTO      LFT19999
.                           
LFT12409  APPEND    ANS,FT102409                 * load assigning authority (HD)
          GOTO      LFT19999
.                           
LFT12410  APPEND    ANS,FT102410                 * load name type code (ID)
          GOTO      LFT19999
.                           
LFT12411  APPEND    ANS,FT102411                 * load ident. check digit (ST)
          GOTO      LFT19999
.                           
LFT12412  APPEND    ANS,FT102412                 * load chk dig scheme code (ID)
          GOTO      LFT19999
.                           
LFT12413  APPEND    ANS,FT102413                 * load ident. type code (IS)
          GOTO      LFT19999
.                           
LFT12414  APPEND    ANS,FT102414                 * load assigning facility (HD)
          GOTO      LFT19999
.                           
LFT12415  APPEND    ANS,FT102415                 * load name repres. code (ID)
          GOTO      LFT19999
.                           
.         FT1.25 Procedure Code (CE)
.                           
LFT12500  BRANCH    COMPCNT,LFT12501:            * identifier (ST)
                            LFT12502:            * text (ST)
                            LFT12503:            * name of coding system (ST)
                            LFT12504:            * alternate identifier (ST)
                            LFT12505:            * alternate text (ST)
                            LFT12506             * name of alt. cod. system (ST)
          GOTO      LFT19999
.                           
LFT12501  APPEND    ANS,FT102501                 * load identifier (ST)
          GOTO      LFT19999
.                           
LFT12502  APPEND    ANS,FT102502                 * load text (ST)
          GOTO      LFT19999
.                           
LFT12503  APPEND    ANS,FT102503                 * load name of cod. system (ST)
          GOTO      LFT19999
.                           
LFT12504  APPEND    ANS,FT102504                 * load alt. identifier (ST)
          GOTO      LFT19999
.                           
LFT12505  APPEND    ANS,FT102505                 * load alternate text (ST)
          GOTO      LFT19999
.                           
LFT12506  APPEND    ANS,FT102506                 * load alt. cod. sys. name (ST)
          GOTO      LFT19999
.                           
.         FT1.26 Procedure Code Modifier(CE)
.                           
LFT12600  BRANCH    COMPCNT,LFT12601:            * identifier (ST)
                            LFT12602:            * text (ST)
                            LFT12603:            * name of coding system (ST)
                            LFT12604:            * alternate identifier (ST)
                            LFT12605:            * alternate text (ST)
                            LFT12606             * name of alt. cod. system (ST)
          GOTO      LFT19999
.                           
LFT12601  APPEND    ANS,FT102601                 * load identifier (ST)
          GOTO      LFT19999
.                           
LFT12602  APPEND    ANS,FT102602                 * load text (ST)
          GOTO      LFT19999
.                           
LFT12603  APPEND    ANS,FT102603                 * load name of cod. system (ST)
          GOTO      LFT19999
.                           
LFT12604  APPEND    ANS,FT102604                 * load alt. identifier (ST)
          GOTO      LFT19999
.                           
LFT12605  APPEND    ANS,FT102605                 * load alternate text (ST)
          GOTO      LFT19999
.                           
LFT12606  APPEND    ANS,FT102606                 * load alt. cod. sys. name (ST)
          GOTO      LFT19999
.
LFT19999  RETURN
+
.*****************************************************************************
.*                                 LZFT0000        Called by: PROC0000       *
.*                          Load the ZFT fields                              *
.*****************************************************************************
.
LZFT0000  BRANCH    FIELDNO,LZFT0100:            * Procedure Start Time
                            LZFT0200:            * Procedure End Time
                            LZFT0300:            * Transaction End Date
                            LZFT0400:            * Reporting Proc Start Time
                            LZFT0500:            * Reporting Proc End Time
                            LZFT0600             * AHPRA Identifier
.
.         Invalid ZFT field received, so ignore it
.
          GOTO      LZFT9999
.
.         ZFT.1  Procedure Start Time (TM)
.
LZFT0100  BRANCH    COMPCNT,LZFT0101
.
LZFT0101  APPEND    ANS,ZFT00101
          GOTO      LZFT9999
.
.         ZFT.2  Procedure End Time (TM)
.
LZFT0200  BRANCH    COMPCNT,LZFT0201
.
LZFT0201  APPEND    ANS,ZFT00201
          GOTO      LZFT9999
.
.         ZFT.3  Transaction End Date (DT)
.
LZFT0300  BRANCH    COMPCNT,LZFT0301
.
LZFT0301  APPEND    ANS,ZFT00301
          GOTO      LZFT9999
.
.         ZFT.4  Reporting Procedure Start Time (TM)
.
LZFT0400  BRANCH    COMPCNT,LZFT0401
.
LZFT0401  APPEND    ANS,ZFT00401
          GOTO      LZFT9999
.
.         ZFT.5  Reporting Procedure End Time (TM)
.
LZFT0500  BRANCH    COMPCNT,LZFT0501
.
LZFT0501  APPEND    ANS,ZFT00501
          GOTO      LZFT9999
.
.         ZFT.6  AHPRA Identifier (ST)
.
LZFT0600  BRANCH    COMPCNT,LZFT0601
.
LZFT0601  APPEND    ANS,ZFT00601
          GOTO      LZFT9999
.
LZFT9999  RETURN
+
.*****************************************************************************
.*                                 LNTE0000        Called by: PROC0000       *
.*                          Load the NTE fields                              *
.*****************************************************************************
.
LNTE0000  BRANCH    FIELDNO,LNTE0100:            * Set ID (SI)
                            LNTE0200:            * Comment Source (ID)
                            LNTE0300:            * Comment (FT)
                            LNTE0400             * Comment Type (CE)
.
.         Invalid NTE field received, so ignore it
.
          GOTO      LNTE9999
.
.         NTE.1  Set ID (SI)
.
LNTE0100  BRANCH    COMPCNT,LNTE0101
          GOTO      LNTE9999
.
LNTE0101  APPEND    ANS,NTE00101                 * Set ID (SI)
          GOTO      LNTE9999
.
.         NTE.2  Comment Source (ID)
.
LNTE0200  BRANCH    COMPCNT,LNTE0201
.
LNTE0201  APPEND    ANS,NTE00201                 * Comment Source (ID)
          GOTO      LNTE9999
.
.         NTE.3  Comment (FT)
.
LNTE0300  BRANCH    COMPCNT,LNTE0301
.
LNTE0301  APPEND    ANS,NTE00301
          GOTO      LNTE9999
.
.         NTE.4  Comment Type (CE)
.
LNTE0400  BRANCH    COMPCNT,LNTE0401:            * identifier (ST)
                            LNTE0402:            * text (ST)
                            LNTE0403:            * name of coding system (ST)
                            LNTE0404:            * alternate identifier (ST)
                            LNTE0405:            * alternate text (ST)
                            LNTE0406             * name of alt. cod. system (ST)
          GOTO      LNTE9999
.
LNTE0401  APPEND    ANS,NTE00401                 * identifier (ST)
          GOTO      LNTE9999
.
LNTE0402  APPEND    ANS,NTE00402                 * text (ST)
          GOTO      LNTE9999
.
LNTE0403  APPEND    ANS,NTE00403                 * name of coding system (ST)
          GOTO      LNTE9999
.
LNTE0404  APPEND    ANS,NTE00404                 * alternate identifier (ST)
          GOTO      LNTE9999
.
LNTE0405  APPEND    ANS,NTE00405                 * alternate text (ST)
          GOTO      LNTE9999
.
LNTE0406  APPEND    ANS,NTE00406                 * name of alt. cod. system (ST)
          GOTO      LNTE9999
.
LNTE9999  RETURN
+
.*****************************************************************************
.*                                 LARQ0000        Called by: PROC0000       *
.*                          Load the ARQ fields                              *
.*****************************************************************************
LARQ0000
LARQ9999  RETURN
+
.*****************************************************************************
.*                                 LGT10000        Called by: PROC0000       *
.*                          Load the GT1 fields                              *
.*****************************************************************************
.
LGT10000  BRANCH    FIELDNO,LGT10100:            * Set ID (SI)
                            LGT19999:            * Not used
                            LGT10300:            * Guarantor Name (XPN)
                            LGT19999:            * Not used
                            LGT10500:            * Guarantor Address (XAD)
                            LGT10600:            * Guarantor Home Phone (XTN)
                            LGT10700:            * Guarantor Work Phone (XTN)
                            LGT19999:            * Not used
                            LGT19999:            * Not used
                            LGT19999:            * Not used
                            LGT11100             * Guarantor Relationship (CE)
.
.         Invalid GT1 field received, so ignore it
.
          GOTO      LGT19999
.
.         GT1.1  Set ID (SI)
.
LGT10100  BRANCH    COMPCNT,LGT10101
          GOTO      LGT19999
.
LGT10101  APPEND    ANS,GT100101                 * Set ID (SI)
          GOTO      LGT19999
.
.         GT1.3  Guarantor Name (XPN)
.
LGT10300  BRANCH    COMPCNT,LGT10301:            * family name (ST)
                            LGT10302:            * given name (ST)
                            LGT10303:            * middle name (ST)
                            LGT10304:            * suffix (ST)
                            LGT10305:            * prefix (ST)
                            LGT10306:            * degree (IS)
                            LGT10307:            * name type code (ID)
                            LGT10308             * name representation code (ID)
          GOTO      LGT19999
.
LGT10301  APPEND    ANS,GT100301                 * load family name (ST)
          GOTO      LGT19999
.
LGT10302  APPEND    ANS,GT100302                 * load given name (ST)
          GOTO      LGT19999
.
LGT10303  APPEND    ANS,GT100303                 * load middle name (ST)
          GOTO      LGT19999
.
LGT10304  APPEND    ANS,GT100304                 * load suffix (ST)
          GOTO      LGT19999
.
LGT10305  APPEND    ANS,GT100305                 * load prefix (ST)
          GOTO      LGT19999
.
LGT10306  APPEND    ANS,GT100306                 * load degree (IS)
          GOTO      LGT19999
.
LGT10307  APPEND    ANS,GT100307                 * load name type code (ID)
          GOTO      LGT19999
.
LGT10308  APPEND    ANS,GT100308                 * load name rep. code (ID)
          GOTO      LGT19999
.
.         GT1.5  Guarantor Address (XAD)
.
LGT10500  BRANCH    COMPCNT,LGT10501:            * street address (ST)
                            LGT10502:            * other designation (ST)
                            LGT10503:            * city (ST)
                            LGT10504:            * state (ST)
                            LGT10505:            * postcode (ST)
                            LGT10506:            * country (ID)
                            LGT10507:            * address type (ID)
                            LGT10508:            * other geographic desig. (ST)
                            LGT10509:            * county (IS)
                            LGT10510:            * census tract (IS)
                            LGT10511             * address rep. code (ID)
          GOTO      LGT19999
.
LGT10501  APPEND    ANS,GT100501                 * load street address (ST)
          GOTO      LGT19999
.
LGT10502  APPEND    ANS,GT100502                 * load other designation (ST)
          GOTO      LGT19999
.
LGT10503  APPEND    ANS,GT100503                 * load city (ST)
          GOTO      LGT19999
.
LGT10504  APPEND    ANS,GT100504                 * load state (ST)
          GOTO      LGT19999
.
LGT10505  APPEND    ANS,GT100505                 * load postcode (ST)
          GOTO      LGT19999
.
LGT10506  APPEND    ANS,GT100506                 * load country (ID)
          GOTO      LGT19999
.
LGT10507  APPEND    ANS,GT100507                 * load address type (ID)
          GOTO      LGT19999
.
LGT10508  APPEND    ANS,GT100508                 * load other geog. desig. (ST)
          GOTO      LGT19999
.
LGT10509  APPEND    ANS,GT100509                 * load county (IS)
          GOTO      LGT19999
.
LGT10510  APPEND    ANS,GT100510                 * load census tract (IS)
          GOTO      LGT19999
.
LGT10511  APPEND    ANS,GT100511                 * load address rep code (ID)
          GOTO      LGT19999
.
.         GT1.6  Guarantor Home Phone (XTN)
.                 (maximum of 1 repeats - 2 phone numbers in total)
.
LGT10600  COMPARE   REPTNCNT,TWO                 * maximum repeats reached ?
          GOTO      LGT19999 IF LESS             * yes
.
          BRANCH    COMPCNT,LGT10601:            * text
                            LGT10602:            * telecomm. use code (ID)
                            LGT10603:            * telcomm. equipment type (ID)
                            LGT10604:            * email address (ST)
                            LGT10605:            * country code (NM)
                            LGT10606:            * area/city code (NM)
                            LGT10607:            * phone number (NM)
                            LGT10608:            * extension (NM)
                            LGT10609             * any text (ST)
          GOTO      LGT19999
.
LGT10601  APPEND    ANS,GT100601[REPTNCNT]       * load text
          GOTO      LGT19999
.
LGT10602  APPEND    ANS,GT100602[REPTNCNT]       * load telecomm. use code (ID)
          GOTO      LGT19999
.
LGT10603  APPEND    ANS,GT100603[REPTNCNT]       * load telcomm. equip.type (ID)
          GOTO      LGT19999
.
LGT10604  APPEND    ANS,GT100604[REPTNCNT]       * load email address (ST)
          GOTO      LGT19999
.
LGT10605  APPEND    ANS,GT100605[REPTNCNT]       * load country code (NM)
          GOTO      LGT19999
.
LGT10606  APPEND    ANS,GT100606[REPTNCNT]       * load area/city code (NM)
          GOTO      LGT19999
.
LGT10607  APPEND    ANS,GT100607[REPTNCNT]       * load phone number (NM)
          GOTO      LGT19999
.
LGT10608  APPEND    ANS,GT100608[REPTNCNT]       * load extension (NM)
          GOTO      LGT19999
.
LGT10609  APPEND    ANS,GT100609[REPTNCNT]       * load any text (ST)
          GOTO      LGT19999
.
.         GT1.7  Guarantor Work Phone (XTN)
.
LGT10700  BRANCH    COMPCNT,LGT10701:            * text
                            LGT10702:            * telecomm. use code (ID)
                            LGT10703:            * telcomm. equipment type (ID)
                            LGT10704:            * email address (ST)
                            LGT10705:            * country code (NM)
                            LGT10706:            * area/city code (NM)
                            LGT10707:            * phone number (NM)
                            LGT10708:            * extension (NM)
                            LGT10709             * any text (ST)
          GOTO      LGT19999
.
LGT10701  APPEND    ANS,GT100701                 * load text
          GOTO      LGT19999
.
LGT10702  APPEND    ANS,GT100702                 * load telecomm. use code (ID)
          GOTO      LGT19999
.
LGT10703  APPEND    ANS,GT100703                 * load telcomm. equip.type (ID)
          GOTO      LGT19999
.
LGT10704  APPEND    ANS,GT100704                 * load email address (ST)
          GOTO      LGT19999
.
LGT10705  APPEND    ANS,GT100705                 * load country code (NM)
          GOTO      LGT19999
.
LGT10706  APPEND    ANS,GT100706                 * load area/city code (NM)
          GOTO      LGT19999
.
LGT10707  APPEND    ANS,GT100707                 * load phone number (NM)
          GOTO      LGT19999
.
LGT10708  APPEND    ANS,GT100708                 * load extension (NM)
          GOTO      LGT19999
.
LGT10709  APPEND    ANS,GT100709                 * load any text (ST)
          GOTO      LGT19999
.
.         GT1.11 Guarantor Relationship (CE)
.
LGT11100  BRANCH    COMPCNT,LGT11101:            * identifier (ST)
                            LGT11102:            * text (ST)
                            LGT11103:            * name of coding system (ST)
                            LGT11104:            * alternate identifier (ST)
                            LGT11105:            * alternate text (ST)
                            LGT11106             * name of alt. cod. system (ST)
          GOTO      LGT19999
.
LGT11101  APPEND    ANS,GT101101                 * identifier (ST)
          GOTO      LGT19999
.
LGT11102  APPEND    ANS,GT101102                 * text (ST)
          GOTO      LGT19999
.
LGT11103  APPEND    ANS,GT101103                 * name of coding system (ST)
          GOTO      LGT19999
.
LGT11104  APPEND    ANS,GT101104                 * alternate identifier (ST)
          GOTO      LGT19999
.
LGT11105  APPEND    ANS,GT101105                 * alternate text (ST)
          GOTO      LGT19999
.
LGT11106  APPEND    ANS,GT101106                 * name of alt. cod. system (ST)
          GOTO      LGT19999
.
LGT19999  RETURN
+
.*****************************************************************************
.*                                 LIN10000        Called by: PROC0000       *
.*                          Load the IN1 fields                              *
.*****************************************************************************
.
LIN10000  BRANCH    FIELDNO,LIN10100:            * Set ID (SI)
                            LIN10200:            * Insurance Plan ID (CE)
                            LIN10300             * Insurance Company ID (CX)
.
          COMPARE   THIRTY6,FIELDNO
          GOTO      LIN13600 IF EQUAL            * Policy Number (ST)
.
.         Invalid IN1 field received, so ignore it
.
          GOTO      LIN19999
.
.         IN1.1  Set ID (SI)
.
LIN10100  BRANCH    COMPCNT,LIN10101
          GOTO      LIN19999
.
LIN10101  APPEND    ANS,IN100101                 * Set ID (SI)
          GOTO      LIN19999
.
.         IN1.2  Insurance Plan ID (CE)
.
LIN10200  BRANCH    COMPCNT,LIN10201:            * identifier (ST)
                            LIN10202:            * text (ST)
                            LIN10203:            * name of coding system (ST)
                            LIN10204:            * alternate identifier (ST)
                            LIN10205:            * alternate text (ST)
                            LIN10206             * name of alt. cod. system (ST)
          GOTO      LIN19999
.
LIN10201  APPEND    ANS,IN100201                 * identifier (ST)
          GOTO      LIN19999
.
LIN10202  APPEND    ANS,IN100202                 * text (ST)
          GOTO      LIN19999
.
LIN10203  APPEND    ANS,IN100203                 * name of coding system (ST)
          GOTO      LIN19999
.
LIN10204  APPEND    ANS,IN100204                 * alternate identifier (ST)
          GOTO      LIN19999
.
LIN10205  APPEND    ANS,IN100205                 * alternate text (ST)
          GOTO      LIN19999
.
LIN10206  APPEND    ANS,IN100206                 * name of alt. cod. system (ST)
          GOTO      LIN19999
.
.         IN1.3  Insurance Company ID (CX)
.
LIN10300  BRANCH    COMPCNT,LIN10301:            * id (ST)
                            LIN10302:            * check digit (ST)
                            LIN10303:            * check digit scheme code (ID)
                            LIN10304:            * assigning authority (HD)
                            LIN10305:            * identifier type code (IS)
                            LIN10306             * assigning facility (HD)
          GOTO      LIN19999
.
LIN10301  APPEND    ANS,IN100301                 * load id (ST)
          GOTO      LIN19999
.
LIN10302  APPEND    ANS,IN100302                 * load check digit (ST)
          GOTO      LIN19999
.
LIN10303  APPEND    ANS,IN100303                 * load chk dig scheme code (ID)
          GOTO      LIN19999
.
LIN10304  APPEND    ANS,IN100304                 * load assigning authority (HD)
          GOTO      LIN19999
.
LIN10305  APPEND    ANS,IN100305                 * load identifier typ code (IS)
          GOTO      LIN19999
.
LIN10306  APPEND    ANS,IN100306                 * load assigning facility (HD)
          GOTO      LIN19999
.
.         IN1.36 Policy Number (ST)
.
LIN13600  BRANCH    COMPCNT,LIN13601
          GOTO      LIN19999
.
LIN13601  APPEND    ANS,IN103601
          GOTO      LIN19999
.
LIN19999  RETURN
+
.*****************************************************************************
.*                                 LAIS0000        Called by: PROC0000       *
.*                          Load the AIS fields                              *
.*****************************************************************************
.
LAIS0000  BRANCH    FIELDNO,LAIS0100:            * Set ID (SI)
                            LAIS0200:            * Segment Action Code (ID)
                            LAIS0300:            * Universal Service ID (CE)
                            LAIS0400:            * Start Date/Time (TS)
                            LAIS0500:            * Start Date/Time Offset (NM)
                            LAIS0600:            * Start D/T Offset Units (CE)
                            LAIS0700:            * Duration (NM)
                            LAIS0800:            * Duration Units (CE)
                            LAIS0900:            * Allow Substitution Code (IS)
                            LAIS1000             * Filler Status Code (CE)
.
.         Invalid AIS field received, so ignore it
.
          GOTO      LAIS9999
.
.         AIS.1  Set ID (SI)
.
LAIS0100  BRANCH    COMPCNT,LAIS0101
          GOTO      LAIS9999
.
LAIS0101  APPEND    ANS,AIS00101                 * Set ID (SI)
          GOTO      LAIS9999
.
.         AIS.2  Segment Action Code (ID)
.
LAIS0200  BRANCH    COMPCNT,LAIS0201
          GOTO      LAIS9999
.
LAIS0201  APPEND    ANS,AIS00201                 * Segment Action Code (ID)
          GOTO      LAIS9999
.
.         AIS.3  Universal Service ID (CE)
.
LAIS0300  BRANCH    COMPCNT,LAIS0301:            * identifier (ST)
                            LAIS0302:            * text (ST)
                            LAIS0303:            * name of coding system (ST)
                            LAIS0304:            * alternate identifier (ST)
                            LAIS0305:            * alternate text (ST)
                            LAIS0306             * name of alt. cod. system (ST)
          GOTO      LAIS9999
.
LAIS0301  APPEND    ANS,AIS00301                 * identifier (ST)
          GOTO      LAIS9999
.
LAIS0302  APPEND    ANS,AIS00302                 * text (ST)
          GOTO      LAIS9999
.
LAIS0303  APPEND    ANS,AIS00303                 * name of coding system (ST)
          GOTO      LAIS9999
.
LAIS0304  APPEND    ANS,AIS00304                 * alternate identifier (ST)
          GOTO      LAIS9999
.
LAIS0305  APPEND    ANS,AIS00305                 * alternate text (ST)
          GOTO      LAIS9999
.
LAIS0306  APPEND    ANS,AIS00306                 * name of alt. cod. system (ST)
          GOTO      LAIS9999
.
.         AIS.4  Start Date/Time (TS)
.
LAIS0400  BRANCH    COMPCNT,LAIS0401
          GOTO      LAIS9999
.
LAIS0401  APPEND    ANS,AIS00401                 * Start Date/Time (TS)
          GOTO      LAIS9999
.
.         AIS.5  Start Date/Time Offset (NM)
.
LAIS0500
          GOTO      LAIS9999
.
.         AIS.6  Start Date/Time Offset Units (CE)
.
LAIS0600
          GOTO      LAIS9999
.
.         AIS.7  Duration (NM)
.
LAIS0700
          GOTO      LAIS9999
.
.         AIS.8  Duration Units (CE)
.
LAIS0800
          GOTO      LAIS9999
.
.         AIS.9  Allow Substitution Code (IS)
.
LAIS0900
          GOTO      LAIS9999
.
.         AIS.10 Filler Status Code (CE)
.
LAIS1000
          GOTO      LAIS9999
.
LAIS9999  RETURN
+
.*****************************************************************************
.*                                 LAIL0000        Called by: PROC0000       *
.*                          Load the AIL fields                              *
.*****************************************************************************
.
LAIL0000  BRANCH    FIELDNO,LAIL0100:            * Set ID (SI)
                            LAIL0200:            * Segment Action Code (ID)
                            LAIL0300:            * Location Resource ID (PL)
                            LAIL0400:            * Location Type-AIL (CE)
                            LAIL0500:            * Location Group (CE)
                            LAIL0600:            * Start Date/Time (TS)
                            LAIL0700:            * Start Date/Time Offset (NM)
                            LAIL0800:            * Start D/T Offset Units (CE)
                            LAIL0900:            * Duration (NM)
                            LAIL1000:            * Duration Units (CE)
                            LAIL1100:            * Allow Substitution Code (IS)
                            LAIL1200             * Filler Status Code (CE)
.
.         Invalid AIL field received, so ignore it
.
          GOTO      LAIL9999
.
.         AIL.1  Set ID (SI)
.
LAIL0100  BRANCH    COMPCNT,LAIL0101
          GOTO      LAIL9999
.
LAIL0101  APPEND    ANS,AIL00101                 * Set ID (SI)
          GOTO      LAIL9999
.
.         AIL.2  Segment Action Code (ID)
.
LAIL0200  BRANCH    COMPCNT,LAIL0201
          GOTO      LAIL9999
.
LAIL0201  APPEND    ANS,AIL00201                 * Segment Action Code (ID)
          GOTO      LAIL9999
.
.         AIL.3  Location Resource ID (PL)
.
LAIL0300  BRANCH    COMPCNT,LAIL0301:            * point of care (IS)
                            LAIL0302:            * room (IS)
                            LAIL0303:            * bed (IS)
                            LAIL0304:            * facility (HD)
                            LAIL0305:            * location status (IS)
                            LAIL0306:            * person location type (IS)
                            LAIL0307:            * building (IS)
                            LAIL0308:            * floor (IS)
                            LAIL0309             * location description (ST)
          GOTO      LAIL9999
.
LAIL0301  APPEND    ANS,AIL00301                 * load point of care (IS)
          GOTO      LAIL9999
.
LAIL0302  APPEND    ANS,AIL00302                 * load room (IS)
          GOTO      LAIL9999
.
LAIL0303  APPEND    ANS,AIL00303                 * load bed (IS)
          GOTO      LAIL9999
.
LAIL0304  APPEND    ANS,AIL00304                 * load facility (HD)
          GOTO      LAIL9999
.
LAIL0305  APPEND    ANS,AIL00305                 * load location status (IS)
          GOTO      LAIL9999
.
LAIL0306  APPEND    ANS,AIL00306                 * load person loc'n type (IS)
          GOTO      LAIL9999
.
LAIL0307  APPEND    ANS,AIL00307                 * load building (IS)
          GOTO      LAIL9999
.
LAIL0308  APPEND    ANS,AIL00308                 * load floor (IS)
          GOTO      LAIL9999
.
LAIL0309  APPEND    ANS,AIL00309                 * load location desc. (ST)
          GOTO      LAIL9999
.
.         AIL.4  Location Type-AIL (CE)
.
LAIL0400  BRANCH    COMPCNT,LAIL0401:            * identifier (ST)
                            LAIL0402:            * text (ST)
                            LAIL0403:            * name of coding system (ST)
                            LAIL0404:            * alternate identifier (ST)
                            LAIL0405:            * alternate text (ST)
                            LAIL0406             * name of alt. cod. system (ST)
          GOTO      LAIL9999
.
LAIL0401  APPEND    ANS,AIL00401                 * identifier (ST)
          GOTO      LAIL9999
.
LAIL0402  APPEND    ANS,AIL00402                 * text (ST)
          GOTO      LAIL9999
.
LAIL0403  APPEND    ANS,AIL00403                 * name of coding system (ST)
          GOTO      LAIL9999
.
LAIL0404  APPEND    ANS,AIL00404                 * alternate identifier (ST)
          GOTO      LAIL9999
.
LAIL0405  APPEND    ANS,AIL00405                 * alternate text (ST)
          GOTO      LAIL9999
.
LAIL0406  APPEND    ANS,AIL00406                 * name of alt. cod. system (ST)
          GOTO      LAIL9999
.
.         AIL.5  Location Group (CE)
.
LAIL0500  BRANCH    COMPCNT,LAIL0501:            * identifier (ST)
                            LAIL0502:            * text (ST)
                            LAIL0503:            * name of coding system (ST)
                            LAIL0504:            * alternate identifier (ST)
                            LAIL0505:            * alternate text (ST)
                            LAIL0506             * name of alt. cod. system (ST)
          GOTO      LAIL9999
.
LAIL0501  APPEND    ANS,AIL00501                 * identifier (ST)
          GOTO      LAIL9999
.
LAIL0502  APPEND    ANS,AIL00502                 * text (ST)
          GOTO      LAIL9999
.
LAIL0503  APPEND    ANS,AIL00503                 * name of coding system (ST)
          GOTO      LAIL9999
.
LAIL0504  APPEND    ANS,AIL00504                 * alternate identifier (ST)
          GOTO      LAIL9999
.
LAIL0505  APPEND    ANS,AIL00505                 * alternate text (ST)
          GOTO      LAIL9999
.
LAIL0506  APPEND    ANS,AIL00506                 * name of alt. cod. system (ST)
          GOTO      LAIL9999
.
.         AIL.6  Start Date/Time (TS)
.
LAIL0600  BRANCH    COMPCNT,LAIL0601
          GOTO      LAIL9999
.
LAIL0601  APPEND    ANS,AIL00601                 * Start Date/Time (TS)
          GOTO      LAIL9999
.
.         AIL.7  Start Date/Time Offset (NM)
.
LAIL0700
          GOTO      LAIL9999
.
.         AIL.8  Start D/T Offset Units (CE)
.
LAIL0800
          GOTO      LAIL9999
.
.         AIL.9  Duration (NM)
.
LAIL0900  BRANCH    COMPCNT,LAIL0901
          GOTO      LAIL9999
.
LAIL0901  APPEND    ANS,AIL00901                 * Duration (NM)
          GOTO      LAIL9999
.
.         AIL.10 Duration Units (CE)
.
LAIL1000  BRANCH    COMPCNT,LAIL1001:            * identifier (ST)
                            LAIL1002:            * text (ST)
                            LAIL1003:            * name of coding system (ST)
                            LAIL1004:            * alternate identifier (ST)
                            LAIL1005:            * alternate text (ST)
                            LAIL1006             * name of alt. cod. system (ST)
          GOTO      LAIL9999
.
LAIL1001  APPEND    ANS,AIL01001                 * identifier (ST)
          GOTO      LAIL9999
.
LAIL1002  APPEND    ANS,AIL01002                 * text (ST)
          GOTO      LAIL9999
.
LAIL1003  APPEND    ANS,AIL01003                 * name of coding system (ST)
          GOTO      LAIL9999
.
LAIL1004  APPEND    ANS,AIL01004                 * alternate identifier (ST)
          GOTO      LAIL9999
.
LAIL1005  APPEND    ANS,AIL01005                 * alternate text (ST)
          GOTO      LAIL9999
.
LAIL1006  APPEND    ANS,AIL01006                 * name of alt. cod. system (ST)
          GOTO      LAIL9999
.
.         AIL.11 Allow Substitution Code (IS)
.
LAIL1100
          GOTO      LAIL9999
.
.         AIL.12 Filler Status Code (CE)
.
LAIL1200
          GOTO      LAIL9999
.
LAIL9999  RETURN
+
.*****************************************************************************
.*                                 LAIP0000        Called by: PROC0000       *
.*                          Load the AIP fields                              *
.*****************************************************************************
.
LAIP0000  BRANCH    FIELDNO,LAIP0100:            * Set ID (SI)
                            LAIP0200:            * Segment Action code (ID)
                            LAIP0300:            * Personnel Resource ID (XCN)
                            LAIP0400:            * Resource Role (CE)
                            LAIP0500:            * Resource Group (CE)
                            LAIP0600:            * Start Date/Time (TS)
                            LAIP0700:            * Start Date/Time Offset (NM)
                            LAIP0800:            * Start D/T Offset Units (CE)
                            LAIP0900:            * Duration (NM)
                            LAIP1000:            * Duration Units (CE)
                            LAIP1100:            * Allow Substitution Code (IS)
                            LAIP1200             * Filler Status Code (CE)
.
.         Invalid AIP field received, so ignore it
.
          GOTO      LAIP9999
.
.         AIP.1  Set ID (SI)
.
LAIP0100  BRANCH    COMPCNT,LAIP0101
          GOTO      LAIP9999
.
LAIP0101  APPEND    ANS,AIP00101                 * Set ID (SI)
          GOTO      LAIP9999
.
.         AIP.2  Segment Action code (ID)
.
LAIP0200  BRANCH    COMPCNT,LAIP0201
          GOTO      LAIP9999
.
LAIP0201  APPEND    ANS,AIP00201                 * Segment Action Code (ID)
          GOTO      LAIP9999
.
.         AIP.3  Personnel Resource ID (XCN)
.
LAIP0300  BRANCH    COMPCNT,LAIP0301:            * id number (ST)
                            LAIP0302:            * family name (ST)
                            LAIP0303:            * given name (ST)
                            LAIP0304:            * middle name (ST)
                            LAIP0305:            * suffix (ST)
                            LAIP0306:            * prefix (ST)
                            LAIP0307:            * degree (IS)
                            LAIP0308:            * source table (IS)
                            LAIP0309:            * assigning authority (HD)
                            LAIP0310:            * name type code (ID)
                            LAIP0311:            * identifier check digit (ST)
                            LAIP0312:            * check digit scheme code (ID)
                            LAIP0313:            * identifier type code (IS)
                            LAIP0314:            * assigning facility (HD)
                            LAIP0315             * name representation code (ID)
          GOTO      LAIP9999
.
LAIP0301  APPEND    ANS,AIP00301                 * load id number (ST)
          GOTO      LAIP9999
.
LAIP0302  APPEND    ANS,AIP00302                 * load family name (ST)
          GOTO      LAIP9999
.
LAIP0303  APPEND    ANS,AIP00303                 * load given name (ST)
          GOTO      LAIP9999
.
LAIP0304  APPEND    ANS,AIP00304                 * load middle name (ST)
          GOTO      LAIP9999
.
LAIP0305  APPEND    ANS,AIP00305                 * load suffix (ST)
          GOTO      LAIP9999
.
LAIP0306  APPEND    ANS,AIP00306                 * load prefix (ST)
          GOTO      LAIP9999
.
LAIP0307  APPEND    ANS,AIP00307                 * load degree (IS)
          GOTO      LAIP9999
.
LAIP0308  APPEND    ANS,AIP00308                 * load source table (IS)
          GOTO      LAIP9999
.
LAIP0309  APPEND    ANS,AIP00309                 * load assigning authority (HD)
          GOTO      LAIP9999
.
LAIP0310  APPEND    ANS,AIP00310                 * load name type code (ID)
          GOTO      LAIP9999
.
LAIP0311  APPEND    ANS,AIP00311                 * load ident. check digit (ST)
          GOTO      LAIP9999
.
LAIP0312  APPEND    ANS,AIP00312                 * load chk dig scheme code (ID)
          GOTO      LAIP9999
.
LAIP0313  APPEND    ANS,AIP00313                 * load ident. type code (IS)
          GOTO      LAIP9999
.
LAIP0314  APPEND    ANS,AIP00314                 * load assigning facility (HD)
          GOTO      LAIP9999
.
LAIP0315  APPEND    ANS,AIP00315                 * load name repres. code (ID)
          GOTO      LAIP9999
.
.         AIP.4  Resource Role (CE)
.
LAIP0400  BRANCH    COMPCNT,LAIP0401:            * identifier (ST)
                            LAIP0402:            * text (ST)
                            LAIP0403:            * name of coding system (ST)
                            LAIP0404:            * alternate identifier (ST)
                            LAIP0405:            * alternate text (ST)
                            LAIP0406             * name of alt. cod. system (ST)
          GOTO      LAIP9999
.
LAIP0401  APPEND    ANS,AIP00401                 * identifier (ST)
          GOTO      LAIP9999
.
LAIP0402  APPEND    ANS,AIP00402                 * text (ST)
          GOTO      LAIP9999
.
LAIP0403  APPEND    ANS,AIP00403                 * name of coding system (ST)
          GOTO      LAIP9999
.
LAIP0404  APPEND    ANS,AIP00404                 * alternate identifier (ST)
          GOTO      LAIP9999
.
LAIP0405  APPEND    ANS,AIP00405                 * alternate text (ST)
          GOTO      LAIP9999
.
LAIP0406  APPEND    ANS,AIP00406                 * name of alt. cod. system (ST)
          GOTO      LAIP9999
.
.         AIP.5  Resource Group (CE)
.
LAIP0500
          GOTO      LAIP9999
.
.         AIP.6  Start Date/Time (TS)
.
LAIP0600
          GOTO      LAIP9999
.
.         AIP.7  Start Date/Time Offset (NM)
.
LAIP0700
          GOTO      LAIP9999
.
.         AIP.8  Start D/T Offset Units (CE)
.
LAIP0800
          GOTO      LAIP9999
.
.         AIP.9  Duration (NM)
.
LAIP0900
          GOTO      LAIP9999
.
.         AIP.10 Duration Units (CE)
.
LAIP1000
          GOTO      LAIP9999
.
.         AIP.11 Allow Substitution Code (IS)
.
LAIP1100
          GOTO      LAIP9999
.
.         AIP.12 Filler Status Code (CE)
.
LAIP1200
          GOTO      LAIP9999
.
LAIP9999  RETURN
+
.*****************************************************************************
.*                                 LZXP0000        Called by: PROC0000       *
.*                          Load the ZXP fields                              *
.*****************************************************************************
.
LZXP0000  BRANCH    FIELDNO,LZXP0100:            * Pension No. Expiry Date
                            LZXP0200:            * Medicare Expiry Date
                            LZXP0300:            * Death Notification
                            LZXP0400:            * Privacy Indicator
                            LZXP0500:            * DVA Expiry Date
                            LZXP0600:            * Safety Net Expiry Date
                            LZXP0700:            * Local GP
                            LZXP0800:            * Local GP Surgery Address
                            LZXP0900:            * Local GP Provider Number
                            LZXP1000:            * Local GP Email Address
                            LZXP1100:            * Local GP Mobile Phone Number
                            LZXP1200:            * Local GP Home Phone Number
                            LZXP1300:            * Local GP Surgery Fax Number
                            LZXP1400:            * Local GP Surgery Phone Number
                            LZXP1500:            * Local GP Pager Phone Number
                            LZXP1600:            * Local GP Practice
                            LZXP1700:            * Local GP Practice Count
                            LZXP1800:            * Local GP Practice Address
                            LZXP1900:            * Local GP Practice Phone
                            LZXP2000:            * Local GP Practice Fax
                            LZXP2100             * Local GP Practice Email
.
          COMPARE   FIFTY7,FIELDNO
          GOTO      LZXP5700 IF EQUAL            * Chemotherapy Expiry date
.
          COMPARE   FIFTY8,FIELDNO
          GOTO      LZXP5800 IF EQUAL            * PCEHR Flag
.
          COMPARE   FIFTY9,FIELDNO
          GOTO      LZXP5900 IF EQUAL            * Unk./Est. Date of Death Flag
.
          COMPARE   SIXTY,FIELDNO
          GOTO      LZXP6000 IF EQUAL            * NDIS Expiry date
.
          COMPARE   SIXTY1,FIELDNO
          GOTO      LZXP6100 IF EQUAL            * Folder Selection
.
          COMPARE   SIXTY2,FIELDNO
          GOTO      LZXP6200 IF EQUAL            * PMI User Defined Y/N 2
.
          COMPARE   SIXTY3,FIELDNO
          GOTO      LZXP6300 IF EQUAL            * Verified Address Flag
.
          COMPARE   SIXTY4,FIELDNO
          GOTO      LZXP6400 IF EQUAL            * PMI User Defined Field 1
.
          COMPARE   SIXTY5,FIELDNO
          GOTO      LZXP6500 IF EQUAL            * PMI User Defined Field 2
.
          COMPARE   SIXTY6,FIELDNO
          GOTO      LZXP6600 IF EQUAL            * PMI User Defined Field 3
.
          COMPARE   SIXTY7,FIELDNO
          GOTO      LZXP6700 IF EQUAL            * PMI User Defined Field 4
.
          COMPARE   SIXTY8,FIELDNO
          GOTO      LZXP6800 IF EQUAL            * PMI User Defined Field 5
.
          COMPARE   SIXTY9,FIELDNO
          GOTO      LZXP6900 IF EQUAL            * Mutliple Birth Type of Birth
.
          COMPARE   SEVENTY,FIELDNO
          GOTO      LZXP7000 IF EQUAL            * PMI Identifying Gender
.
          COMPARE   SEVENTY1,FIELDNO
          GOTO      LZXP7100 IF EQUAL            * PMI Identifying Pronoun
.
          COMPARE   SEVENTY2,FIELDNO
          GOTO      LZXP7200 IF EQUAL            * PMI Ancestry / Ethnicity 1
.
          COMPARE   SEVENTY3,FIELDNO
          GOTO      LZXP7300 IF EQUAL            * PMI Ancestry / Ethnicity 2
.
          COMPARE   SEVENTY4,FIELDNO
          GOTO      LZXP7400 IF EQUAL            * Main Lang Spoken at Home 1
.
          COMPARE   SEVENTY5,FIELDNO
          GOTO      LZXP7500 IF EQUAL            * Main Lang Spoken at Home 2
.
          COMPARE   SEVENTY6,FIELDNO
          GOTO      LZXP7600 IF EQUAL            * Email Validation Flag
.
.         Invalid ZXP field received, so ignore it
.
          GOTO      LZXP9999
.
.         ZXP.1  Pension No. Expiry Date (DT)
.
LZXP0100  BRANCH    COMPCNT,LZXP0101
          GOTO      LZXP9999
.
LZXP0101  APPEND    ANS,ZXP00101
          GOTO      LZXP9999
.
.         ZXP.2  Medicare Expiry Date (DT)
.
LZXP0200  BRANCH    COMPCNT,LZXP0201
          GOTO      LZXP9999
.
LZXP0201  APPEND    ANS,ZXP00201
          GOTO      LZXP9999
.
.         ZXP.3 Death Notification (CE)
.
LZXP0300  BRANCH    COMPCNT,LZXP0301:            * identifier (ST)
                            LZXP0302:            * text (ST)
                            LZXP0303             * name of coding system (ST)
          GOTO      LZXP9999
.
LZXP0301  APPEND    ANS,ZXP00301                 * load identifier (ST)
          GOTO      LZXP9999
.
LZXP0302  APPEND    ANS,ZXP00302                 * load text (ST)
          GOTO      LZXP9999
.
LZXP0303  APPEND    ANS,ZXP00303                 * load name of cod. system (ST)
          GOTO      LZXP9999
.
.         ZXP.4 Privacy Indicator (CE)
.
LZXP0400  BRANCH    COMPCNT,LZXP0401:            * identifier (ST)
                            LZXP0402:            * text (ST)
                            LZXP0403             * name of coding system (ST)
          GOTO      LZXP9999
.
LZXP0401  APPEND    ANS,ZXP00401                 * load identifier (ST)
          GOTO      LZXP9999
.
LZXP0402  APPEND    ANS,ZXP00402                 * load text (ST)
          GOTO      LZXP9999
.
LZXP0403  APPEND    ANS,ZXP00403                 * load name of cod. system (ST)
          GOTO      LZXP9999
.
.         ZXP.5  DVA Card Expiry Date (DT)
.
LZXP0500  BRANCH    COMPCNT,LZXP0501
          GOTO      LZXP9999
.
LZXP0501  APPEND    ANS,ZXP00501
          GOTO      LZXP9999
.
.         ZXP.6  Safety Net Expiry Date (DT)
.
LZXP0600  BRANCH    COMPCNT,LZXP0601
          GOTO      LZXP9999
.
LZXP0601  APPEND    ANS,ZXP00601
          GOTO      LZXP9999
.                           
.         ZXP.7 Local GP (XCN)
.                           
LZXP0700  BRANCH    COMPCNT,LZXP0701:            * id number (ST)
                            LZXP0702:            * family name (ST)
                            LZXP0703:            * given name (ST)
                            LZXP0704:            * middle name (ST)
                            LZXP0705:            * suffix (ST)
                            LZXP0706:            * prefix (ST)
                            LZXP0707:            * degree (IS)
                            LZXP0708:            * source table (IS)
                            LZXP0709:            * assigning authority (HD)
                            LZXP0710:            * name type code (ID)
                            LZXP0711:            * identifier check digit (ST)
                            LZXP0712:            * check digit scheme code (ID)
                            LZXP0713:            * identifier type code (IS)
                            LZXP0714:            * assigning facility (HD)
                            LZXP0715             * name representation code (ID)
          GOTO      LZXP9999
.                           
LZXP0701  APPEND    ANS,ZXP00701                 * load id number (ST)
          GOTO      LZXP9999
.                           
LZXP0702  APPEND    ANS,ZXP00702                 * load family name (ST)
          GOTO      LZXP9999
.                           
LZXP0703  APPEND    ANS,ZXP00703                 * load given name (ST)
          GOTO      LZXP9999
.                           
LZXP0704  APPEND    ANS,ZXP00704                 * load middle name (ST)
          GOTO      LZXP9999
.                           
LZXP0705  APPEND    ANS,ZXP00705                 * load suffix (ST)
          GOTO      LZXP9999
.                           
LZXP0706  APPEND    ANS,ZXP00706                 * load prefix (ST)
          GOTO      LZXP9999
.                           
LZXP0707  APPEND    ANS,ZXP00707                 * load degree (IS)
          GOTO      LZXP9999
.                           
LZXP0708  APPEND    ANS,ZXP00708                 * load source table (IS)
          GOTO      LZXP9999
.                           
LZXP0709  APPEND    ANS,ZXP00709                 * load assigning authority (HD)
          GOTO      LZXP9999
.                           
LZXP0710  APPEND    ANS,ZXP00710                 * load name type code (ID)
          GOTO      LZXP9999
.                           
LZXP0711  APPEND    ANS,ZXP00711                 * load ident. check digit (ST)
          GOTO      LZXP9999
.                           
LZXP0712  APPEND    ANS,ZXP00712                 * load chk dig scheme code (ID)
          GOTO      LZXP9999
.                           
LZXP0713  APPEND    ANS,ZXP00713                 * load ident. type code (IS)
          GOTO      LZXP9999
.                           
LZXP0714  APPEND    ANS,ZXP00714                 * load assigning facility (HD)
          GOTO      LZXP9999
.                           
LZXP0715  APPEND    ANS,ZXP00715                 * load name repres. code (ID)
          GOTO      LZXP9999
.
.         NK1.8 Local GP Surgery Address (XAD)
.
LZXP0800  BRANCH    COMPCNT,LZXP0801:            * street address (ST)
                            LZXP0802:            * other designation (ST)
                            LZXP0803:            * city (ST)
                            LZXP0804:            * state (ST)
                            LZXP0805:            * postcode (ST)
                            LZXP0806:            * country (ID)
                            LZXP0807:            * address type (ID)
                            LZXP0808:            * other geographic desig. (ST)
                            LZXP0809:            * county (IS)
                            LZXP0810:            * census tract (IS)
                            LZXP0811             * address rep. code (ID)
          GOTO      LZXP9999
.
LZXP0801  APPEND    ANS,ZXP00801                 * load street address (ST)
          GOTO      LZXP9999
.
LZXP0802  APPEND    ANS,ZXP00802                 * load other designation (ST)
          GOTO      LZXP9999
.
LZXP0803  APPEND    ANS,ZXP00803                 * load city (ST)
          GOTO      LZXP9999
.
LZXP0804  APPEND    ANS,ZXP00804                 * load state (ST)
          GOTO      LZXP9999
.
LZXP0805  APPEND    ANS,ZXP00805                 * load postcode (ST)
          GOTO      LZXP9999
.
LZXP0806  APPEND    ANS,ZXP00806                 * load country (ID)
          GOTO      LZXP9999
.
LZXP0807  APPEND    ANS,ZXP00807                 * load address type (ID)
          GOTO      LZXP9999
.
LZXP0808  APPEND    ANS,ZXP00808                 * load other geog. desig. (ST)
          GOTO      LZXP9999
.
LZXP0809  APPEND    ANS,ZXP00809                 * load county (IS)
          GOTO      LZXP9999
.
LZXP0810  APPEND    ANS,ZXP00810                 * load census tract (IS)
          GOTO      LZXP9999
.
LZXP0811  APPEND    ANS,ZXP00811                 * load address rep code (ID)
          GOTO      LZXP9999
.
.         ZXP.9  Local GP Provider Number (ST)
.
LZXP0900  BRANCH    COMPCNT,LZXP0901
          GOTO      LZXP9999
.
LZXP0901  APPEND    ANS,ZXP00901
          GOTO      LZXP9999
.
.         ZXP.10  Local GP Email Address (ST)
.
LZXP1000  BRANCH    COMPCNT,LZXP1001
          GOTO      LZXP9999
.
LZXP1001  APPEND    ANS,ZXP01001
          GOTO      LZXP9999
.
.         ZXP.11  Local GP Mobile Number (ST)
.
LZXP1100  BRANCH    COMPCNT,LZXP1101
          GOTO      LZXP9999
.
LZXP1101  APPEND    ANS,ZXP01101
          GOTO      LZXP9999
.
.         ZXP.12  Local GP Home Phone Number (ST)
.
LZXP1200  BRANCH    COMPCNT,LZXP1201
          GOTO      LZXP9999
.
LZXP1201  APPEND    ANS,ZXP01201
          GOTO      LZXP9999
.
.         ZXP.13  Local GP Surgery Fax Number (ST)
.
LZXP1300  BRANCH    COMPCNT,LZXP1301
          GOTO      LZXP9999
.
LZXP1301  APPEND    ANS,ZXP01301
          GOTO      LZXP9999
.
.         ZXP.14  Local GP Surgery Phone Number (ST)
.
LZXP1400  BRANCH    COMPCNT,LZXP1401
          GOTO      LZXP9999
.
LZXP1401  APPEND    ANS,ZXP01401
          GOTO      LZXP9999
.
.         ZXP.15  Local GP Pager Phone Number (ST)
.
LZXP1500  BRANCH    COMPCNT,LZXP1501
          GOTO      LZXP9999
.
LZXP1501  APPEND    ANS,ZXP01501
          GOTO      LZXP9999
.                           
.         ZXP.16 Practice (CE)
.                           
LZXP1600  BRANCH    COMPCNT,LZXP1601:            * identifier (ST)
                            LZXP1602:            * text (ST)
                            LZXP1603:            * name of coding system (ST)
                            LZXP1604:            * alternate identifier (ST)
                            LZXP1605:            * alternate text (ST)
                            LZXP1606             * name of alt. cod. system (ST)
          GOTO      LZXP9999
.                           
LZXP1601  APPEND    ANS,ZXP01601                 * load identifier (ST)
          GOTO      LZXP9999
.                           
LZXP1602  APPEND    ANS,ZXP01602                 * load text (ST)
          GOTO      LZXP9999
.                           
LZXP1603  APPEND    ANS,ZXP01603                 * load name of cod. system (ST)
          GOTO      LZXP9999
.                           
LZXP1604  APPEND    ANS,ZXP01604                 * load alt. identifier (ST)
          GOTO      LZXP9999
.                           
LZXP1605  APPEND    ANS,ZXP01605                 * load alternate text (ST)
          GOTO      LZXP9999
.                           
LZXP1606  APPEND    ANS,ZXP01606                 * load alt. cod. sys. name (ST)
          GOTO      LZXP9999
.
.         ZXP.17  Local GP Practice Count (NM)
.
LZXP1700  BRANCH    COMPCNT,LZXP1701
          GOTO      LZXP9999
.
LZXP1701  APPEND    ANS,ZXP01701
          GOTO      LZXP9999
.
.         ZXP.18 Local GP Practice Address (XAD)
.
LZXP1800  BRANCH    COMPCNT,LZXP1801:            * street address (ST)
                            LZXP1802:            * other designation (ST)
                            LZXP1803:            * city (ST)
                            LZXP1804:            * state (ST)
                            LZXP1805:            * postcode (ST)
                            LZXP1806:            * country (ID)
                            LZXP1807:            * address type (ID)
                            LZXP1808:            * other geographic desig. (ST)
                            LZXP1809:            * county (IS)
                            LZXP1810:            * census tract (IS)
                            LZXP1811             * address rep. code (ID)
          GOTO      LZXP9999
.
LZXP1801  APPEND    ANS,ZXP01801                 * load street address (ST)
          GOTO      LZXP9999
.
LZXP1802  APPEND    ANS,ZXP01802                 * load other designation (ST)
          GOTO      LZXP9999
.
LZXP1803  APPEND    ANS,ZXP01803                 * load city (ST)
          GOTO      LZXP9999
.
LZXP1804  APPEND    ANS,ZXP01804                 * load state (ST)
          GOTO      LZXP9999
.
LZXP1805  APPEND    ANS,ZXP01805                 * load postcode (ST)
          GOTO      LZXP9999
.
LZXP1806  APPEND    ANS,ZXP01806                 * load country (ID)
          GOTO      LZXP9999
.
LZXP1807  APPEND    ANS,ZXP01807                 * load address type (ID)
          GOTO      LZXP9999
.
LZXP1808  APPEND    ANS,ZXP01808                 * load other geog. desig. (ST)
          GOTO      LZXP9999
.
LZXP1809  APPEND    ANS,ZXP01809                 * load county (IS)
          GOTO      LZXP9999
.
LZXP1810  APPEND    ANS,ZXP01810                 * load census tract (IS)
          GOTO      LZXP9999
.
LZXP1811  APPEND    ANS,ZXP01811                 * load address rep code (ID)
          GOTO      LZXP9999
.
.         ZXP.19  Local GP Practice Phone Number (ST)
.
LZXP1900  BRANCH    COMPCNT,LZXP1901
          GOTO      LZXP9999
.
LZXP1901  APPEND    ANS,ZXP01901
          GOTO      LZXP9999
.
.         ZXP.20  Local GP Practice Fax Number (ST)
.
LZXP2000  BRANCH    COMPCNT,LZXP2001
          GOTO      LZXP9999
.
LZXP2001  APPEND    ANS,ZXP02001
          GOTO      LZXP9999
.
.         ZXP.21  Local GP Practice Email Address (ST)
.
LZXP2100  BRANCH    COMPCNT,LZXP2101
          GOTO      LZXP9999
.
LZXP2101  APPEND    ANS,ZXP02101
          GOTO      LZXP9999
.
.         ZXP.57  Chemotherapy Expiry Date (DT)
.
LZXP5700  BRANCH    COMPCNT,LZXP5701
          GOTO      LZXP9999
.
LZXP5701  APPEND    ANS,ZXP05701
          GOTO      LZXP9999
.
.         ZXP.58  PCEHR Flag
.
LZXP5800  BRANCH    COMPCNT,LZXP5801
          GOTO      LZXP9999
.
LZXP5801  APPEND    ANS,ZXP05801
          GOTO      LZXP9999
.
.         ZXP.59  Unknown/Estimated Date of Death Flag (Y/N)
.
LZXP5900  BRANCH    COMPCNT,LZXP5901
          GOTO      LZXP9999
.
LZXP5901  APPEND    ANS,ZXP05901
          GOTO      LZXP9999
.
.         ZXP.60  NDIS Expiry Date (DT)
.
LZXP6000  BRANCH    COMPCNT,LZXP6001
          GOTO      LZXP9999
.
LZXP6001  APPEND    ANS,ZXP06001
          GOTO      LZXP9999
.
.         ZXP.61  Folder Selection (CE)
.
LZXP6100  BRANCH    COMPCNT,LZXP6101:            * identifier (ST)
                            LZXP6102:            * text (ST)
                            LZXP6103             * name of coding system (ST)
          GOTO      LZXP9999
.
LZXP6101  APPEND    ANS,ZXP06101                 * load identifier (ST)
          GOTO      LZXP9999
.
LZXP6102  APPEND    ANS,ZXP06102                 * load text (ST)
          GOTO      LZXP9999
.
LZXP6103  APPEND    ANS,ZXP06103                 * load name of cod. system (ST)
          GOTO      LZXP9999
.
.         ZXP.62  PMI User Defined YesNo Field 2 (Y/N)
.
LZXP6200  BRANCH    COMPCNT,LZXP6201
          GOTO      LZXP9999
.
LZXP6201  APPEND    ANS,ZXP06201
          GOTO      LZXP9999
.
.         ZXP.63  Verified Address Flag (NM)
.
LZXP6300  BRANCH    COMPCNT,LZXP6301
          GOTO      LZXP9999
.
LZXP6301  APPEND    ANS,ZXP06301
          GOTO      LZXP9999
.
.         ZXP.64  PMI User Defined Field 1 (CE)
.
LZXP6400  BRANCH    COMPCNT,LZXP6401:            * identifier (ST)
                            LZXP6402:            * text (ST)
                            LZXP6403:            * name of coding system (ST)
                            LZXP6404:            * alternate identifier (ST)
                            LZXP6405:            * alternate text (ST)
                            LZXP6406             * name of alt. cod. system (ST)
          GOTO      LZXP9999
.
LZXP6401  APPEND    ANS,ZXP06401                 * identifier (ST)
          GOTO      LZXP9999
.
LZXP6402  APPEND    ANS,ZXP06402                 * text (ST)
          GOTO      LZXP9999
.
LZXP6403  APPEND    ANS,ZXP06403                 * name of coding system (ST)
          GOTO      LZXP9999
.
LZXP6404  APPEND    ANS,ZXP06404                 * alternate identifier (ST)
          GOTO      LZXP9999
.
LZXP6405  APPEND    ANS,ZXP06405                 * alternate text (ST)
          GOTO      LZXP9999
.
LZXP6406  APPEND    ANS,ZXP06406                 * name of alt. cod. system (ST)
          GOTO      LZXP9999
.
.         ZXP.65  PMI User Defined Field 2 (CE)
.
LZXP6500  BRANCH    COMPCNT,LZXP6501:            * identifier (ST)
                            LZXP6502:            * text (ST)
                            LZXP6503:            * name of coding system (ST)
                            LZXP6504:            * alternate identifier (ST)
                            LZXP6505:            * alternate text (ST)
                            LZXP6506             * name of alt. cod. system (ST)
          GOTO      LZXP9999
.
LZXP6501  APPEND    ANS,ZXP06501                 * identifier (ST)
          GOTO      LZXP9999
.
LZXP6502  APPEND    ANS,ZXP06502                 * text (ST)
          GOTO      LZXP9999
.
LZXP6503  APPEND    ANS,ZXP06503                 * name of coding system (ST)
          GOTO      LZXP9999
.
LZXP6504  APPEND    ANS,ZXP06504                 * alternate identifier (ST)
          GOTO      LZXP9999
.
LZXP6505  APPEND    ANS,ZXP06505                 * alternate text (ST)
          GOTO      LZXP9999
.
LZXP6506  APPEND    ANS,ZXP06506                 * name of alt. cod. system (ST)
          GOTO      LZXP9999
.
.         ZXP.66  PMI User Defined Field 3 (CE)
.
LZXP6600  BRANCH    COMPCNT,LZXP6601:            * identifier (ST)
                            LZXP6602:            * text (ST)
                            LZXP6603:            * name of coding system (ST)
                            LZXP6604:            * alternate identifier (ST)
                            LZXP6605:            * alternate text (ST)
                            LZXP6606             * name of alt. cod. system (ST)
          GOTO      LZXP9999
.
LZXP6601  APPEND    ANS,ZXP06601                 * identifier (ST)
          GOTO      LZXP9999
.
LZXP6602  APPEND    ANS,ZXP06602                 * text (ST)
          GOTO      LZXP9999
.
LZXP6603  APPEND    ANS,ZXP06603                 * name of coding system (ST)
          GOTO      LZXP9999
.
LZXP6604  APPEND    ANS,ZXP06604                 * alternate identifier (ST)
          GOTO      LZXP9999
.
LZXP6605  APPEND    ANS,ZXP06605                 * alternate text (ST)
          GOTO      LZXP9999
.
LZXP6606  APPEND    ANS,ZXP06606                 * name of alt. cod. system (ST)
          GOTO      LZXP9999
.
.         ZXP.67  PMI User Defined Field 4 (CE)
.
LZXP6700  BRANCH    COMPCNT,LZXP6701:            * identifier (ST)
                            LZXP6702:            * text (ST)
                            LZXP6703:            * name of coding system (ST)
                            LZXP6704:            * alternate identifier (ST)
                            LZXP6705:            * alternate text (ST)
                            LZXP6706             * name of alt. cod. system (ST)
          GOTO      LZXP9999
.
LZXP6701  APPEND    ANS,ZXP06701                 * identifier (ST)
          GOTO      LZXP9999
.
LZXP6702  APPEND    ANS,ZXP06702                 * text (ST)
          GOTO      LZXP9999
.
LZXP6703  APPEND    ANS,ZXP06703                 * name of coding system (ST)
          GOTO      LZXP9999
.
LZXP6704  APPEND    ANS,ZXP06704                 * alternate identifier (ST)
          GOTO      LZXP9999
.
LZXP6705  APPEND    ANS,ZXP06705                 * alternate text (ST)
          GOTO      LZXP9999
.
LZXP6706  APPEND    ANS,ZXP06706                 * name of alt. cod. system (ST)
          GOTO      LZXP9999
.
.         ZXP.68  PMI User Defined Field 5 (CE)
.
LZXP6800  BRANCH    COMPCNT,LZXP6801:            * identifier (ST)
                            LZXP6802:            * text (ST)
                            LZXP6803:            * name of coding system (ST)
                            LZXP6804:            * alternate identifier (ST)
                            LZXP6805:            * alternate text (ST)
                            LZXP6806             * name of alt. cod. system (ST)
          GOTO      LZXP9999
.
LZXP6801  APPEND    ANS,ZXP06801                 * identifier (ST)
          GOTO      LZXP9999
.
LZXP6802  APPEND    ANS,ZXP06802                 * text (ST)
          GOTO      LZXP9999
.
LZXP6803  APPEND    ANS,ZXP06803                 * name of coding system (ST)
          GOTO      LZXP9999
.
LZXP6804  APPEND    ANS,ZXP06804                 * alternate identifier (ST)
          GOTO      LZXP9999
.
LZXP6805  APPEND    ANS,ZXP06805                 * alternate text (ST)
          GOTO      LZXP9999
.
LZXP6806  APPEND    ANS,ZXP06806                 * name of alt. cod. system (ST)
          GOTO      LZXP9999
.
.         ZXP.69  Mutliple Birth Type of Birth (CE)
.
LZXP6900  BRANCH    COMPCNT,LZXP6901:            * identifier (ST)
                            LZXP6902:            * text (ST)
                            LZXP6903:            * name of coding system (ST)
                            LZXP6904:            * alternate identifier (ST)
                            LZXP6905:            * alternate text (ST)
                            LZXP6906             * name of alt. cod. system (ST)
          GOTO      LZXP9999
.
LZXP6901  APPEND    ANS,ZXP06901                 * identifier (ST)
          GOTO      LZXP9999
.
LZXP6902  APPEND    ANS,ZXP06902                 * text (ST)
          GOTO      LZXP9999
.
LZXP6903  APPEND    ANS,ZXP06903                 * name of coding system (ST)
          GOTO      LZXP9999
.
LZXP6904  APPEND    ANS,ZXP06904                 * alternate identifier (ST)
          GOTO      LZXP9999
.
LZXP6905  APPEND    ANS,ZXP06905                 * alternate text (ST)
          GOTO      LZXP9999
.
LZXP6906  APPEND    ANS,ZXP06906                 * name of alt. cod. system (ST)
          GOTO      LZXP9999
.
.         ZXP.70  PMI Identifying Gender (CE)
.
LZXP7000  BRANCH    COMPCNT,LZXP7001:            * identifier (ST)
                            LZXP7002:            * text (ST)
                            LZXP7003:            * name of coding system (ST)
                            LZXP7004:            * alternate identifier (ST)
                            LZXP7005:            * alternate text (ST)
                            LZXP7006             * name of alt. cod. system (ST)
          GOTO      LZXP9999
.
LZXP7001  APPEND    ANS,ZXP07001                 * identifier (ST)
          GOTO      LZXP9999
.
LZXP7002  APPEND    ANS,ZXP07002                 * text (ST)
          GOTO      LZXP9999
.
LZXP7003  APPEND    ANS,ZXP07003                 * name of coding system (ST)
          GOTO      LZXP9999
.
LZXP7004  APPEND    ANS,ZXP07004                 * alternate identifier (ST)
          GOTO      LZXP9999
.
LZXP7005  APPEND    ANS,ZXP07005                 * alternate text (ST)
          GOTO      LZXP9999
.
LZXP7006  APPEND    ANS,ZXP07006                 * name of alt. cod. system (ST)
          GOTO      LZXP9999
.
.         ZXP.71  PMI Identifying Pronoun (CE)
.
LZXP7100  BRANCH    COMPCNT,LZXP7101:            * identifier (ST)
                            LZXP7102:            * text (ST)
                            LZXP7103:            * name of coding system (ST)
                            LZXP7104:            * alternate identifier (ST)
                            LZXP7105:            * alternate text (ST)
                            LZXP7106             * name of alt. cod. system (ST)
          GOTO      LZXP9999
.
LZXP7101  APPEND    ANS,ZXP07101                 * identifier (ST)
          GOTO      LZXP9999
.
LZXP7102  APPEND    ANS,ZXP07102                 * text (ST)
          GOTO      LZXP9999
.
LZXP7103  APPEND    ANS,ZXP07103                 * name of coding system (ST)
          GOTO      LZXP9999
.
LZXP7104  APPEND    ANS,ZXP07104                 * alternate identifier (ST)
          GOTO      LZXP9999
.
LZXP7105  APPEND    ANS,ZXP07105                 * alternate text (ST)
          GOTO      LZXP9999
.
LZXP7106  APPEND    ANS,ZXP07106                 * name of alt. cod. system (ST)
          GOTO      LZXP9999
.
.         ZXP.72  PMI Ancestry / Ethnicity 1 (CE)
.
LZXP7200  BRANCH    COMPCNT,LZXP7201:            * identifier (ST)
                            LZXP7202:            * text (ST)
                            LZXP7203:            * name of coding system (ST)
                            LZXP7204:            * alternate identifier (ST)
                            LZXP7205:            * alternate text (ST)
                            LZXP7206             * name of alt. cod. system (ST)
          GOTO      LZXP9999
.
LZXP7201  APPEND    ANS,ZXP07201                 * identifier (ST)
          GOTO      LZXP9999
.
LZXP7202  APPEND    ANS,ZXP07202                 * text (ST)
          GOTO      LZXP9999
.
LZXP7203  APPEND    ANS,ZXP07203                 * name of coding system (ST)
          GOTO      LZXP9999
.
LZXP7204  APPEND    ANS,ZXP07204                 * alternate identifier (ST)
          GOTO      LZXP9999
.
LZXP7205  APPEND    ANS,ZXP07205                 * alternate text (ST)
          GOTO      LZXP9999
.
LZXP7206  APPEND    ANS,ZXP07206                 * name of alt. cod. system (ST)
          GOTO      LZXP9999
.
.         ZXP.73  PMI Ancestry / Ethnicity 2 (CE)
.
LZXP7300  BRANCH    COMPCNT,LZXP7301:            * identifier (ST)
                            LZXP7302:            * text (ST)
                            LZXP7303:            * name of coding system (ST)
                            LZXP7304:            * alternate identifier (ST)
                            LZXP7305:            * alternate text (ST)
                            LZXP7306             * name of alt. cod. system (ST)
          GOTO      LZXP9999
.
LZXP7301  APPEND    ANS,ZXP07301                 * identifier (ST)
          GOTO      LZXP9999
.
LZXP7302  APPEND    ANS,ZXP07302                 * text (ST)
          GOTO      LZXP9999
.
LZXP7303  APPEND    ANS,ZXP07303                 * name of coding system (ST)
          GOTO      LZXP9999
.
LZXP7304  APPEND    ANS,ZXP07304                 * alternate identifier (ST)
          GOTO      LZXP9999
.
LZXP7305  APPEND    ANS,ZXP07305                 * alternate text (ST)
          GOTO      LZXP9999
.
LZXP7306  APPEND    ANS,ZXP07306                 * name of alt. cod. system (ST)
          GOTO      LZXP9999
.
.         ZXP.74  PMI Main Language Spoken at Home 1 (CE)
.
LZXP7400  BRANCH    COMPCNT,LZXP7401:            * identifier (ST)
                            LZXP7402:            * text (ST)
                            LZXP7403:            * name of coding system (ST)
                            LZXP7404:            * alternate identifier (ST)
                            LZXP7405:            * alternate text (ST)
                            LZXP7406             * name of alt. cod. system (ST)
          GOTO      LZXP9999
.
LZXP7401  APPEND    ANS,ZXP07401                 * identifier (ST)
          GOTO      LZXP9999
.
LZXP7402  APPEND    ANS,ZXP07402                 * text (ST)
          GOTO      LZXP9999
.
LZXP7403  APPEND    ANS,ZXP07403                 * name of coding system (ST)
          GOTO      LZXP9999
.
LZXP7404  APPEND    ANS,ZXP07404                 * alternate identifier (ST)
          GOTO      LZXP9999
.
LZXP7405  APPEND    ANS,ZXP07405                 * alternate text (ST)
          GOTO      LZXP9999
.
LZXP7406  APPEND    ANS,ZXP07406                 * name of alt. cod. system (ST)
          GOTO      LZXP9999
.
.         ZXP.75  PMI Main Language Spoken at Home 2 (CE)
.
LZXP7500  BRANCH    COMPCNT,LZXP7501:            * identifier (ST)
                            LZXP7502:            * text (ST)
                            LZXP7503:            * name of coding system (ST)
                            LZXP7504:            * alternate identifier (ST)
                            LZXP7505:            * alternate text (ST)
                            LZXP7506             * name of alt. cod. system (ST)
          GOTO      LZXP9999
.
LZXP7501  APPEND    ANS,ZXP07501                 * identifier (ST)
          GOTO      LZXP9999
.
LZXP7502  APPEND    ANS,ZXP07502                 * text (ST)
          GOTO      LZXP9999
.
LZXP7503  APPEND    ANS,ZXP07503                 * name of coding system (ST)
          GOTO      LZXP9999
.
LZXP7504  APPEND    ANS,ZXP07504                 * alternate identifier (ST)
          GOTO      LZXP9999
.
LZXP7505  APPEND    ANS,ZXP07505                 * alternate text (ST)
          GOTO      LZXP9999
.
LZXP7506  APPEND    ANS,ZXP07506                 * name of alt. cod. system (ST)
          GOTO      LZXP9999
.
.         ZXP.76  Email Validation Flag (NM)
.
LZXP7600  BRANCH    COMPCNT,LZXP7601
          GOTO      LZXP9999
.
LZXP7601  APPEND    ANS,ZXP07601
          GOTO      LZXP9999
.
LZXP9999  RETURN
+
.*****************************************************************************
.*                                 LZAL0000        Called by: PROC0000       *
.*                          Load the ZAL fields                              *
.*****************************************************************************
.
LZAL0000  BRANCH    FIELDNO,LZAL0100:            * Set ID
                            LZAL0200:            * Alert Type
                            LZAL0300:            * Alert
                            LZAL0400:            * Reaction
                            LZAL0500:            * Alert Date
                            LZAL0600:            * Severity Level
                            LZAL0700:            * Review Date
                            LZAL0800:            * Date Inactive
                            LZAL0900:            * End Date
                            LZAL1000:            * Authorising HCP
                            LZAL1100:            * Last Update Date/Time
                            LZAL1200:            * User Who Last Updated
                            LZAL1300:            * Hospital
                            LZAL1400:            * Comments
                            LZAL1500             * Third Party Id
.
.         Invalid ZAL field received, so ignore it
.
          GOTO      LZAL9999
.
.         ZAL.1  Set ID (SI)
.
LZAL0100  BRANCH    COMPCNT,LZAL0101
          GOTO      LZAL9999
.
LZAL0101  APPEND    ANS,ZAL00101                 * set id (SI)
          GOTO      LZAL9999
.
.         ZAL.2  Alert Type/Category (CE)
.
LZAL0200  BRANCH    COMPCNT,LZAL0201:            * identifier (ST)
                            LZAL0202:            * text (ST)
                            LZAL0203:            * name of coding system (ST)
                            LZAL0204:            * alternate identifier (ST)
                            LZAL0205:            * alternate text (ST)
                            LZAL0206             * name of alt. cod. system (ST)
          GOTO      LZAL9999
.
LZAL0201  APPEND    ANS,ZAL00201                 * identifier (ST)
          GOTO      LZAL9999
.
LZAL0202  APPEND    ANS,ZAL00202                 * text (ST)
          GOTO      LZAL9999
.
LZAL0203  APPEND    ANS,ZAL00203                 * name of coding system (ST)
          GOTO      LZAL9999
.
LZAL0204  APPEND    ANS,ZAL00204                 * alternate identifier (ST)
          GOTO      LZAL9999
.
LZAL0205  APPEND    ANS,ZAL00205                 * alternate text (ST)
          GOTO      LZAL9999
.
LZAL0206  APPEND    ANS,ZAL00206                 * name of alt. cod. system (ST)
          GOTO      LZAL9999
.
.         ZAL.3  Alert Code (CE)
.
LZAL0300  BRANCH    COMPCNT,LZAL0301:            * identifier (ST)
                            LZAL0302:            * text (ST)
                            LZAL0303:            * name of coding system (ST)
                            LZAL0304:            * alternate identifier (ST)
                            LZAL0305:            * alternate text (ST)
                            LZAL0306             * name of alt. cod. system (ST)
          GOTO      LZAL9999
.
LZAL0301  APPEND    ANS,ZAL00301                 * identifier (ST)
          GOTO      LZAL9999
.
LZAL0302  APPEND    ANS,ZAL00302                 * text (ST)
          GOTO      LZAL9999
.
LZAL0303  APPEND    ANS,ZAL00303                 * name of coding system (ST)
          GOTO      LZAL9999
.
LZAL0304  APPEND    ANS,ZAL00304                 * alternate identifier (ST)
          GOTO      LZAL9999
.
LZAL0305  APPEND    ANS,ZAL00305                 * alternate text (ST)
          GOTO      LZAL9999
.
LZAL0306  APPEND    ANS,ZAL00306                 * name of alt. cod. system (ST)
          GOTO      LZAL9999
.
.         ZAL.4  Reaction Code (CE)
.
LZAL0400  BRANCH    COMPCNT,LZAL0401:            * identifier (ST)
                            LZAL0402:            * text (ST)
                            LZAL0403:            * name of coding system (ST)
                            LZAL0404:            * alternate identifier (ST)
                            LZAL0405:            * alternate text (ST)
                            LZAL0406             * name of alt. cod. system (ST)
          GOTO      LZAL9999
.
LZAL0401  APPEND    ANS,ZAL00401                 * identifier (ST)
          GOTO      LZAL9999
.
LZAL0402  APPEND    ANS,ZAL00402                 * text (ST)
          GOTO      LZAL9999
.
LZAL0403  APPEND    ANS,ZAL00403                 * name of coding system (ST)
          GOTO      LZAL9999
.
LZAL0404  APPEND    ANS,ZAL00404                 * alternate identifier (ST)
          GOTO      LZAL9999
.
LZAL0405  APPEND    ANS,ZAL00405                 * alternate text (ST)
          GOTO      LZAL9999
.
LZAL0406  APPEND    ANS,ZAL00406                 * name of alt. cod. system (ST)
          GOTO      LZAL9999
.
.         ZAL.5  Alert Date (DT)
.
LZAL0500  BRANCH    COMPCNT,LZAL0501
          GOTO      LZAL9999
.
LZAL0501  APPEND    ANS,ZAL00501
          GOTO      LZAL9999
.
.         ZAL.6  Severity Level (NM)
.
LZAL0600  BRANCH    COMPCNT,LZAL0601
          GOTO      LZAL9999
.
LZAL0601  APPEND    ANS,ZAL00601
          GOTO      LZAL9999
.
.         ZAL.7  Review Date (DT)
.
LZAL0700  BRANCH    COMPCNT,LZAL0701
          GOTO      LZAL9999
.
LZAL0701  APPEND    ANS,ZAL00701
          GOTO      LZAL9999
.
.         ZAL.8  Date Inactive (DT)
.
LZAL0800  BRANCH    COMPCNT,LZAL0801
          GOTO      LZAL9999
.
LZAL0801  APPEND    ANS,ZAL00801
          GOTO      LZAL9999
.
.         ZAL.9  End Date (DT)
.
LZAL0900  BRANCH    COMPCNT,LZAL0901
          GOTO      LZAL9999
.
LZAL0901  APPEND    ANS,ZAL00901
          GOTO      LZAL9999
.                           
.         ZAL.10 Authorising HCP (XCN)
.                           
LZAL1000  BRANCH    COMPCNT,LZAL1001:            * id number (ST)
                            LZAL1002:            * family name (ST)
                            LZAL1003:            * given name (ST)
                            LZAL1004:            * middle name (ST)
                            LZAL1005:            * suffix (ST)
                            LZAL1006:            * prefix (ST)
                            LZAL1007:            * degree (IS)
                            LZAL1008:            * source table (IS)
                            LZAL1009:            * assigning authority (HD)
                            LZAL1010:            * name type code (ID)
                            LZAL1011:            * identifier check digit (ST)
                            LZAL1012:            * check digit scheme code (ID)
                            LZAL1013:            * identifier type code (IS)
                            LZAL1014:            * assigning facility (HD)
                            LZAL1015             * name representation code (ID)
          GOTO      LZAL9999
.                           
LZAL1001  APPEND    ANS,ZAL01001                 * load id number (ST)
          GOTO      LZAL9999
.                           
LZAL1002  APPEND    ANS,ZAL01002                 * load family name (ST)
          GOTO      LZAL9999
.                           
LZAL1003  APPEND    ANS,ZAL01003                 * load given name (ST)
          GOTO      LZAL9999
.                           
LZAL1004  APPEND    ANS,ZAL01004                 * load middle name (ST)
          GOTO      LZAL9999
.                           
LZAL1005  APPEND    ANS,ZAL01005                 * load suffix (ST)
          GOTO      LZAL9999
.                           
LZAL1006  APPEND    ANS,ZAL01006                 * load prefix (ST)
          GOTO      LZAL9999
.                           
LZAL1007  APPEND    ANS,ZAL01007                 * load degree (IS)
          GOTO      LZAL9999
.                           
LZAL1008  APPEND    ANS,ZAL01008                 * load source table (IS)
          GOTO      LZAL9999
.                           
LZAL1009  APPEND    ANS,ZAL01009                 * load assigning authority (HD)
          GOTO      LZAL9999
.                           
LZAL1010  APPEND    ANS,ZAL01010                 * load name type code (ID)
          GOTO      LZAL9999
.                           
LZAL1011  APPEND    ANS,ZAL01011                 * load ident. check digit (ST)
          GOTO      LZAL9999
.                           
LZAL1012  APPEND    ANS,ZAL01012                 * load chk dig scheme code (ID)
          GOTO      LZAL9999
.                           
LZAL1013  APPEND    ANS,ZAL01013                 * load ident. type code (IS)
          GOTO      LZAL9999
.                           
LZAL1014  APPEND    ANS,ZAL01014                 * load assigning facility (HD)
          GOTO      LZAL9999
.                           
LZAL1015  APPEND    ANS,ZAL01015                 * load name repres. code (ID)
          GOTO      LZAL9999
.
.         ZAL.11  Last Update Date/Time (TS)
.
LZAL1100  BRANCH    COMPCNT,LZAL1101
          GOTO      LZAL9999
.
LZAL1101  APPEND    ANS,ZAL01101
          GOTO      LZAL9999
.
.         ZAL.12  user Who Last Updated (CE)
.
LZAL1200  BRANCH    COMPCNT,LZAL1201:            * identifier (ST)
                            LZAL1202:            * text (ST)
                            LZAL1203:            * name of coding system (ST)
                            LZAL1204:            * alternate identifier (ST)
                            LZAL1205:            * alternate text (ST)
                            LZAL1206             * name of alt. cod. system (ST)
          GOTO      LZAL9999
.
LZAL1201  APPEND    ANS,ZAL01201                 * identifier (ST)
          GOTO      LZAL9999
.
LZAL1202  APPEND    ANS,ZAL01202                 * text (ST)
          GOTO      LZAL9999
.
LZAL1203  APPEND    ANS,ZAL01203                 * name of coding system (ST)
          GOTO      LZAL9999
.
LZAL1204  APPEND    ANS,ZAL01204                 * alternate identifier (ST)
          GOTO      LZAL9999
.
LZAL1205  APPEND    ANS,ZAL01205                 * alternate text (ST)
          GOTO      LZAL9999
.
LZAL1206  APPEND    ANS,ZAL01206                 * name of alt. cod. system (ST)
          GOTO      LZAL9999
.
.         ZAL.13  Hospital (CE)
.
LZAL1300  BRANCH    COMPCNT,LZAL1301:            * identifier (ST)
                            LZAL1302:            * text (ST)
                            LZAL1303:            * name of coding system (ST)
                            LZAL1304:            * alternate identifier (ST)
                            LZAL1305:            * alternate text (ST)
                            LZAL1306             * name of alt. cod. system (ST)
          GOTO      LZAL9999
.
LZAL1301  APPEND    ANS,ZAL01301                 * identifier (ST)
          GOTO      LZAL9999
.
LZAL1302  APPEND    ANS,ZAL01302                 * text (ST)
          GOTO      LZAL9999
.
LZAL1303  APPEND    ANS,ZAL01303                 * name of coding system (ST)
          GOTO      LZAL9999
.
LZAL1304  APPEND    ANS,ZAL01304                 * alternate identifier (ST)
          GOTO      LZAL9999
.
LZAL1305  APPEND    ANS,ZAL01305                 * alternate text (ST)
          GOTO      LZAL9999
.
LZAL1306  APPEND    ANS,ZAL01306                 * name of alt. cod. system (ST)
          GOTO      LZAL9999
.
.         ZAL.14  Comments (ST)
.
LZAL1400  BRANCH    COMPCNT,LZAL1401
          GOTO      LZAL9999
.
LZAL1401  APPEND    ANS,ZAL01401
          GOTO      LZAL9999
.         
.         ZAL.15 Third Party System Identifier Reason (CE)
.         (maximum of 1 repeat - 2 identifiers in total)
.
LZAL1500  COMPARE   REPTNCNT,TWO                 * maximum repeats reached ?
          GOTO      LZAL9999 IF LESS             * yes
.         
          BRANCH    COMPCNT,LZAL1501:            * identifier (ST)
                            LZAL1502:            * text (ST)
                            LZAL1503:            * name of coding system (ST)
                            LZAL1504:            * alternate identifier (ST)
                            LZAL1505:            * alternate text (ST)
                            LZAL1506             * name of alt. cod. system (ST)
          GOTO      LZAL9999
.         
LZAL1501  APPEND    ANS,ZAL01501[REPTNCNT]       * load identifier (ST)
          GOTO      LZAL9999
.         
LZAL1502  APPEND    ANS,ZAL01502[REPTNCNT]       * load text (ST)
          GOTO      LZAL9999
.
LZAL1503  APPEND    ANS,ZAL01503[REPTNCNT]       * load name of cod. system (ST)
          GOTO      LZAL9999
.
LZAL1504  APPEND    ANS,ZAL01504[REPTNCNT]       * load alt. identifier (ST)
          GOTO      LZAL9999
.
LZAL1505  APPEND    ANS,ZAL01505[REPTNCNT]       * load alternate text (ST)
          GOTO      LZAL9999
.
LZAL1506  APPEND    ANS,ZAL01506[REPTNCNT]       * load alt. cod. sys. name (ST)
          GOTO      LZAL9999
.
LZAL9999  RETURN
+
.*****************************************************************************
.*                                 LZXV0000        Called by: PROC0000       *
.*                          Load the ZXV fields                              *
.*****************************************************************************
.
LZXV0000  BRANCH    FIELDNO,LZXV0100:            * Visitor's Allowed Indicator
                            LZXV9999:            * Employment Status Indicator
                            LZXV9999:            * Non-WA Hospital Contact
                            LZXV9999:            * Waitlist Urgency
                            LZXV9999:            * Mental Health Referral Source
                            LZXV0600:            * Referral Priority
                            LZXV0700:            * Referral Reason
                            LZXV9999:            * Referral Date
                            LZXV0900:            * Referral Recorded Date
                            LZXV9999:            * Appointment Type
                            LZXV9999:            * Mode of Arrival
                            LZXV9999:            * Triage Severity
                            LZXV9999:            * Comments
                            LZXV9999:            * Transfer From Source
                            LZXV1500:            * Source of Referral
                            LZXV9999:            * Care Class
                            LZXV9999:            * Linked O/P Referral Number
                            LZXV9999:            * Mental Health Disch. Status
                            LZXV1900:            * Inform GP Flag
                            LZXV2000:            * Leave Type
                            LZXV2100:            * Leave Start Date/Time
                            LZXV2200:            * Exp. Return leave Date/Time
                            LZXV9999:            * Division
                            LZXV9999:            * Unit
                            LZXV9999:            * Team
                            LZXV9999:            * Claim Type
                            LZXV9999:            * Admission Type
                            LZXV9999:            * Discharge Destination
                            LZXV9999:            * Transfer To Destination
                            LZXV3000:            * Leave Return Date/Time
                            LZXV9999:            * Diet Codes
                            LZXV3200:            * Visit Interpreter Flag
                            LZXV9999:            * Clinic Start Time
                            LZXV3400:            * Type of Referral
                            LZXV3500:            * Preferred Site
                            LZXV3600:            * Date Referral Received
                            LZXV3700:            * Clinic Type
                            LZXV3800:            * Presenting Complaint
                            LZXV3900:            * Diagnosis
                            LZXV4000:            * Referral Department
                            LZXV4100:            * Last Update Date/Time
                            LZXV9999:            * Intended Stay
                            LZXV9999:            * Preferred Accommodation
                            LZXV4400:            * Referral Service
                            LZXV4500:            * Referred by Other
                            LZXV4600:            * Referrer Contact
                            LZXV4700:            * Cancellation Reason
                            LZXV4800:            * Booking Instructions
                            LZXV4900:            * Referring Practice
                            LZXV5000:            * Event Program
                            LZXV5100:            * Occasion of Service
                            LZXV5200:            * Date Referral Accepted
                            LZXV5300:            * Referral In Service Type
                            LZXV5400:            * Referral In Clinical Ref Date
                            LZXV5500:            * Visit Type
                            LZXV5600:            * Triage Status
                            LZXV5700:            * O/P Service Delivery Mode
                            LZXV5800:            * Phone Calls Allowed
                            LZXV5900:            * Ambulance Handover Date/Time
                            LZXV6000:            * Ambulance Case Number
                            LZXV6100:            * Ambul Case Created Date/Time
                            LZXV6200:            * Initial Assessor Code
                            LZXV6300:            * Initial Assessor Date/Time
                            LZXV6400:            * Initial Assessor Reason
                            LZXV6500:            * Treating Doctor Date/Time
                            LZXV6600:            * Treating Nurse Code
                            LZXV6700:            * Treating Nurse Date/Time
                            LZXV6800:            * MH Practitioner Code
                            LZXV6900:            * MH Practitioner Date/Time
                            LZXV7000:            * First Seen By Doctor Code
                            LZXV7100:            * First Seen By Doc Date/Time
                            LZXV7200:            * Decision to Admit Date/Time
                            LZXV7300:            * Readiness to Admit
                            LZXV7400:            * Admitting Doctor Code
                            LZXV7500:            * Admitting Doctor Contacted
                            LZXV7600:            * Escort Source
                            LZXV7700:            * Relative Contacted
                            LZXV7800:            * Relative Contacted Time
                            LZXV7900:            * Risk Assessment
                            LZXV8000:            * Spec/oth hosp contacted Name
                            LZXV8100:            * Spec/other hosp contacted via
                            LZXV8200:            * Ready to Discharge Date/Time
                            LZXV8300:            * Referred to On Departure
                            LZXV8400:            * Reason for Transfer
                            LZXV8500:            * Transport Mode
                            LZXV8600:            * Ambulance Booking Time
                            LZXV8700:            * ED Extended Visit Reason
                            LZXV8800:            * Anaesthetic Type for Billing
                            LZXV8900:            * MyHR Consent value
                            LZXV9000:            * Telehealth Status (Cat OM)
                            LZXV9100:            * Telehealth Receiving Site
                            LZXV9200:            * Telehealth Receiving Code
                            LZXV9300:            * Telehealth Receiving Address
                            LZXV9400:            * Telehealth Waiting Room URL
                            LZXV9500:            * Telehealth Receiving E164
                            LZXV9600:            * Telehealth Notes
                            LZXV9700:            * Appointment Confirmed
                            LZXV9800:            * Referral In Reason
                            LZXV9900:            * Episode Health Condition
                            LZXV1000:            * Usual Accommodation
                            LZXV1010:            * Triage Date
                            LZXV1020:            * Referral-In Receipt Ack Date
                            LZXV1030             * ED Arrival Date/Time
.
.         Invalid ZXV field received, so ignore it
.
          GOTO      LZXV9999
.
.         ZXV.1  Visitors Allowed (ID)
.
LZXV0100  BRANCH    COMPCNT,LZXV0101
          GOTO      LZXV9999
.
LZXV0101  APPEND    ANS,ZXV00101                 * load coded value (ID)
          GOTO      LZXV9999
.
.         ZXV.6  Referral Priority (CE)
.
LZXV0600  BRANCH    COMPCNT,LZXV0601:            * identifier (ST)
                            LZXV0602:            * text (ST)
                            LZXV0603:            * name of coding system (ST)
                            LZXV0604:            * alternate identifier (ST)
                            LZXV0605:            * alternate text (ST)
                            LZXV0606             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV0601  APPEND    ANS,ZXV00601                 * identifier (ST)
          GOTO      LZXV9999
.
LZXV0602  APPEND    ANS,ZXV00602                 * text (ST)
          GOTO      LZXV9999
.
LZXV0603  APPEND    ANS,ZXV00603                 * name of coding system (ST)
          GOTO      LZXV9999
.
LZXV0604  APPEND    ANS,ZXV00604                 * alternate identifier (ST)
          GOTO      LZXV9999
.
LZXV0605  APPEND    ANS,ZXV00605                 * alternate text (ST)
          GOTO      LZXV9999
.
LZXV0606  APPEND    ANS,ZXV00606                 * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
.         ZXV.7  Referral Reason (CE)
.
LZXV0700  BRANCH    COMPCNT,LZXV0701:            * identifier (ST)
                            LZXV0702:            * text (ST)
                            LZXV0703:            * name of coding system (ST)
                            LZXV0704:            * alternate identifier (ST)
                            LZXV0705:            * alternate text (ST)
                            LZXV0706             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV0701  APPEND    ANS,ZXV00701                 * identifier (ST)
          GOTO      LZXV9999
.
LZXV0702  APPEND    ANS,ZXV00702                 * text (ST)
          GOTO      LZXV9999
.
LZXV0703  APPEND    ANS,ZXV00703                 * name of coding system (ST)
          GOTO      LZXV9999
.
LZXV0704  APPEND    ANS,ZXV00704                 * alternate identifier (ST)
          GOTO      LZXV9999
.
LZXV0705  APPEND    ANS,ZXV00705                 * alternate text (ST)
          GOTO      LZXV9999
.
LZXV0706  APPEND    ANS,ZXV00706                 * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
.         ZXV.9  Referral Recorded Date (TS)
.
LZXV0900  BRANCH    COMPCNT,LZXV0901
.
LZXV0901  APPEND    ANS,ZXV00901
          GOTO      LZXV9999
.
.         ZXV.15  Source of Referral (CE)
.
LZXV1500  BRANCH    COMPCNT,LZXV1501:            * identifier (ST)
                            LZXV1502:            * text (ST)
                            LZXV1503:            * name of coding system (ST)
                            LZXV1504:            * alternate identifier (ST)
                            LZXV1505:            * alternate text (ST)
                            LZXV1506             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV1501  APPEND    ANS,ZXV01501                 * identifier (ST)
          GOTO      LZXV9999
.
LZXV1502  APPEND    ANS,ZXV01502                 * text (ST)
          GOTO      LZXV9999
.
LZXV1503  APPEND    ANS,ZXV01503                 * name of coding system (ST)
          GOTO      LZXV9999
.
LZXV1504  APPEND    ANS,ZXV01504                 * alternate identifier (ST)
          GOTO      LZXV9999
.
LZXV1505  APPEND    ANS,ZXV01505                 * alternate text (ST)
          GOTO      LZXV9999
.
LZXV1506  APPEND    ANS,ZXV01506                 * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
.         ZXV.19  Inform GP Flag (ST)
.
LZXV1900  BRANCH    COMPCNT,LZXV1901
.
LZXV1901  APPEND    ANS,ZXV01901
          GOTO      LZXV9999
.
.         ZXV.20  Leave Type (CE)
.
LZXV2000  BRANCH    COMPCNT,LZXV2001:            * identifier (ST)
                            LZXV2002:            * text (ST)
                            LZXV2003:            * name of coding system (ST)
                            LZXV2004:            * alternate identifier (ST)
                            LZXV2005:            * alternate text (ST)
                            LZXV2006             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV2001  APPEND    ANS,ZXV02001                 * identifier (ST)
          GOTO      LZXV9999
.
LZXV2002  APPEND    ANS,ZXV02002                 * text (ST)
          GOTO      LZXV9999
.
LZXV2003  APPEND    ANS,ZXV02003                 * name of coding system (ST)
          GOTO      LZXV9999
.
LZXV2004  APPEND    ANS,ZXV02004                 * alternate identifier (ST)
          GOTO      LZXV9999
.
LZXV2005  APPEND    ANS,ZXV02005                 * alternate text (ST)
          GOTO      LZXV9999
.
LZXV2006  APPEND    ANS,ZXV02006                 * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
.         ZXV.21  On Leave Date/Time (TS)
.
LZXV2100  BRANCH    COMPCNT,LZXV2101
.
LZXV2101  APPEND    ANS,ZXV02101
          GOTO      LZXV9999
.
.         ZXV.22  Expected Return Date/Time (TS)
.
LZXV2200  BRANCH    COMPCNT,LZXV2201
.
LZXV2201  APPEND    ANS,ZXV02201
          GOTO      LZXV9999
.
.         ZXV.30  Return Date/Time (TS)
.
LZXV3000  BRANCH    COMPCNT,LZXV3001
.
LZXV3001  APPEND    ANS,ZXV03001
          GOTO      LZXV9999
.
.         ZXV.32  Visit Interpreter Flag (ST)
.
LZXV3200  BRANCH    COMPCNT,LZXV3201
.
LZXV3201  APPEND    ANS,ZXV03201
          GOTO      LZXV9999
.
.         ZXV.34  Type of Referral (CE)
.
LZXV3400  BRANCH    COMPCNT,LZXV3401:            * identifier (ST)
                            LZXV3402:            * text (ST)
                            LZXV3403:            * name of coding system (ST)
                            LZXV3404:            * alternate identifier (ST)
                            LZXV3405:            * alternate text (ST)
                            LZXV3406             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV3401  APPEND    ANS,ZXV03401                 * identifier (ST)
          GOTO      LZXV9999
.
LZXV3402  APPEND    ANS,ZXV03402                 * text (ST)
          GOTO      LZXV9999
.
LZXV3403  APPEND    ANS,ZXV03403                 * name of coding system (ST)
          GOTO      LZXV9999
.
LZXV3404  APPEND    ANS,ZXV03404                 * alternate identifier (ST)
          GOTO      LZXV9999
.
LZXV3405  APPEND    ANS,ZXV03405                 * alternate text (ST)
          GOTO      LZXV9999
.
LZXV3406  APPEND    ANS,ZXV03406                 * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
.         ZXV.35  Preferred Site (CE)
.
LZXV3500  BRANCH    COMPCNT,LZXV3501:            * identifier (ST)
                            LZXV3502:            * text (ST)
                            LZXV3503:            * name of coding system (ST)
                            LZXV3504:            * alternate identifier (ST)
                            LZXV3505:            * alternate text (ST)
                            LZXV3506             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV3501  APPEND    ANS,ZXV03501                 * identifier (ST)
          GOTO      LZXV9999
.
LZXV3502  APPEND    ANS,ZXV03502                 * text (ST)
          GOTO      LZXV9999
.
LZXV3503  APPEND    ANS,ZXV03503                 * name of coding system (ST)
          GOTO      LZXV9999
.
LZXV3504  APPEND    ANS,ZXV03504                 * alternate identifier (ST)
          GOTO      LZXV9999
.
LZXV3505  APPEND    ANS,ZXV03505                 * alternate text (ST)
          GOTO      LZXV9999
.
LZXV3506  APPEND    ANS,ZXV03506                 * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
.         ZXV.36  Date Referral Received (DT)
.
LZXV3600  BRANCH    COMPCNT,LZXV3601
.
LZXV3601  APPEND    ANS,ZXV03601
          GOTO      LZXV9999
.
.         ZXV.37  Clinic Type (CE)
.
LZXV3700  BRANCH    COMPCNT,LZXV3701:            * identifier (ST)
                            LZXV3702:            * text (ST)
                            LZXV3703:            * name of coding system (ST)
                            LZXV3704:            * alternate identifier (ST)
                            LZXV3705:            * alternate text (ST)
                            LZXV3706             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV3701  APPEND    ANS,ZXV03701                 * identifier (ST)
          GOTO      LZXV9999
.
LZXV3702  APPEND    ANS,ZXV03702                 * text (ST)
          GOTO      LZXV9999
.
LZXV3703  APPEND    ANS,ZXV03703                 * name of coding system (ST)
          GOTO      LZXV9999
.
LZXV3704  APPEND    ANS,ZXV03704                 * alternate identifier (ST)
          GOTO      LZXV9999
.
LZXV3705  APPEND    ANS,ZXV03705                 * alternate text (ST)
          GOTO      LZXV9999
.
LZXV3706  APPEND    ANS,ZXV03706                 * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
.         ZXV.38  Presenting Complaint (ST)
.
LZXV3800  BRANCH    COMPCNT,LZXV3801
.
LZXV3801  APPEND    ANS,ZXV03801
          GOTO      LZXV9999
.
.         ZXV.39  Diagnosis (CE) (maximum of 2 repeats - 3 diagnoses in total)
.
LZXV3900  COMPARE   REPTNCNT,THREE               * maximum repeats reached ?
          GOTO      LZXV9999 IF LESS             * yes
.
          BRANCH    COMPCNT,LZXV3901:            * identifier (ST)
                            LZXV3902:            * text (ST)
                            LZXV3903:            * name of coding system (ST)
                            LZXV3904:            * alternate identifier (ST)
                            LZXV3905:            * alternate text (ST)
                            LZXV3906             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV3901  APPEND    ANS,ZXV03901[REPTNCNT]       * identifier (ST)
          GOTO      LZXV9999
.
LZXV3902  APPEND    ANS,ZXV03902[REPTNCNT]       * text (ST)
          GOTO      LZXV9999
.
LZXV3903  APPEND    ANS,ZXV03903[REPTNCNT]       * name of coding system (ST)
          GOTO      LZXV9999
.
LZXV3904  APPEND    ANS,ZXV03904[REPTNCNT]       * alternate identifier (ST)
          GOTO      LZXV9999
.
LZXV3905  APPEND    ANS,ZXV03905[REPTNCNT]       * alternate text (ST)
          GOTO      LZXV9999
.
LZXV3906  APPEND    ANS,ZXV03906[REPTNCNT]       * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
.         ZXV.40  Referral Department (CE)
.
LZXV4000  BRANCH    COMPCNT,LZXV4001:            * identifier (ST)
                            LZXV4002:            * text (ST)
                            LZXV4003:            * name of coding system (ST)
                            LZXV4004:            * alternate identifier (ST)
                            LZXV4005:            * alternate text (ST)
                            LZXV4006             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV4001  APPEND    ANS,ZXV04001                 * identifier (ST)
          GOTO      LZXV9999
.
LZXV4002  APPEND    ANS,ZXV04002                 * text (ST)
          GOTO      LZXV9999
.
LZXV4003  APPEND    ANS,ZXV04003                 * name of coding system (ST)
          GOTO      LZXV9999
.
LZXV4004  APPEND    ANS,ZXV04004                 * alternate identifier (ST)
          GOTO      LZXV9999
.
LZXV4005  APPEND    ANS,ZXV04005                 * alternate text (ST)
          GOTO      LZXV9999
.
LZXV4006  APPEND    ANS,ZXV04006                 * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
.         ZXV.41  Last Update Date/Time (TS)
.
LZXV4100  BRANCH    COMPCNT,LZXV4101
.
LZXV4101  APPEND    ANS,ZXV04101
          GOTO      LZXV9999
.
.         ZXV.42  Intended Stay
.
LZXV4200  BRANCH    COMPCNT,LZXV4201:            * identifier (ST)
                            LZXV4202:            * text (ST)
                            LZXV4203:            * name of coding system (ST)
                            LZXV4204:            * alternate identifier (ST)
                            LZXV4205:            * alternate text (ST)
                            LZXV4206             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV4201  APPEND    ANS,ZXV04201                 * identifier (ST)
          GOTO      LZXV9999
.
LZXV4202  APPEND    ANS,ZXV04202                 * text (ST)
          GOTO      LZXV9999
.
LZXV4203  APPEND    ANS,ZXV04203                 * name of coding system (ST)
          GOTO      LZXV9999
.
LZXV4204  APPEND    ANS,ZXV04204                 * alternate identifier (ST)
          GOTO      LZXV9999
.
LZXV4205  APPEND    ANS,ZXV04205                 * alternate text (ST)
          GOTO      LZXV9999
.
LZXV4206  APPEND    ANS,ZXV04206                 * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
.         ZXV.43  Preferred Accommodation
.
LZXV4300  BRANCH    COMPCNT,LZXV4301:            * identifier (ST)
                            LZXV4302:            * text (ST)
                            LZXV4303:            * name of coding system (ST)
                            LZXV4304:            * alternate identifier (ST)
                            LZXV4305:            * alternate text (ST)
                            LZXV4306             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV4301  APPEND    ANS,ZXV04301                 * identifier (ST)
          GOTO      LZXV9999
.
LZXV4302  APPEND    ANS,ZXV04302                 * text (ST)
          GOTO      LZXV9999
.
LZXV4303  APPEND    ANS,ZXV04303                 * name of coding system (ST)
          GOTO      LZXV9999
.
LZXV4304  APPEND    ANS,ZXV04304                 * alternate identifier (ST)
          GOTO      LZXV9999
.
LZXV4305  APPEND    ANS,ZXV04305                 * alternate text (ST)
          GOTO      LZXV9999
.
LZXV4306  APPEND    ANS,ZXV04306                 * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
.         ZXV.44  Referral Service (ST)
.
LZXV4400  BRANCH    COMPCNT,LZXV4401
.
LZXV4401  APPEND    ANS,ZXV04401
          GOTO      LZXV9999
.
.         ZXV.45  Referred by Other (ST)
.
LZXV4500  BRANCH    COMPCNT,LZXV4501
.
LZXV4501  APPEND    ANS,ZXV04501
          GOTO      LZXV9999
.
.         ZXV.46  Referrer Contact (ST)
.
LZXV4600  BRANCH    COMPCNT,LZXV4601
.
LZXV4601  APPEND    ANS,ZXV04601
          GOTO      LZXV9999
.
.         ZXV.47  Cancellation/Rejection Reason (CE)
.
LZXV4700  BRANCH    COMPCNT,LZXV4701:            * identifier (ST)
                            LZXV4702:            * text (ST)
                            LZXV4703:            * name of coding system (ST)
                            LZXV4704:            * alternate identifier (ST)
                            LZXV4705:            * alternate text (ST)
                            LZXV4706             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV4701  APPEND    ANS,ZXV04701                 * identifier (ST)
          GOTO      LZXV9999
.
LZXV4702  APPEND    ANS,ZXV04702                 * text (ST)
          GOTO      LZXV9999
.
LZXV4703  APPEND    ANS,ZXV04703                 * name of coding system (ST)
          GOTO      LZXV9999
.
LZXV4704  APPEND    ANS,ZXV04704                 * alternate identifier (ST)
          GOTO      LZXV9999
.
LZXV4705  APPEND    ANS,ZXV04705                 * alternate text (ST)
          GOTO      LZXV9999
.
LZXV4706  APPEND    ANS,ZXV04706                 * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
.         ZXV.48  Booking Instructions (ST)
.
LZXV4800  BRANCH    COMPCNT,LZXV4801
.
LZXV4801  APPEND    ANS,ZXV04801
          GOTO      LZXV9999
.
.         ZXV.49  Referring Practice (CE)
.
LZXV4900  BRANCH    COMPCNT,LZXV4901:            * identifier (ST)
                            LZXV4902:            * text (ST)
                            LZXV4903:            * name of coding system (ST)
                            LZXV4904:            * alternate identifier (ST)
                            LZXV4905:            * alternate text (ST)
                            LZXV4906             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV4901  APPEND    ANS,ZXV04901                 * load identifier (ST)
          GOTO      LZXV9999
.
LZXV4902  APPEND    ANS,ZXV04902                 * load text (ST)
          GOTO      LZXV9999
.
LZXV4903  APPEND    ANS,ZXV04903                 * load name of cod. system (ST)
          GOTO      LZXV9999
.
LZXV4904  APPEND    ANS,ZXV04904                 * load alt. identifier (ST)
          GOTO      LZXV9999
.
LZXV4905  APPEND    ANS,ZXV04905                 * load alternate text (ST)
          GOTO      LZXV9999
.
LZXV4906  APPEND    ANS,ZXV04906                 * load alt. cod. sys. name (ST)
          GOTO      LZXV9999
.
.         ZXV.50  Event Program (CE)
.
LZXV5000  BRANCH    COMPCNT,LZXV5001:            * identifier (ST)
                            LZXV5002:            * text (ST)
                            LZXV5003:            * name of coding system (ST)
                            LZXV5004:            * alternate identifier (ST)
                            LZXV5005:            * alternate text (ST)
                            LZXV5006             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV5001  APPEND    ANS,ZXV05001                 * load identifier (ST)
          GOTO      LZXV9999
.
LZXV5002  APPEND    ANS,ZXV05002                 * load text (ST)
          GOTO      LZXV9999
.
LZXV5003  APPEND    ANS,ZXV05003                 * load name of cod. system (ST)
          GOTO      LZXV9999
.
LZXV5004  APPEND    ANS,ZXV05004                 * load alt. identifier (ST)
          GOTO      LZXV9999
.
LZXV5005  APPEND    ANS,ZXV05005                 * load alternate text (ST)
          GOTO      LZXV9999
.
LZXV5006  APPEND    ANS,ZXV05006                 * load alt. cod. sys. name (ST)
          GOTO      LZXV9999
.
.         ZXV.51  Occasion of Service (CE)
.
LZXV5100  BRANCH    COMPCNT,LZXV5101:            * identifier (ST)
                            LZXV5102:            * text (ST)
                            LZXV5103:            * name of coding system (ST)
                            LZXV5104:            * alternate identifier (ST)
                            LZXV5105:            * alternate text (ST)
                            LZXV5106             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV5101  APPEND    ANS,ZXV05101                 * load identifier (ST)
          GOTO      LZXV9999
.
LZXV5102  APPEND    ANS,ZXV05102                 * load text (ST)
          GOTO      LZXV9999
.
LZXV5103  APPEND    ANS,ZXV05103                 * load name of cod. system (ST)
          GOTO      LZXV9999
.
LZXV5104  APPEND    ANS,ZXV05104                 * load alt. identifier (ST)
          GOTO      LZXV9999
.
LZXV5105  APPEND    ANS,ZXV05105                 * load alternate text (ST)
          GOTO      LZXV9999
.
LZXV5106  APPEND    ANS,ZXV05106                 * load alt. cod. sys. name (ST)
          GOTO      LZXV9999
.
.         ZXV.52  Date Referral Accepted (DT)
.
LZXV5200  BRANCH    COMPCNT,LZXV5201
.
LZXV5201  APPEND    ANS,ZXV05201
          GOTO      LZXV9999
.
.         ZXV.54  Referral In Service Type (CE)
.
LZXV5300  BRANCH    COMPCNT,LZXV5301:            * identifier (ST)
                            LZXV5302:            * text (ST)
                            LZXV5303:            * name of coding system (ST)
                            LZXV5304:            * alternate identifier (ST)
                            LZXV5305:            * alternate text (ST)
                            LZXV5306             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV5301  APPEND    ANS,ZXV05301                 * load identifier (ST)
          GOTO      LZXV9999
.
LZXV5302  APPEND    ANS,ZXV05302                 * load text (ST)
          GOTO      LZXV9999
.
LZXV5303  APPEND    ANS,ZXV05303                 * load name of cod. system (ST)
          GOTO      LZXV9999
.
LZXV5304  APPEND    ANS,ZXV05304                 * load alt. identifier (ST)
          GOTO      LZXV9999
.
LZXV5305  APPEND    ANS,ZXV05305                 * load alternate text (ST)
          GOTO      LZXV9999
.
LZXV5306  APPEND    ANS,ZXV05306                 * load alt. cod. sys. name (ST)
          GOTO      LZXV9999
.
.         ZXV.54  Referral In Clinical Referral Date (DT)
.
LZXV5400  BRANCH    COMPCNT,LZXV5401
.
LZXV5401  APPEND    ANS,ZXV05401
          GOTO      LZXV9999
.
.         ZXV.55  Visit Type (CE)
.
LZXV5500  BRANCH    COMPCNT,LZXV5501:            * identifier (ST)
                            LZXV5502:            * text (ST)
                            LZXV5503:            * name of coding system (ST)
                            LZXV5504:            * alternate identifier (ST)
                            LZXV5505:            * alternate text (ST)
                            LZXV5506             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV5501  APPEND    ANS,ZXV05501                 * load identifier (ST)
          GOTO      LZXV9999
.
LZXV5502  APPEND    ANS,ZXV05502                 * load text (ST)
          GOTO      LZXV9999
.
LZXV5503  APPEND    ANS,ZXV05503                 * load name of cod. system (ST)
          GOTO      LZXV9999
.
LZXV5504  APPEND    ANS,ZXV05504                 * load alt. identifier (ST)
          GOTO      LZXV9999
.
LZXV5505  APPEND    ANS,ZXV05505                 * load alternate text (ST)
          GOTO      LZXV9999
.
LZXV5506  APPEND    ANS,ZXV05506                 * load alt. cod. sys. name (ST)
          GOTO      LZXV9999
.
.         ZXV.56  Triage Status (CE)
.
LZXV5600  BRANCH    COMPCNT,LZXV5601:            * identifier (ST)
                            LZXV5602:            * text (ST)
                            LZXV5603:            * name of coding system (ST)
                            LZXV5604:            * alternate identifier (ST)
                            LZXV5605:            * alternate text (ST)
                            LZXV5606             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV5601  APPEND    ANS,ZXV05601                 * load identifier (ST)
          GOTO      LZXV9999
.
LZXV5602  APPEND    ANS,ZXV05602                 * load text (ST)
          GOTO      LZXV9999
.
LZXV5603  APPEND    ANS,ZXV05603                 * load name of cod. system (ST)
          GOTO      LZXV9999
.
LZXV5604  APPEND    ANS,ZXV05604                 * load alt. identifier (ST)
          GOTO      LZXV9999
.
LZXV5605  APPEND    ANS,ZXV05605                 * load alternate text (ST)
          GOTO      LZXV9999
.
LZXV5606  APPEND    ANS,ZXV05606                 * load alt. cod. sys. name (ST)
          GOTO      LZXV9999
.
.         ZXV.57  O/P Service Delivery Mode (CE)
.
LZXV5700  BRANCH    COMPCNT,LZXV5701:            * identifier (ST)
                            LZXV5702:            * text (ST)
                            LZXV5703:            * name of coding system (ST)
                            LZXV5704:            * alternate identifier (ST)
                            LZXV5705:            * alternate text (ST)
                            LZXV5706             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV5701  APPEND    ANS,ZXV05701                 * load identifier (ST)
          GOTO      LZXV9999
.
LZXV5702  APPEND    ANS,ZXV05702                 * load text (ST)
          GOTO      LZXV9999
.
LZXV5703  APPEND    ANS,ZXV05703                 * load name of cod. system (ST)
          GOTO      LZXV9999
.
LZXV5704  APPEND    ANS,ZXV05704                 * load alt. identifier (ST)
          GOTO      LZXV9999
.
LZXV5705  APPEND    ANS,ZXV05705                 * load alternate text (ST)
          GOTO      LZXV9999
.
LZXV5706  APPEND    ANS,ZXV05706                 * load alt. cod. sys. name (ST)
          GOTO      LZXV9999
.
.         ZXV.58  Phone Calls Allowed (ID)
.
LZXV5800  BRANCH    COMPCNT,LZXV5801
          GOTO      LZXV9999
.
LZXV5801  APPEND    ANS,ZXV05801                 * load coded value (ID)
          GOTO      LZXV9999
.
.         ZXV.59  Ambulance Handover Date/Time (TS)
.
LZXV5900  BRANCH    COMPCNT,LZXV5901
.
LZXV5901  APPEND    ANS,ZXV05901
          GOTO      LZXV9999
.
.         ZXV.60  Ambulance Case Number (ST)
.
LZXV6000  BRANCH    COMPCNT,LZXV6001
.
LZXV6001  APPEND    ANS,ZXV06001
          GOTO      LZXV9999
.
.         ZXV.61  Ambulance Case Created Date/Time (TS)
.
LZXV6100  BRANCH    COMPCNT,LZXV6101
.
LZXV6101  APPEND    ANS,ZXV06101
          GOTO      LZXV9999
.
.         ZXV.62  Initial Assessor Code (XCN)
.
LZXV6200  BRANCH    COMPCNT,LZXV6201:            * id number (ST)
                            LZXV6202:            * family name (ST)
                            LZXV6203:            * given name (ST)
                            LZXV6204:            * middle name (ST)
                            LZXV6205:            * suffix (ST)
                            LZXV6206:            * prefix (ST)
                            LZXV6207:            * degree (IS)
                            LZXV6208:            * source table (IS)
                            LZXV6209:            * assigning authority (HD)
                            LZXV6210:            * name type code (ID)
                            LZXV6211:            * identifier check digit (ST)
                            LZXV6212:            * check digit scheme code (ID)
                            LZXV6213:            * identifier type code (IS)
                            LZXV6214:            * assigning facility (HD)
                            LZXV6215             * name representation code (ID)
          GOTO      LZXV9999
.
LZXV6201  APPEND    ANS,ZXV06201                 * load id number (ST)
          GOTO      LZXV9999
.
LZXV6202  APPEND    ANS,ZXV06202                 * load family name (ST)
          GOTO      LZXV9999
.
LZXV6203  APPEND    ANS,ZXV06203                 * load given name (ST)
          GOTO      LZXV9999
.
LZXV6204  APPEND    ANS,ZXV06204                 * load middle name (ST)
          GOTO      LZXV9999
.
LZXV6205  APPEND    ANS,ZXV06205                 * load suffix (ST)
          GOTO      LZXV9999
.
LZXV6206  APPEND    ANS,ZXV06206                 * load prefix (ST)
          GOTO      LZXV9999
.
LZXV6207  APPEND    ANS,ZXV06207                 * load degree (IS)
          GOTO      LZXV9999
.
LZXV6208  APPEND    ANS,ZXV06208                 * load source table (IS)
          GOTO      LZXV9999
.
LZXV6209  APPEND    ANS,ZXV06209                 * load assigning authority (HD)
          GOTO      LZXV9999
.
LZXV6210  APPEND    ANS,ZXV06210                 * load name type code (ID)
          GOTO      LZXV9999
.
LZXV6211  APPEND    ANS,ZXV06211                 * load ident. check digit (ST)
          GOTO      LZXV9999
.
LZXV6212  APPEND    ANS,ZXV06212                 * load chk dig scheme code (ID)
          GOTO      LZXV9999
.
LZXV6213  APPEND    ANS,ZXV06213                 * load ident. type code (IS)
          GOTO      LZXV9999
.
LZXV6214  APPEND    ANS,ZXV06214                 * load assigning facility (HD)
          GOTO      LZXV9999
.
LZXV6215  APPEND    ANS,ZXV06215                 * load name repres. code (ID)
          GOTO      LZXV9999
.
.         ZXV.63  Initial Assessor Date/Time (TS)
.
LZXV6300  BRANCH    COMPCNT,LZXV6301
.
LZXV6301  APPEND    ANS,ZXV06301
          GOTO      LZXV9999
.
.         ZXV.64  Initial Assessor Reason (CE)
.
LZXV6400  BRANCH    COMPCNT,LZXV6401:            * identifier (ST)
                            LZXV6402:            * text (ST)
                            LZXV6403:            * name of coding system (ST)
                            LZXV6404:            * alternate identifier (ST)
                            LZXV6405:            * alternate text (ST)
                            LZXV6406             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV6401  APPEND    ANS,ZXV06401                 * load identifier (ST)
          GOTO      LZXV9999
.
LZXV6402  APPEND    ANS,ZXV06402                 * load text (ST)
          GOTO      LZXV9999
.
LZXV6403  APPEND    ANS,ZXV06403                 * load name of cod. system (ST)
          GOTO      LZXV9999
.
LZXV6404  APPEND    ANS,ZXV06404                 * load alt. identifier (ST)
          GOTO      LZXV9999
.
LZXV6405  APPEND    ANS,ZXV06405                 * load alternate text (ST)
          GOTO      LZXV9999
.
LZXV6406  APPEND    ANS,ZXV06406                 * load alt. cod. sys. name (ST)
          GOTO      LZXV9999
.
.         ZXV.65  Treating Doctor Date/Time (TS)
.
LZXV6500  BRANCH    COMPCNT,LZXV6501
.
LZXV6501  APPEND    ANS,ZXV06501
          GOTO      LZXV9999
.
.         ZXV.66  Treating Nurse Code (XCN)
.
LZXV6600  BRANCH    COMPCNT,LZXV6601:            * id number (ST)
                            LZXV6602:            * family name (ST)
                            LZXV6603:            * given name (ST)
                            LZXV6604:            * middle name (ST)
                            LZXV6605:            * suffix (ST)
                            LZXV6606:            * prefix (ST)
                            LZXV6607:            * degree (IS)
                            LZXV6608:            * source table (IS)
                            LZXV6609:            * assigning authority (HD)
                            LZXV6610:            * name type code (ID)
                            LZXV6611:            * identifier check digit (ST)
                            LZXV6612:            * check digit scheme code (ID)
                            LZXV6613:            * identifier type code (IS)
                            LZXV6614:            * assigning facility (HD)
                            LZXV6615             * name representation code (ID)
          GOTO      LZXV9999
.
LZXV6601  APPEND    ANS,ZXV06601                 * load id number (ST)
          GOTO      LZXV9999
.
LZXV6602  APPEND    ANS,ZXV06602                 * load family name (ST)
          GOTO      LZXV9999
.
LZXV6603  APPEND    ANS,ZXV06603                 * load given name (ST)
          GOTO      LZXV9999
.
LZXV6604  APPEND    ANS,ZXV06604                 * load middle name (ST)
          GOTO      LZXV9999
.
LZXV6605  APPEND    ANS,ZXV06605                 * load suffix (ST)
          GOTO      LZXV9999
.
LZXV6606  APPEND    ANS,ZXV06606                 * load prefix (ST)
          GOTO      LZXV9999
.
LZXV6607  APPEND    ANS,ZXV06607                 * load degree (IS)
          GOTO      LZXV9999
.
LZXV6608  APPEND    ANS,ZXV06608                 * load source table (IS)
          GOTO      LZXV9999
.
LZXV6609  APPEND    ANS,ZXV06609                 * load assigning authority (HD)
          GOTO      LZXV9999
.
LZXV6610  APPEND    ANS,ZXV06610                 * load name type code (ID)
          GOTO      LZXV9999
.
LZXV6611  APPEND    ANS,ZXV06611                 * load ident. check digit (ST)
          GOTO      LZXV9999
.
LZXV6612  APPEND    ANS,ZXV06612                 * load chk dig scheme code (ID)
          GOTO      LZXV9999
.
LZXV6613  APPEND    ANS,ZXV06613                 * load ident. type code (IS)
          GOTO      LZXV9999
.
LZXV6614  APPEND    ANS,ZXV06614                 * load assigning facility (HD)
          GOTO      LZXV9999
.
LZXV6615  APPEND    ANS,ZXV06615                 * load name repres. code (ID)
          GOTO      LZXV9999
.
.         ZXV.67  Treating Nurse Date/Time (TS)
.
LZXV6700  BRANCH    COMPCNT,LZXV6701
.
LZXV6701  APPEND    ANS,ZXV06701
          GOTO      LZXV9999
.
.         ZXV.68  MH Practitioner Code (XCN)
.
LZXV6800  BRANCH    COMPCNT,LZXV6801:            * id number (ST)
                            LZXV6802:            * family name (ST)
                            LZXV6803:            * given name (ST)
                            LZXV6804:            * middle name (ST)
                            LZXV6805:            * suffix (ST)
                            LZXV6806:            * prefix (ST)
                            LZXV6807:            * degree (IS)
                            LZXV6808:            * source table (IS)
                            LZXV6809:            * assigning authority (HD)
                            LZXV6810:            * name type code (ID)
                            LZXV6811:            * identifier check digit (ST)
                            LZXV6812:            * check digit scheme code (ID)
                            LZXV6813:            * identifier type code (IS)
                            LZXV6814:            * assigning facility (HD)
                            LZXV6815             * name representation code (ID)
          GOTO      LZXV9999
.
LZXV6801  APPEND    ANS,ZXV06801                 * load id number (ST)
          GOTO      LZXV9999
.
LZXV6802  APPEND    ANS,ZXV06802                 * load family name (ST)
          GOTO      LZXV9999
.
LZXV6803  APPEND    ANS,ZXV06803                 * load given name (ST)
          GOTO      LZXV9999
.
LZXV6804  APPEND    ANS,ZXV06804                 * load middle name (ST)
          GOTO      LZXV9999
.
LZXV6805  APPEND    ANS,ZXV06805                 * load suffix (ST)
          GOTO      LZXV9999
.
LZXV6806  APPEND    ANS,ZXV06806                 * load prefix (ST)
          GOTO      LZXV9999
.
LZXV6807  APPEND    ANS,ZXV06807                 * load degree (IS)
          GOTO      LZXV9999
.
LZXV6808  APPEND    ANS,ZXV06808                 * load source table (IS)
          GOTO      LZXV9999
.
LZXV6809  APPEND    ANS,ZXV06809                 * load assigning authority (HD)
          GOTO      LZXV9999
.
LZXV6810  APPEND    ANS,ZXV06810                 * load name type code (ID)
          GOTO      LZXV9999
.
LZXV6811  APPEND    ANS,ZXV06811                 * load ident. check digit (ST)
          GOTO      LZXV9999
.
LZXV6812  APPEND    ANS,ZXV06812                 * load chk dig scheme code (ID)
          GOTO      LZXV9999
.
LZXV6813  APPEND    ANS,ZXV06813                 * load ident. type code (IS)
          GOTO      LZXV9999
.
LZXV6814  APPEND    ANS,ZXV06814                 * load assigning facility (HD)
          GOTO      LZXV9999
.
LZXV6815  APPEND    ANS,ZXV06815                 * load name repres. code (ID)
          GOTO      LZXV9999
.
.         ZXV.69  MH Practitioner Date/Time (TS)
.
LZXV6900  BRANCH    COMPCNT,LZXV6901
.
LZXV6901  APPEND    ANS,ZXV06901
          GOTO      LZXV9999
.
.         ZXV.70  First Seen By Doctor Code (XCN)
.
LZXV7000  BRANCH    COMPCNT,LZXV7001:            * id number (ST)
                            LZXV7002:            * family name (ST)
                            LZXV7003:            * given name (ST)
                            LZXV7004:            * middle name (ST)
                            LZXV7005:            * suffix (ST)
                            LZXV7006:            * prefix (ST)
                            LZXV7007:            * degree (IS)
                            LZXV7008:            * source table (IS)
                            LZXV7009:            * assigning authority (HD)
                            LZXV7010:            * name type code (ID)
                            LZXV7011:            * identifier check digit (ST)
                            LZXV7012:            * check digit scheme code (ID)
                            LZXV7013:            * identifier type code (IS)
                            LZXV7014:            * assigning facility (HD)
                            LZXV7015             * name representation code (ID)
          GOTO      LZXV9999
.
LZXV7001  APPEND    ANS,ZXV07001                 * load id number (ST)
          GOTO      LZXV9999
.
LZXV7002  APPEND    ANS,ZXV07002                 * load family name (ST)
          GOTO      LZXV9999
.
LZXV7003  APPEND    ANS,ZXV07003                 * load given name (ST)
          GOTO      LZXV9999
.
LZXV7004  APPEND    ANS,ZXV07004                 * load middle name (ST)
          GOTO      LZXV9999
.
LZXV7005  APPEND    ANS,ZXV07005                 * load suffix (ST)
          GOTO      LZXV9999
.
LZXV7006  APPEND    ANS,ZXV07006                 * load prefix (ST)
          GOTO      LZXV9999
.
LZXV7007  APPEND    ANS,ZXV07007                 * load degree (IS)
          GOTO      LZXV9999
.
LZXV7008  APPEND    ANS,ZXV07008                 * load source table (IS)
          GOTO      LZXV9999
.
LZXV7009  APPEND    ANS,ZXV07009                 * load assigning authority (HD)
          GOTO      LZXV9999
.
LZXV7010  APPEND    ANS,ZXV07010                 * load name type code (ID)
          GOTO      LZXV9999
.
LZXV7011  APPEND    ANS,ZXV07011                 * load ident. check digit (ST)
          GOTO      LZXV9999
.
LZXV7012  APPEND    ANS,ZXV07012                 * load chk dig scheme code (ID)
          GOTO      LZXV9999
.
LZXV7013  APPEND    ANS,ZXV07013                 * load ident. type code (IS)
          GOTO      LZXV9999
.
LZXV7014  APPEND    ANS,ZXV07014                 * load assigning facility (HD)
          GOTO      LZXV9999
.
LZXV7015  APPEND    ANS,ZXV07015                 * load name repres. code (ID)
          GOTO      LZXV9999
.
.         ZXV.71  First Seen By Doctor Date/Time (TS)
.
LZXV7100  BRANCH    COMPCNT,LZXV7101
.
LZXV7101  APPEND    ANS,ZXV07101
          GOTO      LZXV9999
.
.         ZXV.72  Decision to Admit Date/Time (TS)
.
LZXV7200  BRANCH    COMPCNT,LZXV7201
.
LZXV7201  APPEND    ANS,ZXV07201
          GOTO      LZXV9999
.
.         ZXV.73  Readiness to Admit (CE)
.
LZXV7300  BRANCH    COMPCNT,LZXV7301:            * identifier (ST)
                            LZXV7302:            * text (ST)
                            LZXV7303:            * name of coding system (ST)
                            LZXV7304:            * alternate identifier (ST)
                            LZXV7305:            * alternate text (ST)
                            LZXV7306             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV7301  APPEND    ANS,ZXV07301                 * load identifier (ST)
          GOTO      LZXV9999
.
LZXV7302  APPEND    ANS,ZXV07302                 * load text (ST)
          GOTO      LZXV9999
.
LZXV7303  APPEND    ANS,ZXV07303                 * load name of cod. system (ST)
          GOTO      LZXV9999
.
LZXV7304  APPEND    ANS,ZXV07304                 * load alt. identifier (ST)
          GOTO      LZXV9999
.
LZXV7305  APPEND    ANS,ZXV07305                 * load alternate text (ST)
          GOTO      LZXV9999
.
LZXV7306  APPEND    ANS,ZXV07306                 * load alt. cod. sys. name (ST)
          GOTO      LZXV9999
.
.         ZXV.74  Admitting Doctor Code (XCN)
.
LZXV7400  BRANCH    COMPCNT,LZXV7401:            * id number (ST)
                            LZXV7402:            * family name (ST)
                            LZXV7403:            * given name (ST)
                            LZXV7404:            * middle name (ST)
                            LZXV7405:            * suffix (ST)
                            LZXV7406:            * prefix (ST)
                            LZXV7407:            * degree (IS)
                            LZXV7408:            * source table (IS)
                            LZXV7409:            * assigning authority (HD)
                            LZXV7410:            * name type code (ID)
                            LZXV7411:            * identifier check digit (ST)
                            LZXV7412:            * check digit scheme code (ID)
                            LZXV7413:            * identifier type code (IS)
                            LZXV7414:            * assigning facility (HD)
                            LZXV7415             * name representation code (ID)
          GOTO      LZXV9999
.
LZXV7401  APPEND    ANS,ZXV07401                 * load id number (ST)
          GOTO      LZXV9999
.
LZXV7402  APPEND    ANS,ZXV07402                 * load family name (ST)
          GOTO      LZXV9999
.
LZXV7403  APPEND    ANS,ZXV07403                 * load given name (ST)
          GOTO      LZXV9999
.
LZXV7404  APPEND    ANS,ZXV07404                 * load middle name (ST)
          GOTO      LZXV9999
.
LZXV7405  APPEND    ANS,ZXV07405                 * load suffix (ST)
          GOTO      LZXV9999
.
LZXV7406  APPEND    ANS,ZXV07406                 * load prefix (ST)
          GOTO      LZXV9999
.
LZXV7407  APPEND    ANS,ZXV07407                 * load degree (IS)
          GOTO      LZXV9999
.
LZXV7408  APPEND    ANS,ZXV07408                 * load source table (IS)
          GOTO      LZXV9999
.
LZXV7409  APPEND    ANS,ZXV07409                 * load assigning authority (HD)
          GOTO      LZXV9999
.
LZXV7410  APPEND    ANS,ZXV07410                 * load name type code (ID)
          GOTO      LZXV9999
.
LZXV7411  APPEND    ANS,ZXV07411                 * load ident. check digit (ST)
          GOTO      LZXV9999
.
LZXV7412  APPEND    ANS,ZXV07412                 * load chk dig scheme code (ID)
          GOTO      LZXV9999
.
LZXV7413  APPEND    ANS,ZXV07413                 * load ident. type code (IS)
          GOTO      LZXV9999
.
LZXV7414  APPEND    ANS,ZXV07414                 * load assigning facility (HD)
          GOTO      LZXV9999
.
LZXV7415  APPEND    ANS,ZXV07415                 * load name repres. code (ID)
          GOTO      LZXV9999
.
.         ZXV.75  Admitting Doctor Contacted (ID)
.
LZXV7500  BRANCH    COMPCNT,LZXV7501
.
LZXV7501  APPEND    ANS,ZXV07501
          GOTO      LZXV9999
.
.         ZXV.76  Escort Source (CE)
.
LZXV7600  BRANCH    COMPCNT,LZXV7601:            * identifier (ST)
                            LZXV7602:            * text (ST)
                            LZXV7603:            * name of coding system (ST)
                            LZXV7604:            * alternate identifier (ST)
                            LZXV7605:            * alternate text (ST)
                            LZXV7606             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV7601  APPEND    ANS,ZXV07601                 * load identifier (ST)
          GOTO      LZXV9999
.
LZXV7602  APPEND    ANS,ZXV07602                 * load text (ST)
          GOTO      LZXV9999
.
LZXV7603  APPEND    ANS,ZXV07603                 * load name of cod. system (ST)
          GOTO      LZXV9999
.
LZXV7604  APPEND    ANS,ZXV07604                 * load alt. identifier (ST)
          GOTO      LZXV9999
.
LZXV7605  APPEND    ANS,ZXV07605                 * load alternate text (ST)
          GOTO      LZXV9999
.
LZXV7606  APPEND    ANS,ZXV07606                 * load alt. cod. sys. name (ST)
          GOTO      LZXV9999
.
.         ZXV.77  Relative Contacted (CE)
.
LZXV7700  BRANCH    COMPCNT,LZXV7701:            * identifier (ST)
                            LZXV7702:            * text (ST)
                            LZXV7703:            * name of coding system (ST)
                            LZXV7704:            * alternate identifier (ST)
                            LZXV7705:            * alternate text (ST)
                            LZXV7706             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV7701  APPEND    ANS,ZXV07701                 * load identifier (ST)
          GOTO      LZXV9999
.
LZXV7702  APPEND    ANS,ZXV07702                 * load text (ST)
          GOTO      LZXV9999
.
LZXV7703  APPEND    ANS,ZXV07703                 * load name of cod. system (ST)
          GOTO      LZXV9999
.
LZXV7704  APPEND    ANS,ZXV07704                 * load alt. identifier (ST)
          GOTO      LZXV9999
.
LZXV7705  APPEND    ANS,ZXV07705                 * load alternate text (ST)
          GOTO      LZXV9999
.
LZXV7706  APPEND    ANS,ZXV07706                 * load alt. cod. sys. name (ST)
          GOTO      LZXV9999
.
.         ZXV.78  Relative Contacted Time (TM)
.
LZXV7800  BRANCH    COMPCNT,LZXV7801
.
LZXV7801  APPEND    ANS,ZXV07801
          GOTO      LZXV9999
.
.         ZXV.79  Risk Assessment (ID)
.
LZXV7900  BRANCH    COMPCNT,LZXV7901
.
LZXV7901  APPEND    ANS,ZXV07901
          GOTO      LZXV9999
.
.         ZXV.80  Specialist / other hospital contacted Name (ST)
.
LZXV8000  BRANCH    COMPCNT,LZXV8001
.
LZXV8001  APPEND    ANS,ZXV08001
          GOTO      LZXV9999
.
.         ZXV.81  Specialist / other hospital contacted via (CE)
.
LZXV8100  BRANCH    COMPCNT,LZXV8101:            * identifier (ST)
                            LZXV8102:            * text (ST)
                            LZXV8103:            * name of coding system (ST)
                            LZXV8104:            * alternate identifier (ST)
                            LZXV8105:            * alternate text (ST)
                            LZXV8106             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV8101  APPEND    ANS,ZXV08101                 * load identifier (ST)
          GOTO      LZXV9999
.
LZXV8102  APPEND    ANS,ZXV08102                 * load text (ST)
          GOTO      LZXV9999
.
LZXV8103  APPEND    ANS,ZXV08103                 * load name of cod. system (ST)
          GOTO      LZXV9999
.
LZXV8104  APPEND    ANS,ZXV08104                 * load alt. identifier (ST)
          GOTO      LZXV9999
.
LZXV8105  APPEND    ANS,ZXV08105                 * load alternate text (ST)
          GOTO      LZXV9999
.
LZXV8106  APPEND    ANS,ZXV08106                 * load alt. cod. sys. name (ST)
          GOTO      LZXV9999
.
.         ZXV.82  ED Ready to Discharge Date/Time (TS)
.
LZXV8200  BRANCH    COMPCNT,LZXV8201
.
LZXV8201  APPEND    ANS,ZXV08201
          GOTO      LZXV9999
.
.         ZXV.83  Referred to On Departure (CE)
.
LZXV8300  BRANCH    COMPCNT,LZXV8301:            * identifier (ST)
                            LZXV8302:            * text (ST)
                            LZXV8303:            * name of coding system (ST)
                            LZXV8304:            * alternate identifier (ST)
                            LZXV8305:            * alternate text (ST)
                            LZXV8306             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV8301  APPEND    ANS,ZXV08301                 * load identifier (ST)
          GOTO      LZXV9999
.
LZXV8302  APPEND    ANS,ZXV08302                 * load text (ST)
          GOTO      LZXV9999
.
LZXV8303  APPEND    ANS,ZXV08303                 * load name of cod. system (ST)
          GOTO      LZXV9999
.
LZXV8304  APPEND    ANS,ZXV08304                 * load alt. identifier (ST)
          GOTO      LZXV9999
.
LZXV8305  APPEND    ANS,ZXV08305                 * load alternate text (ST)
          GOTO      LZXV9999
.
LZXV8306  APPEND    ANS,ZXV08306                 * load alt. cod. sys. name (ST)
          GOTO      LZXV9999
.
.         ZXV.84  Reason for Transfer (CE)
.
LZXV8400  BRANCH    COMPCNT,LZXV8401:            * identifier (ST)
                            LZXV8402:            * text (ST)
                            LZXV8403:            * name of coding system (ST)
                            LZXV8404:            * alternate identifier (ST)
                            LZXV8405:            * alternate text (ST)
                            LZXV8406             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV8401  APPEND    ANS,ZXV08401                 * load identifier (ST)
          GOTO      LZXV9999
.
LZXV8402  APPEND    ANS,ZXV08402                 * load text (ST)
          GOTO      LZXV9999
.
LZXV8403  APPEND    ANS,ZXV08403                 * load name of cod. system (ST)
          GOTO      LZXV9999
.
LZXV8404  APPEND    ANS,ZXV08404                 * load alt. identifier (ST)
          GOTO      LZXV9999
.
LZXV8405  APPEND    ANS,ZXV08405                 * load alternate text (ST)
          GOTO      LZXV9999
.
LZXV8406  APPEND    ANS,ZXV08406                 * load alt. cod. sys. name (ST)
          GOTO      LZXV9999
.
.         ZXV.85  Transport Mode (CE)
.
LZXV8500  BRANCH    COMPCNT,LZXV8501:            * identifier (ST)
                            LZXV8502:            * text (ST)
                            LZXV8503:            * name of coding system (ST)
                            LZXV8504:            * alternate identifier (ST)
                            LZXV8505:            * alternate text (ST)
                            LZXV8506             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV8501  APPEND    ANS,ZXV08501                 * load identifier (ST)
          GOTO      LZXV9999
.
LZXV8502  APPEND    ANS,ZXV08502                 * load text (ST)
          GOTO      LZXV9999
.
LZXV8503  APPEND    ANS,ZXV08503                 * load name of cod. system (ST)
          GOTO      LZXV9999
.
LZXV8504  APPEND    ANS,ZXV08504                 * load alt. identifier (ST)
          GOTO      LZXV9999
.
LZXV8505  APPEND    ANS,ZXV08505                 * load alternate text (ST)
          GOTO      LZXV9999
.
LZXV8506  APPEND    ANS,ZXV08506                 * load alt. cod. sys. name (ST)
          GOTO      LZXV9999
.
.         ZXV.86  Ambulance Booking Time (TM)
.
LZXV8600  BRANCH    COMPCNT,LZXV8601
.
LZXV8601  APPEND    ANS,ZXV08601
          GOTO      LZXV9999
.
.         ZXV.87  ED Extended Visit Reason (CE)
.
LZXV8700  BRANCH    COMPCNT,LZXV8701:            * identifier (ST)
                            LZXV8702:            * text (ST)
                            LZXV8703:            * name of coding system (ST)
                            LZXV8704:            * alternate identifier (ST)
                            LZXV8705:            * alternate text (ST)
                            LZXV8706             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV8701  APPEND    ANS,ZXV08701                 * load identifier (ST)
          GOTO      LZXV9999
.
LZXV8702  APPEND    ANS,ZXV08702                 * load text (ST)
          GOTO      LZXV9999
.
LZXV8703  APPEND    ANS,ZXV08703                 * load name of cod. system (ST)
          GOTO      LZXV9999
.
LZXV8704  APPEND    ANS,ZXV08704                 * load alt. identifier (ST)
          GOTO      LZXV9999
.
LZXV8705  APPEND    ANS,ZXV08705                 * load alternate text (ST)
          GOTO      LZXV9999
.
LZXV8706  APPEND    ANS,ZXV08706                 * load alt. cod. sys. name (ST)
          GOTO      LZXV9999
.
.         ZXV.88  Anaesthetic Type for Billing (CE)
.
LZXV8800  BRANCH    COMPCNT,LZXV8801:            * identifier (ST)
                            LZXV8802:            * text (ST)
                            LZXV8803:            * name of coding system (ST)
                            LZXV8804:            * alternate identifier (ST)
                            LZXV8805:            * alternate text (ST)
                            LZXV8806             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV8801  APPEND    ANS,ZXV08801                 * load identifier (ST)
          GOTO      LZXV9999
.
LZXV8802  APPEND    ANS,ZXV08802                 * load text (ST)
          GOTO      LZXV9999
.
LZXV8803  APPEND    ANS,ZXV08803                 * load name of cod. system (ST)
          GOTO      LZXV9999
.
LZXV8804  APPEND    ANS,ZXV08804                 * load alt. identifier (ST)
          GOTO      LZXV9999
.
LZXV8805  APPEND    ANS,ZXV08805                 * load alternate text (ST)
          GOTO      LZXV9999
.
LZXV8806  APPEND    ANS,ZXV08806                 * load alt. cod. sys. name (ST)
          GOTO      LZXV9999
.
.         ZXV.89  MyHR Consent value (ID)
.
LZXV8900  BRANCH    COMPCNT,LZXV8901
          GOTO      LZXV9999
.
LZXV8901  APPEND    ANS,ZXV08901                 * load coded value (ID)
          GOTO      LZXV9999
.
.         ZXV.90  Telehealth Status (CE)
.
LZXV9000  BRANCH    COMPCNT,LZXV9001:            * identifier (ST)
                            LZXV9002:            * text (ST)
                            LZXV9003:            * name of coding system (ST)
                            LZXV9004:            * alternate identifier (ST)
                            LZXV9005:            * alternate text (ST)
                            LZXV9006             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV9001  APPEND    ANS,ZXV09001                 * identifier (ST)
          GOTO      LZXV9999
.
LZXV9002  APPEND    ANS,ZXV09002                 * text (ST)
          GOTO      LZXV9999
.
LZXV9003  APPEND    ANS,ZXV09003                 * name of coding system (ST)
          GOTO      LZXV9999
.
LZXV9004  APPEND    ANS,ZXV09004                 * alternate identifier (ST)
          GOTO      LZXV9999
.
LZXV9005  APPEND    ANS,ZXV09005                 * alternate text (ST)
          GOTO      LZXV9999
.
LZXV9006  APPEND    ANS,ZXV09006                 * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
.         ZXV.91  Telehealth Receiving Site Name (ST)
.
LZXV9100  BRANCH    COMPCNT,LZXV9101
.
LZXV9101  APPEND    ANS,ZXV09101
          GOTO      LZXV9999
.
.         ZXV.92  Telehealth Receiving Site Code (ST)
.
LZXV9200  BRANCH    COMPCNT,LZXV9201
.
LZXV9201  APPEND    ANS,ZXV09201
          GOTO      LZXV9999
.
.         ZXV.93  Telehealth Receiving Address (ST)
.
LZXV9300  BRANCH    COMPCNT,LZXV9301
.
LZXV9301  APPEND    ANS,ZXV09301
          GOTO      LZXV9999
.
.         ZXV.94  Telehealth Waiting Room URL (ST)
.
LZXV9400  BRANCH    COMPCNT,LZXV9401
.
LZXV9401  APPEND    ANS,ZXV09401
          GOTO      LZXV9999
.
.         ZXV.95  Telehealth Receiving E164 (ST)
.
LZXV9500  BRANCH    COMPCNT,LZXV9501
.
LZXV9501  APPEND    ANS,ZXV09501
          GOTO      LZXV9999
.
.         ZXV.96  Telehealth Notes (ST)
.
LZXV9600  BRANCH    COMPCNT,LZXV9601
.
LZXV9601  APPEND    ANS,ZXV09601
          GOTO      LZXV9999
.
.         ZXV.97  Appointment Confirmed (ST)
.
LZXV9700  BRANCH    COMPCNT,LZXV9701
.
LZXV9701  APPEND    ANS,ZXV09701
          GOTO      LZXV9999
.
.         ZXV.98  Referral In Reason (CE)
.
LZXV9800  BRANCH    COMPCNT,LZXV9801:            * identifier (ST)
                            LZXV9802:            * text (ST)
                            LZXV9803:            * name of coding system (ST)
                            LZXV9804:            * alternate identifier (ST)
                            LZXV9805:            * alternate text (ST)
                            LZXV9806             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV9801  APPEND    ANS,ZXV09801                 * identifier (ST)
          GOTO      LZXV9999
.
LZXV9802  APPEND    ANS,ZXV09802                 * text (ST)
          GOTO      LZXV9999
.
LZXV9803  APPEND    ANS,ZXV09803                 * name of coding system (ST)
          GOTO      LZXV9999
.
LZXV9804  APPEND    ANS,ZXV09804                 * alternate identifier (ST)
          GOTO      LZXV9999
.
LZXV9805  APPEND    ANS,ZXV09805                 * alternate text (ST)
          GOTO      LZXV9999
.
LZXV9806  APPEND    ANS,ZXV09806                 * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
.         ZXV.99  Episode Health Condition (CE) (maximum of 4 repeats - 5 total)
.
LZXV9900  COMPARE   REPTNCNT,FIVE                * maximum repeats reached ?
          GOTO      LZXV9999 IF LESS             * yes
.
          BRANCH    COMPCNT,LZXV9901:            * identifier (ST)
                            LZXV9902:            * text (ST)
                            LZXV9903:            * name of coding system (ST)
                            LZXV9904:            * alternate identifier (ST)
                            LZXV9905:            * alternate text (ST)
                            LZXV9906             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV9901  APPEND    ANS,ZXV09901[REPTNCNT]       * identifier (ST)
          GOTO      LZXV9999
.
LZXV9902  APPEND    ANS,ZXV09902[REPTNCNT]       * text (ST)
          GOTO      LZXV9999
.
LZXV9903  APPEND    ANS,ZXV09903[REPTNCNT]       * name of coding system (ST)
          GOTO      LZXV9999
.
LZXV9904  APPEND    ANS,ZXV09904[REPTNCNT]       * alternate identifier (ST)
          GOTO      LZXV9999
.
LZXV9905  APPEND    ANS,ZXV09905[REPTNCNT]       * alternate text (ST)
          GOTO      LZXV9999
.
LZXV9906  APPEND    ANS,ZXV09906[REPTNCNT]       * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
.         ZXV.100  Usual Accommodation (CE)
.
LZXV1000  BRANCH    COMPCNT,LZXV1001:            * identifier (ST)
                            LZXV1002:            * text (ST)
                            LZXV1003:            * name of coding system (ST)
                            LZXV1004:            * alternate identifier (ST)
                            LZXV1005:            * alternate text (ST)
                            LZXV1006             * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
LZXV1001  APPEND    ANS,ZXV10001                 * identifier (ST)
          GOTO      LZXV9999
.
LZXV1002  APPEND    ANS,ZXV10002                 * text (ST)
          GOTO      LZXV9999
.
LZXV1003  APPEND    ANS,ZXV10003                 * name of coding system (ST)
          GOTO      LZXV9999
.
LZXV1004  APPEND    ANS,ZXV10004                 * alternate identifier (ST)
          GOTO      LZXV9999
.
LZXV1005  APPEND    ANS,ZXV10005                 * alternate text (ST)
          GOTO      LZXV9999
.
LZXV1006  APPEND    ANS,ZXV10006                 * name of alt. cod. system (ST)
          GOTO      LZXV9999
.
.         ZXV.101  Triage Date (DT)
.
LZXV1010  BRANCH    COMPCNT,LZXV1011             * date (DT)
          GOTO      LZXV9999
.
LZXV1011  APPEND    ANS,ZXV10101
          GOTO      LZXV9999
.
.         ZXV.102  Referral-In Receipt Acknowledgement Date (DT)
.
LZXV1020  BRANCH    COMPCNT,LZXV1021             * date (DT)
          GOTO      LZXV9999
.
LZXV1021  APPEND    ANS,ZXV10201
          GOTO      LZXV9999
.
.         ZXV.103  Emergency Arrival Date/Time (TS)
.
LZXV1030  BRANCH    COMPCNT,LZXV1031
.
LZXV1031  APPEND    ANS,ZXV10301
          GOTO      LZXV9999
.
LZXV9999  RETURN
+
.*****************************************************************************
.*                                 LPRD0000        Called by: PROC0000       *
.*                          Load the PRD fields                              *
.*****************************************************************************
.
LPRD0000  BRANCH    FIELDNO,LPRD0100:            * Provider Role
                            LPRD9999:            * Provider Name
                            LPRD9999:            * Provider Address
                            LPRD9999:            * Provider Location
                            LPRD9999:            * Prov. Communication Info.
                            LPRD9999:            * Preferred Method of Contact
                            LPRD0700:            * Provider Identifiers
                            LPRD9999:            * Effective Start Date of Role
                            LPRD9999             * Effective End Date of Role
.
.         Invalid PRD field received, so ignore it
.
          GOTO      LPRD9999
.
.         PRD.1  Provider Role (CE)
.
LPRD0100  BRANCH    COMPCNT,LPRD0101:            * identifier (ST)
                            LPRD0102:            * text (ST)
                            LPRD0103:            * name of coding system (ST)
                            LPRD0104:            * alternate identifier (ST)
                            LPRD0105:            * alternate text (ST)
                            LPRD0106             * name of alt. cod. system (ST)
          GOTO      LPRD9999
.
LPRD0101  APPEND    ANS,PRD00101                 * identifier (ST)
          GOTO      LPRD9999
.
LPRD0102  APPEND    ANS,PRD00102                 * text (ST)
          GOTO      LPRD9999
.
LPRD0103  APPEND    ANS,PRD00103                 * name of coding system (ST)
          GOTO      LPRD9999
.
LPRD0104  APPEND    ANS,PRD00104                 * alternate identifier (ST)
          GOTO      LPRD9999
.
LPRD0105  APPEND    ANS,PRD00105                 * alternate text (ST)
          GOTO      LPRD9999
.
LPRD0106  APPEND    ANS,PRD00106                 * name of alt. cod. system (ST)
          GOTO      LPRD9999
.
.         PRD.7  Provider Identifiers (CM)
.
LPRD0700  BRANCH    COMPCNT,LPRD0701:            * id number (ST)
                            LPRD0702:            * type of id number (IS)
                            LPRD0703             * other qualifying info (ST)
          GOTO      LPRD9999
.
LPRD0701  APPEND    ANS,PRD00701                 * id number (ST)
          GOTO      LPRD9999
.
LPRD0702  APPEND    ANS,PRD00702                 * type of id number (IS)
          GOTO      LPRD9999
.
LPRD0703  APPEND    ANS,PRD00703                 * other qualifying info (ST)
          GOTO      LPRD9999
.
LPRD9999  RETURN
+
.*****************************************************************************
.*                                 LPR10000        Called by: PROC0000       *
.*                          Load the PR1 fields                              *
.*****************************************************************************
.
LPR10000  BRANCH    FIELDNO,LPR10100:            * Set ID
                            LPR10200:            * Procedure Coding Method
                            LPR10300:            * Procedure Code
                            LPR10400:            * Procedure Description
                            LPR10500:            * Procedure Date/Time
                            LPR10600:            * Procedure Functional Type
                            LPR10700:            * Procedure Minutes
                            LPR10800:            * Anaesthesiologist
                            LPR10900:            * Anaesthesia Code
                            LPR11000:            * Anaestheisa Minutes
                            LPR11100:            * Surgeon
                            LPR11200:            * Procedure Practioner
                            LPR11300:            * Consent Code
                            LPR11400:            * Procedure Priority
                            LPR11500:            * Associated Diagnosis Code
                            LPR11600             * Procedure Code Modifier
.
.         Invalid PR1 field received, so ignore it
.
          GOTO      LPR19999
.
.         PR1.1  Set ID (SI)
.
LPR10100  BRANCH    COMPCNT,LPR10101
.
LPR10101  APPEND    ANS,PR100101
          GOTO      LPR19999
.
.         PR1.2  Procedure Coding Method (IS)
.
LPR10200  BRANCH    COMPCNT,LPR10201
.
LPR10201  APPEND    ANS,PR100201
          GOTO      LPR19999
.
.         PR1.3  Procedure Code (CE)
.
LPR10300  BRANCH    COMPCNT,LPR10301:            * identifier (ST)
                            LPR10302:            * text (ST)
                            LPR10303:            * name of coding system (ST)
                            LPR10304:            * alternate identifier (ST)
                            LPR10305:            * alternate text (ST)
                            LPR10306             * name of alt. cod. system (ST)
          GOTO      LPR19999
.
LPR10301  APPEND    ANS,PR100301                 * identifier (ST)
          GOTO      LPR19999
.
LPR10302  APPEND    ANS,PR100302                 * text (ST)
          GOTO      LPR19999
.
LPR10303  APPEND    ANS,PR100303                 * name of coding system (ST)
          GOTO      LPR19999
.
LPR10304  APPEND    ANS,PR100304                 * alternate identifier (ST)
          GOTO      LPR19999
.
LPR10305  APPEND    ANS,PR100305                 * alternate text (ST)
          GOTO      LPR19999
.
LPR10306  APPEND    ANS,PR100306                 * name of alt. cod. system (ST)
          GOTO      LPR19999
.
.         PR1.4  Procedure Description (IS)
.
LPR10400  BRANCH    COMPCNT,LPR10401
.
LPR10401  APPEND    ANS,PR100401
          GOTO      LPR19999
.
.         PR1.5  Procedure Date/Time (TS)
.
LPR10500  BRANCH    COMPCNT,LPR10501
.
LPR10501  APPEND    ANS,PR100501
          GOTO      LPR19999
.
.         PR1.6  Procedure Functional Type (IS)
.
LPR10600  BRANCH    COMPCNT,LPR10601
.
LPR10601  APPEND    ANS,PR100601
          GOTO      LPR19999
.
.         PR1.7  Procedure Minutes (NM)
.
LPR10700  BRANCH    COMPCNT,LPR10701
.
LPR10701  APPEND    ANS,PR100701
          GOTO      LPR19999
.
.         PR1.8 Anaesthesiologist (XCN)
.
LPR10800  BRANCH    COMPCNT,LPR10801:            * id number (ST)
                            LPR10802:            * family name (ST)
                            LPR10803:            * given name (ST)
                            LPR10804:            * middle name (ST)
                            LPR10805:            * suffix (ST)
                            LPR10806:            * prefix (ST)
                            LPR10807:            * degree (IS)
                            LPR10808:            * source table (IS)
                            LPR10809:            * assigning authority (HD)
                            LPR10810:            * name type code (ID)
                            LPR10811:            * identifier check digit (ST)
                            LPR10812:            * check digit scheme code (ID)
                            LPR10813:            * identifier type code (IS)
                            LPR10814:            * assigning facility (HD)
                            LPR10815             * name representation code (ID)
          GOTO      LPR19999
.
LPR10801  APPEND    ANS,PR100801                 * load id number (ST)
          GOTO      LPR19999
.
LPR10802  APPEND    ANS,PR100802                 * load family name (ST)
          GOTO      LPR19999
.
LPR10803  APPEND    ANS,PR100803                 * load given name (ST)
          GOTO      LPR19999
.
LPR10804  APPEND    ANS,PR100804                 * load middle name (ST)
          GOTO      LPR19999
.
LPR10805  APPEND    ANS,PR100805                 * load suffix (ST)
          GOTO      LPR19999
.
LPR10806  APPEND    ANS,PR100806                 * load prefix (ST)
          GOTO      LPR19999
.
LPR10807  APPEND    ANS,PR100807                 * load degree (IS)
          GOTO      LPR19999
.
LPR10808  APPEND    ANS,PR100808                 * load source table (IS)
          GOTO      LPR19999
.
LPR10809  APPEND    ANS,PR100809                 * load assigning authority (HD)
          GOTO      LPR19999
.
LPR10810  APPEND    ANS,PR100810                 * load name type code (ID)
          GOTO      LPR19999
.
LPR10811  APPEND    ANS,PR100811                 * load ident. check digit (ST)
          GOTO      LPR19999
.
LPR10812  APPEND    ANS,PR100812                 * load chk dig scheme code (ID)
          GOTO      LPR19999
.
LPR10813  APPEND    ANS,PR100813                 * load ident. type code (IS)
          GOTO      LPR19999
.
LPR10814  APPEND    ANS,PR100814                 * load assigning facility (HD)
          GOTO      LPR19999
.
LPR10815  APPEND    ANS,PR100815                 * load name repres. code (ID)
          GOTO      LPR19999
.
.         PR1.9  Anaesthesia Code (IS)
.
LPR10900  BRANCH    COMPCNT,LPR10901
.
LPR10901  APPEND    ANS,PR100901
          GOTO      LPR19999
.
.         PR1.10  Anaestheisa Minutes (NM)
.
LPR11000  BRANCH    COMPCNT,LPR11001
.
LPR11001  APPEND    ANS,PR101001
          GOTO      LPR19999
.
.         PR1.11 Anaesthesiologist (XCN)
.
LPR11100  BRANCH    COMPCNT,LPR11101:            * id number (ST)
                            LPR11102:            * family name (ST)
                            LPR11103:            * given name (ST)
                            LPR11104:            * middle name (ST)
                            LPR11105:            * suffix (ST)
                            LPR11106:            * prefix (ST)
                            LPR11107:            * degree (IS)
                            LPR11108:            * source table (IS)
                            LPR11109:            * assigning authority (HD)
                            LPR11110:            * name type code (ID)
                            LPR11111:            * identifier check digit (ST)
                            LPR11112:            * check digit scheme code (ID)
                            LPR11113:            * identifier type code (IS)
                            LPR11114:            * assigning facility (HD)
                            LPR11115             * name representation code (ID)
          GOTO      LPR19999
.
LPR11101  APPEND    ANS,PR101101                 * load id number (ST)
          GOTO      LPR19999
.
LPR11102  APPEND    ANS,PR101102                 * load family name (ST)
          GOTO      LPR19999
.
LPR11103  APPEND    ANS,PR101103                 * load given name (ST)
          GOTO      LPR19999
.
LPR11104  APPEND    ANS,PR101104                 * load middle name (ST)
          GOTO      LPR19999
.
LPR11105  APPEND    ANS,PR101105                 * load suffix (ST)
          GOTO      LPR19999
.
LPR11106  APPEND    ANS,PR101106                 * load prefix (ST)
          GOTO      LPR19999
.
LPR11107  APPEND    ANS,PR101107                 * load degree (IS)
          GOTO      LPR19999
.
LPR11108  APPEND    ANS,PR101108                 * load source table (IS)
          GOTO      LPR19999
.
LPR11109  APPEND    ANS,PR101109                 * load assigning authority (HD)
          GOTO      LPR19999
.
LPR11110  APPEND    ANS,PR101110                 * load name type code (ID)
          GOTO      LPR19999
.
LPR11111  APPEND    ANS,PR101111                 * load ident. check digit (ST)
          GOTO      LPR19999
.
LPR11112  APPEND    ANS,PR101112                 * load chk dig scheme code (ID)
          GOTO      LPR19999
.
LPR11113  APPEND    ANS,PR101113                 * load ident. type code (IS)
          GOTO      LPR19999
.
LPR11114  APPEND    ANS,PR101114                 * load assigning facility (HD)
          GOTO      LPR19999
.
LPR11115  APPEND    ANS,PR101115                 * load name repres. code (ID)
          GOTO      LPR19999
.
.         PR1.12 Anaesthesiologist (XCN)
.
LPR11200  BRANCH    COMPCNT,LPR11201:            * id number (ST)
                            LPR11202:            * family name (ST)
                            LPR11203:            * given name (ST)
                            LPR11204:            * middle name (ST)
                            LPR11205:            * suffix (ST)
                            LPR11206:            * prefix (ST)
                            LPR11207:            * degree (IS)
                            LPR11208:            * source table (IS)
                            LPR11209:            * assigning authority (HD)
                            LPR11210:            * name type code (ID)
                            LPR11211:            * identifier check digit (ST)
                            LPR11212:            * check digit scheme code (ID)
                            LPR11213:            * identifier type code (IS)
                            LPR11214:            * assigning facility (HD)
                            LPR11215             * name representation code (ID)
          GOTO      LPR19999
.
LPR11201  APPEND    ANS,PR101201                 * load id number (ST)
          GOTO      LPR19999
.
LPR11202  APPEND    ANS,PR101202                 * load family name (ST)
          GOTO      LPR19999
.
LPR11203  APPEND    ANS,PR101203                 * load given name (ST)
          GOTO      LPR19999
.
LPR11204  APPEND    ANS,PR101204                 * load middle name (ST)
          GOTO      LPR19999
.
LPR11205  APPEND    ANS,PR101205                 * load suffix (ST)
          GOTO      LPR19999
.
LPR11206  APPEND    ANS,PR101206                 * load prefix (ST)
          GOTO      LPR19999
.
LPR11207  APPEND    ANS,PR101207                 * load degree (IS)
          GOTO      LPR19999
.
LPR11208  APPEND    ANS,PR101208                 * load source table (IS)
          GOTO      LPR19999
.
LPR11209  APPEND    ANS,PR101209                 * load assigning authority (HD)
          GOTO      LPR19999
.
LPR11210  APPEND    ANS,PR101210                 * load name type code (ID)
          GOTO      LPR19999
.
LPR11211  APPEND    ANS,PR101211                 * load ident. check digit (ST)
          GOTO      LPR19999
.
LPR11212  APPEND    ANS,PR101212                 * load chk dig scheme code (ID)
          GOTO      LPR19999
.
LPR11213  APPEND    ANS,PR101213                 * load ident. type code (IS)
          GOTO      LPR19999
.
LPR11214  APPEND    ANS,PR101214                 * load assigning facility (HD)
          GOTO      LPR19999
.
LPR11215  APPEND    ANS,PR101215                 * load name repres. code (ID)
          GOTO      LPR19999
.
.         PR1.13  Consent Code (CE)
.
LPR11300  BRANCH    COMPCNT,LPR11301:            * identifier (ST)
                            LPR11302:            * text (ST)
                            LPR11303:            * name of coding system (ST)
                            LPR11304:            * alternate identifier (ST)
                            LPR11305:            * alternate text (ST)
                            LPR11306             * name of alt. cod. system (ST)
          GOTO      LPR19999
.
LPR11301  APPEND    ANS,PR101301                 * identifier (ST)
          GOTO      LPR19999
.
LPR11302  APPEND    ANS,PR101302                 * text (ST)
          GOTO      LPR19999
.
LPR11303  APPEND    ANS,PR101303                 * name of coding system (ST)
          GOTO      LPR19999
.
LPR11304  APPEND    ANS,PR101304                 * alternate identifier (ST)
          GOTO      LPR19999
.
LPR11305  APPEND    ANS,PR101305                 * alternate text (ST)
          GOTO      LPR19999
.
LPR11306  APPEND    ANS,PR101306                 * name of alt. cod. system (ST)
          GOTO      LPR19999
.
.         PR1.14  Procedure Priority (NM)
.
LPR11400  BRANCH    COMPCNT,LPR11401
.
LPR11401  APPEND    ANS,PR101401
          GOTO      LPR19999
.
.         PR1.15  Associated Diagnosis Code (CE)
.
LPR11500  BRANCH    COMPCNT,LPR11501:            * identifier (ST)
                            LPR11502:            * text (ST)
                            LPR11503:            * name of coding system (ST)
                            LPR11504:            * alternate identifier (ST)
                            LPR11505:            * alternate text (ST)
                            LPR11506             * name of alt. cod. system (ST)
          GOTO      LPR19999
.
LPR11501  APPEND    ANS,PR101501                 * identifier (ST)
          GOTO      LPR19999
.
LPR11502  APPEND    ANS,PR101502                 * text (ST)
          GOTO      LPR19999
.
LPR11503  APPEND    ANS,PR101503                 * name of coding system (ST)
          GOTO      LPR19999
.
LPR11504  APPEND    ANS,PR101504                 * alternate identifier (ST)
          GOTO      LPR19999
.
LPR11505  APPEND    ANS,PR101505                 * alternate text (ST)
          GOTO      LPR19999
.
LPR11506  APPEND    ANS,PR101506                 * name of alt. cod. system (ST)
          GOTO      LPR19999
.
.         PR1.16  Procedure Code Modifier (CE)
.
LPR11600  BRANCH    COMPCNT,LPR11601:            * identifier (ST)
                            LPR11602:            * text (ST)
                            LPR11603:            * name of coding system (ST)
                            LPR11604:            * alternate identifier (ST)
                            LPR11605:            * alternate text (ST)
                            LPR11606             * name of alt. cod. system (ST)
          GOTO      LPR19999
.
LPR11601  APPEND    ANS,PR101601                 * identifier (ST)
          GOTO      LPR19999
.
LPR11602  APPEND    ANS,PR101602                 * text (ST)
          GOTO      LPR19999
.
LPR11603  APPEND    ANS,PR101603                 * name of coding system (ST)
          GOTO      LPR19999
.
LPR11604  APPEND    ANS,PR101604                 * alternate identifier (ST)
          GOTO      LPR19999
.
LPR11605  APPEND    ANS,PR101605                 * alternate text (ST)
          GOTO      LPR19999
.
LPR11606  APPEND    ANS,PR101606                 * name of alt. cod. system (ST)
          GOTO      LPR19999
.
LPR19999  RETURN
+
.*****************************************************************************
.*                                 LROL0000        Called by: PROC0000       *
.*                          Load the ROL fields                              *
.*****************************************************************************
.
LROL0000  BRANCH    FIELDNO,LROL0100:            * Role Instance ID
                            LROL0200:            * Action Code
                            LROL0300:            * Role-ROL
                            LROL0400:            * Role Person
                            LROL0500:            * Role Begin Date/Time
                            LROL0600:            * Role End Date/Time
                            LROL0700:            * Role Duration
                            LROL0800:            * Role Action Reason
                            LROL0900:            * Provider Type
                            LROL1000             * Organisation Unit Type
.
.         Invalid ROL field received, so ignore it
.
          GOTO      LROL9999
.
.         ROL.1  Role Instance ID (EI)
.
LROL0100  BRANCH    COMPCNT,LROL0101:            * entity identifier (ST)
                            LROL0102:            * namespace id (IS)
                            LROL0103:            * universal id (ST)
                            LROL0104             * universal id type (ID)
          GOTO      LROL9999
.
LROL0101  APPEND    ANS,ROL00101                 * load entity identifier (ST)
          GOTO      LROL9999
.
LROL0102  APPEND    ANS,ROL00102                 * load namespace id (IS)
          GOTO      LROL9999
.
LROL0103  APPEND    ANS,ROL00103                 * load universal id (ST)
          GOTO      LROL9999
.
LROL0104  APPEND    ANS,ROL00104                 * load universal id type (ID)
          GOTO      LROL9999
.
.         ROL.2  Action Code (ID)
.
LROL0200  BRANCH    COMPCNT,LROL0201
.
LROL0201  APPEND    ANS,ROL00201
          GOTO      LROL9999
.
.         ROL.3 Role-ROL (CE)
.
LROL0300  BRANCH    COMPCNT,LROL0301:            * identifier (ST)
                            LROL0302:            * text (ST)
                            LROL0303:            * name of coding system (ST)
                            LROL0304:            * alternate identifier (ST)
                            LROL0305:            * alternate text (ST)
                            LROL0306             * name of alt. cod. system (ST)
          GOTO      LROL9999
.
LROL0301  APPEND    ANS,ROL00301                 * identifier (ST)
          GOTO      LROL9999
.
LROL0302  APPEND    ANS,ROL00302                 * text (ST)
          GOTO      LROL9999
.
LROL0303  APPEND    ANS,ROL00303                 * name of coding system (ST)
          GOTO      LROL9999
.
LROL0304  APPEND    ANS,ROL00304                 * alternate identifier (ST)
          GOTO      LROL9999
.
LROL0305  APPEND    ANS,ROL00305                 * alternate text (ST)
          GOTO      LROL9999
.
LROL0306  APPEND    ANS,ROL00306                 * name of alt. cod. system (ST)
          GOTO      LROL9999
.
.         ROL.4 Role Person (XCN)
.
LROL0400  BRANCH    COMPCNT,LROL0401:            * id number (ST)
                            LROL0402:            * family name (ST)
                            LROL0403:            * given name (ST)
                            LROL0404:            * middle name (ST)
                            LROL0405:            * suffix (ST)
                            LROL0406:            * prefix (ST)
                            LROL0407:            * degree (IS)
                            LROL0408:            * source table (IS)
                            LROL0409:            * assigning authority (HD)
                            LROL0410:            * name type code (ID)
                            LROL0411:            * identifier check digit (ST)
                            LROL0412:            * check digit scheme code (ID)
                            LROL0413:            * identifier type code (IS)
                            LROL0414:            * assigning facility (HD)
                            LROL0415             * name representation code (ID)
          GOTO      LROL9999
.
LROL0401  APPEND    ANS,ROL00401                 * load id number (ST)
          GOTO      LROL9999
.
LROL0402  APPEND    ANS,ROL00402                 * load family name (ST)
          GOTO      LROL9999
.
LROL0403  APPEND    ANS,ROL00403                 * load given name (ST)
          GOTO      LROL9999
.
LROL0404  APPEND    ANS,ROL00404                 * load middle name (ST)
          GOTO      LROL9999
.
LROL0405  APPEND    ANS,ROL00405                 * load suffix (ST)
          GOTO      LROL9999
.
LROL0406  APPEND    ANS,ROL00406                 * load prefix (ST)
          GOTO      LROL9999
.
LROL0407  APPEND    ANS,ROL00407                 * load degree (IS)
          GOTO      LROL9999
.
LROL0408  APPEND    ANS,ROL00408                 * load source table (IS)
          GOTO      LROL9999
.
LROL0409  APPEND    ANS,ROL00409                 * load assigning authority (HD)
          GOTO      LROL9999
.
LROL0410  APPEND    ANS,ROL00410                 * load name type code (ID)
          GOTO      LROL9999
.
LROL0411  APPEND    ANS,ROL00411                 * load ident. check digit (ST)
          GOTO      LROL9999
.
LROL0412  APPEND    ANS,ROL00412                 * load chk dig scheme code (ID)
          GOTO      LROL9999
.
LROL0413  APPEND    ANS,ROL00413                 * load ident. type code (IS)
          GOTO      LROL9999
.
LROL0414  APPEND    ANS,ROL00414                 * load assigning facility (HD)
          GOTO      LROL9999
.
LROL0415  APPEND    ANS,ROL00415                 * load name repres. code (ID)
          GOTO      LROL9999
.
.         ROL.5  Role Begin Date/Time (TS)
.
LROL0500  BRANCH    COMPCNT,LROL0501
.
LROL0501  APPEND    ANS,ROL00501
          GOTO      LROL9999
.
.         ROL.6  Role End Date/Time (TS)
.
LROL0600  BRANCH    COMPCNT,LROL0601
.
LROL0601  APPEND    ANS,ROL00601
          GOTO      LROL9999
.
.         ROL.7 Role Duration (CE)
.
LROL0700  BRANCH    COMPCNT,LROL0701:            * identifier (ST)
                            LROL0702:            * text (ST)
                            LROL0703:            * name of coding system (ST)
                            LROL0704:            * alternate identifier (ST)
                            LROL0705:            * alternate text (ST)
                            LROL0706             * name of alt. cod. system (ST)
          GOTO      LROL9999
.
LROL0701  APPEND    ANS,ROL00701                 * identifier (ST)
          GOTO      LROL9999
.
LROL0702  APPEND    ANS,ROL00702                 * text (ST)
          GOTO      LROL9999
.
LROL0703  APPEND    ANS,ROL00703                 * name of coding system (ST)
          GOTO      LROL9999
.
LROL0704  APPEND    ANS,ROL00704                 * alternate identifier (ST)
          GOTO      LROL9999
.
LROL0705  APPEND    ANS,ROL00705                 * alternate text (ST)
          GOTO      LROL9999
.
LROL0706  APPEND    ANS,ROL00706                 * name of alt. cod. system (ST)
          GOTO      LROL9999
.
.         ROL.8 Role Action Reason (CE)
.
LROL0800  BRANCH    COMPCNT,LROL0801:            * identifier (ST)
                            LROL0802:            * text (ST)
                            LROL0803:            * name of coding system (ST)
                            LROL0804:            * alternate identifier (ST)
                            LROL0805:            * alternate text (ST)
                            LROL0806             * name of alt. cod. system (ST)
          GOTO      LROL9999
.
LROL0801  APPEND    ANS,ROL00801                 * identifier (ST)
          GOTO      LROL9999
.
LROL0802  APPEND    ANS,ROL00802                 * text (ST)
          GOTO      LROL9999
.
LROL0803  APPEND    ANS,ROL00803                 * name of coding system (ST)
          GOTO      LROL9999
.
LROL0804  APPEND    ANS,ROL00804                 * alternate identifier (ST)
          GOTO      LROL9999
.
LROL0805  APPEND    ANS,ROL00805                 * alternate text (ST)
          GOTO      LROL9999
.
LROL0806  APPEND    ANS,ROL00806                 * name of alt. cod. system (ST)
          GOTO      LROL9999
.
.         ROL.9 Provider Type (CE)
.
LROL0900  BRANCH    COMPCNT,LROL0901:            * identifier (ST)
                            LROL0902:            * text (ST)
                            LROL0903:            * name of coding system (ST)
                            LROL0904:            * alternate identifier (ST)
                            LROL0905:            * alternate text (ST)
                            LROL0906             * name of alt. cod. system (ST)
          GOTO      LROL9999
.
LROL0901  APPEND    ANS,ROL00901                 * identifier (ST)
          GOTO      LROL9999
.
LROL0902  APPEND    ANS,ROL00902                 * text (ST)
          GOTO      LROL9999
.
LROL0903  APPEND    ANS,ROL00903                 * name of coding system (ST)
          GOTO      LROL9999
.
LROL0904  APPEND    ANS,ROL00904                 * alternate identifier (ST)
          GOTO      LROL9999
.
LROL0905  APPEND    ANS,ROL00905                 * alternate text (ST)
          GOTO      LROL9999
.
LROL0906  APPEND    ANS,ROL00906                 * name of alt. cod. system (ST)
          GOTO      LROL9999
.
.         ROL.10 Organisation Unit Type (CE)
.
LROL1000  BRANCH    COMPCNT,LROL1001:            * identifier (ST)
                            LROL1002:            * text (ST)
                            LROL1003:            * name of coding system (ST)
                            LROL1004:            * alternate identifier (ST)
                            LROL1005:            * alternate text (ST)
                            LROL1006             * name of alt. cod. system (ST)
          GOTO      LROL9999
.
LROL1001  APPEND    ANS,ROL01001                 * identifier (ST)
          GOTO      LROL9999
.
LROL1002  APPEND    ANS,ROL01002                 * text (ST)
          GOTO      LROL9999
.
LROL1003  APPEND    ANS,ROL01003                 * name of coding system (ST)
          GOTO      LROL9999
.
LROL1004  APPEND    ANS,ROL01004                 * alternate identifier (ST)
          GOTO      LROL9999
.
LROL1005  APPEND    ANS,ROL01005                 * alternate text (ST)
          GOTO      LROL9999
.
LROL1006  APPEND    ANS,ROL01006                 * name of alt. cod. system (ST)
          GOTO      LROL9999
.
LROL9999  RETURN
+
.*****************************************************************************
.*                                 LRF10000        Called by: PROC0000       *
.*                          Load the RF1 fields                              *
.*****************************************************************************
.
LRF10000  BRANCH    FIELDNO,LRF10100:            * Referral Status
                            LRF19999:            * Referral Priority
                            LRF19999:            * Referral Type
                            LRF19999:            * Referral Disposition
                            LRF19999:            * Referral Category
                            LRF10600:            * Originating Ref. Identifier
                            LRF10700:            * Effective Referral Date
                            LRF19999:            * Expiration Date
                            LRF19999:            * Process Date
                            LRF19999:            * Referral Reason
                            LRF11100             * External Referral Identifier
.
.         Invalid RF1 field received, so ignore it
.
          GOTO      LRF19999
.
.         RF1.1  Referral Status (CE)
.
LRF10100  BRANCH    COMPCNT,LRF10101:            * identifier (ST)
                            LRF10102:            * text (ST)
                            LRF10103:            * name of coding system (ST)
                            LRF10104:            * alternate identifier (ST)
                            LRF10105:            * alternate text (ST)
                            LRF10106             * name of alt. cod. system (ST)
          GOTO      LRF19999
.
LRF10101  APPEND    ANS,RF100101                 * identifier (ST)
          GOTO      LRF19999
.
LRF10102  APPEND    ANS,RF100102                 * text (ST)
          GOTO      LRF19999
.
LRF10103  APPEND    ANS,RF100103                 * name of coding system (ST)
          GOTO      LRF19999
.
LRF10104  APPEND    ANS,RF100104                 * alternate identifier (ST)
          GOTO      LRF19999
.
LRF10105  APPEND    ANS,RF100105                 * alternate text (ST)
          GOTO      LRF19999
.
LRF10106  APPEND    ANS,RF100106                 * name of alt. cod. system (ST)
          GOTO      LRF19999
.
.         RF1.6  Originating Referral Identifier (EI)
.
LRF10600  BRANCH    COMPCNT,LRF10601:            * entity identifier (ST)
                            LRF10602:            * namespace id (IS)
                            LRF10603:            * universal id (ST)
                            LRF10604             * universal id type (ID)
          GOTO      LRF19999
.
LRF10601  APPEND    ANS,RF100601                 * entity identifier (ST)
          GOTO      LRF19999
.
LRF10602  APPEND    ANS,RF100602                 * namespace id (IS)
          GOTO      LRF19999
.
LRF10603  APPEND    ANS,RF100603                 * universal id (ST)
          GOTO      LRF19999
.
LRF10604  APPEND    ANS,RF100604                 * universal id type (ID)
          GOTO      LRF19999
.
.         RF1.7  Effective Referral Date (DT)
.
LRF10700  BRANCH    COMPCNT,LRF10701
.
LRF10701  APPEND    ANS,RF100701
          GOTO      LRF19999
.
.         RF1.11  External Referral Identifier (EI)
.
LRF11100  BRANCH    COMPCNT,LRF11101:            * entity identifier (ST)
                            LRF11102:            * namespace id (IS)
                            LRF11103:            * universal id (ST)
                            LRF11104             * universal id type (ID)
          GOTO      LRF19999
.
LRF11101  APPEND    ANS,RF101101                 * entity identifier (ST)
          GOTO      LRF19999
.
LRF11102  APPEND    ANS,RF101102                 * namespace id (IS)
          GOTO      LRF19999
.
LRF11103  APPEND    ANS,RF101103                 * universal id (ST)
          GOTO      LRF19999
.
LRF11104  APPEND    ANS,RF101104                 * universal id type (ID)
          GOTO      LRF19999
.
LRF19999  RETURN
+
.*****************************************************************************
.*                                 LMFI0000        Called by: PROC0000       *
.*                          Load the MFI fields                              *
.*****************************************************************************
.
LMFI0000  BRANCH    FIELDNO,LMFI0100:            * Master File Identifier
                            LMFI0200:            * Master File App. Identifier
                            LMFI0300:            * File-Level Event Code
                            LMFI0400:            * Entered Date/Time
                            LMFI0500:            * Effective Date/Time
                            LMFI0600             * Response level Code
.
.         Invalid MFI field received, so ignore it
.
          GOTO      LMFI9999
.
.         MFI.1  Master File Identifier (CE)
.
LMFI0100  BRANCH    COMPCNT,LMFI0101:            * identifier (ST)
                            LMFI0102:            * text (ST)
                            LMFI0103:            * name of coding system (ST)
                            LMFI0104:            * alternate identifier (ST)
                            LMFI0105:            * alternate text (ST)
                            LMFI0106             * name of alt. cod. system (ST)
          GOTO      LMFI9999
.
LMFI0101  APPEND    ANS,MFI00101                 * identifier (ST)
          GOTO      LMFI9999
.
LMFI0102  APPEND    ANS,MFI00102                 * text (ST)
          GOTO      LMFI9999
.
LMFI0103  APPEND    ANS,MFI00103                 * name of coding system (ST)
          GOTO      LMFI9999
.
LMFI0104  APPEND    ANS,MFI00104                 * alternate identifier (ST)
          GOTO      LMFI9999
.
LMFI0105  APPEND    ANS,MFI00105                 * alternate text (ST)
          GOTO      LMFI9999
.
LMFI0106  APPEND    ANS,MFI00106                 * name of alt. cod. system (ST)
          GOTO      LMFI9999
.
.         MFI.2 Master File Application Identifier (HD)
.
LMFI0200  BRANCH    COMPCNT,LMFI0201:            * namespace ID
                            LMFI0202:            * universal ID
                            LMFI0203             * universal ID type
          GOTO      LMFI9999
.
LMFI0201  APPEND    ANS,MFI00201                 * load namespace id (IS)
          GOTO      LMFI9999
.
LMFI0202  APPEND    ANS,MFI00202                 * load universal id (ST)
          GOTO      LMFI9999
.
LMFI0203  APPEND    ANS,MFI00203                 * load universal id type (ID)
          GOTO      LMFI9999
.
.         MFI.3 File-Level Event Code (ID)
.
LMFI0300  BRANCH    COMPCNT,LMFI0301
          GOTO      LMFI9999
.
LMFI0301  APPEND    ANS,MFI00301
          GOTO      LMFI9999
.
.         MFI.4  Entered Date/Time (TS)
.
LMFI0400  BRANCH    COMPCNT,LMFI0401
.
LMFI0401  APPEND    ANS,MFI00401
          GOTO      LMFI9999
.
.         MFI.5  Effective Date/Time (TS)
.
LMFI0500  BRANCH    COMPCNT,LMFI0501
.
LMFI0501  APPEND    ANS,MFI00501
          GOTO      LMFI9999
.
.         MFI.6 Response Level Code (ID)
.
LMFI0600  BRANCH    COMPCNT,LMFI0601
          GOTO      LMFI9999
.
LMFI0601  APPEND    ANS,MFI00601
          GOTO      LMFI9999
.
LMFI9999  RETURN
+
.*****************************************************************************
.*                                 LMFE0000        Called by: PROC0000       *
.*                          Load the MFE fields                              *
.*****************************************************************************
.
LMFE0000  BRANCH    FIELDNO,LMFE0100:            * Record-Level Event Code
                            LMFE0200:            * MFN Control ID
                            LMFE0300:            * Effective Date/Time
                            LMFE0400:            * Primary Key Value - MFE
                            LMFE0500             * Primary Key Value Type
.
.         Invalid MFE field received, so ignore it
.
          GOTO      LMFE9999
.
.         MFE.1 Record-Level Event Code (ID)
.
LMFE0100  BRANCH    COMPCNT,LMFE0101
          GOTO      LMFE9999
.
LMFE0101  APPEND    ANS,MFE00101
          GOTO      LMFE9999
.
.         MFE.2 MFN Control ID (ST)
.
LMFE0200  BRANCH    COMPCNT,LMFE0201
          GOTO      LMFE9999
.
LMFE0201  APPEND    ANS,MFE00201
          GOTO      LMFE9999
.
.         MFE.3  Effective Date/Time (TS)
.
LMFE0300  BRANCH    COMPCNT,LMFE0301
.
LMFE0301  APPEND    ANS,MFE00301
          GOTO      LMFE9999
.
.         MFE.4  Primary Key Value - MFE (CE)
.
LMFE0400  BRANCH    COMPCNT,LMFE0401:            * identifier (ST)
                            LMFE0402:            * text (ST)
                            LMFE0403:            * name of coding system (ST)
                            LMFE0404:            * alternate identifier (ST)
                            LMFE0405:            * alternate text (ST)
                            LMFE0406             * name of alt. cod. system (ST)
          GOTO      LMFE9999
.
LMFE0401  APPEND    ANS,MFE00401                 * identifier (ST)
          GOTO      LMFE9999
.
LMFE0402  APPEND    ANS,MFE00402                 * text (ST)
          GOTO      LMFE9999
.
LMFE0403  APPEND    ANS,MFE00403                 * name of coding system (ST)
          GOTO      LMFE9999
.
LMFE0404  APPEND    ANS,MFE00404                 * alternate identifier (ST)
          GOTO      LMFE9999
.
LMFE0405  APPEND    ANS,MFE00405                 * alternate text (ST)
          GOTO      LMFE9999
.
LMFE0406  APPEND    ANS,MFE00406                 * name of alt. cod. system (ST)
          GOTO      LMFE9999
.
.         MFE.5 Primary Key Value Type (ID)
.
LMFE0500  BRANCH    COMPCNT,LMFE0501
          GOTO      LMFE9999
.
LMFE0501  APPEND    ANS,MFE00501
          GOTO      LMFE9999
.
LMFE9999  RETURN
+
.*****************************************************************************
.*                                 LSTF0000        Called by: PROC0000       *
.*                          Load the STF fields                              *
.*****************************************************************************
.
LSTF0000  BRANCH    FIELDNO,LSTF0100:            * Primary Key Value - STF
                            LSTF0200:            * Staff ID Code
                            LSTF0300:            * Staff Name
                            LSTF0400:            * Staff Type
                            LSTF0500:            * Sex
                            LSTF0600:            * Date/Time of Birth
                            LSTF0700:            * Active/Inactive Flag
                            LSTF0800:            * Department
                            LSTF0900:            * Hospital Service
                            LSTF1000:            * Phone
                            LSTF1100:            * Office/Home Address
                            LSTF1200:            * Institution Activation Date
                            LSTF1300:            * Institution Inactivation Date
                            LSTF1400:            * Backup Person ID
                            LSTF1500:            * E-Mail Address
                            LSTF1600:            * Preferred Method of Contact
                            LSTF1700:            * Marital Status
                            LSTF1800:            * Job Title
                            LSTF1900:            * Job Code/Class
                            LSTF2000:            * Employment Status
                            LSTF2100:            * Additional Insured on Auto
                            LSTF2200:            * Driver's License No - Staff
                            LSTF2300:            * Copy Auto Ins
                            LSTF2400:            * Auto Ins. Expires
                            LSTF2500:            * Date Last DMV Review
                            LSTF2600:            * Date Next DMV Review
                            LSTF2700:            * Race
                            LSTF2800:            * Ethnic Group
                            LSTF2900             * Re-activation Appr. Indicator
.
.         Invalid STF field received, so ignore it
.
          GOTO      LSTF9999
.
.         STF.1  Primary Key Value - STF (CE)
.
LSTF0100  BRANCH    COMPCNT,LSTF0101:            * identifier (ST)
                            LSTF0102:            * text (ST)
                            LSTF0103:            * name of coding system (ST)
                            LSTF0104:            * alternate identifier (ST)
                            LSTF0105:            * alternate text (ST)
                            LSTF0106             * name of alt. cod. system (ST)
          GOTO      LSTF9999
.
LSTF0101  APPEND    ANS,STF00101                 * identifier (ST)
          GOTO      LSTF9999
.
LSTF0102  APPEND    ANS,STF00102                 * text (ST)
          GOTO      LSTF9999
.
LSTF0103  APPEND    ANS,STF00103                 * name of coding system (ST)
          GOTO      LSTF9999
.
LSTF0104  APPEND    ANS,STF00104                 * alternate identifier (ST)
          GOTO      LSTF9999
.
LSTF0105  APPEND    ANS,STF00105                 * alternate text (ST)
          GOTO      LSTF9999
.
LSTF0106  APPEND    ANS,STF00106                 * name of alt. cod. system (ST)
          GOTO      LSTF9999
.
.         STF.2 Staff ID Code (CX)
.
LSTF0200  BRANCH    COMPCNT,LSTF0201:            * id (ST)
                            LSTF0202:            * check digit (ST)
                            LSTF0203:            * code ident. chk dig, sch (ID)
                            LSTF0204:            * assigning authority (HD)
                            LSTF0205:            * identifier type code (IS)
                            LSTF0206             * assigning facility (HD)
          GOTO      LSTF9999
.
LSTF0201  APPEND    ANS,STF00201                 * load id (ST)
          GOTO      LSTF9999
.
LSTF0202  APPEND    ANS,STF00202                 * load check digit (ST)
          GOTO      LSTF9999
.
LSTF0203  APPEND    ANS,STF00203                 * load code ident chk dig (ID)
          GOTO      LSTF9999
.
LSTF0204  APPEND    ANS,STF00204                 * load assigning authority (HD)
          GOTO      LSTF9999
.
LSTF0205  APPEND    ANS,STF00205                 * load ident. type code (IS)
          GOTO      LSTF9999
.
LSTF0206  APPEND    ANS,STF00206                 * load assigning facility (HD)
          GOTO      LSTF9999
.
.         STF.3 Staff Name (XPN)
.
LSTF0300  BRANCH    COMPCNT,LSTF0301:            * family name (ST)
                            LSTF0302:            * given name (ST)
                            LSTF0303:            * middle name (ST)
                            LSTF0304:            * suffix (ST)
                            LSTF0305:            * prefix (ST)
                            LSTF0306:            * degree (IS)
                            LSTF0307:            * name type code (ID)
                            LSTF0308             * name representation code (ID)
          GOTO      LSTF9999
.
LSTF0301  APPEND    ANS,STF00301                 * load family name (ST)
          GOTO      LSTF9999
.
LSTF0302  APPEND    ANS,STF00302                 * load given name (ST)
          GOTO      LSTF9999
.
LSTF0303  APPEND    ANS,MRG00303                 * load middle name (ST)
          GOTO      LSTF9999
.
LSTF0304  APPEND    ANS,STF00304                 * load suffix (ST)
          GOTO      LSTF9999
.
LSTF0305  APPEND    ANS,STF00305                 * load prefix (ST)
          GOTO      LSTF9999
.
LSTF0306  APPEND    ANS,STF00306                 * load degree (IS)
          GOTO      LSTF9999
.
LSTF0307  APPEND    ANS,STF00307                 * load name type code (ID)
          GOTO      LSTF9999
.
LSTF0308  APPEND    ANS,STF00308                 * load name rep. code (ID)
          GOTO      LSTF9999
.
.         STF.4  Staff Type (IS)
.
LSTF0400  BRANCH    COMPCNT,LSTF0401
          GOTO      LSTF9999
.
LSTF0401  APPEND    ANS,STF00401
          GOTO      LSTF9999
.
.         STF.5  Sex (IS)
.
LSTF0500  BRANCH    COMPCNT,LSTF0501
          GOTO      LSTF9999
.
LSTF0501  APPEND    ANS,STF00501
          GOTO      LSTF9999
.
.         STF.6  Date/Time of Birth (TS)
.
LSTF0600  BRANCH    COMPCNT,LSTF0601
.
LSTF0601  APPEND    ANS,STF00601
          GOTO      LSTF9999
.
.         STF.7 Active/Inactive Flag (ID)
.
LSTF0700  BRANCH    COMPCNT,LSTF0701
          GOTO      LSTF9999
.
LSTF0701  APPEND    ANS,STF00701
          GOTO      LSTF9999
.
.         STF.8  Department (CE) (maximum of 4 repeats - 5 in total)
.
LSTF0800  COMPARE   REPTNCNT,FIVE                * maximum repeats reached ?
          GOTO      LSTF9999 IF LESS             * yes
.
          BRANCH    COMPCNT,LSTF0801:            * identifier (ST)
                            LSTF0802:            * text (ST)
                            LSTF0803:            * name of coding system (ST)
                            LSTF0804:            * alternate identifier (ST)
                            LSTF0805:            * alternate text (ST)
                            LSTF0806             * name of alt. cod. system (ST)
          GOTO      LSTF9999
.
LSTF0801  APPEND    ANS,STF00801[REPTNCNT]       * identifier (ST)
          GOTO      LSTF9999
.
LSTF0802  APPEND    ANS,STF00802[REPTNCNT]       * text (ST)
          GOTO      LSTF9999
.
LSTF0803  APPEND    ANS,STF00803[REPTNCNT]       * name of coding system (ST)
          GOTO      LSTF9999
.
LSTF0804  APPEND    ANS,STF00804[REPTNCNT]       * alternate identifier (ST)
          GOTO      LSTF9999
.
LSTF0805  APPEND    ANS,STF00805[REPTNCNT]       * alternate text (ST)
          GOTO      LSTF9999
.
LSTF0806  APPEND    ANS,STF00806[REPTNCNT]       * name of alt. cod. system (ST)
          GOTO      LSTF9999
.
.         STF.9  Hospital Service (CE)
.
LSTF0900  BRANCH    COMPCNT,LSTF0901:            * identifier (ST)
                            LSTF0902:            * text (ST)
                            LSTF0903:            * name of coding system (ST)
                            LSTF0904:            * alternate identifier (ST)
                            LSTF0905:            * alternate text (ST)
                            LSTF0906             * name of alt. cod. system (ST)
          GOTO      LSTF9999
.
LSTF0901  APPEND    ANS,STF00901                 * identifier (ST)
          GOTO      LSTF9999
.
LSTF0902  APPEND    ANS,STF00902                 * text (ST)
          GOTO      LSTF9999
.
LSTF0903  APPEND    ANS,STF00903                 * name of coding system (ST)
          GOTO      LSTF9999
.
LSTF0904  APPEND    ANS,STF00904                 * alternate identifier (ST)
          GOTO      LSTF9999
.
LSTF0905  APPEND    ANS,STF00905                 * alternate text (ST)
          GOTO      LSTF9999
.
LSTF0906  APPEND    ANS,STF00906                 * name of alt. cod. system (ST)
          GOTO      LSTF9999
.
.         STF.10 Phone (XTN)
.
LSTF1000  COMPARE   REPTNCNT,SIX                 * maximum repeats reached ?
          GOTO      LSTF9999 IF LESS             * yes
.
          BRANCH    COMPCNT,LSTF1001:            * text
                            LSTF1002:            * telecomm. use code (ID)
                            LSTF1003:            * telcomm. equipment type (ID)
                            LSTF1004:            * email address (ST)
                            LSTF1005:            * country code (NM)
                            LSTF1006:            * area/city code (NM)
                            LSTF1007:            * phone number (NM)
                            LSTF1008:            * extension (NM)
                            LSTF1009             * any text (ST)
          GOTO      LSTF9999
.
LSTF1001  APPEND    ANS,STF01001[REPTNCNT]       * load text
          GOTO      LSTF9999
.
LSTF1002  APPEND    ANS,STF01002[REPTNCNT]       * load telecomm. use code (ID)
          GOTO      LSTF9999
.
LSTF1003  APPEND    ANS,STF01003[REPTNCNT]       * load telcomm. equip.type (ID)
          GOTO      LSTF9999
.
LSTF1004  APPEND    ANS,STF01004[REPTNCNT]       * load email address (ST)
          GOTO      LSTF9999
.
LSTF1005  APPEND    ANS,STF01005[REPTNCNT]       * load country code (NM)
          GOTO      LSTF9999
.
LSTF1006  APPEND    ANS,STF01006[REPTNCNT]       * load area/city code (NM)
          GOTO      LSTF9999
.
LSTF1007  APPEND    ANS,STF01007[REPTNCNT]       * load phone number (NM)
          GOTO      LSTF9999
.
LSTF1008  APPEND    ANS,STF01008[REPTNCNT]       * load extension (NM)
          GOTO      LSTF9999
.
LSTF1009  APPEND    ANS,STF01009[REPTNCNT]       * load any text (ST)
          GOTO      LSTF9999
.
.         STF.11 Office/Home Address (XAD)
.
LSTF1100  COMPARE   REPTNCNT,TWO                 * maximum repeats reached ?
          GOTO      LSTF9999 IF LESS             * yes
.
          BRANCH    COMPCNT,LSTF1101:            * street address (ST)
                            LSTF1102:            * other designation (ST)
                            LSTF1103:            * city (ST)
                            LSTF1104:            * state (ST)
                            LSTF1105:            * postcode (ST)
                            LSTF1106:            * country (ID)
                            LSTF1107:            * address type (ID)
                            LSTF1108:            * other geographic desig. (ST)
                            LSTF1109:            * county (IS)
                            LSTF1110:            * census tract (IS)
                            LSTF1111:            * address code (ID)
                            LSTF1112             * address rep. code (ID)
          GOTO      LSTF9999
.
LSTF1101  APPEND    ANS,STF01101[REPTNCNT]       * load street address (ST)
          GOTO      LSTF9999
.
LSTF1102  APPEND    ANS,STF01102[REPTNCNT]       * load other designation (ST)
          GOTO      LSTF9999
.
LSTF1103  APPEND    ANS,STF01103[REPTNCNT]       * load city (ST)
          GOTO      LSTF9999
.
LSTF1104  APPEND    ANS,STF01104[REPTNCNT]       * load state (ST)
          GOTO      LSTF9999
.
LSTF1105  APPEND    ANS,STF01105[REPTNCNT]       * load postcode (ST)
          GOTO      LSTF9999
.
LSTF1106  APPEND    ANS,STF01106[REPTNCNT]       * load country (ID)
          GOTO      LSTF9999
.
LSTF1107  APPEND    ANS,STF01107[REPTNCNT]       * load address type (ID)
          GOTO      LSTF9999
.
LSTF1108  APPEND    ANS,STF01108[REPTNCNT]       * load other geog. desig. (ST)
          GOTO      LSTF9999
.
LSTF1109  APPEND    ANS,STF01109[REPTNCNT]       * load county (IS)
          GOTO      LSTF9999
.
LSTF1110  APPEND    ANS,STF01110[REPTNCNT]       * load census tract (IS)
          GOTO      LSTF9999
.
LSTF1111  APPEND    ANS,STF01111[REPTNCNT]       * load address code (ID)
          GOTO      LSTF9999
.
LSTF1112  APPEND    ANS,STF01112[REPTNCNT]       * load address rep code (ID)
          GOTO      LSTF9999
.
.         STF.12  Institution Activation Date (CM)
.
LSTF1200  BRANCH    COMPCNT,LSTF1201:            * date  (TS)
                            LSTF1202             * institution name (CE)
          GOTO      LSTF9999
.
LSTF1201  APPEND    ANS,STF01201                 * date (TS)
          GOTO      LSTF9999
.
LSTF1202  APPEND    ANS,STF01202                 * institution name (CE)
          GOTO      LSTF9999
.
.         STF.13  Institution Inactivation Date (CM)
.
LSTF1300  BRANCH    COMPCNT,LSTF1301:            * date  (TS)
                            LSTF1302             * institution name (CE)
          GOTO      LSTF9999
.
LSTF1301  APPEND    ANS,STF01301                 * date (TS)
          GOTO      LSTF9999
.
LSTF1302  APPEND    ANS,STF01302                 * institution name (CE)
          GOTO      LSTF9999
.
.         STF.14  Backup Person ID (CE)
.
LSTF1400  BRANCH    COMPCNT,LSTF1401:            * identifier (ST)
                            LSTF1402:            * text (ST)
                            LSTF1403:            * name of coding system (ST)
                            LSTF1404:            * alternate identifier (ST)
                            LSTF1405:            * alternate text (ST)
                            LSTF1406             * name of alt. cod. system (ST)
          GOTO      LSTF9999
.
LSTF1401  APPEND    ANS,STF01401                 * identifier (ST)
          GOTO      LSTF9999
.
LSTF1402  APPEND    ANS,STF01402                 * text (ST)
          GOTO      LSTF9999
.
LSTF1403  APPEND    ANS,STF01403                 * name of coding system (ST)
          GOTO      LSTF9999
.
LSTF1404  APPEND    ANS,STF01404                 * alternate identifier (ST)
          GOTO      LSTF9999
.
LSTF1405  APPEND    ANS,STF01405                 * alternate text (ST)
          GOTO      LSTF9999
.
LSTF1406  APPEND    ANS,STF01406                 * name of alt. cod. system (ST)
          GOTO      LSTF9999
.
.         STF.15  E-Mail Address (ST)
.                 (maximum of 4 repeats - 5 email addresses in total)
.
LSTF1500  COMPARE   REPTNCNT,FIVE                * maximum repeats reached ?
          GOTO      LSTF9999 IF LESS             * yes
.
          BRANCH    COMPCNT,LSTF1501
.
LSTF1501  APPEND    ANS,STF01501[REPTNCNT]
          GOTO      LSTF9999
.
.         STF.16  Preferred Method of Contact (CE)
.
LSTF1600  BRANCH    COMPCNT,LSTF1601:            * identifier (ST)
                            LSTF1602:            * text (ST)
                            LSTF1603:            * name of coding system (ST)
                            LSTF1604:            * alternate identifier (ST)
                            LSTF1605:            * alternate text (ST)
                            LSTF1606             * name of alt. cod. system (ST)
          GOTO      LSTF9999
.
LSTF1601  APPEND    ANS,STF01601                 * identifier (ST)
          GOTO      LSTF9999
.
LSTF1602  APPEND    ANS,STF01602                 * text (ST)
          GOTO      LSTF9999
.
LSTF1603  APPEND    ANS,STF01603                 * name of coding system (ST)
          GOTO      LSTF9999
.
LSTF1604  APPEND    ANS,STF01604                 * alternate identifier (ST)
          GOTO      LSTF9999
.
LSTF1605  APPEND    ANS,STF01605                 * alternate text (ST)
          GOTO      LSTF9999
.
LSTF1606  APPEND    ANS,STF01606                 * name of alt. cod. system (ST)
          GOTO      LSTF9999
.
.         STF.17  Marital Status (CE)
.
LSTF1700  BRANCH    COMPCNT,LSTF1701:            * identifier (ST)
                            LSTF1702:            * text (ST)
                            LSTF1703:            * name of coding system (ST)
                            LSTF1704:            * alternate identifier (ST)
                            LSTF1705:            * alternate text (ST)
                            LSTF1706             * name of alt. cod. system (ST)
          GOTO      LSTF9999
.
LSTF1701  APPEND    ANS,STF01701                 * identifier (ST)
          GOTO      LSTF9999
.
LSTF1702  APPEND    ANS,STF01702                 * text (ST)
          GOTO      LSTF9999
.
LSTF1703  APPEND    ANS,STF01703                 * name of coding system (ST)
          GOTO      LSTF9999
.
LSTF1704  APPEND    ANS,STF01704                 * alternate identifier (ST)
          GOTO      LSTF9999
.
LSTF1705  APPEND    ANS,STF01705                 * alternate text (ST)
          GOTO      LSTF9999
.
LSTF1706  APPEND    ANS,STF01706                 * name of alt. cod. system (ST)
          GOTO      LSTF9999
.
.         STF.18  Job Title (ST)
.
LSTF1800  BRANCH    COMPCNT,LSTF1801
.
LSTF1801  APPEND    ANS,STF01801
          GOTO      LSTF9999
.
.         STF.19 Job Code/Class (JCC)
.
LSTF1900  BRANCH    COMPCNT,LSTF1901:            * job code (ST)
                            LSTF1902             * job class (IS)
          GOTO      LSTF9999
.
LSTF1901  APPEND    ANS,STF01901                 * job code (ST)
          GOTO      LSTF9999
.
LSTF1902  APPEND    ANS,STF01902                 * job class (IS)
          GOTO      LSTF9999
.
.         STF.20  Employment Status (CE)
.
LSTF2000  BRANCH    COMPCNT,LSTF2001:            * identifier (ST)
                            LSTF2002:            * text (ST)
                            LSTF2003:            * name of coding system (ST)
                            LSTF2004:            * alternate identifier (ST)
                            LSTF2005:            * alternate text (ST)
                            LSTF2006             * name of alt. cod. system (ST)
          GOTO      LSTF9999
.
LSTF2001  APPEND    ANS,STF02001
          GOTO      LSTF9999
.
LSTF2002  APPEND    ANS,STF02002
          GOTO      LSTF9999
.
LSTF2003  APPEND    ANS,STF02003
          GOTO      LSTF9999
.
LSTF2004  APPEND    ANS,STF02004
          GOTO      LSTF9999
.
LSTF2005  APPEND    ANS,STF02005
          GOTO      LSTF9999
.
LSTF2006  APPEND    ANS,STF02006
          GOTO      LSTF9999
.
.         STF.21 Additional Insured on Auto (ID)
.
LSTF2100  BRANCH    COMPCNT,LSTF2101
          GOTO      LSTF9999
.
LSTF2101  APPEND    ANS,STF02101
          GOTO      LSTF9999
.
.         STF.22 Driver's License Number - Staff (DLN)
.
LSTF2200  BRANCH    COMPCNT,LSTF2201:            * license number (ST)
                            LSTF2202:            * issuing state (IS)
                            LSTF2203             * expiration date (DT)
          GOTO      LSTF9999
.
LSTF2201  APPEND    ANS,STF02201                 * load license number (ST)
          GOTO      LSTF9999
.
LSTF2202  APPEND    ANS,STF02202                 * load issuing state (IS)
          GOTO      LSTF9999
.
LSTF2203  APPEND    ANS,STF02203                 * load expiration date (DT)
          GOTO      LSTF9999
.
.         STF.23 Copy Auto Ins (ID)
.
LSTF2300  BRANCH    COMPCNT,LSTF2301
          GOTO      LSTF9999
.
LSTF2301  APPEND    ANS,STF02301
          GOTO      LSTF9999
.
.         STF.24  Auto Ins. Expires (DT)
.
LSTF2400  BRANCH    COMPCNT,LSTF2401
.
LSTF2401  APPEND    ANS,STF02401
          GOTO      LSTF9999
.
.         STF.25  Date Last DMV Review (DT)
.
LSTF2500  BRANCH    COMPCNT,LSTF2501
.
LSTF2501  APPEND    ANS,STF02501
          GOTO      LSTF9999
.
.         STF.26  Date Next DMV Review (DT)
.
LSTF2600  BRANCH    COMPCNT,LSTF2601
.
LSTF2601  APPEND    ANS,STF02601
          GOTO      LSTF9999
.
.         STF.27  Race (CE)
.
LSTF2700  BRANCH    COMPCNT,LSTF2701:            * identifier (ST)
                            LSTF2702:            * text (ST)
                            LSTF2703:            * name of coding system (ST)
                            LSTF2704:            * alternate identifier (ST)
                            LSTF2705:            * alternate text (ST)
                            LSTF2706             * name of alt. cod. system (ST)
          GOTO      LSTF9999
.
LSTF2701  APPEND    ANS,STF02701
          GOTO      LSTF9999
.
LSTF2702  APPEND    ANS,STF02702
          GOTO      LSTF9999
.
LSTF2703  APPEND    ANS,STF02703
          GOTO      LSTF9999
.
LSTF2704  APPEND    ANS,STF02704
          GOTO      LSTF9999
.
LSTF2705  APPEND    ANS,STF02705
          GOTO      LSTF9999
.
LSTF2706  APPEND    ANS,STF02706
          GOTO      LSTF9999
.
.         STF.28  Ethnic Group (CE)
.
LSTF2800  BRANCH    COMPCNT,LSTF2801:            * identifier (ST)
                            LSTF2802:            * text (ST)
                            LSTF2803:            * name of coding system (ST)
                            LSTF2804:            * alternate identifier (ST)
                            LSTF2805:            * alternate text (ST)
                            LSTF2806             * name of alt. cod. system (ST)
          GOTO      LSTF9999
.
LSTF2801  APPEND    ANS,STF02801
          GOTO      LSTF9999
.
LSTF2802  APPEND    ANS,STF02802
          GOTO      LSTF9999
.
LSTF2803  APPEND    ANS,STF02803
          GOTO      LSTF9999
.
LSTF2804  APPEND    ANS,STF02804
          GOTO      LSTF9999
.
LSTF2805  APPEND    ANS,STF02805
          GOTO      LSTF9999
.
LSTF2806  APPEND    ANS,STF02806
          GOTO      LSTF9999
.
.         STF.29  Re-activation Approval Indicator (CE)
.
LSTF2900  BRANCH    COMPCNT,LSTF2901             * identifier (ST)
          GOTO      LSTF9999
.
LSTF2901  APPEND    ANS,STF02901
          GOTO      LSTF9999
.
LSTF9999  RETURN
+
.*****************************************************************************
.*                                 LPRA0000        Called by: PROC0000       *
.*                          Load the PRA fields                              *
.*****************************************************************************
.
LPRA0000  BRANCH    FIELDNO,LPRA0100:            * Primary Key Value - PRA
                            LPRA0200:            * Practitioner Group
                            LPRA0300:            * Practitioner Category
                            LPRA0400:            * Provider Billing
                            LPRA0500:            * Specialty
                            LPRA0600:            * Practitioner ID Numbers
                            LPRA0700:            * Privileges
                            LPRA0800:            * Date Entered Practice
                            LPRA0900:            * Institution
                            LPRA1000:            * Date Left Practice
                            LPRA1100:            * Gov Reimb Billing Eligibility
                            LPRA1200             * Set ID - PRA
.
.         Invalid PRA field received, so ignore it
.
          GOTO      LPRA9999
.
.         PRA.1  Primary Key Value - PRA (CE)
.
LPRA0100  BRANCH    COMPCNT,LPRA0101:            * identifier (ST)
                            LPRA0102:            * text (ST)
                            LPRA0103:            * name of coding system (ST)
                            LPRA0104:            * alternate identifier (ST)
                            LPRA0105:            * alternate text (ST)
                            LPRA0106             * name of alt. cod. system (ST)
          GOTO      LPRA9999
.
LPRA0101  APPEND    ANS,PRA00101                 * identifier (ST)
          GOTO      LPRA9999
.
LPRA0102  APPEND    ANS,PRA00102                 * text (ST)
          GOTO      LPRA9999
.
LPRA0103  APPEND    ANS,PRA00103                 * name of coding system (ST)
          GOTO      LPRA9999
.
LPRA0104  APPEND    ANS,PRA00104                 * alternate identifier (ST)
          GOTO      LPRA9999
.
LPRA0105  APPEND    ANS,PRA00105                 * alternate text (ST)
          GOTO      LPRA9999
.
LPRA0106  APPEND    ANS,PRA00106                 * name of alt. cod. system (ST)
          GOTO      LPRA9999
.
.         PRA.2  Practitioner Group (CE)
.
LPRA0200  BRANCH    COMPCNT,LPRA0201:            * identifier (ST)
                            LPRA0202:            * text (ST)
                            LPRA0203:            * name of coding system (ST)
                            LPRA0204:            * alternate identifier (ST)
                            LPRA0205:            * alternate text (ST)
                            LPRA0206             * name of alt. cod. system (ST)
          GOTO      LPRA9999
.
LPRA0201  APPEND    ANS,PRA00201                 * identifier (ST)
          GOTO      LPRA9999
.
LPRA0202  APPEND    ANS,PRA00202                 * text (ST)
          GOTO      LPRA9999
.
LPRA0203  APPEND    ANS,PRA00203                 * name of coding system (ST)
          GOTO      LPRA9999
.
LPRA0204  APPEND    ANS,PRA00204                 * alternate identifier (ST)
          GOTO      LPRA9999
.
LPRA0205  APPEND    ANS,PRA00205                 * alternate text (ST)
          GOTO      LPRA9999
.
LPRA0206  APPEND    ANS,PRA00206                 * name of alt. cod. system (ST)
          GOTO      LPRA9999
.
.         PRA.3  Practitioner Category (IS)
.
LPRA0300  BRANCH    COMPCNT,LPRA0301
.
LPRA0301  APPEND    ANS,PRA00301
          GOTO      LPRA9999
.
.         PRA.4  Provider Billing (ID)
.
LPRA0400  BRANCH    COMPCNT,LPRA0401
          GOTO      LPRA9999
.
LPRA0401  APPEND    ANS,PRA00401
          GOTO      LPRA9999
.
.         PRA.5  Specialty (CM)
.
LPRA0500  BRANCH    COMPCNT,LPRA0501:            * specialty name (ST)
                            LPRA0502:            * governing board (ST)
                            LPRA0503:            * eligible or certified (ID)
                            LPRA0504             * date of certification (DT)
          GOTO      LPRA9999
.
LPRA0501  APPEND    ANS,PRA00501                 * specialty name (ST)
          GOTO      LPRA9999
.
LPRA0502  APPEND    ANS,PRA00502                 * governing board (ST)
          GOTO      LPRA9999
.
LPRA0503  APPEND    ANS,PRA00503                 * eligible or certified (ID)
          GOTO      LPRA9999
.
LPRA0504  APPEND    ANS,PRA00504                 * date of certification (DT)
          GOTO      LPRA9999
.
.         PRA.6  Practitioner ID Numbers (CM)
.                 (maximum of 8 repeats - 9 identifiers in total)
.
LPRA0600  COMPARE   REPTNCNT,NINE                * maximum repeats reached ?
          GOTO      LPRA9999 IF LESS             * yes
.
          BRANCH    COMPCNT,LPRA0601:            * id number (ST)
                            LPRA0602:            * type of id number (IS)
                            LPRA0603:            * state/other qual. info (ST)
                            LPRA0604             * expiration date (DT)
          GOTO      LPRA9999
.
LPRA0601  APPEND    ANS,PRA00601[REPTNCNT]       * id number (ST)
          GOTO      LPRA9999
.
LPRA0602  APPEND    ANS,PRA00602[REPTNCNT]       * type of id number (IS)
          GOTO      LPRA9999
.
LPRA0603  APPEND    ANS,PRA00603[REPTNCNT]       * state/other qual. info (ST)
          GOTO      LPRA9999
.
LPRA0604  APPEND    ANS,PRA00604[REPTNCNT]       * expiration date (DT)
          GOTO      LPRA9999
.
.         PRA.7  Privileges (CM)
.
LPRA0700  BRANCH    COMPCNT,LPRA0701:            * privilege/class  (CE)
                            LPRA0702:            * expiration date (DT)
                            LPRA0703:            * activation date (DT)
                            LPRA0704             * facility (EI)
          GOTO      LPRA9999
.
LPRA0701  APPEND    ANS,PRA00701                 * privilege/class (CE)
          GOTO      LPRA9999
.
LPRA0702  APPEND    ANS,PRA00702                 * expiration date (DT)
          GOTO      LPRA9999
.
LPRA0703  APPEND    ANS,PRA00703                 * activation date (DT)
          GOTO      LPRA9999
.
LPRA0704  APPEND    ANS,PRA00704                 * facility (EI)
          GOTO      LPRA9999
.
.         PRA.8  Date Entered Practice (DT)
.
LPRA0800  BRANCH    COMPCNT,LPRA0801
.
LPRA0801  APPEND    ANS,PRA00801
          GOTO      LPRA9999
.
.         PRA.9  Institution (CE)
.
LPRA0900  BRANCH    COMPCNT,LPRA0901:            * identifier (ST)
                            LPRA0902:            * text (ST)
                            LPRA0903:            * name of coding system (ST)
                            LPRA0904:            * alternate identifier (ST)
                            LPRA0905:            * alternate text (ST)
                            LPRA0906             * name of alt. cod. system (ST)
          GOTO      LPRA9999
.
LPRA0901  APPEND    ANS,PRA00901                 * identifier (ST)
          GOTO      LPRA9999
.
LPRA0902  APPEND    ANS,PRA00902                 * text (ST)
          GOTO      LPRA9999
.
LPRA0903  APPEND    ANS,PRA00903                 * name of coding system (ST)
          GOTO      LPRA9999
.
LPRA0904  APPEND    ANS,PRA00904                 * alternate identifier (ST)
          GOTO      LPRA9999
.
LPRA0905  APPEND    ANS,PRA00905                 * alternate text (ST)
          GOTO      LPRA9999
.
LPRA0906  APPEND    ANS,PRA00906                 * name of alt. cod. system (ST)
          GOTO      LPRA9999
.
.         PRA.10  Date Left Practice (DT)
.
LPRA1000  BRANCH    COMPCNT,LPRA1001
.
LPRA1001  APPEND    ANS,PRA01001
          GOTO      LPRA9999
.
.         PRA.11  Government Reimbursement Billing Eligibility (CE)
.
LPRA1100  BRANCH    COMPCNT,LPRA1101:            * identifier (ST)
                            LPRA1102:            * text (ST)
                            LPRA1103:            * name of coding system (ST)
                            LPRA1104:            * alternate identifier (ST)
                            LPRA1105:            * alternate text (ST)
                            LPRA1106             * name of alt. cod. system (ST)
          GOTO      LPRA9999
.
LPRA1101  APPEND    ANS,PRA01101                 * identifier (ST)
          GOTO      LPRA9999
.
LPRA1102  APPEND    ANS,PRA01102                 * text (ST)
          GOTO      LPRA9999
.
LPRA1103  APPEND    ANS,PRA01103                 * name of coding system (ST)
          GOTO      LPRA9999
.
LPRA1104  APPEND    ANS,PRA01104                 * alternate identifier (ST)
          GOTO      LPRA9999
.
LPRA1105  APPEND    ANS,PRA01105                 * alternate text (ST)
          GOTO      LPRA9999
.
LPRA1106  APPEND    ANS,PRA01106                 * name of alt. cod. system (ST)
          GOTO      LPRA9999
.
.         PRA.12  Set ID - PRA (SI)
.
LPRA1200  BRANCH    COMPCNT,LPRA1201
.
LPRA1201  APPEND    ANS,PRA01201
          GOTO      LPRA9999
.
LPRA9999  RETURN
+
.*****************************************************************************
.*                                 LZPR0000        Called by: PROC0000       *
.*                          Load the ZPR fields                              *
.*****************************************************************************
.
LZPR0000  BRANCH    FIELDNO,LZPR0100:            * Set ID (SI)
                            LZPR0200:            * Clinic ID (ST)
                            LZPR0300:            * Clinic Description (ST)
                            LZPR0400:            * Clinic Type (CM)
                            LZPR0500:            * Clinic Address (XAD)
                            LZPR0600:            * Clinic Phone Numbers (XTN)
                            LZPR0700:            * Date Practice Started (DT)
                            LZPR0800:            * Date Practice Ended (DT)
                            LZPR0900:            * Practice Provider Number (ST)
                            LZPR1000:            * Pract Preferred Contact (ST)
                            LZPR1100:            * Pract Senior HCP (ST)
                            LZPR1200:            * Update Flag (ID)
                            LZPR1300:            * Fax Disch. Summary Flag (ID)
                            LZPR1400:            * Elec Disch. Summary Flag (ID)
                            LZPR1500:            * Prac. Link Active Flag (ID)
                            LZPR1600:            * SMD GUID value 1 (ST)
                            LZPR1700:            * SMD GUID value 2 (ST)
                            LZPR1800             * HPI-O value (ST)
.
.         Invalid ZPR field received, so ignore it
.
          GOTO      LZPR9999
.
.         ZPR.1  Set ID (SI)
.
LZPR0100  BRANCH    COMPCNT,LZPR0101
.
LZPR0101  APPEND    ANS,ZPR00101
          GOTO      LZPR9999
.
.         ZPR.2  Clinic ID (ST)
.
LZPR0200  BRANCH    COMPCNT,LZPR0201
.
LZPR0201  APPEND    ANS,ZPR00201
          GOTO      LZPR9999
.
.         ZPR.3  Clinic Description (ST)
.
LZPR0300  BRANCH    COMPCNT,LZPR0301
.
LZPR0301  APPEND    ANS,ZPR00301
          GOTO      LZPR9999
.
.         ZPR.4  Clinic Type (CM)
.
LZPR0400  BRANCH    COMPCNT,LZPR0401
.
LZPR0401  APPEND    ANS,ZPR00401
          GOTO      LZPR9999
.
.         ZPR.5 Clinic Address (XAD)
.
LZPR0500  BRANCH    COMPCNT,LZPR0501:            * street address (ST)
                            LZPR0502:            * other designation (ST)
                            LZPR0503:            * city (ST)
                            LZPR0504:            * state (ST)
                            LZPR0505:            * postcode (ST)
                            LZPR0506:            * country (ID)
                            LZPR0507:            * address type (ID)
                            LZPR0508:            * other geographic desig. (ST)
                            LZPR0509:            * county (IS)
                            LZPR0510:            * census tract (IS)
                            LZPR0511             * address rep. code (ID)
          GOTO      LZPR9999
.
LZPR0501  APPEND    ANS,ZPR00501                 * load street address (ST)
          GOTO      LZPR9999
.
LZPR0502  APPEND    ANS,ZPR00502                 * load other designation (ST)
          GOTO      LZPR9999
.
LZPR0503  APPEND    ANS,ZPR00503                 * load city (ST)
          GOTO      LZPR9999
.
LZPR0504  APPEND    ANS,ZPR00504                 * load state (ST)
          GOTO      LZPR9999
.
LZPR0505  APPEND    ANS,ZPR00505                 * load postcode (ST)
          GOTO      LZPR9999
.
LZPR0506  APPEND    ANS,ZPR00506                 * load country (ID)
          GOTO      LZPR9999
.
LZPR0507  APPEND    ANS,ZPR00507                 * load address type (ID)
          GOTO      LZPR9999
.
LZPR0508  APPEND    ANS,ZPR00508                 * load other geog. desig. (ST)
          GOTO      LZPR9999
.
LZPR0509  APPEND    ANS,ZPR00509                 * load county (IS)
          GOTO      LZPR9999
.
LZPR0510  APPEND    ANS,ZPR00510                 * load census tract (IS)
          GOTO      LZPR9999
.
LZPR0511  APPEND    ANS,ZPR00511                 * load address rep code (ID)
          GOTO      LZPR9999
.
.         ZPR.6 Phone (XTN)
.                (maximum of 4 repeat - 5 phone numbers in total)
.
LZPR0600  COMPARE   REPTNCNT,FIVE                * maximum repeats reached ?
          GOTO      LZPR9999 IF LESS             * yes
.
          BRANCH    COMPCNT,LZPR0601:            * text
                            LZPR0602:            * telecomm. use code (ID)
                            LZPR0603:            * telcomm. equipment type (ID)
                            LZPR0604:            * email address (ST)
                            LZPR0605:            * country code (NM)
                            LZPR0606:            * area/city code (NM)
                            LZPR0607:            * phone number (NM)
                            LZPR0608:            * extension (NM)
                            LZPR0609             * any text (ST)
          GOTO      LZPR9999
.
LZPR0601  APPEND    ANS,ZPR00601[REPTNCNT]       * load text
          GOTO      LZPR9999
.
LZPR0602  APPEND    ANS,ZPR00602[REPTNCNT]       * load telecomm. use code (ID)
          GOTO      LZPR9999
.
LZPR0603  APPEND    ANS,ZPR00603[REPTNCNT]       * load telcomm. equip.type (ID)
          GOTO      LZPR9999
.
LZPR0604  APPEND    ANS,ZPR00604[REPTNCNT]       * load email address (ST)
          GOTO      LZPR9999
.
LZPR0605  APPEND    ANS,ZPR00605[REPTNCNT]       * load country code (NM)
          GOTO      LZPR9999
.
LZPR0606  APPEND    ANS,ZPR00606[REPTNCNT]       * load area/city code (NM)
          GOTO      LZPR9999
.
LZPR0607  APPEND    ANS,ZPR00607[REPTNCNT]       * load phone number (NM)
          GOTO      LZPR9999
.
LZPR0608  APPEND    ANS,ZPR00608[REPTNCNT]       * load extension (NM)
          GOTO      LZPR9999
.
LZPR0609  APPEND    ANS,ZPR00609[REPTNCNT]       * load any text (ST)
          GOTO      LZPR9999
.
.         ZPR.7  Date Practice Started (TM)
.
LZPR0700  BRANCH    COMPCNT,LZPR0701
.
LZPR0701  APPEND    ANS,ZPR00701
          GOTO      LZPR9999
.
.         ZPR.8  Date Practice Ended (TM)
.
LZPR0800  BRANCH    COMPCNT,LZPR0801
.
LZPR0801  APPEND    ANS,ZPR00801
          GOTO      LZPR9999
.
.         ZPR.9  Practice Provider Number (ST)
.
LZPR0900  BRANCH    COMPCNT,LZPR0901
.
LZPR0901  APPEND    ANS,ZPR00901
          GOTO      LZPR9999
.
.         ZPR.10 Practice Preferred Contact (ST)
.
LZPR1000  BRANCH    COMPCNT,LZPR1001
.
LZPR1001  APPEND    ANS,ZPR01001
          GOTO      LZPR9999
.
.         ZPR.11 Practice Senior HCP (ST)
.
LZPR1100  BRANCH    COMPCNT,LZPR1101
.
LZPR1101  APPEND    ANS,ZPR01101
          GOTO      LZPR9999
.
.         ZPR.12 Update Flag (ID)
.
LZPR1200  BRANCH    COMPCNT,LZPR1201
.
LZPR1201  APPEND    ANS,ZPR01201
          GOTO      LZPR9999
.
.         ZPR.13 Fax Discharge Summary Flag (ID)
.
LZPR1300  BRANCH    COMPCNT,LZPR1301
.
LZPR1301  APPEND    ANS,ZPR01301
          GOTO      LZPR9999
.
.         ZPR.14 Electronic Discharge Summary Flag (ID)
.
LZPR1400  BRANCH    COMPCNT,LZPR1401
.
LZPR1401  APPEND    ANS,ZPR01401
          GOTO      LZPR9999
.
.         ZPR.15 Practice Link Active Flag (ID)
.
LZPR1500  BRANCH    COMPCNT,LZPR1501
.
LZPR1501  APPEND    ANS,ZPR01501
          GOTO      LZPR9999
.
.         ZPR.16  SMD GUID value 1 (ST)
.
LZPR1600  BRANCH    COMPCNT,LZPR1601             * text (ST)
          GOTO      LZPR9999
.
LZPR1601  APPEND    ANS,ZPR01601
          GOTO      LZPR9999
.
.         ZPR.17  SMD GUID value 2 (ST)
.
LZPR1700  BRANCH    COMPCNT,LZPR1701             * text (ST)
          GOTO      LZPR9999
.
LZPR1701  APPEND    ANS,ZPR01701
          GOTO      LZPR9999
.
.         ZPR.18  HPI-O Value (ST)
.
LZPR1800  BRANCH    COMPCNT,LZPR1801             * text (ST)
          GOTO      LZPR9999
.
LZPR1801  APPEND    ANS,ZPR01801
          GOTO      LZPR9999
.
LZPR9999  RETURN
+
.*****************************************************************************
.*                                 LDG10000        Called by: PROC0000       *
.*                          Load the DG1 fields                              *
.*****************************************************************************
.
LDG10000  BRANCH    FIELDNO,LDG10100:            * Set ID (SI)
                            LDG10200:            * Diagnosis Coding Method (ID)
                            LDG10300:            * Diagnosis Code - DG1 (CE)
                            LDG10400:            * Diagnosis Description (ST)
                            LDG10500:            * Diagnosis Date/Time (TS)
                            LDG10600:            * Diagnosis Type (IS)
                            LDG10700:           * Major Diagnostic Category (CE)
                            LDG10800:            * Diagnostic Related Group (CE)
                            LDG10900:            * DRG Approval Indicator (ID)
                            LDG11000:            * DRG Grouper Review Code (IS)
                            LDG11100:            * Outlier Type (CE)
                            LDG11200:            * Outlier Days (NM)
                            LDG11300:            * Outlier Cost (CP)
                            LDG11400:            * Grouper Version and Type (ST)
                            LDG11500:            * Diagnosis Priority (ID)
                            LDG11600:            * Diagnosing Clinician (XCN)
                            LDG11700:           * Diagnosing Classification (IS)
                            LDG11800:            * Confidential Indicator (ID)
                            LDG11900             * Attestation Date/Time (TS)
.
.         Invalid DG1 field received, so ignore it
.
          GOTO      LDG19999
.
.         DG1.1  Set ID (SI)
.
LDG10100  BRANCH    COMPCNT,LDG10101
.
LDG10101  APPEND    ANS,DG100101
          GOTO      LDG19999
.
.         DG1.2  Diagnosis Coding Method (ID)
.
LDG10200  BRANCH    COMPCNT,LDG10201
.
LDG10201  APPEND    ANS,DG100201
          GOTO      LDG19999
.
.         DG1.3 Diagnosis Code - DG1 (CE)
.
LDG10300  BRANCH    COMPCNT,LDG10301:            * identifier (ST)
                            LDG10302:            * text (ST)
                            LDG10303:            * name of coding system (ST)
                            LDG10304:            * alternate identifier (ST)
                            LDG10305:            * alternate text (ST)
                            LDG10306             * name of alt. cod. system (ST)
          GOTO      LDG19999
.
LDG10301  APPEND    ANS,DG100301                 * identifier (ST)
          GOTO      LDG19999
.
LDG10302  APPEND    ANS,DG100302                 * text (ST)
          GOTO      LDG19999
.
LDG10303  APPEND    ANS,DG100303                 * name of coding system (ST)
          GOTO      LDG19999
.
LDG10304  APPEND    ANS,DG100304                 * alternate identifier (ST)
          GOTO      LDG19999
.
LDG10305  APPEND    ANS,DG100305                 * alternate text (ST)
          GOTO      LDG19999
.
LDG10306  APPEND    ANS,DG100306                 * name of alt. cod. system (ST)
          GOTO      LDG19999
.
.         DG1.4  Diagnosis Description (ST)
.
LDG10400  BRANCH    COMPCNT,LDG10401
.
LDG10401  APPEND    ANS,DG100401
          GOTO      LDG19999
.
.         DG1.5  Diagnosis Date/Time (TS)
.
LDG10500  BRANCH    COMPCNT,LDG10501
.
LDG10501  APPEND    ANS,DG100501
          GOTO      LDG19999
.
.         DG1.6  Diagnosis Type (IS)
.
LDG10600  BRANCH    COMPCNT,LDG10601
.
LDG10601  APPEND    ANS,DG100601
          GOTO      LDG19999
.
.         DG1.7 Major Diagnostic Category (CE)
.
LDG10700  BRANCH    COMPCNT,LDG10701:            * identifier (ST)
                            LDG10702:            * text (ST)
                            LDG10703:            * name of coding system (ST)
                            LDG10704:            * alternate identifier (ST)
                            LDG10705:            * alternate text (ST)
                            LDG10706             * name of alt. cod. system (ST)
          GOTO      LDG19999
.
LDG10701  APPEND    ANS,DG100701                 * identifier (ST)
          GOTO      LDG19999
.
LDG10702  APPEND    ANS,DG100702                 * text (ST)
          GOTO      LDG19999
.
LDG10703  APPEND    ANS,DG100703                 * name of coding system (ST)
          GOTO      LDG19999
.
LDG10704  APPEND    ANS,DG100704                 * alternate identifier (ST)
          GOTO      LDG19999
.
LDG10705  APPEND    ANS,DG100705                 * alternate text (ST)
          GOTO      LDG19999
.
LDG10706  APPEND    ANS,DG100706                 * name of alt. cod. system (ST)
          GOTO      LDG19999
.
.         DG1.8 Diagnostic Related Group (CE)
.
LDG10800  BRANCH    COMPCNT,LDG10801:            * identifier (ST)
                            LDG10802:            * text (ST)
                            LDG10803:            * name of coding system (ST)
                            LDG10804:            * alternate identifier (ST)
                            LDG10805:            * alternate text (ST)
                            LDG10806             * name of alt. cod. system (ST)
          GOTO      LDG19999
.
LDG10801  APPEND    ANS,DG100801                 * identifier (ST)
          GOTO      LDG19999
.
LDG10802  APPEND    ANS,DG100802                 * text (ST)
          GOTO      LDG19999
.
LDG10803  APPEND    ANS,DG100803                 * name of coding system (ST)
          GOTO      LDG19999
.
LDG10804  APPEND    ANS,DG100804                 * alternate identifier (ST)
          GOTO      LDG19999
.
LDG10805  APPEND    ANS,DG100805                 * alternate text (ST)
          GOTO      LDG19999
.
LDG10806  APPEND    ANS,DG100806                 * name of alt. cod. system (ST)
          GOTO      LDG19999
.
.         DG1.9  DRG Approval Indicator (ID)
.
LDG10900  BRANCH    COMPCNT,LDG10901
.
LDG10901  APPEND    ANS,DG100901
          GOTO      LDG19999
.
.         DG1.10  DRG Grouper Review Code (IS)
.
LDG11000  BRANCH    COMPCNT,LDG11001
.
LDG11001  APPEND    ANS,DG101001
          GOTO      LDG19999
.
.         DG1.11 Outlier Type (CE)
.
LDG11100  BRANCH    COMPCNT,LDG11101:            * identifier (ST)
                            LDG11102:            * text (ST)
                            LDG11103:            * name of coding system (ST)
                            LDG11104:            * alternate identifier (ST)
                            LDG11105:            * alternate text (ST)
                            LDG11106             * name of alt. cod. system (ST)
          GOTO      LDG19999
.
LDG11101  APPEND    ANS,DG101101                 * identifier (ST)
          GOTO      LDG19999
.
LDG11102  APPEND    ANS,DG101102                 * text (ST)
          GOTO      LDG19999
.
LDG11103  APPEND    ANS,DG101103                 * name of coding system (ST)
          GOTO      LDG19999
.
LDG11104  APPEND    ANS,DG101104                 * alternate identifier (ST)
          GOTO      LDG19999
.
LDG11105  APPEND    ANS,DG101105                 * alternate text (ST)
          GOTO      LDG19999
.
LDG11106  APPEND    ANS,DG101106                 * name of alt. cod. system (ST)
          GOTO      LDG19999
.
.         DG1.12  Outlier Days (NM)
.
LDG11200  BRANCH    COMPCNT,LDG11201
.
LDG11201  APPEND    ANS,DG101201
          GOTO      LDG19999
.
.         DG1.13  Outlier Cost (CP)
.
LDG11300  BRANCH    COMPCNT,LDG11301:            * price (MO)
                            LDG11302:            * price type (ID)
                            LDG11303:            * from value (NM)
                            LDG11304:            * to value (NM)
                            LDG11305:            * range units (CE)
                            LDG11306             * range type (ID)
          GOTO      LDG19999
.
LDG11301  APPEND    ANS,DG101301                 * load price (MO)
          GOTO      LDG19999
.
LDG11302  APPEND    ANS,DG101302                 * load price type (ID)
          GOTO      LDG19999
.
LDG11303  APPEND    ANS,DG101303                 * load from value (NM)
          GOTO      LDG19999
.
LDG11304  APPEND    ANS,DG101304                 * load to value (NM)
          GOTO      LDG19999
.
LDG11305  APPEND    ANS,DG101305                 * load range units (CE)
          GOTO      LDG19999
.
LDG11306  APPEND    ANS,DG101306                 * load range type (ID)
          GOTO      LDG19999
.
.         DG1.14  Grouper Version and Type (ST)
.
LDG11400  BRANCH    COMPCNT,LDG11401
.
LDG11401  APPEND    ANS,DG101401
          GOTO      LDG19999
.
.         DG1.15  Diagnosis Priority (ID)
.
LDG11500  BRANCH    COMPCNT,LDG11501
.
LDG11501  APPEND    ANS,DG101501
          GOTO      LDG19999
.
.         DG1.16 Diagnosing Clinician (XCN)
.
LDG11600  BRANCH    COMPCNT,LDG11601:            * id number (ST)
                            LDG11602:            * family name (ST)
                            LDG11603:            * given name (ST)
                            LDG11604:            * middle name (ST)
                            LDG11605:            * suffix (ST)
                            LDG11606:            * prefix (ST)
                            LDG11607:            * degree (IS)
                            LDG11608:            * source table (IS)
                            LDG11609:            * assigning authority (HD)
                            LDG11610:            * name type code (ID)
                            LDG11611:            * identifier check digit (ST)
                            LDG11612:            * check digit scheme code (ID)
                            LDG11613:            * identifier type code (IS)
                            LDG11614:            * assigning facility (HD)
                            LDG11615             * name representation code (ID)
          GOTO      LDG19999
.
LDG11601  APPEND    ANS,DG101601                 * load id number (ST)
          GOTO      LDG19999
.
LDG11602  APPEND    ANS,DG101602                 * load family name (ST)
          GOTO      LDG19999
.
LDG11603  APPEND    ANS,DG101603                 * load given name (ST)
          GOTO      LDG19999
.
LDG11604  APPEND    ANS,DG101604                 * load middle name (ST)
          GOTO      LDG19999
.
LDG11605  APPEND    ANS,DG101605                 * load suffix (ST)
          GOTO      LDG19999
.
LDG11606  APPEND    ANS,DG101606                 * load prefix (ST)
          GOTO      LDG19999
.
LDG11607  APPEND    ANS,DG101607                 * load degree (IS)
          GOTO      LDG19999
.
LDG11608  APPEND    ANS,DG101608                 * load source table (IS)
          GOTO      LDG19999
.
LDG11609  APPEND    ANS,DG101609                 * load assigning authority (HD)
          GOTO      LDG19999
.
LDG11610  APPEND    ANS,DG101610                 * load name type code (ID)
          GOTO      LDG19999
.
LDG11611  APPEND    ANS,DG101611                 * load ident. check digit (ST)
          GOTO      LDG19999
.
LDG11612  APPEND    ANS,DG101612                 * load chk dig scheme code (ID)
          GOTO      LDG19999
.
LDG11613  APPEND    ANS,DG101613                 * load ident. type code (IS)
          GOTO      LDG19999
.
LDG11614  APPEND    ANS,DG101614                 * load assigning facility (HD)
          GOTO      LDG19999
.
LDG11615  APPEND    ANS,DG101615                 * load name repres. code (ID)
          GOTO      LDG19999
.
.         DG1.17  Diagnosis Classification (IS)
.
LDG11700  BRANCH    COMPCNT,LDG11701
.
LDG11701  APPEND    ANS,DG101701
          GOTO      LDG19999
.
.         DG1.18  Confidential Indicator (ID)
.
LDG11800  BRANCH    COMPCNT,LDG11801
.
LDG11801  APPEND    ANS,DG101801
          GOTO      LDG19999
.
.         DG1.19  Attestation Date/Time (TS)
.
LDG11900  BRANCH    COMPCNT,LDG11901
.
LDG11901  APPEND    ANS,DG101901
          GOTO      LDG19999
.
LDG19999  RETURN
+
.*****************************************************************************
.*                                 LZST0000        Called by: PROC0000       *
.*                          Load the ZST fields                              *
.*****************************************************************************
.
LZST0000  BRANCH    FIELDNO,LZST0100:            * Primary Key Value (CE)
                            LZST0200:            * Linked Doctor Code (CM)
                            LZST0300:            * HCP Status (ID)
                            LZST0400:            * Doctor Prescriber Number (ST)
                            LZST0500:            * Doctor Provider Number (ST)
                            LZST0600:            * Accreditation Details (CM)
                            LZST0700:            * Registration Details (CM)
                            LZST0800:            * Insurance Details (CM)
                            LZST0900:            * Preferred Contact Method (CM)
                            LZST1000:            * National Reg. Number (ST)
                            LZST1100:            * SMD GUID value 1 (ST)
                            LZST1200:            * SMD GUID value 2 (ST)
                            LZST1300             * HPI-I value (ST)
.
.         Invalid ZST field received, so ignore it
.
          GOTO      LZST9999
.
.         ZST.1  Primary Key Value - ZST (CE)
.
LZST0100  BRANCH    COMPCNT,LZST0101:            * identifier (ST)
                            LZST0102:            * text (ST)
                            LZST0103:            * name of coding system (ST)
                            LZST0104:            * alternate identifier (ST)
                            LZST0105:            * alternate text (ST)
                            LZST0106             * name of alt. cod. system (ST)
          GOTO      LZST9999
.
LZST0101  APPEND    ANS,ZST00101                 * identifier (ST)
          GOTO      LZST9999
.
LZST0102  APPEND    ANS,ZST00102                 * text (ST)
          GOTO      LZST9999
.
LZST0103  APPEND    ANS,ZST00103                 * name of coding system (ST)
          GOTO      LZST9999
.
LZST0104  APPEND    ANS,ZST00104                 * alternate identifier (ST)
          GOTO      LZST9999
.
LZST0105  APPEND    ANS,ZST00105                 * alternate text (ST)
          GOTO      LZST9999
.
LZST0106  APPEND    ANS,ZST00106                 * name of alt. cod. system (ST)
          GOTO      LZST9999
.
.         ZST.2  Linked Doctor Code (CM)
.
LZST0200  BRANCH    COMPCNT,LZST0201:            * identifier (ST)
                            LZST0202:            * text (ST)
                            LZST0203:            * name of coding system (ST)
                            LZST0204:            * alternate identifier (ST)
                            LZST0205:            * alternate text (ST)
                            LZST0206             * name of alt. cod. system (ST)
          GOTO      LZST9999
.
LZST0201  APPEND    ANS,ZST00201                 * identifier (ST)
          GOTO      LZST9999
.
LZST0202  APPEND    ANS,ZST00202                 * text (ST)
          GOTO      LZST9999
.
LZST0203  APPEND    ANS,ZST00203                 * name of coding system (ST)
          GOTO      LZST9999
.
LZST0204  APPEND    ANS,ZST00204                 * alternate identifier (ST)
          GOTO      LZST9999
.
LZST0205  APPEND    ANS,ZST00205                 * alternate text (ST)
          GOTO      LZST9999
.
LZST0206  APPEND    ANS,ZST00206                 * name of alt. cod. system (ST)
          GOTO      LZST9999
.
.         ZST.3  HCP Status (ID)
.
LZST0300  BRANCH    COMPCNT,LZST0301             * status identifier (ST)
          GOTO      LZST9999
.
LZST0301  APPEND    ANS,ZST00301
          GOTO      LZST9999
.
.         ZST.4  Doctor Prescriber Number (ST)
.
LZST0400  BRANCH    COMPCNT,LZST0401             * text (ST)
          GOTO      LZST9999
.
LZST0401  APPEND    ANS,ZST00401
          GOTO      LZST9999
.
.         ZST.5  Doctor Provider Number (ST)
.
LZST0500  BRANCH    COMPCNT,LZST0501             * text (ST)
          GOTO      LZST9999
.
LZST0501  APPEND    ANS,ZST00501
          GOTO      LZST9999
.
.         ZST.6  Accreditation Details (CM)
.
LZST0600  BRANCH    COMPCNT,LZST0601:            * accreditation type (ST)
                            LZST0602:            * accreditation id (ID)
                            LZST0603:            * accreditation expiry date(DT)
                            LZST0604             * accreditation years (ST)
          GOTO      LZST9999
.
LZST0601  APPEND    ANS,ZST00601                 * accreditation type (ST)
          GOTO      LZST9999
.
LZST0602  APPEND    ANS,ZST00602                 * accreditation id (ID)
          GOTO      LZST9999
.
LZST0603  APPEND    ANS,ZST00603                 * accreditation expiry date(DT)
          GOTO      LZST9999
.
LZST0604  APPEND    ANS,ZST00604                 * accreditation years (ST)
          GOTO      LZST9999
.
.         ZST.7  Registration Details (CM)
.
LZST0700  BRANCH    COMPCNT,LZST0701:            * registration number (ST)
                            LZST0702:            * registration from date (DT)
                            LZST0703             * registration to date (DT)
          GOTO      LZST9999
.
LZST0701  APPEND    ANS,ZST00701                 * registration number (ST)
          GOTO      LZST9999
.
LZST0702  APPEND    ANS,ZST00702                 * registration from date (DT)
          GOTO      LZST9999
.
LZST0703  APPEND    ANS,ZST00703                 * registration to date (DT)
          GOTO      LZST9999
.
.         ZST.8  Insurance Details (CM)
.
LZST0800  BRANCH    COMPCNT,LZST0801:            * text (ST)
                            LZST0802:            * insurance code (ID)
                            LZST0803:            * insurance policy number (ST)
                            LZST0804:            * insurance from date (DT)
                            LZST0805             * insurance to date (DT)
          GOTO      LZST9999
.
LZST0801  APPEND    ANS,ZST00801                 * text (ST)
          GOTO      LZST9999
.
LZST0802  APPEND    ANS,ZST00802                 * insurance code (ID)
          GOTO      LZST9999
.
LZST0803  APPEND    ANS,ZST00803                 * insurance policy number (ST)
          GOTO      LZST9999
.
LZST0804  APPEND    ANS,ZST00804                 * insurance from date (DT)
          GOTO      LZST9999
.
LZST0805  APPEND    ANS,ZST00805                 * insurance to date (DT)
          GOTO      LZST9999
.
.         ZST.9  Preferred Contact Method (CM)
.
LZST0900  BRANCH    COMPCNT,LZST0901:            * text (ST)
                            LZST0902             * method of contact (ID)
          GOTO      LZST9999
.
LZST0901  APPEND    ANS,ZST00901                 * text (ST)
          GOTO      LZST9999
.
LZST0902  APPEND    ANS,ZST00902                 * method of contact (ID)
          GOTO      LZST9999
.
.         ZST.10  National Registration Number (ST)
.
LZST1000  BRANCH    COMPCNT,LZST1001             * text (ST)
          GOTO      LZST9999
.
LZST1001  APPEND    ANS,ZST01001
          GOTO      LZST9999
.
.         ZST.11  SMD GUID value 1 (ST)
.
LZST1100  BRANCH    COMPCNT,LZST1101             * text (ST)
          GOTO      LZST9999
.
LZST1101  APPEND    ANS,ZST01101
          GOTO      LZST9999
.
.         ZST.12  SMD GUID value 2 (ST)
.
LZST1200  BRANCH    COMPCNT,LZST1201             * text (ST)
          GOTO      LZST9999
.
LZST1201  APPEND    ANS,ZST01201
          GOTO      LZST9999
.
.         ZST.13  HPI-I Value (ST)
.
LZST1300  BRANCH    COMPCNT,LZST1301             * text (ST)
          GOTO      LZST9999
.
LZST1301  APPEND    ANS,ZST01301
          GOTO      LZST9999
.
LZST9999  RETURN
+
.*****************************************************************************
.*                                 LZSF0000        Called by: PROC0000       *
.*                          Load the ZSF fields                              *
.*****************************************************************************
.
LZSF0000  BRANCH    FIELDNO,LZSF0100:            * Primary Key Value (CE)
                            LZSF0200:            * Hospital Campus Code (CE)
                            LZSF0300:            * Hospital Staff ID (CE)
                            LZSF0400:            * HCP Status for Campus (ID)
                            LZSF0500:            * Doctor Provider Number (ST)
                            LZSF0600:            * Accreditation Details (CM)
                            LZSF0700:            * Active/Inactive Flag (ID)
                            LZSF0800:            * Institution Active Date (DT)
                            LZSF0900             * Institution Inactive Date(DT)
.
.         Invalid ZSF field received, so ignore it
.
          GOTO      LZSF9999
.
.         ZSF.1  Primary Key Value - ZSF (CE)
.
LZSF0100  BRANCH    COMPCNT,LZSF0101:            * identifier (ST)
                            LZSF0102:            * text (ST)
                            LZSF0103:            * name of coding system (ST)
                            LZSF0104:            * alternate identifier (ST)
                            LZSF0105:            * alternate text (ST)
                            LZSF0106             * name of alt. cod. system (ST)
          GOTO      LZSF9999
.
LZSF0101  APPEND    ANS,ZSF00101                 * identifier (ST)
          GOTO      LZSF9999
.
LZSF0102  APPEND    ANS,ZSF00102                 * text (ST)
          GOTO      LZSF9999
.
LZSF0103  APPEND    ANS,ZSF00103                 * name of coding system (ST)
          GOTO      LZSF9999
.
LZSF0104  APPEND    ANS,ZSF00104                 * alternate identifier (ST)
          GOTO      LZSF9999
.
LZSF0105  APPEND    ANS,ZSF00105                 * alternate text (ST)
          GOTO      LZSF9999
.
LZSF0106  APPEND    ANS,ZSF00106                 * name of alt. cod. system (ST)
          GOTO      LZSF9999
.
.         ZSF.2  Hospital Campus Code (CE)
.
LZSF0200  BRANCH    COMPCNT,LZSF0201:            * identifier (ST)
                            LZSF0202:            * text (ST)
                            LZSF0203:            * name of coding system (ST)
                            LZSF0204:            * alternate identifier (ST)
                            LZSF0205:            * alternate text (ST)
                            LZSF0206             * name of alt. cod. system (ST)
          GOTO      LZSF9999
.
LZSF0201  APPEND    ANS,ZSF00201                 * identifier (ST)
          GOTO      LZSF9999
.
LZSF0202  APPEND    ANS,ZSF00202                 * text (ST)
          GOTO      LZSF9999
.
LZSF0203  APPEND    ANS,ZSF00203                 * name of coding system (ST)
          GOTO      LZSF9999
.
LZSF0204  APPEND    ANS,ZSF00204                 * alternate identifier (ST)
          GOTO      LZSF9999
.
LZSF0205  APPEND    ANS,ZSF00205                 * alternate text (ST)
          GOTO      LZSF9999
.
LZSF0206  APPEND    ANS,ZSF00206                 * name of alt. cod. system (ST)
          GOTO      LZSF9999
.
.         ZSF.3  Hospital Staff ID (CE)
.
LZSF0300  BRANCH    COMPCNT,LZSF0301:            * identifier (ST)
                            LZSF0302:            * text (ST)
                            LZSF0303:            * name of coding system (ST)
                            LZSF0304:            * alternate identifier (ST)
                            LZSF0305:            * alternate text (ST)
                            LZSF0306             * name of alt. cod. system (ST)
          GOTO      LZSF9999
.
LZSF0301  APPEND    ANS,ZSF00301                 * identifier (ST)
          GOTO      LZSF9999
.
LZSF0302  APPEND    ANS,ZSF00302                 * text (ST)
          GOTO      LZSF9999
.
LZSF0303  APPEND    ANS,ZSF00303                 * name of coding system (ST)
          GOTO      LZSF9999
.
LZSF0304  APPEND    ANS,ZSF00304                 * alternate identifier (ST)
          GOTO      LZSF9999
.
LZSF0305  APPEND    ANS,ZSF00305                 * alternate text (ST)
          GOTO      LZSF9999
.
LZSF0306  APPEND    ANS,ZSF00306                 * name of alt. cod. system (ST)
          GOTO      LZSF9999
.
.         ZSF.4  HCP Status for Campus (ID)
.
LZSF0400  BRANCH    COMPCNT,LZSF0401             * status identifier (ID)
          GOTO      LZSF9999
.
LZSF0401  APPEND    ANS,ZSF00401
          GOTO      LZSF9999
.
.         ZSF.5  Doctor Provider Number (ST)
.
LZSF0500  BRANCH    COMPCNT,LZSF0501             * text (ST)
          GOTO      LZSF9999
.
LZSF0501  APPEND    ANS,ZSF00501
          GOTO      LZSF9999
.
.         ZSF.6  Accreditation Details (CM)
.
LZSF0600  BRANCH    COMPCNT,LZSF0601:            * accreditation type (ST)
                            LZSF0602:            * accreditation id (ID)
                            LZSF0603:            * accreditation expiry date(DT)
                            LZSF0604             * accreditation years (ST)
          GOTO      LZSF9999
.
LZSF0601  APPEND    ANS,ZSF00601                 * accreditation type (ST)
          GOTO      LZSF9999
.
LZSF0602  APPEND    ANS,ZSF00602                 * accreditation id (ID)
          GOTO      LZSF9999
.
LZSF0603  APPEND    ANS,ZSF00603                 * accreditation expiry date(DT)
          GOTO      LZSF9999
.
LZSF0604  APPEND    ANS,ZSF00604                 * accreditation years (ST)
          GOTO      LZSF9999
.
.         ZSF.7  Active/Inactive Flag (ID)
.
LZSF0700  BRANCH    COMPCNT,LZSF0701             * text (ID)
          GOTO      LSTF9999
.
LZSF0701  APPEND    ANS,ZSF00701
          GOTO      LSTF9999
.
.         ZSF.8  Institution Active Date (DT)
.
LZSF0800  BRANCH    COMPCNT,LZSF0801             * active date (DT)
          GOTO      LSTF9999
.
LZSF0801  APPEND    ANS,ZSF00801
          GOTO      LSTF9999

.         ZSF.9  Institution Inactive Date (DT)
.
LZSF0900  BRANCH    COMPCNT,LZSF0901             * inactive date (DT)
          GOTO      LSTF9999
.
LZSF0901  APPEND    ANS,ZSF00901
          GOTO      LSTF9999
.
LZSF9999  RETURN
+
.*****************************************************************************
.*                                 LSCH0000        Called by: PROC0000       *
.*                          Load the SCH fields                              *
.*****************************************************************************
.
LSCH0000  BRANCH    FIELDNO,LSCH0100:            * Placer Appt. ID (EI)
                            LSCH0200:            * Filler Appt. ID (EI)
                            LSCH0300:            * Occurrence Number (NM)
                            LSCH0400:            * Placer Group Number (EI)
                            LSCH0500:            * Schedule ID (CE)
                            LSCH0600:            * Event Reason (CE)
                            LSCH0700:            * Appointment Reason (CE)
                            LSCH0800:            * Appointment Type (CE)
                            LSCH0900:            * Appointment Duration (NM)
                            LSCH1000:            * Appt. Duration Units (CE)
                            LSCH1100:            * Appt. Timing Quantity (TQ)
                            LSCH1200:            * Placer Contact Person (XCN)
                            LSCH1300:            * Placer Contact Ph. No. (XTN)
                            LSCH1400:            * Placer Contact Address (XAD)
                            LSCH1500:            * Placer Contact Location (PL)
                            LSCH1600:            * Filler Contact Person (XCN)
                            LSCH1700:            * Filler Contact Ph. No. (XTN)
                            LSCH1800:            * Filler Contact Address (XAD)
                            LSCH1900:            * Filler Contact Location (PL)
                            LSCH2000:            * Entered by Person (XCN)
                            LSCH2100:            * Entered by Ph. No. (XTN)
                            LSCH2200:            * Entered by Location (PL)
                            LSCH2300:            * Parent Placer Appt. ID (EI)
                            LSCH2400:            * Parent Filler Appt. ID (EI)
                            LSCH2500             * Filler Status Code (CE)
.
.         Invalid SCH field received, so ignore it
.
          GOTO      LSCH9999
.
.         SCH.1  Placer Appointment ID (EI)
.
LSCH0100  BRANCH    COMPCNT,LSCH0101:            * entity identifier (ST)
                            LSCH0102:            * namespace id (IS)
                            LSCH0103:            * universal id (ST)
                            LSCH0104             * universal id type (ID)
          GOTO      LSCH9999
.
LSCH0101  APPEND    ANS,SCH00101                 * load entity identifier (ST)
          GOTO      LSCH9999
.
LSCH0102  APPEND    ANS,SCH00102                 * load namespace id (IS)
          GOTO      LSCH9999
.
LSCH0103  APPEND    ANS,SCH00103                 * load universal id (ST)
          GOTO      LSCH9999
.
LSCH0104  APPEND    ANS,SCH00104                 * load universal id type (ID)
          GOTO      LSCH9999
.
.         SCH.2  Filler Appointment ID (EI)
.
LSCH0200  BRANCH    COMPCNT,LSCH0201:            * entity identifier (ST)
                            LSCH0202:            * namespace id (IS)
                            LSCH0203:            * universal id (ST)
                            LSCH0204             * universal id type (ID)
          GOTO      LSCH9999
.
LSCH0201  APPEND    ANS,SCH00201                 * load entity identifier (ST)
          GOTO      LSCH9999
.
LSCH0202  APPEND    ANS,SCH00202                 * load namespace id (IS)
          GOTO      LSCH9999
.
LSCH0203  APPEND    ANS,SCH00203                 * load universal id (ST)
          GOTO      LSCH9999
.
LSCH0204  APPEND    ANS,SCH00204                 * load universal id type (ID)
          GOTO      LSCH9999
.
.         SCH.3  Occurrence Number (NM)
.
LSCH0300  BRANCH    COMPCNT,LSCH0301
.
LSCH0301  APPEND    ANS,SCH00301
          GOTO      LSCH9999
.
.         SCH.4  Filler Appointment ID (EI)
.
LSCH0400  BRANCH    COMPCNT,LSCH0401:            * entity identifier (ST)
                            LSCH0402:            * namespace id (IS)
                            LSCH0403:            * universal id (ST)
                            LSCH0404             * universal id type (ID)
          GOTO      LSCH9999
.
LSCH0401  APPEND    ANS,SCH00401                 * load entity identifier (ST)
          GOTO      LSCH9999
.
LSCH0402  APPEND    ANS,SCH00402                 * load namespace id (IS)
          GOTO      LSCH9999
.
LSCH0403  APPEND    ANS,SCH00403                 * load universal id (ST)
          GOTO      LSCH9999
.
LSCH0404  APPEND    ANS,SCH00404                 * load universal id type (ID)
          GOTO      LSCH9999
.
.         SCH.5  Schedule ID (CE)
.
LSCH0500  BRANCH    COMPCNT,LSCH0501:            * identifier (ST)
                            LSCH0502:            * text (ST)
                            LSCH0503:            * name of coding system (ST)
                            LSCH0504:            * alternate identifier (ST)
                            LSCH0505:            * alternate text (ST)
                            LSCH0506             * name of alt. cod. system (ST)
          GOTO      LSCH9999
.
LSCH0501  APPEND    ANS,SCH00501                 * identifier (ST)
          GOTO      LSCH9999
.
LSCH0502  APPEND    ANS,SCH00502                 * text (ST)
          GOTO      LSCH9999
.
LSCH0503  APPEND    ANS,SCH00503                 * name of coding system (ST)
          GOTO      LSCH9999
.
LSCH0504  APPEND    ANS,SCH00504                 * alternate identifier (ST)
          GOTO      LSCH9999
.
LSCH0505  APPEND    ANS,SCH00505                 * alternate text (ST)
          GOTO      LSCH9999
.
LSCH0506  APPEND    ANS,SCH00506                 * name of alt. cod. system (ST)
          GOTO      LSCH9999
.
.         SCH.6  Event Reason (CE)
.
LSCH0600  BRANCH    COMPCNT,LSCH0601:            * identifier (ST)
                            LSCH0602:            * text (ST)
                            LSCH0603:            * name of coding system (ST)
                            LSCH0604:            * alternate identifier (ST)
                            LSCH0605:            * alternate text (ST)
                            LSCH0606             * name of alt. cod. system (ST)
          GOTO      LSCH9999
.
LSCH0601  APPEND    ANS,SCH00601                 * identifier (ST)
          GOTO      LSCH9999
.
LSCH0602  APPEND    ANS,SCH00602                 * text (ST)
          GOTO      LSCH9999
.
LSCH0603  APPEND    ANS,SCH00603                 * name of coding system (ST)
          GOTO      LSCH9999
.
LSCH0604  APPEND    ANS,SCH00604                 * alternate identifier (ST)
          GOTO      LSCH9999
.
LSCH0605  APPEND    ANS,SCH00605                 * alternate text (ST)
          GOTO      LSCH9999
.
LSCH0606  APPEND    ANS,SCH00606                 * name of alt. cod. system (ST)
          GOTO      LSCH9999
.
.         SCH.7  Appointment Reason (CE)
.
LSCH0700  BRANCH    COMPCNT,LSCH0701:            * identifier (ST)
                            LSCH0702:            * text (ST)
                            LSCH0703:            * name of coding system (ST)
                            LSCH0704:            * alternate identifier (ST)
                            LSCH0705:            * alternate text (ST)
                            LSCH0706             * name of alt. cod. system (ST)
          GOTO      LSCH9999
.
LSCH0701  APPEND    ANS,SCH00701                 * identifier (ST)
          GOTO      LSCH9999
.
LSCH0702  APPEND    ANS,SCH00702                 * text (ST)
          GOTO      LSCH9999
.
LSCH0703  APPEND    ANS,SCH00703                 * name of coding system (ST)
          GOTO      LSCH9999
.
LSCH0704  APPEND    ANS,SCH00704                 * alternate identifier (ST)
          GOTO      LSCH9999
.
LSCH0705  APPEND    ANS,SCH00705                 * alternate text (ST)
          GOTO      LSCH9999
.
LSCH0706  APPEND    ANS,SCH00706                 * name of alt. cod. system (ST)
          GOTO      LSCH9999
.
.         SCH.8  Appointment Type (CE)
.
LSCH0800  BRANCH    COMPCNT,LSCH0801:            * identifier (ST)
                            LSCH0802:            * text (ST)
                            LSCH0803:            * name of coding system (ST)
                            LSCH0804:            * alternate identifier (ST)
                            LSCH0805:            * alternate text (ST)
                            LSCH0806             * name of alt. cod. system (ST)
          GOTO      LSCH9999
.
LSCH0801  APPEND    ANS,SCH00801                 * identifier (ST)
          GOTO      LSCH9999
.
LSCH0802  APPEND    ANS,SCH00802                 * text (ST)
          GOTO      LSCH9999
.
LSCH0803  APPEND    ANS,SCH00803                 * name of coding system (ST)
          GOTO      LSCH9999
.
LSCH0804  APPEND    ANS,SCH00804                 * alternate identifier (ST)
          GOTO      LSCH9999
.
LSCH0805  APPEND    ANS,SCH00805                 * alternate text (ST)
          GOTO      LSCH9999
.
LSCH0806  APPEND    ANS,SCH00806                 * name of alt. cod. system (ST)
          GOTO      LSCH9999
.
.         SCH.9  Occurrence Number (NM)
.
LSCH0900  BRANCH    COMPCNT,LSCH0901
.
LSCH0901  APPEND    ANS,SCH00901
          GOTO      LSCH9999
.
.         SCH.10  Appointment Duration Units (CE)
.
LSCH1000  BRANCH    COMPCNT,LSCH1001:            * identifier (ST)
                            LSCH1002:            * text (ST)
                            LSCH1003:            * name of coding system (ST)
                            LSCH1004:            * alternate identifier (ST)
                            LSCH1005:            * alternate text (ST)
                            LSCH1006             * name of alt. cod. system (ST)
          GOTO      LSCH9999
.
LSCH1001  APPEND    ANS,SCH01001                 * identifier (ST)
          GOTO      LSCH9999
.
LSCH1002  APPEND    ANS,SCH01002                 * text (ST)
          GOTO      LSCH9999
.
LSCH1003  APPEND    ANS,SCH01003                 * name of coding system (ST)
          GOTO      LSCH9999
.
LSCH1004  APPEND    ANS,SCH01004                 * alternate identifier (ST)
          GOTO      LSCH9999
.
LSCH1005  APPEND    ANS,SCH01005                 * alternate text (ST)
          GOTO      LSCH9999
.
LSCH1006  APPEND    ANS,SCH01006                 * name of alt. cod. system (ST)
          GOTO      LSCH9999
.
.         SCH.11    (TQ)
.
LSCH1100  BRANCH    COMPCNT,LSCH1101:            * quantity (CQ)
                            LSCH1102:            * interval (CM)
                            LSCH1103:            * duration (ST)
                            LSCH1104:            * start date/time (TS)
                            LSCH1105:            * end date/time (TS)
                            LSCH1106:            * priority (ST)
                            LSCH1107:            * condition (ST)
                            LSCH1108:            * text (TX)
                            LSCH1109:            * conjunction (ST)
                            LSCH1110:            * order sequencing (CM)
                            LSCH1111:            * occurrence duration (CE)
                            LSCH1112             * total occurrences (NM)
          GOTO      LSCH9999
.
LSCH1101  APPEND    ANS,SCH01101                 * quantity (CQ)
          GOTO      LSCH9999
.
LSCH1102  APPEND    ANS,SCH01102                 * interval (CM)
          GOTO      LSCH9999
.
LSCH1103  APPEND    ANS,SCH01103                 * duration (ST)
          GOTO      LSCH9999
.
LSCH1104  APPEND    ANS,SCH01104                 * start date/time (TS)
          GOTO      LSCH9999
.
LSCH1105  APPEND    ANS,SCH01105                 * end date/time (TS)
          GOTO      LSCH9999
.
LSCH1106  APPEND    ANS,SCH01106                 * priority (ST)
          GOTO      LSCH9999
.
LSCH1107  APPEND    ANS,SCH01107                 * condition (ST)
          GOTO      LSCH9999
.
LSCH1108  APPEND    ANS,SCH01108                 * text (TX)
          GOTO      LSCH9999
.
LSCH1109  APPEND    ANS,SCH01109                 * conjunction (ST)
          GOTO      LSCH9999
.
LSCH1110  APPEND    ANS,SCH01110                 * order sequencing (CM)
          GOTO      LSCH9999
.
LSCH1111  APPEND    ANS,SCH01111                 * occurrence duration (CE)
          GOTO      LSCH9999
.
LSCH1112  APPEND    ANS,SCH01112                 * total occurrences (NM)
          GOTO      LSCH9999
.
.         SCH.12 Placer Contact Person (XCN)
.
LSCH1200  BRANCH    COMPCNT,LSCH1201:            * id number (ST)
                            LSCH1202:            * family name (ST)
                            LSCH1203:            * given name (ST)
                            LSCH1204:            * middle name (ST)
                            LSCH1205:            * suffix (ST)
                            LSCH1206:            * prefix (ST)
                            LSCH1207:            * degree (IS)
                            LSCH1208:            * source table (IS)
                            LSCH1209:            * assigning authority (HD)
                            LSCH1210:            * name type code (ID)
                            LSCH1211:            * identifier check digit (ST)
                            LSCH1212:            * check digit scheme code (ID)
                            LSCH1213:            * identifier type code (IS)
                            LSCH1214:            * assigning facility (HD)
                            LSCH1215             * name representation code (ID)
          GOTO      LSCH9999
.
LSCH1201  APPEND    ANS,SCH01201                 * load id number (ST)
          GOTO      LSCH9999
.
LSCH1202  APPEND    ANS,SCH01202                 * load family name (ST)
          GOTO      LSCH9999
.
LSCH1203  APPEND    ANS,SCH01203                 * load given name (ST)
          GOTO      LSCH9999
.
LSCH1204  APPEND    ANS,SCH01204                 * load middle name (ST)
          GOTO      LSCH9999
.
LSCH1205  APPEND    ANS,SCH01205                 * load suffix (ST)
          GOTO      LSCH9999
.
LSCH1206  APPEND    ANS,SCH01206                 * load prefix (ST)
          GOTO      LSCH9999
.
LSCH1207  APPEND    ANS,SCH01207                 * load degree (IS)
          GOTO      LSCH9999
.
LSCH1208  APPEND    ANS,SCH01208                 * load source table (IS)
          GOTO      LSCH9999
.
LSCH1209  APPEND    ANS,SCH01209                 * load assigning authority (HD)
          GOTO      LSCH9999
.
LSCH1210  APPEND    ANS,SCH01210                 * load name type code (ID)
          GOTO      LSCH9999
.
LSCH1211  APPEND    ANS,SCH01211                 * load ident. check digit (ST)
          GOTO      LSCH9999
.
LSCH1212  APPEND    ANS,SCH01212                 * load chk dig scheme code (ID)
          GOTO      LSCH9999
.
LSCH1213  APPEND    ANS,SCH01213                 * load ident. type code (IS)
          GOTO      LSCH9999
.
LSCH1214  APPEND    ANS,SCH01214                 * load assigning facility (HD)
          GOTO      LSCH9999
.
LSCH1215  APPEND    ANS,SCH01215                 * load name repres. code (ID)
          GOTO      LSCH9999
.
.         SCH.13 Placer Contact Phone Number (XTN)
.
LSCH1300  BRANCH    COMPCNT,LSCH1301:            * text
                            LSCH1302:            * telecomm. use code (ID)
                            LSCH1303:            * telcomm. equipment type (ID)
                            LSCH1304:            * email address (ST)
                            LSCH1305:            * country code (NM)
                            LSCH1306:            * area/city code (NM)
                            LSCH1307:            * phone number (NM)
                            LSCH1308:            * extension (NM)
                            LSCH1309             * any text (ST)
          GOTO      LSCH9999
.
LSCH1301  APPEND    ANS,SCH01301                 * load text
          GOTO      LSCH9999
.
LSCH1302  APPEND    ANS,SCH01302                 * load telecomm. use code (ID)
          GOTO      LSCH9999
.
LSCH1303  APPEND    ANS,SCH01303                 * load telcomm. equip.type (ID)
          GOTO      LSCH9999
.
LSCH1304  APPEND    ANS,SCH01304                 * load email address (ST)
          GOTO      LSCH9999
.
LSCH1305  APPEND    ANS,SCH01305                 * load country code (NM)
          GOTO      LSCH9999
.
LSCH1306  APPEND    ANS,SCH01306                 * load area/city code (NM)
          GOTO      LSCH9999
.
LSCH1307  APPEND    ANS,SCH01307                 * load phone number (NM)
          GOTO      LSCH9999
.
LSCH1308  APPEND    ANS,SCH01308                 * load extension (NM)
          GOTO      LSCH9999
.
LSCH1309  APPEND    ANS,SCH01309                 * load any text (ST)
          GOTO      LSCH9999
.
.         SCH.14 Placer Contact Address (XAD)
.
LSCH1400  BRANCH    COMPCNT,LSCH1401:            * street address (ST)
                            LSCH1402:            * other designation (ST)
                            LSCH1403:            * city (ST)
                            LSCH1404:            * state (ST)
                            LSCH1405:            * postcode (ST)
                            LSCH1406:            * country (ID)
                            LSCH1407:            * address type (ID)
                            LSCH1408:            * other geographic desig. (ST)
                            LSCH1409:            * county (IS)
                            LSCH1410:            * census tract (IS)
                            LSCH1411             * address rep. code (ID)
          GOTO      LSCH9999
.
LSCH1401  APPEND    ANS,SCH01401                 * load street address (ST)
          GOTO      LSCH9999
.
LSCH1402  APPEND    ANS,SCH01402                 * load other designation (ST)
          GOTO      LSCH9999
.
LSCH1403  APPEND    ANS,SCH01403                 * load city (ST)
          GOTO      LSCH9999
.
LSCH1404  APPEND    ANS,SCH01404                 * load state (ST)
          GOTO      LSCH9999
.
LSCH1405  APPEND    ANS,SCH01405                 * load postcode (ST)
          GOTO      LSCH9999
.
LSCH1406  APPEND    ANS,SCH01406                 * load country (ID)
          GOTO      LSCH9999
.
LSCH1407  APPEND    ANS,SCH01407                 * load address type (ID)
          GOTO      LSCH9999
.
LSCH1408  APPEND    ANS,SCH01408                 * load other geog. desig. (ST)
          GOTO      LSCH9999
.
LSCH1409  APPEND    ANS,SCH01409                 * load county (IS)
          GOTO      LSCH9999
.
LSCH1410  APPEND    ANS,SCH01410                 * load census tract (IS)
          GOTO      LSCH9999
.
LSCH1411  APPEND    ANS,SCH01411                 * load address rep code (ID)
          GOTO      LSCH9999
.
.         SCH.15 Placer Contact Location (PL)
.                           
LSCH1500  BRANCH    COMPCNT,LSCH1501:            * point of care (IS)
                            LSCH1502:            * room (IS)
                            LSCH1503:            * bed (IS)
                            LSCH1504:            * facility (HD)
                            LSCH1505:            * location status (IS)
                            LSCH1506:            * person location type (IS)
                            LSCH1507:            * building (IS)
                            LSCH1508:            * floor (IS)
                            LSCH1509             * location description (ST)
          GOTO      LSCH9999
.                           
LSCH1501  APPEND    ANS,SCH01501                 * load point of care (IS)
          GOTO      LSCH9999
.                           
LSCH1502  APPEND    ANS,SCH01502                 * load room (IS)
          GOTO      LSCH9999
.                           
LSCH1503  APPEND    ANS,SCH01503                 * load bed (IS)
          GOTO      LSCH9999
.                           
LSCH1504  APPEND    ANS,SCH01504                 * load facility (HD)
          GOTO      LSCH9999
.                           
LSCH1505  APPEND    ANS,SCH01505                 * load location status (IS)
          GOTO      LSCH9999
.                           
LSCH1506  APPEND    ANS,SCH01506                 * load person loc'n type (IS)
          GOTO      LSCH9999
.                           
LSCH1507  APPEND    ANS,SCH01507                 * load building (IS)
          GOTO      LSCH9999
.                           
LSCH1508  APPEND    ANS,SCH01508                 * load floor (IS)
          GOTO      LSCH9999
.                           
LSCH1509  APPEND    ANS,SCH01509                 * load location desc. (ST)
          GOTO      LSCH9999
.
.         SCH.16 Filler Contact Person (XCN)
.
LSCH1600  BRANCH    COMPCNT,LSCH1601:            * id number (ST)
                            LSCH1602:            * family name (ST)
                            LSCH1603:            * given name (ST)
                            LSCH1604:            * middle name (ST)
                            LSCH1605:            * suffix (ST)
                            LSCH1606:            * prefix (ST)
                            LSCH1607:            * degree (IS)
                            LSCH1608:            * source table (IS)
                            LSCH1609:            * assigning authority (HD)
                            LSCH1610:            * name type code (ID)
                            LSCH1611:            * identifier check digit (ST)
                            LSCH1612:            * check digit scheme code (ID)
                            LSCH1613:            * identifier type code (IS)
                            LSCH1614:            * assigning facility (HD)
                            LSCH1615             * name representation code (ID)
          GOTO      LSCH9999
.
LSCH1601  APPEND    ANS,SCH01601                 * load id number (ST)
          GOTO      LSCH9999
.
LSCH1602  APPEND    ANS,SCH01602                 * load family name (ST)
          GOTO      LSCH9999
.
LSCH1603  APPEND    ANS,SCH01603                 * load given name (ST)
          GOTO      LSCH9999
.
LSCH1604  APPEND    ANS,SCH01604                 * load middle name (ST)
          GOTO      LSCH9999
.
LSCH1605  APPEND    ANS,SCH01605                 * load suffix (ST)
          GOTO      LSCH9999
.
LSCH1606  APPEND    ANS,SCH01606                 * load prefix (ST)
          GOTO      LSCH9999
.
LSCH1607  APPEND    ANS,SCH01607                 * load degree (IS)
          GOTO      LSCH9999
.
LSCH1608  APPEND    ANS,SCH01608                 * load source table (IS)
          GOTO      LSCH9999
.
LSCH1609  APPEND    ANS,SCH01609                 * load assigning authority (HD)
          GOTO      LSCH9999
.
LSCH1610  APPEND    ANS,SCH01610                 * load name type code (ID)
          GOTO      LSCH9999
.
LSCH1611  APPEND    ANS,SCH01611                 * load ident. check digit (ST)
          GOTO      LSCH9999
.
LSCH1612  APPEND    ANS,SCH01612                 * load chk dig scheme code (ID)
          GOTO      LSCH9999
.
LSCH1613  APPEND    ANS,SCH01613                 * load ident. type code (IS)
          GOTO      LSCH9999
.
LSCH1614  APPEND    ANS,SCH01614                 * load assigning facility (HD)
          GOTO      LSCH9999
.
LSCH1615  APPEND    ANS,SCH01615                 * load name repres. code (ID)
          GOTO      LSCH9999
.
.         SCH.17 Filler Contact Phone Number (XTN)
.
LSCH1700  BRANCH    COMPCNT,LSCH1701:            * text
                            LSCH1702:            * telecomm. use code (ID)
                            LSCH1703:            * telcomm. equipment type (ID)
                            LSCH1704:            * email address (ST)
                            LSCH1705:            * country code (NM)
                            LSCH1706:            * area/city code (NM)
                            LSCH1707:            * phone number (NM)
                            LSCH1708:            * extension (NM)
                            LSCH1709             * any text (ST)
          GOTO      LSCH9999
.
LSCH1701  APPEND    ANS,SCH01701                 * load text
          GOTO      LSCH9999
.
LSCH1702  APPEND    ANS,SCH01702                 * load telecomm. use code (ID)
          GOTO      LSCH9999
.
LSCH1703  APPEND    ANS,SCH01703                 * load telcomm. equip.type (ID)
          GOTO      LSCH9999
.
LSCH1704  APPEND    ANS,SCH01704                 * load email address (ST)
          GOTO      LSCH9999
.
LSCH1705  APPEND    ANS,SCH01705                 * load country code (NM)
          GOTO      LSCH9999
.
LSCH1706  APPEND    ANS,SCH01706                 * load area/city code (NM)
          GOTO      LSCH9999
.
LSCH1707  APPEND    ANS,SCH01707                 * load phone number (NM)
          GOTO      LSCH9999
.
LSCH1708  APPEND    ANS,SCH01708                 * load extension (NM)
          GOTO      LSCH9999
.
LSCH1709  APPEND    ANS,SCH01709                 * load any text (ST)
          GOTO      LSCH9999
.
.         SCH.18 Filler Contact Address (XAD)
.
LSCH1800  BRANCH    COMPCNT,LSCH1801:            * street address (ST)
                            LSCH1802:            * other designation (ST)
                            LSCH1803:            * city (ST)
                            LSCH1804:            * state (ST)
                            LSCH1805:            * postcode (ST)
                            LSCH1806:            * country (ID)
                            LSCH1807:            * address type (ID)
                            LSCH1808:            * other geographic desig. (ST)
                            LSCH1809:            * county (IS)
                            LSCH1810:            * census tract (IS)
                            LSCH1811             * address rep. code (ID)
          GOTO      LSCH9999
.
LSCH1801  APPEND    ANS,SCH01801                 * load street address (ST)
          GOTO      LSCH9999
.
LSCH1802  APPEND    ANS,SCH01802                 * load other designation (ST)
          GOTO      LSCH9999
.
LSCH1803  APPEND    ANS,SCH01803                 * load city (ST)
          GOTO      LSCH9999
.
LSCH1804  APPEND    ANS,SCH01804                 * load state (ST)
          GOTO      LSCH9999
.
LSCH1805  APPEND    ANS,SCH01805                 * load postcode (ST)
          GOTO      LSCH9999
.
LSCH1806  APPEND    ANS,SCH01806                 * load country (ID)
          GOTO      LSCH9999
.
LSCH1807  APPEND    ANS,SCH01807                 * load address type (ID)
          GOTO      LSCH9999
.
LSCH1808  APPEND    ANS,SCH01808                 * load other geog. desig. (ST)
          GOTO      LSCH9999
.
LSCH1809  APPEND    ANS,SCH01809                 * load county (IS)
          GOTO      LSCH9999
.
LSCH1810  APPEND    ANS,SCH01810                 * load census tract (IS)
          GOTO      LSCH9999
.
LSCH1811  APPEND    ANS,SCH01811                 * load address rep code (ID)
          GOTO      LSCH9999
.
.         SCH.19 Placer Contact Location (PL)
.                           
LSCH1900  BRANCH    COMPCNT,LSCH1901:            * point of care (IS)
                            LSCH1902:            * room (IS)
                            LSCH1903:            * bed (IS)
                            LSCH1904:            * facility (HD)
                            LSCH1905:            * location status (IS)
                            LSCH1906:            * person location type (IS)
                            LSCH1907:            * building (IS)
                            LSCH1908:            * floor (IS)
                            LSCH1909             * location description (ST)
          GOTO      LSCH9999
.                           
LSCH1901  APPEND    ANS,SCH01901                 * load point of care (IS)
          GOTO      LSCH9999
.                           
LSCH1902  APPEND    ANS,SCH01902                 * load room (IS)
          GOTO      LSCH9999
.                           
LSCH1903  APPEND    ANS,SCH01903                 * load bed (IS)
          GOTO      LSCH9999
.                           
LSCH1904  APPEND    ANS,SCH01904                 * load facility (HD)
          GOTO      LSCH9999
.                           
LSCH1905  APPEND    ANS,SCH01905                 * load location status (IS)
          GOTO      LSCH9999
.                           
LSCH1906  APPEND    ANS,SCH01906                 * load person loc'n type (IS)
          GOTO      LSCH9999
.                           
LSCH1907  APPEND    ANS,SCH01907                 * load building (IS)
          GOTO      LSCH9999
.                           
LSCH1908  APPEND    ANS,SCH01908                 * load floor (IS)
          GOTO      LSCH9999
.                           
LSCH1909  APPEND    ANS,SCH01909                 * load location desc. (ST)
          GOTO      LSCH9999
.
.         SCH.20 Entered By Person (XCN)
.
LSCH2000  BRANCH    COMPCNT,LSCH2001:            * id number (ST)
                            LSCH2002:            * family name (ST)
                            LSCH2003:            * given name (ST)
                            LSCH2004:            * middle name (ST)
                            LSCH2005:            * suffix (ST)
                            LSCH2006:            * prefix (ST)
                            LSCH2007:            * degree (IS)
                            LSCH2008:            * source table (IS)
                            LSCH2009:            * assigning authority (HD)
                            LSCH2010:            * name type code (ID)
                            LSCH2011:            * identifier check digit (ST)
                            LSCH2012:            * check digit scheme code (ID)
                            LSCH2013:            * identifier type code (IS)
                            LSCH2014:            * assigning facility (HD)
                            LSCH2015             * name representation code (ID)
          GOTO      LSCH9999
.
LSCH2001  APPEND    ANS,SCH02001                 * load id number (ST)
          GOTO      LSCH9999
.
LSCH2002  APPEND    ANS,SCH02002                 * load family name (ST)
          GOTO      LSCH9999
.
LSCH2003  APPEND    ANS,SCH02003                 * load given name (ST)
          GOTO      LSCH9999
.
LSCH2004  APPEND    ANS,SCH02004                 * load middle name (ST)
          GOTO      LSCH9999
.
LSCH2005  APPEND    ANS,SCH02005                 * load suffix (ST)
          GOTO      LSCH9999
.
LSCH2006  APPEND    ANS,SCH02006                 * load prefix (ST)
          GOTO      LSCH9999
.
LSCH2007  APPEND    ANS,SCH02007                 * load degree (IS)
          GOTO      LSCH9999
.
LSCH2008  APPEND    ANS,SCH02008                 * load source table (IS)
          GOTO      LSCH9999
.
LSCH2009  APPEND    ANS,SCH02009                 * load assigning authority (HD)
          GOTO      LSCH9999
.
LSCH2010  APPEND    ANS,SCH02010                 * load name type code (ID)
          GOTO      LSCH9999
.
LSCH2011  APPEND    ANS,SCH02011                 * load ident. check digit (ST)
          GOTO      LSCH9999
.
LSCH2012  APPEND    ANS,SCH02012                 * load chk dig scheme code (ID)
          GOTO      LSCH9999
.
LSCH2013  APPEND    ANS,SCH02013                 * load ident. type code (IS)
          GOTO      LSCH9999
.
LSCH2014  APPEND    ANS,SCH02014                 * load assigning facility (HD)
          GOTO      LSCH9999
.
LSCH2015  APPEND    ANS,SCH02015                 * load name repres. code (ID)
          GOTO      LSCH9999
.
.         SCH.21 Entered By Phone Number (XTN)
.
LSCH2100  BRANCH    COMPCNT,LSCH2101:            * text
                            LSCH2102:            * telecomm. use code (ID)
                            LSCH2103:            * telcomm. equipment type (ID)
                            LSCH2104:            * email address (ST)
                            LSCH2105:            * country code (NM)
                            LSCH2106:            * area/city code (NM)
                            LSCH2107:            * phone number (NM)
                            LSCH2108:            * extension (NM)
                            LSCH2109             * any text (ST)
          GOTO      LSCH9999
.
LSCH2101  APPEND    ANS,SCH02101                 * load text
          GOTO      LSCH9999
.
LSCH2102  APPEND    ANS,SCH02102                 * load telecomm. use code (ID)
          GOTO      LSCH9999
.
LSCH2103  APPEND    ANS,SCH02103                 * load telcomm. equip.type (ID)
          GOTO      LSCH9999
.
LSCH2104  APPEND    ANS,SCH02104                 * load email address (ST)
          GOTO      LSCH9999
.
LSCH2105  APPEND    ANS,SCH02105                 * load country code (NM)
          GOTO      LSCH9999
.
LSCH2106  APPEND    ANS,SCH02106                 * load area/city code (NM)
          GOTO      LSCH9999
.
LSCH2107  APPEND    ANS,SCH02107                 * load phone number (NM)
          GOTO      LSCH9999
.
LSCH2108  APPEND    ANS,SCH02108                 * load extension (NM)
          GOTO      LSCH9999
.
LSCH2109  APPEND    ANS,SCH02109                 * load any text (ST)
          GOTO      LSCH9999
.
.         SCH.22 Entered By Location (PL)
.                           
LSCH2200  BRANCH    COMPCNT,LSCH2201:            * point of care (IS)
                            LSCH2202:            * room (IS)
                            LSCH2203:            * bed (IS)
                            LSCH2204:            * facility (HD)
                            LSCH2205:            * location status (IS)
                            LSCH2206:            * person location type (IS)
                            LSCH2207:            * building (IS)
                            LSCH2208:            * floor (IS)
                            LSCH2209             * location description (ST)
          GOTO      LSCH9999
.                           
LSCH2201  APPEND    ANS,SCH02201                 * load point of care (IS)
          GOTO      LSCH9999
.                           
LSCH2202  APPEND    ANS,SCH02202                 * load room (IS)
          GOTO      LSCH9999
.                           
LSCH2203  APPEND    ANS,SCH02203                 * load bed (IS)
          GOTO      LSCH9999
.                           
LSCH2204  APPEND    ANS,SCH02204                 * load facility (HD)
          GOTO      LSCH9999
.                           
LSCH2205  APPEND    ANS,SCH02205                 * load location status (IS)
          GOTO      LSCH9999
.                           
LSCH2206  APPEND    ANS,SCH02206                 * load person loc'n type (IS)
          GOTO      LSCH9999
.                           
LSCH2207  APPEND    ANS,SCH02207                 * load building (IS)
          GOTO      LSCH9999
.                           
LSCH2208  APPEND    ANS,SCH02208                 * load floor (IS)
          GOTO      LSCH9999
.                           
LSCH2209  APPEND    ANS,SCH02209                 * load location desc, (ST)
          GOTO      LSCH9999
.
.         SCH.23  Filler Appointment ID (EI)
.
LSCH2300  BRANCH    COMPCNT,LSCH2301:            * entity identifier (ST)
                            LSCH2302:            * namespace id (IS)
                            LSCH2303:            * universal id (ST)
                            LSCH2304             * universal id type (ID)
          GOTO      LSCH9999
.
LSCH2301  APPEND    ANS,SCH02301                 * load entity identifier (ST)
          GOTO      LSCH9999
.
LSCH2302  APPEND    ANS,SCH02302                 * load namespace id (IS)
          GOTO      LSCH9999
.
LSCH2303  APPEND    ANS,SCH02303                 * load universal id (ST)
          GOTO      LSCH9999
.
LSCH2304  APPEND    ANS,SCH02304                 * load universal id type (ID)
          GOTO      LSCH9999
.
.         SCH.24  Filler Appointment ID (EI)
.
LSCH2400  BRANCH    COMPCNT,LSCH2401:            * entity identifier (ST)
                            LSCH2402:            * namespace id (IS)
                            LSCH2403:            * universal id (ST)
                            LSCH2404             * universal id type (ID)
          GOTO      LSCH9999
.
LSCH2401  APPEND    ANS,SCH02401                 * load entity identifier (ST)
          GOTO      LSCH9999
.
LSCH2402  APPEND    ANS,SCH02402                 * load namespace id (IS)
          GOTO      LSCH9999
.
LSCH2403  APPEND    ANS,SCH02403                 * load universal id (ST)
          GOTO      LSCH9999
.
LSCH2404  APPEND    ANS,SCH02404                 * load universal id type (ID)
          GOTO      LSCH9999
.
.         SCH.25  Filler Status Code (CE)
.
LSCH2500  BRANCH    COMPCNT,LSCH2501:            * identifier (ST)
                            LSCH2502:            * text (ST)
                            LSCH2503:            * name of coding system (ST)
                            LSCH2504:            * alternate identifier (ST)
                            LSCH2505:            * alternate text (ST)
                            LSCH2506             * name of alt. cod. system (ST)
          GOTO      LSCH9999
.
LSCH2501  APPEND    ANS,SCH02501                 * identifier (ST)
          GOTO      LSCH9999
.
LSCH2502  APPEND    ANS,SCH02502                 * text (ST)
          GOTO      LSCH9999
.
LSCH2503  APPEND    ANS,SCH02503                 * name of coding system (ST)
          GOTO      LSCH9999
.
LSCH2504  APPEND    ANS,SCH02504                 * alternate identifier (ST)
          GOTO      LSCH9999
.
LSCH2505  APPEND    ANS,SCH02505                 * alternate text (ST)
          GOTO      LSCH9999
.
LSCH2506  APPEND    ANS,SCH02506                 * name of alt. cod. system (ST)
          GOTO      LSCH9999
.
LSCH9999  RETURN
+
.*****************************************************************************
.*                                 LZSC0000        Called by: PROC0000       *
.*                          Reset the ZSC field                              *
.*****************************************************************************
.
LZSC0000  BRANCH    FIELDNO,LZSC0100:            * Placer Appt. ID (EI)
                            LZSC0200:            * Theatre Date (TS)
                            LZSC0300:            * Theatre Start Time (TM)
                            LZSC0400:            * Anaesthetic Key (CE)
                            LZSC0500:            * Patient Arrives Time (TM)
                            LZSC0600:            * Anaesthetic Arrives Time (TM)
                            LZSC0700:            * Surgery Start Time (TM)
                            LZSC0800:            * Surgery Completed Time (TM)
                            LZSC0900:            * Pt. Out/Anaes. Stop Time (TM)
                            LZSC1000:            * ASA Score (CE)
                            LZSC1100:            * Operation Class Key (CE)
                            LZSC1200:            * Time Into Recovery (TM)
                            LZSC1300:            * Exit Theatre Complex (TM)
                            LZSC1400:            * Overnight Indicator (ID)
                            LZSC1500:            * Time Patient Called For (TM)
                            LZSC1600:            * Anaesthetic Time Out (TM)
                            LZSC1700:            * Anaesthetic Cannulation (TM)
                            LZSC1800:            * Surgical Time Out (TM)
                            LZSC1900:            * Ready For Recovery (TM)
                            LZSC2000:            * Time Into Recovery Front (TM)
                            LZSC2100:            * Time Into Recovery Back (TM)
                            LZSC2200:            * Ready To Depart Time (TM)
                            LZSC2300:            * Time To ICU (TM)
                            LZSC2400:            * Time Patient Died (TM)
                            LZSC2500:            * Clinical Review DateTime (TS)
                            LZSC2600:            * Admitting Nurse Code (XCN)
                            LZSC2700:            * Recov Nurse Day 1 Code (XCN)
                            LZSC2800:            * Recov Nurse Day 2 Code (XCN)
                            LZSC2900:            * Recov Nurse Front 1 Code(XCN)
                            LZSC3000:            * Recov Nurse Front 2 Code(XCN)
                            LZSC3100:            * Recov Nurse Back 1 Code (XCN)
                            LZSC3200:            * Recov Nurse Back 2 Code (XCN)
                            LZSC3300:            * Arrival Late Reason (CE)
                            LZSC3400:            * Anaesthetic Delay Reason (CE)
                            LZSC3500:            * Surg. Start Late Reason (CE)
                            LZSC3600:            * Reason For Overnight (CE)
                            LZSC3700:            * Recovery In Delay Reason (CE)
                            LZSC3800:            * Recovery Bay (CE)
                            LZSC3900:            * Acuity (CE)
                            LZSC4000:            * Recov. Exit Delay Reason (CE)
                            LZSC4100:            * Blood Loss (NM)
                            LZSC4200:            * Fast Post Recovery (ID)
                            LZSC4300:            * Admit Post Procedure (ID)
                            LZSC4400:            * No Recovery (ID)
                            LZSC4500:            * Case Abandoned (ID)
                            LZSC4600:            * Comments (ST)
                            LZSC4700:            * Preadmiss & Oper'n Notes (ST)
                            LZSC4800:            * Prosthesis (ST)
                            LZSC4900:            * Equipment/Items 1 (CE)
                            LZSC5000:            * Equipment/Items 2 (CE)
                            LZSC5100:            * Site Intact 1 (ID)
                            LZSC5200:            * Site Intact 2 (ID)
                            LZSC5300:            * Equipment/Item Used 1 (CE)
                            LZSC5400:            * Equipment/Item Used 2 (CE)
                            LZSC5500:            * Caesarean Birth Count (NM)
                            LZSC5600:            * Caesarean Birth Sex (IS)
                            LZSC5700:            * Caesarean Birth DateTime (TS)
                            LZSC5800:            * Caesarean Birth U/R (CX)
                            LZSC5900:            * Caesarean Birth Weight (NM)
                            LZSC6000:   * Ces. Birth Placenta Delivery Time (TM)
                            LZSC6100:            * Adm Nurse Start Time (TM)
                            LZSC6200:            * Adm Nurse End Time (TM)
                            LZSC6300:            * Wheels In Time (TM)
                            LZSC6400             * Wheels Out Time (TM)
.
.         Invalid ZSC field received, so ignore it
.
          GOTO      LZSC9999
.
.         ZSC.1  Placer Appointment ID (EI)
.
LZSC0100  BRANCH    COMPCNT,LZSC0101:            * entity identifier (ST)
                            LZSC0102:            * namespace id (IS)
                            LZSC0103:            * universal id (ST)
                            LZSC0104             * universal id type (ID)
          GOTO      LZSC9999
.
LZSC0101  APPEND    ANS,ZSC00101                 * load entity identifier (ST)
          GOTO      LZSC9999
.
LZSC0102  APPEND    ANS,ZSC00102                 * load namespace id (IS)
          GOTO      LZSC9999
.
LZSC0103  APPEND    ANS,ZSC00103                 * load universal id (ST)
          GOTO      LZSC9999
.
LZSC0104  APPEND    ANS,ZSC00104                 * load universal id type (ID)
          GOTO      LZSC9999
.
.         ZSC.2  Theatre Date (TS)
.
LZSC0200  BRANCH    COMPCNT,LZSC0201
.
LZSC0201  APPEND    ANS,ZSC00201
          GOTO      LZSC9999
.
.         ZSC.3  Theatre Start Time (TM)
.
LZSC0300  BRANCH    COMPCNT,LZSC0301
.
LZSC0301  APPEND    ANS,ZSC00301
          GOTO      LZSC9999
.
.         ZSC.4  Anaesthetic Key (CE)
.
LZSC0400  BRANCH    COMPCNT,LZSC0401:            * identifier (ST)
                            LZSC0402:            * text (ST)
                            LZSC0403:            * name of coding system (ST)
                            LZSC0404:            * alternate identifier (ST)
                            LZSC0405:            * alternate text (ST)
                            LZSC0406             * name of alt. cod. system (ST)
          GOTO      LZSC9999
.
LZSC0401  APPEND    ANS,ZSC00401                 * identifier (ST)
          GOTO      LZSC9999
.
LZSC0402  APPEND    ANS,ZSC00402                 * text (ST)
          GOTO      LZSC9999
.
LZSC0403  APPEND    ANS,ZSC00403                 * name of coding system (ST)
          GOTO      LZSC9999
.
LZSC0404  APPEND    ANS,ZSC00404                 * alternate identifier (ST)
          GOTO      LZSC9999
.
LZSC0405  APPEND    ANS,ZSC00405                 * alternate text (ST)
          GOTO      LZSC9999
.
LZSC0406  APPEND    ANS,ZSC00406                 * name of alt. cod. system (ST)
          GOTO      LZSC9999
.
.         ZSC.5  Patient Arrives Time (TM)
.
LZSC0500  BRANCH    COMPCNT,LZSC0501
.
LZSC0501  APPEND    ANS,ZSC00501
          GOTO      LZSC9999
.
.         ZSC.6  Anaesthetic Arrives Time (TM)
.
LZSC0600  BRANCH    COMPCNT,LZSC0601
.
LZSC0601  APPEND    ANS,ZSC00601
          GOTO      LZSC9999
.
.         ZSC.7  Surgery Start Time (TM)
.
LZSC0700  BRANCH    COMPCNT,LZSC0701
.
LZSC0701  APPEND    ANS,ZSC00701
          GOTO      LZSC9999
.
.         ZSC.8  Surgery Completed Time (TM)
.
LZSC0800  BRANCH    COMPCNT,LZSC0801
.
LZSC0801  APPEND    ANS,ZSC00801
          GOTO      LZSC9999
.
.         ZSC.9  Patient Out/Anaesthetic Stop Time (TM)
.
LZSC0900  BRANCH    COMPCNT,LZSC0901
.
LZSC0901  APPEND    ANS,ZSC00901
          GOTO      LZSC9999
.
.         ZSC.10 ASA Score (CE)
.
LZSC1000  BRANCH    COMPCNT,LZSC1001:            * identifier (ST)
                            LZSC1002:            * text (ST)
                            LZSC1003:            * name of coding system (ST)
                            LZSC1004:            * alternate identifier (ST)
                            LZSC1005:            * alternate text (ST)
                            LZSC1006             * name of alt. cod. system (ST)
          GOTO      LZSC9999
.
LZSC1001  APPEND    ANS,ZSC01001                 * identifier (ST)
          GOTO      LZSC9999
.
LZSC1002  APPEND    ANS,ZSC01002                 * text (ST)
          GOTO      LZSC9999
.
LZSC1003  APPEND    ANS,ZSC01003                 * name of coding system (ST)
          GOTO      LZSC9999
.
LZSC1004  APPEND    ANS,ZSC01004                 * alternate identifier (ST)
          GOTO      LZSC9999
.
LZSC1005  APPEND    ANS,ZSC01005                 * alternate text (ST)
          GOTO      LZSC9999
.
LZSC1006  APPEND    ANS,ZSC01006                 * name of alt. cod. system (ST)
          GOTO      LZSC9999
.
.         ZSC.11 Operation Class Key (CE)
.
LZSC1100  BRANCH    COMPCNT,LZSC1101:            * identifier (ST)
                            LZSC1102:            * text (ST)
                            LZSC1103:            * name of coding system (ST)
                            LZSC1104:            * alternate identifier (ST)
                            LZSC1105:            * alternate text (ST)
                            LZSC1106             * name of alt. cod. system (ST)
          GOTO      LZSC9999
.
LZSC1101  APPEND    ANS,ZSC01101                 * identifier (ST)
          GOTO      LZSC9999
.
LZSC1102  APPEND    ANS,ZSC01102                 * text (ST)
          GOTO      LZSC9999
.
LZSC1103  APPEND    ANS,ZSC01103                 * name of coding system (ST)
          GOTO      LZSC9999
.
LZSC1104  APPEND    ANS,ZSC01104                 * alternate identifier (ST)
          GOTO      LZSC9999
.
LZSC1105  APPEND    ANS,ZSC01105                 * alternate text (ST)
          GOTO      LZSC9999
.
LZSC1106  APPEND    ANS,ZSC01106                 * name of alt. cod. system (ST)
          GOTO      LZSC9999
.
.         ZSC.12  Time Into Recovery (TM)
.
LZSC1200  BRANCH    COMPCNT,LZSC1201
.
LZSC1201  APPEND    ANS,ZSC01201
          GOTO      LZSC9999
.
.         ZSC.13  Exit Theatre Complex (TM)
.
LZSC1300  BRANCH    COMPCNT,LZSC1301
.
LZSC1301  APPEND    ANS,ZSC01301
          GOTO      LZSC9999
.
.         ZSC.14  Overnight Indicator (ID)
.
LZSC1400  BRANCH    COMPCNT,LZSC1401
          GOTO      LZSC9999
.
LZSC1401  APPEND    ANS,ZSC01401
          GOTO      LZSC9999
.
.         ZSC.15  Time Patient Called For (TM)
.
LZSC1500  BRANCH    COMPCNT,LZSC1501
.
LZSC1501  APPEND    ANS,ZSC01501
          GOTO      LZSC9999
.
.         ZSC.16  Anaesthetic Time Out (TM)
.
LZSC1600  BRANCH    COMPCNT,LZSC1601
.
LZSC1601  APPEND    ANS,ZSC01601
          GOTO      LZSC9999
.
.         ZSC.17  Anaesthetic Cannulation (TM)
.
LZSC1700  BRANCH    COMPCNT,LZSC1701
.
LZSC1701  APPEND    ANS,ZSC01701
          GOTO      LZSC9999
.
.         ZSC.18  Surgical Time Out (TM)
.
LZSC1800  BRANCH    COMPCNT,LZSC1801
.
LZSC1801  APPEND    ANS,ZSC01801
          GOTO      LZSC9999
.
.         ZSC.19  Ready For Recovery (TM)
.
LZSC1900  BRANCH    COMPCNT,LZSC1901
.
LZSC1901  APPEND    ANS,ZSC01901
          GOTO      LZSC9999
.
.         ZSC.20  Time Into Recovery Front (TM)
.
LZSC2000  BRANCH    COMPCNT,LZSC2001
.
LZSC2001  APPEND    ANS,ZSC02001
          GOTO      LZSC9999
.
.         ZSC.21  Time Into Recovery Back (TM)
.
LZSC2100  BRANCH    COMPCNT,LZSC2101
.
LZSC2101  APPEND    ANS,ZSC02101
          GOTO      LZSC9999
.
.         ZSC.22  Ready To Depart Time (TM)
.
LZSC2200  BRANCH    COMPCNT,LZSC2201
.
LZSC2201  APPEND    ANS,ZSC02201
          GOTO      LZSC9999
.
.         ZSC.23  Time To ICU (TM)
.
LZSC2300  BRANCH    COMPCNT,LZSC2301
.
LZSC2301  APPEND    ANS,ZSC02301
          GOTO      LZSC9999
.
.         ZSC.24  Time Patient Died (TM)
.
LZSC2400  BRANCH    COMPCNT,LZSC2401
.
LZSC2401  APPEND    ANS,ZSC02401
          GOTO      LZSC9999
.
.         ZSC.25  Clinical Review Date/Time (TS)
.
LZSC2500  BRANCH    COMPCNT,LZSC2501
.
LZSC2501  APPEND    ANS,ZSC02501
          GOTO      LZSC9999
.
.         ZSC.26 Admitting Nurse Code (XCN)
.
LZSC2600  BRANCH    COMPCNT,LZSC2601:            * id number (ST)
                            LZSC2602:            * family name (ST)
                            LZSC2603:            * given name (ST)
                            LZSC2604:            * middle name (ST)
                            LZSC2605:            * suffix (ST)
                            LZSC2606:            * prefix (ST)
                            LZSC2607:            * degree (IS)
                            LZSC2608:            * source table (IS)
                            LZSC2609:            * assigning authority (HD)
                            LZSC2610:            * name type code (ID)
                            LZSC2611:            * identifier check digit (ST)
                            LZSC2612:            * check digit scheme code (ID)
                            LZSC2613:            * identifier type code (IS)
                            LZSC2614:            * assigning facility (HD)
                            LZSC2615             * name representation code (ID)
          GOTO      LZSC9999
.
LZSC2601  APPEND    ANS,ZSC02601                 * load id number (ST)
          GOTO      LZSC9999
.
LZSC2602  APPEND    ANS,ZSC02602                 * load family name (ST)
          GOTO      LZSC9999
.
LZSC2603  APPEND    ANS,ZSC02603                 * load given name (ST)
          GOTO      LZSC9999
.
LZSC2604  APPEND    ANS,ZSC02604                 * load middle name (ST)
          GOTO      LZSC9999
.
LZSC2605  APPEND    ANS,ZSC02605                 * load suffix (ST)
          GOTO      LZSC9999
.
LZSC2606  APPEND    ANS,ZSC02606                 * load prefix (ST)
          GOTO      LZSC9999
.
LZSC2607  APPEND    ANS,ZSC02607                 * load degree (IS)
          GOTO      LZSC9999
.
LZSC2608  APPEND    ANS,ZSC02608                 * load source table (IS)
          GOTO      LZSC9999
.
LZSC2609  APPEND    ANS,ZSC02609                 * load assigning authority (HD)
          GOTO      LZSC9999
.
LZSC2610  APPEND    ANS,ZSC02610                 * load name type code (ID)
          GOTO      LZSC9999
.
LZSC2611  APPEND    ANS,ZSC02611                 * load ident. check digit (ST)
          GOTO      LZSC9999
.
LZSC2612  APPEND    ANS,ZSC02612                 * load chk dig scheme code (ID)
          GOTO      LZSC9999
.
LZSC2613  APPEND    ANS,ZSC02613                 * load ident. type code (IS)
          GOTO      LZSC9999
.
LZSC2614  APPEND    ANS,ZSC02614                 * load assigning facility (HD)
          GOTO      LZSC9999
.
LZSC2615  APPEND    ANS,ZSC02615                 * load name repres. code (ID)
          GOTO      LZSC9999
.
.         ZSC.27 Recovery Nurse Day 1 Code (XCN)
.
LZSC2700  BRANCH    COMPCNT,LZSC2701:            * id number (ST)
                            LZSC2702:            * family name (ST)
                            LZSC2703:            * given name (ST)
                            LZSC2704:            * middle name (ST)
                            LZSC2705:            * suffix (ST)
                            LZSC2706:            * prefix (ST)
                            LZSC2707:            * degree (IS)
                            LZSC2708:            * source table (IS)
                            LZSC2709:            * assigning authority (HD)
                            LZSC2710:            * name type code (ID)
                            LZSC2711:            * identifier check digit (ST)
                            LZSC2712:            * check digit scheme code (ID)
                            LZSC2713:            * identifier type code (IS)
                            LZSC2714:            * assigning facility (HD)
                            LZSC2715             * name representation code (ID)
          GOTO      LZSC9999
.
LZSC2701  APPEND    ANS,ZSC02701                 * load id number (ST)
          GOTO      LZSC9999
.
LZSC2702  APPEND    ANS,ZSC02702                 * load family name (ST)
          GOTO      LZSC9999
.
LZSC2703  APPEND    ANS,ZSC02703                 * load given name (ST)
          GOTO      LZSC9999
.
LZSC2704  APPEND    ANS,ZSC02704                 * load middle name (ST)
          GOTO      LZSC9999
.
LZSC2705  APPEND    ANS,ZSC02705                 * load suffix (ST)
          GOTO      LZSC9999
.
LZSC2706  APPEND    ANS,ZSC02706                 * load prefix (ST)
          GOTO      LZSC9999
.
LZSC2707  APPEND    ANS,ZSC02707                 * load degree (IS)
          GOTO      LZSC9999
.
LZSC2708  APPEND    ANS,ZSC02708                 * load source table (IS)
          GOTO      LZSC9999
.
LZSC2709  APPEND    ANS,ZSC02709                 * load assigning authority (HD)
          GOTO      LZSC9999
.
LZSC2710  APPEND    ANS,ZSC02710                 * load name type code (ID)
          GOTO      LZSC9999
.
LZSC2711  APPEND    ANS,ZSC02711                 * load ident. check digit (ST)
          GOTO      LZSC9999
.
LZSC2712  APPEND    ANS,ZSC02712                 * load chk dig scheme code (ID)
          GOTO      LZSC9999
.
LZSC2713  APPEND    ANS,ZSC02713                 * load ident. type code (IS)
          GOTO      LZSC9999
.
LZSC2714  APPEND    ANS,ZSC02714                 * load assigning facility (HD)
          GOTO      LZSC9999
.
LZSC2715  APPEND    ANS,ZSC02715                 * load name repres. code (ID)
          GOTO      LZSC9999
.
.         ZSC.28 Recovery Nurse Day 2 Code (XCN)
.
LZSC2800  BRANCH    COMPCNT,LZSC2801:            * id number (ST)
                            LZSC2802:            * family name (ST)
                            LZSC2803:            * given name (ST)
                            LZSC2804:            * middle name (ST)
                            LZSC2805:            * suffix (ST)
                            LZSC2806:            * prefix (ST)
                            LZSC2807:            * degree (IS)
                            LZSC2808:            * source table (IS)
                            LZSC2809:            * assigning authority (HD)
                            LZSC2810:            * name type code (ID)
                            LZSC2811:            * identifier check digit (ST)
                            LZSC2812:            * check digit scheme code (ID)
                            LZSC2813:            * identifier type code (IS)
                            LZSC2814:            * assigning facility (HD)
                            LZSC2815             * name representation code (ID)
          GOTO      LZSC9999
.
LZSC2801  APPEND    ANS,ZSC02801                 * load id number (ST)
          GOTO      LZSC9999
.
LZSC2802  APPEND    ANS,ZSC02802                 * load family name (ST)
          GOTO      LZSC9999
.
LZSC2803  APPEND    ANS,ZSC02803                 * load given name (ST)
          GOTO      LZSC9999
.
LZSC2804  APPEND    ANS,ZSC02804                 * load middle name (ST)
          GOTO      LZSC9999
.
LZSC2805  APPEND    ANS,ZSC02805                 * load suffix (ST)
          GOTO      LZSC9999
.
LZSC2806  APPEND    ANS,ZSC02806                 * load prefix (ST)
          GOTO      LZSC9999
.
LZSC2807  APPEND    ANS,ZSC02807                 * load degree (IS)
          GOTO      LZSC9999
.
LZSC2808  APPEND    ANS,ZSC02808                 * load source table (IS)
          GOTO      LZSC9999
.
LZSC2809  APPEND    ANS,ZSC02809                 * load assigning authority (HD)
          GOTO      LZSC9999
.
LZSC2810  APPEND    ANS,ZSC02810                 * load name type code (ID)
          GOTO      LZSC9999
.
LZSC2811  APPEND    ANS,ZSC02811                 * load ident. check digit (ST)
          GOTO      LZSC9999
.
LZSC2812  APPEND    ANS,ZSC02812                 * load chk dig scheme code (ID)
          GOTO      LZSC9999
.
LZSC2813  APPEND    ANS,ZSC02813                 * load ident. type code (IS)
          GOTO      LZSC9999
.
LZSC2814  APPEND    ANS,ZSC02814                 * load assigning facility (HD)
          GOTO      LZSC9999
.
LZSC2815  APPEND    ANS,ZSC02815                 * load name repres. code (ID)
          GOTO      LZSC9999
.
.         ZSC.29 Recovery Nurse Front 1 Code (XCN)
.
LZSC2900  BRANCH    COMPCNT,LZSC2901:            * id number (ST)
                            LZSC2902:            * family name (ST)
                            LZSC2903:            * given name (ST)
                            LZSC2904:            * middle name (ST)
                            LZSC2905:            * suffix (ST)
                            LZSC2906:            * prefix (ST)
                            LZSC2907:            * degree (IS)
                            LZSC2908:            * source table (IS)
                            LZSC2909:            * assigning authority (HD)
                            LZSC2910:            * name type code (ID)
                            LZSC2911:            * identifier check digit (ST)
                            LZSC2912:            * check digit scheme code (ID)
                            LZSC2913:            * identifier type code (IS)
                            LZSC2914:            * assigning facility (HD)
                            LZSC2915             * name representation code (ID)
          GOTO      LZSC9999
.
LZSC2901  APPEND    ANS,ZSC02901                 * load id number (ST)
          GOTO      LZSC9999
.
LZSC2902  APPEND    ANS,ZSC02902                 * load family name (ST)
          GOTO      LZSC9999
.
LZSC2903  APPEND    ANS,ZSC02903                 * load given name (ST)
          GOTO      LZSC9999
.
LZSC2904  APPEND    ANS,ZSC02904                 * load middle name (ST)
          GOTO      LZSC9999
.
LZSC2905  APPEND    ANS,ZSC02905                 * load suffix (ST)
          GOTO      LZSC9999
.
LZSC2906  APPEND    ANS,ZSC02906                 * load prefix (ST)
          GOTO      LZSC9999
.
LZSC2907  APPEND    ANS,ZSC02907                 * load degree (IS)
          GOTO      LZSC9999
.
LZSC2908  APPEND    ANS,ZSC02908                 * load source table (IS)
          GOTO      LZSC9999
.
LZSC2909  APPEND    ANS,ZSC02909                 * load assigning authority (HD)
          GOTO      LZSC9999
.
LZSC2910  APPEND    ANS,ZSC02910                 * load name type code (ID)
          GOTO      LZSC9999
.
LZSC2911  APPEND    ANS,ZSC02911                 * load ident. check digit (ST)
          GOTO      LZSC9999
.
LZSC2912  APPEND    ANS,ZSC02912                 * load chk dig scheme code (ID)
          GOTO      LZSC9999
.
LZSC2913  APPEND    ANS,ZSC02913                 * load ident. type code (IS)
          GOTO      LZSC9999
.
LZSC2914  APPEND    ANS,ZSC02914                 * load assigning facility (HD)
          GOTO      LZSC9999
.
LZSC2915  APPEND    ANS,ZSC02915                 * load name repres. code (ID)
          GOTO      LZSC9999
.
.         ZSC.30 Recovery Nurse Front 2 Code (XCN)
.
LZSC3000  BRANCH    COMPCNT,LZSC3001:            * id number (ST)
                            LZSC3002:            * family name (ST)
                            LZSC3003:            * given name (ST)
                            LZSC3004:            * middle name (ST)
                            LZSC3005:            * suffix (ST)
                            LZSC3006:            * prefix (ST)
                            LZSC3007:            * degree (IS)
                            LZSC3008:            * source table (IS)
                            LZSC3009:            * assigning authority (HD)
                            LZSC3010:            * name type code (ID)
                            LZSC3011:            * identifier check digit (ST)
                            LZSC3012:            * check digit scheme code (ID)
                            LZSC3013:            * identifier type code (IS)
                            LZSC3014:            * assigning facility (HD)
                            LZSC3015             * name representation code (ID)
          GOTO      LZSC9999
.
LZSC3001  APPEND    ANS,ZSC03001                 * load id number (ST)
          GOTO      LZSC9999
.
LZSC3002  APPEND    ANS,ZSC03002                 * load family name (ST)
          GOTO      LZSC9999
.
LZSC3003  APPEND    ANS,ZSC03003                 * load given name (ST)
          GOTO      LZSC9999
.
LZSC3004  APPEND    ANS,ZSC03004                 * load middle name (ST)
          GOTO      LZSC9999
.
LZSC3005  APPEND    ANS,ZSC03005                 * load suffix (ST)
          GOTO      LZSC9999
.
LZSC3006  APPEND    ANS,ZSC03006                 * load prefix (ST)
          GOTO      LZSC9999
.
LZSC3007  APPEND    ANS,ZSC03007                 * load degree (IS)
          GOTO      LZSC9999
.
LZSC3008  APPEND    ANS,ZSC03008                 * load source table (IS)
          GOTO      LZSC9999
.
LZSC3009  APPEND    ANS,ZSC03009                 * load assigning authority (HD)
          GOTO      LZSC9999
.
LZSC3010  APPEND    ANS,ZSC03010                 * load name type code (ID)
          GOTO      LZSC9999
.
LZSC3011  APPEND    ANS,ZSC03011                 * load ident. check digit (ST)
          GOTO      LZSC9999
.
LZSC3012  APPEND    ANS,ZSC03012                 * load chk dig scheme code (ID)
          GOTO      LZSC9999
.
LZSC3013  APPEND    ANS,ZSC03013                 * load ident. type code (IS)
          GOTO      LZSC9999
.
LZSC3014  APPEND    ANS,ZSC03014                 * load assigning facility (HD)
          GOTO      LZSC9999
.
LZSC3015  APPEND    ANS,ZSC03015                 * load name repres. code (ID)
          GOTO      LZSC9999
.
.         ZSC.31 Recovery Nurse Back 1 Code (XCN)
.
LZSC3100  BRANCH    COMPCNT,LZSC3101:            * id number (ST)
                            LZSC3102:            * family name (ST)
                            LZSC3103:            * given name (ST)
                            LZSC3104:            * middle name (ST)
                            LZSC3105:            * suffix (ST)
                            LZSC3106:            * prefix (ST)
                            LZSC3107:            * degree (IS)
                            LZSC3108:            * source table (IS)
                            LZSC3109:            * assigning authority (HD)
                            LZSC3110:            * name type code (ID)
                            LZSC3111:            * identifier check digit (ST)
                            LZSC3112:            * check digit scheme code (ID)
                            LZSC3113:            * identifier type code (IS)
                            LZSC3114:            * assigning facility (HD)
                            LZSC3115             * name representation code (ID)
          GOTO      LZSC9999
.
LZSC3101  APPEND    ANS,ZSC03101                 * load id number (ST)
          GOTO      LZSC9999
.
LZSC3102  APPEND    ANS,ZSC03102                 * load family name (ST)
          GOTO      LZSC9999
.
LZSC3103  APPEND    ANS,ZSC03103                 * load given name (ST)
          GOTO      LZSC9999
.
LZSC3104  APPEND    ANS,ZSC03104                 * load middle name (ST)
          GOTO      LZSC9999
.
LZSC3105  APPEND    ANS,ZSC03105                 * load suffix (ST)
          GOTO      LZSC9999
.
LZSC3106  APPEND    ANS,ZSC03106                 * load prefix (ST)
          GOTO      LZSC9999
.
LZSC3107  APPEND    ANS,ZSC03107                 * load degree (IS)
          GOTO      LZSC9999
.
LZSC3108  APPEND    ANS,ZSC03108                 * load source table (IS)
          GOTO      LZSC9999
.
LZSC3109  APPEND    ANS,ZSC03109                 * load assigning authority (HD)
          GOTO      LZSC9999
.
LZSC3110  APPEND    ANS,ZSC03110                 * load name type code (ID)
          GOTO      LZSC9999
.
LZSC3111  APPEND    ANS,ZSC03111                 * load ident. check digit (ST)
          GOTO      LZSC9999
.
LZSC3112  APPEND    ANS,ZSC03112                 * load chk dig scheme code (ID)
          GOTO      LZSC9999
.
LZSC3113  APPEND    ANS,ZSC03113                 * load ident. type code (IS)
          GOTO      LZSC9999
.
LZSC3114  APPEND    ANS,ZSC03114                 * load assigning facility (HD)
          GOTO      LZSC9999
.
LZSC3115  APPEND    ANS,ZSC03115                 * load name repres. code (ID)
          GOTO      LZSC9999
.
.         ZSC.32 Recovery Nurse Back 2 Code (XCN)
.
LZSC3200  BRANCH    COMPCNT,LZSC3201:            * id number (ST)
                            LZSC3202:            * family name (ST)
                            LZSC3203:            * given name (ST)
                            LZSC3204:            * middle name (ST)
                            LZSC3205:            * suffix (ST)
                            LZSC3206:            * prefix (ST)
                            LZSC3207:            * degree (IS)
                            LZSC3208:            * source table (IS)
                            LZSC3209:            * assigning authority (HD)
                            LZSC3210:            * name type code (ID)
                            LZSC3211:            * identifier check digit (ST)
                            LZSC3212:            * check digit scheme code (ID)
                            LZSC3213:            * identifier type code (IS)
                            LZSC3214:            * assigning facility (HD)
                            LZSC3215             * name representation code (ID)
          GOTO      LZSC9999
.
LZSC3201  APPEND    ANS,ZSC03201                 * load id number (ST)
          GOTO      LZSC9999
.
LZSC3202  APPEND    ANS,ZSC03202                 * load family name (ST)
          GOTO      LZSC9999
.
LZSC3203  APPEND    ANS,ZSC03203                 * load given name (ST)
          GOTO      LZSC9999
.
LZSC3204  APPEND    ANS,ZSC03204                 * load middle name (ST)
          GOTO      LZSC9999
.
LZSC3205  APPEND    ANS,ZSC03205                 * load suffix (ST)
          GOTO      LZSC9999
.
LZSC3206  APPEND    ANS,ZSC03206                 * load prefix (ST)
          GOTO      LZSC9999
.
LZSC3207  APPEND    ANS,ZSC03207                 * load degree (IS)
          GOTO      LZSC9999
.
LZSC3208  APPEND    ANS,ZSC03208                 * load source table (IS)
          GOTO      LZSC9999
.
LZSC3209  APPEND    ANS,ZSC03209                 * load assigning authority (HD)
          GOTO      LZSC9999
.
LZSC3210  APPEND    ANS,ZSC03210                 * load name type code (ID)
          GOTO      LZSC9999
.
LZSC3211  APPEND    ANS,ZSC03211                 * load ident. check digit (ST)
          GOTO      LZSC9999
.
LZSC3212  APPEND    ANS,ZSC03212                 * load chk dig scheme code (ID)
          GOTO      LZSC9999
.
LZSC3213  APPEND    ANS,ZSC03213                 * load ident. type code (IS)
          GOTO      LZSC9999
.
LZSC3214  APPEND    ANS,ZSC03214                 * load assigning facility (HD)
          GOTO      LZSC9999
.
LZSC3215  APPEND    ANS,ZSC03215                 * load name repres. code (ID)
          GOTO      LZSC9999
.
.         ZSC.33 Arrival Late Reason (CE)
.
LZSC3300  BRANCH    COMPCNT,LZSC3301:            * identifier (ST)
                            LZSC3302:            * text (ST)
                            LZSC3303:            * name of coding system (ST)
                            LZSC3304:            * alternate identifier (ST)
                            LZSC3305:            * alternate text (ST)
                            LZSC3306             * name of alt. cod. system (ST)
          GOTO      LZSC9999
.
LZSC3301  APPEND    ANS,ZSC03301                 * identifier (ST)
          GOTO      LZSC9999
.
LZSC3302  APPEND    ANS,ZSC03302                 * text (ST)
          GOTO      LZSC9999
.
LZSC3303  APPEND    ANS,ZSC03303                 * name of coding system (ST)
          GOTO      LZSC9999
.
LZSC3304  APPEND    ANS,ZSC03304                 * alternate identifier (ST)
          GOTO      LZSC9999
.
LZSC3305  APPEND    ANS,ZSC03305                 * alternate text (ST)
          GOTO      LZSC9999
.
LZSC3306  APPEND    ANS,ZSC03306                 * name of alt. cod. system (ST)
          GOTO      LZSC9999
.
.         ZSC.34 Anaesthetic Delay Reason (CE)
.
LZSC3400  BRANCH    COMPCNT,LZSC3401:            * identifier (ST)
                            LZSC3402:            * text (ST)
                            LZSC3403:            * name of coding system (ST)
                            LZSC3404:            * alternate identifier (ST)
                            LZSC3405:            * alternate text (ST)
                            LZSC3406             * name of alt. cod. system (ST)
          GOTO      LZSC9999
.
LZSC3401  APPEND    ANS,ZSC03401                 * identifier (ST)
          GOTO      LZSC9999
.
LZSC3402  APPEND    ANS,ZSC03402                 * text (ST)
          GOTO      LZSC9999
.
LZSC3403  APPEND    ANS,ZSC03403                 * name of coding system (ST)
          GOTO      LZSC9999
.
LZSC3404  APPEND    ANS,ZSC03404                 * alternate identifier (ST)
          GOTO      LZSC9999
.
LZSC3405  APPEND    ANS,ZSC03405                 * alternate text (ST)
          GOTO      LZSC9999
.
LZSC3406  APPEND    ANS,ZSC03406                 * name of alt. cod. system (ST)
          GOTO      LZSC9999
.
.         ZSC.35 Surgical Start Late Reason (CE)
.
LZSC3500  BRANCH    COMPCNT,LZSC3501:            * identifier (ST)
                            LZSC3502:            * text (ST)
                            LZSC3503:            * name of coding system (ST)
                            LZSC3504:            * alternate identifier (ST)
                            LZSC3505:            * alternate text (ST)
                            LZSC3506             * name of alt. cod. system (ST)
          GOTO      LZSC9999
.
LZSC3501  APPEND    ANS,ZSC03501                 * identifier (ST)
          GOTO      LZSC9999
.
LZSC3502  APPEND    ANS,ZSC03502                 * text (ST)
          GOTO      LZSC9999
.
LZSC3503  APPEND    ANS,ZSC03503                 * name of coding system (ST)
          GOTO      LZSC9999
.
LZSC3504  APPEND    ANS,ZSC03504                 * alternate identifier (ST)
          GOTO      LZSC9999
.
LZSC3505  APPEND    ANS,ZSC03505                 * alternate text (ST)
          GOTO      LZSC9999
.
LZSC3506  APPEND    ANS,ZSC03506                 * name of alt. cod. system (ST)
          GOTO      LZSC9999
.
.         ZSC.36 Reason For Overnight (CE)
.
LZSC3600  BRANCH    COMPCNT,LZSC3601:            * identifier (ST)
                            LZSC3602:            * text (ST)
                            LZSC3603:            * name of coding system (ST)
                            LZSC3604:            * alternate identifier (ST)
                            LZSC3605:            * alternate text (ST)
                            LZSC3606             * name of alt. cod. system (ST)
          GOTO      LZSC9999
.
LZSC3601  APPEND    ANS,ZSC03601                 * identifier (ST)
          GOTO      LZSC9999
.
LZSC3602  APPEND    ANS,ZSC03602                 * text (ST)
          GOTO      LZSC9999
.
LZSC3603  APPEND    ANS,ZSC03603                 * name of coding system (ST)
          GOTO      LZSC9999
.
LZSC3604  APPEND    ANS,ZSC03604                 * alternate identifier (ST)
          GOTO      LZSC9999
.
LZSC3605  APPEND    ANS,ZSC03605                 * alternate text (ST)
          GOTO      LZSC9999
.
LZSC3606  APPEND    ANS,ZSC03606                 * name of alt. cod. system (ST)
          GOTO      LZSC9999
.
.         ZSC.37 Recovery In Delay Reason (CE)
.
LZSC3700  BRANCH    COMPCNT,LZSC3701:            * identifier (ST)
                            LZSC3702:            * text (ST)
                            LZSC3703:            * name of coding system (ST)
                            LZSC3704:            * alternate identifier (ST)
                            LZSC3705:            * alternate text (ST)
                            LZSC3706             * name of alt. cod. system (ST)
          GOTO      LZSC9999
.
LZSC3701  APPEND    ANS,ZSC03701                 * identifier (ST)
          GOTO      LZSC9999
.
LZSC3702  APPEND    ANS,ZSC03702                 * text (ST)
          GOTO      LZSC9999
.
LZSC3703  APPEND    ANS,ZSC03703                 * name of coding system (ST)
          GOTO      LZSC9999
.
LZSC3704  APPEND    ANS,ZSC03704                 * alternate identifier (ST)
          GOTO      LZSC9999
.
LZSC3705  APPEND    ANS,ZSC03705                 * alternate text (ST)
          GOTO      LZSC9999
.
LZSC3706  APPEND    ANS,ZSC03706                 * name of alt. cod. system (ST)
          GOTO      LZSC9999
.
.         ZSC.38 Recovery Bay (CE)
.
LZSC3800  BRANCH    COMPCNT,LZSC3801:            * identifier (ST)
                            LZSC3802:            * text (ST)
                            LZSC3803:            * name of coding system (ST)
                            LZSC3804:            * alternate identifier (ST)
                            LZSC3805:            * alternate text (ST)
                            LZSC3806             * name of alt. cod. system (ST)
          GOTO      LZSC9999
.
LZSC3801  APPEND    ANS,ZSC03801                 * identifier (ST)
          GOTO      LZSC9999
.
LZSC3802  APPEND    ANS,ZSC03802                 * text (ST)
          GOTO      LZSC9999
.
LZSC3803  APPEND    ANS,ZSC03803                 * name of coding system (ST)
          GOTO      LZSC9999
.
LZSC3804  APPEND    ANS,ZSC03804                 * alternate identifier (ST)
          GOTO      LZSC9999
.
LZSC3805  APPEND    ANS,ZSC03805                 * alternate text (ST)
          GOTO      LZSC9999
.
LZSC3806  APPEND    ANS,ZSC03806                 * name of alt. cod. system (ST)
          GOTO      LZSC9999
.
.         ZSC.39 Acuity (CE)
.
LZSC3900  BRANCH    COMPCNT,LZSC3901:            * identifier (ST)
                            LZSC3902:            * text (ST)
                            LZSC3903:            * name of coding system (ST)
                            LZSC3904:            * alternate identifier (ST)
                            LZSC3905:            * alternate text (ST)
                            LZSC3906             * name of alt. cod. system (ST)
          GOTO      LZSC9999
.
LZSC3901  APPEND    ANS,ZSC03901                 * identifier (ST)
          GOTO      LZSC9999
.
LZSC3902  APPEND    ANS,ZSC03902                 * text (ST)
          GOTO      LZSC9999
.
LZSC3903  APPEND    ANS,ZSC03903                 * name of coding system (ST)
          GOTO      LZSC9999
.
LZSC3904  APPEND    ANS,ZSC03904                 * alternate identifier (ST)
          GOTO      LZSC9999
.
LZSC3905  APPEND    ANS,ZSC03905                 * alternate text (ST)
          GOTO      LZSC9999
.
LZSC3906  APPEND    ANS,ZSC03906                 * name of alt. cod. system (ST)
          GOTO      LZSC9999
.
.         ZSC.40 Recovery Exit Delay Reason (CE)
.
LZSC4000  BRANCH    COMPCNT,LZSC4001:            * identifier (ST)
                            LZSC4002:            * text (ST)
                            LZSC4003:            * name of coding system (ST)
                            LZSC4004:            * alternate identifier (ST)
                            LZSC4005:            * alternate text (ST)
                            LZSC4006             * name of alt. cod. system (ST)
          GOTO      LZSC9999
.
LZSC4001  APPEND    ANS,ZSC04001                 * identifier (ST)
          GOTO      LZSC9999
.
LZSC4002  APPEND    ANS,ZSC04002                 * text (ST)
          GOTO      LZSC9999
.
LZSC4003  APPEND    ANS,ZSC04003                 * name of coding system (ST)
          GOTO      LZSC9999
.
LZSC4004  APPEND    ANS,ZSC04004                 * alternate identifier (ST)
          GOTO      LZSC9999
.
LZSC4005  APPEND    ANS,ZSC04005                 * alternate text (ST)
          GOTO      LZSC9999
.
LZSC4006  APPEND    ANS,ZSC04006                 * name of alt. cod. system (ST)
          GOTO      LZSC9999
.
.         ZSC.41  Blood Loss (NM)
.
LZSC4100  BRANCH    COMPCNT,LZSC4101
.
LZSC4101  APPEND    ANS,ZSC04101
          GOTO      LZSC9999
.
.         ZSC.42  Fast Post Recovery (ID)
.
LZSC4200  BRANCH    COMPCNT,LZSC4201
.
LZSC4201  APPEND    ANS,ZSC04201
          GOTO      LZSC9999
.
.         ZSC.43  Admit Post Procedure (ID)
.
LZSC4300  BRANCH    COMPCNT,LZSC4301
.
LZSC4301  APPEND    ANS,ZSC04301
          GOTO      LZSC9999
.
.         ZSC.44  No Recovery (ID)
.
LZSC4400  BRANCH    COMPCNT,LZSC4401
.
LZSC4401  APPEND    ANS,ZSC04401
          GOTO      LZSC9999
.
.         ZSC.45  Case Abandoned (ID)
.
LZSC4500  BRANCH    COMPCNT,LZSC4501
.
LZSC4501  APPEND    ANS,ZSC04501
          GOTO      LZSC9999
.
.         ZSC.46  Comments (ST)
.                 Comments are loaded into a temp file as each 70 character
.                 text string is received, so that we can have up to 9999
.                 comment lines, rather than trying to load the full comment
.                 into a single variable (which would be limited to 4096
.                 bytes). 
.
LZSC4600  BRANCH    COMPCNT,LZSC4601
.
LZSC4601  APPEND    ANS,ZSC04601
          MOVELPTR  ZSC04601,FIELDLEN
          IF        FIELDLEN = 70
            RESET     ZSC04601
            MOVE      ONE,COMMTYPE
            ADD       ONE,ZSC46CNT
            MOVE      ZSC46CNT,COMMLINE
            MOVE      ZSC04601,COMMTEXT
            CALL      WRTEMP5                    * write temp file comment line
.
            MOVE      SP100,ZSC04601             * reset field for next comment
            CLEAR     ZSC04601
          ENDIF
          GOTO      LZSC9999
.
.         ZSC.47  Preadmission and Operation Notes (ST)
.                 Comments are loaded into a temp file as each 70 character
.                 text string is received, so that we can have up to 9999
.                 comment lines, rather than trying to load the full comment
.                 into a single variable (which would be limited to 4096
.                 bytes). 
.
LZSC4700  BRANCH    COMPCNT,LZSC4701
.
LZSC4701  APPEND    ANS,ZSC04701
          MOVELPTR  ZSC04701,FIELDLEN
          IF        FIELDLEN = 70
            RESET     ZSC04701
            MOVE      TWO,COMMTYPE
            ADD       ONE,ZSC47CNT
            MOVE      ZSC47CNT,COMMLINE
            MOVE      ZSC04701,COMMTEXT
            CALL      WRTEMP5                    * write temp file comment line
.
            MOVE      SP100,ZSC04701             * reset field for next comment
            CLEAR     ZSC04701
          ENDIF
          GOTO      LZSC9999
.
.         ZSC.48  Prosthesis (ST)
.
LZSC4800  BRANCH    COMPCNT,LZSC4801
.
LZSC4801  APPEND    ANS,ZSC04801
          GOTO      LZSC9999
.
.         ZSC.49 Equipment/Items (Diathermy Type 1) (CE)
.
LZSC4900  BRANCH    COMPCNT,LZSC4901:            * identifier (ST)
                            LZSC4902:            * text (ST)
                            LZSC4903:            * name of coding system (ST)
                            LZSC4904:            * alternate identifier (ST)
                            LZSC4905:            * alternate text (ST)
                            LZSC4906             * name of alt. cod. system (ST)
          GOTO      LZSC9999
.
LZSC4901  APPEND    ANS,ZSC04901                 * identifier (ST)
          GOTO      LZSC9999
.
LZSC4902  APPEND    ANS,ZSC04902                 * text (ST)
          GOTO      LZSC9999
.
LZSC4903  APPEND    ANS,ZSC04903                 * name of coding system (ST)
          GOTO      LZSC9999
.
LZSC4904  APPEND    ANS,ZSC04904                 * alternate identifier (ST)
          GOTO      LZSC9999
.
LZSC4905  APPEND    ANS,ZSC04905                 * alternate text (ST)
          GOTO      LZSC9999
.
LZSC4906  APPEND    ANS,ZSC04906                 * name of alt. cod. system (ST)
          GOTO      LZSC9999
.
.         ZSC.50 Equipment/Items (Diathermy Type 2) (CE)
.
LZSC5000  BRANCH    COMPCNT,LZSC5001:            * identifier (ST)
                            LZSC5002:            * text (ST)
                            LZSC5003:            * name of coding system (ST)
                            LZSC5004:            * alternate identifier (ST)
                            LZSC5005:            * alternate text (ST)
                            LZSC5006             * name of alt. cod. system (ST)
          GOTO      LZSC9999
.
LZSC5001  APPEND    ANS,ZSC05001                 * identifier (ST)
          GOTO      LZSC9999
.
LZSC5002  APPEND    ANS,ZSC05002                 * text (ST)
          GOTO      LZSC9999
.
LZSC5003  APPEND    ANS,ZSC05003                 * name of coding system (ST)
          GOTO      LZSC9999
.
LZSC5004  APPEND    ANS,ZSC05004                 * alternate identifier (ST)
          GOTO      LZSC9999
.
LZSC5005  APPEND    ANS,ZSC05005                 * alternate text (ST)
          GOTO      LZSC9999
.
LZSC5006  APPEND    ANS,ZSC05006                 * name of alt. cod. system (ST)
          GOTO      LZSC9999
.
.         ZSC.51  Site Intact 1 (ID)
.
LZSC5100  BRANCH    COMPCNT,LZSC5101
.
LZSC5101  APPEND    ANS,ZSC05101
          GOTO      LZSC9999
.
.         ZSC.52  Site Intact 2 (ID)
.
LZSC5200  BRANCH    COMPCNT,LZSC5201
.
LZSC5201  APPEND    ANS,ZSC05201
          GOTO      LZSC9999
.
.         ZSC.53 Equipment/Item Used 1 (CE)
.
LZSC5300  BRANCH    COMPCNT,LZSC5301:            * identifier (ST)
                            LZSC5302:            * text (ST)
                            LZSC5303:            * name of coding system (ST)
                            LZSC5304:            * alternate identifier (ST)
                            LZSC5305:            * alternate text (ST)
                            LZSC5306             * name of alt. cod. system (ST)
          GOTO      LZSC9999
.
LZSC5301  APPEND    ANS,ZSC05301                 * identifier (ST)
          GOTO      LZSC9999
.
LZSC5302  APPEND    ANS,ZSC05302                 * text (ST)
          GOTO      LZSC9999
.
LZSC5303  APPEND    ANS,ZSC05303                 * name of coding system (ST)
          GOTO      LZSC9999
.
LZSC5304  APPEND    ANS,ZSC05304                 * alternate identifier (ST)
          GOTO      LZSC9999
.
LZSC5305  APPEND    ANS,ZSC05305                 * alternate text (ST)
          GOTO      LZSC9999
.
LZSC5306  APPEND    ANS,ZSC05306                 * name of alt. cod. system (ST)
          GOTO      LZSC9999
.
.         ZSC.54 Equipment/Item Used 2 (CE)
.
LZSC5400  BRANCH    COMPCNT,LZSC5401:            * identifier (ST)
                            LZSC5402:            * text (ST)
                            LZSC5403:            * name of coding system (ST)
                            LZSC5404:            * alternate identifier (ST)
                            LZSC5405:            * alternate text (ST)
                            LZSC5406             * name of alt. cod. system (ST)
          GOTO      LZSC9999
.
LZSC5401  APPEND    ANS,ZSC05401                 * identifier (ST)
          GOTO      LZSC9999
.
LZSC5402  APPEND    ANS,ZSC05402                 * text (ST)
          GOTO      LZSC9999
.
LZSC5403  APPEND    ANS,ZSC05403                 * name of coding system (ST)
          GOTO      LZSC9999
.
LZSC5404  APPEND    ANS,ZSC05404                 * alternate identifier (ST)
          GOTO      LZSC9999
.
LZSC5405  APPEND    ANS,ZSC05405                 * alternate text (ST)
          GOTO      LZSC9999
.
LZSC5406  APPEND    ANS,ZSC05406                 * name of alt. cod. system (ST)
          GOTO      LZSC9999
.
.         ZSC.55  Caesarean Birth Count (NM)
.
LZSC5500  COMPARE   REPTNCNT,TWENTY              * maximum repeats reached ?
          GOTO      LZSC9999 IF LESS             * yes
.
          BRANCH    COMPCNT,LZSC5501
.
LZSC5501  APPEND    ANS,ZSC05501[REPTNCNT]
          GOTO      LZSC9999
.
.         ZSC.56  Caesarean Birth Sex Of Baby (IS)
.                 (maximum of 19 repeats - 20 births in total)
.
LZSC5600  COMPARE   REPTNCNT,TWENTY              * maximum repeats reached ?
          GOTO      LZSC9999 IF LESS             * yes
.
          BRANCH    COMPCNT,LZSC5601
.
LZSC5601  APPEND    ANS,ZSC05601[REPTNCNT]
          GOTO      LZSC9999
.
.         ZSC.57  Caesarean Birth Date/Time Of Birth (TS)
.                 (maximum of 19 repeats - 20 births in total)
.
LZSC5700  COMPARE   REPTNCNT,TWENTY              * maximum repeats reached ?
          GOTO      LZSC9999 IF LESS             * yes
.
          BRANCH    COMPCNT,LZSC5701
.
LZSC5701  APPEND    ANS,ZSC05701[REPTNCNT]
          GOTO      LZSC9999
.
.         ZSC.58  Caesarean Birth U/R Number (??)
.                 (maximum of 19 repeats - 20 births in total)
.
LZSC5800  COMPARE   REPTNCNT,TWENTY              * maximum repeats reached ?
          GOTO      LZSC9999 IF LESS             * yes
.
          BRANCH    COMPCNT,LZSC5801
.
LZSC5801  APPEND    ANS,ZSC05801[REPTNCNT]
          GOTO      LZSC9999
.
.         ZSC.59  Caesarean Birth Baby Weight (NM)
.                 (maximum of 19 repeats - 20 births in total)
.
LZSC5900  COMPARE   REPTNCNT,TWENTY              * maximum repeats reached ?
          GOTO      LZSC9999 IF LESS             * yes
.
          BRANCH    COMPCNT,LZSC5901
.
LZSC5901  APPEND    ANS,ZSC05901[REPTNCNT]
          GOTO      LZSC9999
.
.         ZSC.60  Caesarean Birth Delivery Time (TM)
.                 (maximum of 19 repeats - 20 births in total)
.
LZSC6000  COMPARE   REPTNCNT,TWENTY              * maximum repeats reached ?
          GOTO      LZSC9999 IF LESS             * yes
.
          BRANCH    COMPCNT,LZSC6001
.
LZSC6001  APPEND    ANS,ZSC06001[REPTNCNT]
          GOTO      LZSC9999
.
.         ZSC.61  Admitting Nurse Start Time (TM)
.
LZSC6100  BRANCH    COMPCNT,LZSC6101
.
LZSC6101  APPEND    ANS,ZSC06101
          GOTO      LZSC9999
.
.         ZSC.62  Admitting Nurse End Time (TM)
.
LZSC6200  BRANCH    COMPCNT,LZSC6201
.
LZSC6201  APPEND    ANS,ZSC06201
          GOTO      LZSC9999
.
.         ZSC.63  Wheels In Time (TM)
.
LZSC6300  BRANCH    COMPCNT,LZSC6301
.
LZSC6301  APPEND    ANS,ZSC06301
          GOTO      LZSC9999
.
.         ZSC.64  Wheels Out Time (TM)
.
LZSC6400  BRANCH    COMPCNT,LZSC6401
.
LZSC6401  APPEND    ANS,ZSC06401
          GOTO      LZSC9999
.
LZSC9999  RETURN
+
.*****************************************************************************
.*                                 LZTR0000        Called by: PROC0000       *
.*                          Load the ZTR fields                              *
.*****************************************************************************
.
LZTR0000  BRANCH    FIELDNO,LZTR0100:       * Presenting Complaint Code
                            LZTR0200:       * Presenting Complaint Line 1
                            LZTR0300:       * Presenting Complaint Line 2
                            LZTR0400:       * Presenting Complaint Line 3
                            LZTR0500:       * Presenting Complaint Line 4
                            LZTR0600:       * Presenting Complaint Line 5
                            LZTR0700:       * Presenting Complaint Line 6
                            LZTR0800:       * Location Code
                            LZTR0900:       * Accompanying Person
                            LZTR1000:       * Arrival Transport
                            LZTR1100:       * Ambulance Case Number
                            LZTR1200:       * Attendance Source
                            LZTR1300:       * Streaming
                            LZTR1400:       * Disaster Code
                            LZTR1500:       * Airway
                            LZTR1600:       * C Spine
                            LZTR1700:       * Conscious State
                            LZTR1800:       * Behavioural 1
                            LZTR1900:       * Behavioural 2
                            LZTR2000:       * Breathing 1
                            LZTR2100:       * Breathing 2
                            LZTR2200:       * Breathing 3
                            LZTR2300:       * Colour 1
                            LZTR2400:       * Colour 2
                            LZTR2500:       * Pulse 1
                            LZTR2600:       * Pulse 2
                            LZTR2700:       * Skin 1
                            LZTR2800:       * Skin 2
                            LZTR2900:       * Mechanism
                            LZTR3000:       * Anatomical Criteria
                            LZTR3100:       * Physiologic
                            LZTR3200:       * Special Population
                            LZTR3300:       * Restraint
                            LZTR3400:       * Weight
                            LZTR3500:       * Pain Score
                            LZTR3600:       * Analgesia Taken
                            LZTR3700:       * Analgesia Declined
                            LZTR3800:       * ADT - Ready for Admission
                            LZTR3900:       * Immunisation Current
                            LZTR4000:       * Date Last Ate
                            LZTR4100:       * Date Last Drank
                            LZTR4200:       * Isolation
                            LZTR4300:       * Drug / Alcohol Taken
                            LZTR4400:       * Non WA Hospital 12 Mon
                            LZTR4500:       * Triage Date / Time
                            LZTR4600:       * Triage Category
                            LZTR4700:       * Triage Nurse
                            LZTR4800:       * Model of Care
                            LZTR4900        * Reason for Change
.
.         Invalid ZTR field received, so ignore it
.
          GOTO      LZTR9999
.
.         ZTR.1  Presenting Complaint Code (Cat el code) (CE)
.
LZTR0100  BRANCH    COMPCNT,LZTR0101:            * identifier (ST)
                            LZTR0102:            * text (ST)
                            LZTR0103:            * name of coding system (ST)
                            LZTR0104:            * alternate identifier (ST)
                            LZTR0105:            * alternate text (ST)
                            LZTR0106             * name of alt. cod. system (ST)
          GOTO      LZTR9999
.
LZTR0101  APPEND    ANS,ZTR00101                 * identifier (ST)
          GOTO      LZTR9999
.
LZTR0102  APPEND    ANS,ZTR00102                 * text (ST)
          GOTO      LZTR9999
.
LZTR0103  APPEND    ANS,ZTR00103                 * name of coding system (ST)
          GOTO      LZTR9999
.
LZTR0104  APPEND    ANS,ZTR00104                 * alternate identifier (ST)
          GOTO      LZTR9999
.
LZTR0105  APPEND    ANS,ZTR00105                 * alternate text (ST)
          GOTO      LZTR9999
.
LZTR0106  APPEND    ANS,ZTR00106                 * name of alt. cod. system (ST)
          GOTO      LZTR9999
.
.         ZTR.2  Presenting Complaint Line 1 (ST)
.
LZTR0200  BRANCH    COMPCNT,LZTR0201
.
LZTR0201  APPEND    ANS,ZTR00201
          GOTO      LZTR9999
.
.         ZTR.3  Presenting Complaint Line 2 (ST)
.
LZTR0300  BRANCH    COMPCNT,LZTR0301
.
LZTR0301  APPEND    ANS,ZTR00301
          GOTO      LZTR9999
.
.         ZTR.4  Presenting Complaint Line 3 (ST)
.
LZTR0400  BRANCH    COMPCNT,LZTR0401
.
LZTR0401  APPEND    ANS,ZTR00401
          GOTO      LZTR9999
.
.         ZTR.5  Presenting Complaint Line 4 (ST)
.
LZTR0500  BRANCH    COMPCNT,LZTR0501
.
LZTR0501  APPEND    ANS,ZTR00501
          GOTO      LZTR9999
.
.         ZTR.6  Presenting Complaint Line 5 (ST)
.
LZTR0600  BRANCH    COMPCNT,LZTR0601
.
LZTR0601  APPEND    ANS,ZTR00601
          GOTO      LZTR9999
.
.         ZTR.7  Presenting Complaint Line 6 (ST)
.
LZTR0700  BRANCH    COMPCNT,LZTR0701
.
LZTR0701  APPEND    ANS,ZTR00701
          GOTO      LZTR9999
.
.         ZTR.8  Location (emrlocaf code) (CE)
.
LZTR0800  BRANCH    COMPCNT,LZTR0801:            * identifier (ST)
                            LZTR0802:            * text (ST)
                            LZTR0803:            * name of coding system (ST)
                            LZTR0804:            * alternate identifier (ST)
                            LZTR0805:            * alternate text (ST)
                            LZTR0806             * name of alt. cod. system (ST)
          GOTO      LZTR9999
.
LZTR0801  APPEND    ANS,ZTR00801                 * identifier (ST)
          GOTO      LZTR9999
.
LZTR0802  APPEND    ANS,ZTR00802                 * text (ST)
          GOTO      LZTR9999
.
LZTR0803  APPEND    ANS,ZTR00803                 * name of coding system (ST)
          GOTO      LZTR9999
.
LZTR0804  APPEND    ANS,ZTR00804                 * alternate identifier (ST)
          GOTO      LZTR9999
.
LZTR0805  APPEND    ANS,ZTR00805                 * alternate text (ST)
          GOTO      LZTR9999
.
LZTR0806  APPEND    ANS,ZTR00806                 * name of alt. cod. system (ST)
          GOTO      LZTR9999
.
.         ZTR.9  Accompanying Person (text) (ST)
.
LZTR0900  BRANCH    COMPCNT,LZTR0901
.
LZTR0901
          GOTO      LZTR9999
.
.         ZTR.10  Arrival Transport (Cat EA code) (CE)
.
LZTR1000  BRANCH    COMPCNT,LZTR1001:            * identifier (ST)
                            LZTR1002:            * text (ST)
                            LZTR1003:            * name of coding system (ST)
                            LZTR1004:            * alternate identifier (ST)
                            LZTR1005:            * alternate text (ST)
                            LZTR1006             * name of alt. cod. system (ST)
          GOTO      LZTR9999
.
LZTR1001  APPEND    ANS,ZTR01001                 * identifier (ST)
          GOTO      LZTR9999
.
LZTR1002  APPEND    ANS,ZTR01002                 * text (ST)
          GOTO      LZTR9999
.
LZTR1003  APPEND    ANS,ZTR01003                 * name of coding system (ST)
          GOTO      LZTR9999
.
LZTR1004  APPEND    ANS,ZTR01004                 * alternate identifier (ST)
          GOTO      LZTR9999
.
LZTR1005  APPEND    ANS,ZTR01005                 * alternate text (ST)
          GOTO      LZTR9999
.
LZTR1006  APPEND    ANS,ZTR01006                 * name of alt. cod. system (ST)
          GOTO      LZTR9999
.
.         ZTR.11  Ambulance Case Number (text) (ST)
.
LZTR1100  BRANCH    COMPCNT,LZTR1101
.
LZTR1101
          GOTO      LZTR9999
.
.         ZTR.12  Attendance Source (Cat em code) (CE)
.
LZTR1200  BRANCH    COMPCNT,LZTR1201:            * identifier (ST)
                            LZTR1202:            * text (ST)
                            LZTR1203:            * name of coding system (ST)
                            LZTR1204:            * alternate identifier (ST)
                            LZTR1205:            * alternate text (ST)
                            LZTR1206             * name of alt. cod. system (ST)
          GOTO      LZTR9999
.
LZTR1201  APPEND    ANS,ZTR01201                 * identifier (ST)
          GOTO      LZTR9999
.
LZTR1202  APPEND    ANS,ZTR01202                 * text (ST)
          GOTO      LZTR9999
.
LZTR1203  APPEND    ANS,ZTR01203                 * name of coding system (ST)
          GOTO      LZTR9999
.
LZTR1204  APPEND    ANS,ZTR01204                 * alternate identifier (ST)
          GOTO      LZTR9999
.
LZTR1205  APPEND    ANS,ZTR01205                 * alternate text (ST)
          GOTO      LZTR9999
.
LZTR1206  APPEND    ANS,ZTR01206                 * name of alt. cod. system (ST)
          GOTO      LZTR9999
.
.         ZTR.13  Streaming (Cat eh code) (CE)
.
LZTR1300  BRANCH    COMPCNT,LZTR1301:            * identifier (ST)
                            LZTR1302:            * text (ST)
                            LZTR1303:            * name of coding system (ST)
                            LZTR1304:            * alternate identifier (ST)
                            LZTR1305:            * alternate text (ST)
                            LZTR1306             * name of alt. cod. system (ST)
          GOTO      LZTR9999
.
LZTR1301  APPEND    ANS,ZTR01301                 * identifier (ST)
          GOTO      LZTR9999
.
LZTR1302  APPEND    ANS,ZTR01302                 * text (ST)
          GOTO      LZTR9999
.
LZTR1303  APPEND    ANS,ZTR01303                 * name of coding system (ST)
          GOTO      LZTR9999
.
LZTR1304  APPEND    ANS,ZTR01304                 * alternate identifier (ST)
          GOTO      LZTR9999
.
LZTR1305  APPEND    ANS,ZTR01305                 * alternate text (ST)
          GOTO      LZTR9999
.
LZTR1306  APPEND    ANS,ZTR01306                 * name of alt. cod. system (ST)
          GOTO      LZTR9999
.
.         ZTR.14  Disaster Code (dismasaf code) (CE)
.
LZTR1400  BRANCH    COMPCNT,LZTR1401
.
LZTR1401
          GOTO      LZTR9999
.
.         ZTR.15  Airway (Cat A1 code) (CE)
.
LZTR1500  BRANCH    COMPCNT,LZTR1501:            * identifier (ST)
                            LZTR1502:            * text (ST)
                            LZTR1503:            * name of coding system (ST)
                            LZTR1504:            * alternate identifier (ST)
                            LZTR1505:            * alternate text (ST)
                            LZTR1506             * name of alt. cod. system (ST)
          GOTO      LZTR9999
.
LZTR1501  APPEND    ANS,ZTR01501                 * identifier (ST)
          GOTO      LZTR9999
.
LZTR1502  APPEND    ANS,ZTR01502                 * text (ST)
          GOTO      LZTR9999
.
LZTR1503  APPEND    ANS,ZTR01503                 * name of coding system (ST)
          GOTO      LZTR9999
.
LZTR1504  APPEND    ANS,ZTR01504                 * alternate identifier (ST)
          GOTO      LZTR9999
.
LZTR1505  APPEND    ANS,ZTR01505                 * alternate text (ST)
          GOTO      LZTR9999
.
LZTR1506  APPEND    ANS,ZTR01506                 * name of alt. cod. system (ST)
          GOTO      LZTR9999
.
.         ZTR.16  C Spine (Cat A2 code) (CE)
.
LZTR1600  BRANCH    COMPCNT,LZTR1601
.
LZTR1601
          GOTO      LZTR9999
.
.         ZTR.17  Conscious State (Cat A3 code) (CE)
.
LZTR1700  BRANCH    COMPCNT,LZTR1701:            * identifier (ST)
                            LZTR1702:            * text (ST)
                            LZTR1703:            * name of coding system (ST)
                            LZTR1704:            * alternate identifier (ST)
                            LZTR1705:            * alternate text (ST)
                            LZTR1706             * name of alt. cod. system (ST)
          GOTO      LZTR9999
.
LZTR1701  APPEND    ANS,ZTR01701                 * identifier (ST)
          GOTO      LZTR9999
.
LZTR1702  APPEND    ANS,ZTR01702                 * text (ST)
          GOTO      LZTR9999
.
LZTR1703  APPEND    ANS,ZTR01703                 * name of coding system (ST)
          GOTO      LZTR9999
.
LZTR1704  APPEND    ANS,ZTR01704                 * alternate identifier (ST)
          GOTO      LZTR9999
.
LZTR1705  APPEND    ANS,ZTR01705                 * alternate text (ST)
          GOTO      LZTR9999
.
LZTR1706  APPEND    ANS,ZTR01706                 * name of alt. cod. system (ST)
          GOTO      LZTR9999
.
.         ZTR.18  Behavioural 1 (Cat A4 code) (CE)
.
LZTR1800  BRANCH    COMPCNT,LZTR1801
.
LZTR1801
          GOTO      LZTR9999
.
.         ZTR.19  Behavioural 2 (Cat eq code) (CE)
.
LZTR1900  BRANCH    COMPCNT,LZTR1901
.
LZTR1901
          GOTO      LZTR9999
.
.         ZTR.20  Breathing 1 (Cat A5 code) (CE)
.
LZTR2000  BRANCH    COMPCNT,LZTR2001:            * identifier (ST)
                            LZTR2002:            * text (ST)
                            LZTR2003:            * name of coding system (ST)
                            LZTR2004:            * alternate identifier (ST)
                            LZTR2005:            * alternate text (ST)
                            LZTR2006             * name of alt. cod. system (ST)
          GOTO      LZTR9999
.
LZTR2001  APPEND    ANS,ZTR02001                 * identifier (ST)
          GOTO      LZTR9999
.
LZTR2002  APPEND    ANS,ZTR02002                 * text (ST)
          GOTO      LZTR9999
.
LZTR2003  APPEND    ANS,ZTR02003                 * name of coding system (ST)
          GOTO      LZTR9999
.
LZTR2004  APPEND    ANS,ZTR02004                 * alternate identifier (ST)
          GOTO      LZTR9999
.
LZTR2005  APPEND    ANS,ZTR02005                 * alternate text (ST)
          GOTO      LZTR9999
.
LZTR2006  APPEND    ANS,ZTR02006                 * name of alt. cod. system (ST)
          GOTO      LZTR9999
.
.         ZTR.21  Breathing 2 (Cat A6 code) (CE)
.
LZTR2100  BRANCH    COMPCNT,LZTR2101
.
LZTR2101
          GOTO      LZTR9999
.
.         ZTR.22  Breathing 3 (Cat A7 code) (CE)
.
LZTR2200  BRANCH    COMPCNT,LZTR2201
.
LZTR2201
          GOTO      LZTR9999
.
.         ZTR.23  Colour 1 (Cat ef code) (CE)
.
LZTR2300  BRANCH    COMPCNT,LZTR2301:            * identifier (ST)
                            LZTR2302:            * text (ST)
                            LZTR2303:            * name of coding system (ST)
                            LZTR2304:            * alternate identifier (ST)
                            LZTR2305:            * alternate text (ST)
                            LZTR2306             * name of alt. cod. system (ST)
          GOTO      LZTR9999
.
LZTR2301  APPEND    ANS,ZTR02301                 * identifier (ST)
          GOTO      LZTR9999
.
LZTR2302  APPEND    ANS,ZTR02302                 * text (ST)
          GOTO      LZTR9999
.
LZTR2303  APPEND    ANS,ZTR02303                 * name of coding system (ST)
          GOTO      LZTR9999
.
LZTR2304  APPEND    ANS,ZTR02304                 * alternate identifier (ST)
          GOTO      LZTR9999
.
LZTR2305  APPEND    ANS,ZTR02305                 * alternate text (ST)
          GOTO      LZTR9999
.
LZTR2306  APPEND    ANS,ZTR02306                 * name of alt. cod. system (ST)
          GOTO      LZTR9999
.
.         ZTR.24  Colour 2 (Cat eg code) (CE)
.
LZTR2400  BRANCH    COMPCNT,LZTR2401
.
LZTR2401
          GOTO      LZTR9999
.
.         ZTR.25   (CE)
.
LZTR2500  BRANCH    COMPCNT,LZTR2501
.
LZTR2501
          GOTO      LZTR9999
.
.         ZTR.26   (CE)
.
LZTR2600  BRANCH    COMPCNT,LZTR2601
.
LZTR2601
          GOTO      LZTR9999
.
.         ZTR.27   (CE)
.
LZTR2700  BRANCH    COMPCNT,LZTR2701
.
LZTR2701
          GOTO      LZTR9999
.
.         ZTR.28
.
LZTR2800  BRANCH    COMPCNT,LZTR2801
.
LZTR2801
          GOTO      LZTR9999
.
.         ZTR.29
.
LZTR2900  BRANCH    COMPCNT,LZTR2901
.
LZTR2901
          GOTO      LZTR9999
.
.         ZTR.30
.
LZTR3000  BRANCH    COMPCNT,LZTR3001
.
LZTR3001
          GOTO      LZTR9999
.
.         ZTR.31
.
LZTR3100  BRANCH    COMPCNT,LZTR3101
.
LZTR3101
          GOTO      LZTR9999
.
.         ZTR.32
.
LZTR3200  BRANCH    COMPCNT,LZTR3201
.
LZTR3201
          GOTO      LZTR9999
.
.         ZTR.33
.
LZTR3300  BRANCH    COMPCNT,LZTR3301
.
LZTR3301
          GOTO      LZTR9999
.
.         ZTR.34
.
LZTR3400  BRANCH    COMPCNT,LZTR3401
.
LZTR3401
          GOTO      LZTR9999
.
.         ZTR.35  Pain Score (Cat en code) (CE)
.
LZTR3500  BRANCH    COMPCNT,LZTR3501:            * identifier (ST)
                            LZTR3502:            * text (ST)
                            LZTR3503:            * name of coding system (ST)
                            LZTR3504:            * alternate identifier (ST)
                            LZTR3505:            * alternate text (ST)
                            LZTR3506             * name of alt. cod. system (ST)
          GOTO      LZTR9999
.
LZTR3501  APPEND    ANS,ZTR03501                 * identifier (ST)
          GOTO      LZTR9999
.
LZTR3502  APPEND    ANS,ZTR03502                 * text (ST)
          GOTO      LZTR9999
.
LZTR3503  APPEND    ANS,ZTR03503                 * name of coding system (ST)
          GOTO      LZTR9999
.
LZTR3504  APPEND    ANS,ZTR03504                 * alternate identifier (ST)
          GOTO      LZTR9999
.
LZTR3505  APPEND    ANS,ZTR03505                 * alternate text (ST)
          GOTO      LZTR9999
.
LZTR3506  APPEND    ANS,ZTR03506                 * name of alt. cod. system (ST)
          GOTO      LZTR9999
.
.         ZTR.36
.
LZTR3600  BRANCH    COMPCNT,LZTR3601
.
LZTR3601
          GOTO      LZTR9999
.
.         ZTR.37
.
LZTR3700  BRANCH    COMPCNT,LZTR3701
.
LZTR3701
          GOTO      LZTR9999
.
.         ZTR.38
.
LZTR3800  BRANCH    COMPCNT,LZTR3801
.
LZTR3801
          GOTO      LZTR9999
.
.         ZTR.39
.
LZTR3900  BRANCH    COMPCNT,LZTR3901
.
LZTR3901
          GOTO      LZTR9999
.
.         ZTR.40
.
LZTR4000  BRANCH    COMPCNT,LZTR4001
.
LZTR4001
          GOTO      LZTR9999
.
.         ZTR.41
.
LZTR4100  BRANCH    COMPCNT,LZTR4101
.
LZTR4101
          GOTO      LZTR9999
.
.         ZTR.42  Isolation (Cat es code) (CE)
.
LZTR4200  BRANCH    COMPCNT,LZTR4201:            * identifier (ST)
                            LZTR4202:            * text (ST)
                            LZTR4203:            * name of coding system (ST)
                            LZTR4204:            * alternate identifier (ST)
                            LZTR4205:            * alternate text (ST)
                            LZTR4206             * name of alt. cod. system (ST)
          GOTO      LZTR9999
.
LZTR4201  APPEND    ANS,ZTR04201                 * identifier (ST)
          GOTO      LZTR9999
.
LZTR4202  APPEND    ANS,ZTR04202                 * text (ST)
          GOTO      LZTR9999
.
LZTR4203  APPEND    ANS,ZTR04203                 * name of coding system (ST)
          GOTO      LZTR9999
.
LZTR4204  APPEND    ANS,ZTR04204                 * alternate identifier (ST)
          GOTO      LZTR9999
.
LZTR4205  APPEND    ANS,ZTR04205                 * alternate text (ST)
          GOTO      LZTR9999
.
LZTR4206  APPEND    ANS,ZTR04206                 * name of alt. cod. system (ST)
          GOTO      LZTR9999
.
.         ZTR.43  Drug / Alcohol Taken (1=Yes/0=No) (NM)
.
LZTR4300  BRANCH    COMPCNT,LZTR4301
          GOTO      LZTR9999
.
LZTR4301  APPEND    ANS,ZTR04301
          GOTO      LZTR9999
.
.         ZTR.44
.
LZTR4400  BRANCH    COMPCNT,LZTR4401
.
LZTR4401
          GOTO      LZTR9999
.
.         ZTR.45  Triage Date / Time (ccyymmddhhmmss) (TS)
.
LZTR4500  BRANCH    COMPCNT,LZTR4501
.
LZTR4501  APPEND    ANS,ZTR04501
          GOTO      LZTR9999
.
.         ZTR.46  Triage Category (Cat AA code) (CE)
.
LZTR4600  BRANCH    COMPCNT,LZTR4601:            * identifier (ST)
                            LZTR4602:            * text (ST)
                            LZTR4603:            * name of coding system (ST)
                            LZTR4604:            * alternate identifier (ST)
                            LZTR4605:            * alternate text (ST)
                            LZTR4606             * name of alt. cod. system (ST)
          GOTO      LZTR9999
.
LZTR4601  APPEND    ANS,ZTR04601                 * identifier (ST)
          GOTO      LZTR9999
.
LZTR4602  APPEND    ANS,ZTR04602                 * text (ST)
          GOTO      LZTR9999
.
LZTR4603  APPEND    ANS,ZTR04603                 * name of coding system (ST)
          GOTO      LZTR9999
.
LZTR4604  APPEND    ANS,ZTR04604                 * alternate identifier (ST)
          GOTO      LZTR9999
.
LZTR4605  APPEND    ANS,ZTR04605                 * alternate text (ST)
          GOTO      LZTR9999
.
LZTR4606  APPEND    ANS,ZTR04606                 * name of alt. cod. system (ST)
          GOTO      LZTR9999
.
.         ZTR.47  Triage Nurse Code (XCN)
.
LZTR4700  BRANCH    COMPCNT,LZTR4701:            * id number (ST)
                            LZTR4702:            * family name (ST)
                            LZTR4703:            * given name (ST)
                            LZTR4704:            * middle name (ST)
                            LZTR4705:            * suffix (ST)
                            LZTR4706:            * prefix (ST)
                            LZTR4707:            * degree (IS)
                            LZTR4708:            * source table (IS)
                            LZTR4709:            * assigning authority (HD)
                            LZTR4710:            * name type code (ID)
                            LZTR4711:            * identifier check digit (ST)
                            LZTR4712:            * check digit scheme code (ID)
                            LZTR4713:            * identifier type code (IS)
                            LZTR4714:            * assigning facility (HD)
                            LZTR4715             * name representation code (ID)
          GOTO      LZTR9999
.
LZTR4701  APPEND    ANS,ZTR04701                 * load id number (ST)
          GOTO      LZTR9999
.
LZTR4702  APPEND    ANS,ZTR04702                 * load family name (ST)
          GOTO      LZTR9999
.
LZTR4703  APPEND    ANS,ZTR04703                 * load given name (ST)
          GOTO      LZTR9999
.
LZTR4704  APPEND    ANS,ZTR04704                 * load middle name (ST)
          GOTO      LZTR9999
.
LZTR4705  APPEND    ANS,ZTR04705                 * load suffix (ST)
          GOTO      LZTR9999
.
LZTR4706  APPEND    ANS,ZTR04706                 * load prefix (ST)
          GOTO      LZTR9999
.
LZTR4707  APPEND    ANS,ZTR04707                 * load degree (IS)
          GOTO      LZTR9999
.
LZTR4708  APPEND    ANS,ZTR04708                 * load source table (IS)
          GOTO      LZTR9999
.
LZTR4709  APPEND    ANS,ZTR04709                 * load assigning authority (HD)
          GOTO      LZTR9999
.
LZTR4710  APPEND    ANS,ZTR04710                 * load name type code (ID)
          GOTO      LZTR9999
.
LZTR4711  APPEND    ANS,ZTR04711                 * load ident. check digit (ST)
          GOTO      LZTR9999
.
LZTR4712  APPEND    ANS,ZTR04712                 * load chk dig scheme code (ID)
          GOTO      LZTR9999
.
LZTR4713  APPEND    ANS,ZTR04713                 * load ident. type code (IS)
          GOTO      LZTR9999
.
LZTR4714  APPEND    ANS,ZTR04714                 * load assigning facility (HD)
          GOTO      LZTR9999
.
LZTR4715  APPEND    ANS,ZTR04715                 * load name repres. code (ID)
          GOTO      LZTR9999
.
.         ZTR.48  Model of Care (Cat eu code) (CE)
.
LZTR4800  BRANCH    COMPCNT,LZTR4801:            * identifier (ST)
                            LZTR4802:            * text (ST)
                            LZTR4803:            * name of coding system (ST)
                            LZTR4804:            * alternate identifier (ST)
                            LZTR4805:            * alternate text (ST)
                            LZTR4806             * name of alt. cod. system (ST)
          GOTO      LZTR9999
.
LZTR4801  APPEND    ANS,ZTR04801                 * identifier (ST)
          GOTO      LZTR9999
.
LZTR4802  APPEND    ANS,ZTR04802                 * text (ST)
          GOTO      LZTR9999
.
LZTR4803  APPEND    ANS,ZTR04803                 * name of coding system (ST)
          GOTO      LZTR9999
.
LZTR4804  APPEND    ANS,ZTR04804                 * alternate identifier (ST)
          GOTO      LZTR9999
.
LZTR4805  APPEND    ANS,ZTR04805                 * alternate text (ST)
          GOTO      LZTR9999
.
LZTR4806  APPEND    ANS,ZTR04806                 * name of alt. cod. system (ST)
          GOTO      LZTR9999
.
.         ZTR.49  Reason for Change (Cat FW code) (CE)
.
LZTR4900  BRANCH    COMPCNT,LZTR4901:            * identifier (ST)
                            LZTR4902:            * text (ST)
                            LZTR4903:            * name of coding system (ST)
                            LZTR4904:            * alternate identifier (ST)
                            LZTR4905:            * alternate text (ST)
                            LZTR4906             * name of alt. cod. system (ST)
          GOTO      LZTR9999
.
LZTR4901  APPEND    ANS,ZTR04901                 * identifier (ST)
          GOTO      LZTR9999
.
LZTR4902  APPEND    ANS,ZTR04902                 * text (ST)
          GOTO      LZTR9999
.
LZTR4903  APPEND    ANS,ZTR04903                 * name of coding system (ST)
          GOTO      LZTR9999
.
LZTR4904  APPEND    ANS,ZTR04904                 * alternate identifier (ST)
          GOTO      LZTR9999
.
LZTR4905  APPEND    ANS,ZTR04905                 * alternate text (ST)
          GOTO      LZTR9999
.
LZTR4906  APPEND    ANS,ZTR04906                 * name of alt. cod. system (ST)
          GOTO      LZTR9999
LZTR9999  RETURN
+
.*****************************************************************************
.*                                 LZNT0000        Called by: PROC0000       *
.*                          Load the ZNT fields                              *
.*****************************************************************************
.
LZNT0000  BRANCH    FIELDNO,LZNT0100:            * Set ID (SI)
                            LZNT0200:            * Comment Type (NM)
                            LZNT0300:            * Note Number (NM)
                            LZNT0400:            * Comments (ST)
                            LZNT0500             * Status (ST)
.
.         Invalid ZNT field received, so ignore it
.
          GOTO      LZNT9999
.
.         ZNT.1  Set ID (SI)
.
LZNT0100  BRANCH    COMPCNT,LZNT0101
.
LZNT0101  APPEND    ANS,ZNT00101
          GOTO      LZNT9999
.
.         ZNT.2  Comment Type (NM)
.
LZNT0200  BRANCH    COMPCNT,LZNT0201
.
LZNT0201  APPEND    ANS,ZNT00201
          GOTO      LZNT9999
.
.         ZNT.3  Note Number (NM)
.
LZNT0300  BRANCH    COMPCNT,LZNT0301
.
LZNT0301  APPEND    ANS,ZNT00301
          GOTO      LZNT9999
.
.         ZNT.4  Comments (ST)
.
LZNT0400  BRANCH    COMPCNT,LZNT0401
.
LZNT0401  APPEND    ANS,ZNT00401
          GOTO      LZNT9999
.
.         ZNT.5  Status (ST)
.
LZNT0500  BRANCH    COMPCNT,LZNT0501
.
LZNT0501  APPEND    ANS,ZNT00501
          GOTO      LZNT9999
.
LZNT9999  RETURN
+
.*****************************************************************************
.*                                 LRGS0000        Called by: PROC0000       *
.*                          Load the RGS fields                              *
.*****************************************************************************
.
LRGS0000  BRANCH    FIELDNO,LRGS0100:            * Set ID (SI)
                            LRGS0200:            * Segment Action Code (ID)
                            LRGS0300             * Resource Group ID (CE)
.
.         Invalid RGS field received, so ignore it
.
          GOTO      LRGS9999
.
.         RGS.1  Set ID (SI)
.
LRGS0100  BRANCH    COMPCNT,LRGS0101
.
LRGS0101  APPEND    ANS,RGS00101
          GOTO      LRGS9999
.
.         RGS.2  Segment Action Code (ID)
.
LRGS0200  BRANCH    COMPCNT,LRGS0201
.
LRGS0201  APPEND    ANS,RGS00201
          GOTO      LRGS9999
.
.         RGS.3 Resource Group ID (CE)
.
LRGS0300  BRANCH    COMPCNT,LRGS0301:            * identifier (ST)
                            LRGS0302:            * text (ST)
                            LRGS0303:            * name of coding system (ST)
                            LRGS0304:            * alternate identifier (ST)
                            LRGS0305:            * alternate text (ST)
                            LRGS0306             * name of alt. cod. system (ST)
          GOTO      LRGS9999
.
LRGS0301  APPEND    ANS,RGS00301                 * identifier (ST)
          GOTO      LRGS9999
.
LRGS0302  APPEND    ANS,RGS00302                 * text (ST)
          GOTO      LRGS9999
.
LRGS0303  APPEND    ANS,RGS00303                 * name of coding system (ST)
          GOTO      LRGS9999
.
LRGS0304  APPEND    ANS,RGS00304                 * alternate identifier (ST)
          GOTO      LRGS9999
.
LRGS0305  APPEND    ANS,RGS00305                 * alternate text (ST)
          GOTO      LRGS9999
.
LRGS0306  APPEND    ANS,RGS00306                 * name of alt. cod. system (ST)
          GOTO      LRGS9999
.
LRGS9999  RETURN
+
.*****************************************************************************
.*                               CMSH0000          Called by: PROC0000       *
.*                     Clear all MSH variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CMSH0000  PACK      MSH00101,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00201,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00301,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00302,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00303,SP100,SP100,SP100,SP100,SP100
          PACK      SAVAPPLI,SP70,SP70,SP70
          PACK      MSH00401,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00402,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00403,SP100,SP100,SP100,SP100,SP100
          PACK      SAVFACIL,SP70,SP70,SP70
          PACK      MSH00501,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00502,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00503,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00601,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00602,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00603,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00701,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00801,SP100,SP100,SP100,SP100,SP100
          MOVE      SP100,MSH00901
          MOVE      SP100,MSH00902
          MOVE      SP100,MSH00903
          PACK      MSH01001,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01101,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01102,SP100,SP100,SP100,SP100,SP100
          PACK      SAVMHPID,SP70
          PACK      MSH01201,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01202,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01203,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01301,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01401,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01501,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01601,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01701,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01801,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01901,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01902,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01903,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01904,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01905,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01906,SP100,SP100,SP100,SP100,SP100
          PACK      MSH02001,SP100,SP100,SP100,SP100,SP100
          MOVE      SP100,MSH02101
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     MSH00101
          CLEAR     MSH00201
          CLEAR     MSH00301
          CLEAR     MSH00302
          CLEAR     MSH00303
          CLEAR     MSH00401
          CLEAR     MSH00402
          CLEAR     MSH00403
          CLEAR     MSH00501
          CLEAR     MSH00502
          CLEAR     MSH00503
          CLEAR     MSH00601
          CLEAR     MSH00602
          CLEAR     MSH00603
          CLEAR     MSH00701
          CLEAR     MSH00801
          CLEAR     MSH00901
          CLEAR     MSH00902
          CLEAR     MSH00903
          CLEAR     MSH01001
          CLEAR     MSH01101
          CLEAR     MSH01102
          CLEAR     MSH01201
          CLEAR     MSH01202
          CLEAR     MSH01203
          CLEAR     MSH01301
          CLEAR     MSH01401
          CLEAR     MSH01501
          CLEAR     MSH01601
          CLEAR     MSH01701
          CLEAR     MSH01801
          CLEAR     MSH01901
          CLEAR     MSH01902
          CLEAR     MSH01903
          CLEAR     MSH01904
          CLEAR     MSH01905
          CLEAR     MSH01906
          CLEAR     MSH02001
          CLEAR     MSH02101
.
CMSH9999  RETURN
+
.*****************************************************************************
.*                               CEVN0000          Called by: PROC0000       *
.*                     Clear all EVN variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CEVN0000  PACK      EVN00101,SP100,SP100,SP100,SP100,SP100
          PACK      EVN00201,SP100,SP100,SP100,SP100,SP100
          PACK      EVN00301,SP100,SP100,SP100,SP100,SP100
          PACK      EVN00401,SP100,SP100,SP100,SP100,SP100
          PACK      EVN00501,SP100,SP100,SP100,SP100,SP100
          PACK      EVN00502,SP100,SP100,SP100,SP100,SP100
          PACK      EVN00503,SP100,SP100,SP100,SP100,SP100
          PACK      EVN00504,SP100,SP100,SP100,SP100,SP100
          PACK      EVN00505,SP100,SP100,SP100,SP100,SP100
          PACK      EVN00506,SP100,SP100,SP100,SP100,SP100
          PACK      EVN00507,SP100,SP100,SP100,SP100,SP100
          PACK      EVN00508,SP100,SP100,SP100,SP100,SP100
          PACK      EVN00509,SP100,SP100,SP100,SP100,SP100
          PACK      EVN00510,SP100,SP100,SP100,SP100,SP100
          PACK      EVN00511,SP100,SP100,SP100,SP100,SP100
          PACK      EVN00512,SP100,SP100,SP100,SP100,SP100
          PACK      EVN00513,SP100,SP100,SP100,SP100,SP100
          PACK      EVN00514,SP100,SP100,SP100,SP100,SP100
          PACK      EVN00515,SP100,SP100,SP100,SP100,SP100
          PACK      EVN00601,SP100,SP100,SP100,SP100,SP100
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     EVN00101
          CLEAR     EVN00201
          CLEAR     EVN00301
          CLEAR     EVN00401
          CLEAR     EVN00501
          CLEAR     EVN00502
          CLEAR     EVN00503
          CLEAR     EVN00504
          CLEAR     EVN00505
          CLEAR     EVN00506
          CLEAR     EVN00507
          CLEAR     EVN00508
          CLEAR     EVN00509
          CLEAR     EVN00510
          CLEAR     EVN00511
          CLEAR     EVN00512
          CLEAR     EVN00513
          CLEAR     EVN00514
          CLEAR     EVN00515
          CLEAR     EVN00601
.
CEVN9999  RETURN
+
.*****************************************************************************
.*                               CPID0000          Called by: PROC0000       *
.*                     Clear all PID variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CPID0000  PACK      PID00101,SP100,SP100,SP100,SP100,SP100
          PACK      PID00201,SP100,SP100,SP100,SP100,SP100
          PACK      PID00202,SP100,SP100,SP100,SP100,SP100
          PACK      PID00203,SP100,SP100,SP100,SP100,SP100
          PACK      PID00204,SP100,SP100,SP100,SP100,SP100
          PACK      PID00205,SP100,SP100,SP100,SP100,SP100
          PACK      PID00206,SP100,SP100,SP100,SP100,SP100
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 11
            ADD       ONE,COUNTER
            MOVE      SP100,PID00301[COUNTER]
            MOVE      SP100,PID00302[COUNTER]
            MOVE      SP100,PID00303[COUNTER]
            MOVE      SP100,PID00304[COUNTER]
            MOVE      SP100,PID00305[COUNTER]
            MOVE      SP100,PID00306[COUNTER]
          DO
.
          PACK      PID00401,SP100,SP100,SP100,SP100,SP100
          PACK      PID00402,SP100,SP100,SP100,SP100,SP100
          PACK      PID00403,SP100,SP100,SP100,SP100,SP100
          PACK      PID00404,SP100,SP100,SP100,SP100,SP100
          PACK      PID00405,SP100,SP100,SP100,SP100,SP100
          PACK      PID00406,SP100,SP100,SP100,SP100,SP100
          PACK      PID00501,SP100,SP100,SP100,SP100,SP100
          PACK      PID00502,SP100,SP100,SP100,SP100,SP100
          PACK      PID00503,SP100,SP100,SP100,SP100,SP100
          PACK      PID00504,SP100,SP100,SP100,SP100,SP100
          PACK      PID00505,SP100,SP100,SP100,SP100,SP100
          PACK      PID00506,SP100,SP100,SP100,SP100,SP100
          PACK      PID00507,SP100,SP100,SP100,SP100,SP100
          PACK      PID00508,SP100,SP100,SP100,SP100,SP100
          PACK      PID00601,SP100,SP100,SP100,SP100,SP100
          PACK      PID00602,SP100,SP100,SP100,SP100,SP100
          PACK      PID00603,SP100,SP100,SP100,SP100,SP100
          PACK      PID00604,SP100,SP100,SP100,SP100,SP100
          PACK      PID00605,SP100,SP100,SP100,SP100,SP100
          PACK      PID00606,SP100,SP100,SP100,SP100,SP100
          PACK      PID00607,SP100,SP100,SP100,SP100,SP100
          PACK      PID00608,SP100,SP100,SP100,SP100,SP100
          PACK      PID00701,SP100,SP100,SP100,SP100,SP100
          PACK      PID00801,SP100,SP100,SP100,SP100,SP100
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 80
            ADD       ONE,COUNTER
            MOVE      SP100,PID00901[COUNTER]
            MOVE      SP100,PID00902[COUNTER]
            MOVE      SP100,PID00903[COUNTER]
            MOVE      SP100,PID00904[COUNTER]
            MOVE      SP100,PID00905[COUNTER]
            MOVE      SP100,PID00906[COUNTER]
            MOVE      SP100,PID00907[COUNTER]
            MOVE      SP100,PID00908[COUNTER]
          DO
.
          PACK      PID01001,SP100,SP100,SP100,SP100,SP100
          PACK      PID01002,SP100,SP100,SP100,SP100,SP100
          PACK      PID01003,SP100,SP100,SP100,SP100,SP100
          PACK      PID01004,SP100,SP100,SP100,SP100,SP100
          PACK      PID01005,SP100,SP100,SP100,SP100,SP100
          PACK      PID01006,SP100,SP100,SP100,SP100,SP100
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 2
            ADD       ONE,COUNTER
            MOVE      SP100,PID01101[COUNTER]
            MOVE      SP100,PID01102[COUNTER]
            MOVE      SP100,PID01103[COUNTER]
            MOVE      SP100,PID01104[COUNTER]
            MOVE      SP100,PID01105[COUNTER]
            MOVE      SP100,PID01106[COUNTER]
            MOVE      SP100,PID01107[COUNTER]
            MOVE      SP100,PID01108[COUNTER]
            MOVE      SP100,PID01109[COUNTER]
            MOVE      SP100,PID01110[COUNTER]
            MOVE      SP100,PID01111[COUNTER]
          DO
.
          PACK      PID01201,SP100,SP100,SP100,SP100,SP100
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 2
            ADD       ONE,COUNTER
            MOVE      SP100,PID01301[COUNTER]
            MOVE      SP100,PID01401[COUNTER]
            MOVE      SP100,PID01302[COUNTER]
            MOVE      SP100,PID01402[COUNTER]
            MOVE      SP100,PID01303[COUNTER]
            MOVE      SP100,PID01403[COUNTER]
            MOVE      SP100,PID01304[COUNTER]
            MOVE      SP100,PID01404[COUNTER]
            MOVE      SP100,PID01305[COUNTER]
            MOVE      SP100,PID01405[COUNTER]
            MOVE      SP100,PID01306[COUNTER]
            MOVE      SP100,PID01406[COUNTER]
            MOVE      SP100,PID01307[COUNTER]
            MOVE      SP100,PID01407[COUNTER]
            MOVE      SP100,PID01308[COUNTER]
            MOVE      SP100,PID01408[COUNTER]
            MOVE      SP100,PID01309[COUNTER]
            MOVE      SP100,PID01409[COUNTER]
          DO
.
          PACK      PID01501,SP100,SP100,SP100,SP100,SP100
          PACK      PID01502,SP100,SP100,SP100,SP100,SP100
          PACK      PID01503,SP100,SP100,SP100,SP100,SP100
          PACK      PID01504,SP100,SP100,SP100,SP100,SP100
          PACK      PID01505,SP100,SP100,SP100,SP100,SP100
          PACK      PID01506,SP100,SP100,SP100,SP100,SP100
          PACK      PID01601,SP100,SP100,SP100,SP100,SP100
          PACK      PID01602,SP100,SP100,SP100,SP100,SP100
          PACK      PID01603,SP100,SP100,SP100,SP100,SP100
          PACK      PID01604,SP100,SP100,SP100,SP100,SP100
          PACK      PID01605,SP100,SP100,SP100,SP100,SP100
          PACK      PID01606,SP100,SP100,SP100,SP100,SP100
          PACK      PID01701,SP100,SP100,SP100,SP100,SP100
          PACK      PID01702,SP100,SP100,SP100,SP100,SP100
          PACK      PID01703,SP100,SP100,SP100,SP100,SP100
          PACK      PID01704,SP100,SP100,SP100,SP100,SP100
          PACK      PID01705,SP100,SP100,SP100,SP100,SP100
          PACK      PID01706,SP100,SP100,SP100,SP100,SP100
          PACK      PID01801,SP100,SP100,SP100,SP100,SP100
          PACK      PID01802,SP100,SP100,SP100,SP100,SP100
          PACK      PID01803,SP100,SP100,SP100,SP100,SP100
          PACK      PID01804,SP100,SP100,SP100,SP100,SP100
          PACK      PID01805,SP100,SP100,SP100,SP100,SP100
          PACK      PID01806,SP100,SP100,SP100,SP100,SP100
          PACK      PID01901,SP100,SP100,SP100,SP100,SP100
          PACK      PID02001,SP100,SP100,SP100,SP100,SP100
          PACK      PID02002,SP100,SP100,SP100,SP100,SP100
          PACK      PID02003,SP100,SP100,SP100,SP100,SP100
          PACK      PID02101,SP100,SP100,SP100,SP100,SP100
          PACK      PID02102,SP100,SP100,SP100,SP100,SP100
          PACK      PID02103,SP100,SP100,SP100,SP100,SP100
          PACK      PID02104,SP100,SP100,SP100,SP100,SP100
          PACK      PID02105,SP100,SP100,SP100,SP100,SP100
          PACK      PID02106,SP100,SP100,SP100,SP100,SP100
          PACK      PID02201,SP100,SP100,SP100,SP100,SP100
          PACK      PID02202,SP100,SP100,SP100,SP100,SP100
          PACK      PID02203,SP100,SP100,SP100,SP100,SP100
          PACK      PID02204,SP100,SP100,SP100,SP100,SP100
          PACK      PID02205,SP100,SP100,SP100,SP100,SP100
          PACK      PID02206,SP100,SP100,SP100,SP100,SP100
          PACK      PID02301,SP100,SP100,SP100,SP100,SP100
          PACK      PID02401,SP100,SP100,SP100,SP100,SP100
          PACK      PID02501,SP100,SP100,SP100,SP100,SP100
          PACK      PID02601,SP100,SP100,SP100,SP100,SP100
          PACK      PID02602,SP100,SP100,SP100,SP100,SP100
          PACK      PID02603,SP100,SP100,SP100,SP100,SP100
          PACK      PID02604,SP100,SP100,SP100,SP100,SP100
          PACK      PID02605,SP100,SP100,SP100,SP100,SP100
          PACK      PID02606,SP100,SP100,SP100,SP100,SP100
          PACK      PID02701,SP100,SP100,SP100,SP100,SP100
          PACK      PID02702,SP100,SP100,SP100,SP100,SP100
          PACK      PID02703,SP100,SP100,SP100,SP100,SP100
          PACK      PID02704,SP100,SP100,SP100,SP100,SP100
          PACK      PID02705,SP100,SP100,SP100,SP100,SP100
          PACK      PID02706,SP100,SP100,SP100,SP100,SP100
          PACK      PID02801,SP100,SP100,SP100,SP100,SP100
          PACK      PID02802,SP100,SP100,SP100,SP100,SP100
          PACK      PID02803,SP100,SP100,SP100,SP100,SP100
          PACK      PID02804,SP100,SP100,SP100,SP100,SP100
          PACK      PID02805,SP100,SP100,SP100,SP100,SP100
          PACK      PID02806,SP100,SP100,SP100,SP100,SP100
          PACK      PID02901,SP100,SP100,SP100,SP100,SP100
          PACK      PID03001,SP100,SP100,SP100,SP100,SP100
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     PID00101
          CLEAR     PID00201
          CLEAR     PID00202
          CLEAR     PID00203
          CLEAR     PID00204
          CLEAR     PID00205
          CLEAR     PID00206
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 11
            ADD       ONE,COUNTER
            CLEAR     PID00301[COUNTER]
            CLEAR     PID00302[COUNTER]
            CLEAR     PID00303[COUNTER]
            CLEAR     PID00304[COUNTER]
            CLEAR     PID00305[COUNTER]
            CLEAR     PID00306[COUNTER]
          DO
.
          CLEAR     PID00401
          CLEAR     PID00402
          CLEAR     PID00403
          CLEAR     PID00404
          CLEAR     PID00405
          CLEAR     PID00406
          CLEAR     PID00501
          CLEAR     PID00502
          CLEAR     PID00503
          CLEAR     PID00504
          CLEAR     PID00505
          CLEAR     PID00506
          CLEAR     PID00507
          CLEAR     PID00508
          CLEAR     PID00601
          CLEAR     PID00602
          CLEAR     PID00603
          CLEAR     PID00604
          CLEAR     PID00605
          CLEAR     PID00606
          CLEAR     PID00607
          CLEAR     PID00608
          CLEAR     PID00701
          CLEAR     PID00801
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 80
            ADD       ONE,COUNTER
            CLEAR     PID00901[COUNTER]
            CLEAR     PID00902[COUNTER]
            CLEAR     PID00903[COUNTER]
            CLEAR     PID00904[COUNTER]
            CLEAR     PID00905[COUNTER]
            CLEAR     PID00906[COUNTER]
            CLEAR     PID00907[COUNTER]
            CLEAR     PID00908[COUNTER]
          DO
.
          CLEAR     PID01001
          CLEAR     PID01002
          CLEAR     PID01003
          CLEAR     PID01004
          CLEAR     PID01005
          CLEAR     PID01006
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 2
            ADD       ONE,COUNTER
            CLEAR     PID01101[COUNTER]
            CLEAR     PID01102[COUNTER]
            CLEAR     PID01103[COUNTER]
            CLEAR     PID01104[COUNTER]
            CLEAR     PID01105[COUNTER]
            CLEAR     PID01106[COUNTER]
            CLEAR     PID01107[COUNTER]
            CLEAR     PID01108[COUNTER]
            CLEAR     PID01109[COUNTER]
            CLEAR     PID01110[COUNTER]
            CLEAR     PID01111[COUNTER]
          DO
.
          CLEAR     PID01201
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 2
            ADD       ONE,COUNTER
            CLEAR     PID01301[COUNTER]
            CLEAR     PID01401[COUNTER]
            CLEAR     PID01302[COUNTER]
            CLEAR     PID01402[COUNTER]
            CLEAR     PID01303[COUNTER]
            CLEAR     PID01403[COUNTER]
            CLEAR     PID01304[COUNTER]
            CLEAR     PID01404[COUNTER]
            CLEAR     PID01305[COUNTER]
            CLEAR     PID01405[COUNTER]
            CLEAR     PID01306[COUNTER]
            CLEAR     PID01406[COUNTER]
            CLEAR     PID01307[COUNTER]
            CLEAR     PID01407[COUNTER]
            CLEAR     PID01308[COUNTER]
            CLEAR     PID01408[COUNTER]
            CLEAR     PID01309[COUNTER]
            CLEAR     PID01409[COUNTER]
          DO
.
          CLEAR     PID01501
          CLEAR     PID01502
          CLEAR     PID01503
          CLEAR     PID01504
          CLEAR     PID01505
          CLEAR     PID01506
          CLEAR     PID01601
          CLEAR     PID01602
          CLEAR     PID01603
          CLEAR     PID01604
          CLEAR     PID01605
          CLEAR     PID01606
          CLEAR     PID01701
          CLEAR     PID01702
          CLEAR     PID01703
          CLEAR     PID01704
          CLEAR     PID01705
          CLEAR     PID01706
          CLEAR     PID01801
          CLEAR     PID01802
          CLEAR     PID01803
          CLEAR     PID01804
          CLEAR     PID01805
          CLEAR     PID01806
          CLEAR     PID01901
          CLEAR     PID02001
          CLEAR     PID02002
          CLEAR     PID02003
          CLEAR     PID02101
          CLEAR     PID02102
          CLEAR     PID02103
          CLEAR     PID02104
          CLEAR     PID02105
          CLEAR     PID02106
          CLEAR     PID02201
          CLEAR     PID02202
          CLEAR     PID02203
          CLEAR     PID02204
          CLEAR     PID02205
          CLEAR     PID02206
          CLEAR     PID02301
          CLEAR     PID02401
          CLEAR     PID02501
          CLEAR     PID02601
          CLEAR     PID02602
          CLEAR     PID02603
          CLEAR     PID02604
          CLEAR     PID02605
          CLEAR     PID02606
          CLEAR     PID02701
          CLEAR     PID02702
          CLEAR     PID02703
          CLEAR     PID02704
          CLEAR     PID02705
          CLEAR     PID02706
          CLEAR     PID02801
          CLEAR     PID02802
          CLEAR     PID02803
          CLEAR     PID02804
          CLEAR     PID02805
          CLEAR     PID02806
          CLEAR     PID02901
          CLEAR     PID03001
.
.         Also clear ZXP fields here as the ZXP segment is not mandatory.
.         Otherwise the ZXP data may carry over from a previous message.
.
CPID9000  CALL      CZXP0000                     * clear ZXP fields (0932178)
.
CPID9999  RETURN
+
.*****************************************************************************
.*                               CNK10000          Called by: PROC0000       *
.*                     Clear all NK1 variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CNK10000  PACK      NK100101,SP100,SP100,SP100,SP100,SP100
          PACK      NK100201,SP100,SP100,SP100,SP100,SP100
          PACK      NK100202,SP100,SP100,SP100,SP100,SP100
          PACK      NK100203,SP100,SP100,SP100,SP100,SP100
          PACK      NK100204,SP100,SP100,SP100,SP100,SP100
          PACK      NK100205,SP100,SP100,SP100,SP100,SP100
          PACK      NK100206,SP100,SP100,SP100,SP100,SP100
          PACK      NK100207,SP100,SP100,SP100,SP100,SP100
          PACK      NK100208,SP100,SP100,SP100,SP100,SP100
          PACK      NK100301,SP100,SP100,SP100,SP100,SP100
          PACK      NK100302,SP100,SP100,SP100,SP100,SP100
          PACK      NK100303,SP100,SP100,SP100,SP100,SP100
          PACK      NK100304,SP100,SP100,SP100,SP100,SP100
          PACK      NK100305,SP100,SP100,SP100,SP100,SP100
          PACK      NK100306,SP100,SP100,SP100,SP100,SP100
          PACK      NK100401,SP100,SP100,SP100,SP100,SP100
          PACK      NK100402,SP100,SP100,SP100,SP100,SP100
          PACK      NK100403,SP100,SP100,SP100,SP100,SP100
          PACK      NK100404,SP100,SP100,SP100,SP100,SP100
          PACK      NK100405,SP100,SP100,SP100,SP100,SP100
          PACK      NK100406,SP100,SP100,SP100,SP100,SP100
          PACK      NK100407,SP100,SP100,SP100,SP100,SP100
          PACK      NK100408,SP100,SP100,SP100,SP100,SP100
          PACK      NK100409,SP100,SP100,SP100,SP100,SP100
          PACK      NK100410,SP100,SP100,SP100,SP100,SP100
          PACK      NK100411,SP100,SP100,SP100,SP100,SP100
          PACK      NK100501,SP100,SP100,SP100,SP100,SP100
          PACK      NK100502,SP100,SP100,SP100,SP100,SP100
          PACK      NK100503,SP100,SP100,SP100,SP100,SP100
          PACK      NK100504,SP100,SP100,SP100,SP100,SP100
          PACK      NK100505,SP100,SP100,SP100,SP100,SP100
          PACK      NK100506,SP100,SP100,SP100,SP100,SP100
          PACK      NK100507,SP100,SP100,SP100,SP100,SP100
          PACK      NK100508,SP100,SP100,SP100,SP100,SP100
          PACK      NK100509,SP100,SP100,SP100,SP100,SP100
          PACK      NK100601,SP100,SP100,SP100,SP100,SP100
          PACK      NK100602,SP100,SP100,SP100,SP100,SP100
          PACK      NK100603,SP100,SP100,SP100,SP100,SP100
          PACK      NK100604,SP100,SP100,SP100,SP100,SP100
          PACK      NK100605,SP100,SP100,SP100,SP100,SP100
          PACK      NK100606,SP100,SP100,SP100,SP100,SP100
          PACK      NK100607,SP100,SP100,SP100,SP100,SP100
          PACK      NK100608,SP100,SP100,SP100,SP100,SP100
          PACK      NK100609,SP100,SP100,SP100,SP100,SP100
          PACK      NK100701,SP100,SP100,SP100,SP100,SP100
          PACK      NK100702,SP100,SP100,SP100,SP100,SP100
          PACK      NK100703,SP100,SP100,SP100,SP100,SP100
          PACK      NK100704,SP100,SP100,SP100,SP100,SP100
          PACK      NK100705,SP100,SP100,SP100,SP100,SP100
          PACK      NK100706,SP100,SP100,SP100,SP100,SP100
          PACK      NK100801,SP100,SP100,SP100,SP100,SP100
          PACK      NK100901,SP100,SP100,SP100,SP100,SP100
          PACK      NK101001,SP100,SP100,SP100,SP100,SP100
          PACK      NK101101,SP100,SP100,SP100,SP100,SP100
          PACK      NK101102,SP100,SP100,SP100,SP100,SP100
          PACK      NK101201,SP100,SP100,SP100,SP100,SP100
          PACK      NK101202,SP100,SP100,SP100,SP100,SP100
          PACK      NK101203,SP100,SP100,SP100,SP100,SP100
          PACK      NK101204,SP100,SP100,SP100,SP100,SP100
          PACK      NK101205,SP100,SP100,SP100,SP100,SP100
          PACK      NK101206,SP100,SP100,SP100,SP100,SP100
          PACK      NK101301,SP100,SP100,SP100,SP100,SP100
          PACK      NK101302,SP100,SP100,SP100,SP100,SP100
          PACK      NK101303,SP100,SP100,SP100,SP100,SP100
          PACK      NK101304,SP100,SP100,SP100,SP100,SP100
          PACK      NK101305,SP100,SP100,SP100,SP100,SP100
          PACK      NK101306,SP100,SP100,SP100,SP100,SP100
          PACK      NK101307,SP100,SP100,SP100,SP100,SP100
          PACK      NK101308,SP100,SP100,SP100,SP100,SP100
          PACK      NK101309,SP100,SP100,SP100,SP100,SP100
          PACK      NK101401,SP100,SP100,SP100,SP100,SP100
          PACK      NK101402,SP100,SP100,SP100,SP100,SP100
          PACK      NK101403,SP100,SP100,SP100,SP100,SP100
          PACK      NK101404,SP100,SP100,SP100,SP100,SP100
          PACK      NK101405,SP100,SP100,SP100,SP100,SP100
          PACK      NK101406,SP100,SP100,SP100,SP100,SP100
          PACK      NK101501,SP100,SP100,SP100,SP100,SP100
          PACK      NK101601,SP100,SP100,SP100,SP100,SP100
          PACK      NK101701,SP100,SP100,SP100,SP100,SP100
          PACK      NK101801,SP100,SP100,SP100,SP100,SP100
          PACK      NK101901,SP100,SP100,SP100,SP100,SP100
          PACK      NK101902,SP100,SP100,SP100,SP100,SP100
          PACK      NK101903,SP100,SP100,SP100,SP100,SP100
          PACK      NK101904,SP100,SP100,SP100,SP100,SP100
          PACK      NK101905,SP100,SP100,SP100,SP100,SP100
          PACK      NK101906,SP100,SP100,SP100,SP100,SP100
          PACK      NK102001,SP100,SP100,SP100,SP100,SP100
          PACK      NK102002,SP100,SP100,SP100,SP100,SP100
          PACK      NK102003,SP100,SP100,SP100,SP100,SP100
          PACK      NK102004,SP100,SP100,SP100,SP100,SP100
          PACK      NK102005,SP100,SP100,SP100,SP100,SP100
          PACK      NK102006,SP100,SP100,SP100,SP100,SP100
          PACK      NK102101,SP100,SP100,SP100,SP100,SP100
          PACK      NK102201,SP100,SP100,SP100,SP100,SP100
          PACK      NK102202,SP100,SP100,SP100,SP100,SP100
          PACK      NK102203,SP100,SP100,SP100,SP100,SP100
          PACK      NK102204,SP100,SP100,SP100,SP100,SP100
          PACK      NK102205,SP100,SP100,SP100,SP100,SP100
          PACK      NK102206,SP100,SP100,SP100,SP100,SP100
          PACK      NK102301,SP100,SP100,SP100,SP100,SP100
          PACK      NK102401,SP100,SP100,SP100,SP100,SP100
          PACK      NK102501,SP100,SP100,SP100,SP100,SP100
          PACK      NK102502,SP100,SP100,SP100,SP100,SP100
          PACK      NK102503,SP100,SP100,SP100,SP100,SP100
          PACK      NK102504,SP100,SP100,SP100,SP100,SP100
          PACK      NK102505,SP100,SP100,SP100,SP100,SP100
          PACK      NK102506,SP100,SP100,SP100,SP100,SP100
          PACK      NK102601,SP100,SP100,SP100,SP100,SP100
          PACK      NK102602,SP100,SP100,SP100,SP100,SP100
          PACK      NK102603,SP100,SP100,SP100,SP100,SP100
          PACK      NK102604,SP100,SP100,SP100,SP100,SP100
          PACK      NK102605,SP100,SP100,SP100,SP100,SP100
          PACK      NK102606,SP100,SP100,SP100,SP100,SP100
          PACK      NK102607,SP100,SP100,SP100,SP100,SP100
          PACK      NK102608,SP100,SP100,SP100,SP100,SP100
          PACK      NK102701,SP100,SP100,SP100,SP100,SP100
          PACK      NK102702,SP100,SP100,SP100,SP100,SP100
          PACK      NK102703,SP100,SP100,SP100,SP100,SP100
          PACK      NK102704,SP100,SP100,SP100,SP100,SP100
          PACK      NK102705,SP100,SP100,SP100,SP100,SP100
          PACK      NK102706,SP100,SP100,SP100,SP100,SP100
          PACK      NK102801,SP100,SP100,SP100,SP100,SP100
          PACK      NK102802,SP100,SP100,SP100,SP100,SP100
          PACK      NK102803,SP100,SP100,SP100,SP100,SP100
          PACK      NK102804,SP100,SP100,SP100,SP100,SP100
          PACK      NK102805,SP100,SP100,SP100,SP100,SP100
          PACK      NK102806,SP100,SP100,SP100,SP100,SP100
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 2
            ADD       ONE,COUNTER
            PACK      NK102901[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK102902[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK102903[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK102904[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK102905[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK102906[COUNTER],SP100,SP100,SP100,SP100,SP100
          DO
.
          PACK      NK103001,SP100,SP100,SP100,SP100,SP100
          PACK      NK103002,SP100,SP100,SP100,SP100,SP100
          PACK      NK103003,SP100,SP100,SP100,SP100,SP100
          PACK      NK103004,SP100,SP100,SP100,SP100,SP100
          PACK      NK103005,SP100,SP100,SP100,SP100,SP100
          PACK      NK103006,SP100,SP100,SP100,SP100,SP100
          PACK      NK103007,SP100,SP100,SP100,SP100,SP100
          PACK      NK103008,SP100,SP100,SP100,SP100,SP100
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 3
            ADD       ONE,COUNTER
            PACK      NK103101[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK103102[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK103103[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK103104[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK103105[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK103106[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK103107[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK103108[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK103109[COUNTER],SP100,SP100,SP100,SP100,SP100
          DO
.
          PACK      NK103201,SP100,SP100,SP100,SP100,SP100
          PACK      NK103202,SP100,SP100,SP100,SP100,SP100
          PACK      NK103203,SP100,SP100,SP100,SP100,SP100
          PACK      NK103204,SP100,SP100,SP100,SP100,SP100
          PACK      NK103205,SP100,SP100,SP100,SP100,SP100
          PACK      NK103206,SP100,SP100,SP100,SP100,SP100
          PACK      NK103207,SP100,SP100,SP100,SP100,SP100
          PACK      NK103208,SP100,SP100,SP100,SP100,SP100
          PACK      NK103209,SP100,SP100,SP100,SP100,SP100
          PACK      NK103210,SP100,SP100,SP100,SP100,SP100
          PACK      NK103211,SP100,SP100,SP100,SP100,SP100
          PACK      NK103301,SP100,SP100,SP100,SP100,SP100
          PACK      NK103302,SP100,SP100,SP100,SP100,SP100
          PACK      NK103303,SP100,SP100,SP100,SP100,SP100
          PACK      NK103304,SP100,SP100,SP100,SP100,SP100
          PACK      NK103305,SP100,SP100,SP100,SP100,SP100
          PACK      NK103306,SP100,SP100,SP100,SP100,SP100
          PACK      NK103401,SP100,SP100,SP100,SP100,SP100
          PACK      NK103501,SP100,SP100,SP100,SP100,SP100
          PACK      NK103502,SP100,SP100,SP100,SP100,SP100
          PACK      NK103503,SP100,SP100,SP100,SP100,SP100
          PACK      NK103504,SP100,SP100,SP100,SP100,SP100
          PACK      NK103505,SP100,SP100,SP100,SP100,SP100
          PACK      NK103506,SP100,SP100,SP100,SP100,SP100
          PACK      NK103601,SP100,SP100,SP100,SP100,SP100
          PACK      NK103701,SP100,SP100,SP100,SP100,SP100
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     NK100101
          CLEAR     NK100201
          CLEAR     NK100202
          CLEAR     NK100203
          CLEAR     NK100204
          CLEAR     NK100205
          CLEAR     NK100206
          CLEAR     NK100207
          CLEAR     NK100208
          CLEAR     NK100301
          CLEAR     NK100302
          CLEAR     NK100303
          CLEAR     NK100304
          CLEAR     NK100305
          CLEAR     NK100306
          CLEAR     NK100401
          CLEAR     NK100402
          CLEAR     NK100403
          CLEAR     NK100404
          CLEAR     NK100405
          CLEAR     NK100406
          CLEAR     NK100407
          CLEAR     NK100408
          CLEAR     NK100409
          CLEAR     NK100410
          CLEAR     NK100411
          CLEAR     NK100501
          CLEAR     NK100502
          CLEAR     NK100503
          CLEAR     NK100504
          CLEAR     NK100505
          CLEAR     NK100506
          CLEAR     NK100507
          CLEAR     NK100508
          CLEAR     NK100509
          CLEAR     NK100601
          CLEAR     NK100602
          CLEAR     NK100603
          CLEAR     NK100604
          CLEAR     NK100605
          CLEAR     NK100606
          CLEAR     NK100607
          CLEAR     NK100608
          CLEAR     NK100609
          CLEAR     NK100701
          CLEAR     NK100702
          CLEAR     NK100703
          CLEAR     NK100704
          CLEAR     NK100705
          CLEAR     NK100706
          CLEAR     NK100801
          CLEAR     NK100901
          CLEAR     NK101001
          CLEAR     NK101101
          CLEAR     NK101102
          CLEAR     NK101201
          CLEAR     NK101202
          CLEAR     NK101203
          CLEAR     NK101204
          CLEAR     NK101205
          CLEAR     NK101206
          CLEAR     NK101301
          CLEAR     NK101302
          CLEAR     NK101303
          CLEAR     NK101304
          CLEAR     NK101305
          CLEAR     NK101306
          CLEAR     NK101307
          CLEAR     NK101308
          CLEAR     NK101309
          CLEAR     NK101401
          CLEAR     NK101402
          CLEAR     NK101403
          CLEAR     NK101404
          CLEAR     NK101405
          CLEAR     NK101406
          CLEAR     NK101501
          CLEAR     NK101601
          CLEAR     NK101701
          CLEAR     NK101801
          CLEAR     NK101901
          CLEAR     NK101902
          CLEAR     NK101903
          CLEAR     NK101904
          CLEAR     NK101905
          CLEAR     NK101906
          CLEAR     NK102001
          CLEAR     NK102002
          CLEAR     NK102003
          CLEAR     NK102004
          CLEAR     NK102005
          CLEAR     NK102006
          CLEAR     NK102101
          CLEAR     NK102201
          CLEAR     NK102202
          CLEAR     NK102203
          CLEAR     NK102204
          CLEAR     NK102205
          CLEAR     NK102206
          CLEAR     NK102301
          CLEAR     NK102401
          CLEAR     NK102501
          CLEAR     NK102502
          CLEAR     NK102503
          CLEAR     NK102504
          CLEAR     NK102505
          CLEAR     NK102506
          CLEAR     NK102601
          CLEAR     NK102602
          CLEAR     NK102603
          CLEAR     NK102604
          CLEAR     NK102605
          CLEAR     NK102606
          CLEAR     NK102607
          CLEAR     NK102608
          CLEAR     NK102701
          CLEAR     NK102702
          CLEAR     NK102703
          CLEAR     NK102704
          CLEAR     NK102705
          CLEAR     NK102706
          CLEAR     NK102801
          CLEAR     NK102802
          CLEAR     NK102803
          CLEAR     NK102804
          CLEAR     NK102805
          CLEAR     NK102806
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 2
            ADD       ONE,COUNTER
            CLEAR     NK102901[COUNTER]
            CLEAR     NK102902[COUNTER]
            CLEAR     NK102903[COUNTER]
            CLEAR     NK102904[COUNTER]
            CLEAR     NK102905[COUNTER]
            CLEAR     NK102906[COUNTER]
          DO
.
          CLEAR     NK103001
          CLEAR     NK103002
          CLEAR     NK103003
          CLEAR     NK103004
          CLEAR     NK103005
          CLEAR     NK103006
          CLEAR     NK103007
          CLEAR     NK103008
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 3
            ADD       ONE,COUNTER
            CLEAR     NK103101[COUNTER]
            CLEAR     NK103102[COUNTER]
            CLEAR     NK103103[COUNTER]
            CLEAR     NK103104[COUNTER]
            CLEAR     NK103105[COUNTER]
            CLEAR     NK103106[COUNTER]
            CLEAR     NK103107[COUNTER]
            CLEAR     NK103108[COUNTER]
            CLEAR     NK103109[COUNTER]
          DO
.
          CLEAR     NK103201
          CLEAR     NK103202
          CLEAR     NK103203
          CLEAR     NK103204
          CLEAR     NK103205
          CLEAR     NK103206
          CLEAR     NK103207
          CLEAR     NK103208
          CLEAR     NK103209
          CLEAR     NK103210
          CLEAR     NK103211
          CLEAR     NK103301
          CLEAR     NK103302
          CLEAR     NK103303
          CLEAR     NK103304
          CLEAR     NK103305
          CLEAR     NK103306
          CLEAR     NK103401
          CLEAR     NK103501
          CLEAR     NK103502
          CLEAR     NK103503
          CLEAR     NK103504
          CLEAR     NK103505
          CLEAR     NK103506
          CLEAR     NK103601
          CLEAR     NK103701
.
CNK19999  RETURN
+
.*****************************************************************************
.*                               CPV10000          Called by: PROC0000       *
.*                     Clear all PV1 variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CPV10000  PACK      PV100101,SP100,SP100,SP100,SP100,SP100
          PACK      PV100201,SP100,SP100,SP100,SP100,SP100
          PACK      PV100301,SP100,SP100,SP100,SP100,SP100
          PACK      PV100302,SP100,SP100,SP100,SP100,SP100
          PACK      PV100303,SP100,SP100,SP100,SP100,SP100
          PACK      PV100304,SP100,SP100,SP100,SP100,SP100
          PACK      PV100305,SP100,SP100,SP100,SP100,SP100
          PACK      PV100306,SP100,SP100,SP100,SP100,SP100
          PACK      PV100307,SP100,SP100,SP100,SP100,SP100
          PACK      PV100308,SP100,SP100,SP100,SP100,SP100
          PACK      PV100309,SP100,SP100,SP100,SP100,SP100
          PACK      PV100401,SP100,SP100,SP100,SP100,SP100
          PACK      PV100501,SP100,SP100,SP100,SP100,SP100
          PACK      PV100502,SP100,SP100,SP100,SP100,SP100
          PACK      PV100503,SP100,SP100,SP100,SP100,SP100
          PACK      PV100504,SP100,SP100,SP100,SP100,SP100
          PACK      PV100505,SP100,SP100,SP100,SP100,SP100
          PACK      PV100506,SP100,SP100,SP100,SP100,SP100
          PACK      PV100601,SP100,SP100,SP100,SP100,SP100
          PACK      PV100602,SP100,SP100,SP100,SP100,SP100
          PACK      PV100603,SP100,SP100,SP100,SP100,SP100
          PACK      PV100604,SP100,SP100,SP100,SP100,SP100
          PACK      PV100605,SP100,SP100,SP100,SP100,SP100
          PACK      PV100606,SP100,SP100,SP100,SP100,SP100
          PACK      PV100607,SP100,SP100,SP100,SP100,SP100
          PACK      PV100608,SP100,SP100,SP100,SP100,SP100
          PACK      PV100609,SP100,SP100,SP100,SP100,SP100
          PACK      PV100701,SP100,SP100,SP100,SP100,SP100
          PACK      PV100702,SP100,SP100,SP100,SP100,SP100
          PACK      PV100703,SP100,SP100,SP100,SP100,SP100
          PACK      PV100704,SP100,SP100,SP100,SP100,SP100
          PACK      PV100705,SP100,SP100,SP100,SP100,SP100
          PACK      PV100706,SP100,SP100,SP100,SP100,SP100
          PACK      PV100707,SP100,SP100,SP100,SP100,SP100
          PACK      PV100708,SP100,SP100,SP100,SP100,SP100
          PACK      PV100709,SP100,SP100,SP100,SP100,SP100
          PACK      PV100710,SP100,SP100,SP100,SP100,SP100
          PACK      PV100711,SP100,SP100,SP100,SP100,SP100
          PACK      PV100712,SP100,SP100,SP100,SP100,SP100
          PACK      PV100713,SP100,SP100,SP100,SP100,SP100
          PACK      PV100714,SP100,SP100,SP100,SP100,SP100
          PACK      PV100715,SP100,SP100,SP100,SP100,SP100
          PACK      PV100801,SP100,SP100,SP100,SP100,SP100
          PACK      PV100802,SP100,SP100,SP100,SP100,SP100
          PACK      PV100803,SP100,SP100,SP100,SP100,SP100
          PACK      PV100804,SP100,SP100,SP100,SP100,SP100
          PACK      PV100805,SP100,SP100,SP100,SP100,SP100
          PACK      PV100806,SP100,SP100,SP100,SP100,SP100
          PACK      PV100807,SP100,SP100,SP100,SP100,SP100
          PACK      PV100808,SP100,SP100,SP100,SP100,SP100
          PACK      PV100809,SP100,SP100,SP100,SP100,SP100
          PACK      PV100810,SP100,SP100,SP100,SP100,SP100
          PACK      PV100811,SP100,SP100,SP100,SP100,SP100
          PACK      PV100812,SP100,SP100,SP100,SP100,SP100
          PACK      PV100813,SP100,SP100,SP100,SP100,SP100
          PACK      PV100814,SP100,SP100,SP100,SP100,SP100
          PACK      PV100815,SP100,SP100,SP100,SP100,SP100
          PACK      PV100901,SP100,SP100,SP100,SP100,SP100
          PACK      PV100902,SP100,SP100,SP100,SP100,SP100
          PACK      PV100903,SP100,SP100,SP100,SP100,SP100
          PACK      PV100904,SP100,SP100,SP100,SP100,SP100
          PACK      PV100905,SP100,SP100,SP100,SP100,SP100
          PACK      PV100906,SP100,SP100,SP100,SP100,SP100
          PACK      PV100907,SP100,SP100,SP100,SP100,SP100
          PACK      PV100908,SP100,SP100,SP100,SP100,SP100
          PACK      PV100909,SP100,SP100,SP100,SP100,SP100
          PACK      PV100910,SP100,SP100,SP100,SP100,SP100
          PACK      PV100911,SP100,SP100,SP100,SP100,SP100
          PACK      PV100912,SP100,SP100,SP100,SP100,SP100
          PACK      PV100913,SP100,SP100,SP100,SP100,SP100
          PACK      PV100914,SP100,SP100,SP100,SP100,SP100
          PACK      PV100915,SP100,SP100,SP100,SP100,SP100
          PACK      PV101001,SP100,SP100,SP100,SP100,SP100
          PACK      PV101101,SP100,SP100,SP100,SP100,SP100
          PACK      PV101102,SP100,SP100,SP100,SP100,SP100
          PACK      PV101103,SP100,SP100,SP100,SP100,SP100
          PACK      PV101104,SP100,SP100,SP100,SP100,SP100
          PACK      PV101105,SP100,SP100,SP100,SP100,SP100
          PACK      PV101106,SP100,SP100,SP100,SP100,SP100
          PACK      PV101107,SP100,SP100,SP100,SP100,SP100
          PACK      PV101108,SP100,SP100,SP100,SP100,SP100
          PACK      PV101109,SP100,SP100,SP100,SP100,SP100
          PACK      PV101201,SP100,SP100,SP100,SP100,SP100
          PACK      PV101301,SP100,SP100,SP100,SP100,SP100
          PACK      PV101401,SP100,SP100,SP100,SP100,SP100
          PACK      PV101501,SP100,SP100,SP100,SP100,SP100
          PACK      PV101601,SP100,SP100,SP100,SP100,SP100
          PACK      PV101701,SP100,SP100,SP100,SP100,SP100
          PACK      PV101702,SP100,SP100,SP100,SP100,SP100
          PACK      PV101703,SP100,SP100,SP100,SP100,SP100
          PACK      PV101704,SP100,SP100,SP100,SP100,SP100
          PACK      PV101705,SP100,SP100,SP100,SP100,SP100
          PACK      PV101706,SP100,SP100,SP100,SP100,SP100
          PACK      PV101707,SP100,SP100,SP100,SP100,SP100
          PACK      PV101708,SP100,SP100,SP100,SP100,SP100
          PACK      PV101709,SP100,SP100,SP100,SP100,SP100
          PACK      PV101710,SP100,SP100,SP100,SP100,SP100
          PACK      PV101711,SP100,SP100,SP100,SP100,SP100
          PACK      PV101712,SP100,SP100,SP100,SP100,SP100
          PACK      PV101713,SP100,SP100,SP100,SP100,SP100
          PACK      PV101714,SP100,SP100,SP100,SP100,SP100
          PACK      PV101715,SP100,SP100,SP100,SP100,SP100
          PACK      PV101801,SP100,SP100,SP100,SP100,SP100
          PACK      PV101901,SP100,SP100,SP100,SP100,SP100
          PACK      PV101902,SP100,SP100,SP100,SP100,SP100
          PACK      PV101903,SP100,SP100,SP100,SP100,SP100
          PACK      PV101904,SP100,SP100,SP100,SP100,SP100
          PACK      PV101905,SP100,SP100,SP100,SP100,SP100
          PACK      PV101906,SP100,SP100,SP100,SP100,SP100
          PACK      PV102001,SP100,SP100,SP100,SP100,SP100
          PACK      PV102002,SP100,SP100,SP100,SP100,SP100
          PACK      PV102101,SP100,SP100,SP100,SP100,SP100
          PACK      PV102201,SP100,SP100,SP100,SP100,SP100
          PACK      PV102301,SP100,SP100,SP100,SP100,SP100
          PACK      PV102401,SP100,SP100,SP100,SP100,SP100
          PACK      PV102501,SP100,SP100,SP100,SP100,SP100
          PACK      PV102601,SP100,SP100,SP100,SP100,SP100
          PACK      PV102701,SP100,SP100,SP100,SP100,SP100
          PACK      PV102801,SP100,SP100,SP100,SP100,SP100
          PACK      PV102901,SP100,SP100,SP100,SP100,SP100
          PACK      PV103001,SP100,SP100,SP100,SP100,SP100
          PACK      PV103101,SP100,SP100,SP100,SP100,SP100
          PACK      PV103201,SP100,SP100,SP100,SP100,SP100
          PACK      PV103301,SP100,SP100,SP100,SP100,SP100
          PACK      PV103401,SP100,SP100,SP100,SP100,SP100
          PACK      PV103501,SP100,SP100,SP100,SP100,SP100
          PACK      PV103601,SP100,SP100,SP100,SP100,SP100
          PACK      PV103701,SP100,SP100,SP100,SP100,SP100
          PACK      PV103702,SP100,SP100,SP100,SP100,SP100
          PACK      PV103801,SP100,SP100,SP100,SP100,SP100
          PACK      PV103802,SP100,SP100,SP100,SP100,SP100
          PACK      PV103803,SP100,SP100,SP100,SP100,SP100
          PACK      PV103804,SP100,SP100,SP100,SP100,SP100
          PACK      PV103805,SP100,SP100,SP100,SP100,SP100
          PACK      PV103806,SP100,SP100,SP100,SP100,SP100
          PACK      PV103901,SP100,SP100,SP100,SP100,SP100
          PACK      PV104001,SP100,SP100,SP100,SP100,SP100
          PACK      PV104101,SP100,SP100,SP100,SP100,SP100
          PACK      PV104201,SP100,SP100,SP100,SP100,SP100
          PACK      PV104202,SP100,SP100,SP100,SP100,SP100
          PACK      PV104203,SP100,SP100,SP100,SP100,SP100
          PACK      PV104204,SP100,SP100,SP100,SP100,SP100
          PACK      PV104205,SP100,SP100,SP100,SP100,SP100
          PACK      PV104206,SP100,SP100,SP100,SP100,SP100
          PACK      PV104207,SP100,SP100,SP100,SP100,SP100
          PACK      PV104208,SP100,SP100,SP100,SP100,SP100
          PACK      PV104209,SP100,SP100,SP100,SP100,SP100
          PACK      PV104301,SP100,SP100,SP100,SP100,SP100
          PACK      PV104302,SP100,SP100,SP100,SP100,SP100
          PACK      PV104303,SP100,SP100,SP100,SP100,SP100
          PACK      PV104304,SP100,SP100,SP100,SP100,SP100
          PACK      PV104305,SP100,SP100,SP100,SP100,SP100
          PACK      PV104306,SP100,SP100,SP100,SP100,SP100
          PACK      PV104307,SP100,SP100,SP100,SP100,SP100
          PACK      PV104308,SP100,SP100,SP100,SP100,SP100
          PACK      PV104309,SP100,SP100,SP100,SP100,SP100
          PACK      PV104401,SP100,SP100,SP100,SP100,SP100
          PACK      PV104501,SP100,SP100,SP100,SP100,SP100
          PACK      PV104601,SP100,SP100,SP100,SP100,SP100
          PACK      PV104701,SP100,SP100,SP100,SP100,SP100
          PACK      PV104801,SP100,SP100,SP100,SP100,SP100
          PACK      PV104901,SP100,SP100,SP100,SP100,SP100
          PACK      PV105001,SP100,SP100,SP100,SP100,SP100
          PACK      PV105002,SP100,SP100,SP100,SP100,SP100
          PACK      PV105003,SP100,SP100,SP100,SP100,SP100
          PACK      PV105004,SP100,SP100,SP100,SP100,SP100
          PACK      PV105005,SP100,SP100,SP100,SP100,SP100
          PACK      PV105006,SP100,SP100,SP100,SP100,SP100
          PACK      PV105101,SP100,SP100,SP100,SP100,SP100
          PACK      PV105201,SP100,SP100,SP100,SP100,SP100
          PACK      PV105202,SP100,SP100,SP100,SP100,SP100
          PACK      PV105203,SP100,SP100,SP100,SP100,SP100
          PACK      PV105204,SP100,SP100,SP100,SP100,SP100
          PACK      PV105205,SP100,SP100,SP100,SP100,SP100
          PACK      PV105206,SP100,SP100,SP100,SP100,SP100
          PACK      PV105207,SP100,SP100,SP100,SP100,SP100
          PACK      PV105208,SP100,SP100,SP100,SP100,SP100
          PACK      PV105209,SP100,SP100,SP100,SP100,SP100
          PACK      PV105210,SP100,SP100,SP100,SP100,SP100
          PACK      PV105211,SP100,SP100,SP100,SP100,SP100
          PACK      PV105212,SP100,SP100,SP100,SP100,SP100
          PACK      PV105213,SP100,SP100,SP100,SP100,SP100
          PACK      PV105214,SP100,SP100,SP100,SP100,SP100
          PACK      PV105215,SP100,SP100,SP100,SP100,SP100
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     PV100101
          CLEAR     PV100201
          CLEAR     PV100301
          CLEAR     PV100302
          CLEAR     PV100303
          CLEAR     PV100304
          CLEAR     PV100305
          CLEAR     PV100306
          CLEAR     PV100307
          CLEAR     PV100308
          CLEAR     PV100309
          CLEAR     PV100401
          CLEAR     PV100501
          CLEAR     PV100502
          CLEAR     PV100503
          CLEAR     PV100504
          CLEAR     PV100505
          CLEAR     PV100506
          CLEAR     PV100601
          CLEAR     PV100602
          CLEAR     PV100603
          CLEAR     PV100604
          CLEAR     PV100605
          CLEAR     PV100606
          CLEAR     PV100607
          CLEAR     PV100608
          CLEAR     PV100609
          CLEAR     PV100701
          CLEAR     PV100702
          CLEAR     PV100703
          CLEAR     PV100704
          CLEAR     PV100705
          CLEAR     PV100706
          CLEAR     PV100707
          CLEAR     PV100708
          CLEAR     PV100709
          CLEAR     PV100710
          CLEAR     PV100711
          CLEAR     PV100712
          CLEAR     PV100713
          CLEAR     PV100714
          CLEAR     PV100715
          CLEAR     PV100801
          CLEAR     PV100802
          CLEAR     PV100803
          CLEAR     PV100804
          CLEAR     PV100805
          CLEAR     PV100806
          CLEAR     PV100807
          CLEAR     PV100808
          CLEAR     PV100809
          CLEAR     PV100810
          CLEAR     PV100811
          CLEAR     PV100812
          CLEAR     PV100813
          CLEAR     PV100814
          CLEAR     PV100815
          CLEAR     PV100901
          CLEAR     PV100902
          CLEAR     PV100903
          CLEAR     PV100904
          CLEAR     PV100905
          CLEAR     PV100906
          CLEAR     PV100907
          CLEAR     PV100908
          CLEAR     PV100909
          CLEAR     PV100910
          CLEAR     PV100911
          CLEAR     PV100912
          CLEAR     PV100913
          CLEAR     PV100914
          CLEAR     PV100915
          CLEAR     PV101001
          CLEAR     PV101101
          CLEAR     PV101102
          CLEAR     PV101103
          CLEAR     PV101104
          CLEAR     PV101105
          CLEAR     PV101106
          CLEAR     PV101107
          CLEAR     PV101108
          CLEAR     PV101109
          CLEAR     PV101201
          CLEAR     PV101301
          CLEAR     PV101401
          CLEAR     PV101501
          CLEAR     PV101601
          CLEAR     PV101701
          CLEAR     PV101702
          CLEAR     PV101703
          CLEAR     PV101704
          CLEAR     PV101705
          CLEAR     PV101706
          CLEAR     PV101707
          CLEAR     PV101708
          CLEAR     PV101709
          CLEAR     PV101710
          CLEAR     PV101711
          CLEAR     PV101712
          CLEAR     PV101713
          CLEAR     PV101714
          CLEAR     PV101715
          CLEAR     PV101801
          CLEAR     PV101901
          CLEAR     PV101902
          CLEAR     PV101903
          CLEAR     PV101904
          CLEAR     PV101905
          CLEAR     PV101906
          CLEAR     PV102001
          CLEAR     PV102002
          CLEAR     PV102101
          CLEAR     PV102201
          CLEAR     PV102301
          CLEAR     PV102401
          CLEAR     PV102501
          CLEAR     PV102601
          CLEAR     PV102701
          CLEAR     PV102801
          CLEAR     PV102901
          CLEAR     PV103001
          CLEAR     PV103101
          CLEAR     PV103201
          CLEAR     PV103301
          CLEAR     PV103401
          CLEAR     PV103501
          CLEAR     PV103601
          CLEAR     PV103701
          CLEAR     PV103702
          CLEAR     PV103801
          CLEAR     PV103802
          CLEAR     PV103803
          CLEAR     PV103804
          CLEAR     PV103805
          CLEAR     PV103806
          CLEAR     PV103901
          CLEAR     PV104001
          CLEAR     PV104101
          CLEAR     PV104201
          CLEAR     PV104202
          CLEAR     PV104203
          CLEAR     PV104204
          CLEAR     PV104205
          CLEAR     PV104206
          CLEAR     PV104207
          CLEAR     PV104208
          CLEAR     PV104209
          CLEAR     PV104301
          CLEAR     PV104302
          CLEAR     PV104303
          CLEAR     PV104304
          CLEAR     PV104305
          CLEAR     PV104306
          CLEAR     PV104307
          CLEAR     PV104308
          CLEAR     PV104309
          CLEAR     PV104401
          CLEAR     PV104501
          CLEAR     PV104601
          CLEAR     PV104701
          CLEAR     PV104801
          CLEAR     PV104901
          CLEAR     PV105001
          CLEAR     PV105002
          CLEAR     PV105003
          CLEAR     PV105004
          CLEAR     PV105005
          CLEAR     PV105006
          CLEAR     PV105101
          CLEAR     PV105201
          CLEAR     PV105202
          CLEAR     PV105203
          CLEAR     PV105204
          CLEAR     PV105205
          CLEAR     PV105206
          CLEAR     PV105207
          CLEAR     PV105208
          CLEAR     PV105209
          CLEAR     PV105210
          CLEAR     PV105211
          CLEAR     PV105212
          CLEAR     PV105213
          CLEAR     PV105214
          CLEAR     PV105215
.
.         Also clear ZXV fields here as the ZXV segment is not mandatory.
.         Otherwise the ZXV data may carry over from a previous message.
.
CPV19000  CALL      CZXV0000                     * clear ZXV fields (0968448)
.
CPV19999  RETURN
+
.*****************************************************************************
.*                               CPV20000          Called by: PROC0000       *
.*                     Clear all PV2 variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CPV20000  PACK      PV200101,SP100,SP100,SP100,SP100,SP100
          PACK      PV200102,SP100,SP100,SP100,SP100,SP100
          PACK      PV200103,SP100,SP100,SP100,SP100,SP100
          PACK      PV200104,SP100,SP100,SP100,SP100,SP100
          PACK      PV200105,SP100,SP100,SP100,SP100,SP100
          PACK      PV200106,SP100,SP100,SP100,SP100,SP100
          PACK      PV200107,SP100,SP100,SP100,SP100,SP100
          PACK      PV200108,SP100,SP100,SP100,SP100,SP100
          PACK      PV200109,SP100,SP100,SP100,SP100,SP100
          PACK      PV200201,SP100,SP100,SP100,SP100,SP100
          PACK      PV200202,SP100,SP100,SP100,SP100,SP100
          PACK      PV200203,SP100,SP100,SP100,SP100,SP100
          PACK      PV200204,SP100,SP100,SP100,SP100,SP100
          PACK      PV200205,SP100,SP100,SP100,SP100,SP100
          PACK      PV200206,SP100,SP100,SP100,SP100,SP100
          PACK      PV200301,SP100,SP100,SP100,SP100,SP100
          PACK      PV200302,SP100,SP100,SP100,SP100,SP100
          PACK      PV200303,SP100,SP100,SP100,SP100,SP100
          PACK      PV200304,SP100,SP100,SP100,SP100,SP100
          PACK      PV200305,SP100,SP100,SP100,SP100,SP100
          PACK      PV200306,SP100,SP100,SP100,SP100,SP100
          PACK      PV200401,SP100,SP100,SP100,SP100,SP100
          PACK      PV200402,SP100,SP100,SP100,SP100,SP100
          PACK      PV200403,SP100,SP100,SP100,SP100,SP100
          PACK      PV200404,SP100,SP100,SP100,SP100,SP100
          PACK      PV200405,SP100,SP100,SP100,SP100,SP100
          PACK      PV200406,SP100,SP100,SP100,SP100,SP100
          PACK      PV200501,SP100,SP100,SP100,SP100,SP100
          PACK      PV200601,SP100,SP100,SP100,SP100,SP100
          PACK      PV200701,SP100,SP100,SP100,SP100,SP100
          PACK      PV200801,SP100,SP100,SP100,SP100,SP100
          PACK      PV200901,SP100,SP100,SP100,SP100,SP100
          PACK      PV201001,SP100,SP100,SP100,SP100,SP100
          PACK      PV201101,SP100,SP100,SP100,SP100,SP100
          PACK      PV201201,SP100,SP100,SP100,SP100,SP100
          PACK      PV201301,SP100,SP100,SP100,SP100,SP100
          PACK      PV201302,SP100,SP100,SP100,SP100,SP100
          PACK      PV201303,SP100,SP100,SP100,SP100,SP100
          PACK      PV201304,SP100,SP100,SP100,SP100,SP100
          PACK      PV201305,SP100,SP100,SP100,SP100,SP100
          PACK      PV201306,SP100,SP100,SP100,SP100,SP100
          PACK      PV201307,SP100,SP100,SP100,SP100,SP100
          PACK      PV201308,SP100,SP100,SP100,SP100,SP100
          PACK      PV201309,SP100,SP100,SP100,SP100,SP100
          PACK      PV201310,SP100,SP100,SP100,SP100,SP100
          PACK      PV201311,SP100,SP100,SP100,SP100,SP100
          PACK      PV201312,SP100,SP100,SP100,SP100,SP100
          PACK      PV201313,SP100,SP100,SP100,SP100,SP100
          PACK      PV201314,SP100,SP100,SP100,SP100,SP100
          PACK      PV201315,SP100,SP100,SP100,SP100,SP100
          PACK      PV201401,SP100,SP100,SP100,SP100,SP100
          PACK      PV201501,SP100,SP100,SP100,SP100,SP100
          PACK      PV201601,SP100,SP100,SP100,SP100,SP100
          PACK      PV201701,SP100,SP100,SP100,SP100,SP100
          PACK      PV201801,SP100,SP100,SP100,SP100,SP100
          PACK      PV201901,SP100,SP100,SP100,SP100,SP100
          PACK      PV202001,SP100,SP100,SP100,SP100,SP100
          PACK      PV202101,SP100,SP100,SP100,SP100,SP100
          PACK      PV202201,SP100,SP100,SP100,SP100,SP100
          PACK      PV202301,SP100,SP100,SP100,SP100,SP100
          PACK      PV202302,SP100,SP100,SP100,SP100,SP100
          PACK      PV202303,SP100,SP100,SP100,SP100,SP100
          PACK      PV202304,SP100,SP100,SP100,SP100,SP100
          PACK      PV202305,SP100,SP100,SP100,SP100,SP100
          PACK      PV202306,SP100,SP100,SP100,SP100,SP100
          PACK      PV202307,SP100,SP100,SP100,SP100,SP100
          PACK      PV202308,SP100,SP100,SP100,SP100,SP100
          PACK      PV202309,SP100,SP100,SP100,SP100,SP100
          PACK      PV202401,SP100,SP100,SP100,SP100,SP100
          PACK      PV202501,SP100,SP100,SP100,SP100,SP100
          PACK      PV202601,SP100,SP100,SP100,SP100,SP100
          PACK      PV202701,SP100,SP100,SP100,SP100,SP100
          PACK      PV202801,SP100,SP100,SP100,SP100,SP100
          PACK      PV202901,SP100,SP100,SP100,SP100,SP100
          PACK      PV203001,SP100,SP100,SP100,SP100,SP100
          PACK      PV203002,SP100,SP100,SP100,SP100,SP100
          PACK      PV203003,SP100,SP100,SP100,SP100,SP100
          PACK      PV203004,SP100,SP100,SP100,SP100,SP100
          PACK      PV203005,SP100,SP100,SP100,SP100,SP100
          PACK      PV203006,SP100,SP100,SP100,SP100,SP100
          PACK      PV203101,SP100,SP100,SP100,SP100,SP100
          PACK      PV203201,SP100,SP100,SP100,SP100,SP100
          PACK      PV203301,SP100,SP100,SP100,SP100,SP100
          PACK      PV203401,SP100,SP100,SP100,SP100,SP100
          PACK      PV203501,SP100,SP100,SP100,SP100,SP100
          PACK      PV203601,SP100,SP100,SP100,SP100,SP100
          PACK      PV203701,SP100,SP100,SP100,SP100,SP100
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     PV200101
          CLEAR     PV200102
          CLEAR     PV200103
          CLEAR     PV200104
          CLEAR     PV200105
          CLEAR     PV200106
          CLEAR     PV200107
          CLEAR     PV200108
          CLEAR     PV200109
          CLEAR     PV200201
          CLEAR     PV200202
          CLEAR     PV200203
          CLEAR     PV200204
          CLEAR     PV200205
          CLEAR     PV200206
          CLEAR     PV200301
          CLEAR     PV200302
          CLEAR     PV200303
          CLEAR     PV200304
          CLEAR     PV200305
          CLEAR     PV200306
          CLEAR     PV200401
          CLEAR     PV200402
          CLEAR     PV200403
          CLEAR     PV200404
          CLEAR     PV200405
          CLEAR     PV200406
          CLEAR     PV200501
          CLEAR     PV200601
          CLEAR     PV200701
          CLEAR     PV200801
          CLEAR     PV200901
          CLEAR     PV201001
          CLEAR     PV201101
          CLEAR     PV201201
          CLEAR     PV201301
          CLEAR     PV201302
          CLEAR     PV201303
          CLEAR     PV201304
          CLEAR     PV201305
          CLEAR     PV201306
          CLEAR     PV201307
          CLEAR     PV201308
          CLEAR     PV201309
          CLEAR     PV201310
          CLEAR     PV201311
          CLEAR     PV201312
          CLEAR     PV201313
          CLEAR     PV201314
          CLEAR     PV201315
          CLEAR     PV201401
          CLEAR     PV201501
          CLEAR     PV201601
          CLEAR     PV201701
          CLEAR     PV201801
          CLEAR     PV201901
          CLEAR     PV202001
          CLEAR     PV202101
          CLEAR     PV202201
          CLEAR     PV202301
          CLEAR     PV202302
          CLEAR     PV202303
          CLEAR     PV202304
          CLEAR     PV202305
          CLEAR     PV202306
          CLEAR     PV202307
          CLEAR     PV202308
          CLEAR     PV202309
          CLEAR     PV202401
          CLEAR     PV202501
          CLEAR     PV202601
          CLEAR     PV202701
          CLEAR     PV202801
          CLEAR     PV202901
          CLEAR     PV203001
          CLEAR     PV203002
          CLEAR     PV203003
          CLEAR     PV203004
          CLEAR     PV203005
          CLEAR     PV203006
          CLEAR     PV203101
          CLEAR     PV203201
          CLEAR     PV203301
          CLEAR     PV203401
          CLEAR     PV203501
          CLEAR     PV203601
          CLEAR     PV203701
.
CPV29999  RETURN
+
.*****************************************************************************
.*                               CFT10000          Called by: PROC0000       *
.*                     Clear all FT1 variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.         
CFT10000  PACK      FT100101,SP100,SP100,SP100,SP100,SP100
          PACK      FT100201,SP100,SP100,SP100,SP100,SP100
          PACK      FT100301,SP100,SP100,SP100,SP100,SP100
          PACK      FT100401,SP100,SP100,SP100,SP100,SP100
          PACK      FT100501,SP100,SP100,SP100,SP100,SP100
          PACK      FT100601,SP100,SP100,SP100,SP100,SP100
          PACK      FT100701,SP100,SP100,SP100,SP100,SP100
          PACK      FT100702,SP100,SP100,SP100,SP100,SP100
          PACK      FT100703,SP100,SP100,SP100,SP100,SP100
          PACK      FT100704,SP100,SP100,SP100,SP100,SP100
          PACK      FT100705,SP100,SP100,SP100,SP100,SP100
          PACK      FT100706,SP100,SP100,SP100,SP100,SP100
          PACK      FT100801,SP100,SP100,SP100,SP100,SP100
          PACK      FT100901,SP100,SP100,SP100,SP100,SP100
          PACK      FT101001,SP100,SP100,SP100,SP100,SP100
          PACK      FT101101,SP100,SP100,SP100,SP100,SP100
          PACK      FT101102,SP100,SP100,SP100,SP100,SP100
          PACK      FT101103,SP100,SP100,SP100,SP100,SP100
          PACK      FT101104,SP100,SP100,SP100,SP100,SP100
          PACK      FT101105,SP100,SP100,SP100,SP100,SP100
          PACK      FT101106,SP100,SP100,SP100,SP100,SP100
          PACK      FT101201,SP100,SP100,SP100,SP100,SP100
          PACK      FT101202,SP100,SP100,SP100,SP100,SP100
          PACK      FT101203,SP100,SP100,SP100,SP100,SP100
          PACK      FT101204,SP100,SP100,SP100,SP100,SP100
          PACK      FT101205,SP100,SP100,SP100,SP100,SP100
          PACK      FT101206,SP100,SP100,SP100,SP100,SP100
          PACK      FT101301,SP100,SP100,SP100,SP100,SP100
          PACK      FT101302,SP100,SP100,SP100,SP100,SP100
          PACK      FT101303,SP100,SP100,SP100,SP100,SP100
          PACK      FT101304,SP100,SP100,SP100,SP100,SP100
          PACK      FT101305,SP100,SP100,SP100,SP100,SP100
          PACK      FT101306,SP100,SP100,SP100,SP100,SP100
          PACK      FT101401,SP100,SP100,SP100,SP100,SP100
          PACK      FT101402,SP100,SP100,SP100,SP100,SP100
          PACK      FT101403,SP100,SP100,SP100,SP100,SP100
          PACK      FT101404,SP100,SP100,SP100,SP100,SP100
          PACK      FT101405,SP100,SP100,SP100,SP100,SP100
          PACK      FT101406,SP100,SP100,SP100,SP100,SP100
          PACK      FT101501,SP100,SP100,SP100,SP100,SP100
          PACK      FT101502,SP100,SP100,SP100,SP100,SP100
          PACK      FT101503,SP100,SP100,SP100,SP100,SP100
          PACK      FT101504,SP100,SP100,SP100,SP100,SP100
          PACK      FT101505,SP100,SP100,SP100,SP100,SP100
          PACK      FT101506,SP100,SP100,SP100,SP100,SP100
          PACK      FT101601,SP100,SP100,SP100,SP100,SP100
          PACK      FT101602,SP100,SP100,SP100,SP100,SP100
          PACK      FT101603,SP100,SP100,SP100,SP100,SP100
          PACK      FT101604,SP100,SP100,SP100,SP100,SP100
          PACK      FT101605,SP100,SP100,SP100,SP100,SP100
          PACK      FT101606,SP100,SP100,SP100,SP100,SP100
          PACK      FT101607,SP100,SP100,SP100,SP100,SP100
          PACK      FT101608,SP100,SP100,SP100,SP100,SP100
          PACK      FT101609,SP100,SP100,SP100,SP100,SP100
          PACK      FT101701,SP100,SP100,SP100,SP100,SP100
          PACK      FT101801,SP100,SP100,SP100,SP100,SP100
          PACK      FT101901,SP100,SP100,SP100,SP100,SP100
          PACK      FT101902,SP100,SP100,SP100,SP100,SP100
          PACK      FT101903,SP100,SP100,SP100,SP100,SP100
          PACK      FT101904,SP100,SP100,SP100,SP100,SP100
          PACK      FT101905,SP100,SP100,SP100,SP100,SP100
          PACK      FT101906,SP100,SP100,SP100,SP100,SP100
          PACK      FT102001,SP100,SP100,SP100,SP100,SP100
          PACK      FT102002,SP100,SP100,SP100,SP100,SP100
          PACK      FT102003,SP100,SP100,SP100,SP100,SP100
          PACK      FT102004,SP100,SP100,SP100,SP100,SP100
          PACK      FT102005,SP100,SP100,SP100,SP100,SP100
          PACK      FT102006,SP100,SP100,SP100,SP100,SP100
          PACK      FT102007,SP100,SP100,SP100,SP100,SP100
          PACK      FT102008,SP100,SP100,SP100,SP100,SP100
          PACK      FT102009,SP100,SP100,SP100,SP100,SP100
          PACK      FT102010,SP100,SP100,SP100,SP100,SP100
          PACK      FT102011,SP100,SP100,SP100,SP100,SP100
          PACK      FT102012,SP100,SP100,SP100,SP100,SP100
          PACK      FT102013,SP100,SP100,SP100,SP100,SP100
          PACK      FT102014,SP100,SP100,SP100,SP100,SP100
          PACK      FT102015,SP100,SP100,SP100,SP100,SP100
          PACK      FT102101,SP100,SP100,SP100,SP100,SP100
          PACK      FT102102,SP100,SP100,SP100,SP100,SP100
          PACK      FT102103,SP100,SP100,SP100,SP100,SP100
          PACK      FT102104,SP100,SP100,SP100,SP100,SP100
          PACK      FT102105,SP100,SP100,SP100,SP100,SP100
          PACK      FT102106,SP100,SP100,SP100,SP100,SP100
          PACK      FT102107,SP100,SP100,SP100,SP100,SP100
          PACK      FT102108,SP100,SP100,SP100,SP100,SP100
          PACK      FT102109,SP100,SP100,SP100,SP100,SP100
          PACK      FT102110,SP100,SP100,SP100,SP100,SP100
          PACK      FT102111,SP100,SP100,SP100,SP100,SP100
          PACK      FT102112,SP100,SP100,SP100,SP100,SP100
          PACK      FT102113,SP100,SP100,SP100,SP100,SP100
          PACK      FT102114,SP100,SP100,SP100,SP100,SP100
          PACK      FT102115,SP100,SP100,SP100,SP100,SP100
          PACK      FT102201,SP100,SP100,SP100,SP100,SP100
          PACK      FT102202,SP100,SP100,SP100,SP100,SP100
          PACK      FT102203,SP100,SP100,SP100,SP100,SP100
          PACK      FT102204,SP100,SP100,SP100,SP100,SP100
          PACK      FT102205,SP100,SP100,SP100,SP100,SP100
          PACK      FT102206,SP100,SP100,SP100,SP100,SP100
          PACK      FT102301,SP100,SP100,SP100,SP100,SP100
          PACK      FT102302,SP100,SP100,SP100,SP100,SP100
          PACK      FT102303,SP100,SP100,SP100,SP100,SP100
          PACK      FT102304,SP100,SP100,SP100,SP100,SP100
          PACK      FT102401,SP100,SP100,SP100,SP100,SP100
          PACK      FT102402,SP100,SP100,SP100,SP100,SP100
          PACK      FT102403,SP100,SP100,SP100,SP100,SP100
          PACK      FT102404,SP100,SP100,SP100,SP100,SP100
          PACK      FT102405,SP100,SP100,SP100,SP100,SP100
          PACK      FT102406,SP100,SP100,SP100,SP100,SP100
          PACK      FT102407,SP100,SP100,SP100,SP100,SP100
          PACK      FT102408,SP100,SP100,SP100,SP100,SP100
          PACK      FT102409,SP100,SP100,SP100,SP100,SP100
          PACK      FT102410,SP100,SP100,SP100,SP100,SP100
          PACK      FT102411,SP100,SP100,SP100,SP100,SP100
          PACK      FT102412,SP100,SP100,SP100,SP100,SP100
          PACK      FT102413,SP100,SP100,SP100,SP100,SP100
          PACK      FT102414,SP100,SP100,SP100,SP100,SP100
          PACK      FT102415,SP100,SP100,SP100,SP100,SP100
          PACK      FT102501,SP100,SP100,SP100,SP100,SP100
          PACK      FT102502,SP100,SP100,SP100,SP100,SP100
          PACK      FT102503,SP100,SP100,SP100,SP100,SP100
          PACK      FT102504,SP100,SP100,SP100,SP100,SP100
          PACK      FT102505,SP100,SP100,SP100,SP100,SP100
          PACK      FT102506,SP100,SP100,SP100,SP100,SP100
          PACK      FT102601,SP100,SP100,SP100,SP100,SP100
          PACK      FT102602,SP100,SP100,SP100,SP100,SP100
          PACK      FT102603,SP100,SP100,SP100,SP100,SP100
          PACK      FT102604,SP100,SP100,SP100,SP100,SP100
          PACK      FT102605,SP100,SP100,SP100,SP100,SP100
          PACK      FT102606,SP100,SP100,SP100,SP100,SP100
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     FT100101
          CLEAR     FT100201
          CLEAR     FT100301
          CLEAR     FT100401
          CLEAR     FT100501
          CLEAR     FT100601
          CLEAR     FT100701
          CLEAR     FT100702
          CLEAR     FT100703
          CLEAR     FT100704
          CLEAR     FT100705
          CLEAR     FT100706
          CLEAR     FT100801
          CLEAR     FT100901
          CLEAR     FT101001
          CLEAR     FT101101
          CLEAR     FT101102
          CLEAR     FT101103
          CLEAR     FT101104
          CLEAR     FT101105
          CLEAR     FT101106
          CLEAR     FT101201
          CLEAR     FT101202
          CLEAR     FT101203
          CLEAR     FT101204
          CLEAR     FT101205
          CLEAR     FT101206
          CLEAR     FT101301
          CLEAR     FT101302
          CLEAR     FT101303
          CLEAR     FT101304
          CLEAR     FT101305
          CLEAR     FT101306
          CLEAR     FT101401
          CLEAR     FT101402
          CLEAR     FT101403
          CLEAR     FT101404
          CLEAR     FT101405
          CLEAR     FT101406
          CLEAR     FT101501
          CLEAR     FT101502
          CLEAR     FT101503
          CLEAR     FT101504
          CLEAR     FT101505
          CLEAR     FT101506
          CLEAR     FT101601
          CLEAR     FT101602
          CLEAR     FT101603
          CLEAR     FT101604
          CLEAR     FT101605
          CLEAR     FT101606
          CLEAR     FT101607
          CLEAR     FT101608
          CLEAR     FT101609
          CLEAR     FT101701
          CLEAR     FT101801
          CLEAR     FT101901
          CLEAR     FT101902
          CLEAR     FT101903
          CLEAR     FT101904
          CLEAR     FT101905
          CLEAR     FT101906
          CLEAR     FT102001
          CLEAR     FT102002
          CLEAR     FT102003
          CLEAR     FT102004
          CLEAR     FT102005
          CLEAR     FT102006
          CLEAR     FT102007
          CLEAR     FT102008
          CLEAR     FT102009
          CLEAR     FT102010
          CLEAR     FT102011
          CLEAR     FT102012
          CLEAR     FT102013
          CLEAR     FT102014
          CLEAR     FT102015
          CLEAR     FT102101
          CLEAR     FT102102
          CLEAR     FT102103
          CLEAR     FT102104
          CLEAR     FT102105
          CLEAR     FT102106
          CLEAR     FT102107
          CLEAR     FT102108
          CLEAR     FT102109
          CLEAR     FT102110
          CLEAR     FT102111
          CLEAR     FT102112
          CLEAR     FT102113
          CLEAR     FT102114
          CLEAR     FT102115
          CLEAR     FT102201
          CLEAR     FT102202
          CLEAR     FT102203
          CLEAR     FT102204
          CLEAR     FT102205
          CLEAR     FT102206
          CLEAR     FT102301
          CLEAR     FT102302
          CLEAR     FT102303
          CLEAR     FT102304
          CLEAR     FT102401
          CLEAR     FT102402
          CLEAR     FT102403
          CLEAR     FT102404
          CLEAR     FT102405
          CLEAR     FT102406
          CLEAR     FT102407
          CLEAR     FT102408
          CLEAR     FT102409
          CLEAR     FT102410
          CLEAR     FT102411
          CLEAR     FT102412
          CLEAR     FT102413
          CLEAR     FT102414
          CLEAR     FT102415
          CLEAR     FT102501
          CLEAR     FT102502
          CLEAR     FT102503
          CLEAR     FT102504
          CLEAR     FT102505
          CLEAR     FT102506
          CLEAR     FT102601
          CLEAR     FT102602
          CLEAR     FT102603
          CLEAR     FT102604
          CLEAR     FT102605
          CLEAR     FT102606
.
CFT19999  RETURN
+
.*****************************************************************************
.*                               CZFT0000          Called by: PROC0000       *
.*                     Clear all ZFT variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CZFT0000  PACK      ZFT00101,SP100,SP100,SP100,SP100,SP100
          PACK      ZFT00201,SP100,SP100,SP100,SP100,SP100
          PACK      ZFT00301,SP100,SP100,SP100,SP100,SP100
          PACK      ZFT00401,SP100,SP100,SP100,SP100,SP100
          PACK      ZFT00501,SP100,SP100,SP100,SP100,SP100
          PACK      ZFT00601,SP100,SP100,SP100,SP100,SP100
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     ZFT00101
          CLEAR     ZFT00201
          CLEAR     ZFT00301
          CLEAR     ZFT00401
          CLEAR     ZFT00501
          CLEAR     ZFT00601
.
CZFT9999  RETURN
+
.*****************************************************************************
.*                               CNTE0000          Called by: PROC0000       *
.*                     Clear all NTE variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CNTE0000  PACK      NTE00101,SP100,SP100,SP100,SP100,SP100
          PACK      NTE00201,SP100,SP100,SP100,SP100,SP100
          PACK      NTE00301,SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100
          PACK      NTE00401,SP100,SP100,SP100,SP100,SP100
          PACK      NTE00402,SP100,SP100,SP100,SP100,SP100
          PACK      NTE00403,SP100,SP100,SP100,SP100,SP100
          PACK      NTE00404,SP100,SP100,SP100,SP100,SP100
          PACK      NTE00405,SP100,SP100,SP100,SP100,SP100
          PACK      NTE00406,SP100,SP100,SP100,SP100,SP100
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     NTE00101
          CLEAR     NTE00201
          CLEAR     NTE00301
          CLEAR     NTE00401
          CLEAR     NTE00402
          CLEAR     NTE00403
          CLEAR     NTE00404
          CLEAR     NTE00405
          CLEAR     NTE00406
.
CNTE9999  RETURN
+
.*****************************************************************************
.*                               CARQ0000          Called by: PROC0000       *
.*                     Clear all ARQ variables                               *
.*****************************************************************************
CARQ0000  
CARQ9999  RETURN
+
.*****************************************************************************
.*                               CGT10000          Called by: PROC0000       *
.*                     Clear all GT1 variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CGT10000  PACK      GT100101,SP100,SP100,SP100,SP100,SP100
          PACK      GT100201,SP100,SP100,SP100,SP100,SP100
          PACK      GT100301,SP100,SP100,SP100,SP100,SP100
          PACK      GT100302,SP100,SP100,SP100,SP100,SP100
          PACK      GT100303,SP100,SP100,SP100,SP100,SP100
          PACK      GT100304,SP100,SP100,SP100,SP100,SP100
          PACK      GT100305,SP100,SP100,SP100,SP100,SP100
          PACK      GT100306,SP100,SP100,SP100,SP100,SP100
          PACK      GT100307,SP100,SP100,SP100,SP100,SP100
          PACK      GT100308,SP100,SP100,SP100,SP100,SP100
          PACK      GT100401,SP100,SP100,SP100,SP100,SP100
          PACK      GT100501,SP100,SP100,SP100,SP100,SP100
          PACK      GT100502,SP100,SP100,SP100,SP100,SP100
          PACK      GT100503,SP100,SP100,SP100,SP100,SP100
          PACK      GT100504,SP100,SP100,SP100,SP100,SP100
          PACK      GT100505,SP100,SP100,SP100,SP100,SP100
          PACK      GT100506,SP100,SP100,SP100,SP100,SP100
          PACK      GT100507,SP100,SP100,SP100,SP100,SP100
          PACK      GT100508,SP100,SP100,SP100,SP100,SP100
          PACK      GT100509,SP100,SP100,SP100,SP100,SP100
          PACK      GT100510,SP100,SP100,SP100,SP100,SP100
          PACK      GT100511,SP100,SP100,SP100,SP100,SP100
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 2
            ADD       ONE,COUNTER
            PACK      GT100601[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      GT100602[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      GT100603[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      GT100604[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      GT100605[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      GT100606[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      GT100607[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      GT100608[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      GT100609[COUNTER],SP100,SP100,SP100,SP100,SP100
          DO
.
          PACK      GT100701,SP100,SP100,SP100,SP100,SP100
          PACK      GT100702,SP100,SP100,SP100,SP100,SP100
          PACK      GT100703,SP100,SP100,SP100,SP100,SP100
          PACK      GT100704,SP100,SP100,SP100,SP100,SP100
          PACK      GT100705,SP100,SP100,SP100,SP100,SP100
          PACK      GT100706,SP100,SP100,SP100,SP100,SP100
          PACK      GT100707,SP100,SP100,SP100,SP100,SP100
          PACK      GT100708,SP100,SP100,SP100,SP100,SP100
          PACK      GT100709,SP100,SP100,SP100,SP100,SP100
          PACK      GT100801,SP100,SP100,SP100,SP100,SP100
          PACK      GT100901,SP100,SP100,SP100,SP100,SP100
          PACK      GT101001,SP100,SP100,SP100,SP100,SP100
          PACK      GT101101,SP100,SP100,SP100,SP100,SP100
          PACK      GT101102,SP100,SP100,SP100,SP100,SP100
          PACK      GT101103,SP100,SP100,SP100,SP100,SP100
          PACK      GT101104,SP100,SP100,SP100,SP100,SP100
          PACK      GT101105,SP100,SP100,SP100,SP100,SP100
          PACK      GT101106,SP100,SP100,SP100,SP100,SP100
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     GT100101
          CLEAR     GT100201
          CLEAR     GT100301
          CLEAR     GT100302
          CLEAR     GT100303
          CLEAR     GT100304
          CLEAR     GT100305
          CLEAR     GT100306
          CLEAR     GT100307
          CLEAR     GT100308
          CLEAR     GT100401
          CLEAR     GT100501
          CLEAR     GT100502
          CLEAR     GT100503
          CLEAR     GT100504
          CLEAR     GT100505
          CLEAR     GT100506
          CLEAR     GT100507
          CLEAR     GT100508
          CLEAR     GT100509
          CLEAR     GT100510
          CLEAR     GT100511
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 2
            ADD       ONE,COUNTER
            CLEAR     GT100601[COUNTER]
            CLEAR     GT100602[COUNTER]
            CLEAR     GT100603[COUNTER]
            CLEAR     GT100604[COUNTER]
            CLEAR     GT100605[COUNTER]
            CLEAR     GT100606[COUNTER]
            CLEAR     GT100607[COUNTER]
            CLEAR     GT100608[COUNTER]
            CLEAR     GT100609[COUNTER]
          DO
.
          CLEAR     GT100701
          CLEAR     GT100702
          CLEAR     GT100703
          CLEAR     GT100704
          CLEAR     GT100705
          CLEAR     GT100706
          CLEAR     GT100707
          CLEAR     GT100708
          CLEAR     GT100709
          CLEAR     GT100801
          CLEAR     GT100901
          CLEAR     GT101001
          CLEAR     GT101101
          CLEAR     GT101102
          CLEAR     GT101103
          CLEAR     GT101104
          CLEAR     GT101105
          CLEAR     GT101106
.
CGT19999  RETURN
+
.*****************************************************************************
.*                               CIN10000          Called by: PROC0000       *
.*                     Clear all IN1 variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CIN10000  PACK      IN100101,SP100,SP100,SP100,SP100,SP100
          PACK      IN100201,SP100,SP100,SP100,SP100,SP100
          PACK      IN100202,SP100,SP100,SP100,SP100,SP100
          PACK      IN100203,SP100,SP100,SP100,SP100,SP100
          PACK      IN100204,SP100,SP100,SP100,SP100,SP100
          PACK      IN100205,SP100,SP100,SP100,SP100,SP100
          PACK      IN100206,SP100,SP100,SP100,SP100,SP100
          PACK      IN100301,SP100,SP100,SP100,SP100,SP100
          PACK      IN100302,SP100,SP100,SP100,SP100,SP100
          PACK      IN100303,SP100,SP100,SP100,SP100,SP100
          PACK      IN100304,SP100,SP100,SP100,SP100,SP100
          PACK      IN100305,SP100,SP100,SP100,SP100,SP100
          PACK      IN100306,SP100,SP100,SP100,SP100,SP100
          PACK      IN103601,SP100,SP100,SP100,SP100,SP100
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     IN100101
          CLEAR     IN100201
          CLEAR     IN100202
          CLEAR     IN100203
          CLEAR     IN100204
          CLEAR     IN100205
          CLEAR     IN100206
          CLEAR     IN100301
          CLEAR     IN100302
          CLEAR     IN100303
          CLEAR     IN100304
          CLEAR     IN100305
          CLEAR     IN100306
          CLEAR     IN103601
.
CIN19999  RETURN
+
.*****************************************************************************
.*                               CAIS0000          Called by: PROC0000       *
.*                     Clear all AIS variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CAIS0000  PACK      AIS00101,SP100,SP100,SP100,SP100,SP100
          PACK      AIS00201,SP100,SP100,SP100,SP100,SP100
          PACK      AIS00301,SP100,SP100,SP100,SP100,SP100
          PACK      AIS00302,SP100,SP100,SP100,SP100,SP100
          PACK      AIS00303,SP100,SP100,SP100,SP100,SP100
          PACK      AIS00304,SP100,SP100,SP100,SP100,SP100
          PACK      AIS00305,SP100,SP100,SP100,SP100,SP100
          PACK      AIS00306,SP100,SP100,SP100,SP100,SP100
          PACK      AIS00401,SP100,SP100,SP100,SP100,SP100
          PACK      AIS00501,SP100,SP100,SP100,SP100,SP100
          PACK      AIS00601,SP100,SP100,SP100,SP100,SP100
          PACK      AIS00701,SP100,SP100,SP100,SP100,SP100
          PACK      AIS00801,SP100,SP100,SP100,SP100,SP100
          PACK      AIS00901,SP100,SP100,SP100,SP100,SP100
          PACK      AIS01001,SP100,SP100,SP100,SP100,SP100
.
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     AIS00101
          CLEAR     AIS00201
          CLEAR     AIS00301
          CLEAR     AIS00302
          CLEAR     AIS00303
          CLEAR     AIS00304
          CLEAR     AIS00305
          CLEAR     AIS00306
          CLEAR     AIS00401
          CLEAR     AIS00501
          CLEAR     AIS00601
          CLEAR     AIS00701
          CLEAR     AIS00801
          CLEAR     AIS00901
          CLEAR     AIS01001
.
CAIS9999  RETURN
+
.*****************************************************************************
.*                               CAIL0000          Called by: PROC0000       *
.*                     Clear all AIL variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CAIL0000  PACK      AIL01001,SP100,SP100,SP100,SP100,SP100
          PACK      AIL00201,SP100,SP100,SP100,SP100,SP100
          PACK      AIL00301,SP100,SP100,SP100,SP100,SP100
          PACK      AIL00302,SP100,SP100,SP100,SP100,SP100
          PACK      AIL00303,SP100,SP100,SP100,SP100,SP100
          PACK      AIL00304,SP100,SP100,SP100,SP100,SP100
          PACK      AIL00305,SP100,SP100,SP100,SP100,SP100
          PACK      AIL00306,SP100,SP100,SP100,SP100,SP100
          PACK      AIL00307,SP100,SP100,SP100,SP100,SP100
          PACK      AIL00308,SP100,SP100,SP100,SP100,SP100
          PACK      AIL00309,SP100,SP100,SP100,SP100,SP100
          PACK      AIL00401,SP100,SP100,SP100,SP100,SP100
          PACK      AIL00402,SP100,SP100,SP100,SP100,SP100
          PACK      AIL00403,SP100,SP100,SP100,SP100,SP100
          PACK      AIL00404,SP100,SP100,SP100,SP100,SP100
          PACK      AIL00405,SP100,SP100,SP100,SP100,SP100
          PACK      AIL00406,SP100,SP100,SP100,SP100,SP100
          PACK      AIL00501,SP100,SP100,SP100,SP100,SP100
          PACK      AIL00502,SP100,SP100,SP100,SP100,SP100
          PACK      AIL00503,SP100,SP100,SP100,SP100,SP100
          PACK      AIL00504,SP100,SP100,SP100,SP100,SP100
          PACK      AIL00505,SP100,SP100,SP100,SP100,SP100
          PACK      AIL00506,SP100,SP100,SP100,SP100,SP100
          PACK      AIL00601,SP100,SP100,SP100,SP100,SP100
          PACK      AIL00701,SP100,SP100,SP100,SP100,SP100
          PACK      AIL00801,SP100,SP100,SP100,SP100,SP100
          PACK      AIL00901,SP100,SP100,SP100,SP100,SP100
          PACK      AIL01001,SP100,SP100,SP100,SP100,SP100
          PACK      AIL01002,SP100,SP100,SP100,SP100,SP100
          PACK      AIL01003,SP100,SP100,SP100,SP100,SP100
          PACK      AIL01004,SP100,SP100,SP100,SP100,SP100
          PACK      AIL01005,SP100,SP100,SP100,SP100,SP100
          PACK      AIL01006,SP100,SP100,SP100,SP100,SP100
          PACK      AIL01101,SP100,SP100,SP100,SP100,SP100
          PACK      AIL01201,SP100,SP100,SP100,SP100,SP100
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     AIL00101
          CLEAR     AIL00201
          CLEAR     AIL00301
          CLEAR     AIL00302
          CLEAR     AIL00303
          CLEAR     AIL00304
          CLEAR     AIL00305
          CLEAR     AIL00306
          CLEAR     AIL00307
          CLEAR     AIL00308
          CLEAR     AIL00309
          CLEAR     AIL00401
          CLEAR     AIL00402
          CLEAR     AIL00403
          CLEAR     AIL00404
          CLEAR     AIL00405
          CLEAR     AIL00406
          CLEAR     AIL00501
          CLEAR     AIL00502
          CLEAR     AIL00503
          CLEAR     AIL00504
          CLEAR     AIL00505
          CLEAR     AIL00506
          CLEAR     AIL00601
          CLEAR     AIL00701
          CLEAR     AIL00801
          CLEAR     AIL00901
          CLEAR     AIL01001
          CLEAR     AIL01002
          CLEAR     AIL01003
          CLEAR     AIL01004
          CLEAR     AIL01005
          CLEAR     AIL01006
          CLEAR     AIL01101
          CLEAR     AIL01201
.
CAIL9999  RETURN
+
.*****************************************************************************
.*                               CAIP0000          Called by: PROC0000       *
.*                     Clear all AIP variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CAIP0000  PACK      AIP00101,SP100,SP100,SP100,SP100,SP100
          PACK      AIP00201,SP100,SP100,SP100,SP100,SP100
          PACK      AIP00301,SP100,SP100,SP100,SP100,SP100
          PACK      AIP00302,SP100,SP100,SP100,SP100,SP100
          PACK      AIP00303,SP100,SP100,SP100,SP100,SP100
          PACK      AIP00304,SP100,SP100,SP100,SP100,SP100
          PACK      AIP00305,SP100,SP100,SP100,SP100,SP100
          PACK      AIP00306,SP100,SP100,SP100,SP100,SP100
          PACK      AIP00307,SP100,SP100,SP100,SP100,SP100
          PACK      AIP00308,SP100,SP100,SP100,SP100,SP100
          PACK      AIP00309,SP100,SP100,SP100,SP100,SP100
          PACK      AIP00310,SP100,SP100,SP100,SP100,SP100
          PACK      AIP00311,SP100,SP100,SP100,SP100,SP100
          PACK      AIP00312,SP100,SP100,SP100,SP100,SP100
          PACK      AIP00313,SP100,SP100,SP100,SP100,SP100
          PACK      AIP00314,SP100,SP100,SP100,SP100,SP100
          PACK      AIP00315,SP100,SP100,SP100,SP100,SP100
          PACK      AIP00401,SP100,SP100,SP100,SP100,SP100
          PACK      AIP00402,SP100,SP100,SP100,SP100,SP100
          PACK      AIP00403,SP100,SP100,SP100,SP100,SP100
          PACK      AIP00404,SP100,SP100,SP100,SP100,SP100
          PACK      AIP00405,SP100,SP100,SP100,SP100,SP100
          PACK      AIP00406,SP100,SP100,SP100,SP100,SP100
          PACK      AIP00501,SP100,SP100,SP100,SP100,SP100
          PACK      AIP00601,SP100,SP100,SP100,SP100,SP100
          PACK      AIP00701,SP100,SP100,SP100,SP100,SP100
          PACK      AIP00801,SP100,SP100,SP100,SP100,SP100
          PACK      AIP00901,SP100,SP100,SP100,SP100,SP100
          PACK      AIP01001,SP100,SP100,SP100,SP100,SP100
          PACK      AIP01101,SP100,SP100,SP100,SP100,SP100
          PACK      AIP01201,SP100,SP100,SP100,SP100,SP100
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     AIP00101
          CLEAR     AIP00201
          CLEAR     AIP00301
          CLEAR     AIP00302
          CLEAR     AIP00303
          CLEAR     AIP00304
          CLEAR     AIP00305
          CLEAR     AIP00306
          CLEAR     AIP00307
          CLEAR     AIP00308
          CLEAR     AIP00309
          CLEAR     AIP00310
          CLEAR     AIP00311
          CLEAR     AIP00312
          CLEAR     AIP00313
          CLEAR     AIP00314
          CLEAR     AIP00315
          CLEAR     AIP00401
          CLEAR     AIP00402
          CLEAR     AIP00403
          CLEAR     AIP00404
          CLEAR     AIP00405
          CLEAR     AIP00406
          CLEAR     AIP00501
          CLEAR     AIP00601
          CLEAR     AIP00701
          CLEAR     AIP00801
          CLEAR     AIP00901
          CLEAR     AIP01001
          CLEAR     AIP01101
          CLEAR     AIP01201
.
CAIP9999  RETURN
+
.*****************************************************************************
.*                               CMRG0000          Called by: PROC0000       *
.*                     Clear all MRG variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CMRG0000  PACK      MRG00101,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00102,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00103,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00104,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00105,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00106,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00201,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00202,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00203,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00204,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00205,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00206,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00301,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00302,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00303,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00304,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00305,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00306,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00401,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00402,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00403,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00404,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00405,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00406,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00501,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00502,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00503,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00504,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00505,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00506,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00601,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00602,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00603,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00604,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00605,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00606,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00701,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00702,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00703,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00704,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00705,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00706,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00707,SP100,SP100,SP100,SP100,SP100
          PACK      MRG00708,SP100,SP100,SP100,SP100,SP100
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     MRG00101
          CLEAR     MRG00102
          CLEAR     MRG00103
          CLEAR     MRG00104
          CLEAR     MRG00105
          CLEAR     MRG00106
          CLEAR     MRG00201
          CLEAR     MRG00202
          CLEAR     MRG00203
          CLEAR     MRG00204
          CLEAR     MRG00205
          CLEAR     MRG00206
          CLEAR     MRG00301
          CLEAR     MRG00302
          CLEAR     MRG00303
          CLEAR     MRG00304
          CLEAR     MRG00305
          CLEAR     MRG00306
          CLEAR     MRG00401
          CLEAR     MRG00402
          CLEAR     MRG00403
          CLEAR     MRG00404
          CLEAR     MRG00405
          CLEAR     MRG00406
          CLEAR     MRG00501
          CLEAR     MRG00502
          CLEAR     MRG00503
          CLEAR     MRG00504
          CLEAR     MRG00505
          CLEAR     MRG00506
          CLEAR     MRG00601
          CLEAR     MRG00602
          CLEAR     MRG00603
          CLEAR     MRG00604
          CLEAR     MRG00605
          CLEAR     MRG00606
          CLEAR     MRG00701
          CLEAR     MRG00702
          CLEAR     MRG00703
          CLEAR     MRG00704
          CLEAR     MRG00705
          CLEAR     MRG00706
          CLEAR     MRG00707
          CLEAR     MRG00708
.
CMRG9999  RETURN
+
.*****************************************************************************
.*                               CZXP0000          Called by: PROC0000       *
.*                     Clear all ZXP variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CZXP0000  MOVE      SP100,ZXP00101
          MOVE      SP100,ZXP00201
          MOVE      SP100,ZXP00301
          MOVE      SP100,ZXP00302
          MOVE      SP100,ZXP00303
          MOVE      SP100,ZXP00401
          MOVE      SP100,ZXP00402
          MOVE      SP100,ZXP00403
          MOVE      SP100,ZXP00501
          MOVE      SP100,ZXP00601
          MOVE      SP100,ZXP00701
          MOVE      SP100,ZXP00702
          MOVE      SP100,ZXP00703
          MOVE      SP100,ZXP00704
          MOVE      SP100,ZXP00705
          MOVE      SP100,ZXP00706
          MOVE      SP100,ZXP00707
          MOVE      SP100,ZXP00708
          MOVE      SP100,ZXP00709
          MOVE      SP100,ZXP00710
          MOVE      SP100,ZXP00711
          MOVE      SP100,ZXP00712
          MOVE      SP100,ZXP00713
          MOVE      SP100,ZXP00714
          MOVE      SP100,ZXP00715
          MOVE      SP100,ZXP00801
          MOVE      SP100,ZXP00802
          MOVE      SP100,ZXP00803
          MOVE      SP100,ZXP00804
          MOVE      SP100,ZXP00805
          MOVE      SP100,ZXP00806
          MOVE      SP100,ZXP00807
          MOVE      SP100,ZXP00808
          MOVE      SP100,ZXP00809
          MOVE      SP100,ZXP00810
          MOVE      SP100,ZXP00811
          MOVE      SP100,ZXP00901
          MOVE      SP100,ZXP01001
          MOVE      SP100,ZXP01101
          MOVE      SP100,ZXP01201
          MOVE      SP100,ZXP01301
          MOVE      SP100,ZXP01401
          MOVE      SP100,ZXP01501
          MOVE      SP100,ZXP01601
          MOVE      SP100,ZXP01602
          MOVE      SP100,ZXP01603
          MOVE      SP100,ZXP01604
          MOVE      SP100,ZXP01605
          MOVE      SP100,ZXP01606
          MOVE      SP100,ZXP01701
          MOVE      SP100,ZXP01801
          MOVE      SP100,ZXP01802
          MOVE      SP100,ZXP01803
          MOVE      SP100,ZXP01804
          MOVE      SP100,ZXP01805
          MOVE      SP100,ZXP01806
          MOVE      SP100,ZXP01807
          MOVE      SP100,ZXP01808
          MOVE      SP100,ZXP01809
          MOVE      SP100,ZXP01810
          MOVE      SP100,ZXP01811
          MOVE      SP100,ZXP01901
          MOVE      SP100,ZXP02001
          MOVE      SP100,ZXP02101
          MOVE      SP100,ZXP05701
          MOVE      SP100,ZXP05801
          MOVE      SP100,ZXP05901
          MOVE      SP100,ZXP06001
          MOVE      SP100,ZXP06101
          MOVE      SP100,ZXP06102
          MOVE      SP100,ZXP06103
          MOVE      SP100,ZXP06201
          MOVE      SP100,ZXP06301
          PACK      ZXP06401,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06402,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06403,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06404,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06405,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06406,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06501,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06502,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06503,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06504,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06505,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06506,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06601,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06602,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06603,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06604,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06605,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06606,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06701,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06702,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06703,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06704,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06705,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06706,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06801,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06802,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06803,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06804,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06805,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06806,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06901,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06902,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06903,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06904,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06905,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP06906,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07001,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07002,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07003,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07004,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07005,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07006,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07101,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07102,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07103,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07104,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07105,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07106,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07201,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07202,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07203,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07204,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07205,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07206,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07301,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07302,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07303,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07304,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07305,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07306,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07401,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07402,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07403,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07404,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07405,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07406,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07501,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07502,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07503,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07504,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07505,SP100,SP100,SP100,SP100,SP100
          PACK      ZXP07506,SP100,SP100,SP100,SP100,SP100
          MOVE      SP100,ZXP07601
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     ZXP00101
          CLEAR     ZXP00201
          CLEAR     ZXP00301
          CLEAR     ZXP00302
          CLEAR     ZXP00303
          CLEAR     ZXP00401
          CLEAR     ZXP00402
          CLEAR     ZXP00403
          CLEAR     ZXP00501
          CLEAR     ZXP00601
          CLEAR     ZXP00701
          CLEAR     ZXP00702
          CLEAR     ZXP00703
          CLEAR     ZXP00704
          CLEAR     ZXP00705
          CLEAR     ZXP00706
          CLEAR     ZXP00707
          CLEAR     ZXP00708
          CLEAR     ZXP00709
          CLEAR     ZXP00710
          CLEAR     ZXP00711
          CLEAR     ZXP00712
          CLEAR     ZXP00713
          CLEAR     ZXP00714
          CLEAR     ZXP00715
          CLEAR     ZXP00801
          CLEAR     ZXP00802
          CLEAR     ZXP00803
          CLEAR     ZXP00804
          CLEAR     ZXP00805
          CLEAR     ZXP00806
          CLEAR     ZXP00807
          CLEAR     ZXP00808
          CLEAR     ZXP00809
          CLEAR     ZXP00810
          CLEAR     ZXP00811
          CLEAR     ZXP00901
          CLEAR     ZXP01001
          CLEAR     ZXP01101
          CLEAR     ZXP01201
          CLEAR     ZXP01301
          CLEAR     ZXP01401
          CLEAR     ZXP01501
          CLEAR     ZXP01601
          CLEAR     ZXP01602
          CLEAR     ZXP01603
          CLEAR     ZXP01604
          CLEAR     ZXP01605
          CLEAR     ZXP01606
          CLEAR     ZXP01701
          CLEAR     ZXP01801
          CLEAR     ZXP01802
          CLEAR     ZXP01803
          CLEAR     ZXP01804
          CLEAR     ZXP01805
          CLEAR     ZXP01806
          CLEAR     ZXP01807
          CLEAR     ZXP01808
          CLEAR     ZXP01809
          CLEAR     ZXP01810
          CLEAR     ZXP01811
          CLEAR     ZXP01901
          CLEAR     ZXP02001
          CLEAR     ZXP05701
          CLEAR     ZXP05801
          CLEAR     ZXP05901
          CLEAR     ZXP06001
          CLEAR     ZXP06101
          CLEAR     ZXP06102
          CLEAR     ZXP06103
          CLEAR     ZXP06201
          CLEAR     ZXP06301
          CLEAR     ZXP06401
          CLEAR     ZXP06402
          CLEAR     ZXP06403
          CLEAR     ZXP06404
          CLEAR     ZXP06405
          CLEAR     ZXP06406
          CLEAR     ZXP06501
          CLEAR     ZXP06502
          CLEAR     ZXP06503
          CLEAR     ZXP06504
          CLEAR     ZXP06505
          CLEAR     ZXP06506
          CLEAR     ZXP06601
          CLEAR     ZXP06602
          CLEAR     ZXP06603
          CLEAR     ZXP06604
          CLEAR     ZXP06605
          CLEAR     ZXP06606
          CLEAR     ZXP06701
          CLEAR     ZXP06702
          CLEAR     ZXP06703
          CLEAR     ZXP06704
          CLEAR     ZXP06705
          CLEAR     ZXP06706
          CLEAR     ZXP06801
          CLEAR     ZXP06802
          CLEAR     ZXP06803
          CLEAR     ZXP06804
          CLEAR     ZXP06805
          CLEAR     ZXP06806
          CLEAR     ZXP06901
          CLEAR     ZXP06902
          CLEAR     ZXP06903
          CLEAR     ZXP06904
          CLEAR     ZXP06905
          CLEAR     ZXP06906
          CLEAR     ZXP07001
          CLEAR     ZXP07002
          CLEAR     ZXP07003
          CLEAR     ZXP07004
          CLEAR     ZXP07005
          CLEAR     ZXP07006
          CLEAR     ZXP07101
          CLEAR     ZXP07102
          CLEAR     ZXP07103
          CLEAR     ZXP07104
          CLEAR     ZXP07105
          CLEAR     ZXP07106
          CLEAR     ZXP07201
          CLEAR     ZXP07202
          CLEAR     ZXP07203
          CLEAR     ZXP07204
          CLEAR     ZXP07205
          CLEAR     ZXP07206
          CLEAR     ZXP07301
          CLEAR     ZXP07302
          CLEAR     ZXP07303
          CLEAR     ZXP07304
          CLEAR     ZXP07305
          CLEAR     ZXP07306
          CLEAR     ZXP07401
          CLEAR     ZXP07402
          CLEAR     ZXP07403
          CLEAR     ZXP07404
          CLEAR     ZXP07405
          CLEAR     ZXP07406
          CLEAR     ZXP07501
          CLEAR     ZXP07502
          CLEAR     ZXP07503
          CLEAR     ZXP07504
          CLEAR     ZXP07505
          CLEAR     ZXP07506
          CLEAR     ZXP07601
.
CZXP9999  RETURN
+
.*****************************************************************************
.*                               CZAL0000          Called by: PROC0000       *
.*                     Clear all ZAL variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CZAL0000  MOVE      SP100,ZAL00101
          MOVE      SP100,ZAL00201
          MOVE      SP100,ZAL00202
          MOVE      SP100,ZAL00203
          MOVE      SP100,ZAL00204
          MOVE      SP100,ZAL00205
          MOVE      SP100,ZAL00206
          MOVE      SP100,ZAL00301
          MOVE      SP100,ZAL00302
          MOVE      SP100,ZAL00303
          MOVE      SP100,ZAL00304
          MOVE      SP100,ZAL00305
          MOVE      SP100,ZAL00306
          MOVE      SP100,ZAL00401
          MOVE      SP100,ZAL00402
          MOVE      SP100,ZAL00403
          MOVE      SP100,ZAL00404
          MOVE      SP100,ZAL00405
          MOVE      SP100,ZAL00406
          MOVE      SP100,ZAL00501
          MOVE      SP100,ZAL00601
          MOVE      SP100,ZAL00701
          MOVE      SP100,ZAL00801
          MOVE      SP100,ZAL00901
          MOVE      SP100,ZAL01001
          MOVE      SP100,ZAL01002
          MOVE      SP100,ZAL01003
          MOVE      SP100,ZAL01004
          MOVE      SP100,ZAL01005
          MOVE      SP100,ZAL01006
          MOVE      SP100,ZAL01007
          MOVE      SP100,ZAL01008
          MOVE      SP100,ZAL01009
          MOVE      SP100,ZAL01010
          MOVE      SP100,ZAL01011
          MOVE      SP100,ZAL01012
          MOVE      SP100,ZAL01013
          MOVE      SP100,ZAL01014
          MOVE      SP100,ZAL01015
          MOVE      SP100,ZAL01101
          MOVE      SP100,ZAL01201
          MOVE      SP100,ZAL01202
          MOVE      SP100,ZAL01203
          MOVE      SP100,ZAL01204
          MOVE      SP100,ZAL01205
          MOVE      SP100,ZAL01206
          MOVE      SP100,ZAL01301
          MOVE      SP100,ZAL01302
          MOVE      SP100,ZAL01303
          MOVE      SP100,ZAL01304
          MOVE      SP100,ZAL01305
          MOVE      SP100,ZAL01306
          PACK      ZAL01401,SP100,SP100,SP100
.         
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 2
            ADD       ONE,COUNTER
            PACK      ZAL01501[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      ZAL01502[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      ZAL01503[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      ZAL01504[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      ZAL01505[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      ZAL01506[COUNTER],SP100,SP100,SP100,SP100,SP100
          DO
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     ZAL00101
          CLEAR     ZAL00201
          CLEAR     ZAL00202
          CLEAR     ZAL00203
          CLEAR     ZAL00204
          CLEAR     ZAL00205
          CLEAR     ZAL00206
          CLEAR     ZAL00301
          CLEAR     ZAL00302
          CLEAR     ZAL00303
          CLEAR     ZAL00304
          CLEAR     ZAL00305
          CLEAR     ZAL00306
          CLEAR     ZAL00401
          CLEAR     ZAL00402
          CLEAR     ZAL00403
          CLEAR     ZAL00404
          CLEAR     ZAL00405
          CLEAR     ZAL00406
          CLEAR     ZAL00501
          CLEAR     ZAL00601
          CLEAR     ZAL00701
          CLEAR     ZAL00801
          CLEAR     ZAL00901
          CLEAR     ZAL01001
          CLEAR     ZAL01002
          CLEAR     ZAL01003
          CLEAR     ZAL01004
          CLEAR     ZAL01005
          CLEAR     ZAL01006
          CLEAR     ZAL01007
          CLEAR     ZAL01008
          CLEAR     ZAL01009
          CLEAR     ZAL01010
          CLEAR     ZAL01011
          CLEAR     ZAL01012
          CLEAR     ZAL01013
          CLEAR     ZAL01014
          CLEAR     ZAL01015
          CLEAR     ZAL01101
          CLEAR     ZAL01201
          CLEAR     ZAL01202
          CLEAR     ZAL01203
          CLEAR     ZAL01204
          CLEAR     ZAL01205
          CLEAR     ZAL01206
          CLEAR     ZAL01301
          CLEAR     ZAL01302
          CLEAR     ZAL01303
          CLEAR     ZAL01304
          CLEAR     ZAL01305
          CLEAR     ZAL01306
          CLEAR     ZAL01401
.         
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 2
            ADD       ONE,COUNTER
            CLEAR     ZAL01501[COUNTER]
            CLEAR     ZAL01502[COUNTER]
            CLEAR     ZAL01503[COUNTER]
            CLEAR     ZAL01504[COUNTER]
            CLEAR     ZAL01505[COUNTER]
            CLEAR     ZAL01506[COUNTER]
          DO
.
CZAL9999  RETURN
+
.*****************************************************************************
.*                               CRF10000          Called by: PROC0000       *
.*                     Clear all RF1 variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CRF10000  MOVE      SP100,RF100101
          MOVE      SP100,RF100102
          MOVE      SP100,RF100103
          MOVE      SP100,RF100104
          MOVE      SP100,RF100105
          MOVE      SP100,RF100106
          MOVE      SP100,RF100201
          MOVE      SP100,RF100301
          MOVE      SP100,RF100401
          MOVE      SP100,RF100501
          MOVE      SP100,RF100601
          MOVE      SP100,RF100602
          MOVE      SP100,RF100603
          MOVE      SP100,RF100604
          MOVE      SP100,RF100701
          MOVE      SP100,RF100801
          MOVE      SP100,RF100901
          MOVE      SP100,RF101001
          MOVE      SP100,RF101101
          MOVE      SP100,RF101102
          MOVE      SP100,RF101103
          MOVE      SP100,RF101104
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     RF100101
          CLEAR     RF100102
          CLEAR     RF100103
          CLEAR     RF100104
          CLEAR     RF100105
          CLEAR     RF100106
          CLEAR     RF100201
          CLEAR     RF100301
          CLEAR     RF100401
          CLEAR     RF100501
          CLEAR     RF100601
          CLEAR     RF100602
          CLEAR     RF100603
          CLEAR     RF100604
          CLEAR     RF100701
          CLEAR     RF100801
          CLEAR     RF100901
          CLEAR     RF101001
          CLEAR     RF101101
          CLEAR     RF101102
          CLEAR     RF101103
          CLEAR     RF101104
.
CRF19999  RETURN
+
.*****************************************************************************
.*                               CPRD0000          Called by: PROC0000       *
.*                     Clear all PRD variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CPRD0000  MOVE      SP100,PRD00101
          MOVE      SP100,PRD00102
          MOVE      SP100,PRD00103
          MOVE      SP100,PRD00104
          MOVE      SP100,PRD00105
          MOVE      SP100,PRD00106
          MOVE      SP100,PRD00201
          MOVE      SP100,PRD00301
          MOVE      SP100,PRD00401
          MOVE      SP100,PRD00501
          MOVE      SP100,PRD00601
          MOVE      SP100,PRD00701
          MOVE      SP100,PRD00702
          MOVE      SP100,PRD00801
          MOVE      SP100,PRD00901
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     PRD00101
          CLEAR     PRD00102
          CLEAR     PRD00103
          CLEAR     PRD00104
          CLEAR     PRD00105
          CLEAR     PRD00106
          CLEAR     PRD00201
          CLEAR     PRD00301
          CLEAR     PRD00401
          CLEAR     PRD00501
          CLEAR     PRD00601
          CLEAR     PRD00701
          CLEAR     PRD00702
          CLEAR     PRD00801
          CLEAR     PRD00901
.
CPRD9999  RETURN
+
.*****************************************************************************
.*                               CPR10000          Called by: PROC0000       *
.*                     Clear all PR1 variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CPR10000  MOVE      SP100,PR100101
          MOVE      SP100,PR100201
          MOVE      SP100,PR100301
          MOVE      SP100,PR100302
          MOVE      SP100,PR100303
          MOVE      SP100,PR100304
          MOVE      SP100,PR100305
          MOVE      SP100,PR100306
          MOVE      SP100,PR100401
          MOVE      SP100,PR100501
          MOVE      SP100,PR100601
          MOVE      SP100,PR100701
          MOVE      SP100,PR100801
          MOVE      SP100,PR100802
          MOVE      SP100,PR100803
          MOVE      SP100,PR100804
          MOVE      SP100,PR100805
          MOVE      SP100,PR100806
          MOVE      SP100,PR100807
          MOVE      SP100,PR100808
          MOVE      SP100,PR100809
          MOVE      SP100,PR100810
          MOVE      SP100,PR100811
          MOVE      SP100,PR100812
          MOVE      SP100,PR100813
          MOVE      SP100,PR100814
          MOVE      SP100,PR100815
          MOVE      SP100,PR100901
          MOVE      SP100,PR101001
          MOVE      SP100,PR101101
          MOVE      SP100,PR101102
          MOVE      SP100,PR101103
          MOVE      SP100,PR101104
          MOVE      SP100,PR101105
          MOVE      SP100,PR101106
          MOVE      SP100,PR101107
          MOVE      SP100,PR101108
          MOVE      SP100,PR101109
          MOVE      SP100,PR101110
          MOVE      SP100,PR101111
          MOVE      SP100,PR101112
          MOVE      SP100,PR101113
          MOVE      SP100,PR101114
          MOVE      SP100,PR101115
          MOVE      SP100,PR101201
          MOVE      SP100,PR101202
          MOVE      SP100,PR101203
          MOVE      SP100,PR101204
          MOVE      SP100,PR101205
          MOVE      SP100,PR101206
          MOVE      SP100,PR101207
          MOVE      SP100,PR101208
          MOVE      SP100,PR101209
          MOVE      SP100,PR101210
          MOVE      SP100,PR101211
          MOVE      SP100,PR101212
          MOVE      SP100,PR101213
          MOVE      SP100,PR101214
          MOVE      SP100,PR101215
          MOVE      SP100,PR101301
          MOVE      SP100,PR101302
          MOVE      SP100,PR101303
          MOVE      SP100,PR101304
          MOVE      SP100,PR101305
          MOVE      SP100,PR101306
          MOVE      SP100,PR101401
          MOVE      SP100,PR101501
          MOVE      SP100,PR101502
          MOVE      SP100,PR101503
          MOVE      SP100,PR101504
          MOVE      SP100,PR101505
          MOVE      SP100,PR101506
          MOVE      SP100,PR101601
          MOVE      SP100,PR101602
          MOVE      SP100,PR101603
          MOVE      SP100,PR101604
          MOVE      SP100,PR101605
          MOVE      SP100,PR101606
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     PR100101
          CLEAR     PR100201
          CLEAR     PR100301
          CLEAR     PR100302
          CLEAR     PR100303
          CLEAR     PR100304
          CLEAR     PR100305
          CLEAR     PR100306
          CLEAR     PR100401
          CLEAR     PR100501
          CLEAR     PR100601
          CLEAR     PR100701
          CLEAR     PR100801
          CLEAR     PR100802
          CLEAR     PR100803
          CLEAR     PR100804
          CLEAR     PR100805
          CLEAR     PR100806
          CLEAR     PR100807
          CLEAR     PR100808
          CLEAR     PR100809
          CLEAR     PR100810
          CLEAR     PR100811
          CLEAR     PR100812
          CLEAR     PR100813
          CLEAR     PR100814
          CLEAR     PR100815
          CLEAR     PR100901
          CLEAR     PR101001
          CLEAR     PR101101
          CLEAR     PR101102
          CLEAR     PR101103
          CLEAR     PR101104
          CLEAR     PR101105
          CLEAR     PR101106
          CLEAR     PR101107
          CLEAR     PR101108
          CLEAR     PR101109
          CLEAR     PR101110
          CLEAR     PR101111
          CLEAR     PR101112
          CLEAR     PR101113
          CLEAR     PR101114
          CLEAR     PR101115
          CLEAR     PR101201
          CLEAR     PR101202
          CLEAR     PR101203
          CLEAR     PR101204
          CLEAR     PR101205
          CLEAR     PR101206
          CLEAR     PR101207
          CLEAR     PR101208
          CLEAR     PR101209
          CLEAR     PR101210
          CLEAR     PR101211
          CLEAR     PR101212
          CLEAR     PR101213
          CLEAR     PR101214
          CLEAR     PR101215
          CLEAR     PR101301
          CLEAR     PR101302
          CLEAR     PR101303
          CLEAR     PR101304
          CLEAR     PR101305
          CLEAR     PR101306
          CLEAR     PR101401
          CLEAR     PR101501
          CLEAR     PR101502
          CLEAR     PR101503
          CLEAR     PR101504
          CLEAR     PR101505
          CLEAR     PR101506
          CLEAR     PR101601
          CLEAR     PR101602
          CLEAR     PR101603
          CLEAR     PR101604
          CLEAR     PR101605
          CLEAR     PR101606
.
CPR19999  RETURN
+
.*****************************************************************************
.*                               CROL0000          Called by: PROC0000       *
.*                     Clear all ROL variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CROL0000  MOVE      SP100,ROL00101
          MOVE      SP100,ROL00102
          MOVE      SP100,ROL00103
          MOVE      SP100,ROL00104
          MOVE      SP100,ROL00201
          MOVE      SP100,ROL00301
          MOVE      SP100,ROL00302
          MOVE      SP100,ROL00303
          MOVE      SP100,ROL00304
          MOVE      SP100,ROL00305
          MOVE      SP100,ROL00306
          MOVE      SP100,ROL00401
          MOVE      SP100,ROL00402
          MOVE      SP100,ROL00403
          MOVE      SP100,ROL00404
          MOVE      SP100,ROL00405
          MOVE      SP100,ROL00406
          MOVE      SP100,ROL00407
          MOVE      SP100,ROL00408
          MOVE      SP100,ROL00409
          MOVE      SP100,ROL00410
          MOVE      SP100,ROL00411
          MOVE      SP100,ROL00412
          MOVE      SP100,ROL00413
          MOVE      SP100,ROL00414
          MOVE      SP100,ROL00415
          MOVE      SP100,ROL00501
          MOVE      SP100,ROL00601
          MOVE      SP100,ROL00701
          MOVE      SP100,ROL00702
          MOVE      SP100,ROL00703
          MOVE      SP100,ROL00704
          MOVE      SP100,ROL00705
          MOVE      SP100,ROL00706
          MOVE      SP100,ROL00801
          MOVE      SP100,ROL00802
          MOVE      SP100,ROL00803
          MOVE      SP100,ROL00804
          MOVE      SP100,ROL00805
          MOVE      SP100,ROL00806
          MOVE      SP100,ROL00901
          MOVE      SP100,ROL00902
          MOVE      SP100,ROL00903
          MOVE      SP100,ROL00904
          MOVE      SP100,ROL00905
          MOVE      SP100,ROL00906
          MOVE      SP100,ROL01001
          MOVE      SP100,ROL01002
          MOVE      SP100,ROL01003
          MOVE      SP100,ROL01004
          MOVE      SP100,ROL01005
          MOVE      SP100,ROL01006
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     ROL00101
          CLEAR     ROL00102
          CLEAR     ROL00103
          CLEAR     ROL00104
          CLEAR     ROL00201
          CLEAR     ROL00301
          CLEAR     ROL00302
          CLEAR     ROL00303
          CLEAR     ROL00304
          CLEAR     ROL00305
          CLEAR     ROL00306
          CLEAR     ROL00401
          CLEAR     ROL00402
          CLEAR     ROL00403
          CLEAR     ROL00404
          CLEAR     ROL00405
          CLEAR     ROL00406
          CLEAR     ROL00407
          CLEAR     ROL00408
          CLEAR     ROL00409
          CLEAR     ROL00410
          CLEAR     ROL00411
          CLEAR     ROL00412
          CLEAR     ROL00413
          CLEAR     ROL00414
          CLEAR     ROL00415
          CLEAR     ROL00501
          CLEAR     ROL00601
          CLEAR     ROL00701
          CLEAR     ROL00702
          CLEAR     ROL00703
          CLEAR     ROL00704
          CLEAR     ROL00705
          CLEAR     ROL00706
          CLEAR     ROL00801
          CLEAR     ROL00802
          CLEAR     ROL00803
          CLEAR     ROL00804
          CLEAR     ROL00805
          CLEAR     ROL00806
          CLEAR     ROL00901
          CLEAR     ROL00902
          CLEAR     ROL00903
          CLEAR     ROL00904
          CLEAR     ROL00905
          CLEAR     ROL00906
          CLEAR     ROL01001
          CLEAR     ROL01002
          CLEAR     ROL01003
          CLEAR     ROL01004
          CLEAR     ROL01005
          CLEAR     ROL01006
.
CROL9999  RETURN
+
.*****************************************************************************
.*                               CZXV0000          Called by: PROC0000       *
.*                     Clear all ZXV variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CZXV0000  MOVE      SP100,ZXV00101
          MOVE      SP100,ZXV00201
          MOVE      SP100,ZXV00301
          MOVE      SP100,ZXV00401
          MOVE      SP100,ZXV00501
          MOVE      SP100,ZXV00601
          MOVE      SP100,ZXV00602
          MOVE      SP100,ZXV00603
          MOVE      SP100,ZXV00604
          MOVE      SP100,ZXV00605
          MOVE      SP100,ZXV00606
          MOVE      SP100,ZXV00701
          MOVE      SP100,ZXV00702
          MOVE      SP100,ZXV00703
          MOVE      SP100,ZXV00704
          MOVE      SP100,ZXV00705
          MOVE      SP100,ZXV00706
          MOVE      SP100,ZXV00801
          MOVE      SP100,ZXV00901
          MOVE      SP100,ZXV01001
          MOVE      SP100,ZXV01101
          MOVE      SP100,ZXV01201
          MOVE      SP100,ZXV01301
          MOVE      SP100,ZXV01401
          MOVE      SP100,ZXV01501
          MOVE      SP100,ZXV01502
          MOVE      SP100,ZXV01503
          MOVE      SP100,ZXV01504
          MOVE      SP100,ZXV01505
          MOVE      SP100,ZXV01506
          MOVE      SP100,ZXV01601
          MOVE      SP100,ZXV01701
          MOVE      SP100,ZXV01801
          MOVE      SP100,ZXV01901
          MOVE      SP100,ZXV02001
          MOVE      SP100,ZXV02101
          MOVE      SP100,ZXV02201
          MOVE      SP100,ZXV02301
          MOVE      SP100,ZXV02401
          MOVE      SP100,ZXV02501
          MOVE      SP100,ZXV02601
          MOVE      SP100,ZXV02601
          MOVE      SP100,ZXV02801
          MOVE      SP100,ZXV02901
          MOVE      SP100,ZXV03001
          MOVE      SP100,ZXV03101
          MOVE      SP100,ZXV03201
          MOVE      SP100,ZXV03301
          MOVE      SP100,ZXV03401
          MOVE      SP100,ZXV03402
          MOVE      SP100,ZXV03403
          MOVE      SP100,ZXV03404
          MOVE      SP100,ZXV03405
          MOVE      SP100,ZXV03406
          MOVE      SP100,ZXV03501
          MOVE      SP100,ZXV03502
          MOVE      SP100,ZXV03503
          MOVE      SP100,ZXV03504
          MOVE      SP100,ZXV03505
          MOVE      SP100,ZXV03506
          MOVE      SP100,ZXV03601
          MOVE      SP100,ZXV03701
          MOVE      SP100,ZXV03702
          MOVE      SP100,ZXV03703
          MOVE      SP100,ZXV03704
          MOVE      SP100,ZXV03705
          MOVE      SP100,ZXV03706
          MOVE      SP100,ZXV03801
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 3
            ADD       ONE,COUNTER
            MOVE      SP100,ZXV03901[COUNTER]
            MOVE      SP100,ZXV03902[COUNTER]
            MOVE      SP100,ZXV03903[COUNTER]
            MOVE      SP100,ZXV03904[COUNTER]
            MOVE      SP100,ZXV03905[COUNTER]
            MOVE      SP100,ZXV03906[COUNTER]
          DO
.
          MOVE      SP100,ZXV04001
          MOVE      SP100,ZXV04002
          MOVE      SP100,ZXV04003
          MOVE      SP100,ZXV04004
          MOVE      SP100,ZXV04005
          MOVE      SP100,ZXV04006
          MOVE      SP100,ZXV04101
          MOVE      SP100,ZXV04201
          MOVE      SP100,ZXV04202
          MOVE      SP100,ZXV04203
          MOVE      SP100,ZXV04204
          MOVE      SP100,ZXV04205
          MOVE      SP100,ZXV04206
          MOVE      SP100,ZXV04301
          MOVE      SP100,ZXV04302
          MOVE      SP100,ZXV04303
          MOVE      SP100,ZXV04304
          MOVE      SP100,ZXV04305
          MOVE      SP100,ZXV04306
          MOVE      SP100,ZXV04401
          MOVE      SP100,ZXV04501
          MOVE      SP100,ZXV04601
          MOVE      SP100,ZXV04701
          MOVE      SP100,ZXV04702
          MOVE      SP100,ZXV04703
          MOVE      SP100,ZXV04704
          MOVE      SP100,ZXV04705
          MOVE      SP100,ZXV04706
          PACK      ZXV04801,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100
          MOVE      SP100,ZXV04901
          MOVE      SP100,ZXV04902
          MOVE      SP100,ZXV04903
          MOVE      SP100,ZXV04904
          MOVE      SP100,ZXV04905
          MOVE      SP100,ZXV04906
          MOVE      SP100,ZXV05001
          MOVE      SP100,ZXV05002
          MOVE      SP100,ZXV05003
          MOVE      SP100,ZXV05004
          MOVE      SP100,ZXV05005
          MOVE      SP100,ZXV05006
          MOVE      SP100,ZXV05101
          MOVE      SP100,ZXV05102
          MOVE      SP100,ZXV05103
          MOVE      SP100,ZXV05104
          MOVE      SP100,ZXV05105
          MOVE      SP100,ZXV05106
          MOVE      SP100,ZXV05201
          MOVE      SP100,ZXV05301
          MOVE      SP100,ZXV05302
          MOVE      SP100,ZXV05303
          MOVE      SP100,ZXV05304
          MOVE      SP100,ZXV05305
          MOVE      SP100,ZXV05306
          MOVE      SP100,ZXV05401
          MOVE      SP100,ZXV05501
          MOVE      SP100,ZXV05502
          MOVE      SP100,ZXV05503
          MOVE      SP100,ZXV05504
          MOVE      SP100,ZXV05505
          MOVE      SP100,ZXV05506
          MOVE      SP100,ZXV05601
          MOVE      SP100,ZXV05602
          MOVE      SP100,ZXV05603
          MOVE      SP100,ZXV05604
          MOVE      SP100,ZXV05605
          MOVE      SP100,ZXV05606
          MOVE      SP100,ZXV05701
          MOVE      SP100,ZXV05702
          MOVE      SP100,ZXV05703
          MOVE      SP100,ZXV05704
          MOVE      SP100,ZXV05705
          MOVE      SP100,ZXV05706
          MOVE      SP100,ZXV05801
          MOVE      SP100,ZXV05901
          PACK      ZXV06001,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100
          MOVE      SP100,ZXV06101
          MOVE      SP100,ZXV06201
          MOVE      SP100,ZXV06202
          MOVE      SP100,ZXV06203
          MOVE      SP100,ZXV06204
          MOVE      SP100,ZXV06205
          MOVE      SP100,ZXV06206
          MOVE      SP100,ZXV06207
          MOVE      SP100,ZXV06208
          MOVE      SP100,ZXV06209
          MOVE      SP100,ZXV06210
          MOVE      SP100,ZXV06211
          MOVE      SP100,ZXV06212
          MOVE      SP100,ZXV06213
          MOVE      SP100,ZXV06214
          MOVE      SP100,ZXV06215
          MOVE      SP100,ZXV06301
          MOVE      SP100,ZXV06401
          MOVE      SP100,ZXV06402
          MOVE      SP100,ZXV06403
          MOVE      SP100,ZXV06404
          MOVE      SP100,ZXV06405
          MOVE      SP100,ZXV06406
          MOVE      SP100,ZXV06501
          MOVE      SP100,ZXV06601
          MOVE      SP100,ZXV06602
          MOVE      SP100,ZXV06603
          MOVE      SP100,ZXV06604
          MOVE      SP100,ZXV06605
          MOVE      SP100,ZXV06606
          MOVE      SP100,ZXV06607
          MOVE      SP100,ZXV06608
          MOVE      SP100,ZXV06609
          MOVE      SP100,ZXV06610
          MOVE      SP100,ZXV06611
          MOVE      SP100,ZXV06612
          MOVE      SP100,ZXV06613
          MOVE      SP100,ZXV06614
          MOVE      SP100,ZXV06615
          MOVE      SP100,ZXV06701
          MOVE      SP100,ZXV06801
          MOVE      SP100,ZXV06802
          MOVE      SP100,ZXV06803
          MOVE      SP100,ZXV06804
          MOVE      SP100,ZXV06805
          MOVE      SP100,ZXV06806
          MOVE      SP100,ZXV06807
          MOVE      SP100,ZXV06808
          MOVE      SP100,ZXV06809
          MOVE      SP100,ZXV06810
          MOVE      SP100,ZXV06811
          MOVE      SP100,ZXV06812
          MOVE      SP100,ZXV06813
          MOVE      SP100,ZXV06814
          MOVE      SP100,ZXV06815
          MOVE      SP100,ZXV06901
          MOVE      SP100,ZXV07001
          MOVE      SP100,ZXV07002
          MOVE      SP100,ZXV07003
          MOVE      SP100,ZXV07004
          MOVE      SP100,ZXV07005
          MOVE      SP100,ZXV07006
          MOVE      SP100,ZXV07007
          MOVE      SP100,ZXV07008
          MOVE      SP100,ZXV07009
          MOVE      SP100,ZXV07010
          MOVE      SP100,ZXV07011
          MOVE      SP100,ZXV07012
          MOVE      SP100,ZXV07013
          MOVE      SP100,ZXV07014
          MOVE      SP100,ZXV07015
          MOVE      SP100,ZXV07101
          MOVE      SP100,ZXV07201
          MOVE      SP100,ZXV07301
          MOVE      SP100,ZXV07302
          MOVE      SP100,ZXV07303
          MOVE      SP100,ZXV07304
          MOVE      SP100,ZXV07305
          MOVE      SP100,ZXV07306
          MOVE      SP100,ZXV07401
          MOVE      SP100,ZXV07402
          MOVE      SP100,ZXV07403
          MOVE      SP100,ZXV07404
          MOVE      SP100,ZXV07405
          MOVE      SP100,ZXV07406
          MOVE      SP100,ZXV07407
          MOVE      SP100,ZXV07408
          MOVE      SP100,ZXV07409
          MOVE      SP100,ZXV07410
          MOVE      SP100,ZXV07411
          MOVE      SP100,ZXV07412
          MOVE      SP100,ZXV07413
          MOVE      SP100,ZXV07414
          MOVE      SP100,ZXV07415
          MOVE      SP100,ZXV07501
          MOVE      SP100,ZXV07601
          MOVE      SP100,ZXV07602
          MOVE      SP100,ZXV07603
          MOVE      SP100,ZXV07604
          MOVE      SP100,ZXV07605
          MOVE      SP100,ZXV07606
          MOVE      SP100,ZXV07701
          MOVE      SP100,ZXV07702
          MOVE      SP100,ZXV07703
          MOVE      SP100,ZXV07704
          MOVE      SP100,ZXV07705
          MOVE      SP100,ZXV07706
          MOVE      SP100,ZXV07801
          MOVE      SP100,ZXV07901
          PACK      ZXV08001,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100
          MOVE      SP100,ZXV08101
          MOVE      SP100,ZXV08102
          MOVE      SP100,ZXV08103
          MOVE      SP100,ZXV08104
          MOVE      SP100,ZXV08105
          MOVE      SP100,ZXV08106
          MOVE      SP100,ZXV08201
          MOVE      SP100,ZXV08301
          MOVE      SP100,ZXV08302
          MOVE      SP100,ZXV08303
          MOVE      SP100,ZXV08304
          MOVE      SP100,ZXV08305
          MOVE      SP100,ZXV08306
          MOVE      SP100,ZXV08401
          MOVE      SP100,ZXV08402
          MOVE      SP100,ZXV08403
          MOVE      SP100,ZXV08404
          MOVE      SP100,ZXV08405
          MOVE      SP100,ZXV08406
          MOVE      SP100,ZXV08501
          MOVE      SP100,ZXV08502
          MOVE      SP100,ZXV08503
          MOVE      SP100,ZXV08504
          MOVE      SP100,ZXV08505
          MOVE      SP100,ZXV08506
          MOVE      SP100,ZXV08601
          MOVE      SP100,ZXV08701
          MOVE      SP100,ZXV08702
          MOVE      SP100,ZXV08703
          MOVE      SP100,ZXV08704
          MOVE      SP100,ZXV08705
          MOVE      SP100,ZXV08706
          MOVE      SP100,ZXV08801
          MOVE      SP100,ZXV08802
          MOVE      SP100,ZXV08803
          MOVE      SP100,ZXV08804
          MOVE      SP100,ZXV08805
          MOVE      SP100,ZXV08806
          MOVE      SP100,ZXV08901
          MOVE      SP100,ZXV09001
          MOVE      SP100,ZXV09002
          MOVE      SP100,ZXV09003
          MOVE      SP100,ZXV09004
          MOVE      SP100,ZXV09005
          MOVE      SP100,ZXV09006
          PACK      ZXV09101,SP100,SP100,SP100
          MOVE      SP100,ZXV09201
          PACK      ZXV09301,SP100,SP100,SP100,SP100,SP100,SP100
          PACK      ZXV09401,SP100,SP100,SP100
          MOVE      SP100,ZXV09501
          PACK      ZXV09601,SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                           SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                           SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                           SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                           SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100
          MOVE      SP100,ZXV09701
          MOVE      SP100,ZXV09801
          MOVE      SP100,ZXV09802
          MOVE      SP100,ZXV09803
          MOVE      SP100,ZXV09804
          MOVE      SP100,ZXV09805
          MOVE      SP100,ZXV09806
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 5
            ADD       ONE,COUNTER
            MOVE      SP100,ZXV09901[COUNTER]
            MOVE      SP100,ZXV09902[COUNTER]
            MOVE      SP100,ZXV09903[COUNTER]
            MOVE      SP100,ZXV09904[COUNTER]
            MOVE      SP100,ZXV09905[COUNTER]
            MOVE      SP100,ZXV09906[COUNTER]
          DO
.
          MOVE      SP100,ZXV10001
          MOVE      SP100,ZXV10002
          MOVE      SP100,ZXV10003
          MOVE      SP100,ZXV10004
          MOVE      SP100,ZXV10005
          MOVE      SP100,ZXV10006
          MOVE      SP100,ZXV10101
          MOVE      SP100,ZXV10201
          MOVE      SP100,ZXV10301
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     ZXV00101
          CLEAR     ZXV00201
          CLEAR     ZXV00301
          CLEAR     ZXV00401
          CLEAR     ZXV00501
          CLEAR     ZXV00601
          CLEAR     ZXV00602
          CLEAR     ZXV00603
          CLEAR     ZXV00604
          CLEAR     ZXV00605
          CLEAR     ZXV00606
          CLEAR     ZXV00701
          CLEAR     ZXV00702
          CLEAR     ZXV00703
          CLEAR     ZXV00704
          CLEAR     ZXV00705
          CLEAR     ZXV00706
          CLEAR     ZXV00801
          CLEAR     ZXV00901
          CLEAR     ZXV01001
          CLEAR     ZXV01101
          CLEAR     ZXV01201
          CLEAR     ZXV01301
          CLEAR     ZXV01401
          CLEAR     ZXV01501
          CLEAR     ZXV01502
          CLEAR     ZXV01503
          CLEAR     ZXV01504
          CLEAR     ZXV01505
          CLEAR     ZXV01506
          CLEAR     ZXV01601
          CLEAR     ZXV01701
          CLEAR     ZXV01801
          CLEAR     ZXV01901
          CLEAR     ZXV02001
          CLEAR     ZXV02101
          CLEAR     ZXV02201
          CLEAR     ZXV02301
          CLEAR     ZXV02401
          CLEAR     ZXV02501
          CLEAR     ZXV02601
          CLEAR     ZXV02601
          CLEAR     ZXV02801
          CLEAR     ZXV02901
          CLEAR     ZXV03001
          CLEAR     ZXV03101
          CLEAR     ZXV03201
          CLEAR     ZXV03301
          CLEAR     ZXV03401
          CLEAR     ZXV03402
          CLEAR     ZXV03403
          CLEAR     ZXV03404
          CLEAR     ZXV03405
          CLEAR     ZXV03406
          CLEAR     ZXV03501
          CLEAR     ZXV03502
          CLEAR     ZXV03503
          CLEAR     ZXV03504
          CLEAR     ZXV03505
          CLEAR     ZXV03506
          CLEAR     ZXV03601
          CLEAR     ZXV03701
          CLEAR     ZXV03702
          CLEAR     ZXV03703
          CLEAR     ZXV03704
          CLEAR     ZXV03705
          CLEAR     ZXV03706
          CLEAR     ZXV03801
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 3
            ADD       ONE,COUNTER
            CLEAR     ZXV03901[COUNTER]
            CLEAR     ZXV03902[COUNTER]
            CLEAR     ZXV03903[COUNTER]
            CLEAR     ZXV03904[COUNTER]
            CLEAR     ZXV03905[COUNTER]
            CLEAR     ZXV03906[COUNTER]
          DO
.
          CLEAR     ZXV04001
          CLEAR     ZXV04002
          CLEAR     ZXV04003
          CLEAR     ZXV04004
          CLEAR     ZXV04005
          CLEAR     ZXV04006
          CLEAR     ZXV04101
          CLEAR     ZXV04201
          CLEAR     ZXV04202
          CLEAR     ZXV04203
          CLEAR     ZXV04204
          CLEAR     ZXV04205
          CLEAR     ZXV04206
          CLEAR     ZXV04301
          CLEAR     ZXV04302
          CLEAR     ZXV04303
          CLEAR     ZXV04304
          CLEAR     ZXV04305
          CLEAR     ZXV04306
          CLEAR     ZXV04401
          CLEAR     ZXV04501
          CLEAR     ZXV04601
          CLEAR     ZXV04701
          CLEAR     ZXV04702
          CLEAR     ZXV04703
          CLEAR     ZXV04704
          CLEAR     ZXV04705
          CLEAR     ZXV04706
          CLEAR     ZXV04801
          CLEAR     ZXV04901
          CLEAR     ZXV04902
          CLEAR     ZXV04903
          CLEAR     ZXV04904
          CLEAR     ZXV04905
          CLEAR     ZXV04906
          CLEAR     ZXV05001
          CLEAR     ZXV05002
          CLEAR     ZXV05003
          CLEAR     ZXV05004
          CLEAR     ZXV05005
          CLEAR     ZXV05006
          CLEAR     ZXV05101
          CLEAR     ZXV05102
          CLEAR     ZXV05103
          CLEAR     ZXV05104
          CLEAR     ZXV05105
          CLEAR     ZXV05106
          CLEAR     ZXV05201
          CLEAR     ZXV05301
          CLEAR     ZXV05302
          CLEAR     ZXV05303
          CLEAR     ZXV05304
          CLEAR     ZXV05305
          CLEAR     ZXV05306
          CLEAR     ZXV05401
          CLEAR     ZXV05501
          CLEAR     ZXV05502
          CLEAR     ZXV05503
          CLEAR     ZXV05504
          CLEAR     ZXV05505
          CLEAR     ZXV05506
          CLEAR     ZXV05601
          CLEAR     ZXV05602
          CLEAR     ZXV05603
          CLEAR     ZXV05604
          CLEAR     ZXV05605
          CLEAR     ZXV05606
          CLEAR     ZXV05701
          CLEAR     ZXV05702
          CLEAR     ZXV05703
          CLEAR     ZXV05704
          CLEAR     ZXV05705
          CLEAR     ZXV05706
          CLEAR     ZXV05801
          CLEAR     ZXV05901
          CLEAR     ZXV06001
          CLEAR     ZXV06101
          CLEAR     ZXV06201
          CLEAR     ZXV06202
          CLEAR     ZXV06203
          CLEAR     ZXV06204
          CLEAR     ZXV06205
          CLEAR     ZXV06206
          CLEAR     ZXV06207
          CLEAR     ZXV06208
          CLEAR     ZXV06209
          CLEAR     ZXV06210
          CLEAR     ZXV06211
          CLEAR     ZXV06212
          CLEAR     ZXV06213
          CLEAR     ZXV06214
          CLEAR     ZXV06215
          CLEAR     ZXV06301
          CLEAR     ZXV06401
          CLEAR     ZXV06402
          CLEAR     ZXV06403
          CLEAR     ZXV06404
          CLEAR     ZXV06405
          CLEAR     ZXV06406
          CLEAR     ZXV06501
          CLEAR     ZXV06601
          CLEAR     ZXV06602
          CLEAR     ZXV06603
          CLEAR     ZXV06604
          CLEAR     ZXV06605
          CLEAR     ZXV06606
          CLEAR     ZXV06607
          CLEAR     ZXV06608
          CLEAR     ZXV06609
          CLEAR     ZXV06610
          CLEAR     ZXV06611
          CLEAR     ZXV06612
          CLEAR     ZXV06613
          CLEAR     ZXV06614
          CLEAR     ZXV06615
          CLEAR     ZXV06701
          CLEAR     ZXV06801
          CLEAR     ZXV06802
          CLEAR     ZXV06803
          CLEAR     ZXV06804
          CLEAR     ZXV06805
          CLEAR     ZXV06806
          CLEAR     ZXV06807
          CLEAR     ZXV06808
          CLEAR     ZXV06809
          CLEAR     ZXV06810
          CLEAR     ZXV06811
          CLEAR     ZXV06812
          CLEAR     ZXV06813
          CLEAR     ZXV06814
          CLEAR     ZXV06815
          CLEAR     ZXV06901
          CLEAR     ZXV07001
          CLEAR     ZXV07002
          CLEAR     ZXV07003
          CLEAR     ZXV07004
          CLEAR     ZXV07005
          CLEAR     ZXV07006
          CLEAR     ZXV07007
          CLEAR     ZXV07008
          CLEAR     ZXV07009
          CLEAR     ZXV07010
          CLEAR     ZXV07011
          CLEAR     ZXV07012
          CLEAR     ZXV07013
          CLEAR     ZXV07014
          CLEAR     ZXV07015
          CLEAR     ZXV07101
          CLEAR     ZXV07201
          CLEAR     ZXV07301
          CLEAR     ZXV07302
          CLEAR     ZXV07303
          CLEAR     ZXV07304
          CLEAR     ZXV07305
          CLEAR     ZXV07306
          CLEAR     ZXV07401
          CLEAR     ZXV07402
          CLEAR     ZXV07403
          CLEAR     ZXV07404
          CLEAR     ZXV07405
          CLEAR     ZXV07406
          CLEAR     ZXV07407
          CLEAR     ZXV07408
          CLEAR     ZXV07409
          CLEAR     ZXV07410
          CLEAR     ZXV07411
          CLEAR     ZXV07412
          CLEAR     ZXV07413
          CLEAR     ZXV07414
          CLEAR     ZXV07415
          CLEAR     ZXV07501
          CLEAR     ZXV07601
          CLEAR     ZXV07602
          CLEAR     ZXV07603
          CLEAR     ZXV07604
          CLEAR     ZXV07605
          CLEAR     ZXV07606
          CLEAR     ZXV07701
          CLEAR     ZXV07702
          CLEAR     ZXV07703
          CLEAR     ZXV07704
          CLEAR     ZXV07705
          CLEAR     ZXV07706
          CLEAR     ZXV07801
          CLEAR     ZXV07901
          CLEAR     ZXV08001
          CLEAR     ZXV08101
          CLEAR     ZXV08102
          CLEAR     ZXV08103
          CLEAR     ZXV08104
          CLEAR     ZXV08105
          CLEAR     ZXV08106
          CLEAR     ZXV08201
          CLEAR     ZXV08301
          CLEAR     ZXV08302
          CLEAR     ZXV08303
          CLEAR     ZXV08304
          CLEAR     ZXV08305
          CLEAR     ZXV08306
          CLEAR     ZXV08401
          CLEAR     ZXV08402
          CLEAR     ZXV08403
          CLEAR     ZXV08404
          CLEAR     ZXV08405
          CLEAR     ZXV08406
          CLEAR     ZXV08501
          CLEAR     ZXV08502
          CLEAR     ZXV08503
          CLEAR     ZXV08504
          CLEAR     ZXV08505
          CLEAR     ZXV08506
          CLEAR     ZXV08601
          CLEAR     ZXV08701
          CLEAR     ZXV08702
          CLEAR     ZXV08703
          CLEAR     ZXV08704
          CLEAR     ZXV08705
          CLEAR     ZXV08706
          CLEAR     ZXV08801
          CLEAR     ZXV08802
          CLEAR     ZXV08803
          CLEAR     ZXV08804
          CLEAR     ZXV08805
          CLEAR     ZXV08806
          CLEAR     ZXV08901
          CLEAR     ZXV09001
          CLEAR     ZXV09002
          CLEAR     ZXV09003
          CLEAR     ZXV09004
          CLEAR     ZXV09005
          CLEAR     ZXV09006
          CLEAR     ZXV09101
          CLEAR     ZXV09201
          CLEAR     ZXV09301
          CLEAR     ZXV09401
          CLEAR     ZXV09501
          CLEAR     ZXV09601
          CLEAR     ZXV09701
          CLEAR     ZXV09801
          CLEAR     ZXV09802
          CLEAR     ZXV09803
          CLEAR     ZXV09804
          CLEAR     ZXV09805
          CLEAR     ZXV09806
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 5
            ADD       ONE,COUNTER
            CLEAR     ZXV09901[COUNTER]
            CLEAR     ZXV09902[COUNTER]
            CLEAR     ZXV09903[COUNTER]
            CLEAR     ZXV09904[COUNTER]
            CLEAR     ZXV09905[COUNTER]
            CLEAR     ZXV09906[COUNTER]
          DO
.
          CLEAR     ZXV10001
          CLEAR     ZXV10002
          CLEAR     ZXV10003
          CLEAR     ZXV10004
          CLEAR     ZXV10005
          CLEAR     ZXV10006
          CLEAR     ZXV10101
          CLEAR     ZXV10201
          CLEAR     ZXV10301
.
CZXV9999  RETURN
+
.*****************************************************************************
.*                               CMFI0000          Called by: PROC0000       *
.*                     Clear all MFI variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CMFI0000  MOVE      SP100,MFI00101
          MOVE      SP100,MFI00102
          MOVE      SP100,MFI00103
          MOVE      SP100,MFI00104
          MOVE      SP100,MFI00105
          MOVE      SP100,MFI00106
          PACK      MFI00201,SP100,SP100
          MOVE      SP100,MFI00202
          MOVE      SP100,MFI00203
          MOVE      SP100,MFI00301
          MOVE      SP100,MFI00401
          MOVE      SP100,MFI00501
          MOVE      SP100,MFI00601
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     MFI00101
          CLEAR     MFI00102
          CLEAR     MFI00103
          CLEAR     MFI00104
          CLEAR     MFI00105
          CLEAR     MFI00106
          CLEAR     MFI00201
          CLEAR     MFI00202
          CLEAR     MFI00203
          CLEAR     MFI00301
          CLEAR     MFI00401
          CLEAR     MFI00501
          CLEAR     MFI00601
.
CMFI9999  RETURN
+
.*****************************************************************************
.*                               CMFE0000          Called by: PROC0000       *
.*                     Clear all MFE variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CMFE0000  MOVE      SP100,MFE00101
          MOVE      SP100,MFE00201
          MOVE      SP100,MFE00301
          MOVE      SP100,MFE00401
          MOVE      SP100,MFE00402
          MOVE      SP100,MFE00403
          MOVE      SP100,MFE00404
          MOVE      SP100,MFE00405
          MOVE      SP100,MFE00406
          MOVE      SP100,MFE00501
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     MFE00101
          CLEAR     MFE00201
          CLEAR     MFE00301
          CLEAR     MFE00401
          CLEAR     MFE00402
          CLEAR     MFE00403
          CLEAR     MFE00404
          CLEAR     MFE00405
          CLEAR     MFE00406
          CLEAR     MFE00501
.
CMFE9999  RETURN
+
.*****************************************************************************
.*                               CSTF0000          Called by: PROC0000       *
.*                     Clear all STF variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CSTF0000  MOVE      SP100,STF00101
          MOVE      SP100,STF00102
          MOVE      SP100,STF00103
          MOVE      SP100,STF00104
          MOVE      SP100,STF00105
          MOVE      SP100,STF00106
          MOVE      SP100,STF00201
          MOVE      SP100,STF00202
          MOVE      SP100,STF00203
          MOVE      SP100,STF00204
          MOVE      SP100,STF00205
          MOVE      SP100,STF00206
          MOVE      SP100,STF00301
          MOVE      SP100,STF00302
          MOVE      SP100,STF00303
          MOVE      SP100,STF00304
          MOVE      SP100,STF00305
          MOVE      SP100,STF00306
          MOVE      SP100,STF00307
          MOVE      SP100,STF00308
          MOVE      SP100,STF00401
          MOVE      SP100,STF00501
          MOVE      SP100,STF00601
          MOVE      SP100,STF00701
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 5
            ADD       ONE,COUNTER
            MOVE      SP100,STF00801[COUNTER]
            MOVE      SP100,STF00802[COUNTER]
            MOVE      SP100,STF00803[COUNTER]
            MOVE      SP100,STF00804[COUNTER]
            MOVE      SP100,STF00805[COUNTER]
            MOVE      SP100,STF00806[COUNTER]
          DO
.
          MOVE      SP100,STF00901
          MOVE      SP100,STF00902
          MOVE      SP100,STF00903
          MOVE      SP100,STF00904
          MOVE      SP100,STF00905
          MOVE      SP100,STF00906
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 6
            ADD       ONE,COUNTER
            MOVE      SP100,STF01001[COUNTER]
            MOVE      SP100,STF01002[COUNTER]
            MOVE      SP100,STF01003[COUNTER]
            MOVE      SP100,STF01004[COUNTER]
            MOVE      SP100,STF01005[COUNTER]
            MOVE      SP100,STF01006[COUNTER]
            MOVE      SP100,STF01007[COUNTER]
            MOVE      SP100,STF01008[COUNTER]
            MOVE      SP100,STF01009[COUNTER]
          DO
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 2
            ADD       ONE,COUNTER
            MOVE      SP100,STF01101[COUNTER]
            MOVE      SP100,STF01102[COUNTER]
            MOVE      SP100,STF01103[COUNTER]
            MOVE      SP100,STF01104[COUNTER]
            MOVE      SP100,STF01105[COUNTER]
            MOVE      SP100,STF01106[COUNTER]
            MOVE      SP100,STF01107[COUNTER]
            MOVE      SP100,STF01108[COUNTER]
            MOVE      SP100,STF01109[COUNTER]
            MOVE      SP100,STF01110[COUNTER]
            MOVE      SP100,STF01111[COUNTER]
            MOVE      SP100,STF01112[COUNTER]
          DO
.
          MOVE      SP100,STF01201
          MOVE      SP100,STF01202
          MOVE      SP100,STF01301
          MOVE      SP100,STF01302
          MOVE      SP100,STF01401
          MOVE      SP100,STF01402
          MOVE      SP100,STF01403
          MOVE      SP100,STF01404
          MOVE      SP100,STF01405
          MOVE      SP100,STF01406
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 5
            ADD       ONE,COUNTER
            MOVE      SP100,STF01501[COUNTER]
          DO
.
          MOVE      SP100,STF01601
          MOVE      SP100,STF01602
          MOVE      SP100,STF01603
          MOVE      SP100,STF01604
          MOVE      SP100,STF01605
          MOVE      SP100,STF01606
          MOVE      SP100,STF01701
          MOVE      SP100,STF01702
          MOVE      SP100,STF01703
          MOVE      SP100,STF01704
          MOVE      SP100,STF01705
          MOVE      SP100,STF01706
          MOVE      SP100,STF01801
          MOVE      SP100,STF01901
          MOVE      SP100,STF01902
          MOVE      SP100,STF02001
          MOVE      SP100,STF02002
          MOVE      SP100,STF02003
          MOVE      SP100,STF02004
          MOVE      SP100,STF02005
          MOVE      SP100,STF02006
          MOVE      SP100,STF02101
          MOVE      SP100,STF02201
          MOVE      SP100,STF02202
          MOVE      SP100,STF02203
          MOVE      SP100,STF02301
          MOVE      SP100,STF02401
          MOVE      SP100,STF02501
          MOVE      SP100,STF02601
          MOVE      SP100,STF02701
          MOVE      SP100,STF02702
          MOVE      SP100,STF02703
          MOVE      SP100,STF02704
          MOVE      SP100,STF02705
          MOVE      SP100,STF02706
          MOVE      SP100,STF02801
          MOVE      SP100,STF02802
          MOVE      SP100,STF02803
          MOVE      SP100,STF02804
          MOVE      SP100,STF02805
          MOVE      SP100,STF02806
          MOVE      SP100,STF02901
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     STF00101
          CLEAR     STF00102
          CLEAR     STF00103
          CLEAR     STF00104
          CLEAR     STF00105
          CLEAR     STF00106
          CLEAR     STF00201
          CLEAR     STF00202
          CLEAR     STF00203
          CLEAR     STF00204
          CLEAR     STF00205
          CLEAR     STF00206
          CLEAR     STF00301
          CLEAR     STF00302
          CLEAR     STF00303
          CLEAR     STF00304
          CLEAR     STF00305
          CLEAR     STF00306
          CLEAR     STF00307
          CLEAR     STF00308
          CLEAR     STF00401
          CLEAR     STF00501
          CLEAR     STF00601
          CLEAR     STF00701
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 5
            ADD       ONE,COUNTER
            CLEAR     STF00801[COUNTER]
            CLEAR     STF00802[COUNTER]
            CLEAR     STF00803[COUNTER]
            CLEAR     STF00804[COUNTER]
            CLEAR     STF00805[COUNTER]
            CLEAR     STF00806[COUNTER]
          DO
.
          CLEAR     STF00901
          CLEAR     STF00902
          CLEAR     STF00903
          CLEAR     STF00904
          CLEAR     STF00905
          CLEAR     STF00906
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 6
            ADD       ONE,COUNTER
            CLEAR     STF01001[COUNTER]
            CLEAR     STF01002[COUNTER]
            CLEAR     STF01003[COUNTER]
            CLEAR     STF01004[COUNTER]
            CLEAR     STF01005[COUNTER]
            CLEAR     STF01006[COUNTER]
            CLEAR     STF01007[COUNTER]
            CLEAR     STF01008[COUNTER]
            CLEAR     STF01009[COUNTER]
          DO
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 2
            ADD       ONE,COUNTER
            CLEAR     STF01101[COUNTER]
            CLEAR     STF01102[COUNTER]
            CLEAR     STF01103[COUNTER]
            CLEAR     STF01104[COUNTER]
            CLEAR     STF01105[COUNTER]
            CLEAR     STF01106[COUNTER]
            CLEAR     STF01107[COUNTER]
            CLEAR     STF01108[COUNTER]
            CLEAR     STF01109[COUNTER]
            CLEAR     STF01110[COUNTER]
            CLEAR     STF01111[COUNTER]
            CLEAR     STF01112[COUNTER]
          DO
.
          CLEAR     STF01201
          CLEAR     STF01202
          CLEAR     STF01301
          CLEAR     STF01302
          CLEAR     STF01401
          CLEAR     STF01402
          CLEAR     STF01403
          CLEAR     STF01404
          CLEAR     STF01405
          CLEAR     STF01406
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 5
            ADD       ONE,COUNTER
            CLEAR     STF01501[COUNTER]
          DO
.
          CLEAR     STF01601
          CLEAR     STF01602
          CLEAR     STF01603
          CLEAR     STF01604
          CLEAR     STF01605
          CLEAR     STF01606
          CLEAR     STF01701
          CLEAR     STF01702
          CLEAR     STF01703
          CLEAR     STF01704
          CLEAR     STF01705
          CLEAR     STF01706
          CLEAR     STF01801
          CLEAR     STF01901
          CLEAR     STF01902
          CLEAR     STF02001
          CLEAR     STF02002
          CLEAR     STF02003
          CLEAR     STF02004
          CLEAR     STF02005
          CLEAR     STF02006
          CLEAR     STF02101
          CLEAR     STF02201
          CLEAR     STF02202
          CLEAR     STF02203
          CLEAR     STF02301
          CLEAR     STF02401
          CLEAR     STF02501
          CLEAR     STF02601
          CLEAR     STF02701
          CLEAR     STF02702
          CLEAR     STF02703
          CLEAR     STF02704
          CLEAR     STF02705
          CLEAR     STF02706
          CLEAR     STF02801
          CLEAR     STF02802
          CLEAR     STF02803
          CLEAR     STF02804
          CLEAR     STF02805
          CLEAR     STF02806
          CLEAR     STF02901
.
CSTF9999  RETURN
+
.*****************************************************************************
.*                               CPRA0000          Called by: PROC0000       *
.*                     Clear all PRA variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CPRA0000  MOVE      SP100,PRA00101
          MOVE      SP100,PRA00102
          MOVE      SP100,PRA00103
          MOVE      SP100,PRA00104
          MOVE      SP100,PRA00105
          MOVE      SP100,PRA00106
          MOVE      SP100,PRA00201
          MOVE      SP100,PRA00202
          MOVE      SP100,PRA00203
          MOVE      SP100,PRA00204
          MOVE      SP100,PRA00205
          MOVE      SP100,PRA00206
          MOVE      SP100,PRA00301
          MOVE      SP100,PRA00401
          MOVE      SP100,PRA00501
          MOVE      SP100,PRA00502
          MOVE      SP100,PRA00503
          MOVE      SP100,PRA00504
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 9
            ADD       ONE,COUNTER
            MOVE      SP100,PRA00601[COUNTER]
            MOVE      SP100,PRA00602[COUNTER]
            MOVE      SP100,PRA00603[COUNTER]
            MOVE      SP100,PRA00604[COUNTER]
          DO
.
          MOVE      SP100,PRA00701
          MOVE      SP100,PRA00702
          MOVE      SP100,PRA00703
          MOVE      SP100,PRA00704
          MOVE      SP100,PRA00801
          MOVE      SP100,PRA00901
          MOVE      SP100,PRA00902
          MOVE      SP100,PRA00903
          MOVE      SP100,PRA00904
          MOVE      SP100,PRA00905
          MOVE      SP100,PRA00906
          MOVE      SP100,PRA01001
          MOVE      SP100,PRA01101
          MOVE      SP100,PRA01102
          MOVE      SP100,PRA01103
          MOVE      SP100,PRA01104
          MOVE      SP100,PRA01105
          MOVE      SP100,PRA01106
          MOVE      SP100,PRA01201
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     PRA00101
          CLEAR     PRA00102
          CLEAR     PRA00103
          CLEAR     PRA00104
          CLEAR     PRA00105
          CLEAR     PRA00106
          CLEAR     PRA00201
          CLEAR     PRA00202
          CLEAR     PRA00203
          CLEAR     PRA00204
          CLEAR     PRA00205
          CLEAR     PRA00206
          CLEAR     PRA00301
          CLEAR     PRA00401
          CLEAR     PRA00501
          CLEAR     PRA00502
          CLEAR     PRA00503
          CLEAR     PRA00504
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 9
            ADD       ONE,COUNTER
            CLEAR     PRA00601[COUNTER]
            CLEAR     PRA00602[COUNTER]
            CLEAR     PRA00603[COUNTER]
            CLEAR     PRA00604[COUNTER]
          DO
.
          CLEAR     PRA00701
          CLEAR     PRA00702
          CLEAR     PRA00703
          CLEAR     PRA00704
          CLEAR     PRA00801
          CLEAR     PRA00901
          CLEAR     PRA00902
          CLEAR     PRA00903
          CLEAR     PRA00904
          CLEAR     PRA00905
          CLEAR     PRA00906
          CLEAR     PRA01001
          CLEAR     PRA01101
          CLEAR     PRA01102
          CLEAR     PRA01103
          CLEAR     PRA01104
          CLEAR     PRA01105
          CLEAR     PRA01106
          CLEAR     PRA01201
.
CPRA9999  RETURN
+
.*****************************************************************************
.*                               CZPR0000          Called by: PROC0000       *
.*                     Clear all ZPR variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CZPR0000  MOVE      SP100,ZPR00101
          MOVE      SP100,ZPR00201
          PACK      ZPR00301,SP100,SP100
          MOVE      SP100,ZPR00401
          MOVE      SP100,ZPR00402
          MOVE      SP100,ZPR00403
          MOVE      SP100,ZPR00404
          MOVE      SP100,ZPR00501
          MOVE      SP100,ZPR00502
          MOVE      SP100,ZPR00503
          MOVE      SP100,ZPR00504
          MOVE      SP100,ZPR00505
          MOVE      SP100,ZPR00506
          MOVE      SP100,ZPR00507
          MOVE      SP100,ZPR00508
          MOVE      SP100,ZPR00509
          MOVE      SP100,ZPR00510
          MOVE      SP100,ZPR00511
          MOVE      SP100,ZPR00512
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 5
            ADD       ONE,COUNTER
            MOVE      SP100,ZPR00601[COUNTER]
            MOVE      SP100,ZPR00602[COUNTER]
            MOVE      SP100,ZPR00603[COUNTER]
            MOVE      SP100,ZPR00604[COUNTER]
            MOVE      SP100,ZPR00605[COUNTER]
            MOVE      SP100,ZPR00606[COUNTER]
            MOVE      SP100,ZPR00607[COUNTER]
            MOVE      SP100,ZPR00608[COUNTER]
            MOVE      SP100,ZPR00609[COUNTER]
          DO
.
          MOVE      SP100,ZPR00701
          MOVE      SP100,ZPR00801
          PACK      ZPR00901,SP100,SP100
          PACK      ZPR01001,SP100,SP100
          PACK      ZPR01101,SP100,SP100
          MOVE      SP100,ZPR01201
          MOVE      SP100,ZPR01301
          MOVE      SP100,ZPR01401
          MOVE      SP100,ZPR01501
          MOVE      SP100,ZPR01601
          MOVE      SP100,ZPR01701
          MOVE      SP100,ZPR01801
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     ZPR00101
          CLEAR     ZPR00201
          CLEAR     ZPR00301
          CLEAR     ZPR00401
          CLEAR     ZPR00402
          CLEAR     ZPR00403
          CLEAR     ZPR00404
          CLEAR     ZPR00501
          CLEAR     ZPR00502
          CLEAR     ZPR00503
          CLEAR     ZPR00504
          CLEAR     ZPR00505
          CLEAR     ZPR00506
          CLEAR     ZPR00507
          CLEAR     ZPR00508
          CLEAR     ZPR00509
          CLEAR     ZPR00510
          CLEAR     ZPR00511
          CLEAR     ZPR00512
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 5
            ADD       ONE,COUNTER
            CLEAR     ZPR00601[COUNTER]
            CLEAR     ZPR00602[COUNTER]
            CLEAR     ZPR00603[COUNTER]
            CLEAR     ZPR00604[COUNTER]
            CLEAR     ZPR00605[COUNTER]
            CLEAR     ZPR00606[COUNTER]
            CLEAR     ZPR00607[COUNTER]
            CLEAR     ZPR00608[COUNTER]
            CLEAR     ZPR00609[COUNTER]
          DO
.
          CLEAR     ZPR00701
          CLEAR     ZPR00801
          CLEAR     ZPR00901
          CLEAR     ZPR01001
          CLEAR     ZPR01101
          CLEAR     ZPR01201
          CLEAR     ZPR01301
          CLEAR     ZPR01401
          CLEAR     ZPR01501
          CLEAR     ZPR01601
          CLEAR     ZPR01701
          CLEAR     ZPR01801
.
CZPR9999  RETURN
+
.*****************************************************************************
.*                               CDG10000          Called by: PROC0000       *
.*                     Clear all DG1 variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CDG10000  MOVE      SP100,DG100101
          MOVE      SP100,DG100201
          MOVE      SP100,DG100301
          PACK      DG100302,SP100,SP100
          MOVE      SP100,DG100303
          MOVE      SP100,DG100304
          MOVE      SP100,DG100305
          MOVE      SP100,DG100306
          MOVE      SP100,DG100401
          MOVE      SP100,DG100501
          MOVE      SP100,DG100601
          MOVE      SP100,DG100701
          PACK      DG100702,SP100,SP100
          MOVE      SP100,DG100703
          MOVE      SP100,DG100704
          MOVE      SP100,DG100705
          MOVE      SP100,DG100706
          MOVE      SP100,DG100801
          PACK      DG100802,SP100,SP100
          MOVE      SP100,DG100803
          MOVE      SP100,DG100804
          MOVE      SP100,DG100805
          MOVE      SP100,DG100806
          MOVE      SP100,DG100901
          MOVE      SP100,DG101001
          MOVE      SP100,DG101101
          PACK      DG101102,SP100,SP100
          MOVE      SP100,DG101103
          MOVE      SP100,DG101104
          MOVE      SP100,DG101105
          MOVE      SP100,DG101106
          MOVE      SP100,DG101201
          MOVE      SP100,DG101301
          PACK      DG101302,SP100,SP100
          MOVE      SP100,DG101303
          MOVE      SP100,DG101304
          MOVE      SP100,DG101305
          MOVE      SP100,DG101306
          MOVE      SP100,DG101401
          MOVE      SP100,DG101501
          MOVE      SP100,DG101601
          PACK      DG101602,SP100,SP100
          PACK      DG101603,SP100,SP100
          PACK      DG101604,SP100,SP100
          PACK      DG101605,SP100,SP100
          PACK      DG101606,SP100,SP100
          PACK      DG101607,SP100,SP100
          PACK      DG101608,SP100,SP100
          PACK      DG101609,SP100,SP100
          PACK      DG101610,SP100,SP100
          PACK      DG101611,SP100,SP100
          PACK      DG101612,SP100,SP100
          PACK      DG101613,SP100,SP100
          PACK      DG101614,SP100,SP100
          PACK      DG101615,SP100,SP100
          PACK      DG101616,SP100,SP100
          MOVE      SP100,DG101701
          MOVE      SP100,DG101801
          MOVE      SP100,DG101901
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     DG100101
          CLEAR     DG100201
          CLEAR     DG100301
          CLEAR     DG100302
          CLEAR     DG100303
          CLEAR     DG100304
          CLEAR     DG100305
          CLEAR     DG100306
          CLEAR     DG100401
          CLEAR     DG100501
          CLEAR     DG100601
          CLEAR     DG100701
          CLEAR     DG100702
          CLEAR     DG100703
          CLEAR     DG100704
          CLEAR     DG100705
          CLEAR     DG100706
          CLEAR     DG100801
          CLEAR     DG100802
          CLEAR     DG100803
          CLEAR     DG100804
          CLEAR     DG100805
          CLEAR     DG100806
          CLEAR     DG100901
          CLEAR     DG101001
          CLEAR     DG101101
          CLEAR     DG101102
          CLEAR     DG101103
          CLEAR     DG101104
          CLEAR     DG101105
          CLEAR     DG101106
          CLEAR     DG101201
          CLEAR     DG101301
          CLEAR     DG101302
          CLEAR     DG101303
          CLEAR     DG101304
          CLEAR     DG101305
          CLEAR     DG101306
          CLEAR     DG101401
          CLEAR     DG101501
          CLEAR     DG101601
          CLEAR     DG101602
          CLEAR     DG101603
          CLEAR     DG101604
          CLEAR     DG101605
          CLEAR     DG101606
          CLEAR     DG101607
          CLEAR     DG101608
          CLEAR     DG101609
          CLEAR     DG101610
          CLEAR     DG101611
          CLEAR     DG101612
          CLEAR     DG101613
          CLEAR     DG101614
          CLEAR     DG101615
          CLEAR     DG101616
          CLEAR     DG101701
          CLEAR     DG101801
          CLEAR     DG101901
.
CDG19999  RETURN
+
.*****************************************************************************
.*                               CZST0000          Called by: PROC0000       *
.*                     Clear all ZST variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CZST0000  MOVE      SP100,ZST00101
          MOVE      SP100,ZST00102
          MOVE      SP100,ZST00103
          MOVE      SP100,ZST00104
          MOVE      SP100,ZST00105
          MOVE      SP100,ZST00106
          MOVE      SP100,ZST00201
          MOVE      SP100,ZST00202
          MOVE      SP100,ZST00203
          MOVE      SP100,ZST00204
          MOVE      SP100,ZST00205
          MOVE      SP100,ZST00206
          MOVE      SP100,ZST00301
          MOVE      SP100,ZST00401
          MOVE      SP100,ZST00501
          MOVE      SP100,ZST00601
          MOVE      SP100,ZST00602
          MOVE      SP100,ZST00603
          MOVE      SP100,ZST00604
          MOVE      SP100,ZST00701
          MOVE      SP100,ZST00702
          MOVE      SP100,ZST00703
          MOVE      SP100,ZST00801
          MOVE      SP100,ZST00802
          MOVE      SP100,ZST00803
          MOVE      SP100,ZST00804
          MOVE      SP100,ZST00805
          MOVE      SP100,ZST00901
          MOVE      SP100,ZST00902
          MOVE      SP100,ZST01001
          MOVE      SP100,ZST01101
          MOVE      SP100,ZST01201
          MOVE      SP100,ZST01301
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     ZST00101
          CLEAR     ZST00102
          CLEAR     ZST00103
          CLEAR     ZST00104
          CLEAR     ZST00105
          CLEAR     ZST00106
          CLEAR     ZST00201
          CLEAR     ZST00202
          CLEAR     ZST00203
          CLEAR     ZST00204
          CLEAR     ZST00205
          CLEAR     ZST00206
          CLEAR     ZST00301
          CLEAR     ZST00401
          CLEAR     ZST00501
          CLEAR     ZST00601
          CLEAR     ZST00602
          CLEAR     ZST00603
          CLEAR     ZST00604
          CLEAR     ZST00701
          CLEAR     ZST00702
          CLEAR     ZST00703
          CLEAR     ZST00801
          CLEAR     ZST00802
          CLEAR     ZST00803
          CLEAR     ZST00804
          CLEAR     ZST00805
          CLEAR     ZST00901
          CLEAR     ZST00902
          CLEAR     ZST01001
          CLEAR     ZST01101
          CLEAR     ZST01201
          CLEAR     ZST01301
.
CZST9999  RETURN
+
.*****************************************************************************
.*                               CZSF0000          Called by: PROC0000       *
.*                     Clear all ZSF variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CZSF0000  MOVE      SP100,ZSF00101
          MOVE      SP100,ZSF00102
          MOVE      SP100,ZSF00103
          MOVE      SP100,ZSF00104
          MOVE      SP100,ZSF00105
          MOVE      SP100,ZSF00106
          MOVE      SP100,ZSF00201
          MOVE      SP100,ZSF00202
          MOVE      SP100,ZSF00203
          MOVE      SP100,ZSF00204
          MOVE      SP100,ZSF00205
          MOVE      SP100,ZSF00206
          MOVE      SP100,ZSF00301
          MOVE      SP100,ZSF00302
          MOVE      SP100,ZSF00303
          MOVE      SP100,ZSF00304
          MOVE      SP100,ZSF00305
          MOVE      SP100,ZSF00306
          MOVE      SP100,ZSF00401
          MOVE      SP100,ZSF00501
          MOVE      SP100,ZSF00601
          MOVE      SP100,ZSF00602
          MOVE      SP100,ZSF00603
          MOVE      SP100,ZSF00604
          MOVE      SP100,ZSF00701
          MOVE      SP100,ZSF00801
          MOVE      SP100,ZSF00901
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     ZSF00101
          CLEAR     ZSF00102
          CLEAR     ZSF00103
          CLEAR     ZSF00104
          CLEAR     ZSF00105
          CLEAR     ZSF00106
          CLEAR     ZSF00201
          CLEAR     ZSF00202
          CLEAR     ZSF00203
          CLEAR     ZSF00204
          CLEAR     ZSF00205
          CLEAR     ZSF00206
          CLEAR     ZSF00301
          CLEAR     ZSF00302
          CLEAR     ZSF00303
          CLEAR     ZSF00304
          CLEAR     ZSF00305
          CLEAR     ZSF00306
          CLEAR     ZSF00401
          CLEAR     ZSF00501
          CLEAR     ZSF00601
          CLEAR     ZSF00602
          CLEAR     ZSF00603
          CLEAR     ZSF00604
          CLEAR     ZSF00701
          CLEAR     ZSF00801
          CLEAR     ZSF00901
.
CZSF9999  RETURN
+
.*****************************************************************************
.*                               CSCH0000          Called by: PROC0000       *
.*                     Clear all SCH variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CSCH0000  MOVE      SP100,SCH00101
          MOVE      SP100,SCH00102
          MOVE      SP100,SCH00103
          MOVE      SP100,SCH00104
          MOVE      SP100,SCH00201
          MOVE      SP100,SCH00202
          MOVE      SP100,SCH00203
          MOVE      SP100,SCH00204
          MOVE      SP100,SCH00301
          MOVE      SP100,SCH00401
          MOVE      SP100,SCH00402
          MOVE      SP100,SCH00403
          MOVE      SP100,SCH00404
          MOVE      SP100,SCH00501
          MOVE      SP100,SCH00502
          MOVE      SP100,SCH00503
          MOVE      SP100,SCH00504
          MOVE      SP100,SCH00505
          MOVE      SP100,SCH00506
          MOVE      SP100,SCH00601
          MOVE      SP100,SCH00602
          MOVE      SP100,SCH00603
          MOVE      SP100,SCH00604
          MOVE      SP100,SCH00605
          MOVE      SP100,SCH00606
          MOVE      SP100,SCH00701
          MOVE      SP100,SCH00702
          MOVE      SP100,SCH00703
          MOVE      SP100,SCH00704
          MOVE      SP100,SCH00705
          MOVE      SP100,SCH00706
          MOVE      SP100,SCH00801
          MOVE      SP100,SCH00802
          MOVE      SP100,SCH00803
          MOVE      SP100,SCH00804
          MOVE      SP100,SCH00805
          MOVE      SP100,SCH00806
          MOVE      SP100,SCH00901
          MOVE      SP100,SCH01001
          MOVE      SP100,SCH01002
          MOVE      SP100,SCH01003
          MOVE      SP100,SCH01004
          MOVE      SP100,SCH01005
          MOVE      SP100,SCH01006
          MOVE      SP100,SCH01101
          MOVE      SP100,SCH01102
          MOVE      SP100,SCH01103
          MOVE      SP100,SCH01104
          MOVE      SP100,SCH01105
          MOVE      SP100,SCH01106
          MOVE      SP100,SCH01107
          MOVE      SP100,SCH01108
          MOVE      SP100,SCH01109
          MOVE      SP100,SCH01110
          MOVE      SP100,SCH01111
          MOVE      SP100,SCH01112
          MOVE      SP100,SCH01201
          MOVE      SP100,SCH01202
          MOVE      SP100,SCH01203
          MOVE      SP100,SCH01204
          MOVE      SP100,SCH01205
          MOVE      SP100,SCH01206
          MOVE      SP100,SCH01207
          MOVE      SP100,SCH01208
          MOVE      SP100,SCH01209
          MOVE      SP100,SCH01210
          MOVE      SP100,SCH01211
          MOVE      SP100,SCH01212
          MOVE      SP100,SCH01213
          MOVE      SP100,SCH01214
          MOVE      SP100,SCH01215
          MOVE      SP100,SCH01301
          MOVE      SP100,SCH01302
          MOVE      SP100,SCH01303
          MOVE      SP100,SCH01304
          MOVE      SP100,SCH01305
          MOVE      SP100,SCH01306
          MOVE      SP100,SCH01307
          MOVE      SP100,SCH01308
          MOVE      SP100,SCH01309
          MOVE      SP100,SCH01401
          MOVE      SP100,SCH01402
          MOVE      SP100,SCH01403
          MOVE      SP100,SCH01404
          MOVE      SP100,SCH01405
          MOVE      SP100,SCH01406
          MOVE      SP100,SCH01407
          MOVE      SP100,SCH01408
          MOVE      SP100,SCH01409
          MOVE      SP100,SCH01410
          MOVE      SP100,SCH01411
          MOVE      SP100,SCH01501
          MOVE      SP100,SCH01502
          MOVE      SP100,SCH01503
          MOVE      SP100,SCH01504
          MOVE      SP100,SCH01505
          MOVE      SP100,SCH01506
          MOVE      SP100,SCH01507
          MOVE      SP100,SCH01508
          MOVE      SP100,SCH01509
          MOVE      SP100,SCH01601
          MOVE      SP100,SCH01602
          MOVE      SP100,SCH01603
          MOVE      SP100,SCH01604
          MOVE      SP100,SCH01605
          MOVE      SP100,SCH01606
          MOVE      SP100,SCH01607
          MOVE      SP100,SCH01608
          MOVE      SP100,SCH01609
          MOVE      SP100,SCH01610
          MOVE      SP100,SCH01611
          MOVE      SP100,SCH01612
          MOVE      SP100,SCH01613
          MOVE      SP100,SCH01614
          MOVE      SP100,SCH01615
          MOVE      SP100,SCH01701
          MOVE      SP100,SCH01702
          MOVE      SP100,SCH01703
          MOVE      SP100,SCH01704
          MOVE      SP100,SCH01705
          MOVE      SP100,SCH01706
          MOVE      SP100,SCH01707
          MOVE      SP100,SCH01708
          MOVE      SP100,SCH01709
          MOVE      SP100,SCH01801
          MOVE      SP100,SCH01802
          MOVE      SP100,SCH01803
          MOVE      SP100,SCH01804
          MOVE      SP100,SCH01805
          MOVE      SP100,SCH01806
          MOVE      SP100,SCH01807
          MOVE      SP100,SCH01808
          MOVE      SP100,SCH01809
          MOVE      SP100,SCH01810
          MOVE      SP100,SCH01811
          MOVE      SP100,SCH01901
          MOVE      SP100,SCH01902
          MOVE      SP100,SCH01903
          MOVE      SP100,SCH01904
          MOVE      SP100,SCH01905
          MOVE      SP100,SCH01906
          MOVE      SP100,SCH01907
          MOVE      SP100,SCH01908
          MOVE      SP100,SCH01909
          MOVE      SP100,SCH02001
          MOVE      SP100,SCH02002
          MOVE      SP100,SCH02003
          MOVE      SP100,SCH02004
          MOVE      SP100,SCH02005
          MOVE      SP100,SCH02006
          MOVE      SP100,SCH02007
          MOVE      SP100,SCH02008
          MOVE      SP100,SCH02009
          MOVE      SP100,SCH02010
          MOVE      SP100,SCH02011
          MOVE      SP100,SCH02012
          MOVE      SP100,SCH02013
          MOVE      SP100,SCH02014
          MOVE      SP100,SCH02015
          MOVE      SP100,SCH02101
          MOVE      SP100,SCH02102
          MOVE      SP100,SCH02103
          MOVE      SP100,SCH02104
          MOVE      SP100,SCH02105
          MOVE      SP100,SCH02106
          MOVE      SP100,SCH02107
          MOVE      SP100,SCH02108
          MOVE      SP100,SCH02109
          MOVE      SP100,SCH02201
          MOVE      SP100,SCH02202
          MOVE      SP100,SCH02203
          MOVE      SP100,SCH02204
          MOVE      SP100,SCH02205
          MOVE      SP100,SCH02206
          MOVE      SP100,SCH02207
          MOVE      SP100,SCH02208
          MOVE      SP100,SCH02209
          MOVE      SP100,SCH02301
          MOVE      SP100,SCH02302
          MOVE      SP100,SCH02303
          MOVE      SP100,SCH02304
          MOVE      SP100,SCH02401
          MOVE      SP100,SCH02402
          MOVE      SP100,SCH02403
          MOVE      SP100,SCH02404
          MOVE      SP100,SCH02501
          MOVE      SP100,SCH02502
          MOVE      SP100,SCH02503
          MOVE      SP100,SCH02504
          MOVE      SP100,SCH02505
          MOVE      SP100,SCH02506
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     SCH00101
          CLEAR     SCH00102
          CLEAR     SCH00103
          CLEAR     SCH00104
          CLEAR     SCH00201
          CLEAR     SCH00202
          CLEAR     SCH00203
          CLEAR     SCH00204
          CLEAR     SCH00301
          CLEAR     SCH00401
          CLEAR     SCH00402
          CLEAR     SCH00403
          CLEAR     SCH00404
          CLEAR     SCH00501
          CLEAR     SCH00502
          CLEAR     SCH00503
          CLEAR     SCH00504
          CLEAR     SCH00505
          CLEAR     SCH00506
          CLEAR     SCH00601
          CLEAR     SCH00602
          CLEAR     SCH00603
          CLEAR     SCH00604
          CLEAR     SCH00605
          CLEAR     SCH00606
          CLEAR     SCH00701
          CLEAR     SCH00702
          CLEAR     SCH00703
          CLEAR     SCH00704
          CLEAR     SCH00705
          CLEAR     SCH00706
          CLEAR     SCH00801
          CLEAR     SCH00802
          CLEAR     SCH00803
          CLEAR     SCH00804
          CLEAR     SCH00805
          CLEAR     SCH00806
          CLEAR     SCH00901
          CLEAR     SCH01001
          CLEAR     SCH01002
          CLEAR     SCH01003
          CLEAR     SCH01004
          CLEAR     SCH01005
          CLEAR     SCH01006
          CLEAR     SCH01101
          CLEAR     SCH01102
          CLEAR     SCH01103
          CLEAR     SCH01104
          CLEAR     SCH01105
          CLEAR     SCH01106
          CLEAR     SCH01107
          CLEAR     SCH01108
          CLEAR     SCH01109
          CLEAR     SCH01110
          CLEAR     SCH01111
          CLEAR     SCH01112
          CLEAR     SCH01201
          CLEAR     SCH01202
          CLEAR     SCH01203
          CLEAR     SCH01204
          CLEAR     SCH01205
          CLEAR     SCH01206
          CLEAR     SCH01207
          CLEAR     SCH01208
          CLEAR     SCH01209
          CLEAR     SCH01210
          CLEAR     SCH01211
          CLEAR     SCH01212
          CLEAR     SCH01213
          CLEAR     SCH01214
          CLEAR     SCH01215
          CLEAR     SCH01301
          CLEAR     SCH01302
          CLEAR     SCH01303
          CLEAR     SCH01304
          CLEAR     SCH01305
          CLEAR     SCH01306
          CLEAR     SCH01307
          CLEAR     SCH01308
          CLEAR     SCH01309
          CLEAR     SCH01401
          CLEAR     SCH01402
          CLEAR     SCH01403
          CLEAR     SCH01404
          CLEAR     SCH01405
          CLEAR     SCH01406
          CLEAR     SCH01407
          CLEAR     SCH01408
          CLEAR     SCH01409
          CLEAR     SCH01410
          CLEAR     SCH01411
          CLEAR     SCH01501
          CLEAR     SCH01502
          CLEAR     SCH01503
          CLEAR     SCH01504
          CLEAR     SCH01505
          CLEAR     SCH01506
          CLEAR     SCH01507
          CLEAR     SCH01508
          CLEAR     SCH01509
          CLEAR     SCH01601
          CLEAR     SCH01602
          CLEAR     SCH01603
          CLEAR     SCH01604
          CLEAR     SCH01605
          CLEAR     SCH01606
          CLEAR     SCH01607
          CLEAR     SCH01608
          CLEAR     SCH01609
          CLEAR     SCH01610
          CLEAR     SCH01611
          CLEAR     SCH01612
          CLEAR     SCH01613
          CLEAR     SCH01614
          CLEAR     SCH01615
          CLEAR     SCH01701
          CLEAR     SCH01702
          CLEAR     SCH01703
          CLEAR     SCH01704
          CLEAR     SCH01705
          CLEAR     SCH01706
          CLEAR     SCH01707
          CLEAR     SCH01708
          CLEAR     SCH01709
          CLEAR     SCH01801
          CLEAR     SCH01802
          CLEAR     SCH01803
          CLEAR     SCH01804
          CLEAR     SCH01805
          CLEAR     SCH01806
          CLEAR     SCH01807
          CLEAR     SCH01808
          CLEAR     SCH01809
          CLEAR     SCH01810
          CLEAR     SCH01811
          CLEAR     SCH01901
          CLEAR     SCH01902
          CLEAR     SCH01903
          CLEAR     SCH01904
          CLEAR     SCH01905
          CLEAR     SCH01906
          CLEAR     SCH01907
          CLEAR     SCH01908
          CLEAR     SCH01909
          CLEAR     SCH02001
          CLEAR     SCH02002
          CLEAR     SCH02003
          CLEAR     SCH02004
          CLEAR     SCH02005
          CLEAR     SCH02006
          CLEAR     SCH02007
          CLEAR     SCH02008
          CLEAR     SCH02009
          CLEAR     SCH02010
          CLEAR     SCH02011
          CLEAR     SCH02012
          CLEAR     SCH02013
          CLEAR     SCH02014
          CLEAR     SCH02015
          CLEAR     SCH02101
          CLEAR     SCH02102
          CLEAR     SCH02103
          CLEAR     SCH02104
          CLEAR     SCH02105
          CLEAR     SCH02106
          CLEAR     SCH02107
          CLEAR     SCH02108
          CLEAR     SCH02109
          CLEAR     SCH02201
          CLEAR     SCH02202
          CLEAR     SCH02203
          CLEAR     SCH02204
          CLEAR     SCH02205
          CLEAR     SCH02206
          CLEAR     SCH02207
          CLEAR     SCH02208
          CLEAR     SCH02209
          CLEAR     SCH02301
          CLEAR     SCH02302
          CLEAR     SCH02303
          CLEAR     SCH02304
          CLEAR     SCH02401
          CLEAR     SCH02402
          CLEAR     SCH02403
          CLEAR     SCH02404
          CLEAR     SCH02501
          CLEAR     SCH02502
          CLEAR     SCH02503
          CLEAR     SCH02504
          CLEAR     SCH02505
          CLEAR     SCH02506
.
CSCH9999  RETURN
+
.*****************************************************************************
.*                               CZSC0000          Called by: PROC0000       *
.*                     Clear all ZSC variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CZSC0000  MOVE      SP100,ZSC00101
          MOVE      SP100,ZSC00102
          MOVE      SP100,ZSC00103
          MOVE      SP100,ZSC00104
          MOVE      SP100,ZSC00201
          MOVE      SP100,ZSC00301
          MOVE      SP100,ZSC00401
          MOVE      SP100,ZSC00402
          MOVE      SP100,ZSC00403
          MOVE      SP100,ZSC00404
          MOVE      SP100,ZSC00405
          MOVE      SP100,ZSC00406
          MOVE      SP100,ZSC00501
          MOVE      SP100,ZSC00601
          MOVE      SP100,ZSC00701
          MOVE      SP100,ZSC00801
          MOVE      SP100,ZSC00901
          MOVE      SP100,ZSC01001
          MOVE      SP100,ZSC01002
          MOVE      SP100,ZSC01003
          MOVE      SP100,ZSC01004
          MOVE      SP100,ZSC01005
          MOVE      SP100,ZSC01006
          MOVE      SP100,ZSC01101
          MOVE      SP100,ZSC01102
          MOVE      SP100,ZSC01103
          MOVE      SP100,ZSC01104
          MOVE      SP100,ZSC01105
          MOVE      SP100,ZSC01106
          MOVE      SP100,ZSC01201
          MOVE      SP100,ZSC01301
          MOVE      SP100,ZSC01401
          MOVE      SP100,ZSC01501
          MOVE      SP100,ZSC01601
          MOVE      SP100,ZSC01701
          MOVE      SP100,ZSC01801
          MOVE      SP100,ZSC01901
          MOVE      SP100,ZSC02001
          MOVE      SP100,ZSC02101
          MOVE      SP100,ZSC02201
          MOVE      SP100,ZSC02301
          MOVE      SP100,ZSC02401
          MOVE      SP100,ZSC02501
          MOVE      SP100,ZSC02601
          MOVE      SP100,ZSC02602
          MOVE      SP100,ZSC02603
          MOVE      SP100,ZSC02604
          MOVE      SP100,ZSC02605
          MOVE      SP100,ZSC02606
          MOVE      SP100,ZSC02607
          MOVE      SP100,ZSC02608
          MOVE      SP100,ZSC02609
          MOVE      SP100,ZSC02610
          MOVE      SP100,ZSC02611
          MOVE      SP100,ZSC02612
          MOVE      SP100,ZSC02613
          MOVE      SP100,ZSC02614
          MOVE      SP100,ZSC02615
          MOVE      SP100,ZSC02701
          MOVE      SP100,ZSC02702
          MOVE      SP100,ZSC02703
          MOVE      SP100,ZSC02704
          MOVE      SP100,ZSC02705
          MOVE      SP100,ZSC02706
          MOVE      SP100,ZSC02707
          MOVE      SP100,ZSC02708
          MOVE      SP100,ZSC02709
          MOVE      SP100,ZSC02710
          MOVE      SP100,ZSC02711
          MOVE      SP100,ZSC02712
          MOVE      SP100,ZSC02713
          MOVE      SP100,ZSC02714
          MOVE      SP100,ZSC02715
          MOVE      SP100,ZSC02801
          MOVE      SP100,ZSC02802
          MOVE      SP100,ZSC02803
          MOVE      SP100,ZSC02804
          MOVE      SP100,ZSC02805
          MOVE      SP100,ZSC02806
          MOVE      SP100,ZSC02807
          MOVE      SP100,ZSC02808
          MOVE      SP100,ZSC02809
          MOVE      SP100,ZSC02810
          MOVE      SP100,ZSC02811
          MOVE      SP100,ZSC02812
          MOVE      SP100,ZSC02813
          MOVE      SP100,ZSC02814
          MOVE      SP100,ZSC02815
          MOVE      SP100,ZSC02901
          MOVE      SP100,ZSC02902
          MOVE      SP100,ZSC02903
          MOVE      SP100,ZSC02904
          MOVE      SP100,ZSC02905
          MOVE      SP100,ZSC02906
          MOVE      SP100,ZSC02907
          MOVE      SP100,ZSC02908
          MOVE      SP100,ZSC02909
          MOVE      SP100,ZSC02910
          MOVE      SP100,ZSC02911
          MOVE      SP100,ZSC02912
          MOVE      SP100,ZSC02913
          MOVE      SP100,ZSC02914
          MOVE      SP100,ZSC02915
          MOVE      SP100,ZSC03001
          MOVE      SP100,ZSC03002
          MOVE      SP100,ZSC03003
          MOVE      SP100,ZSC03004
          MOVE      SP100,ZSC03005
          MOVE      SP100,ZSC03006
          MOVE      SP100,ZSC03007
          MOVE      SP100,ZSC03008
          MOVE      SP100,ZSC03009
          MOVE      SP100,ZSC03010
          MOVE      SP100,ZSC03011
          MOVE      SP100,ZSC03012
          MOVE      SP100,ZSC03013
          MOVE      SP100,ZSC03014
          MOVE      SP100,ZSC03015
          MOVE      SP100,ZSC03101
          MOVE      SP100,ZSC03102
          MOVE      SP100,ZSC03103
          MOVE      SP100,ZSC03104
          MOVE      SP100,ZSC03105
          MOVE      SP100,ZSC03106
          MOVE      SP100,ZSC03107
          MOVE      SP100,ZSC03108
          MOVE      SP100,ZSC03109
          MOVE      SP100,ZSC03110
          MOVE      SP100,ZSC03111
          MOVE      SP100,ZSC03112
          MOVE      SP100,ZSC03113
          MOVE      SP100,ZSC03114
          MOVE      SP100,ZSC03115
          MOVE      SP100,ZSC03201
          MOVE      SP100,ZSC03202
          MOVE      SP100,ZSC03203
          MOVE      SP100,ZSC03204
          MOVE      SP100,ZSC03205
          MOVE      SP100,ZSC03206
          MOVE      SP100,ZSC03207
          MOVE      SP100,ZSC03208
          MOVE      SP100,ZSC03209
          MOVE      SP100,ZSC03210
          MOVE      SP100,ZSC03211
          MOVE      SP100,ZSC03212
          MOVE      SP100,ZSC03213
          MOVE      SP100,ZSC03214
          MOVE      SP100,ZSC03215
          MOVE      SP100,ZSC03301
          MOVE      SP100,ZSC03302
          MOVE      SP100,ZSC03303
          MOVE      SP100,ZSC03304
          MOVE      SP100,ZSC03305
          MOVE      SP100,ZSC03306
          MOVE      SP100,ZSC03401
          MOVE      SP100,ZSC03402
          MOVE      SP100,ZSC03403
          MOVE      SP100,ZSC03404
          MOVE      SP100,ZSC03405
          MOVE      SP100,ZSC03406
          MOVE      SP100,ZSC03501
          MOVE      SP100,ZSC03502
          MOVE      SP100,ZSC03503
          MOVE      SP100,ZSC03504
          MOVE      SP100,ZSC03505
          MOVE      SP100,ZSC03506
          MOVE      SP100,ZSC03601
          MOVE      SP100,ZSC03602
          MOVE      SP100,ZSC03603
          MOVE      SP100,ZSC03604
          MOVE      SP100,ZSC03605
          MOVE      SP100,ZSC03606
          MOVE      SP100,ZSC03701
          MOVE      SP100,ZSC03702
          MOVE      SP100,ZSC03703
          MOVE      SP100,ZSC03704
          MOVE      SP100,ZSC03705
          MOVE      SP100,ZSC03706
          MOVE      SP100,ZSC03801
          MOVE      SP100,ZSC03802
          MOVE      SP100,ZSC03803
          MOVE      SP100,ZSC03804
          MOVE      SP100,ZSC03805
          MOVE      SP100,ZSC03806
          MOVE      SP100,ZSC03901
          MOVE      SP100,ZSC03902
          MOVE      SP100,ZSC03903
          MOVE      SP100,ZSC03904
          MOVE      SP100,ZSC03905
          MOVE      SP100,ZSC03906
          MOVE      SP100,ZSC04001
          MOVE      SP100,ZSC04002
          MOVE      SP100,ZSC04003
          MOVE      SP100,ZSC04004
          MOVE      SP100,ZSC04005
          MOVE      SP100,ZSC04006
          MOVE      SP100,ZSC04101
          MOVE      SP100,ZSC04201
          MOVE      SP100,ZSC04301
          MOVE      SP100,ZSC04401
          MOVE      SP100,ZSC04501
          MOVE      SP100,ZSC04601
          MOVE      SP100,ZSC04701
          MOVE      SP100,ZSC04801
          MOVE      SP100,ZSC04901
          MOVE      SP100,ZSC04902
          MOVE      SP100,ZSC04903
          MOVE      SP100,ZSC04904
          MOVE      SP100,ZSC04905
          MOVE      SP100,ZSC04906
          MOVE      SP100,ZSC05001
          MOVE      SP100,ZSC05101
          MOVE      SP100,ZSC05201
          MOVE      SP100,ZSC05301
          MOVE      SP100,ZSC05302
          MOVE      SP100,ZSC05303
          MOVE      SP100,ZSC05304
          MOVE      SP100,ZSC05305
          MOVE      SP100,ZSC05306
          MOVE      SP100,ZSC05401
          MOVE      SP100,ZSC05402
          MOVE      SP100,ZSC05403
          MOVE      SP100,ZSC05404
          MOVE      SP100,ZSC05405
          MOVE      SP100,ZSC05406
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 20
            ADD       ONE,COUNTER
            MOVE      SP100,ZSC05501[COUNTER]
            MOVE      SP100,ZSC05601[COUNTER]
            MOVE      SP100,ZSC05701[COUNTER]
            MOVE      SP100,ZSC05801[COUNTER]
            MOVE      SP100,ZSC05901[COUNTER]
            MOVE      SP100,ZSC06001[COUNTER]
          DO
.
          MOVE      SP100,ZSC06101
          MOVE      SP100,ZSC06201
          MOVE      SP100,ZSC06301
          MOVE      SP100,ZSC06401
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     ZSC00101
          CLEAR     ZSC00102
          CLEAR     ZSC00103
          CLEAR     ZSC00104
          CLEAR     ZSC00201
          CLEAR     ZSC00301
          CLEAR     ZSC00401
          CLEAR     ZSC00402
          CLEAR     ZSC00403
          CLEAR     ZSC00404
          CLEAR     ZSC00405
          CLEAR     ZSC00406
          CLEAR     ZSC00501
          CLEAR     ZSC00601
          CLEAR     ZSC00701
          CLEAR     ZSC00801
          CLEAR     ZSC00901
          CLEAR     ZSC01001
          CLEAR     ZSC01002
          CLEAR     ZSC01003
          CLEAR     ZSC01004
          CLEAR     ZSC01005
          CLEAR     ZSC01006
          CLEAR     ZSC01101
          CLEAR     ZSC01102
          CLEAR     ZSC01103
          CLEAR     ZSC01104
          CLEAR     ZSC01105
          CLEAR     ZSC01106
          CLEAR     ZSC01201
          CLEAR     ZSC01301
          CLEAR     ZSC01401
          CLEAR     ZSC01501
          CLEAR     ZSC01601
          CLEAR     ZSC01701
          CLEAR     ZSC01801
          CLEAR     ZSC01901
          CLEAR     ZSC02001
          CLEAR     ZSC02101
          CLEAR     ZSC02201
          CLEAR     ZSC02301
          CLEAR     ZSC02401
          CLEAR     ZSC02501
          CLEAR     ZSC02601
          CLEAR     ZSC02602
          CLEAR     ZSC02603
          CLEAR     ZSC02604
          CLEAR     ZSC02605
          CLEAR     ZSC02606
          CLEAR     ZSC02607
          CLEAR     ZSC02608
          CLEAR     ZSC02609
          CLEAR     ZSC02610
          CLEAR     ZSC02611
          CLEAR     ZSC02612
          CLEAR     ZSC02613
          CLEAR     ZSC02614
          CLEAR     ZSC02615
          CLEAR     ZSC02701
          CLEAR     ZSC02702
          CLEAR     ZSC02703
          CLEAR     ZSC02704
          CLEAR     ZSC02705
          CLEAR     ZSC02706
          CLEAR     ZSC02707
          CLEAR     ZSC02708
          CLEAR     ZSC02709
          CLEAR     ZSC02710
          CLEAR     ZSC02711
          CLEAR     ZSC02712
          CLEAR     ZSC02713
          CLEAR     ZSC02714
          CLEAR     ZSC02715
          CLEAR     ZSC02801
          CLEAR     ZSC02802
          CLEAR     ZSC02803
          CLEAR     ZSC02804
          CLEAR     ZSC02805
          CLEAR     ZSC02806
          CLEAR     ZSC02807
          CLEAR     ZSC02808
          CLEAR     ZSC02809
          CLEAR     ZSC02810
          CLEAR     ZSC02811
          CLEAR     ZSC02812
          CLEAR     ZSC02813
          CLEAR     ZSC02814
          CLEAR     ZSC02815
          CLEAR     ZSC02901
          CLEAR     ZSC02902
          CLEAR     ZSC02903
          CLEAR     ZSC02904
          CLEAR     ZSC02905
          CLEAR     ZSC02906
          CLEAR     ZSC02907
          CLEAR     ZSC02908
          CLEAR     ZSC02909
          CLEAR     ZSC02910
          CLEAR     ZSC02911
          CLEAR     ZSC02912
          CLEAR     ZSC02913
          CLEAR     ZSC02914
          CLEAR     ZSC02915
          CLEAR     ZSC03001
          CLEAR     ZSC03002
          CLEAR     ZSC03003
          CLEAR     ZSC03004
          CLEAR     ZSC03005
          CLEAR     ZSC03006
          CLEAR     ZSC03007
          CLEAR     ZSC03008
          CLEAR     ZSC03009
          CLEAR     ZSC03010
          CLEAR     ZSC03011
          CLEAR     ZSC03012
          CLEAR     ZSC03013
          CLEAR     ZSC03014
          CLEAR     ZSC03015
          CLEAR     ZSC03101
          CLEAR     ZSC03102
          CLEAR     ZSC03103
          CLEAR     ZSC03104
          CLEAR     ZSC03105
          CLEAR     ZSC03106
          CLEAR     ZSC03107
          CLEAR     ZSC03108
          CLEAR     ZSC03109
          CLEAR     ZSC03110
          CLEAR     ZSC03111
          CLEAR     ZSC03112
          CLEAR     ZSC03113
          CLEAR     ZSC03114
          CLEAR     ZSC03115
          CLEAR     ZSC03201
          CLEAR     ZSC03202
          CLEAR     ZSC03203
          CLEAR     ZSC03204
          CLEAR     ZSC03205
          CLEAR     ZSC03206
          CLEAR     ZSC03207
          CLEAR     ZSC03208
          CLEAR     ZSC03209
          CLEAR     ZSC03210
          CLEAR     ZSC03211
          CLEAR     ZSC03212
          CLEAR     ZSC03213
          CLEAR     ZSC03214
          CLEAR     ZSC03215
          CLEAR     ZSC03301
          CLEAR     ZSC03302
          CLEAR     ZSC03303
          CLEAR     ZSC03304
          CLEAR     ZSC03305
          CLEAR     ZSC03306
          CLEAR     ZSC03401
          CLEAR     ZSC03402
          CLEAR     ZSC03403
          CLEAR     ZSC03404
          CLEAR     ZSC03405
          CLEAR     ZSC03406
          CLEAR     ZSC03501
          CLEAR     ZSC03502
          CLEAR     ZSC03503
          CLEAR     ZSC03504
          CLEAR     ZSC03505
          CLEAR     ZSC03506
          CLEAR     ZSC03601
          CLEAR     ZSC03602
          CLEAR     ZSC03603
          CLEAR     ZSC03604
          CLEAR     ZSC03605
          CLEAR     ZSC03606
          CLEAR     ZSC03701
          CLEAR     ZSC03702
          CLEAR     ZSC03703
          CLEAR     ZSC03704
          CLEAR     ZSC03705
          CLEAR     ZSC03706
          CLEAR     ZSC03801
          CLEAR     ZSC03802
          CLEAR     ZSC03803
          CLEAR     ZSC03804
          CLEAR     ZSC03805
          CLEAR     ZSC03806
          CLEAR     ZSC03901
          CLEAR     ZSC03902
          CLEAR     ZSC03903
          CLEAR     ZSC03904
          CLEAR     ZSC03905
          CLEAR     ZSC03906
          CLEAR     ZSC04001
          CLEAR     ZSC04002
          CLEAR     ZSC04003
          CLEAR     ZSC04004
          CLEAR     ZSC04005
          CLEAR     ZSC04006
          CLEAR     ZSC04101
          CLEAR     ZSC04201
          CLEAR     ZSC04301
          CLEAR     ZSC04401
          CLEAR     ZSC04501
          CLEAR     ZSC04601
          CLEAR     ZSC04701
          CLEAR     ZSC04801
          CLEAR     ZSC04901
          CLEAR     ZSC04902
          CLEAR     ZSC04903
          CLEAR     ZSC04904
          CLEAR     ZSC04905
          CLEAR     ZSC04906
          CLEAR     ZSC05001
          CLEAR     ZSC05101
          CLEAR     ZSC05201
          CLEAR     ZSC05301
          CLEAR     ZSC05302
          CLEAR     ZSC05303
          CLEAR     ZSC05304
          CLEAR     ZSC05305
          CLEAR     ZSC05306
          CLEAR     ZSC05401
          CLEAR     ZSC05402
          CLEAR     ZSC05403
          CLEAR     ZSC05404
          CLEAR     ZSC05405
          CLEAR     ZSC05406
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 20
            ADD       ONE,COUNTER
            CLEAR     ZSC05501[COUNTER]
            CLEAR     ZSC05601[COUNTER]
            CLEAR     ZSC05701[COUNTER]
            CLEAR     ZSC05801[COUNTER]
            CLEAR     ZSC05901[COUNTER]
            CLEAR     ZSC06001[COUNTER]
          DO
.
          CLEAR     ZSC06101
          CLEAR     ZSC06201
          CLEAR     ZSC06301
          CLEAR     ZSC06401
.
.         Initialise the line counters for comments
.
          MOVE      ZERO,ZSC46CNT
          MOVE      ZERO,ZSC47CNT
.
CZSC9999  RETURN
+
.*****************************************************************************
.*                               CZTR0000          Called by: PROC0000       *
.*                     Clear all ZTR variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CZTR0000  PACK      ZTR00101,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR00102,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR00103,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR00104,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR00105,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR00106,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR00201,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR00301,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR00401,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR00501,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR00601,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR00701,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR00801,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR00802,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR00803,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR00804,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR00805,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR00806,SP100,SP100,SP100,SP100,SP100
.         PACK      ZTR00901,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR01001,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR01002,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR01003,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR01004,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR01005,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR01006,SP100,SP100,SP100,SP100,SP100
.         PACK      ZTR01101,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR01201,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR01202,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR01203,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR01204,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR01205,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR01206,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR01301,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR01302,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR01303,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR01304,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR01305,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR01306,SP100,SP100,SP100,SP100,SP100
.         PACK      ZTR01401,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR01501,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR01502,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR01503,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR01504,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR01505,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR01506,SP100,SP100,SP100,SP100,SP100
.         PACK      ZTR01601,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR01701,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR01702,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR01703,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR01704,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR01705,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR01706,SP100,SP100,SP100,SP100,SP100
.         PACK      ZTR01801,SP100,SP100,SP100,SP100,SP100
.         PACK      ZTR01901,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR02001,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR02002,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR02003,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR02004,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR02005,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR02006,SP100,SP100,SP100,SP100,SP100
.         PACK      ZTR02101,SP100,SP100,SP100,SP100,SP100
.         PACK      ZTR02201,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR02301,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR02302,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR02303,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR02304,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR02305,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR02306,SP100,SP100,SP100,SP100,SP100
.         PACK      ZTR02401,SP100,SP100,SP100,SP100,SP100
.         PACK      ZTR02501,SP100,SP100,SP100,SP100,SP100
.         PACK      ZTR02601,SP100,SP100,SP100,SP100,SP100
.         PACK      ZTR02701,SP100,SP100,SP100,SP100,SP100
.         PACK      ZTR02801,SP100,SP100,SP100,SP100,SP100
.         PACK      ZTR02901,SP100,SP100,SP100,SP100,SP100
.         PACK      ZTR03001,SP100,SP100,SP100,SP100,SP100
.         PACK      ZTR03101,SP100,SP100,SP100,SP100,SP100
.         PACK      ZTR03201,SP100,SP100,SP100,SP100,SP100
.         PACK      ZTR03301,SP100,SP100,SP100,SP100,SP100
.         PACK      ZTR03401,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR03501,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR03502,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR03503,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR03504,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR03505,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR03506,SP100,SP100,SP100,SP100,SP100
.         PACK      ZTR03601,SP100,SP100,SP100,SP100,SP100
.         PACK      ZTR03701,SP100,SP100,SP100,SP100,SP100
.         PACK      ZTR03801,SP100,SP100,SP100,SP100,SP100
.         PACK      ZTR03901,SP100,SP100,SP100,SP100,SP100
.         PACK      ZTR04001,SP100,SP100,SP100,SP100,SP100
.         PACK      ZTR04101,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04201,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04202,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04203,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04204,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04205,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04206,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04301,SP100,SP100,SP100,SP100,SP100
.         PACK      ZTR04401,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04501,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04601,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04602,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04603,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04604,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04605,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04606,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04701,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04702,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04703,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04704,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04705,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04706,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04707,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04708,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04709,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04710,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04711,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04712,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04713,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04714,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04715,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04801,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04802,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04803,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04804,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04805,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04806,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04901,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04902,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04903,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04904,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04905,SP100,SP100,SP100,SP100,SP100
          PACK      ZTR04906,SP100,SP100,SP100,SP100,SP100

.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     ZTR00101
          CLEAR     ZTR00102
          CLEAR     ZTR00103
          CLEAR     ZTR00104
          CLEAR     ZTR00105
          CLEAR     ZTR00106
          CLEAR     ZTR00201
          CLEAR     ZTR00301
          CLEAR     ZTR00401
          CLEAR     ZTR00501
          CLEAR     ZTR00601
          CLEAR     ZTR00701
          CLEAR     ZTR00801
          CLEAR     ZTR00802
          CLEAR     ZTR00803
          CLEAR     ZTR00804
          CLEAR     ZTR00805
          CLEAR     ZTR00806
.         CLEAR     ZTR00901
          CLEAR     ZTR01001
          CLEAR     ZTR01002
          CLEAR     ZTR01003
          CLEAR     ZTR01004
          CLEAR     ZTR01005
          CLEAR     ZTR01006
.         CLEAR     ZTR01101
          CLEAR     ZTR01201
          CLEAR     ZTR01202
          CLEAR     ZTR01203
          CLEAR     ZTR01204
          CLEAR     ZTR01205
          CLEAR     ZTR01206
          CLEAR     ZTR01301
          CLEAR     ZTR01302
          CLEAR     ZTR01303
          CLEAR     ZTR01304
          CLEAR     ZTR01305
          CLEAR     ZTR01306
.         CLEAR     ZTR01401
          CLEAR     ZTR01501
          CLEAR     ZTR01502
          CLEAR     ZTR01503
          CLEAR     ZTR01504
          CLEAR     ZTR01505
          CLEAR     ZTR01506
.         CLEAR     ZTR01601
          CLEAR     ZTR01701
          CLEAR     ZTR01702
          CLEAR     ZTR01703
          CLEAR     ZTR01704
          CLEAR     ZTR01705
          CLEAR     ZTR01706
.         CLEAR     ZTR01801
.         CLEAR     ZTR01901
          CLEAR     ZTR02001
          CLEAR     ZTR02002
          CLEAR     ZTR02003
          CLEAR     ZTR02004
          CLEAR     ZTR02005
          CLEAR     ZTR02006
.         CLEAR     ZTR02101
.         CLEAR     ZTR02201
          CLEAR     ZTR02301
          CLEAR     ZTR02302
          CLEAR     ZTR02303
          CLEAR     ZTR02304
          CLEAR     ZTR02305
          CLEAR     ZTR02306
.         CLEAR     ZTR02401
.         CLEAR     ZTR02501
.         CLEAR     ZTR02601
.         CLEAR     ZTR02701
.         CLEAR     ZTR02801
.         CLEAR     ZTR02901
.         CLEAR     ZTR03001
.         CLEAR     ZTR03101
.         CLEAR     ZTR03201
.         CLEAR     ZTR03301
.         CLEAR     ZTR03401
          CLEAR     ZTR03501
          CLEAR     ZTR03502
          CLEAR     ZTR03503
          CLEAR     ZTR03504
          CLEAR     ZTR03505
          CLEAR     ZTR03506
.         CLEAR     ZTR03601
.         CLEAR     ZTR03701
.         CLEAR     ZTR03801
.         CLEAR     ZTR03901
.         CLEAR     ZTR04001
.         CLEAR     ZTR04101
          CLEAR     ZTR04201
          CLEAR     ZTR04202
          CLEAR     ZTR04203
          CLEAR     ZTR04204
          CLEAR     ZTR04205
          CLEAR     ZTR04206
          CLEAR     ZTR04301
.         CLEAR     ZTR04401
          CLEAR     ZTR04501
          CLEAR     ZTR04601
          CLEAR     ZTR04602
          CLEAR     ZTR04603
          CLEAR     ZTR04604
          CLEAR     ZTR04605
          CLEAR     ZTR04606
          CLEAR     ZTR04701
          CLEAR     ZTR04702
          CLEAR     ZTR04703
          CLEAR     ZTR04704
          CLEAR     ZTR04705
          CLEAR     ZTR04706
          CLEAR     ZTR04707
          CLEAR     ZTR04708
          CLEAR     ZTR04709
          CLEAR     ZTR04710
          CLEAR     ZTR04711
          CLEAR     ZTR04712
          CLEAR     ZTR04713
          CLEAR     ZTR04714
          CLEAR     ZTR04715
          CLEAR     ZTR04801
          CLEAR     ZTR04802
          CLEAR     ZTR04803
          CLEAR     ZTR04804
          CLEAR     ZTR04805
          CLEAR     ZTR04806
          CLEAR     ZTR04901
          CLEAR     ZTR04902
          CLEAR     ZTR04903
          CLEAR     ZTR04904
          CLEAR     ZTR04905
          CLEAR     ZTR04906
.
CZTR9999  RETURN
+
.*****************************************************************************
.*                               CZNT0000          Called by: PROC0000       *
.*                     Clear all ZNT variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CZNT0000  PACK      ZNT00101,SP100,SP100,SP100,SP100,SP100
          PACK      ZNT00201,SP100,SP100,SP100,SP100,SP100
          PACK      ZNT00301,SP100,SP100,SP100,SP100,SP100
          PACK      ZNT00401,SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100
          PACK      ZNT00501,SP100,SP100,SP100,SP100,SP100
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     ZNT00101
          CLEAR     ZNT00201
          CLEAR     ZNT00301
          CLEAR     ZNT00401
          CLEAR     ZNT00501
.
CZNT9999  RETURN
+
.*****************************************************************************
.*                               CRGS0000          Called by: PROC0000       *
.*                     Clear all RGS variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CRGS0000  MOVE      SP100,RGS00101
          MOVE      SP100,RGS00201
          MOVE      SP100,RGS00301
          MOVE      SP100,RGS00302
          MOVE      SP100,RGS00303
          MOVE      SP100,RGS00304
          MOVE      SP100,RGS00305
          MOVE      SP100,RGS00306
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     RGS00101
          CLEAR     RGS00201
          CLEAR     RGS00301
          CLEAR     RGS00302
          CLEAR     RGS00303
          CLEAR     RGS00304
          CLEAR     RGS00305
          CLEAR     RGS00306
.
CRGS9999  RETURN
+
.*****************************************************************************
.*                           RFLD0000              Called by: GCHR0000       *
.*           Reset the HL7 component field just loaded        PROC0000       *
.*****************************************************************************
.
RFLD0000  PERFORM   SEGNUMBR,RMSH0000:           * MSH
                             REVN0000:           * EVN
                             RPID0000:           * PID
                             RNK10000:           * NK1
                             RPV10000:           * PV1
                             RMRG0000:           * MRG
                             RFT10000:           * FT1
                             RZXP0000:           * ZXP
                             RZAL0000:           * ZAL
                             RRF10000:           * RF1
                             RPRD0000:           * PRD
                             RZXV0000:           * ZXV
                             RPV20000:           * PV2
                             RMFI0000:           * MFI
                             RMFE0000:           * MFE
                             RSTF0000:           * STF
                             RPRA0000:           * PRA
                             RZPR0000:           * ZPR
                             RPR10000:           * PR1
                             RROL0000:           * ROL
                             RDG10000:           * DG1
                             RZST0000:           * ZST
                             RZSF0000:           * ZSF
                             RSCH0000:           * SCH
                             RRGS0000:           * RGS
                             RZSC0000:           * ZSC
                             RZFT0000:           * ZFT
                             RNTE0000:           * NTE
                             RARQ0000:           * ARQ
                             RGT10000:           * GT1
                             RIN10000:           * IN1
                             RAIS0000:           * AIS
                             RAIL0000:           * AIL
                             RAIP0000:           * AIP
                             RZTR0000:           * ZTR
                             RZNT0000            * ZNT
.
RFLD9999  RETURN
+
.*****************************************************************************
.*                              RMSH0000           Called by: RFLD0000       *
.*                      Reset all MSH variables                              *
.*    Also need to save some variables to send back in the acknowledgement   *
.*    message.                                                               *
.*****************************************************************************
.
RMSH0000  BRANCH    FIELDNO,RMSH0100:            * Field Separator
                            RMSH0200:            * Encoding Characters
                            RMSH0300:            * Sending Application
                            RMSH0400:            * Sending Facility
                            RMSH0500:            * Receiving Application
                            RMSH0600:            * Receiving Facility
                            RMSH0700:            * Date/Time of Message
                            RMSH0800:            * Security
                            RMSH0900:            * Message Type
                            RMSH1000:            * Message Control ID
                            RMSH1100:            * Processing ID
                            RMSH1200:            * Version ID
                            RMSH1300:            * Sequence Number
                            RMSH1400:            * Continuation Pointer
                            RMSH1500:            * Accept Acknowledgement Type
                            RMSH1600:            * Applic'n Acknowledgment Type
                            RMSH1700:            * Country Code
                            RMSH1800:            * Character Set
                            RMSH1900:            * Principal Language of Message
                            RMSH2000:            * Alt. Char. Set Hand. Scheme
                            RMSH2100             * Conformance Statement ID
          GOTO      RMSH9999
.
.         MSH.1 - Field Separator (already set)
.
RMSH0100  GOTO      RMSH9999
.
.         MSH.2 - Encoding Characters
.
RMSH0200  BRANCH    COMPCNT,RMSH0201
          GOTO      RMSH9999
.
RMSH0201  RESET     MSH00201
          GOTO      RMSH9999
.
.         MSH.3 - Sending Application
.
RMSH0300  BRANCH    COMPCNT,RMSH0301:
                            RMSH0302:
                            RMSH0303
          GOTO      RMSH9999
.
RMSH0301  RESET     MSH00301
          MOVE      MSH00301,SAVAPPLI
          GOTO      RMSH9999
.
RMSH0302  RESET     MSH00302
          STRIP     SAVAPPLI
          ENDSET    SAVAPPLI
          APPEND    CARET,SAVAPPLI
          APPEND    MSH00302,SAVAPPLI
          RESET     SAVAPPLI
          GOTO      RMSH9999
.
RMSH0303  RESET     MSH00303
          STRIP     SAVAPPLI
          ENDSET    SAVAPPLI
          APPEND    CARET,SAVAPPLI
          APPEND    MSH00303,SAVAPPLI
          RESET     SAVAPPLI
          GOTO      RMSH9999
.
.         MSH.4 - Sending Facility
.
RMSH0400  BRANCH    COMPCNT,RMSH0401:
                            RMSH0402:
                            RMSH0403 
          GOTO      RMSH9999
.
RMSH0401  RESET     MSH00401
          MOVE      MSH00401,SAVFACIL
          GOTO      RMSH9999
.
RMSH0402  RESET     MSH00402
          STRIP     SAVFACIL
          ENDSET    SAVFACIL
          APPEND    CARET,SAVFACIL
          APPEND    MSH00402,SAVFACIL
          RESET     SAVFACIL
          GOTO      RMSH9999
.
RMSH0403  RESET     MSH00403
          STRIP     SAVFACIL
          ENDSET    SAVFACIL
          APPEND    CARET,SAVFACIL
          APPEND    MSH00403,SAVFACIL
          RESET     SAVFACIL
          GOTO      RMSH9999
.
.         MSH.5 - Receiving Application
.
RMSH0500  BRANCH    COMPCNT,RMSH0501:
                            RMSH0502:
                            RMSH0503
          GOTO      RMSH9999
.
RMSH0501  RESET     MSH00501
          GOTO      RMSH9999
.
RMSH0502  RESET     MSH00502
          GOTO      RMSH9999
.
RMSH0503  RESET     MSH00503
          GOTO      RMSH9999
.
.         MSH.6 - Receiving Facility
.
RMSH0600  BRANCH    COMPCNT,RMSH0601:
                            RMSH0602:
                            RMSH0603
          GOTO      RMSH9999
.
RMSH0601  RESET     MSH00601
          GOTO      RMSH9999
.
RMSH0602  RESET     MSH00602
          GOTO      RMSH9999
.
RMSH0603  RESET     MSH00603
          GOTO      RMSH9999
.
.         MSH.7 - Date/Time of Message
.
RMSH0700  BRANCH    COMPCNT,RMSH0701
          GOTO      RMSH9999
.
RMSH0701  RESET     MSH00701
          GOTO      RMSH9999
.
.         MSH.8 - Security
.
RMSH0800  BRANCH    COMPCNT,RMSH0801
          GOTO      RMSH9999
.
RMSH0801  RESET     MSH00801
          GOTO      RMSH9999
.
.         MSH.9 - Message Type
.
RMSH0900  BRANCH    COMPCNT,RMSH0901:
                            RMSH0902:
                            RMSH0903
          GOTO      RMSH9999
.
RMSH0901  RESET     MSH00901
          GOTO      RMSH9999
.
RMSH0902  RESET     MSH00902
          GOTO      RMSH9999
.
RMSH0903  RESET     MSH00903
          GOTO      RMSH9999
.
.         MSH.10 - Message Control ID
.
RMSH1000  BRANCH    COMPCNT,RMSH1001
          GOTO      RMSH9999
.
RMSH1001  RESET     MSH01001
          MOVE      MSH01001,SAVMESID
          GOTO      RMSH9999
.
.         MSH.11 - Processing ID
.
RMSH1100  BRANCH    COMPCNT,RMSH1101:
                            RMSH1102
          GOTO      RMSH9999
.
RMSH1101  RESET     MSH01101
          MOVE      MSH01101,SAVMHPID
          GOTO      RMSH9999
.
RMSH1102  RESET     MSH01102
          GOTO      RMSH9999
.
.         MSH.12 - Version ID
.
RMSH1200  BRANCH    COMPCNT,RMSH1201:
                            RMSH1202:
                            RMSH1203
          GOTO      RMSH9999
.
RMSH1201  RESET     MSH01201
          GOTO      RMSH9999
.
RMSH1202  RESET     MSH01202
          GOTO      RMSH9999
.
RMSH1203  RESET     MSH01203
          GOTO      RMSH9999
.
.         MSH.13 - Sequence Number
.
RMSH1300  BRANCH    COMPCNT,RMSH1301
          GOTO      RMSH9999
.
RMSH1301  RESET     MSH01301
          GOTO      RMSH9999
.
.         MSH.14 - Continuation Pointer
.
RMSH1400  BRANCH    COMPCNT,RMSH1401
          GOTO      RMSH9999
.
RMSH1401  RESET     MSH01401
          GOTO      RMSH9999
.
.         MSH.15 - Accept Acknowledgement Type
.
RMSH1500  BRANCH    COMPCNT,RMSH1501
          GOTO      RMSH9999
.
RMSH1501  RESET     MSH01501
          GOTO      RMSH9999
.
.         MSH.16 - Application Acknowledgment Type
.
RMSH1600  BRANCH    COMPCNT,RMSH1601
          GOTO      RMSH9999
.
RMSH1601  RESET     MSH01601
          GOTO      RMSH9999
.
.         MSH.17 - Country Code
.
RMSH1700  BRANCH    COMPCNT,RMSH1701
          GOTO      RMSH9999
.
RMSH1701  RESET     MSH01701
          GOTO      RMSH9999
.
.         MSH.18 - Character Set
.
RMSH1800  BRANCH    COMPCNT,RMSH1801
          GOTO      RMSH9999
.
RMSH1801  RESET     MSH01801
          GOTO      RMSH9999
.
.         MSH.19 - Principal Language of Message
.
RMSH1900  BRANCH    COMPCNT,RMSH1901:
                            RMSH1902:
                            RMSH1903:
                            RMSH1904:
                            RMSH1905:
                            RMSH1906
          GOTO      RMSH9999
.
RMSH1901  RESET     MSH01901
          GOTO      RMSH9999
.
RMSH1902  RESET     MSH01902
          GOTO      RMSH9999
.
RMSH1903  RESET     MSH01903
          GOTO      RMSH9999
.
RMSH1904  RESET     MSH01904
          GOTO      RMSH9999
.
RMSH1905  RESET     MSH01905
          GOTO      RMSH9999
.
RMSH1906  RESET     MSH01906
          GOTO      RMSH9999
.
.         MSH.20 - Alternate Character Set Handling Scheme
.
RMSH2000  BRANCH    COMPCNT,RMSH2001
          GOTO      RMSH9999
.
RMSH2001  RESET     MSH02001
          GOTO      RMSH9999
.
.         MSH.21 - Conformance Statement ID (HL7 2.4 only)
.
RMSH2100  BRANCH    COMPCNT,RMSH2101
          GOTO      RMSH9999
.
RMSH2101  RESET     MSH02101
          GOTO      RMSH9999
.
RMSH9999  RETURN
+
.*****************************************************************************
.*                              REVN0000           Called by: RFLD0000       *
.*                         Reset all EVN variables                           *
.*****************************************************************************
.
REVN0000  BRANCH    FIELDNO,REVN0100:            * event type code
                            REVN0200:            * recorded date/time
                            REVN0300:            * date/time planned event
                            REVN0400:            * event reason code
                            REVN0500:            * operator id
                            REVN0600             * event occurred
          GOTO      REVN9999
.
.         EVN.1 - Event Type Code
.
REVN0100  BRANCH    COMPCNT,REVN0101
          GOTO      REVN9999
.
REVN0101  RESET     EVN00101
          GOTO      REVN9999
.
.         EVN.2 - Recorded Date/Time
.
REVN0200  BRANCH    COMPCNT,REVN0201
          GOTO      REVN9999
.
REVN0201  RESET     EVN00201
          GOTO      REVN9999
.
.         EVN.3 - Date/Time Planned Event
.
REVN0300  BRANCH    COMPCNT,REVN0301
          GOTO      REVN9999
.
REVN0301  RESET     EVN00301
          GOTO      REVN9999
.
.         EVN.4 - Event Reason Code
.
REVN0400  BRANCH    COMPCNT,REVN0401
          GOTO      REVN9999
.
REVN0401  RESET     EVN00401
          GOTO      REVN9999
.
.         EVN.5 - Operator ID
.
REVN0500  BRANCH    COMPCNT,REVN0501:
                            REVN0502:
                            REVN0503:
                            REVN0504:
                            REVN0505:
                            REVN0506:
                            REVN0507:
                            REVN0508:
                            REVN0509:
                            REVN0510:
                            REVN0511:
                            REVN0512:
                            REVN0513:
                            REVN0514:
                            REVN0515 
          GOTO      REVN9999
.
REVN0501  RESET     EVN00501
          GOTO      REVN9999
.
REVN0502  RESET     EVN00502
          GOTO      REVN9999
.
REVN0503  RESET     EVN00503
          GOTO      REVN9999
.
REVN0504  RESET     EVN00504
          GOTO      REVN9999
.
REVN0505  RESET     EVN00505
          GOTO      REVN9999
.
REVN0506  RESET     EVN00506
          GOTO      REVN9999
.
REVN0507  RESET     EVN00507
          GOTO      REVN9999
.
REVN0508  RESET     EVN00508
          GOTO      REVN9999
.
REVN0509  RESET     EVN00509
          GOTO      REVN9999
.
REVN0510  RESET     EVN00510
          GOTO      REVN9999
.
REVN0511  RESET     EVN00511
          GOTO      REVN9999
.
REVN0512  RESET     EVN00512
          GOTO      REVN9999
.
REVN0513  RESET     EVN00513
          GOTO      REVN9999
.
REVN0514  RESET     EVN00514
          GOTO      REVN9999
.
REVN0515  RESET     EVN00515
          GOTO      REVN9999
.
.         EVN.6 - Event Occurred
.
REVN0600  BRANCH    COMPCNT,REVN0601
          GOTO      REVN9999
.
REVN0601  RESET     EVN00601
          GOTO      REVN9999
.
REVN9999  RETURN
+
.*****************************************************************************
.*                              RPID0000           Called by: RFLD0000       *
.*                         Reset all PID variables                           *
.*****************************************************************************
.
RPID0000  BRANCH    FIELDNO,RPID0100:            * set id
                            RPID0200:            * patient id
                            RPID0300:            * patient identifier list
                            RPID0400:            * alternate patient id
                            RPID0500:            * patient name
                            RPID0600:            * mother's maiden name
                            RPID0700:            * date/time of birth
                            RPID0800:            * sex
                            RPID0900:            * patient alias
                            RPID1000:            * race
                            RPID1100:            * patient address
                            RPID1200:            * county code
                            RPID1300:            * phone number - home
                            RPID1400:            * phone number - business
                            RPID1500:            * primary language
                            RPID1600:            * marital status
                            RPID1700:            * religion
                            RPID1800:            * patient account number
                            RPID1900:            * ssn number
                            RPID2000:            * driver's license number
                            RPID2100:            * mother's identifier
                            RPID2200:            * ethnic group
                            RPID2300:            * birth place
                            RPID2400:            * multiple birth indicator
                            RPID2500:            * birth order
                            RPID2600:            * citizenship
                            RPID2700:            * veterans military status
                            RPID2800:            * nationality
                            RPID2900:            * patient death date/time
                            RPID3000             * patient death indicator
          GOTO      RPID9999
.
.         PID.1 - Set Id
.
RPID0100  BRANCH    COMPCNT,RPID0101
          GOTO      RPID9999
.
RPID0101  RESET     PID00101
          GOTO      RPID9999
.
.         PID.2 - Patient Id
.
RPID0200  BRANCH    COMPCNT,RPID0201:
                            RPID0202:
                            RPID0203:
                            RPID0204:
                            RPID0205:
                            RPID0206 
          GOTO      RPID9999
.
RPID0201  RESET     PID00201
          GOTO      RPID9999
.
RPID0202  RESET     PID00202
          GOTO      RPID9999
.
RPID0203  RESET     PID00203
          GOTO      RPID9999
.
RPID0204  RESET     PID00204
          GOTO      RPID9999
.
RPID0205  RESET     PID00205
          GOTO      RPID9999
.
RPID0206  RESET     PID00206
          GOTO      RPID9999
.
.         PID.3 - Patient Identifier List
.                 (maximum of 10 repeats - 11 identifiers in total)
.
RPID0300  COMPARE   REPTNCNT,TEN1                * maximum repeats reached ?
          GOTO      RPID9999 IF LESS             * yes
.
          BRANCH    COMPCNT,RPID0301:
                            RPID0302:
                            RPID0303:
                            RPID0304:
                            RPID0305:
                            RPID0306 
          GOTO      RPID9999
.
RPID0301  RESET     PID00301[REPTNCNT]
          MOVE      PID00301[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID00301[REPTNCNT]
          GOTO      RPID9999
.
RPID0302  RESET     PID00302[REPTNCNT]
          GOTO      RPID9999
.
RPID0303  RESET     PID00303[REPTNCNT]
          GOTO      RPID9999
.
RPID0304  RESET     PID00304[REPTNCNT]
          GOTO      RPID9999
.
RPID0305  RESET     PID00305[REPTNCNT]
          GOTO      RPID9999
.
RPID0306  RESET     PID00306[REPTNCNT]
          GOTO      RPID9999
.
.         PID.4 - Alternate Patient Id
.
RPID0400  BRANCH    COMPCNT,RPID0401:
                            RPID0402:
                            RPID0403:
                            RPID0404:
                            RPID0405:
                            RPID0406 
          GOTO      RPID9999
.
RPID0401  RESET     PID00401
          GOTO      RPID9999
.
RPID0402  RESET     PID00402
          GOTO      RPID9999
.
RPID0403  RESET     PID00403
          GOTO      RPID9999
.
RPID0404  RESET     PID00404
          GOTO      RPID9999
.
RPID0405  RESET     PID00405
          GOTO      RPID9999
.
RPID0406  RESET     PID00406
          GOTO      RPID9999
.
.         PID.5 - Patient Name
.                 (zero repeats - 1 name in total)
.
RPID0500  COMPARE   REPTNCNT,ONE                 * maximum repeats reached ?
          GOTO      RPID9999 IF LESS             * yes
.
          BRANCH    COMPCNT,RPID0501:
                            RPID0502:
                            RPID0503:
                            RPID0504:
                            RPID0505:
                            RPID0506:
                            RPID0507:
                            RPID0508 
          GOTO      RPID9999
.
RPID0501  RESET     PID00501
          REP       UPPLOW,PID00501
          MOVE      PID00501,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID00501
          MATCH     BLANKSTR,PID00501
          IF        !@EQUAL
            REP       "#"'",PID00501
          ENDIF
          GOTO      RPID9999
.
RPID0502  RESET     PID00502
          REP       UPPLOW,PID00502
          MOVE      PID00502,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID00502
          MATCH     BLANKSTR,PID00502
          IF        !@EQUAL
            REP       "#"'",PID00502
          ENDIF
          GOTO      RPID9999
.
RPID0503  RESET     PID00503
          REP       UPPLOW,PID00503
          MOVE      PID00503,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID00503
          MATCH     BLANKSTR,PID00503
          IF        !@EQUAL
            REP       "#"'",PID00503
          ENDIF
          GOTO      RPID9999
.
RPID0504  RESET     PID00504
          GOTO      RPID9999
.
RPID0505  RESET     PID00505
          MOVE      PID00505,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID00505
          GOTO      RPID9999
.
RPID0506  RESET     PID00506
          GOTO      RPID9999
.
RPID0507  RESET     PID00507
          GOTO      RPID9999
.
RPID0508  RESET     PID00508
          GOTO      RPID9999
.
.         PID.6 - Mother's Maiden Name
.
RPID0600  BRANCH    COMPCNT,RPID0601:
                            RPID0602:
                            RPID0603:
                            RPID0604:
                            RPID0605:
                            RPID0606:
                            RPID0607:
                            RPID0608 
          GOTO      RPID9999
.
RPID0601  RESET     PID00601
          GOTO      RPID9999
.
RPID0602  RESET     PID00602
          GOTO      RPID9999
.
RPID0603  RESET     PID00603
          GOTO      RPID9999
.
RPID0604  RESET     PID00604
          GOTO      RPID9999
.
RPID0605  RESET     PID00605
          GOTO      RPID9999
.
RPID0606  RESET     PID00606
          GOTO      RPID9999
.
RPID0607  RESET     PID00607
          GOTO      RPID9999
.
RPID0608  RESET     PID00608
          GOTO      RPID9999
.
.         PID.7 - Date/Time of Birth
.
RPID0700  BRANCH    COMPCNT,RPID0701
          GOTO      RPID9999
.
RPID0701  RESET     PID00701
          GOTO      RPID9999
.
.         PID.8 - Sex
.
RPID0800  BRANCH    COMPCNT,RPID0801
          GOTO      RPID9999
.
RPID0801  RESET     PID00801
          GOTO      RPID9999
.
.         PID.9 - Patient Alias
.                 (maximum of 79 repeats - 80 aliases in total)
.
RPID0900  COMPARE   REPTNCNT,EIGHTY              * maximum repeats reached ?
          GOTO      RPID9999 IF LESS             * yes
.
          BRANCH    COMPCNT,RPID0901:
                            RPID0902:
                            RPID0903:
                            RPID0904:
                            RPID0905:
                            RPID0906:
                            RPID0907:
                            RPID0908 
          GOTO      RPID9999
.
RPID0901  RESET     PID00901[REPTNCNT]
          REP       UPPLOW,PID00901[REPTNCNT]
          MOVE      PID00901[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID00901[REPTNCNT]
          GOTO      RPID9999
.
RPID0902  RESET     PID00902[REPTNCNT]
          REP       UPPLOW,PID00902[REPTNCNT]
          MOVE      PID00902[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID00902[REPTNCNT]
          GOTO      RPID9999
.
RPID0903  RESET     PID00903[REPTNCNT]
          REP       UPPLOW,PID00903[REPTNCNT]
          MOVE      PID00903[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID00903[REPTNCNT]
          GOTO      RPID9999
.
RPID0904  RESET     PID00904[REPTNCNT]
          GOTO      RPID9999
.
RPID0905  RESET     PID00905[REPTNCNT]
          GOTO      RPID9999
.
RPID0906  RESET     PID00906[REPTNCNT]
          GOTO      RPID9999
.
RPID0907  RESET     PID00907[REPTNCNT]
          GOTO      RPID9999
.
RPID0908  RESET     PID00908[REPTNCNT]
          GOTO      RPID9999
.
.         PID.10 - Race
.
RPID1000  BRANCH    COMPCNT,RPID1001:
                            RPID1002:
                            RPID1003:
                            RPID1004:
                            RPID1005:
                            RPID1006 
          GOTO      RPID9999
.
RPID1001  RESET     PID01001
          GOTO      RPID9999
.
RPID1002  RESET     PID01002
          GOTO      RPID9999
.
RPID1003  RESET     PID01003
          GOTO      RPID9999
.
RPID1004  RESET     PID01004
          GOTO      RPID9999
.
RPID1005  RESET     PID01005
          GOTO      RPID9999
.
RPID1006  RESET     PID01006
          GOTO      RPID9999
.
.         PID.11 - Patient Address
.                  (maximum of 1 repeat - 2 addresses in total)
.
RPID1100  COMPARE   REPTNCNT,TWO                 * maximum repeats reached ?
          GOTO      RPID9999 IF LESS             * yes
.
          BRANCH    COMPCNT,RPID1101:
                            RPID1102:
                            RPID1103:
                            RPID1104:
                            RPID1105:
                            RPID1106:
                            RPID1107:
                            RPID1108:
                            RPID1109:
                            RPID1110:
                            RPID1111
          GOTO      RPID9999
.
RPID1101  RESET     PID01101[REPTNCNT]
          MOVE      PID01101[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID01101[REPTNCNT]
          REP       UPPLOW,PID01101[REPTNCNT]
          MATCH     BLANKSTR,PID01101[REPTNCNT]
          IF        !@EQUAL
            REP       "#"'",PID01101[REPTNCNT]
          ENDIF
          GOTO      RPID9999
.
RPID1102  RESET     PID01102[REPTNCNT]
          MOVE      PID01102[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID01102[REPTNCNT]
          REP       UPPLOW,PID01102[REPTNCNT]
          MATCH     BLANKSTR,PID01102[REPTNCNT]
          IF        !@EQUAL
            REP       "#"'",PID01102[REPTNCNT]
          ENDIF
          GOTO      RPID9999
.
RPID1103  RESET     PID01103[REPTNCNT]
          MOVE      PID01103[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID01103[REPTNCNT]
          REP       UPPLOW,PID01103[REPTNCNT]
          MATCH     BLANKSTR,PID01103[REPTNCNT]
          IF        !@EQUAL
            REP       "#"'",PID01103[REPTNCNT]
          ENDIF
          GOTO      RPID9999
.
RPID1104  RESET     PID01104[REPTNCNT]
          MOVE      PID01104[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID01104[REPTNCNT]
          REP       UPPLOW,PID01104[REPTNCNT]
          MATCH     BLANKSTR,PID01104[REPTNCNT]
          IF        !@EQUAL
            REP       "#"'",PID01104[REPTNCNT]
          ENDIF
          GOTO      RPID9999
.
RPID1105  RESET     PID01105[REPTNCNT]
          MOVE      PID01105[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID01105[REPTNCNT]
          GOTO      RPID9999
.
RPID1106  RESET     PID01106[REPTNCNT]
          MOVE      PID01106[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID01106[REPTNCNT]
          GOTO      RPID9999
.
RPID1107  RESET     PID01107[REPTNCNT]
          GOTO      RPID9999
.
RPID1108  RESET     PID01108[REPTNCNT]
          GOTO      RPID9999
.
RPID1109  RESET     PID01109[REPTNCNT]
          GOTO      RPID9999
.
RPID1110  RESET     PID01110[REPTNCNT]
          GOTO      RPID9999
.
RPID1111  RESET     PID01111[REPTNCNT]
          GOTO      RPID9999
.
.         PID.12 - County Code
.
RPID1200  BRANCH    COMPCNT,RPID1201
          GOTO      RPID9999
.
RPID1201  RESET     PID01201
          GOTO      RPID9999
.
.         PID.13 - Phone Number - Home
.                  (maximum of 1 repeat - 2 phone numbers in total)
.
RPID1300  COMPARE   REPTNCNT,TWO                 * maximum repeats reached ?
          GOTO      RPID9999 IF LESS             * yes
.
          BRANCH    COMPCNT,RPID1301:
                            RPID1302:
                            RPID1303:
                            RPID1304:
                            RPID1305:
                            RPID1306:
                            RPID1307:
                            RPID1308:
                            RPID1309
          GOTO      RPID9999
.
RPID1301  RESET     PID01301[REPTNCNT]
          GOTO      RPID9999
.
RPID1302  RESET     PID01302[REPTNCNT]
          GOTO      RPID9999
.
RPID1303  RESET     PID01303[REPTNCNT]
          GOTO      RPID9999
.
RPID1304  RESET     PID01304[REPTNCNT]
          GOTO      RPID9999
.
RPID1305  RESET     PID01305[REPTNCNT]
          GOTO      RPID9999
.
RPID1306  RESET     PID01306[REPTNCNT]
          GOTO      RPID9999
.
RPID1307  RESET     PID01307[REPTNCNT]
          MOVE      PID01307[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID01307[REPTNCNT]
          GOTO      RPID9999
.
RPID1308  RESET     PID01308[REPTNCNT]
          GOTO      RPID9999
.
RPID1309  RESET     PID01309[REPTNCNT]
          MOVE      PID01309[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID01309[REPTNCNT]
          GOTO      RPID9999
.
.         PID.14 - Phone Number - Business
.                  (maximum of 1 repeat - 2 phone numbers in total)
.
RPID1400  COMPARE   REPTNCNT,TWO                 * maximum repeats reached ?
          GOTO      RPID9999 IF LESS             * yes
.
          BRANCH    COMPCNT,RPID1401:
                            RPID1402:
                            RPID1403:
                            RPID1404:
                            RPID1405:
                            RPID1406:
                            RPID1407:
                            RPID1408:
                            RPID1409
          GOTO      RPID9999
.
RPID1401  RESET     PID01401[REPTNCNT]
          GOTO      RPID9999
.
RPID1402  RESET     PID01402[REPTNCNT]
          GOTO      RPID9999
.
RPID1403  RESET     PID01403[REPTNCNT]
          GOTO      RPID9999
.
RPID1404  RESET     PID01404[REPTNCNT]
          GOTO      RPID9999
.
RPID1405  RESET     PID01405[REPTNCNT]
          GOTO      RPID9999
.
RPID1406  RESET     PID01406[REPTNCNT]
          GOTO      RPID9999
.
RPID1407  RESET     PID01407[REPTNCNT]
          MOVE      PID01407[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID01407[REPTNCNT]
          GOTO      RPID9999
.
RPID1408  RESET     PID01408[REPTNCNT]
          GOTO      RPID9999
.
RPID1409  RESET     PID01409[REPTNCNT]
          MOVE      PID01409[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID01409[REPTNCNT]
          GOTO      RPID9999
.
.         PID.15 - Primary Language
.
RPID1500  BRANCH    COMPCNT,RPID1501:
                            RPID1502:
                            RPID1503:
                            RPID1504:
                            RPID1505:
                            RPID1506
          GOTO      RPID9999
.
RPID1501  RESET     PID01501
          GOTO      RPID9999
.
RPID1502  RESET     PID01502
          GOTO      RPID9999
.
RPID1503  RESET     PID01503
          GOTO      RPID9999
.
RPID1504  RESET     PID01504
          GOTO      RPID9999
.
RPID1505  RESET     PID01505
          GOTO      RPID9999
.
RPID1506  RESET     PID01506
          GOTO      RPID9999
.
.         PID.16 - Marital Status
.
RPID1600  BRANCH    COMPCNT,RPID1601:
                            RPID1602:
                            RPID1603:
                            RPID1604:
                            RPID1605:
                            RPID1606
          GOTO      RPID9999
.
RPID1601  RESET     PID01601
          GOTO      RPID9999
.
RPID1602  RESET     PID01602
          GOTO      RPID9999
.
RPID1603  RESET     PID01603
          GOTO      RPID9999
.
RPID1604  RESET     PID01604
          GOTO      RPID9999
.
RPID1605  RESET     PID01605
          GOTO      RPID9999
.
RPID1606  RESET     PID01606
          GOTO      RPID9999
.
.         PID.17 - Religion
.
RPID1700  BRANCH    COMPCNT,RPID1701:
                            RPID1702:
                            RPID1703:
                            RPID1704:
                            RPID1705:
                            RPID1706
          GOTO      RPID9999
.
RPID1701  RESET     PID01701
          MOVE      PID01701,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID01701
          GOTO      RPID9999
.
RPID1702  RESET     PID01702
          GOTO      RPID9999
.
RPID1703  RESET     PID01703
          GOTO      RPID9999
.
RPID1704  RESET     PID01704
          GOTO      RPID9999
.
RPID1705  RESET     PID01705
          GOTO      RPID9999
.
RPID1706  RESET     PID01706
          GOTO      RPID9999
.
.         PID.18 - Patient Account Number
.
RPID1800  BRANCH    COMPCNT,RPID1801:
                            RPID1802:
                            RPID1803:
                            RPID1804:
                            RPID1805:
                            RPID1806
          GOTO      RPID9999
.
RPID1801  RESET     PID01801
          GOTO      RPID9999
.
RPID1802  RESET     PID01802
          GOTO      RPID9999
.
RPID1803  RESET     PID01803
          GOTO      RPID9999
.
RPID1804  RESET     PID01804
          GOTO      RPID9999
.
RPID1805  RESET     PID01805
          GOTO      RPID9999
.
RPID1806  RESET     PID01806
          GOTO      RPID9999
.
.         PID.19 - SSN Number
.
RPID1900  BRANCH    COMPCNT,RPID1901
          GOTO      RPID9999
.
RPID1901  RESET     PID01901
          GOTO      RPID9999
.
.         PID.20 - Driver's License Number
.
RPID2000  BRANCH    COMPCNT,RPID2001:
                            RPID2002:
                            RPID2003
          GOTO      RPID9999
.
RPID2001  RESET     PID02001
          GOTO      RPID9999
.
RPID2002  RESET     PID02002
          GOTO      RPID9999
.
RPID2003  RESET     PID02003
          GOTO      RPID9999
.
.         PID.21 - Mother's Identifier
.
RPID2100  BRANCH    COMPCNT,RPID2101:
                            RPID2102:
                            RPID2103:
                            RPID2104:
                            RPID2105:
                            RPID2106
          GOTO      RPID9999
.
RPID2101  RESET     PID02101
          GOTO      RPID9999
.
RPID2102  RESET     PID02102
          GOTO      RPID9999
.
RPID2103  RESET     PID02103
          GOTO      RPID9999
.
RPID2104  RESET     PID02104
          GOTO      RPID9999
.
RPID2105  RESET     PID02105
          GOTO      RPID9999
.
RPID2106  RESET     PID02106
          GOTO      RPID9999
.
.         PID.22 - Ethnic Group
.
RPID2200  BRANCH    COMPCNT,RPID2201:
                            RPID2202:
                            RPID2203:
                            RPID2204:
                            RPID2205:
                            RPID2206
          GOTO      RPID9999
.
RPID2201  RESET     PID02201
          GOTO      RPID9999
.
RPID2202  RESET     PID02202
          GOTO      RPID9999
.
RPID2203  RESET     PID02203
          GOTO      RPID9999
.
RPID2204  RESET     PID02204
          GOTO      RPID9999
.
RPID2205  RESET     PID02205
          GOTO      RPID9999
.
RPID2206  RESET     PID02206
          GOTO      RPID9999
.
.         PID.23 - Birth Place
.
RPID2300  BRANCH    COMPCNT,RPID2301
          GOTO      RPID9999
.
RPID2301  RESET     PID02301
          GOTO      RPID9999
.
.         PID.24 - Multiple Birth Indicator
.
RPID2400  BRANCH    COMPCNT,RPID2401
          GOTO      RPID9999
.
RPID2401  RESET     PID02401
          GOTO      RPID9999
.
.         PID.25 - Birth Order
.
RPID2500  BRANCH    COMPCNT,RPID2501
          GOTO      RPID9999
.
RPID2501  RESET     PID02501
          GOTO      RPID9999
.
.         PID.26 - Citizenship
.
RPID2600  BRANCH    COMPCNT,RPID2601:
                            RPID2602:
                            RPID2603:
                            RPID2604:
                            RPID2605:
                            RPID2606
          GOTO      RPID9999
.
RPID2601  RESET     PID02601
          GOTO      RPID9999
.
RPID2602  RESET     PID02602
          GOTO      RPID9999
.
RPID2603  RESET     PID02603
          GOTO      RPID9999
.
RPID2604  RESET     PID02604
          GOTO      RPID9999
.
RPID2605  RESET     PID02605
          GOTO      RPID9999
.
RPID2606  RESET     PID02606
          GOTO      RPID9999
.
.         PID.27 - Veteran's Military Status
.
RPID2700  BRANCH    COMPCNT,RPID2701:
                            RPID2702:
                            RPID2703:
                            RPID2704:
                            RPID2705:
                            RPID2706
          GOTO      RPID9999
.
RPID2701  RESET     PID02701
          GOTO      RPID9999
.
RPID2702  RESET     PID02702
          GOTO      RPID9999
.
RPID2703  RESET     PID02703
          GOTO      RPID9999
.
RPID2704  RESET     PID02704
          GOTO      RPID9999
.
RPID2705  RESET     PID02705
          GOTO      RPID9999
.
RPID2706  RESET     PID02706
          GOTO      RPID9999
.
.         PID.28 - Nationality
.
RPID2800  BRANCH    COMPCNT,RPID2801:
                            RPID2802:
                            RPID2803:
                            RPID2804:
                            RPID2805:
                            RPID2806
          GOTO      RPID9999
.
RPID2801  RESET     PID02801
          MOVE      PID02801,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID02801
          GOTO      RPID9999
.
RPID2802  RESET     PID02802
          GOTO      RPID9999
.
RPID2803  RESET     PID02803
          GOTO      RPID9999
.
RPID2804  RESET     PID02804
          GOTO      RPID9999
.
RPID2805  RESET     PID02805
          GOTO      RPID9999
.
RPID2806  RESET     PID02806
          GOTO      RPID9999
.
.         PID.29 - Patient Death Date/Time
.
RPID2900  BRANCH    COMPCNT,RPID2901
          GOTO      RPID9999
.
RPID2901  RESET     PID02901
          GOTO      RPID9999
.
.         PID.30 - Patient Death Indicator
.
RPID3000  BRANCH    COMPCNT,RPID3001
          GOTO      RPID9999
.
RPID3001  RESET     PID03001
          GOTO      RPID9999
.
RPID9999  RETURN
+
.*****************************************************************************
.*                                 RNK10000        Called by: PROC0000       *
.*                          Load the NK1 fields                              *
.*****************************************************************************
.
RNK10000  BRANCH    FIELDNO,RNK10100:            * Set ID
                            RNK10200:            * Name
                            RNK10300:            * Relationship
                            RNK10400:            * Address
                            RNK10500:            * Phone Number
                            RNK10600:            * Business Phone Number
                            RNK10700:            * Contact Role
                            RNK10800:            * Start Date
                            RNK10900:            * End Date
                            RNK11000:            * Job Title
                            RNK11100:            * Job Code/Class
                            RNK11200:            * Employee Number
                            RNK11300:            * Organisation Name
                            RNK11400:            * Marital Status
                            RNK11500:            * Sex
                            RNK11600:            * Date/Time of Birth
                            RNK11700:            * Living Dpendency
                            RNK11800:            * Ambulatory Status
                            RNK11900:            * Citizenship
                            RNK12000:            * Primary Language
                            RNK12100:            * Living Arrangement
                            RNK12200:            * Publicity Indicator
                            RNK12300:            * Protection Indicator
                            RNK12400:            * Student Indicator
                            RNK12500:            * Religion
                            RNK12600:            * Mother's Maiden Name
                            RNK12700:            * Nationality
                            RNK12800:            * Ethnic Group
                            RNK12900:            * Contact Reason
                            RNK13000:            * Contact Person's Name
                            RNK13100:            * Contact Person's Phone No.
                            RNK13200:            * Contact Person's Address
                            RNK13300:            * Identifiers
                            RNK13400:            * Job Status
                            RNK13500:            * Race
                            RNK13600:            * Handicap
                            RNK13700             * Social Security Number
          GOTO      RNK19999
.
.         NK1.1 Set ID (SI)
.
RNK10100  BRANCH    COMPCNT,RNK10101
          GOTO      RNK19999
.
RNK10101  RESET     NK100101
          GOTO      RNK19999
.
.         NK1.2 Name (XPN)
.
RNK10200  BRANCH    COMPCNT,RNK10201:            * family name (ST)
                            RNK10202:            * given name (ST)
                            RNK10203:            * middle name (ST)
                            RNK10204:            * suffix (ST)
                            RNK10205:            * prefix (ST)
                            RNK10206:            * degree (IS)
                            RNK10207:            * name type code (ID)
                            RNK10208             * name representation code (ID)
          GOTO      RNK19999
.
RNK10201  RESET     NK100201                     * load family name (ST)
          MOVE      NK100201,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK100201
          GOTO      RNK19999
.
RNK10202  RESET     NK100202                     * load given name (ST)
          MOVE      NK100202,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK100202
          GOTO      RNK19999
.
RNK10203  RESET     NK100203                     * load middle name (ST)
          MOVE      NK100203,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK100203
          GOTO      RNK19999
.
RNK10204  RESET     NK100204                     * load suffix (ST)
          GOTO      RNK19999
.
RNK10205  RESET     NK100205                     * load prefix (ST)
          GOTO      RNK19999
.
RNK10206  RESET     NK100206                     * load degree (IS)
          GOTO      RNK19999
.
RNK10207  RESET     NK100207                     * load name type code (ID)
          GOTO      RNK19999
.
RNK10208  RESET     NK100208                     * load name rep. code (ID)
          GOTO      RNK19999
.
.         NK1.3 Relationship (CE)
.
RNK10300  BRANCH    COMPCNT,RNK10301:            * identifier (ST)
                            RNK10302:            * text (ST)
                            RNK10303:            * name of coding system (ST)
                            RNK10304:            * alternate identifier (ST)
                            RNK10305:            * alternate text (ST)
                            RNK10306             * name of alt. cod. system (ST)
          GOTO      RNK19999
.
RNK10301  RESET     NK100301                     * load identifier (ST)
          MOVE      NK100301,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK100301
          GOTO      RNK19999
.
RNK10302  RESET     NK100302                     * load text (ST)
          GOTO      RNK19999
.
RNK10303  RESET     NK100303                     * load name of cod. system (ST)
          GOTO      RNK19999
.
RNK10304  RESET     NK100304                     * load alt. identifier (ST)
          GOTO      RNK19999
.
RNK10305  RESET     NK100305                     * load alternate text (ST)
          GOTO      RNK19999
.
RNK10306  RESET     NK100306                     * load alt. cod. sys. name (ST)
          GOTO      RNK19999
.
.         NK1.4 Address (XAD)
.
RNK10400  BRANCH    COMPCNT,RNK10401:            * street address (ST)
                            RNK10402:            * other designation (ST)
                            RNK10403:            * city (ST)
                            RNK10404:            * state (ST)
                            RNK10405:            * postcode (ST)
                            RNK10406:            * country (ID)
                            RNK10407:            * address type (ID)
                            RNK10408:            * other geographic desig. (ST)
                            RNK10409:            * county (IS)
                            RNK10410:            * census tract (IS)
                            RNK10411             * address rep. code (ID)
          GOTO      RNK19999
.
RNK10401  RESET     NK100401                     * load street address (ST)
          MOVE      NK100401,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK100401
          REP       UPPLOW,NK100401
          MATCH     BLANKSTR,NK100401
          IF        !@EQUAL
            REP       "#"'",NK100401
          ENDIF
          GOTO      RNK19999
.
RNK10402  RESET     NK100402                     * load other designation (ST)
          MOVE      NK100402,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK100402
          REP       UPPLOW,NK100402
          MATCH     BLANKSTR,NK100402
          IF        !@EQUAL
            REP       "#"'",NK100402
          ENDIF
          GOTO      RNK19999
.
RNK10403  RESET     NK100403                     * load city (ST)
          MOVE      NK100403,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK100403
          REP       UPPLOW,NK100403
          MATCH     BLANKSTR,NK100403
          IF        !@EQUAL
            REP       "#"'",NK100403
          ENDIF
          GOTO      RNK19999
.
RNK10404  RESET     NK100404                     * load state (ST)
          MOVE      NK100404,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK100404
          REP       UPPLOW,NK100404
          MATCH     BLANKSTR,NK100404
          IF        !@EQUAL
            REP       "#"'",NK100404
          ENDIF
          GOTO      RNK19999
.
RNK10405  RESET     NK100405                     * load postcode (ST)
          MOVE      NK100405,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK100405
          GOTO      RNK19999
.
RNK10406  RESET     NK100406                     * load country (ID)
          GOTO      RNK19999
.
RNK10407  RESET     NK100407                     * load address type (ID)
          GOTO      RNK19999
.
RNK10408  RESET     NK100408                     * load other geog. desig. (ST)
          GOTO      RNK19999
.
RNK10409  RESET     NK100409                     * load county (IS)
          GOTO      RNK19999
.
RNK10410  RESET     NK100410                     * load census tract (IS)
          GOTO      RNK19999
.
RNK10411  RESET     NK100411                     * load address rep code (ID)
          GOTO      RNK19999
.
.         NK1.5 Phone Number (XTN)
.
RNK10500  BRANCH    COMPCNT,RNK10501:            * text
                            RNK10502:            * telecomm. use code (ID)
                            RNK10503:            * telcomm. equipment type (ID)
                            RNK10504:            * email address (ST)
                            RNK10505:            * country code (NM)
                            RNK10506:            * area/city code (NM)
                            RNK10507:            * phone number (NM)
                            RNK10508:            * extension (NM)
                            RNK10509             * any text (ST)
          GOTO      RNK19999
.
RNK10501  RESET     NK100501                     * load text
          GOTO      RNK19999
.
RNK10502  RESET     NK100502                     * load telecomm. use code (ID)
          GOTO      RNK19999
.
RNK10503  RESET     NK100503                     * load telcomm. equip.type (ID)
          GOTO      RNK19999
.
RNK10504  RESET     NK100504                     * load email address (ST)
          GOTO      RNK19999
.
RNK10505  RESET     NK100505                     * load country code (NM)
          GOTO      RNK19999
.
RNK10506  RESET     NK100506                     * load area/city code (NM)
          GOTO      RNK19999
.
RNK10507  RESET     NK100507                     * load phone number (NM)
          GOTO      RNK19999
.
RNK10508  RESET     NK100508                     * load extension (NM)
          GOTO      RNK19999
.
RNK10509  RESET     NK100509                     * load any text (ST)
          MOVE      NK100509,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK100509
          GOTO      RNK19999
.
.         NK1.6 Business Phone Number (XTN)
.
RNK10600  BRANCH    COMPCNT,RNK10601:            * text
                            RNK10602:            * telecomm. use code (ID)
                            RNK10603:            * telcomm. equipment type (ID)
                            RNK10604:            * email address (ST)
                            RNK10605:            * country code (NM)
                            RNK10606:            * area/city code (NM)
                            RNK10607:            * phone number (NM)
                            RNK10608:            * extension (NM)
                            RNK10609             * any text (ST)
          GOTO      RNK19999
.
RNK10601  RESET     NK100601                     * load text
          GOTO      RNK19999
.
RNK10602  RESET     NK100602                     * load telecomm. use code (ID)
          GOTO      RNK19999
.
RNK10603  RESET     NK100603                     * load telcomm. equip.type (ID)
          GOTO      RNK19999
.
RNK10604  RESET     NK100604                     * load email address (ST)
          GOTO      RNK19999
.
RNK10605  RESET     NK100605                     * load country code (NM)
          GOTO      RNK19999
.
RNK10606  RESET     NK100606                     * load area/city code (NM)
          GOTO      RNK19999
.
RNK10607  RESET     NK100607                     * load phone number (NM)
          GOTO      RNK19999
.
RNK10608  RESET     NK100608                     * load extension (NM)
          GOTO      RNK19999
.
RNK10609  RESET     NK100609                     * load any text (ST)
          MOVE      NK100609,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK100609
          GOTO      RNK19999
.
.         NK1.7 Contact Role (CE)
.
RNK10700  BRANCH    COMPCNT,RNK10701:            * identifier (ST)
                            RNK10702:            * text (ST)
                            RNK10703:            * name of coding system (ST)
                            RNK10704:            * alternate identifier (ST)
                            RNK10705:            * alternate text (ST)
                            RNK10706             * name of alt. cod. system (ST)
          GOTO      RNK19999
.
RNK10701  RESET     NK100701                     * load identifier (ST)
          MOVE      NK100701,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK100701
          GOTO      RNK19999
.
RNK10702  RESET     NK100702                     * load text (ST)
          GOTO      RNK19999
.
RNK10703  RESET     NK100703                     * load name of cod. system (ST)
          GOTO      RNK19999
.
RNK10704  RESET     NK100704                     * load alt. identifier (ST)
          GOTO      RNK19999
.
RNK10705  RESET     NK100705                     * load alternate text (ST)
          GOTO      RNK19999
.
RNK10706  RESET     NK100706                     * load alt. cod. sys. name (ST)
          GOTO      RNK19999
.
.         NK1.8 Start Date (DT)
.
RNK10800  BRANCH    COMPCNT,RNK10801
          GOTO      RNK19999
.
RNK10801  RESET     NK100801
          GOTO      RNK19999
.
.         NK1.9 End Date (DT)
.
RNK10900  BRANCH    COMPCNT,RNK10901
          GOTO      RNK19999
.
RNK10901  RESET     NK100901
          GOTO      RNK19999
.
.         NK1.10 Next of Kin / Associated Parties Job Title (ST)
.
RNK11000  BRANCH    COMPCNT,RNK11001
          GOTO      RNK19999
.
RNK11001  RESET     NK101001                     * load title (ST)
          GOTO      RNK19999
.
.         NK1.11 Next of Kin / Associated Parties Job Code/Class (JCC)
.
RNK11100  BRANCH    COMPCNT,RNK11101:            * job code (ST)
                            RNK11102             * job class (IS)
          GOTO      RNK19999
.
RNK11101  RESET     NK101101                     * job code (ST)
          GOTO      RNK19999
.
RNK11102  RESET     NK101102                     * job class (IS)
          GOTO      RNK19999
.
.         NK1.12 Next of Kin / Associated Parties Employee Number (CX)
.
RNK11200  BRANCH    COMPCNT,RNK11201:            * id (ST)
                            RNK11202:            * check digit (ST)
                            RNK11203:            * check digit scheme code (ID)
                            RNK11204:            * assigning authority (HD)
                            RNK11205:            * identifier type code (IS)
                            RNK11206             * assigning facility (HD)
          GOTO      RNK19999
.
RNK11201  RESET     NK101201                     * load id (ST)
          GOTO      RNK19999
.
RNK11202  RESET     NK101202                     * load check digit (ST)
          GOTO      RNK19999
.
RNK11203  RESET     NK101203                     * load chk dig scheme code (ID)
          GOTO      RNK19999
.
RNK11204  RESET     NK101204                     * load assigning authority (HD)
          GOTO      RNK19999
.
RNK11205  RESET     NK101205                     * load identifier typ code (IS)
          GOTO      RNK19999
.
RNK11206  RESET     NK101206                     * load assigning facility (HD)
          GOTO      RNK19999
.
.         NK1.13 Organisation Name (XON)
.
RNK11300  BRANCH    COMPCNT,RNK11301:            * organisation name (ST)
                            RNK11302:            * org. name type code (IS)
                            RNK11303:            * id number (NM)
                            RNK11304:            * check digit (NM)
                            RNK11305:            * check digit scheme code (ID)
                            RNK11306:            * assigning authority (HD)
                            RNK11307:            * identifier type code (IS)
                            RNK11308:            * assigning facility (HD)
                            RNK11309             * name rep. code (ID)
          GOTO      RNK19999
.
RNK11301  RESET     NK101301                     * organisation name (ST)
          GOTO      RNK19999
.
RNK11302  RESET     NK101302                     * org. name type code (IS)
          GOTO      RNK19999
.
RNK11303  RESET     NK101303                     * id number (NM)
          GOTO      RNK19999
.
RNK11304  RESET     NK101304                     * load check digit (ST)
          GOTO      RNK19999
.
RNK11305  RESET     NK101305                     * load chk dig scheme code (ID)
          GOTO      RNK19999
.
RNK11306  RESET     NK101306                     * load assigning authority (HD)
          GOTO      RNK19999
.
RNK11307  RESET     NK101307                     * load identifier typ code (IS)
          GOTO      RNK19999
.
RNK11308  RESET     NK101308                     * load assigning facility (HD)
          GOTO      RNK19999
.
RNK11309  RESET     NK101309                     * load name rep. code (ID)
          GOTO      RNK19999
.
.         NK1.14 Marital Status (CE)
.
RNK11400  BRANCH    COMPCNT,RNK11401:            * identifier (ST)
                            RNK11402:            * text (ST)
                            RNK11403:            * name of coding system (ST)
                            RNK11404:            * alternate identifier (ST)
                            RNK11405:            * alternate text (ST)
                            RNK11406             * name of alt. cod. system (ST)
          GOTO      RNK19999
.
RNK11401  RESET     NK101401                     * load identifier (ST)
          GOTO      RNK19999
.
RNK11402  RESET     NK101402                     * load text (ST)
          GOTO      RNK19999
.
RNK11403  RESET     NK101403                     * load name of cod. system (ST)
          GOTO      RNK19999
.
RNK11404  RESET     NK101404                     * load alt. identifier (ST)
          GOTO      RNK19999
.
RNK11405  RESET     NK101405                     * load alternate text (ST)
          GOTO      RNK19999
.
RNK11406  RESET     NK101406                     * load alt. cod. sys. name (ST)
          GOTO      RNK19999
.
.         NK1.15 Sex (IS)
.
RNK11500  BRANCH    COMPCNT,RNK11501
          GOTO      RNK19999
.
RNK11501  RESET     NK101501
          GOTO      RNK19999
.
.         NK1.16 Date/Time of Birth (TS)
.
RNK11600  BRANCH    COMPCNT,RNK11601
          GOTO      RNK19999
.
RNK11601  RESET     NK101601
          GOTO      RNK19999
.
.         NK1.17 Living Dependency (IS)
.
RNK11700  BRANCH    COMPCNT,RNK11701
          GOTO      RNK19999
.
RNK11701  RESET     NK101701
          GOTO      RNK19999
.
.         NK1.18 Ambulatory Status (IS)
.
RNK11800  BRANCH    COMPCNT,RNK11801
          GOTO      RNK19999
.
RNK11801  RESET     NK101801
          GOTO      RNK19999
.
.         NK1.19 Citizenship (CE)
.
RNK11900  BRANCH    COMPCNT,RNK11901:            * identifier (ST)
                            RNK11902:            * text (ST)
                            RNK11903:            * name of coding system (ST)
                            RNK11904:            * alternate identifier (ST)
                            RNK11905:            * alternate text (ST)
                            RNK11906             * name of alt. cod. system (ST)
          GOTO      RNK19999
.
RNK11901  RESET     NK101901                     * load identifier (ST)
          GOTO      RNK19999
.
RNK11902  RESET     NK101902                     * load text (ST)
          GOTO      RNK19999
.
RNK11903  RESET     NK101903                     * load name of cod. system (ST)
          GOTO      RNK19999
.
RNK11904  RESET     NK101904                     * load alt. identifier (ST)
          GOTO      RNK19999
.
RNK11905  RESET     NK101905                     * load alternate text (ST)
          GOTO      RNK19999
.
RNK11906  RESET     NK101906                     * load alt. cod. sys. name (ST)
          GOTO      RNK19999
.
.         NK1.20 Primary Language (CE)
.
RNK12000  BRANCH    COMPCNT,RNK12001:            * identifier (ST)
                            RNK12002:            * text (ST)
                            RNK12003:            * name of coding system (ST)
                            RNK12004:            * alternate identifier (ST)
                            RNK12005:            * alternate text (ST)
                            RNK12006             * name of alt. cod. system (ST)
          GOTO      RNK19999
.
RNK12001  RESET     NK102001                     * load identifier (ST)
          GOTO      RNK19999
.
RNK12002  RESET     NK102002                     * load text (ST)
          GOTO      RNK19999
.
RNK12003  RESET     NK102003                     * load name of cod. system (ST)
          GOTO      RNK19999
.
RNK12004  RESET     NK102004                     * load alt. identifier (ST)
          GOTO      RNK19999
.
RNK12005  RESET     NK102005                     * load alternate text (ST)
          GOTO      RNK19999
.
RNK12006  RESET     NK102006                     * load alt. cod. sys. name (ST)
          GOTO      RNK19999
.
.         NK1.21 Living Arrangement (IS)
.
RNK12100  BRANCH    COMPCNT,RNK12101
          GOTO      RNK19999
.
RNK12101  RESET     NK102101
          GOTO      RNK19999
.
.         NK1.22 Publicity Code (CE)
.
RNK12200  BRANCH    COMPCNT,RNK12201:            * identifier (ST)
                            RNK12202:            * text (ST)
                            RNK12203:            * name of coding system (ST)
                            RNK12204:            * alternate identifier (ST)
                            RNK12205:            * alternate text (ST)
                            RNK12206             * name of alt. cod. system (ST)
          GOTO      RNK19999
.
RNK12201  RESET     NK102201                     * load identifier (ST)
          GOTO      RNK19999
.
RNK12202  RESET     NK102202                     * load text (ST)
          GOTO      RNK19999
.
RNK12203  RESET     NK102203                     * load name of cod. system (ST)
          GOTO      RNK19999
.
RNK12204  RESET     NK102204                     * load alt. identifier (ST)
          GOTO      RNK19999
.
RNK12205  RESET     NK102205                     * load alternate text (ST)
          GOTO      RNK19999
.
RNK12206  RESET     NK102206                     * load alt. cod. sys. name (ST)
          GOTO      RNK19999
.
.         NK1.23 Protection Indicator (ID)
.
RNK12300  BRANCH    COMPCNT,RNK12301
          GOTO      RNK19999
.
RNK12301  RESET     NK102301
          GOTO      RNK19999
.
.         NK1.24 Student Indicator (IS)
.
RNK12400  BRANCH    COMPCNT,RNK12401
          GOTO      RNK19999
.
RNK12401  RESET     NK102401
          GOTO      RNK19999
.
.         NK1.25 Religion (CE)
.
RNK12500  BRANCH    COMPCNT,RNK12501:            * identifier (ST)
                            RNK12502:            * text (ST)
                            RNK12503:            * name of coding system (ST)
                            RNK12504:            * alternate identifier (ST)
                            RNK12505:            * alternate text (ST)
                            RNK12506             * name of alt. cod. system (ST)
          GOTO      RNK19999
.
RNK12501  RESET     NK102501                     * load identifier (ST)
          GOTO      RNK19999
.
RNK12502  RESET     NK102502                     * load text (ST)
          GOTO      RNK19999
.
RNK12503  RESET     NK102503                     * load name of cod. system (ST)
          GOTO      RNK19999
.
RNK12504  RESET     NK102504                     * load alt. identifier (ST)
          GOTO      RNK19999
.
RNK12505  RESET     NK102505                     * load alternate text (ST)
          GOTO      RNK19999
.
RNK12506  RESET     NK102506                     * load alt. cod. sys. name (ST)
          GOTO      RNK19999
.
.         NK1.26 Mother's Maiden Name (XPN)
.
RNK12600  BRANCH    COMPCNT,RNK12601:            * family name (ST)
                            RNK12602:            * given name (ST)
                            RNK12603:            * middle name (ST)
                            RNK12604:            * suffix (ST)
                            RNK12605:            * prefix (ST)
                            RNK12606:            * degree (IS)
                            RNK12607:            * name type code (ID)
                            RNK12608             * name representation code (ID)
          GOTO      RNK19999
.
RNK12601  RESET     NK102601                     * load family name (ST)
          GOTO      RNK19999
.
RNK12602  RESET     NK102602                     * load given name (ST)
          GOTO      RNK19999
.
RNK12603  RESET     NK102603                     * load middle name (ST)
          GOTO      RNK19999
.
RNK12604  RESET     NK102604                     * load suffix (ST)
          GOTO      RNK19999
.
RNK12605  RESET     NK102605                     * load prefix (ST)
          GOTO      RNK19999
.
RNK12606  RESET     NK102606                     * load degree (IS)
          GOTO      RNK19999
.
RNK12607  RESET     NK102607                     * load name type code (ID)
          GOTO      RNK19999
.
RNK12608  RESET     NK102608                     * load name rep. code (ID)
          GOTO      RNK19999
.
.         NK1.27 Nationality (CE)
.
RNK12700  BRANCH    COMPCNT,RNK12701:            * identifier (ST)
                            RNK12702:            * text (ST)
                            RNK12703:            * name of coding system (ST)
                            RNK12704:            * alternate identifier (ST)
                            RNK12705:            * alternate text (ST)
                            RNK12706             * name of alt. cod. system (ST)
          GOTO      RNK19999
.
RNK12701  RESET     NK102701                     * load identifier (ST)
          GOTO      RNK19999
.
RNK12702  RESET     NK102702                     * load text (ST)
          GOTO      RNK19999
.
RNK12703  RESET     NK102703                     * load name of cod. system (ST)
          GOTO      RNK19999
.
RNK12704  RESET     NK102704                     * load alt. identifier (ST)
          GOTO      RNK19999
.
RNK12705  RESET     NK102705                     * load alternate text (ST)
          GOTO      RNK19999
.
RNK12706  RESET     NK102706                     * load alt. cod. sys. name (ST)
          GOTO      RNK19999
.
.         NK1.28 Ethnic Group (CE)
.
RNK12800  BRANCH    COMPCNT,RNK12801:            * identifier (ST)
                            RNK12802:            * text (ST)
                            RNK12803:            * name of coding system (ST)
                            RNK12804:            * alternate identifier (ST)
                            RNK12805:            * alternate text (ST)
                            RNK12806             * name of alt. cod. system (ST)
          GOTO      RNK19999
.
RNK12801  RESET     NK102801                     * load identifier (ST)
          GOTO      RNK19999
.
RNK12802  RESET     NK102802                     * load text (ST)
          GOTO      RNK19999
.
RNK12803  RESET     NK102803                     * load name of cod. system (ST)
          GOTO      RNK19999
.
RNK12804  RESET     NK102804                     * load alt. identifier (ST)
          GOTO      RNK19999
.
RNK12805  RESET     NK102805                     * load alternate text (ST)
          GOTO      RNK19999
.
RNK12806  RESET     NK102806                     * load alt. cod. sys. name (ST)
          GOTO      RNK19999
.
.         NK1.29 Contact Reason (CE)
.                 (maximum of 1 repeat - 2 reasons in total)
.
RNK12900  COMPARE   REPTNCNT,TWO                 * maximum repeats reached ?
          GOTO      RNK19999 IF LESS             * yes
.
          BRANCH    COMPCNT,RNK12901:            * identifier (ST)
                            RNK12902:            * text (ST)
                            RNK12903:            * name of coding system (ST)
                            RNK12904:            * alternate identifier (ST)
                            RNK12905:            * alternate text (ST)
                            RNK12906             * name of alt. cod. system (ST)
          GOTO      RNK19999
.
RNK12901  RESET     NK102901[REPTNCNT]           * load identifier (ST)
          GOTO      RNK19999
.
RNK12902  RESET     NK102902[REPTNCNT]           * load text (ST)
          GOTO      RNK19999
.
RNK12903  RESET     NK102903[REPTNCNT]           * load name of cod. system (ST)
          GOTO      RNK19999
.
RNK12904  RESET     NK102904[REPTNCNT]           * load alt. identifier (ST)
          GOTO      RNK19999
.
RNK12905  RESET     NK102905[REPTNCNT]           * load alternate text (ST)
          GOTO      RNK19999
.
RNK12906  RESET     NK102906[REPTNCNT]           * load alt. cod. sys. name (ST)
          GOTO      RNK19999
.
.         NK1.30 Contact Person's Name (XPN)
.
RNK13000  BRANCH    COMPCNT,RNK13001:            * family name (ST)
                            RNK13002:            * given name (ST)
                            RNK13003:            * middle name (ST)
                            RNK13004:            * suffix (ST)
                            RNK13005:            * prefix (ST)
                            RNK13006:            * degree (IS)
                            RNK13007:            * name type code (ID)
                            RNK13008             * name representation code (ID)
          GOTO      RNK19999
.
RNK13001  RESET     NK103001                     * load family name (ST)
          MOVE      NK103001,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK103001
          GOTO      RNK19999
.
RNK13002  RESET     NK103002                     * load given name (ST)
          MOVE      NK103002,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK103002
          GOTO      RNK19999
.
RNK13003  RESET     NK103003                     * load middle name (ST)
          MOVE      NK103003,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK103003
          GOTO      RNK19999
.
RNK13004  RESET     NK103004                     * load suffix (ST)
          GOTO      RNK19999
.
RNK13005  RESET     NK103005                     * load prefix (ST)
          MOVE      NK103005,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK103005
          GOTO      RNK19999
.
RNK13006  RESET     NK103006                     * load degree (IS)
          GOTO      RNK19999
.
RNK13007  RESET     NK103007                     * load name type code (ID)
          GOTO      RNK19999
.
RNK13008  RESET     NK103008                     * load name rep. code (ID)
          GOTO      RNK19999
.
.         NK1.31 Contact Person's Telephone Number (XTN)
.                 (maximum of 2 repeats - 3 phone numbers in total)
.
RNK13100  COMPARE   REPTNCNT,THREE               * maximum repeats reached ?
          GOTO      RNK19999 IF LESS             * yes
.
          BRANCH    COMPCNT,RNK13101:            * text
                            RNK13102:            * telecomm. use code (ID)
                            RNK13103:            * telcomm. equipment type (ID)
                            RNK13104:            * email address (ST)
                            RNK13105:            * country code (NM)
                            RNK13106:            * area/city code (NM)
                            RNK13107:            * phone number (NM)
                            RNK13108:            * extension (NM)
                            RNK13109             * any text (ST)
          GOTO      RNK19999
.
RNK13101  RESET     NK103101[REPTNCNT]           * load text
          GOTO      RNK19999
.
RNK13102  RESET     NK103102[REPTNCNT]           * load telecomm. use code (ID)
          MOVE      NK103102[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK103102[REPTNCNT]
          GOTO      RNK19999
.
RNK13103  RESET     NK103103[REPTNCNT]           * load telcomm. equip.type (ID)
          MOVE      NK103103[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK103103[REPTNCNT]
          GOTO      RNK19999
.
RNK13104  RESET     NK103104[REPTNCNT]           * load email address (ST)
          MOVE      NK103104[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK103104[REPTNCNT]
          GOTO      RNK19999
.
RNK13105  RESET     NK103105[REPTNCNT]           * load country code (NM)
          GOTO      RNK19999
.
RNK13106  RESET     NK103106[REPTNCNT]           * load area/city code (NM)
          GOTO      RNK19999
.
RNK13107  RESET     NK103107[REPTNCNT]           * load phone number (NM)
          MOVE      NK103107[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK103107[REPTNCNT]
          GOTO      RNK19999
.
RNK13108  RESET     NK103108[REPTNCNT]           * load extension (NM)
          GOTO      RNK19999
.
RNK13109  RESET     NK103109[REPTNCNT]           * load any text (ST)
          MOVE      NK103109[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK103109[REPTNCNT]
          GOTO      RNK19999
.
.         NK1.32 Contact Person's Address (XAD)
.
RNK13200  BRANCH    COMPCNT,RNK13201:            * street address (ST)
                            RNK13202:            * other designation (ST)
                            RNK13203:            * city (ST)
                            RNK13204:            * state (ST)
                            RNK13205:            * postcode (ST)
                            RNK13206:            * country (ID)
                            RNK13207:            * address type (ID)
                            RNK13208:            * other geographic desig. (ST)
                            RNK13209:            * county (IS)
                            RNK13210:            * census tract (IS)
                            RNK13211             * address rep. code (ID)
          GOTO      RNK19999
.
RNK13201  RESET     NK103201                     * load street address (ST)
          MOVE      NK103201,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK103201
          REP       UPPLOW,NK103201
          MATCH     BLANKSTR,NK103201
          IF        !@EQUAL
            REP       "#"'",NK103201
          ENDIF
          GOTO      RNK19999
.
RNK13202  RESET     NK103202                     * load other designation (ST)
          MOVE      NK103202,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK103202
          REP       UPPLOW,NK103202
          MATCH     BLANKSTR,NK103202
          IF        !@EQUAL
            REP       "#"'",NK103202
          ENDIF
          GOTO      RNK19999
.
RNK13203  RESET     NK103203                     * load city (ST)
          MOVE      NK103203,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK103203
          REP       UPPLOW,NK103203
          MATCH     BLANKSTR,NK103203
          IF        !@EQUAL
            REP       "#"'",NK103203
          ENDIF
          GOTO      RNK19999
.
RNK13204  RESET     NK103204                     * load state (ST)
          MOVE      NK103204,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK103204
          REP       UPPLOW,NK103204
          MATCH     BLANKSTR,NK103204
          IF        !@EQUAL
            REP       "#"'",NK103204
          ENDIF
          GOTO      RNK19999
.
RNK13205  RESET     NK103205                     * load postcode (ST)
          MOVE      NK103205,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK103205
          GOTO      RNK19999
.
RNK13206  RESET     NK103206                     * load country (ID)
          MOVE      NK103206,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK103206
          GOTO      RNK19999
.
RNK13207  RESET     NK103207                     * load address type (ID)
          GOTO      RNK19999
.
RNK13208  RESET     NK103208                     * load other geog. desig. (ST)
          GOTO      RNK19999
.
RNK13209  RESET     NK103209                     * load county (IS)
          GOTO      RNK19999
.
RNK13210  RESET     NK103210                     * load census tract (IS)
          GOTO      RNK19999
.
RNK13211  RESET     NK103211                     * load address rep code (ID)
          GOTO      RNK19999
.
.         NK1.33 Next of Kin / Associated Party's Identifiers (CX)
.
RNK13300  BRANCH    COMPCNT,RNK13301:            * id (ST)
                            RNK13302:            * check digit (ST)
                            RNK13303:            * check digit scheme code (ID)
                            RNK13304:            * assigning authority (HD)
                            RNK13305:            * identifier type code (IS)
                            RNK13306             * assigning facility (HD)
          GOTO      RNK19999
.
RNK13301  RESET     NK103301                     * load id (ST)
          GOTO      RNK19999
.
RNK13302  RESET     NK103302                     * load check digit (ST)
          GOTO      RNK19999
.
RNK13303  RESET     NK103303                     * load chk dig scheme code (ID)
          GOTO      RNK19999
.
RNK13304  RESET     NK103304                     * load assigning authority (HD)
          GOTO      RNK19999
.
RNK13305  RESET     NK103305                     * load identifier typ code (IS)
          GOTO      RNK19999
.
RNK13306  RESET     NK103306                     * load assigning facility (HD)
          GOTO      RNK19999
.
.         NK1.34 Job Status (IS)
.
RNK13400  BRANCH    COMPCNT,RNK13401
          GOTO      RNK19999
.
RNK13401  RESET     NK103401
          GOTO      RNK19999
.
.         NK1.35 Race (CE)
.
RNK13500  BRANCH    COMPCNT,RNK13501:            * identifier (ST)
                            RNK13502:            * text (ST)
                            RNK13503:            * name of coding system (ST)
                            RNK13504:            * alternate identifier (ST)
                            RNK13505:            * alternate text (ST)
                            RNK13506             * name of alt. cod. system (ST)
          GOTO      RNK19999
.
RNK13501  RESET     NK103501                     * load identifier (ST)
          GOTO      RNK19999
.
RNK13502  RESET     NK103502                     * load text (ST)
          GOTO      RNK19999
.
RNK13503  RESET     NK103503                     * load name of cod. system (ST)
          GOTO      RNK19999
.
RNK13504  RESET     NK103504                     * load alt. identifier (ST)
          GOTO      RNK19999
.
RNK13505  RESET     NK103505                     * load alternate text (ST)
          GOTO      RNK19999
.
RNK13506  RESET     NK103506                     * load alt. cod. sys. name (ST)
          GOTO      RNK19999
.
.         NK1.36 Handicap (IS)
.
RNK13600  BRANCH    COMPCNT,RNK13601
          GOTO      RNK19999
.
RNK13601  RESET     NK103601
          GOTO      RNK19999
.
.         NK1.37 Contact Person Social Security Number (ST)
.
RNK13700  BRANCH    COMPCNT,RNK13701
          GOTO      RNK19999
.
RNK13701  RESET     NK103701
          GOTO      RNK19999
.
RNK19999  RETURN
+
.*****************************************************************************
.*                              RPV10000           Called by: RFLD0000       *
.*                         Reset all PV1 variables                           *
.*****************************************************************************
.
RPV10000  BRANCH    FIELDNO,RPV10100:            * set id
                            RPV10200:            * patient class
                            RPV10300:            * assigned patient location
                            RPV10400:            * admissiotn type
                            RPV10500:            * preadmit number
                            RPV10600:            * prior patient location
                            RPV10700:            * attending doctor
                            RPV10800:            * referring doctor
                            RPV10900:            * consulting doctor
                            RPV11000:            * hospital service
                            RPV11100:            * temprorary location
                            RPV11200:            * preadmit test indicator
                            RPV11300:            * re-admission indicator
                            RPV11400:            * admit source
                            RPV11500:            * ambulatory status
                            RPV11600:            * vip indicator
                            RPV11700:            * admitting doctor
                            RPV11800:            * patient type
                            RPV11900:            * visit number
                            RPV12000:            * financial class
                            RPV12100:            * charge price indicator
                            RPV12200:            * courtesy code
                            RPV12300:            * credit rating
                            RPV12400:            * contract code
                            RPV12500:            * contract effective date
                            RPV12600:            * contract amount
                            RPV12700:            * contract period
                            RPV12800:            * interest code
                            RPV12900:            * transfer to bad debt code
                            RPV13000:            * transfer to bad debt date
                            RPV13100:            * bad debt agency code
                            RPV13200:            * bad debt transfer amount
                            RPV13300:            * bad debt recovery amount
                            RPV13400:            * delete account indicator
                            RPV13500:            * delete account date
                            RPV13600:            * discharge disposition
                            RPV13700:            * discharged to location
                            RPV13800:            * diet type
                            RPV13900:            * servicing facility
                            RPV14000:            * bed status
                            RPV14100:            * account status
                            RPV14200:            * pending location
                            RPV14300:            * prior temporary location
                            RPV14400:            * admit date/time
                            RPV14500:            * discharge date/time
                            RPV14600:            * current patient balance
                            RPV14700:            * total charges
                            RPV14800:            * total adjustments
                            RPV14900:            * total payments
                            RPV15000:            * alternate visit id
                            RPV15100:            * visit indicator
                            RPV15200             * other healtcare provider
          GOTO      RPV19999
.
.         PV1.1 - Set Id
.
RPV10100  BRANCH    COMPCNT,RPV10101
          GOTO      RPV19999
.
RPV10101  RESET     PV100101
          GOTO      RPV19999
.
.         PV1.2 - Patient Class
.
RPV10200  BRANCH    COMPCNT,RPV10201
          GOTO      RPV19999
.
RPV10201  RESET     PV100201
          GOTO      RPV19999
.
.         PV1.3 - Assigned Patient Location
.
RPV10300  BRANCH    COMPCNT,RPV10301:
                            RPV10302:
                            RPV10303:
                            RPV10304:
                            RPV10305:
                            RPV10306:
                            RPV10307:
                            RPV10308:
                            RPV10309 
          GOTO      RPV19999
.
RPV10301  RESET     PV100301
          GOTO      RPV19999
.
RPV10302  RESET     PV100302
          GOTO      RPV19999
.
RPV10303  RESET     PV100303
          GOTO      RPV19999
.
RPV10304  RESET     PV100304
          GOTO      RPV19999
.
RPV10305  RESET     PV100305
          GOTO      RPV19999
.
RPV10306  RESET     PV100306
          GOTO      RPV19999
.
RPV10307  RESET     PV100307
          GOTO      RPV19999
.
RPV10308  RESET     PV100308
          GOTO      RPV19999
.
RPV10309  RESET     PV100309
          GOTO      RPV19999
.
.         PV1.4 - Admission Type
.
RPV10400  BRANCH    COMPCNT,RPV10401
          GOTO      RPV19999
.
RPV10401  RESET     PV100401
          GOTO      RPV19999
.
.         PV1.5 - Preadmit Number
.
RPV10500  BRANCH    COMPCNT,RPV10501:
                            RPV10502:
                            RPV10503:
                            RPV10504:
                            RPV10505:
                            RPV10506
          GOTO      RPV19999
.
RPV10501  RESET     PV100501
          GOTO      RPV19999
.
RPV10502  RESET     PV100502
          GOTO      RPV19999
.
RPV10503  RESET     PV100503
          GOTO      RPV19999
.
RPV10504  RESET     PV100504
          GOTO      RPV19999
.
RPV10505  RESET     PV100505
          GOTO      RPV19999
.
RPV10506  RESET     PV100506
          GOTO      RPV19999
.
.         PV1.6 - Prior Patient Location
.
RPV10600  BRANCH    COMPCNT,RPV10601:
                            RPV10602:
                            RPV10603:
                            RPV10604:
                            RPV10605:
                            RPV10606:
                            RPV10607:
                            RPV10608:
                            RPV10609 
          GOTO      RPV19999
.
RPV10601  RESET     PV100601
          GOTO      RPV19999
.
RPV10602  RESET     PV100602
          GOTO      RPV19999
.
RPV10603  RESET     PV100603
          GOTO      RPV19999
.
RPV10604  RESET     PV100604
          GOTO      RPV19999
.
RPV10605  RESET     PV100605
          GOTO      RPV19999
.
RPV10606  RESET     PV100606
          GOTO      RPV19999
.
RPV10607  RESET     PV100607
          GOTO      RPV19999
.
RPV10608  RESET     PV100608
          GOTO      RPV19999
.
RPV10609  RESET     PV100609
          GOTO      RPV19999
.
.         PV1.7 - Attending Doctor
.
RPV10700  BRANCH    COMPCNT,RPV10701:
                            RPV10702:
                            RPV10703:
                            RPV10704:
                            RPV10705:
                            RPV10706:
                            RPV10707:
                            RPV10708:
                            RPV10709:
                            RPV10710:
                            RPV10711:
                            RPV10712:
                            RPV10713:
                            RPV10714:
                            RPV10715
          GOTO      RPV19999
.
RPV10701  RESET     PV100701
          GOTO      RPV19999
.
RPV10702  RESET     PV100702
          GOTO      RPV19999
.
RPV10703  RESET     PV100703
          GOTO      RPV19999
.
RPV10704  RESET     PV100704
          GOTO      RPV19999
.
RPV10705  RESET     PV100705
          GOTO      RPV19999
.
RPV10706  RESET     PV100706
          GOTO      RPV19999
.
RPV10707  RESET     PV100707
          GOTO      RPV19999
.
RPV10708  RESET     PV100708
          GOTO      RPV19999
.
RPV10709  RESET     PV100709
          GOTO      RPV19999
.
RPV10710  RESET     PV100710
          GOTO      RPV19999
.
RPV10711  RESET     PV100711
          GOTO      RPV19999
.
RPV10712  RESET     PV100712
          GOTO      RPV19999
.
RPV10713  RESET     PV100713
          GOTO      RPV19999
.
RPV10714  RESET     PV100714
          GOTO      RPV19999
.
RPV10715  RESET     PV100715
          GOTO      RPV19999
.
.         PV1.8 - Referring Doctor
.
RPV10800  BRANCH    COMPCNT,RPV10801:
                            RPV10802:
                            RPV10803:
                            RPV10804:
                            RPV10805:
                            RPV10806:
                            RPV10807:
                            RPV10808:
                            RPV10809:
                            RPV10810:
                            RPV10811:
                            RPV10812:
                            RPV10813:
                            RPV10814:
                            RPV10815
          GOTO      RPV19999
.
RPV10801  RESET     PV100801
          GOTO      RPV19999
.
RPV10802  RESET     PV100802
          GOTO      RPV19999
.
RPV10803  RESET     PV100803
          GOTO      RPV19999
.
RPV10804  RESET     PV100804
          GOTO      RPV19999
.
RPV10805  RESET     PV100805
          GOTO      RPV19999
.
RPV10806  RESET     PV100806
          GOTO      RPV19999
.
RPV10807  RESET     PV100807
          GOTO      RPV19999
.
RPV10808  RESET     PV100808
          GOTO      RPV19999
.
RPV10809  RESET     PV100809
          GOTO      RPV19999
.
RPV10810  RESET     PV100810
          GOTO      RPV19999
.
RPV10811  RESET     PV100811
          GOTO      RPV19999
.
RPV10812  RESET     PV100812
          GOTO      RPV19999
.
RPV10813  RESET     PV100813
          GOTO      RPV19999
.
RPV10814  RESET     PV100814
          GOTO      RPV19999
.
RPV10815  RESET     PV100815
          GOTO      RPV19999
.
.         PV1.9 - Consulting Doctor
.
RPV10900  BRANCH    COMPCNT,RPV10901:
                            RPV10902:
                            RPV10903:
                            RPV10904:
                            RPV10905:
                            RPV10906:
                            RPV10907:
                            RPV10908:
                            RPV10909:
                            RPV10910:
                            RPV10911:
                            RPV10912:
                            RPV10913:
                            RPV10914:
                            RPV10915
          GOTO      RPV19999
.
RPV10901  RESET     PV100901
          GOTO      RPV19999
.
RPV10902  RESET     PV100902
          GOTO      RPV19999
.
RPV10903  RESET     PV100903
          GOTO      RPV19999
.
RPV10904  RESET     PV100904
          GOTO      RPV19999
.
RPV10905  RESET     PV100905
          GOTO      RPV19999
.
RPV10906  RESET     PV100906
          GOTO      RPV19999
.
RPV10907  RESET     PV100907
          GOTO      RPV19999
.
RPV10908  RESET     PV100908
          GOTO      RPV19999
.
RPV10909  RESET     PV100909
          GOTO      RPV19999
.
RPV10910  RESET     PV100910
          GOTO      RPV19999
.
RPV10911  RESET     PV100911
          GOTO      RPV19999
.
RPV10912  RESET     PV100912
          GOTO      RPV19999
.
RPV10913  RESET     PV100913
          GOTO      RPV19999
.
RPV10914  RESET     PV100914
          GOTO      RPV19999
.
RPV10915  RESET     PV100915
          GOTO      RPV19999
.
.         PV1.10 - Hospital Service
.
RPV11000  BRANCH    COMPCNT,RPV11001
          GOTO      RPV19999
.
RPV11001  RESET     PV101001
          GOTO      RPV19999
.
.         PV1.11 - Temporary Location
.
RPV11100  BRANCH    COMPCNT,RPV11101:
                            RPV11102:
                            RPV11103:
                            RPV11104:
                            RPV11105:
                            RPV11106:
                            RPV11107:
                            RPV11108:
                            RPV11109 
          GOTO      RPV19999
.
RPV11101  RESET     PV101101
          GOTO      RPV19999
.
RPV11102  RESET     PV101102
          GOTO      RPV19999
.
RPV11103  RESET     PV101103
          GOTO      RPV19999
.
RPV11104  RESET     PV101104
          GOTO      RPV19999
.
RPV11105  RESET     PV101105
          GOTO      RPV19999
.
RPV11106  RESET     PV101106
          GOTO      RPV19999
.
RPV11107  RESET     PV101107
          GOTO      RPV19999
.
RPV11108  RESET     PV101108
          GOTO      RPV19999
.
RPV11109  RESET     PV101109
          GOTO      RPV19999
.
.         PV1.12 - Preadmit Test Indicator
.
RPV11200  BRANCH    COMPCNT,RPV11201
          GOTO      RPV19999
.
RPV11201  RESET     PV101201
          GOTO      RPV19999
.
.         PV1.13 - Re-admission Indicator
.
RPV11300  BRANCH    COMPCNT,RPV11301
          GOTO      RPV19999
.
RPV11301  RESET     PV101301
          GOTO      RPV19999
.
.         PV1.14 - Admit Source
.
RPV11400  BRANCH    COMPCNT,RPV11401
          GOTO      RPV19999
.
RPV11401  RESET     PV101401
          GOTO      RPV19999
.
.         PV1.15 - Ambulatory Status
.
RPV11500  BRANCH    COMPCNT,RPV11501
          GOTO      RPV19999
.
RPV11501  RESET     PV101501
          GOTO      RPV19999
.
.         PV1.16 - VIP Indicator
.
RPV11600  BRANCH    COMPCNT,RPV11601
          GOTO      RPV19999
.
RPV11601  RESET     PV101601
          GOTO      RPV19999
.
.         PV1.17 - Admitting Doctor
.
RPV11700  BRANCH    COMPCNT,RPV11701:
                            RPV11702:
                            RPV11703:
                            RPV11704:
                            RPV11705:
                            RPV11706:
                            RPV11707:
                            RPV11708:
                            RPV11709:
                            RPV11710:
                            RPV11711:
                            RPV11712:
                            RPV11713:
                            RPV11714:
                            RPV11715
          GOTO      RPV19999
.
RPV11701  RESET     PV101701
          GOTO      RPV19999
.
RPV11702  RESET     PV101702
          GOTO      RPV19999
.
RPV11703  RESET     PV101703
          GOTO      RPV19999
.
RPV11704  RESET     PV101704
          GOTO      RPV19999
.
RPV11705  RESET     PV101705
          GOTO      RPV19999
.
RPV11706  RESET     PV101706
          GOTO      RPV19999
.
RPV11707  RESET     PV101707
          GOTO      RPV19999
.
RPV11708  RESET     PV101708
          GOTO      RPV19999
.
RPV11709  RESET     PV101709
          GOTO      RPV19999
.
RPV11710  RESET     PV101710
          GOTO      RPV19999
.
RPV11711  RESET     PV101711
          GOTO      RPV19999
.
RPV11712  RESET     PV101712
          GOTO      RPV19999
.
RPV11713  RESET     PV101713
          GOTO      RPV19999
.
RPV11714  RESET     PV101714
          GOTO      RPV19999
.
RPV11715  RESET     PV101715
          GOTO      RPV19999
.
.         PV1.18 - Patient Type
.
RPV11800  BRANCH    COMPCNT,RPV11801
          GOTO      RPV19999
.
RPV11801  RESET     PV101801
          GOTO      RPV19999
.
.         PV1.19 - Visit Number
.
RPV11900  BRANCH    COMPCNT,RPV11901:
                            RPV11902:
                            RPV11903:
                            RPV11904:
                            RPV11905:
                            RPV11906
          GOTO      RPV19999
.
RPV11901  RESET     PV101901
          GOTO      RPV19999
.
RPV11902  RESET     PV101902
          GOTO      RPV19999
.
RPV11903  RESET     PV101903
          GOTO      RPV19999
.
RPV11904  RESET     PV101904
          GOTO      RPV19999
.
RPV11905  RESET     PV101905
          GOTO      RPV19999
.
RPV11906  RESET     PV101906
          GOTO      RPV19999
.
.         PV1.20 - Financial Class
.
RPV12000  BRANCH    COMPCNT,RPV12001:
                            RPV12001
          GOTO      RPV19999
.
RPV12001  RESET     PV102001
          GOTO      RPV19999
.
RPV12002  RESET     PV102002
          GOTO      RPV19999
.
.         PV1.21 - Charge Price Indicator
.
RPV12100  BRANCH    COMPCNT,RPV12101
          GOTO      RPV19999
.
RPV12101  RESET     PV102101
          GOTO      RPV19999
.
.         PV1.22 - Courtesy Code
.
RPV12200  BRANCH    COMPCNT,RPV12201
          GOTO      RPV19999
.
RPV12201  RESET     PV102201
          GOTO      RPV19999
.
.         PV1.23 - Credit Rating
.
RPV12300  BRANCH    COMPCNT,RPV12301
          GOTO      RPV19999
.
RPV12301  RESET     PV102301
          GOTO      RPV19999
.
.         PV1.24 - Contract Code
.
RPV12400  BRANCH    COMPCNT,RPV12401
          GOTO      RPV19999
.
RPV12401  RESET     PV102401
          GOTO      RPV19999
.
.         PV1.25 - Contract Effective Date
.
RPV12500  BRANCH    COMPCNT,RPV12501
          GOTO      RPV19999
.
RPV12501  RESET     PV102501
          GOTO      RPV19999
.
.         PV1.26 - Contract Amount
.
RPV12600  BRANCH    COMPCNT,RPV12601
          GOTO      RPV19999
.
RPV12601  RESET     PV102601
          GOTO      RPV19999
.
.         PV1.27 - Contract Period
.
RPV12700  BRANCH    COMPCNT,RPV12701
          GOTO      RPV19999
.
RPV12701  RESET     PV102701
          GOTO      RPV19999
.
.         PV1.28 - Interest Code
.
RPV12800  BRANCH    COMPCNT,RPV12801
          GOTO      RPV19999
.
RPV12801  RESET     PV102801
          GOTO      RPV19999
.
.         PV1.29 - Transfer To Bad Debt Code
.
RPV12900  BRANCH    COMPCNT,RPV12901
          GOTO      RPV19999
.
RPV12901  RESET     PV102901
          GOTO      RPV19999
.
.         PV1.30 - Transfer To Bad Debt Date
.
RPV13000  BRANCH    COMPCNT,RPV13001
          GOTO      RPV19999
.
RPV13001  RESET     PV103001
          GOTO      RPV19999
.
.         PV1.31 - Bad Debt Agency Code
.
RPV13100  BRANCH    COMPCNT,RPV13101
          GOTO      RPV19999
.
RPV13101  RESET     PV103101
          GOTO      RPV19999
.
.         PV1.32 - Bad Debt Transfer Amount
.
RPV13200  BRANCH    COMPCNT,RPV13201
          GOTO      RPV19999
.
RPV13201  RESET     PV103201
          GOTO      RPV19999
.
.         PV1.33 - Bad Debt Recovery Amount
.
RPV13300  BRANCH    COMPCNT,RPV13301
          GOTO      RPV19999
.
RPV13301  RESET     PV103301
          GOTO      RPV19999
.
.         PV1.34 - Delete Account Indicator
.
RPV13400  BRANCH    COMPCNT,RPV13401
          GOTO      RPV19999
.
RPV13401  RESET     PV103401
          GOTO      RPV19999
.
.         PV1.35 - Delete Account Date
.
RPV13500  BRANCH    COMPCNT,RPV13501
          GOTO      RPV19999
.
RPV13501  RESET     PV103501
          GOTO      RPV19999
.
.         PV1.36 - Discharge Disposition
.
RPV13600  BRANCH    COMPCNT,RPV13601
          GOTO      RPV19999
.
RPV13601  RESET     PV103601
          GOTO      RPV19999
.
.         PV1.37 - Discharged To Location
.
RPV13700  BRANCH    COMPCNT,RPV13701:
                            RPV13702
          GOTO      RPV19999
.
RPV13701  RESET     PV103701
          GOTO      RPV19999
.
RPV13702  RESET     PV103702
          GOTO      RPV19999
.
.         PV1.38 - Diet Type
.
RPV13800  BRANCH    COMPCNT,RPV13801:
                            RPV13802:
                            RPV13803:
                            RPV13804:
                            RPV13805:
                            RPV13806
          GOTO      RPV19999
.
RPV13801  RESET     PV103801
          GOTO      RPV19999
.
RPV13802  RESET     PV103802
          GOTO      RPV19999
.
RPV13803  RESET     PV103803
          GOTO      RPV19999
.
RPV13804  RESET     PV103804
          GOTO      RPV19999
.
RPV13805  RESET     PV103805
          GOTO      RPV19999
.
RPV13806  RESET     PV103806
          GOTO      RPV19999
.
.         PV1.39 - Servicing Facility
.
RPV13900  BRANCH    COMPCNT,RPV13901
          GOTO      RPV19999
.
RPV13901  RESET     PV103901
          GOTO      RPV19999
.
.         PV1.40 - Bed Status
.
RPV14000  BRANCH    COMPCNT,RPV14001
          GOTO      RPV19999
.
RPV14001  RESET     PV104001
          GOTO      RPV19999
.
.         PV1.41 - Account Status
.
RPV14100  BRANCH    COMPCNT,RPV14101
          GOTO      RPV19999
.
RPV14101  RESET     PV104101
          GOTO      RPV19999
.
.         PV1.42 - Pending Location
.
RPV14200  BRANCH    COMPCNT,RPV14201:
                            RPV14202:
                            RPV14203:
                            RPV14204:
                            RPV14205:
                            RPV14206:
                            RPV14207:
                            RPV14208:
                            RPV14209 
          GOTO      RPV19999
.
RPV14201  RESET     PV104201
          GOTO      RPV19999
.
RPV14202  RESET     PV104202
          GOTO      RPV19999
.
RPV14203  RESET     PV104203
          GOTO      RPV19999
.
RPV14204  RESET     PV104204
          GOTO      RPV19999
.
RPV14205  RESET     PV104205
          GOTO      RPV19999
.
RPV14206  RESET     PV104206
          GOTO      RPV19999
.
RPV14207  RESET     PV104207
          GOTO      RPV19999
.
RPV14208  RESET     PV104208
          GOTO      RPV19999
.
RPV14209  RESET     PV104209
          GOTO      RPV19999
.
.         PV1.43 - Prior Temporary Location
.
RPV14300  BRANCH    COMPCNT,RPV14301:
                            RPV14302:
                            RPV14303:
                            RPV14304:
                            RPV14305:
                            RPV14306:
                            RPV14307:
                            RPV14308:
                            RPV14309 
          GOTO      RPV19999
.
RPV14301  RESET     PV104301
          GOTO      RPV19999
.
RPV14302  RESET     PV104302
          GOTO      RPV19999
.
RPV14303  RESET     PV104303
          GOTO      RPV19999
.
RPV14304  RESET     PV104304
          GOTO      RPV19999
.
RPV14305  RESET     PV104305
          GOTO      RPV19999
.
RPV14306  RESET     PV104306
          GOTO      RPV19999
.
RPV14307  RESET     PV104307
          GOTO      RPV19999
.
RPV14308  RESET     PV104308
          GOTO      RPV19999
.
RPV14309  RESET     PV104309
          GOTO      RPV19999
.
.         PV1.44 - Admit Date/Time
.
RPV14400  BRANCH    COMPCNT,RPV14401
          GOTO      RPV19999
.
RPV14401  RESET     PV104401
          GOTO      RPV19999
.
.         PV1.45 - Discharge Date/Time
.
RPV14500  BRANCH    COMPCNT,RPV14501
          GOTO      RPV19999
.
RPV14501  RESET     PV104501
          GOTO      RPV19999
.
.         PV1.46 - Current Patient Balance
.
RPV14600  BRANCH    COMPCNT,RPV14601
          GOTO      RPV19999
.
RPV14601  RESET     PV104601
          GOTO      RPV19999
.
.         PV1.47 - Total Charges
.
RPV14700  BRANCH    COMPCNT,RPV14701
          GOTO      RPV19999
.
RPV14701  RESET     PV104701
          GOTO      RPV19999
.
.         PV1.48 - Total Adjustments
.
RPV14800  BRANCH    COMPCNT,RPV14801
          GOTO      RPV19999
.
RPV14801  RESET     PV104801
          GOTO      RPV19999
.
.         PV1.49 - Total Payments
.
RPV14900  BRANCH    COMPCNT,RPV14901
          GOTO      RPV19999
.
RPV14901  RESET     PV104901
          GOTO      RPV19999
.
.         PV1.50 - Alternate Visit Id
.
RPV15000  BRANCH    COMPCNT,RPV15001:
                            RPV15002:
                            RPV15003:
                            RPV15004:
                            RPV15005:
                            RPV15006
          GOTO      RPV19999
.
RPV15001  RESET     PV105001
          GOTO      RPV19999
.
RPV15002  RESET     PV105002
          GOTO      RPV19999
.
RPV15003  RESET     PV105003
          GOTO      RPV19999
.
RPV15004  RESET     PV105004
          GOTO      RPV19999
.
RPV15005  RESET     PV105005
          GOTO      RPV19999
.
RPV15006  RESET     PV105006
          GOTO      RPV19999
.
.         PV1.51 - Visit Indicator
.
RPV15100  BRANCH    COMPCNT,RPV15101
          GOTO      RPV19999
.
RPV15101  RESET     PV105101
          GOTO      RPV19999
.
.         PV1.52 - Other Healthcare Provider
.
RPV15200  BRANCH    COMPCNT,RPV15201:
                            RPV15202:
                            RPV15203:
                            RPV15204:
                            RPV15205:
                            RPV15206:
                            RPV15207:
                            RPV15208:
                            RPV15209:
                            RPV15210:
                            RPV15211:
                            RPV15212:
                            RPV15213:
                            RPV15214:
                            RPV15215
          GOTO      RPV19999
.
RPV15201  RESET     PV105201
          GOTO      RPV19999
.
RPV15202  RESET     PV105202
          GOTO      RPV19999
.
RPV15203  RESET     PV105203
          GOTO      RPV19999
.
RPV15204  RESET     PV105204
          GOTO      RPV19999
.
RPV15205  RESET     PV105205
          GOTO      RPV19999
.
RPV15206  RESET     PV105206
          GOTO      RPV19999
.
RPV15207  RESET     PV105207
          GOTO      RPV19999
.
RPV15208  RESET     PV105208
          GOTO      RPV19999
.
RPV15209  RESET     PV105209
          GOTO      RPV19999
.
RPV15210  RESET     PV105210
          GOTO      RPV19999
.
RPV15211  RESET     PV105211
          GOTO      RPV19999
.
RPV15212  RESET     PV105212
          GOTO      RPV19999
.
RPV15213  RESET     PV105213
          GOTO      RPV19999
.
RPV15214  RESET     PV105214
          GOTO      RPV19999
.
RPV15215  RESET     PV105215
          GOTO      RPV19999
.
RPV19999  RETURN
+
.*****************************************************************************
.*                                 RPV20000        Called by: PROC0000       *
.*                          Load the PV2 fields                              *
.*****************************************************************************
.
RPV20000  BRANCH    FIELDNO,RPV20100:            * Prior Pending Location
                            RPV20200:            * Accommodation Code
                            RPV20300:            * Admit Reason
                            RPV20400:            * Transfer Reason
                            RPV20500:            * Patient Valuables
                            RPV20600:            * Patient Valuables Location
                            RPV20700:            * Visit User Code
                            RPV20800:            * Expected Admit Date/Time
                            RPV20900:            * Expected Discharge Date/Time
                            RPV21000:            * Est. Length of Inpatient Stay
                            RPV21100:            * Actual Length of I/P Stay
                            RPV21200:            * Visit Description
                            RPV21300:            * Referral Source Code
                            RPV21400:            * Previous Service Date
                            RPV21500:            * Empl. Illness Related Indic.
                            RPV21600:            * Purge Status Code
                            RPV21700:            * Purge Status Date
                            RPV21800:            * Special Program Code
                            RPV21900:            * Retention Indicator
                            RPV22000:            * Exp. No of Insurance Plans
                            RPV22100:            * Visit Publicity Code
                            RPV22200:            * Visit Protection Indicator
                            RPV22300:            * Clinic Organization Name
                            RPV22400:            * Patient Status Code
                            RPV22500:            * Visit Priority Code
                            RPV22600:            * Previous Treatment Date
                            RPV22700:            * Exp. Discharge Disposition
                            RPV22800:            * Signature on File Date
                            RPV22900:            * First Similar Illness Date
                            RPV23000:            * Pt. Charge Adjustment Code
                            RPV23100:            * Recurring Service Code
                            RPV23200:            * Billing Media Code
                            RPV23300:            * Expected Surgery Date & Time
                            RPV23400:            * Military Partnership Code
                            RPV23500:            * Mil. Non-Availability Code
                            RPV23600:            * Newborn Baby Indicator
                            RPV23700             * Baby Detained Indicator
          GOTO      RPV29999
.
.         PV2.1 Prior Pending Location (PL)
.                           
RPV20100  BRANCH    COMPCNT,RPV20101:            * point of care (IS)
                            RPV20102:            * room (IS)
                            RPV20103:            * bed (IS)
                            RPV20104:            * facility (HD)
                            RPV20105:            * location status (IS)
                            RPV20106:            * person location type (IS)
                            RPV20107:            * building (IS)
                            RPV20108:            * floor (IS)
                            RPV20109             * location description (ST)
          GOTO      RPV29999
.                           
RPV20101  RESET     PV200101
          GOTO      RPV29999
.                           
RPV20102  RESET     PV200102
          GOTO      RPV29999
.                           
RPV20103  RESET     PV200103
          GOTO      RPV29999
.                           
RPV20104  RESET     PV200104
          GOTO      RPV29999
.                           
RPV20105  RESET     PV200105
          GOTO      RPV29999
.                           
RPV20106  RESET     PV200106
          GOTO      RPV29999
.                           
RPV20107  RESET     PV200107
          GOTO      RPV29999
.                           
RPV20108  RESET     PV200108
          GOTO      RPV29999
.                           
RPV20109  RESET     PV200109
          GOTO      RPV29999
.
.         PV2.2 Accommodation Code (CE)
.                           
RPV20200  BRANCH    COMPCNT,RPV20201:            * identifier (ST)
                            RPV20202:            * text (ST)
                            RPV20203:            * name of coding system (ST)
                            RPV20204:            * alternate identifier (ST)
                            RPV20205:            * alternate text (ST)
                            RPV20206             * name of alt. cod. system (ST)
          GOTO      RPV29999
.                           
RPV20201  RESET     PV200201
          GOTO      RPV29999
.                           
RPV20202  RESET     PV200202
          GOTO      RPV29999
.                           
RPV20203  RESET     PV200203
          GOTO      RPV29999
.                           
RPV20204  RESET     PV200204
          GOTO      RPV29999
.                           
RPV20205  RESET     PV200205
          GOTO      RPV29999
.                           
RPV20206  RESET     PV200206
          GOTO      RPV29999
.
.         PV2.3 Admit Reason (CE)
.
RPV20300  BRANCH    COMPCNT,RPV20301:            * identifier (ST)
                            RPV20302:            * text (ST)
                            RPV20303:            * name of coding system (ST)
                            RPV20304:            * alternate identifier (ST)
                            RPV20305:            * alternate text (ST)
                            RPV20306             * name of alt. cod. system (ST)
          GOTO      RPV29999
.                           
RPV20301  RESET     PV200301
          GOTO      RPV29999
.                           
RPV20302  RESET     PV200302
          GOTO      RPV29999
.                           
RPV20303  RESET     PV200303
          GOTO      RPV29999
.                           
RPV20304  RESET     PV200304
          GOTO      RPV29999
.                           
RPV20305  RESET     PV200305
          GOTO      RPV29999
.                           
RPV20306  RESET     PV200306
          GOTO      RPV29999
.
.         PV2.4 Transfer Reason (CE)
.
RPV20400  BRANCH    COMPCNT,RPV20401:            * identifier (ST)
                            RPV20402:            * text (ST)
                            RPV20403:            * name of coding system (ST)
                            RPV20404:            * alternate identifier (ST)
                            RPV20405:            * alternate text (ST)
                            RPV20406             * name of alt. cod. system (ST)
          GOTO      RPV29999
.                           
RPV20401  RESET     PV200401
          GOTO      RPV29999
.                           
RPV20402  RESET     PV200402
          GOTO      RPV29999
.                           
RPV20403  RESET     PV200403
          GOTO      RPV29999
.                           
RPV20404  RESET     PV200404
          GOTO      RPV29999
.                           
RPV20405  RESET     PV200405
          GOTO      RPV29999
.                           
RPV20406  RESET     PV200406
          GOTO      RPV29999
.
.         PV2.5 Patient Valuables (ST)
.
RPV20500  BRANCH    COMPCNT,RPV20501
          GOTO      RPV29999
.
RPV20501  RESET     PV200501
          GOTO      RPV29999
.
.         PV2.6 Patient Valuables Location (ST)
.
RPV20600  BRANCH    COMPCNT,RPV20601
          GOTO      RPV29999
.
RPV20601  RESET     PV200601
          GOTO      RPV29999
.
.         PV2.7 Visit User Code (IS)
.
RPV20700  BRANCH    COMPCNT,RPV20701
          GOTO      RPV29999
.
RPV20701  RESET     PV200701
          GOTO      RPV29999
.
.         PV2.8 Expected Admit Date/Time (TS)
.
RPV20800  BRANCH    COMPCNT,RPV20801
          GOTO      RPV29999
.
RPV20801  RESET     PV200801
          GOTO      RPV29999
.
.         PV2.9 Expected Discharge Date/Time (TS)
.
RPV20900  BRANCH    COMPCNT,RPV20901
          GOTO      RPV29999
.
RPV20901  RESET     PV200901
          GOTO      RPV29999
.
.         PV2.10 Estimated Length of Inpatient Stay (NM)
.
RPV21000  BRANCH    COMPCNT,RPV21001
          GOTO      RPV29999
.
RPV21001  RESET     PV201001
          GOTO      RPV29999
.
.         PV2.11 Actual Length of Inpatient Stay (NM)
.
RPV21100  BRANCH    COMPCNT,RPV21101
          GOTO      RPV29999
.
RPV21101  RESET     PV201101
          GOTO      RPV29999
.
.         PV2.12 Visit Description (ST)
.
RPV21200  BRANCH    COMPCNT,RPV21201
          GOTO      RPV29999
.
RPV21201  RESET     PV201201
          GOTO      RPV29999
.
.         PV2.13 Referral Source Code (XCN)
.                           
RPV21300  BRANCH    COMPCNT,RPV21301:            * id number (ST)
                            RPV21302:            * family name (ST)
                            RPV21303:            * given name (ST)
                            RPV21304:            * middle name (ST)
                            RPV21305:            * suffix (ST)
                            RPV21306:            * prefix (ST)
                            RPV21307:            * degree (IS)
                            RPV21308:            * source table (IS)
                            RPV21309:            * assigning authority (HD)
                            RPV21310:            * name type code (ID)
                            RPV21311:            * identifier check digit (ST)
                            RPV21312:            * check digit scheme code (ID)
                            RPV21313:            * identifier type code (IS)
                            RPV21314:            * assigning facility (HD)
                            RPV21315             * name representation code (ID)
          GOTO      RPV29999
.                           
RPV21301  RESET     PV201301
          GOTO      RPV29999
.                           
RPV21302  RESET     PV201302
          GOTO      RPV29999
.                           
RPV21303  RESET     PV201303
          GOTO      RPV29999
.                           
RPV21304  RESET     PV201304
          GOTO      RPV29999
.                           
RPV21305  RESET     PV201305
          GOTO      RPV29999
.                           
RPV21306  RESET     PV201306
          GOTO      RPV29999
.                           
RPV21307  RESET     PV201307
          GOTO      RPV29999
.                           
RPV21308  RESET     PV201308
          GOTO      RPV29999
.                           
RPV21309  RESET     PV201309
          GOTO      RPV29999
.                           
RPV21310  RESET     PV201310
          GOTO      RPV29999
.                           
RPV21311  RESET     PV201311
          GOTO      RPV29999
.                           
RPV21312  RESET     PV201312
          GOTO      RPV29999
.                           
RPV21313  RESET     PV201313
          GOTO      RPV29999
.                           
RPV21314  RESET     PV201314
          GOTO      RPV29999
.                           
RPV21315  RESET     PV201315
          GOTO      RPV29999
.
.         PV2.14 Previous Service Date (DT)
.
RPV21400  BRANCH    COMPCNT,RPV21401
          GOTO      RPV29999
.
RPV21401  RESET     PV201401
          GOTO      RPV29999
.
.         PV2.15 Employment Illness Related Indicator (ID)
.
RPV21500  BRANCH    COMPCNT,RPV21501
          GOTO      RPV29999
.
RPV21501  RESET     PV201501
          GOTO      RPV29999
.
.         PV2.16 Purge Status Code (IS)
.
RPV21600  BRANCH    COMPCNT,RPV21601
          GOTO      RPV29999
.
RPV21601  RESET     PV201601
          GOTO      RPV29999
.
.         PV2.17 Purge Status Date (DT)
.
RPV21700  BRANCH    COMPCNT,RPV21701
          GOTO      RPV29999
.
RPV21701  RESET     PV201701
          GOTO      RPV29999
.
.         PV2.18 Special Program Code (IS)
.
RPV21800  BRANCH    COMPCNT,RPV21801
          GOTO      RPV29999
.
RPV21801  RESET     PV201801
          GOTO      RPV29999
.
.         PV2.19 Retention Indicator (ID)
.
RPV21900  BRANCH    COMPCNT,RPV21901
          GOTO      RPV29999
.
RPV21901  RESET     PV201901
          GOTO      RPV29999
.
.         PV2.20 Expected Number of Insurance Plans (NM)
.
RPV22000  BRANCH    COMPCNT,RPV22001
          GOTO      RPV29999
.
RPV22001  RESET     PV202001
          GOTO      RPV29999
.
.         PV2.21 Visit Publicity Code (IS)
.
RPV22100  BRANCH    COMPCNT,RPV22101
          GOTO      RPV29999
.
RPV22101  RESET     PV202101
          GOTO      RPV29999
.
.         PV2.22 Visit Protection Indicator (ID)
.
RPV22200  BRANCH    COMPCNT,RPV22201
          GOTO      RPV29999
.
RPV22201  RESET     PV202201
          GOTO      RPV29999
.
.         PV2.23 Clinic Organization Name (XON)
.
RPV22300  BRANCH    COMPCNT,RPV22301:            * organisation name (ST)
                            RPV22302:            * org. name type code (IS)
                            RPV22303:            * id number (NM)
                            RPV22304:            * check digit (NM)
                            RPV22305:            * check digit scheme code (ID)
                            RPV22306:            * assigning authority (HD)
                            RPV22307:            * identifier type code (IS)
                            RPV22308:            * assigning facility (HD)
                            RPV22309             * name rep. code (ID)
          GOTO      RPV29999
.
RPV22301  RESET     PV202301
          GOTO      RPV29999
.
RPV22302  RESET     PV202302
          GOTO      RPV29999
.
RPV22303  RESET     PV202303
          GOTO      RPV29999
.
RPV22304  RESET     PV202304
          GOTO      RPV29999
.
RPV22305  RESET     PV202305
          GOTO      RPV29999
.
RPV22306  RESET     PV202306
          GOTO      RPV29999
.
RPV22307  RESET     PV202307
          GOTO      RPV29999
.
RPV22308  RESET     PV202308
          GOTO      RPV29999
.
RPV22309  RESET     PV202309
          GOTO      RPV29999
.
.         PV2.24 Patient Status Code (IS)
.
RPV22400  BRANCH    COMPCNT,RPV22401
          GOTO      RPV29999
.
RPV22401  RESET     PV202401
          GOTO      RPV29999
.
.         PV2.25 Visit Priority Code (IS)
.
RPV22500  BRANCH    COMPCNT,RPV22501
          GOTO      RPV29999
.
RPV22501  RESET     PV202501
          GOTO      RPV29999
.
.         PV2.26 Previous Treatment Date (DT)
.
RPV22600  BRANCH    COMPCNT,RPV22601
          GOTO      RPV29999
.
RPV22601  RESET     PV202601
          GOTO      RPV29999
.
.         PV2.27 Expected Discharge Disposition (IS)
.
RPV22700  BRANCH    COMPCNT,RPV22701
          GOTO      RPV29999
.
RPV22701  RESET     PV202701
          GOTO      RPV29999
.
.         PV2.28 Signature on File Date (DT)
.
RPV22800  BRANCH    COMPCNT,RPV22801
          GOTO      RPV29999
.
RPV22801  RESET     PV202801
          GOTO      RPV29999
.
.         PV2.29 First Similar Illness Date (DT)
.
RPV22900  BRANCH    COMPCNT,RPV22901
          GOTO      RPV29999
.
RPV22901  RESET     PV202901
          GOTO      RPV29999
.
.         PV2.30 Patient Charge Adjustment Code (CE)
.
RPV23000  BRANCH    COMPCNT,RPV23001:            * identifier (ST)
                            RPV23002:            * text (ST)
                            RPV23003:            * name of coding system (ST)
                            RPV23004:            * alternate identifier (ST)
                            RPV23005:            * alternate text (ST)
                            RPV23006             * name of alt. cod. system (ST)
          GOTO      RPV29999
.                           
RPV23001  RESET     PV203001
          GOTO      RPV29999
.                           
RPV23002  RESET     PV203002
          GOTO      RPV29999
.                           
RPV23003  RESET     PV203003
          GOTO      RPV29999
.                           
RPV23004  RESET     PV203004
          GOTO      RPV29999
.                           
RPV23005  RESET     PV203005
          GOTO      RPV29999
.                           
RPV23006  RESET     PV203006
.
.         PV2.31 Recurring Service Code (IS)
.
RPV23100  BRANCH    COMPCNT,RPV23101
          GOTO      RPV29999
.
RPV23101  RESET     PV203101
          GOTO      RPV29999
.
.         PV2.32 Billing Media Code (ID)
.
RPV23200  BRANCH    COMPCNT,RPV23201
          GOTO      RPV29999
.
RPV23201  RESET     PV203201
          GOTO      RPV29999
.
.         PV2.33 Expected Surgery Date & Time (TS)
.
RPV23300  BRANCH    COMPCNT,RPV23301
          GOTO      RPV29999
.
RPV23301  RESET     PV203301
          GOTO      RPV29999
.
.         PV2.34 Military Partnership Code (ID)
.
RPV23400  BRANCH    COMPCNT,RPV23401
          GOTO      RPV29999
.
RPV23401  RESET     PV203401
          GOTO      RPV29999
.
.         PV2.35 Military Non-Availability Code (ID)
.
RPV23500  BRANCH    COMPCNT,RPV23501
          GOTO      RPV29999
.
RPV23501  RESET     PV203501
          GOTO      RPV29999
.
.         PV2.36 Newborn Baby Indicator (ID)
.
RPV23600  BRANCH    COMPCNT,RPV23601
          GOTO      RPV29999
.
RPV23601  RESET     PV203601
          GOTO      RPV29999
.
.         PV2.37 Baby Detained Indicator (ID)
.
RPV23700  BRANCH    COMPCNT,RPV23701
          GOTO      RPV29999
.
RPV23701  RESET     PV203701
          GOTO      RPV29999
.
RPV29999  RETURN
+
.*****************************************************************************
.*                              RFT10000           Called by: RFLD0000       *
.*                         Reset all FT1 variables                           *
.*****************************************************************************
.
RFT10000  BRANCH    FIELDNO,RFT10100:            * set id
                            RFT10200:            * transaction id
                            RFT10300:            * transaction batch id
                            RFT10400:            * transaction date
                            RFT10500:            * transaction posting date
                            RFT10600:            * transaction type
                            RFT10700:            * transaction code
                            RFT10800:            * transaction description
                            RFT10900:            * transaction description - alt
                            RFT11000:            * transaction quantity
                            RFT11100:            * transaction amount - extended
                            RFT11200:            * transaction amount - unit
                            RFT11300:            * department code
                            RFT11400:            * insurance plan id
                            RFT11500:            * insurance amount
                            RFT11600:            * assigned patient location
                            RFT11700:            * fee schedule
                            RFT11800:            * patient type
                            RFT11900:            * diagnosis code
                            RFT12000:            * performed by code
                            RFT12100:            * ordered by code
                            RFT12200:            * unit cost
                            RFT12300:            * filler order number
                            RFT12400:            * entered by code
                            RFT12500:            * procedure code
                            RFT12600             * procedure code modifier
          GOTO      RFT19999
.
.         FT1.1 - Set Id
.
RFT10100  BRANCH    COMPCNT,RFT10101
          GOTO      RFT19999
.
RFT10101  RESET     FT100101
          GOTO      RFT19999
.
.         FT1.2 - Transaction Id
.
RFT10200  BRANCH    COMPCNT,RFT10201
          GOTO      RFT19999
.
RFT10201  RESET     FT100201
          GOTO      RFT19999
.
.         FT1.3 - Transaction Batch Id
.
RFT10300  BRANCH    COMPCNT,RFT10301
          GOTO      RFT19999
.
RFT10301  RESET     FT100301
          GOTO      RFT19999
.
.         FT1.4 - Transaction Date
.
RFT10400  BRANCH    COMPCNT,RFT10401
          GOTO      RFT19999
.
RFT10401  RESET     FT100401
          GOTO      RFT19999
.
.         FT1.5 - Transaction Posting Date
.
RFT10500  BRANCH    COMPCNT,RFT10501
          GOTO      RFT19999
.
RFT10501  RESET     FT100501
          GOTO      RFT19999
.
.         FT1.6 - Transaction Type
.
RFT10600  BRANCH    COMPCNT,RFT10601
          GOTO      RFT19999
.
RFT10601  RESET     FT100601
          GOTO      RFT19999
.
.         FT1.7 - Transaction Code
.
RFT10700  BRANCH    COMPCNT,RFT10701:
                            RFT10702:
                            RFT10703:
                            RFT10704:
                            RFT10705:
                            RFT10706
          GOTO      RFT19999
.
RFT10701  RESET     FT100701
          MOVE      FT100701,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,FT100701
          GOTO      RFT19999
.
RFT10702  RESET     FT100702
          MOVE      FT100702,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,FT100702
          GOTO      RFT19999
.
RFT10703  RESET     FT100703
          GOTO      RFT19999
.
RFT10704  RESET     FT100704
          GOTO      RFT19999
.
RFT10705  RESET     FT100705
          GOTO      RFT19999
.
RFT10706  RESET     FT100706
          GOTO      RFT19999
.
.         FT1.8 - Transaction Description
.
RFT10800  BRANCH    COMPCNT,RFT10801
          GOTO      RFT19999
.
RFT10801  RESET     FT100801
          MOVE      FT100801,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,FT100801
          GOTO      RFT19999
.
.         FT1.9 - Transaction Description - Alt
.
RFT10900  BRANCH    COMPCNT,RFT10901
          GOTO      RFT19999
.
RFT10901  RESET     FT100901
          GOTO      RFT19999
.
.         FT1.10 - Transaction Quantity
.
RFT11000  BRANCH    COMPCNT,RFT11001
          GOTO      RFT19999
.
RFT11001  RESET     FT101001
          GOTO      RFT19999
.
.         FT1.11 - Transaction Amount - Extended
.
RFT11100  BRANCH    COMPCNT,RFT11101:
                            RFT11102:
                            RFT11103:
                            RFT11104:
                            RFT11105:
                            RFT11106
          GOTO      RFT19999
.
RFT11101  RESET     FT101101
          GOTO      RFT19999
.
RFT11102  RESET     FT101102
          GOTO      RFT19999
.
RFT11103  RESET     FT101103
          GOTO      RFT19999
.
RFT11104  RESET     FT101104
          GOTO      RFT19999
.
RFT11105  RESET     FT101105
          GOTO      RFT19999
.
RFT11106  RESET     FT101106
          GOTO      RFT19999
.
.         FT1.12 - Transaction Amount - Unit
.
RFT11200  BRANCH    COMPCNT,RFT11201:
                            RFT11202:
                            RFT11203:
                            RFT11204:
                            RFT11205:
                            RFT11206
          GOTO      RFT19999
.
RFT11201  RESET     FT101201
          GOTO      RFT19999
.
RFT11202  RESET     FT101202
          GOTO      RFT19999
.
RFT11203  RESET     FT101203
          GOTO      RFT19999
.
RFT11204  RESET     FT101204
          GOTO      RFT19999
.
RFT11205  RESET     FT101205
          GOTO      RFT19999
.
RFT11206  RESET     FT101206
          GOTO      RFT19999
.
.         FT1.13 - Department Code
.
RFT11300  BRANCH    COMPCNT,RFT11301:
                            RFT11302:
                            RFT11303:
                            RFT11304:
                            RFT11305:
                            RFT11306
          GOTO      RFT19999
.
RFT11301  RESET     FT101301
          GOTO      RFT19999
.
RFT11302  RESET     FT101302
          GOTO      RFT19999
.
RFT11303  RESET     FT101303
          GOTO      RFT19999
.
RFT11304  RESET     FT101304
          GOTO      RFT19999
.
RFT11305  RESET     FT101305
          GOTO      RFT19999
.
RFT11306  RESET     FT101306
          GOTO      RFT19999
.
.         FT1.14 - Insurance Plan ID
.
RFT11400  BRANCH    COMPCNT,RFT11401:
                            RFT11402:
                            RFT11403:
                            RFT11404:
                            RFT11405:
                            RFT11406
          GOTO      RFT19999
.
RFT11401  RESET     FT101401
          GOTO      RFT19999
.
RFT11402  RESET     FT101402
          GOTO      RFT19999
.
RFT11403  RESET     FT101403
          GOTO      RFT19999
.
RFT11404  RESET     FT101404
          GOTO      RFT19999
.
RFT11405  RESET     FT101405
          GOTO      RFT19999
.
RFT11406  RESET     FT101406
          GOTO      RFT19999
.
.         FT1.15 - Insurance Amount
.
RFT11500  BRANCH    COMPCNT,RFT11501:
                            RFT11502:
                            RFT11503:
                            RFT11504:
                            RFT11505:
                            RFT11506
          GOTO      RFT19999
.
RFT11501  RESET     FT101501
          GOTO      RFT19999
.
RFT11502  RESET     FT101502
          GOTO      RFT19999
.
RFT11503  RESET     FT101503
          GOTO      RFT19999
.
RFT11504  RESET     FT101504
          GOTO      RFT19999
.
RFT11505  RESET     FT101505
          GOTO      RFT19999
.
RFT11506  RESET     FT101506
          GOTO      RFT19999
.
.         FT1.16 - Assigned Patient Location
.
RFT11600  BRANCH    COMPCNT,RFT11601:
                            RFT11602:
                            RFT11603:
                            RFT11604:
                            RFT11605:
                            RFT11606:
                            RFT11607:
                            RFT11608:
                            RFT11609
          GOTO      RFT19999
.
RFT11601  RESET     FT101601
          GOTO      RFT19999
.
RFT11602  RESET     FT101602
          GOTO      RFT19999
.
RFT11603  RESET     FT101603
          GOTO      RFT19999
.
RFT11604  RESET     FT101604
          GOTO      RFT19999
.
RFT11605  RESET     FT101605
          GOTO      RFT19999
.
RFT11606  RESET     FT101606
          GOTO      RFT19999
.
RFT11607  RESET     FT101607
          GOTO      RFT19999
.
RFT11608  RESET     FT101608
          GOTO      RFT19999
.
RFT11609  RESET     FT101609
          GOTO      RFT19999
.
.         FT1.17 - Fee Schedule
.
RFT11700  BRANCH    COMPCNT,RFT11701
          GOTO      RFT19999
.
RFT11701  RESET     FT101701
          GOTO      RFT19999
.
.         FT1.18 - Patient Type
.
RFT11800  BRANCH    COMPCNT,RFT11801
          GOTO      RFT19999
.
RFT11801  RESET     FT101801
          GOTO      RFT19999
.
.         FT1.19 - Diagnosis Code
.
RFT11900  BRANCH    COMPCNT,RFT11901:
                            RFT11902:
                            RFT11903:
                            RFT11904:
                            RFT11905:
                            RFT11906
          GOTO      RFT19999
.
RFT11901  RESET     FT101901
          GOTO      RFT19999
.
RFT11902  RESET     FT101902
          GOTO      RFT19999
.
RFT11903  RESET     FT101903
          GOTO      RFT19999
.
RFT11904  RESET     FT101904
          GOTO      RFT19999
.
RFT11905  RESET     FT101905
          GOTO      RFT19999
.
RFT11906  RESET     FT101906
          GOTO      RFT19999
.
.         FT1.20 - Performed By Code
.
RFT12000  BRANCH    COMPCNT,RFT12001:
                            RFT12002:
                            RFT12003:
                            RFT12004:
                            RFT12005:
                            RFT12006:
                            RFT12007:
                            RFT12008:
                            RFT12009:
                            RFT12010:
                            RFT12011:
                            RFT12012:
                            RFT12013:
                            RFT12014:
                            RFT12015
          GOTO      RFT19999
.
RFT12001  RESET     FT102001
          GOTO      RFT19999
.
RFT12002  RESET     FT102002
          GOTO      RFT19999
.
RFT12003  RESET     FT102003
          GOTO      RFT19999
.
RFT12004  RESET     FT102004
          GOTO      RFT19999
.
RFT12005  RESET     FT102005
          GOTO      RFT19999
.
RFT12006  RESET     FT102006
          GOTO      RFT19999
.
RFT12007  RESET     FT102007
          GOTO      RFT19999
.
RFT12008  RESET     FT102008
          GOTO      RFT19999
.
RFT12009  RESET     FT102009
          GOTO      RFT19999
.
RFT12010  RESET     FT102010
          GOTO      RFT19999
.
RFT12011  RESET     FT102011
          GOTO      RFT19999
.
RFT12012  RESET     FT102012
          GOTO      RFT19999
.
RFT12013  RESET     FT102013
          GOTO      RFT19999
.
RFT12014  RESET     FT102014
          GOTO      RFT19999
.
RFT12015  RESET     FT102015
          GOTO      RFT19999
.
.         FT1.21 - Ordered By Code
.
RFT12100  BRANCH    COMPCNT,RFT12101:
                            RFT12102:
                            RFT12103:
                            RFT12104:
                            RFT12105:
                            RFT12106:
                            RFT12107:
                            RFT12108:
                            RFT12109:
                            RFT12110:
                            RFT12111:
                            RFT12112:
                            RFT12113:
                            RFT12114:
                            RFT12115
          GOTO      RFT19999
.
RFT12101  RESET     FT102101
          GOTO      RFT19999
.
RFT12102  RESET     FT102102
          GOTO      RFT19999
.
RFT12103  RESET     FT102103
          GOTO      RFT19999
.
RFT12104  RESET     FT102104
          GOTO      RFT19999
.
RFT12105  RESET     FT102105
          GOTO      RFT19999
.
RFT12106  RESET     FT102106
          GOTO      RFT19999
.
RFT12107  RESET     FT102107
          GOTO      RFT19999
.
RFT12108  RESET     FT102108
          GOTO      RFT19999
.
RFT12109  RESET     FT102109
          GOTO      RFT19999
.
RFT12110  RESET     FT102110
          GOTO      RFT19999
.
RFT12111  RESET     FT102111
          GOTO      RFT19999
.
RFT12112  RESET     FT102112
          GOTO      RFT19999
.
RFT12113  RESET     FT102113
          GOTO      RFT19999
.
RFT12114  RESET     FT102114
          GOTO      RFT19999
.
RFT12115  RESET     FT102115
          GOTO      RFT19999
.
.         FT1.22 - Unit Cost
.
RFT12200  BRANCH    COMPCNT,RFT12201:
                            RFT12202:
                            RFT12203:
                            RFT12204:
                            RFT12205:
                            RFT12206
          GOTO      RFT19999
.
RFT12201  RESET     FT102201
          GOTO      RFT19999
.
RFT12202  RESET     FT102202
          GOTO      RFT19999
.
RFT12203  RESET     FT102203
          GOTO      RFT19999
.
RFT12204  RESET     FT102204
          GOTO      RFT19999
.
RFT12205  RESET     FT102205
          GOTO      RFT19999
.
RFT12206  RESET     FT102206
          GOTO      RFT19999
.
.         FT1.23 - Filler Order Number
.
RFT12300  BRANCH    COMPCNT,RFT12301:
                            RFT12302:
                            RFT12303:
                            RFT12304
          GOTO      RFT19999
.
RFT12301  RESET     FT102301
          MOVE      FT102301,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,FT102301
          GOTO      RFT19999
.
RFT12302  RESET     FT102302
          GOTO      RFT19999
.
RFT12303  RESET     FT102303
          GOTO      RFT19999
.
RFT12304  RESET     FT102304
          GOTO      RFT19999
.
.         FT1.24 - Entered By Code
.
RFT12400  BRANCH    COMPCNT,RFT12401:
                            RFT12402:
                            RFT12403:
                            RFT12404:
                            RFT12405:
                            RFT12406:
                            RFT12407:
                            RFT12408:
                            RFT12409:
                            RFT12410:
                            RFT12411:
                            RFT12412:
                            RFT12413:
                            RFT12414:
                            RFT12415
          GOTO      RFT19999
.
RFT12401  RESET     FT102401
          GOTO      RFT19999
.
RFT12402  RESET     FT102402
          GOTO      RFT19999
.
RFT12403  RESET     FT102403
          GOTO      RFT19999
.
RFT12404  RESET     FT102404
          GOTO      RFT19999
.
RFT12405  RESET     FT102405
          GOTO      RFT19999
.
RFT12406  RESET     FT102406
          GOTO      RFT19999
.
RFT12407  RESET     FT102407
          GOTO      RFT19999
.
RFT12408  RESET     FT102408
          GOTO      RFT19999
.
RFT12409  RESET     FT102409
          GOTO      RFT19999
.
RFT12410  RESET     FT102410
          GOTO      RFT19999
.
RFT12411  RESET     FT102411
          GOTO      RFT19999
.
RFT12412  RESET     FT102412
          GOTO      RFT19999
.
RFT12413  RESET     FT102413
          GOTO      RFT19999
.
RFT12414  RESET     FT102414
          GOTO      RFT19999
.
RFT12415  RESET     FT102415
          GOTO      RFT19999
.
.         FT1.25 - Procedure Code
.
RFT12500  BRANCH    COMPCNT,RFT12501:
                            RFT12502:
                            RFT12503:
                            RFT12504:
                            RFT12505:
                            RFT12506
          GOTO      RFT19999
.
RFT12501  RESET     FT102501
          GOTO      RFT19999
.
RFT12502  RESET     FT102502
          GOTO      RFT19999
.
RFT12503  RESET     FT102503
          GOTO      RFT19999
.
RFT12504  RESET     FT102504
          GOTO      RFT19999
.
RFT12505  RESET     FT102505
          GOTO      RFT19999
.
RFT12506  RESET     FT102506
          GOTO      RFT19999
.
.         FT1.26 - Procedure Code Modifier
.
RFT12600  BRANCH    COMPCNT,RFT12601:
                            RFT12602:
                            RFT12603:
                            RFT12604:
                            RFT12605:
                            RFT12606
          GOTO      RFT19999
.
RFT12601  RESET     FT102601
          GOTO      RFT19999
.
RFT12602  RESET     FT102602
          GOTO      RFT19999
.
RFT12603  RESET     FT102603
          GOTO      RFT19999
.
RFT12604  RESET     FT102604
          GOTO      RFT19999
.
RFT12605  RESET     FT102605
          GOTO      RFT19999
.
RFT12606  RESET     FT102606
          GOTO      RFT19999
.
RFT19999  RETURN 
+         
.*****************************************************************************
.*                                 RZFT0000        Called by: PROC0000       *
.*                          Reset the ZFT fields                             *
.*****************************************************************************
.
RZFT0000  BRANCH    FIELDNO,RZFT0100:            * Procedure Start Time
                            RZFT0200:            * Procedure End Time
                            RZFT0300:            * Transaction End Date
                            RZFT0400:            * Reporting Proc Start Time
                            RZFT0500:            * Reporting Proc End Time
                            RZFT0600             * AHPRA Identifier
.
.         Invalid ZFT field received, so ignore it
.
          GOTO      RZFT9999
.
.         ZFT.1  Procedure Start Time (TM)
.
RZFT0100  BRANCH    COMPCNT,RZFT0101
          GOTO      RZFT9999
.
RZFT0101  RESET     ZFT00101
          GOTO      RZFT9999
.
.         ZFT.2  Procedure End Time (TM)
.
RZFT0200  BRANCH    COMPCNT,RZFT0201
          GOTO      RZFT9999
.
RZFT0201  RESET     ZFT00201
          GOTO      RZFT9999
.
.         ZFT.3  Transaction End Date (DT)
.
RZFT0300  BRANCH    COMPCNT,RZFT0301
          GOTO      RZFT9999
.
RZFT0301  RESET     ZFT00301
          GOTO      RZFT9999
.
.         ZFT.4  Reporting Procedure Start Time (TM)
.
RZFT0400  BRANCH    COMPCNT,RZFT0401
          GOTO      RZFT9999
.
RZFT0401  RESET     ZFT00401
          GOTO      RZFT9999
.
.         ZFT.5  Reporting Procedure End Time (TM)
.
RZFT0500  BRANCH    COMPCNT,RZFT0501
          GOTO      RZFT9999
.
RZFT0501  RESET     ZFT00501
          GOTO      RZFT9999
.
.         ZFT.6  AHPRA Identifier (ST)
.
RZFT0600  BRANCH    COMPCNT,RZFT0601
          GOTO      RZFT9999
.
RZFT0601  RESET     ZFT00601
          GOTO      RZFT9999
.
RZFT9999  RETURN
+
.*****************************************************************************
.*                                 RNTE0000        Called by: PROC0000       *
.*                          Reset the NTE fields                             *
.*****************************************************************************
.
RNTE0000  BRANCH    FIELDNO,RNTE0100:            * Set ID (SI)
                            RNTE0200:            * Comment Source (ID)
                            RNTE0300:            * Comment (FT)
                            RNTE0400             * Comment Type (CE)
.
.         Invalid NTE field received, so ignore it
.
          GOTO      RNTE9999
.
.         NTE.1  Set ID (SI)
.
RNTE0100  BRANCH    COMPCNT,RNTE0101
          GOTO      RNTE9999
.
RNTE0101  RESET     NTE00101                     * Set ID (SI)
          GOTO      RNTE9999
.
.         NTE.2  Comment Source (ID)
.
RNTE0200  BRANCH    COMPCNT,RNTE0201
          GOTO      RNTE9999
.
RNTE0201  RESET     NTE00201                     * Comment Source (ID)
          GOTO      RNTE9999
.
.         NTE.3  Comment (FT)
.
RNTE0300  BRANCH    COMPCNT,RNTE0301
          GOTO      RNTE9999
.
RNTE0301  RESET     NTE00301                     * Comment (FT)
          MOVE      NTE00301,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NTE00301
          GOTO      RNTE9999
.
.         NTE.4  Comment Type (CE)
.
RNTE0400  BRANCH    COMPCNT,RNTE0401:            * identifier (ST)
                            RNTE0402:            * text (ST)
                            RNTE0403:            * name of coding system (ST)
                            RNTE0404:            * alternate identifier (ST)
                            RNTE0405:            * alternate text (ST)
                            RNTE0406             * name of alt. cod. system (ST)
          GOTO      RNTE9999
.
RNTE0401  RESET     NTE00401                     * identifier (ST)
          MOVE      NTE00401,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NTE00401
          GOTO      RNTE9999
.
RNTE0402  RESET     NTE00402                     * text (ST)
          GOTO      RNTE9999
.
RNTE0403  RESET     NTE00403                     * name of coding system (ST)
          GOTO      RNTE9999
.
RNTE0404  RESET     NTE00404                     * alternate identifier (ST)
          GOTO      RNTE9999
.
RNTE0405  RESET     NTE00405                     * alternate text (ST)
          GOTO      RNTE9999
.
RNTE0406  RESET     NTE00406                     * name of alt. cod. system (ST)
          GOTO      RNTE9999
.
.
RNTE9999  RETURN
+
.*****************************************************************************
.*                              RARQ0000           Called by: RFLD0000       *
.*                         Reset all ARQ variables                           *
.*****************************************************************************
RARQ0000
RARQ9999  RETURN
+
.*****************************************************************************
.*                              RGT10000           Called by: RFLD0000       *
.*                         Reset all GT1 variables                           *
.*****************************************************************************
RGT10000  BRANCH    FIELDNO,RGT10100:            * Set ID (SI)
                            RGT19999:            * Not used
                            RGT10300:            * Guarantor Name (XPN)
                            RGT19999:            * Not used
                            RGT10500:            * Guarantor Address (XAD)
                            RGT10600:            * Guarantor Home Phone (XTN)
                            RGT10700:            * Guarantor Work Phone (XTN)
                            RGT19999:            * Not used
                            RGT19999:            * Not used
                            RGT19999:            * Not used
                            RGT11100             * Guarantor Relationship (CE)
.
.         Invalid GT1 field received, so ignore it
.
          GOTO      RGT19999
.
.         GT1.1  Set ID (SI)
.
RGT10100  BRANCH    COMPCNT,RGT10101
          GOTO      RGT19999
.
RGT10101  RESET     GT100101                     * Set ID (SI)
          GOTO      RGT19999
.
.         GT1.3  Guarantor Name (XPN)
.
RGT10300  BRANCH    COMPCNT,RGT10301:            * family name (ST)
                            RGT10302:            * given name (ST)
                            RGT10303:            * middle name (ST)
                            RGT10304:            * suffix (ST)
                            RGT10305:            * prefix (ST)
                            RGT10306:            * degree (IS)
                            RGT10307:            * name type code (ID)
                            RGT10308             * name representation code (ID)
          GOTO      RGT19999
.
RGT10301  RESET     GT100301                     * load family name (ST)
          MOVE      GT100301,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,GT100301
          GOTO      RGT19999
.
RGT10302  RESET     GT100302                     * load given name (ST)
          MOVE      GT100302,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,GT100302
          GOTO      RGT19999
.
RGT10303  RESET     GT100303                     * load middle name (ST)
          MOVE      GT100303,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,GT100303
          GOTO      RGT19999
.
RGT10304  RESET     GT100304                     * load suffix (ST)
          GOTO      RGT19999
.
RGT10305  RESET     GT100305                     * load prefix (ST)
          GOTO      RGT19999
.
RGT10306  RESET     GT100306                     * load degree (IS)
          GOTO      RGT19999
.
RGT10307  RESET     GT100307                     * load name type code (ID)
          GOTO      RGT19999
.
RGT10308  RESET     GT100308                     * load name rep. code (ID)
          GOTO      RGT19999
.
.         GT1.5  Guarantor Address (XAD)
.
RGT10500  BRANCH    COMPCNT,RGT10501:            * street address (ST)
                            RGT10502:            * other designation (ST)
                            RGT10503:            * city (ST)
                            RGT10504:            * state (ST)
                            RGT10505:            * postcode (ST)
                            RGT10506:            * country (ID)
                            RGT10507:            * address type (ID)
                            RGT10508:            * other geographic desig. (ST)
                            RGT10509:            * county (IS)
                            RGT10510:            * census tract (IS)
                            RGT10511             * address rep. code (ID)
          GOTO      RGT19999
.
RGT10501  RESET     GT100501                     * load street address (ST)
          MOVE      GT100501,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,GT100501
          REP       UPPLOW,GT100501
          MATCH     BLANKSTR,GT100501
          IF        !@EQUAL
            REP       "#"'",GT100501
          ENDIF
          GOTO      RGT19999
.
RGT10502  RESET     GT100502                     * load other designation (ST)
          MOVE      GT100502,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,GT100502
          REP       UPPLOW,GT100502
          MATCH     BLANKSTR,GT100502
          IF        !@EQUAL
            REP       "#"'",GT100502
          ENDIF
          GOTO      RGT19999
.
RGT10503  RESET     GT100503                     * load city (ST)
          MOVE      GT100503,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,GT100503
          REP       UPPLOW,GT100503
          MATCH     BLANKSTR,GT100503
          IF        !@EQUAL
            REP       "#"'",GT100503
          ENDIF
          GOTO      RGT19999
.
RGT10504  RESET     GT100504                     * load state (ST)
          MOVE      GT100504,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,GT100504
          REP       UPPLOW,GT100504
          MATCH     BLANKSTR,GT100504
          IF        !@EQUAL
            REP       "#"'",GT100504
          ENDIF
          GOTO      RGT19999
.
RGT10505  RESET     GT100505                     * load postcode (ST)
          MOVE      GT100505,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,GT100505
          GOTO      RGT19999
.
RGT10506  RESET     GT100506                     * load country (ID)
          MOVE      GT100506,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,GT100506
          GOTO      RGT19999
.
RGT10507  RESET     GT100507                     * load address type (ID)
          GOTO      RGT19999
.
RGT10508  RESET     GT100508                     * load other geog. desig. (ST)
          GOTO      RGT19999
.
RGT10509  RESET     GT100509                     * load county (IS)
          GOTO      RGT19999
.
RGT10510  RESET     GT100510                     * load census tract (IS)
          GOTO      RGT19999
.
RGT10511  RESET     GT100511                     * load address rep code (ID)
          GOTO      RGT19999
.
.         GT1.6  Guarantor Home Phone (XTN)
.                 (maximum of 1 repeats - 2 phone numbers in total)
.
RGT10600  COMPARE   REPTNCNT,TWO                 * maximum repeats reached ?
          GOTO      RGT19999 IF LESS             * yes
.
          BRANCH    COMPCNT,RGT10601:            * text
                            RGT10602:            * telecomm. use code (ID)
                            RGT10603:            * telcomm. equipment type (ID)
                            RGT10604:            * email address (ST)
                            RGT10605:            * country code (NM)
                            RGT10606:            * area/city code (NM)
                            RGT10607:            * phone number (NM)
                            RGT10608:            * extension (NM)
                            RGT10609             * any text (ST)
          GOTO      RGT19999
.
RGT10601  RESET     GT100601[REPTNCNT]           * load text
          GOTO      RGT19999
.
RGT10602  RESET     GT100602[REPTNCNT]           * load telecomm. use code (ID)
          MOVE      GT100602[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,GT100602[REPTNCNT]
          GOTO      RGT19999
.
RGT10603  RESET     GT100603[REPTNCNT]           * load telcomm. equip.type (ID)
          MOVE      GT100603[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,GT100603[REPTNCNT]
          GOTO      RGT19999
.
RGT10604  RESET     GT100604[REPTNCNT]           * load email address (ST)
          MOVE      GT100604[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,GT100604[REPTNCNT]
          GOTO      RGT19999
.
RGT10605  RESET     GT100605[REPTNCNT]           * load country code (NM)
          GOTO      RGT19999
.
RGT10606  RESET     GT100606[REPTNCNT]           * load area/city code (NM)
          GOTO      RGT19999
.
RGT10607  RESET     GT100607[REPTNCNT]           * load phone number (NM)
          MOVE      GT100607[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,GT100607[REPTNCNT]
          GOTO      RGT19999
.
RGT10608  RESET     GT100608[REPTNCNT]           * load extension (NM)
          GOTO      RGT19999
.
RGT10609  RESET     GT100609[REPTNCNT]           * load any text (ST)
          MOVE      GT100609[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,GT100609[REPTNCNT]
          GOTO      RGT19999
.
.         GT1.7  Guarantor Work Phone (XTN)
.
RGT10700  BRANCH    COMPCNT,RGT10701:            * text
                            RGT10702:            * telecomm. use code (ID)
                            RGT10703:            * telcomm. equipment type (ID)
                            RGT10704:            * email address (ST)
                            RGT10705:            * country code (NM)
                            RGT10706:            * area/city code (NM)
                            RGT10707:            * phone number (NM)
                            RGT10708:            * extension (NM)
                            RGT10709             * any text (ST)
          GOTO      RGT19999
.
RGT10701  RESET     GT100701                     * load text
          GOTO      RGT19999
.
RGT10702  RESET     GT100702                     * load telecomm. use code (ID)
          GOTO      RGT19999
.
RGT10703  RESET     GT100703                     * load telcomm. equip.type (ID)
          GOTO      RGT19999
.
RGT10704  RESET     GT100704                     * load email address (ST)
          GOTO      RGT19999
.
RGT10705  RESET     GT100705                     * load country code (NM)
          GOTO      RGT19999
.
RGT10706  RESET     GT100706                     * load area/city code (NM)
          GOTO      RGT19999
.
RGT10707  RESET     GT100707                     * load phone number (NM)
          GOTO      RGT19999
.
RGT10708  RESET     GT100708                     * load extension (NM)
          GOTO      RGT19999
.
RGT10709  RESET     GT100709                     * load any text (ST)
          MOVE      GT100709,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,GT100709
          GOTO      RGT19999
.
.         GT1.11 Guarantor Relationship (CE)
.
RGT11100  BRANCH    COMPCNT,RGT11101:            * identifier (ST)
                            RGT11102:            * text (ST)
                            RGT11103:            * name of coding system (ST)
                            RGT11104:            * alternate identifier (ST)
                            RGT11105:            * alternate text (ST)
                            RGT11106             * name of alt. cod. system (ST)
          GOTO      RGT19999
.
RGT11101  RESET     GT101101                     * identifier (ST)
          MOVE      GT101101,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,GT101101
          GOTO      RGT19999
.
RGT11102  RESET     GT101102                     * text (ST)
          GOTO      RGT19999
.
RGT11103  RESET     GT101103                     * name of coding system (ST)
          GOTO      RGT19999
.
RGT11104  RESET     GT101104                     * alternate identifier (ST)
          GOTO      RGT19999
.
RGT11105  RESET     GT101105                     * alternate text (ST)
          GOTO      RGT19999
.
RGT11106  RESET     GT101106                     * name of alt. cod. system (ST)
          GOTO      RGT19999
.
RGT19999  RETURN
+
.*****************************************************************************
.*                              RIN10000           Called by: RFLD0000       *
.*                         Reset all IN1 variables                           *
.*****************************************************************************
RIN10000  BRANCH    FIELDNO,RIN10100:            * Set ID (SI)
                            RIN10200:            * Insurance Plan ID (CE)
                            RIN10300             * Insurance Company ID (CX)
.
          COMPARE   THIRTY6,FIELDNO
          GOTO      RIN13600 IF EQUAL            * Policy Number (ST)
.
.         Invalid IN1 field received, so ignore it
.
          GOTO      RIN19999
.
.         IN1.1  Set ID (SI)
.
RIN10100  BRANCH    COMPCNT,RIN10101
          GOTO      RIN19999
.
RIN10101  RESET     IN100101                     * Set ID (SI)
          GOTO      RIN19999
.
.         IN1.2  Insurance Plan ID (CE)
.
RIN10200  BRANCH    COMPCNT,RIN10201:            * identifier (ST)
                            RIN10202:            * text (ST)
                            RIN10203:            * name of coding system (ST)
                            RIN10204:            * alternate identifier (ST)
                            RIN10205:            * alternate text (ST)
                            RIN10206             * name of alt. cod. system (ST)
          GOTO      RIN19999
.
RIN10201  RESET     IN100201                     * identifier (ST)
          MOVE      IN100201,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,IN100201
          GOTO      RIN19999
.
RIN10202  RESET     IN100202                     * text (ST)
          GOTO      RIN19999
.
RIN10203  RESET     IN100203                     * name of coding system (ST)
          GOTO      RIN19999
.
RIN10204  RESET     IN100204                     * alternate identifier (ST)
          GOTO      RIN19999
.
RIN10205  RESET     IN100205                     * alternate text (ST)
          GOTO      RIN19999
.
RIN10206  RESET     IN100206                     * name of alt. cod. system (ST)
          GOTO      RIN19999
.
.         IN1.3  Insurance Company ID (CX)
.
RIN10300  BRANCH    COMPCNT,RIN10301:            * id (ST)
                            RIN10302:            * check digit (ST)
                            RIN10303:            * check digit scheme code (ID)
                            RIN10304:            * assigning authority (HD)
                            RIN10305:            * identifier type code (IS)
                            RIN10306             * assigning facility (HD)
          GOTO      LPV19999
.
RIN10301  RESET     IN100301                     * load id (ST)
          GOTO      LPV19999
.
RIN10302  RESET     IN100302                     * load check digit (ST)
          GOTO      LPV19999
.
RIN10303  RESET     IN100303                     * load chk dig scheme code (ID)
          GOTO      LPV19999
.
RIN10304  RESET     IN100304                     * load assigning authority (HD)
          GOTO      LPV19999
.
RIN10305  RESET     IN100305                     * load identifier typ code (IS)
          GOTO      LPV19999
.
RIN10306  RESET     IN100306                     * load assigning facility (HD)
          GOTO      LPV19999
.
.         IN1.36 Policy Number (ST)
.
RIN13600  BRANCH    COMPCNT,RIN13601
          GOTO      RIN19999
.
RIN13601  RESET     IN103601
          GOTO      RIN19999
.
RIN19999  RETURN
+
.*****************************************************************************
.*                              RAIS0000           Called by: RFLD0000       *
.*                         Reset all AIS variables                           *
.*****************************************************************************
.
RAIS0000  BRANCH    FIELDNO,RAIS0100:            * Set ID (SI)
                            RAIS0200:            * Segment Action Code (ID)
                            RAIS0300:            * Universal Service ID (CE)
                            RAIS0400:            * Start Date/Time (TS)
                            RAIS0500:            * Start Date/Time Offset (NM)
                            RAIS0600:            * Start D/T Offset Units (CE)
                            RAIS0700:            * Duration (NM)
                            RAIS0800:            * Duration Units (CE)
                            RAIS0900:            * Allow Substitution Code (IS)
                            RAIS1000             * Filler Status Code (CE)
.
.         Invalid AIS field received, so ignore it
.
          GOTO      RAIS9999
.
.         AIS.1  Set ID (SI)
.
RAIS0100  BRANCH    COMPCNT,RAIS0101
          GOTO      RAIS9999
.
RAIS0101  RESET     AIS00101                     * Set ID (SI)
          GOTO      RAIS9999
.
.         AIS.2  Segment Action Code (ID)
.
RAIS0200  BRANCH    COMPCNT,RAIS0201
          GOTO      RAIS9999
.
RAIS0201  RESET     AIS00201                     * Segment Action Code (ID)
          GOTO      RAIS9999
.
.         AIS.3  Universal Service ID (CE)
.
RAIS0300  BRANCH    COMPCNT,RAIS0301:            * identifier (ST)
                            RAIS0302:            * text (ST)
                            RAIS0303:            * name of coding system (ST)
                            RAIS0304:            * alternate identifier (ST)
                            RAIS0305:            * alternate text (ST)
                            RAIS0306             * name of alt. cod. system (ST)
          GOTO      RAIS9999
.
RAIS0301  RESET     AIS00301                     * identifier (ST)
          MOVE      AIS00301,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,AIS00301
          GOTO      RAIS9999
.
RAIS0302  RESET     AIS00302                     * text (ST)
          GOTO      RAIS9999
.
RAIS0303  RESET     AIS00303                     * name of coding system (ST)
          GOTO      RAIS9999
.
RAIS0304  RESET     AIS00304                     * alternate identifier (ST)
          GOTO      RAIS9999
.
RAIS0305  RESET     AIS00305                     * alternate text (ST)
          GOTO      RAIS9999
.
RAIS0306  RESET     AIS00306                     * name of alt. cod. system (ST)
          GOTO      RAIS9999
.
.         AIS.4  Start Date/Time (TS)
.
RAIS0400  BRANCH    COMPCNT,RAIS0401
          GOTO      RAIS9999
.
RAIS0401  RESET     AIS00401                     * Start Date/Time (TS)
          GOTO      RAIS9999
.
.         AIS.5  Start Date/Time Offset (NM)
.
RAIS0500
          GOTO      RAIS9999
.
.         AIS.6  Start Date/Time Offset Units (CE)
.
RAIS0600
          GOTO      RAIS9999
.
.         AIS.7  Duration (NM)
.
RAIS0700
          GOTO      RAIS9999
.
.         AIS.8  Duration Units (CE)
.
RAIS0800
          GOTO      RAIS9999
.
.         AIS.9  Allow Substitution Code (IS)
.
RAIS0900
          GOTO      RAIS9999
.
.         AIS.10 Filler Status Code (CE)
.
RAIS1000
          GOTO      RAIS9999
.
RAIS9999  RETURN
+
.*****************************************************************************
.*                              RAIL0000           Called by: RFLD0000       *
.*                         Reset all AIL variables                           *
.*****************************************************************************
.
RAIL0000  BRANCH    FIELDNO,RAIL0100:            * Set ID (SI)
                            RAIL0200:            * Segment Action Code (ID)
                            RAIL0300:            * Location Resource ID (PL)
                            RAIL0400:            * Location Type-AIL (CE)
                            RAIL0500:            * Location Group (CE)
                            RAIL0600:            * Start Date/Time (TS)
                            RAIL0700:            * Start Date/Time Offset (NM)
                            RAIL0800:            * Start D/T Offset Units (CE)
                            RAIL0900:            * Duration (NM)
                            RAIL1000:            * Duration Units (CE)
                            RAIL1100:            * Allow Substitution Code (IS)
                            RAIL1200             * Filler Status Code (CE)
.
.         Invalid AIL field received, so ignore it
.
          GOTO      RAIL9999
.
.         AIL.1  Set ID (SI)
.
RAIL0100  BRANCH    COMPCNT,RAIL0101
          GOTO      RAIL9999
.
RAIL0101  RESET     AIL00101                     * Set ID (SI)
          GOTO      RAIL9999
.
.         AIL.2  Segment Action Code (ID)
.
RAIL0200  BRANCH    COMPCNT,RAIL0201
          GOTO      RAIL9999
.
RAIL0201  RESET     AIL00201                     * Segment Action Code (ID)
          GOTO      RAIL9999
.
.         AIL.3  Location Resource ID (PL)
.
RAIL0300  BRANCH    COMPCNT,RAIL0301:            * point of care (IS)
                            RAIL0302:            * room (IS)
                            RAIL0303:            * bed (IS)
                            RAIL0304:            * facility (HD)
                            RAIL0305:            * location status (IS)
                            RAIL0306:            * person location type (IS)
                            RAIL0307:            * building (IS)
                            RAIL0308:            * floor (IS)
                            RAIL0309             * location description (ST)
          GOTO      RAIL9999
.
RAIL0301  RESET     AIL00301                     * load point of care (IS)
          GOTO      RAIL9999
.
RAIL0302  RESET     AIL00302                     * load room (IS)
          GOTO      RAIL9999
.
RAIL0303  RESET     AIL00303                     * load bed (IS)
          GOTO      RAIL9999
.
RAIL0304  RESET     AIL00304                     * load facility (HD)
          GOTO      RAIL9999
.
RAIL0305  RESET     AIL00305                     * load location status (IS)
          GOTO      RAIL9999
.
RAIL0306  RESET     AIL00306                     * load person loc'n type (IS)
          GOTO      RAIL9999
.
RAIL0307  RESET     AIL00307                     * load building (IS)
          GOTO      RAIL9999
.
RAIL0308  RESET     AIL00308                     * load floor (IS)
          GOTO      RAIL9999
.
RAIL0309  RESET     AIL00309                     * load location desc. (ST)
          GOTO      RAIL9999
.
.         AIL.4  Location Type-AIL (CE)
.
RAIL0400  BRANCH    COMPCNT,RAIL0401:            * identifier (ST)
                            RAIL0402:            * text (ST)
                            RAIL0403:            * name of coding system (ST)
                            RAIL0404:            * alternate identifier (ST)
                            RAIL0405:            * alternate text (ST)
                            RAIL0406             * name of alt. cod. system (ST)
          GOTO      RAIL9999
.
RAIL0401  RESET     AIL00401                     * identifier (ST)
          MOVE      AIL00401,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,AIL00401
          GOTO      RAIL9999
.
RAIL0402  RESET     AIL00402                     * text (ST)
          GOTO      RAIL9999
.
RAIL0403  RESET     AIL00403                     * name of coding system (ST)
          GOTO      RAIL9999
.
RAIL0404  RESET     AIL00404                     * alternate identifier (ST)
          GOTO      RAIL9999
.
RAIL0405  RESET     AIL00405                     * alternate text (ST)
          GOTO      RAIL9999
.
RAIL0406  RESET     AIL00406                     * name of alt. cod. system (ST)
          GOTO      RAIL9999
.
.         AIL.5  Location Group (CE)
.
RAIL0500  BRANCH    COMPCNT,RAIL0501:            * identifier (ST)
                            RAIL0502:            * text (ST)
                            RAIL0503:            * name of coding system (ST)
                            RAIL0504:            * alternate identifier (ST)
                            RAIL0505:            * alternate text (ST)
                            RAIL0506             * name of alt. cod. system (ST)
          GOTO      RAIL9999
.
RAIL0501  RESET     AIL00501                     * identifier (ST)
          MOVE      AIL00501,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,AIL00501
          GOTO      RAIL9999
.
RAIL0502  RESET     AIL00502                     * text (ST)
          GOTO      RAIL9999
.
RAIL0503  RESET     AIL00503                     * name of coding system (ST)
          GOTO      RAIL9999
.
RAIL0504  RESET     AIL00504                     * alternate identifier (ST)
          GOTO      RAIL9999
.
RAIL0505  RESET     AIL00505                     * alternate text (ST)
          GOTO      RAIL9999
.
RAIL0506  RESET     AIL00506                     * name of alt. cod. system (ST)
          GOTO      RAIL9999
.
.         AIL.6  Start Date/Time (TS)
.
RAIL0600  BRANCH    COMPCNT,RAIL0601
          GOTO      RAIL9999
.
RAIL0601  RESET     AIL00601                     * Start Date/Time (TS)
          GOTO      RAIL9999
.
.         AIL.7  Start Date/Time Offset (NM)
.
RAIL0700
          GOTO      RAIL9999
.
.         AIL.8  Start D/T Offset Units (CE)
.
RAIL0800
          GOTO      RAIL9999
.
.         AIL.9  Duration (NM)
.
RAIL0900  BRANCH    COMPCNT,RAIL0901
          GOTO      RAIL9999
.
RAIL0901  RESET     AIL00901                     * Duration (NM)
          GOTO      RAIL9999
.
.         AIL.10 Duration Units (CE)
.
RAIL1000  BRANCH    COMPCNT,RAIL1001:            * identifier (ST)
                            RAIL1002:            * text (ST)
                            RAIL1003:            * name of coding system (ST)
                            RAIL1004:            * alternate identifier (ST)
                            RAIL1005:            * alternate text (ST)
                            RAIL1006             * name of alt. cod. system (ST)
          GOTO      RAIL9999
.
RAIL1001  RESET     AIL01001                     * identifier (ST)
          MOVE      AIL01001,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,AIL01001
          GOTO      RAIL9999
.
RAIL1002  RESET     AIL01002                     * text (ST)
          GOTO      RAIL9999
.
RAIL1003  RESET     AIL01003                     * name of coding system (ST)
          GOTO      RAIL9999
.
RAIL1004  RESET     AIL01004                     * alternate identifier (ST)
          GOTO      RAIL9999
.
RAIL1005  RESET     AIL01005                     * alternate text (ST)
          GOTO      RAIL9999
.
RAIL1006  RESET     AIL01006                     * name of alt. cod. system (ST)
          GOTO      RAIL9999
.
.         AIL.11 Allow Substitution Code (IS)
.
RAIL1100
          GOTO      RAIL9999
.
.         AIL.12 Filler Status Code (CE)
.
RAIL1200
          GOTO      RAIL9999
.
RAIL9999  RETURN
+
.*****************************************************************************
.*                              RAIP0000           Called by: RFLD0000       *
.*                         Reset all AIP variables                           *
.*****************************************************************************
.
RAIP0000  BRANCH    FIELDNO,RAIP0100:            * Set ID (SI)
                            RAIP0200:            * Segment Action code (ID)
                            RAIP0300:            * Personnel Resource ID (XCN)
                            RAIP0400:            * Resource Role (CE)
                            RAIP0500:            * Resource Group (CE)
                            RAIP0600:            * Start Date/Time (TS)
                            RAIP0700:            * Start Date/Time Offset (NM)
                            RAIP0800:            * Start D/T Offset Units (CE)
                            RAIP0900:            * Duration (NM)
                            RAIP1000:            * Duration Units (CE)
                            RAIP1100:            * Allow Substitution Code (IS)
                            RAIP1200             * Filler Status Code (CE)
.
.         Invalid AIP field received, so ignore it
.
          GOTO      RAIP9999
.
.         AIP.1  Set ID (SI)
.
RAIP0100  BRANCH    COMPCNT,RAIP0101
          GOTO      RAIP9999
.
RAIP0101  RESET     AIP00101                     * Set ID (SI)
          GOTO      RAIP9999
.
.         AIP.2  Segment Action code (ID)
.
RAIP0200  BRANCH    COMPCNT,RAIP0201
          GOTO      RAIP9999
.
RAIP0201  RESET     AIP00201                     * Segment Action Code (ID)
          GOTO      RAIP9999
.
.         AIP.3  Personnel Resource ID (XCN)
.
RAIP0300  BRANCH    COMPCNT,RAIP0301:            * id number (ST)
                            RAIP0302:            * family name (ST)
                            RAIP0303:            * given name (ST)
                            RAIP0304:            * middle name (ST)
                            RAIP0305:            * suffix (ST)
                            RAIP0306:            * prefix (ST)
                            RAIP0307:            * degree (IS)
                            RAIP0308:            * source table (IS)
                            RAIP0309:            * assigning authority (HD)
                            RAIP0310:            * name type code (ID)
                            RAIP0311:            * identifier check digit (ST)
                            RAIP0312:            * check digit scheme code (ID)
                            RAIP0313:            * identifier type code (IS)
                            RAIP0314:            * assigning facility (HD)
                            RAIP0315             * name representation code (ID)
          GOTO      RAIP9999
.
RAIP0301  RESET     AIP00301                     * load id number (ST)
          MOVE      AIP00301,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,AIP00301
          GOTO      RAIP9999
.
RAIP0302  RESET     AIP00302                     * load family name (ST)
          GOTO      RAIP9999
.
RAIP0303  RESET     AIP00303                     * load given name (ST)
          GOTO      RAIP9999
.
RAIP0304  RESET     AIP00304                     * load middle name (ST)
          GOTO      RAIP9999
.
RAIP0305  RESET     AIP00305                     * load suffix (ST)
          GOTO      RAIP9999
.
RAIP0306  RESET     AIP00306                     * load prefix (ST)
          GOTO      RAIP9999
.
RAIP0307  RESET     AIP00307                     * load degree (IS)
          GOTO      RAIP9999
.
RAIP0308  RESET     AIP00308                     * load source table (IS)
          GOTO      RAIP9999
.
RAIP0309  RESET     AIP00309                     * load assigning authority (HD)
          GOTO      RAIP9999
.
RAIP0310  RESET     AIP00310                     * load name type code (ID)
          GOTO      RAIP9999
.
RAIP0311  RESET     AIP00311                     * load ident. check digit (ST)
          GOTO      RAIP9999
.
RAIP0312  RESET     AIP00312                     * load chk dig scheme code (ID)
          GOTO      RAIP9999
.
RAIP0313  RESET     AIP00313                     * load ident. type code (IS)
          GOTO      RAIP9999
.
RAIP0314  RESET     AIP00314                     * load assigning facility (HD)
          GOTO      RAIP9999
.
RAIP0315  RESET     AIP00315                     * load name repres. code (ID)
          GOTO      RAIP9999
.
.         AIP.4  Resource Role (CE)
.
RAIP0400  BRANCH    COMPCNT,RAIP0401:            * identifier (ST)
                            RAIP0402:            * text (ST)
                            RAIP0403:            * name of coding system (ST)
                            RAIP0404:            * alternate identifier (ST)
                            RAIP0405:            * alternate text (ST)
                            RAIP0406             * name of alt. cod. system (ST)
          GOTO      RAIP9999
.
RAIP0401  RESET     AIP00401                     * identifier (ST)
          MOVE      AIP00401,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,AIP00401
          GOTO      RAIP9999
.
RAIP0402  RESET     AIP00402                     * text (ST)
          GOTO      RAIP9999
.
RAIP0403  RESET     AIP00403                     * name of coding system (ST)
          GOTO      RAIP9999
.
RAIP0404  RESET     AIP00404                     * alternate identifier (ST)
          GOTO      RAIP9999
.
RAIP0405  RESET     AIP00405                     * alternate text (ST)
          GOTO      RAIP9999
.
RAIP0406  RESET     AIP00406                     * name of alt. cod. system (ST)
          GOTO      RAIP9999
.
.         AIP.5  Resource Group (CE)
.
RAIP0500
          GOTO      RAIP9999
.
.         AIP.6  Start Date/Time (TS)
.
RAIP0600
          GOTO      RAIP9999
.
.         AIP.7  Start Date/Time Offset (NM)
.
RAIP0700
          GOTO      RAIP9999
.
.         AIP.8  Start D/T Offset Units (CE)
.
RAIP0800
          GOTO      RAIP9999
.
.         AIP.9  Duration (NM)
.
RAIP0900
          GOTO      RAIP9999
.
.         AIP.10 Duration Units (CE)
.
RAIP1000
          GOTO      RAIP9999
.
.         AIP.11 Allow Substitution Code (IS)
.
RAIP1100
          GOTO      RAIP9999
.
.         AIP.12 Filler Status Code (CE)
.
RAIP1200
          GOTO      RAIP9999
.
RAIP9999  RETURN
+
.*****************************************************************************
.*                              RMRG0000           Called by: RFLD0000       *
.*                         Reset all MRG variables                           *
.*****************************************************************************
.
RMRG0000  BRANCH    FIELDNO,RMRG0100:            * Prior Patient Identifier List
                            RMRG0200:            * Prior Alternate Patient ID
                            RMRG0300:            * Prior Patient Account Number
                            RMRG0400:            * Prior Patient ID
                            RMRG0500:            * Prior Visit Number
                            RMRG0600:            * Prior Alternate Visit ID
                            RMRG0700             * Prior Patient Name
          GOTO      RMRG9999
.
.         MRG.1 - Prior Patient Identifier List
.         
RMRG0100  BRANCH    COMPCNT,RMRG0101:
                            RMRG0102:
                            RMRG0103:
                            RMRG0104:
                            RMRG0105:
                            RMRG0106 
          GOTO      RMRG9999
.         
RMRG0101  RESET     MRG00101
          MOVE      MRG00101,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,MRG00101
          GOTO      RMRG9999
.
RMRG0102  RESET     MRG00102
          GOTO      RMRG9999
.
RMRG0103  RESET     MRG00103
          GOTO      RMRG9999
.
RMRG0104  RESET     MRG00104
          GOTO      RMRG9999
.
RMRG0105  RESET     MRG00105
          GOTO      RMRG9999
.
RMRG0106  RESET     MRG00106
          GOTO      RMRG9999
.
.         MRG.2 - Prior Alternate Patient ID
.         
RMRG0200  BRANCH    COMPCNT,RMRG0201:
                            RMRG0202:
                            RMRG0203:
                            RMRG0204:
                            RMRG0205:
                            RMRG0206 
          GOTO      RMRG9999
.         
RMRG0201  RESET     MRG00201
          GOTO      RMRG9999
.
RMRG0202  RESET     MRG00202
          GOTO      RMRG9999
.
RMRG0203  RESET     MRG00203
          GOTO      RMRG9999
.
RMRG0204  RESET     MRG00204
          GOTO      RMRG9999
.
RMRG0205  RESET     MRG00205
          GOTO      RMRG9999
.
RMRG0206  RESET     MRG00206
          GOTO      RMRG9999
.
.         MRG.3 - Prior Patient Account Number
.         
RMRG0300  BRANCH    COMPCNT,RMRG0301:
                            RMRG0302:
                            RMRG0303:
                            RMRG0304:
                            RMRG0305:
                            RMRG0306 
          GOTO      RMRG9999
.         
RMRG0301  RESET     MRG00301
          GOTO      RMRG9999
.
RMRG0302  RESET     MRG00302
          GOTO      RMRG9999
.
RMRG0303  RESET     MRG00303
          GOTO      RMRG9999
.
RMRG0304  RESET     MRG00304
          GOTO      RMRG9999
.
RMRG0305  RESET     MRG00305
          GOTO      RMRG9999
.
RMRG0306  RESET     MRG00306
          GOTO      RMRG9999
.
.         MRG.4 - Prior Patient ID
.         
RMRG0400  BRANCH    COMPCNT,RMRG0401:
                            RMRG0402:
                            RMRG0403:
                            RMRG0404:
                            RMRG0405:
                            RMRG0406 
          GOTO      RMRG9999
.         
RMRG0401  RESET     MRG00401
          GOTO      RMRG9999
.
RMRG0402  RESET     MRG00402
          GOTO      RMRG9999
.
RMRG0403  RESET     MRG00403
          GOTO      RMRG9999
.
RMRG0404  RESET     MRG00404
          GOTO      RMRG9999
.
RMRG0405  RESET     MRG00405
          GOTO      RMRG9999
.
RMRG0406  RESET     MRG00406
          GOTO      RMRG9999
.
.         MRG.5 - Prior Visit Number
.         
RMRG0500  BRANCH    COMPCNT,RMRG0501:
                            RMRG0502:
                            RMRG0503:
                            RMRG0504:
                            RMRG0505:
                            RMRG0506 
          GOTO      RMRG9999
.         
RMRG0501  RESET     MRG00501
          GOTO      RMRG9999
.
RMRG0502  RESET     MRG00502
          GOTO      RMRG9999
.
RMRG0503  RESET     MRG00503
          GOTO      RMRG9999
.
RMRG0504  RESET     MRG00504
          GOTO      RMRG9999
.
RMRG0505  RESET     MRG00505
          GOTO      RMRG9999
.
RMRG0506  RESET     MRG00506
          GOTO      RMRG9999
.
.         MRG.6 - Prior Alternate Visit ID
.         
RMRG0600  BRANCH    COMPCNT,RMRG0601:
                            RMRG0602:
                            RMRG0603:
                            RMRG0604:
                            RMRG0605:
                            RMRG0606 
          GOTO      RMRG9999
.         
RMRG0601  RESET     MRG00601
          GOTO      RMRG9999
.
RMRG0602  RESET     MRG00602
          GOTO      RMRG9999
.
RMRG0603  RESET     MRG00603
          GOTO      RMRG9999
.
RMRG0604  RESET     MRG00604
          GOTO      RMRG9999
.
RMRG0605  RESET     MRG00605
          GOTO      RMRG9999
.
RMRG0606  RESET     MRG00606
          GOTO      RMRG9999
.
.         MRG.7 - Prior Patient Name
.         
RMRG0700  BRANCH    COMPCNT,RMRG0701:
                            RMRG0702:
                            RMRG0703:
                            RMRG0704:
                            RMRG0705:
                            RMRG0706:
                            RMRG0707:
                            RMRG0708 
          GOTO      RMRG9999
.         
RMRG0701  RESET     MRG00701
          GOTO      RMRG9999
.
RMRG0702  RESET     MRG00702
          GOTO      RMRG9999
.
RMRG0703  RESET     MRG00703
          GOTO      RMRG9999
.
RMRG0704  RESET     MRG00704
          GOTO      RMRG9999
.
RMRG0705  RESET     MRG00705
          GOTO      RMRG9999
.
RMRG0706  RESET     MRG00706
          GOTO      RMRG9999
.
RMRG0707  RESET     MRG00707
          GOTO      RMRG9999
.
RMRG0708  RESET     MRG00708
          GOTO      RMRG9999
.
RMRG9999  RETURN
+
.*****************************************************************************
.*                                 RZXP0000        Called by: PROC0000       *
.*                          Reset all ZXP variables                          *
.*****************************************************************************
.
RZXP0000  BRANCH    FIELDNO,RZXP0100:            * Pension No. Expiry Date
                            RZXP0200:            * Medicare Expiry Date
                            RZXP0300:            * Death Notification
                            RZXP0400:            * Privacy Indicator
                            RZXP0500:            * DVA Expiry Date
                            RZXP0600:            * Safety Next Expiry Date
                            RZXP0700:            * Local GP
                            RZXP0800:            * Local GP Surgery Address
                            RZXP0900:            * Local GP Provider Number
                            RZXP1000:            * Local GP Email Address
                            RZXP1100:            * Local GP Mobile Phone
                            RZXP1200:            * Local GP Home Phone
                            RZXP1300:            * Local GP Surgery Fax Number
                            RZXP1400:            * Local GP Surgery Phone Number
                            RZXP1500:            * Local GP Pager Phone Number
                            RZXP1600:            * Local GP Practice
                            RZXP1700:            * Local GP Practice Count
                            RZXP1800:            * Local GP Practice Address
                            RZXP1900:            * Local GP Practice Phone
                            RZXP2000:            * Local GP Practice Fax
                            RZXP2100             * Local GP Practice Email
.
          COMPARE   FIFTY7,FIELDNO
          GOTO      RZXP5700 IF EQUAL            * Chemotherapy Expiry date
.
          COMPARE   FIFTY8,FIELDNO
          GOTO      RZXP5800 IF EQUAL            * PCEHR Flag
.
          COMPARE   FIFTY9,FIELDNO
          GOTO      RZXP5900 IF EQUAL            * Unk./Est. Date of Death Flag
.
          COMPARE   SIXTY,FIELDNO
          GOTO      RZXP6000 IF EQUAL            * NDIS Expiry date
.
          COMPARE   SIXTY1,FIELDNO
          GOTO      RZXP6100 IF EQUAL            * Folder Selection
.
          COMPARE   SIXTY2,FIELDNO
          GOTO      RZXP6200 IF EQUAL            * PMI User Defined Y/N 2
.
          COMPARE   SIXTY3,FIELDNO
          GOTO      RZXP6300 IF EQUAL            * Verified Address Flag
.
          COMPARE   SIXTY4,FIELDNO
          GOTO      RZXP6400 IF EQUAL            * PMI User Defined Field 1
.
          COMPARE   SIXTY5,FIELDNO
          GOTO      RZXP6500 IF EQUAL            * PMI User Defined Field 2
.
          COMPARE   SIXTY6,FIELDNO
          GOTO      RZXP6600 IF EQUAL            * PMI User Defined Field 3
.
          COMPARE   SIXTY7,FIELDNO
          GOTO      RZXP6700 IF EQUAL            * PMI User Defined Field 4
.
          COMPARE   SIXTY8,FIELDNO
          GOTO      RZXP6800 IF EQUAL            * PMI User Defined Field 5
.
          COMPARE   SIXTY9,FIELDNO
          GOTO      RZXP6900 IF EQUAL            * Mutliple Birth Type of Birth
.
          COMPARE   SEVENTY,FIELDNO
          GOTO      RZXP7000 IF EQUAL            * PMI Identifying Gender
.
          COMPARE   SEVENTY1,FIELDNO
          GOTO      RZXP7100 IF EQUAL            * PMI Identifying Pronoun
.
          COMPARE   SEVENTY2,FIELDNO
          GOTO      RZXP7200 IF EQUAL            * PMI Ancestry / Ethnicity 1
.
          COMPARE   SEVENTY3,FIELDNO
          GOTO      RZXP7300 IF EQUAL            * PMI Ancestry / Ethnicity 2
.
          COMPARE   SEVENTY4,FIELDNO
          GOTO      RZXP7400 IF EQUAL            * Main Lang Spoken at Home 1
.
          COMPARE   SEVENTY5,FIELDNO
          GOTO      RZXP7500 IF EQUAL            * Main Lang Spoken at Home 2
.
          COMPARE   SEVENTY6,FIELDNO
          GOTO      RZXP7600 IF EQUAL            * Email Validation Flag
.
.         Invalid ZXP field received, so ignore it
.
          GOTO      RZXP9999
.
.         ZXP.1  Pension Number Expiry Date
.
RZXP0100  BRANCH    COMPCNT,RZXP0101
          GOTO      RZXP9999
.
RZXP0101  RESET     ZXP00101
          GOTO      RZXP9999
.
.         ZXP.2  Medicare Expiry Date
.
RZXP0200  BRANCH    COMPCNT,RZXP0201
          GOTO      RZXP9999
.
RZXP0201  RESET     ZXP00201
          GOTO      RZXP9999
.
.         ZXP.3  Death Notification
.
RZXP0300  BRANCH    COMPCNT,RZXP0301:
                            RZXP0302:
                            RZXP0303
          GOTO      RZXP9999
.
RZXP0301  RESET     ZXP00301
          MOVE      ZXP00301,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXP00301
          GOTO      RZXP9999
.
RZXP0302  RESET     ZXP00302
          GOTO      RZXP9999
.
RZXP0303  RESET     ZXP00303
          GOTO      RZXP9999
.
.         ZXP.4  Privacy Indicator
.
RZXP0400  BRANCH    COMPCNT,RZXP0401:
                            RZXP0402:
                            RZXP0403
          GOTO      RZXP9999
.
RZXP0401  RESET     ZXP00401
          MOVE      ZXP00401,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXP00401
          GOTO      RZXP9999
.
RZXP0402  RESET     ZXP00402
          GOTO      RZXP9999
.
RZXP0403  RESET     ZXP00403
          GOTO      RZXP9999
.
.         ZXP.5  DVA Card Expiry Date
.
RZXP0500  BRANCH    COMPCNT,RZXP0501
          GOTO      RZXP9999
.
RZXP0501  RESET     ZXP00501
          GOTO      RZXP9999
.
.         ZXP.6  Safety Net Expiry Date
.
RZXP0600  BRANCH    COMPCNT,RZXP0601
          GOTO      RZXP9999
.
RZXP0601  RESET     ZXP00601
          GOTO      RZXP9999
.
.         ZXP.7  Local GP
.
RZXP0700  BRANCH    COMPCNT,RZXP0701:
                            RZXP0702:
                            RZXP0703:
                            RZXP0704:
                            RZXP0705:
                            RZXP0706:
                            RZXP0707:
                            RZXP0708:
                            RZXP0709:
                            RZXP0710:
                            RZXP0711:
                            RZXP0712:
                            RZXP0713:
                            RZXP0714:
                            RZXP0715
          GOTO      RZXP9999
.
RZXP0701  RESET     ZXP00701
          GOTO      RZXP9999
.
RZXP0702  RESET     ZXP00702
          GOTO      RZXP9999
.
RZXP0703  RESET     ZXP00703
          GOTO      RZXP9999
.
RZXP0704  RESET     ZXP00704
          GOTO      RZXP9999
.
RZXP0705  RESET     ZXP00705
          GOTO      RZXP9999
.
RZXP0706  RESET     ZXP00706
          GOTO      RZXP9999
.
RZXP0707  RESET     ZXP00707
          GOTO      RZXP9999
.
RZXP0708  RESET     ZXP00708
          GOTO      RZXP9999
.
RZXP0709  RESET     ZXP00709
          GOTO      RZXP9999
.
RZXP0710  RESET     ZXP00710
          GOTO      RZXP9999
.
RZXP0711  RESET     ZXP00711
          GOTO      RZXP9999
.
RZXP0712  RESET     ZXP00712
          GOTO      RZXP9999
.
RZXP0713  RESET     ZXP00713
          GOTO      RZXP9999
.
RZXP0714  RESET     ZXP00714
          GOTO      RZXP9999
.
RZXP0715  RESET     ZXP00715
          GOTO      RZXP9999
.
.         ZXP.8  Local GP Surgery Address
.
RZXP0800  BRANCH    COMPCNT,RZXP0801:
                            RZXP0802:
                            RZXP0803:
                            RZXP0804:
                            RZXP0805:
                            RZXP0806:
                            RZXP0807:
                            RZXP0808:
                            RZXP0809:
                            RZXP0810:
                            RZXP0811
          GOTO      RZXP9999
.
RZXP0801  RESET     ZXP00801
          GOTO      RZXP9999
.
RZXP0802  RESET     ZXP00802
          GOTO      RZXP9999
.
RZXP0803  RESET     ZXP00803
          GOTO      RZXP9999
.
RZXP0804  RESET     ZXP00804
          GOTO      RZXP9999
.
RZXP0805  RESET     ZXP00805
          GOTO      RZXP9999
.
RZXP0806  RESET     ZXP00806
          GOTO      RZXP9999
.
RZXP0807  RESET     ZXP00807
          GOTO      RZXP9999
.
RZXP0808  RESET     ZXP00808
          GOTO      RZXP9999
.
RZXP0809  RESET     ZXP00809
          GOTO      RZXP9999
.
RZXP0810  RESET     ZXP00810
          GOTO      RZXP9999
.
RZXP0811  RESET     ZXP00811
          GOTO      RZXP9999
.
.         ZXP.9  Local GP Provider Number
.
RZXP0900  BRANCH    COMPCNT,RZXP0901
          GOTO      RZXP9999
.
RZXP0901  RESET     ZXP00901
          GOTO      RZXP9999
.
.         ZXP.10  Local GP Email Address
.
RZXP1000  BRANCH    COMPCNT,RZXP1001
          GOTO      RZXP9999
.
RZXP1001  RESET     ZXP01001
          GOTO      RZXP9999
.
.         ZXP.11  Local GP Mobile Phone Number
.
RZXP1100  BRANCH    COMPCNT,RZXP1101
          GOTO      RZXP9999
.
RZXP1101  RESET     ZXP01101
          GOTO      RZXP9999
.
.         ZXP.12  Local GP Home Phone Number
.
RZXP1200  BRANCH    COMPCNT,RZXP1201
          GOTO      RZXP9999
.
RZXP1201  RESET     ZXP01201
          GOTO      RZXP9999
.
.         ZXP.13  Local GP Surgery Fax Number
.
RZXP1300  BRANCH    COMPCNT,RZXP1301
          GOTO      RZXP9999
.
RZXP1301  RESET     ZXP01301
          GOTO      RZXP9999
.
.         ZXP.14  Local GP Surgery Phone Number
.
RZXP1400  BRANCH    COMPCNT,RZXP1401
          GOTO      RZXP9999
.
RZXP1401  RESET     ZXP01401
          GOTO      RZXP9999
.
.         ZXP.15  Local GP Pager Phone Number
.
RZXP1500  BRANCH    COMPCNT,RZXP1501
          GOTO      RZXP9999
.
RZXP1501  RESET     ZXP01501
          GOTO      RZXP9999
.
.         ZXP.16  Local GP Practice (CE)
.
RZXP1600  BRANCH    COMPCNT,RZXP1601:            * identifier (ST)
                            RZXP1602:            * text (ST)
                            RZXP1603:            * name of coding system (ST)
                            RZXP1604:            * alternate identifier (ST)
                            RZXP1605:            * alternate text (ST)
                            RZXP1606             * name of alt. cod. system (ST)
          GOTO      RZXP9999
.
RZXP1601  RESET     ZXP01601                     * identifier (ST)
          MOVE      ZXP01601,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXP01601
          GOTO      RZXP9999
.
RZXP1602  RESET     ZXP01602                     * text (ST)
          GOTO      RZXP9999
.
RZXP1603  RESET     ZXP01603                     * name of coding system (ST)
          GOTO      RZXP9999
.
RZXP1604  RESET     ZXP01604                     * alternate identifier (ST)
          GOTO      RZXP9999
.
RZXP1605  RESET     ZXP01605                     * alternate text (ST)
          GOTO      RZXP9999
.
RZXP1606  RESET     ZXP01606                     * name of alt. cod. system (ST)
          GOTO      RZXP9999
.
.         ZXP.17  Local GP Practice Count
.
RZXP1700  BRANCH    COMPCNT,RZXP1701
          GOTO      RZXP9999
.
RZXP1701  RESET     ZXP01701
          GOTO      RZXP9999
.
.         ZXP.18  Local GP Surgery Address
.
RZXP1800  BRANCH    COMPCNT,RZXP1801:
                            RZXP1802:
                            RZXP1803:
                            RZXP1804:
                            RZXP1805:
                            RZXP1806:
                            RZXP1807:
                            RZXP1808:
                            RZXP1809:
                            RZXP1810:
                            RZXP1811
          GOTO      RZXP9999
.
RZXP1801  RESET     ZXP01801
          GOTO      RZXP9999
.
RZXP1802  RESET     ZXP01802
          GOTO      RZXP9999
.
RZXP1803  RESET     ZXP01803
          GOTO      RZXP9999
.
RZXP1804  RESET     ZXP01804
          GOTO      RZXP9999
.
RZXP1805  RESET     ZXP01805
          GOTO      RZXP9999
.
RZXP1806  RESET     ZXP01806
          GOTO      RZXP9999
.
RZXP1807  RESET     ZXP01807
          GOTO      RZXP9999
.
RZXP1808  RESET     ZXP01808
          GOTO      RZXP9999
.
RZXP1809  RESET     ZXP01809
          GOTO      RZXP9999
.
RZXP1810  RESET     ZXP01810
          GOTO      RZXP9999
.
RZXP1811  RESET     ZXP01811
          GOTO      RZXP9999
.
.         ZXP.19  Local GP Practice Phone Number
.
RZXP1900  BRANCH    COMPCNT,RZXP1901
          GOTO      RZXP9999
.
RZXP1901  RESET     ZXP01901
          GOTO      RZXP9999
.
.         ZXP.20  Local GP Practice Fax Number
.
RZXP2000  BRANCH    COMPCNT,RZXP2001
          GOTO      RZXP9999
.
RZXP2001  RESET     ZXP02001
          GOTO      RZXP9999
.
.         ZXP.21  Local GP Practice Email Address
.
RZXP2100  BRANCH    COMPCNT,RZXP2101
          GOTO      RZXP9999
.
RZXP2101  RESET     ZXP02101
          GOTO      RZXP9999
.
.         ZXP.57  Chemotherapy Expiry Date (DT)
.
RZXP5700  BRANCH    COMPCNT,RZXP5701
          GOTO      RZXP9999
.
RZXP5701  RESET     ZXP05701
          GOTO      RZXP9999
.
.         ZXP.58  PCEHR Flag
.
RZXP5800  BRANCH    COMPCNT,RZXP5801
          GOTO      RZXP9999
.
RZXP5801  RESET     ZXP05801
          GOTO      RZXP9999
.
.         ZXP.59  Unknown/Estimated Date of Death Flag (Y/N)
.
RZXP5900  BRANCH    COMPCNT,RZXP5901
          GOTO      RZXP9999
.
RZXP5901  RESET     ZXP05901
          GOTO      RZXP9999
.
.         ZXP.60  NDIS Expiry Date (DT)
.
RZXP6000  BRANCH    COMPCNT,RZXP6001
          GOTO      RZXP9999
.
RZXP6001  RESET     ZXP06001
          GOTO      RZXP9999
.
.         ZXP.61  Folder Selection (CE)
.
RZXP6100  BRANCH    COMPCNT,RZXP6101:
                            RZXP6102:
                            RZXP6103
          GOTO      RZXP9999
.
RZXP6101  RESET     ZXP06101
          MOVE      ZXP06101,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXP06101
          GOTO      RZXP9999
.
RZXP6102  RESET     ZXP06102
          GOTO      RZXP9999
.
RZXP6103  RESET     ZXP06103
          GOTO      RZXP9999
.
.         ZXP.62  PMI User Defined YesNo Field 2 (Y/N)
.
RZXP6200  BRANCH    COMPCNT,RZXP6201
          GOTO      RZXP9999
.
RZXP6201  RESET     ZXP06201
          GOTO      RZXP9999
.
.         ZXP.63  Verified Address Flag (NM)
.
RZXP6300  BRANCH    COMPCNT,RZXP6301
          GOTO      RZXP9999
.
RZXP6301  RESET     ZXP06301
          GOTO      RZXP9999
.
.         ZXP.64  PMI User Defined Field 1 (CE)
.
RZXP6400  BRANCH    COMPCNT,RZXP6401:            * identifier (ST)
                            RZXP6402:            * text (ST)
                            RZXP6403:            * name of coding system (ST)
                            RZXP6404:            * alternate identifier (ST)
                            RZXP6405:            * alternate text (ST)
                            RZXP6406             * name of alt. cod. system (ST)
          GOTO      RZXP9999
.
RZXP6401  RESET     ZXP06401                     * identifier (ST)
          MOVE      ZXP06401,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXP06401
          GOTO      RZXP9999
.
RZXP6402  RESET     ZXP06402                     * text (ST)
          GOTO      RZXP9999
.
RZXP6403  RESET     ZXP06403                     * name of coding system (ST)
          GOTO      RZXP9999
.
RZXP6404  RESET     ZXP06404                     * alternate identifier (ST)
          GOTO      RZXP9999
.
RZXP6405  RESET     ZXP06405                     * alternate text (ST)
          GOTO      RZXP9999
.
RZXP6406  RESET     ZXP06406                     * name of alt. cod. system (ST)
          GOTO      RZXP9999
.
.         ZXP.65  PMI User Defined Field 2 (CE)
.
RZXP6500  BRANCH    COMPCNT,RZXP6501:            * identifier (ST)
                            RZXP6502:            * text (ST)
                            RZXP6503:            * name of coding system (ST)
                            RZXP6504:            * alternate identifier (ST)
                            RZXP6505:            * alternate text (ST)
                            RZXP6506             * name of alt. cod. system (ST)
          GOTO      RZXP9999
.
RZXP6501  RESET     ZXP06501                     * identifier (ST)
          MOVE      ZXP06501,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXP06501
          GOTO      RZXP9999
.
RZXP6502  RESET     ZXP06502                     * text (ST)
          GOTO      RZXP9999
.
RZXP6503  RESET     ZXP06503                     * name of coding system (ST)
          GOTO      RZXP9999
.
RZXP6504  RESET     ZXP06504                     * alternate identifier (ST)
          GOTO      RZXP9999
.
RZXP6505  RESET     ZXP06505                     * alternate text (ST)
          GOTO      RZXP9999
.
RZXP6506  RESET     ZXP06506                     * name of alt. cod. system (ST)
          GOTO      RZXP9999
.
.         ZXP.66  PMI User Defined Field 3 (CE)
.
RZXP6600  BRANCH    COMPCNT,RZXP6601:            * identifier (ST)
                            RZXP6602:            * text (ST)
                            RZXP6603:            * name of coding system (ST)
                            RZXP6604:            * alternate identifier (ST)
                            RZXP6605:            * alternate text (ST)
                            RZXP6606             * name of alt. cod. system (ST)
          GOTO      RZXP9999
.
RZXP6601  RESET     ZXP06601                     * identifier (ST)
          MOVE      ZXP06601,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXP06601
          GOTO      RZXP9999
.
RZXP6602  RESET     ZXP06602                     * text (ST)
          GOTO      RZXP9999
.
RZXP6603  RESET     ZXP06603                     * name of coding system (ST)
          GOTO      RZXP9999
.
RZXP6604  RESET     ZXP06604                     * alternate identifier (ST)
          GOTO      RZXP9999
.
RZXP6605  RESET     ZXP06605                     * alternate text (ST)
          GOTO      RZXP9999
.
RZXP6606  RESET     ZXP06606                     * name of alt. cod. system (ST)
          GOTO      RZXP9999
.
.         ZXP.67  PMI User Defined Field 4 (CE)
.
RZXP6700  BRANCH    COMPCNT,RZXP6701:            * identifier (ST)
                            RZXP6702:            * text (ST)
                            RZXP6703:            * name of coding system (ST)
                            RZXP6704:            * alternate identifier (ST)
                            RZXP6705:            * alternate text (ST)
                            RZXP6706             * name of alt. cod. system (ST)
          GOTO      RZXP9999
.
RZXP6701  RESET     ZXP06701                     * identifier (ST)
          MOVE      ZXP06701,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXP06701
          GOTO      RZXP9999
.
RZXP6702  RESET     ZXP06702                     * text (ST)
          GOTO      RZXP9999
.
RZXP6703  RESET     ZXP06703                     * name of coding system (ST)
          GOTO      RZXP9999
.
RZXP6704  RESET     ZXP06704                     * alternate identifier (ST)
          GOTO      RZXP9999
.
RZXP6705  RESET     ZXP06705                     * alternate text (ST)
          GOTO      RZXP9999
.
RZXP6706  RESET     ZXP06706                     * name of alt. cod. system (ST)
          GOTO      RZXP9999
.
.         ZXP.68  PMI User Defined Field 5 (CE)
.
RZXP6800  BRANCH    COMPCNT,RZXP6801:            * identifier (ST)
                            RZXP6802:            * text (ST)
                            RZXP6803:            * name of coding system (ST)
                            RZXP6804:            * alternate identifier (ST)
                            RZXP6805:            * alternate text (ST)
                            RZXP6806             * name of alt. cod. system (ST)
          GOTO      RZXP9999
.
RZXP6801  RESET     ZXP06801                     * identifier (ST)
          MOVE      ZXP06801,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXP06801
          GOTO      RZXP9999
.
RZXP6802  RESET     ZXP06802                     * text (ST)
          GOTO      RZXP9999
.
RZXP6803  RESET     ZXP06803                     * name of coding system (ST)
          GOTO      RZXP9999
.
RZXP6804  RESET     ZXP06804                     * alternate identifier (ST)
          GOTO      RZXP9999
.
RZXP6805  RESET     ZXP06805                     * alternate text (ST)
          GOTO      RZXP9999
.
RZXP6806  RESET     ZXP06806                     * name of alt. cod. system (ST)
          GOTO      RZXP9999
.
.         ZXP.69  Mutliple Birth Type of Birth (CE)
.
RZXP6900  BRANCH    COMPCNT,RZXP6901:            * identifier (ST)
                            RZXP6902:            * text (ST)
                            RZXP6903:            * name of coding system (ST)
                            RZXP6904:            * alternate identifier (ST)
                            RZXP6905:            * alternate text (ST)
                            RZXP6906             * name of alt. cod. system (ST)
          GOTO      RZXP9999
.
RZXP6901  RESET     ZXP06901                     * identifier (ST)
          MOVE      ZXP06901,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXP06901
          GOTO      RZXP9999
.
RZXP6902  RESET     ZXP06902                     * text (ST)
          GOTO      RZXP9999
.
RZXP6903  RESET     ZXP06903                     * name of coding system (ST)
          GOTO      RZXP9999
.
RZXP6904  RESET     ZXP06904                     * alternate identifier (ST)
          GOTO      RZXP9999
.
RZXP6905  RESET     ZXP06905                     * alternate text (ST)
          GOTO      RZXP9999
.
RZXP6906  RESET     ZXP06906                     * name of alt. cod. system (ST)
          GOTO      RZXP9999
.
.         ZXP.70  PMI Identifying Gender (CE)
.
RZXP7000  BRANCH    COMPCNT,RZXP7001:            * identifier (ST)
                            RZXP7002:            * text (ST)
                            RZXP7003:            * name of coding system (ST)
                            RZXP7004:            * alternate identifier (ST)
                            RZXP7005:            * alternate text (ST)
                            RZXP7006             * name of alt. cod. system (ST)
          GOTO      RZXP9999
.
RZXP7001  RESET     ZXP07001                     * identifier (ST)
          MOVE      ZXP07001,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXP07001
          GOTO      RZXP9999
.
RZXP7002  RESET     ZXP07002                     * text (ST)
          GOTO      RZXP9999
.
RZXP7003  RESET     ZXP07003                     * name of coding system (ST)
          GOTO      RZXP9999
.
RZXP7004  RESET     ZXP07004                     * alternate identifier (ST)
          GOTO      RZXP9999
.
RZXP7005  RESET     ZXP07005                     * alternate text (ST)
          GOTO      RZXP9999
.
RZXP7006  RESET     ZXP07006                     * name of alt. cod. system (ST)
          GOTO      RZXP9999
.
.         ZXP.71  PMI Identifying Pronoun (CE)
.
RZXP7100  BRANCH    COMPCNT,RZXP7101:            * identifier (ST)
                            RZXP7102:            * text (ST)
                            RZXP7103:            * name of coding system (ST)
                            RZXP7104:            * alternate identifier (ST)
                            RZXP7105:            * alternate text (ST)
                            RZXP7106             * name of alt. cod. system (ST)
          GOTO      RZXP9999
.
RZXP7101  RESET     ZXP07101                     * identifier (ST)
          MOVE      ZXP07101,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXP07101
          GOTO      RZXP9999
.
RZXP7102  RESET     ZXP07102                     * text (ST)
          GOTO      RZXP9999
.
RZXP7103  RESET     ZXP07103                     * name of coding system (ST)
          GOTO      RZXP9999
.
RZXP7104  RESET     ZXP07104                     * alternate identifier (ST)
          GOTO      RZXP9999
.
RZXP7105  RESET     ZXP07105                     * alternate text (ST)
          GOTO      RZXP9999
.
RZXP7106  RESET     ZXP07106                     * name of alt. cod. system (ST)
          GOTO      RZXP9999
.
.         ZXP.72  PMI Ancestry / Ethnicity 1 (CE)
.
RZXP7200  BRANCH    COMPCNT,RZXP7201:            * identifier (ST)
                            RZXP7202:            * text (ST)
                            RZXP7203:            * name of coding system (ST)
                            RZXP7204:            * alternate identifier (ST)
                            RZXP7205:            * alternate text (ST)
                            RZXP7206             * name of alt. cod. system (ST)
          GOTO      RZXP9999
.
RZXP7201  RESET     ZXP07201                     * identifier (ST)
          MOVE      ZXP07201,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXP07201
          GOTO      RZXP9999
.
RZXP7202  RESET     ZXP07202                     * text (ST)
          GOTO      RZXP9999
.
RZXP7203  RESET     ZXP07203                     * name of coding system (ST)
          GOTO      RZXP9999
.
RZXP7204  RESET     ZXP07204                     * alternate identifier (ST)
          GOTO      RZXP9999
.
RZXP7205  RESET     ZXP07205                     * alternate text (ST)
          GOTO      RZXP9999
.
RZXP7206  RESET     ZXP07206                     * name of alt. cod. system (ST)
          GOTO      RZXP9999
.
.         ZXP.73  PMI Ancestry / Ethnicity 2 (CE)
.
RZXP7300  BRANCH    COMPCNT,RZXP7301:            * identifier (ST)
                            RZXP7302:            * text (ST)
                            RZXP7303:            * name of coding system (ST)
                            RZXP7304:            * alternate identifier (ST)
                            RZXP7305:            * alternate text (ST)
                            RZXP7306             * name of alt. cod. system (ST)
          GOTO      RZXP9999
.
RZXP7301  RESET     ZXP07301                     * identifier (ST)
          MOVE      ZXP07301,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXP07301
          GOTO      RZXP9999
.
RZXP7302  RESET     ZXP07302                     * text (ST)
          GOTO      RZXP9999
.
RZXP7303  RESET     ZXP07303                     * name of coding system (ST)
          GOTO      RZXP9999
.
RZXP7304  RESET     ZXP07304                     * alternate identifier (ST)
          GOTO      RZXP9999
.
RZXP7305  RESET     ZXP07305                     * alternate text (ST)
          GOTO      RZXP9999
.
RZXP7306  RESET     ZXP07306                     * name of alt. cod. system (ST)
          GOTO      RZXP9999
.
.         ZXP.74  PMI Main Language Spoken at Home 1 (CE)
.
RZXP7400  BRANCH    COMPCNT,RZXP7401:            * identifier (ST)
                            RZXP7402:            * text (ST)
                            RZXP7403:            * name of coding system (ST)
                            RZXP7404:            * alternate identifier (ST)
                            RZXP7405:            * alternate text (ST)
                            RZXP7406             * name of alt. cod. system (ST)
          GOTO      RZXP9999
.
RZXP7401  RESET     ZXP07401                     * identifier (ST)
          MOVE      ZXP07401,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXP07401
          GOTO      RZXP9999
.
RZXP7402  RESET     ZXP07402                     * text (ST)
          GOTO      RZXP9999
.
RZXP7403  RESET     ZXP07403                     * name of coding system (ST)
          GOTO      RZXP9999
.
RZXP7404  RESET     ZXP07404                     * alternate identifier (ST)
          GOTO      RZXP9999
.
RZXP7405  RESET     ZXP07405                     * alternate text (ST)
          GOTO      RZXP9999
.
RZXP7406  RESET     ZXP07406                     * name of alt. cod. system (ST)
          GOTO      RZXP9999
.
.         ZXP.75  PMI Main Language Spoken at Home 2 (CE)
.
RZXP7500  BRANCH    COMPCNT,RZXP7501:            * identifier (ST)
                            RZXP7502:            * text (ST)
                            RZXP7503:            * name of coding system (ST)
                            RZXP7504:            * alternate identifier (ST)
                            RZXP7505:            * alternate text (ST)
                            RZXP7506             * name of alt. cod. system (ST)
          GOTO      RZXP9999
.
RZXP7501  RESET     ZXP07501                     * identifier (ST)
          MOVE      ZXP07501,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXP07501
          GOTO      RZXP9999
.
RZXP7502  RESET     ZXP07502                     * text (ST)
          GOTO      RZXP9999
.
RZXP7503  RESET     ZXP07503                     * name of coding system (ST)
          GOTO      RZXP9999
.
RZXP7504  RESET     ZXP07504                     * alternate identifier (ST)
          GOTO      RZXP9999
.
RZXP7505  RESET     ZXP07505                     * alternate text (ST)
          GOTO      RZXP9999
.
RZXP7506  RESET     ZXP07506                     * name of alt. cod. system (ST)
          GOTO      RZXP9999
.
.         ZXP.76  Email Validation Flag (NM)
.
RZXP7600  BRANCH    COMPCNT,RZXP7601
          GOTO      RZXP9999
.
RZXP7601  RESET     ZXP07601
          GOTO      RZXP9999
.
RZXP9999  RETURN
+
.*****************************************************************************
.*                                 RZAL0000        Called by: PROC0000       *
.*                          Load the ZAL fields                              *
.*****************************************************************************
.
RZAL0000  BRANCH    FIELDNO,RZAL0100:            * Set ID
                            RZAL0200:            * Alert Type
                            RZAL0300:            * Alert
                            RZAL0400:            * Reaction
                            RZAL0500:            * Alert Date
                            RZAL0600:            * Severity Level
                            RZAL0700:            * Review Date
                            RZAL0800:            * Date Inactive
                            RZAL0900:            * End Date
                            RZAL1000:            * Authorising HCP
                            RZAL1100:            * Last Update Date/Time
                            RZAL1200:            * User Who Last Updated
                            RZAL1300:            * Hospital
                            RZAL1400:            * Comments
                            RZAL1500             * Third Party Id
.
.         Invalid ZAL field received, so ignore it
.
          GOTO      RZAL9999
.
.         ZAL.1  Set ID (SI)
.
RZAL0100  BRANCH    COMPCNT,RZAL0101
          GOTO      RZAL9999
.
RZAL0101  RESET     ZAL00101                     * set id (SI)
          GOTO      RZAL9999
.
.         ZAL.2  Alert Type/Category (CE)
.
RZAL0200  BRANCH    COMPCNT,RZAL0201:            * identifier (ST)
                            RZAL0202:            * text (ST)
                            RZAL0203:            * name of coding system (ST)
                            RZAL0204:            * alternate identifier (ST)
                            RZAL0205:            * alternate text (ST)
                            RZAL0206             * name of alt. cod. system (ST)
          GOTO      RZAL9999
.
RZAL0201  RESET     ZAL00201                     * identifier (ST)
          MOVE      ZAL00201,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZAL00201
          GOTO      RZAL9999
.
RZAL0202  RESET     ZAL00202                     * text (ST)
          GOTO      RZAL9999
.
RZAL0203  RESET     ZAL00203                     * name of coding system (ST)
          GOTO      RZAL9999
.
RZAL0204  RESET     ZAL00204                     * alternate identifier (ST)
          GOTO      RZAL9999
.
RZAL0205  RESET     ZAL00205                     * alternate text (ST)
          GOTO      RZAL9999
.
RZAL0206  RESET     ZAL00206                     * name of alt. cod. system (ST)
          GOTO      RZAL9999
.
.         ZAL.3  Alert Code (CE)
.
RZAL0300  BRANCH    COMPCNT,RZAL0301:            * identifier (ST)
                            RZAL0302:            * text (ST)
                            RZAL0303:            * name of coding system (ST)
                            RZAL0304:            * alternate identifier (ST)
                            RZAL0305:            * alternate text (ST)
                            RZAL0306             * name of alt. cod. system (ST)
          GOTO      RZAL9999
.
RZAL0301  RESET     ZAL00301                     * identifier (ST)
          MOVE      ZAL00301,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZAL00301
          GOTO      RZAL9999
.
RZAL0302  RESET     ZAL00302                     * text (ST)
          GOTO      RZAL9999
.
RZAL0303  RESET     ZAL00303                     * name of coding system (ST)
          GOTO      RZAL9999
.
RZAL0304  RESET     ZAL00304                     * alternate identifier (ST)
          GOTO      RZAL9999
.
RZAL0305  RESET     ZAL00305                     * alternate text (ST)
          GOTO      RZAL9999
.
RZAL0306  RESET     ZAL00306                     * name of alt. cod. system (ST)
          GOTO      RZAL9999
.
.         ZAL.4  Reaction Code (CE)
.
RZAL0400  BRANCH    COMPCNT,RZAL0401:            * identifier (ST)
                            RZAL0402:            * text (ST)
                            RZAL0403:            * name of coding system (ST)
                            RZAL0404:            * alternate identifier (ST)
                            RZAL0405:            * alternate text (ST)
                            RZAL0406             * name of alt. cod. system (ST)
          GOTO      RZAL9999
.
RZAL0401  RESET     ZAL00401                     * identifier (ST)
          MOVE      ZAL00401,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZAL00401
          GOTO      RZAL9999
.
RZAL0402  RESET     ZAL00402                     * text (ST)
          GOTO      RZAL9999
.
RZAL0403  RESET     ZAL00403                     * name of coding system (ST)
          GOTO      RZAL9999
.
RZAL0404  RESET     ZAL00404                     * alternate identifier (ST)
          GOTO      RZAL9999
.
RZAL0405  RESET     ZAL00405                     * alternate text (ST)
          GOTO      RZAL9999
.
RZAL0406  RESET     ZAL00406                     * name of alt. cod. system (ST)
          GOTO      RZAL9999
.
.         ZAL.5  Alert Date (DT)
.
RZAL0500  BRANCH    COMPCNT,RZAL0501
          GOTO      RZAL9999
.
RZAL0501  RESET     ZAL00501
          GOTO      RZAL9999
.
.         ZAL.6  Severity Level (NM)
.
RZAL0600  BRANCH    COMPCNT,RZAL0601
          GOTO      RZAL9999
.
RZAL0601  RESET     ZAL00601
          GOTO      RZAL9999
.
.         ZAL.7  Review Date (DT)
.
RZAL0700  BRANCH    COMPCNT,RZAL0701
          GOTO      RZAL9999
.
RZAL0701  RESET     ZAL00701
          GOTO      RZAL9999
.
.         ZAL.8  Date Inactive (DT)
.
RZAL0800  BRANCH    COMPCNT,RZAL0801
          GOTO      RZAL9999
.
RZAL0801  RESET     ZAL00801
          GOTO      RZAL9999
.
.         ZAL.9  End Date (DT)
.
RZAL0900  BRANCH    COMPCNT,RZAL0901
          GOTO      RZAL9999
.
RZAL0901  RESET     ZAL00901
          GOTO      RZAL9999
.                           
.         ZAL.10 Authorising HCP (XCN)
.                           
RZAL1000  BRANCH    COMPCNT,RZAL1001:            * id number (ST)
                            RZAL1002:            * family name (ST)
                            RZAL1003:            * given name (ST)
                            RZAL1004:            * middle name (ST)
                            RZAL1005:            * suffix (ST)
                            RZAL1006:            * prefix (ST)
                            RZAL1007:            * degree (IS)
                            RZAL1008:            * source table (IS)
                            RZAL1009:            * assigning authority (HD)
                            RZAL1010:            * name type code (ID)
                            RZAL1011:            * identifier check digit (ST)
                            RZAL1012:            * check digit scheme code (ID)
                            RZAL1013:            * identifier type code (IS)
                            RZAL1014:            * assigning facility (HD)
                            RZAL1015             * name representation code (ID)
          GOTO      RZAL9999
.                           
RZAL1001  RESET     ZAL01001                     * load id number (ST)
          MOVE      ZAL01001,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZAL01001
          GOTO      RZAL9999
.                           
RZAL1002  RESET     ZAL01002                     * load family name (ST)
          GOTO      RZAL9999
.                           
RZAL1003  RESET     ZAL01003                     * load given name (ST)
          GOTO      RZAL9999
.                           
RZAL1004  RESET     ZAL01004                     * load middle name (ST)
          GOTO      RZAL9999
.                           
RZAL1005  RESET     ZAL01005                     * load suffix (ST)
          GOTO      RZAL9999
.                           
RZAL1006  RESET     ZAL01006                     * load prefix (ST)
          GOTO      RZAL9999
.                           
RZAL1007  RESET     ZAL01007                     * load degree (IS)
          GOTO      RZAL9999
.                           
RZAL1008  RESET     ZAL01008                     * load source table (IS)
          GOTO      RZAL9999
.                           
RZAL1009  RESET     ZAL01009                     * load assigning authority (HD)
          GOTO      RZAL9999
.                           
RZAL1010  RESET     ZAL01010                     * load name type code (ID)
          GOTO      RZAL9999
.                           
RZAL1011  RESET     ZAL01011                     * load ident. check digit (ST)
          GOTO      RZAL9999
.                           
RZAL1012  RESET     ZAL01012                     * load chk dig scheme code (ID)
          GOTO      RZAL9999
.                           
RZAL1013  RESET     ZAL01013                     * load ident. type code (IS)
          GOTO      RZAL9999
.                           
RZAL1014  RESET     ZAL01014                     * load assigning facility (HD)
          GOTO      RZAL9999
.                           
RZAL1015  RESET     ZAL01015                     * load name repres. code (ID)
          GOTO      RZAL9999
.
.         ZAL.11  Last Update Date/Time (TS)
.
RZAL1100  BRANCH    COMPCNT,RZAL1101
          GOTO      RZAL9999
.
RZAL1101  RESET     ZAL01101
          GOTO      RZAL9999
.
.         ZAL.12  User Who Last Updated (CE)
.
RZAL1200  BRANCH    COMPCNT,RZAL1201:            * identifier (ST)
                            RZAL1202:            * text (ST)
                            RZAL1203:            * name of coding system (ST)
                            RZAL1204:            * alternate identifier (ST)
                            RZAL1205:            * alternate text (ST)
                            RZAL1206             * name of alt. cod. system (ST)
          GOTO      RZAL9999
.
RZAL1201  RESET     ZAL01201                     * identifier (ST)
          MOVE      ZAL01201,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZAL01201
          GOTO      RZAL9999
.
RZAL1202  RESET     ZAL01202                     * text (ST)
          GOTO      RZAL9999
.
RZAL1203  RESET     ZAL01203                     * name of coding system (ST)
          GOTO      RZAL9999
.
RZAL1204  RESET     ZAL01204                     * alternate identifier (ST)
          GOTO      RZAL9999
.
RZAL1205  RESET     ZAL01205                     * alternate text (ST)
          GOTO      RZAL9999
.
RZAL1206  RESET     ZAL01206                     * name of alt. cod. system (ST)
          GOTO      RZAL9999
.
.         ZAL.13  Hospital (CE)
.
RZAL1300  BRANCH    COMPCNT,RZAL1301:            * identifier (ST)
                            RZAL1302:            * text (ST)
                            RZAL1303:            * name of coding system (ST)
                            RZAL1304:            * alternate identifier (ST)
                            RZAL1305:            * alternate text (ST)
                            RZAL1306             * name of alt. cod. system (ST)
          GOTO      RZAL9999
.
RZAL1301  RESET     ZAL01301                     * identifier (ST)
          MOVE      ZAL01301,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZAL01301
          GOTO      RZAL9999
.
RZAL1302  RESET     ZAL01302                     * text (ST)
          GOTO      RZAL9999
.
RZAL1303  RESET     ZAL01303                     * name of coding system (ST)
          GOTO      RZAL9999
.
RZAL1304  RESET     ZAL01304                     * alternate identifier (ST)
          GOTO      RZAL9999
.
RZAL1305  RESET     ZAL01305                     * alternate text (ST)
          GOTO      RZAL9999
.
RZAL1306  RESET     ZAL01306                     * name of alt. cod. system (ST)
          GOTO      RZAL9999
.
.         ZAL.14  Comments (ST)
.
RZAL1400  BRANCH    COMPCNT,RZAL1401
          GOTO      RZAL9999
.
RZAL1401  RESET     ZAL01401
          MOVE      ZAL01401,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZAL01401
          GOTO      RZAL9999
.
.         ZAL.15 Third Party System Identifier (CE)
.                (maximum of 1 repeat - 2 identifiers in total)
.
RZAL1500  COMPARE   REPTNCNT,TWO                 * maximum repeats reached ?
          GOTO      RZAL9999 IF LESS             * yes
.
          BRANCH    COMPCNT,RZAL1501:            * identifier (ST)
                            RZAL1502:            * text (ST)
                            RZAL1503:            * name of coding system (ST)
                            RZAL1504:            * alternate identifier (ST)
                            RZAL1505:            * alternate text (ST)
                            RZAL1506             * name of alt. cod. system (ST)
          GOTO      RZAL9999
.
RZAL1501  RESET     ZAL01501[REPTNCNT]           * load identifier (ST)
          GOTO      RZAL9999
.
RZAL1502  RESET     ZAL01502[REPTNCNT]           * load text (ST)
          GOTO      RZAL9999
.
RZAL1503  RESET     ZAL01503[REPTNCNT]           * load name of cod. system (ST)
          GOTO      RZAL9999
.
RZAL1504  RESET     ZAL01504[REPTNCNT]           * load alt. identifier (ST)
          GOTO      RZAL9999
.
RZAL1505  RESET     ZAL01505[REPTNCNT]           * load alternate text (ST)
          GOTO      RZAL9999
.
RZAL1506  RESET     ZAL01506[REPTNCNT]           * load alt. cod. sys. name (ST)
          GOTO      RZAL9999
.
RZAL9999  RETURN
+
.*****************************************************************************
.*                                 RZXV0000        Called by: PROC0000       *
.*                          Reset the ZXV fields                             *
.*****************************************************************************
.
RZXV0000  BRANCH    FIELDNO,RZXV0100:            * Visitor's Allowed Indicator
                            RZXV9999:            * Employment Status Indicator
                            RZXV9999:            * Non-WA Hospital Contact
                            RZXV9999:            * Waitlist Urgency
                            RZXV9999:            * Mental Health Referral Source
                            RZXV0600:            * Referral Priority
                            RZXV0700:            * Referral Reason
                            RZXV9999:            * Referral Date
                            RZXV0900:            * Referral Recorded Date
                            RZXV9999:            * Appointment Type
                            RZXV9999:            * Mode of Arrival
                            RZXV9999:            * Triage Severity
                            RZXV9999:            * Comments
                            RZXV9999:            * Transfer From Source
                            RZXV1500:            * Source of Referral
                            RZXV9999:            * Care Class
                            RZXV9999:            * Linked O/P Referral Number
                            RZXV9999:            * Mental Health Disch. Status
                            RZXV1900:            * Inform GP Flag
                            RZXV2000:            * Leave Type
                            RZXV2100:            * Leave Start Date/Time
                            RZXV2200:            * Exp. Return leave Date/Time
                            RZXV9999:            * Division
                            RZXV9999:            * Unit
                            RZXV9999:            * Team
                            RZXV9999:            * Claim Type
                            RZXV9999:            * Admission Type
                            RZXV9999:            * Discharge Destination
                            RZXV9999:            * Transfer To Destination
                            RZXV3000:            * Leave Return Date/Time
                            RZXV9999:            * Diet Codes
                            RZXV3200:            * Visit Interpreter Flag
                            RZXV9999:            * Clinic Start Time
                            RZXV3400:            * Type of Referral
                            RZXV3500:            * Preferred Site
                            RZXV3600:            * Date Referral Received
                            RZXV3700:            * Clinic Type
                            RZXV3800:            * Presenting Complaint
                            RZXV3900:            * Diagnosis
                            RZXV4000:            * Referral Department
                            RZXV4100:            * Last Update Date/Time
                            RZXV9999:            * Intended Stay
                            RZXV9999:            * Preferred Accommodation
                            RZXV4400:            * Referral Service
                            RZXV4500:            * Referred by Other
                            RZXV4600:            * Referrer Contact
                            RZXV4700:            * Cancellation Reason
                            RZXV4800:            * Booking Instructions
                            RZXV4900:            * Referring Practice
                            RZXV5000:            * Event Program
                            RZXV5100:            * Occasion of Service
                            RZXV5200:            * Date Referral Accepted
                            RZXV5300:            * Referral In Service Type
                            RZXV5400:            * Ref. In Clin. Referral Date
                            RZXV5500:            * Visit Type
                            RZXV5600:            * Triage Status
                            RZXV5700:            * O/P Service Delivery Mode
                            RZXV5800:            * Phone Calls Allowed
                            RZXV5900:            * Ambulance Handover Date/Time
                            RZXV6000:            * Ambulance Case Number
                            RZXV6100:            * Ambul Case Created Date/Time
                            RZXV6200:            * Initial Assessor Code
                            RZXV6300:            * Initial Assessor Date/Time
                            RZXV6400:            * Initial Assessor Reason
                            RZXV6500:            * Treating Doctor Date/Time
                            RZXV6600:            * Treating Nurse Code
                            RZXV6700:            * Treating Nurse Date/Time
                            RZXV6800:            * MH Practitioner Code
                            RZXV6900:            * MH Practitioner Date/Time
                            RZXV7000:            * First Seen By Doctor Code
                            RZXV7100:            * First Seen By Doc Date/Time
                            RZXV7200:            * Decision to Admit Date/Time
                            RZXV7300:            * Readiness to Admit
                            RZXV7400:            * Admitting Doctor Code
                            RZXV7500:            * Admitting Doctor Contacted
                            RZXV7600:            * Escort Source
                            RZXV7700:            * Relative Contacted
                            RZXV7800:            * Relative Contacted Time
                            RZXV7900:            * Risk Assessment
                            RZXV8000:            * Spec/oth hosp contacted Name
                            RZXV8100:            * Spec/other hosp contacted via
                            RZXV8200:            * Ready to Discharge Date/Time
                            RZXV8300:            * Referred to On Departure
                            RZXV8400:            * Reason for Transfer
                            RZXV8500:            * Transport Mode
                            RZXV8600:            * Ambulance Booking Time
                            RZXV8700:            * ED Extended Visit Reason
                            RZXV8800:            * Anaesthetic Type for Billing
                            RZXV8900:            * MyHR Consent value
                            RZXV9000:            * Telehealth Status (Cat OM)
                            RZXV9100:            * Telehealth Receiving Site
                            RZXV9200:            * Telehealth Receiving Code
                            RZXV9300:            * Telehealth Receiving Address
                            RZXV9400:            * Telehealth Waiting Room URL
                            RZXV9500:            * Telehealth Receiving E164
                            RZXV9600:            * Telehealth Notes
                            RZXV9700:            * Appointment Confirmed
                            RZXV9800:            * Referral In Reason
                            RZXV9900:            * Episode Health Condition
                            RZXV1000:            * Usual Accommodation
                            RZXV1010:            * Triage Date
                            RZXV1020:            * Referral-In Receipt Ack Date
                            RZXV1030             * ED Arrival Date/Time
.
.         Invalid ZXV field received, so ignore it
.
          GOTO      RZXV9999
.
.         ZXV.1  Visitors Allowed (ID)
.
RZXV0100  BRANCH    COMPCNT,RZXV0101
          GOTO      RZXV9999
.
RZXV0101  RESET     ZXV00101
          GOTO      RZXV9999
.
.         ZXV.6  Referral Priority (CE)
.
RZXV0600  BRANCH    COMPCNT,RZXV0601:            * identifier (ST)
                            RZXV0602:            * text (ST)
                            RZXV0603:            * name of coding system (ST)
                            RZXV0604:            * alternate identifier (ST)
                            RZXV0605:            * alternate text (ST)
                            RZXV0606             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV0601  RESET     ZXV00601                     * identifier (ST)
          MOVE      ZXV00601,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV00601
          GOTO      RZXV9999
.
RZXV0602  RESET     ZXV00602                     * text (ST)
          GOTO      RZXV9999
.
RZXV0603  RESET     ZXV00603                     * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV0604  RESET     ZXV00604                     * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV0605  RESET     ZXV00605                     * alternate text (ST)
          GOTO      RZXV9999
.
RZXV0606  RESET     ZXV00606                     * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.7  Referral Reason (CE)
.
RZXV0700  BRANCH    COMPCNT,RZXV0701:            * identifier (ST)
                            RZXV0702:            * text (ST)
                            RZXV0703:            * name of coding system (ST)
                            RZXV0704:            * alternate identifier (ST)
                            RZXV0705:            * alternate text (ST)
                            RZXV0706             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV0701  RESET     ZXV00701                     * identifier (ST)
          MOVE      ZXV00701,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV00701
          GOTO      RZXV9999
.
RZXV0702  RESET     ZXV00702                     * text (ST)
          GOTO      RZXV9999
.
RZXV0703  RESET     ZXV00703                     * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV0704  RESET     ZXV00704                     * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV0705  RESET     ZXV00705                     * alternate text (ST)
          GOTO      RZXV9999
.
RZXV0706  RESET     ZXV00706                     * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.9  Referral Recorded Date (TS)
.
RZXV0900  BRANCH    COMPCNT,RZXV0901
.
RZXV0901  RESET     ZXV00901
          GOTO      RZXV9999
.
.         ZXV.15  Source of Referral (CE)
.
RZXV1500  BRANCH    COMPCNT,RZXV1501:            * identifier (ST)
                            RZXV1502:            * text (ST)
                            RZXV1503:            * name of coding system (ST)
                            RZXV1504:            * alternate identifier (ST)
                            RZXV1505:            * alternate text (ST)
                            RZXV1506             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV1501  RESET     ZXV01501                     * identifier (ST)
          MOVE      ZXV01501,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV01501
          GOTO      RZXV9999
.
RZXV1502  RESET     ZXV01502                     * text (ST)
          GOTO      RZXV9999
.
RZXV1503  RESET     ZXV01503                     * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV1504  RESET     ZXV01504                     * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV1505  RESET     ZXV01505                     * alternate text (ST)
          GOTO      RZXV9999
.
RZXV1506  RESET     ZXV01506                     * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.19  Inform GP Flag (ST)
.
RZXV1900  BRANCH    COMPCNT,RZXV1901
.
RZXV1901  RESET     ZXV01901
          GOTO      RZXV9999
.
.         ZXV.20  Leave Type (CE)
.
RZXV2000  BRANCH    COMPCNT,RZXV2001:            * identifier (ST)
                            RZXV2002:            * text (ST)
                            RZXV2003:            * name of coding system (ST)
                            RZXV2004:            * alternate identifier (ST)
                            RZXV2005:            * alternate text (ST)
                            RZXV2006             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV2001  RESET     ZXV02001                     * identifier (ST)
          MOVE      ZXV02001,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV02001
          GOTO      RZXV9999
.
RZXV2002  RESET     ZXV02002                     * text (ST)
          GOTO      RZXV9999
.
RZXV2003  RESET     ZXV02003                     * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV2004  RESET     ZXV02004                     * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV2005  RESET     ZXV02005                     * alternate text (ST)
          GOTO      RZXV9999
.
RZXV2006  RESET     ZXV02006                     * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.21  On Leave Date/Time (TS)
.
RZXV2100  BRANCH    COMPCNT,RZXV2101
.
RZXV2101  RESET     ZXV02101
          GOTO      RZXV9999
.
.         ZXV.22  On Leave Date/Time (TS)
.
RZXV2200  BRANCH    COMPCNT,RZXV2201
.
RZXV2201  RESET     ZXV02201
          GOTO      RZXV9999
.
.         ZXV.30  Return Leave Date/Time (TS)
.
RZXV3000  BRANCH    COMPCNT,RZXV3001
.
RZXV3001  RESET     ZXV03001
          GOTO      RZXV9999
.
.         ZXV.32  Visit Interpreter Flag (ST)
.
RZXV3200  BRANCH    COMPCNT,RZXV3201
.
RZXV3201  RESET     ZXV03201
          GOTO      RZXV9999
.
.         ZXV.34  Type of Referral (CE)
.
RZXV3400  BRANCH    COMPCNT,RZXV3401:            * identifier (ST)
                            RZXV3402:            * text (ST)
                            RZXV3403:            * name of coding system (ST)
                            RZXV3404:            * alternate identifier (ST)
                            RZXV3405:            * alternate text (ST)
                            RZXV3406             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV3401  RESET     ZXV03401                     * identifier (ST)
          MOVE      ZXV03401,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV03401
          GOTO      RZXV9999
.
RZXV3402  RESET     ZXV03402                     * text (ST)
          GOTO      RZXV9999
.
RZXV3403  RESET     ZXV03403                     * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV3404  RESET     ZXV03404                     * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV3405  RESET     ZXV03405                     * alternate text (ST)
          GOTO      RZXV9999
.
RZXV3406  RESET     ZXV03406                     * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.35  Preferred Site (CE)
.
RZXV3500  BRANCH    COMPCNT,RZXV3501:            * identifier (ST)
                            RZXV3502:            * text (ST)
                            RZXV3503:            * name of coding system (ST)
                            RZXV3504:            * alternate identifier (ST)
                            RZXV3505:            * alternate text (ST)
                            RZXV3506             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV3501  RESET     ZXV03501                     * identifier (ST)
          MOVE      ZXV03501,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV03501
          GOTO      RZXV9999
.
RZXV3502  RESET     ZXV03502                     * text (ST)
          GOTO      RZXV9999
.
RZXV3503  RESET     ZXV03503                     * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV3504  RESET     ZXV03504                     * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV3505  RESET     ZXV03505                     * alternate text (ST)
          GOTO      RZXV9999
.
RZXV3506  RESET     ZXV03506                     * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.36  Date Referral Received (DT)
.
RZXV3600  BRANCH    COMPCNT,RZXV3601
.
RZXV3601  RESET     ZXV03601
          GOTO      RZXV9999
.
.         ZXV.37  Clinic Type (CE)
.
RZXV3700  BRANCH    COMPCNT,RZXV3701:            * identifier (ST)
                            RZXV3702:            * text (ST)
                            RZXV3703:            * name of coding system (ST)
                            RZXV3704:            * alternate identifier (ST)
                            RZXV3705:            * alternate text (ST)
                            RZXV3706             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV3701  RESET     ZXV03701                     * identifier (ST)
          MOVE      ZXV03701,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV03701
          GOTO      RZXV9999
.
RZXV3702  RESET     ZXV03702                     * text (ST)
          GOTO      RZXV9999
.
RZXV3703  RESET     ZXV03703                     * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV3704  RESET     ZXV03704                     * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV3705  RESET     ZXV03705                     * alternate text (ST)
          GOTO      RZXV9999
.
RZXV3706  RESET     ZXV03706                     * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.38  Presenting Complaint (ST)
.
RZXV3800  BRANCH    COMPCNT,RZXV3801
.
RZXV3801  RESET     ZXV03801
          MOVE      ZXV03801,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV03801
          MATCH     BLANKSTR,ZXV03801
          IF        !@EQUAL
            REP       "#"'",ZXV03801
          ENDIF
          GOTO      RZXV9999
.
.         ZXV.39  Diagnosis (CE) (maximum of 2 repeats - 3 diagnoses in total)
.
RZXV3900  COMPARE   REPTNCNT,THREE               * maximum repeats reached ?
          GOTO      RZXV9999 IF LESS             * yes
.
          BRANCH    COMPCNT,RZXV3901:            * identifier (ST)
                            RZXV3902:            * text (ST)
                            RZXV3903:            * name of coding system (ST)
                            RZXV3904:            * alternate identifier (ST)
                            RZXV3905:            * alternate text (ST)
                            RZXV3906             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV3901  RESET     ZXV03901[REPTNCNT]           * identifier (ST)
          MOVE      ZXV03901[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV03901[REPTNCNT]
          GOTO      RZXV9999
.
RZXV3902  RESET     ZXV03902[REPTNCNT]           * text (ST)
          GOTO      RZXV9999
.
RZXV3903  RESET     ZXV03903[REPTNCNT]           * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV3904  RESET     ZXV03904[REPTNCNT]           * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV3905  RESET     ZXV03905[REPTNCNT]           * alternate text (ST)
          GOTO      RZXV9999
.
RZXV3906  RESET     ZXV03906[REPTNCNT]           * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.40  Referral Department (CE)
.
RZXV4000  BRANCH    COMPCNT,RZXV4001:            * identifier (ST)
                            RZXV4002:            * text (ST)
                            RZXV4003:            * name of coding system (ST)
                            RZXV4004:            * alternate identifier (ST)
                            RZXV4005:            * alternate text (ST)
                            RZXV4006             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV4001  RESET     ZXV04001                     * identifier (ST)
          MOVE      ZXV04001,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV04001
          GOTO      RZXV9999
.
RZXV4002  RESET     ZXV04002                     * text (ST)
          GOTO      RZXV9999
.
RZXV4003  RESET     ZXV04003                     * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV4004  RESET     ZXV04004                     * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV4005  RESET     ZXV04005                     * alternate text (ST)
          GOTO      RZXV9999
.
RZXV4006  RESET     ZXV04006                     * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.41  Last Update Date/Time (TS)
.
RZXV4100  BRANCH    COMPCNT,RZXV4101
.
RZXV4101  RESET     ZXV04101
          GOTO      RZXV9999
.
.         ZXV.42  Intended Stay (CE)
.
RZXV4200  BRANCH    COMPCNT,RZXV4201:            * identifier (ST)
                            RZXV4202:            * text (ST)
                            RZXV4203:            * name of coding system (ST)
                            RZXV4204:            * alternate identifier (ST)
                            RZXV4205:            * alternate text (ST)
                            RZXV4206             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV4201  RESET     ZXV04201                     * identifier (ST)
          MOVE      ZXV04201,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV04201
          GOTO      RZXV9999
.
RZXV4202  RESET     ZXV04202                     * text (ST)
          GOTO      RZXV9999
.
RZXV4203  RESET     ZXV04203                     * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV4204  RESET     ZXV04204                     * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV4205  RESET     ZXV04205                     * alternate text (ST)
          GOTO      RZXV9999
.
RZXV4206  RESET     ZXV04206                     * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.43  Preferred Accommodation (CE)
.
RZXV4300  BRANCH    COMPCNT,RZXV4301:            * identifier (ST)
                            RZXV4302:            * text (ST)
                            RZXV4303:            * name of coding system (ST)
                            RZXV4304:            * alternate identifier (ST)
                            RZXV4305:            * alternate text (ST)
                            RZXV4306             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV4301  RESET     ZXV04301                     * identifier (ST)
          MOVE      ZXV04301,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV04301
          GOTO      RZXV9999
.
RZXV4302  RESET     ZXV04302                     * text (ST)
          GOTO      RZXV9999
.
RZXV4303  RESET     ZXV04303                     * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV4304  RESET     ZXV04304                     * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV4305  RESET     ZXV04305                     * alternate text (ST)
          GOTO      RZXV9999
.
RZXV4306  RESET     ZXV04306                     * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.44  Referral Service (ST)
.
RZXV4400  BRANCH    COMPCNT,RZXV4401
.
RZXV4401  RESET     ZXV04401
          GOTO      RZXV9999
.
.         ZXV.45  Referral by Other (ST)
.
RZXV4500  BRANCH    COMPCNT,RZXV4501
.
RZXV4501  RESET     ZXV04501
          GOTO      RZXV9999
.
.         ZXV.46  Referrer Contact (ST)
.
RZXV4600  BRANCH    COMPCNT,RZXV4601
.
RZXV4601  RESET     ZXV04601
          GOTO      RZXV9999
.
.         ZXV.47  Cancellation Reason (CE)
.
RZXV4700  BRANCH    COMPCNT,RZXV4701:            * identifier (ST)
                            RZXV4702:            * text (ST)
                            RZXV4703:            * name of coding system (ST)
                            RZXV4704:            * alternate identifier (ST)
                            RZXV4705:            * alternate text (ST)
                            RZXV4706             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV4701  RESET     ZXV04701                     * identifier (ST)
          MOVE      ZXV04701,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV04701
          GOTO      RZXV9999
.
RZXV4702  RESET     ZXV04702                     * text (ST)
          GOTO      RZXV9999
.
RZXV4703  RESET     ZXV04703                     * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV4704  RESET     ZXV04704                     * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV4705  RESET     ZXV04705                     * alternate text (ST)
          GOTO      RZXV9999
.
RZXV4706  RESET     ZXV04706                     * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.48  Booking Instructions (ST)
.
RZXV4800  BRANCH    COMPCNT,RZXV4801
.
RZXV4801  RESET     ZXV04801
          GOTO      RZXV9999
.
.         ZXV.49  Referring Practice (CE)
.
RZXV4900  BRANCH    COMPCNT,RZXV4901:            * identifier (ST)
                            RZXV4902:            * text (ST)
                            RZXV4903:            * name of coding system (ST)
                            RZXV4904:            * alternate identifier (ST)
                            RZXV4905:            * alternate text (ST)
                            RZXV4906             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV4901  RESET     ZXV04901                     * identifier (ST)
          MOVE      ZXV04901,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV04901
          GOTO      RZXV9999
.
RZXV4902  RESET     ZXV04902                     * text (ST)
          GOTO      RZXV9999
.
RZXV4903  RESET     ZXV04903                     * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV4904  RESET     ZXV04904                     * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV4905  RESET     ZXV04905                     * alternate text (ST)
          GOTO      RZXV9999
.
RZXV4906  RESET     ZXV04906                     * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.50  Event Program (CE)
.
RZXV5000  BRANCH    COMPCNT,RZXV5001:            * identifier (ST)
                            RZXV5002:            * text (ST)
                            RZXV5003:            * name of coding system (ST)
                            RZXV5004:            * alternate identifier (ST)
                            RZXV5005:            * alternate text (ST)
                            RZXV5006             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV5001  RESET     ZXV05001                     * identifier (ST)
          MOVE      ZXV05001,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV05001
          GOTO      RZXV9999
.
RZXV5002  RESET     ZXV05002                     * text (ST)
          GOTO      RZXV9999
.
RZXV5003  RESET     ZXV05003                     * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV5004  RESET     ZXV05004                     * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV5005  RESET     ZXV05005                     * alternate text (ST)
          GOTO      RZXV9999
.
RZXV5006  RESET     ZXV05006                     * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.51  Occasion of Service (CE)
.
RZXV5100  BRANCH    COMPCNT,RZXV5101:            * identifier (ST)
                            RZXV5102:            * text (ST)
                            RZXV5103:            * name of coding system (ST)
                            RZXV5104:            * alternate identifier (ST)
                            RZXV5105:            * alternate text (ST)
                            RZXV5106             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV5101  RESET     ZXV05101                     * identifier (ST)
          MOVE      ZXV05101,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV05101
          GOTO      RZXV9999
.
RZXV5102  RESET     ZXV05102                     * text (ST)
          GOTO      RZXV9999
.
RZXV5103  RESET     ZXV05103                     * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV5104  RESET     ZXV05104                     * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV5105  RESET     ZXV05105                     * alternate text (ST)
          GOTO      RZXV9999
.
RZXV5106  RESET     ZXV05106                     * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.52  Date Referral Accepted (DT)
.
RZXV5200  BRANCH    COMPCNT,RZXV5201
.
RZXV5201  RESET     ZXV05201
          GOTO      RZXV9999
.
.         ZXV.53  Referral In Service Type (CE)
.
RZXV5300  BRANCH    COMPCNT,RZXV5301:            * identifier (ST)
                            RZXV5302:            * text (ST)
                            RZXV5303:            * name of coding system (ST)
                            RZXV5304:            * alternate identifier (ST)
                            RZXV5305:            * alternate text (ST)
                            RZXV5306             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV5301  RESET     ZXV05301                     * identifier (ST)
          MOVE      ZXV05301,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV05301
          GOTO      RZXV9999
.
RZXV5302  RESET     ZXV05302                     * text (ST)
          GOTO      RZXV9999
.
RZXV5303  RESET     ZXV05303                     * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV5304  RESET     ZXV05304                     * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV5305  RESET     ZXV05305                     * alternate text (ST)
          GOTO      RZXV9999
.
RZXV5306  RESET     ZXV05306                     * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.54  Referral In Clinical Referral Date (DT)
.
RZXV5400  BRANCH    COMPCNT,RZXV5401
.
RZXV5401  RESET     ZXV05401
          GOTO      RZXV9999
.
.         ZXV.55  Visit Type (CE)
.
RZXV5500  BRANCH    COMPCNT,RZXV5501:            * identifier (ST)
                            RZXV5502:            * text (ST)
                            RZXV5503:            * name of coding system (ST)
                            RZXV5504:            * alternate identifier (ST)
                            RZXV5505:            * alternate text (ST)
                            RZXV5506             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV5501  RESET     ZXV05501                     * identifier (ST)
          MOVE      ZXV05501,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV05501
          GOTO      RZXV9999
.
RZXV5502  RESET     ZXV05502                     * text (ST)
          GOTO      RZXV9999
.
RZXV5503  RESET     ZXV05503                     * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV5504  RESET     ZXV05504                     * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV5505  RESET     ZXV05505                     * alternate text (ST)
          GOTO      RZXV9999
.
RZXV5506  RESET     ZXV05506                     * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.56  Triage Status (CE)
.
RZXV5600  BRANCH    COMPCNT,RZXV5601:            * identifier (ST)
                            RZXV5602:            * text (ST)
                            RZXV5603:            * name of coding system (ST)
                            RZXV5604:            * alternate identifier (ST)
                            RZXV5605:            * alternate text (ST)
                            RZXV5606             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV5601  RESET     ZXV05601                     * identifier (ST)
          MOVE      ZXV05601,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV05601
          GOTO      RZXV9999
.
RZXV5602  RESET     ZXV05602                     * text (ST)
          GOTO      RZXV9999
.
RZXV5603  RESET     ZXV05603                     * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV5604  RESET     ZXV05604                     * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV5605  RESET     ZXV05605                     * alternate text (ST)
          GOTO      RZXV9999
.
RZXV5606  RESET     ZXV05606                     * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.57  O/P Service Delivery Mode (CE)
.
RZXV5700  BRANCH    COMPCNT,RZXV5701:            * identifier (ST)
                            RZXV5702:            * text (ST)
                            RZXV5703:            * name of coding system (ST)
                            RZXV5704:            * alternate identifier (ST)
                            RZXV5705:            * alternate text (ST)
                            RZXV5706             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV5701  RESET     ZXV05701                     * identifier (ST)
          MOVE      ZXV05701,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV05701
          GOTO      RZXV9999
.
RZXV5702  RESET     ZXV05702                     * text (ST)
          GOTO      RZXV9999
.
RZXV5703  RESET     ZXV05703                     * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV5704  RESET     ZXV05704                     * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV5705  RESET     ZXV05705                     * alternate text (ST)
          GOTO      RZXV9999
.
RZXV5706  RESET     ZXV05706                     * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.58  Phone Calls Allowed (ID)
.
RZXV5800  BRANCH    COMPCNT,RZXV5801
          GOTO      RZXV9999
.
RZXV5801  RESET     ZXV05801
          GOTO      RZXV9999
.
.         ZXV.59  Ambulance Handover Date/Time (TS)
.
RZXV5900  BRANCH    COMPCNT,RZXV5901
.
RZXV5901  RESET     ZXV05901
          GOTO      RZXV9999
.
.         ZXV.60  Ambulance Case Number (ST)
.
RZXV6000  BRANCH    COMPCNT,RZXV6001
.
RZXV6001  RESET     ZXV06001
          GOTO      RZXV9999
.
.         ZXV.61  Ambulance Case Created Date/Time (TS)
.
RZXV6100  BRANCH    COMPCNT,RZXV6101
.
RZXV6101  RESET     ZXV06101
          GOTO      RZXV9999
.
.         ZXV.62  Initial Assessor Code (XCN)
.
RZXV6200  BRANCH    COMPCNT,RZXV6201:            * id number (ST)
                            RZXV6202:            * family name (ST)
                            RZXV6203:            * given name (ST)
                            RZXV6204:            * middle name (ST)
                            RZXV6205:            * suffix (ST)
                            RZXV6206:            * prefix (ST)
                            RZXV6207:            * degree (IS)
                            RZXV6208:            * source table (IS)
                            RZXV6209:            * assigning authority (HD)
                            RZXV6210:            * name type code (ID)
                            RZXV6211:            * identifier check digit (ST)
                            RZXV6212:            * check digit scheme code (ID)
                            RZXV6213:            * identifier type code (IS)
                            RZXV6214:            * assigning facility (HD)
                            RZXV6215             * name representation code (ID)
          GOTO      RZXV9999
.
RZXV6201  RESET     ZXV06201                     * load id number (ST)
          MOVE      ZXV06201,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV06201
          GOTO      RZXV9999
.
RZXV6202  RESET     ZXV06202                     * load family name (ST)
          GOTO      RZXV9999
.
RZXV6203  RESET     ZXV06203                     * load given name (ST)
          GOTO      RZXV9999
.
RZXV6204  RESET     ZXV06204                     * load middle name (ST)
          GOTO      RZXV9999
.
RZXV6205  RESET     ZXV06205                     * load suffix (ST)
          GOTO      RZXV9999
.
RZXV6206  RESET     ZXV06206                     * load prefix (ST)
          GOTO      RZXV9999
.
RZXV6207  RESET     ZXV06207                     * load degree (IS)
          GOTO      RZXV9999
.
RZXV6208  RESET     ZXV06208                     * load source table (IS)
          GOTO      RZXV9999
.
RZXV6209  RESET     ZXV06209                     * load assigning authority (HD)
          GOTO      RZXV9999
.
RZXV6210  RESET     ZXV06210                     * load name type code (ID)
          GOTO      RZXV9999
.
RZXV6211  RESET     ZXV06211                     * load ident. check digit (ST)
          GOTO      RZXV9999
.
RZXV6212  RESET     ZXV06212                     * load chk dig scheme code (ID)
          GOTO      RZXV9999
.
RZXV6213  RESET     ZXV06213                     * load ident. type code (IS)
          GOTO      RZXV9999
.
RZXV6214  RESET     ZXV06214                     * load assigning facility (HD)
          GOTO      RZXV9999
.
RZXV6215  RESET     ZXV06215                     * load name repres. code (ID)
          GOTO      RZXV9999
.
.         ZXV.63  Initial Assessor Date/Time (TS)
.
RZXV6300  BRANCH    COMPCNT,RZXV6301
.
RZXV6301  RESET     ZXV06301
          GOTO      RZXV9999
.
.         ZXV.64  Initial Assessor Reason (CE)
.
RZXV6400  BRANCH    COMPCNT,RZXV6401:            * identifier (ST)
                            RZXV6402:            * text (ST)
                            RZXV6403:            * name of coding system (ST)
                            RZXV6404:            * alternate identifier (ST)
                            RZXV6405:            * alternate text (ST)
                            RZXV6406             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV6401  RESET     ZXV06401                     * identifier (ST)
          MOVE      ZXV06401,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV06401
          GOTO      RZXV9999
.
RZXV6402  RESET     ZXV06402                     * text (ST)
          GOTO      RZXV9999
.
RZXV6403  RESET     ZXV06403                     * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV6404  RESET     ZXV06404                     * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV6405  RESET     ZXV06405                     * alternate text (ST)
          GOTO      RZXV9999
.
RZXV6406  RESET     ZXV06406                     * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.65  Treating Doctor Date/Time (TS)
.
RZXV6500  BRANCH    COMPCNT,RZXV6501
.
RZXV6501  RESET     ZXV06501
          GOTO      RZXV9999
.
.         ZXV.66  Treating Nurse Code (XCN)
.
RZXV6600  BRANCH    COMPCNT,RZXV6601:            * id number (ST)
                            RZXV6602:            * family name (ST)
                            RZXV6603:            * given name (ST)
                            RZXV6604:            * middle name (ST)
                            RZXV6605:            * suffix (ST)
                            RZXV6606:            * prefix (ST)
                            RZXV6607:            * degree (IS)
                            RZXV6608:            * source table (IS)
                            RZXV6609:            * assigning authority (HD)
                            RZXV6610:            * name type code (ID)
                            RZXV6611:            * identifier check digit (ST)
                            RZXV6612:            * check digit scheme code (ID)
                            RZXV6613:            * identifier type code (IS)
                            RZXV6614:            * assigning facility (HD)
                            RZXV6615             * name representation code (ID)
          GOTO      RZXV9999
.
RZXV6601  RESET     ZXV06601                     * load id number (ST)
          MOVE      ZXV06601,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV06601
          GOTO      RZXV9999
.
RZXV6602  RESET     ZXV06602                     * load family name (ST)
          GOTO      RZXV9999
.
RZXV6603  RESET     ZXV06603                     * load given name (ST)
          GOTO      RZXV9999
.
RZXV6604  RESET     ZXV06604                     * load middle name (ST)
          GOTO      RZXV9999
.
RZXV6605  RESET     ZXV06605                     * load suffix (ST)
          GOTO      RZXV9999
.
RZXV6606  RESET     ZXV06606                     * load prefix (ST)
          GOTO      RZXV9999
.
RZXV6607  RESET     ZXV06607                     * load degree (IS)
          GOTO      RZXV9999
.
RZXV6608  RESET     ZXV06608                     * load source table (IS)
          GOTO      RZXV9999
.
RZXV6609  RESET     ZXV06609                     * load assigning authority (HD)
          GOTO      RZXV9999
.
RZXV6610  RESET     ZXV06610                     * load name type code (ID)
          GOTO      RZXV9999
.
RZXV6611  RESET     ZXV06611                     * load ident. check digit (ST)
          GOTO      RZXV9999
.
RZXV6612  RESET     ZXV06612                     * load chk dig scheme code (ID)
          GOTO      RZXV9999
.
RZXV6613  RESET     ZXV06613                     * load ident. type code (IS)
          GOTO      RZXV9999
.
RZXV6614  RESET     ZXV06614                     * load assigning facility (HD)
          GOTO      RZXV9999
.
RZXV6615  RESET     ZXV06615                     * load name repres. code (ID)
          GOTO      RZXV9999
.
.         ZXV.67  Treating Nurse Date/Time (TS)
.
RZXV6700  BRANCH    COMPCNT,RZXV6701
.
RZXV6701  RESET     ZXV06701
          GOTO      RZXV9999
.
.         ZXV.68  MH Practitioner Code (XCN)
.
RZXV6800  BRANCH    COMPCNT,RZXV6801:            * id number (ST)
                            RZXV6802:            * family name (ST)
                            RZXV6803:            * given name (ST)
                            RZXV6804:            * middle name (ST)
                            RZXV6805:            * suffix (ST)
                            RZXV6806:            * prefix (ST)
                            RZXV6807:            * degree (IS)
                            RZXV6808:            * source table (IS)
                            RZXV6809:            * assigning authority (HD)
                            RZXV6810:            * name type code (ID)
                            RZXV6811:            * identifier check digit (ST)
                            RZXV6812:            * check digit scheme code (ID)
                            RZXV6813:            * identifier type code (IS)
                            RZXV6814:            * assigning facility (HD)
                            RZXV6815             * name representation code (ID)
          GOTO      RZXV9999
.
RZXV6801  RESET     ZXV06801                     * load id number (ST)
          MOVE      ZXV06801,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV06801
          GOTO      RZXV9999
.
RZXV6802  RESET     ZXV06802                     * load family name (ST)
          GOTO      RZXV9999
.
RZXV6803  RESET     ZXV06803                     * load given name (ST)
          GOTO      RZXV9999
.
RZXV6804  RESET     ZXV06804                     * load middle name (ST)
          GOTO      RZXV9999
.
RZXV6805  RESET     ZXV06805                     * load suffix (ST)
          GOTO      RZXV9999
.
RZXV6806  RESET     ZXV06806                     * load prefix (ST)
          GOTO      RZXV9999
.
RZXV6807  RESET     ZXV06807                     * load degree (IS)
          GOTO      RZXV9999
.
RZXV6808  RESET     ZXV06808                     * load source table (IS)
          GOTO      RZXV9999
.
RZXV6809  RESET     ZXV06809                     * load assigning authority (HD)
          GOTO      RZXV9999
.
RZXV6810  RESET     ZXV06810                     * load name type code (ID)
          GOTO      RZXV9999
.
RZXV6811  RESET     ZXV06811                     * load ident. check digit (ST)
          GOTO      RZXV9999
.
RZXV6812  RESET     ZXV06812                     * load chk dig scheme code (ID)
          GOTO      RZXV9999
.
RZXV6813  RESET     ZXV06813                     * load ident. type code (IS)
          GOTO      RZXV9999
.
RZXV6814  RESET     ZXV06814                     * load assigning facility (HD)
          GOTO      RZXV9999
.
RZXV6815  RESET     ZXV06815                     * load name repres. code (ID)
          GOTO      RZXV9999
.
.         ZXV.69  MH Practitioner Date/Time (TS)
.
RZXV6900  BRANCH    COMPCNT,RZXV6901
.
RZXV6901  RESET     ZXV06901
          GOTO      RZXV9999
.
.         ZXV.70  First Seen By Doctor Code (XCN)
.
RZXV7000  BRANCH    COMPCNT,RZXV7001:            * id number (ST)
                            RZXV7002:            * family name (ST)
                            RZXV7003:            * given name (ST)
                            RZXV7004:            * middle name (ST)
                            RZXV7005:            * suffix (ST)
                            RZXV7006:            * prefix (ST)
                            RZXV7007:            * degree (IS)
                            RZXV7008:            * source table (IS)
                            RZXV7009:            * assigning authority (HD)
                            RZXV7010:            * name type code (ID)
                            RZXV7011:            * identifier check digit (ST)
                            RZXV7012:            * check digit scheme code (ID)
                            RZXV7013:            * identifier type code (IS)
                            RZXV7014:            * assigning facility (HD)
                            RZXV7015             * name representation code (ID)
          GOTO      RZXV9999
.
RZXV7001  RESET     ZXV07001                     * load id number (ST)
          MOVE      ZXV07001,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV07001
          GOTO      RZXV9999
.
RZXV7002  RESET     ZXV07002                     * load family name (ST)
          GOTO      RZXV9999
.
RZXV7003  RESET     ZXV07003                     * load given name (ST)
          GOTO      RZXV9999
.
RZXV7004  RESET     ZXV07004                     * load middle name (ST)
          GOTO      RZXV9999
.
RZXV7005  RESET     ZXV07005                     * load suffix (ST)
          GOTO      RZXV9999
.
RZXV7006  RESET     ZXV07006                     * load prefix (ST)
          GOTO      RZXV9999
.
RZXV7007  RESET     ZXV07007                     * load degree (IS)
          GOTO      RZXV9999
.
RZXV7008  RESET     ZXV07008                     * load source table (IS)
          GOTO      RZXV9999
.
RZXV7009  RESET     ZXV07009                     * load assigning authority (HD)
          GOTO      RZXV9999
.
RZXV7010  RESET     ZXV07010                     * load name type code (ID)
          GOTO      RZXV9999
.
RZXV7011  RESET     ZXV07011                     * load ident. check digit (ST)
          GOTO      RZXV9999
.
RZXV7012  RESET     ZXV07012                     * load chk dig scheme code (ID)
          GOTO      RZXV9999
.
RZXV7013  RESET     ZXV07013                     * load ident. type code (IS)
          GOTO      RZXV9999
.
RZXV7014  RESET     ZXV07014                     * load assigning facility (HD)
          GOTO      RZXV9999
.
RZXV7015  RESET     ZXV07015                     * load name repres. code (ID)
          GOTO      RZXV9999
.
.         ZXV.71  First Seen By Doctor Date/Time (TS)
.
RZXV7100  BRANCH    COMPCNT,RZXV7101
.
RZXV7101  RESET     ZXV07101
          GOTO      RZXV9999
.
.         ZXV.72  Decision to Admit Date/Time (TS)
.
RZXV7200  BRANCH    COMPCNT,RZXV7201
.
RZXV7201  RESET     ZXV07201
          GOTO      RZXV9999
.
.         ZXV.73  Readiness to Admit (CE)
.
RZXV7300  BRANCH    COMPCNT,RZXV7301:            * identifier (ST)
                            RZXV7302:            * text (ST)
                            RZXV7303:            * name of coding system (ST)
                            RZXV7304:            * alternate identifier (ST)
                            RZXV7305:            * alternate text (ST)
                            RZXV7306             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV7301  RESET     ZXV07301                     * identifier (ST)
          MOVE      ZXV07301,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV07301
          GOTO      RZXV9999
.
RZXV7302  RESET     ZXV07302                     * text (ST)
          GOTO      RZXV9999
.
RZXV7303  RESET     ZXV07303                     * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV7304  RESET     ZXV07304                     * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV7305  RESET     ZXV07305                     * alternate text (ST)
          GOTO      RZXV9999
.
RZXV7306  RESET     ZXV07306                     * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.74  Admitting Doctor Code (XCN)
.
RZXV7400  BRANCH    COMPCNT,RZXV7401:            * id number (ST)
                            RZXV7402:            * family name (ST)
                            RZXV7403:            * given name (ST)
                            RZXV7404:            * middle name (ST)
                            RZXV7405:            * suffix (ST)
                            RZXV7406:            * prefix (ST)
                            RZXV7407:            * degree (IS)
                            RZXV7408:            * source table (IS)
                            RZXV7409:            * assigning authority (HD)
                            RZXV7410:            * name type code (ID)
                            RZXV7411:            * identifier check digit (ST)
                            RZXV7412:            * check digit scheme code (ID)
                            RZXV7413:            * identifier type code (IS)
                            RZXV7414:            * assigning facility (HD)
                            RZXV7415             * name representation code (ID)
          GOTO      RZXV9999
.
RZXV7401  RESET     ZXV07401                     * load id number (ST)
          MOVE      ZXV07401,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV07401
          GOTO      RZXV9999
.
RZXV7402  RESET     ZXV07402                     * load family name (ST)
          GOTO      RZXV9999
.
RZXV7403  RESET     ZXV07403                     * load given name (ST)
          GOTO      RZXV9999
.
RZXV7404  RESET     ZXV07404                     * load middle name (ST)
          GOTO      RZXV9999
.
RZXV7405  RESET     ZXV07405                     * load suffix (ST)
          GOTO      RZXV9999
.
RZXV7406  RESET     ZXV07406                     * load prefix (ST)
          GOTO      RZXV9999
.
RZXV7407  RESET     ZXV07407                     * load degree (IS)
          GOTO      RZXV9999
.
RZXV7408  RESET     ZXV07408                     * load source table (IS)
          GOTO      RZXV9999
.
RZXV7409  RESET     ZXV07409                     * load assigning authority (HD)
          GOTO      RZXV9999
.
RZXV7410  RESET     ZXV07410                     * load name type code (ID)
          GOTO      RZXV9999
.
RZXV7411  RESET     ZXV07411                     * load ident. check digit (ST)
          GOTO      RZXV9999
.
RZXV7412  RESET     ZXV07412                     * load chk dig scheme code (ID)
          GOTO      RZXV9999
.
RZXV7413  RESET     ZXV07413                     * load ident. type code (IS)
          GOTO      RZXV9999
.
RZXV7414  RESET     ZXV07414                     * load assigning facility (HD)
          GOTO      RZXV9999
.
RZXV7415  RESET     ZXV07415                     * load name repres. code (ID)
          GOTO      RZXV9999
.
.         ZXV.75  Admitting Doctor Contacted (ID)
.
RZXV7500  BRANCH    COMPCNT,RZXV7501
          GOTO      RZXV9999
.
RZXV7501  RESET     ZXV07501
          GOTO      RZXV9999
.
.         ZXV.76  Escort Source (CE)
.
RZXV7600  BRANCH    COMPCNT,RZXV7601:            * identifier (ST)
                            RZXV7602:            * text (ST)
                            RZXV7603:            * name of coding system (ST)
                            RZXV7604:            * alternate identifier (ST)
                            RZXV7605:            * alternate text (ST)
                            RZXV7606             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV7601  RESET     ZXV07601                     * identifier (ST)
          MOVE      ZXV07601,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV07601
          GOTO      RZXV9999
.
RZXV7602  RESET     ZXV07602                     * text (ST)
          GOTO      RZXV9999
.
RZXV7603  RESET     ZXV07603                     * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV7604  RESET     ZXV07604                     * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV7605  RESET     ZXV07605                     * alternate text (ST)
          GOTO      RZXV9999
.
RZXV7606  RESET     ZXV07606                     * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.77  Relative Contacted (CE)
.
RZXV7700  BRANCH    COMPCNT,RZXV7701:            * identifier (ST)
                            RZXV7702:            * text (ST)
                            RZXV7703:            * name of coding system (ST)
                            RZXV7704:            * alternate identifier (ST)
                            RZXV7705:            * alternate text (ST)
                            RZXV7706             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV7701  RESET     ZXV07701                     * identifier (ST)
          MOVE      ZXV07701,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV07701
          GOTO      RZXV9999
.
RZXV7702  RESET     ZXV07702                     * text (ST)
          GOTO      RZXV9999
.
RZXV7703  RESET     ZXV07703                     * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV7704  RESET     ZXV07704                     * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV7705  RESET     ZXV07705                     * alternate text (ST)
          GOTO      RZXV9999
.
RZXV7706  RESET     ZXV07706                     * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.78  Relative Contacted Time (TM)
.
RZXV7800  BRANCH    COMPCNT,RZXV7801
.
RZXV7801  RESET     ZXV07801
          GOTO      RZXV9999
.
.         ZXV.79  Risk Assessment (ID)
.
RZXV7900  BRANCH    COMPCNT,RZXV7901
          GOTO      RZXV9999
.
RZXV7901  RESET     ZXV07901
          GOTO      RZXV9999
.
.         ZXV.80  Specialist / other hospital contacted Name (ST)
.
RZXV8000  BRANCH    COMPCNT,RZXV8001
.
RZXV8001  RESET     ZXV08001
          GOTO      RZXV9999
.
.         ZXV.81  Specialist / other hospital contacted via (CE)
.
RZXV8100  BRANCH    COMPCNT,RZXV8101:            * identifier (ST)
                            RZXV8102:            * text (ST)
                            RZXV8103:            * name of coding system (ST)
                            RZXV8104:            * alternate identifier (ST)
                            RZXV8105:            * alternate text (ST)
                            RZXV8106             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV8101  RESET     ZXV08101                     * identifier (ST)
          MOVE      ZXV08101,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV08101
          GOTO      RZXV9999
.
RZXV8102  RESET     ZXV08102                     * text (ST)
          GOTO      RZXV9999
.
RZXV8103  RESET     ZXV08103                     * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV8104  RESET     ZXV08104                     * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV8105  RESET     ZXV08105                     * alternate text (ST)
          GOTO      RZXV9999
.
RZXV8106  RESET     ZXV08106                     * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.82  ED Ready to Discharge Date/Time (TS)
.
RZXV8200  BRANCH    COMPCNT,RZXV8201
.
RZXV8201  RESET     ZXV08201
          GOTO      RZXV9999
.
.         ZXV.83  Referred to On Departure (CE)
.
RZXV8300  BRANCH    COMPCNT,RZXV8301:            * identifier (ST)
                            RZXV8302:            * text (ST)
                            RZXV8303:            * name of coding system (ST)
                            RZXV8304:            * alternate identifier (ST)
                            RZXV8305:            * alternate text (ST)
                            RZXV8306             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV8301  RESET     ZXV08301                     * identifier (ST)
          MOVE      ZXV08301,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV08301
          GOTO      RZXV9999
.
RZXV8302  RESET     ZXV08302                     * text (ST)
          GOTO      RZXV9999
.
RZXV8303  RESET     ZXV08303                     * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV8304  RESET     ZXV08304                     * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV8305  RESET     ZXV08305                     * alternate text (ST)
          GOTO      RZXV9999
.
RZXV8306  RESET     ZXV08306                     * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.84  Reason for Transfer (CE)
.
RZXV8400  BRANCH    COMPCNT,RZXV8401:            * identifier (ST)
                            RZXV8402:            * text (ST)
                            RZXV8403:            * name of coding system (ST)
                            RZXV8404:            * alternate identifier (ST)
                            RZXV8405:            * alternate text (ST)
                            RZXV8406             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV8401  RESET     ZXV08401                     * identifier (ST)
          MOVE      ZXV08401,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV08401
          GOTO      RZXV9999
.
RZXV8402  RESET     ZXV08402                     * text (ST)
          GOTO      RZXV9999
.
RZXV8403  RESET     ZXV08403                     * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV8404  RESET     ZXV08404                     * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV8405  RESET     ZXV08405                     * alternate text (ST)
          GOTO      RZXV9999
.
RZXV8406  RESET     ZXV08406                     * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.85  Transport Mode (CE)
.
RZXV8500  BRANCH    COMPCNT,RZXV8501:            * identifier (ST)
                            RZXV8502:            * text (ST)
                            RZXV8503:            * name of coding system (ST)
                            RZXV8504:            * alternate identifier (ST)
                            RZXV8505:            * alternate text (ST)
                            RZXV8506             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV8501  RESET     ZXV08501                     * identifier (ST)
          MOVE      ZXV08501,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV08501
          GOTO      RZXV9999
.
RZXV8502  RESET     ZXV08502                     * text (ST)
          GOTO      RZXV9999
.
RZXV8503  RESET     ZXV08503                     * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV8504  RESET     ZXV08504                     * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV8505  RESET     ZXV08505                     * alternate text (ST)
          GOTO      RZXV9999
.
RZXV8506  RESET     ZXV08506                     * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.86  Ambulance Booking Time (TM)
.
RZXV8600  BRANCH    COMPCNT,RZXV8601
.
RZXV8601  RESET     ZXV08601
          GOTO      RZXV9999
.
.         ZXV.87  ED Extended Visit Reason (CE)
.
RZXV8700  BRANCH    COMPCNT,RZXV8701:            * identifier (ST)
                            RZXV8702:            * text (ST)
                            RZXV8703:            * name of coding system (ST)
                            RZXV8704:            * alternate identifier (ST)
                            RZXV8705:            * alternate text (ST)
                            RZXV8706             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV8701  RESET     ZXV08701                     * identifier (ST)
          MOVE      ZXV08701,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV08701
          GOTO      RZXV9999
.
RZXV8702  RESET     ZXV08702                     * text (ST)
          GOTO      RZXV9999
.
RZXV8703  RESET     ZXV08703                     * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV8704  RESET     ZXV08704                     * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV8705  RESET     ZXV08705                     * alternate text (ST)
          GOTO      RZXV9999
.
RZXV8706  RESET     ZXV08706                     * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.88  Anaesthetic Type for Billing (CE)
.
RZXV8800  BRANCH    COMPCNT,RZXV8801:            * identifier (ST)
                            RZXV8802:            * text (ST)
                            RZXV8803:            * name of coding system (ST)
                            RZXV8804:            * alternate identifier (ST)
                            RZXV8805:            * alternate text (ST)
                            RZXV8806             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV8801  RESET     ZXV08801                     * identifier (ST)
          MOVE      ZXV08801,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV08801
          GOTO      RZXV9999
.
RZXV8802  RESET     ZXV08802                     * text (ST)
          GOTO      RZXV9999
.
RZXV8803  RESET     ZXV08803                     * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV8804  RESET     ZXV08804                     * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV8805  RESET     ZXV08805                     * alternate text (ST)
          GOTO      RZXV9999
.
RZXV8806  RESET     ZXV08806                     * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.89  MyHR Consent value (ID)
.
RZXV8900  BRANCH    COMPCNT,RZXV8901
          GOTO      RZXV9999
.
RZXV8901  RESET     ZXV08901
          GOTO      RZXV9999
.
.         ZXV.90  Telehealth Status (CE)
.
RZXV9000  BRANCH    COMPCNT,RZXV9001:            * identifier (ST)
                            RZXV9002:            * text (ST)
                            RZXV9003:            * name of coding system (ST)
                            RZXV9004:            * alternate identifier (ST)
                            RZXV9005:            * alternate text (ST)
                            RZXV9006             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV9001  RESET     ZXV09001                     * identifier (ST)
          MOVE      ZXV09001,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV09001
          GOTO      RZXV9999
.
RZXV9002  RESET     ZXV09002                     * text (ST)
          GOTO      RZXV9999
.
RZXV9003  RESET     ZXV09003                     * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV9004  RESET     ZXV09004                     * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV9005  RESET     ZXV09005                     * alternate text (ST)
          GOTO      RZXV9999
.
RZXV9006  RESET     ZXV09006                     * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.91  Telehealth Receiving Site Name (ST)
.
RZXV9100  BRANCH    COMPCNT,RZXV9101
.
RZXV9101  RESET     ZXV09101
          MOVE      ZXV09101,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV09101
          GOTO      RZXV9999
.
.         ZXV.92  Telehealth Receiving Site Code (ST)
.
RZXV9200  BRANCH    COMPCNT,RZXV9201
.
RZXV9201  RESET     ZXV09201
          MOVE      ZXV09201,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV09201
          GOTO      RZXV9999
.
.         ZXV.93  Telehealth Receiving Address (ST)
.
RZXV9300  BRANCH    COMPCNT,RZXV9301
.
RZXV9301  RESET     ZXV09301
          MOVE      ZXV09301,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV09301
          GOTO      RZXV9999
.
.         ZXV.94  Telehealth Waiting Room URL (ST)
.
RZXV9400  BRANCH    COMPCNT,RZXV9401
.
RZXV9401  RESET     ZXV09401
          MOVE      ZXV09401,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV09401
          GOTO      RZXV9999
.
.         ZXV.95  Telehealth Receiving E164 (ST)
.
RZXV9500  BRANCH    COMPCNT,RZXV9501
.
RZXV9501  RESET     ZXV09501
          MOVE      ZXV09501,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV09501
          GOTO      RZXV9999
.
.         ZXV.96  Telehealth Notes (ST)
.
RZXV9600  BRANCH    COMPCNT,RZXV9601
.
RZXV9601  RESET     ZXV09601
          GOTO      RZXV9999
.
.         ZXV.97  Appointment Confirmed (ST)
.
RZXV9700  BRANCH    COMPCNT,RZXV9701
.
RZXV9701  RESET     ZXV09701
          MOVE      ZXV09701,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV09701
          GOTO      RZXV9999
.
.         ZXV.98  Referral In Reason (CE)
.
RZXV9800  BRANCH    COMPCNT,RZXV9801:            * identifier (ST)
                            RZXV9802:            * text (ST)
                            RZXV9803:            * name of coding system (ST)
                            RZXV9804:            * alternate identifier (ST)
                            RZXV9805:            * alternate text (ST)
                            RZXV9806             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV9801  RESET     ZXV09801                     * identifier (ST)
          MOVE      ZXV09801,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV09801
          GOTO      RZXV9999
.
RZXV9802  RESET     ZXV09802                     * text (ST)
          GOTO      RZXV9999
.
RZXV9803  RESET     ZXV09803                     * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV9804  RESET     ZXV09804                     * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV9805  RESET     ZXV09805                     * alternate text (ST)
          GOTO      RZXV9999
.
RZXV9806  RESET     ZXV09806                     * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.99  Episode Health Condition (CE) (maximum of 4 repeats - 5 total)
.
RZXV9900  COMPARE   REPTNCNT,FIVE                * maximum repeats reached ?
          GOTO      RZXV9999 IF LESS             * yes
.
          BRANCH    COMPCNT,RZXV9901:            * identifier (ST)
                            RZXV9902:            * text (ST)
                            RZXV9903:            * name of coding system (ST)
                            RZXV9904:            * alternate identifier (ST)
                            RZXV9905:            * alternate text (ST)
                            RZXV9906             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV9901  RESET     ZXV09901[REPTNCNT]           * identifier (ST)
          MOVE      ZXV09901[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV09901[REPTNCNT]
          GOTO      RZXV9999
.
RZXV9902  RESET     ZXV09902[REPTNCNT]           * text (ST)
          GOTO      RZXV9999
.
RZXV9903  RESET     ZXV09903[REPTNCNT]           * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV9904  RESET     ZXV09904[REPTNCNT]           * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV9905  RESET     ZXV09905[REPTNCNT]           * alternate text (ST)
          GOTO      RZXV9999
.
RZXV9906  RESET     ZXV09906[REPTNCNT]           * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.100  Usual Accommodation (CE)
.
RZXV1000  BRANCH    COMPCNT,RZXV1001:            * identifier (ST)
                            RZXV1002:            * text (ST)
                            RZXV1003:            * name of coding system (ST)
                            RZXV1004:            * alternate identifier (ST)
                            RZXV1005:            * alternate text (ST)
                            RZXV1006             * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
RZXV1001  RESET     ZXV10001                     * identifier (ST)
          MOVE      ZXV10001,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV10001
          GOTO      RZXV9999
.
RZXV1002  RESET     ZXV10002                     * text (ST)
          GOTO      RZXV9999
.
RZXV1003  RESET     ZXV10003                     * name of coding system (ST)
          GOTO      RZXV9999
.
RZXV1004  RESET     ZXV10004                     * alternate identifier (ST)
          GOTO      RZXV9999
.
RZXV1005  RESET     ZXV10005                     * alternate text (ST)
          GOTO      RZXV9999
.
RZXV1006  RESET     ZXV10006                     * name of alt. cod. system (ST)
          GOTO      RZXV9999
.
.         ZXV.101  Triage Date (DT)
.
RZXV1010  BRANCH    COMPCNT,RZXV1011             * date (DT)
.
RZXV1011  RESET     ZXV10101
          GOTO      RZXV9999
.
.         ZXV.102  Referral-In Receipt Acknowledgement Date (DT)
.
RZXV1020  BRANCH    COMPCNT,RZXV1021             * date (DT)
.
RZXV1021  RESET     ZXV10201
          GOTO      RZXV9999
.
.         ZXV.103  Emergency Arrival Date/Time (TS)
.
RZXV1030  BRANCH    COMPCNT,RZXV1031
.
RZXV1031  RESET     ZXV10301
          GOTO      RZXV9999
.
RZXV9999  RETURN
+
.*****************************************************************************
.*                                 RPRD0000        Called by: PROC0000       *
.*                          Reset the PRD fields                             *
.*****************************************************************************
.
RPRD0000  BRANCH    FIELDNO,RPRD0100:            * Provider Role
                            RPRD9999:            * Provider Name
                            RPRD9999:            * Provider Address
                            RPRD9999:            * Provider Location
                            RPRD9999:            * Prov. Communication Info.
                            RPRD9999:            * Preferred Method of Contact
                            RPRD0700:            * Provider Identifiers
                            RPRD9999:            * Effective Start Date of Role
                            RPRD9999             * Effective End Date of Role
.
.         Invalid PRD field received, so ignore it
.
          GOTO      RPRD9999
.
.         PRD.1  Provider Role (CE)
.
RPRD0100  BRANCH    COMPCNT,RPRD0101:            * identifier (ST)
                            RPRD0102:            * text (ST)
                            RPRD0103:            * name of coding system (ST)
                            RPRD0104:            * alternate identifier (ST)
                            RPRD0105:            * alternate text (ST)
                            RPRD0106             * name of alt. cod. system (ST)
          GOTO      RPRD9999
.
RPRD0101  RESET     PRD00101                     * identifier (ST)
          MOVE      PRD00101,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PRD00101
          GOTO      RPRD9999
.
RPRD0102  RESET     PRD00102                     * text (ST)
          GOTO      RPRD9999
.
RPRD0103  RESET     PRD00103                     * name of coding system (ST)
          GOTO      RPRD9999
.
RPRD0104  RESET     PRD00104                     * alternate identifier (ST)
          GOTO      RPRD9999
.
RPRD0105  RESET     PRD00105                     * alternate text (ST)
          GOTO      RPRD9999
.
RPRD0106  RESET     PRD00106                     * name of alt. cod. system (ST)
          GOTO      RPRD9999
.
.         PRD.7  Provider Identifiers (CM)
.
RPRD0700  BRANCH    COMPCNT,RPRD0701:            * id number (ST)
                            RPRD0702:            * type of id number (IS)
                            RPRD0703             * other qualifying info (ST)
          GOTO      RPRD9999
.
RPRD0701  RESET     PRD00701                     * id number (ST)
          GOTO      RPRD9999
.
RPRD0702  RESET     PRD00702                     * type of id number (IS)
          GOTO      RPRD9999
.
RPRD0703  RESET     PRD00703                     * other qualifying info (ST)
          GOTO      RPRD9999
.
RPRD9999  RETURN
+
.*****************************************************************************
.*                                 RPR10000        Called by: PROC0000       *
.*                          Load the PR1 fields                              *
.*****************************************************************************
.
RPR10000  BRANCH    FIELDNO,RPR10100:            * Set ID
                            RPR10200:            * Procedure Coding Method
                            RPR10300:            * Procedure Code
                            RPR10400:            * Procedure Description
                            RPR10500:            * Procedure Date/Time
                            RPR10600:            * Procedure Functional Type
                            RPR10700:            * Procedure Minutes
                            RPR10800:            * Anaesthesiologist
                            RPR10900:            * Anaesthesia Code
                            RPR11000:            * Anaestheisa Minutes
                            RPR11100:            * Surgeon
                            RPR11200:            * Procedure Practioner
                            RPR11300:            * Consent Code
                            RPR11400:            * Procedure Priority
                            RPR11500:            * Associated Diagnosis Code
                            RPR11600             * Procedure Code Modifier
.
.         Invalid PR1 field received, so ignore it
.
          GOTO      RPR19999
.
.         PR1.1  Set ID (SI)
.
RPR10100  BRANCH    COMPCNT,RPR10101
.
RPR10101  RESET     PR100101
          GOTO      RPR19999
.
.         PR1.2  Procedure Coding Method (IS)
.
RPR10200  BRANCH    COMPCNT,RPR10201
.
RPR10201  RESET     PR100201
          GOTO      RPR19999
.
.         PR1.3  Procedure Code (CE)
.
RPR10300  BRANCH    COMPCNT,RPR10301:            * identifier (ST)
                            RPR10302:            * text (ST)
                            RPR10303:            * name of coding system (ST)
                            RPR10304:            * alternate identifier (ST)
                            RPR10305:            * alternate text (ST)
                            RPR10306             * name of alt. cod. system (ST)
          GOTO      RPR19999
.
RPR10301  RESET     PR100301                     * identifier (ST)
          MOVE      PR100301,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PR100301
          GOTO      RPR19999
.
RPR10302  RESET     PR100302                     * text (ST)
          GOTO      RPR19999
.
RPR10303  RESET     PR100303                     * name of coding system (ST)
          GOTO      RPR19999
.
RPR10304  RESET     PR100304                     * alternate identifier (ST)
          GOTO      RPR19999
.
RPR10305  RESET     PR100305                     * alternate text (ST)
          GOTO      RPR19999
.
RPR10306  RESET     PR100306                     * name of alt. cod. system (ST)
          GOTO      RPR19999
.
.         PR1.4  Procedure Description (IS)
.
RPR10400  BRANCH    COMPCNT,RPR10401
.
RPR10401  RESET     PR100401
          GOTO      RPR19999
.
.         PR1.5  Procedure Date/Time (TS)
.
RPR10500  BRANCH    COMPCNT,RPR10501
.
RPR10501  RESET     PR100501
          GOTO      RPR19999
.
.         PR1.6  Procedure Functional Type (IS)
.
RPR10600  BRANCH    COMPCNT,RPR10601
.
RPR10601  RESET     PR100601
          MOVE      PR100601,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PR100601
          GOTO      RPR19999
.
.         PR1.7  Procedure Minutes (NM)
.
RPR10700  BRANCH    COMPCNT,RPR10701
.
RPR10701  RESET     PR100701
          GOTO      RPR19999
.
.         PR1.8 Anaesthesiologist (XCN)
.
RPR10800  BRANCH    COMPCNT,RPR10801:            * id number (ST)
                            RPR10802:            * family name (ST)
                            RPR10803:            * given name (ST)
                            RPR10804:            * middle name (ST)
                            RPR10805:            * suffix (ST)
                            RPR10806:            * prefix (ST)
                            RPR10807:            * degree (IS)
                            RPR10808:            * source table (IS)
                            RPR10809:            * assigning authority (HD)
                            RPR10810:            * name type code (ID)
                            RPR10811:            * identifier check digit (ST)
                            RPR10812:            * check digit scheme code (ID)
                            RPR10813:            * identifier type code (IS)
                            RPR10814:            * assigning facility (HD)
                            RPR10815             * name representation code (ID)
          GOTO      RPR19999
.
RPR10801  RESET     PR100801                     * load id number (ST)
          GOTO      RPR19999
.
RPR10802  RESET     PR100802                     * load family name (ST)
          GOTO      RPR19999
.
RPR10803  RESET     PR100803                     * load given name (ST)
          GOTO      RPR19999
.
RPR10804  RESET     PR100804                     * load middle name (ST)
          GOTO      RPR19999
.
RPR10805  RESET     PR100805                     * load suffix (ST)
          GOTO      RPR19999
.
RPR10806  RESET     PR100806                     * load prefix (ST)
          GOTO      RPR19999
.
RPR10807  RESET     PR100807                     * load degree (IS)
          GOTO      RPR19999
.
RPR10808  RESET     PR100808                     * load source table (IS)
          GOTO      RPR19999
.
RPR10809  RESET     PR100809                     * load assigning authority (HD)
          GOTO      RPR19999
.
RPR10810  RESET     PR100810                     * load name type code (ID)
          GOTO      RPR19999
.
RPR10811  RESET     PR100811                     * load ident. check digit (ST)
          GOTO      RPR19999
.
RPR10812  RESET     PR100812                     * load chk dig scheme code (ID)
          GOTO      RPR19999
.
RPR10813  RESET     PR100813                     * load ident. type code (IS)
          GOTO      RPR19999
.
RPR10814  RESET     PR100814                     * load assigning facility (HD)
          GOTO      RPR19999
.
RPR10815  RESET     PR100815                     * load name repres. code (ID)
          GOTO      RPR19999
.
.         PR1.9  Anaesthesia Code (IS)
.
RPR10900  BRANCH    COMPCNT,RPR10901
.
RPR10901  RESET     PR100901
          GOTO      RPR19999
.
.         PR1.10  Anaestheisa Minutes (NM)
.
RPR11000  BRANCH    COMPCNT,RPR11001
.
RPR11001  RESET     PR101001
          GOTO      RPR19999
.
.         PR1.11 Anaesthesiologist (XCN)
.
RPR11100  BRANCH    COMPCNT,RPR11101:            * id number (ST)
                            RPR11102:            * family name (ST)
                            RPR11103:            * given name (ST)
                            RPR11104:            * middle name (ST)
                            RPR11105:            * suffix (ST)
                            RPR11106:            * prefix (ST)
                            RPR11107:            * degree (IS)
                            RPR11108:            * source table (IS)
                            RPR11109:            * assigning authority (HD)
                            RPR11110:            * name type code (ID)
                            RPR11111:            * identifier check digit (ST)
                            RPR11112:            * check digit scheme code (ID)
                            RPR11113:            * identifier type code (IS)
                            RPR11114:            * assigning facility (HD)
                            RPR11115             * name representation code (ID)
          GOTO      RPR19999
.
RPR11101  RESET     PR101101                     * load id number (ST)
          GOTO      RPR19999
.
RPR11102  RESET     PR101102                     * load family name (ST)
          GOTO      RPR19999
.
RPR11103  RESET     PR101103                     * load given name (ST)
          GOTO      RPR19999
.
RPR11104  RESET     PR101104                     * load middle name (ST)
          GOTO      RPR19999
.
RPR11105  RESET     PR101105                     * load suffix (ST)
          GOTO      RPR19999
.
RPR11106  RESET     PR101106                     * load prefix (ST)
          GOTO      RPR19999
.
RPR11107  RESET     PR101107                     * load degree (IS)
          GOTO      RPR19999
.
RPR11108  RESET     PR101108                     * load source table (IS)
          GOTO      RPR19999
.
RPR11109  RESET     PR101109                     * load assigning authority (HD)
          GOTO      RPR19999
.
RPR11110  RESET     PR101110                     * load name type code (ID)
          GOTO      RPR19999
.
RPR11111  RESET     PR101111                     * load ident. check digit (ST)
          GOTO      RPR19999
.
RPR11112  RESET     PR101112                     * load chk dig scheme code (ID)
          GOTO      RPR19999
.
RPR11113  RESET     PR101113                     * load ident. type code (IS)
          GOTO      RPR19999
.
RPR11114  RESET     PR101114                     * load assigning facility (HD)
          GOTO      RPR19999
.
RPR11115  RESET     PR101115                     * load name repres. code (ID)
          GOTO      RPR19999
.
.         PR1.12 Anaesthesiologist (XCN)
.
RPR11200  BRANCH    COMPCNT,RPR11201:            * id number (ST)
                            RPR11202:            * family name (ST)
                            RPR11203:            * given name (ST)
                            RPR11204:            * middle name (ST)
                            RPR11205:            * suffix (ST)
                            RPR11206:            * prefix (ST)
                            RPR11207:            * degree (IS)
                            RPR11208:            * source table (IS)
                            RPR11209:            * assigning authority (HD)
                            RPR11210:            * name type code (ID)
                            RPR11211:            * identifier check digit (ST)
                            RPR11212:            * check digit scheme code (ID)
                            RPR11213:            * identifier type code (IS)
                            RPR11214:            * assigning facility (HD)
                            RPR11215             * name representation code (ID)
          GOTO      RPR19999
.
RPR11201  RESET     PR101201                     * load id number (ST)
          GOTO      RPR19999
.
RPR11202  RESET     PR101202                     * load family name (ST)
          GOTO      RPR19999
.
RPR11203  RESET     PR101203                     * load given name (ST)
          GOTO      RPR19999
.
RPR11204  RESET     PR101204                     * load middle name (ST)
          GOTO      RPR19999
.
RPR11205  RESET     PR101205                     * load suffix (ST)
          GOTO      RPR19999
.
RPR11206  RESET     PR101206                     * load prefix (ST)
          GOTO      RPR19999
.
RPR11207  RESET     PR101207                     * load degree (IS)
          GOTO      RPR19999
.
RPR11208  RESET     PR101208                     * load source table (IS)
          GOTO      RPR19999
.
RPR11209  RESET     PR101209                     * load assigning authority (HD)
          GOTO      RPR19999
.
RPR11210  RESET     PR101210                     * load name type code (ID)
          GOTO      RPR19999
.
RPR11211  RESET     PR101211                     * load ident. check digit (ST)
          GOTO      RPR19999
.
RPR11212  RESET     PR101212                     * load chk dig scheme code (ID)
          GOTO      RPR19999
.
RPR11213  RESET     PR101213                     * load ident. type code (IS)
          GOTO      RPR19999
.
RPR11214  RESET     PR101214                     * load assigning facility (HD)
          GOTO      RPR19999
.
RPR11215  RESET     PR101215                     * load name repres. code (ID)
          GOTO      RPR19999
.
.         PR1.13  Consent Code (CE)
.
RPR11300  BRANCH    COMPCNT,RPR11301:            * identifier (ST)
                            RPR11302:            * text (ST)
                            RPR11303:            * name of coding system (ST)
                            RPR11304:            * alternate identifier (ST)
                            RPR11305:            * alternate text (ST)
                            RPR11306             * name of alt. cod. system (ST)
          GOTO      RPR19999
.
RPR11301  RESET     PR101301                     * identifier (ST)
          GOTO      RPR19999
.
RPR11302  RESET     PR101302                     * text (ST)
          GOTO      RPR19999
.
RPR11303  RESET     PR101303                     * name of coding system (ST)
          GOTO      RPR19999
.
RPR11304  RESET     PR101304                     * alternate identifier (ST)
          GOTO      RPR19999
.
RPR11305  RESET     PR101305                     * alternate text (ST)
          GOTO      RPR19999
.
RPR11306  RESET     PR101306                     * name of alt. cod. system (ST)
          GOTO      RPR19999
.
.         PR1.14  Procedure Priority (NM)
.
RPR11400  BRANCH    COMPCNT,RPR11401
.
RPR11401  RESET     PR101401
          GOTO      RPR19999
.
.         PR1.15  Associated Diagnosis Code (CE)
.
RPR11500  BRANCH    COMPCNT,RPR11501:            * identifier (ST)
                            RPR11502:            * text (ST)
                            RPR11503:            * name of coding system (ST)
                            RPR11504:            * alternate identifier (ST)
                            RPR11505:            * alternate text (ST)
                            RPR11506             * name of alt. cod. system (ST)
          GOTO      RPR19999
.
RPR11501  RESET     PR101501                     * identifier (ST)
          GOTO      RPR19999
.
RPR11502  RESET     PR101502                     * text (ST)
          GOTO      RPR19999
.
RPR11503  RESET     PR101503                     * name of coding system (ST)
          GOTO      RPR19999
.
RPR11504  RESET     PR101504                     * alternate identifier (ST)
          GOTO      RPR19999
.
RPR11505  RESET     PR101505                     * alternate text (ST)
          GOTO      RPR19999
.
RPR11506  RESET     PR101506                     * name of alt. cod. system (ST)
          GOTO      RPR19999
.
.         PR1.16  Procedure Code Modifier (CE)
.
RPR11600  BRANCH    COMPCNT,RPR11601:            * identifier (ST)
                            RPR11602:            * text (ST)
                            RPR11603:            * name of coding system (ST)
                            RPR11604:            * alternate identifier (ST)
                            RPR11605:            * alternate text (ST)
                            RPR11606             * name of alt. cod. system (ST)
          GOTO      RPR19999
.
RPR11601  RESET     PR101601                     * identifier (ST)
          GOTO      RPR19999
.
RPR11602  RESET     PR101602                     * text (ST)
          GOTO      RPR19999
.
RPR11603  RESET     PR101603                     * name of coding system (ST)
          GOTO      RPR19999
.
RPR11604  RESET     PR101604                     * alternate identifier (ST)
          GOTO      RPR19999
.
RPR11605  RESET     PR101605                     * alternate text (ST)
          GOTO      RPR19999
.
RPR11606  RESET     PR101606                     * name of alt. cod. system (ST)
          GOTO      RPR19999
.
RPR19999  RETURN
+
.*****************************************************************************
.*                                 RROL0000        Called by: PROC0000       *
.*                          Reset the ROL fields                             *
.*****************************************************************************
.
RROL0000  BRANCH    FIELDNO,RROL0100:            * Role Instance ID
                            RROL0200:            * Action Code
                            RROL0300:            * Role-ROL
                            RROL0400:            * Role Person
                            RROL0500:            * Role Begin Date/Time
                            RROL0600:            * Role End Date/Time
                            RROL0700:            * Role Duration
                            RROL0800:            * Role Action Reason
                            RROL0900:            * Provider Type
                            RROL1000             * Organisation Unit Type
.
.         Invalid ROL field received, so ignore it
.
          GOTO      RROL9999
.
.         ROL.1  Role Instance ID (EI)
.
RROL0100  BRANCH    COMPCNT,RROL0101:            * entity identifier (ST)
                            RROL0102:            * namespace id (IS)
                            RROL0103:            * universal id (ST)
                            RROL0104             * universal id type (ID)
          GOTO      RROL9999
.
RROL0101  RESET     ROL00101                     * load entity identifier (ST)
          GOTO      RROL9999
.
RROL0102  RESET     ROL00102                     * load namespace id (IS)
          GOTO      RROL9999
.
RROL0103  RESET     ROL00103                     * load universal id (ST)
          GOTO      RROL9999
.
RROL0104  RESET     ROL00104                     * load universal id type (ID)
          GOTO      RROL9999
.
.         ROL.2  Action Code (ID)
.
RROL0200  BRANCH    COMPCNT,RROL0201
.
RROL0201  RESET     ROL00201
          GOTO      RROL9999
.
.         ROL.3 Role-ROL (CE)
.
RROL0300  BRANCH    COMPCNT,RROL0301:            * identifier (ST)
                            RROL0302:            * text (ST)
                            RROL0303:            * name of coding system (ST)
                            RROL0304:            * alternate identifier (ST)
                            RROL0305:            * alternate text (ST)
                            RROL0306             * name of alt. cod. system (ST)
          GOTO      RROL9999
.
RROL0301  RESET     ROL00301                     * identifier (ST)
          GOTO      RROL9999
.
RROL0302  RESET     ROL00302                     * text (ST)
          GOTO      RROL9999
.
RROL0303  RESET     ROL00303                     * name of coding system (ST)
          GOTO      RROL9999
.
RROL0304  RESET     ROL00304                     * alternate identifier (ST)
          GOTO      RROL9999
.
RROL0305  RESET     ROL00305                     * alternate text (ST)
          GOTO      RROL9999
.
RROL0306  RESET     ROL00306                     * name of alt. cod. system (ST)
          GOTO      RROL9999
.
.         ROL.4 Role Person (XCN)
.
RROL0400  BRANCH    COMPCNT,RROL0401:            * id number (ST)
                            RROL0402:            * family name (ST)
                            RROL0403:            * given name (ST)
                            RROL0404:            * middle name (ST)
                            RROL0405:            * suffix (ST)
                            RROL0406:            * prefix (ST)
                            RROL0407:            * degree (IS)
                            RROL0408:            * source table (IS)
                            RROL0409:            * assigning authority (HD)
                            RROL0410:            * name type code (ID)
                            RROL0411:            * identifier check digit (ST)
                            RROL0412:            * check digit scheme code (ID)
                            RROL0413:            * identifier type code (IS)
                            RROL0414:            * assigning facility (HD)
                            RROL0415             * name representation code (ID)
          GOTO      RROL9999
.
RROL0401  RESET     ROL00401                     * load id number (ST)
          GOTO      RROL9999
.
RROL0402  RESET     ROL00402                     * load family name (ST)
          GOTO      RROL9999
.
RROL0403  RESET     ROL00403                     * load given name (ST)
          GOTO      RROL9999
.
RROL0404  RESET     ROL00404                     * load middle name (ST)
          GOTO      RROL9999
.
RROL0405  RESET     ROL00405                     * load suffix (ST)
          GOTO      RROL9999
.
RROL0406  RESET     ROL00406                     * load prefix (ST)
          GOTO      RROL9999
.
RROL0407  RESET     ROL00407                     * load degree (IS)
          GOTO      RROL9999
.
RROL0408  RESET     ROL00408                     * load source table (IS)
          GOTO      RROL9999
.
RROL0409  RESET     ROL00409                     * load assigning authority (HD)
          GOTO      RROL9999
.
RROL0410  RESET     ROL00410                     * load name type code (ID)
          GOTO      RROL9999
.
RROL0411  RESET     ROL00411                     * load ident. check digit (ST)
          GOTO      RROL9999
.
RROL0412  RESET     ROL00412                     * load chk dig scheme code (ID)
          GOTO      RROL9999
.
RROL0413  RESET     ROL00413                     * load ident. type code (IS)
          GOTO      RROL9999
.
RROL0414  RESET     ROL00414                     * load assigning facility (HD)
          GOTO      RROL9999
.
RROL0415  RESET     ROL00415                     * load name repres. code (ID)
          GOTO      RROL9999
.
.         ROL.5  Role Begin Date/Time (TS)
.
RROL0500  BRANCH    COMPCNT,RROL0501
.
RROL0501  RESET     ROL00501
          GOTO      RROL9999
.
.         ROL.6  Role End Date/Time (TS)
.
RROL0600  BRANCH    COMPCNT,RROL0601
.
RROL0601  RESET     ROL00601
          GOTO      RROL9999
.
.         ROL.7 Role Duration (CE)
.
RROL0700  BRANCH    COMPCNT,RROL0701:            * identifier (ST)
                            RROL0702:            * text (ST)
                            RROL0703:            * name of coding system (ST)
                            RROL0704:            * alternate identifier (ST)
                            RROL0705:            * alternate text (ST)
                            RROL0706             * name of alt. cod. system (ST)
          GOTO      RROL9999
.
RROL0701  RESET     ROL00701                     * identifier (ST)
          GOTO      RROL9999
.
RROL0702  RESET     ROL00702                     * text (ST)
          GOTO      RROL9999
.
RROL0703  RESET     ROL00703                     * name of coding system (ST)
          GOTO      RROL9999
.
RROL0704  RESET     ROL00704                     * alternate identifier (ST)
          GOTO      RROL9999
.
RROL0705  RESET     ROL00705                     * alternate text (ST)
          GOTO      RROL9999
.
RROL0706  RESET     ROL00706                     * name of alt. cod. system (ST)
          GOTO      RROL9999
.
.         ROL.8 Role Action Reason (CE)
.
RROL0800  BRANCH    COMPCNT,RROL0801:            * identifier (ST)
                            RROL0802:            * text (ST)
                            RROL0803:            * name of coding system (ST)
                            RROL0804:            * alternate identifier (ST)
                            RROL0805:            * alternate text (ST)
                            RROL0806             * name of alt. cod. system (ST)
          GOTO      RROL9999
.
RROL0801  RESET     ROL00801                     * identifier (ST)
          GOTO      RROL9999
.
RROL0802  RESET     ROL00802                     * text (ST)
          GOTO      RROL9999
.
RROL0803  RESET     ROL00803                     * name of coding system (ST)
          GOTO      RROL9999
.
RROL0804  RESET     ROL00804                     * alternate identifier (ST)
          GOTO      RROL9999
.
RROL0805  RESET     ROL00805                     * alternate text (ST)
          GOTO      RROL9999
.
RROL0806  RESET     ROL00806                     * name of alt. cod. system (ST)
          GOTO      RROL9999
.
.         ROL.9 Provider Type (CE)
.
RROL0900  BRANCH    COMPCNT,RROL0901:            * identifier (ST)
                            RROL0902:            * text (ST)
                            RROL0903:            * name of coding system (ST)
                            RROL0904:            * alternate identifier (ST)
                            RROL0905:            * alternate text (ST)
                            RROL0906             * name of alt. cod. system (ST)
          GOTO      RROL9999
.
RROL0901  RESET     ROL00901                     * identifier (ST)
          GOTO      RROL9999
.
RROL0902  RESET     ROL00902                     * text (ST)
          GOTO      RROL9999
.
RROL0903  RESET     ROL00903                     * name of coding system (ST)
          GOTO      RROL9999
.
RROL0904  RESET     ROL00904                     * alternate identifier (ST)
          GOTO      RROL9999
.
RROL0905  RESET     ROL00905                     * alternate text (ST)
          GOTO      RROL9999
.
RROL0906  RESET     ROL00906                     * name of alt. cod. system (ST)
          GOTO      RROL9999
.
.         ROL.10 Organisation Unit Type (CE)
.
RROL1000  BRANCH    COMPCNT,RROL1001:            * identifier (ST)
                            RROL1002:            * text (ST)
                            RROL1003:            * name of coding system (ST)
                            RROL1004:            * alternate identifier (ST)
                            RROL1005:            * alternate text (ST)
                            RROL1006             * name of alt. cod. system (ST)
          GOTO      RROL9999
.
RROL1001  RESET     ROL01001                     * identifier (ST)
          GOTO      RROL9999
.
RROL1002  RESET     ROL01002                     * text (ST)
          GOTO      RROL9999
.
RROL1003  RESET     ROL01003                     * name of coding system (ST)
          GOTO      RROL9999
.
RROL1004  RESET     ROL01004                     * alternate identifier (ST)
          GOTO      RROL9999
.
RROL1005  RESET     ROL01005                     * alternate text (ST)
          GOTO      RROL9999
.
RROL1006  RESET     ROL01006                     * name of alt. cod. system (ST)
          GOTO      RROL9999
.
RROL9999  RETURN
+
.*****************************************************************************
.*                                 RRF10000        Called by: PROC0000       *
.*                          Reset the RF1 fields                             *
.*****************************************************************************
.
RRF10000  BRANCH    FIELDNO,RRF10100:            * Referral Status
                            RRF19999:            * Referral Priority
                            RRF19999:            * Referral Type
                            RRF19999:            * Referral Disposition
                            RRF19999:            * Referral Category
                            RRF10600:            * Originating Ref. Identifier
                            RRF10700:            * Effective Referral Date
                            RRF19999:            * Expiration Date
                            RRF19999:            * Process Date
                            RRF19999:            * Referral Reason
                            RRF11100             * External Referral Identifier
.
.         Invalid RF1 field received, so ignore it
.
          GOTO      RRF19999
.
.         RF1.1  Referral Status (CE)
.
RRF10100  BRANCH    COMPCNT,RRF10101:            * identifier (ST)
                            RRF10102:            * text (ST)
                            RRF10103:            * name of coding system (ST)
                            RRF10104:            * alternate identifier (ST)
                            RRF10105:            * alternate text (ST)
                            RRF10106             * name of alt. cod. system (ST)
          GOTO      RRF19999
.
RRF10101  RESET     RF100101                     * identifier (ST)
          MOVE      RF100101,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,RF100101
          GOTO      RRF19999
.
RRF10102  RESET     RF100102                     * text (ST)
          GOTO      RRF19999
.
RRF10103  RESET     RF100103                     * name of coding system (ST)
          GOTO      RRF19999
.
RRF10104  RESET     RF100104                     * alternate identifier (ST)
          GOTO      RRF19999
.
RRF10105  RESET     RF100105                     * alternate text (ST)
          GOTO      RRF19999
.
RRF10106  RESET     RF100106                     * name of alt. cod. system (ST)
          GOTO      RRF19999
.
.         RF1.6  Originating Referral Identifier (EI)
.
RRF10600  BRANCH    COMPCNT,RRF10601:            * entity identifier (ST)
                            RRF10602:            * namespace id (IS)
                            RRF10603:            * universal id (ST)
                            RRF10604             * universal id type (ID)
          GOTO      RRF19999
.
RRF10601  RESET     RF100601                     * entity identifier (ST)
          GOTO      RRF19999
.
RRF10602  RESET     RF100602                     * namespace id (IS)
          GOTO      RRF19999
.
RRF10603  RESET     RF100603                     * universal id (ST)
          GOTO      RRF19999
.
RRF10604  RESET     RF100604                     * universal id type (ID)
          GOTO      RRF19999
.
.         RF1.7  Effective Referral Date (DT)
.
RRF10700  BRANCH    COMPCNT,RRF10701
.
RRF10701  RESET     RF100701
          GOTO      RRF19999
.
.         RF1.11  External Referral Identifier (EI)
.
RRF11100  BRANCH    COMPCNT,RRF11101:            * entity identifier (ST)
                            RRF11102:            * namespace id (IS)
                            RRF11103:            * universal id (ST)
                            RRF11104             * universal id type (ID)
          GOTO      RRF19999
.
RRF11101  RESET     RF101101                     * entity identifier (ST)
          GOTO      RRF19999
.
RRF11102  RESET     RF101102                     * namespace id (IS)
          GOTO      RRF19999
.
RRF11103  RESET     RF101103                     * universal id (ST)
          GOTO      RRF19999
.
RRF11104  RESET     RF101104                     * universal id type (ID)
          GOTO      RRF19999
.
RRF19999  RETURN
+
.*****************************************************************************
.*                                 RMFI0000        Called by: PROC0000       *
.*                          Reset the MFI fields                             *
.*****************************************************************************
.
RMFI0000  BRANCH    FIELDNO,RMFI0100:            * Master File Identifier
                            RMFI0200:            * Master File App. Identifier
                            RMFI0300:            * File-Level Event Code
                            RMFI0400:            * Entered Date/Time
                            RMFI0500:            * Effective Date/Time
                            RMFI0600             * Response level Code
.
.         Invalid MFI field received, so ignore it
.
          GOTO      RMFI9999
.
.         MFI.1  Master File Identifier (CE)
.
RMFI0100  BRANCH    COMPCNT,RMFI0101:            * identifier (ST)
                            RMFI0102:            * text (ST)
                            RMFI0103:            * name of coding system (ST)
                            RMFI0104:            * alternate identifier (ST)
                            RMFI0105:            * alternate text (ST)
                            RMFI0106             * name of alt. cod. system (ST)
          GOTO      RMFI9999
.
RMFI0101  RESET     MFI00101
          GOTO      RMFI9999
.
RMFI0102  RESET     MFI00102
          GOTO      RMFI9999
.
RMFI0103  RESET     MFI00103
          GOTO      RMFI9999
.
RMFI0104  RESET     MFI00104
          GOTO      RMFI9999
.
RMFI0105  RESET     MFI00105
          GOTO      RMFI9999
.
RMFI0106  RESET     MFI00106
          GOTO      RMFI9999
.
.         MFI.2 Master File Application Identifier (HD)
.
RMFI0200  BRANCH    COMPCNT,RMFI0201:            * namespace ID
                            RMFI0202:            * universal ID
                            RMFI0203             * universal ID type
          GOTO      RMFI9999
.
RMFI0201  RESET     MFI00201
          GOTO      RMFI9999
.
RMFI0202  RESET     MFI00202
          GOTO      RMFI9999
.
RMFI0203  RESET     MFI00203
          GOTO      RMFI9999
.
.         MFI.3 File-Level Event Code (ID)
.
RMFI0300  BRANCH    COMPCNT,RMFI0301
          GOTO      RMFI9999
.
RMFI0301  RESET     MFI00301
          GOTO      RMFI9999
.
.         MFI.4  Entered Date/Time (TS)
.
RMFI0400  BRANCH    COMPCNT,RMFI0401
.
RMFI0401  RESET     MFI00401
          GOTO      RMFI9999
.
.         MFI.5  Effective Date/Time (TS)
.
RMFI0500  BRANCH    COMPCNT,RMFI0501
.
RMFI0501  RESET     MFI00501
          GOTO      RMFI9999
.
.         MFI.6 Response Level Code (ID)
.
RMFI0600  BRANCH    COMPCNT,RMFI0601
          GOTO      RMFI9999
.
RMFI0601  RESET     MFI00601
          GOTO      RMFI9999
.
RMFI9999  RETURN
+
.*****************************************************************************
.*                                 RMFE0000        Called by: PROC0000       *
.*                          Reset the MFE fields                             *
.*****************************************************************************
.
RMFE0000  BRANCH    FIELDNO,RMFE0100:            * Record-Level Event Code
                            RMFE0200:            * MFN Control ID
                            RMFE0300:            * Effective Date/Time
                            RMFE0400:            * Primary Key Value - MFE
                            RMFE0500             * Primary Key Value Type
.
.         Invalid MFE field received, so ignore it
.
          GOTO      RMFE9999
.
.         MFE.1 Record-Level Event Code (ID)
.
RMFE0100  BRANCH    COMPCNT,RMFE0101
          GOTO      RMFE9999
.
RMFE0101  RESET     MFE00101
          GOTO      RMFE9999
.
.         MFE.2 MFN Control ID (ST)
.
RMFE0200  BRANCH    COMPCNT,RMFE0201
          GOTO      RMFE9999
.
RMFE0201  RESET     MFE00201
          GOTO      RMFE9999
.
.         MFE.3  Effective Date/Time (TS)
.
RMFE0300  BRANCH    COMPCNT,RMFE0301
.
RMFE0301  RESET     MFE00301
          GOTO      RMFE9999
.
.         MFE.4  Primary Key Value - MFE (CE)
.
RMFE0400  BRANCH    COMPCNT,RMFE0401:            * identifier (ST)
                            RMFE0402:            * text (ST)
                            RMFE0403:            * name of coding system (ST)
                            RMFE0404:            * alternate identifier (ST)
                            RMFE0405:            * alternate text (ST)
                            RMFE0406             * name of alt. cod. system (ST)
          GOTO      RMFE9999
.
RMFE0401  RESET     MFE00401
          GOTO      RMFE9999
.
RMFE0402  RESET     MFE00402
          GOTO      RMFE9999
.
RMFE0403  RESET     MFE00403
          GOTO      RMFE9999
.
RMFE0404  RESET     MFE00404
          GOTO      RMFE9999
.
RMFE0405  RESET     MFE00405
          GOTO      RMFE9999
.
RMFE0406  RESET     MFE00406
          GOTO      RMFE9999
.
.         MFE.5 Primary Key Value Type (ID)
.
RMFE0500  BRANCH    COMPCNT,RMFE0501
          GOTO      RMFE9999
.
RMFE0501  RESET     MFE00501
          GOTO      RMFE9999
.
RMFE9999  RETURN
+
.*****************************************************************************
.*                                 RSTF0000        Called by: PROC0000       *
.*                          Reset the STF fields                             *
.*****************************************************************************
.
RSTF0000  BRANCH    FIELDNO,RSTF0100:            * Primary Key Value - STF
                            RSTF0200:            * Staff ID Code
                            RSTF0300:            * Staff Name
                            RSTF0400:            * Staff Type
                            RSTF0500:            * Sex
                            RSTF0600:            * Date/Time of Birth
                            RSTF0700:            * Active/Inactive Flag
                            RSTF0800:            * Department
                            RSTF0900:            * Hospital Service
                            RSTF1000:            * Phone
                            RSTF1100:            * Office/Home Address
                            RSTF1200:            * Institution Activation Date
                            RSTF1300:            * Institution Inactivation Date
                            RSTF1400:            * Backup Person ID
                            RSTF1500:            * E-Mail Address
                            RSTF1600:            * Preferred Method of Contact
                            RSTF1700:            * Marital Status
                            RSTF1800:            * Job Title
                            RSTF1900:            * Job Code/Class
                            RSTF2000:            * Employment Status
                            RSTF2100:            * Additional Insured on Auto
                            RSTF2200:            * Driver's License No - Staff
                            RSTF2300:            * Copy Auto Ins
                            RSTF2400:            * Auto Ins. Expires
                            RSTF2500:            * Date Last DMV Review
                            RSTF2600:            * Date Next DMV Review
                            RSTF2700:            * Race
                            RSTF2800:            * Ethnic Group
                            RSTF2900             * Re-activation Appr. Indicator
.
.         Invalid STF field received, so ignore it
.
          GOTO      RSTF9999
.
.         STF.1  Primary Key Value - STF (CE)
.
RSTF0100  BRANCH    COMPCNT,RSTF0101:            * identifier (ST)
                            RSTF0102:            * text (ST)
                            RSTF0103:            * name of coding system (ST)
                            RSTF0104:            * alternate identifier (ST)
                            RSTF0105:            * alternate text (ST)
                            RSTF0106             * name of alt. cod. system (ST)
          GOTO      RSTF9999
.
RSTF0101  RESET     STF00101
          GOTO      RSTF9999
.
RSTF0102  RESET     STF00102
          GOTO      RSTF9999
.
RSTF0103  RESET     STF00103
          GOTO      RSTF9999
.
RSTF0104  RESET     STF00104
          GOTO      RSTF9999
.
RSTF0105  RESET     STF00105
          GOTO      RSTF9999
.
RSTF0106  RESET     STF00106
          GOTO      RSTF9999
.
.         STF.2 Staff ID Code (CX)
.
RSTF0200  BRANCH    COMPCNT,RSTF0201:            * id (ST)
                            RSTF0202:            * check digit (ST)
                            RSTF0203:            * code ident. chk dig, sch (ID)
                            RSTF0204:            * assigning authority (HD)
                            RSTF0205:            * identifier type code (IS)
                            RSTF0206             * assigning facility (HD)
          GOTO      RSTF9999
.
RSTF0201  RESET     STF00201
          GOTO      RSTF9999
.
RSTF0202  RESET     STF00202
          GOTO      RSTF9999
.
RSTF0203  RESET     STF00203
          GOTO      RSTF9999
.
RSTF0204  RESET     STF00204
          GOTO      RSTF9999
.
RSTF0205  RESET     STF00205
          GOTO      RSTF9999
.
RSTF0206  RESET     STF00206
          GOTO      RSTF9999
.
.         STF.3 Staff Name (XPN)
.
RSTF0300  BRANCH    COMPCNT,RSTF0301:            * family name (ST)
                            RSTF0302:            * given name (ST)
                            RSTF0303:            * middle name (ST)
                            RSTF0304:            * suffix (ST)
                            RSTF0305:            * prefix (ST)
                            RSTF0306:            * degree (IS)
                            RSTF0307:            * name type code (ID)
                            RSTF0308             * name representation code (ID)
          GOTO      RSTF9999
.
RSTF0301  RESET     STF00301
          MOVE      STF00301,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,STF00301
          GOTO      RSTF9999
.
RSTF0302  RESET     STF00302
          MOVE      STF00302,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,STF00302
          GOTO      RSTF9999
.
RSTF0303  RESET     MRG00303
          GOTO      RSTF9999
.
RSTF0304  RESET     STF00304
          GOTO      RSTF9999
.
RSTF0305  RESET     STF00305
          MOVE      STF00305,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,STF00305
          GOTO      RSTF9999
.
RSTF0306  RESET     STF00306
          GOTO      RSTF9999
.
RSTF0307  RESET     STF00307
          GOTO      RSTF9999
.
RSTF0308  RESET     STF00308
          GOTO      RSTF9999
.
.         STF.4  Staff Type (IS)
.
RSTF0400  BRANCH    COMPCNT,RSTF0401
          GOTO      RSTF9999
.
RSTF0401  RESET     STF00401
          REP       UPPLOW,STF00401
          GOTO      RSTF9999
.
.         STF.5  Sex (IS)
.
RSTF0500  BRANCH    COMPCNT,RSTF0501
          GOTO      RSTF9999
.
RSTF0501  RESET     STF00501
          REP       UPPLOW,STF00501
          GOTO      RSTF9999
.
.         STF.6  Date/Time of Birth (TS)
.
RSTF0600  BRANCH    COMPCNT,RSTF0601
.
RSTF0601  RESET     STF00601
          GOTO      RSTF9999
.
.         STF.7 Active/Inactive Flag (ID)
.
RSTF0700  BRANCH    COMPCNT,RSTF0701
          GOTO      RSTF9999
.
RSTF0701  RESET     STF00701
          REP       UPPLOW,STF00701
          GOTO      RSTF9999
.
.         STF.8  Department (CE) (maximum of 4 repeats - 5 in total)
.
RSTF0800  COMPARE   REPTNCNT,FIVE                * maximum repeats reached ?
          GOTO      RSTF9999 IF LESS             * yes
.
          BRANCH    COMPCNT,RSTF0801:            * identifier (ST)
                            RSTF0802:            * text (ST)
                            RSTF0803:            * name of coding system (ST)
                            RSTF0804:            * alternate identifier (ST)
                            RSTF0805:            * alternate text (ST)
                            RSTF0806             * name of alt. cod. system (ST)
          GOTO      RSTF9999
.
RSTF0801  RESET     STF00801[REPTNCNT]           * identifier (ST)
          MOVE      STF00801[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,STF00801[REPTNCNT]
          GOTO      RSTF9999
.
RSTF0802  RESET     STF00802[REPTNCNT]           * text (ST)
          GOTO      RSTF9999
.
RSTF0803  RESET     STF00803[REPTNCNT]           * name of coding system (ST)
          GOTO      RSTF9999
.
RSTF0804  RESET     STF00804[REPTNCNT]           * alternate identifier (ST)
          GOTO      RSTF9999
.
RSTF0805  RESET     STF00805[REPTNCNT]           * alternate text (ST)
          GOTO      RSTF9999
.
RSTF0806  RESET     STF00806[REPTNCNT]           * name of alt. cod. system (ST)
          GOTO      RSTF9999
.
.         STF.9  Hospital Service (CE)
.
RSTF0900  BRANCH    COMPCNT,RSTF0901:            * identifier (ST)
                            RSTF0902:            * text (ST)
                            RSTF0903:            * name of coding system (ST)
                            RSTF0904:            * alternate identifier (ST)
                            RSTF0905:            * alternate text (ST)
                            RSTF0906             * name of alt. cod. system (ST)
          GOTO      RSTF9999
.
RSTF0901  RESET     STF00901
          GOTO      RSTF9999
.
RSTF0902  RESET     STF00902
          GOTO      RSTF9999
.
RSTF0903  RESET     STF00903
          GOTO      RSTF9999
.
RSTF0904  RESET     STF00904
          GOTO      RSTF9999
.
RSTF0905  RESET     STF00905
          GOTO      RSTF9999
.
RSTF0906  RESET     STF00906
          GOTO      RSTF9999
.
.         STF.10 Phone (XTN)
.
RSTF1000  COMPARE   REPTNCNT,SIX                 * maximum repeats reached ?
          GOTO      RSTF9999 IF LESS             * yes
.
          BRANCH    COMPCNT,RSTF1001:            * text
                            RSTF1002:            * telecomm. use code (ID)
                            RSTF1003:            * telcomm. equipment type (ID)
                            RSTF1004:            * email address (ST)
                            RSTF1005:            * country code (NM)
                            RSTF1006:            * area/city code (NM)
                            RSTF1007:            * phone number (NM)
                            RSTF1008:            * extension (NM)
                            RSTF1009             * any text (ST)
          GOTO      RSTF9999
.
RSTF1001  RESET     STF01001[REPTNCNT]
          MOVE      STF01001[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,STF01001[REPTNCNT]
          GOTO      RSTF9999
.
RSTF1002  RESET     STF01002[REPTNCNT]
          GOTO      RSTF9999
.
RSTF1003  RESET     STF01003[REPTNCNT]
          GOTO      RSTF9999
.
RSTF1004  RESET     STF01004[REPTNCNT]
          GOTO      RSTF9999
.
RSTF1005  RESET     STF01005[REPTNCNT]
          GOTO      RSTF9999
.
RSTF1006  RESET     STF01006[REPTNCNT]
          GOTO      RSTF9999
.
RSTF1007  RESET     STF01007[REPTNCNT]
          GOTO      RSTF9999
.
RSTF1008  RESET     STF01008[REPTNCNT]
          GOTO      RSTF9999
.
RSTF1009  RESET     STF01009[REPTNCNT]
          GOTO      RSTF9999
.
.         STF.11 Office/Home Address (XAD)
.
RSTF1100  COMPARE   REPTNCNT,TWO                 * maximum repeats reached ?
          GOTO      RSTF9999 IF LESS             * yes
.
          BRANCH    COMPCNT,RSTF1101:            * street address (ST)
                            RSTF1102:            * other designation (ST)
                            RSTF1103:            * city (ST)
                            RSTF1104:            * state (ST)
                            RSTF1105:            * postcode (ST)
                            RSTF1106:            * country (ID)
                            RSTF1107:            * address type (ID)
                            RSTF1108:            * other geographic desig. (ST)
                            RSTF1109:            * county (IS)
                            RSTF1110:            * census tract (IS)
                            RSTF1111:            * address code (ID)
                            RSTF1112             * address rep. code (ID)
          GOTO      RSTF9999
.
RSTF1101  RESET     STF01101[REPTNCNT]
          MOVE      STF01101[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,STF01101[REPTNCNT]
          GOTO      RSTF9999
.
RSTF1102  RESET     STF01102[REPTNCNT]
          MOVE      STF01102[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,STF01102[REPTNCNT]
          GOTO      RSTF9999
.
RSTF1103  RESET     STF01103[REPTNCNT]
          MOVE      STF01103[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,STF01103[REPTNCNT]
          REP       UPPLOW,STF01103[REPTNCNT]
          GOTO      RSTF9999
.
RSTF1104  RESET     STF01104[REPTNCNT]
          MOVE      STF01104[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,STF01104[REPTNCNT]
          REP       UPPLOW,STF01104[REPTNCNT]
          GOTO      RSTF9999
.
RSTF1105  RESET     STF01105[REPTNCNT]
          GOTO      RSTF9999
.
RSTF1106  RESET     STF01106[REPTNCNT]
          GOTO      RSTF9999
.
RSTF1107  RESET     STF01107[REPTNCNT]
          GOTO      RSTF9999
.
RSTF1108  RESET     STF01108[REPTNCNT]
          GOTO      RSTF9999
.
RSTF1109  RESET     STF01109[REPTNCNT]
          GOTO      RSTF9999
.
RSTF1110  RESET     STF01110[REPTNCNT]
          GOTO      RSTF9999
.
RSTF1111  RESET     STF01111[REPTNCNT]
          GOTO      RSTF9999
.
RSTF1112  RESET     STF01112[REPTNCNT]
          GOTO      RSTF9999
.
.         STF.12  Institution Activation Date (CM)
.
RSTF1200  BRANCH    COMPCNT,RSTF1201:            * date  (TS)
                            RSTF1202             * institution name (CE)
          GOTO      RSTF9999
.
RSTF1201  RESET     STF01201
          GOTO      RSTF9999
.
RSTF1202  RESET     STF01202
          GOTO      RSTF9999
.
.         STF.13  Institution Inactivation Date (CM)
.
RSTF1300  BRANCH    COMPCNT,RSTF1301:            * date  (TS)
                            RSTF1302             * institution name (CE)
          GOTO      RSTF9999
.
RSTF1301  RESET     STF01301
          GOTO      RSTF9999
.
RSTF1302  RESET     STF01302
          GOTO      RSTF9999
.
.         STF.14  Backup Person ID (CE)
.
RSTF1400  BRANCH    COMPCNT,RSTF1401:            * identifier (ST)
                            RSTF1402:            * text (ST)
                            RSTF1403:            * name of coding system (ST)
                            RSTF1404:            * alternate identifier (ST)
                            RSTF1405:            * alternate text (ST)
                            RSTF1406             * name of alt. cod. system (ST)
          GOTO      RSTF9999
.
RSTF1401  RESET     STF01401
          GOTO      RSTF9999
.
RSTF1402  RESET     STF01402
          GOTO      RSTF9999
.
RSTF1403  RESET     STF01403
          GOTO      RSTF9999
.
RSTF1404  RESET     STF01404
          GOTO      RSTF9999
.
RSTF1405  RESET     STF01405
          GOTO      RSTF9999
.
RSTF1406  RESET     STF01406
          GOTO      RSTF9999
.
.         STF.15  E-Mail Address (ST)
.                 (maximum of 4 repeats - 5 email addresses in total)
.
RSTF1500  COMPARE   REPTNCNT,FIVE                * maximum repeats reached ?
          GOTO      RSTF9999 IF LESS             * yes
.
          BRANCH    COMPCNT,RSTF1501
.
RSTF1501  RESET     STF01501[REPTNCNT]
          GOTO      RSTF9999
.
.         STF.16  Preferred Method of Contact (CE)
.
RSTF1600  BRANCH    COMPCNT,RSTF1601:            * identifier (ST)
                            RSTF1602:            * text (ST)
                            RSTF1603:            * name of coding system (ST)
                            RSTF1604:            * alternate identifier (ST)
                            RSTF1605:            * alternate text (ST)
                            RSTF1606             * name of alt. cod. system (ST)
          GOTO      RSTF9999
.
RSTF1601  RESET     STF01601
          GOTO      RSTF9999
.
RSTF1602  RESET     STF01602
          GOTO      RSTF9999
.
RSTF1603  RESET     STF01603
          GOTO      RSTF9999
.
RSTF1604  RESET     STF01604
          GOTO      RSTF9999
.
RSTF1605  RESET     STF01605
          GOTO      RSTF9999
.
RSTF1606  RESET     STF01606
          GOTO      RSTF9999
.
.         STF.17  Marital Status (CE)
.
RSTF1700  BRANCH    COMPCNT,RSTF1701:            * identifier (ST)
                            RSTF1702:            * text (ST)
                            RSTF1703:            * name of coding system (ST)
                            RSTF1704:            * alternate identifier (ST)
                            RSTF1705:            * alternate text (ST)
                            RSTF1706             * name of alt. cod. system (ST)
          GOTO      RSTF9999
.
RSTF1701  RESET     STF01701
          GOTO      RSTF9999
.
RSTF1702  RESET     STF01702
          GOTO      RSTF9999
.
RSTF1703  RESET     STF01703
          GOTO      RSTF9999
.
RSTF1704  RESET     STF01704
          GOTO      RSTF9999
.
RSTF1705  RESET     STF01705
          GOTO      RSTF9999
.
RSTF1706  RESET     STF01706
          GOTO      RSTF9999
.
.         STF.18  Job Title (ST)
.
RSTF1800  BRANCH    COMPCNT,RSTF1801
.
RSTF1801  RESET     STF01801
          GOTO      RSTF9999
.
.         STF.19 Job Code/Class (JCC)
.
RSTF1900  BRANCH    COMPCNT,RSTF1901:            * job code (ST)
                            RSTF1902             * job class (IS)
          GOTO      RSTF9999
.
RSTF1901  RESET     STF01901
          GOTO      RSTF9999
.
RSTF1902  RESET     STF01902
          GOTO      RSTF9999
.
.         STF.20  Employment Status (CE)
.
RSTF2000  BRANCH    COMPCNT,RSTF2001:            * identifier (ST)
                            RSTF2002:            * text (ST)
                            RSTF2003:            * name of coding system (ST)
                            RSTF2004:            * alternate identifier (ST)
                            RSTF2005:            * alternate text (ST)
                            RSTF2006             * name of alt. cod. system (ST)
          GOTO      RSTF9999
.
RSTF2001  RESET     STF02001
          GOTO      RSTF9999
.
RSTF2002  RESET     STF02002
          GOTO      RSTF9999
.
RSTF2003  RESET     STF02003
          GOTO      RSTF9999
.
RSTF2004  RESET     STF02004
          GOTO      RSTF9999
.
RSTF2005  RESET     STF02005
          GOTO      RSTF9999
.
RSTF2006  RESET     STF02006
          GOTO      RSTF9999
.
.         STF.21 Additional Insured on Auto (ID)
.
RSTF2100  BRANCH    COMPCNT,RSTF2101
          GOTO      RSTF9999
.
RSTF2101  RESET     STF02101
          GOTO      RSTF9999
.
.         STF.22 Driver's License Number - Staff (DLN)
.
RSTF2200  BRANCH    COMPCNT,RSTF2201:            * license number (ST)
                            RSTF2202:            * issuing state (IS)
                            RSTF2203             * expiration date (DT)
          GOTO      RSTF9999
.
RSTF2201  RESET     STF02201
          GOTO      RSTF9999
.
RSTF2202  RESET     STF02202
          GOTO      RSTF9999
.
RSTF2203  RESET     STF02203
          GOTO      RSTF9999
.
.         STF.23 Copy Auto Ins (ID)
.
RSTF2300  BRANCH    COMPCNT,RSTF2301
          GOTO      RSTF9999
.
RSTF2301  RESET     STF02301
          GOTO      RSTF9999
.
.         STF.24  Auto Ins. Expires (DT)
.
RSTF2400  BRANCH    COMPCNT,RSTF2401
.
RSTF2401  RESET     STF02401
          GOTO      RSTF9999
.
.         STF.25  Date Last DMV Review (DT)
.
RSTF2500  BRANCH    COMPCNT,RSTF2501
.
RSTF2501  RESET     STF02501
          GOTO      RSTF9999
.
.         STF.26  Date Next DMV Review (DT)
.
RSTF2600  BRANCH    COMPCNT,RSTF2601
.
RSTF2601  RESET     STF02601
          GOTO      RSTF9999
.
.         STF.27  Race (CE)
.
RSTF2700  BRANCH    COMPCNT,RSTF2701:            * identifier (ST)
                            RSTF2702:            * text (ST)
                            RSTF2703:            * name of coding system (ST)
                            RSTF2704:            * alternate identifier (ST)
                            RSTF2705:            * alternate text (ST)
                            RSTF2706             * name of alt. cod. system (ST)
          GOTO      RSTF9999
.
RSTF2701  RESET     STF02701
          GOTO      RSTF9999
.
RSTF2702  RESET     STF02702
          GOTO      RSTF9999
.
RSTF2703  RESET     STF02703
          GOTO      RSTF9999
.
RSTF2704  RESET     STF02704
          GOTO      RSTF9999
.
RSTF2705  RESET     STF02705
          GOTO      RSTF9999
.
RSTF2706  RESET     STF02706
          GOTO      RSTF9999
.
.         STF.28  Ethnic Group (CE)
.
RSTF2800  BRANCH    COMPCNT,RSTF2801:            * identifier (ST)
                            RSTF2802:            * text (ST)
                            RSTF2803:            * name of coding system (ST)
                            RSTF2804:            * alternate identifier (ST)
                            RSTF2805:            * alternate text (ST)
                            RSTF2806             * name of alt. cod. system (ST)
          GOTO      RSTF9999
.
RSTF2801  RESET     STF02801
          GOTO      RSTF9999
.
RSTF2802  RESET     STF02802
          GOTO      RSTF9999
.
RSTF2803  RESET     STF02803
          GOTO      RSTF9999
.
RSTF2804  RESET     STF02804
          GOTO      RSTF9999
.
RSTF2805  RESET     STF02805
          GOTO      RSTF9999
.
RSTF2806  RESET     STF02806
          GOTO      RSTF9999
.
.         STF.29  Re-activation Approval Indicator (ID)
.
RSTF2900  BRANCH    COMPCNT,RSTF2901
          GOTO      RSTF9999
.
RSTF2901  RESET     STF02901
          GOTO      RSTF9999
.
RSTF9999  RETURN
+
.*****************************************************************************
.*                                 RPRA0000        Called by: PROC0000       *
.*                          Load the PRA fields                              *
.*****************************************************************************
.
RPRA0000  BRANCH    FIELDNO,RPRA0100:            * Primary Key Value - PRA
                            RPRA0200:            * Practitioner Group
                            RPRA0300:            * Practitioner Category
                            RPRA0400:            * Provider Billing
                            RPRA0500:            * Specialty
                            RPRA0600:            * Practitioner ID Numbers
                            RPRA0700:            * Privileges
                            RPRA0800:            * Date Entered Practice
                            RPRA0900:            * Institution
                            RPRA1000:            * Date Left Practice
                            RPRA1100:            * Gov Reimb Billing Eligibility
                            RPRA1200             * Set ID - PRA
.
.         Invalid PRA field received, so ignore it
.
          GOTO      RPRA9999
.
.         PRA.1  Primary Key Value - PRA (CE)
.
RPRA0100  BRANCH    COMPCNT,RPRA0101:            * identifier (ST)
                            RPRA0102:            * text (ST)
                            RPRA0103:            * name of coding system (ST)
                            RPRA0104:            * alternate identifier (ST)
                            RPRA0105:            * alternate text (ST)
                            RPRA0106             * name of alt. cod. system (ST)
          GOTO      RPRA9999
.
RPRA0101  RESET     PRA00101
          GOTO      RPRA9999
.
RPRA0102  RESET     PRA00102
          GOTO      RPRA9999
.
RPRA0103  RESET     PRA00103
          GOTO      RPRA9999
.
RPRA0104  RESET     PRA00104
          GOTO      RPRA9999
.
RPRA0105  RESET     PRA00105
          GOTO      RPRA9999
.
RPRA0106  RESET     PRA00106
          GOTO      RPRA9999
.
.         PRA.2  Practitioner Group (CE)
.
RPRA0200  BRANCH    COMPCNT,RPRA0201:            * identifier (ST)
                            RPRA0202:            * text (ST)
                            RPRA0203:            * name of coding system (ST)
                            RPRA0204:            * alternate identifier (ST)
                            RPRA0205:            * alternate text (ST)
                            RPRA0206             * name of alt. cod. system (ST)
          GOTO      RPRA9999
.
RPRA0201  RESET     PRA00201
          GOTO      RPRA9999
.
RPRA0202  RESET     PRA00202
          MOVE      PRA00202,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PRA00202
          GOTO      RPRA9999
.
RPRA0203  RESET     PRA00203
          GOTO      RPRA9999
.
RPRA0204  RESET     PRA00204
          GOTO      RPRA9999
.
RPRA0205  RESET     PRA00205
          GOTO      RPRA9999
.
RPRA0206  RESET     PRA00206
          GOTO      RPRA9999
.
.         PRA.3  Practitioner Category (IS)
.
RPRA0300  BRANCH    COMPCNT,RPRA0301
.
RPRA0301  RESET     PRA00301
          REP       UPPLOW,PRA00301
          GOTO      RPRA9999
.
.         PRA.4  Provider Billing (ID)
.
RPRA0400  BRANCH    COMPCNT,RPRA0401
          GOTO      RPRA9999
.
RPRA0401  RESET     PRA00401
          GOTO      RPRA9999
.
.         PRA.5  Specialty (CM)
.
RPRA0500  BRANCH    COMPCNT,RPRA0501:            * specialty name (ST)
                            RPRA0502:            * governing board (ST)
                            RPRA0503:            * eligible or certified (ID)
                            RPRA0504             * date of certification (DT)
          GOTO      RPRA9999
.
RPRA0501  RESET     PRA00501
          GOTO      RPRA9999
.
RPRA0502  RESET     PRA00502
          GOTO      RPRA9999
.
RPRA0503  RESET     PRA00503
          GOTO      RPRA9999
.
RPRA0504  RESET     PRA00504
          GOTO      RPRA9999
.
.         PRA.6  Practitioner ID Numbers (CM)
.                 (maximum of 8 repeats - 9 identifiers in total)
.
RPRA0600  COMPARE   REPTNCNT,NINE                * maximum repeats reached ?
          GOTO      RPRA9999 IF LESS             * yes
.
          BRANCH    COMPCNT,RPRA0601:            * id number (ST)
                            RPRA0602:            * type of id number (IS)
                            RPRA0603:            * state/other qual. info (ST)
                            RPRA0604             * expiration date (DT)
          GOTO      RPRA9999
.
RPRA0601  RESET     PRA00601[REPTNCNT]
          GOTO      RPRA9999
.
RPRA0602  RESET     PRA00602[REPTNCNT]
          REP       UPPLOW,PRA00602[REPTNCNT]
          GOTO      RPRA9999
.
RPRA0603  RESET     PRA00603[REPTNCNT]
          GOTO      RPRA9999
.
RPRA0604  RESET     PRA00604[REPTNCNT]
          GOTO      RPRA9999
.
.         PRA.7  Privileges (CM)
.
RPRA0700  BRANCH    COMPCNT,RPRA0701:            * privilege/class  (CE)
                            RPRA0702:            * expiration date (DT)
                            RPRA0703:            * activation date (DT)
                            RPRA0704             * facility (EI)
          GOTO      RPRA9999
.
RPRA0701  RESET     PRA00701
          GOTO      RPRA9999
.
RPRA0702  RESET     PRA00702
          GOTO      RPRA9999
.
RPRA0703  RESET     PRA00703
          GOTO      RPRA9999
.
RPRA0704  RESET     PRA00704
          GOTO      RPRA9999
.
.         PRA.8  Date Entered Practice (DT)
.
RPRA0800  BRANCH    COMPCNT,RPRA0801
.
RPRA0801  RESET     PRA00801
          GOTO      RPRA9999
.
.         PRA.9  Institution (CE)
.
RPRA0900  BRANCH    COMPCNT,RPRA0901:            * identifier (ST)
                            RPRA0902:            * text (ST)
                            RPRA0903:            * name of coding system (ST)
                            RPRA0904:            * alternate identifier (ST)
                            RPRA0905:            * alternate text (ST)
                            RPRA0906             * name of alt. cod. system (ST)
          GOTO      RPRA9999
.
RPRA0901  RESET     PRA00901
          GOTO      RPRA9999
.
RPRA0902  RESET     PRA00902
          MOVE      PRA00902,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PRA00902
          GOTO      RPRA9999
.
RPRA0903  RESET     PRA00903
          GOTO      RPRA9999
.
RPRA0904  RESET     PRA00904
          GOTO      RPRA9999
.
RPRA0905  RESET     PRA00905
          GOTO      RPRA9999
.
RPRA0906  RESET     PRA00906
          GOTO      RPRA9999
.
.         PRA.10  Date Left Practice (DT)
.
RPRA1000  BRANCH    COMPCNT,RPRA1001
.
RPRA1001  RESET     PRA01001
          GOTO      RPRA9999
.
.         PRA.11  Government Reimbursement Billing Eligibility (CE)
.
RPRA1100  BRANCH    COMPCNT,RPRA1101:            * identifier (ST)
                            RPRA1102:            * text (ST)
                            RPRA1103:            * name of coding system (ST)
                            RPRA1104:            * alternate identifier (ST)
                            RPRA1105:            * alternate text (ST)
                            RPRA1106             * name of alt. cod. system (ST)
          GOTO      RPRA9999
.
RPRA1101  RESET     PRA01101
          GOTO      RPRA9999
.
RPRA1102  RESET     PRA01102
          GOTO      RPRA9999
.
RPRA1103  RESET     PRA01103
          GOTO      RPRA9999
.
RPRA1104  RESET     PRA01104
          GOTO      RPRA9999
.
RPRA1105  RESET     PRA01105
          GOTO      RPRA9999
.
RPRA1106  RESET     PRA01106
          GOTO      RPRA9999
.
.         PRA.12  Set ID - PRA (SI)
.
RPRA1200  BRANCH    COMPCNT,RPRA1201
.
RPRA1201  RESET     PRA01201
          GOTO      RPRA9999
.
RPRA9999  RETURN
+
.*****************************************************************************
.*                                 RZPR0000        Called by: PROC0000       *
.*                          Load the ZPR fields                              *
.*****************************************************************************
.
RZPR0000  BRANCH    FIELDNO,RZPR0100:            * Set ID (SI)
                            RZPR0200:            * Clinic ID (ST)
                            RZPR0300:            * Clinic Description (ST)
                            RZPR0400:            * Clinic Type (CM)
                            RZPR0500:            * Clinic Address (XAD)
                            RZPR0600:            * Clinic Phone Numbers (XTN)
                            RZPR0700:            * Date Practice Started (DT)
                            RZPR0800:            * Date Practice Ended (DT)
                            RZPR0900:            * Practice Provider Number (ST)
                            RZPR1000:            * Pract Preferred Contact (ST)
                            RZPR1100:            * Pract Senior HCP (ST)
                            RZPR1200:            * Update Flag (ID)
                            RZPR1300:            * Fax Disch. Summary Flag (ID)
                            RZPR1400:            * Elec Disch. Summary Flag (ID)
                            RZPR1500:            * Prac. Link Active Flag (ID)
                            RZPR1600:            * SMD GUID value 1 (ST)
                            RZPR1700:            * SMD GUID value 2 (ST)
                            RZPR1800             * HPI-O value (ST)
.
.         Invalid ZPR field received, so ignore it
.
          GOTO      RZPR9999
.
.         ZPR.1  Set ID (SI)
.
RZPR0100  BRANCH    COMPCNT,RZPR0101
.
RZPR0101  RESET     ZPR00101
          GOTO      RZPR9999
.
.         ZPR.2  Clinic ID (ST)
.
RZPR0200  BRANCH    COMPCNT,RZPR0201
.
RZPR0201  RESET     ZPR00201
          GOTO      RZPR9999
.
.         ZPR.3  Clinic Description (ST)
.
RZPR0300  BRANCH    COMPCNT,RZPR0301
.
RZPR0301  RESET     ZPR00301
          MOVE      ZPR00301,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZPR00301
          GOTO      RZPR9999
.
.         ZPR.4  Clinic Type (CM)
.
RZPR0400  BRANCH    COMPCNT,RZPR0401
.
RZPR0401  RESET     ZPR00401
          REP       UPPLOW,ZPR00401
          GOTO      RZPR9999
.
.         ZPR.5 Clinic Address (XAD)
.
RZPR0500  BRANCH    COMPCNT,RZPR0501:            * street address (ST)
                            RZPR0502:            * other designation (ST)
                            RZPR0503:            * city (ST)
                            RZPR0504:            * state (ST)
                            RZPR0505:            * postcode (ST)
                            RZPR0506:            * country (ID)
                            RZPR0507:            * address type (ID)
                            RZPR0508:            * other geographic desig. (ST)
                            RZPR0509:            * county (IS)
                            RZPR0510:            * census tract (IS)
                            RZPR0511             * address rep. code (ID)
          GOTO      RZPR9999
.
RZPR0501  RESET     ZPR00501
          MOVE      ZPR00501,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZPR00501
          GOTO      RZPR9999
.
RZPR0502  RESET     ZPR00502
          MOVE      ZPR00502,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZPR00502
          GOTO      RZPR9999
.
RZPR0503  RESET     ZPR00503
          MOVE      ZPR00503,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZPR00503
          REP       UPPLOW,ZPR00503
          GOTO      RZPR9999
.
RZPR0504  RESET     ZPR00504
          MOVE      ZPR00504,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZPR00504
          REP       UPPLOW,ZPR00504
          GOTO      RZPR9999
.
RZPR0505  RESET     ZPR00505
          GOTO      RZPR9999
.
RZPR0506  RESET     ZPR00506
          GOTO      RZPR9999
.
RZPR0507  RESET     ZPR00507
          GOTO      RZPR9999
.
RZPR0508  RESET     ZPR00508
          GOTO      RZPR9999
.
RZPR0509  RESET     ZPR00509
          GOTO      RZPR9999
.
RZPR0510  RESET     ZPR00510
          GOTO      RZPR9999
.
RZPR0511  RESET     ZPR00511
          GOTO      RZPR9999
.
.         ZPR.6 Phone (XTN)
.                (maximum of 4 repeat - 5 phone numbers in total)
.
RZPR0600  COMPARE   REPTNCNT,FIVE                * maximum repeats reached ?
          GOTO      RZPR9999 IF LESS             * yes
.
          BRANCH    COMPCNT,RZPR0601:            * text
                            RZPR0602:            * telecomm. use code (ID)
                            RZPR0603:            * telcomm. equipment type (ID)
                            RZPR0604:            * email address (ST)
                            RZPR0605:            * country code (NM)
                            RZPR0606:            * area/city code (NM)
                            RZPR0607:            * phone number (NM)
                            RZPR0608:            * extension (NM)
                            RZPR0609             * any text (ST)
          GOTO      RZPR9999
.
RZPR0601  RESET     ZPR00601[REPTNCNT]
          GOTO      RZPR9999
.
RZPR0602  RESET     ZPR00602[REPTNCNT]
          GOTO      RZPR9999
.
RZPR0603  RESET     ZPR00603[REPTNCNT]
          REP       UPPLOW,ZPR00603[REPTNCNT]
          GOTO      RZPR9999
.
RZPR0604  RESET     ZPR00604[REPTNCNT]
          GOTO      RZPR9999
.
RZPR0605  RESET     ZPR00605[REPTNCNT]
          GOTO      RZPR9999
.
RZPR0606  RESET     ZPR00606[REPTNCNT]
          GOTO      RZPR9999
.
RZPR0607  RESET     ZPR00607[REPTNCNT]
          GOTO      RZPR9999
.
RZPR0608  RESET     ZPR00608[REPTNCNT]
          GOTO      RZPR9999
.
RZPR0609  RESET     ZPR00609[REPTNCNT]
          GOTO      RZPR9999
.
.         ZPR.7  Date Practice Started (TM)
.
RZPR0700  BRANCH    COMPCNT,RZPR0701
.
RZPR0701  RESET     ZPR00701
          GOTO      RZPR9999
.
.         ZPR.8  Date Practice Ended (TM)
.
RZPR0800  BRANCH    COMPCNT,RZPR0801
.
RZPR0801  RESET     ZPR00801
          GOTO      RZPR9999
.
.         ZPR.9  Practice Provider Number (ST)
.
RZPR0900  BRANCH    COMPCNT,RZPR0901
.
RZPR0901  RESET     ZPR00901
          GOTO      RZPR9999
.
.         ZPR.10 Practice Preferred Contact (ST)
.
RZPR1000  BRANCH    COMPCNT,RZPR1001
.
RZPR1001  RESET     ZPR01001
          GOTO      RZPR9999
.
.         ZPR.11 Practice Senior HCP (ST)
.
RZPR1100  BRANCH    COMPCNT,RZPR1101
.
RZPR1101  RESET     ZPR01101
          GOTO      RZPR9999
.
.         ZPR.12 Update Flag (ID)
.
RZPR1200  BRANCH    COMPCNT,RZPR1201
.
RZPR1201  RESET     ZPR01201
          GOTO      RZPR9999
.
.         ZPR.13 Fax Discharge Summary Flag (ID)
.
RZPR1300  BRANCH    COMPCNT,RZPR1301
.
RZPR1301  RESET     ZPR01301
          GOTO      RZPR9999
.
.         ZPR.14 Electronic Discharge Summary Flag (ID)
.
RZPR1400  BRANCH    COMPCNT,RZPR1401
.
RZPR1401  RESET     ZPR01401
          GOTO      RZPR9999
.
.         ZPR.15 Practice Link Active Flag (ID)
.
RZPR1500  BRANCH    COMPCNT,RZPR1501
.
RZPR1501  RESET     ZPR01501
          GOTO      RZPR9999
.
.         ZPR.16  SMD GUID value 1 (ST)
.
RZPR1600  BRANCH    COMPCNT,RZPR1601             * text (ST)
          GOTO      RZPR9999
.
RZPR1601  RESET     ZPR01601
          GOTO      RZPR9999
.
.         ZPR.17  SMD GUID value 2 (ST)
.
RZPR1700  BRANCH    COMPCNT,RZPR1701             * text (ST)
          GOTO      RZPR9999
.
RZPR1701  RESET     ZPR01701
          GOTO      RZPR9999
.
.         ZPR.18  HPI-O value (ST)
.
RZPR1800  BRANCH    COMPCNT,RZPR1801             * text (ST)
          GOTO      RZPR9999
.
RZPR1801  RESET     ZPR01801
          GOTO      RZPR9999
.
RZPR9999  RETURN
+
.*****************************************************************************
.*                                 RDG10000        Called by: PROC0000       *
.*                          Load the DG1 fields                              *
.*****************************************************************************
.
RDG10000  BRANCH    FIELDNO,RDG10100:            * Set ID (SI)
                            RDG10200:            * Diagnosis Coding Method (ID)
                            RDG10300:            * Diagnosis Code - DG1 (CE)
                            RDG10400:            * Diagnosis Description (ST)
                            RDG10500:            * Diagnosis Date/Time (TS)
                            RDG10600:            * Diagnosis Type (IS)
                            RDG10700:           * Major Diagnostic Category (CE)
                            RDG10800:            * Diagnostic Related Group (CE)
                            RDG10900:            * DRG Approval Indicator (ID)
                            RDG11000:            * DRG Grouper Review Code (IS)
                            RDG11100:            * Outlier Type (CE)
                            RDG11200:            * Outlier Days (NM)
                            RDG11300:            * Outlier Cost (CP)
                            RDG11400:            * Grouper Version and Type (ST)
                            RDG11500:            * Diagnosis Priority (ID)
                            RDG11600:            * Diagnosing Clinician (XCN)
                            RDG11700:           * Diagnosing Classification (IS)
                            RDG11800:            * Confidential Indicator (ID)
                            RDG11900             * Attestation Date/Time (TS)
.
.         Invalid DG1 field received, so ignore it
.
          GOTO      RDG19999
.
.         DG1.1  Set ID (SI)
.
RDG10100  BRANCH    COMPCNT,RDG10101
.
RDG10101  RESET     DG100101
          GOTO      RDG19999
.
.         DG1.2  Diagnosis Coding Method (ID)
.
RDG10200  BRANCH    COMPCNT,RDG10201
.
RDG10201  RESET     DG100201
          GOTO      RDG19999
.
.         DG1.3 Diagnosis Code - DG1 (CE)
.
RDG10300  BRANCH    COMPCNT,RDG10301:            * identifier (ST)
                            RDG10302:            * text (ST)
                            RDG10303:            * name of coding system (ST)
                            RDG10304:            * alternate identifier (ST)
                            RDG10305:            * alternate text (ST)
                            RDG10306             * name of alt. cod. system (ST)
          GOTO      RDG19999
.
RDG10301  RESET     DG100301                     * identifier (ST)
          GOTO      RDG19999
.
RDG10302  RESET     DG100302                     * text (ST)
          GOTO      RDG19999
.
RDG10303  RESET     DG100303                     * name of coding system (ST)
          GOTO      RDG19999
.
RDG10304  RESET     DG100304                     * alternate identifier (ST)
          GOTO      RDG19999
.
RDG10305  RESET     DG100305                     * alternate text (ST)
          GOTO      RDG19999
.
RDG10306  RESET     DG100306                     * name of alt. cod. system (ST)
          GOTO      RDG19999
.
.         DG1.4  Diagnosis Description (ST)
.
RDG10400  BRANCH    COMPCNT,RDG10401
.
RDG10401  RESET     DG100401
          GOTO      RDG19999
.
.         DG1.5  Diagnosis Date/Time (TS)
.
RDG10500  BRANCH    COMPCNT,RDG10501
.
RDG10501  RESET     DG100501
          GOTO      RDG19999
.
.         DG1.6  Diagnosis Type (IS)
.
RDG10600  BRANCH    COMPCNT,RDG10601
.
RDG10601  RESET     DG100601
          GOTO      RDG19999
.
.         DG1.7 Major Diagnostic Category (CE)
.
RDG10700  BRANCH    COMPCNT,RDG10701:            * identifier (ST)
                            RDG10702:            * text (ST)
                            RDG10703:            * name of coding system (ST)
                            RDG10704:            * alternate identifier (ST)
                            RDG10705:            * alternate text (ST)
                            RDG10706             * name of alt. cod. system (ST)
          GOTO      RDG19999
.
RDG10701  RESET     DG100701                     * identifier (ST)
          GOTO      RDG19999
.
RDG10702  RESET     DG100702                     * text (ST)
          GOTO      RDG19999
.
RDG10703  RESET     DG100703                     * name of coding system (ST)
          GOTO      RDG19999
.
RDG10704  RESET     DG100704                     * alternate identifier (ST)
          GOTO      RDG19999
.
RDG10705  RESET     DG100705                     * alternate text (ST)
          GOTO      RDG19999
.
RDG10706  RESET     DG100706                     * name of alt. cod. system (ST)
          GOTO      RDG19999
.
.         DG1.8 Diagnostic Related Group (CE)
.
RDG10800  BRANCH    COMPCNT,RDG10801:            * identifier (ST)
                            RDG10802:            * text (ST)
                            RDG10803:            * name of coding system (ST)
                            RDG10804:            * alternate identifier (ST)
                            RDG10805:            * alternate text (ST)
                            RDG10806             * name of alt. cod. system (ST)
          GOTO      RDG19999
.
RDG10801  RESET     DG100801                     * identifier (ST)
          GOTO      RDG19999
.
RDG10802  RESET     DG100802                     * text (ST)
          GOTO      RDG19999
.
RDG10803  RESET     DG100803                     * name of coding system (ST)
          GOTO      RDG19999
.
RDG10804  RESET     DG100804                     * alternate identifier (ST)
          GOTO      RDG19999
.
RDG10805  RESET     DG100805                     * alternate text (ST)
          GOTO      RDG19999
.
RDG10806  RESET     DG100806                     * name of alt. cod. system (ST)
          GOTO      RDG19999
.
.         DG1.9  DRG Approval Indicator (ID)
.
RDG10900  BRANCH    COMPCNT,RDG10901
.
RDG10901  RESET     DG100901
          GOTO      RDG19999
.
.         DG1.10  DRG Grouper Review Code (IS)
.
RDG11000  BRANCH    COMPCNT,RDG11001
.
RDG11001  RESET     DG101001
          GOTO      RDG19999
.
.         DG1.11 Outlier Type (CE)
.
RDG11100  BRANCH    COMPCNT,RDG11101:            * identifier (ST)
                            RDG11102:            * text (ST)
                            RDG11103:            * name of coding system (ST)
                            RDG11104:            * alternate identifier (ST)
                            RDG11105:            * alternate text (ST)
                            RDG11106             * name of alt. cod. system (ST)
          GOTO      RDG19999
.
RDG11101  RESET     DG101101                     * identifier (ST)
          GOTO      RDG19999
.
RDG11102  RESET     DG101102                     * text (ST)
          GOTO      RDG19999
.
RDG11103  RESET     DG101103                     * name of coding system (ST)
          GOTO      RDG19999
.
RDG11104  RESET     DG101104                     * alternate identifier (ST)
          GOTO      RDG19999
.
RDG11105  RESET     DG101105                     * alternate text (ST)
          GOTO      RDG19999
.
RDG11106  RESET     DG101106                     * name of alt. cod. system (ST)
          GOTO      RDG19999
.
.         DG1.12  Outlier Days (NM)
.
RDG11200  BRANCH    COMPCNT,RDG11201
.
RDG11201  RESET     DG101201
          GOTO      RDG19999
.
.         DG1.13  Outlier Cost (CP)
.
RDG11300  BRANCH    COMPCNT,RDG11301:            * price (MO)
                            RDG11302:            * price type (ID)
                            RDG11303:            * from value (NM)
                            RDG11304:            * to value (NM)
                            RDG11305:            * range units (CE)
                            RDG11306             * range type (ID)
          GOTO      RDG19999
.
RDG11301  RESET     DG101301                     * load price (MO)
          GOTO      RDG19999
.
RDG11302  RESET     DG101302                     * load price type (ID)
          GOTO      RDG19999
.
RDG11303  RESET     DG101303                     * load from value (NM)
          GOTO      RDG19999
.
RDG11304  RESET     DG101304                     * load to value (NM)
          GOTO      RDG19999
.
RDG11305  RESET     DG101305                     * load range units (CE)
          GOTO      RDG19999
.
RDG11306  RESET     DG101306                     * load range type (ID)
          GOTO      RDG19999
.
.         DG1.14  Grouper Version and Type (ST)
.
RDG11400  BRANCH    COMPCNT,RDG11401
.
RDG11401  RESET     DG101401
          GOTO      RDG19999
.
.         DG1.15  Diagnosis Priority (ID)
.
RDG11500  BRANCH    COMPCNT,RDG11501
.
RDG11501  RESET     DG101501
          GOTO      RDG19999
.
.         DG1.16 Diagnosing Clinician (XCN)
.
RDG11600  BRANCH    COMPCNT,RDG11601:            * id number (ST)
                            RDG11602:            * family name (ST)
                            RDG11603:            * given name (ST)
                            RDG11604:            * middle name (ST)
                            RDG11605:            * suffix (ST)
                            RDG11606:            * prefix (ST)
                            RDG11607:            * degree (IS)
                            RDG11608:            * source table (IS)
                            RDG11609:            * assigning authority (HD)
                            RDG11610:            * name type code (ID)
                            RDG11611:            * identifier check digit (ST)
                            RDG11612:            * check digit scheme code (ID)
                            RDG11613:            * identifier type code (IS)
                            RDG11614:            * assigning facility (HD)
                            RDG11615             * name representation code (ID)
          GOTO      RDG19999
.
RDG11601  RESET     DG101601                     * load id number (ST)
          GOTO      RDG19999
.
RDG11602  RESET     DG101602                     * load family name (ST)
          GOTO      RDG19999
.
RDG11603  RESET     DG101603                     * load given name (ST)
          GOTO      RDG19999
.
RDG11604  RESET     DG101604                     * load middle name (ST)
          GOTO      RDG19999
.
RDG11605  RESET     DG101605                     * load suffix (ST)
          GOTO      RDG19999
.
RDG11606  RESET     DG101606                     * load prefix (ST)
          GOTO      RDG19999
.
RDG11607  RESET     DG101607                     * load degree (IS)
          GOTO      RDG19999
.
RDG11608  RESET     DG101608                     * load source table (IS)
          GOTO      RDG19999
.
RDG11609  RESET     DG101609                     * load assigning authority (HD)
          GOTO      RDG19999
.
RDG11610  RESET     DG101610                     * load name type code (ID)
          GOTO      RDG19999
.
RDG11611  RESET     DG101611                     * load ident. check digit (ST)
          GOTO      RDG19999
.
RDG11612  RESET     DG101612                     * load chk dig scheme code (ID)
          GOTO      RDG19999
.
RDG11613  RESET     DG101613                     * load ident. type code (IS)
          GOTO      RDG19999
.
RDG11614  RESET     DG101614                     * load assigning facility (HD)
          GOTO      RDG19999
.
RDG11615  RESET     DG101615                     * load name repres. code (ID)
          GOTO      RDG19999
.
.         DG1.17  Diagnosis Classification (IS)
.
RDG11700  BRANCH    COMPCNT,RDG11701
.
RDG11701  RESET     DG101701
          GOTO      RDG19999
.
.         DG1.18  Confidential Indicator (ID)
.
RDG11800  BRANCH    COMPCNT,RDG11801
.
RDG11801  RESET     DG101801
          GOTO      RDG19999
.
.         DG1.19  Attestation Date/Time (TS)
.
RDG11900  BRANCH    COMPCNT,RDG11901
.
RDG11901  RESET     DG101901
          GOTO      RDG19999
.
RDG19999  RETURN
+
.*****************************************************************************
.*                                 RZST0000        Called by: PROC0000       *
.*                          Reset the ZST fields                             *
.*****************************************************************************
.
RZST0000  BRANCH    FIELDNO,RZST0100:            * Primary Key Value (CE)
                            RZST0200:            * Linked Doctor Code (CM)
                            RZST0300:            * HCP Status (ID)
                            RZST0400:            * Doctor Prescriber Number (ST)
                            RZST0500:            * Doctor Provider Number (ST)
                            RZST0600:            * Accreditation Details (CM)
                            RZST0700:            * Registration Details (CM)
                            RZST0800:            * Insurance Details (CM)
                            RZST0900:            * Preferred Contact Method (CM)
                            RZST1000:            * National Reg. Number (ST)
                            RZST1100:            * SMD GUID value 1 (ST)
                            RZST1200:            * SMD GUID value 2 (ST)
                            RZST1300             * HPI-I value (ST)
.
.         Invalid ZST field received, so ignore it
.
          GOTO      RZST9999
.
.         ZST.1  Primary Key Value - ZST (CE)
.
RZST0100  BRANCH    COMPCNT,RZST0101:            * identifier (ST)
                            RZST0102:            * text (ST)
                            RZST0103:            * name of coding system (ST)
                            RZST0104:            * alternate identifier (ST)
                            RZST0105:            * alternate text (ST)
                            RZST0106             * name of alt. cod. system (ST)
          GOTO      RZST9999
.
RZST0101  RESET     ZST00101                     * identifier (ST)
          GOTO      RZST9999
.
RZST0102  RESET     ZST00102                     * text (ST)
          GOTO      RZST9999
.
RZST0103  RESET     ZST00103                     * name of coding system (ST)
          GOTO      RZST9999
.
RZST0104  RESET     ZST00104                     * alternate identifier (ST)
          GOTO      RZST9999
.
RZST0105  RESET     ZST00105                     * alternate text (ST)
          GOTO      RZST9999
.
RZST0106  RESET     ZST00106                     * name of alt. cod. system (ST)
          GOTO      RZST9999
.
.         ZST.2  Linked Doctor Code (CM)
.
RZST0200  BRANCH    COMPCNT,RZST0201:            * identifier (ST)
                            RZST0202:            * text (ST)
                            RZST0203:            * name of coding system (ST)
                            RZST0204:            * alternate identifier (ST)
                            RZST0205:            * alternate text (ST)
                            RZST0206             * name of alt. cod. system (ST)
          GOTO      RZST9999
.
RZST0201  RESET     ZST00201                     * identifier (ST)
          GOTO      RZST9999
.
RZST0202  RESET     ZST00202                     * text (ST)
          GOTO      RZST9999
.
RZST0203  RESET     ZST00203                     * name of coding system (ST)
          GOTO      RZST9999
.
RZST0204  RESET     ZST00204                     * alternate identifier (ST)
          GOTO      RZST9999
.
RZST0205  RESET     ZST00205                     * alternate text (ST)
          GOTO      RZST9999
.
RZST0206  RESET     ZST00206                     * name of alt. cod. system (ST)
          GOTO      RZST9999
.
.         ZST.3  HCP Status (ID)
.
RZST0300  BRANCH    COMPCNT,RZST0301             * status identifier (ST)
          GOTO      RZST9999
.
RZST0301  RESET     ZST00301
          GOTO      RZST9999
.
.         ZST.4  Doctor Prescriber Number (ST)
.
RZST0400  BRANCH    COMPCNT,RZST0401             * text (ST)
          GOTO      RZST9999
.
RZST0401  RESET     ZST00401
          GOTO      RZST9999
.
.         ZST.5  Doctor Provider Number (ST)
.
RZST0500  BRANCH    COMPCNT,RZST0501             * text (ST)
          GOTO      RZST9999
.
RZST0501  RESET     ZST00501
          GOTO      RZST9999
.
.         ZST.6  Accreditation Details (CM)
.
RZST0600  BRANCH    COMPCNT,RZST0601:            * accreditation type (ST)
                            RZST0602:            * accreditation id (ID)
                            RZST0603:            * accreditation expiry date(DT)
                            RZST0604             * accreditation years (ST)
          GOTO      RZST9999
.
RZST0601  RESET     ZST00601                     * accreditation type (ST)
          GOTO      RZST9999
.
RZST0602  RESET     ZST00602                     * accreditation id (ID)
          GOTO      RZST9999
.
RZST0603  RESET     ZST00603                     * accreditation expiry date(DT)
          GOTO      RZST9999
.
RZST0604  RESET     ZST00604                     * accreditation years (ST)
          GOTO      RZST9999
.
.         ZST.7  Registration Details (CM)
.
RZST0700  BRANCH    COMPCNT,RZST0701:            * registration number (ST)
                            RZST0702:            * registration from date (DT)
                            RZST0703             * registration to date (DT)
          GOTO      RZST9999
.
RZST0701  RESET     ZST00701                     * registration number (ST)
          GOTO      RZST9999
.
RZST0702  RESET     ZST00702                     * registration from date (DT)
          GOTO      RZST9999
.
RZST0703  RESET     ZST00703                     * registration to date (DT)
          GOTO      RZST9999
.
.         ZST.8  Insurance Details (CM)
.
RZST0800  BRANCH    COMPCNT,RZST0801:            * text (ST)
                            RZST0802:            * insurance code (ID)
                            RZST0803:            * insurance policy number (ST)
                            RZST0804:            * insurance from date (DT)
                            RZST0805             * insurance to date (DT)
          GOTO      RZST9999
.
RZST0801  RESET     ZST00801                     * text (ST)
          GOTO      RZST9999
.
RZST0802  RESET     ZST00802                     * insurance code (ID)
          GOTO      RZST9999
.
RZST0803  RESET     ZST00803                     * insurance policy number (ST)
          GOTO      RZST9999
.
RZST0804  RESET     ZST00804                     * insurance from date (DT)
          GOTO      RZST9999
.
RZST0805  RESET     ZST00805                     * insurance to date (DT)
          GOTO      RZST9999
.
.         ZST.9  Preferred Contact Method (CM)
.
RZST0900  BRANCH    COMPCNT,RZST0901:            * text (ST)
                            RZST0902             * method of contact (ID)
          GOTO      RZST9999
.
RZST0901  RESET     ZST00901                     * text (ST)
          GOTO      RZST9999
.
RZST0902  RESET     ZST00902                     * method of contact (ID)
          GOTO      RZST9999
.
.         ZST.10  National Registration Number (ST)
.
RZST1000  BRANCH    COMPCNT,RZST1001             * text (ST)
          GOTO      RZST9999
.
RZST1001  RESET     ZST01001
          GOTO      RZST9999
.
.         ZST.11  SMD GUID value 1 (ST)
.
RZST1100  BRANCH    COMPCNT,RZST1101             * text (ST)
          GOTO      RZST9999
.
RZST1101  RESET     ZST01101
          GOTO      RZST9999
.
.         ZST.12  SMD GUID value 2 (ST)
.
RZST1200  BRANCH    COMPCNT,RZST1201             * text (ST)
          GOTO      RZST9999
.
RZST1201  RESET     ZST01201
          GOTO      RZST9999
.
.         ZST.13  HPI-I value (ST)
.
RZST1300  BRANCH    COMPCNT,RZST1301             * text (ST)
          GOTO      RZST9999
.
RZST1301  RESET     ZST01301
          GOTO      RZST9999
.
RZST9999  RETURN
+
.*****************************************************************************
.*                                 RZSF0000        Called by: PROC0000       *
.*                          Reset the ZSF field                              *
.*****************************************************************************
.
RZSF0000  BRANCH    FIELDNO,RZSF0100:            * Primary Key Value (CE)
                            RZSF0200:            * Hospital Campus Code (CE)
                            RZSF0300:            * Hospital Staff ID (CE)
                            RZSF0400:            * HCP Status for Campus (ID)
                            RZSF0500:            * Doctor Provider Number (ST)
                            RZSF0600:            * Accreditation Details (CM)
                            RZSF0700:            * Active/Inactive Flag (ID)
                            RZSF0800:            * Institution Active Date (DT)
                            RZSF0900             * Institution Inactive Date(DT)
.
.         Invalid ZSF field received, so ignore it
.
          GOTO      RZSF9999
.
.         ZSF.1  Primary Key Value - ZSF (CE)
.
RZSF0100  BRANCH    COMPCNT,RZSF0101:            * identifier (ST)
                            RZSF0102:            * text (ST)
                            RZSF0103:            * name of coding system (ST)
                            RZSF0104:            * alternate identifier (ST)
                            RZSF0105:            * alternate text (ST)
                            RZSF0106             * name of alt. cod. system (ST)
          GOTO      RZSF9999
.
RZSF0101  RESET     ZSF00101                     * identifier (ST)
          GOTO      RZSF9999
.
RZSF0102  RESET     ZSF00102                     * text (ST)
          GOTO      RZSF9999
.
RZSF0103  RESET     ZSF00103                     * name of coding system (ST)
          GOTO      RZSF9999
.
RZSF0104  RESET     ZSF00104                     * alternate identifier (ST)
          GOTO      RZSF9999
.
RZSF0105  RESET     ZSF00105                     * alternate text (ST)
          GOTO      RZSF9999
.
RZSF0106  RESET     ZSF00106                     * name of alt. cod. system (ST)
          GOTO      RZSF9999
.
.         ZSF.2  Hospital Campus Code (CE)
.
RZSF0200  BRANCH    COMPCNT,RZSF0201:            * identifier (ST)
                            RZSF0202:            * text (ST)
                            RZSF0203:            * name of coding system (ST)
                            RZSF0204:            * alternate identifier (ST)
                            RZSF0205:            * alternate text (ST)
                            RZSF0206             * name of alt. cod. system (ST)
          GOTO      RZSF9999
.
RZSF0201  RESET     ZSF00201                     * identifier (ST)
          GOTO      RZSF9999
.
RZSF0202  RESET     ZSF00202                     * text (ST)
          GOTO      RZSF9999
.
RZSF0203  RESET     ZSF00203                     * name of coding system (ST)
          GOTO      RZSF9999
.
RZSF0204  RESET     ZSF00204                     * alternate identifier (ST)
          GOTO      RZSF9999
.
RZSF0205  RESET     ZSF00205                     * alternate text (ST)
          GOTO      RZSF9999
.
RZSF0206  RESET     ZSF00206                     * name of alt. cod. system (ST)
          GOTO      RZSF9999
.
.         ZSF.3  Hospital Staff ID (CE)
.
RZSF0300  BRANCH    COMPCNT,RZSF0301:            * identifier (ST)
                            RZSF0302:            * text (ST)
                            RZSF0303:            * name of coding system (ST)
                            RZSF0304:            * alternate identifier (ST)
                            RZSF0305:            * alternate text (ST)
                            RZSF0306             * name of alt. cod. system (ST)
          GOTO      RZSF9999
.
RZSF0301  RESET     ZSF00301                     * identifier (ST)
          GOTO      RZSF9999
.
RZSF0302  RESET     ZSF00302                     * text (ST)
          GOTO      RZSF9999
.
RZSF0303  RESET     ZSF00303                     * name of coding system (ST)
          GOTO      RZSF9999
.
RZSF0304  RESET     ZSF00304                     * alternate identifier (ST)
          GOTO      RZSF9999
.
RZSF0305  RESET     ZSF00305                     * alternate text (ST)
          GOTO      RZSF9999
.
RZSF0306  RESET     ZSF00306                     * name of alt. cod. system (ST)
          GOTO      RZSF9999
.
.         ZSF.4  HCP Status for Campus (ID)
.
RZSF0400  BRANCH    COMPCNT,RZSF0401             * status identifier (ID)
          GOTO      RZSF9999
.
RZSF0401  RESET     ZSF00401
          GOTO      RZSF9999
.
.         ZSF.5  Doctor Provider Number (ST)
.
RZSF0500  BRANCH    COMPCNT,RZSF0501             * text (ST)
          GOTO      RZSF9999
.
RZSF0501  RESET     ZSF00501
          GOTO      RZSF9999
.
.         ZSF.6  Accreditation Details (CM)
.
RZSF0600  BRANCH    COMPCNT,RZSF0601:            * accreditation type (ST)
                            RZSF0602:            * accreditation id (ID)
                            RZSF0603:            * accreditation expiry date(DT)
                            RZSF0604             * accreditation years (ST)
          GOTO      RZSF9999
.
RZSF0601  RESET     ZSF00601                     * accreditation type (ST)
          GOTO      RZSF9999
.
RZSF0602  RESET     ZSF00602                     * accreditation id (ID)
          GOTO      RZSF9999
.
RZSF0603  RESET     ZSF00603                     * accreditation expiry date(DT)
          GOTO      RZSF9999
.
RZSF0604  RESET     ZSF00604                     * accreditation years (ST)
          GOTO      RZSF9999
.
.         ZSF.7  Active/Inactive Flag (ID)
.
RZSF0700  BRANCH    COMPCNT,RZSF0701             * text (ID)
          GOTO      RZSF9999
.
RZSF0701  RESET     ZSF00701
          GOTO      RZSF9999
.
.         ZSF.8  Institution Active Date (DT)
.
RZSF0800  BRANCH    COMPCNT,RZSF0801             * active date (DT)
          GOTO      RZSF9999
.
RZSF0801  RESET     ZSF00801
          GOTO      RZSF9999

.         ZSF.9  Institution Inactive Date (DT)
.
RZSF0900  BRANCH    COMPCNT,RZSF0901             * inactive date (DT)
          GOTO      RZSF9999
.
RZSF0901  RESET     ZSF00901
          GOTO      RZSF9999
.
RZSF9999  RETURN
+
.*****************************************************************************
.*                                 RSCH0000        Called by: PROC0000       *
.*                          Reset the SCH field                              *
.*****************************************************************************
.
RSCH0000  BRANCH    FIELDNO,RSCH0100:            * Placer Appt. ID (EI)
                            RSCH0200:            * Filler Appt. ID (EI)
                            RSCH0300:            * Occurrence Number (NM)
                            RSCH0400:            * Placer Group Number (EI)
                            RSCH0500:            * Schedule ID (CE)
                            RSCH0600:            * Event Reason (CE)
                            RSCH0700:            * Appointment Reason (CE)
                            RSCH0800:            * Appointment Type (CE)
                            RSCH0900:            * Appointment Duration (NM)
                            RSCH1000:            * Appt. Duration Units (CE)
                            RSCH1100:            * Appt. Timing Quantity (TQ)
                            RSCH1200:            * Placer Contact Person (XCN)
                            RSCH1300:            * Placer Contact Ph. No. (XTN)
                            RSCH1400:            * Placer Contact Address (XAD)
                            RSCH1500:            * Placer Contact Location (PL)
                            RSCH1600:            * Filler Contact Person (XCN)
                            RSCH1700:            * Filler Contact Ph. No. (XTN)
                            RSCH1800:            * Filler Contact Address (XAD)
                            RSCH1900:            * Filler Contact Location (PL)
                            RSCH2000:            * Entered by Person (XCN)
                            RSCH2100:            * Entered by Ph. No. (XTN)
                            RSCH2200:            * Entered by Location (PL)
                            RSCH2300:            * Parent Placer Appt. ID (EI)
                            RSCH2400:            * Parent Filler Appt. ID (EI)
                            RSCH2500             * Filler Status Code (CE)
.
.         Invalid SCH field received, so ignore it
.
          GOTO      RSCH9999
.
.         SCH.1  Placer Appointment ID (EI)
.
RSCH0100  BRANCH    COMPCNT,RSCH0101:            * entity identifier (ST)
                            RSCH0102:            * namespace id (IS)
                            RSCH0103:            * universal id (ST)
                            RSCH0104             * universal id type (ID)
          GOTO      RSCH9999
.
RSCH0101  RESET     SCH00101                     * load entity identifier (ST)
          GOTO      RSCH9999
.
RSCH0102  RESET     SCH00102                     * load namespace id (IS)
          GOTO      RSCH9999
.
RSCH0103  RESET     SCH00103                     * load universal id (ST)
          GOTO      RSCH9999
.
RSCH0104  RESET     SCH00104                     * load universal id type (ID)
          GOTO      RSCH9999
.
.         SCH.2  Filler Appointment ID (EI)
.
RSCH0200  BRANCH    COMPCNT,RSCH0201:            * entity identifier (ST)
                            RSCH0202:            * namespace id (IS)
                            RSCH0203:            * universal id (ST)
                            RSCH0204             * universal id type (ID)
          GOTO      RSCH9999
.
RSCH0201  RESET     SCH00201                     * load entity identifier (ST)
          GOTO      RSCH9999
.
RSCH0202  RESET     SCH00202                     * load namespace id (IS)
          GOTO      RSCH9999
.
RSCH0203  RESET     SCH00203                     * load universal id (ST)
          GOTO      RSCH9999
.
RSCH0204  RESET     SCH00204                     * load universal id type (ID)
          GOTO      RSCH9999
.
.         SCH.3  Occurrence Number (NM)
.
RSCH0300  BRANCH    COMPCNT,RSCH0301
.
RSCH0301  RESET     SCH00301
          GOTO      RSCH9999
.
.         SCH.4  Filler Appointment ID (EI)
.
RSCH0400  BRANCH    COMPCNT,RSCH0401:            * entity identifier (ST)
                            RSCH0402:            * namespace id (IS)
                            RSCH0403:            * universal id (ST)
                            RSCH0404             * universal id type (ID)
          GOTO      RSCH9999
.
RSCH0401  RESET     SCH00401                     * load entity identifier (ST)
          GOTO      RSCH9999
.
RSCH0402  RESET     SCH00402                     * load namespace id (IS)
          GOTO      RSCH9999
.
RSCH0403  RESET     SCH00403                     * load universal id (ST)
          GOTO      RSCH9999
.
RSCH0404  RESET     SCH00404                     * load universal id type (ID)
          GOTO      RSCH9999
.
.         SCH.5  Schedule ID (CE)
.
RSCH0500  BRANCH    COMPCNT,RSCH0501:            * identifier (ST)
                            RSCH0502:            * text (ST)
                            RSCH0503:            * name of coding system (ST)
                            RSCH0504:            * alternate identifier (ST)
                            RSCH0505:            * alternate text (ST)
                            RSCH0506             * name of alt. cod. system (ST)
          GOTO      RSCH9999
.
RSCH0501  RESET     SCH00501                     * identifier (ST)
          GOTO      RSCH9999
.
RSCH0502  RESET     SCH00502                     * text (ST)
          GOTO      RSCH9999
.
RSCH0503  RESET     SCH00503                     * name of coding system (ST)
          GOTO      RSCH9999
.
RSCH0504  RESET     SCH00504                     * alternate identifier (ST)
          GOTO      RSCH9999
.
RSCH0505  RESET     SCH00505                     * alternate text (ST)
          GOTO      RSCH9999
.
RSCH0506  RESET     SCH00506                     * name of alt. cod. system (ST)
          GOTO      RSCH9999
.
.         SCH.6  Event Reason (CE)
.
RSCH0600  BRANCH    COMPCNT,RSCH0601:            * identifier (ST)
                            RSCH0602:            * text (ST)
                            RSCH0603:            * name of coding system (ST)
                            RSCH0604:            * alternate identifier (ST)
                            RSCH0605:            * alternate text (ST)
                            RSCH0606             * name of alt. cod. system (ST)
          GOTO      RSCH9999
.
RSCH0601  RESET     SCH00601                     * identifier (ST)
          GOTO      RSCH9999
.
RSCH0602  RESET     SCH00602                     * text (ST)
          GOTO      RSCH9999
.
RSCH0603  RESET     SCH00603                     * name of coding system (ST)
          GOTO      RSCH9999
.
RSCH0604  RESET     SCH00604                     * alternate identifier (ST)
          GOTO      RSCH9999
.
RSCH0605  RESET     SCH00605                     * alternate text (ST)
          GOTO      RSCH9999
.
RSCH0606  RESET     SCH00606                     * name of alt. cod. system (ST)
          GOTO      RSCH9999
.
.         SCH.7  Appointment Reason (CE)
.
RSCH0700  BRANCH    COMPCNT,RSCH0701:            * identifier (ST)
                            RSCH0702:            * text (ST)
                            RSCH0703:            * name of coding system (ST)
                            RSCH0704:            * alternate identifier (ST)
                            RSCH0705:            * alternate text (ST)
                            RSCH0706             * name of alt. cod. system (ST)
          GOTO      RSCH9999
.
RSCH0701  RESET     SCH00701                     * identifier (ST)
          GOTO      RSCH9999
.
RSCH0702  RESET     SCH00702                     * text (ST)
          GOTO      RSCH9999
.
RSCH0703  RESET     SCH00703                     * name of coding system (ST)
          GOTO      RSCH9999
.
RSCH0704  RESET     SCH00704                     * alternate identifier (ST)
          GOTO      RSCH9999
.
RSCH0705  RESET     SCH00705                     * alternate text (ST)
          GOTO      RSCH9999
.
RSCH0706  RESET     SCH00706                     * name of alt. cod. system (ST)
          GOTO      RSCH9999
.
.         SCH.8  Appointment Type (CE)
.
RSCH0800  BRANCH    COMPCNT,RSCH0801:            * identifier (ST)
                            RSCH0802:            * text (ST)
                            RSCH0803:            * name of coding system (ST)
                            RSCH0804:            * alternate identifier (ST)
                            RSCH0805:            * alternate text (ST)
                            RSCH0806             * name of alt. cod. system (ST)
          GOTO      RSCH9999
.
RSCH0801  RESET     SCH00801                     * identifier (ST)
          GOTO      RSCH9999
.
RSCH0802  RESET     SCH00802                     * text (ST)
          GOTO      RSCH9999
.
RSCH0803  RESET     SCH00803                     * name of coding system (ST)
          GOTO      RSCH9999
.
RSCH0804  RESET     SCH00804                     * alternate identifier (ST)
          GOTO      RSCH9999
.
RSCH0805  RESET     SCH00805                     * alternate text (ST)
          GOTO      RSCH9999
.
RSCH0806  RESET     SCH00806                     * name of alt. cod. system (ST)
          GOTO      RSCH9999
.
.         SCH.9  Occurrence Number (NM)
.
RSCH0900  BRANCH    COMPCNT,RSCH0901
.
RSCH0901  RESET     SCH00901
          GOTO      RSCH9999
.
.         SCH.10  Appointment Duration Units (CE)
.
RSCH1000  BRANCH    COMPCNT,RSCH1001:            * identifier (ST)
                            RSCH1002:            * text (ST)
                            RSCH1003:            * name of coding system (ST)
                            RSCH1004:            * alternate identifier (ST)
                            RSCH1005:            * alternate text (ST)
                            RSCH1006             * name of alt. cod. system (ST)
          GOTO      RSCH9999
.
RSCH1001  RESET     SCH01001                     * identifier (ST)
          GOTO      RSCH9999
.
RSCH1002  RESET     SCH01002                     * text (ST)
          GOTO      RSCH9999
.
RSCH1003  RESET     SCH01003                     * name of coding system (ST)
          GOTO      RSCH9999
.
RSCH1004  RESET     SCH01004                     * alternate identifier (ST)
          GOTO      RSCH9999
.
RSCH1005  RESET     SCH01005                     * alternate text (ST)
          GOTO      RSCH9999
.
RSCH1006  RESET     SCH01006                     * name of alt. cod. system (ST)
          GOTO      RSCH9999
.
.         SCH.11    (TQ)
.
RSCH1100  BRANCH    COMPCNT,RSCH1101:            * quantity (CQ)
                            RSCH1102:            * interval (CM)
                            RSCH1103:            * duration (ST)
                            RSCH1104:            * start date/time (TS)
                            RSCH1105:            * end date/time (TS)
                            RSCH1106:            * priority (ST)
                            RSCH1107:            * condition (ST)
                            RSCH1108:            * text (TX)
                            RSCH1109:            * conjunction (ST)
                            RSCH1110:            * order sequencing (CM)
                            RSCH1111:            * occurrence duration (CE)
                            RSCH1112             * total occurrences (NM)
          GOTO      RSCH9999
.
RSCH1101  RESET     SCH01101                     * quantity (CQ)
          GOTO      RSCH9999
.
RSCH1102  RESET     SCH01102                     * interval (CM)
          GOTO      RSCH9999
.
RSCH1103  RESET     SCH01103                     * duration (ST)
          GOTO      RSCH9999
.
RSCH1104  RESET     SCH01104                     * start date/time (TS)
          GOTO      RSCH9999
.
RSCH1105  RESET     SCH01105                     * end date/time (TS)
          GOTO      RSCH9999
.
RSCH1106  RESET     SCH01106                     * priority (ST)
          GOTO      RSCH9999
.
RSCH1107  RESET     SCH01107                     * condition (ST)
          GOTO      RSCH9999
.
RSCH1108  RESET     SCH01108                     * text (TX)
          GOTO      RSCH9999
.
RSCH1109  RESET     SCH01109                     * conjunction (ST)
          GOTO      RSCH9999
.
RSCH1110  RESET     SCH01110                     * order sequencing (CM)
          GOTO      RSCH9999
.
RSCH1111  RESET     SCH01111                     * occurrence duration (CE)
          GOTO      RSCH9999
.
RSCH1112  RESET     SCH01112                     * total occurrences (NM)
          GOTO      RSCH9999
.
.         SCH.12 Placer Contact Person (XCN)
.
RSCH1200  BRANCH    COMPCNT,RSCH1201:            * id number (ST)
                            RSCH1202:            * family name (ST)
                            RSCH1203:            * given name (ST)
                            RSCH1204:            * middle name (ST)
                            RSCH1205:            * suffix (ST)
                            RSCH1206:            * prefix (ST)
                            RSCH1207:            * degree (IS)
                            RSCH1208:            * source table (IS)
                            RSCH1209:            * assigning authority (HD)
                            RSCH1210:            * name type code (ID)
                            RSCH1211:            * identifier check digit (ST)
                            RSCH1212:            * check digit scheme code (ID)
                            RSCH1213:            * identifier type code (IS)
                            RSCH1214:            * assigning facility (HD)
                            RSCH1215             * name representation code (ID)
          GOTO      RSCH9999
.
RSCH1201  RESET     SCH01201                     * load id number (ST)
          GOTO      RSCH9999
.
RSCH1202  RESET     SCH01202                     * load family name (ST)
          GOTO      RSCH9999
.
RSCH1203  RESET     SCH01203                     * load given name (ST)
          GOTO      RSCH9999
.
RSCH1204  RESET     SCH01204                     * load middle name (ST)
          GOTO      RSCH9999
.
RSCH1205  RESET     SCH01205                     * load suffix (ST)
          GOTO      RSCH9999
.
RSCH1206  RESET     SCH01206                     * load prefix (ST)
          GOTO      RSCH9999
.
RSCH1207  RESET     SCH01207                     * load degree (IS)
          GOTO      RSCH9999
.
RSCH1208  RESET     SCH01208                     * load source table (IS)
          GOTO      RSCH9999
.
RSCH1209  RESET     SCH01209                     * load assigning authority (HD)
          GOTO      RSCH9999
.
RSCH1210  RESET     SCH01210                     * load name type code (ID)
          GOTO      RSCH9999
.
RSCH1211  RESET     SCH01211                     * load ident. check digit (ST)
          GOTO      RSCH9999
.
RSCH1212  RESET     SCH01212                     * load chk dig scheme code (ID)
          GOTO      RSCH9999
.
RSCH1213  RESET     SCH01213                     * load ident. type code (IS)
          GOTO      RSCH9999
.
RSCH1214  RESET     SCH01214                     * load assigning facility (HD)
          GOTO      RSCH9999
.
RSCH1215  RESET     SCH01215                     * load name repres. code (ID)
          GOTO      RSCH9999
.
.         SCH.13 Placer Contact Phone Number (XTN)
.
RSCH1300  BRANCH    COMPCNT,RSCH1301:            * text
                            RSCH1302:            * telecomm. use code (ID)
                            RSCH1303:            * telcomm. equipment type (ID)
                            RSCH1304:            * email address (ST)
                            RSCH1305:            * country code (NM)
                            RSCH1306:            * area/city code (NM)
                            RSCH1307:            * phone number (NM)
                            RSCH1308:            * extension (NM)
                            RSCH1309             * any text (ST)
          GOTO      RSCH9999
.
RSCH1301  RESET     SCH01301                     * load text
          GOTO      RSCH9999
.
RSCH1302  RESET     SCH01302                     * load telecomm. use code (ID)
          GOTO      RSCH9999
.
RSCH1303  RESET     SCH01303                     * load telcomm. equip.type (ID)
          GOTO      RSCH9999
.
RSCH1304  RESET     SCH01304                     * load email address (ST)
          GOTO      RSCH9999
.
RSCH1305  RESET     SCH01305                     * load country code (NM)
          GOTO      RSCH9999
.
RSCH1306  RESET     SCH01306                     * load area/city code (NM)
          GOTO      RSCH9999
.
RSCH1307  RESET     SCH01307                     * load phone number (NM)
          GOTO      RSCH9999
.
RSCH1308  RESET     SCH01308                     * load extension (NM)
          GOTO      RSCH9999
.
RSCH1309  RESET     SCH01309                     * load any text (ST)
          GOTO      RSCH9999
.
.         SCH.14 Placer Contact Address (XAD)
.
RSCH1400  BRANCH    COMPCNT,RSCH1401:            * street address (ST)
                            RSCH1402:            * other designation (ST)
                            RSCH1403:            * city (ST)
                            RSCH1404:            * state (ST)
                            RSCH1405:            * postcode (ST)
                            RSCH1406:            * country (ID)
                            RSCH1407:            * address type (ID)
                            RSCH1408:            * other geographic desig. (ST)
                            RSCH1409:            * county (IS)
                            RSCH1410:            * census tract (IS)
                            RSCH1411             * address rep. code (ID)
          GOTO      RSCH9999
.
RSCH1401  RESET     SCH01401                     * load street address (ST)
          MOVE      SCH01401,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,SCH01401
          REP       UPPLOW,SCH01401
          MATCH     BLANKSTR,SCH01401
          IF        !@EQUAL
            REP       "#"'",SCH01401
          ENDIF
          GOTO      RSCH9999
.
RSCH1402  RESET     SCH01402                     * load other designation (ST)
          MOVE      SCH01402,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,SCH01402
          REP       UPPLOW,SCH01402
          MATCH     BLANKSTR,SCH01402
          IF        !@EQUAL
            REP       "#"'",SCH01402
          ENDIF
          GOTO      RSCH9999
.
RSCH1403  RESET     SCH01403                     * load city (ST)
          MOVE      SCH01403,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,SCH01403
          REP       UPPLOW,SCH01403
          MATCH     BLANKSTR,SCH01403
          IF        !@EQUAL
            REP       "#"'",SCH01403
          ENDIF
          GOTO      RSCH9999
.
RSCH1404  RESET     SCH01404                     * load state (ST)
          MOVE      SCH01404,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,SCH01404
          REP       UPPLOW,SCH01404
          MATCH     BLANKSTR,SCH01404
          IF        !@EQUAL
            REP       "#"'",SCH01404
          ENDIF
          GOTO      RSCH9999
.
RSCH1405  RESET     SCH01405                     * load postcode (ST)
          MOVE      SCH01405,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,SCH01405
          GOTO      RSCH9999
.
RSCH1406  RESET     SCH01406                     * load country (ID)
          GOTO      RSCH9999
.
RSCH1407  RESET     SCH01407                     * load address type (ID)
          GOTO      RSCH9999
.
RSCH1408  RESET     SCH01408                     * load other geog. desig. (ST)
          GOTO      RSCH9999
.
RSCH1409  RESET     SCH01409                     * load county (IS)
          GOTO      RSCH9999
.
RSCH1410  RESET     SCH01410                     * load census tract (IS)
          GOTO      RSCH9999
.
RSCH1411  RESET     SCH01411                     * load address rep code (ID)
          GOTO      RSCH9999
.
.         SCH.15 Placer Contact Location (PL)
.                           
RSCH1500  BRANCH    COMPCNT,RSCH1501:            * point of care (IS)
                            RSCH1502:            * room (IS)
                            RSCH1503:            * bed (IS)
                            RSCH1504:            * facility (HD)
                            RSCH1505:            * location status (IS)
                            RSCH1506:            * person location type (IS)
                            RSCH1507:            * building (IS)
                            RSCH1508:            * floor (IS)
                            RSCH1509             * location description (ST)
          GOTO      RSCH9999
.                           
RSCH1501  RESET     SCH01501
          GOTO      RSCH9999
.                           
RSCH1502  RESET     SCH01502
          GOTO      RSCH9999
.                           
RSCH1503  RESET     SCH01503
          GOTO      RSCH9999
.                           
RSCH1504  RESET     SCH01504
          GOTO      RSCH9999
.                           
RSCH1505  RESET     SCH01505
          GOTO      RSCH9999
.                           
RSCH1506  RESET     SCH01506
          GOTO      RSCH9999
.                           
RSCH1507  RESET     SCH01507
          GOTO      RSCH9999
.                           
RSCH1508  RESET     SCH01508
          GOTO      RSCH9999
.                           
RSCH1509  RESET     SCH01509
          GOTO      RSCH9999
.
.         SCH.16 Filler Contact Person (XCN)
.
RSCH1600  BRANCH    COMPCNT,RSCH1601:            * id number (ST)
                            RSCH1602:            * family name (ST)
                            RSCH1603:            * given name (ST)
                            RSCH1604:            * middle name (ST)
                            RSCH1605:            * suffix (ST)
                            RSCH1606:            * prefix (ST)
                            RSCH1607:            * degree (IS)
                            RSCH1608:            * source table (IS)
                            RSCH1609:            * assigning authority (HD)
                            RSCH1610:            * name type code (ID)
                            RSCH1611:            * identifier check digit (ST)
                            RSCH1612:            * check digit scheme code (ID)
                            RSCH1613:            * identifier type code (IS)
                            RSCH1614:            * assigning facility (HD)
                            RSCH1615             * name representation code (ID)
          GOTO      RSCH9999
.
RSCH1601  RESET     SCH01601                     * load id number (ST)
          GOTO      RSCH9999
.
RSCH1602  RESET     SCH01602                     * load family name (ST)
          GOTO      RSCH9999
.
RSCH1603  RESET     SCH01603                     * load given name (ST)
          GOTO      RSCH9999
.
RSCH1604  RESET     SCH01604                     * load middle name (ST)
          GOTO      RSCH9999
.
RSCH1605  RESET     SCH01605                     * load suffix (ST)
          GOTO      RSCH9999
.
RSCH1606  RESET     SCH01606                     * load prefix (ST)
          GOTO      RSCH9999
.
RSCH1607  RESET     SCH01607                     * load degree (IS)
          GOTO      RSCH9999
.
RSCH1608  RESET     SCH01608                     * load source table (IS)
          GOTO      RSCH9999
.
RSCH1609  RESET     SCH01609                     * load assigning authority (HD)
          GOTO      RSCH9999
.
RSCH1610  RESET     SCH01610                     * load name type code (ID)
          GOTO      RSCH9999
.
RSCH1611  RESET     SCH01611                     * load ident. check digit (ST)
          GOTO      RSCH9999
.
RSCH1612  RESET     SCH01612                     * load chk dig scheme code (ID)
          GOTO      RSCH9999
.
RSCH1613  RESET     SCH01613                     * load ident. type code (IS)
          GOTO      RSCH9999
.
RSCH1614  RESET     SCH01614                     * load assigning facility (HD)
          GOTO      RSCH9999
.
RSCH1615  RESET     SCH01615                     * load name repres. code (ID)
          GOTO      RSCH9999
.
.         SCH.17 Filler Contact Phone Number (XTN)
.
RSCH1700  BRANCH    COMPCNT,RSCH1701:            * text
                            RSCH1702:            * telecomm. use code (ID)
                            RSCH1703:            * telcomm. equipment type (ID)
                            RSCH1704:            * email address (ST)
                            RSCH1705:            * country code (NM)
                            RSCH1706:            * area/city code (NM)
                            RSCH1707:            * phone number (NM)
                            RSCH1708:            * extension (NM)
                            RSCH1709             * any text (ST)
          GOTO      RSCH9999
.
RSCH1701  RESET     SCH01701                     * load text
          GOTO      RSCH9999
.
RSCH1702  RESET     SCH01702                     * load telecomm. use code (ID)
          GOTO      RSCH9999
.
RSCH1703  RESET     SCH01703                     * load telcomm. equip.type (ID)
          GOTO      RSCH9999
.
RSCH1704  RESET     SCH01704                     * load email address (ST)
          GOTO      RSCH9999
.
RSCH1705  RESET     SCH01705                     * load country code (NM)
          GOTO      RSCH9999
.
RSCH1706  RESET     SCH01706                     * load area/city code (NM)
          GOTO      RSCH9999
.
RSCH1707  RESET     SCH01707                     * load phone number (NM)
          GOTO      RSCH9999
.
RSCH1708  RESET     SCH01708                     * load extension (NM)
          GOTO      RSCH9999
.
RSCH1709  RESET     SCH01709                     * load any text (ST)
          GOTO      RSCH9999
.
.         SCH.18 Filler Contact Address (XAD)
.
RSCH1800  BRANCH    COMPCNT,RSCH1801:            * street address (ST)
                            RSCH1802:            * other designation (ST)
                            RSCH1803:            * city (ST)
                            RSCH1804:            * state (ST)
                            RSCH1805:            * postcode (ST)
                            RSCH1806:            * country (ID)
                            RSCH1807:            * address type (ID)
                            RSCH1808:            * other geographic desig. (ST)
                            RSCH1809:            * county (IS)
                            RSCH1810:            * census tract (IS)
                            RSCH1811             * address rep. code (ID)
          GOTO      RSCH9999
.
RSCH1801  RESET     SCH01801                     * load street address (ST)
          MOVE      SCH01801,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,SCH01801
          REP       UPPLOW,SCH01801
          MATCH     BLANKSTR,SCH01801
          IF        !@EQUAL
            REP       "#"'",SCH01801
          ENDIF
          GOTO      RSCH9999
.
RSCH1802  RESET     SCH01802                     * load other designation (ST)
          MOVE      SCH01802,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,SCH01802
          REP       UPPLOW,SCH01802
          MATCH     BLANKSTR,SCH01802
          IF        !@EQUAL
            REP       "#"'",SCH01802
          ENDIF
          GOTO      RSCH9999
.
RSCH1803  RESET     SCH01803                     * load city (ST)
          MOVE      SCH01803,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,SCH01803
          REP       UPPLOW,SCH01803
          MATCH     BLANKSTR,SCH01803
          IF        !@EQUAL
            REP       "#"'",SCH01803
          ENDIF
          GOTO      RSCH9999
.
RSCH1804  RESET     SCH01804                     * load state (ST)
          MOVE      SCH01804,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,SCH01804
          REP       UPPLOW,SCH01804
          MATCH     BLANKSTR,SCH01804
          IF        !@EQUAL
            REP       "#"'",SCH01804
          ENDIF
          GOTO      RSCH9999
.
RSCH1805  RESET     SCH01805                     * load postcode (ST)
          MOVE      SCH01805,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,SCH01805
          GOTO      RSCH9999
.
RSCH1806  RESET     SCH01806                     * load country (ID)
          GOTO      RSCH9999
.
RSCH1807  RESET     SCH01807                     * load address type (ID)
          GOTO      RSCH9999
.
RSCH1808  RESET     SCH01808                     * load other geog. desig. (ST)
          GOTO      RSCH9999
.
RSCH1809  RESET     SCH01809                     * load county (IS)
          GOTO      RSCH9999
.
RSCH1810  RESET     SCH01810                     * load census tract (IS)
          GOTO      RSCH9999
.
RSCH1811  RESET     SCH01811                     * load address rep code (ID)
          GOTO      RSCH9999
.
.         SCH.19 Placer Contact Location (PL)
.                           
RSCH1900  BRANCH    COMPCNT,RSCH1901:            * point of care (IS)
                            RSCH1902:            * room (IS)
                            RSCH1903:            * bed (IS)
                            RSCH1904:            * facility (HD)
                            RSCH1905:            * location status (IS)
                            RSCH1906:            * person location type (IS)
                            RSCH1907:            * building (IS)
                            RSCH1908:            * floor (IS)
                            RSCH1909             * location description (ST)
          GOTO      RSCH9999
.                           
RSCH1901  RESET     SCH01901
          GOTO      RSCH9999
.                           
RSCH1902  RESET     SCH01902
          GOTO      RSCH9999
.                           
RSCH1903  RESET     SCH01903
          GOTO      RSCH9999
.                           
RSCH1904  RESET     SCH01904
          GOTO      RSCH9999
.                           
RSCH1905  RESET     SCH01905
          GOTO      RSCH9999
.                           
RSCH1906  RESET     SCH01906
          GOTO      RSCH9999
.                           
RSCH1907  RESET     SCH01907
          GOTO      RSCH9999
.                           
RSCH1908  RESET     SCH01908
          GOTO      RSCH9999
.                           
RSCH1909  RESET     SCH01909
          GOTO      RSCH9999
.
.         SCH.20 Entered By Person (XCN)
.
RSCH2000  BRANCH    COMPCNT,RSCH2001:            * id number (ST)
                            RSCH2002:            * family name (ST)
                            RSCH2003:            * given name (ST)
                            RSCH2004:            * middle name (ST)
                            RSCH2005:            * suffix (ST)
                            RSCH2006:            * prefix (ST)
                            RSCH2007:            * degree (IS)
                            RSCH2008:            * source table (IS)
                            RSCH2009:            * assigning authority (HD)
                            RSCH2010:            * name type code (ID)
                            RSCH2011:            * identifier check digit (ST)
                            RSCH2012:            * check digit scheme code (ID)
                            RSCH2013:            * identifier type code (IS)
                            RSCH2014:            * assigning facility (HD)
                            RSCH2015             * name representation code (ID)
          GOTO      RSCH9999
.
RSCH2001  RESET     SCH02001                     * load id number (ST)
          GOTO      RSCH9999
.
RSCH2002  RESET     SCH02002                     * load family name (ST)
          GOTO      RSCH9999
.
RSCH2003  RESET     SCH02003                     * load given name (ST)
          GOTO      RSCH9999
.
RSCH2004  RESET     SCH02004                     * load middle name (ST)
          GOTO      RSCH9999
.
RSCH2005  RESET     SCH02005                     * load suffix (ST)
          GOTO      RSCH9999
.
RSCH2006  RESET     SCH02006                     * load prefix (ST)
          GOTO      RSCH9999
.
RSCH2007  RESET     SCH02007                     * load degree (IS)
          GOTO      RSCH9999
.
RSCH2008  RESET     SCH02008                     * load source table (IS)
          GOTO      RSCH9999
.
RSCH2009  RESET     SCH02009                     * load assigning authority (HD)
          GOTO      RSCH9999
.
RSCH2010  RESET     SCH02010                     * load name type code (ID)
          GOTO      RSCH9999
.
RSCH2011  RESET     SCH02011                     * load ident. check digit (ST)
          GOTO      RSCH9999
.
RSCH2012  RESET     SCH02012                     * load chk dig scheme code (ID)
          GOTO      RSCH9999
.
RSCH2013  RESET     SCH02013                     * load ident. type code (IS)
          GOTO      RSCH9999
.
RSCH2014  RESET     SCH02014                     * load assigning facility (HD)
          GOTO      RSCH9999
.
RSCH2015  RESET     SCH02015                     * load name repres. code (ID)
          GOTO      RSCH9999
.
.         SCH.21 Entered By Phone Number (XTN)
.
RSCH2100  BRANCH    COMPCNT,RSCH2101:            * text
                            RSCH2102:            * telecomm. use code (ID)
                            RSCH2103:            * telcomm. equipment type (ID)
                            RSCH2104:            * email address (ST)
                            RSCH2105:            * country code (NM)
                            RSCH2106:            * area/city code (NM)
                            RSCH2107:            * phone number (NM)
                            RSCH2108:            * extension (NM)
                            RSCH2109             * any text (ST)
          GOTO      RSCH9999
.
RSCH2101  RESET     SCH02101                     * load text
          GOTO      RSCH9999
.
RSCH2102  RESET     SCH02102                     * load telecomm. use code (ID)
          GOTO      RSCH9999
.
RSCH2103  RESET     SCH02103                     * load telcomm. equip.type (ID)
          GOTO      RSCH9999
.
RSCH2104  RESET     SCH02104                     * load email address (ST)
          GOTO      RSCH9999
.
RSCH2105  RESET     SCH02105                     * load country code (NM)
          GOTO      RSCH9999
.
RSCH2106  RESET     SCH02106                     * load area/city code (NM)
          GOTO      RSCH9999
.
RSCH2107  RESET     SCH02107                     * load phone number (NM)
          GOTO      RSCH9999
.
RSCH2108  RESET     SCH02108                     * load extension (NM)
          GOTO      RSCH9999
.
RSCH2109  RESET     SCH02109                     * load any text (ST)
          GOTO      RSCH9999
.
.         SCH.22 Entered By Location (PL)
.                           
RSCH2200  BRANCH    COMPCNT,RSCH2201:            * point of care (IS)
                            RSCH2202:            * room (IS)
                            RSCH2203:            * bed (IS)
                            RSCH2204:            * facility (HD)
                            RSCH2205:            * location status (IS)
                            RSCH2206:            * person location type (IS)
                            RSCH2207:            * building (IS)
                            RSCH2208:            * floor (IS)
                            RSCH2209             * location description (ST)
          GOTO      RSCH9999
.                           
RSCH2201  RESET     SCH02201
          GOTO      RSCH9999
.                           
RSCH2202  RESET     SCH02202
          GOTO      RSCH9999
.                           
RSCH2203  RESET     SCH02203
          GOTO      RSCH9999
.                           
RSCH2204  RESET     SCH02204
          GOTO      RSCH9999
.                           
RSCH2205  RESET     SCH02205
          GOTO      RSCH9999
.                           
RSCH2206  RESET     SCH02206
          GOTO      RSCH9999
.                           
RSCH2207  RESET     SCH02207
          GOTO      RSCH9999
.                           
RSCH2208  RESET     SCH02208
          GOTO      RSCH9999
.                           
RSCH2209  RESET     SCH02209
          GOTO      RSCH9999
.
.         SCH.23  Filler Appointment ID (EI)
.
RSCH2300  BRANCH    COMPCNT,RSCH2301:            * entity identifier (ST)
                            RSCH2302:            * namespace id (IS)
                            RSCH2303:            * universal id (ST)
                            RSCH2304             * universal id type (ID)
          GOTO      RSCH9999
.
RSCH2301  RESET     SCH02301                     * load entity identifier (ST)
          GOTO      RSCH9999
.
RSCH2302  RESET     SCH02302                     * load namespace id (IS)
          GOTO      RSCH9999
.
RSCH2303  RESET     SCH02303                     * load universal id (ST)
          GOTO      RSCH9999
.
RSCH2304  RESET     SCH02304                     * load universal id type (ID)
          GOTO      RSCH9999
.
.         SCH.24  Filler Appointment ID (EI)
.
RSCH2400  BRANCH    COMPCNT,RSCH2401:            * entity identifier (ST)
                            RSCH2402:            * namespace id (IS)
                            RSCH2403:            * universal id (ST)
                            RSCH2404             * universal id type (ID)
          GOTO      RSCH9999
.
RSCH2401  RESET     SCH02401                     * load entity identifier (ST)
          GOTO      RSCH9999
.
RSCH2402  RESET     SCH02402                     * load namespace id (IS)
          GOTO      RSCH9999
.
RSCH2403  RESET     SCH02403                     * load universal id (ST)
          GOTO      RSCH9999
.
RSCH2404  RESET     SCH02404                     * load universal id type (ID)
          GOTO      RSCH9999
.
.         SCH.25  Filler Status Code (CE)
.
RSCH2500  BRANCH    COMPCNT,RSCH2501:            * identifier (ST)
                            RSCH2502:            * text (ST)
                            RSCH2503:            * name of coding system (ST)
                            RSCH2504:            * alternate identifier (ST)
                            RSCH2505:            * alternate text (ST)
                            RSCH2506             * name of alt. cod. system (ST)
          GOTO      RSCH9999
.
RSCH2501  RESET     SCH02501                     * identifier (ST)
          GOTO      RSCH9999
.
RSCH2502  RESET     SCH02502                     * text (ST)
          GOTO      RSCH9999
.
RSCH2503  RESET     SCH02503                     * name of coding system (ST)
          GOTO      RSCH9999
.
RSCH2504  RESET     SCH02504                     * alternate identifier (ST)
          GOTO      RSCH9999
.
RSCH2505  RESET     SCH02505                     * alternate text (ST)
          GOTO      RSCH9999
.
RSCH2506  RESET     SCH02506                     * name of alt. cod. system (ST)
          GOTO      RSCH9999
.
RSCH9999  RETURN
+
.*****************************************************************************
.*                                 RZSC0000        Called by: PROC0000       *
.*                          Reset the ZSC field                              *
.*****************************************************************************
.
RZSC0000  BRANCH    FIELDNO,RZSC0100:            * Placer Appt. ID (EI)
                            RZSC0200:            * Theatre Date (TS)
                            RZSC0300:            * Theatre Start Time (TM)
                            RZSC0400:            * Anaesthetic Key (CE)
                            RZSC0500:            * Patient Arrives Time (TM)
                            RZSC0600:            * Anaesthetic Arrives Time (TM)
                            RZSC0700:            * Surgery Start Time (TM)
                            RZSC0800:            * Surgery Completed Time (TM)
                            RZSC0900:            * Pt. Out/Anaes. Stop Time (TM)
                            RZSC1000:            * ASA Score (CE)
                            RZSC1100:            * Operation Class Key (CE)
                            RZSC1200:            * Time Into Recovery (TM)
                            RZSC1300:            * Exit Theatre Complex (TM)
                            RZSC1400:            * Overnight Indicator (ID)
                            RZSC1500:            * Time Patient Called For (TM)
                            RZSC1600:            * Anaesthetic Time Out (TM)
                            RZSC1700:            * Anaesthetic Cannulation (TM)
                            RZSC1800:            * Surgical Time Out (TM)
                            RZSC1900:            * Ready For Recovery (TM)
                            RZSC2000:            * Time Into Recovery Front (TM)
                            RZSC2100:            * Time Into Recovery Back (TM)
                            RZSC2200:            * Ready To Depart Time (TM)
                            RZSC2300:            * Time To ICU (TM)
                            RZSC2400:            * Time Patient Died (TM)
                            RZSC2500:            * Clinical Review DateTime (TS)
                            RZSC2600:            * Admitting Nurse Code (XCN)
                            RZSC2700:            * Recov Nurse Day 1 Code (XCN)
                            RZSC2800:            * Recov Nurse Day 2 Code (XCN)
                            RZSC2900:            * Recov Nurse Front 1 Code(XCN)
                            RZSC3000:            * Recov Nurse Front 2 Code(XCN)
                            RZSC3100:            * Recov Nurse Back 1 Code (XCN)
                            RZSC3200:            * Recov Nurse Back 2 Code (XCN)
                            RZSC3300:            * Arrival Late Reason (CE)
                            RZSC3400:            * Anaesthetic Delay Reason (CE)
                            RZSC3500:            * Surg. Start Late Reason (CE)
                            RZSC3600:            * Reason For Overnight (CE)
                            RZSC3700:            * Recovery In Delay Reason (CE)
                            RZSC3800:            * Recovery Bay (CE)
                            RZSC3900:            * Acuity (CE)
                            RZSC4000:            * Recov. Exit Delay Reason (CE)
                            RZSC4100:            * Blood Loss (NM)
                            RZSC4200:            * Fast Post Recovery (ID)
                            RZSC4300:            * Admit Post Procedure (ID)
                            RZSC4400:            * No Recovery (ID)
                            RZSC4500:            * Case Abandoned (ID)
                            RZSC4600:            * Comments (ST)
                            RZSC4700:            * Preadmiss & Oper'n Notes (ST)
                            RZSC4800:            * Prosthesis (ST)
                            RZSC4900:            * Equipment/Items 1 (CE)
                            RZSC5000:            * Equipment/Items 2 (CE)
                            RZSC5100:            * Site Intact 1 (ID)
                            RZSC5200:            * Site Intact 2 (ID)
                            RZSC5300:            * Equipment/Item Used 1 (CE)
                            RZSC5400:            * Equipment/Item Used 2 (CE)
                            RZSC5500:            * Caesarean Birth Count (NM)
                            RZSC5600:            * Caesarean Birth Sex (IS)
                            RZSC5700:            * Caesarean Birth DateTime (TS)
                            RZSC5800:            * Caesarean Birth U/R (CX)
                            RZSC5900:            * Caesarean Birth Weight (NM)
                            RZSC6000:   * Ces. Birth Placenta Delivery Time (TM)
                            RZSC6100:            * Adm Nurse Start Time (TM)
                            RZSC6200:            * Adm Nurse End Time (TM)
                            RZSC6300:            * Wheels In Time (TM)
                            RZSC6400             * Wheels Out Time (TM)
.
.         Invalid ZSC field received, so ignore it
.
          GOTO      RZSC9999
.
.         ZSC.1  Placer Appointment ID (EI)
.
RZSC0100  BRANCH    COMPCNT,RZSC0101:            * entity identifier (ST)
                            RZSC0102:            * namespace id (IS)
                            RZSC0103:            * universal id (ST)
                            RZSC0104             * universal id type (ID)
          GOTO      RZSC9999
.
RZSC0101  RESET     ZSC00101                     * load entity identifier (ST)
          GOTO      RZSC9999
.
RZSC0102  RESET     ZSC00102                     * load namespace id (IS)
          GOTO      RZSC9999
.
RZSC0103  RESET     ZSC00103                     * load universal id (ST)
          GOTO      RZSC9999
.
RZSC0104  RESET     ZSC00104                     * load universal id type (ID)
          GOTO      RZSC9999
.
.         ZSC.2  Theatre Date (TS)
.
RZSC0200  BRANCH    COMPCNT,RZSC0201
.
RZSC0201  RESET     ZSC00201
          GOTO      RZSC9999
.
.         ZSC.3  Theatre Start Time (TM)
.
RZSC0300  BRANCH    COMPCNT,RZSC0301
.
RZSC0301  RESET     ZSC00301
          GOTO      RZSC9999
.
.         ZSC.4  Anaesthetic Key (CE)
.
RZSC0400  BRANCH    COMPCNT,RZSC0401:            * identifier (ST)
                            RZSC0402:            * text (ST)
                            RZSC0403:            * name of coding system (ST)
                            RZSC0404:            * alternate identifier (ST)
                            RZSC0405:            * alternate text (ST)
                            RZSC0406             * name of alt. cod. system (ST)
          GOTO      RZSC9999
.
RZSC0401  RESET     ZSC00401                     * identifier (ST)
          GOTO      RZSC9999
.
RZSC0402  RESET     ZSC00402                     * text (ST)
          GOTO      RZSC9999
.
RZSC0403  RESET     ZSC00403                     * name of coding system (ST)
          GOTO      RZSC9999
.
RZSC0404  RESET     ZSC00404                     * alternate identifier (ST)
          GOTO      RZSC9999
.
RZSC0405  RESET     ZSC00405                     * alternate text (ST)
          GOTO      RZSC9999
.
RZSC0406  RESET     ZSC00406                     * name of alt. cod. system (ST)
          GOTO      RZSC9999
.
.         ZSC.5  Patient Arrives Time (TM)
.
RZSC0500  BRANCH    COMPCNT,RZSC0501
.
RZSC0501  RESET     ZSC00501
          GOTO      RZSC9999
.
.         ZSC.6  Anaesthetic Arrives Time (TM)
.
RZSC0600  BRANCH    COMPCNT,RZSC0601
.
RZSC0601  RESET     ZSC00601
          GOTO      RZSC9999
.
.         ZSC.7  Surgery Start Time (TM)
.
RZSC0700  BRANCH    COMPCNT,RZSC0701
.
RZSC0701  RESET     ZSC00701
          GOTO      RZSC9999
.
.         ZSC.8  Surgery Completed Time (TM)
.
RZSC0800  BRANCH    COMPCNT,RZSC0801
.
RZSC0801  RESET     ZSC00801
          GOTO      RZSC9999
.
.         ZSC.9  Patient Out/Anaesthetic Stop Time (TM)
.
RZSC0900  BRANCH    COMPCNT,RZSC0901
.
RZSC0901  RESET     ZSC00901
          GOTO      RZSC9999
.
.         ZSC.10 ASA Score (CE)
.
RZSC1000  BRANCH    COMPCNT,RZSC1001:            * identifier (ST)
                            RZSC1002:            * text (ST)
                            RZSC1003:            * name of coding system (ST)
                            RZSC1004:            * alternate identifier (ST)
                            RZSC1005:            * alternate text (ST)
                            RZSC1006             * name of alt. cod. system (ST)
          GOTO      RZSC9999
.
RZSC1001  RESET     ZSC01001                     * identifier (ST)
          GOTO      RZSC9999
.
RZSC1002  RESET     ZSC01002                     * text (ST)
          GOTO      RZSC9999
.
RZSC1003  RESET     ZSC01003                     * name of coding system (ST)
          GOTO      RZSC9999
.
RZSC1004  RESET     ZSC01004                     * alternate identifier (ST)
          GOTO      RZSC9999
.
RZSC1005  RESET     ZSC01005                     * alternate text (ST)
          GOTO      RZSC9999
.
RZSC1006  RESET     ZSC01006                     * name of alt. cod. system (ST)
          GOTO      RZSC9999
.
.         ZSC.11 Operation Class Key (CE)
.
RZSC1100  BRANCH    COMPCNT,RZSC1101:            * identifier (ST)
                            RZSC1102:            * text (ST)
                            RZSC1103:            * name of coding system (ST)
                            RZSC1104:            * alternate identifier (ST)
                            RZSC1105:            * alternate text (ST)
                            RZSC1106             * name of alt. cod. system (ST)
          GOTO      RZSC9999
.
RZSC1101  RESET     ZSC01101                     * identifier (ST)
          GOTO      RZSC9999
.
RZSC1102  RESET     ZSC01102                     * text (ST)
          GOTO      RZSC9999
.
RZSC1103  RESET     ZSC01103                     * name of coding system (ST)
          GOTO      RZSC9999
.
RZSC1104  RESET     ZSC01104                     * alternate identifier (ST)
          GOTO      RZSC9999
.
RZSC1105  RESET     ZSC01105                     * alternate text (ST)
          GOTO      RZSC9999
.
RZSC1106  RESET     ZSC01106                     * name of alt. cod. system (ST)
          GOTO      RZSC9999
.
.         ZSC.12  Time Into Recovery (TM)
.
RZSC1200  BRANCH    COMPCNT,RZSC1201
.
RZSC1201  RESET     ZSC01201
          GOTO      RZSC9999
.
.         ZSC.13  Exit Theatre Complex (TM)
.
RZSC1300  BRANCH    COMPCNT,RZSC1301
.
RZSC1301  RESET     ZSC01301
          GOTO      RZSC9999
.
.         ZSC.14  Overnight Indicator (ID)
.
RZSC1400  BRANCH    COMPCNT,RZSC1401
.
RZSC1401  RESET     ZSC01401
          GOTO      RZSC9999
.
.         ZSC.15  Time Patient Called For (TM)
.
RZSC1500  BRANCH    COMPCNT,RZSC1501
.
RZSC1501  RESET     ZSC01501
          GOTO      RZSC9999
.
.         ZSC.16  Anaesthetic Time Out (TM)
.
RZSC1600  BRANCH    COMPCNT,RZSC1601
.
RZSC1601  RESET     ZSC01601
          GOTO      RZSC9999
.
.         ZSC.17  Anaesthetic Cannulation (TM)
.
RZSC1700  BRANCH    COMPCNT,RZSC1701
.
RZSC1701  RESET     ZSC01701
          GOTO      RZSC9999
.
.         ZSC.18  Surgical Time Out (TM)
.
RZSC1800  BRANCH    COMPCNT,RZSC1801
.
RZSC1801  RESET     ZSC01801
          GOTO      RZSC9999
.
.         ZSC.19  Ready For Recovery (TM)
.
RZSC1900  BRANCH    COMPCNT,RZSC1901
.
RZSC1901  RESET     ZSC01901
          GOTO      RZSC9999
.
.         ZSC.20  Time Into Recovery Front (TM)
.
RZSC2000  BRANCH    COMPCNT,RZSC2001
.
RZSC2001  RESET     ZSC02001
          GOTO      RZSC9999
.
.         ZSC.21  Time Into Recovery Back (TM)
.
RZSC2100  BRANCH    COMPCNT,RZSC2101
.
RZSC2101  RESET     ZSC02101
          GOTO      RZSC9999
.
.         ZSC.22  Ready To Depart Time (TM)
.
RZSC2200  BRANCH    COMPCNT,RZSC2201
.
RZSC2201  RESET     ZSC02201
          GOTO      RZSC9999
.
.         ZSC.23  Time To ICU (TM)
.
RZSC2300  BRANCH    COMPCNT,RZSC2301
.
RZSC2301  RESET     ZSC02301
          GOTO      RZSC9999
.
.         ZSC.24  Time Patient Died (TM)
.
RZSC2400  BRANCH    COMPCNT,RZSC2401
.
RZSC2401  RESET     ZSC02401
          GOTO      RZSC9999
.
.         ZSC.25  Clinical Review Date/Time (TS)
.
RZSC2500  BRANCH    COMPCNT,RZSC2501
.
RZSC2501  RESET     ZSC02501
          GOTO      RZSC9999
.
.         ZSC.26 Admitting Nurse Code (XCN)
.
RZSC2600  BRANCH    COMPCNT,RZSC2601:            * id number (ST)
                            RZSC2602:            * family name (ST)
                            RZSC2603:            * given name (ST)
                            RZSC2604:            * middle name (ST)
                            RZSC2605:            * suffix (ST)
                            RZSC2606:            * prefix (ST)
                            RZSC2607:            * degree (IS)
                            RZSC2608:            * source table (IS)
                            RZSC2609:            * assigning authority (HD)
                            RZSC2610:            * name type code (ID)
                            RZSC2611:            * identifier check digit (ST)
                            RZSC2612:            * check digit scheme code (ID)
                            RZSC2613:            * identifier type code (IS)
                            RZSC2614:            * assigning facility (HD)
                            RZSC2615             * name representation code (ID)
          GOTO      RZSC9999
.
RZSC2601  RESET     ZSC02601                     * load id number (ST)
          GOTO      RZSC9999
.
RZSC2602  RESET     ZSC02602                     * load family name (ST)
          GOTO      RZSC9999
.
RZSC2603  RESET     ZSC02603                     * load given name (ST)
          GOTO      RZSC9999
.
RZSC2604  RESET     ZSC02604                     * load middle name (ST)
          GOTO      RZSC9999
.
RZSC2605  RESET     ZSC02605                     * load suffix (ST)
          GOTO      RZSC9999
.
RZSC2606  RESET     ZSC02606                     * load prefix (ST)
          GOTO      RZSC9999
.
RZSC2607  RESET     ZSC02607                     * load degree (IS)
          GOTO      RZSC9999
.
RZSC2608  RESET     ZSC02608                     * load source table (IS)
          GOTO      RZSC9999
.
RZSC2609  RESET     ZSC02609                     * load assigning authority (HD)
          GOTO      RZSC9999
.
RZSC2610  RESET     ZSC02610                     * load name type code (ID)
          GOTO      RZSC9999
.
RZSC2611  RESET     ZSC02611                     * load ident. check digit (ST)
          GOTO      RZSC9999
.
RZSC2612  RESET     ZSC02612                     * load chk dig scheme code (ID)
          GOTO      RZSC9999
.
RZSC2613  RESET     ZSC02613                     * load ident. type code (IS)
          GOTO      RZSC9999
.
RZSC2614  RESET     ZSC02614                     * load assigning facility (HD)
          GOTO      RZSC9999
.
RZSC2615  RESET     ZSC02615                     * load name repres. code (ID)
          GOTO      RZSC9999
.
.         ZSC.27 Recovery Nurse Day 1 Code (XCN)
.
RZSC2700  BRANCH    COMPCNT,RZSC2701:            * id number (ST)
                            RZSC2702:            * family name (ST)
                            RZSC2703:            * given name (ST)
                            RZSC2704:            * middle name (ST)
                            RZSC2705:            * suffix (ST)
                            RZSC2706:            * prefix (ST)
                            RZSC2707:            * degree (IS)
                            RZSC2708:            * source table (IS)
                            RZSC2709:            * assigning authority (HD)
                            RZSC2710:            * name type code (ID)
                            RZSC2711:            * identifier check digit (ST)
                            RZSC2712:            * check digit scheme code (ID)
                            RZSC2713:            * identifier type code (IS)
                            RZSC2714:            * assigning facility (HD)
                            RZSC2715             * name representation code (ID)
          GOTO      RZSC9999
.
RZSC2701  RESET     ZSC02701                     * load id number (ST)
          GOTO      RZSC9999
.
RZSC2702  RESET     ZSC02702                     * load family name (ST)
          GOTO      RZSC9999
.
RZSC2703  RESET     ZSC02703                     * load given name (ST)
          GOTO      RZSC9999
.
RZSC2704  RESET     ZSC02704                     * load middle name (ST)
          GOTO      RZSC9999
.
RZSC2705  RESET     ZSC02705                     * load suffix (ST)
          GOTO      RZSC9999
.
RZSC2706  RESET     ZSC02706                     * load prefix (ST)
          GOTO      RZSC9999
.
RZSC2707  RESET     ZSC02707                     * load degree (IS)
          GOTO      RZSC9999
.
RZSC2708  RESET     ZSC02708                     * load source table (IS)
          GOTO      RZSC9999
.
RZSC2709  RESET     ZSC02709                     * load assigning authority (HD)
          GOTO      RZSC9999
.
RZSC2710  RESET     ZSC02710                     * load name type code (ID)
          GOTO      RZSC9999
.
RZSC2711  RESET     ZSC02711                     * load ident. check digit (ST)
          GOTO      RZSC9999
.
RZSC2712  RESET     ZSC02712                     * load chk dig scheme code (ID)
          GOTO      RZSC9999
.
RZSC2713  RESET     ZSC02713                     * load ident. type code (IS)
          GOTO      RZSC9999
.
RZSC2714  RESET     ZSC02714                     * load assigning facility (HD)
          GOTO      RZSC9999
.
RZSC2715  RESET     ZSC02715                     * load name repres. code (ID)
          GOTO      RZSC9999
.
.         ZSC.28 Recovery Nurse Day 2 Code (XCN)
.
RZSC2800  BRANCH    COMPCNT,RZSC2801:            * id number (ST)
                            RZSC2802:            * family name (ST)
                            RZSC2803:            * given name (ST)
                            RZSC2804:            * middle name (ST)
                            RZSC2805:            * suffix (ST)
                            RZSC2806:            * prefix (ST)
                            RZSC2807:            * degree (IS)
                            RZSC2808:            * source table (IS)
                            RZSC2809:            * assigning authority (HD)
                            RZSC2810:            * name type code (ID)
                            RZSC2811:            * identifier check digit (ST)
                            RZSC2812:            * check digit scheme code (ID)
                            RZSC2813:            * identifier type code (IS)
                            RZSC2814:            * assigning facility (HD)
                            RZSC2815             * name representation code (ID)
          GOTO      RZSC9999
.
RZSC2801  RESET     ZSC02801                     * load id number (ST)
          GOTO      RZSC9999
.
RZSC2802  RESET     ZSC02802                     * load family name (ST)
          GOTO      RZSC9999
.
RZSC2803  RESET     ZSC02803                     * load given name (ST)
          GOTO      RZSC9999
.
RZSC2804  RESET     ZSC02804                     * load middle name (ST)
          GOTO      RZSC9999
.
RZSC2805  RESET     ZSC02805                     * load suffix (ST)
          GOTO      RZSC9999
.
RZSC2806  RESET     ZSC02806                     * load prefix (ST)
          GOTO      RZSC9999
.
RZSC2807  RESET     ZSC02807                     * load degree (IS)
          GOTO      RZSC9999
.
RZSC2808  RESET     ZSC02808                     * load source table (IS)
          GOTO      RZSC9999
.
RZSC2809  RESET     ZSC02809                     * load assigning authority (HD)
          GOTO      RZSC9999
.
RZSC2810  RESET     ZSC02810                     * load name type code (ID)
          GOTO      RZSC9999
.
RZSC2811  RESET     ZSC02811                     * load ident. check digit (ST)
          GOTO      RZSC9999
.
RZSC2812  RESET     ZSC02812                     * load chk dig scheme code (ID)
          GOTO      RZSC9999
.
RZSC2813  RESET     ZSC02813                     * load ident. type code (IS)
          GOTO      RZSC9999
.
RZSC2814  RESET     ZSC02814                     * load assigning facility (HD)
          GOTO      RZSC9999
.
RZSC2815  RESET     ZSC02815                     * load name repres. code (ID)
          GOTO      RZSC9999
.
.         ZSC.29 Recovery Nurse Front 1 Code (XCN)
.
RZSC2900  BRANCH    COMPCNT,RZSC2901:            * id number (ST)
                            RZSC2902:            * family name (ST)
                            RZSC2903:            * given name (ST)
                            RZSC2904:            * middle name (ST)
                            RZSC2905:            * suffix (ST)
                            RZSC2906:            * prefix (ST)
                            RZSC2907:            * degree (IS)
                            RZSC2908:            * source table (IS)
                            RZSC2909:            * assigning authority (HD)
                            RZSC2910:            * name type code (ID)
                            RZSC2911:            * identifier check digit (ST)
                            RZSC2912:            * check digit scheme code (ID)
                            RZSC2913:            * identifier type code (IS)
                            RZSC2914:            * assigning facility (HD)
                            RZSC2915             * name representation code (ID)
          GOTO      RZSC9999
.
RZSC2901  RESET     ZSC02901                     * load id number (ST)
          GOTO      RZSC9999
.
RZSC2902  RESET     ZSC02902                     * load family name (ST)
          GOTO      RZSC9999
.
RZSC2903  RESET     ZSC02903                     * load given name (ST)
          GOTO      RZSC9999
.
RZSC2904  RESET     ZSC02904                     * load middle name (ST)
          GOTO      RZSC9999
.
RZSC2905  RESET     ZSC02905                     * load suffix (ST)
          GOTO      RZSC9999
.
RZSC2906  RESET     ZSC02906                     * load prefix (ST)
          GOTO      RZSC9999
.
RZSC2907  RESET     ZSC02907                     * load degree (IS)
          GOTO      RZSC9999
.
RZSC2908  RESET     ZSC02908                     * load source table (IS)
          GOTO      RZSC9999
.
RZSC2909  RESET     ZSC02909                     * load assigning authority (HD)
          GOTO      RZSC9999
.
RZSC2910  RESET     ZSC02910                     * load name type code (ID)
          GOTO      RZSC9999
.
RZSC2911  RESET     ZSC02911                     * load ident. check digit (ST)
          GOTO      RZSC9999
.
RZSC2912  RESET     ZSC02912                     * load chk dig scheme code (ID)
          GOTO      RZSC9999
.
RZSC2913  RESET     ZSC02913                     * load ident. type code (IS)
          GOTO      RZSC9999
.
RZSC2914  RESET     ZSC02914                     * load assigning facility (HD)
          GOTO      RZSC9999
.
RZSC2915  RESET     ZSC02915                     * load name repres. code (ID)
          GOTO      RZSC9999
.
.         ZSC.30 Recovery Nurse Front 2 Code (XCN)
.
RZSC3000  BRANCH    COMPCNT,RZSC3001:            * id number (ST)
                            RZSC3002:            * family name (ST)
                            RZSC3003:            * given name (ST)
                            RZSC3004:            * middle name (ST)
                            RZSC3005:            * suffix (ST)
                            RZSC3006:            * prefix (ST)
                            RZSC3007:            * degree (IS)
                            RZSC3008:            * source table (IS)
                            RZSC3009:            * assigning authority (HD)
                            RZSC3010:            * name type code (ID)
                            RZSC3011:            * identifier check digit (ST)
                            RZSC3012:            * check digit scheme code (ID)
                            RZSC3013:            * identifier type code (IS)
                            RZSC3014:            * assigning facility (HD)
                            RZSC3015             * name representation code (ID)
          GOTO      RZSC9999
.
RZSC3001  RESET     ZSC03001                     * load id number (ST)
          GOTO      RZSC9999
.
RZSC3002  RESET     ZSC03002                     * load family name (ST)
          GOTO      RZSC9999
.
RZSC3003  RESET     ZSC03003                     * load given name (ST)
          GOTO      RZSC9999
.
RZSC3004  RESET     ZSC03004                     * load middle name (ST)
          GOTO      RZSC9999
.
RZSC3005  RESET     ZSC03005                     * load suffix (ST)
          GOTO      RZSC9999
.
RZSC3006  RESET     ZSC03006                     * load prefix (ST)
          GOTO      RZSC9999
.
RZSC3007  RESET     ZSC03007                     * load degree (IS)
          GOTO      RZSC9999
.
RZSC3008  RESET     ZSC03008                     * load source table (IS)
          GOTO      RZSC9999
.
RZSC3009  RESET     ZSC03009                     * load assigning authority (HD)
          GOTO      RZSC9999
.
RZSC3010  RESET     ZSC03010                     * load name type code (ID)
          GOTO      RZSC9999
.
RZSC3011  RESET     ZSC03011                     * load ident. check digit (ST)
          GOTO      RZSC9999
.
RZSC3012  RESET     ZSC03012                     * load chk dig scheme code (ID)
          GOTO      RZSC9999
.
RZSC3013  RESET     ZSC03013                     * load ident. type code (IS)
          GOTO      RZSC9999
.
RZSC3014  RESET     ZSC03014                     * load assigning facility (HD)
          GOTO      RZSC9999
.
RZSC3015  RESET     ZSC03015                     * load name repres. code (ID)
          GOTO      RZSC9999
.
.         ZSC.31 Recovery Nurse Back 1 Code (XCN)
.
RZSC3100  BRANCH    COMPCNT,RZSC3101:            * id number (ST)
                            RZSC3102:            * family name (ST)
                            RZSC3103:            * given name (ST)
                            RZSC3104:            * middle name (ST)
                            RZSC3105:            * suffix (ST)
                            RZSC3106:            * prefix (ST)
                            RZSC3107:            * degree (IS)
                            RZSC3108:            * source table (IS)
                            RZSC3109:            * assigning authority (HD)
                            RZSC3110:            * name type code (ID)
                            RZSC3111:            * identifier check digit (ST)
                            RZSC3112:            * check digit scheme code (ID)
                            RZSC3113:            * identifier type code (IS)
                            RZSC3114:            * assigning facility (HD)
                            RZSC3115             * name representation code (ID)
          GOTO      RZSC9999
.
RZSC3101  RESET     ZSC03101                     * load id number (ST)
          GOTO      RZSC9999
.
RZSC3102  RESET     ZSC03102                     * load family name (ST)
          GOTO      RZSC9999
.
RZSC3103  RESET     ZSC03103                     * load given name (ST)
          GOTO      RZSC9999
.
RZSC3104  RESET     ZSC03104                     * load middle name (ST)
          GOTO      RZSC9999
.
RZSC3105  RESET     ZSC03105                     * load suffix (ST)
          GOTO      RZSC9999
.
RZSC3106  RESET     ZSC03106                     * load prefix (ST)
          GOTO      RZSC9999
.
RZSC3107  RESET     ZSC03107                     * load degree (IS)
          GOTO      RZSC9999
.
RZSC3108  RESET     ZSC03108                     * load source table (IS)
          GOTO      RZSC9999
.
RZSC3109  RESET     ZSC03109                     * load assigning authority (HD)
          GOTO      RZSC9999
.
RZSC3110  RESET     ZSC03110                     * load name type code (ID)
          GOTO      RZSC9999
.
RZSC3111  RESET     ZSC03111                     * load ident. check digit (ST)
          GOTO      RZSC9999
.
RZSC3112  RESET     ZSC03112                     * load chk dig scheme code (ID)
          GOTO      RZSC9999
.
RZSC3113  RESET     ZSC03113                     * load ident. type code (IS)
          GOTO      RZSC9999
.
RZSC3114  RESET     ZSC03114                     * load assigning facility (HD)
          GOTO      RZSC9999
.
RZSC3115  RESET     ZSC03115                     * load name repres. code (ID)
          GOTO      RZSC9999
.
.         ZSC.32 Recovery Nurse Back 2 Code (XCN)
.
RZSC3200  BRANCH    COMPCNT,RZSC3201:            * id number (ST)
                            RZSC3202:            * family name (ST)
                            RZSC3203:            * given name (ST)
                            RZSC3204:            * middle name (ST)
                            RZSC3205:            * suffix (ST)
                            RZSC3206:            * prefix (ST)
                            RZSC3207:            * degree (IS)
                            RZSC3208:            * source table (IS)
                            RZSC3209:            * assigning authority (HD)
                            RZSC3210:            * name type code (ID)
                            RZSC3211:            * identifier check digit (ST)
                            RZSC3212:            * check digit scheme code (ID)
                            RZSC3213:            * identifier type code (IS)
                            RZSC3214:            * assigning facility (HD)
                            RZSC3215             * name representation code (ID)
          GOTO      RZSC9999
.
RZSC3201  RESET     ZSC03201                     * load id number (ST)
          GOTO      RZSC9999
.
RZSC3202  RESET     ZSC03202                     * load family name (ST)
          GOTO      RZSC9999
.
RZSC3203  RESET     ZSC03203                     * load given name (ST)
          GOTO      RZSC9999
.
RZSC3204  RESET     ZSC03204                     * load middle name (ST)
          GOTO      RZSC9999
.
RZSC3205  RESET     ZSC03205                     * load suffix (ST)
          GOTO      RZSC9999
.
RZSC3206  RESET     ZSC03206                     * load prefix (ST)
          GOTO      RZSC9999
.
RZSC3207  RESET     ZSC03207                     * load degree (IS)
          GOTO      RZSC9999
.
RZSC3208  RESET     ZSC03208                     * load source table (IS)
          GOTO      RZSC9999
.
RZSC3209  RESET     ZSC03209                     * load assigning authority (HD)
          GOTO      RZSC9999
.
RZSC3210  RESET     ZSC03210                     * load name type code (ID)
          GOTO      RZSC9999
.
RZSC3211  RESET     ZSC03211                     * load ident. check digit (ST)
          GOTO      RZSC9999
.
RZSC3212  RESET     ZSC03212                     * load chk dig scheme code (ID)
          GOTO      RZSC9999
.
RZSC3213  RESET     ZSC03213                     * load ident. type code (IS)
          GOTO      RZSC9999
.
RZSC3214  RESET     ZSC03214                     * load assigning facility (HD)
          GOTO      RZSC9999
.
RZSC3215  RESET     ZSC03215                     * load name repres. code (ID)
          GOTO      RZSC9999
.
.         ZSC.33 Arrival Late Reason (CE)
.
RZSC3300  BRANCH    COMPCNT,RZSC3301:            * identifier (ST)
                            RZSC3302:            * text (ST)
                            RZSC3303:            * name of coding system (ST)
                            RZSC3304:            * alternate identifier (ST)
                            RZSC3305:            * alternate text (ST)
                            RZSC3306             * name of alt. cod. system (ST)
          GOTO      RZSC9999
.
RZSC3301  RESET     ZSC03301                     * identifier (ST)
          GOTO      RZSC9999
.
RZSC3302  RESET     ZSC03302                     * text (ST)
          GOTO      RZSC9999
.
RZSC3303  RESET     ZSC03303                     * name of coding system (ST)
          GOTO      RZSC9999
.
RZSC3304  RESET     ZSC03304                     * alternate identifier (ST)
          GOTO      RZSC9999
.
RZSC3305  RESET     ZSC03305                     * alternate text (ST)
          GOTO      RZSC9999
.
RZSC3306  RESET     ZSC03306                     * name of alt. cod. system (ST)
          GOTO      RZSC9999
.
.         ZSC.34 Anaesthetic Delay Reason (CE)
.
RZSC3400  BRANCH    COMPCNT,RZSC3401:            * identifier (ST)
                            RZSC3402:            * text (ST)
                            RZSC3403:            * name of coding system (ST)
                            RZSC3404:            * alternate identifier (ST)
                            RZSC3405:            * alternate text (ST)
                            RZSC3406             * name of alt. cod. system (ST)
          GOTO      RZSC9999
.
RZSC3401  RESET     ZSC03401                     * identifier (ST)
          GOTO      RZSC9999
.
RZSC3402  RESET     ZSC03402                     * text (ST)
          GOTO      RZSC9999
.
RZSC3403  RESET     ZSC03403                     * name of coding system (ST)
          GOTO      RZSC9999
.
RZSC3404  RESET     ZSC03404                     * alternate identifier (ST)
          GOTO      RZSC9999
.
RZSC3405  RESET     ZSC03405                     * alternate text (ST)
          GOTO      RZSC9999
.
RZSC3406  RESET     ZSC03406                     * name of alt. cod. system (ST)
          GOTO      RZSC9999
.
.         ZSC.35 Surgical Start Late Reason (CE)
.
RZSC3500  BRANCH    COMPCNT,RZSC3501:            * identifier (ST)
                            RZSC3502:            * text (ST)
                            RZSC3503:            * name of coding system (ST)
                            RZSC3504:            * alternate identifier (ST)
                            RZSC3505:            * alternate text (ST)
                            RZSC3506             * name of alt. cod. system (ST)
          GOTO      RZSC9999
.
RZSC3501  RESET     ZSC03501                     * identifier (ST)
          GOTO      RZSC9999
.
RZSC3502  RESET     ZSC03502                     * text (ST)
          GOTO      RZSC9999
.
RZSC3503  RESET     ZSC03503                     * name of coding system (ST)
          GOTO      RZSC9999
.
RZSC3504  RESET     ZSC03504                     * alternate identifier (ST)
          GOTO      RZSC9999
.
RZSC3505  RESET     ZSC03505                     * alternate text (ST)
          GOTO      RZSC9999
.
RZSC3506  RESET     ZSC03506                     * name of alt. cod. system (ST)
          GOTO      RZSC9999
.
.         ZSC.36 Reason For Overnight (CE)
.
RZSC3600  BRANCH    COMPCNT,RZSC3601:            * identifier (ST)
                            RZSC3602:            * text (ST)
                            RZSC3603:            * name of coding system (ST)
                            RZSC3604:            * alternate identifier (ST)
                            RZSC3605:            * alternate text (ST)
                            RZSC3606             * name of alt. cod. system (ST)
          GOTO      RZSC9999
.
RZSC3601  RESET     ZSC03601                     * identifier (ST)
          GOTO      RZSC9999
.
RZSC3602  RESET     ZSC03602                     * text (ST)
          GOTO      RZSC9999
.
RZSC3603  RESET     ZSC03603                     * name of coding system (ST)
          GOTO      RZSC9999
.
RZSC3604  RESET     ZSC03604                     * alternate identifier (ST)
          GOTO      RZSC9999
.
RZSC3605  RESET     ZSC03605                     * alternate text (ST)
          GOTO      RZSC9999
.
RZSC3606  RESET     ZSC03606                     * name of alt. cod. system (ST)
          GOTO      RZSC9999
.
.         ZSC.37 Recovery In Delay Reason (CE)
.
RZSC3700  BRANCH    COMPCNT,RZSC3701:            * identifier (ST)
                            RZSC3702:            * text (ST)
                            RZSC3703:            * name of coding system (ST)
                            RZSC3704:            * alternate identifier (ST)
                            RZSC3705:            * alternate text (ST)
                            RZSC3706             * name of alt. cod. system (ST)
          GOTO      RZSC9999
.
RZSC3701  RESET     ZSC03701                     * identifier (ST)
          GOTO      RZSC9999
.
RZSC3702  RESET     ZSC03702                     * text (ST)
          GOTO      RZSC9999
.
RZSC3703  RESET     ZSC03703                     * name of coding system (ST)
          GOTO      RZSC9999
.
RZSC3704  RESET     ZSC03704                     * alternate identifier (ST)
          GOTO      RZSC9999
.
RZSC3705  RESET     ZSC03705                     * alternate text (ST)
          GOTO      RZSC9999
.
RZSC3706  RESET     ZSC03706                     * name of alt. cod. system (ST)
          GOTO      RZSC9999
.
.         ZSC.38 Recovery Bay (CE)
.
RZSC3800  BRANCH    COMPCNT,RZSC3801:            * identifier (ST)
                            RZSC3802:            * text (ST)
                            RZSC3803:            * name of coding system (ST)
                            RZSC3804:            * alternate identifier (ST)
                            RZSC3805:            * alternate text (ST)
                            RZSC3806             * name of alt. cod. system (ST)
          GOTO      RZSC9999
.
RZSC3801  RESET     ZSC03801                     * identifier (ST)
          GOTO      RZSC9999
.
RZSC3802  RESET     ZSC03802                     * text (ST)
          GOTO      RZSC9999
.
RZSC3803  RESET     ZSC03803                     * name of coding system (ST)
          GOTO      RZSC9999
.
RZSC3804  RESET     ZSC03804                     * alternate identifier (ST)
          GOTO      RZSC9999
.
RZSC3805  RESET     ZSC03805                     * alternate text (ST)
          GOTO      RZSC9999
.
RZSC3806  RESET     ZSC03806                     * name of alt. cod. system (ST)
          GOTO      RZSC9999
.
.         ZSC.39 Acuity (CE)
.
RZSC3900  BRANCH    COMPCNT,RZSC3901:            * identifier (ST)
                            RZSC3902:            * text (ST)
                            RZSC3903:            * name of coding system (ST)
                            RZSC3904:            * alternate identifier (ST)
                            RZSC3905:            * alternate text (ST)
                            RZSC3906             * name of alt. cod. system (ST)
          GOTO      RZSC9999
.
RZSC3901  RESET     ZSC03901                     * identifier (ST)
          GOTO      RZSC9999
.
RZSC3902  RESET     ZSC03902                     * text (ST)
          GOTO      RZSC9999
.
RZSC3903  RESET     ZSC03903                     * name of coding system (ST)
          GOTO      RZSC9999
.
RZSC3904  RESET     ZSC03904                     * alternate identifier (ST)
          GOTO      RZSC9999
.
RZSC3905  RESET     ZSC03905                     * alternate text (ST)
          GOTO      RZSC9999
.
RZSC3906  RESET     ZSC03906                     * name of alt. cod. system (ST)
          GOTO      RZSC9999
.
.         ZSC.40 Recovery Exit Delay Reason (CE)
.
RZSC4000  BRANCH    COMPCNT,RZSC4001:            * identifier (ST)
                            RZSC4002:            * text (ST)
                            RZSC4003:            * name of coding system (ST)
                            RZSC4004:            * alternate identifier (ST)
                            RZSC4005:            * alternate text (ST)
                            RZSC4006             * name of alt. cod. system (ST)
          GOTO      RZSC9999
.
RZSC4001  RESET     ZSC04001                     * identifier (ST)
          GOTO      RZSC9999
.
RZSC4002  RESET     ZSC04002                     * text (ST)
          GOTO      RZSC9999
.
RZSC4003  RESET     ZSC04003                     * name of coding system (ST)
          GOTO      RZSC9999
.
RZSC4004  RESET     ZSC04004                     * alternate identifier (ST)
          GOTO      RZSC9999
.
RZSC4005  RESET     ZSC04005                     * alternate text (ST)
          GOTO      RZSC9999
.
RZSC4006  RESET     ZSC04006                     * name of alt. cod. system (ST)
          GOTO      RZSC9999
.
.         ZSC.41  Blood Loss (NM)
.
RZSC4100  BRANCH    COMPCNT,RZSC4101
.
RZSC4101  RESET     ZSC04101
          GOTO      RZSC9999
.
.         ZSC.42  Fast Post Recovery (ID)
.
RZSC4200  BRANCH    COMPCNT,RZSC4201
.
RZSC4201  RESET     ZSC04201
          GOTO      RZSC9999
.
.         ZSC.43  Admit Post Procedure (ID)
.
RZSC4300  BRANCH    COMPCNT,RZSC4301
.
RZSC4301  RESET     ZSC04301
          GOTO      RZSC9999
.
.         ZSC.44  No Recovery (ID)
.
RZSC4400  BRANCH    COMPCNT,RZSC4401
.
RZSC4401  RESET     ZSC04401
          GOTO      RZSC9999
.
.         ZSC.45  Case Abandoned (ID)
.
RZSC4500  BRANCH    COMPCNT,RZSC4501
.
RZSC4501  RESET     ZSC04501
          GOTO      RZSC9999
.
.         ZSC.46  Comments (ST)
.
RZSC4600  BRANCH    COMPCNT,RZSC4601
.
RZSC4601  RESET     ZSC04601
          GOTO      RZSC9999
.
.         ZSC.47  Preadmission and Operation Notes (ST)
.
RZSC4700  BRANCH    COMPCNT,RZSC4701
.
RZSC4701  RESET     ZSC04701
          GOTO      RZSC9999
.
.         ZSC.48  Prosthesis (ST)
.
RZSC4800  BRANCH    COMPCNT,RZSC4801
.
RZSC4801  RESET     ZSC04801
          GOTO      RZSC9999
.
.         ZSC.49 Equipment/Items (Diathermy Type 1) (CE)
.
RZSC4900  BRANCH    COMPCNT,RZSC4901:            * identifier (ST)
                            RZSC4902:            * text (ST)
                            RZSC4903:            * name of coding system (ST)
                            RZSC4904:            * alternate identifier (ST)
                            RZSC4905:            * alternate text (ST)
                            RZSC4906             * name of alt. cod. system (ST)
          GOTO      RZSC9999
.
RZSC4901  RESET     ZSC04901                     * identifier (ST)
          GOTO      RZSC9999
.
RZSC4902  RESET     ZSC04902                     * text (ST)
          GOTO      RZSC9999
.
RZSC4903  RESET     ZSC04903                     * name of coding system (ST)
          GOTO      RZSC9999
.
RZSC4904  RESET     ZSC04904                     * alternate identifier (ST)
          GOTO      RZSC9999
.
RZSC4905  RESET     ZSC04905                     * alternate text (ST)
          GOTO      RZSC9999
.
RZSC4906  RESET     ZSC04906                     * name of alt. cod. system (ST)
          GOTO      RZSC9999
.
.         ZSC.50 Equipment/Items (Diathermy Type 2) (CE)
.
RZSC5000  BRANCH    COMPCNT,RZSC5001:            * identifier (ST)
                            RZSC5002:            * text (ST)
                            RZSC5003:            * name of coding system (ST)
                            RZSC5004:            * alternate identifier (ST)
                            RZSC5005:            * alternate text (ST)
                            RZSC5006             * name of alt. cod. system (ST)
          GOTO      RZSC9999
.
RZSC5001  RESET     ZSC05001                     * identifier (ST)
          GOTO      RZSC9999
.
RZSC5002  RESET     ZSC05002                     * text (ST)
          GOTO      RZSC9999
.
RZSC5003  RESET     ZSC05003                     * name of coding system (ST)
          GOTO      RZSC9999
.
RZSC5004  RESET     ZSC05004                     * alternate identifier (ST)
          GOTO      RZSC9999
.
RZSC5005  RESET     ZSC05005                     * alternate text (ST)
          GOTO      RZSC9999
.
RZSC5006  RESET     ZSC05006                     * name of alt. cod. system (ST)
          GOTO      RZSC9999
.
.         ZSC.51  Site Intact 1 (ID)
.
RZSC5100  BRANCH    COMPCNT,RZSC5101
.
RZSC5101  RESET     ZSC05101
          GOTO      RZSC9999
.
.         ZSC.52  Site Intact 2 (ID)
.
RZSC5200  BRANCH    COMPCNT,RZSC5201
.
RZSC5201  RESET     ZSC05201
          GOTO      RZSC9999
.
.         ZSC.53 Equipment/Item Used 1 (CE)
.
RZSC5300  BRANCH    COMPCNT,RZSC5301:            * identifier (ST)
                            RZSC5302:            * text (ST)
                            RZSC5303:            * name of coding system (ST)
                            RZSC5304:            * alternate identifier (ST)
                            RZSC5305:            * alternate text (ST)
                            RZSC5306             * name of alt. cod. system (ST)
          GOTO      RZSC9999
.
RZSC5301  RESET     ZSC05301                     * identifier (ST)
          GOTO      RZSC9999
.
RZSC5302  RESET     ZSC05302                     * text (ST)
          GOTO      RZSC9999
.
RZSC5303  RESET     ZSC05303                     * name of coding system (ST)
          GOTO      RZSC9999
.
RZSC5304  RESET     ZSC05304                     * alternate identifier (ST)
          GOTO      RZSC9999
.
RZSC5305  RESET     ZSC05305                     * alternate text (ST)
          GOTO      RZSC9999
.
RZSC5306  RESET     ZSC05306                     * name of alt. cod. system (ST)
          GOTO      RZSC9999
.
.         ZSC.54 Equipment/Item Used 2 (CE)
.
RZSC5400  BRANCH    COMPCNT,RZSC5401:            * identifier (ST)
                            RZSC5402:            * text (ST)
                            RZSC5403:            * name of coding system (ST)
                            RZSC5404:            * alternate identifier (ST)
                            RZSC5405:            * alternate text (ST)
                            RZSC5406             * name of alt. cod. system (ST)
          GOTO      RZSC9999
.
RZSC5401  RESET     ZSC05401                     * identifier (ST)
          GOTO      RZSC9999
.
RZSC5402  RESET     ZSC05402                     * text (ST)
          GOTO      RZSC9999
.
RZSC5403  RESET     ZSC05403                     * name of coding system (ST)
          GOTO      RZSC9999
.
RZSC5404  RESET     ZSC05404                     * alternate identifier (ST)
          GOTO      RZSC9999
.
RZSC5405  RESET     ZSC05405                     * alternate text (ST)
          GOTO      RZSC9999
.
RZSC5406  RESET     ZSC05406                     * name of alt. cod. system (ST)
          GOTO      RZSC9999
.
.         ZSC.55  Caesarean Birth Count (NM)
.
RZSC5500  BRANCH    COMPCNT,RZSC5501
.
RZSC5501  RESET     ZSC05501[REPTNCNT]
          GOTO      RZSC9999
.
.         ZSC.56  Caesarean Birth Sex Of Baby (IS)
.                 (maximum of 19 repeats - 20 births in total)
.
RZSC5600  COMPARE   REPTNCNT,TWENTY              * maximum repeats reached ?
          GOTO      RZSC9999 IF LESS             * yes
.
          BRANCH    COMPCNT,RZSC5601
.
RZSC5601  RESET     ZSC05601[REPTNCNT]
          GOTO      RZSC9999
.
.         ZSC.57  Caesarean Birth Date/Time Of Birth (TS)
.                 (maximum of 19 repeats - 20 births in total)
.
RZSC5700  COMPARE   REPTNCNT,TWENTY              * maximum repeats reached ?
          GOTO      RZSC9999 IF LESS             * yes
.
          BRANCH    COMPCNT,RZSC5701
.
RZSC5701  RESET     ZSC05701[REPTNCNT]
          GOTO      RZSC9999
.
.         ZSC.58  Caesarean Birth U/R Number (??)
.                 (maximum of 19 repeats - 20 births in total)
.
RZSC5800  COMPARE   REPTNCNT,TWENTY              * maximum repeats reached ?
          GOTO      RZSC9999 IF LESS             * yes
.
          BRANCH    COMPCNT,RZSC5801
.
RZSC5801  RESET     ZSC05801[REPTNCNT]
          GOTO      RZSC9999
.
.         ZSC.59  Caesarean Birth Baby Weight (NM)
.                 (maximum of 19 repeats - 20 births in total)
.
RZSC5900  COMPARE   REPTNCNT,TWENTY              * maximum repeats reached ?
          GOTO      RZSC9999 IF LESS             * yes
.
          BRANCH    COMPCNT,RZSC5901
.
RZSC5901  RESET     ZSC05901[REPTNCNT]
          GOTO      RZSC9999
.
.         ZSC.60  Caesarean Birth Delivery Time (TM)
.                 (maximum of 19 repeats - 20 births in total)
.
RZSC6000  COMPARE   REPTNCNT,TWENTY              * maximum repeats reached ?
          GOTO      RZSC9999 IF LESS             * yes
.
          BRANCH    COMPCNT,RZSC6001
.
RZSC6001  RESET     ZSC06001[REPTNCNT]
          GOTO      RZSC9999
.
.         ZSC.61  Admitting Nurse Start Time (TM)
.
RZSC6100  BRANCH    COMPCNT,RZSC6101
.
RZSC6101  RESET     ZSC06101
          GOTO      RZSC9999
.
.         ZSC.62  Admitting Nurse End Time (TM)
.
RZSC6200  BRANCH    COMPCNT,RZSC6201
.
RZSC6201  RESET     ZSC06201
          GOTO      RZSC9999
.
.         ZSC.63  Wheels In Time (TM)
.
RZSC6300  BRANCH    COMPCNT,RZSC6301
.
RZSC6301  RESET     ZSC06301
          GOTO      RZSC9999
.
.         ZSC.64  Wheels Out Time (TM)
.
RZSC6400  BRANCH    COMPCNT,RZSC6401
.
RZSC6401  RESET     ZSC06401
          GOTO      RZSC9999
.
RZSC9999  RETURN
+
.*****************************************************************************
.*                                 RZTR0000        Called by: PROC0000       *
.*                          Reset the ZTR fields                             *
.*****************************************************************************
.
RZTR0000  BRANCH    FIELDNO,RZTR0100:       * Presenting Complaint Code
                            RZTR0200:       * Presenting Complaint Line 1
                            RZTR0300:       * Presenting Complaint Line 2
                            RZTR0400:       * Presenting Complaint Line 3
                            RZTR0500:       * Presenting Complaint Line 4
                            RZTR0600:       * Presenting Complaint Line 5
                            RZTR0700:       * Presenting Complaint Line 6
                            RZTR0800:       * Location Code
                            RZTR0900:       * Accompanying Person
                            RZTR1000:       * Arrival Transport
                            RZTR1100:       * Ambulance Case Number
                            RZTR1200:       * Attendance Source
                            RZTR1300:       * Streaming
                            RZTR1400:       * Disaster Code
                            RZTR1500:       * Airway
                            RZTR1600:       * C Spine
                            RZTR1700:       * Conscious State
                            RZTR1800:       * Behavioural 1
                            RZTR1900:       * Behavioural 2
                            RZTR2000:       * Breathing 1
                            RZTR2100:       * Breathing 2
                            RZTR2200:       * Breathing 3
                            RZTR2300:       * Colour 1
                            RZTR2400:       * Colour 2
                            RZTR2500:       * Pulse 1
                            RZTR2600:       * Pulse 2
                            RZTR2700:       * Skin 1
                            RZTR2800:       * Skin 2
                            RZTR2900:       * Mechanism
                            RZTR3000:       * Anatomical Criteria
                            RZTR3100:       * Physiologic
                            RZTR3200:       * Special Population
                            RZTR3300:       * Restraint
                            RZTR3400:       * Weight
                            RZTR3500:       * Pain Score
                            RZTR3600:       * Analgesia Taken
                            RZTR3700:       * Analgesia Declined
                            RZTR3800:       * ADT - Ready for Admission
                            RZTR3900:       * Immunisation Current
                            RZTR4000:       * Date Last Ate
                            RZTR4100:       * Date Last Drank
                            RZTR4200:       * Isolation
                            RZTR4300:       * Drug / Alcohol Taken
                            RZTR4400:       * Non WA Hospital 12 Mon
                            RZTR4500:       * Triage Date / Time
                            RZTR4600:       * Triage Category
                            RZTR4700:       * Triage Nurse
                            RZTR4800:       * Model of Care
                            RZTR4900        * Reason for Change
.
.         Invalid ZTR field received, so ignore it
.
          GOTO      RZTR9999
.
.         ZTR.1  Presenting Complaint Code (Cat el code) (CE)
.
RZTR0100  BRANCH    COMPCNT,RZTR0101:            * identifier (ST)
                            RZTR0102:            * text (ST)
                            RZTR0103:            * name of coding system (ST)
                            RZTR0104:            * alternate identifier (ST)
                            RZTR0105:            * alternate text (ST)
                            RZTR0106             * name of alt. cod. system (ST)
          GOTO      RZTR9999
.
RZTR0101  RESET     ZTR00101                     * identifier (ST)
          GOTO      RZTR9999
.
RZTR0102  RESET     ZTR00102                     * text (ST)
          GOTO      RZTR9999
.
RZTR0103  RESET     ZTR00103                     * name of coding system (ST)
          GOTO      RZTR9999
.
RZTR0104  RESET     ZTR00104                     * alternate identifier (ST)
          GOTO      RZTR9999
.
RZTR0105  RESET     ZTR00105                     * alternate text (ST)
          GOTO      RZTR9999
.
RZTR0106  RESET     ZTR00106                     * name of alt. cod. system (ST)
          GOTO      RZTR9999
.
.         ZTR.2  Presenting Complaint Line 1 (ST)
.
RZTR0200  BRANCH    COMPCNT,RZTR0201
.
RZTR0201  RESET     ZTR00201
          MOVE      ZTR00201,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZTR00201
          GOTO      RZTR9999
.
.         ZTR.3  Presenting Complaint Line 2 (ST)
.
RZTR0300  BRANCH    COMPCNT,RZTR0301
.
RZTR0301  RESET     ZTR00301
          MOVE      ZTR00301,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZTR00301
          GOTO      RZTR9999
.
.         ZTR.4  Presenting Complaint Line 3 (ST)
.
RZTR0400  BRANCH    COMPCNT,RZTR0401
.
RZTR0401  RESET     ZTR00401
          MOVE      ZTR00401,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZTR00401
          GOTO      RZTR9999
.
.         ZTR.5  Presenting Complaint Line 4 (ST)
.
RZTR0500  BRANCH    COMPCNT,RZTR0501
.
RZTR0501  RESET     ZTR00501
          MOVE      ZTR00501,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZTR00501
          GOTO      RZTR9999
.
.         ZTR.6  Presenting Complaint Line 5 (ST)
.
RZTR0600  BRANCH    COMPCNT,RZTR0601
.
RZTR0601  RESET     ZTR00601
          MOVE      ZTR00601,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZTR00601
          GOTO      RZTR9999
.
.         ZTR.7  Presenting Complaint Line 6 (ST)
.
RZTR0700  BRANCH    COMPCNT,RZTR0701
.
RZTR0701  RESET     ZTR00701
          MOVE      ZTR00701,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZTR00701
          GOTO      RZTR9999
.
.         ZTR.8  Location (emrlocaf code) (CE)
.
RZTR0800  BRANCH    COMPCNT,RZTR0801:            * identifier (ST)
                            RZTR0802:            * text (ST)
                            RZTR0803:            * name of coding system (ST)
                            RZTR0804:            * alternate identifier (ST)
                            RZTR0805:            * alternate text (ST)
                            RZTR0806             * name of alt. cod. system (ST)
          GOTO      RZTR9999
.
RZTR0801  RESET     ZTR00801                     * identifier (ST)
          GOTO      RZTR9999
.
RZTR0802  RESET     ZTR00802                     * text (ST)
          GOTO      RZTR9999
.
RZTR0803  RESET     ZTR00803                     * name of coding system (ST)
          GOTO      RZTR9999
.
RZTR0804  RESET     ZTR00804                     * alternate identifier (ST)
          GOTO      RZTR9999
.
RZTR0805  RESET     ZTR00805                     * alternate text (ST)
          GOTO      RZTR9999
.
RZTR0806  RESET     ZTR00806                     * name of alt. cod. system (ST)
          GOTO      RZTR9999
.
.         ZTR.9  Accompanying Person (text) (ST)
.
RZTR0900  BRANCH    COMPCNT,RZTR0901
.
RZTR0901
          GOTO      RZTR9999
.
.         ZTR.10  Arrival Transport (Cat EA code) (CE)
.
RZTR1000  BRANCH    COMPCNT,RZTR1001:            * identifier (ST)
                            RZTR1002:            * text (ST)
                            RZTR1003:            * name of coding system (ST)
                            RZTR1004:            * alternate identifier (ST)
                            RZTR1005:            * alternate text (ST)
                            RZTR1006             * name of alt. cod. system (ST)
          GOTO      RZTR9999
.
RZTR1001  RESET     ZTR01001                     * identifier (ST)
          GOTO      RZTR9999
.
RZTR1002  RESET     ZTR01002                     * text (ST)
          GOTO      RZTR9999
.
RZTR1003  RESET     ZTR01003                     * name of coding system (ST)
          GOTO      RZTR9999
.
RZTR1004  RESET     ZTR01004                     * alternate identifier (ST)
          GOTO      RZTR9999
.
RZTR1005  RESET     ZTR01005                     * alternate text (ST)
          GOTO      RZTR9999
.
RZTR1006  RESET     ZTR01006                     * name of alt. cod. system (ST)
          GOTO      RZTR9999
.
.         ZTR.11  Ambulance Case Number (text) (ST)
.
RZTR1100  BRANCH    COMPCNT,RZTR1101
.
RZTR1101
          GOTO      RZTR9999
.
.         ZTR.12  Attendance Source (Cat em code) (CE)
.
RZTR1200  BRANCH    COMPCNT,RZTR1201:            * identifier (ST)
                            RZTR1202:            * text (ST)
                            RZTR1203:            * name of coding system (ST)
                            RZTR1204:            * alternate identifier (ST)
                            RZTR1205:            * alternate text (ST)
                            RZTR1206             * name of alt. cod. system (ST)
          GOTO      RZTR9999
.
RZTR1201  RESET     ZTR01201                     * identifier (ST)
          GOTO      RZTR9999
.
RZTR1202  RESET     ZTR01202                     * text (ST)
          GOTO      RZTR9999
.
RZTR1203  RESET     ZTR01203                     * name of coding system (ST)
          GOTO      RZTR9999
.
RZTR1204  RESET     ZTR01204                     * alternate identifier (ST)
          GOTO      RZTR9999
.
RZTR1205  RESET     ZTR01205                     * alternate text (ST)
          GOTO      RZTR9999
.
RZTR1206  RESET     ZTR01206                     * name of alt. cod. system (ST)
          GOTO      RZTR9999
.
.         ZTR.13  Streaming (Cat eh code) (CE)
.
RZTR1300  BRANCH    COMPCNT,RZTR1301:            * identifier (ST)
                            RZTR1302:            * text (ST)
                            RZTR1303:            * name of coding system (ST)
                            RZTR1304:            * alternate identifier (ST)
                            RZTR1305:            * alternate text (ST)
                            RZTR1306             * name of alt. cod. system (ST)
          GOTO      RZTR9999
.
RZTR1301  RESET     ZTR01301                     * identifier (ST)
          GOTO      RZTR9999
.
RZTR1302  RESET     ZTR01302                     * text (ST)
          GOTO      RZTR9999
.
RZTR1303  RESET     ZTR01303                     * name of coding system (ST)
          GOTO      RZTR9999
.
RZTR1304  RESET     ZTR01304                     * alternate identifier (ST)
          GOTO      RZTR9999
.
RZTR1305  RESET     ZTR01305                     * alternate text (ST)
          GOTO      RZTR9999
.
RZTR1306  RESET     ZTR01306                     * name of alt. cod. system (ST)
          GOTO      RZTR9999
.
.         ZTR.14  Disaster Code (dismasaf code) (CE)
.
RZTR1400  BRANCH    COMPCNT,RZTR1401
.
RZTR1401
          GOTO      RZTR9999
.
.         ZTR.15  Airway (Cat A1 code) (CE)
.
RZTR1500  BRANCH    COMPCNT,RZTR1501:            * identifier (ST)
                            RZTR1502:            * text (ST)
                            RZTR1503:            * name of coding system (ST)
                            RZTR1504:            * alternate identifier (ST)
                            RZTR1505:            * alternate text (ST)
                            RZTR1506             * name of alt. cod. system (ST)
          GOTO      RZTR9999
.
RZTR1501  RESET     ZTR01501                     * identifier (ST)
          GOTO      RZTR9999
.
RZTR1502  RESET     ZTR01502                     * text (ST)
          GOTO      RZTR9999
.
RZTR1503  RESET     ZTR01503                     * name of coding system (ST)
          GOTO      RZTR9999
.
RZTR1504  RESET     ZTR01504                     * alternate identifier (ST)
          GOTO      RZTR9999
.
RZTR1505  RESET     ZTR01505                     * alternate text (ST)
          GOTO      RZTR9999
.
RZTR1506  RESET     ZTR01506                     * name of alt. cod. system (ST)
          GOTO      RZTR9999
.
.         ZTR.16  C Spine (Cat A2 code) (CE)
.
RZTR1600  BRANCH    COMPCNT,RZTR1601
.
RZTR1601
          GOTO      RZTR9999
.
.         ZTR.17  Conscious State (Cat A3 code) (CE)
.
RZTR1700  BRANCH    COMPCNT,RZTR1701:            * identifier (ST)
                            RZTR1702:            * text (ST)
                            RZTR1703:            * name of coding system (ST)
                            RZTR1704:            * alternate identifier (ST)
                            RZTR1705:            * alternate text (ST)
                            RZTR1706             * name of alt. cod. system (ST)
          GOTO      RZTR9999
.
RZTR1701  RESET     ZTR01701                     * identifier (ST)
          GOTO      RZTR9999
.
RZTR1702  RESET     ZTR01702                     * text (ST)
          GOTO      RZTR9999
.
RZTR1703  RESET     ZTR01703                     * name of coding system (ST)
          GOTO      RZTR9999
.
RZTR1704  RESET     ZTR01704                     * alternate identifier (ST)
          GOTO      RZTR9999
.
RZTR1705  RESET     ZTR01705                     * alternate text (ST)
          GOTO      RZTR9999
.
RZTR1706  RESET     ZTR01706                     * name of alt. cod. system (ST)
          GOTO      RZTR9999
.
.         ZTR.18  Behavioural 1 (Cat A4 code) (CE)
.
RZTR1800  BRANCH    COMPCNT,RZTR1801
.
RZTR1801
          GOTO      RZTR9999
.
.         ZTR.19  Behavioural 2 (Cat eq code) (CE)
.
RZTR1900  BRANCH    COMPCNT,RZTR1901
.
RZTR1901
          GOTO      RZTR9999
.
.         ZTR.20  Breathing 1 (Cat A5 code) (CE)
.
RZTR2000  BRANCH    COMPCNT,RZTR2001:            * identifier (ST)
                            RZTR2002:            * text (ST)
                            RZTR2003:            * name of coding system (ST)
                            RZTR2004:            * alternate identifier (ST)
                            RZTR2005:            * alternate text (ST)
                            RZTR2006             * name of alt. cod. system (ST)
          GOTO      RZTR9999
.
RZTR2001  RESET     ZTR02001                     * identifier (ST)
          GOTO      RZTR9999
.
RZTR2002  RESET     ZTR02002                     * text (ST)
          GOTO      RZTR9999
.
RZTR2003  RESET     ZTR02003                     * name of coding system (ST)
          GOTO      RZTR9999
.
RZTR2004  RESET     ZTR02004                     * alternate identifier (ST)
          GOTO      RZTR9999
.
RZTR2005  RESET     ZTR02005                     * alternate text (ST)
          GOTO      RZTR9999
.
RZTR2006  RESET     ZTR02006                     * name of alt. cod. system (ST)
          GOTO      RZTR9999
.
.         ZTR.21  Breathing 2 (Cat A6 code) (CE)
.
RZTR2100  BRANCH    COMPCNT,RZTR2101
.
RZTR2101
          GOTO      RZTR9999
.
.         ZTR.22  Breathing 3 (Cat A7 code) (CE)
.
RZTR2200  BRANCH    COMPCNT,RZTR2201
.
RZTR2201
          GOTO      RZTR9999
.
.         ZTR.23  Colour 1 (Cat ef code) (CE)
.
RZTR2300  BRANCH    COMPCNT,RZTR2301:            * identifier (ST)
                            RZTR2302:            * text (ST)
                            RZTR2303:            * name of coding system (ST)
                            RZTR2304:            * alternate identifier (ST)
                            RZTR2305:            * alternate text (ST)
                            RZTR2306             * name of alt. cod. system (ST)
          GOTO      RZTR9999
.
RZTR2301  RESET     ZTR02301                     * identifier (ST)
          GOTO      RZTR9999
.
RZTR2302  RESET     ZTR02302                     * text (ST)
          GOTO      RZTR9999
.
RZTR2303  RESET     ZTR02303                     * name of coding system (ST)
          GOTO      RZTR9999
.
RZTR2304  RESET     ZTR02304                     * alternate identifier (ST)
          GOTO      RZTR9999
.
RZTR2305  RESET     ZTR02305                     * alternate text (ST)
          GOTO      RZTR9999
.
RZTR2306  RESET     ZTR02306                     * name of alt. cod. system (ST)
          GOTO      RZTR9999
.
.         ZTR.24  Colour 2 (Cat eg code) (CE)
.
RZTR2400  BRANCH    COMPCNT,RZTR2401
.
RZTR2401
          GOTO      RZTR9999
.
.         ZTR.25   (CE)
.
RZTR2500  BRANCH    COMPCNT,RZTR2501
.
RZTR2501
          GOTO      RZTR9999
.
.         ZTR.26   (CE)
.
RZTR2600  BRANCH    COMPCNT,RZTR2601
.
RZTR2601
          GOTO      RZTR9999
.
.         ZTR.27   (CE)
.
RZTR2700  BRANCH    COMPCNT,RZTR2701
.
RZTR2701
          GOTO      RZTR9999
.
.         ZTR.28
.
RZTR2800  BRANCH    COMPCNT,RZTR2801
.
RZTR2801
          GOTO      RZTR9999
.
.         ZTR.29
.
RZTR2900  BRANCH    COMPCNT,RZTR2901
.
RZTR2901
          GOTO      RZTR9999
.
.         ZTR.30
.
RZTR3000  BRANCH    COMPCNT,RZTR3001
.
RZTR3001
          GOTO      RZTR9999
.
.         ZTR.31
.
RZTR3100  BRANCH    COMPCNT,RZTR3101
.
RZTR3101
          GOTO      RZTR9999
.
.         ZTR.32
.
RZTR3200  BRANCH    COMPCNT,RZTR3201
.
RZTR3201
          GOTO      RZTR9999
.
.         ZTR.33
.
RZTR3300  BRANCH    COMPCNT,RZTR3301
.
RZTR3301
          GOTO      RZTR9999
.
.         ZTR.34
.
RZTR3400  BRANCH    COMPCNT,RZTR3401
.
RZTR3401
          GOTO      RZTR9999
.
.         ZTR.35  Pain Score (Cat en code) (CE)
.
RZTR3500  BRANCH    COMPCNT,RZTR3501:            * identifier (ST)
                            RZTR3502:            * text (ST)
                            RZTR3503:            * name of coding system (ST)
                            RZTR3504:            * alternate identifier (ST)
                            RZTR3505:            * alternate text (ST)
                            RZTR3506             * name of alt. cod. system (ST)
          GOTO      RZTR9999
.
RZTR3501  RESET     ZTR03501                     * identifier (ST)
          GOTO      RZTR9999
.
RZTR3502  RESET     ZTR03502                     * text (ST)
          GOTO      RZTR9999
.
RZTR3503  RESET     ZTR03503                     * name of coding system (ST)
          GOTO      RZTR9999
.
RZTR3504  RESET     ZTR03504                     * alternate identifier (ST)
          GOTO      RZTR9999
.
RZTR3505  RESET     ZTR03505                     * alternate text (ST)
          GOTO      RZTR9999
.
RZTR3506  RESET     ZTR03506                     * name of alt. cod. system (ST)
          GOTO      RZTR9999
.
.         ZTR.36
.
RZTR3600  BRANCH    COMPCNT,RZTR3601
.
RZTR3601
          GOTO      RZTR9999
.
.         ZTR.37
.
RZTR3700  BRANCH    COMPCNT,RZTR3701
.
RZTR3701
          GOTO      RZTR9999
.
.         ZTR.38
.
RZTR3800  BRANCH    COMPCNT,RZTR3801
.
RZTR3801
          GOTO      RZTR9999
.
.         ZTR.39
.
RZTR3900  BRANCH    COMPCNT,RZTR3901
.
RZTR3901
          GOTO      RZTR9999
.
.         ZTR.40
.
RZTR4000  BRANCH    COMPCNT,RZTR4001
.
RZTR4001
          GOTO      RZTR9999
.
.         ZTR.41
.
RZTR4100  BRANCH    COMPCNT,RZTR4101
.
RZTR4101
          GOTO      RZTR9999
.
.         ZTR.42  Isolation (Cat es code) (CE)
.
RZTR4200  BRANCH    COMPCNT,RZTR4201:            * identifier (ST)
                            RZTR4202:            * text (ST)
                            RZTR4203:            * name of coding system (ST)
                            RZTR4204:            * alternate identifier (ST)
                            RZTR4205:            * alternate text (ST)
                            RZTR4206             * name of alt. cod. system (ST)
          GOTO      RZTR9999
.
RZTR4201  RESET     ZTR04201                     * identifier (ST)
          GOTO      RZTR9999
.
RZTR4202  RESET     ZTR04202                     * text (ST)
          GOTO      RZTR9999
.
RZTR4203  RESET     ZTR04203                     * name of coding system (ST)
          GOTO      RZTR9999
.
RZTR4204  RESET     ZTR04204                     * alternate identifier (ST)
          GOTO      RZTR9999
.
RZTR4205  RESET     ZTR04205                     * alternate text (ST)
          GOTO      RZTR9999
.
RZTR4206  RESET     ZTR04206                     * name of alt. cod. system (ST)
          GOTO      RZTR9999
.
.         ZTR.43  Drug / Alcohol Taken (1=Yes/0=No) (NM)
.
RZTR4300  BRANCH    COMPCNT,RZTR4301
          GOTO      RZTR9999
.
RZTR4301  RESET     ZTR04301
          GOTO      RZTR9999
.
.         ZTR.44
.
RZTR4400  BRANCH    COMPCNT,RZTR4401
.
RZTR4401
          GOTO      RZTR9999
.
.         ZTR.45  Triage Date / Time (ccyymmddhhmmss) (TS)
.
RZTR4500  BRANCH    COMPCNT,RZTR4501
.
RZTR4501  RESET     ZTR04501
          GOTO      RZTR9999
.
.         ZTR.46  Triage Category (Cat AA code) (CE)
.
RZTR4600  BRANCH    COMPCNT,RZTR4601:            * identifier (ST)
                            RZTR4602:            * text (ST)
                            RZTR4603:            * name of coding system (ST)
                            RZTR4604:            * alternate identifier (ST)
                            RZTR4605:            * alternate text (ST)
                            RZTR4606             * name of alt. cod. system (ST)
          GOTO      RZTR9999
.
RZTR4601  RESET     ZTR04601                     * identifier (ST)
          GOTO      RZTR9999
.
RZTR4602  RESET     ZTR04602                     * text (ST)
          GOTO      RZTR9999
.
RZTR4603  RESET     ZTR04603                     * name of coding system (ST)
          GOTO      RZTR9999
.
RZTR4604  RESET     ZTR04604                     * alternate identifier (ST)
          GOTO      RZTR9999
.
RZTR4605  RESET     ZTR04605                     * alternate text (ST)
          GOTO      RZTR9999
.
RZTR4606  RESET     ZTR04606                     * name of alt. cod. system (ST)
          GOTO      RZTR9999
.
.         ZTR.47 Triage Nurse Code (XCN)
.
RZTR4700  BRANCH    COMPCNT,RZTR4701:            * id number (ST)
                            RZTR4702:            * family name (ST)
                            RZTR4703:            * given name (ST)
                            RZTR4704:            * middle name (ST)
                            RZTR4705:            * suffix (ST)
                            RZTR4706:            * prefix (ST)
                            RZTR4707:            * degree (IS)
                            RZTR4708:            * source table (IS)
                            RZTR4709:            * assigning authority (HD)
                            RZTR4710:            * name type code (ID)
                            RZTR4711:            * identifier check digit (ST)
                            RZTR4712:            * check digit scheme code (ID)
                            RZTR4713:            * identifier type code (IS)
                            RZTR4714:            * assigning facility (HD)
                            RZTR4715             * name representation code (ID)
          GOTO      RZTR9999
.
RZTR4701  RESET     ZTR04701                     * load id number (ST)
          GOTO      RZTR9999
.
RZTR4702  RESET     ZTR04702                     * load family name (ST)
          GOTO      RZTR9999
.
RZTR4703  RESET     ZTR04703                     * load given name (ST)
          GOTO      RZTR9999
.
RZTR4704  RESET     ZTR04704                     * load middle name (ST)
          GOTO      RZTR9999
.
RZTR4705  RESET     ZTR04705                     * load suffix (ST)
          GOTO      RZTR9999
.
RZTR4706  RESET     ZTR04706                     * load prefix (ST)
          GOTO      RZTR9999
.
RZTR4707  RESET     ZTR04707                     * load degree (IS)
          GOTO      RZTR9999
.
RZTR4708  RESET     ZTR04708                     * load source table (IS)
          GOTO      RZTR9999
.
RZTR4709  RESET     ZTR04709                     * load assigning authority (HD)
          GOTO      RZTR9999
.
RZTR4710  RESET     ZTR04710                     * load name type code (ID)
          GOTO      RZTR9999
.
RZTR4711  RESET     ZTR04711                     * load ident. check digit (ST)
          GOTO      RZTR9999
.
RZTR4712  RESET     ZTR04712                     * load chk dig scheme code (ID)
          GOTO      RZTR9999
.
RZTR4713  RESET     ZTR04713                     * load ident. type code (IS)
          GOTO      RZTR9999
.
RZTR4714  RESET     ZTR04714                     * load assigning facility (HD)
          GOTO      RZTR9999
.
RZTR4715  RESET     ZTR04715                     * load name repres. code (ID)
          GOTO      RZTR9999
.
.         ZTR.48  Model of Care (Cat eu code) (CE)
.
RZTR4800  BRANCH    COMPCNT,RZTR4801:            * identifier (ST)
                            RZTR4802:            * text (ST)
                            RZTR4803:            * name of coding system (ST)
                            RZTR4804:            * alternate identifier (ST)
                            RZTR4805:            * alternate text (ST)
                            RZTR4806             * name of alt. cod. system (ST)
          GOTO      RZTR9999
.
RZTR4801  RESET     ZTR04801                     * identifier (ST)
          GOTO      RZTR9999
.
RZTR4802  RESET     ZTR04802                     * text (ST)
          GOTO      RZTR9999
.
RZTR4803  RESET     ZTR04803                     * name of coding system (ST)
          GOTO      RZTR9999
.
RZTR4804  RESET     ZTR04804                     * alternate identifier (ST)
          GOTO      RZTR9999
.
RZTR4805  RESET     ZTR04805                     * alternate text (ST)
          GOTO      RZTR9999
.
RZTR4806  RESET     ZTR04806                     * name of alt. cod. system (ST)
          GOTO      RZTR9999
.
.         ZTR.49  Reason for Change (Cat FW code) (CE)
.
RZTR4900  BRANCH    COMPCNT,RZTR4901:            * identifier (ST)
                            RZTR4902:            * text (ST)
                            RZTR4903:            * name of coding system (ST)
                            RZTR4904:            * alternate identifier (ST)
                            RZTR4905:            * alternate text (ST)
                            RZTR4906             * name of alt. cod. system (ST)
          GOTO      RZTR9999
.
RZTR4901  RESET     ZTR04901                     * identifier (ST)
          GOTO      RZTR9999
.
RZTR4902  RESET     ZTR04902                     * text (ST)
          GOTO      RZTR9999
.
RZTR4903  RESET     ZTR04903                     * name of coding system (ST)
          GOTO      RZTR9999
.
RZTR4904  RESET     ZTR04904                     * alternate identifier (ST)
          GOTO      RZTR9999
.
RZTR4905  RESET     ZTR04905                     * alternate text (ST)
          GOTO      RZTR9999
.
RZTR4906  RESET     ZTR04906                     * name of alt. cod. system (ST)
          GOTO      RZTR9999
.
RZTR9999  RETURN
+
.*****************************************************************************
.*                                 RZNT0000        Called by: PROC0000       *
.*                          Reset the ZNT fields                             *
.*****************************************************************************
.
RZNT0000  BRANCH    FIELDNO,RZNT0100:            * Set ID (SI)
                            RZNT0200:            * Comment Type (NM)
                            RZNT0300:            * Note Number (NM)
                            RZNT0400:            * Comments (ST)
                            RZNT0500             * Status (ST)
.
.         Invalid ZNT field received, so ignore it
.
          GOTO      RZNT9999
.
.         ZNT.1  Set ID (SI)
.
RZNT0100  BRANCH    COMPCNT,RZNT0101
.
RZNT0101  RESET     ZNT00101
          GOTO      RZNT9999
.
.         ZNT.2  Comment Type (NM)
.
RZNT0200  BRANCH    COMPCNT,RZNT0201
.
RZNT0201  RESET     ZNT00201
          GOTO      RZNT9999
.
.         ZNT.3  Note Number (NM)
.
RZNT0300  BRANCH    COMPCNT,RZNT0301
.
RZNT0301  RESET     ZNT00301
          GOTO      RZNT9999
.
.         ZNT.4  Comments (ST)
.
RZNT0400  BRANCH    COMPCNT,RZNT0401
.
RZNT0401  RESET     ZNT00401
          GOTO      RZNT9999
.
.         ZNT.5  Status (ST)
.
RZNT0500  BRANCH    COMPCNT,RZNT0501
.
RZNT0501  RESET     ZNT00501
          GOTO      RZNT9999
.
RZNT9999  RETURN
+
.*****************************************************************************
.*                                 RRGS0000        Called by: PROC0000       *
.*                          Load the RGS fields                              *
.*****************************************************************************
.
RRGS0000  BRANCH    FIELDNO,RRGS0100:            * Set ID (SI)
                            RRGS0200:            * Segment Action Code (ID)
                            RRGS0300             * Resource Group ID (CE)
.
.         Invalid RGS field received, so ignore it
.
          GOTO      RRGS9999
.
.         RGS.1  Set ID (SI)
.
RRGS0100  BRANCH    COMPCNT,RRGS0101
.
RRGS0101  RESET     RGS00101
          GOTO      RRGS9999
.
.         RGS.2  Segment Action Code (ID)
.
RRGS0200  BRANCH    COMPCNT,RRGS0201
.
RRGS0201  RESET     RGS00201
          GOTO      RRGS9999
.
.         RGS.3 Resource Group ID (CE)
.
RRGS0300  BRANCH    COMPCNT,RRGS0301:            * identifier (ST)
                            RRGS0302:            * text (ST)
                            RRGS0303:            * name of coding system (ST)
                            RRGS0304:            * alternate identifier (ST)
                            RRGS0305:            * alternate text (ST)
                            RRGS0306             * name of alt. cod. system (ST)
          GOTO      RRGS9999
.
RRGS0301  RESET     RGS00301                     * identifier (ST)
          GOTO      RRGS9999
.
RRGS0302  RESET     RGS00302                     * text (ST)
          GOTO      RRGS9999
.
RRGS0303  RESET     RGS00303                     * name of coding system (ST)
          GOTO      RRGS9999
.
RRGS0304  RESET     RGS00304                     * alternate identifier (ST)
          GOTO      RRGS9999
.
RRGS0305  RESET     RGS00305                     * alternate text (ST)
          GOTO      RRGS9999
.
RRGS0306  RESET     RGS00306                     * name of alt. cod. system (ST)
          GOTO      RRGS9999
.
RRGS9999  RETURN
+
.*****************************************************************************
.*                            VMSH0000             Called by: PROC0000       *
.*      Validate that the mandatory MSH fields are populated or null.        *
.*****************************************************************************
.
.         Encoding Characters
.
VMSH0000  MOVELPTR  MSH00201,FORM3               * field populated ?
          COMPARE   FOUR,FORM3                   * all encoding chars present ?
          GOTO      VMSH2000 IF NOT LESS         * yes
.
          MOVE      "MSH.2: Encoding characters incomplete",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         Message Type - Component 1
.
VMSH2000  STRIP     MSH00901
          MOVELPTR  MSH00901,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "MSH.9: Message Type not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Message Type - Component 2
.
          STRIP     MSH00902
          MOVELPTR  MSH00902,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "MSH.9: Trigger Event not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VMSH5000
          ENDIF
          MOVE      MSH00902,MESSTYPE
          MOVE      MESSTYPE,SAVMTYPE            * save message type for ACK
.
          MATCH     MTYPES0x,MESSTYPE
          IF        @EQUAL
            MOVE      "S0x",MESSTYPE             * S02/S03/S04 ?
          ENDIF
          CALL      VTYP0000                     * valid message type ?
.
.         Message Control ID
.
VMSH5000  STRIP     MSH01001
          MOVELPTR  MSH01001,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "MSH.10: Message Control ID not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Processing Id
.
VMSH6000  STRIP     MSH01101
          MOVELPTR  MSH01101,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "MSH.11: Processing ID not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VMSH7000
          ENDIF
.
          MATCH     ANSP,MSH01101                * Production ?
          GOTO      VMSH7000 IF EQUAL            * yes - ok
.
          MATCH     ANSD,MSH01101                * Debugging ?
          GOTO      VMSH7000 IF EQUAL            * yes - ok
.
          MATCH     ANST,MSH01101                * Training ?
          GOTO      VMSH7000 IF EQUAL            * yes - ok
.
          MOVE      "MSH.11: Processing ID not valid",ERRORDSC
          MOVE      "202",ERRORNUM
          CALL      EROR0000
.
.         Version Id
.
VMSH7000  STRIP     MSH01201
          MOVELPTR  MSH01201,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "MSH.12: Version ID not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VMSH9999
          ENDIF
.
.         Messages using HL7 2.4 instead of 2.3.1:
.                                     10 = M02 (Staff/Practitioner)
.                                     12 = S14 (Update Appointment OUT)
.                                     17 = S12 (New Appointment OUT/INP)
.                                     18 = S13 (Reschedule Appointment OUT)
.                                     19 = S15 (Cancel Appointment OUT/INP)
.                                     20 = S26 (DNA Appointment OUT)
.
          IF        MESSGNUM <> 10 & MESSGNUM <> 12 & MESSGNUM <> 17 & MESSGNUM <> 18 & MESSGNUM <> 19 & MESSGNUM <> 20
            GOTO      VMSH7100
          ENDIF
.
          IF        MESSGNUM = 12
            MATCH     "2.4",MSH01201
            GOTO      VMSH7100 IF NOT EQUAL      * SIU^S14 (Theatre) is 2.3.1
          ENDIF
.
          IF        FORM3 <> 3
            MOVE      "MSH.12: Version ID incorrect length",ERRORDSC
            MOVE      "203",ERRORNUM
            CALL      EROR0000
            GOTO      VMSH9999
          ENDIF
.
VMSH7050  MATCH     "2.4",MSH01201
          GOTO      VMSH7200 IF NOT EQUAL
.
.         Message Date/Time (mandatory for HL7 2.4 only)
.
          STRIP     MSH00701
          MOVELPTR  MSH00701,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "MSH.7: Message DateTime not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VMSH9999
          ENDIF
.
          MATCH     BLANKSTR,MSH00701            * field null ?
          IF        @EQUAL
            MOVE      "MSH.7: Message DateTime mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          GOTO      VMSH8000
.
VMSH7100  IF        FORM3 <> 5
            MOVE      "MSH.12: Version ID incorrect length",ERRORDSC
            MOVE      "203",ERRORNUM
            CALL      EROR0000
            GOTO      VMSH9999
          ENDIF
.
          MATCH     "2.3.1",MSH01201
          GOTO      VMSH8000 IF EQUAL
.
VMSH7200  MOVE      "MSH.12: Version ID not valid",ERRORDSC
          MOVE      "203",ERRORNUM
          CALL      EROR0000
.
.         Make sure the requestor code is valid for Cat rs in SRM^S0x messages
.
VMSH8000  MATCH     MTYPES0x,MESSTYPE            * SRM^S0x message ?
          GOTO      VMSH9000 IF NOT EQUAL        * no
.
          PACK      KEY5,CATrs,MSH00301,SP5
          CALL      RDCODE1                      * code exists ?
          BRANCH    OVRCD,VMSH8100
.
          MATCH     ANSI,PTCOACTV                * inactive ?
          GOTO      VMSH8500 IF NOT EQUAL
.
VMSH8100  MOVE      "MSH.3: Requestor is not a valid Cat rs code",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VMSH9999
.
.         Make sure message date/time is valid and not in the future.
.
VMSH8500  STRIP     MSH00701
          MOVELPTR  MSH00701,FORM3               * field populated ?
          MOVE      MSH00701,DIM14
          MOVE      "MSH.7 ",FIELDID
          MOVE      ONE,DATFLAG1
          MOVE      ONE,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
VMSH9000
.
VMSH9999  RETURN
+
.*****************************************************************************
.*                            VARQ0000             Called by: PROC0000       *
.*      Validate that the mandatory ARQ fields are populated or null.        *
.*****************************************************************************
VARQ0000
VARQ9999  RETURN
+
.*****************************************************************************
.*                            VGT10000             Called by: PROC0000       *
.*      Validate that the mandatory GT1 fields are populated or null.        *
.*****************************************************************************
VGT10000  SQUEEZE   GT100101
          MOVELPTR  GT100101,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VGT10300 IF EQUAL            * no
.
          MATCH     BLANKSTR,GT100101            * field null ?
          GOTO      VGT10300 IF EQUAL            * yes
.
          MATCH     "1",GT100101
          IF        !@EQUAL
            MOVE      "GT1.1: Set ID must equal 1",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VGT10300
          ENDIF
.
.         Guarantor Name
.
VGT10300  STRIP     GT100301
          MOVELPTR  GT100301,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VGT10500 IF EQUAL            * no
.
          MATCH     BLANKSTR,GT100301            * field null ?
          GOTO      VGT10500 IF EQUAL            * yes
.
          IF        FORM3 > 80
            MOVE      "GT1.5: Guarantor Name has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VGT10500
          ENDIF
.
.         Guarantor Address
.
.         Street Address (Component 1) is mandatory if address is being
.         populated.  If address line 1 is not populated, then we should
.         assume that the rest of the address is also not populated (even
.         if it is).  If address line 1 is null, then we should assume
.         that the rest of the address is also null (even if it is populated).
.
VGT10500  STRIP     GT100501
          MOVELPTR  GT100501,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      GT100502,SP100,SP100,SP100,SP100,SP100
            CLEAR     GT100502
            PACK      GT100503,SP100,SP100,SP100,SP100,SP100
            CLEAR     GT100503
            PACK      GT100504,SP100,SP100,SP100,SP100,SP100
            CLEAR     GT100504
            PACK      GT100505,SP100,SP100,SP100,SP100,SP100
            CLEAR     GT100505
            PACK      GT100506,SP100,SP100,SP100,SP100,SP100
            CLEAR     GT100506
            PACK      GT100507,SP100,SP100,SP100,SP100,SP100
            CLEAR     GT100507
            PACK      GT100508,SP100,SP100,SP100,SP100,SP100
            CLEAR     GT100508
            PACK      GT100509,SP100,SP100,SP100,SP100,SP100
            CLEAR     GT100509
            PACK      GT100510,SP100,SP100,SP100,SP100,SP100
            CLEAR     GT100510
            PACK      GT100511,SP100,SP100,SP100,SP100,SP100
            CLEAR     GT100511
            GOTO      VGT10600
          ENDIF
.
          MATCH     BLANKSTR,GT100501            * field null ?
          IF        @EQUAL
            MOVE      BLANKSTR,GT100502
            MOVE      BLANKSTR,GT100503
            MOVE      BLANKSTR,GT100504
            MOVE      BLANKSTR,GT100505
            MOVE      BLANKSTR,GT100506
            MOVE      BLANKSTR,GT100507
            MOVE      BLANKSTR,GT100508
            MOVE      BLANKSTR,GT100509
            MOVE      BLANKSTR,GT100510
            MOVE      BLANKSTR,GT100511
            GOTO      VGT10600
          ENDIF
.
.         Other designation - Component 2
.
VGT10501  STRIP     GT100502
.
.         City - Component 3 (webPAS Suburb)
.
VGT10502  STRIP     GT100503
.
.         Country - Component 6
.         Check this field first to determine how to validate the rest
.         of the fields
.
VGT10503  STRIP     GT100506
          MOVELPTR  GT100506,FORM3               * field populated ?
          IF        FORM3 = 0
.0887136    MOVE      "GT1.5 : Address Country not populated",ERRORDSC
.0887136    MOVE      "207",ERRORNUM
.0887136    CALL      EROR0000
.0887136    GOTO      VGT10600
            GOTO      VGT10520
          ENDIF
.
          MATCH     BLANKSTR,GT100506            * null field ?
          IF        @EQUAL
.0887136    MOVE      "GT1.5 : Address Country is mandatory",ERRORDSC
.0887136    MOVE      "207",ERRORNUM
.0887136    CALL      EROR0000
.0887136    GOTO      VGT10600
          ELSE
            MOVE      "GT1.5 ",DIM6
            MOVE      GT100506,DIM20
            CALL      VALC0000                   * validate country description
          ENDIF
.
.         Country Address is populated, so check if the country is Australia
.         which will determine if it is an overseas address or a local address
.
          MATCH     "AUSTRALIA",GT100506         * local address ?
          GOTO      VGT10550 IF NOT EQUAL        * no
.
.         State - Component 4 (Local Address Only)
.
VGT10520  STRIP     GT100504
.
.         Postcode - Component 5 (Local Address Only)
.
          SQUEEZE   GT100505
          MOVELPTR  GT100505,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VGT10600 IF EQUAL            * no
.
          MATCH     BLANKSTR,GT100505            * null field ?
          GOTO      VGT10600 IF EQUAL            * yes
.
.         Post Code is populated, so validate it
.
          IF        FORM3 <> 4
            MOVE      "GT1.5 : Address Postcode incorrect length",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VGT10600
          ENDIF
.
          TYPE      GT100505
          IF        !@EQUAL
            MOVE      "GT1.5 : Address Postcode not numeric",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VGT10600
          ENDIF
.
          COMPARE   TWO,PTCNHDPS                 * Australian site ?
          GOTO      VGT10600 IF LESS             * no
.
.         Postcode is populated, so if the suburb is also populated,
.         check that the suburb and postcode are valid.  If state is also
.         populated, then use this to validate as well.
.
          MOVELPTR  GT100503,FORM3
          COMPARE   ZERO,FORM3                   * suburb populated ?
          GOTO      VGT10600 IF EQUAL            * no
.
          MATCH     BLANKSTR,GT100503            * blank suburb ?
          GOTO      VGT10600 IF EQUAL            * yes
.
          MOVELPTR  GT100504,FORM3
          COMPARE   ZERO,FORM3                   * state populated ?
          GOTO      VGT10530 IF EQUAL            * no
.
          MATCH     BLANKSTR,GT100504            * blank state ?
          GOTO      VGT10530 IF EQUAL            * yes
.
.         Check that the postcode/suburb/state is on file
.
          PACK      KEY8,GT100505,SP10
          PACK      KEY45,GT100503,SP70
          PACK      KEY3,GT100504,SP3
          PACK      KEY56,KEY8,KEY45,KEY3
          CALL      RDIBPOS1                     * postcode on file ?
          BRANCH    OVRCD,VGT10540               * no - invalid
          GOTO      VGT10600
.
.         Check that the postcode/suburb is on file
.
VGT10530  PACK      KEY8,GT100505,SP10
          PACK      KEY56,KEY8,GT100503,SP70
          CALL      RDIBPOS1                     * postcode/suburb on file ?
          COMPARE   ZERO,OVRCD
          GOTO      VGT10600 IF EQUAL            * yes - valid
.
          CALL      RKIBPOS1                     * no - read next record
          BRANCH    OVRCD,VGT10540               * eof - error
.
          PACK      KEY8,GT100505,SP10
          MATCH     KEY8,IBPOPCOD                * same postcode still ?
          IF        @EQUAL
            PACK      KEY45,GT100503,SP70
            MATCH     KEY45,IBPOSUBR             * yes - same suburb still ?
            GOTO      VGT10600 IF EQUAL          * yes
          ENDIF
.
VGT10540  MOVE      "GT1.5 : Address PostcodeSuburb not valid",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
          GOTO      VGT10600
.
.         We have an overseas address, so set the postcode (component 5)
.         to "8888" and load the country (component 6) into state (component 4),
.         remove any data from country (component 6) and set city (component 3)
.         to "OVERSEAS ADDRESS"
.
VGT10550  MOVE      "OVERSEAS ADDRESS",GT100503
          MOVE      GT100506,GT100504
          PACK      GT100505,EIGHT,EIGHT,EIGHT,EIGHT
          PACK      GT100506,SP100,SP100,SP100,SP100,SP100
.
.         Guarantor Home Phone / Mobile Phone
.
.         ^^CP^^^^<cell phone>
.         ^PRN^PH^^^^<home phone>
.
.         The following logic is based on whether or not component 3
.         is populated and if so, what it is populated with (CP, PH or blank).
.
VGT10600  MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 3
.
.           Check Component 3 first to see if it is populated
.
            STRIP     GT100603[COUNTER]          * remove trailing spaces
            MOVELPTR  GT100603[COUNTER],FORM3
            COMPARE   ZERO,FORM3                 * field populated ?
            GOTO      VGT10660 IF EQUAL          * no
.
            MATCH     BLANKSTR,GT100603[COUNTER] * null field ?
            GOTO      VGT10660 IF EQUAL          * yes
.
.           Component 3 is populated, so it should be either "CP" or "PH"
.
            IF        FORM3 <> 2
              MOVE      "GT1.6: Component 3 incorrect length",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VGT10660
            ENDIF
.
            MATCH     "CP",GT100603[COUNTER]     * cell phone ?
            GOTO      VGT10660 IF EQUAL          * yes
.
            MATCH     "PH",GT100603[COUNTER]     * home phone ?
            GOTO      VGT10650 IF EQUAL          * yes
.
            MOVE      "GT1.6: Component 3 not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VGT10660
.
.           We have a phone number, so check that component 2 is "PRN"
.           (home phone)
.
VGT10650    STRIP     GT100602[COUNTER]          * remove trailing spaces
            MOVELPTR  GT100602[COUNTER],FORM3    * field populated ?
            IF        FORM3 = 0
              MOVE      "GT1.6: Component 2 not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
              GOTO      VGT10660                 * no - finished
            ENDIF
.
            MATCH     BLANKSTR,GT100602[COUNTER] * null field ?
            IF        @EQUAL
              MOVE      "GT1.6: Component 2 is mandatory",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
              GOTO      VGT10660                 * no - finished
            ENDIF
.
.           Component 2 is populated, so it should be "PRN"
.
            IF        FORM3 <> 3
              MOVE      "GT1.6: Component 2 incorrect length",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VGT10660
            ENDIF
.
            MATCH     "PRN",GT100602[COUNTER]    * home phone ?
            GOTO      VGT10660 IF EQUAL          * yes
.
            MOVE      "GT1.6: Component 2 not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
.
VGT10660    STRIP     GT100601[COUNTER]
            STRIP     GT100602[COUNTER]
            STRIP     GT100604[COUNTER]
            STRIP     GT100605[COUNTER]
            STRIP     GT100606[COUNTER]
            STRIP     GT100607[COUNTER]
            STRIP     GT100608[COUNTER]
            SQUEEZE   GT100609[COUNTER]
            ADD       ONE,COUNTER                * increment counter
          DO
.
.         Guarantor Work Phone
.
.         ^WPN^PH^^^^<business phone>
.
.         The following logic is based on whether or not component 3
.         is populated and if so, what it is populated with (CP, PH or blank).
.
.         Check Component 3 first to see if it is populated
.
VGT10700  STRIP     GT100703
          MOVELPTR  GT100703,FORM3
          COMPARE   ZERO,FORM3                 * field populated ?
          GOTO      VGT10760 IF EQUAL          * no
.
          MATCH     BLANKSTR,GT100703          * null field ?
          GOTO      VGT10760 IF EQUAL          * yes
.
.         Component 3 is populated, so it should be "PH"
.
          IF        FORM3 <> 2
            MOVE      "GT1.7 : Component 3 incorrect length",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VGT10760
          ENDIF
.
          MATCH     "PH",GT100703              * home phone ?
          GOTO      VGT10750 IF EQUAL          * yes
.
          MOVE      "GT1.7 : Component 3 not valid",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
          GOTO      VGT10760
.
.         We have a phone number, so check that component 2 is "WPN"
.         (business phone)
.
VGT10750  STRIP     GT100702                   * remove trailing spaces
          MOVELPTR  GT100702,FORM3             * field populated ?
          IF        FORM3 = 0
            MOVE      "GT1.7 : Component 2 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VGT10760                 * no - finished
          ENDIF
.
          MATCH     BLANKSTR,GT100702          * null field ?
          IF        @EQUAL
            MOVE      "GT1.7 : Component 2 is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VGT10760                 * no - finished
          ENDIF
.
.         Component 2 is populated, so it should be "WPN"
.
          IF        FORM3 <> 3
            MOVE      "GT1.7 : Component 2 incorrect length",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VGT10760
          ENDIF
.
          MATCH     "WPN",GT100702[COUNTER]    * business phone ?
          GOTO      VGT10760 IF EQUAL          * yes
.
          MOVE      "GT1.7 : Component 2 not valid",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
.
VGT10760  STRIP     GT100701
          STRIP     GT100702
          STRIP     GT100704
          STRIP     GT100705
          STRIP     GT100706
          STRIP     GT100707
          STRIP     GT100708
          SQUEEZE   GT100709
.
.         Guarantor Relationship
.
VGT11100  STRIP     GT101101
          MOVELPTR  GT101101,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VGT19000 IF EQUAL            * no
.
          MATCH     BLANKSTR,GT101101            * field null ?
          GOTO      VGT19000 IF EQUAL            * yes
.
.         Make sure the relationship code is not more than 10 characters
.
          IF        FORM3 > 10
            MOVE      "GT1.11: Relationship has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ELSE
            PACK      KEY10,GT101101,SP10
            CALL      RDPMREL1                   * code on file ?
            IF        OVRCD = 1
              MOVE      "GT1.11: Relationship Code not valid",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.
VGT11110  STRIP     GT101103
          MOVELPTR  GT101103,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "GT1.11: Relationship coding system not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ELSE
            MATCH     BLANKSTR,GT101103          * null field ?
            IF        @EQUAL
              MOVE      "GT1.11: Relationship coding system is mandatory",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
VGT19000
.
VGT19999  RETURN
+
.*****************************************************************************
.*                            VIN10000             Called by: PROC0000       *
.*      Validate that the mandatory IN1 fields are populated or null.        *
.*****************************************************************************
VIN10000  SQUEEZE   IN100101
          MOVELPTR  IN100101,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VIN10200 IF EQUAL            * no
.
          MATCH     BLANKSTR,IN100101            * field null ?
          GOTO      VIN10200 IF EQUAL            * yes
.
          MATCH     "1",IN100101
          IF        !@EQUAL
            MOVE      "IN1.1: Set ID must equal 1",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VIN10200
          ENDIF
.
.         Insurance Plan ID (CE)
.
VIN10200  STRIP     IN100201
          MOVELPTR  IN100201,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VIN10300 IF EQUAL            * no
.
          MATCH     BLANKSTR,IN100201            * field null ?
          IF        @EQUAL
            GOTO      VIN10300
          ELSE
            PACK      D6,IN100301,SP70
            PACK      KEY14,D6,IN100201,SP70
            CALL      RDFUND1
            IF        OVRCD = 1
              MOVE      "IN1.2: Insurance Plan ID not valid",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
.         Make sure the fund table code is not more than 8 characters
.
          IF        FORM3 > 8
            MOVE      "IN1.2: Insurance Plan ID has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.
VIN10210  STRIP     IN100203
          MOVELPTR  IN100203,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "IN1.2: Insurance Plan ID coding system not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ELSE
            MATCH     BLANKSTR,IN100203          * null field ?
            IF        @EQUAL
              MOVE      "IN1.2: Insurance Plan ID coding system is mandatory",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
.         Insurance Company ID (CX)
.
VIN10300  STRIP     IN100301
          MOVELPTR  IN100301,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VIN13600 IF EQUAL            * no
.
          MATCH     BLANKSTR,IN100301            * field null ?
          GOTO      VIN13600 IF EQUAL            * yes
.
.         Make sure the fund code is not more than 6 characters
.
          IF        FORM3 > 6
            MOVE      "IN1.3: Insurance Company ID has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VIN10310  PACK      D6,IN100301,SP70
          PACK      KEY14,D6,ZERO8,SP70
          CALL      RDFUND1
          IF        OVRCD = 1
            MOVE      "IN1.2: Insurance Company ID not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Insurance Policy Number (ST)
.
VIN13600  STRIP     IN103601
          MOVELPTR  IN103601,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VIN19000 IF EQUAL            * no
.
          MATCH     BLANKSTR,IN103601            * field null ?
          GOTO      VIN19000 IF EQUAL            * yes
.
.         Make sure the policy number is not more than 19 characters
.
          IF        FORM3 > 19
            MOVE      "IN1.36: Insurance Policy Number has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VIN19000
.
VIN19999  RETURN
+
.*****************************************************************************
.*                            VAIS0000             Called by: PROC0000       *
.*      Validate that the mandatory AIS fields are populated or null.        *
.*****************************************************************************
.         AIS.1  Set ID (SI)
.
VAIS0000  SQUEEZE   AIS00101
          MOVELPTR  AIS00101,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VAIS0200 IF EQUAL            * no
.
          MATCH     BLANKSTR,AIS00101            * field null ?
          GOTO      VAIS0200 IF EQUAL            * yes
.
          MATCH     "1",AIS00101
          IF        !@EQUAL
            MOVE      "AIS.1: Set ID must equal 1",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VAIS0200
          ENDIF
.
.         AIS.2  Segment Action Code (ID)
.
VAIS0200  STRIP     AIS00201
          MOVELPTR  AIS00201,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VAIS0300 IF EQUAL            * no
.
          MATCH     BLANKSTR,AIS00201            * field null ?
          GOTO      VAIS0300 IF EQUAL            * yes
.
.         AIS.3  Universal Service ID (CE)
.
VAIS0300  STRIP     AIS00301
          MOVELPTR  AIS00301,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VAIS0400 IF EQUAL            * no
.
          MATCH     BLANKSTR,AIS00301            * field null ?
          GOTO      VAIS0400 IF EQUAL            * yes
.
.         AIS.4  Start Date/Time (TS)
.
VAIS0400  STRIP     AIS00401
          MOVELPTR  AIS00401,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VAIS9999 IF EQUAL            * no
.
          MATCH     BLANKSTR,AIS00401            * field null ?
          GOTO      VAIS9999 IF EQUAL            * yes
.
VAIS9999  RETURN
+
.*****************************************************************************
.*                            VAIL0000             Called by: PROC0000       *
.*      Validate that the mandatory AIL fields are populated or null.        *
.*****************************************************************************
.         AIL.1  Set ID (SI)
.
VAIL0000  SQUEEZE   AIL00101
          MOVELPTR  AIL00101,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VAIL0200 IF EQUAL            * no
.
          MATCH     BLANKSTR,AIL00101            * field null ?
          GOTO      VAIL0200 IF EQUAL            * yes
.
          MATCH     "1",AIL00101
          IF        !@EQUAL
            MOVE      "AIL.1: Set ID must equal 1",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VAIL0200
          ENDIF
.
.         AIL.2  Segment Action Code (ID)
.
VAIL0200  STRIP     AIL00201
          MOVELPTR  AIL00201,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VAIL0300 IF EQUAL            * no
.
          MATCH     BLANKSTR,AIL00201            * field null ?
          GOTO      VAIL0300 IF EQUAL            * yes
.
.         AIL.3  Location Resource ID (PL)
.
VAIL0300  CALL      VAIL3000                     * validate AIL.3
.
.         AIL.4  Location Type-AIL (CE)
.
VAIL0400  STRIP     AIL00401
          MOVELPTR  AIL00401,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VAIL0500 IF EQUAL            * no
.
          MATCH     BLANKSTR,AIL00401            * field null ?
          GOTO      VAIL0500 IF EQUAL            * yes
.
.         AIL.5  Location Group (CE)
.
VAIL0500  STRIP     AIL00501
          MOVELPTR  AIL00501,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VAIL0600 IF EQUAL            * no
.
          MATCH     BLANKSTR,AIL00501            * field null ?
          GOTO      VAIL0600 IF EQUAL            * yes
.
.         AIL.6  Start Date/Time (TS)
.
VAIL0600  STRIP     AIL00601
          MOVELPTR  AIL00601,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VAIL0900 IF EQUAL            * no
.
          MATCH     BLANKSTR,AIL00601            * field null ?
          GOTO      VAIL0900 IF EQUAL            * yes
.
.         AIL.9  Duration (NM)
.
VAIL0900  STRIP     AIL00901
          MOVELPTR  AIL00901,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VAIL1000 IF EQUAL            * no
.
          MATCH     BLANKSTR,AIL00901            * field null ?
          GOTO      VAIL1000 IF EQUAL            * yes
.
.         AIL.10 Duration Units (CE)
.
VAIL1000  STRIP     AIL01001
          MOVELPTR  AIL01001,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VAIL9999 IF EQUAL            * no
.
          MATCH     BLANKSTR,AIL01001            * field null ?
          GOTO      VAIL9999 IF EQUAL            * yes
.
VAIL9999  RETURN
+
.*****************************************************************************
.*                            VAIL3000                                       *
.*      Validate AIL.3 Location Resource ID (PL)                             *
.*****************************************************************************
VAIL3000  MATCH     "1",PTCNAILP
          GOTO      VAIL3999 IF NOT EQUAL        * not using AIL.3 for clinic id
.
          MATCH     ANSO,PV100201
          GOTO      VAIL3999 IF NOT EQUAL        * not outpatient
.
          MOVE      SP70,AIL3CLIN
          STRIP     AIL00301
          MOVELPTR  AIL00301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VAIL3900 IF EQUAL
.
          MATCH     BLANKSTR,AIL00301            * field null ?
          GOTO      VAIL3900 IF EQUAL
.
          CALL      OUTSIT00                     * get out site from MSH.3
          BRANCH    EXIT,VAIL3999
.
.         Open the clinic master file file prefix from userid in MSH.3
.
          CLOSE     OUTMA1A1
          PACK      FILENAME,OUTFILPR,FILMA1A1
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTMA1A1,FILENAME
          TRAPCLR   IO
          IF        OVRCD = 1
            MOVE      "AIL.3: Open failed on outma1af",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VAIL3999
          ENDIF
.
          PACK      D6,AIL00301,SP70
          PACK      KEY18,OUTSITPR,AIL00301,SP70
          CALL      VCLN0000                     * validate clinic ID
          IF        EXIT = 1
            MOVE      "AIL.3: Location Resource ID not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VAIL3999
          ELSE
            MOVE      OMACLIN,AIL3CLIN           * save clinic id
            GOTO      VAIL3999
          ENDIF
.
VAIL3900  MOVE      "AIL.3: Location Resource ID is mandatory",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
.
VAIL3999  RETURN
+
.*****************************************************************************
.*                            VCLN0000                                       *
.*      Validate Location Resource ID exists on outma1af                     *
.*****************************************************************************
VCLN0000  CALL      RDSMASA1
          CALL      RDKMASA1
          BRANCH    OVRCD,VCLN9500
.
          MATCH     D6,OMACLIN
          GOTO      VCLN9500 IF NOT EQUAL
.
VCLN9000  MOVE      ZERO,EXIT                    * valid on outma1af
          GOTO      VCLN9999
.
VCLN9500  MOVE      ONE,EXIT                     * not valid on outma1af
VCLN9999  RETURN
+
.*****************************************************************************
.*                            VAIP0000             Called by: PROC0000       *
.*      Validate that the mandatory AIP fields are populated or null.        *
.*****************************************************************************
.         AIP.1  Set ID (SI)
.
VAIP0000  SQUEEZE   AIP00101
          MOVELPTR  AIP00101,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VAIP0200 IF EQUAL            * no
.
          MATCH     BLANKSTR,AIP00101            * field null ?
          GOTO      VAIP0200 IF EQUAL            * yes
.
          MATCH     "1",AIP00101
          IF        !@EQUAL
            MOVE      "AIP.1: Set ID must equal 1",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VAIP0200
          ENDIF
.
.         AIP.2  Segment Action Code (ID)
.
VAIP0200  STRIP     AIP00201
          MOVELPTR  AIP00201,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VAIP0300 IF EQUAL            * no
.
          MATCH     BLANKSTR,AIP00201            * field null ?
          GOTO      VAIP0300 IF EQUAL            * yes
.
.         AIP.3  Personnel Resource ID (XCN)
.
VAIP0300  CALL      VAIP3000                     * validate AIP.3
.
.         AIP.4  AIP.4  Resource Role (CE)
.
VAIP0400  STRIP     AIP00401
          MOVELPTR  AIP00401,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VAIP9999 IF EQUAL            * no
.
          MATCH     BLANKSTR,AIP00401            * field null ?
          GOTO      VAIP9999 IF EQUAL            * yes
.
VAIP9999  RETURN
+
.*****************************************************************************
.*                            VAIP3000                                       *
.*      Validate AIP.3 Personnel Resource ID (XCN)                           *
.*****************************************************************************
VAIP3000  MOVE      SP70,AIP3DOCT
          MOVE      SP70,AIP3HCPC
          MOVE      SP70,AIP3LDOC
          STRIP     AIP00301
          MOVELPTR  AIP00301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VAIP3900 IF EQUAL
.
          MATCH     BLANKSTR,AIP00301            * field null ?
          IF        @EQUAL
            MOVE      BLANKSTR,AIP3HCPC
            MOVE      BLANKSTR,AIP3LDOC
            GOTO      VAIP3900
          ENDIF
.
          MATCH     ANSO,PV100201
          GOTO      VAIP3100 IF NOT EQUAL        * not outpatient
.
          CALL      OUTSIT00                     * get out site from MSH.3
          BRANCH    EXIT,VAIP3999
.
.         Open the clinic master file using SCH.22
.
          CLOSE     OUTMA1A1
          PACK      FILENAME,OUTFILPR,FILMA1A1
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTMA1A1,FILENAME
          TRAPCLR   IO
          IF        OVRCD = 1
            MOVE      "AIP.3: Open failed on outma1af",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VAIP3999
          ENDIF
.
VAIP3100  PACK      KEY20,AIP00301,SP70
          CALL      VPRV0000                     * validate Provider Number
          IF        EXIT = 1
            MOVE      "AIP.3: Personnel Resource ID not a valid provider",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VAIP3999
          ENDIF
.
          MATCH     ANSO,PV100201
          IF        !@EQUAL
            MOVE      PMHCHCPC,AIP3HCPC          * save hcp code
            MOVE      PMHCLDOC,AIP3LDOC          * save hcp linked doctor code
            GOTO      VAIP3999
          ENDIF
.
          PACK      D6,PMHCLDOC,SP70             * save hcp linked doctor code
          PACK      KEY18,OUTSITPR,SP70
          CALL      VDOC0000                     * validate hcp as a clinic
          IF        EXIT = 1
            MOVE      "AIP.3: Personnel Resource ID not a valid clinic",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VAIP3999
          ELSE
            MOVE      OMACLIN,AIP3DOCT           * save clinic id as doctor code
            GOTO      VAIP3999
          ENDIF
.
VAIP3900  MATCH     "1",PTCNAILP
          GOTO      VAIP3999 IF EQUAL            * not using AIP.3 for clinic id
.
          MATCH     ANSO,PV100201
          GOTO      VAIP3999 IF NOT EQUAL        * not outpatient
.
          MOVE      "AIP.3: Personnel Resource ID is mandatory",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
.
VAIP3999  RETURN
+
.*****************************************************************************
.*                            VPRV0000                                       *
.*      Validate HCP Provider Number exists on pmshcpaf                      *
.*****************************************************************************
VPRV0000  CALL      RSPMHCP3
VPRV1000  CALL      RKPMHCP3
          BRANCH    OVRCD,VPRV9500
.
          MATCH     KEY20,PMHCPRV1
          GOTO      VPRV9500 IF NOT EQUAL
.
.0890602  MATCH     "1",PMHCSTTS                 * hcp inactive ?
.0890602  GOTO      VPRV1000 IF NOT EQUAL
.
VPRV9000  MOVE      ZERO,EXIT                    * valid on pmshcpaf
          GOTO      VPRV9999
.
VPRV9500  MOVE      ONE,EXIT                     * not valid on pmshcpaf
VPRV9999  RETURN
+
.*****************************************************************************
.*                            VDOC0000                                       *
.*      Validate Location Resource ID exists on outma1af                     *
.*****************************************************************************
VDOC0000  CALL      RDSMASA1
VDOC1000  CALL      RDKMASA1
          BRANCH    OVRCD,VDOC9500
.
          MATCH     D6,OTMADEFD
          GOTO      VDOC1000 IF NOT EQUAL
.
VDOC9000  MOVE      ZERO,EXIT                    * valid on outma1af
          GOTO      VDOC9999
.
VDOC9500  MOVE      ONE,EXIT                     * not valid on outma1af
VDOC9999  RETURN
+
.*****************************************************************************
.*                            OUTSIT00                                       *
.*      Get outpatient site from userid in MSH.3.1                           *
.*****************************************************************************
OUTSIT00  MOVE      SP6,OUTSITPR
          MOVE      SP3,OUTFILPR
          STRIP     MSH00301
          MOVELPTR  MSH00301,FORM3
          IF        FORM3 = 0
            MOVE      "HL7RECVR  ",USERID        * default created by
          ELSE
            PACK      USERID,MSH00301,SP10       * use sending application
          ENDIF
.
          CALL      CLWEBSEC
          PACK      KEY10,USERID,SP10
          CALL      RDWBSE1
          IF        OVRCD = 1
            MOVE      USERID,ERRORDSC
            STRIP     ERRORDSC
            ENDSET    ERRORDSC
            APPEND    " is not a valid webPAS User ID",ERRORDSC
            RESET     ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      OUTSIT95
          ELSE
            MOVE      WBSEPCD,PASSCODE           * operator id
            MOVE      WBSESIT,OUTSITPR           * outpatient site
          ENDIF
.
          PACK      KEY6,OUTSITPR,SP6
          MOVE      KEY6,OUTSITPR
          CALL      RDSITA1
          IF        OVRCD = 1
            MOVE      "User ID does not have a valid outpatient site",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      OUTSIT95
          ELSE
            MOVE      OSTFILE,OUTFILPR           * save outpatient file prefix
          ENDIF
.
OUTSIT90  MOVE      ZERO,EXIT                    * no error
          GOTO      OUTSIT99
.
OUTSIT95  MOVE      ONE,EXIT                     * error
OUTSIT99  RETURN
+
.*****************************************************************************
.*                            VEVN0000             Called by: PROC0000       *
.*      Validate that the mandatory EVN fields are populated or null.        *
.*****************************************************************************
.
.         Recorded Date/Time (HL7 Mandatory)
.
VEVN0000  STRIP     EVN00201
          MOVELPTR  EVN00201,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "EVN.2: Recorded datetime not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         For ADT^A21 (On-leave) and ADT^A22 (Return from leave) message,
.         we need an Operator ID (webPAS Mandatory).
.         First check component 1 has a valid user id (websecaf).
.
          IF        MESSGNUM <> 14 & MESSGNUM <> 15
            GOTO      VEVN9999
          ENDIF
.
          STRIP     EVN00501
          MOVELPTR  EVN00501,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "EVN.5: Operator ID not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VEVN9999
          ENDIF
.
          MATCH     BLANKSTR,EVN00501
          IF        @EQUAL
            MOVE      "EVN.5: Operator ID is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VEVN9999
          ENDIF
.
          IF        FORM3 > 10
            MOVE      "EVN.5: Operator ID has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VEVN9999
          ENDIF
.
          PACK      KEY10,EVN00501,SP10
          CALL      RDWBSE1
          IF        OVRCD = 1
            MOVE      "EVN.5: Operator ID not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VEVN9999
          ENDIF
.
          MOVE      WBSEPCD,SAVPSSCD             * save 4-digit passcode
.
.         Now check component 9 (assigning authority) is populated.
.         (HL7 requirement)
.
          STRIP     EVN00509
          MOVELPTR  EVN00509,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "EVN.5: Assigning Authority not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VEVN9999
          ENDIF
.
          MATCH     BLANKSTR,EVN00509
          IF        @EQUAL
            MOVE      "EVN.5: Assigning Authority is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VEVN9999
          ENDIF
.
VEVN9999  RETURN
+
.*****************************************************************************
.*                            VPID0000             Called by: PROC0000       *
.*      Validate that the mandatory PID fields are populated or null.        *
.*      Also loads data fields for A28 & A31 messages.                       *
.*****************************************************************************
.
VPID0000  MOVE      ONE,URNFOUND                 * initialise as U/R not found
.
.         Validate Mother's identifier - Component 1
.         We need to get the mother's PMI details, so this has to be done
.         before we start loading PMI variables.
.
          MOVE      SP8,SAVEMDOB                 * initialise mother's dob
.
          STRIP     PID02101
          MOVELPTR  PID02101,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VPID0100 IF EQUAL            * no - no change required
.
          MATCH     BLANKSTR,PID02101            * field null ?
          GOTO      VPID0100 IF EQUAL            * yes - finished
.
.         The mother's identifier is populated, so make sure it's a valid U/R
.
          PACK      KEY8,PID02101,SP8
          RJUSTIFY  KEY8
          CALL      RDMAST1                      * mother's U/R on file ?
          IF        OVRCD = 1
            IF        QUICKREG = 1
              PACK      PID02101,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID02101
            ELSE
              MOVE      "PID.21: Mothers ID not a valid UR",ERRORDSC
              MOVE      "204",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VPID0100
          ENDIF
.
          MOVE      PBDATE,SAVEMDOB              * save mother's dob
          MATCH     ANSF,PSEX
          IF        !@EQUAL
            IF        QUICKREG = 1
              PACK      PID02101,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID02101
            ELSE
              MOVE      "PID.21: Mothers gender is inconsistent",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VPID0100
          ENDIF
.
.         Validate Mother's identifier type - Component 5
.
          STRIP     PID02105
          MOVELPTR  PID02105,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            IF        QUICKREG = 1
              PACK      PID02101,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID02101
            ELSE
              MOVE      "PID.21: Mothers ID type not populated",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VPID0100
          ENDIF
.
          MATCH     "MR",PID02105                * medical record number ?
          IF        !@EQUAL
            IF        QUICKREG = 1
              PACK      PID02101,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID02101
            ELSE
              MOVE      "PID.21: Mothers ID type is not valid",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VPID0100
          ENDIF
.
.         We have a valid mother's identifier, so make sure we have a valid
.         code record for mother-child link
.
          PACK      KEY5,ANSL,ANSU,SP5
          CALL      RDSCODE1                     * position on category
VPID0080  CALL      RDKCODE1                     * read next record
          BRANCH    OVRCD,VPID0090               * eof - error
.
          MATCH     "LU",TCODE                   * same category still ?
          GOTO      VPID0090 IF NOT EQUAL        * no - error
.
          MATCH     ANSM,TCINDC1                 * mother-child link reason ?
          GOTO      VPID0080 IF NOT EQUAL        * no - ignore record
.
.         The code exists, so make sure it is active
.
          MATCH     ANSI,PTCOACTV                * inactive ?
          GOTO      VPID0080 IF EQUAL            * yes - ignore record
.
          MOVE      ACODE,SAVELINK               * save link reason
          GOTO      VPID0100
.
VPID0090  IF        QUICKREG = 1
            PACK      PID02101,SP100,SP100,SP100,SP100,SP100
            CLEAR     PID02101
          ELSE
            MOVE      "PID.21: Mother Child Link reason not set up",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VPID0100  MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 12
.
.           Patient ID (Internal ID) - Component 1 (Identifier)
.
            SQUEEZE   PID00301[COUNTER]          * remove spaces
            MOVELPTR  PID00301[COUNTER],FORM3    * field populated ?
            IF        FORM3 = 0
              GOTO      VPID0900                 * no - get next identifier
            ENDIF
.
.           The identifier is populated, so check if we have
.           an identifier type
.
            STRIP     PID00305[COUNTER]          * remove trailing blanks
            MOVELPTR  PID00305[COUNTER],FORM3    * field populated ?
            IF        FORM3 = 0
              GOTO      VPID0110                 * no
            ENDIF
.
            MATCH     BLANKSTR,PID00305[COUNTER] * null field ?
            GOTO      VPID0200 IF NOT EQUAL      * no
.           
VPID0110    MOVE      "PID.3: Patient Internal Identifier type not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VPID0900
.
.           There is an identifier type, so check what sort it is
.
VPID0200    MATCH     "MR",PID00305[COUNTER]     * U/R number ?
            GOTO      VPID0390 IF EQUAL          * yes - validate
.
            MATCH     "DV",PID00305[COUNTER]     * DVA number ?
            GOTO      VPID0210 IF NOT EQUAL      * no
.
            CALL      VDVA0000                   * validate DVA
            GOTO      VPID0900
.
VPID0210    MATCH     "MC",PID00305[COUNTER]     * Medicare number ?
            GOTO      VPID0250 IF NOT EQUAL      * no
.
            MATCH     BLANKSTR,PID00301[COUNTER] * null field ?
            IF        @EQUAL
              MOVE      SP10,PMEDI               * yes
              MOVE      SP2,PTMXMCCD
              GOTO      VPID0900
            ENDIF
.
            TYPE      PID00301[COUNTER]
            IF        !@EQUAL
              IF        QUICKREG = 1
                PACK      PID00301[COUNTER],SP100,SP100,SP100,SP100,SP100
                CLEAR     PID00301[COUNTER]
              ELSE
                MOVE      "PID.3: Medicare Number not numeric",ERRORDSC
                MOVE      "207",ERRORNUM
                CALL      EROR0000
              ENDIF
              GOTO      VPID0900
            ENDIF
.
            MOVELPTR  PID00301[COUNTER],FORM3    * get field length again ?
            IF        FORM3 < 10
              IF        QUICKREG = 1
                PACK      PID00301[COUNTER],SP100,SP100,SP100,SP100,SP100
                CLEAR     PID00301[COUNTER]
              ELSE
                MOVE      "PID.3: Medicare Number has insufficient digits",ERRORDSC
                MOVE      "207",ERRORNUM
                CALL      EROR0000
              ENDIF
              GOTO      VPID0900
            ENDIF
            CALL      VMED0000                   * validate medicare number
.
            UNPACK    PID00301[COUNTER],PMEDI,PTMXMCCD
            PACK      PMEDI,PMEDI,SP10
            PACK      PTMXMCCD,PTMXMCCD,SP2
            GOTO      VPID0900
.
VPID0250    MATCH     "PEN",PID00305[COUNTER]    * Pension number ?
            GOTO      VPID0260 IF NOT EQUAL      * no
.
            MATCH     BLANKSTR,PID00301[COUNTER] * null field ?
            IF        @EQUAL
              MOVE      SP20,PPENNO              * yes
              MOVE      SP6,PPNDTE
              GOTO      VPID0900
            ENDIF
.
            MOVE      SP3,SAVPCARD               * initialise saved pension card
.
            MATCH     "0",PTCNPCVA
            GOTO      VPID0900 IF EQUAL
.
            CALL      VPEN0000                   * validate pension number
.
            GOTO      VPID0900
.
VPID0260    MATCH     "SN",PID00305[COUNTER]     * Safety Net number ?
            GOTO      VPID0270 IF NOT EQUAL      * no
.
            CALL      VSNN0000                   * yes - validate SSN
            GOTO      VPID0900
.
VPID0270    MATCH     "UP",PID00305[COUNTER]     * UPI number ?
            GOTO      VPID0280 IF NOT EQUAL      * no
.
            MATCH     BLANKSTR,PID00301[COUNTER] * null field ?
            GOTO      VPID0900 IF EQUAL
.
            MOVELPTR  PID00301[COUNTER],FORM3    * get field length again ?
            IF        FORM3 > 10
              MOVE      "PID.3: UPI Number has too many characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
.davupi >>> Add any facility checks necessary?
            GOTO      VPID0900
.
VPID0280    MATCH     "SEN",PID00305[COUNTER]    * Seniors card number ?
            GOTO      VPID0900 IF EQUAL          * yes
.
            MATCH     "CMO",PID00305[COUNTER]    * Chemotherapy card number ?
            GOTO      VPID0900 IF EQUAL          * yes
.
            MATCH     "NDS",PID00305[COUNTER]    * NDIS number ?
            GOTO      VPID0900 IF EQUAL          * yes
.
            MATCH     "CN",PID00305[COUNTER]     * Centrelink number ?
            GOTO      VPID0900 IF EQUAL          * yes
.
            MATCH     "AMB",PID00305[COUNTER]    * Ambulance number ?
            GOTO      VPID0900 IF EQUAL          * yes
.
            IF        QUICKREG = 1
              PACK      PID00305[COUNTER],SP100,SP100,SP100,SP100,SP100
              CLEAR     PID00305[COUNTER]
              GOTO      VPID0900
            ELSE
              MOVE      "PID.3: Patient Identifier type not valid",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
            ENDIF
.
.           We have a U/R number, so validate it
.
VPID0390    MATCH     BLANKSTR,PID00301[COUNTER] * null field ?
            IF        @EQUAL
              MOVE      "PID.3: Patient UR is mandatory",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
              GOTO      VPID0900
            ENDIF
.
.           If we are sending the U/R check digit in PID.3 for broadcast
.           messages, and if the U/R is 9 characters long, then strip off the
.           last character to get the U/R (for Singapore Number)
.
            MOVELPTR  PID00301[COUNTER],FORM3
            IF        FORM3 = 9
              MATCH     "1",PTCNCKDG
              GOTO      VPID0400 IF EQUAL
            ENDIF
.
            IF        FORM3 > 0 & FORM3 < 9
              GOTO      VPID0400
            ENDIF
.
            MOVE      "PID.3: Patient Internal ID format not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPID9999
.
.           Right justify the U/R then validate that the patient exists on file
.
VPID0400    CALL      CLPATMAS                   * clear PMI fields
            CALL      CLPMSPX2
            MOVE      PID00301[COUNTER],KEY8
            RJUSTIFY  KEY8
            MOVE      KEY8,PURNO
            CALL      RDMAST1                    * is patient on file ?
            IF        OVRCD = 1 & MESSGNUM <> 1
              MOVE      "PID.3: Patient Internal ID not on file",ERRORDSC
              MOVE      "204",ERRORNUM
              CALL      EROR0000
              GOTO      VPID9999
            ELSE
              IF        OVRCD = 0 & MESSGNUM = 1
                MOVE      "PID.3: Patient Internal ID already on file",ERRORDSC
                MOVE      "205",ERRORNUM
                CALL      EROR0000
                GOTO      VPID9999
              ENDIF
            ENDIF
.
.           If this is not an A28, then the patma1af record has been found,
.           so get the pmspx2af record as well.
.           Also need to save the current variables so we can check later if
.           specific fields have changed.
.
            IF        MESSGNUM <> 1
              MOVE      PURNO,KEY8
              CALL      RDPMPX21                 * is patient on file ?
              IF        OVRCD = 1
                MOVE      "PID.3: Patient pmspx2af record not on file",ERRORDSC
                MOVE      "207",ERRORNUM
                CALL      EROR0000
                GOTO      VPID9999
              ENDIF
              CALL      ACTMSAV                  * save current PMI variables
            ENDIF
            MOVE      ZERO,URNFOUND
.
VPID0900    ADD       ONE,COUNTER                * increment counter
          DO
.0931586
VPID1000  IF        MESSGNUM = 8
            MATCH     "EMR",EVN00401
            IF        @EQUAL
              CALL      VPIDE000                 * validate A04 EMR PID fields
              GOTO      VPID9999
            ENDIF
          ENDIF
.
          IF        URNFOUND = 1
            MOVE      "PID.3: Patient U/R not sent",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Patient Name - Component 1 (Surname)
.
VPID2000  STRIP     PID00501
          MOVELPTR  PID00501,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VPID2500                   * no - error
          ENDIF
.           
          MATCH     BLANKSTR,PID00501            * null field ?
          GOTO      VPID2500 IF EQUAL            * yes
.
          PACK      PSNAME,PID00501,SP70         * load surname
          PACK      PTMASNAM,PID00501,SP70
.
          IF        MESSGNUM = 1 | MESSGNUM = 2
            GOTO      VPID3000                   * A28/A31
          ENDIF
.
          IF        MESSGNUM = 13
            MATCH     "1",PTCNUP31
            GOTO      VPID3000 IF EQUAL          * treat A08 as A31 (0887136)
          ENDIF
.
.         Check if the surname has changed
.
          MATCH     PSNAME,SPSNAME               * same surname ?
          GOTO      VPID3000 IF EQUAL            * yes - valid
.
.         The surname has changed, so if this is an A34 and the parameter
.         to allow mismatching surnames is turned on, then ignore the
.         surname mismatch.
.
          COMPARE   THREE,MESSGNUM               * A34 ?
          GOTO      VPID2400 IF NOT EQUAL        * no - invalid
.
          MATCH     "1",PTCNASNM                 * allow surname mismatch ?
          GOTO      VPID3000 IF EQUAL            * yes - valid
.
VPID2400  MOVE       "PID.5: Patient Surname doesnt match",ERRORDSC
          MOVE       "207",ERRORNUM
          CALL       EROR0000
          GOTO      VPID3000
.
VPID2500  IF        QUICKREG = 1
            PACK      PID00501,SP100,SP100,SP100,SP100,SP100
            CLEAR     PID00501
          ELSE
            MOVE      "PID.5: Patient Surname not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Patient Name - Component 2 (First Given Name)
.
VPID3000  STRIP     PID00502
          MOVELPTR  PID00502,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VPID3500                   * no - error
          ENDIF
.           
          MATCH     BLANKSTR,PID00502            * null field ?
          GOTO      VPID3500 IF EQUAL            * yes
.
          COMPARE   THREE,MESSGNUM               * A34 ?
          GOTO      VPID9999 IF EQUAL            * yes - no further validation
.
          PACK      PMPXFNAM,PID00502,SP70       * load first given name
          MOVE      PMPXFNAM,PGNAME
.
          COMPARE   ONE,MESSGNUM                 * A28 ?
          GOTO      VPID3600 IF EQUAL            * yes
.
.         For A31 messages, match the full PGNAME later on
.
          IF        MESSGNUM = 2
            GOTO      VPID3600
          ENDIF
.
          IF        MESSGNUM = 13
            MATCH     "1",PTCNUP31
            GOTO      VPID3600 IF EQUAL          * treat A08 as A31 (0887136)
          ENDIF
.
          MOVE      PGNAME,ANS
          MATCH     ANS,PID00502                 * same initial ?
          IF        !@EQUAL
            IF        QUICKREG = 1
              PACK      PID00502,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID00502
            ELSE
              MOVE      "PID.5: Patient Initial doesnt match",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
          GOTO      VPID3600
.
VPID3500  IF        QUICKREG = 1
            PACK      PID00502,SP100,SP100,SP100,SP100,SP100
            CLEAR     PID00502
          ELSE
            MOVE      "PID.5: Patient First Given Name not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Patient Name - Component 3 (Second Given Name) - A28/A31 Only
.
VPID3600  IF        MESSGNUM = 13
            MATCH     "1",PTCNUP31
            GOTO      VPID3650 IF EQUAL          * treat A08 as A31 (0887136)
          ENDIF
.
          IF        MESSGNUM <> 1 & MESSGNUM <> 2
            GOTO      VPID5000
          ENDIF
.
.         Note: PMPXSNAM will be space filled (from CLPMSPX2) if A28
.
VPID3650  STRIP     PID00503
          MOVELPTR  PID00503,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VPID3700                   * no - error
          ENDIF
.           
          MATCH     BLANKSTR,PID00503            * null field ?
          IF        @EQUAL
            MOVE      SP70,PMPXSNAM
            GOTO      VPID3700
          ENDIF
.
          PACK      PMPXSNAM,PID00503,SP70       * load second given name
VPID3700  STRIP     PGNAME
          ENDSET    PGNAME
          APPEND    SP1,PGNAME
          APPEND    PMPXSNAM,PGNAME
          APPEND    SP30,PGNAME
          RESET     PGNAME
.
.         Patient Name - Component 5 (Prefix/Title) - A28/A31 Only
.
          STRIP     PID00505
          MOVELPTR  PID00505,FORM3               * field populated ?
          IF        FORM3 = 0
            MATCH     "1",PTCNTITL
            IF        !@EQUAL
              GOTO      VPID4500                 * no - error (mandatory)
            ELSE
              GOTO      VPID5000                 * no - ok (not mandatory)
            ENDIF
          ENDIF
.           
          MATCH     BLANKSTR,PID00505            * null field ?
          IF        @EQUAL
            MATCH     "1",PTCNTITL
            IF        !@EQUAL
              GOTO      VPID4500                 * yes - error (mandatory)
            ELSE
              GOTO      VPID5000                 * yes - ok (not mandatory)
            ENDIF
          ENDIF
.
          IF        FORM3 > 4
            IF        QUICKREG = 1
              PACK      PID00505,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID00505
            ELSE
              MOVE      "PID.5: Patient Title has too many characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VPID5000
          ENDIF
.
          PACK      KEY4,PID00505,SP4
          CALL      RDPMTLE1                     * valid title code ?
          IF        OVRCD = 1
            IF        QUICKREG = 1
              PACK      PID00505,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID00505
            ELSE
              MOVE      "PID.5: Patient Title not valid",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VPID5000
          ENDIF
.
          PACK      PTITL,PID00505,SP70          * load title
          GOTO      VPID5000
.
VPID4500  IF        QUICKREG = 1
            PACK      PID00505,SP100,SP100,SP100,SP100,SP100
            CLEAR     PID00505
          ELSE
            MOVE      "PID.5: Patient Title not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Patient Date of Birth - Component 1
.
VPID5000  STRIP     PID00701
          MOVELPTR  PID00701,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VPID5500                   * no - error
          ENDIF
.           
          MATCH     BLANKSTR,PID00701            * null field ?
          GOTO      VPID5500 IF EQUAL            * yes
.
          MOVE      PID00701,DIM14
          MOVE      "PID.7 ",FIELDID
          MOVE      ONE,DATFLAG1
          IF        FORM3 = 8
            MOVE      ZERO,DATFLAG2              * date only
          ELSE
            MOVE      ONE,DATFLAG2               * date and time
          ENDIF
          CALL      VDTM0000                     * date/time validation
.
          IF        MESSGNUM = 13
            MATCH     "1",PTCNUP31
            GOTO      VPID5300 IF EQUAL          * treat A08 as A31 (0887136)
          ENDIF
.
          COMPARE   MESSGNUM,TWO                 * A28 or A31 message ?
          GOTO      VPID5400 IF LESS             * no
.
VPID5300  PACK      PBDATE,PID00701,SP8          * load patient dob
.
.         Receive Time Of Birth (parameter based - TSK 0907196)
          MATCH     "1",PTCNTOFB
          GOTO      VPID5350 IF NOT EQUAL        * receive time of birth ?
.
          MOVELPTR  PID00701,FORM3
          IF        FORM3 = 8
            PACK      PBDATE,PID00701,SP8        * load patient dob only
            MOVE      SP8,PMPXUTM5
          ELSE
            UNPACK    PID00701,PBDATE,DIM2H,DIM2M,DIM2S
            PACK      PMPXUTM5,DIM2H,COLON,DIM2M,COLON,DIM2S    * time of birth
          ENDIF
.
VPID5350  MATCH     SP8,SAVEMDOB                 * mother's dob found ?
          GOTO      VPID6000 IF EQUAL            * no
.
          MATCH     PBDATE,SAVEMDOB              * mother's dob < child's dob ?
          IF        !@LESS
            MOVE      "PID.7: Mothers DOB not less than Patient DOB",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
          GOTO      VPID6000
.
VPID5400  MATCH     PBDATE,PID00701              * same dob ?
          IF        !@EQUAL
            MOVE      "PID.7: Patient Date of Birth doesnt match",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
          GOTO      VPID6000
.
VPID5500  MOVE      "PID.7: Patient Date of Birth not populated",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         Patient Gender - Component 1
.
VPID6000  STRIP     PID00801
          MOVELPTR  PID00801,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VPID6900                   * no - error
          ENDIF
.           
          MATCH     BLANKSTR,PID00801            * null field ?
          GOTO      VPID6900 IF EQUAL            * yes
.
          MOVE      PID00801,ANS
.0898347  REP       "OI",ANS                     * O could be I or R in webPAS
          CALL      GENDR000                     * validate against Cat.G
          BRANCH    EXIT,VPID6800
.
          IF        MESSGNUM = 1
            MOVE      D1,PSEX                    * load gender
            GOTO      VPID7010                   * A28 message
          ENDIF
.
.         For a P03, A03, A04 or REF message, check the gender matches
.
          PACK      KEY5,ANSG,SP1,SPSEX,SP70
          CALL      RDCODE1                      * code on file ?
          BRANCH    OVRCD,VPID6500               * no
.
          MATCH     "1",PTCNGNDR                 * match code as stored ?
          IF        @EQUAL
            MATCH     D1,ACODE                   * matches current code ?
            GOTO      VPID7000 IF EQUAL          * yes, so do not update sex
          ELSE
            MATCH     ANS,THCSCOD                * matches current HDP default ?
            GOTO      VPID7000 IF EQUAL          * yes, so do not update sex
          ENDIF
.
          IF        MESSGNUM = 2
            MOVE      D1,PSEX                    * code changed, so update sex
            GOTO      VPID7010                   * A31 message
          ENDIF
.
          IF        MESSGNUM = 13
            MATCH     "1",PTCNUP31
            IF        @EQUAL
              MOVE      D1,PSEX                  * code changed, so update sex
              GOTO      VPID7010 IF EQUAL        * treat A08 as A31 (0887136)
            ENDIF
          ENDIF
.
.0898347  The code below has been put in place as there is a discrepancy
.0898347  between what gets broadcast and what is valid for the receiver
.0898347  in terms of gender.  Once the two are aligned at some point in
.0898347  the future, this code can be fixed.  At the moment it only affects
.0898347  a value of O coming in which may equate to an I or an R in webPAS.
.
.0898347  MATCH     ANSI,ANS
.0898347  GOTO      VPID6500 IF NOT EQUAL
.
.0898347  MATCH     ANSR,THCSCOD
.0898347  GOTO      VPID9999 IF EQUAL
.
VPID6500  MOVE      "PID.8: Patient Gender doesnt match",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VPID9999
.
VPID6800  IF        QUICKREG = 1
            PACK      PID00801,SP100,SP100,SP100,SP100,SP100
            CLEAR     PID00801
          ELSE
            MOVE      "PID.8: Patient Gender not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
          ENDIF
          GOTO      VPID7000
.
VPID6900  IF        QUICKREG = 1
            PACK      PID00801,SP100,SP100,SP100,SP100,SP100
            CLEAR     PID00801
          ELSE
            MOVE      "PID.8: Patient Gender not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         The rest of the PMI field validation is for patient registration
.         and updates, so only applies to A28 and A31 messages
.
VPID7000  IF        MESSGNUM = 13
            MATCH     "1",PTCNUP31
            GOTO      VPID7010 IF EQUAL          * treat A08 as A31 (0887136)
          ENDIF
.
          IF        MESSGNUM <> 1 & MESSGNUM <> 2
            GOTO      VPID9999
          ENDIF
.
.         Patient Aliases
.
VPID7010  MATCH     "1",PTCNRNTY
          IF        @EQUAL
            CALL      VALIAS00                   * receiving name type in PID.9
            GOTO      VPID7100
          ENDIF
.
          MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 81
.
.           Check Alias Surname - Component 1
.
            STRIP     PID00901[COUNTER]          * remove trailing spaces
            MOVELPTR  PID00901[COUNTER],FORM3    * field populated ?
            IF        FORM3 = 0
              GOTO      VPID7100                 * no - finished
            ENDIF
.
            MATCH     BLANKSTR,PID00901[COUNTER] * null field ?
            GOTO      VPID7100 IF EQUAL          * yes
.
.           There is an alias surname, so check the Alias First Given Name
.           - Component 2
.
VPID7020    STRIP     PID00902[COUNTER]          * remove trailing spaces
            MOVELPTR  PID00902[COUNTER],FORM3    * field populated ?
            IF        FORM3 = 0
              GOTO      VPID7030                 * no - error
            ENDIF
.
            MATCH     BLANKSTR,PID00902[COUNTER] * null field ?
            GOTO      VPID7050 IF NOT EQUAL      * no
.
VPID7030    BRANCH    QUICKREG,VPID7050
            MOVE      "PID.9: Patient Alias First Given Name not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
.
VPID7050    ADD       ONE,COUNTER                * increment counter
          DO
.
.         Patient Address Line 1 - Component 1
.
VPID7100  STRIP     PID01101[2]
          MOVELPTR  PID01101[2],FORM3            * field populated ?
          IF        FORM3 = 0
            GOTO      VPID7200                   * no - error
          ENDIF
.
          MATCH     BLANKSTR,PID01101[2]         * null field ?
          GOTO      VPID7200 IF EQUAL            * yes
.
          PACK      PADD1,PID01101[2],SP70       * no - load address line 1
          GOTO      VPID7500
.
VPID7200  BRANCH    QUICKREG,VPID7500
          MOVE      "PID.11: Patient Street Address not populated",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         Patient Address Line 2 - Component 2
.
VPID7500  STRIP     PID01102[2]
          MOVELPTR  PID01102[2],FORM3            * field populated ?
          IF        FORM3 = 0
            GOTO      VPID8000                   * no
          ENDIF
.
          MATCH     BLANKSTR,PID01102[2]         * null field ?
          IF        @EQUAL
            MOVE      SP35,PADD2                 * yes
          ELSE
            PACK      PADD2,PID01102[2],SP70     * no - load address line 2
          ENDIF
.
.         Patient Address Line 3 (Suburb) - Component 3
.
VPID8000  STRIP     PID01103[2]
          MOVELPTR  PID01103[2],FORM3            * field populated ?
          IF        FORM3 = 0
            GOTO      VPID8100                   * no - error
          ENDIF
.
          MATCH     BLANKSTR,PID01103[2]         * null field ?
          GOTO      VPID8100 IF EQUAL            * yes
.
          PACK      PSUBRB,PID01103[2],SP70      * no - load suburb
          GOTO      VPID8500
.
VPID8100  BRANCH    QUICKREG,VPID8500
          MOVE      "PID.11: Patient Suburb Address not populated",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         Patient Address Line 4 - Component 4 (Local Address Only)
.
VPID8500  STRIP     PID01104[2]
          MOVELPTR  PID01104[2],FORM3            * field populated ?
          IF        FORM3 = 0
            GOTO      VPID8700                   * no
          ENDIF
.
          MATCH     BLANKSTR,PID01104[2]         * null field ?
          IF        @EQUAL
            MOVE      SP100,PADD4                * yes
          ELSE
            PACK      PADD4,PID01104[2],SP70     * no - load address line 4
          ENDIF
.
.         Patient Postcode - Component 5
.
VPID8700  STRIP     PID01105[2]
          MOVELPTR  PID01105[2],FORM3            * field populated ?
          IF        FORM3 = 0
            BRANCH    QUICKREG,VPID9500
            MOVE      "PID.11: Patient Postcode Address not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VPID9500 
          ENDIF
.
          MATCH     BLANKSTR,PID01105[2]         * null field ?
          IF        @EQUAL
            IF        QUICKREG = 1
              PACK      PID01105[2],SP100,SP100,SP100,SP100,SP100
              CLEAR     PID01105[2]
            ELSE
              MOVE      "PID.11: Patient Postcode Address is null",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VPID9500
          ENDIF
.
.         Check if this is an overseas address
.
          MATCH     "8888",PID01105[2]
          IF        @EQUAL
            PACK      PPOST,EIGHT,EIGHT,EIGHT,EIGHT,SP8
            GOTO      VPID9000
          ENDIF
.
.         Process as a local address
.
          IF        FORM3 <> 4
            IF        QUICKREG = 1
              PACK      PID01105[2],SP100,SP100,SP100,SP100,SP100
              CLEAR     PID01105[2]
            ELSE
              MOVE      "PID.11: Patient Postcode incorrect length",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VPID9500
          ENDIF
.
          TYPE      PID01105[2]
          IF        !@EQUAL
            IF        QUICKREG = 1
              PACK      PID01105[2],SP100,SP100,SP100,SP100,SP100
              CLEAR     PID01105[2]
            ELSE
              MOVE      "PID.11: Patient Postcode not numeric",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VPID9500
          ENDIF
.
          PACK      PPOST,PID01105[2],SP20       * load postcode
.
          COMPARE   TWO,PTCNHDPS                 * Australian site ?
          GOTO      VPID9500 IF LESS             * no
.
.         Postcode is populated, so if the suburb is also populated,
.         check that the suburb and postcode are valid.  If state is also
.         populated, then use this to validate as well.
.
          MOVELPTR  PID01103[2],FORM3
          COMPARE   ZERO,FORM3                   * suburb populated ?
          GOTO      VPID9500 IF EQUAL            * no
.
          MATCH     BLANKSTR,PID01103[2]         * blank suburb ?
          GOTO      VPID9500 IF EQUAL            * yes
.
          MOVELPTR  PID01104[2],FORM3
          COMPARE   ZERO,FORM3                   * state populated ?
          GOTO      VPID8750 IF EQUAL            * no
.
          MATCH     BLANKSTR,PID01104[2]         * blank state ?
          GOTO      VPID8750 IF EQUAL            * yes
.
.         Check if the postcode/suburb/state combination is valid
.
          PACK      KEY45,PSUBRB,SP70
          PACK      KEY56,PPOST,KEY45,PADD4
          CALL      RDIBPOS1                     * postcode on file ?
          BRANCH    OVRCD,VPID8730               * no - try indirect read
          GOTO      VPID9500                     * valid
.
VPID8730  PACK      KEY56,PPOST,PSUBRB,SP70
          CALL      RSIBPOS1
          CALL      RKIBPOS1                     * get next record
          BRANCH    OVRCD,VPID8800
.
          MATCH     PPOST,IBPOPCOD               * same postcode ?
          GOTO      VPID8800 IF NOT EQUAL        * no
.
          MATCH     PSUBRB,IBPOSUBR              * same suburb ?
          GOTO      VPID8800 IF NOT EQUAL        * no
.
          MATCH     PADD4,IBPOSTAT               * same state ?
          GOTO      VPID8800 IF NOT EQUAL        * no
.
          GOTO      VPID9500                     * valid
.
.         Check if the postcode/suburb combination is valid
.
VPID8750  PACK      KEY56,PPOST,PSUBRB,SP70
          CALL      RDIBPOS1                     * postcode/suburb on file ?
          COMPARE   ZERO,OVRCD
          GOTO      VPID9500 IF EQUAL            * yes - valid
.
          CALL      RKIBPOS1                     * no - get next record
          BRANCH    OVRCD,VPID8800
          MATCH     PPOST,IBPOPCOD               * same postcode still ?
          IF        @EQUAL
            MATCH     PSUBRB,IBPOSUBR            * yes - same suburb still ?
            GOTO      VPID9500 IF EQUAL          * yes
          ENDIF
.
.         The postcode/address doesn't exist on ibapostf, so check if
.         the parameter is set to use a default value and if so,then
.         load the default value
.
VPID8800  MATCH     "1",PTCNUNPC                 * using default unknown pcode ?
          IF        !@EQUAL
            IF        QUICKREG = 1
              PACK      PID01105[2],SP100,SP100,SP100,SP100,SP100
              CLEAR     PID01105[2]
            ELSE
              MOVE      "PID.11: Patient PostcodeSuburb not valid",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
            ENDIF
          ELSE
            UNPACK    PTCNADDR,DIM4,DIM45,DIM3   * yes
            PACK      PPOST,DIM4,SP8
            MOVE      DIM45,PSUBRB
            PACK      PADD4,DIM3,SP70
          ENDIF
          GOTO      VPID9500
.
.         Patient Address (Country) - Component 6 (Overseas Address Only)
.
VPID9000  STRIP     PID01106[2]
          MOVELPTR  PID01106[2],FORM3            * field populated ?
          IF        FORM3 = 0
            IF        QUICKREG = 1
              PACK      PID01106[2],SP100,SP100,SP100,SP100,SP100
              CLEAR     PID01106[2]
            ELSE
              MOVE      "PID.11: Patient Country Address not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
              GOTO      VPID9500                   * no
            ENDIF
          ENDIF
.
          MATCH     BLANKSTR,PID01106[2]         * null field ?
          IF        @EQUAL
            IF        QUICKREG = 1
              PACK      PID01106[2],SP100,SP100,SP100,SP100,SP100
              CLEAR     PID01106[2]
            ELSE
              MOVE      "PID.11: Patient Country Address is mandatory",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
              GOTO      VPID9500                   * no - finished
            ENDIF
          ELSE
            MOVE      PID01106[2],DIM20
            MOVE      "PID.11",DIM6
            CALL      VALC0000                   * validate country description
            PACK      PADD4,PID01106[2],SP70
          ENDIF
.
.         Patient Address (Type) - Component 7
.
VPID9500  STRIP     PID01107[2]
          MOVELPTR  PID01107[2],FORM3            * field populated ?
          IF        FORM3 = 0
            IF        QUICKREG = 1
              PACK      PID01107[2],SP100,SP100,SP100,SP100,SP100
              CLEAR     PID01107[2]
            ELSE
              MOVE      "PID.11: Patient Address Type not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
              GOTO      VPID9999                   * no - finished
            ENDIF
          ENDIF
.
          MATCH     BLANKSTR,PID01107[2]         * null field ?
          IF        @EQUAL
            IF        QUICKREG = 1
              PACK      PID01107[2],SP100,SP100,SP100,SP100,SP100
              CLEAR     PID01107[2]
            ELSE
              MOVE      "PID.11: Patient Address Type is mandatory",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
              GOTO      VPID9999                   * no - finished
            ENDIF
          ENDIF
.
          MATCH     ANSC,PID01107[2]             * current address
          IF        @EQUAL
            MOVE      " ",PMPXSN18               * yes - not secured
            GOTO      VPID9999
          ENDIF
.
          MATCH     ANSS,PID01107[2]             * current address
          IF        @EQUAL
            SCAN      "A",PID01107[2]
            IF        @EQUAL
              MOVE      "2",PMPXSN18
              GOTO      VPID9999
            ENDIF
.
            SCAN      "P",PID01107[2]
            IF        @EQUAL
              MOVE      "3",PMPXSN18
              GOTO      VPID9999
            ENDIF
.    
            MOVE      "1",PMPXSN18               * yes - secured
            GOTO      VPID9999
          ENDIF
.
          IF        QUICKREG = 1
            PACK      PID01107[2],SP100,SP100,SP100,SP100,SP100
            CLEAR     PID01107[2]
          ELSE
            MOVE      "PID.11: Patient Address Type not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VPID9999  RETURN
+
.*****************************************************************************
.*                            VPIDE000                                       *
.*      Validate that the mandatory A04^EMR PID fields are populated or null *
.*      Also loads data fields for A04 EMR messages.                         *
.*****************************************************************************
VPIDE000  MOVE      ONE,URNFOUND                 * initialise as UPI not found
.
          MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 12
.
.           Patient ID (Internal ID) - Component 1 (Identifier)
.
            SQUEEZE   PID00301[COUNTER]          * remove spaces
            MOVELPTR  PID00301[COUNTER],FORM3    * field populated ?
            COMPARE   ZERO,FORM3
            GOTO      VPIDE090 IF EQUAL          * no - get next identifier
.
.           The identifier is populated, so check if we have
.           an identifier type
.
            STRIP     PID00305[COUNTER]          * remove trailing blanks
            MOVELPTR  PID00305[COUNTER],FORM3    * field populated ?
            COMPARE   ZERO,FORM3
            GOTO      VPIDE010 IF EQUAL          * no - error
.
            MATCH     BLANKSTR,PID00305[COUNTER] * null field ?
            GOTO      VPIDE020 IF NOT EQUAL      * no - ok to continue
.
VPIDE010    MOVE      "PID.3: Patient Identifier type not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VPIDE090
.
.           There is an identifier type, so check if it's UPI
.
VPIDE020    MATCH     "UP",PID00305[COUNTER]     * UPI number ?
            GOTO      VPIDE090 IF NOT EQUAL      * no - get next identifier
.
            MATCH     BLANKSTR,PID00301[COUNTER] * null field ?
            GOTO      VPIDE030 IF EQUAL          * yes - error
.
            MOVELPTR  PID00301[COUNTER],FORM3    * get field length again ?
            IF        FORM3 <> 0
              MOVE      ZERO,URNFOUND            * UPI found so continue
              GOTO      VPIDE100
            ENDIF
.
VPIDE030    MOVE      "PID.3: Patient Identifier not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VPIDE999
.
VPIDE090    ADD       ONE,COUNTER                * increment counter
          DO
.
VPIDE100  IF        URNFOUND = 1
            MOVE      "PID.3: Patient Identifier not sent",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Check other mandatory PID fields
.
.         Patient Name - Component 1 (Surname)
.
VPIDE200  STRIP     PID00501
          MOVELPTR  PID00501,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VPIDE250                   * no - error
          ENDIF
.
          MATCH     BLANKSTR,PID00501            * null field ?
          GOTO      VPIDE250 IF EQUAL            * yes
.
          PACK      EMUNDET1,PID00501,SP70       * load surname
          GOTO      VPIDE300
.
VPIDE250  MOVE      "PID.5: Patient Surname not populated",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         Patient Name - Component 2 (Given Name)
.
VPIDE300  STRIP     PID00502
          MOVELPTR  PID00502,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VPIDE350                   * no - error
          ENDIF
.
          MATCH     BLANKSTR,PID00502            * null field ?
          GOTO      VPIDE350 IF EQUAL            * yes
.
          PACK      EMUNDET2,PID00502,SP70       * load given name
          GOTO      VPIDE500
.
VPIDE350  MOVE      "PID.5: Patient Given Name not populated",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         Patient Date of Birth - Component 1
.
VPIDE500  STRIP     PID00701
          MOVELPTR  PID00701,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VPIDE550                   * no - error
          ENDIF
.
          MATCH     BLANKSTR,PID00701            * null field ?
          GOTO      VPIDE550 IF EQUAL            * yes
.
          MOVE      PID00701,DIM14
          MOVE      "PID.7 ",FIELDID
          MOVE      ONE,DATFLAG1
          IF        FORM3 = 8
            MOVE      ZERO,DATFLAG2              * date only
          ELSE
            MOVE      ONE,DATFLAG2               * date and time
          ENDIF
          CALL      VDTM0000                     * date/time validation
.
          PACK      EMUNBDAT,PID00701,SP8        * load patient dob
          GOTO      VPIDE600
.
VPIDE550  MOVE      "PID.7: Patient Date of Birth not populated",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         Patient Gender - Component 1
.
VPIDE600  STRIP     PID00801
          MOVELPTR  PID00801,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VPIDE690                   * no - error
          ENDIF
.
          MATCH     BLANKSTR,PID00801            * null field ?
          GOTO      VPIDE690 IF EQUAL            * yes
.
          MOVE      PID00801,ANS
.0898347  REP       "OI",ANS                     * O could be I or R in webPAS
          CALL      GENDR000                     * validate against Cat.G
          BRANCH    EXIT,VPIDE680
.
          MOVE      D1,EMUNSEX                   * load gender
          GOTO      VPIDE700
.
VPIDE680  MOVE      "PID.8: Patient Gender not valid",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
          GOTO      VPIDE700
.
VPIDE690  MOVE      "PID.8: Patient Gender not populated",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
VPIDE700
.
.
VPIDE999  RETURN
+
.*****************************************************************************
.*                            VALIAS00                                       *
.* Validate aliases if receiving name type in PID.9.7 (ptcnrnty=1)           *
.* Component 7 = A (Alias Name)                                              *
.*****************************************************************************
VALIAS00  MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 81
.
.           Check if PID.9 Component 1 or Component 2 are populated
.
            STRIP     PID00901[COUNTER]          * remove trailing spaces
            MOVELPTR  PID00901[COUNTER],FORM3    * field populated ?
            COMPARE   ZERO,FORM3
            GOTO      VALIAS05 IF NOT EQUAL      * yes - check PID.9.7
.
            STRIP     PID00902[COUNTER]          * remove trailing spaces
            MOVELPTR  PID00902[COUNTER],FORM3    * field populated ?
            COMPARE   ZERO,FORM3
            GOTO      VALIAS99 IF EQUAL          * no - finished
.
.           Check Alias Name Type - Component 7 (mandatory)
.
VALIAS05    STRIP     PID00907[COUNTER]          * remove trailing spaces
            MOVELPTR  PID00907[COUNTER],FORM3    * field populated ?
            IF        FORM3 = 0
              GOTO      VALIAS10                 * no - error
            ENDIF
.
            MATCH     BLANKSTR,PID00907[COUNTER] * null field ?
            GOTO      VALIAS10 IF EQUAL          * yes - error
.
            MATCH     ANSA,PID00907[COUNTER]
            GOTO      VALIAS20 IF EQUAL          * name type = Alias
.
            MATCH     ANSD,PID00907[COUNTER]
            IF        @EQUAL
              CALL      VALDIS00                 * name type = Display
              GOTO      VALIAS60
            ENDIF
.
VALIAS10    BRANCH    QUICKREG,VALIAS20
            MOVE      "PID.9: Component 7 Name Type must be A or D",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VALIAS60
.
.           Check Alias Surname - Component 1 (not mandatory)
.
VALIAS20    STRIP     PID00901[COUNTER]          * remove trailing spaces
            MOVELPTR  PID00901[COUNTER],FORM3    * field populated ?
            IF        FORM3 = 0
              GOTO      VALIAS60                 * no - finished
            ENDIF
.
            MATCH     BLANKSTR,PID00901[COUNTER] * null field ?
            GOTO      VALIAS60 IF EQUAL          * yes - finished
.
.0864505    BRANCH    QUICKREG,VALIAS40
.0864505    MOVE      "PID.9: Component 1 Family Name not populated",ERRORDSC
.0864505    MOVE      "101",ERRORNUM
.0864505    CALL      EROR0000
.
.           Check Alias First Given Name - Component 2 (conditionally mandatory)
.
VALIAS40    STRIP     PID00902[COUNTER]          * remove trailing spaces
            MOVELPTR  PID00902[COUNTER],FORM3    * field populated ?
            IF        FORM3 = 0
              GOTO      VALIAS50                 * no - error
            ENDIF
.
            MATCH     BLANKSTR,PID00902[COUNTER] * null field ?
            GOTO      VALIAS60 IF NOT EQUAL      * no - continue
.
VALIAS50    BRANCH    QUICKREG,VALIAS60
            MOVE      "PID.9: Alias Given Name Component 2 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
.
VALIAS60    ADD       ONE,COUNTER                * increment counter
          DO
.
VALIAS99  RETURN
+
.*****************************************************************************
.*                            VALDIS00                                       *
.* Validate display name if receiving name type in PID.9.7 (ptcnrnty=1)      *
.* Component 7 = D (Display/Preferred Name)                                  *
.*****************************************************************************
.           Check Preferred Surname - Component 1
.
VALDIS00  STRIP     PID00901[COUNTER]            * remove trailing spaces
          MOVELPTR  PID00901[COUNTER],FORM3      * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VALDIS99 IF NOT EQUAL        * yes - finished
.
.0864505  MATCH     BLANKSTR,PID00901[COUNTER]   * null field ?
.0864505  GOTO      VALDIS99 IF NOT EQUAL        * no - continue
.
.           Check Preferred Given Name - Component 2
.
VALDIS40  STRIP     PID00902[COUNTER]            * remove trailing spaces
          MOVELPTR  PID00902[COUNTER],FORM3      * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VALDIS99 IF NOT EQUAL        * yes - finished
.
.0864505  MATCH     BLANKSTR,PID00902[COUNTER]   * null field ?
.0864505  GOTO      VALDIS99 IF NOT EQUAL        * no - continue
.
VALDIS50  BRANCH    QUICKREG,VALDIS99
          MOVE      "PID.9: Display Name Component 1 or Component 2 must be populated",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
VALDIS99  RETURN
+
.*****************************************************************************
.*                            VALC0000             Called by: VPID0000       *
.*                                                            VNKA0000       *
.*                                                            VNOK0000       *
.*      Validate that the overseas country description is a valid description*
.*      for Category C.                                                      *
.* Requires: DIM20  - country description from the message                   *
.*           DIM6   - "PID.11" or "NK1.32"                                   *
.* Returns:  EXIT   0 = valid country description                            *
.*                  1 = invalid country description                          *
.*****************************************************************************
.
.         First check by positioning on the uppercase first character
.
VALC0000  REP       UPPLOW,DIM20               * convert string to uppercase
          MOVE      DIM20,ANS                  * load first character
.
          PACK      PTCDKEY2,ANSC,SP1,ANS,SP30
          CALL      RDSCODE2                   * position on Cat C description
VALC0500  CALL      RDKCODE2                   * read next record
          BRANCH    OVRCD,VALC5000             * eof - try lowercase
.
          MATCH     "C ",TCODE                 * Cat C still ?
          GOTO      VALC5000 IF NOT EQUAL      * no - try lowercase
.
          MATCH     ANS,TDESC                  * same first character still ?
          GOTO      VALC5000 IF NOT EQUAL      * no - try lowercase
.
.         Uppercase both strings prior to matching
.
          REP       UPPLOW,TDESC
          MATCH     DIM20,TDESC                * same description still ?
          GOTO      VALC0500 IF NOT EQUAL      * no - get next record
.
          GOTO      VALC9000                   * yes
.
.         Now check by positioning on the lowercase first character
.
VALC5000  REP       LOWUPP,DIM20               * convert string to lowercase
          MOVE      DIM20,ANS
.
          PACK      PTCDKEY2,ANSC,SP1,ANS,SP30
          CALL      RDSCODE2                   * position on Cat C description
VALC5500  CALL      RDKCODE2                   * read next record
          BRANCH    OVRCD,VALC9100             * eof - invalid desc.
.
          MATCH     "C ",TCODE                 * Cat C still ?
          GOTO      VALC9100 IF NOT EQUAL      * no - invalid desc.
.
          MATCH     ANS,TDESC                  * same first character still ?
          GOTO      VALC9100 IF NOT EQUAL      * no - invalid desc.
.
.         Uppercase both strings prior to matching
.
          REP       LOWUPP,TDESC
          MATCH     DIM20,TDESC                * same description still ?
          GOTO      VALC5500 IF NOT EQUAL      * no - invalid desc.
.
VALC9000  MOVE      ZERO,EXIT
          GOTO      VALC9999
.
VALC9100  MATCH     "PID.11",DIM6
          IF        @EQUAL
            MOVE      "PID.11: Patient Address Country not valid",ERRORDSC
          ELSE
            MOVE      "NK1.32: NoK Address Country not valid",ERRORDSC
          ENDIF
          MOVE      "103",ERRORNUM
          CALL      EROR0000
          MOVE      ONE,EXIT
.
VALC9999  RETURN
+
.*****************************************************************************
.*                            VNK10000             Called by: PROC0000       *
.*      Validate that the mandatory NK1 fields are populated or null.        *
.*      Also loads data fields for A28 & A31 messages.                       *
.*****************************************************************************
.
.         Set ID: NK1.1
.
VNK10000  MATCH     "1",PTCNNEWC                 * using extra contacts ?
          IF        @EQUAL
            CALL      VNOK0000                   * yes - different validation
            GOTO      VNK19999
          ENDIF
.
          ADD       ONE,NK1COUNT                 * increment NK1 segment count
          STRIP     NK100101
          MOVELPTR  NK100101,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VNK10050                   * no - error
          ENDIF
.
          MATCH     BLANKSTR,NK100101            * null field ?
          GOTO      VNK10050 IF EQUAL            * yes
          GOTO      VNK10100
.
VNK10050  MOVE      "NK1.1: Set ID not populated",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
          GOTO      VNK19999
.
.         Check that Set ID is numeric
.
VNK10100  SQUEEZE   NK100101
          TYPE      NK100101
          IF        !@EQUAL
            MOVE      "NK1.1: Set ID not numeric",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VNK19999
          ENDIF
.
.         We are currently only accepting one NK1 record/message.  It may
.         contain an NoK and/or an Emergency contact
.
          COMPARE   NK1COUNT,ONE
          IF        @LESS
            MOVE      "NK1.1: Too many NK1 segments",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VNK19999
          ENDIF
.
.         Load NoK Name: NK1.2 - Component 1 (Surname)
.
          MOVE      SP20,DIM20
          CLEAR     DIM20
.
          STRIP     NK100201
          MOVELPTR  NK100201,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VNK10210                   * no
          ENDIF
.           
          MATCH     BLANKSTR,NK100201            * null field ?
          IF        @EQUAL
            MOVE      SP20,DIM20                 * yes - clear name
            GOTO      VNK10200
          ENDIF
.
          MOVE      NK100201,DIM20
          STRIP     DIM20
.
.         Load NoK Name: NK1.2 - Component 2 (Given Name)
.
VNK10200  ENDSET    DIM20
.
VNK10210  STRIP     NK100202
          MOVELPTR  NK100202,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VNK10300                   * no
          ENDIF
.           
          MATCH     BLANKSTR,NK100202            * null field ?
          IF        @EQUAL
            APPEND    SP20,DIM20                 * yes
            GOTO      VNK10300
          ENDIF
.
          APPEND    SP1,DIM20
          APPEND    NK100202,DIM20
          RESET     DIM20
          STRIP     DIM20
          ENDSET    DIM20
.
.         Load NoK Name: NK1.2 - Component 3 (Middle Name)
.
VNK10300  STRIP     NK100203
          MOVELPTR  NK100203,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VNK10400                   * no
          ENDIF
.           
          MATCH     BLANKSTR,NK100203            * null field ?
          IF        @EQUAL
            APPEND    SP20,DIM20                 * yes
            GOTO      VNK10400
          ENDIF
.
          APPEND    SP1,DIM20
          APPEND    NK100203,DIM20
          APPEND    SP20,DIM20
VNK10400  RESET     DIM20
.
.         If DIM20 is not populated, then leave PNKNAME as it currently is.
.         If DIM20 is null, then the field needs to be space filled.
.         If DIM20 is not blank, then the field needs to be updated.
.
          MOVELPTR  DIM20,FORM3
          IF        FORM3 = 0
            GOTO      VNK11000
          ENDIF
.
          MATCH     SP20,DIM20
          IF        @EQUAL
            MOVE      SP20,PNKNAME
            GOTO      VNK11000
          ENDIF
.
          PACK      PNKNAME,DIM20,SP20
.
.         Load NoK Relationship: NK1.3 - Component 1
.
VNK11000  STRIP     NK100301
          MOVELPTR  NK100301,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VNK12000                   * no
          ENDIF
.
          MATCH     BLANKSTR,NK100301            * null field ?
          IF        @EQUAL
            MOVE      SP10,PNKRELP               * yes
            GOTO      VNK12000
          ENDIF
.
.         Make sure the relationship code is not more than 10 characters
.
          IF        FORM3 > 10
            IF        QUICKREG = 1
              PACK      NK100301,SP100,SP100,SP100,SP100,SP100
              CLEAR     NK100301
            ELSE
              MOVE      "NK1.3: Relationship has too many characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VNK12000
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.         
          STRIP     NK100303
          MOVELPTR  NK100303,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "NK1.3: Relationship coding system not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ELSE
            MATCH     BLANKSTR,NK100303          * null field ?
            IF        @EQUAL
              MOVE      "NK1.3: Relationship coding system is mandatory",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
.         Make sure the relationship code exists on pmsrelaf
.
          SQUEEZE   NK100301
          PACK      KEY10,NK100301,SP10
          CALL      RDPMREL1                     * code on file ?
          IF        OVRCD = 1
            IF        QUICKREG = 1
              PACK      NK100301,SP100,SP100,SP100,SP100,SP100
              CLEAR     NK100301
              GOTO      VNK12000
            ELSE
              MOVE      "NK1.3: Relationship code not valid",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
              GOTO      VNK19999
            ENDIF
          ENDIF
.
          PACK      PNKRELP,NK100301,SP70        * load relationship code
.
.         Load NoK Address Line 1: NK1.4 - Component 1
.
VNK12000  STRIP     NK100401
          MOVELPTR  NK100401,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VNK14000                   * no - no change to address
          ENDIF
.
          MATCH     BLANKSTR,NK100401            * null field ?
          IF        @EQUAL
            MOVE      SP70,PNKADD1               * yes - clear address
            MOVE      SP70,PNKADD2
            MOVE      SP70,PNKSUBR
            MOVE      SP70,PNKADD4
            MOVE      SP70,PNKPOST
            GOTO      VNK14000
          ENDIF
.
          PACK      PNKADD1,NK100401,SP70        * load address line 1
.
.         Load NoK Address Line 2: NK1.4 - Component 2
.
VNK12100  STRIP     NK100402
          MOVELPTR  NK100402,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VNK12200                   * no
          ENDIF
.
          MATCH     BLANKSTR,NK100402            * null field ?
          IF        @EQUAL
            MOVE      SP70,PNKADD2               * yes
            GOTO      VNK12200
          ENDIF
.
          PACK      PNKADD2,NK100402,SP70        * load address line 2
.
.         Load NoK Address Line 3: NK1.4 - Component 3
.
VNK12200  STRIP     NK100403
          MOVELPTR  NK100403,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VNK12300                   * no
          ENDIF
.
          MATCH     BLANKSTR,NK100403            * null field ?
          IF        @EQUAL
            MOVE      SP70,PNKSUBR               * yes
            GOTO      VNK12300
          ENDIF
.
          PACK      PNKSUBR,NK100403,SP70        * load address line 3
.
.         Load NoK Address Line 1: NK1.4 - Component 4
.
VNK12300  STRIP     NK100404
          MOVELPTR  NK100404,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VNK12400                   * no
          ENDIF
.
          MATCH     BLANKSTR,NK100404            * null field ?
          IF        @EQUAL
            MOVE      SP70,PNKADD4               * yes
            GOTO      VNK12400
          ENDIF
.
          PACK      PNKADD4,NK100404,SP70        * load address line 4
.
.         Load NoK Post Code: NK1.4 - Component 5
.
VNK12400  STRIP     NK100405
          MOVELPTR  NK100405,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VNK13000                   * no
          ENDIF
.
          MATCH     BLANKSTR,NK100405            * null field ?
          IF        @EQUAL
            MOVE      SP10,PNKPOST               * yes
            GOTO      VNK14000
          ENDIF
.
          PACK      PNKPOST,NK100405,SP70        * load post code
.
.         Make sure that the postcode and suburb (if populated) are on ibapostf
.
VNK13000  MATCH     SP8,PNKPOST                  * blank postcode ?
          GOTO      VNK14000 IF EQUAL            * yes
.
          MATCH     SP35,PNKSUBR                 * blank suburb ?
          GOTO      VNK14000 IF EQUAL            * yes
.
          COMPARE   TWO,PTCNHDPS                 * Australian site ?
          GOTO      VNK14000 IF LESS             * no
.
          MOVE      PNKPOST,KEY4
...       PACK      KEY49,KEY4,PNKSUBR,SP70                           *D-240184
...       CALL      RDIBPOS1                     * postcode/suburb on file ?
.
          PACK      KEY56,PNKPOST,PNKSUBR,SP70                        *I-240184
          CALL      RSIBPOS1
          CALL      RKIBPOS1
          BRANCH    OVRCD,VNK13500
          MATCH     PNKPOST,IBPOPCOD
          IF        @EQUAL
            MATCH     PNKSUBR,IBPOSUBR
            GOTO      VNK14000 IF EQUAL
          ENDIF
.
VNK13500  IF        QUICKREG = 1
            PACK      NK100405,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK100405
            MOVE      SP10,PNKPOST
          ELSE
            MOVE      "NK1.4: NoK PostcodeSuburb not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000                                  * end  *I-240184
          ENDIF
.
.         Load NoK Home Phone: NK1.5 - Component 9
.
VNK14000  STRIP     NK100509
          MOVELPTR  NK100509,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VNK15000 IF EQUAL            * no
.
          MATCH     BLANKSTR,NK100509            * null phone number ?
          IF        @EQUAL
            MOVE      SP20,PNKTELP               * yes - clear field
            GOTO      VNK15000
          ENDIF
.
          PACK      PNKTELP,NK100509,SP20
          GOTO      VNK15000
.
.         Load NoK work phone number if populated
.
VNK15000  STRIP     NK100609
          MOVELPTR  NK100609,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VNK16000 IF EQUAL            * no
.
          MATCH     BLANKSTR,NK100609            * null phone number ?
          IF        @EQUAL
            MOVE      SP20,PNKTELB               * yes - clear field
            GOTO      VNK16000
          ENDIF
.
          PACK      PNKTELB,NK100609,SP20
          GOTO      VNK16000
.
.         Load Emergency Contact Name: NK1.30 - Component 1 (Surname)
.
VNK16000  MOVE      SP20,DIM20
          CLEAR     DIM20
.
          STRIP     NK103001
          MOVELPTR  NK103001,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VNK16200                   * no
          ENDIF
.           
          MATCH     BLANKSTR,NK103001            * null field ?
          IF        @EQUAL
            MOVE      SP20,DIM20                 * yes - clear name
            GOTO      VNK16100
          ENDIF
.
          MOVE      NK103001,DIM20
          STRIP     DIM20
.
.         Load Emergency Contact Name: NK1.30 - Component 2 (First Given Name)
.
VNK16100  ENDSET    DIM20
.
VNK16200  STRIP     NK103002
          MOVELPTR  NK103002,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VNK16300                   * no
          ENDIF
.           
          MATCH     BLANKSTR,NK103002            * null field ?
          IF        @EQUAL
            APPEND    SP20,DIM20                 * yes
            GOTO      VNK16300
          ENDIF
.
          APPEND    SP1,DIM20
          APPEND    NK103002,DIM20
          RESET     DIM20
          STRIP     DIM20
          ENDSET    DIM20
.
.         Load Emergency Contact Name: NK1.30 - Component 3 (Second Given Name)
.
VNK16300  STRIP     NK103003
          MOVELPTR  NK103003,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VNK16400                   * no
          ENDIF
.
          MATCH     BLANKSTR,NK103003            * null field ?
          IF        @EQUAL
            APPEND    SP20,DIM20                 * yes
            GOTO      VNK16400
          ENDIF
.
          APPEND    SP1,DIM20
          APPEND    NK103003,DIM20
          APPEND    SP20,DIM20
VNK16400  RESET     DIM20
.
.         If DIM20 is not populated, then leave PTMXECNM as it currently is.
.         If DIM20 is null, then the field needs to be space filled.
.         If DIM20 is not blank, then the field needs to be updated.
.
          MOVELPTR  DIM20,FORM3
          IF        FORM3 = 0
            GOTO      VNK17000
          ENDIF
.
          MATCH     SP20,DIM20
          IF        @EQUAL
            MOVE      SP20,PTMXECNM
            GOTO      VNK17000
          ENDIF
.
          PACK      PTMXECNM,DIM20,SP20
.
.         Load Emergency Contact Address Line 1: NK1.32 - Component 1
.
VNK17000  STRIP     NK103201
          MOVELPTR  NK103201,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VNK17400                   * no - no change to address
          ENDIF
.
          MATCH     BLANKSTR,NK103201            * null field ?
          IF        @EQUAL
            MOVE      SP70,PTMXECA1              * yes - clear address fields
            MOVE      SP70,PTMXECA2
            MOVE      SP70,PTMXECA3
            MOVE      SP70,PTMXECA4
            MOVE      SP70,PTMXECPC
            GOTO      VNK17400
          ENDIF
.
          PACK      PTMXECA1,NK103201,SP70       * load address line 1
.
.         Load Emergency Contact Address Line 2: NK1.32 - Component 2
.
VNK17100  STRIP     NK103202
          MOVELPTR  NK103202,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VNK17200                   * no
          ENDIF
.
          MATCH     BLANKSTR,NK103202            * null field ?
          IF        @EQUAL
            MOVE      SP70,PTMXECA2              * yes
            GOTO      VNK17200
          ENDIF
.
          PACK      PTMXECA2,NK103202,SP70       * load address line 2
.
.         Load Emergency Contact Address Line 3: NK1.32 - Component 3
.
VNK17200  STRIP     NK103203
          MOVELPTR  NK103203,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VNK17300                   * no
          ENDIF
.
          MATCH     BLANKSTR,NK103203            * null field ?
          IF        @EQUAL
            MOVE      SP70,PTMXECA3              * yes
            GOTO      VNK17300
          ENDIF
.
          PACK      PTMXECA3,NK103203,SP70       * load address line 3
.
.         Load Emergency Contact Address Line 4: NK1.32 - Component 4
.
VNK17300  STRIP     NK103204
          MOVELPTR  NK103204,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VNK17400                   * no
          ENDIF
.
          MATCH     BLANKSTR,NK103204            * null field ?
          IF        @EQUAL
            MOVE      SP70,PTMXECA4              * yes
            GOTO      VNK17400
          ENDIF
.
          PACK      PTMXECA4,NK103204,SP70       * load address line 4
.
.         Load Emergency Contact Post Code: NK1.32 - Component 5
.
VNK17400  STRIP     NK103205
          MOVELPTR  NK103205,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VNK17500                   * no
          ENDIF
.
          MATCH     BLANKSTR,NK103205            * null field ?
          IF        @EQUAL
            MOVE      SP10,PTMXECPC              * yes
            GOTO      VNK18000
          ENDIF
.
.         Post Code is populated, so validate it
.
          IF        FORM3 <> 4
            IF        QUICKREG = 1
              PACK      NK103205,SP100,SP100,SP100,SP100,SP100
              CLEAR     NK103205
              GOTO      VNK17500
            ELSE
              MOVE      "NK1.32: NoK Postcode incorrect length",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VNK18000
            ENDIF
          ENDIF
.
          TYPE      NK103205
          IF        !@EQUAL
            IF        QUICKREG = 1
              PACK      NK103205,SP100,SP100,SP100,SP100,SP100
              CLEAR     NK103205
              GOTO      VNK17500
            ELSE
              MOVE      "NK1.32: NoK Postcode not numeric",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VNK18000
            ENDIF
          ENDIF
.
          PACK      PTMXECPC,NK103205,SP70       * load post code
.
.         Postcode is populated, so if the suburb is also populated,
.         check that the suburb and postcode are valid.  If state is also
.         populated, then use this to validate as well.
.
VNK17500  MOVELPTR  NK103203,FORM3
          COMPARE   ZERO,FORM3                   * suburb populated ?
          GOTO      VNK18000 IF EQUAL            * no
.
          MATCH     BLANKSTR,NK103203            * blank suburb ?
          GOTO      VNK18000 IF EQUAL            * yes
.
          COMPARE   TWO,PTCNHDPS                 * Australian site ?
          GOTO      VNK18000 IF LESS             * no
.
          MOVELPTR  NK103204,FORM3
          COMPARE   ZERO,FORM3                   * state populated ?
          GOTO      VNK17600 IF EQUAL            * no
.
          MATCH     BLANKSTR,NK103204            * blank state ?
          GOTO      VNK17600 IF EQUAL            * yes
.
.         Check that the postcode/suburb/state is on file
.
          PACK      KEY8,NK103205,SP10
          PACK      KEY45,NK103203,SP70
          PACK      KEY3,NK103204,SP3
          PACK      KEY56,KEY8,KEY45,KEY3
          CALL      RDIBPOS1                     * postcode on file ?
          BRANCH    OVRCD,VNK17700               * no - invalid
          GOTO      VNK18000
.
.         Check that the postcode/suburb is on file
.
VNK17600  PACK      KEY8,NK103205,SP10
          PACK      KEY56,KEY8,NK103203,SP70
          CALL      RDIBPOS1                     * postcode/suburb on file ?
          COMPARE   ZERO,OVRCD
          GOTO      VNK18000 IF EQUAL            * yes - valid
.
          CALL      RKIBPOS1                     * no - read next record
          BRANCH    OVRCD,VNK17700               * eof - error
.
          PACK      KEY8,NK103205,SP10
          MATCH     KEY8,IBPOPCOD                * same postcode still ?
          IF        @EQUAL
            PACK      KEY45,NK103203,SP70
            MATCH     KEY45,IBPOSUBR             * yes - same suburb still ?
            GOTO      VNK18000 IF EQUAL          * yes
          ENDIF
.
VNK17700  IF        QUICKREG = 1
            PACK      NK103205,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK103205
          ELSE
            MOVE     "NK1.32: Emergency Contact PostcodeSuburb not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Load Emergency Contact Home Phone: NK1.31 - Component 9
.
VNK18000  STRIP     NK103109[1]
          MOVELPTR  NK103109[1],FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VNK19999 IF EQUAL            * no
.
          MATCH     BLANKSTR,NK103109[1]         * null phone number ?
          IF        @EQUAL
            MOVE      SP20,PTMXECPP              * yes - clear field
            GOTO      VNK19999
          ENDIF
.
          PACK      PTMXECPP,NK103109[1],SP20
.
VNK19999  RETURN
+
.*****************************************************************************
.*                            VPV10000             Called by: PROC0000       *
.*      Validate that the mandatory PV1 fields are populated or null.        *
.* Returns: SAVHFUND - saved health fund from visit details                  *
.*          SAVHTBLE - saved health fund table from visit details            *
.*          SAVCLAIM - saved claim code from visit details                   *
.*****************************************************************************
.
.         Patient Class
.
VPV10000  STRIP     PV100201
          MOVELPTR  PV100201,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "PV1.2: Patient Class not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Note: The value in PV1.2 will be validated later on according
.         to the type of message (ie I/P, O/P or ED).
.
.         If the message is A28 or A31, then only PV1.2 is mandatory so
.         we can ignore the rest of the segment.
.         If the message is P03 or S14, then we only need to validate PV1.19.
.         REF messages need to validate fields PV1.2, PV1.3, PV1.20 & PV1.45.
.
          BRANCH    MESSGNUM,VPV19999:           * ADT^A28
                             VPV19999:           * ADT^A31
                             VPV19999:           * ADT^A34
                             VPV13000:           * DFT^P03
                             VPV11000:           * REF^I12
                             VPV11000:           * REF^I13
                             VPV11000:           * REF^I14
                             VPV11000:           * ADT^A04
                             VPV11000:           * ADT^A03
                             VPV19999:           * MFN^M02
                             VPV17000:           * ADT^A05
                             VPV13000:           * SIU^S14
                             VPV13000:           * ADT^A08
                             VPV13000:           * ADT^A21
                             VPV13000:           * ADT^A22
                             VPV18000:           * SRM^S0x
                             VPV18100:           * SIU^S12 0890602
                             VPV18100:           * SIU^S13 0890602
                             VPV18100:           * SIU^S15 0890602
                             VPV18100            * SIU^S26 0890602
.
.         Processing for REF, A04 (O/P) & A03 (AH Contact) messages.
.         The field is mandatory, so make sure that the field is not null
.
VPV11000  MATCH     BLANKSTR,PV100201
          IF        @EQUAL
            MOVE      "PV1.2: Patient Class is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV11010
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 1
            MOVE      "PV1.2: Patient Class has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV11010
          ENDIF
.
          MATCH     ANSE,PV100201                * A04 EMR visit type ?
          GOTO      VPV16500 IF EQUAL
.
          MATCH     ANSO,PV100201                * valid visit type ?
          IF        !@EQUAL
            MOVE      "PV1.2: Patient Class not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Assigned Location (Clinic ID) (PV1.3,Component 1)
.         Note: Validation of this field has to be done with ZXV.35
.               as site is required to open the relevant clinic id file.
.
.         Assigned Location (Facility) (PV1.3, Component 4)
.         Note: Validation of this field has to be done with ZXV.40
.               as department may be required to determine the
.               associated hospital (parameter controlled).
.
.         Pre-Admit Number (Booking Number) (PV1.5, Component 1)
.         Note: Validation of this field has to be done with ZXV.35
.               as site is required to open the relevant O/P Booking file.
.
VPV11010  COMPARE   EIGHT,MESSGNUM
          GOTO      VPV11015 IF NOT EQUAL
.
.         We are processing an A04 O/P message, so validate the
.         Clinic Id.  First make sure the Clinic Id (PV1.3) is populated.
.
          STRIP     PV100301
          MOVELPTR  PV100301,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "PV1.3: Clinic ID not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VPV11015
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,PV100301
          IF        @EQUAL
            MOVE      "PV1.3: Clinic ID is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV11015
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 6
            MOVE      "PV1.3: Clinic ID has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VPV11015  COMPARE   NINE,MESSGNUM
          GOTO      VPV11020 IF NOT EQUAL
.
.         We are processing an A03 AH Contact message, so validate
.         Delivery Setting.
.         First make sure Delivery Setting (PV1.3) is populated.
.
          STRIP     PV100301
          MOVELPTR  PV100301,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "PV1.3: Delivery Setting not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VPV11020
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,PV100301
          IF        @EQUAL
            MOVE      "PV1.3: Delivery Setting is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV11020
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 3
            MOVE      "PV1.3: Delivery Setting has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV11020
          ENDIF
.
.         Make sure the code is valid for Cat zN
.
          PACK      KEY5,CATzN,PV100301,SP5
          CALL      RDCODE1                      * field valid ?
          IF        OVRCD = 1
            MOVE      "PV1.3: Delivery Setting not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VPV11020
          ENDIF
.
.         Validate that we have a booking number
.
VPV11020  IF        MESSGNUM <> 8 & MESSGNUM <> 9
            GOTO      VPV11050
          ENDIF
.
          SQUEEZE   PV100501
          MOVELPTR  PV100501,FORM3               * field populated ?
          IF        FORM3 = 0
            IF        MESSGNUM = 8
              MOVE      "PV1.5: Booking Number not populated",ERRORDSC
            ELSE
              MOVE      "PV1.5: Linked Visit Number not populated",ERRORDSC
            ENDIF
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV11025
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,PV100501
          IF        @EQUAL
            IF        MESSGNUM = 8
              MOVE      "PV1.5: Booking Number is mandatory",ERRORDSC
            ELSE
              MOVE      "PV1.5: Linked Visit Number is mandatory",ERRORDSC
            ENDIF
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV11025
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 8
            IF        MESSGNUM = 8
              MOVE      "PV1.5: Booking Number has too many characters",ERRORDSC
            ELSE
              MOVE      "PV1.5: Linked Visit Number has too many characters",ERRORDSC
            ENDIF
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Health Care Provider (PV1.9)
.
VPV11025  IF        MESSGNUM <> 9
            GOTO      VPV11027
          ENDIF
.
          STRIP     PV100901
          MOVELPTR  PV100901,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VPV11027                   * no
          ENDIF
.
          MATCH     BLANKSTR,PV100901            * null field ?
          IF        @EQUAL
            GOTO      VPV11027                   * yes
          ENDIF
.
          IF        FORM3 > 10
            MOVE      "PV1.9: HCP has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV11027
          ENDIF
.
          PACK      KEY10,PV100901,SP10
          CALL      RDPMHCP1                     * valid HCP code ?
          IF        OVRCD = 1
            MOVE      "PV1.9: HCP not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VPV11027
          ENDIF
.
.         Clinic Type (PV1.10)
.
VPV11027  IF        MESSGNUM <> 9
            GOTO      VPV11030
          ENDIF
.
          STRIP     PV101001
          MOVELPTR  PV101001,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "PV1.10: Clinic Type not populated",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV11030
          ENDIF
.
          MATCH     BLANKSTR,PV101001            * null field ?
          IF        @EQUAL
            MOVE      "PV1.10: Clinic Type is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV11030                   * yes
          ENDIF
.
          IF        FORM3 > 6
            MOVE      "PV1.10: Clinic Type has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV11030
          ENDIF
.
.         Now validate the date/time fields (PV1.44 & PV1.45).
.         First make sure the check-in time field (PV1.44) is populated.
.
VPV11030  STRIP     PV104401
          MOVELPTR  PV104401,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "PV1.44: Check-In Time not populated",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV11035
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,PV104401
          IF        @EQUAL
            MOVE      "PV1.44: Check-In Time is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV11035
          ENDIF
.
.         Make sure that check-in date/time is valid and not in the future.
.
          MOVE      PV104401,DIM14
          MOVE      "PV1.44",FIELDID
          MOVE      ONE,DATFLAG1
          MOVE      ONE,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
VPV11035  COMPARE   EIGHT,MESSGNUM               * A04 message ?
          GOTO      VPV19999 IF EQUAL            * yes - finished
.
.         This is an A03 AH Contact message, so make sure the visit number
.         field (PV1.19) is populated.
.
          STRIP     PV101901
          MOVELPTR  PV101901,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "PV1.19: Visit Number not populated",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV11040
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,PV101901
          IF        @EQUAL
            MOVE      "PV1.19: Visit Number is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV11040
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 8
            MOVE      "PV1.19: Visit Number has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV11040
          ENDIF
.
.         Now make sure the departure time field (PV1.45) is populated.
.
VPV11040  STRIP     PV104501
          MOVELPTR  PV104501,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "PV1.45: Departure Time not populated",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV11050
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,PV104501
          IF        @EQUAL
            MOVE      "PV1.45: Departure Time is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV11050
          ENDIF
.
.         Make sure that departure date/time is valid and not in the future.
.
          MOVE      PV104501,DIM14
          MOVE      "PV1.45",FIELDID
          MOVE      ONE,DATFLAG1
          MOVE      ONE,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
.         Make sure that departure date/time is not prior to the check-in
.         date/time
.
          MATCH     PV104401,PV104501
          IF        @LESS
            MOVE      "PV1.45: Departure Time is less than Check-In Time",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Financial Class (Claim Type) (PV1.20, Component 1)
.
VPV11050  STRIP     PV102001
          MOVELPTR  PV102001,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "PV1.20: Claim Type not populated",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV19999
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,PV102001
          IF        @EQUAL
            MOVE      "PV1.20: Claim Type is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV19999
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 3
            MOVE      "PV1.20: Financial Class has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV19999
          ENDIF
.
.         Make sure the code is valid for Cat CL
.
          PACK      KEY5,ANSC,ANSL,PV102001,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "PV1.20: Claim Type not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          COMPARE   NINE,MESSGNUM                * A03 message ?
          GOTO      VPV19999 IF EQUAL            * yes - finished
.
.         Verify the code is active only if we are creating a referral
.
          MATCH     MTYPEI12,MESSTYPE            * I12 message ?
          GOTO      VPV11100 IF NOT EQUAL        * no
.
          MATCH     ANSA,PTCOACTV
          IF        !@EQUAL
            MOVE      "PV1.20: Claim Type not active",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Discharge Date/Time (Referral Closed Date/Time) (PV1.45)
.
VPV11100  STRIP     PV104501
          MOVELPTR  PV104501,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VPV12000 IF NOT EQUAL        * yes
.
VPV11150  MATCH     "2",RF100101
          IF        @EQUAL
            MOVE      "PV1.45: Status requires a Closed Date",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
          GOTO      VPV19999
.
.         The field is populated, so check if the field is null
.
VPV12000  MATCH     BLANKSTR,PV104501            * field null ?
          GOTO      VPV11150 IF EQUAL            * yes
.
.         The field has data.
.         A referral closed date can only be associated with a closed referral
.
          MATCH     "2",RF100101                 * referral closed ?
          IF        !@EQUAL
            MOVE      "PV1.45: Closed Date not appropriate for status",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV19999
          ENDIF
.
          MOVE      PV104501,DIM14
          MOVE      "PV1.45",FIELDID
          MOVE      ONE,DATFLAG1
          MOVE      ONE,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
.         Make sure that the Referral Closed Date is not less than the
.         Referral Date (RF1.7)
.
          MATCH     RF100701,PV104501
          IF        @LESS
            MOVE      "PV1.45: Referral Closed Date less than Referral Date",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
          GOTO      VPV19999
.
.         Patient Visit Number for DFT^P03, ADT^A08, ADT^A21, ADT^A22
.         & SIU^S14 messages
.
VPV13000  MATCH     ANSO,PV100201                * Outpatient visit type ?
          GOTO      VPV18000 IF EQUAL
.
          MATCH     ANSI,PV100201
          IF        @EQUAL
            MATCH     "2.4",MSH01201
            GOTO      VPV18100 IF EQUAL          * SIU message (MOSAIQ)
          ENDIF
.
          MATCH     "1",PTCNUEVI
          GOTO      VPV13030 IF NOT EQUAL        * using external visit id ?
.
          CALL      CEVS0000                     * check for external visit ID
          BRANCH    EXIT,VPV19999                * no visit ID found
.
VPV13030  SQUEEZE   PV101901
          MOVELPTR  PV101901,FORM3               * field populated ?
          COMPARE   FORM3,ZERO
          GOTO      VPV13100 IF LESS             * yes
.
          SQUEEZE   PV100501
          MOVELPTR  PV100501,FORM3               * field populated ?
          COMPARE   FORM3,ZERO
          GOTO      VPV13100 IF EQUAL            * no
.
          COMPARE   FORM3,EIGHT
          GOTO      VPV13100 IF LESS             * must be 8 chars or less
.
          MOVE      PV100501,KEY8
          RJUSTIFY  KEY8
          CALL      RDMISS1                      * check for preadmission
          BRANCH    OVRCD,VPV13050
.
          COMPARE   ONE,ASTAT
          GOTO      VPV13050 IF NOT EQUAL
.
          MOVE      AADMNO,PV101901              * 0887136 (use preadmission)
          GOTO      VPV13100
.
VPV13050  MOVE      "PV1.19: Visit Number not populated",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VPV19999
.
.         The field is mandatory, so make sure that the field is not null
.
VPV13100  MATCH     BLANKSTR,PV101901
          IF        @EQUAL
            MOVE      "PV1.19: Visit Number is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV19999
          ENDIF
.
          IF        FORM3 > 8
            MOVE      "PV1.19: Visit Number has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV19999
          ENDIF
.
          MOVE      PV101901,KEY8
          RJUSTIFY  KEY8
          CALL      RDVISA1                      * is patient on file ?
          IF        OVRCD = 1
            MOVE      "PV1.19: Visit Number not on file",ERRORDSC
            MOVE      "204",ERRORNUM
            CALL      EROR0000
            GOTO      VPV19999
          ENDIF
.
.         Check that the visit U/R matches the patient U/R from the message
.
          MATCH     PVIURNO,PURNO
          IF        !@EQUAL
            MOVE      "PV1.19: UR for visit doesnt match patient id",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Get the visit extension record
.
          MOVE      PVIBILL,KEY8
          CALL      RDPMVX11
          IF        OVRCD = 1
            MOVE      "PV1.19: Visit Extension record not on file",ERRORDSC
            MOVE      "204",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Get the specific visit detail record
.
          BRANCH    PVITYPE,VPV16000:            * Emergency
                            VPV14000:            * O/P
                            VPV15000             * I/P
.
          MOVE      "PV1.19: Visit type not valid",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VPV19999
.
.         O/P Visit Type
.
VPV14000  MATCH     ANSO,PV100201                * does visit type match ?
          IF        !@EQUAL
            MOVE      "PV1.19: Visit type does not match PV1.2",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Check that the outpatient visit status is attended
.
          MOVE      PVISITE,KEY6
          CALL      RDSITA1
          IF        OVRCD = 1
            MOVE      "PV1.19: OP site for visit not on file",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV19999
          ENDIF
.
          CLOSE     OUTBOKA6
          PACK      FILENAME,OSTFILE,FILBOKA6
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTBOKA6,FILENAME
          TRAPCLR   IO
          IF        OVRCD = 1
            MOVE      "PV1.19: Open failed on outbokaf",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV19999
          ENDIF
.
.         Validate the outbokaf booking record first
.
          PACK      KEY36,PVIBILL,SP30,SP10
          CALL      RDSBOKA6                     * position on visit
          CALL      RDKBOKA6                     * read next record
          IF        OVRCD = 1
            MOVE      "PV1.19: Outpatient Booking A record not found",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV19999
          ENDIF
.
          MATCH     PVIBILL,OBAOUTNO             * same visit still ?
          IF        !@EQUAL
            MOVE      "PV1.19: Outpatient Booking A record not found",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV19999
          ENDIF
.
          COMPARE   FOUR,OBASTAT                 * attended ?
          IF        !@EQUAL
            MOVE      "PV1.19: Outpatient not attended",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV19999
          ENDIF
.
          CLOSE     OUTBB1A1
          PACK      FILENAME,OSTFILE,FILBB1A1
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTBB1A1,FILENAME
          TRAPCLR   IO
          IF        OVRCD = 1
            MOVE      "PV1.19: Open failed on outbb1af",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV19999
          ENDIF
.
          MOVE      PVIBILL,KEY8
          CALL      RDBOKB1
          IF        OVRCD = 1
            MOVE      "PV1.19: OP Booking B record not found",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV19999
          ENDIF
.
.         Valid outbb1af visit record found, so save the health fund details
.         and claim code
.
          MOVE      OTBBFUND,SAVHFUND
          MOVE      OTBBTBLE,SAVHTBLE
          MOVE      OBACOMP,SAVCLAIM
          GOTO      VPV19999
.
.         I/P Visit Type
.
VPV15000  MATCH     ANSI,PV100201                * does visit type match ?
          IF        !@EQUAL
            MOVE      "PV1.19: Visit type doesnt match PV1.2",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          MOVE      PVIBILL,KEY8
          CALL      RDMISS1
          IF        OVRCD = 1
            MOVE      "PV1.19: Admission record not found",ERRORDSC
            MOVE      "204",ERRORNUM
            CALL      EROR0000
            GOTO      VPV19999
          ENDIF
.
.         For ADT^A21, the patient cannot be on standby
.
          IF        MESSGNUM = 14
            MATCH     SP3,AWARD
            IF        @EQUAL
              MOVE      "PV1.19: Leave not allowed for standby patient",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
.         If this is an SIU^S14 message, then validate that the visit number
.         matches the theatre record (oprdetaf.opdaadmn)
.
          IF        MESSGNUM = 12
            MATCH     OPDAADMN,PVIBILL
            IF        !@EQUAL
              MOVE      "PV1.19: Visit numbers do not match",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VPV19999
            ENDIF
          ENDIF
.
.         If this is an ADT^A08 message, then check if a working diagnosis
.         record exists on pmsworaf for the visit number
.
          IF        MESSGNUM = 13
            MOVE      PVIBILL,KEY8
            CALL      RDPMWOR1                   * record on file ?
            MOVE      OVRCD,PMWORFLG
          ENDIF
.
.         Make sure that the inpatient visit is current, discharged or on-leave
.         for DFT^P03, ADT^A08 and SIU^S14.
.         For ADT^A21, the patient must be a current admission.
.         For ADT^A22, the patient must be on-leave.
.
          IF        MESSGNUM = 14
            COMPARE   TWO,ASTAT                  * current I/P ?
            GOTO      VPV15500 IF EQUAL          * yes - valid
          ELSE
            IF        MESSGNUM = 15
              COMPARE   FOUR,ASTAT               * on-leave I/P ?
              GOTO      VPV15500 IF EQUAL        * yes - valid
            ELSE
              IF        ASTAT > 0 & ASTAT < 5
                GOTO      VPV15500
              ENDIF
            ENDIF
          ENDIF
.
          MOVE      "PV1.19: Admission status not valid",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
.
.         Valid patmi1af visit record found, so save the health fund details
.         and claim code
.
VPV15500  MOVE      AFUNDH,SAVHFUND
          MOVE      AFNDTB,SAVHTBLE
          MOVE      ACLAIM,SAVCLAIM
          GOTO      VPV19999
.
.         Emergency Visit Type
.
VPV16000  MATCH     ANSE,PV100201                * does visit type match ?
          IF        !@EQUAL
            MOVE      "PV1.19: Visit type doesnt match PV1.2",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          MOVE      PVIBILL,KEY8
          CALL      RDEMVIS1
          IF        OVRCD = 1
            MOVE      "PV1.19: Emergency record not found",ERRORDSC
            MOVE      "204",ERRORNUM
            CALL      EROR0000
            GOTO      VPV19999
          ENDIF
.
.         Make sure that the emergency visit is not cancelled
.
          IF        EMVISTAT = 4
            MOVE      "PV1.19: Emergency status not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Valid emrvisaf visit record found, so save the health fund details
.         and claim code
.
          MOVE      EMVIFUND,SAVHFUND
          MOVE      EMVITABL,SAVHTBLE
          MOVE      EMVICOMP,SAVCLAIM
.
VPV16500  CALL      EPV10000                     * EMR ADT messages (A08)
          GOTO      VPV19999
.
VPV17000  CALL      APV10000                     * ADT messages (A05)
          GOTO      VPV19999
.
VPV18000  MATCH     "2.4",MSH01201
          GOTO      VPV18100 IF EQUAL            * SIU messages (MOSAIQ)
.
          CALL      SPV10000                     * SRM messages (S0x)
          GOTO      VPV19999
.
VPV18100  CALL      MPV10000                     * SIU messages (MOSAIQ)
          GOTO      VPV19999
.
VPV19999  RETURN
+
.*****************************************************************************
.*                                 CEVS0000                                  *
.*    Check if a External Visit ID record exists on ibaalvaf (if PTCNUEVI=1) *
.* Requires: PV101901 - Use as External Visit ID                             *
.*****************************************************************************
CEVS0000  MOVE      ZERO,CEVSFLAG                  * check external visit flag
.
.         First: Check for PV1.19 on ibaalvaf as alternate ID
          SQUEEZE   PV101901
          MOVELPTR  PV101901,FORM3
          COMPARE   FORM3,TWENTY
          GOTO      CEVS3000 IF LESS               * must be 20 chars or less
.
          PACK      PADMAVIS,PV101901,SP70         * use external ID as PV1.19
          MATCH     SP20,PADMAVIS                  * blank alternate visit no. ?
          GOTO      CEVS3000 IF EQUAL              * yes - check PV1.50
.
CEVS0500  PACK      KEY28,PADMAVIS,SP30
          CALL      RSIBALV2                       * position on alt. visit no.
CEVS1000  CALL      RKIBALV2                       * read next record
          BRANCH    OVRCD,CEVS2000                 * eof - finished
.
          MATCH     PADMAVIS,IBAVAVIS              * same alt. visit no. ?
          GOTO      CEVS2000 IF NOT EQUAL          * no
.
          MATCH     " 0",IBAVTYPE
          IF        !@EQUAL
            MATCH     "  ",IBAVTYPE
            GOTO      CEVS1000 IF NOT EQUAL        * record type is 0 or blank
          ENDIF
.
          MOVE      IBAVVISN,PV101901              * use ibaalvaf visit number
          GOTO      CEVS9000
.
.         Second: Check for PV1.19 on patvisaf as webPAS visit
CEVS2000  SQUEEZE   PADMAVIS
          MOVELPTR  PADMAVIS,FORM3                 * field populated ?
          COMPARE   FORM3,ZERO
          GOTO      CEVS3000 IF EQUAL              * no - check PV1.50
.
          COMPARE   FORM3,EIGHT
          GOTO      CEVS3000 IF LESS               * must be 8 chars or less
.
          MOVE      PADMAVIS,KEY8                  * does not exist on ibaalvaf
          RJUSTIFY  KEY8
          CALL      RDVISA1                        * webPAS visit number ?
          IF        OVRCD = 0
            MOVE      PVIBILL,PV101901             * use patvisaf visit number
            GOTO      CEVS9000
          ENDIF
.
.         Third: Check for PV1.50 on ibaalvaf as alternate ID
CEVS3000  BRANCH    CEVSFLAG,CEVS9500              * PV1.50 already checked
.
          MOVE      ONE,CEVSFLAG                   * only check once
.
          SQUEEZE   PV105001
          MOVELPTR  PV105001,FORM3
          COMPARE   FORM3,TWENTY
          GOTO      CEVS9500 IF LESS               * must be 20 chars or less
.
          PACK      PADMAVIS,PV105001,SP70         * use external ID as PV1.50
          MATCH     SP20,PADMAVIS                  * blank alternate visit no. ?
          IF        @EQUAL
            GOTO      CEVS9500                     * yes - finish
          ELSE
            GOTO      CEVS0500                     * no - repeat checks 1 and 2
          ENDIF
.
CEVS9000  MOVE      ZERO,EXIT                      * webPAS visit found
          GOTO      CEVS9999
.
CEVS9500  MOVE      ONE,EXIT                       * no webPAS visit found
          MOVE      "PV1.19/PV1.50: Alternate ID does not exist on webPAS",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
CEVS9999  RETURN
+
.*****************************************************************************
.*                           EPV10000           Called by: VPV10000          *
.*              Validate the PV1 fields for ADT (EMR) messages               *
.*****************************************************************************
EPV10000  SQUEEZE   PV100201
          MATCH     ANSE,PV100201                * valid visit type ?
          IF        !@EQUAL
            MOVE      "PV1.2: Patient Class not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
EPV10010  STRIP     PV100901
          MOVELPTR  PV100901,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      EPV19999 IF EQUAL
.
          MATCH     BLANKSTR,PV100901            * field null ?
          GOTO      EPV19999 IF EQUAL
.
          PACK      KEY10,PV100901,SP70
          CALL      RDPMHCP1                     * field valid ?
          IF        OVRCD = 1
            MOVE      "PV1.9: Treating Doctor not valid on pmshcpaf",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          PACK      KEY6,PV100901,SP70
          CALL      RDDOCT1
          IF        OVRCD = 1
            MOVE      "PV1.9: Treating Doctor not valid on patdo1af",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
EPV19999  RETURN
+
.*****************************************************************************
.*                           APV10000           Called by: VPV10000          *
.*              Validate the PV1 fields for ADT messages                     *
.*****************************************************************************
APV10000  SQUEEZE   PV100201
          MATCH     ANSI,PV100201                * valid visit type ?
          IF        !@EQUAL
            MOVE      "PV1.2: Patient Class not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
APV10030  STRIP     PV100301
          MOVELPTR  PV100301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      APV10040 IF EQUAL
.
          MATCH     BLANKSTR,PV100301            * field null ?
          GOTO      APV10040 IF EQUAL
.
          PACK      D3,PV100301,SP70
          PACK      KEY6,D3,PV100303,SP70
          CALL      RDWARD1                      * field valid ?
          IF        OVRCD = 1
            MOVE      "PV1.3: Patient Location not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
APV10040  STRIP     PV100401
          MOVELPTR  PV100401,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      APV10050 IF EQUAL
.
          MATCH     BLANKSTR,PV100401            * field null ?
          GOTO      APV10050 IF EQUAL
.
          PACK      KEY5,ANSP,SP1,PV100401,SP70
          CALL      RDCODE1                      * field valid ?
          IF        OVRCD = 1
            MOVE      "PV1.4: Admission Type Cat.P not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
APV10050  SQUEEZE   PV100501
          MOVELPTR  PV100501,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "PV1.5: Pre-Admit number not populated",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          MATCH     BLANKSTR,PV100501            * field null ?
          IF        @EQUAL
            MOVE      "PV1.5: Pre-Admit number is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          IF        FORM3 > 20
            MOVE      "PV1.5: Pre-Admit number has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
APV10080  STRIP     PV100801
          MOVELPTR  PV100801,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      APV10090 IF EQUAL
.
          MATCH     BLANKSTR,PV100801            * field null ?
          GOTO      APV10090 IF EQUAL
.
          PACK      KEY10,PV100801,SP70
          CALL      RDPMHCP1                     * field valid ?
          IF        OVRCD = 1
            MOVE      "PV1.8: Referring Doctor not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
APV10090  STRIP     PV100901
          MOVELPTR  PV100901,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      APV10140 IF EQUAL
.
          MATCH     BLANKSTR,PV100901            * field null ?
          GOTO      APV10140 IF EQUAL
.
          PACK      KEY10,PV100901,SP70
          CALL      RDPMHCP1                     * field valid ?
          IF        OVRCD = 1
            MOVE      "PV1.9: Consulting Doctor not valid on pmshcpaf",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          PACK      KEY6,PV100901,SP70
          CALL      RDDOCT1
          IF        OVRCD = 1
            MOVE      "PV1.9: Consulting Doctor not valid on patdo1af",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
APV10140  STRIP     PV101401
          MOVELPTR  PV101401,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      APV10180 IF EQUAL
.
          MATCH     BLANKSTR,PV101401            * field null ?
          GOTO      APV10180 IF EQUAL
.
          PACK      KEY5,ANSS,SP1,PV101401,SP70
          CALL      RDCODE1                      * field valid ?
          IF        OVRCD = 1
            MOVE      "PV1.14: Admission Source Cat S not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
APV10180  STRIP     PV101801
          MOVELPTR  PV101801,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      APV10200 IF EQUAL
.
          MATCH     BLANKSTR,PV101801            * field null ?
          GOTO      APV10200 IF EQUAL
.
          PACK      KEY5,ANSC,ANSC,PV101801,SP70
          CALL      RDCODE1                      * field valid ?
          IF        OVRCD = 1
            MOVE      "PV1.18: Patient Type Cat CC not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
APV10200  STRIP     PV102001
          MOVELPTR  PV102001,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      APV19900 IF EQUAL
.
          MATCH     BLANKSTR,PV102001            * field null ?
          GOTO      APV19900 IF EQUAL
.
          PACK      KEY5,ANSC,ANSL,PV102001,SP70
          CALL      RDCODE1                      * field valid ?
          IF        OVRCD = 1
            MOVE      "PV1.20: Financial Class Cat CL not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
APV19900
APV19999  RETURN
+
.*****************************************************************************
.*                           SPV10000           Called by: VPV10000          *
.*              Validate the PV1 fields for SRM messages                     *
.*****************************************************************************
SPV10000  MATCH     ANSO,PV100201            * does visit type match ?
          IF        !@EQUAL
            MOVE      "PV1.19: Visit type does not match PV1.2",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          SQUEEZE   PV101901
          MOVELPTR  PV101901,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "PV1.19: Visit Number not populated",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      SPV19999
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,PV101901
          IF        @EQUAL
            MOVE      "PV1.19: Visit Number is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      SPV19999
          ENDIF
.
          IF        FORM3 > 8
            MOVE      "PV1.19: Visit Number has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      SPV19999
          ENDIF
.
          MOVE      PV101901,KEY8
          RJUSTIFY  KEY8
          CALL      RDPREA1                  * record on pre-attendance file ?
          BRANCH    OVRCD,SPV10500           * no, so check patvisaf
.
          MOVE      OPROUTN,D8               * visit
          MOVE      OPRSITE,D6               * site
          GOTO      SPV11000
.
SPV10500  MOVE      PV101901,KEY8
          RJUSTIFY  KEY8
          CALL      RDVISA1                      * is patient on file ?
          IF        OVRCD = 1
            MOVE      "PV1.19: Visit Number not on file",ERRORDSC
            MOVE      "204",ERRORNUM
            CALL      EROR0000
            GOTO      SPV19999
          ENDIF
.
          MOVE      PVIBILL,D8               * visit
          MOVE      PVISITE,D6               * site
.
.         Check that the visit U/R matches the patient U/R from the message
.
          MATCH     PVIURNO,PURNO
          IF        !@EQUAL
            MOVE      "PV1.19: UR for visit does not match UR in PID.3",ERRORDSC
            MOVE      "204",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Get the visit extension record
.
          MOVE      D8,KEY8
          CALL      RDPMVX11
          IF        OVRCD = 1
            MOVE      "PV1.19: Visit Extension record not on file",ERRORDSC
            MOVE      "204",ERRORNUM
            CALL      EROR0000
          ENDIF
.
SPV11000  MOVE      D6,KEY6
          CALL      RDSITA1
          IF        OVRCD = 1
            MOVE      "PV1.19: OP site for visit not on file",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      SPV19999
          ENDIF
.
          CLOSE     OUTBOKA6
          PACK      FILENAME,OSTFILE,FILBOKA6
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTBOKA6,FILENAME
          TRAPCLR   IO
          IF        OVRCD = 1
            MOVE      "PV1.19: Open failed on outbokaf",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      SPV19999
          ENDIF
.
          PACK      KEY36,D8,SP70
          CALL      RDSBOKA6                     * position on visit
SPV11500  CALL      RDKBOKA6                     * read next record
          IF        OVRCD = 1
            MOVE      "PV1.19: Outpatient Booking A record not found",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      SPV19999
          ENDIF
.
          MATCH     D8,OBAOUTNO                  * same visit still ?
          IF        !@EQUAL
            MOVE      "PV1.19: Visit Number does not match",ERRORDSC
            MOVE      "204",ERRORNUM
            CALL      EROR0000
            GOTO      SPV19999
          ENDIF
.
          MATCH     OBAURNO,PURNO
          IF        !@EQUAL
            MOVE      "PV1.19: UR for visit does not match UR in PID.3",ERRORDSC
            MOVE      "204",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          CLOSE     OUTBB1A1
          PACK      FILENAME,OSTFILE,FILBB1A1
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTBB1A1,FILENAME
          TRAPCLR   IO
          IF        OVRCD = 1
            MOVE      "PV1.19: Open failed on outbb1af",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      SPV19999
          ENDIF
.
          MOVE      D8,KEY8
          CALL      RDBOKB1
          IF        OVRCD = 1
            MOVE      "PV1.19: Outpatient Booking B record not found",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      SPV19999
          ENDIF
.
SPV19999  RETURN
+
.*****************************************************************************
.*                           MPV10000           Called by: VPV10000          *
.*              Validate the PV1 fields for SIU^Sxx messages (MOSAIQ OUT/INP)*
.*****************************************************************************
MPV10000  MATCH     ANSO,PV100201                * visit type O ?
          GOTO      MPV15000 IF EQUAL
.
          MATCH     ANSI,PV100201                * visit type I ?
          IF        !@EQUAL
            MOVE      "PV1.2: Patient Class not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      MPV19900
          ENDIF
.
.         Inpatient only
.
.         PV1.3     Assigned Patient Location (PL)
.
          STRIP     PV100301
          MOVELPTR  PV100301,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            COMPARE   TEN7,MESSGNUM
            GOTO      MPV10100 IF NOT EQUAL      * mandatory for S12
.
            MOVE      "PV1.3: Patient Location not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      MPV10100
          ENDIF
.
          MATCH     BLANKSTR,PV100301            * field null ?
          IF        @EQUAL
            COMPARE   TEN7,MESSGNUM
            GOTO      MPV10100 IF NOT EQUAL      * mandatory for S12
.
            MOVE      "PV1.3: Patient Location is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      MPV10100
          ENDIF
.
          PACK      D3,PV100301,SP70
          PACK      KEY6,D3,PV100303,SP70
          CALL      RDWARD1                      * field valid ?
          IF        OVRCD = 1
            MOVE      "PV1.3: Patient Location not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      MPV10100
          ENDIF
.
.         PV1.4     Admission Type (IS)
.
MPV10100  STRIP     PV100401
          MOVELPTR  PV100401,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      MPV10200 IF EQUAL            * no
.
          MATCH     BLANKSTR,PV100401            * field null ?
          GOTO      MPV10200 IF EQUAL            * yes
.
          PACK      KEY5,ANSP,SP1,PV100401,SP70
          CALL      RDCODE1                      * field valid ?
          IF        OVRCD = 1
            MOVE      "PV1.4: Admission Type Cat.P not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      MPV10200
          ENDIF
.
.         PV1.14    Admit Source (IS)
.
MPV10200  STRIP     PV101401
          MOVELPTR  PV101401,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      MPV10300 IF EQUAL            * no
.
          MATCH     BLANKSTR,PV101401            * field null ?
          GOTO      MPV10300 IF EQUAL            * yes
.
          PACK      KEY5,ANSS,SP1,PV101401,SP70
          CALL      RDCODE1                      * field valid ?
          IF        OVRCD = 1
            MOVE      "PV1.14: Admission Source Cat.S not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      MPV10300
          ENDIF
.
.         PV1.18    Patient Type (IS)
.
MPV10300  STRIP     PV101801
          MOVELPTR  PV101801,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      MPV10400 IF EQUAL
.
          MATCH     BLANKSTR,PV101801            * field null ?
          GOTO      MPV10400 IF EQUAL
.
          PACK      KEY5,ANSC,ANSC,PV101801,SP70
          CALL      RDCODE1                      * field valid ?
          IF        OVRCD = 1
            MOVE      "PV1.18: Patient Type Cat.CC not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      MPV10400
          ENDIF
.
MPV10400
.
          GOTO      MPV17000                     * finished INP validation
.
.         Outpatient only
.
MPV15000
.
          GOTO      MPV17000                     * finished OUT validation
.
.         Both Inpatient and Outpatient
.
.         PV1.8     Referring Doctor (XCN)
.
MPV17000  MOVE      SP70,PV18HCPC
          STRIP     PV100801
          MOVELPTR  PV100801,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      MPV17100 IF EQUAL
.
          MATCH     BLANKSTR,PV100801            * field null ?
          IF        @EQUAL
            MOVE      BLANKSTR,PV18HCPC          * save null hcp code
            GOTO      MPV17100
          ENDIF
.
          PACK      KEY20,PV100801,SP70
          CALL      VPRV0000                     * validate Provider Number
          IF        EXIT = 1
            MOVE      "PV1.8: Referring Doctor not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ELSE
            MOVE      PMHCHCPC,PV18HCPC          * save hcp code
          ENDIF
.
.         PV1.9     Consulting Doctor (XCN)
.
MPV17100  MOVE      SP70,PV19HCPC
          STRIP     PV100901
          MOVELPTR  PV100901,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      MPV17200 IF EQUAL
.
          MATCH     BLANKSTR,PV100901            * field null ?
          IF        @EQUAL
            MOVE      BLANKSTR,PV19HCPC          * save null hcp code
            GOTO      MPV17200
          ENDIF
.
          PACK      KEY20,PV100901,SP70
          CALL      VPRV0000                     * validate Provider Number
          IF        EXIT = 1
            MOVE      "PV1.9: Consulting Doctor not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ELSE
            MOVE      PMHCHCPC,PV19HCPC          * save hcp code
          ENDIF
.
.         PV1.19    Visit Number (CX)
.
MPV17200  STRIP     PV101901
          MOVELPTR  PV101901,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          IF        @EQUAL
            MOVE      "PV1.19: Visit Number not populated",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          MATCH     BLANKSTR,PV101901            * field null ?
          IF        @EQUAL
            MOVE      "PV1.19: Visit Number is null",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
MPV17300  STRIP     PV102001
          MOVELPTR  PV102001,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      MPV17400 IF EQUAL
.
          MATCH     BLANKSTR,PV102001            * field null ?
          GOTO      MPV17400 IF EQUAL
.
          PACK      KEY5,ANSC,ANSL,PV102001,SP70
          CALL      RDCODE1                      * field valid ?
          IF        OVRCD = 1
            MOVE      "PV1.20: Financial Class code Cat CL not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      MPV17400
          ENDIF
.
.0890602  MATCH     ANSI,PTCOACTV
.0890602  IF        @EQUAL
.0890602    MOVE      "PV1.20: Financial Class code Cat CL not active",ERRORDSC
.0890602    MOVE      "103",ERRORNUM
.0890602    CALL      EROR0000
.0890602    GOTO      MPV17400
.0890602  ENDIF
.
MPV17400
.
MPV19900
.
MPV19999  RETURN
+
.*****************************************************************************
.*                                 MALT0000                                  *
.*    Check if a MOSAIQ visit number record already exists on ibaalvaf       *
.* Requires: PADMAVIS - MOSAIQ Visit ID                                      *
.*****************************************************************************
MALT0000  MATCH     SP20,PADMAVIS                  * blank alternate visit no. ?
          GOTO      MALT9000 IF EQUAL              * yes - finished
.
          PACK      KEY28,PADMAVIS,SP30
          CALL      RSIBALV2                       * position on alt. visit no.
MALT1000  CALL      RKIBALV2                       * read next record
          BRANCH    OVRCD,MALT9000                 * eof - finished
.
          MATCH     PADMAVIS,IBAVAVIS              * same alt. visit no. ?
          GOTO      MALT9000 IF NOT EQUAL          * no
.
          MATCH     " M",IBAVTYPE                  * MOSAIQ type record ?
          IF        @EQUAL
            GOTO      MALT9500 IF EQUAL            * yes
          ELSE
            GOTO      MALT1000 IF EQUAL            * no
          ENDIF
.
MALT9000  MOVE      ZERO,EXIT                      * does not exist on ibaalvaf
          GOTO      MALT9999
.
MALT9500  MOVE      ONE,EXIT                       * exists on ibaalvaf
MALT9999  RETURN
+
.*****************************************************************************
.*                              MVISA000                                     *
.*        Create an alternate visit number record in ibaalvaf (MOSAIQ)       *
.* Requires: PADMAVIS - Alternate Visit Number (left justified)              *
.*           AADMNO   - webPAS Visit Number (right justified)                *
.*****************************************************************************
MVISA000  MATCH     SP20,PADMAVIS                * blank alternate visit no. ?
          GOTO      MVISA950 IF EQUAL            * yes - finished
.
          MOVE      AADMNO,KEY8
          CALL      RAIBALV1                     * webPAS visit already on file?
          IF        OVRCD = 1
            MOVE      AADMNO,IBAVVISN            * load field data
            MOVE      PADMAVIS,IBAVAVIS
            MOVE      " M",IBAVTYPE
            MOVE      SP20,IBAVSPAR
            CALL      WRIBALV1                   * write alt. visit no. record
            GOTO      MVISA900
          ELSE
            GOTO      MVISA950
          ENDIF
.
MVISA900  MOVE      ZERO,EXIT                    * alt. visit record written
          GOTO      MVISA999
.
MVISA950  MOVE      ONE,EXIT                     * alt. visit record not written
MVISA999  RETURN
+
.*****************************************************************************
.*                           GDCOD000                                        *
.*   Get default patcodes value based on indictor value = 'M' (MOSAIQ)       *
.* Requires: DEFTCATG - Category                                             *
.*           DEFTINDC - Indicator                                            *
.* Returns : DEFTCODE - Default Code                                         *
.*           EXIT - 0 = Valid default / 1 = No default                       *
.*****************************************************************************
GDCOD000  MOVE      SP3,DEFTCODE                 * initialise default code
.
          MATCH     "CV",DEFTCATG
          GOTO      GDCOD050 IF EQUAL            * always default this category
.
          MATCH     "CG",DEFTCATG
          GOTO      GDCOD050 IF EQUAL            * always default this category
.
          MATCH     "1",PTCNDCSM
          GOTO      GDCOD950 IF NOT EQUAL        * using default code values?
.
GDCOD050  PACK      KEY5,DEFTCATG,SP5
          CALL      RDSCODE1                     * Position on Category
GDCOD100  CALL      RDKCODE1                     * read next record
          BRANCH    OVRCD,GDCOD950               * end of file
.
          MATCH     DEFTCATG,TCODE               * same category still ?
          GOTO      GDCOD950 IF NOT EQUAL        * no
.
          LOAD      D1,DEFTINDC,TCINDC1,TCINDC2,TCINDC3,TCINDC4,TCINDC5:
                                TCINDC6,TCINDC7,TCINDC8,TCINDC9,TCINDC10:
                                TCINDC11,TCINDC12,TCINDC13,TCINDC14,TCINDC15:
                                TCINDC16,TCINDC17,TCINDC18,TCINDC19,TCINDC20:
                                TCINDC21,TCINDC22,TCINDC23,TCINDC24,TCINDC25:
                                TCINDC26,TCINDC27,TCINDC28,TCINDC29,TCINDC30:
                                TCINDC31,TCINDC32,TCINDC33,TCINDC34,TCINDC35:
                                TCINDC36,TCINDC37,TCINDC38,TCINDC39,TCINDC40:
                                TCINDC41
.
          MATCH     "CG",DEFTCATG
          IF        @EQUAL
            MATCH     ANSA,TCINDC3               * allied health department ?
            GOTO      GDCOD100 IF NOT EQUAL      * no - check next record
            MATCH     "1",PTCNAILP
            IF        @EQUAL
              MATCH     AIL00501,D1              * default AIL.5 for MOSAIQ ?
            ELSE
              MATCH     ANSM,D1                  * default "M" for MOSAIQ ?
            ENDIF
            GOTO      GDCOD100 IF NOT EQUAL      * no - check next record
          ELSE
            MATCH     ANSM,D1                    * default for MOSAIQ ?
            GOTO      GDCOD100 IF NOT EQUAL      * no - check next record
          ENDIF
.
          MATCH     ANSI,PTCOACTV                * inactive ?
          GOTO      GDCOD100 IF EQUAL            * yes - check next record
.
          MOVE      ACODE,DEFTCODE               * use default code
.
GDCOD900  MOVE      ZERO,EXIT                    * valid default code
          GOTO      GDCOD999
.
GDCOD950  MOVE      ONE,EXIT                     * no default code
GDCOD999  RETURN
+
.*****************************************************************************
.*                            VPV20000             Called by: PROC0000       *
.*      Validate that the mandatory PV2 fields are populated or null.        *
.*      Used for O/P A03 and A04 messages.                                   *
.*****************************************************************************
.
.         No mandatory fields required for ADT^A08.  Further
.         validation performed in VMES0000 for this message.
.
VPV20000  COMPARE   TEN3,MESSGNUM                * ADT^A08 (Admission Update) ?
          IF        @EQUAL
            MATCH    ANSO,PV100201
            IF       @EQUAL
              GOTO      VPV23000                 * OUT = use SRM validation
            ELSE
              GOTO      VPV29999                 * INP = no mandatory validation
            ENDIF
          ENDIF
.
          COMPARE   TEN1,MESSGNUM                * ADT^A05 (Pre-admission) ?
          GOTO      VPV22000 IF EQUAL            * yes
.
          COMPARE   TEN6,MESSGNUM
          GOTO      VPV23000 IF EQUAL            * SRM^S0x (Appointment Message)
.
          COMPARE   NINE,MESSGNUM                * A03 message ?
          GOTO      VPV21000 IF NOT EQUAL        * no
.
          STRIP     PV200701
          MOVELPTR  PV200701,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "PV2.7: Client Present Status not populated",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV21000
          ENDIF
.
          MATCH     BLANKSTR,PV200701            * field null ?
          IF        @EQUAL
            MOVE      "PV2.7: Client Present Status is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV21000
          ENDIF
.
.         Make sure the code is valid for Cat zK
.
          PACK      KEY5,CATzK,PV200701,SP5
          CALL      RDCODE1                      * field valid ?
          IF        OVRCD = 1
            MOVE      "PV2.7: Client Present Status not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VPV21000
          ENDIF
.
VPV21000  STRIP     PV200801
          MOVELPTR  PV200801,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "PV2.8: Booking Date/Time not populated",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV29999
          ENDIF
.
          MATCH     BLANKSTR,PV200801            * field null ?
          IF        @EQUAL
            MOVE      "PV2.8: Booking Date/Time is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPV29999
          ENDIF
.
          MOVE      PV200801,DIM14
          MOVE      "PV2.8 ",FIELDID
          MOVE      TWO,DATFLAG1
          MOVE      ONE,DATFLAG2
          CALL      VDTM0000                     * date/time validation
          GOTO      VPV29999
.
VPV22000  CALL      APV20000                     * ADT^A05 or ADT^A08
          GOTO      VPV29999
.
VPV23000  CALL      SPV20000                     * SRM^S0x
          GOTO      VPV29999
.
VPV29999  RETURN
+
.*****************************************************************************
.*                           APV20000           Called by: VPV20000          *
.*              Validate the PV2 fields for ADT messages                     *
.*****************************************************************************
.
APV20000  STRIP     PV200801
          MOVELPTR  PV200801,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "PV2.8: Expected Admit Date/Time not populated",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      APV29999
          ENDIF
.
          MATCH     BLANKSTR,PV200801            * field null ?
          IF        @EQUAL
            MOVE      "PV2.8: Expected Admit Date/Time is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      APV29999
          ENDIF
.
          MOVE      PV200801,DIM14
          MOVE      "PV2.8 ",FIELDID
          MOVE      ZERO,DATFLAG1
          MOVE      ONE,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
APV29999  RETURN
+
.*****************************************************************************
.*                           SPV20000           Called by: VPV20000          *
.*              Validate the PV2 fields for SRM messages                     *
.*****************************************************************************
SPV20000  STRIP     PV200801
          MOVELPTR  PV200801,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "PV2.8: Booking Date/Time not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      SPV29999
          ENDIF
.
          MATCH     BLANKSTR,PV200801            * field null ?
          IF        @EQUAL
            MOVE      "PV2.8: Booking Date/Time is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      SPV29999
          ENDIF
.
          MOVE      PV200801,DIM14
          MOVE      "PV2.8 ",FIELDID
          MOVE      ZERO,DATFLAG1
          MOVE      ONE,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
          UNPACK    PV200801,DIM8,HOURTM,MINTIME
          PACK      DIM5,HOURTM,COLON,MINTIME
.
          MATCH     DIM8,OBADATE                 * same visit date ?
          IF        !@EQUAL
            MOVE      "PV2.8: Visit Date does not match",ERRORDSC
            MOVE      "204",ERRORNUM
            CALL      EROR0000
            GOTO      SPV19999
          ENDIF
.
          MATCH     DIM5,OBATIME                 * same time ?
          IF        !@EQUAL
            MOVE      "PV2.8: Visit Time does not match",ERRORDSC
            MOVE      "204",ERRORNUM
            CALL      EROR0000
            GOTO      SPV19999
          ENDIF
.
SPV29999  RETURN
+
.*****************************************************************************
.*                            VMRG0000             Called by: PROC0000       *
.*      Validate that the mandatory MRG fields are populated or null.        *
.*****************************************************************************
.
.         Prior Patient ID - Component 1
.
VMRG0000  SQUEEZE   MRG00101
          MOVELPTR  MRG00101,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "MRG.1: Prior Patient ID not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VMRG9999
          ENDIF
.
          IF        FORM3 > 8
            MOVE      "MRG.1: Prior Patient ID incorrect length",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VMRG9999
          ENDIF
.
.         Right justify the U/R then validate that the patient exists on file
.
          MOVE      MRG00101,KEY8
          RJUSTIFY  KEY8
          CALL      RDAMAST1                     * is patient on file ?
          IF        OVRCD = 1
            MOVE      "MRG.1: Prior Patient ID not on file",ERRORDSC
            MOVE      "204",ERRORNUM
            CALL      EROR0000
            GOTO      VMRG9999
          ENDIF
          MOVE      KEY8,OURNO                   * for CHANGEUR
          MOVE      KEY8,OLDURNO                 * for CHANGEUR
.         
.         Prior Patient ID - Component 5
.
VMRG1000  STRIP     MRG00105
          MOVELPTR  MRG00105,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VMRG9999                   * no - error
          ENDIF       
.             
          MATCH     "MR",MRG00105                * Medical Record identifier ?
          GOTO      VMRG9999 IF EQUAL            * yes
.           
          MOVE      "MRG.1: Patient ID type not valid",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
.
VMRG9999  RETURN
+
.*****************************************************************************
.*                            VFT10000             Called by: PROC0000       *
.*      Validate that the mandatory FT1 fields are populated or null and     *
.*      load the data into a temporary table so that we can accommodate more *
.*      than 1 FT1 segment/message.                                          *
.*****************************************************************************
.
.         Set ID
.         This field was previously ignored and not even validated by webPAS,
.         as only one FT1 was ever being processed.  Now we need to cater for
.         potentially multiple FT1 segments, so if we don't have a numeric
.         value, then simply increment the count for each FT1 segment.
.
VFT10000  MOVE      FT1SEGMT,RTMPSEGI            * load segment id
          ASSIGN    FT1COUNT,RTMPSEGC            * save previous count
          ADD       ONE,FT1COUNT                 * increment FT1 segment count
          MOVE      ZERO,FT1FOUND                * set FT1 found flag
.
.         Set ID (FT1.1)
.
          SQUEEZE   FT100101
          MOVELPTR  FT100101,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      FT1COUNT,FT100101
            GOTO      VFT10100
          ENDIF
.
          COMPARE   FORM3,THREE
          IF        @LESS
            MOVE      "FT1.1: Set ID has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VFT10200
          ENDIF
.
          MATCH     BLANKSTR,FT100101            * field null ?
          IF        @EQUAL
            ADD       ONE,FT1COUNT               * no - increment count
            MOVE      FT1COUNT,FT100101
            GOTO      VFT10100
          ENDIF
.
          TYPE      FT100101                     * field numeric ?
          IF        !@EQUAL
            MOVE      "FT1.1: Set ID is not numeric",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VFT10200
          ENDIF
.
VFT10100  RJUSTIFY  FT100101
          MOVE      FT100101,FORM3
.
.         Check the FT1 count is the same as the Set ID
.
          COMPARE   FORM3,FT1COUNT
          IF        !@EQUAL
            MOVE      "FT1.1: Set ID not in sequence",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VFT10200
          ENDIF
.
.         Check the new Set ID is one more than the previous Set ID
.
          SUB       ONE,FORM3
          COMPARE   FORM3,RTMPSEGC
          IF        !@EQUAL
            MOVE      "FT1.1: Set ID not in sequence",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VFT10200
          ENDIF
.
          MOVE      FT100101,RTMPSEGC            * load FT1 segment count
          MOVE      ONE,RTMPFLDN                 * load field number
          MOVE      ONE,RTMPFCNT                 * load field number count
          MOVE      ONE,RTMPCMPN                 * load component number
          PACK      RTMPVRBL,FT100101,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Transaction Type (FT1.6)
.         This field validation needs to be done first, as we need to determine
.         if CMBS or Misc. charge for other field validations to follow
.
VFT10200  STRIP     FT100601
          MOVELPTR  FT100601,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "FT1.6: Transaction Type not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VFT10300
          ENDIF
.
.         Check that the type is valid for Misc. charge or CMBS Item
.         or invoice on hold change
.
          MATCH     "ID",FT100601                * invoice on hold ?
          GOTO      VFT10250 IF EQUAL            * yes - valid
.
          MATCH     "RD",FT100601                * remove invoice on hold ?
          GOTO      VFT10250 IF EQUAL            * yes - valid
.
          MATCH     "CG",FT100601                * misc. charge add ?
          GOTO      VFT10250 IF EQUAL            * yes - valid
.
          MATCH     "CD",FT100601                * misc. charge delete ?
          GOTO      VFT10250 IF EQUAL            * yes - valid
.
          MATCH     "MB",FT100601                * CMBS item add ?
          IF        @EQUAL
            MOVE      ZERO,CMBFOUND              * yes - set CMBS found flag
            GOTO      VFT10250
          ENDIF
.
          MATCH     "MD",FT100601                * CMBS item delete ?
          IF        @EQUAL
            MOVE      ZERO,CMBFOUND              * yes - set CMBS found flag
            GOTO      VFT10250                   * yes - valid 0846231
          ENDIF
.
          MOVE      "FT1.6: Transaction Type not valid",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
          GOTO      VFT10300 IF EQUAL
.
VFT10250  MOVE      FT100101,RTMPSEGC            * load FT1 segment count
          MOVE      SIX,RTMPFLDN                 * load field number
          MOVE      ONE,RTMPFCNT                 * load field number count
          MOVE      ONE,RTMPCMPN                 * load component number
          PACK      RTMPVRBL,FT100601,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Transaction Batch ID (webPAS Theatre Unique ID - FT1.3)
.
VFT10300  STRIP     FT100301
          MOVELPTR  FT100301,FORM3               * field populated ?
          IF        FORM3 > 0
            GOTO      VFT10350                   * yes, so validate
          ELSE
            MATCH     "MB",FT100601              * CMBS item add ?
            GOTO      VFT10400 IF NOT EQUAL      * only mandatory for CMBS
.
            MOVE      "FT1.3: Transaction Batch ID not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VFT10400
          ENDIF
.
          MATCH     BLANKSTR,FT100301            * field null ?
          IF        @EQUAL
            MOVE      "FT1.3: Transaction Batch ID is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VFT10400
          ENDIF
.
VFT10350  COMPARE   ONE,CTHETR
          GOTO      VFT10380 IF NOT EQUAL        * not using webPAS Theatre
.
.0846231  MATCH     "CD",FT100601                * misc. charge delete ?
.0846231  GOTO      VFT10400 IF EQUAL            * no need to validate
.
          TYPE      FT100301                     * field numeric ?
          IF        !@EQUAL
            MOVE      "FT1.3: Transaction Batch ID not numeric",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VFT10400
          ENDIF
.
.         Check that the Theatre Unique ID is valid
.
          PACK      KEY10,FT100301,SP10
          RJUSTIFY  KEY10
          CALL      RDOPDEA3
          IF        OVRCD = 1
            MOVE      "FT1.3: Transaction Batch ID is not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VFT10400
          ENDIF
.
.         Check that the visit number correlates to the Theatre Unique ID
.
          MATCH     OPDAADMN,PVIBILL
          IF        !@EQUAL
            MOVE      "FT1.3: Transaction Batch ID is not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VFT10400
          ENDIF
.
.>>>>>>>  GENERAL: Document all new errors
.
VFT10380  MOVE      FT100101,RTMPSEGC            * load FT1 segment count
          MOVE      THREE,RTMPFLDN               * load field number
          MOVE      ONE,RTMPFCNT                 * load field number count
          MOVE      ONE,RTMPCMPN                 * load component number
          PACK      RTMPVRBL,FT100301,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Transaction Date (FT1.4)
.
VFT10400  MATCH     "ID",FT100601                * invoice on hold ?
          GOTO      VFT10500 IF EQUAL            * no need to validate
.
          MATCH     "RD",FT100601                * remove invoice on hold ?
          GOTO      VFT10500 IF EQUAL            * no need to validate
.
          STRIP     FT100401
          MOVELPTR  FT100401,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "FT1.4: Transaction Date not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VFT10500
          ENDIF
.
          MOVE      FT100401,DIM14
          MOVE      "FT1.4 ",FIELDID
          MOVE      ONE,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
          CALL      VFT14000                     * validate transaction date
          BRANCH    EXIT,VFT10500
.
          MOVE      FT100101,RTMPSEGC            * load FT1 segment count
          MOVE      FOUR,RTMPFLDN                * load field number
          MOVE      ONE,RTMPFCNT                 * load field number count
          MOVE      ONE,RTMPCMPN                 * load component number
          PACK      RTMPVRBL,FT100401,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Transaction Code (FT1.7)
.
VFT10500  STRIP     FT100701
          MOVELPTR  FT100701,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "FT1.7: Transaction Code not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VFT10600
          ENDIF
.
          MATCH     BLANKSTR,FT100701            * null string ?
          IF        @EQUAL
            MOVE      "FT1.7: Transaction Code is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VFT10600
          ENDIF
.
.         Make sure the transaction code is not more than 9 characters
.
          IF        FORM3 > 9
            MOVE      "FT1.7: Transaction code has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VFT10600
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.
          SQUEEZE   FT100703
          MOVELPTR  FT100703,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "FT1.7: Transaction Code coding system not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ELSE
            MATCH     BLANKSTR,FT100703          * null field ?
            IF        @EQUAL
              MOVE      "FT1.7: Transaction Code coding system is mandatory",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
.         Validate code depending on transaction type in FT1.6
.
          MATCH     "ID",FT100601                * invoice on hold ?
          IF        @EQUAL
            CALL      VIOH0000                   * yes - validate InvoiceOnHold
            GOTO      VFT10550
          ENDIF
          MATCH     "RD",FT100601                * remove invoice on hold ?
          IF        @EQUAL
            CALL      VIOH0000                   * yes - validate InvoiceOnHold
            GOTO      VFT10550
          ENDIF
.
          MATCH     "MB",FT100601                * CMBS item add ?
          IF        @EQUAL
            CALL      VITM0000                   * yes - validate CMBS item
          ELSE
            MATCH     "MD",FT100601              * CMBS item delete ?
            IF        @EQUAL
              CALL      VITM0000                 * yes - validate CMBS item
            ELSE
              CALL      GMIS0000                 * no-validate misc. charge code
            ENDIF
          ENDIF
VFT10550  BRANCH    EXIT,VFT10600                * invalid code
.
.         Valid code, so write temp file record
.
          MOVE      FT100101,RTMPSEGC            * load FT1 segment count
          MOVE      SEVEN,RTMPFLDN               * load field number
          MOVE      ONE,RTMPFCNT                 * load field number count
          MOVE      ONE,RTMPCMPN                 * load component number
          PACK      RTMPVRBL,FT100701,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     FT100702                     * patipenf - On Hold ReasonDesc
          MOVE      TWO,RTMPCMPN                 * load component number
          PACK      RTMPVRBL,FT100702,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     FT100703                     * nzpribil - category FI code
          MOVE      THREE,RTMPCMPN               * load component number
          PACK      RTMPVRBL,FT100703,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Transaction Description (FT1.8)
.         Depending on parameter setting, load description
.         from the sent values, or the patmchgf or patitemn values
.
VFT10600  MATCH     "ID",FT100601                * invoice on hold ?
          GOTO      VFT19999 IF EQUAL            * yes - finished validation
.
          MATCH     "RD",FT100601                * remove invoice on hold ?
          GOTO      VFT19999 IF EQUAL            * yes - finished validation
.
          MATCH     "0",PTCNH7DA                 * using sent description ?
          GOTO      VFT10650 IF EQUAL            * no - ignore check
.
          MATCH     "3",PTCNH7DA                 * use sent amt/desc except 0 ?
          IF        @EQUAL
            MOVE      FT101201,FORM12P2
            IF        FORM12P2 = 0
              GOTO      VFT10650                 * zero - use desc from webPAS
            ENDIF
          ENDIF
.
          STRIP     FT100801
          MOVELPTR  FT100801,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "FT1.8: Transaction Description not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VFT10700
          ENDIF
.
VFT10650  MOVE      FT100101,RTMPSEGC            * load FT1 segment count
          MOVE      EIGHT,RTMPFLDN               * load field number
          MOVE      ONE,RTMPFCNT                 * load field number count
          MOVE      ONE,RTMPCMPN                 * load component number
.
          MATCH     "3",PTCNH7DA                 * use sent amt/desc except 0 ?
          IF        @EQUAL
            MOVE      FT101201,FORM12P2          * if zero use webpas desc
            IF        FORM12P2 = 0
              MATCH     "MB",FT100601            * CMBS item add ?
              IF        @EQUAL
                PACK      RTMPVRBL,IDESC,SP100,SP100,SP100,SP100,SP100
              ELSE
                MATCH     "MD",FT100601          * CMBS item delete ?
                IF        @EQUAL
                  PACK      RTMPVRBL,IDESC,SP100,SP100,SP100,SP100,SP100
                ELSE
                  PACK      RTMPVRBL,MDESC,SP100,SP100,SP100,SP100,SP100
                ENDIF
              ENDIF
            ELSE
              PACK      RTMPVRBL,FT100801,SP100,SP100,SP100,SP100,SP100
            ENDIF
            GOTO      VFT10670
          ENDIF
.
          MATCH     "0",PTCNH7DA                 * using sent description ?
          IF        @EQUAL
            MATCH     "MB",FT100601              * no - CMBS item add ?
            IF        @EQUAL
              PACK      RTMPVRBL,IDESC,SP100,SP100,SP100,SP100,SP100
            ELSE
              MATCH     "MD",FT100601            * CMBS item delete ?
              IF        @EQUAL
                PACK      RTMPVRBL,IDESC,SP100,SP100,SP100,SP100,SP100
              ELSE
                PACK      RTMPVRBL,MDESC,SP100,SP100,SP100,SP100,SP100
              ENDIF
            ENDIF
          ELSE
            PACK      RTMPVRBL,FT100801,SP100,SP100,SP100,SP100,SP100
          ENDIF
.
VFT10670  CALL      WTMP0000
.
.         Transaction Quantity (FT1.10)
.
VFT10700  SQUEEZE   FT101001
          MOVELPTR  FT101001,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "FT1.10: Transaction Quantity not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VFT10800
          ENDIF
.
.         Check that the field has no more than 5 digits
.
          IF        FORM3 > 5
            MOVE      "FT1.10: Transaction Quantity too large",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VFT10800
          ENDIF
.
.         Check that the field is numeric
.
          TYPE      FT101001
          IF        !@EQUAL
            MOVE      "FT1.10: Transaction Quantity not numeric",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VFT10800
          ENDIF
.
.         Check that the field is greater than zero
.
          MOVE      FT101001,FORM5
          IF        FORM5 < 1
            MOVE      "FT1.10: Transaction Quantity cannot be less than one",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VFT10800
          ENDIF
.
.         Check that the field has no decimal place
.
          SCAN      DOT,FT101001
          IF        @EQUAL
            MOVE      "FT1.10: Transaction Quantity not an integer",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            RESET     FT101001
            GOTO      VFT10800
          ENDIF
          RESET     FT101001
.
          MOVE      FT100101,RTMPSEGC            * load FT1 segment count
          MOVE      TEN,RTMPFLDN                 * load field number
          MOVE      ONE,RTMPFCNT                 * load field number count
          MOVE      ONE,RTMPCMPN                 * load component number
          PACK      RTMPVRBL,FT101001,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Transaction Amount (FT1.12)
.
VFT10800  MATCH     "0",PTCNH7DA                 * using sent amount ?
          GOTO      VFT10850 IF EQUAL            * no - ignore check
.
          SQUEEZE   FT101201
          MOVELPTR  FT101201,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "FT1.12: Transaction Amount not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VFT10900
          ENDIF
.
.         Check that the field is numeric
.
          TYPE      FT101201
          IF        !@EQUAL
            MOVE      "FT1.12: Transaction Amount not numeric",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VFT10900
          ENDIF
.
.         Check that the field is not zero
.
          MOVE      FT101201,FORM12P2
          IF        FORM12P2 = 0
            MATCH     "2",PTCNH7DA                * allow zero in sent amount ?
            IF        @EQUAL
              PACK      KEY5,ANSC,ANSL,ACLAIM,SP70
              CALL      RDCODE1
              IF        OVRCD = 0
                MATCH     "R",PTCDASC1            * claim type allows zero ?
                GOTO      VFT10850 IF EQUAL       * yes
              ENDIF
            ENDIF
.
            MATCH     "3",PTCNH7DA               * allow zero in sent amount ?
            GOTO      VFT10850 IF EQUAL          * yes
.
            MOVE      "FT1.12: Transaction Amount is zero",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VFT10900
          ENDIF
.
.         Check that the field is not less than zero (nzprivate)
.
          IF        NZPRIBIL = 1
            MOVE      FT101201,FORM12P2
            IF        FORM12P2 < 0
              MOVE      "FT1.12: Transaction Amount is less than zero",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VFT10900
            ENDIF
          ENDIF
.
.         Check that the field has no more than 12 digits to the left
.         of the decimal place
.
          SCAN      DOT,FT101201
          IF        @EQUAL
            MOVEFPTR  FT101201,FORM3
            IF        FORM3 > 13
              MOVE      "FT1.12: Transaction Amount too large",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              RESET     FT101201
              GOTO      VFT10900
            ENDIF
            RESET     FT101201
            MOVELPTR  FT101201,FORM3
            IF        FORM3 > 15
              MOVE      "FT1.12: Transaction Amount too large",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VFT10900
            ENDIF
          ELSE
            RESET     FT101201
            MOVELPTR  FT101201,FORM3
            IF        FORM3 > 12
              MOVE      "FT1.12: Transaction Amount too large",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VFT10900
            ENDIF
          ENDIF
.
.         We need to load three amounts (total amount, patient portion and
.         rebate portion) as separate temp file records (non-CMBS items only)
.
VFT10850  MOVE      FT100101,RTMPSEGC            * load FT1 segment count
          MOVE      TEN2,RTMPFLDN                * load field number
          MOVE      ONE,RTMPCMPN                 * load component number
.
.         CMBS Items don't ever use the sent amount
.
          MATCH     "MB",FT100601                * CMBS item add ?
          GOTO      VFT10870 IF EQUAL            * yes
.
.         We have a Miscellaneous charge, so check if we are using
.         the sent amount or the amount on the patmchgf record
.
          MATCH     "3",PTCNH7DA                 * use sent amt/desc except 0 ?
          IF        @EQUAL
            MOVE      FT101201,FORM12P2
            IF        FORM12P2 = 0
              GOTO      VFT10870                 * zero - use amount from webPAS
            ENDIF
          ENDIF
.
          MATCH     "0",PTCNH7DA                 * using sent amount ?
          GOTO      VFT10880 IF NOT EQUAL        * yes
.
.         Using the amount from webPAS
.
VFT10870  MOVE      ONE,RTMPFCNT                 * no - load field number count
          MATCH     "MB",FT100601                * CMBS item add ?
          IF        @EQUAL
            MOVE      QIAMT,FORM12P2             * yes
            UNPACK    FT100401,CEFFDATE
            REP       " 0",CEFFDATE
            MOVE      SP70,DDATE
            IF        ASTAT=3
              MOVE      AADMNO,KEY8
              CALL      RDDSCH1
            ENDIF
            CALL      GETTHR00                   * get theatre fee
            MOVE      OVRCD,SAVOVRCD             * save overcond value
            IF        SAVOVRCD=0
              MOVE      TFPAT1,FORM12P2          * patient portion of charge
              ADD       TFHF1,FORM12P2           * rebate portion of charge
            ENDIF
          ELSE
            ASSIGN    ((MPATPOR+MHFPOR)*FORM5),FORM12P2   * no - load total amt
          ENDIF
          PACK      RTMPVRBL,FORM12P2,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          MOVE      TWO,RTMPFCNT                 * load field number count
          MATCH     "MB",FT100601                * CMBS item add ?
          IF        @EQUAL
            IF        SAVOVRCD=0
              MOVE      TFPAT1,FORM12P2          * patient portion of charge
            ELSE
              MOVE      QIAMT,FORM12P2
            ENDIF
          ELSE
            MOVE      MPATPOR,FORM12P2           * no - load patient portion
          ENDIF
          PACK      RTMPVRBL,FORM12P2,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          MOVE      THREE,RTMPFCNT               * load field number count
          MATCH     "MB",FT100601                * CMBS item add ?
          IF        @EQUAL
            IF        SAVOVRCD=0
              MOVE      TFHF1,FORM12P2           * rebate portion of charge
            ELSE
              MOVE      ZERO,FORM12P2
            ENDIF
          ELSE
            MOVE      MHFPOR,FORM12P2            * no - load rebate portion
          ENDIF
          PACK      RTMPVRBL,FORM12P2,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
          GOTO      VFT10900
.
.         Using the sent amount
.
VFT10880  MOVE      ONE,RTMPFCNT                 * load field number count
          PACK      RTMPVRBL,FT101201,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          MOVE      TWO,RTMPFCNT                 * load field number count
          PACK      RTMPVRBL,FT101201,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          MOVE      THREE,RTMPFCNT               * load field number count
          PACK      RTMPVRBL,ZERO,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Filler Order Number (FT1.23)
.
VFT10900  STRIP     FT102301
          MOVELPTR  FT102301,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "FT1.23: Filler Order Number not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VFT11000
          ENDIF
.
          IF        FORM3 > 12
            MOVE      "FT1.23: Filler Order Number too large",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VFT11000
          ENDIF
.
          MOVE      FT100101,RTMPSEGC            * load FT1 segment count
          MOVE      TWENTY3,RTMPFLDN             * load field number
          MOVE      ONE,RTMPFCNT                 * load field number count
          MOVE      ONE,RTMPCMPN                 * load component number
          PACK      RTMPVRBL,FT102301,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Procedure Code (FT1.25)
.
VFT11000  MATCH     "MB",FT100601                * CMBS item add ?
          GOTO      VFT11100 IF EQUAL            * yes - finished
.
          STRIP     FT102501
          MOVELPTR  FT102501,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VFT11100                   * no - finished
          ENDIF
.
          MATCH     BLANKSTR,FT102501            * null string ?
          GOTO      VFT11100 IF EQUAL            * yes - finished
.
.         Make sure the procedure code is not more than 9 characters
.
          IF        FORM3 > 9
            MOVE      "FT1.25: Procedure Code has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VFT11100
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.
          SQUEEZE   FT102503
          MOVELPTR  FT102503,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "FT1.25: Procedure Code coding system not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ELSE
            MATCH     BLANKSTR,FT102503          * null field ?
            IF        @EQUAL
              MOVE      "FT1.25: Procedure Code coding system is mandatory",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
          MOVE      FT100101,RTMPSEGC            * load FT1 segment count
          MOVE      TWENTY5,RTMPFLDN             * load field number
          MOVE      ONE,RTMPFCNT                 * load field number count
          MOVE      ONE,RTMPCMPN                 * load component number
          PACK      RTMPVRBL,FT102501,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Procedure Code Modifier (FT1.26)
.
VFT11100  MATCH     "MB",FT100601                * CMBS item add ?
          GOTO      VFT19999 IF EQUAL            * yes - finished
.
          BRANCH    NZPRIBIL,VFT11200            * don't validate component 1
.
          STRIP     FT102601
          MOVELPTR  FT102601,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VFT19999                   * no - finished
          ENDIF
.
          MATCH     BLANKSTR,FT102601            * null string ?
          GOTO      VFT19999 IF EQUAL            * yes - finished
.
.         Make sure the procedure code modifier is not more than 1 character
.
          IF        FORM3 > 1
            MOVE      "FT1.26: Procedure Code Modifier has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VFT19999
          ENDIF
.
.         Check that the field is numeric
.
          TYPE      FT102601
          IF        !@EQUAL
            MOVE      "FT1.26: Procedure Code Modifier not numeric",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VFT19999
          ENDIF
.
.         Check that the field has a value of 0, 1 or 2
.
          MOVE      FT102601,FORM1
          IF        FORM1 > 2
            MOVE      "FT1.26: Procedure Code Modifier not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VFT19999
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.
VFT11200  SQUEEZE   FT102603
          MOVELPTR  FT102603,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "FT1.26: Procedure Code Modifier coding system not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ELSE
            MATCH     BLANKSTR,FT102603          * null field ?
            IF        @EQUAL
              MOVE      "FT1.26: Procedure Code Modifier coding system is mandatory",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
          MOVE      FT100101,RTMPSEGC            * load FT1 segment count
          MOVE      TWENTY6,RTMPFLDN             * load field number
          MOVE      ONE,RTMPFCNT                 * load field number count
          MOVE      ONE,RTMPCMPN                 * load component number
          PACK      RTMPVRBL,FT102601,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
VFT19999  RETURN
+
.*****************************************************************************
.*                         VFT14000                Called by: VFT10000       *
.*          Validate Transaction Date (FT1.4)                                *
.*****************************************************************************
VFT14000  MATCH     SP8,SAVEDATE                 * blank saved transaction date?
          GOTO      VFT14900 IF EQUAL            * yes - finished
.
          BRANCH    PVITYPE,VFT14100:            * Emergency
                            VFT14200:            * O/P
                            VFT14300             * Inpatient
.
.         Emergency charge, so make sure that the transaction date is on
.         or after the arrival date
.
VFT14100  MATCH     EMVIDATE,SAVEDATE
          IF        @LESS
            MOVE      "FT1.4: Transaction Date is less than arrival date",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VFT14950
          ENDIF
.
          MATCH     SP8,EMVIDDAT                 * blank discharge date ?
          GOTO      VFT14900 IF EQUAL            * yes
.
.         Check that the transaction date is not greater than the discharge
.         date
.
          MATCH     SAVEDATE,EMVIDDAT
          IF        @LESS
            MOVE      "FT1.4: Transaction Date is greater than discharge date",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VFT14950
          ENDIF
          GOTO      VFT14900
.
.         O/P charge, so make sure that the transaction date is on
.         the booking date
.
VFT14200  MATCH     OBADATE,SAVEDATE             * transaction on booking date ?
          IF        !@EQUAL
            MOVE      "FT1.4: Transaction Date is different to booking date",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VFT14950
          ENDIF
          GOTO      VFT14900
.
.         I/P charge, so make sure that the transaction date is on or after
.         the admission date
.
VFT14300  MATCH     ADATE,SAVEDATE
          IF        @LESS
            MOVE      "FT1.4: Transaction Date is less than admission date",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VFT14950
          ENDIF
.
.         Check if the patient is discharged.  If not, then we have already
.         validated that the transaction date is not in the future, so
.         the transaction date must be valid.
.
          MOVE      PVIBILL,KEY8
          CALL      RDDSCH1                      * patient discharged ?
          BRANCH    OVRCD,VFT14900               * no - finished
.
.         Check that the transaction date is not greater than the discharge
.         date
.
          MATCH     SAVEDATE,DDATE
          IF        @LESS
            MOVE      "FT1.4: Transaction Date is greater than discharge date",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VFT14950
          ENDIF
.
VFT14900  MOVE      ZERO,EXIT                    * valid date
          GOTO      VFT14999
.
VFT14950  MOVE      ONE,EXIT                     * invalid date
VFT14999  RETURN
+
.*****************************************************************************
.*                            VZFT0000             Called by: PROC0000       *
.*      Validate that the mandatory ZFT fields are populated or null and     *
.*      load the data into a temporary table so that we can accommodate more *
.*      than 1 ZFT segment/message.                                          *
.*****************************************************************************
.
.         Use the segment count for each ZFT segment.
.
VZFT0000  MOVE      ZFTSEGMT,RTMPSEGI            * load segment id
          ASSIGN    ZFTCOUNT,RTMPSEGC            * save previous count
          ADD       ONE,ZFTCOUNT                 * increment ZFT segment count
          MOVE      ZERO,ZFTFOUND                * set ZFT found flag
.
.         Procedure Start Time (ZFT.1)
.
VZFT0100  STRIP     ZFT00101
          MOVELPTR  ZFT00101,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZFT0200 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZFT00101            * null field ?
          GOTO      VZFT0200 IF EQUAL            * yes
.
          MOVE      ZFT00101,DIM14
          MOVE      "ZFT.1 ",FIELDID
          MOVE      ZERO,DATFLAG1                * any date
          MOVE      TWO,DATFLAG2                 * time only
          CALL      VDTM0000                     * date/time validation
.
          MOVE      ZFTCOUNT,RTMPSEGC            * load ZFT segment count
          MOVE      ONE,RTMPFLDN                 * load field number
          MOVE      ONE,RTMPFCNT                 * load field number count
          MOVE      ONE,RTMPCMPN                 * load component number
          PACK      RTMPVRBL,ZFT00101,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Procedure End Time (ZFT.2)
.
VZFT0200  STRIP     ZFT00201
          MOVELPTR  ZFT00201,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZFT0300 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZFT00201            * null field ?
          GOTO      VZFT0300 IF EQUAL            * yes
.
          MOVE      ZFT00201,DIM14
          MOVE      "ZFT.2 ",FIELDID
          MOVE      ZERO,DATFLAG1                * any date
          MOVE      TWO,DATFLAG2                 * time only
          CALL      VDTM0000                     * date/time validation
.
          MOVE      ZFTCOUNT,RTMPSEGC            * load ZFT segment count
          MOVE      TWO,RTMPFLDN                 * load field number
          MOVE      ONE,RTMPFCNT                 * load field number count
          MOVE      ONE,RTMPCMPN                 * load component number
          PACK      RTMPVRBL,ZFT00201,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Transaction End Date (ZFT.3)
.
VZFT0300  STRIP     ZFT00301
          MOVELPTR  ZFT00301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZFT0400 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZFT00301            * null field ?
          GOTO      VZFT0400 IF EQUAL            * yes
.
          MOVE      ZFT00301,DIM14
          MOVE      "ZFT.3 ",FIELDID
          MOVE      ONE,DATFLAG1                 * no future date
          MOVE      ZERO,DATFLAG2                * date only
          CALL      VDTM0000                     * date/time validation
.
          MOVE      ZFTCOUNT,RTMPSEGC            * load ZFT segment count
          MOVE      THREE,RTMPFLDN               * load field number
          MOVE      ONE,RTMPFCNT                 * load field number count
          MOVE      ONE,RTMPCMPN                 * load component number
          PACK      RTMPVRBL,ZFT00301,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Reporting Procedure Start Time (ZFT.4)
.
VZFT0400  STRIP     ZFT00401
          MOVELPTR  ZFT00401,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZFT0500 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZFT00401            * null field ?
          GOTO      VZFT0500 IF EQUAL            * yes
.
          MOVE      ZFT00401,DIM14
          MOVE      "ZFT.4 ",FIELDID
          MOVE      ZERO,DATFLAG1                * any date
          MOVE      TWO,DATFLAG2                 * time only
          CALL      VDTM0000                     * date/time validation
.
          MOVE      ZFTCOUNT,RTMPSEGC            * load ZFT segment count
          MOVE      FOUR,RTMPFLDN                * load field number
          MOVE      ONE,RTMPFCNT                 * load field number count
          MOVE      ONE,RTMPCMPN                 * load component number
          PACK      RTMPVRBL,ZFT00401,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Reporting Procedure End Time (ZFT.5)
.
VZFT0500  STRIP     ZFT00501
          MOVELPTR  ZFT00501,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZFT0600 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZFT00501            * null field ?
          GOTO      VZFT0600 IF EQUAL            * yes
.
          MOVE      ZFT00501,DIM14
          MOVE      "ZFT.5 ",FIELDID
          MOVE      ZERO,DATFLAG1                * any date
          MOVE      TWO,DATFLAG2                 * time only
          CALL      VDTM0000                     * date/time validation
.
          MOVE      ZFTCOUNT,RTMPSEGC            * load ZFT segment count
          MOVE      FIVE,RTMPFLDN                * load field number
          MOVE      ONE,RTMPFCNT                 * load field number count
          MOVE      ONE,RTMPCMPN                 * load component number
          PACK      RTMPVRBL,ZFT00501,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         AHPRA Identifier (ZFT.6)
.
VZFT0600  STRIP     ZFT00601
          MOVELPTR  ZFT00601,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZFT0900 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZFT00601            * null field ?
          GOTO      VZFT0900 IF EQUAL            * yes
.
          MOVE      ZFTCOUNT,RTMPSEGC            * load ZFT segment count
          MOVE      SIX,RTMPFLDN                 * load field number
          MOVE      ONE,RTMPFCNT                 * load field number count
          MOVE      ONE,RTMPCMPN                 * load component number
          PACK      RTMPVRBL,ZFT00601,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
VZFT0900
.
VZFT9999  RETURN
+
.*****************************************************************************
.*                            VNTE0000             Called by: PROC0000       *
.*      Validate that the mandatory NTE fields are populated or null and     *
.*      load the data into a temporary table so that we can accommodate more *
.*      than 1 NTE segment/message.                                          *
.*****************************************************************************
.
.         Use the segment count for each NTE segment if no NTE.1 sent
.
VNTE0000  MOVE      NTESEGMT,RTMPSEGI            * load segment id
          ASSIGN    NTECOUNT,RTMPSEGC            * save previous count
          ADD       ONE,NTECOUNT                 * increment NTE segment count
          MOVE      ZERO,NTEFOUND                * set NTE found flag
.
.         Set ID (NTE.1)
.
          SQUEEZE   NTE00101
          MOVELPTR  NTE00101,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      NTECOUNT,NTE00101
            GOTO      VNTE0100
          ENDIF
.
          COMPARE   FORM3,THREE
          IF        @LESS
            MOVE      "NTE.1: Set ID has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VNTE0200
          ENDIF
.
          MATCH     BLANKSTR,NTE00101            * field null ?
          IF        @EQUAL
            ADD       ONE,NTECOUNT               * no - increment count
            MOVE      NTECOUNT,NTE00101
            GOTO      VNTE0100
          ENDIF
.
          TYPE      NTE00101                     * field numeric ?
          IF        !@EQUAL
            MOVE      "NTE.1: Set ID is not numeric",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VNTE0200
          ENDIF
.
VNTE0100  RJUSTIFY  NTE00101
          MOVE      NTE00101,FORM3
.
.         Check the NTE count is the same as the Set ID
.
          COMPARE   FORM3,NTECOUNT
          IF        !@EQUAL
            MOVE      "NTE.1: Set ID not in sequence",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VNTE0200
          ENDIF
.
.         Check the new Set ID is one more than the previous Set ID
.
          SUB       ONE,FORM3
          COMPARE   FORM3,RTMPSEGC
          IF        !@EQUAL
            MOVE      "NTE.1: Set ID not in sequence",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VNTE0200
          ENDIF
.
          MOVE      NTE00101,RTMPSEGC            * load NTE segment count
          MOVE      ONE,RTMPFLDN                 * load field number
          MOVE      ONE,RTMPFCNT                 * load field number count
          MOVE      ONE,RTMPCMPN                 * load component number
          PACK      RTMPVRBL,NTE00101,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Load Comments (NTE.3)
.
VNTE0200  STRIP     NTE00301
          MOVELPTR  NTE00301,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NTE00301,SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                               SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                               SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                               SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                               SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100
            CLEAR     NTE00301
            GOTO      VNTE0250
          ENDIF
.
          MATCH     BLANKSTR,NTE00301            * field null ?
          IF        @EQUAL
            COMPARE   TEN2,MESSGNUM
            GOTO      VNTE0250 IF EQUAL          * leave as "" for S14
.
            PACK      NTE00301,SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                               SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                               SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                               SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                               SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100
            CLEAR     NTE00301
            GOTO      VNTE0250
          ENDIF
.
VNTE0250  CALL      PODC0000                     * process appointment comments
.
VNTE9999  RETURN
+
.*****************************************************************************
.*                               PODC0000                                    *
.*                                                                           *
.*                Process the appointment comments field                     *
.* Requires: NTE00301 - Appointment Message Comments                         *
.*****************************************************************************
.
PODC0000  STRIP     NTE00301
          MOVE      NTE00301,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NTE00301
          MOVELPTR  NTE00301,SAVFORM4
.
          COMPARE   ZERO,SAVFORM4                * field populated ?
          GOTO      PODC9999 IF EQUAL            * no - finished
.
          MATCH     BLANKSTR,NTE00301            * null field ?
          GOTO      PODC9999 IF EQUAL            * yes
.
.         There are appointment comments in the field, so write to outdcoaf
.
          CALL      WODC0000
.
PODC9999  RETURN
+
.*****************************************************************************
.*                           WODC0000              Called by: PODC0000       *
.*                    Write outdcoaf record(s)                               *
.* Requires: OUTDANFD - record written to outdanaf for patient               *
.*           NTE00301 - Appointment Message Comments                         *
.*****************************************************************************
.
.         Bump through the text string on a character by character basis
.         and for each character check to see whether there is a line break.
.         Allow 100 characters/line, unless of course there is a line break
.         or the end of the string is reached.
.
WODC0000  MOVE      ZERO,LINENUMB                * initialise line number
          MOVE      ZERO,CHRCOUNT                * initialise character count
          MOVE      SP100,DIM60
          CLEAR     DIM60
.
.         Check to see if we have a line break
.
WODC0200  MOVE      ZERO,BREAKFLG                * initialise break found flag
          MATCH     LINBREAK,NTE00301
          IF        !@EQUAL | @LESS
            GOTO      WODC0500
          ENDIF
.
.         We have found a line break, so if there is no data so far in the
.         the line (CHRCOUNT is zero), then ignore the line break, otherwise,
.         write the current line data
.
          IF        CHRCOUNT = 0
            BUMP      NTE00301,5                 * move past line break
            GOTO      WODC9500 IF EOS            * eos - finished
            GOTO      WODC0200                   * check for another line break
          ENDIF
.
          MOVE      ONE,BREAKFLG                 * set flag for break found
.
WODC0300  CALL      WOLN0000                     * write a comment line
.
          MOVE      ZERO,CHRCOUNT                * re-initialise character count
.
WODC0400  IF        BREAKFLG = 1
            BUMP      NTE00301,5                 * move past line break
          ELSE
            BUMP      NTE00301                   * get next character
          ENDIF
          GOTO      WODC9000 IF EOS              * eos - finished
          GOTO      WODC0200                     * check for another line break
.
.         We have a valid character, so load it into the text line and then
.         get the next character
.
WODC0500  MOVE      NTE00301,ANS
          APPEND    ANS,DIM60                    * load current character
          ADD       ONE,CHRCOUNT                 * increment character count
.
          COMPARE   SIXTY,CHRCOUNT               * full line yet ?
          GOTO      WODC0400 IF LESS             * no
          GOTO      WODC0300                     * yes - write comment
.
WODC9000  IF        CHRCOUNT > 0
            CALL      WOLN0000                   * write comment record
          ENDIF
.
WODC9500  RESET     NTE00301
.
WODC9999  RETURN
+
.*****************************************************************************
.*                                  WOLN0000       Called by: WODC0000       *
.*        Write outpatient appointment comment line record to tempfile       *
.*****************************************************************************
.
WOLN0000  ADD       ONE,LINENUMB                 * increment line number
          RESET     DIM60
.
          MOVE      THREE,RTMPFLDN
          MOVE      LINENUMB,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,DIM60,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          MOVE      SP100,DIM60
          CLEAR     DIM60
.
WOLN9999  RETURN
+
.*****************************************************************************
.*                               PTHI0000                                    *
.*                                                                           *
.*                   Process the telehealth notes field                      *
.* Requires: ZXV09601 - Telehealth Notes                                     *
.*****************************************************************************
.
PTHI0000  STRIP     ZXV09601
          MOVE      ZXV09601,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV09601
          MOVELPTR  ZXV09601,SAVFORM4
.
          COMPARE   ZERO,SAVFORM4                * field populated ?
          GOTO      PTHI9999 IF EQUAL            * no - finished
.
.         Delete any existing telehealth notes in webPAS
.
PTHI0100  MOVE      "021",KEY3
          PACK      KEY14,OTTHOUTN,KEY3,SP70
          CALL      RSVSCMT1
PTHI0200  CALL      RKVSCMT1
          BRANCH    OVRCD,PTHI0500
.
          MATCH     VSCTVIST,OTTHOUTN
          GOTO      PTHI0500 IF NOT EQUAL
.
          MATCH     VSCTTYPE,KEY3
          GOTO      PTHI0500 IF NOT EQUAL
.
          PACK      KEY14,VSCTVIST,VSCTTYPE,VSCTLINE
          CALL      DEVSCMT1
          GOTO      PTHI0200
.
PTHI0500  MATCH     BLANKSTR,ZXV09601            * null field ?
          GOTO      PTHI9999 IF EQUAL            * no comments to write
.
.         There are telehealth notes in the field, so write to viscmtaf
.
          CALL      WTNT0000
.
PTHI9999  RETURN
+
.*****************************************************************************
.*                           WTNT0000              Called by: PTHI0000       *
.*                    Write viscmtaf (type 021) record(s)                    *
.* Requires: OTTHOUTN - webPAS visit number for telehealth information       *
.*           ZXV09601 - telehealth notes                                     *
.*****************************************************************************
.
.         Bump through the text string on a character by character basis
.         and for each character check to see whether there is a line break.
.         Allow 100 characters/line, unless of course there is a line break
.         or the end of the string is reached.
.
WTNT0000  MOVE      ZERO,LINENUMB                * initialise line number
          MOVE      ZERO,CHRCOUNT                * initialise character count
          MOVE      SP100,DIM100
          CLEAR     DIM100                       * initialise line string
.
.         Check to see if we have a line break
.
WTNT0200  MOVE      ZERO,BREAKFLG                * initialise break found flag
          MATCH     LINBREAK,ZXV09601
          IF        !@EQUAL | @LESS
            GOTO      WTNT0500
          ENDIF
.
.         We have found a line break, so if there is no data so far in the
.         the line (CHRCOUNT is zero), then ignore the line break, otherwise,
.         write the current line data
.
          IF        CHRCOUNT = 0
            BUMP      ZXV09601,5                 * move past line break
            GOTO      WTNT9500 IF EOS            * eos - finished
            GOTO      WTNT0200                   * check for another line break
          ENDIF
.
          MOVE      ONE,BREAKFLG                 * set flag for break found
.
WTNT0300  CALL      WTLN0000                     * write a comment line
.
          MOVE      ZERO,CHRCOUNT                * re-initialise character count
.
WTNT0400  IF        BREAKFLG = 1
            BUMP      ZXV09601,5                 * move past line break
          ELSE
            BUMP      ZXV09601                   * get next character
          ENDIF
          GOTO      WTNT9000 IF EOS              * eos - finished
          GOTO      WTNT0200                     * check for another line break
.
.         We have a valid character, so load it into the text line and then
.         get the next character
.
WTNT0500  MOVE      ZXV09601,ANS
          APPEND    ANS,DIM100                   * load current character
          ADD       ONE,CHRCOUNT                 * increment character count
.
          COMPARE   HUNDRED,CHRCOUNT             * full line yet ?
          GOTO      WTNT0400 IF LESS             * no
          GOTO      WTNT0300                     * yes - write comment
.
WTNT9000  IF        CHRCOUNT > 0
            CALL      WTLN0000                   * write comment record
          ENDIF
.
WTNT9500  RESET     ZXV09601
.
WTNT9999  RETURN
+
.*****************************************************************************
.*                                  WTLN0000       Called by: WTNT0000       *
.*            Write a telehealth note line record to viscmtaf                *
.*****************************************************************************
.
WTLN0000  MOVE      OTTHOUTN,VSCTVIST            * load record variables
          MOVE      "021",VSCTTYPE
          RESET     DIM100
          PACK      VSCTDATA,DIM100,SP100
.
          UNPACK    CTIMEIS,CHOUR,ANS,CMIN,ANS,CSEC
          MOVE      "HL7RECVR  ",D10
          PACK      VSCTUKEY,CURRDATE,CHOUR,CMIN,CSEC,D10,SP70
          MOVE      SP30,VSCTSPAR
.
WTLN0100  ADD       ONE,LINENUMB                 * increment line number
          MOVE      LINENUMB,VSCTLINE
.
          PACK      KEY14,VSCTVIST,VSCTTYPE,VSCTLINE
          CALL      RAVSCMT1
          IF        OVRCD = 1
            CALL      WRVSCMT1                   * write new record
          ELSE
            GOTO      WTLN0100
          ENDIF
.
          MOVE      SP100,DIM100
          CLEAR     DIM100                       * clear comment line
.
WTLN9999  RETURN
+
.*****************************************************************************
.*                            VZXP0000             Called by: PROC0000       *
.*                     Validate the ZXP fields                               *
.*****************************************************************************
.
VZXP0000  COMPARE   TEN1,MESSGNUM                * A05 INP message?
          GOTO      VZXP5800 IF EQUAL            * yes
.
.         Local GP - Component 1
.
          STRIP     ZXP00701
          MOVELPTR  ZXP00701,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VZXP1000                   * no
          ENDIF
.           
          MATCH     BLANKSTR,ZXP00701            * null field ?
          IF        @EQUAL
            MOVE      SP10,PMPXRHC1
            GOTO      VZXP1000                   * yes
          ENDIF
.
          IF        FORM3 > 10
            MOVE      "ZXP.7: Local GP has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZXP0500
          ENDIF
.
          PACK      KEY10,ZXP00701,SP10
          CALL      RDPMHCP1                     * valid HCP code ?
          IF        OVRCD = 1
            MOVE      "ZXP.7: Local GP not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZXP0500
          ENDIF
.
          PACK      PMPXRHC1,ZXP00701,SP70       * load gp
.
.         Component 1 is populated, so make sure that component 8 is also
.         populated (HL7 requirement)
.
VZXP0500  STRIP     ZXP00708
          MOVELPTR  ZXP00708,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "ZXP.7: Local GP coding system not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ELSE
            MATCH     BLANKSTR,ZXP00708          * null field ?
            IF        @EQUAL
              MOVE      "ZXP.7: Local GP coding system is mandatory",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
.         Local GP Practice - Component 1
.
VZXP1000  STRIP     ZXP01601
          MOVELPTR  ZXP01601,FORM3               * field populated ?
          MOVE      FORM3,SAVFORM3
          IF        FORM3 = 0
            GOTO      VZXP2000                   * no
          ENDIF
.           
          MATCH     BLANKSTR,ZXP01601            * null field ?
          IF        @EQUAL
            MOVE      SP10,PMPXRH1G
            GOTO      VZXP2000
          ENDIF
.
          IF        FORM3 > 10
            MOVE      "ZXP.16: Local GP Practice has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZXP1500
          ENDIF
.
          PACK      PMPXRH1G,ZXP01601,SP70       * load practice
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.
VZXP1500  STRIP     ZXP01603
          MOVELPTR  ZXP01603,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "ZXP.16: Practice coding system not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ELSE
            MATCH     BLANKSTR,ZXP01603          * null field ?
            IF        @EQUAL
              MOVE      "ZXP.16: Practice coding system is mandatory",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
.         Local GP Practice Count.
.         The following data combinations are valid:
.
.         Practice              Count
.         -------------         -------------
.         Not populated         Not populated
.         Null                  Null
.         Null                  Not populated (default count to spaces)
.         Populated (not null)  Populated (not null)
.         Populated (not null)  Not populated (default count to "1")
.
VZXP2000  SQUEEZE   ZXP01701
          MOVELPTR  ZXP01701,FORM3               * get field length
          COMPARE   ZERO,FORM3                   * Count field populated ?
          GOTO      VZXP2100 IF NOT EQUAL        * yes
.
.         The Count is not populated, so check if the Practice is
.         populated or not
.
          COMPARE   ZERO,SAVFORM3                * Practice populated ?
          GOTO      VZXP5800 IF EQUAL            * no - finished
.
          MATCH     BLANKSTR,ZXP01601            * Practice null field ?
          IF        @EQUAL
            MOVE      SP2,PMPXR1GC               * yes - clear field & finish
            GOTO      VZXP5800
          ENDIF
.
.         The practice is populated and not null, so default the count to "1"
.
          PACK      PMPXR1GC,SP1,ONE
          GOTO      VZXP2500                     * validate Practice/Count
.
.         The Count is populated, so check if it's null
.           
VZXP2100  MATCH     BLANKSTR,ZXP01701            * Count null field ?
          GOTO      VZXP2200 IF NOT EQUAL        * no
.
.         The Count is null, so make sure that the Practice is also null
.
          MATCH     BLANKSTR,ZXP01601            * Practice null field ?
          IF        @EQUAL
            MOVE      SP2,PMPXR1GC               * yes - clear field & finish
            GOTO      VZXP5800
          ENDIF
.
          MOVE      "ZXP.17: Practice must be null if Count is null",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VZXP9999
.
.         The Count is populated and not null, so check that the Practice
.         is also populated and not null.
.
VZXP2200  COMPARE   ZERO,SAVFORM3                * Practice populated ?
          GOTO      VZXP2300 IF EQUAL            * no - error
.
          MATCH     BLANKSTR,ZXP01601            * Practice null field ?
          GOTO      VZXP2400 IF NOT EQUAL        * no - validate count
.
VZXP2300  MOVE      "ZXP.17: Practice must be populated if Count is populated",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VZXP9999
.
.         Practice and Count are populated and not null, so check
.         that the content of Count is numeric
.
VZXP2400  TYPE      ZXP01701
          IF        !@EQUAL
            MOVE      "ZXP.17: Practice count not numeric",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VZXP9999
          ENDIF
.
.         Make sure the value is no more than two bytes in length
.
          IF        FORM3 > 2
            MOVE      "ZXP.17: Practice count has too many digits",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZXP9999
          ENDIF
.
.         Check the count is not zero
.
          MOVE      ZXP01701,FORM2
          IF        FORM2 = 0
            MOVE      "ZXP.17: Practice count cannot be zero",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZXP9999
          ENDIF
.
.         The count is valid, so load the field
.
          MOVE      ZXP01701,PMPXR1GC
          RJUSTIFY  PMPXR1GC
.
.         Check that the practice code/count combination exists on file
.
VZXP2500  PACK      KEY12,PMPXRH1G,PMPXR1GC
          CALL      RDPMHCG1                     * valid Practice/Count ?
          IF        OVRCD = 1
            MOVE      "ZXP.16: Local GP Practice and Count not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          MATCH     SP10,PMPXRHC1                * blank Local GP ?
          GOTO      VZXP5800 IF EQUAL            * yes - finished
.
.         The Local GP and Practice are both populated so validate that they
.         are linked
.
          PACK      KEY20,PMPXRHC1,PMPXRH1G
          CALL      RDPMHCL1
          IF        OVRCD = 1
            MOVE      "ZXP.16: Local GP and Practice not linked",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
          GOTO      VZXP5800
.
.         PCEHR Status Flag (Advertised MyHR icon - ZXP.58)
.
VZXP5800  SQUEEZE   ZXP05801
          MOVELPTR  ZXP05801,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZXP6300 IF EQUAL
.
          MATCH     BLANKSTR,ZXP05801            * field null ?
          GOTO      VZXP6300 IF EQUAL
.
          TYPE      ZXP05801                     * numeric ?
          GOTO      VZXP5810 IF NOT EQUAL
.
          MOVE      ZXP05801,FORM1
          IF        FORM1 > 3 | FORM1 < 0
VZXP5810    MOVE      "ZXP.58: PCEHR Status not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZXP9999
          ENDIF
.
          PACK      ZXP05801,ZXP05801,SP70
          MATCH     SP70,ZXP05801
          IF        !@EQUAL
            MATCH     BLANKSTR,ZXP05801
            IF        @EQUAL
              MOVE      SP1,PMPXSN10
            ELSE
              MOVE      ZXP05801,PMPXSN10        * PCEHR Flag
            ENDIF
          ENDIF
.
.         Verified Address Flag (ZXP.63)
.
VZXP6300  SQUEEZE   ZXP06301
          MOVELPTR  ZXP06301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZXP7600 IF EQUAL
.
          MATCH     BLANKSTR,ZXP06301            * field null ?
          IF        @EQUAL
            MOVE      SP1,PMPXSN19               * clear Verified Address Flag
            GOTO      VZXP7600
          ENDIF
.
          TYPE      ZXP06301                     * numeric ?
          GOTO      VZXP6310 IF NOT EQUAL
.
          MOVE      ZXP06301,FORM1
          IF        FORM1 > 1 | FORM1 < 0
VZXP6310    MOVE      "ZXP.63: Verified Address Flag not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZXP9999
          ELSE
            MOVE      ZXP06301,PMPXSN19          * update Verified Address Flag
          ENDIF
.
.         Email Validation Flag (ZXP.76)
.
VZXP7600  SQUEEZE   ZXP07601
          MOVELPTR  ZXP07601,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZXP9000 IF EQUAL
.
          MATCH     BLANKSTR,ZXP07601            * field null ?
          IF        @EQUAL
            MOVE      SP1,PMPXSN21               * clear Email Validation Flag
          ELSE
            MOVE      ZXP07601,PMPXSN21          * update Email Validation Flag
          ENDIF
.
VZXP9000
.
VZXP9999  RETURN
+
.*****************************************************************************
.*                            VZXV0000             Called by: PROC0000       *
.*      Validate that the mandatory ZXV fields are populated or null.        *
.*      This only applies to I12, I13, I14 & O/P A08 messages.               *
.*****************************************************************************
.
VZXV0000  BRANCH    MESSGNUM,VZXV9999:           * A28 (Add Person Information)
                             VZXV9999:           * A31 (Update Person Info.)
                             VZXV9999:           * A34 (Merge Person Info.)
                             VZXV7000:           * P03 (Financial Transaction)
                             VZXV1000:           * I12 (Add A/H Patient Ref.)
                             VZXV1000:           * I13 (Modify A/H Patient Ref.)
                             VZXV1000:           * I14 (Delete A/H Patient Ref.)
                             VZXV2000:           * A04 (O/P Confirm Appointment)
                             VZXV2000:           * A03 (O/P Disch. Attendance)
                             VZXV9999:           * MO2 (Staff/Practitioner)
                             VZXV3000:           * A05 (Preadmission)
                             VZXV9999:           * S14 (Theatre Booking Update)
                             VZXV4000:           * A08 (I/P Visit Update)
                             VZXV5000:           * A21 (I/P On-Leave)
                             VZXV6000:           * A22 (I/P Return from Leave)
                             VZXV9999:           * S0x (O/P Appointment Message)
                             VZXV9999:           * S12 (New Appointment OUT/INP)
                             VZXV9999:           * S13 (Reschedule Appt OUT)
                             VZXV9999:           * S15 (Cancel Appt OUT/INP)
                             VZXV9999            * S26 (DNA Appt OUT)
.
VZXV1000  CALL      AZXV0000                     * validate for I12, I13 & I14
          GOTO      VZXV9999
.
VZXV2000  CALL      OZXV0000                     * validate for O/P A04 & A03
          GOTO      VZXV9999
.
VZXV3000  CALL      IZXV0000                     * validate for I/P A05
          GOTO      VZXV9999
.
VZXV4000  CALL      IPZXV000                     * validate for I/P A08
          GOTO      VZXV9999
.
VZXV5000  CALL      A21ZXV00                     * validate for I/P A21
          GOTO      VZXV9999
.
VZXV6000  CALL      A22ZXV00                     * validate for I/P A22
          GOTO      VZXV9999
.
VZXV7000  CALL      P3ZXV000                     * validate for I/P P03
          GOTO      VZXV9999
.
VZXV9999  RETURN
+
.*****************************************************************************
.*                            P3ZXV000                                       *
.*      Validate that the mandatory ZXV fields are populated or null.        *
.*      Applies to I/P P03 messages.                                         *
.*****************************************************************************
.         Anaesthetic Type for Billing (ZXV.88 - Component 1)
.
P3ZXV000  MOVE      SP70,P03ANTYP                * clear P03 Anaesthetic Type
          STRIP     ZXV08801
          MOVELPTR  ZXV08801,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      P3ZXV900 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZXV08801            * null field ?
          GOTO      P3ZXV900 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 1
            MOVE      "ZXV.88: Anaesthetic Type has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      P3ZXV600
          ENDIF
.
.         Check for the first active Cat OA code where indicator 1 matches
.         the value sent
.
          MOVE      ZXV08801,D1
          PACK      KEY5,CATOA,SP5
          CALL      RDSCODE1                     * Position on Cat OA
P3ZXV200  CALL      RDKCODE1                     * read next record
          BRANCH    OVRCD,P3ZXV500               * end of file
.
          MATCH     "OA",TCODE                   * category OA still ?
          GOTO      P3ZXV500 IF NOT EQUAL        * no
.
          MATCH     TCINDC1,D1                   * same Anaesthetic Type ?
          GOTO      P3ZXV200 IF NOT EQUAL        * no - get next record
.
.         The code exists, so make sure it is active
.
          MATCH     ANSI,PTCOACTV                * inactive ?
          GOTO      P3ZXV200 IF EQUAL            * yes - ignore record
.
          MOVE      ACODE,P03ANTYP               * load Anaesthetic Type
          GOTO      P3ZXV600
.
P3ZXV500  MOVE      "ZXV.88: Anaesthetic Type equivalent code not found",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
.
.         Anaesthetic Type (ZXV.88 - Component 3)
.
P3ZXV600  STRIP     ZXV08803
          MOVELPTR  ZXV08803,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZXV.88: Anaesthetic Type component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      P3ZXV900
          ENDIF
.
P3ZXV900
.
P3ZXV999  RETURN
+
.*****************************************************************************
.*                            IZXV0000                                       *
.*      Validate that the mandatory ZXV fields are populated or null.        *
.*      Applies to I/P A05 messages.                                         *
.*****************************************************************************
.
IZXV0000
.
IZXV9999  RETURN
+
.*****************************************************************************
.*                            IPZXV000                                       *
.*      Validate that the mandatory ZXV fields are populated or null.        *
.*      Applies to I/P A08 messages.                                         *
.*****************************************************************************
.
.         Inform GP Flag (ZXV.19, Component 1)
.
IPZXV000  STRIP     ZXV01901
          MOVELPTR  ZXV01901,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      IPZXV900 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZXV01901            * field null ?
          GOTO      IPZXV900 IF EQUAL            * no
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 1
            MOVE      "ZXV.19: Inform GP Flag component 1 has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      IPZXV900
          ENDIF
.
          REP       UPPLOW,ZXV01901              * convert to uppercase
          MATCH     ANSY,ZXV01901                * "Y" ?
          GOTO      IPZXV900 IF EQUAL            * yes
.
          MATCH     ANSN,ZXV01901                * "N" ?
          GOTO      IPZXV900 IF EQUAL            * yes
.
          MOVE      "ZXV.19: Inform GP Flag component 1 not valid",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
.
IPZXV900
.
IPZXV999  RETURN
+
.*****************************************************************************
.*                            A21ZXV00                                       *
.*      Validate that the mandatory ZXV fields are populated or null.        *
.*      Applies to I/P A21 messages.                                         *
.*****************************************************************************
.
.         Leave Type (ZXV.20)
.
A21ZXV00  STRIP     ZXV02001
          MOVELPTR  ZXV02001,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZXV.20: Leave Type component 1 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      A21ZXV10
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,ZXV02001
          IF        @EQUAL
            MOVE      "ZXV.20: Leave Type component 1 is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      A21ZXV10
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 3
            MOVE      "ZXV.20: Leave Type component 1 has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      A21ZXV10
          ENDIF
.
.         Make sure the code is valid for Cat TL
.
          PACK      KEY5,CATTL,ZXV02001,SP5
          CALL      RDCODE1                      * field valid ?
          IF        OVRCD = 1
            MOVE      "ZXV.20: Leave Type component 1 not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      A21ZXV10
          ENDIF
.
.         Make sure that the code is active
.
          MATCH     ANSI,PTCOACTV
          IF        @EQUAL
            MOVE      "ZXV.20: Leave Type component 1 not active",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      A21ZXV10
          ENDIF
.
          MOVE      TCINDC1,SAVEIND1
.
.         Check that component 3 is populated
.
A21ZXV10  STRIP     ZXV02003
          MOVELPTR  ZXV02003,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZXV.20: Leave Type component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      A21ZXV20
          ENDIF
.
.         The component is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,ZXV02003
          IF        @EQUAL
            MOVE      "ZXV.20: Leave Type component 3 is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      A21ZXV20
          ENDIF
.
.         On-Leave Date/Time (ZXV.21)
.
A21ZXV20  STRIP     ZXV02101
          MOVELPTR  ZXV02101,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZXV.21: On Leave DateTime not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      A21ZXV30
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,ZXV02101
          IF        @EQUAL
            MOVE      "ZXV.21: On Leave DateTime is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      A21ZXV30
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 14
            MOVE      "ZXV.21: On Leave DateTime has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      A21ZXV30
          ENDIF
.
.         Check Date/Time is valid
.
          MOVE      ZXV02101,DIM14
          MOVE      "ZXV.21",FIELDID
          MOVE      ONE,DATFLAG1                 * not in the future
          MOVE      ONE,DATFLAG2                 * date and time
          CALL      VDTM0000
.
.         Make sure that the On Leave Date/Time is greater than the
.         most recent transfer record for this patient visit
.
          PACK      KEY30,PVIBILL,TILDA35
          CALL      RDSTRAN2                     * position after last tran rec.
          CALL      RDPTRAN2                     * read previous tran record
          BRANCH    OVRCD,A21ZXV25               * eof - error
.
          MATCH     PVIBILL,TADMN                * same visit still ?
          GOTO      A21ZXV27 IF EQUAL            * yes
.
A21ZXV25  MOVE      "ZXV.21: Transfer record not found",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      A21ZXV30
.
A21ZXV27  PACK      DIM16,TDATE,TTIME
          REP       ": ",DIM16
          SQUEEZE   DIM16
          MOVE      DIM16,DIM14
          MATCH     ZXV02101,DIM14
          IF        !@LESS
            MOVE      "ZXV.21: On Leave DateTime is out of date",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      A21ZXV30
          ENDIF
.
.         Expected Return Date/Time (ZXV.22)
.
A21ZXV30  STRIP     ZXV02201
          MOVELPTR  ZXV02201,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZXV.22: Expected Return DateTime not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      A21ZXV99
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,ZXV02201
          IF        @EQUAL
            MOVE      "ZXV.22: Expected Return DateTime is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      A21ZXV99
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 8 & FORM3 <> 14
            MOVE      "ZXV.22: Expected Return DateTime has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      A21ZXV99
          ENDIF
.
.         Check Date/Time is valid
.
          MOVE      ZXV02201,DIM14
          MOVE      "ZXV.22",FIELDID
          MOVE      THREE,DATFLAG1               * date not in the past
          IF        FORM3 = 8
            MOVE      ZERO,DATFLAG2              * date only
          ELSE
            MOVE      ONE,DATFLAG2               * date and time
          ENDIF
          CALL      VDTM0000
.
.         Currently, the on-leave datetime cannot be in the future and the
.         expected return date/time cannot be in the past, so we only need
.         make sure that the expected return date/time is after the on-leave
.         date/time if they're the same date and where there is an expected
.         return time as well.
.
          IF        FORM3 = 14
            MATCH     ZXV02201,ZXV02101
            IF        !@LESS
              MOVE      "ZXV.22: Expected Return DateTime must be after On Leave DateTime",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      A21ZXV99
            ENDIF
          ENDIF
.
A21ZXV99  RETURN
+
.*****************************************************************************
.*                            A22ZXV00                                       *
.*      Validate that the mandatory ZXV fields are populated or null.        *
.*      Applies to I/P A22 messages.                                         *
.*****************************************************************************
.
.         Return from Leave Date/Time (ZXV.30)
.
A22ZXV00  STRIP     ZXV03001
          MOVELPTR  ZXV03001,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZXV.30: Return from Leave DateTime not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      A22ZXV99
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,ZXV03001
          IF        @EQUAL
            MOVE      "ZXV.30: Return from Leave DateTime is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      A22ZXV99
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 14
            MOVE      "ZXV.30: Return from Leave DateTime has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      A22ZXV99
          ENDIF
.
.         Check Date/Time is valid
.
          MOVE      ZXV03001,DIM14
          MOVE      "ZXV.30",FIELDID
          MOVE      ONE,DATFLAG1                 * not in the future
          MOVE      ONE,DATFLAG2                 * date and time
          CALL      VDTM0000
.
.         Make sure that the Return from Leave Date/Time is greater than the
.         most recent transfer record for this patient visit
.
          PACK      KEY30,PVIBILL,TILDA35
          CALL      RDSTRAN2                     * position after last tran rec.
          CALL      RDPTRAN2                     * read previous tran record
          BRANCH    OVRCD,A22ZXV25               * eof - error
.
.         If the admission is still the same, save the ward/bed for the new
.         pattranf record, as the patient will go back into the same ward/bed.
.
          MATCH     PVIBILL,TADMN                * same visit still ?
          GOTO      A22ZXV25 IF NOT EQUAL        * no - error
.
          MOVE      TWARD,SAVEWARD               * yes
          MOVE      TBED,SAVEBED
.
.         Make sure that this is an on-leave record
.
          MATCH     ANSL,TMOVE                   * on-leave ?
          GOTO      A22ZXV27 IF EQUAL            * yes - valid
.
          MOVE      "ZXV.30: Missing OnLeave Transfer record",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      A22ZXV99
.
A22ZXV25  MOVE      "ZXV.30: Transfer record not found",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      A22ZXV99
.
A22ZXV27  PACK      DIM16,TDATE,TTIME
          REP       ": ",DIM16
          SQUEEZE   DIM16
          MOVE      DIM16,DIM14
          MATCH     ZXV03001,DIM14
          IF        !@LESS
            MOVE      "ZXV.30: Return from Leave DateTime is out of date",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      A22ZXV99
          ENDIF
.
A22ZXV99  RETURN
+
.*****************************************************************************
.*                            OZXV0000             Called by: PROC0000       *
.*      Applies to O/P A04 and A03 messages only.                            *
.*      Validate that the mandatory ZXV fields are populated or null.        *
.*****************************************************************************
.
OZXV0000  CALL      VSIT0000                     * valid site component 1 ?
          BRANCH    EXIT,OZXV9000                * no
.
.         Validation of the booking record will need to be done with
.         ZXV.35 (Site) as we need site to open the correct O/P booking file
.         (outbokaf).
.
          CLOSE     OUTBOKA1
          CLOSE     OUTBOKA6
          PACK      FILENAME,OSTFILE,FILBOKA6
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTBOKA1,FILENAME
          OPEN      OUTBOKA6,FILENAME
          TRAPCLR   IO
          IF        OVRCD = 1
            MOVE      "PV1.5: Open failed on outbokaf",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      OZXV9000
          ENDIF
.
.         Find the matching outbokaf booking record
.
          MOVE      PV100501,BOOKNUMB            * format booking number
          RJUSTIFY  BOOKNUMB
          UNPACK    PV200801,DIM8,HOURTM,MINTIME * format booking date
          PACK      DIM5,HOURTM,COLON,MINTIME
          PACK      KEY36,BOOKNUMB,DIM8,SP70
          CALL      RDSBOKA6                     * position on U/R and date
OZXV1000  CALL      RDKBOKA6                     * read next record
          BRANCH    OVRCD,OZXV8000               * eof - error
.
          MOVE      OBAOUTNO,KEY8
          MATCH     BOOKNUMB,KEY8                * same booking number still ?
          GOTO      OZXV8000 IF NOT EQUAL        * no - get next record
.
          MATCH     DIM8,OBADATE                 * same date still ?
          GOTO      OZXV8000 IF NOT EQUAL        * no - error
.
          MATCH     DIM5,OBATIME                 * same time ?
          GOTO      OZXV1000 IF NOT EQUAL        * no - get next record
.
          MATCH     PURNO,OBAURNO
          IF        !@EQUAL
            MOVE      "PV1.5: Booking record U/R doesnt match",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      OZXV9000
          ENDIF
.
          IF        MESSGNUM <> 9
            PACK      DIM6,PV100301,SP6
            MATCH     DIM6,OBACLIN
            IF        !@EQUAL
              MOVE      "PV1.5: Booking record clinic not valid",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      OZXV9000
            ENDIF
          ENDIF
.
.         If we are attending a booked patient, the status of the record
.         should only be "booked".
.         If we are discharging an attended patient, the status of the record
.         should only be "attended".
.
          IF        MESSGNUM = 8
            COMPARE   ONE,OBASTAT
          ELSE
            COMPARE   FOUR,OBASTAT
          ENDIF
          IF        !@EQUAL
            MOVE      "PV1.5: Booking record status not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Make sure that check-in date is not less than the booking
.         date
.
          MOVE      PV104401,DIM8
          MATCH     OBADATE,DIM8
          IF        @LESS
            MOVE      "PV1.44: Check-In Date less than Booking Date",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         If the patient is deceased, then the deceased date must not
.         be prior to the booking date
.
          COMPARE   ONE,PCEASE                   * patient deceased ?
          GOTO      OZXV3000 IF NOT EQUAL        * no
.
          MATCH     PDECDTE,SP70                 * date of death blank ?
          GOTO      OZXV3000 IF EQUAL            * yes - error
.
          MATCH     OBADATE,PDECDTE              * date of death < booking date?
          GOTO      OZXV3000 IF NOT LESS         * no
.
          MOVE      "PV1.5: Patient was deceased prior to booking",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
.
.         Open outbb1af
.
OZXV3000  CLOSE     OUTBB1A1
          PACK      FILENAME,OSTFILE,FILBB1A1
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTBB1A1,FILENAME
          TRAPCLR   IO
          IF        OVRCD = 1
            MOVE      "PV1.5: Open failed on outbb1af",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      OZXV9000
          ENDIF
.
.         Open the relevant O/P audit files for outbokaf (outaudba)
.         & outbb1af (outaudbb) if the audit parameters are turned on
.
          IF        HOAUDB = 0
            CLOSE     OUTAUBB1
            PACK      FILENAME,OSTFILE,FILAUBB1
            MOVE      ZERO,OVRCD
            TRAP      OVERCOND IF IO
            OPEN      OUTAUBB1,FILENAME
            TRAPCLR   IO
            IF        OVRCD = 1
              MOVE      "PV1.5: Open failed on outaudbb",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
          IF        HOAUDA = 0 & MESSGNUM = 8
            CLOSE     OUTAUDBA
            PACK      FILENAME,OSTFILE,FILAUDBA
            MOVE      ZERO,OVRCD
            TRAP      OVERCOND IF IO
            OPEN      OUTAUDBA,FILENAME
            TRAPCLR   IO
            IF        OVRCD = 1
              MOVE      "PV1.5: Open failed on outaudba",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
.         Check if a patvisaf record exists
.
          MOVE      OBAOUTNO,KEY8
          CALL      RDPTVIS1
          IF        OVRCD = 0 & MESSGNUM = 8
            MOVE      "PV1.5: Record already exists on patvisaf",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
          IF        OVRCD = 1 & MESSGNUM = 9
            MOVE      "PV1.5: Record doesnt exist on patvisaf",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Read the outbokaf record using index 1 so that we
.         can update the record later on (in PA040000)
.
          IF        MESSGNUM = 8
            PACK      KEY28,OBASITE,OBACLIN,OBADATE,OBASTRT,OBASLOT
            CALL      RDBOKA1                    * record on file ?
            BRANCH    OVRCD,OZXV8000             * no - error
          ENDIF
.
.         Read the outbb1af record using index 1 so that we
.         can update the record later on (in PA040000 & PA030000)
.
          MOVE      OBAOUTNO,KEY8
          CALL      RDBOKB1                      * record on file ?
          BRANCH    OVRCD,OZXV8100               * no - error
.
          COMPARE   NINE,MESSGNUM                * A03 message ?
          GOTO      OZXV4000 IF NOT EQUAL        * no
.      
.         We are processing an A03 AH Contact message.
.
          MATCH     SP5,OTBBDPTM                 * departure time populated ?
          IF        !@EQUAL
            MOVE      "PV1.5: Booking already departed",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Validate Event Program. (ZXV.50)
.
OZXV3500  STRIP     ZXV05001
          MOVELPTR  ZXV05001,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZXV.50: Event Program not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      OZXV3600
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,ZXV05001
          IF        @EQUAL
            MOVE      "ZXV.50: Event Program is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      OZXV3600
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 3
            MOVE      "ZXV.50: Event Program has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      OZXV3600
          ENDIF
.
.         Make sure the code is valid for Cat zG
.
          PACK      KEY5,CATzG,ZXV05001,SP5
          CALL      RDCODE1                      * field valid ?
          IF        OVRCD = 1
            MOVE      "ZXV.50: Event Program not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Event Program (ZXV.50, Component 3)
.
OZXV3600  STRIP     ZXV05003
          MOVELPTR  ZXV05003,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZXV.50: Event Program component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000

          ENDIF
.
.         Validate Occasion of Service. (ZXV.51)
.
          STRIP     ZXV05101
          MOVELPTR  ZXV05101,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZXV.51: Occasion of Service not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      OZXV3700
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,ZXV05101
          IF        @EQUAL
            MOVE      "ZXV.51: Occasion of Service is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      OZXV3700
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 6
            MOVE      "ZXV.51: Occasion of Service has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Occasion of Service (ZXV.51, Component 3)
.
OZXV3700  STRIP     ZXV05103
          MOVELPTR  ZXV05103,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZXV.51: Occasion of Service component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          GOTO      OZXV9000
.
.         Open the session file ready for stats update
.
OZXV4000  CLOSE     OUTSESA1
          PACK      FILENAME,OSTFILE,FILSESA1
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTSESA1,FILENAME
          TRAPCLR   IO
          IF        OVRCD = 1
            MOVE      "PV1.5: Open failed on outsesaf",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Open the O/P master header file
.
          CLOSE     OUTHEDA1
          PACK      FILENAME,OSTFILE,FILHEDA1
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTHEDA1,FILENAME
          TRAPCLR   IO
          IF        OVRCD = 1
            MOVE      "PV1.5: Open failed on outhedaf",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Open the clinic master file
.
          CLOSE     OUTMA1A1
          PACK      FILENAME,OSTFILE,FILMA1A1
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTMA1A1,FILENAME
          TRAPCLR   IO
          IF        OVRCD = 1
            MOVE      "PV1.5: Open failed on outma1af",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          GOTO      OZXV9000
.
OZXV8000  MOVE      "PV1.5: O/P Booking A record not found",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      OZXV9000
.
OZXV8100  MOVE      "PV1.5: O/P Booking B record not found",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
.
OZXV9000  CALL      OSIT0000                    * validate other site components
          GOTO      OZXV9999
.
OZXV9999  RETURN
+
.*****************************************************************************
.*                            AZXV0000             Called by: PROC0000       *
.*      Applies to Allied Health I12, I13 & I14 messages only.               *
.*      Validate that the mandatory ZXV fields are populated or null.        *
.*****************************************************************************
.
.         Referral Reason (ZXV.7, Component 1)
.
AZXV0000  STRIP     ZXV00701
          MOVELPTR  ZXV00701,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      AZXV0060 IF NOT EQUAL        * yes
.
          MATCH     MTYPEI14,MESSTYPE            * I14 message ?
          GOTO      AZXV0100 IF EQUAL            * yes - not mandatory
.
          MATCH     "0",ALCNRRPM
          IF        @EQUAL
            MOVE      "ZXV.7: Referral Reason component 1 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
          GOTO      AZXV0100
.
.         If the field is mandatory, then make sure that the field is not null
.
AZXV0060  MATCH     BLANKSTR,ZXV00701
          GOTO      AZXV0070 IF NOT EQUAL
.
          MATCH     MTYPEI14,MESSTYPE            * I14 message ?
          GOTO      AZXV0100 IF EQUAL            * yes - not mandatory
.
          MATCH     "0",ALCNRRPM
          IF        @EQUAL
            MOVE      "ZXV.7: Referral Reason is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
          GOTO      AZXV0100
.
.         Make sure that there is the correct number of characters
.
AZXV0070  IF        FORM3 > 9
            MOVE      "ZXV.7: Referral Reason component 1 has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV0100
          ENDIF
.
.         Referral Reason (ZXV.7, Component 3)
.
          STRIP     ZXV00703
          MOVELPTR  ZXV00703,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZXV.7: Referral Reason component 3 not populated",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV0100
          ENDIF
.
.         Diagnosis (ZXV.39, Component 1)
.
AZXV0100  MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 4
            STRIP     ZXV03901[COUNTER]
            MOVELPTR  ZXV03901[COUNTER],FORM3    * field populated ?
            COMPARE   ZERO,FORM3
            GOTO      AZXV0150 IF EQUAL          * no
.
.           Check if the field is null
.
            MATCH     BLANKSTR,ZXV03901[COUNTER] * field null ?
            GOTO      AZXV0150 IF EQUAL          * yes
.
.           Make sure that there is the correct number of characters
.
            IF        FORM3 > 9
              MOVE      "ZXV.39: Diagnosis component 1 has too many characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
.
.           Diagnosis (ZXV.39, Component 3)
.
            STRIP     ZXV03903[COUNTER]
            MOVELPTR  ZXV03903[COUNTER],FORM3    * field populated ?
            IF        FORM3 = 0
              MOVE      "ZXV.39: Diagnosis component 3 not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
.
AZXV0150    ADD       ONE,COUNTER                * increment counter
          DO
.
.         Referral Department (ZXV.40, Component 1)
.
          STRIP     ZXV04001
          MOVELPTR  ZXV04001,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZXV.40: Department component 1 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV0350
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,ZXV04001
          IF        @EQUAL
            MOVE      "ZXV.40: Referral Department is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV0350
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 3
            MOVE      "ZXV.40: Department component 1 has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV0350
          ENDIF
.
.         Make sure the code is valid (alldepaf)
.
          PACK      KEY3,ZXV04001,SP20
          CALL      RDALDEP1
          IF        OVRCD = 1
            MOVE      "ZXV.40: Department component 1 not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV0350
          ENDIF
.
          CALL      CVIN0000                     * check if VINAH referral
.
          CALL      XRF10000                     * extra validation of RF1.1
.
.         Verify the code is active only if we are creating a referral
.
          MATCH     MTYPEI12,MESSTYPE            * I12 message ?
          GOTO      AZXV0200 IF NOT EQUAL        * no
.
          MATCH     "1",ALDEACTV
          IF        @EQUAL
            MOVE      "ZXV.40: Department component 1 not active",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV0350
          ENDIF
.
AZXV0200  CALL      VALF0000                     * validate facility (PV1.3/4)
          BRANCH    EXIT,AZXV0350                * error
.
.         Make sure the Referral Reason (ZXV.7) is valid and active for
.         the department if it's populated
.
          MOVELPTR  ZXV00701,FORM3
          COMPARE   ZERO,FORM3                   * referral reason populated ?
          GOTO      AZXV0250 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZXV00701            * referral reason null ?
          GOTO      AZXV0250 IF EQUAL            * yes
.
          PACK      KEY12,ALDEDEPT,ZXV00701,SP20
          CALL      RDALPRR1
          IF        OVRCD = 1
            MOVE      "ZXV.7: Referral Reason component 1 not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV0250
          ENDIF
.
.         Verify the code is active only if we are creating a referral
.
          MATCH     MTYPEI12,MESSTYPE            * I12 message ?
          GOTO      AZXV0250 IF NOT EQUAL        * no
.
          MATCH     "1",ALPRACTV
          IF        !@EQUAL
            MOVE      "ZXV.7: Referral Reason component 1 not active",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Make sure the diagnosis code (ZXV.39) is valid and active
.         for the department
.
AZXV0250  MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 4
            MOVELPTR  ZXV03901[COUNTER],FORM3    * field populated ?
            COMPARE   ZERO,FORM3
            GOTO      AZXV0300 IF EQUAL          * no
.
            MATCH     BLANKSTR,ZXV03901[COUNTER] * field null ?
            GOTO      AZXV0300 IF EQUAL          * yes
.
            PACK      KEY12,ALDEDEPT,ZXV03901[COUNTER],SP20
            CALL      RDALDIA1
            IF        OVRCD = 1
              MOVE      "ZXV.39: Diagnosis component 1 not valid",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
              GOTO      AZXV0300
            ENDIF
.
.           Verify the code is active only if we are creating a referral
.
            MATCH     MTYPEI12,MESSTYPE          * I12 message ?
            GOTO      AZXV0300 IF NOT EQUAL      * no
.
            MATCH     "1",ALDIACTV
            IF        !@EQUAL
              MOVE      "ZXV.39: Diagnosis component 1 not active",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
.
AZXV0300    ADD       ONE,COUNTER                * increment counter
          DO
.
.         Referral Department (ZXV.40, Component 3)
.
AZXV0350  STRIP     ZXV04003
          MOVELPTR  ZXV04003,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZXV.40: Department component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Source of Referral (ZXV.15, Component 1)
.         This field is not mandatory/required for VINAH Episode Referrals
.
          COMPARE   ZERO,PROGTYPE                * VINAH Referral ?
          GOTO      AZXV0405 IF NOT EQUAL        * yes
.
          STRIP     ZXV01501
          MOVELPTR  ZXV01501,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZXV.15: Source of Referral component 1 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV0400
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,ZXV01501
          IF        @EQUAL
            MOVE      "ZXV.15: Source of Referral is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV0400
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 3
            MOVE      "ZXV.15: Source of Referral component 1 has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV0400
          ENDIF
.
.         Source of Referral (ZXV.15, Component 3)
.
AZXV0400  STRIP     ZXV01503
          MOVELPTR  ZXV01503,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZXV.15: Source of Referral component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Visit Interpreter Flag (ZXV.32, Component 1)
.
AZXV0405  STRIP     ZXV03201
          MOVELPTR  ZXV03201,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      AZXV0450 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZXV03201            * field null ?
          GOTO      AZXV0450 IF EQUAL            * no
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 1
            MOVE      "ZXV.32: Visit Interpreter Flag component 1 has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV0450
          ENDIF
.
          REP       UPPLOW,ZXV03201              * convert to uppercase
          MATCH     ANSY,ZXV03201                * "Y" ?
          GOTO      AZXV0450 IF EQUAL            * yes
.
          MATCH     ANSN,ZXV03201                * "N" ?
          GOTO      AZXV0450 IF EQUAL            * yes
.
          MOVE      "ZXV.32: Visit Interpreter Flag component 1 not valid",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
.
.         Type of Referral (ZXV.34, Component 1)
.
AZXV0450  STRIP     ZXV03401
          MOVELPTR  ZXV03401,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      AZXV0550 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZXV03401            * field null ?
          GOTO      AZXV0550 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 3
            MOVE      "ZXV.34: Type of Referral component 1 has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV0500
          ENDIF
.
.         Make sure the code is valid and active for Cat RI
.
          PACK      KEY5,ANSR,ANSI,ZXV03401,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ZXV.34: Type of Referral component 1 not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV0500
          ENDIF
.
.         Verify the code is active only if we are creating a referral
.
          MATCH     MTYPEI12,MESSTYPE            * I12 message ?
          GOTO      AZXV0500 IF NOT EQUAL        * no
.
          MATCH     ANSA,PTCOACTV
          IF        !@EQUAL
            MOVE      "ZXV.34: Type of Referral component 1 not active",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Type of Referral (ZXV.34, Component 3)
.
AZXV0500  STRIP     ZXV03403
          MOVELPTR  ZXV03403,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZXV.34: Type of Referral component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Preferred Site (ZXV.35, Component 1)
.
AZXV0550  CALL      VSIT0000                     * valid site ?
          BRANCH    EXIT,AZXV0701                * no
.
.         Now that we have a Preferred Site, we need to make sure the Source
.         of Referral (ZXV.15) is valid and active for Cat <ostcatg>, but
.         this only applies to non-VINAH Referrals
.
          COMPARE   ZERO,PROGTYPE                * VINAH Referral ?
          GOTO      AZXV0600 IF NOT EQUAL        * yes
.
          MATCH     SP2,OSTCATG
          IF        @EQUAL
            MOVE      "ZXV.15: Source of Referral Category for site not found",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV0600
          ENDIF
.
          PACK      KEY5,OSTCATG,ZXV01501,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ZXV.15: Source of Referral component 1 not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV0600
          ENDIF
.
.         Verify the code is active only if we are creating a referral
.
          MATCH     MTYPEI12,MESSTYPE            * I12 message ?
          GOTO      AZXV0600 IF NOT EQUAL        * no
.
          MATCH     ANSA,PTCOACTV
          IF        !@EQUAL
            MOVE      "ZXV.15: Source of Referral component 1 not active",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Make sure if the Assigned Patient (PV1.3) is populated, that the
.         code is valid for the site
.
AZXV0600  STRIP     PV100301
          MOVELPTR  PV100301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      AZXV0700 IF EQUAL            * no
.
          MATCH     BLANKSTR,PV100301            * field null ?
          GOTO      AZXV0700 IF EQUAL            * yes
.
          CLOSE     OUTCLIA1
          PACK      FILENAME,OSTFILE,FILCLIA1
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTCLIA1,FILENAME
          TRAPCLR   IO
          IF        OVRCD = 1
            MOVE      "PV1.3: Unable to open Clinic ID file",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV0700
          ENDIF
.
          PACK      DIM6A,ZXV03501,SP6
          PACK      DIM6B,PV100301,SP6
AZXV0620  PACK      KEY20,DIM6A,DIM6B,CURRDATE,SP20
.0929751  PACK      KEY20,DIM6A,DIM6B,RF100701,SP20
          CALL      RDCLIA1
          IF        OVRCD = 1
            CALL      RDPCLIA1
            BRANCH    OVRCD,AZXV0650
.
            MATCH     DIM6A,OCASITE              * same site still ?
            GOTO      AZXV0650 IF NOT EQUAL      * no
.
            MATCH     DIM6B,OCACLIN              * yes - same clinic still ?
            GOTO      AZXV0650 IF NOT EQUAL      * no
          ENDIF
.
.         Verify the code is active only if we are creating a referral

          MATCH     MTYPEI12,MESSTYPE          * I12 message ?
          GOTO      AZXV0700 IF NOT EQUAL      * no
.
          MATCH     "1",OTCLIACT
          IF        @EQUAL
            MOVE      "PV1.3: Clinic ID not active",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          GOTO      AZXV0700                   * yes
.
AZXV0650  MOVE      "PV1.3: Clinic ID not valid",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
.
.         Validate ZXV.15 (Component 3)
.
AZXV0700  COMPARE   ZERO,PROGTYPE                * VINAH Referral ?
          GOTO      AZXV0701 IF NOT EQUAL        * yes
.
          CALL      OSIT0000
.
.         Date Referral Received
.
AZXV0701  STRIP     ZXV03601
          MOVELPTR  ZXV03601,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZXV.36: Date Referral Received not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV0750
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,ZXV03601
          IF        @EQUAL
            MOVE      "ZXV.36: Date Referral Received is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV0750
          ENDIF
.
          MOVE      ZXV03601,DIM14
          MOVE      "ZXV.36",FIELDID
          MOVE      ONE,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
.         Make sure that the Date Referral Received is not less than the
.         Referral Date (RF1.7)
.         Note: The following validation code was commented out in response to
.               a request from WAH.  Given that they are the only ones using
.               this functionality, we have decided to allow this, even though
.               it should be there if the interface is to remain generic.
.               (CAR 304138)
.
.         MATCH     RF100701,ZXV03601
.         IF        @LESS
.           MOVE      "ZXV.36: Date Referral Received less than Referral Date",ERRORDSC
.           MOVE      "207",ERRORNUM
.           CALL      EROR0000
.         ENDIF
.
.         Make sure that the Referral Closed Date (PV1.45) is not less than the
.         Date Referral Received (ZXV.36)
.
          MATCH     ZXV03601,PV104501
          IF        @LESS
            MOVE      "ZXV.36: Referral Closed Date less than Date Referral Received",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Clinic Type (ZXV.37, Component 1)
.
AZXV0750  STRIP     ZXV03701
          MOVELPTR  ZXV03701,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZXV.37: Clinic Type component 1 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV0800
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,ZXV03701
          IF        @EQUAL
            MOVE      "ZXV.37: Clinic Type is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV0800
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 6
            MOVE      "ZXV.37: Clinic Type component 1 has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV0800
          ENDIF
.
          CLOSE     OUTCTYA1
          PACK      FILENAME,OSTFILE,FILCTYA1
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTCTYA1,FILENAME
          TRAPCLR   IO
          IF        OVRCD = 1
            MOVE      "ZXV.37: Unable to open Clinic Type file",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV0800
          ENDIF
.
          PACK      DIM6,ZXV03501,SP6
          PACK      KEY12,DIM6,ZXV03701,SP20
          CALL      RDCTYA1
          IF        OVRCD = 1
            MOVE      "ZXV.37: Clinic Type component 1 not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV0800
          ENDIF
.
.         Verify the code is active only if we are creating a referral
.
          MATCH     MTYPEI12,MESSTYPE            * I12 message ?
          GOTO      AZXV0800 IF NOT EQUAL        * no
.
          MATCH     "1",OCTACT
          IF        @EQUAL
            MOVE      "ZXV.37: Clinic Type component 1 not active",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Clinic Type (ZXV.37, Component 3)
.
AZXV0800  STRIP     ZXV03703
          MOVELPTR  ZXV03703,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZXV.37: Clinic Type component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Note: Presenting Complaint (ZXV.38) is an optional free text field
.               and as such requires no validation.
.
.         Last Update Date/Time (ZXV.41)
.
          STRIP     ZXV04101
          MOVELPTR  ZXV04101,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZXV.41: Last Update Date/Time not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV0900
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,ZXV04101
          IF        @EQUAL
            MOVE      "ZXV.41: Last Update Date/Time is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV0900
          ENDIF
.
          MOVE      ZXV04101,DIM14
          MOVE      "ZXV.41",FIELDID
          MOVE      ONE,DATFLAG1
          MOVE      ONE,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
          MATCH     MTYPEI12,MESSTYPE            * I12 message ?
          GOTO      AZXV0900 IF EQUAL            * yes - no further validation
.
.         We have an update or delete message, so make sure that the data
.         sent is current compared to the data on file, otherwise it should
.         be rejected.
.
          MATCH     SP8,SAVEUDAT
          GOTO      AZXV0900 IF EQUAL
.
          MATCH     SAVEUDAT,ZXV04101            * same last update date ?
          GOTO      AZXV0850 IF EQUAL            * yes - check time
          IF        @LESS
            MOVE      "ZXV.41: Data out of date",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
          GOTO      AZXV0900
.
.         The dates are the same, so check that the time is valid
.
AZXV0850  UNPACK    ZXV04101,KEY8,DIM2H,DIM2N,DIM2S
          PACK      DIM8,DIM2H,COLON,DIM2N,COLON,DIM2S
          MATCH     DIM8,SAVEUTIM
          IF        !@LESS
            MOVE      "ZXV.41: Data out of date",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Reason for Canc/Rej/Inact/Clos (ZXV.47, Component 1)
.
AZXV0900  STRIP     ZXV04701
          MOVELPTR  ZXV04701,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      AZXV0905 IF NOT EQUAL        * yes
.
          COMPARE   ZERO,PROGTYPE                * no - VINAH Episode Referral ?
          GOTO      AZXV0950 IF EQUAL            * no
.
          MATCH     "5",RF100101                 * yes - status of rejected ?
          IF        !@EQUAL
            MATCH     "4",RF100101               * no - status of cancelled ?
            GOTO      AZXV0950 IF NOT EQUAL      * no
          ENDIF
.
          MATCH     "5",RF100101
          IF        @EQUAL
            MOVE      "ZXV.47: Reason for Rejection not populated",ERRORDSC
          ELSE
            MOVE      "ZXV.47: Reason for Cancellation not populated",ERRORDSC
          ENDIF
          MOVE      "101",ERRORNUM
          CALL      EROR0000
          GOTO      AZXV0950
.
AZXV0905  MATCH     BLANKSTR,ZXV04701            * field null ?
          GOTO      AZXV0910 IF NOT EQUAL        * no
.
          COMPARE   ZERO,PROGTYPE                * no - VINAH Episode Referral ?
          GOTO      AZXV0950 IF EQUAL            * no
.
          MATCH     "5",RF100101                 * yes - status of rejected ?
          IF        !@EQUAL
            MATCH     "4",RF100101               * no - status of cancelled ?
            GOTO      AZXV0950 IF NOT EQUAL      * no
          ENDIF
.
          MATCH     "5",RF100101
          IF        @EQUAL
            MOVE      "ZXV.47: Reason for Rejection is mandatory",ERRORDSC
          ELSE
            MOVE      "ZXV.47: Reason for Cancellation is mandatory",ERRORDSC
          ENDIF
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      AZXV0950
.
.         Check if reason fields are relevant based on the referral status
.
AZXV0910  MOVE      RF100101,FORM1               * load status field
          COMPARE   TWO,FORM1                    * waiting or active ?
          GOTO      AZXV0950 IF LESS             * yes
.
.         Load the Category which is relevant to the record status.
.            Cat rr - Reason for Rejection
.            Cat LL - Reason for Closure
.            Cat LN - Reason for Cancellation
.            Cat LI - Reason Inactive
.
          LOAD      CATEGORY,FORM1,SP2,CATLL,CATLI,CATLN,CATrr
          LOAD      REASDESC,FORM1,SP20,REASDSC2,REASDSC3,REASDSC4,REASDSC5
.
.         Reason for Canc/Rej/Inact/Clos (ZXV.47, Component 3)
.
          STRIP     ZXV04703
          MOVELPTR  ZXV04703,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZXV.47: ",ERRORDSC
            ENDSET    ERRORDSC
            APPEND    REASDESC,ERRORDSC
            APPEND    "component 3 not populated",ERRORDSC
            RESET     ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Make sure the code is valid and active
.
          PACK      KEY5,CATEGORY,ZXV04701,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ZXV.47: ",ERRORDSC
            ENDSET    ERRORDSC
            APPEND    REASDESC,ERRORDSC
            APPEND    "component 1 not valid",ERRORDSC
            RESET     ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV0950
          ENDIF
.
.         Verify the code is active only if we are creating a referral
.
          MATCH     MTYPEI12,MESSTYPE            * I12 message ?
          GOTO      AZXV0950 IF NOT EQUAL        * no
.
          MATCH     ANSA,PTCOACTV
          IF        !@EQUAL
            MOVE      "ZXV.47: ",ERRORDSC
            ENDSET    ERRORDSC
            APPEND    REASDESC,ERRORDSC
            APPEND    "component 1 not active",ERRORDSC
            RESET     ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Referring Practice - Component 1
.
AZXV0950  STRIP     ZXV04901
          MOVELPTR  ZXV04901,FORM3               * field populated ?
          MOVE      FORM3,SAVFORM3
          IF        FORM3 = 0
            GOTO      AZXV1100                   * no
          ENDIF
.
          MATCH     BLANKSTR,ZXV04901            * null field ?
          IF        @EQUAL
            MOVE      SP10,ALRERHCR
            MOVE      SP2,ALRERHCT
            GOTO      AZXV1100
          ENDIF
.
          IF        FORM3 > 10
            MOVE      "ZXV.49: Referring Practice has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV1000
          ENDIF
.
          PACK      ALRERHCR,ZXV04901,SP70       * load practice
          MOVE      " 1",ALRERHCT                * load practice count
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.
AZXV1000  STRIP     ZXV04903
          MOVELPTR  ZXV04903,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "ZXV.49: Practice coding system not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ELSE
            MATCH     BLANKSTR,ZXV04903          * null field ?
            IF        @EQUAL
              MOVE      "ZXV.49: Practice coding system is mandatory",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
.         Check that the practice code exists on file
.
          PACK      KEY12,ALRERHCR,SP1,ONE,SP70
          CALL      RDPMHCG1
          IF        OVRCD = 1
            MOVE      "ZXV.49: Referring Practice not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV1050
          ENDIF
.
.         Practice must be active unless referral status=rejected (TSK 0925875)
.
          MATCH     "5",RF100101                 * status of rejected ?
          GOTO      AZXV1050 IF EQUAL
.
          MATCH     "0",PMHGSTTS
          IF        !@EQUAL
            MOVE      "ZXV.49: Referring Practice status not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
AZXV1050  MOVELPTR  SAVEPROV[1],FORM2
          COMPARE   ZERO,FORM2                   * Referring GP populated ?
          GOTO      AZXV1100 IF EQUAL            * no - finished
.
          MATCH     SP10,SAVEPROV[1]             * blank Referring HCP ?
          GOTO      AZXV1100 IF EQUAL            * yes - finished
.
          MATCH     BLANKSTR,SAVEPROV[1]         * null Referring HCP ?
          GOTO      AZXV1100 IF EQUAL            * yes - finished
.
.         The Referring HCP and Practice are both populated so validate that
.         they are linked
.
          PACK      KEY10,SAVEPROV[1],SP10
          PACK      KEY20,KEY10,ALRERHCR,SP10
          CALL      RDPMHCL1
          IF        OVRCD = 1
            MOVE      "ZXV.49: Referring HCP and Practice not linked",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Validate Event Program. (ZXV.50)
.
AZXV1100  STRIP     ZXV05001
          MOVELPTR  ZXV05001,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      AZXV1150 IF NOT EQUAL        * yes
.
          MATCH     MTYPEI14,MESSTYPE            * I14 message ?
          GOTO      AZXV1250 IF EQUAL            * yes - not mandatory
.
          MATCH     "1",ALCNEVPM
          IF        @EQUAL
            MOVE      "ZXV.50: Event Program not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
          GOTO      AZXV1250
.
.         If the field is mandatory, then make sure that the field is not null
.
AZXV1150  MATCH     BLANKSTR,ZXV05001
          GOTO      AZXV1200 IF NOT EQUAL
.
          MATCH     MTYPEI14,MESSTYPE            * I14 message ?
          GOTO      AZXV1250 IF EQUAL            * yes - not mandatory
.
          MATCH     "1",ALCNEVPM
          IF        @EQUAL
            MOVE      "ZXV.50: Event Program is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
          GOTO      AZXV1250
.
.         Make sure that there is the correct number of characters
.
AZXV1200  IF        FORM3 > 3
            MOVE      "ZXV.50: Event Program has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV1250
          ENDIF
.
.         Make sure the code is valid for Cat zG
.
          PACK      KEY5,CATzG,ZXV05001,SP5
          CALL      RDCODE1                      * valid code ?
          IF        OVRCD = 1
            MOVE      "ZXV.50: Event Program not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV1250
          ENDIF
.
.         Verify the code is active only if we are creating a referral
.
          MATCH     MTYPEI12,MESSTYPE            * I12 message ?
          GOTO      AZXV1250 IF NOT EQUAL        * no
.
          MATCH     ANSA,PTCOACTV
          IF        !@EQUAL
            MOVE      "ZXV.50: Event Program not active",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Validate Date Referral Accepted (ZXV.52)
.
AZXV1250  STRIP     ZXV05201
          MOVELPTR  ZXV05201,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      AZXV1300 IF NOT EQUAL        * yes
.
          MATCH     MTYPEI14,MESSTYPE            * I14 message ?
          GOTO      AZXV1400 IF EQUAL            * yes - not mandatory
.
          MATCH     "5",RF100101                 * rejected status ?
          GOTO      AZXV1400 IF EQUAL            * yes - not mandatory
.
          MATCH     "1",ALCNDRAM
          IF        @EQUAL
            MOVE      "ZXV.52: Date Referral Accepted not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
          GOTO      AZXV1400
.
.         The field is mandatory, so make sure that the field is not null
.
AZXV1300  MATCH     BLANKSTR,ZXV05201
          GOTO      AZXV1350 IF NOT EQUAL
.
          MATCH     MTYPEI14,MESSTYPE            * I14 message ?
          GOTO      AZXV1400 IF EQUAL            * yes - not mandatory
.
          MATCH     "1",ALCNDRAM
          IF        @EQUAL
            MOVE      "ZXV.52: Date Referral Accepted is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
          GOTO      AZXV1400
.
AZXV1350  MOVE      ZXV05201,DIM14
          MOVE      "ZXV.52",FIELDID
          IF        PROGTYPE = 0
            MOVE      ZERO,DATFLAG1         * allow any valid date (non-VINAH)
          ELSE
            MOVE      ONE,DATFLAG1          * no future date allowed (VINAH)
          ENDIF
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
.         Validate Referral In Service Type. (ZXV.53)
.
AZXV1400  STRIP     ZXV05301
          MOVELPTR  ZXV05301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      AZXV1450 IF NOT EQUAL        * yes
.
          MATCH     MTYPEI14,MESSTYPE            * I14 message ?
          GOTO      AZXV1550 IF EQUAL            * yes - not mandatory
.
          MATCH     "1",ALCNRISM
          IF        @EQUAL
            MOVE      "ZXV.53: Referral In Service Type not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
          GOTO      AZXV1550
.
.         If the field is mandatory, then make sure that the field is not null
.
AZXV1450  MATCH     BLANKSTR,ZXV05301
          GOTO      AZXV1500 IF NOT EQUAL
.
          MATCH     MTYPEI14,MESSTYPE            * I14 message ?
          GOTO      AZXV1550 IF EQUAL            * yes - not mandatory
.
          MATCH     "1",ALCNRISM
          IF        @EQUAL
            MOVE      "ZXV.53: Referral In Service Type is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
          GOTO      AZXV1550
.
.         Make sure that there is the correct number of characters
.
AZXV1500  IF        FORM3 > 3
            MOVE      "ZXV.53: Referral In Service Type has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV1550
          ENDIF
.
.         Make sure the code is valid for Cat zU
.
          PACK      KEY5,CATzU,ZXV05301,SP5
          CALL      RDCODE1                      * valid code ?
          IF        OVRCD = 1
            MOVE      "ZXV.53: Referral In Service Type not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV1550
          ENDIF
.
.         Verify the code is active only if we are creating a referral
.
          MATCH     MTYPEI12,MESSTYPE            * I12 message ?
          GOTO      AZXV1550 IF NOT EQUAL        * no
.
          MATCH     ANSA,PTCOACTV
          IF        !@EQUAL
            MOVE      "ZXV.53: Referral In Service Type not active",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Validate Referral In Clinical Referral Date (ZXV.54)
.
AZXV1550  STRIP     ZXV05401
          MOVELPTR  ZXV05401,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      AZXV1600 IF NOT EQUAL        * yes
.
          MATCH     MTYPEI14,MESSTYPE            * I14 message ?
          GOTO      AZXV1700 IF EQUAL            * yes - not mandatory
.
          MATCH     "1",ALCNRICM
          IF        @EQUAL
            MOVE      "ZXV.54: Referral In Clinical Referral Date not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
          GOTO      AZXV1700
.
.         The field is mandatory, so make sure that the field is not null
.
AZXV1600  MATCH     BLANKSTR,ZXV05401
          GOTO      AZXV1650 IF NOT EQUAL
.
          MATCH     MTYPEI14,MESSTYPE            * I14 message ?
          GOTO      AZXV1700 IF EQUAL            * yes - not mandatory
.
          MATCH     "1",ALCNRICM
          IF        @EQUAL
            MOVE      "ZXV.54: Referral In Clinical Referral Date is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
          GOTO      AZXV1700
.
AZXV1650  MOVE      ZXV05401,DIM14
          MOVE      "ZXV.54",FIELDID
          MOVE      ONE,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
.         Validate Visit Type. (ZXV.55)
.
AZXV1700  STRIP     ZXV05501
          MOVELPTR  ZXV05501,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      AZXV1750 IF NOT EQUAL        * yes
.
          MATCH     MTYPEI14,MESSTYPE            * I14 message ?
          GOTO      AZXV1900 IF EQUAL            * yes - not mandatory
.
          MATCH     "1",ALCNVTYM
          IF        @EQUAL
            MOVE      "ZXV.55: Visit Type not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
          GOTO      AZXV1900
.
.         If the field is mandatory, then make sure that the field is not null
.
AZXV1750  MATCH     BLANKSTR,ZXV05501
          GOTO      AZXV1800 IF NOT EQUAL
.
          MATCH     MTYPEI14,MESSTYPE            * I14 message ?
          GOTO      AZXV1900 IF EQUAL            * yes - not mandatory
.
          MATCH     "1",ALCNVTYM
          IF        @EQUAL
            MOVE      "ZXV.55: Visit Type is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
          GOTO      AZXV1900
.
.         Make sure that there is the correct number of characters
.
AZXV1800  IF        FORM3 > 3
            MOVE      "ZXV.55: Visit Type has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV9999
          ENDIF
.
.         Make sure the code is valid for Cat CV
.
          PACK      KEY5,ANSC,ANSV,ZXV05501,SP5
          CALL      RDCODE1                      * valid code ?
          IF        OVRCD = 1
            MOVE      "ZXV.55: Visit Type not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV9999
          ENDIF
.
.         Verify the code is active only if we are creating a referral
.
          MATCH     MTYPEI12,MESSTYPE            * I12 message ?
          GOTO      AZXV1900 IF NOT EQUAL        * no
.
          MATCH     ANSA,PTCOACTV
          IF        !@EQUAL
            MOVE      "ZXV.55: Visit Type not active",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Referral In Reason (ZXV.98 - Component 1)
.
AZXV1900  MOVE      SP70,SVALPROB                * clear problem code
          STRIP     ZXV09801
.
.0894011  COMPARE   ZERO,PROGTYPE
.0894011  GOTO      AZXV1940 IF NOT EQUAL        * always validate for VINAH
.
          MOVELPTR  ZXV09801,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      AZXV2000 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZXV09801            * null field ?
          GOTO      AZXV2000 IF EQUAL            * yes
.
          GOTO      AZXV2000                     * ignore field (TSK 0902602)
.
.         Make sure that there is the correct number of characters
.
AZXV1920  IF        FORM3 > 1
            MOVE      "ZXV.98: Referral In Reason has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV1970
          ENDIF
.
.         Check for the first active problem code where the HDP default matches
.         the value sent
.
AZXV1940  PACK      D1,ZXV09801,SP1
          PACK      KEY12,ZXV04001,SP70
          CALL      RSALPRR1                     * Position on Problem codes
AZXV1950  CALL      RKALPRR1                     * read next record
          BRANCH    OVRCD,AZXV1960               * end of file
.
          MATCH     ALPRDEPT,ZXV04001            * same department ?
          GOTO      AZXV1960 IF NOT EQUAL        * no
.
          MATCH     SP1,D1
          IF        @EQUAL
            MATCH     "1",ALPRDFCD               * default code ?
            GOTO      AZXV1950 IF NOT EQUAL      * no - get next record
          ELSE
            MATCH     ALPRMHDP,D1                * same HDP 1st char ?
            GOTO      AZXV1950 IF NOT EQUAL      * no - get next record
          ENDIF
.
.         The code exists, so make sure it is active
.
          MATCH     "0",ALPRACTV                 * inactive ?
          GOTO      AZXV1950 IF EQUAL            * yes - ignore record
.
          MOVE      ALPRPROB,SVALPROB            * save Problem code
          GOTO      AZXV1970
.
AZXV1960  MOVE      "ZXV.98: Referral In Reason HDP code not found",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
.
.         Referral In Reason (ZXV.98 - Component 3)
.
AZXV1970  MOVELPTR  ZXV09801,FORM3               * component 1 populated ?
          COMPARE   ZERO,FORM3
          GOTO      AZXV2000 IF EQUAL            * no
.
          STRIP     ZXV09803
          MOVELPTR  ZXV09803,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZXV.98: Referral In Reason component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      AZXV2000
          ENDIF
.
.         Episode Health Condition (ZXV.99, Component 1)
.
AZXV2000  MOVE      SP70,SVALDIA1                * clear condition code 1
          MOVE      SP70,SVALDIA2                * clear condition code 2
          MOVE      SP70,SVALDIA3                * clear condition code 3
          MOVE      SP70,SVALDIA4                * clear condition code 4
          MOVE      SP70,SVALDIA5                * clear condition code 5
          MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 6
            STRIP     ZXV09901[COUNTER]
            MOVELPTR  ZXV09901[COUNTER],FORM3    * field populated ?
            COMPARE   ZERO,FORM3
            GOTO      AZXV2030 IF NOT EQUAL      * validate if not blank
.
.0892651    IF        COUNTER = 1
.0892651      IF        PROGTYPE = 2 | PROGTYPE = 8 | PROGTYPE = 9
.0892651        MOVE      "ZXV.99: Episode Health Condition mandatory",ERRORDSC
.0892651        MOVE      "207",ERRORNUM
.0892651        CALL      EROR0000
.0892651        GOTO      AZXV2300
.0892651      ELSE
.0892651        GOTO      AZXV2050               * not mandatory for progtype
.0892651      ENDIF
.0892651    ELSE
              GOTO      AZXV2050                 * only 1 condition mandatory
.0892651    ENDIF
.
.           Check if the field is null
.
AZXV2030    MATCH     BLANKSTR,ZXV09901[COUNTER] * field null ?
            GOTO      AZXV2050 IF EQUAL          * yes
.
.           Make sure that there is the correct number of characters
.
            IF        FORM3 > 4
              MOVE      "ZXV.99: Episode Health Condition component 1 has too many characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
.
.           Diagnosis (ZXV.99, Component 3)
.
            STRIP     ZXV09903[COUNTER]
            MOVELPTR  ZXV09903[COUNTER],FORM3    * field populated ?
            IF        FORM3 = 0
              MOVE      "ZXV.99: Episode Health Condition component 3 not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
.
AZXV2050    ADD       ONE,COUNTER                * increment counter
          DO
.
.         Make sure the health condition code (ZXV.99) is valid and active
.         for the department
.
AZXV2100  MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 6
            MOVELPTR  ZXV09901[COUNTER],FORM3    * field populated ?
            COMPARE   ZERO,FORM3
            GOTO      AZXV2200 IF EQUAL          * no
.
            MATCH     BLANKSTR,ZXV09901[COUNTER] * field null ?
            GOTO      AZXV2200 IF EQUAL          * yes
.
            CALL      VZXV0990
            BRANCH    EXIT,AZXV2200              * invalid code ?
.
.           Verify the code is active only if we are creating a referral
.
            MATCH     MTYPEI12,MESSTYPE          * I12 message ?
            GOTO      AZXV2200 IF NOT EQUAL      * no
.
            MATCH     "1",ALDIACTV
            IF        !@EQUAL
              MOVE      "ZXV.99: Health Condition component 1 not active",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
.
AZXV2200    ADD       ONE,COUNTER                * increment counter
          DO
.
.         ZXV.100  Usual Accommodation (CE)
.
AZXV2300
.
.         ZXV.101  Triage Date (DT)
.
AZXV2400  STRIP     ZXV10101
          MOVELPTR  ZXV10101,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      AZXV2500 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZXV10101            * field null ?
          GOTO      AZXV2500 IF EQUAL            * yes
.
          MOVE      ZXV10101,DIM14
          MOVE      "ZXV101",FIELDID
          MOVE      ONE,DATFLAG1                 * no future date allowed
          MOVE      ZERO,DATFLAG2                * date only
          CALL      VDTM0000                     * date/time validation
.
.         ZXV.102  Referral-In Receipt Acknowledgement Date (DT)
.
AZXV2500  STRIP     ZXV10201
          MOVELPTR  ZXV10201,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      AZXV9000 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZXV10201            * field null ?
          GOTO      AZXV9000 IF EQUAL            * yes
.
          MOVE      ZXV10201,DIM14
          MOVE      "ZXV102",FIELDID
          MOVE      ONE,DATFLAG1                 * no future date allowed
          MOVE      ZERO,DATFLAG2                * date only
          CALL      VDTM0000                     * date/time validation
.
AZXV9000
.
AZXV9999  RETURN
+
.*****************************************************************************
.*                            VZXV0990                                       *
.*      Check for the first code where the HDP default matches the value sent*
.*****************************************************************************
VZXV0990  PACK      D4,ZXV09901[COUNTER],SP4
          PACK      KEY12,ZXV04001,SP70
          CALL      RSALDIA1                     * Position on codes
VZXV0950  CALL      RKALDIA1                     * read next record
          BRANCH    OVRCD,VZXV0960               * end of file
.
          MATCH     ALDIDEPT,ZXV04001            * same department ?
          GOTO      VZXV0960 IF NOT EQUAL        * no
.
          MATCH     ALDIMHDP,D4                  * same HDP ?
          GOTO      VZXV0950 IF NOT EQUAL        * no - get next record
.
          STORE     ALDIDIAG,COUNTER,SVALDIA1,SVALDIA2,SVALDIA3,SVALDIA4,SVALDIA5
          MOVE      ZERO,EXIT
          GOTO      VZXV0999                     * valid code
.
VZXV0960  MOVE      "ZXV.99: Health Condition HDP code not found",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
          MOVE      ONE,EXIT
.
VZXV0999  RETURN
+
.*****************************************************************************
.*                            VPR10000             Called by: PROC0000       *
.*      Validate that the mandatory PR1 fields are populated or null.        *
.*****************************************************************************
.
.         Load and validate the Set ID.
.
VPR10000  SQUEEZE   PR100101
          MOVELPTR  PR100101,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "PR1.1: Set ID not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VPR11000
          ENDIF
.
          MATCH     BLANKSTR,PR100101            * field null ?
          IF        @EQUAL
            MOVE      "PR1.1: Set ID is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPR11000
          ENDIF
.
          IF        FORM3 <> 1
            MOVE      "PR1.1: Set ID not correct length",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPR11000
          ENDIF
.
          TYPE      PR100101
          IF        !@EQUAL
            MOVE      "PR1.1: Set ID not numeric",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VPR11000
          ENDIF
.
          MATCH     "1",PR100101
          IF        !@EQUAL
            MOVE      "PR1.1: Set ID not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPR11000
          ENDIF
.
.         Validate Contact Purpose (PR1.3)
.
VPR11000  STRIP     PR100301
          MOVELPTR  PR100301,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "PR1.3: Contact Purpose not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VPR12000
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,PR100301
          IF        @EQUAL
            MOVE      "PR1.3: Contact Purpose is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPR12000
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 3
            MOVE      "PR1.3: Contact Purpose has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPR12000
          ENDIF
.
.         Make sure the code is valid for Cat zH
.
          PACK      KEY5,CATzH,PR100301,SP5
          CALL      RDCODE1                      * field valid ?
          IF        OVRCD = 1
            MOVE      "PR1.3: Contact Purpose not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VPR12000
          ENDIF
.
.         Validate Procedure Date/Time (PR1.5)
.
VPR12000  STRIP     PR100501
          MOVELPTR  PR100501,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "PR1.5: Procedure DateTime not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VPR13000
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,PR100501
          IF        @EQUAL
            MOVE      "PR1.5: Procedure DateTime is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPR13000
          ENDIF
.
.         Validate Session Type (PR1.6)
.
VPR13000  STRIP     PR100601
          MOVELPTR  PR100601,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "PR1.6: Session Type not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VPR19999
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,PR100601
          IF        @EQUAL
            MOVE      "PR1.6: Session Type is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPR19999
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 3
            MOVE      "PR1.6: Session Type has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPR19999
          ENDIF
.
.         Make sure the code is valid for Cat zI
.
          PACK      KEY5,CATzI,PR100601,SP5
          CALL      RDCODE1                      * field valid ?
          IF        OVRCD = 1
            MOVE      "PR1.6: Session Type not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VPR19999
          ENDIF
.
VPR19999  RETURN
+
.*****************************************************************************
.*                            VROL0000             Called by: PROC0000       *
.*      Validate that the mandatory ROL fields are populated or null.        *
.*****************************************************************************
.
.         Validate Role Instance ID (ROL.1)
.
VROL0000  STRIP     ROL00101
          MOVELPTR  ROL00101,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ROL.1: Role Instance ID not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VROL1000
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,ROL00101
          IF        @EQUAL
            MOVE      "ROL.1: Role Instance ID is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VROL1000
          ENDIF
.
.         Validate Action Code (ROL.2)
.
VROL1000  STRIP     ROL00201
          MOVELPTR  ROL00201,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ROL.2: Action Code not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VROL2000
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,ROL00201
          IF        @EQUAL
            MOVE      "ROL.2: Action Code is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VROL2000
          ENDIF
.
.         Validate Role-ROL (ROL.3)
.
VROL2000  STRIP     ROL00301
          MOVELPTR  ROL00301,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ROL.3: Role-ROL not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VROL3000
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,ROL00301
          IF        @EQUAL
            MOVE      "ROL.3: Role_ROL is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VROL3000
          ENDIF
.
.         Validate Role Person (ROL.4)
.
VROL3000  STRIP     ROL00401
          MOVELPTR  ROL00401,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ROL.4: Role Person not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VROL4000
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,ROL00401
          IF        @EQUAL
            MOVE      "ROL.4: Role Person is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VROL4000
          ENDIF
.
.         Validate Contact Delivery Mode (ROL.10)
.
VROL4000  STRIP     ROL01001
          MOVELPTR  ROL01001,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ROL.10: Delivery Mode not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VROL9999
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,ROL01001
          IF        @EQUAL
            MOVE      "ROL.10: Delivery Mode is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VROL9999
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 3
            MOVE      "ROL.10: Delivery Mode has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VROL9999
          ENDIF
.
.         Make sure the code is valid for Cat zL
.
          PACK      KEY5,CATzL,ROL01001,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ROL.10: Delivery Mode not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VROL9999
          ENDIF
.
VROL9999  RETURN
+
.*****************************************************************************
.*                            VPRD0000             Called by: PROC0000       *
.*      Validate that the mandatory PRD fields are populated or null.        *
.*****************************************************************************
.
.         Provider Role (PRD.1, Component 1)
.
VPRD0000  STRIP     PRD00101
          MOVELPTR  PRD00101,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "PRD.1: Provider Role component 1 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VPRD0500
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,PRD00101
          IF        @EQUAL
            MOVE      "PRD.1: Provider Role is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPRD0500
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 2
            MOVE      "PRD.1: Provider Role must be two characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPRD0500
          ENDIF
.
.         Check that the type is "RP" (Referring Provider) or
.         "RT" (Referred To Provider)
.
          MATCH     "RP",PRD00101
          GOTO      VPRD0500 IF EQUAL
.
          MATCH     "RT",PRD00101
          GOTO      VPRD0500 IF EQUAL
.
          MOVE      "PRD.1: Provider Role component 1 not valid",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
.
.         Provider Role (PRD.1, Component 3)
.
VPRD0500  STRIP     PRD00103
          MOVELPTR  PRD00103,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "PRD.1: Provider Role component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Provider Identifier (PRD.7, Component 1)
.
VPRD1000  STRIP     PRD00701
          MOVELPTR  PRD00701,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "PRD.7: Provider ID not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VPRD2000
          ENDIF
.
          MATCH     BLANKSTR,PRD00701            * field null ?
          GOTO      VPRD3000 IF EQUAL            * yes     (CAR 295865)
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 10
            MOVE      "PRD.1: Provider ID has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPRD2000
          ENDIF
.
.         Make sure that the provider code is a valid, active GP on pmshcpaf
.
          PACK      KEY10,PRD00701,SP10
          CALL      RDPMHCP1
          IF        OVRCD = 1
            MOVE      "PRD.7: Provider Identifier not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VPRD2000
          ENDIF
.
.         Verify the code is active only if we are creating a referral
.
          MATCH     MTYPEI12,MESSTYPE            * I12 message ?
          GOTO      VPRD2000 IF NOT EQUAL        * no
.
          MATCH     "0",PMHCSTTS
          IF        !@EQUAL
            MOVE      "PRD.7: Provider Identifier not active",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Provider Identifier (PRD.7, Component 2)
.
VPRD2000  STRIP     PRD00702
          MOVELPTR  PRD00702,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "PRD.7: Provider ID component 2 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Save provider values.  Given there can be any number of PRD segments,
.         we are only accepting the first two segments for provider role, one
.         for Referring Provider and one for Referred to Provider.
.
VPRD3000  MATCH     "RP",PRD00101
          IF        @EQUAL
            ADD       ONE,PRDCOUNT
            MOVE      PRD00701,SAVEPROV[1]       * Referring Provider
          ELSE
            ADD       THREE,PRDCOUNT
            MOVE      PRD00701,SAVEPROV[2]       * Referred to Provider
          ENDIF
.
.         We are only processing PRD segments where the provider type is RP
.         or RT and there can only be one of each.  As such, for each RP type,
.         we increment the count by "1" and for each RT type, we increment the
.         count by 3.  This means that the only valid values are:
.             0 - no segments of RP or RT type
.             1 - only one RP type segment
.             3 - only one RT type segment
.             4 - only one RP and one RT type segment
.
          IF        PRDCOUNT = 2 | PRDCOUNT > 4
            MOVE      "PRD.1: Too many Provider Types",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VPRD9999  RETURN
+
.*****************************************************************************
.*                            VRF10000             Called by: PROC0000       *
.*      Validate that the mandatory RF1 fields are populated or null.        *
.*****************************************************************************
.
.         Referral Status (RF1.1, Component 1)
.
VRF10000  STRIP     RF100101
          MOVELPTR  RF100101,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "RF1.1: Referral Status not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VRF10500
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,RF100101
          IF        @EQUAL
            MOVE      "RF1.1: Referral Status is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VRF10500
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 1
            MOVE      "RF1.1: Referral Status has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VRF10500
          ENDIF
.
.         Check that the Referral Status is a valid value (0 - 5)
.
          SQUEEZE   RF100101
          TYPE      RF100101
          IF        !@EQUAL
            MOVE      "RF1.1: Referral Status not numeric",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VRF10500
          ENDIF
.
          MOVE      RF100101,FORM1
          IF        FORM1 > 5
            MOVE      "RF1.1: Referral Status not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VRF10500
          ENDIF
.
.         Note: Extra validation of status versus message type is now
.               done in XRF10000.
.
.         Referral Status (Component 3)
.
VRF10500  STRIP     RF100103
          MOVELPTR  RF100103,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "RF1.1: Referral Status component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Originating Referral Identifier (Component 1)
.
VRF11000  STRIP     RF100601
          MOVELPTR  RF100601,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "RF6.1: Originating Referral ID not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VRF12000
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,RF100601
          IF        @EQUAL
            MOVE      "RF6.1: Originating Referral ID is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VRF12000
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 20
            MOVE      "RF6.1: Originating Referral ID has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VRF12000
          ENDIF
.
.         Get the corresponding webPAS referral visit number from ibaalvaf 
.         using the originating referral id.
.
          CALL      GVIS0000
.
.         Originating Referral Identifier (Component 2)
.
VRF12000  STRIP     RF100602
          MOVELPTR  RF100602,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "RF1.6: Originating Referral ID component 2 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Effective (Referral) Date
.
          STRIP     RF100701
          MOVELPTR  RF100701,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "RF1.7: Referral Date not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VRF13000
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,RF100701
          IF        @EQUAL
            MOVE      "RF7.1: Referral Date is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VRF13000
          ENDIF
.
          MOVE      RF100701,DIM14
          MOVE      "RF1.7 ",FIELDID
          MOVE      ONE,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
.         External Referral Identifier (RF1.11, Component 1)
.
VRF13000  MATCH     MTYPEI12,MESSTYPE            * I12 message ?
          GOTO      VRF19999 IF EQUAL            * yes - no further validation
.
          STRIP     RF101101
          MOVELPTR  RF101101,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VRF16000 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,RF101101
          GOTO      VRF16000 IF EQUAL
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 8
            MOVE      "RF1.11: External Referral ID has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VRF15000
          ENDIF
.
.         Make sure that the value is numeric
.
          SQUEEZE   RF101101
          TYPE      RF101101
          IF        !@EQUAL
            MOVE      "RF1.11: External Referral ID not numeric",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VRF15000
          ENDIF
.
          MOVE      RF101101,KEY8
          RJUSTIFY  KEY8
          CALL      RDALREF1
          IF        OVRCD = 1
            MOVE      "RF1.11: External Referral ID not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VRF15000
          ENDIF
.
          MATCH     SAVEREFN,ALREVISN
          IF        !@EQUAL
            MOVE      "RF1.11: Referral ID mismatch",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         External Referral Identifier (RF1.11, Component 2)
.
VRF15000  STRIP     RF101102
          MOVELPTR  RF101102,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "RF1.11: External Referral ID component 2 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Make sure that there is a corresponding patvisaf and pmsvx1af record
.
VRF16000  MOVE      ALREVISN,KEY8
          CALL      RDVISA1
          IF        OVRCD = 1
            MOVE      "RF1.6: Visit record not found",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          MOVE      ALREVISN,KEY8
          CALL      RDPMVX11
          IF        OVRCD = 1
            MOVE      "RF1.6: Visit extension record not found",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          MOVE      ALRESTAT,SAVESTAT            * save original status
.
.         Don't allow a change if the record is already cancelled or rejected
.
          MATCH     "4",ALRESTAT                 * cancelled ?
          GOTO      VRF18000 IF EQUAL            * yes
.
          MATCH     "5",ALRESTAT                 * rejected ?
          GOTO      VRF19000 IF NOT EQUAL        * no
.
VRF18000  MOVE      "RF1.1: Referral already cancelled or rejected",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VRF19999
.
.         Check for active contacts or linked referrals if cancelling or
.         rejecting a referral record
.
VRF19000  MATCH     "4",RF100101                 * cancelling ?
          IF        !@EQUAL
            MATCH     "5",RF100101               * no - rejecting ?
            GOTO      VRF19999 IF NOT EQUAL      * no - finished
          ENDIF
.
          CALL      CHKA0000
.
VRF19999  RETURN
+
.*****************************************************************************
.*                       VMFI0000                  Called by: PROC0000       *
.*      Validate that the mandatory MFI fields are populated or null.        *
.*****************************************************************************
.
.         Master File Identifier (MFI.1, Component 1)
.         HL7 Mandatory
.
VMFI0000  STRIP     MFI00101
          MOVELPTR  MFI00101,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "MFI.1: Master File Identifier component 1 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VMFI0500
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,MFI00101
          IF        @EQUAL
            MOVE      "MFI.1: Master File Identifier component 1 is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VMFI0500
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 3
            MOVE      "MFI.1: Master File Identifier component 1 has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VMFI0500
          ENDIF
.
.         Make sure the field has "PRA" in it
.
          MATCH     "PRA",MFI00101
          IF        !@EQUAL
            MOVE      "MFI.1: Master File Identifier component 1 not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         File-Level Event Code (MFI.3, Component 1)
.         HL7 Mandatory
.
VMFI0500  STRIP     MFI00301
          MOVELPTR  MFI00301,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "MFI.3: File-Level Event Code not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VMFI1000
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,MFI00301
          IF        @EQUAL
            MOVE      "MFI.3: File-Level Event Code is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VMFI1000
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 3
            MOVE      "MFI.3: File-Level Event Code has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VRF11000
          ENDIF
.
.         Make sure the field has "UPD" in it
.
          MATCH     "UPD",MFI00301
          IF        !@EQUAL
            MOVE      "MFI.3: File-Level Event Code not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Check if there is an Entered Date/Time and if so, validate it
.
VMFI1000  STRIP     MFI00401
          MOVELPTR  MFI00401,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VMFI1500 IF EQUAL            * no
.
          MATCH     BLANKSTR,MFI00401            * field null ?
          GOTO      VMFI1500 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 14
            MOVE      "MFI.4: Entered Date Time has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VMFI1500
          ENDIF
.
.         We have a value in this field, so check it's a valid date/time
.
          MOVE      MFI00401,DIM14
          MOVE      "MFI.4 ",FIELDID
          MOVE      ONE,DATFLAG1
          MOVE      ONE,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
.         Save the last update date/time for further validation later
.
          MOVE      MFI00401,LASTUPDT
          PACK      LASTUPTM,DIM2H,COLON,DIM2N,COLON,DIM2S
.
.         Check if there is a Effective Date/Time and if so, validate it
.
VMFI1500  STRIP     MFI00501
          MOVELPTR  MFI00501,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VMFI2000 IF EQUAL            * no
.
          MATCH     BLANKSTR,MFI00501            * field null ?
          GOTO      VMFI2000 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 14
            MOVE      "MFI.5: Effective Date Time has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VMFI2000
          ENDIF
.
.         We have a value in this field, so check it's a valid date/time
.
          MOVE      MFI00501,DIM14
          MOVE      "MFI.5 ",FIELDID
          MOVE      ONE,DATFLAG1
          MOVE      ONE,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
.         Response Level Code (MFI.6, Component 1)
.         HL7 Mandatory
.
VMFI2000  STRIP     MFI00601
          MOVELPTR  MFI00601,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "MFI.6: Response Level Code not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VMFI9999
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,MFI00601
          IF        @EQUAL
            MOVE      "MFI.6: Response Level Code is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VMFI9999
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 2
            MOVE      "MFI.6: Response Level Code has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VMFI9999
          ENDIF
.
.         Make sure the field has "NE" in it
.
          MATCH     "NE",MFI00601
          IF        !@EQUAL
            MOVE      "MFI.6: Response Level Code not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VMFI9999  RETURN
+
.*****************************************************************************
.*                       VMFE0000                  Called by: PROC0000       *
.*      Validate that the mandatory MFE fields are populated or null.        *
.*****************************************************************************
.
.         Record Level Event Code (MFE.1, Component 1)
.         HL7 Mandatory
.
VMFE0000  STRIP     MFE00101
          MOVELPTR  MFE00101,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "MFE.1: Record Level Event Code not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VMFE0500
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,MFE00101
          IF        @EQUAL
            MOVE      "MFE.1: Record Level Event Code is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VMFE0500
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 3
            MOVE      "MFE.1: Record Level Event Code has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VMFE0500
          ENDIF
.
.         Make sure the field has "MUP" in it
.
          MATCH     "MUP",MFE00101
          IF        !@EQUAL
            MOVE      "MFE.1: Record Level Event Code not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Check if there is a Effective Date/Time and if so, validate it
.
VMFE0500  STRIP     MFE00301
          MOVELPTR  MFE00301,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VMFE1000 IF EQUAL            * no
.
          MATCH     BLANKSTR,MFE00301            * field null ?
          GOTO      VMFE1000 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 14
            MOVE      "MFE.3: Effective Date Time has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VMFE0500
          ENDIF
.
.         We have a value in this field, so check it's a valid date/time
.
          MOVE      MFE00301,DIM14
          MOVE      "MFE.3 ",FIELDID
          MOVE      ONE,DATFLAG1
          MOVE      ONE,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
.         Primary Key Value - MFE (MFE.4, Component 1)
.         HL7 Mandatory
.
VMFE1000  STRIP     MFE00401
          MOVELPTR  MFE00401,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "MFE.4: Primary Key Value not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VMFE1500
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,MFE00401
          IF        @EQUAL
            MOVE      "MFE.4: Primary Key Value is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VMFE1500
          ENDIF
.
.         Primary Key Value - MFE (MFE.4, Component 3)
.         HL7 Mandatory
.
VMFE1500  STRIP     MFE00403
          MOVELPTR  MFE00403,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "MFE.4: Primary Key Value component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VMFE2000
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,MFE00403
          IF        @EQUAL
            MOVE      "MFE.4: Primary Key Value component 3 is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VMFE2000
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 5
            MOVE      "MFE.4: Primary Key Value component 3 has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VMFE2000
          ENDIF
.
          MATCH     "PRIVD",MFE00403
          IF        !@EQUAL
            MOVE      "MFE.4: Primary Key Value component 3 not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Primary Key Value Type (MFE.5, Component 1)
.         HL7 Mandatory
.
VMFE2000  STRIP     MFE00501
          MOVELPTR  MFE00501,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "MFE.5: Primary Key Value Type not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VMFE9999
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,MFE00501
          IF        @EQUAL
            MOVE      "MFE.5: Primary Key Value Type is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VMFE9999
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 2
            MOVE      "MFE.5: Primary Key Value Type has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VMFE9999
          ENDIF
.
.         Make sure the field has "CE" in it
.
          MATCH     "CE",MFE00501
          IF        !@EQUAL
            MOVE      "MFE.5: Primary Key Value Type not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VMFE9999  RETURN
+
.*****************************************************************************
.*                       VSTF0000                  Called by: PROC0000       *
.*      Validate that the mandatory STF fields are populated or null.        *
.*****************************************************************************
.
.         Primary Key Value - STF (STF.1, Component 1)
.         HL7 Mandatory
.
VSTF0000  STRIP     STF00101
          MOVELPTR  STF00101,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "STF.1: Primary Key Value component 1 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSTF0300
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,STF00101
          IF        @EQUAL
            MOVE      "STF.1: Primary Key Value component 1 is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Make sure that this field matches MFE.4
.
          MATCH     STF00101,MFE00401            * same component 1 ?
          IF        !@EQUAL
            MOVE      "STF.1: Primary Key Value doesnt match MFE.4",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Primary Key Value - STF (STF.1, Component 3)
.         HL7 Mandatory
.
VSTF0300  STRIP     STF00103
          MOVELPTR  STF00103,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "STF.1: Primary Key Value component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSTF0500
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,STF00103
          IF        @EQUAL
            MOVE      "STF.1: Primary Key Value component 3 is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSTF0500
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 5
            MOVE      "STF.1: Primary Key Value component 3 has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VSTF0500
          ENDIF
.
          MATCH     "PRIVD",STF00103
          IF        !@EQUAL
            MOVE      "STF.1: Primary Key Value component 3 not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Staff ID Code - STF (STF.2, Component 1)
.         webPAS Mandatory
.
VSTF0500  STRIP     STF00201
          MOVELPTR  STF00201,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "STF.2: Staff ID Code not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSTF1000
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,STF00201
          IF        @EQUAL
            MOVE      "STF.2: Staff ID Code is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSTF1000
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 10
            MOVE      "STF.2: Staff ID Code has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VSTF1000
          ENDIF
.
.         Check if the code already exists on file or if it's new and
.         set the staff record found flag accordingly so that it
.         can be used when processing the data
.
          PACK      KEY10,STF00201,SP10
          CALL      RDPMHCP1
          MOVE      OVRCD,STAFFFLG               * set staff rec found flag
.
          BRANCH    STAFFFLG,VSTF1000
.
.         The hcp already exists on file, so check if we can update
.         the record automatically
.
          MATCH     ANSM,PMHCUPDF
          IF        @EQUAL
            MOVE      "STF.2: HCP not set for auto update",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VSTF1000
          ENDIF
.
.         Now check that this update is the latest
.
          MATCH     SP8,LASTUPDT
          GOTO      VSTF1000 IF EQUAL
.
          MATCH     SP8,PMHCLUPD
          GOTO      VSTF0700 IF EQUAL
.
          MATCH     PMHCLUPD,LASTUPDT
          GOTO      VSTF0900 IF LESS
          GOTO      VSTF1000 IF NOT EQUAL
.
          MATCH     PMHCLUPT,LASTUPTM
          GOTO      VSTF1000 IF NOT LESS         * CAR 309821
          GOTO      VSTF0900
.
VSTF0700  MATCH     SP8,PMHCCDTE
          GOTO      VSTF1000 IF EQUAL
.
          MATCH     PMHCCDTE,LASTUPDT
          GOTO      VSTF0900 IF LESS
          GOTO      VSTF1000 IF NOT EQUAL
.
          MATCH     PMHCCTIM,LASTUPTM
          GOTO      VSTF1000 IF NOT LESS         * CAR 309821
.
VSTF0900  MOVE      "STF.2: Data out of date",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
.
.         Staff Surname  (STF.3, Component 1)
.         webPAS Mandatory
.
VSTF1000  STRIP     STF00301
          MOVELPTR  STF00301,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "STF.3: Staff Surname not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSTF1500
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,STF00301
          IF        @EQUAL
            MOVE      "STF.3: Staff Surname is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSTF1500
          ENDIF
.
.         Staff Given Names  (STF.3, Component 2)
.         webPAS Mandatory
.
VSTF1500  STRIP     STF00302
          MOVELPTR  STF00302,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "STF.3: Staff Given Name not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSTF2000
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,STF00302
          IF        @EQUAL
            MOVE      "STF.3: Staff Given Name is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSTF2000
          ENDIF
.
.         Staff Title  (STF.3, Component 5)
.         webPAS Mandatory
.
VSTF2000  COMPARE   ZERO,STAFFFLG
          GOTO      VSTF2500 IF EQUAL            * skip for update (CAR 309821)
.
          STRIP     STF00305
          MOVELPTR  STF00305,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "STF.3: Staff Title not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSTF2500
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,STF00305
          IF        @EQUAL
            MOVE      "STF.3: Staff Title is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSTF2500
          ENDIF
.
.         Staff Type  (STF.4)
.
VSTF2500  STRIP     STF00401
          MOVELPTR  STF00401,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VSTF3000 IF EQUAL            * no
.
          MATCH     BLANKSTR,STF00401            * field null ?
          GOTO      VSTF3000 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 5
            MOVE      "STF.4: Staff Type has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VSTF3000
          ENDIF
.
          MATCH     "GMPRC",STF00401
          IF        !@EQUAL
            MOVE      "STF.4: Staff Type is not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Administrative Sex  (STF.5)
.
VSTF3000  STRIP     STF00501
          MOVELPTR  STF00501,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VSTF3200 IF EQUAL            * no
.
          MATCH     BLANKSTR,STF00501            * field null ?
          GOTO      VSTF3200 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 1
            MOVE      "STF.5: Administrative Sex has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VSTF3200
          ENDIF
.
          MATCH     "F",STF00501                 * Female ?
          GOTO      VSTF3200 IF EQUAL            * yes
.
          MATCH     "M",STF00501                 * Male ?
          GOTO      VSTF3200 IF EQUAL            * yes
.
          MATCH     "I",STF00501                 * Indeterminate ?
          GOTO      VSTF3200 IF EQUAL            * yes
.
          MATCH     "U",STF00501                 * Unknown ?
          GOTO      VSTF3200 IF EQUAL            * yes
.
          MOVE      "STF.5: Administrative Sex is not valid",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
.
.         Date of Birth  (STF.6)
.
VSTF3200  STRIP     STF00601
          MOVELPTR  STF00601,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VSTF3500 IF EQUAL            * no
.
          MATCH     BLANKSTR,STF00601            * field null ?
          GOTO      VSTF3500 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 8
            MOVE      "STF.6: Date of Birth has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VSTF3500
          ENDIF
.
.         We have a value in this field, so check it's a valid date/time
.
          MOVE      STF00601,DIM14
          MOVE      "STF.6 ",FIELDID
          MOVE      ONE,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
.         Active/Inactive Flag  (STF.7)
.
VSTF3500  STRIP     STF00701
          MOVELPTR  STF00701,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VSTF3700 IF EQUAL            * no
.
          MATCH     BLANKSTR,STF00701            * field null ?
          GOTO      VSTF3700 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 1
            MOVE      "STF.7: Active Flag has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VSTF3700
          ENDIF
.
          MATCH     "A",STF00701                 * Active ?
          GOTO      VSTF3700 IF EQUAL            * yes
.
          MATCH     "I",STF00701                 * Inactive ?
          GOTO      VSTF3700 IF EQUAL            * yes
.
          MOVE      "STF.7: Active Flag is not valid",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
.
.         Department (STF.8, Component 1)
.         webPAS optional
.
VSTF3700  MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 6
            STRIP     STF00801[COUNTER]
            MOVELPTR  STF00801[COUNTER],FORM3    * field populated ?
            COMPARE   ZERO,FORM3
            GOTO      VSTF3750 IF EQUAL          * no
.
.           Check if the field is null
.
            MATCH     BLANKSTR,STF00801[COUNTER] * field null ?
            GOTO      VSTF3750 IF EQUAL          * yes
.
.           Make sure that the code is valid for Cat.DT
.
            PACK      KEY5,ANSD,ANST,STF00801[COUNTER],SP5
            CALL      RDCODE1
            IF        OVRCD = 1
              MOVE      "STF.8: Department code not on file",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
            ELSE
              MATCH     ANSI,PTCOACTV
              IF        @EQUAL
                MOVE      "STF.8: Department code not active",ERRORDSC
                MOVE      "207",ERRORNUM
                CALL      EROR0000
              ENDIF
            ENDIF
.
.           Department (STF.8, Component 3)
.
            STRIP     STF00803[COUNTER]
            MOVELPTR  STF00803[COUNTER],FORM3    * field populated ?
            IF        FORM3 = 0
              MOVE      "STF.8: Department component 3 not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
.
VSTF3750    ADD       ONE,COUNTER                * increment counter
          DO
.
.         Phone (STF.10, Component 1)
.         webPAS optional
.
VSTF3800  MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 7
            STRIP     STF01001[COUNTER]
            MOVELPTR  STF01001[COUNTER],FORM3    * field populated ?
            COMPARE   ZERO,FORM3
            GOTO      VSTF3850 IF EQUAL          * no
.
.           Check if the field is null
.
            MATCH     BLANKSTR,STF01001[COUNTER] * field null ?
            GOTO      VSTF3850 IF EQUAL          * yes
.
.           Phone (STF.10, Component 3)
.
            STRIP     STF01003[COUNTER]
            MOVELPTR  STF01003[COUNTER],FORM3    * field populated ?
            IF        FORM3 = 0
              MOVE      "STF.10: Phone component 3 not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ELSE
              RESET     PHONETYP
              SCAN      STF01003[COUNTER],PHONETYP
              IF        !@EQUAL
                MOVE      "STF.10: Phone component 3 not valid",ERRORDSC
                MOVE      "207",ERRORNUM
                CALL      EROR0000
              ENDIF
            ENDIF
.
VSTF3850    ADD       ONE,COUNTER                * increment counter
          DO
.
.         Office/Home Address (STF.11)
.         webPAS optional (component 7 must be H or O)
.
VSTF3900  MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 3
            STRIP     STF01101[COUNTER]
            MOVELPTR  STF01101[COUNTER],FORM3    * field populated ?
            COMPARE   ZERO,FORM3
            GOTO      VSTF3950 IF EQUAL          * no
.
            STRIP     STF01107[COUNTER]
            MOVELPTR  STF01107[COUNTER],FORM3    * field populated ?
            IF        FORM3 = 0
              MOVE      "STF.11: Address component 7 not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ELSE
              RESET     HCPADTYP
              SCAN      STF01107[COUNTER],HCPADTYP
              IF        !@EQUAL
                MOVE      "STF.11: Address component 7 not valid",ERRORDSC
                MOVE      "207",ERRORNUM
                CALL      EROR0000
              ENDIF
            ENDIF
.
VSTF3950    ADD       ONE,COUNTER                * increment counter
          DO
.
.         Activation Date  (STF.12)
.         webPAS Mandatory
.
VSTF4000  STRIP     STF01201
          MOVELPTR  STF01201,FORM3
          IF        FORM3 = 0
            MOVE      "STF.12: Activation Date not populated",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VSTF4500
          ENDIF
.
          MATCH     BLANKSTR,STF01201            * field null ?
          IF        @EQUAL
            MOVE      "STF.12: Activation Date is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VSTF4500
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 14
            MOVE      "STF.12: Activation Date has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VSTF4500
          ENDIF
.
.         We have a value in this field, so check it's a valid date/time
.
          MOVE      STF01201,DIM14
          MOVE      "STF.12",FIELDID
          MOVE      ONE,DATFLAG1
          MOVE      ONE,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
.         Inactivation Date  (STF.13)
.
VSTF4500  STRIP     STF01301
          MOVELPTR  STF01301,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VSTF5000 IF EQUAL            * no
.
          MATCH     BLANKSTR,STF01301            * field null ?
          GOTO      VSTF5000 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 14
            MOVE      "STF.13: Inactivation Date has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VSTF9999
          ENDIF
.
.         We have a value in this field, so check it's a valid date/time
.
          MOVE      STF01301,DIM14
          MOVE      "STF.13",FIELDID
          MOVE      ZERO,DATFLAG1
          MOVE      ONE,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
.         Check that the activation date is not after the inactivation date
.
          MATCH     STF01201,STF01301
          IF        @LESS
            MOVE      "STF.13: Activation Date after Inactivation Date",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Check that the status is inactive if we have an end date in the past,
.         otherwise the status should still be active.
.         Note: At this point, STF00701 could be "A", "I", null (BLANKSTR) or
.               not populated, as these are the only valid values. If null
.               or not populated, then default to the appropriate value based
.               on the end date value (past, present or future).
.
          MATCH     CURRDATE,STF01301
          IF        @LESS
            MATCH     ANSI,STF00701
            GOTO      VSTF9999 IF EQUAL
.
            MATCH     ANSA,STF00701
            IF        !@EQUAL
              MOVE      ANSI,STF00701
              GOTO      VSTF9999
            ENDIF
          ELSE
            MATCH     ANSA,STF00701             
            GOTO      VSTF9999 IF EQUAL
.
            MATCH     ANSI,STF00701
            IF        !@EQUAL
              MOVE      ANSA,STF00701
              GOTO      VSTF9999
            ENDIF
          ENDIF
.
VSTF4700  MATCH     CURRDATE,STF01301
          IF        @EQUAL
            MATCH     ANSI,STF00701
            GOTO      VSTF9999 IF EQUAL       * current date as inactive date ok
          ENDIF
.
          MOVE      "STF.13: Inactivation Date not compatible with status",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VSTF9999
.
.         There is no end date, so check if the status is inactive and if it
.         is, default the end date to the date of the message
.
VSTF5000  MATCH     ANSI,STF00701
          IF        @EQUAL
            MOVE      MSH00701,STF01301
          ENDIF
.
VSTF9999  RETURN
+
.*****************************************************************************
.*                       VPRA0000                  Called by: PROC0000       *
.*      Validate that the mandatory PRA fields are populated or null.        *
.*****************************************************************************
.
.         Primary Key Value - PRA (PRA.1, Component 1)
.         HL7 Mandatory
.
VPRA0000  STRIP     PRA00101
          MOVELPTR  PRA00101,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "PRA.1: Primary Key Value component 1 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VPRA0500
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,PRA00101
          IF        @EQUAL
            MOVE      "PRA.1: Primary Key Value component 1 is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VPRA0500
          ENDIF
.
.         Make sure that this field matches MFE.4
.
          MATCH     PRA00101,MFE00401            * same component 1 ?
          IF        !@EQUAL
            MOVE      "PRA.1: Primary Key Value component 1 doesnt match MFE.4",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPRA0500
          ENDIF
.
.         Primary Key Value - PRA (PRA.1, Component 3)
.         HL7 Mandatory
.
          STRIP     PRA00103
          MOVELPTR  PRA00103,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "PRA.1: Primary Key Value component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VPRA0500
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,PRA00103
          IF        @EQUAL
            MOVE      "PRA.1: Primary Key Value component 3 is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VPRA0500
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 5
            MOVE      "PRA.1: Primary Key Value component 3 has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPRA0500
          ENDIF
.
          MATCH     "PRIVD",PRA00103
          IF        !@EQUAL
            MOVE      "PRA.1: Primary Key Value component 3 not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Practitioner Group (PRA.2, Component 1)
.         webPAS Mandatory
.
VPRA0500  STRIP     PRA00201
          MOVELPTR  PRA00201,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "PRA.2: Practitioner Group not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VPRA1000
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,PRA00201
          IF        @EQUAL
            MOVE      "PRA.2: Practitioner Group is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VPRA1000
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 10
            MOVE      "PRA.2: Practitioner Group has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPRA1000
          ENDIF
.
.         Check if the link record already exists on file or if it's new and
.         set the link record found flag accordingly so that it
.         can be used when processing the data
.
          PACK      KEY10A,STF00201,SP10
          PACK      KEY10B,PRA00201,SP10
          PACK      KEY20,KEY10A,KEY10B
          CALL      RDPMHCL1
          MOVE      OVRCD,LINKFLAG               * set link record found flag
.
          BRANCH    LINKFLAG,VPRA1000            * CAR 309042
.
.         Now check that this update is the latest
.
          MATCH     SP8,LASTUPDT
          GOTO      VPRA1000 IF EQUAL
.
          MATCH     SP8,PMHLLUPD
          GOTO      VPRA0600 IF EQUAL
.
          MATCH     PMHLLUPD,LASTUPDT
          GOTO      VPRA0700 IF LESS
          GOTO      VPRA1000 IF NOT EQUAL
.
          MATCH     PMHLLUPT,LASTUPTM
          GOTO      VPRA1000 IF NOT LESS         * CAR 309821
          GOTO      VPRA0700
.
VPRA0600  MATCH     SP8,PMHLCDTE
          GOTO      VPRA1000 IF EQUAL
.
          MATCH     PMHLCDTE,LASTUPDT
          GOTO      VPRA0700 IF LESS
          GOTO      VPRA1000 IF NOT EQUAL
.
          MATCH     PMHLCTIM,LASTUPTM
          GOTO      VPRA1000 IF NOT LESS         * CAR 309821
.
VPRA0700  MOVE      "PRA.2: Data out of date",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
.
.         Practitioner Group (PRA.2, Component 2)
.         webPAS Mandatory
.
VPRA1000  STRIP     PRA00202
          MOVELPTR  PRA00202,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "PRA.2: Practitioner Group Description not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VPRA1500
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,PRA00202
          IF        @EQUAL
            MOVE      "PRA.2: Practitioner Group Description is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VPRA1500
          ENDIF
.
.         Practitioner Category  (PRA.3)
.
VPRA1500  STRIP     PRA00301
          MOVELPTR  PRA00301,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VPRA2000 IF EQUAL            * no
.
          MATCH     BLANKSTR,PRA00301            * field null ?
          GOTO      VPRA2000 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 5
            MOVE      "PRA.3: Practitioner Category has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPRA2000
          ENDIF
.
          MATCH     "GPPRC",PRA00301
          IF        !@EQUAL
            MOVE      "PRA.3: Practitioner Category is not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Practitioner ID Numbers  (PRA.6) - 4 repeats allowed for various
.         identifiers, however we are only interested in the provider number.
.
VPRA2000  MOVE      ZERO,SAVCOUNT                * initialise saved count
          MOVE      ZERO,COUNTER
VPRA2100  WHILE     COUNTER < 9
            ADD       ONE,COUNTER
.
.           First see if there is a type of identifier (Component 2).
.           We are only interested if it's a provider number (PROVN).
.
            STRIP     PRA00602[COUNTER]
            MOVELPTR  PRA00602[COUNTER],FORM3
            COMPARE   ZERO,FORM3                 * field populated ?
            GOTO      VPRA2100 IF EQUAL          * no
.
            MATCH     BLANKSTR,PRA00602[COUNTER] * field null ?
            GOTO      VPRA2100 IF EQUAL          * yes
.
            MATCH     "PROVN",PRA00602[COUNTER]  * identifier type for provider?
            GOTO      VPRA2100 IF NOT EQUAL      * no - ignore field
.
.           We have a provider number, so check if the identifier (component 1)
.           is populated
.
            STRIP     PRA00601[COUNTER]
            MOVELPTR  PRA00601[COUNTER],FORM3
            COMPARE   ZERO,FORM3                 * field populated ?
            GOTO      VPRA2100 IF EQUAL          * no
.
.           Below code changed for Task: 0870845
.
            ADD       ONE,SAVCOUNT               * save provider no in array
            MATCH     BLANKSTR,PRA00601[COUNTER] * field null ?
            IF        @EQUAL
              MOVE      SP10,PRVARRAY[SAVCOUNT]  * yes - load spaces
              GOTO      VPRA2100
            ENDIF
.
.           We can store up to 5 provider numbers for a single linked HCP
.
            IF        SAVCOUNT < 6
              MOVE      PRA00601[COUNTER],PRVARRAY[SAVCOUNT]
            ENDIF
.
.           The identifier (component 1) is populated, so make sure that
.           there is the correct number of characters
.
            IF        FORM3 > 10
              MOVE      "PRA.6: Provider Number has too many characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VPRA2100
            ENDIF
.
.           We have a provider number, so now check if we have a health
.           organisation code (Component 3)
.
            STRIP     PRA00603[COUNTER]
            MOVELPTR  PRA00603[COUNTER],FORM3
            IF        FORM3 = 0
              MOVE      "PRA.6: Health Organisation Code is missing",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VPRA2100
            ENDIF
.
            MATCH     BLANKSTR,PRA00603[COUNTER] * field null ?
            IF        @EQUAL
              MOVE      "PRA.6: Health Organisation Code is blank",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VPRA2100
            ENDIF
.
.           Make sure that there is the correct number of characters
.
            IF        FORM3 > 10
              MOVE      "PRA.6: Health Organisation Code has too many characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VPRA2100
            ENDIF
.
.           Make sure that the Health Organisation Code matches the Practitioner
.           Group
.
            MATCH     PRA00603[COUNTER],PRA00201
            IF        !@EQUAL
              MOVE      "PRA.6: Health Organisation Code doesnt match PRA.2",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VPRA2100
            ENDIF
.
.           We have a health organisation number, so now check if we have an
.           expiration date (Component 4)
.
            STRIP     PRA00604[COUNTER]
            MOVELPTR  PRA00604[COUNTER],FORM3
            COMPARE   ZERO,FORM3                 * field populated ?
            GOTO      VPRA2100 IF EQUAL          * no
.
            MATCH     BLANKSTR,PRA00604[COUNTER] * field null ?
            GOTO      VPRA2100 IF EQUAL          * yes
.
.           Make sure that there is the correct number of characters
.
            IF        FORM3 <> 14
              MOVE      "PRA.6: Expiration Date has incorrect number of characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VPRA2100
            ENDIF
.
.           We have a value in this field, so check it's a valid date/time
.
            MOVE      PRA00604[COUNTER],DIM14
            MOVE      "PRA.6 ",FIELDID
            MOVE      ONE,DATFLAG1
            MOVE      ONE,DATFLAG2
            CALL      VDTM0000                   * date/time validation
          DO
.
          IF          SAVCOUNT > 5
            MOVE      FIVE,SAVCOUNT              * max prov.numbers (CAR 312918)
          ENDIF
.
.         Date Entered Practice (PRA.8)
.         webPAS Mandatory
.
          STRIP     PRA00801
          MOVELPTR  PRA00801,FORM3
          IF        FORM3 = 0
            MOVE      "PRA.8: Date Entered Practice Date is missing",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VPRA3000
          ENDIF
.
          MATCH     BLANKSTR,PRA00801            * field null ?
          IF        @EQUAL
            MOVE      "PRA.8: Date Entered Practice Date is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VPRA3000
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 8
            MOVE      "PRA.8: Date Entered Practice has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPRA3000
          ENDIF
.
.         We have a value in this field, so check it's a valid date/time
.
          MOVE      PRA00801,DIM14
          MOVE      "PRA.8 ",FIELDID
          MOVE      ONE,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
.         Date Left Practice (PRA.10)
.
VPRA3000  STRIP     PRA01001
          MOVELPTR  PRA01001,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VPRA9999 IF EQUAL            * no
.
          MATCH     BLANKSTR,PRA01001            * field null ?
          GOTO      VPRA9999 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 8
            MOVE      "PRA.10: Date Left Practice has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPRA9999
          ENDIF
.
.         We have a value in this field, so check it's a valid date/time
.
          MOVE      PRA01001,DIM14
          MOVE      "PRA.10",FIELDID
          MOVE      ONE,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
.         Check that the date entered is not after the date left
.
          MATCH     PRA00801,PRA01001
          IF        @LESS
            MOVE      "PRA.10: Date Entered after Date Left",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VPRA9999  RETURN
+
.*****************************************************************************
.*                       VZPR0000                  Called by: PROC0000       *
.*      Validate that the mandatory ZPR fields are populated or null.        *
.*****************************************************************************
.
.         Set ID (ZPR.1)
.
VZPR0000  STRIP     ZPR00101
          MOVELPTR  ZPR00101,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZPR0300 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZPR00101            * field null ?
          GOTO      VZPR0300 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 1
            MOVE      "ZPR.1: Set ID has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZPR0300
          ENDIF
.
          MATCH     "1",ZPR00101                 * is Set ID "1" ?
          IF        !@EQUAL
            MOVE      "ZPR.1: Set ID not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Clinic ID (ZPR.2)
.         HL7 Mandatory
.
VZPR0300  STRIP     ZPR00201
          MOVELPTR  ZPR00201,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZPR.2: Clinic ID not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZPR0500
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,ZPR00201
          IF        @EQUAL
            MOVE      "ZPR.2: Clinic ID is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZPR0500
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 10
            MOVE      "ZPR.2: Clinic ID has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZPR0500
          ENDIF
.
.         Make sure that this field matches PRA.2
.
          MATCH     ZPR00201,PRA00201            * same component 1 ?
          IF        !@EQUAL
            MOVE      "ZPR.2: Primary Key Value doesnt match PRA.2",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Check that the combination of the HCP code and the Practice code
.         is equivalent to the content of MFE.4, component 1.
.
          PACK      KEY40,STF00201,ZPR00201
          MATCH     KEY40,MFE00401
          IF        !@EQUAL
            MOVE      "ZPR.2: Primary Key Value doesnt match MFE.4",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Check if the code already exists on file or if it's new and
.         set the practice record found flag accordingly so that it
.         can be used when processing the data
.
          PACK      KEY10,ZPR00201,SP10
          PACK      KEY12,KEY10,SP1,ONE
          CALL      RDPMHCG1
          MOVE      OVRCD,PRACFLAG               * set practice rec found flag
.
          BRANCH    PRACFLAG,VZPR0500
.
.         Now check that this update is the latest
.
          MATCH     SP8,LASTUPDT
          GOTO      VZPR0500 IF EQUAL
.
          MATCH     SP8,PMHGLUPD
          GOTO      VZPR0400 IF EQUAL
.
          MATCH     PMHGLUPD,LASTUPDT
          GOTO      VZPR0450 IF LESS
          GOTO      VZPR0500 IF NOT EQUAL
.
          MATCH     PMHGLUPT,LASTUPTM
          GOTO      VZPR0500 IF NOT LESS         * CAR 309821
          GOTO      VZPR0450
.
VZPR0400  MATCH     SP8,PMHGCDTE
          GOTO      VZPR0500 IF EQUAL
.
          MATCH     PMHGCDTE,LASTUPDT
          GOTO      VZPR0450 IF LESS
          GOTO      VZPR0500 IF NOT EQUAL
.
          MATCH     PMHGCTIM,LASTUPTM
          GOTO      VZPR0500 IF NOT LESS         * CAR 309821
.
VZPR0450  MOVE      "ZPR.2: Data out of date",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
.
.         Clinic Description (ZPR.3)
.         webPAS Mandatory
.
VZPR0500  STRIP     ZPR00301
          MOVELPTR  ZPR00301,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZPR.3: Clinic Description not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZPR1000
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,ZPR00301
          IF        @EQUAL
            MOVE      "ZPR.3: Clinic Description is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZPR1000
          ENDIF
.
.         Clinic Type (ZPR.4)
.         HL7 Mandatory
.
VZPR1000  STRIP     ZPR00401
          MOVELPTR  ZPR00401,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZPR.4: Clinic Type not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZPR1500
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,ZPR00401
          IF        @EQUAL
            MOVE      "ZPR.4: Clinic Type is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZPR1500
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 5
            MOVE      "ZPR.4: Clinic Type has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZPR1500
          ENDIF
.
          MATCH     "GPPRC",ZPR00401
          IF        !@EQUAL
            MOVE      "ZPR.4: Clinic Type not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Clinic Address (ZPR.5)
.         First check if we have a postcode or not.
.
VZPR1500  MOVELPTR  ZPR00505,FORM3
          COMPARE   ZERO,FORM3                   * postcode populated ?
          GOTO      VZPR2000 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZPR00505            * blank postcode ?
          GOTO      VZPR2000 IF EQUAL            * yes
.
          IF        FORM3 <> 4
            MOVE      "ZPR.5: Practice Postcode incorrect length",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZPR2000
          ENDIF
.
          TYPE      ZPR00505
          IF        !@EQUAL
            MOVE      "ZPR.5: Practice Postcode not numeric",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VZPR2000
          ENDIF
.
.         We have a postcode, so now check if we have a suburb
.
          MOVELPTR  ZPR00503,FORM3
          COMPARE   ZERO,FORM3                   * suburb populated ?
          GOTO      VZPR2000 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZPR00503            * blank suburb ?
          GOTO      VZPR2000 IF EQUAL            * yes
.
          COMPARE   TWO,PTCNHDPS                 * Australian site ?
          GOTO      VZPR2000 IF LESS             * no
.
.         We have a postcode and suburb, so now check if we have a state
.
          MOVELPTR  ZPR00504,FORM3
          COMPARE   ZERO,FORM3                   * state populated ?
          GOTO      VZPR1800 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZPR00504            * blank state ?
          GOTO      VZPR1800 IF EQUAL            * yes
.
.         We have a postcode, suburb and state, so check if the combination
.         is valid
.
          PACK      KEY8,ZPR00505,SP8
          PACK      KEY45,ZPR00503,SP70
          PACK      KEY3,ZPR00504,SP3
          PACK      KEY56,KEY8,KEY45,KEY3
          CALL      RDIBPOS1                     * postcode on file ?
          BRANCH    OVRCD,VZPR1900               * no - invalid
          GOTO      VZPR2000                     * yes - valid
.
.         We have a postcode and suburb, so check if the postcode/suburb
.         combination is valid
.
VZPR1800  PACK      KEY8,ZPR00505,SP8
          PACK      KEY45,ZPR00503,SP70
          PACK      KEY56,KEY8,KEY45,SP70
          CALL      RDIBPOS1                     * postcode/suburb on file ?
          COMPARE   ZERO,OVRCD
          GOTO      VZPR2000 IF EQUAL            * yes - valid
.
          CALL      RKIBPOS1                     * no - get next record
          BRANCH    OVRCD,VZPR1900
          MATCH     ZPR00505,IBPOPCOD            * same postcode still ?
          IF        @EQUAL
            MATCH     ZPR00503,IBPOSUBR          * yes - same suburb still ?
            GOTO      VZPR2000 IF EQUAL          * yes
          ENDIF
.
.         The postcode/address doesn't exist on ibapostf, so check if
.         the parameter is set to use a default value and if so,then
.         load the default value
.
VZPR1900  MATCH     "1",PTCNUNPC                 * using default unknown pcode ?
          IF        !@EQUAL
            MOVE      "ZPR.5: Practice PostcodeSuburb not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
          ELSE
            UNPACK    PTCNADDR,DIM4,DIM45,DIM3   * yes
            MOVE      DIM4,ZPR00505
            MOVE      DIM45,ZPR00503
            STRIP     ZPR00503
            MOVE      DIM3,ZPR00504
            STRIP     ZPR00504
          ENDIF
.
.         Date/Time Practice Started (ZPR.7)
.
VZPR2000  STRIP     ZPR00701
          MOVELPTR  ZPR00701,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZPR.7: Date Practice Started not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZPR2500
          ENDIF
.
          MATCH     BLANKSTR,ZPR00701            * field null ?
          IF        @EQUAL
            MOVE      "ZPR.7: Date Practice Started is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZPR2500
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 14
            MOVE      "ZPR.7: Date Practice Started has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZPR2500
          ENDIF
.
.         We have a value in this field, so check it's a valid date/time
.
          MOVE      ZPR00701,DIM14
          MOVE      "ZPR.7 ",FIELDID
          MOVE      ONE,DATFLAG1
          MOVE      ONE,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
.         Date/Time Practice Ended (ZPR.8)
.
VZPR2500  STRIP     ZPR00801
          MOVELPTR  ZPR00801,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZPR3000 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZPR00801            * field null ?
          GOTO      VZPR3000 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 14
            MOVE      "ZPR.8: Date Practice Ended has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZPR3000
          ENDIF
.
.         We have a value in this field, so check it's a valid date/time
.
          MOVE      ZPR00801,DIM14
          MOVE      "ZPR.8 ",FIELDID
          MOVE      ONE,DATFLAG1
          MOVE      ONE,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
.         Check that the date started is not after the date ended
.
          MATCH     ZPR00701,ZPR00801
          IF        @LESS
            MOVE      "ZPR.8: Date Started after Date Ended",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Practice Provider Number (ZPR.9)
.
VZPR3000  STRIP     ZPR00901
          MOVELPTR  ZPR00901,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZPR3500 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZPR00901            * field null ?
          GOTO      VZPR3500 IF EQUAL            * yes
.
          IF        FORM3 > 10
            MOVE      "ZPR.9: Practice Provider Number has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Practice Senior HCP (ZPR.11)
.
VZPR3500  STRIP     ZPR01101
          MOVELPTR  ZPR01101,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZPR4000 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZPR01101            * field null ?
          GOTO      VZPR4000 IF EQUAL            * yes
.
          IF        FORM3 > 10
            MOVE      "ZPR.11: Practice Senior HCP has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZPR4000
          ENDIF
.
          PACK      KEY10,ZPR01101,SP70
          CALL      RAPMHCP1
          IF        OVRCD = 1
            MOVE      "ZPR.11: Practice Senior HCP Code not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZPR4000
          ENDIF
.
.         Update Flag (ZPR.12)
.
VZPR4000  STRIP     ZPR01201
          MOVELPTR  ZPR01201,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZPR4100 IF NOT EQUAL        * yes
.
.         The Update Flag field is not populated, so we need to check
.         if the practice already exists on file and if so, can we update
.         the record automatically.
.         Note - adding a new practice can be done regardless of the auto
.                update setting
.
          BRANCH    PRACFLAG,VZPR4500            * practice not on file
.
          MATCH     ANSM,PMHGUPFL
          IF        @EQUAL
            MOVE      "ZPR.2: Practice not set for auto update",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
          GOTO      VZPR4500
.
VZPR4100  MATCH     BLANKSTR,ZPR01201            * field null ?
          IF        @EQUAL
            MOVE      "ZPR.12: Practice Update Flag cannot be null",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZPR4500
          ENDIF
.
          IF        FORM3 > 1
            MOVE      "ZPR.12: Practice Update Flag has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZPR4500
          ENDIF
.
          REP       "aAmM",ZPR01201
          MATCH     ANSA,ZPR01201
          IF        !@EQUAL
            MATCH     ANSM,ZPR01201
            IF        !@EQUAL
              MOVE      "ZPR.12: Practice Update Flag not valid",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
              GOTO      VZPR4500
            ENDIF
          ENDIF
.
.         We can only allow a database record set for manual update to be
.         updated by an incoming message where the "Update Flag" (ZPR.12)
.         is set to "A" (Auto update).
.
          MATCH     ANSA,ZPR01201                * auto update ?
          GOTO      VZPR4500 IF EQUAL            * yes - valid
.
.         The incoming field is set for manual update only, so if
.         the existing value on the database is set for manual update only,
.         then don't allow any updates.
.
          MATCH     ANSM,PMHGUPFL
          IF        @EQUAL
            MOVE      "ZPR.2: Practice not set for auto update",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZPR4500
          ENDIF
.
.         Fax Discharge Summary Flag (ZPR.13)
.
VZPR4500  STRIP     ZPR01301
          MOVELPTR  ZPR01301,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZPR5000 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZPR01301            * field null ?
          IF        @EQUAL
            MOVE      "ZPR.13: Fax Discharge Summary Flag cannot be null",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZPR5000
          ENDIF
.
          IF        FORM3 > 1
            MOVE      "ZPR.13: Fax Discharge Summary Flag has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZPR5000
          ENDIF
.
          REP       "yYnN",ZPR01301
          MATCH     ANSY,ZPR01301
          IF        !@EQUAL
            MATCH     ANSN,ZPR01301
            IF        !@EQUAL
              MOVE      "ZPR.13: Fax Discharge Summary Flag not valid",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
.         Electronic Discharge Summary Flag (ZPR.14)
.
VZPR5000  STRIP     ZPR01401
          MOVELPTR  ZPR01401,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZPR5500 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZPR01401            * field null ?
          IF        @EQUAL
            MOVE      "ZPR.14: Electronic Discharge Summary Flag cannot be null",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZPR5500
          ENDIF
.
          IF        FORM3 > 1
            MOVE      "ZPR.14: Electronic Discharge Summary Flag has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZPR5500
          ENDIF
.
          REP       "yYnN",ZPR01401
          MATCH     ANSY,ZPR01401
          IF        !@EQUAL
            MATCH     ANSN,ZPR01401
            IF        !@EQUAL
              MOVE      "ZPR.14: Electronic Discharge Summary Flag not valid",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
.         Practice Link Active Flag (ZPR.15)
.
VZPR5500  STRIP     ZPR01501
          MOVELPTR  ZPR01501,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZPR9999 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZPR01501            * field null ?
          IF        @EQUAL
            MOVE      "ZPR.15: Practice Link Active Flag cannot be null",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZPR9999
          ENDIF
.
          IF        FORM3 > 1
            MOVE      "ZPR.15: Practice Link Active Flag has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZPR9999
          ENDIF
.
          REP       "yYnN",ZPR01501
          MATCH     ANSY,ZPR01501
          IF        !@EQUAL
            MATCH     ANSN,ZPR01501
            IF        !@EQUAL
              MOVE      "ZPR.15: Practice Link Active Flag not valid",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
.         If the sent Practice Link Active Flag is set to "Active",
.         then validate that the other relevant sent fields are consistent:
.         - HCP is active
.         - Practice is active (end date must be blank or not in the past)
.         - Linked HCP/Practice is active (date left practice must be blank
.           or not in the past)
.
          MATCH     ANSN,ZPR01501                * active link ?
          GOTO      VZPR9999 IF EQUAL            * no
.
          MATCH     "I",STF00701                 * HCP Active ?
          IF        @EQUAL
            MOVE      "ZPR.15: HCP not active",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZPR9999
          ENDIF
.
VZPR5505  MATCH     BLANKSTR,ZPR00801            * Practice Date Ended null ?
          GOTO      VZPR5510 IF EQUAL            * yes
.
          MATCH     SP8,ZPR00801                 * Practice Date Ended blank ?
          GOTO      VZPR5510 IF EQUAL            * yes
.
          MOVE      ZPR00801,DIM8
          MATCH     CURRDATE,DIM8
          IF        @LESS
            MOVE      "ZPR.15: Practice not active",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZPR9999
          ENDIF
.
VZPR5510  MATCH     BLANKSTR,PRA01001            * Date Left Practice null ?
          GOTO      VZPR9999 IF EQUAL            * yes
.
          MATCH     SP8,PRA01001                 * Date Left Practice blank ?
          GOTO      VZPR9999 IF EQUAL            * yes
.
          MATCH     CURRDATE,PRA01001
          IF        @LESS
            MOVE      "ZPR.15: HCP not active in Practice",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZPR9999
          ENDIF
.
VZPR9999  RETURN
+
.*****************************************************************************
.*                            VDG10000             Called by: PROC0000       *
.*      Validate that the mandatory DG1 fields are populated or null and     *
.*      load the data into a temporary table so that we can accommodate more *
.*      than 1 DG1 segment/message.                                          *
.*****************************************************************************
.
.         Set Id
.         We need to cater for potentially multiple DG1 segments, so if we
.         don't have a numeric value, increment the count for each DG1 segment.
.
VDG10000  MOVE      DG1SEGMT,RTMPSEGI            * load segment id
          ASSIGN    DG1COUNT,RTMPSEGC            * save previous count
          ADD       ONE,DG1COUNT                 * increment DG1 segment count
          MOVE      ZERO,DG1FOUND                * set DG1 found flag
.
          MATCH     ANSE,PV100201
          IF        @EQUAL
            CALL      VDGE0000                   * EMR visit
            GOTO      VDG19999
          ENDIF
.
.         Set Id (DG1.1)
.
          STRIP     DG100101
          MOVELPTR  DG100101,FORM3
          IF        FORM3 = 0
            MOVE      "DG1.1: Set Id not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VDG11000
          ENDIF
.
          MATCH     BLANKSTR,DG100101            * field null ?
          IF        @EQUAL
            MOVE      "DG1.1: Set Id is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VDG11000
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 1
            MOVE      "DG1.1: Set ID has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VDG11000
          ENDIF
.
          MATCH     "1",DG100101                 * is Set ID "1" ?
          IF        !@EQUAL
            MOVE      "DG1.1: Set ID not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          MOVE      DG100101,RTMPSEGC            * load DG1 segment count
          MOVE      ONE,RTMPFLDN                 * load field number
          MOVE      ONE,RTMPFCNT                 * load field number count
          MOVE      ONE,RTMPCMPN                 * load component number
          PACK      RTMPVRBL,DG100101,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Diagnosis Description (DG1.4)
.
VDG11000  STRIP     DG100401
          MOVELPTR  DG100401,FORM3
          IF        FORM3 = 0
            MOVE      "DG1.4: Diagnosis Description not populated",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          MOVE      DG100101,RTMPSEGC            * load DG1 segment count
          MOVE      FOUR,RTMPFLDN                * load field number
          MOVE      ONE,RTMPFCNT                 * load field number count
          MOVE      ONE,RTMPCMPN                 * load component number
          PACK      RTMPVRBL,DG100401,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Diagnosis Type (DG1.6)
.
VDG12000  STRIP     DG100601
          MOVELPTR  DG100601,FORM3
          IF        FORM3 = 0
            MOVE      "DG1.6: Diagnosis Type not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VDG19999
          ENDIF
.
          MATCH     BLANKSTR,DG100601            * field null ?
          IF        @EQUAL
            MOVE      "DG1.6: Diagnosis Type is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VDG19999
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 1
            MOVE      "DG1.6: Diagnosis Type has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VDG19999
          ENDIF
.
          MATCH     "A",DG100601                 * is Diagnosis Type "A" ?
          IF        !@EQUAL
            MOVE      "DG1.6: Diagnosis Type not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          MOVE      DG100101,RTMPSEGC            * load DG1 segment count
          MOVE      SIX,RTMPFLDN                 * load field number
          MOVE      ONE,RTMPFCNT                 * load field number count
          MOVE      ONE,RTMPCMPN                 * load component number
          PACK      RTMPVRBL,DG100601,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
VDG19999  RETURN
+
.*****************************************************************************
.*                            VDGE0000             Called by: PROC0000       *
.*      Validate that the mandatory EMR DG1 fields are populated or null.    *
.*****************************************************************************
.
.         Set Id (DG1.1)
.
VDGE0000  STRIP     DG100101
          MOVELPTR  DG100101,FORM3
          IF        FORM3 = 0
            MOVE      "DG1.1: Set Id not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VDGE1000
          ENDIF
.
          MATCH     BLANKSTR,DG100101            * field null ?
          IF        @EQUAL
            MOVE      "DG1.1: Set Id is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VDGE1000
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 3
            MOVE      "DG1.1: Set ID has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VDGE1000
          ENDIF
.
          TYPE      DG100101                     * is Set ID numeric ?
          IF        !@EQUAL
            MOVE      "DG1.1: Set ID not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          MOVE      DG100101,RTMPSEGC            * load DG1 segment count
          MOVE      ONE,RTMPFLDN                 * load field number
          MOVE      ONE,RTMPFCNT                 * load field number count
          MOVE      ONE,RTMPCMPN                 * load component number
          PACK      RTMPVRBL,DG100101,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Diagnosis Code (DG1.3)
.
VDGE1000  STRIP     DG100301
          MOVELPTR  DG100301,FORM3
          IF        FORM3 = 0
            MOVE      "DG1.3: Diagnosis Code not populated",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          PACK      KEY9,DG100301,SP70
          CALL      RDEMICD1                     * code on emricdaf ?
          IF        OVRCD = 1
            MOVE      "DG1.3: Diagnosis Code not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          COMPARE   ONE,EMICACTV
          IF        @EQUAL
            MOVE      "DG1.3: Diagnosis Code not active",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          MOVE      DG100101,RTMPSEGC            * load DG1 segment count
          MOVE      THREE,RTMPFLDN               * load field number
          MOVE      ONE,RTMPFCNT                 * load field number count
          MOVE      ONE,RTMPCMPN                 * load component number
          PACK      RTMPVRBL,DG100301,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     DG100302
          MOVE      TWO,RTMPCMPN                 * load component number
          PACK      RTMPVRBL,DG100302,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Diagnosis Description (DG1.4)
.
VDGE2000  STRIP     DG100401
          MOVELPTR  DG100401,FORM3
          IF        FORM3 = 0
            GOTO      VDGE3000
.davvy      MOVE      "DG1.4: Diagnosis Description not populated",ERRORDSC
.davvy      MOVE      "207",ERRORNUM
.davvy      CALL      EROR0000
          ENDIF
.
          MOVE      DG100101,RTMPSEGC            * load DG1 segment count
          MOVE      FOUR,RTMPFLDN                * load field number
          MOVE      ONE,RTMPFCNT                 * load field number count
          MOVE      ONE,RTMPCMPN                 * load component number
          PACK      RTMPVRBL,DG100401,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Diagnosis Type (DG1.6)
.
VDGE3000  STRIP     DG100601
          MOVELPTR  DG100601,FORM3
          IF        FORM3 = 0
            MOVE      "DG1.6: Diagnosis Type not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VDGE9999
          ENDIF
.
          MATCH     BLANKSTR,DG100601            * field null ?
          IF        @EQUAL
            MOVE      "DG1.6: Diagnosis Type is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VDGE9999
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 1
            MOVE      "DG1.6: Diagnosis Type has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VDGE9999
          ENDIF
.
          MATCH     "E",DG100601                 * is Diagnosis Type "E" ?
          IF        !@EQUAL
            MOVE      "DG1.6: Diagnosis Type not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          MOVE      DG100101,RTMPSEGC            * load DG1 segment count
          MOVE      SIX,RTMPFLDN                 * load field number
          MOVE      ONE,RTMPFCNT                 * load field number count
          MOVE      ONE,RTMPCMPN                 * load component number
          PACK      RTMPVRBL,DG100601,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
VDGE9999  RETURN
+
.*****************************************************************************
.*                            VZST0000             Called by: PROC0000       *
.*      Validate that the mandatory ZST fields are populated or null.        *
.*****************************************************************************
.
.         Primary Key Value - ZST (ZST.1, Component 1)
.         HL7 Mandatory
.
VZST0000  STRIP     ZST00101
          MOVELPTR  ZST00101,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZST.1: Primary Key Value component 1 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,ZST00101
          IF        @EQUAL
            MOVE      "ZST.1: Primary Key Value component 1 is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Make sure that this field matches MFE.4
.
          MATCH     ZST00101,MFE00401            * same component 1 ?
          IF        !@EQUAL
            MOVE      "ZST.1: Primary Key Value component 1 doesnt match MFE.4",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Primary Key Value - ZST (ZST.1, Component 3)
.         HL7 Mandatory
.
          STRIP     ZST00103
          MOVELPTR  ZST00103,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZST.1: Primary Key Value component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,ZST00103
          IF        @EQUAL
            MOVE      "ZST.1: Primary Key Value component 3 is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 5
            MOVE      "ZST.1: Primary Key Value component 3 has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          MATCH     "PRIVD",ZST00103
          IF        !@EQUAL
            MOVE      "ZST.1: Primary Key Value component 3 not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         ZST.2 Linked Doctor Code (optional)
.
VZST0200  STRIP     ZST00201
          MOVELPTR  ZST00201,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZST0300 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZST00201            * field null ?
          GOTO      VZST0300 IF EQUAL            * yes
.
.davvy    PACK      KEY10,ZST00201,SP70
.davvy    CALL      RAPMHCP1
.davvy    IF        OVRCD = 1
.davvy      MOVE      "ZST.2: HCP Code not valid",ERRORDSC
.davvy      MOVE      "207",ERRORNUM
.davvy      CALL      EROR0000
.davvy    ENDIF
.
.         ZST.3 HCP Status (optional)
.
VZST0300  SQUEEZE   ZST00301
          MOVELPTR  ZST00301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZST0600 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZST00301            * field null ?
          GOTO      VZST0600 IF EQUAL            * yes
.
          IF        FORM3 > 2
            MOVE      "ZST.3: HCP Status has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          TYPE      ZST00301
          IF        !@EQUAL
            MOVE      "ZST.3: HCP Status not numeric",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          MOVE      ZST00301,D2
          MOVE      D2,F2
          IF        F2 > 13
            MOVE      "ZST.3: HCP Status not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         ZST.6 Accreditation Details (optional)
.
VZST0600  SQUEEZE   ZST00602                     * accreditation type
          MOVELPTR  ZST00602,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZST0610 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZST00602            * field null ?
          GOTO      VZST0610 IF EQUAL            * yes
.
          PACK      KEY5,ANSA,ANST,ZST00602,SP70
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ZST.6 : Accreditation Type Cat AT not on file",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VZST0610  STRIP     ZST00603                     * accreditation date
          MOVELPTR  ZST00603,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZST0620 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZST00603            * field null ?
          GOTO      VZST0620 IF EQUAL            * yes
.
          MOVE      ZST00603,DIM14
          MOVE      "ZST.6 ",FIELDID
          MOVE      ZERO,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
VZST0620  SQUEEZE   ZST00604                     * accreditation years
          MOVELPTR  ZST00604,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZST0700 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZST00604            * field null ?
          GOTO      VZST0700 IF EQUAL            * yes
.
          TYPE      ZST00604
          IF        !@EQUAL
            MOVE      "ZST.6: Component 4 not numeric",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          IF        FORM3 > 2
            MOVE      "ZST.6: Component 4 is greater than 2 characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         ZST.7 Registration Details (optional)
.
VZST0700  STRIP     ZST00701                     * registration number
          MOVELPTR  ZST00701,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZST0710 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZST00701            * field null ?
          GOTO      VZST0710 IF EQUAL            * yes
.
          IF        FORM3 > 10
            MOVE      "ZST.7: Component 1 is greater than 10 characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VZST0710  STRIP     ZST00702                     * registration from date
          MOVELPTR  ZST00702,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZST0720 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZST00702            * field null ?
          GOTO      VZST0720 IF EQUAL            * yes
.
          MOVE      ZST00702,DIM14
          MOVE      "ZST.7 ",FIELDID
          MOVE      ZERO,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
VZST0720  STRIP     ZST00703                     * registration to date
          MOVELPTR  ZST00703,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZST0800 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZST00703            * field null ?
          GOTO      VZST0800 IF EQUAL            * yes
.
          MOVE      ZST00703,DIM14
          MOVE      "ZST.7 ",FIELDID
          MOVE      ZERO,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
.         ZST.8 Insurance Details (optional)
.
VZST0800  STRIP     ZST00802                     * insurance code
          MOVELPTR  ZST00802,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZST0810 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZST00802            * field null ?
          GOTO      VZST0810 IF EQUAL            * yes
.
          PACK      KEY6,ZST00802,SP70
          CALL      RDINSR1
          IF        OVRCD = 1
            MOVE      "ZST.8: Insurance Code not valid on patin1af",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VZST0810  STRIP     ZST00803                     * insurance policy number
          MOVELPTR  ZST00803,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZST0820 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZST00803            * field null ?
          GOTO      VZST0820 IF EQUAL            * yes
.
          IF        FORM3 > 20
            MOVE      "ZST.8: Component 3 is greater than 20 characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VZST0820  STRIP     ZST00804                     * insurance from date
          MOVELPTR  ZST00804,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZST0830 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZST00804            * field null ?
          GOTO      VZST0830 IF EQUAL            * yes
.
          MOVE      ZST00804,DIM14
          MOVE      "ZST.8 ",FIELDID
          MOVE      ZERO,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
VZST0830  STRIP     ZST00805                     * insurance to date
          MOVELPTR  ZST00805,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZST0900 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZST00805            * field null ?
          GOTO      VZST0900 IF EQUAL            * yes
.
          MOVE      ZST00805,DIM14
          MOVE      "ZST.8 ",FIELDID
          MOVE      ZERO,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
.         ZST.9 Preferred Method of Contact/Name (optional)
.
VZST0900  STRIP     ZST00902                     * preferred contact method (CZ)
          MOVELPTR  ZST00902,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZST9999 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZST00902            * field null ?
          GOTO      VZST9999 IF EQUAL            * yes
.
          PACK      KEY5,ANSC,ANSZ,ZST00902,SP70
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ZST.9: Preferred contact method not valid on Cat CZ",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VZST9999  RETURN
+
.*****************************************************************************
.*                            VZSF0000             Called by: PROC0000       *
.*       Validate, load and write ZSF fields to the temporary table.         *
.*       The temporary table is used as we can receive more than 1 ZSF       *
.*       segment per message.                                                *
.*****************************************************************************
.
VZSF0000  MOVE      ZSFSEGMT,RTMPSEGI            * load segment id
.
          ADD       ONE,ZSFCOUNT                 * increment ZSF segment count
          MOVE      ZERO,ZSFFOUND                * set ZSF found flag
          MOVE      ZSFCOUNT,RTMPSEGC            * load ZSF segment count
.
.         Primary Key Value - ZSF (ZSF.1, Component 1)
.         HL7 Mandatory
.
VZSF0100  STRIP     ZSF00101
          MOVELPTR  ZSF00101,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZSF.1: Primary Key Value component 1 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,ZSF00101
          IF        @EQUAL
            MOVE      "ZSF.1: Primary Key Value component 1 is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Make sure that this field matches MFE.4
.
          MATCH     ZSF00101,MFE00401            * same component 1 ?
          IF        !@EQUAL
            MOVE      "ZSF.1: Primary Key Value component 1 doesnt match MFE.4",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Primary Key Value - ZSF (ZSF.1, Component 3)
.         HL7 Mandatory
.
          STRIP     ZSF00103
          MOVELPTR  ZSF00103,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZSF.1: Primary Key Value component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,ZSF00103
          IF        @EQUAL
            MOVE      "ZSF.1: Primary Key Value component 3 is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 5
            MOVE      "ZSF.1: Primary Key Value component 3 has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          MATCH     "PRIVD",ZSF00103
          IF        !@EQUAL
            MOVE      "ZSF.1: Primary Key Value component 3 not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          MOVE      ONE,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,ZSF00101,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZSF00102
          MOVE      TWO,RTMPCMPN
          PACK      RTMPVRBL,ZSF00102,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZSF00103
          MOVE      THREE,RTMPCMPN
          PACK      RTMPVRBL,ZSF00103,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         ZSF.2 Hospital Campus Code (mandatory for webPAS)
.
VZSF0200  STRIP     ZSF00201
.
          PACK      KEY3,ZSF00201,SP70
          CALL      RAPTHSP1                     * code on file ?
          IF        OVRCD = 1
            MOVE      "ZSF.2: Hospital not on file",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VZSF0290  MOVE      TWO,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,ZSF00201,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         ZSF.3 Hospital Staff ID (mandatory for webPAS)
.
VZSF0300  STRIP     ZSF00301
          MOVELPTR  ZSF00301,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZSF.3: Component 1 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          MATCH     BLANKSTR,ZSF00301
          IF        @EQUAL
            MOVE      "ZSF.3: Component 1 is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          MATCH     ZSF00301,STF00201
          IF        !@EQUAL
            MOVE      "ZSF.3: Hospital Staff ID does not match HCP Staff ID",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VZSF0390  MOVE      THREE,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,ZSF00301,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         ZSF.4 HCP Status for Campus (optional)
.
VZSF0400  SQUEEZE   ZSF00401
          MOVELPTR  ZSF00401,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSF0500 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSF00401            * field null ?
          GOTO      VZSF0490 IF EQUAL            * yes
.
          IF        FORM3 > 2
            MOVE      "ZSF.4: HCP Status for Campus has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          TYPE      ZSF00401
          IF        !@EQUAL
            MOVE      "ZSF.4: HCP Status for Campus not numeric",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          MOVE      ZSF00401,D2
          MOVE      D2,F2
          IF        F2 > 13
            MOVE      "ZSF.4: HCP Status for Campus not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VZSF0490  MOVE      FOUR,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,ZSF00401,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         ZSF.5 Doctor Provider Number (optional)
.
VZSF0500  STRIP     ZSF00501
          MOVELPTR  ZSF00501,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSF0600 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSF00501            * field null ?
          GOTO      VZSF0590 IF EQUAL            * yes
.
VZSF0590  MOVE      FIVE,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,ZSF00501,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         ZSF.6 Accreditation Details (optional)
.
VZSF0600  SQUEEZE   ZSF00602
          MOVELPTR  ZSF00602,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSF0610 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSF00602            * field null ?
          GOTO      VZSF0605 IF EQUAL            * yes
.
          PACK      KEY5,ANSA,ANST,ZSF00602,SP70
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ZSF.6 : Accreditation Type Cat AT not on file",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VZSF0605  MOVE      SIX,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      TWO,RTMPCMPN
          PACK      RTMPVRBL,ZSF00602,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
VZSF0610  STRIP     ZSF00603                     * accreditation date
          MOVELPTR  ZSF00603,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZSF0620 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSF00603            * field null ?
          GOTO      VZSF0615 IF EQUAL            * yes
.
          MOVE      ZSF00603,DIM14
          MOVE      "ZSF.6 ",FIELDID
          MOVE      ZERO,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
VZSF0615  MOVE      THREE,RTMPCMPN
          PACK      RTMPVRBL,ZSF00603,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
VZSF0620  SQUEEZE   ZSF00604                     * accreditation years
          MOVELPTR  ZSF00604,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZSF0700 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSF00604            * field null ?
          GOTO      VZSF0690 IF EQUAL            * yes
.
          TYPE      ZSF00604
          IF        !@EQUAL
            MOVE      "ZSF.6: Component 4 not numeric",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          IF        FORM3 > 2
            MOVE      "ZSF.6: Component 4 is greater than 2 characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VZSF0690  MOVE      FOUR,RTMPCMPN
          PACK      RTMPVRBL,ZSF00604,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         ZSF.7 Active/Inactive Flag (optional)
.
VZSF0700  STRIP     ZSF00701
          MOVELPTR  ZSF00701,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSF0800 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSF00701            * field null ?
          GOTO      VZSF0790 IF EQUAL            * yes
.
          IF        FORM3 <> 1
            MOVE      "ZSF.7: Active Flag has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          MATCH     "A",ZSF00701                 * Active ?
          GOTO      VZSF0790 IF EQUAL            * yes
.
          MATCH     "I",ZSF00701                 * Inactive ?
          GOTO      VZSF0790 IF EQUAL            * yes
.
          MOVE      "ZSF.7: Active Flag is not valid",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
.
VZSF0790  MOVE      SEVEN,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,ZSF00701,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         ZSF.8 Institution Active Date (optional)
.
VZSF0800  STRIP     ZSF00801
          MOVELPTR  ZSF00801,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSF0900 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSF00801            * field null ?
          GOTO      VZSF0890 IF EQUAL            * yes
.
          MOVE      ZSF00801,DIM14
          MOVE      "ZSF.8 ",FIELDID
          MOVE      ONE,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
VZSF0890  MOVE      EIGHT,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,ZSF00801,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         ZSF.9 Institution Inactive Date (optional)
.
VZSF0900  STRIP     ZSF00901
          MOVELPTR  ZSF00901,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSF0910 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSF00901            * field null ?
          GOTO      VZSF0910 IF EQUAL            * yes
.
          MOVE      ZSF00901,DIM14
          MOVE      "ZSF.9 ",FIELDID
          MOVE      ZERO,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
          MATCH     ZSF00801,ZSF00901
          IF        @LESS
            MOVE      "ZSF.9: Activation Date after Inactivation Date",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         If ZSF.7 is not populated, default active status based on ZSF.9
.
          PACK      D1,ZSF00701,SP1
          MATCH     SP1,D1
          GOTO      VZSF0920 IF NOT EQUAL        * active status populated ?
.
.         If end date is populated and in the future, set status to Active
.         If end date is populated and current or past, set status to Inactive
.
          MATCH     ZSF00901,CURRDATE
          IF        @LESS
            MOVE      "A",ZSF00701            * set status to active
          ELSE
            MOVE      "I",ZSF00701            * set status to inactive
          ENDIF
          MOVE      SEVEN,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,ZSF00701,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
          GOTO      VZSF0920
.
.         There is no end date, so check if the status is inactive and if it
.         is, default the end date to the date of the message
.
VZSF0910  MATCH     ANSI,ZSF00701
          IF        @EQUAL
            MOVE      MSH00701,ZSF00901
          ENDIF
.
VZSF0920  MOVE      NINE,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,ZSF00901,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
VZSF9999  RETURN
+
.*****************************************************************************
.*                            VSCH0000             Called by: PROC0000       *
.*      Validate that the mandatory SCH fields are populated or null.        *
.*****************************************************************************
.
VSCH0000  COMPARE   TEN7,MESSGNUM
          GOTO      VSCH5000 IF EQUAL            * SIU^S12 (MOSAIQ)
.
          COMPARE   TEN8,MESSGNUM
          GOTO      VSCH5000 IF EQUAL            * SIU^S13 (MOSAIQ)
.
          COMPARE   TEN9,MESSGNUM
          GOTO      VSCH5000 IF EQUAL            * SIU^S15 (MOSAIQ)
.
          COMPARE   TWENTY,MESSGNUM
          GOTO      VSCH5000 IF EQUAL            * SIU^S26 (MOSAIQ)
.
          COMPARE   TEN2,MESSGNUM
          IF        @EQUAL
            MATCH     "2.4",MSH01201
            GOTO      VSCH5000 IF EQUAL          * SIU^S14 (MOSAIQ)
          ENDIF
.
.0890602  IF        MESSGNUM = 17 | MESSGNUM = 18 | MESSGNUM = 19 etc.
.0890602    GOTO      VSCH5000                   * SIU^Sxx (MOSAIQ)
.0890602  ENDIF
.
.         Placer Appointment ID (webPAS Theatre Unique ID - SCH.1)
.
          STRIP     SCH00101
          MOVELPTR  SCH00101,FORM3
          IF        FORM3 = 0
            MOVE      "SCH.1: Placer Appointment ID not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSCH1000
          ENDIF
.
          MATCH     BLANKSTR,SCH00101            * field null ?
          IF        @EQUAL
            MOVE      "SCH.1: Placer Appointment ID is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSCH1000
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 10
            MOVE      "SCH.1: Placer Appointment ID has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VSCH1000
          ENDIF
.
.         Check that the Theatre Unique ID is valid (oprdetaf)
.
          PACK      KEY10,SCH00101,SP10
          RJUSTIFY  KEY10
          CALL      RDOPDEA3                     * record on file ?
          IF        OVRCD = 1
            MOVE      "SCH.1: Placer Appointment ID not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VSCH1000
          ENDIF
.
.         We have a valid Theatre Unique ID, so check that SCH.1 component 2
.         is also populated (HL7 requirement)
.
          STRIP     SCH00102
          MOVELPTR  SCH00102,FORM3
          IF        FORM3 = 0
            MOVE      "SCH.1: Placer Appointment ID component 2 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSCH1000
          ENDIF
.
          MATCH     BLANKSTR,SCH00102            * field null ?
          IF        @EQUAL
            MOVE      "SCH.1: Placer Appointment ID component 2 is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSCH1000
          ENDIF
.
.         Event Reason (SCH.6)
.
VSCH1000  STRIP     SCH00601
          MOVELPTR  SCH00601,FORM3
          IF        FORM3 = 0
            MOVE      "SCH.6: Event Reason not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSCH2000
          ENDIF
.
          MATCH     BLANKSTR,SCH00601            * field null ?
          IF        @EQUAL
            MOVE      "SCH.6: Event Reason is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSCH2000
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 <> 6
            MOVE      "SCH.6: Event Reason has invalid number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VSCH2000
          ENDIF
.
.         Check this is a "Change" record
.
          MATCH     "Change",SCH00601
          IF        !@EQUAL
            MOVE      "SCH.6: Event Reason not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VSCH2000
          ENDIF
.
.         We have a valid Event Reason, so check that SCH.6 component 3
.         is also populated (HL7 requirement)
.
          STRIP     SCH00603
          MOVELPTR  SCH00603,FORM3
          COMPARE   ZERO,FORM3
          IF        @EQUAL
            MOVE      "SCH.6: Event Reason component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSCH2000
          ENDIF
.
          MATCH     BLANKSTR,SCH00603            * field null ?
          IF        @EQUAL
            MOVE      "SCH.6: Event Reason component 3 is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSCH2000
          ENDIF
.
.         Appointment Timing Quantity (SCH.11)
.
VSCH2000  STRIP     SCH01101
          MOVELPTR  SCH01101,FORM3
          IF        FORM3 = 0
            MOVE      "SCH.11: Appointment Timing Quantity not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSCH3000
          ENDIF
.
          MATCH     BLANKSTR,SCH01101            * field null ?
          IF        @EQUAL
            MOVE      "SCH.11: Appointment Timing Quantity is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSCH3000
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 1
            MOVE      "SCH.11: Appointment Timing Quantity has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VSCH3000
          ENDIF
.
.         Check that the value is numeric
.
          TYPE      SCH01101
          IF        !@EQUAL
            MOVE      "SCH.11: Appointment Timing Quantity not numeric",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSCH3000
          ENDIF
.
.         The value is numeric, so verify it's "1"
.
          MATCH     "1",SCH01101
          IF        !@EQUAL
            MOVE      "SCH.11: Appointment Timing Quantity not valid",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSCH3000
          ENDIF
.
.         Filler Contact Person (SCH.16)
.
VSCH3000  STRIP     SCH01601
          MOVELPTR  SCH01601,FORM3
          IF        FORM3 = 0
            MOVE      "SCH.16: Filler Contact Person not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSCH4000
          ENDIF
.
          MATCH     BLANKSTR,SCH01601            * field null ?
          IF        @EQUAL
            MOVE      "SCH.16: Filler Contact Person is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSCH4000
          ENDIF
.
.         We have a Filler Contact Person, so check that SCH.16 component 9
.         is also populated (HL7 requirement)
.
          STRIP     SCH01609
          MOVELPTR  SCH01609,FORM3
          COMPARE   ZERO,FORM3
          IF        @EQUAL
            MOVE      "SCH.16: Filler Contact Person component 9 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSCH4000
          ENDIF
.
          MATCH     BLANKSTR,SCH01609            * field null ?
          IF        @EQUAL
            MOVE      "SCH.16: Filler Contact Person component 9 is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSCH4000
          ENDIF
.
.         Entered by Person (SCH.20)
.
VSCH4000  STRIP     SCH02001
          MOVELPTR  SCH02001,FORM3
          IF        FORM3 = 0
            MOVE      "SCH.20: Entered By Person not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSCH9999
          ENDIF
.
          MATCH     BLANKSTR,SCH02001            * field null ?
          IF        @EQUAL
            MOVE      "SCH.20: Entered By Person is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSCH9999
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 10
            MOVE      "SCH.20: Entered By Person has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VSCH9999
          ENDIF
.
.         Check that the User ID is valid (websecaf)
.
          PACK      KEY10,SCH02001,SP10
          CALL      RDWBSE1                      * record on file ?
          IF        OVRCD = 1
            MOVE      "SCH.20: Entered By Person not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VSCH9999
          ENDIF
.
.         We have a valid Entered By Person, so check that SCH.20 component 9
.         is also populated (HL7 requirement)
.
          STRIP     SCH02009
          MOVELPTR  SCH02009,FORM3
          COMPARE   ZERO,FORM3
          IF        @EQUAL
            MOVE      "SCH.20: Entered By Person component 9 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSCH9999
          ENDIF
.
          MATCH     BLANKSTR,SCH02009            * field null ?
          IF        @EQUAL
            MOVE      "SCH.20: Entered By Person component 9 is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSCH9999
          ENDIF
          GOTO      VSCH9999
.
VSCH5000  CALL      MSCH0000                     * SIU messages (MOSAIQ)
          GOTO      VSCH9999
.
VSCH9999  RETURN
+
.*****************************************************************************
.*                           MSCH0000           Called by: VSCH0000          *
.*              Validate the SCH fields for SIU^Sxx messages (MOSAIQ OUT/INP)*
.*****************************************************************************
.
.         SCH.11    Appointment Timing Quantity (TQ)
.         SCH.11.4  Appointment Start Time (TS)
.
MSCH0000  STRIP     SCH01104
          MOVELPTR  SCH01104,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      MSCH0050 IF EQUAL            * no
.
          MATCH     BLANKSTR,SCH01104            * field null ?
          GOTO      MSCH0050 IF EQUAL            * yes
.
          PACK      DIM14,SCH01104,ZERO,ZERO
          MOVELPTR  DIM14,FORM3
          MOVE      "SCH.11",FIELDID
          MOVE      ZERO,DATFLAG1
          MOVE      ONE,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
.         SCH.11.5  Appointment Start End (TS)
.
MSCH0050  STRIP     SCH01105
          MOVELPTR  SCH01105,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      MSCH0070 IF EQUAL            * no
.
          MATCH     BLANKSTR,SCH01105            * field null ?
          GOTO      MSCH0070 IF EQUAL            * yes
.
          PACK      DIM14,SCH01105,ZERO,ZERO
          MOVELPTR  DIM14,FORM3
          MOVE      "SCH.11",FIELDID
          MOVE      ZERO,DATFLAG1
          MOVE      ONE,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
.         SCH.22    Entered by Location (PL)
.         SCH.22.1  Point of Care (IS)
.
MSCH0070  STRIP     SCH02201
          MOVELPTR  SCH02201,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      MSCH0100 IF EQUAL            * no
.
          MATCH     BLANKSTR,SCH02201            * field null ?
          GOTO      MSCH0100 IF EQUAL            * yes
.
.         SCH.22.4  Facility (HD)
.
MSCH0100  MOVE      SP3,SCH22HSP
          COMPARE   ONE,IBCNMHOS                 * using multi-hospital
          GOTO      MSCH0175 IF NOT EQUAL        * no
.
          STRIP     SCH02204
          MOVELPTR  SCH02204,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "SCH.22: Component 4 facility not populated",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      MSCH0200
          ENDIF
.
          MATCH     BLANKSTR,SCH02204            * field null ?
          IF        @EQUAL
            MOVE      "SCH.22: Component 4 facility is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      MSCH0200
          ENDIF
.
.         Multihospital: Validate that the facility code exists as an approval
.         number on a hospital record (pathspaf)
.
          MOVE      SP3,KEY3
          CALL      RSPTHSP1                     * position at start of file
MSCH0110  CALL      RKPTHSP1                     * read next record
          BRANCH    OVRCD,MSCH0150               * eof - finished
.
          MATCH     "0",PTCNVIMS
          IF        @EQUAL
            GOTO      MSCH0120
          ENDIF
.
          MATCH     "1",PTCNVIMS
          IF        @EQUAL
            GOTO      MSCH0121
          ENDIF
.
MSCH0120  MATCH     SCH02204,PTHSAPPR            * same approval number ?
          IF        @EQUAL
            MOVE      PTHSHOSP,SCH22HSP          * save hospital code
            GOTO      MSCH0200
          ENDIF
          GOTO      MSCH0110
.
MSCH0121  MATCH     SCH02204,PTHSHOSP
          IF        @EQUAL
            MOVE      PTHSHOSP,SCH22HSP          * save hospital code
            GOTO      MSCH0200
          ENDIF
          GOTO      MSCH0110
.
MSCH0150  MOVE      "SCH.22: Component 4 facility not valid",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      MSCH0200
.
.         Single hospital: If populated, validate that the facility code exists
.         as the approval number on file (controlf)
.
MSCH0175  STRIP     SCH02204
          MOVELPTR  SCH02204,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      MSCH0200 IF EQUAL            * no
.
          MATCH     BLANKSTR,SCH02204            * field null ?
          GOTO      MSCH0200 IF EQUAL            * yes
.
          MATCH     SCH02204,CAPPRVNO
          IF        !@EQUAL
            MOVE      "SCH.22: Component 4 facility not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      MSCH0200
          ENDIF
.
.         SCH.25  Filler Status Code (CE)
.
MSCH0200  STRIP     SCH02501
          MOVELPTR  SCH02501,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      MSCH0300 IF EQUAL            * no
.
          MATCH     BLANKSTR,SCH02501            * field null ?
          GOTO      MSCH0300 IF EQUAL            * yes
.
.0890602  STRIP     SCH02503
.0890602  MOVELPTR  SCH02503,FORM3
.0890602  COMPARE   ZERO,FORM3                   * field populated ?
.0890602  IF        @EQUAL
.0890602    MOVE      "SCH.25: Filler Status Code component 3 not populated",ERRORDSC
.0890602    MOVE      "101",ERRORNUM
.0890602    CALL      EROR0000
.0890602    GOTO      MSCH0300
.0890602  ENDIF
.0890602  MATCH     BLANKSTR,SCH02503            * field null ?
.0890602  IF        @EQUAL
.0890602    MOVE      "SCH.25: Filler Status Code component 3 is mandatory",ERRORDSC
.0890602    MOVE      "101",ERRORNUM
.0890602    CALL      EROR0000
.0890602    GOTO      MSCH0300
.0890602  ENDIF
.
MSCH0300
.
MSCH0999  RETURN
+
.*****************************************************************************
.*                            VZSC0000             Called by: PROC0000       *
.*      Validate that the mandatory ZSC fields are populated or null.        *
.*****************************************************************************
.
.         Placer Appointment ID (webPAS Theatre Unique ID - ZSC.1)
.
VZSC0000  STRIP     ZSC00101
          MOVELPTR  ZSC00101,FORM3
          IF        FORM3 = 0
            MOVE      "ZSC.1: Placer Appointment ID not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC0100
          ENDIF
.
          MATCH     BLANKSTR,ZSC00101            * field null ?
          IF        @EQUAL
            MOVE      "ZSC.1: Placer Appointment ID is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC0100
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 10
            MOVE      "ZSC.1: Placer Appointment ID has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC0100
          ENDIF
.
.         Check that the Theatre Unique ID is valid (oprdetaf)
.
          PACK      KEY10,ZSC00101,SP10
          RJUSTIFY  KEY10
          CALL      RDOPDEA3                     * record on file ?
          IF        OVRCD = 1
            MOVE      "ZSC.1: Placer Appointment ID not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC0100
          ENDIF
.
.         We have a valid Theatre Unique ID, so check that ZSC.1 component 2
.         is also populated (HL7 requirement)
.
          STRIP     ZSC00102
          MOVELPTR  ZSC00102,FORM3
          IF        FORM3 = 0
            MOVE      "ZSC.1: Placer Appointment ID component 2 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC0100
          ENDIF
.
          MATCH     BLANKSTR,ZSC00102            * field null ?
          IF        @EQUAL
            MOVE      "ZSC.1: Placer Appointment ID component 2 is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC0100
          ENDIF
.
.         Make sure the Theatre Unique ID is the same in SCH.1 and ZSC.1
.
          MATCH     SCH00101,ZSC00101            * same theatre id as for SCH
          IF        !@EQUAL
            MOVE      "ZSC.1: Placer Appointment ID inconsistent",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC0100
          ENDIF
.
.         ZSC.2 (Theatre Date)
.
.         If populated, make sure that the theatre date is valid and
.         not in the future.
.
VZSC0100  STRIP     ZSC00201
          MOVELPTR  ZSC00201,FORM3
          IF        FORM3 <> 0
            MOVE      ZSC00201,DIM14
            MOVE      "ZSC.2 ",FIELDID
            MOVE      ONE,DATFLAG1
            MOVE      ZERO,DATFLAG2
            CALL      VDTM0000                   * date validation
          ENDIF
.
.         ZSC.3 (Theatre Start Time)
.
.         If populated, make sure that the theatre start time is valid
.
          STRIP     ZSC00301
          MOVELPTR  ZSC00301,FORM3
          IF        FORM3 <> 0
            MOVE      ZSC00301,DIM14
            MOVE      "ZSC.3 ",FIELDID
            MOVE      ZERO,DATFLAG1
            MOVE      TWO,DATFLAG2
            CALL      VDTM0000                   * time validation
          ENDIF
.
.         Anaesthetic Key (ZSC.4 - Component 1)
.
          STRIP     ZSC00401
          MOVELPTR  ZSC00401,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSC0200 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZSC00401            * null field ?
          GOTO      VZSC0200 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 3
            MOVE      "ZSC.4: Anaesthetic key has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC0150
          ENDIF
.
.         Make sure the code is valid for Cat OA
.
          PACK      KEY5,ANSO,ANSA,ZSC00401,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ZSC.4: Anaesthetic Key not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC0150
          ENDIF
.
.         Verify the code is active
.
          MATCH     ANSI,PTCOACTV
          IF        @EQUAL
            MOVE      "ZSC.4: Anaesthetic Key not active",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC0150
          ENDIF
.
.         Anaesthetic Key (ZSC.4 - Component 3)
.
VZSC0150  STRIP     ZSC00403
          MOVELPTR  ZSC00403,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZSC.4: Anaesthetic Key component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC0200
          ENDIF
.
.         Patient Arrives Time (ZSC.5)
.
VZSC0200  STRIP     ZSC00501
          MOVELPTR  ZSC00501,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSC0250 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZSC00501            * null field ?
          GOTO      VZSC0250 IF EQUAL            * yes
.
          MOVE      ZSC00501,DIM14
          MOVE      "ZSC.5 ",FIELDID
          MOVE      ZERO,DATFLAG1
          MOVE      TWO,DATFLAG2
          CALL      VDTM0000                     * time validation
.
.         Anaesthetic Arrives Time (ZSC.6)
.
VZSC0250  STRIP     ZSC00601
          MOVELPTR  ZSC00601,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSC0300 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZSC00601            * null field ?
          GOTO      VZSC0300 IF EQUAL            * yes
.
          MOVE      ZSC00601,DIM14
          MOVE      "ZSC.6 ",FIELDID
          MOVE      ZERO,DATFLAG1
          MOVE      TWO,DATFLAG2
          CALL      VDTM0000                     * time validation
.
.         Surgery Start Time (ZSC.7)
.
VZSC0300  STRIP     ZSC00701
          MOVELPTR  ZSC00701,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSC0350 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZSC00701            * null field ?
          GOTO      VZSC0350 IF EQUAL            * yes
.
          MOVE      ZSC00701,DIM14
          MOVE      "ZSC.7 ",FIELDID
          MOVE      ZERO,DATFLAG1
          MOVE      TWO,DATFLAG2
          CALL      VDTM0000                     * time validation
.
.         Surgery Completed Time (ZSC.8)
.
VZSC0350  STRIP     ZSC00801
          MOVELPTR  ZSC00801,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSC0400 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZSC00801            * null field ?
          GOTO      VZSC0400 IF EQUAL            * yes
.
          MOVE      ZSC00801,DIM14
          MOVE      "ZSC.8 ",FIELDID
          MOVE      ZERO,DATFLAG1
          MOVE      TWO,DATFLAG2
          CALL      VDTM0000                     * time validation
.
.         Patient Out/Anaesthetic Stop Time (ZSC.9)
.
VZSC0400  STRIP     ZSC00901
          MOVELPTR  ZSC00901,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSC0450 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZSC00901            * null field ?
          GOTO      VZSC0450 IF EQUAL            * yes
.
          MOVE      ZSC00901,DIM14
          MOVE      "ZSC.9 ",FIELDID
          MOVE      ZERO,DATFLAG1
          MOVE      TWO,DATFLAG2
          CALL      VDTM0000                     * time validation
.
.         ASA Score (ZSC.10 - Component 1)
.
VZSC0450  MOVE      Z70,OPARD045                 * clear opard045
          STRIP     ZSC01001
          MOVELPTR  ZSC01001,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSC0550 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZSC01001            * null field ?
          GOTO      VZSC0550 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 4
            MOVE      "ZSC.10: ASA Score has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC0500
          ENDIF
.
.         Check for the first active Cat ok code where the HDP Equiv. matches
.         the value sent
.
          PACK      DIM4,ZSC01001,SP4
          PACK      KEY5,CATok,SP5
          CALL      RDSCODE1                     * Position on Cat ok
VZSC0460  CALL      RDKCODE1                     * read next record
          BRANCH    OVRCD,VZSC0470               * end of file
.
          MATCH     "ok",TCODE                   * category ok still ?
          GOTO      VZSC0470 IF NOT EQUAL        * no
.
          MATCH     THCSCOD,DIM4                 * same ASA Score value ?
          GOTO      VZSC0460 IF NOT EQUAL        * no - get next record
.
.         The code exists, so make sure it is active
.
          MATCH     ANSI,PTCOACTV                * inactive ?
          GOTO      VZSC0460 IF EQUAL            * yes - ignore record
.
          MOVE      ACODE,OPARD045               * load ASA code
          GOTO      VZSC0500
.
VZSC0470  MOVE      "ZSC.10: ASA Score equivalent code not found",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
.
.         ASA Score (ZSC.10 - Component 3)
.
VZSC0500  STRIP     ZSC01003
          MOVELPTR  ZSC01003,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZSC.10: ASA Score component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC0550
          ENDIF
.
.         Operation Class Key (ZSC.11 - Component 1)
.
VZSC0550  MOVE      Z70,OPSRG060                 * clear opsrg060
          STRIP     ZSC01101
          MOVELPTR  ZSC01101,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSC0650 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZSC01101            * null field ?
          GOTO      VZSC0650 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 1
            MOVE      "ZSC.11: Operation Class Key has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC0600
          ENDIF
.
.         Check for the first active Cat Tp code where indicator 1 matches
.         the value sent
.
          MOVE      ZSC01101,D1
          PACK      KEY5,CATTp,SP5
          CALL      RDSCODE1                     * Position on Cat Tp
VZSC0560  CALL      RDKCODE1                     * read next record
          BRANCH    OVRCD,VZSC0570               * end of file
.
          MATCH     "Tp",TCODE                   * category Tp still ?
          GOTO      VZSC0570 IF NOT EQUAL        * no
.
          MATCH     TCINDC1,D1                   * same Operation Class Key ?
          GOTO      VZSC0560 IF NOT EQUAL        * no - get next record
.
.         The code exists, so make sure it is active
.
          MATCH     ANSI,PTCOACTV                * inactive ?
          GOTO      VZSC0560 IF EQUAL            * yes - ignore record
.
          MOVE      ACODE,OPSRG060               * load Operation Class Key
          GOTO      VZSC0600
.
VZSC0570  MOVE      "ZSC.11: Operation Class Key equivalent code not found",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
.
.         Operation Class Key (ZSC.11 - Component 3)
.
VZSC0600  STRIP     ZSC01103
          MOVELPTR  ZSC01103,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZSC.11: Operation Class Key component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC0650
          ENDIF
.
.         Time Into Recovery (ZSC.12)
.
VZSC0650  STRIP     ZSC01201
          MOVELPTR  ZSC01201,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSC0700 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZSC01201            * null field ?
          GOTO      VZSC0700 IF EQUAL            * yes
.
          MOVE      ZSC01201,DIM14
          MOVE      "ZSC.12",FIELDID
          MOVE      ZERO,DATFLAG1
          MOVE      TWO,DATFLAG2
          CALL      VDTM0000                     * time validation
.
.         Exit Theatre Complex (ZSC.13)
.
VZSC0700  STRIP     ZSC01301
          MOVELPTR  ZSC01301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSC0750 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZSC01301            * null field ?
          GOTO      VZSC0750 IF EQUAL            * yes
.
          MOVE      ZSC01301,DIM14
          MOVE      "ZSC.13",FIELDID
          MOVE      ZERO,DATFLAG1
          MOVE      TWO,DATFLAG2
          CALL      VDTM0000                     * time validation
.
.         Overnight Indicator (ZSC.14 - ID)
.
VZSC0750  STRIP     ZSC01401
          MOVELPTR  ZSC01401,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZSC0760 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZSC01401            * field null ?
          GOTO      VZSC0760 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 1
            MOVE      "ZSC.14: Overnight Indicator has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC0800
          ENDIF
.
.         Task: 0867489 - Mods to cater for Y/N as well as 0 or 1
.
          REP       "Y1y1N0n0",ZSC01401
.
          MATCH     "1",ZSC01401                 * Overnight ?
          GOTO      VZSC0800 IF EQUAL
.
          MATCH     "0",ZSC01401                 * Not overnight ?
          GOTO      VZSC0800 IF EQUAL
.
          MOVE      "ZSC.14: Overnight Indicator is not valid",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VZSC0800
.
VZSC0760  MOVE      Z70,ZSC01401                 * field not sent
.
VZSC0800  COMPARE   TEN2,MESSGNUM                * S14 message ?
          GOTO      VZSC9999 IF NOT EQUAL        * no - finished
.
.         Time Patient Called For (ZSC.15 - TM)
.
.         First, we need to do some general checks which apply across
.         a number fields.
.         Check that the status of the oprdetaf record is valid.
.
          IF        OPDASTAT <> 2 & OPDASTAT <> 4
            MOVE      "ZSC.15: Patient must be admitted or discharged",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC1900
          ENDIF
.
.         Make sure the session date is not before the admission date and
.         not after the discharge date (if discharged).
.         Note: the admission record should have been read in VPV10000.
.
          MATCH     ADATE,OPDADATE
          IF        @LESS
            MOVE      "ZSC.15: Session Date before Admission Date",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC1900
          ENDIF
.
          IF        OPDASTAT = 4
            MOVE      OPDAADMN,KEY8
            CALL      RDDSCH1                    * discharged ?
            IF        OVRCD = 1
              MOVE      "ZSC.15: Discharge Record not on file",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VZSC1900
            ELSE
              MATCH     OPDADATE,DDATE
              IF        @LESS
                MOVE      "ZSC.15: Session Date after Discharge Date",ERRORDSC
                MOVE      "207",ERRORNUM
                CALL      EROR0000
                GOTO      VZSC1900
              ENDIF
            ENDIF
          ENDIF
.
.         Load the admission and discharge time for comparisons later
.
          MOVE      ATIME,ADMNTIME
          REP       ": ",ADMNTIME
          SQUEEZE   ADMNTIME
          MOVELPTR  ADMNTIME,FORM2
          IF        FORM2 < 6
            ENDSET    ADMNTIME
            APPEND    "00",ADMNTIME
            RESET     ADMNTIME
          ENDIF
.
          IF        OPDASTAT = 4
            MOVE      DTIME,DSCHTIME
            REP       ": ",DSCHTIME
            SQUEEZE   DSCHTIME
            MOVELPTR  DSCHTIME,FORM2
            IF        FORM2 < 6
              ENDSET    DSCHTIME
              APPEND    "00",DSCHTIME
              RESET     DSCHTIME
            ENDIF
          ENDIF
.
          STRIP     ZSC01501
          MOVELPTR  ZSC01501,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZSC0900 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZSC01501            * null field ?
          GOTO      VZSC0900 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters (hhmmss)
.
          IF        FORM3 <> 6
            MOVE      "ZSC.15: Time Patient Called For has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC0900
          ENDIF
.
          PACK      DIM14,OPDADATE,ZSC01501
          MOVELPTR  DIM14,FORM3
          MOVE      "ZSC.15",FIELDID
          MOVE      ONE,DATFLAG1                 * no date/time in the future
          MOVE      ONE,DATFLAG2                 * date & time validation
          CALL      VDTM0000
.
.         Make sure the date/time is not before the admission date/time and
.         not after the discharge date/time (if discharged) - only if same day.
.         Note: the admission record should have been read in VPV10000.
.
          MATCH     ADATE,OPDADATE
          IF        @EQUAL
            MATCH     ADMNTIME,ZSC01501
            IF        @LESS
              MOVE      "ZSC.15: Time Patient Called For before Admission",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VZSC0900
            ENDIF
          ENDIF
.
          COMPARE   FOUR,OPDASTAT                * discharged status ?
          GOTO      VZSC0900 IF NOT EQUAL        * no
.
          MATCH     OPDADATE,DDATE
          IF        @EQUAL
            MATCH     ZSC01501,DSCHTIME
            IF        @LESS
              MOVE      "ZSC.15: Time Patient Called For after Discharge",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VZSC0900
            ENDIF
          ENDIF
.
.         Anaesthetic Time Out (ZSC.16 - TM)
.
VZSC0900  STRIP     ZSC01601
          MOVELPTR  ZSC01601,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZSC1000 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZSC01601            * null field ?
          GOTO      VZSC1000 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters (hhmmss)
.
          IF        FORM3 <> 6
            MOVE      "ZSC.16: Anaesthetic Time Out has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC1000
          ENDIF
.
          PACK      DIM14,OPDADATE,ZSC01601
          MOVELPTR  DIM14,FORM3
          MOVE      "ZSC.16",FIELDID
          MOVE      ONE,DATFLAG1                 * no date/time in the future
          MOVE      ONE,DATFLAG2                 * date & time validation
          CALL      VDTM0000
.
.         Make sure the date/time is not before the admission date/time and
.         not after the discharge date/time (if discharged) - only if same day.
.         Note: the admission record should have been read in VPV10000.
.
          MATCH     ADATE,OPDADATE
          IF        @EQUAL
            MATCH     ADMNTIME,ZSC01601
            IF        @LESS
              MOVE      "ZSC.16: Anaesthetic Time Out before Admission",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VZSC1000
            ENDIF
          ENDIF
.
          IF        OPDASTAT = 4
            MATCH     OPDADATE,DDATE
            IF        @EQUAL
              MATCH     ZSC01601,DSCHTIME
              IF        @LESS
                MOVE      "ZSC.16: Anaesthetic Time Out after Discharge",ERRORDSC
                MOVE      "207",ERRORNUM
                CALL      EROR0000
                GOTO      VZSC1000
              ENDIF
            ENDIF
          ENDIF
.
.         Anaesthetic Cannulation (ZSC.17 - TM)
.
VZSC1000  STRIP     ZSC01701
          MOVELPTR  ZSC01701,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZSC1100 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZSC01701            * null field ?
          GOTO      VZSC1100 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters (hhmmss)
.
          IF        FORM3 <> 6
            MOVE      "ZSC.17: Anaesthetic Cannulation has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC1100
          ENDIF
.
          PACK      DIM14,OPDADATE,ZSC01701
          MOVELPTR  DIM14,FORM3
          MOVE      "ZSC.17",FIELDID
          MOVE      ONE,DATFLAG1                 * no date/time in the future
          MOVE      ONE,DATFLAG2                 * date & time validation
          CALL      VDTM0000
.
.         Make sure the date/time is not before the admission date/time and
.         not after the discharge date/time (if discharged) - only if same day.
.         Note: the admission record should have been read in VPV10000.
.
          MATCH     ADATE,OPDADATE
          IF        @EQUAL
            MATCH     ADMNTIME,ZSC01701
            IF        @LESS
              MOVE      "ZSC.17: Anaesthetic Cannulation before Admission",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VZSC1100
            ENDIF
          ENDIF
.
          IF        OPDASTAT = 4
            MATCH     OPDADATE,DDATE
            IF        @EQUAL
              MATCH     ZSC01701,DSCHTIME
              IF        @LESS
                MOVE      "ZSC.17: Anaesthetic Cannulation after Discharge",ERRORDSC
                MOVE      "207",ERRORNUM
                CALL      EROR0000
                GOTO      VZSC1100
              ENDIF
            ENDIF
          ENDIF
.
.         Surgical Time Out (ZSC.18 - TM)
.
VZSC1100  STRIP     ZSC01801
          MOVELPTR  ZSC01801,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZSC1200 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZSC01801            * null field ?
          GOTO      VZSC1200 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters (hhmmss)
.
          IF        FORM3 <> 6
            MOVE      "ZSC.18: Surgical Time Out has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC1200
          ENDIF
.
          PACK      DIM14,OPDADATE,ZSC01801
          MOVELPTR  DIM14,FORM3
          MOVE      "ZSC.18",FIELDID
          MOVE      ONE,DATFLAG1                 * no date/time in the future
          MOVE      ONE,DATFLAG2                 * date & time validation
          CALL      VDTM0000
.
.         Make sure the date/time is not before the admission date/time and
.         not after the discharge date/time (if discharged) - only if same day.
.         Note: the admission record should have been read in VPV10000.
.
          MATCH     ADATE,OPDADATE
          IF        @EQUAL
            MATCH     ADMNTIME,ZSC01801
            IF        @LESS
              MOVE      "ZSC.18: Surgical Time Out before Admission",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VZSC1200
            ENDIF
          ENDIF
.
          IF        OPDASTAT = 4
            MATCH     OPDADATE,DDATE
            IF        @EQUAL
              MATCH     ZSC01801,DSCHTIME
              IF        @LESS
                MOVE      "ZSC.18: Surgical Time Out after Discharge",ERRORDSC
                MOVE      "207",ERRORNUM
                CALL      EROR0000
                GOTO      VZSC1200
              ENDIF
            ENDIF
          ENDIF
.
.         Ready For Recovery (ZSC.19 - TM)
.
VZSC1200  STRIP     ZSC01901
          MOVELPTR  ZSC01901,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZSC1300 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZSC01901            * null field ?
          GOTO      VZSC1300 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters (hhmmss)
.
          IF        FORM3 <> 6
            MOVE      "ZSC.19: Ready For Recovery has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC1300
          ENDIF
.
          PACK      DIM14,OPDADATE,ZSC01901
          MOVELPTR  DIM14,FORM3
          MOVE      "ZSC.19",FIELDID
          MOVE      ONE,DATFLAG1                 * no date/time in the future
          MOVE      ONE,DATFLAG2                 * date & time validation
          CALL      VDTM0000
.
.         Make sure the date/time is not before the admission date/time and
.         not after the discharge date/time (if discharged) - only if same day.
.         Note: the admission record should have been read in VPV10000.
.
          MATCH     ADATE,OPDADATE
          IF        @EQUAL
            MATCH     ADMNTIME,ZSC01901
            IF        @LESS
              MOVE      "ZSC.19: Ready For Recovery before Admission",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VZSC1300
            ENDIF
          ENDIF
.
          IF        OPDASTAT = 4
            MATCH     OPDADATE,DDATE
            IF        @EQUAL
              MATCH     ZSC01901,DSCHTIME
              IF        @LESS
                MOVE      "ZSC.19: Ready For Recovery after Discharge",ERRORDSC
                MOVE      "207",ERRORNUM
                CALL      EROR0000
                GOTO      VZSC1300
              ENDIF
            ENDIF
          ENDIF
.
.         Time Into Recovery Front (ZSC.20 - TM)
.
VZSC1300  STRIP     ZSC02001
          MOVELPTR  ZSC02001,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZSC1400 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZSC02001            * null field ?
          GOTO      VZSC1400 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters (hhmmss)
.
          IF        FORM3 <> 6
            MOVE      "ZSC.20: Time Into Recovery Front has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC1400
          ENDIF
.
          PACK      DIM14,OPDADATE,ZSC02001
          MOVELPTR  DIM14,FORM3
          MOVE      "ZSC.20",FIELDID
          MOVE      ONE,DATFLAG1                 * no date/time in the future
          MOVE      ONE,DATFLAG2                 * date & time validation
          CALL      VDTM0000
.
.         Make sure the date/time is not before the admission date/time and
.         not after the discharge date/time (if discharged) - only if same day.
.         Note: the admission record should have been read in VPV10000.
.
          MATCH     ADATE,OPDADATE
          IF        @EQUAL
            MATCH     ADMNTIME,ZSC02001
            IF        @LESS
              MOVE      "ZSC.20: Time Into Recovery Front before Admission",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VZSC1400
            ENDIF
          ENDIF
.
          IF        OPDASTAT = 4
            MATCH     OPDADATE,DDATE
            IF        @EQUAL
              MATCH     ZSC02001,DSCHTIME
              IF        @LESS
                MOVE      "ZSC.20: Time Into Recovery Front after Discharge",ERRORDSC
                MOVE      "207",ERRORNUM
                CALL      EROR0000
                GOTO      VZSC1400
              ENDIF
            ENDIF
          ENDIF
.
.         Time Into Recovery Back (ZSC.21 - TM)
.
VZSC1400  STRIP     ZSC02101
          MOVELPTR  ZSC02101,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZSC1500 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZSC02101            * null field ?
          GOTO      VZSC1500 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters (hhmmss)
.
          IF        FORM3 <> 6
            MOVE      "ZSC.21: Time Into Recovery Back has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC1500
          ENDIF
.
          PACK      DIM14,OPDADATE,ZSC02101
          MOVELPTR  DIM14,FORM3
          MOVE      "ZSC.21",FIELDID
          MOVE      ONE,DATFLAG1                 * no date/time in the future
          MOVE      ONE,DATFLAG2                 * date & time validation
          CALL      VDTM0000
.
.         Make sure the date/time is not before the admission date/time and
.         not after the discharge date/time (if discharged) - only if same day.
.         Note: the admission record should have been read in VPV10000.
.
          MATCH     ADATE,OPDADATE
          IF        @EQUAL
            MATCH     ADMNTIME,ZSC02101
            IF        @LESS
              MOVE      "ZSC.21: Time Into Recovery Back before Admission",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VZSC1500
            ENDIF
          ENDIF
.
          IF        OPDASTAT = 4
            MATCH     OPDADATE,DDATE
            IF        @EQUAL
              MATCH     ZSC02101,DSCHTIME
              IF        @LESS
                MOVE      "ZSC.21: Time Into Recovery Back after Discharge",ERRORDSC
                MOVE      "207",ERRORNUM
                CALL      EROR0000
                GOTO      VZSC1500
              ENDIF
            ENDIF
          ENDIF
.
.         Ready to Depart Time (ZSC.22 - TM)
.
VZSC1500  STRIP     ZSC02201
          MOVELPTR  ZSC02201,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZSC1600 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZSC02201            * null field ?
          GOTO      VZSC1600 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters (hhmmss)
.
          IF        FORM3 <> 6
            MOVE      "ZSC.22: Ready To Depart Time has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC1600
          ENDIF
.
          PACK      DIM14,OPDADATE,ZSC02201
          MOVELPTR  DIM14,FORM3
          MOVE      "ZSC.22",FIELDID
          MOVE      ONE,DATFLAG1                 * no date/time in the future
          MOVE      ONE,DATFLAG2                 * date & time validation
          CALL      VDTM0000
.
.         Make sure the date/time is not before the admission date/time and
.         not after the discharge date/time (if discharged) - only if same day.
.         Note: the admission record should have been read in VPV10000.
.
          MATCH     ADATE,OPDADATE
          IF        @EQUAL
            MATCH     ADMNTIME,ZSC02201
            IF        @LESS
              MOVE      "ZSC.22: Ready To Depart Time before Admission",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VZSC1600
            ENDIF
          ENDIF
.
          IF        OPDASTAT = 4
            MATCH     OPDADATE,DDATE
            IF        @EQUAL
              MATCH     ZSC02201,DSCHTIME
              IF        @LESS
                MOVE      "ZSC.22: Ready To Depart Time after Discharge",ERRORDSC
                MOVE      "207",ERRORNUM
                CALL      EROR0000
                GOTO      VZSC1600
              ENDIF
            ENDIF
          ENDIF
.
.         Time To ICU (ZSC.23 - TM)
.
VZSC1600  STRIP     ZSC02301
          MOVELPTR  ZSC02301,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZSC1700 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZSC02301            * null field ?
          GOTO      VZSC1700 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters (hhmmss)
.
          IF        FORM3 <> 6
            MOVE      "ZSC.23: Time To ICU has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC1700
          ENDIF
.
          PACK      DIM14,OPDADATE,ZSC02301
          MOVELPTR  DIM14,FORM3
          MOVE      "ZSC.23",FIELDID
          MOVE      ONE,DATFLAG1                 * no date/time in the future
          MOVE      ONE,DATFLAG2                 * date & time validation
          CALL      VDTM0000
.
.         Make sure the date/time is not before the admission date/time and
.         not after the discharge date/time (if discharged) - only if same day.
.         Note: the admission record should have been read in VPV10000.
.
          MATCH     ADATE,OPDADATE
          IF        @EQUAL
            MATCH     ADMNTIME,ZSC02301
            IF        @LESS
              MOVE      "ZSC.23: Time To ICU before Admission",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VZSC1700
            ENDIF
          ENDIF
.
          IF        OPDASTAT = 4
            MATCH     OPDADATE,DDATE
            IF        @EQUAL
              MATCH     ZSC02301,DSCHTIME
              IF        @LESS
                MOVE      "ZSC.23: Time To ICU after Discharge",ERRORDSC
                MOVE      "207",ERRORNUM
                CALL      EROR0000
                GOTO      VZSC1700
              ENDIF
            ENDIF
          ENDIF
.
.         Time Patient Died (ZSC.24 - TM)
.
VZSC1700  STRIP     ZSC02401
          MOVELPTR  ZSC02401,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZSC1800 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZSC02401            * null field ?
          GOTO      VZSC1800 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters (hhmmss)
.
          IF        FORM3 <> 6
            MOVE      "ZSC.24: Time Patient Died has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC1800
          ENDIF
.
          PACK      DIM14,OPDADATE,ZSC02401
          MOVELPTR  DIM14,FORM3
          MOVE      "ZSC.24",FIELDID
          MOVE      ONE,DATFLAG1                 * no date/time in the future
          MOVE      ONE,DATFLAG2                 * date & time validation
          CALL      VDTM0000
.
.         Make sure the date/time is not before the admission date/time and
.         not after the discharge date/time (if discharged) - only if same day.
.         Note: the admission record should have been read in VPV10000.
.
          MATCH     ADATE,OPDADATE
          IF        @EQUAL
            MATCH     ADMNTIME,ZSC02401
            IF        @LESS
              MOVE      "ZSC.24: Time Patient Died before Admission",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VZSC1800
            ENDIF
          ENDIF
.
          IF        OPDASTAT = 4
            MATCH     OPDADATE,DDATE
            IF        @EQUAL
              MATCH     ZSC02401,DSCHTIME
              IF        @LESS
                MOVE      "ZSC.24: Time Patient Died after Discharge",ERRORDSC
                MOVE      "207",ERRORNUM
                CALL      EROR0000
                GOTO      VZSC1800
              ENDIF
            ENDIF
          ENDIF
.
.         Clinical Review Date/Time (ZSC.25 - TS)
.
VZSC1800  STRIP     ZSC02501
          MOVELPTR  ZSC02501,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZSC1900 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZSC02501            * null field ?
          GOTO      VZSC1900 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.         (ccyymmddhhmmss)
.
          IF        FORM3 <> 14
            MOVE      "ZSC.25: Clinical Review DateTime has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC1900
          ENDIF
.
          MOVE      ZSC02501,DIM14
          MOVE      "ZSC.25",FIELDID
          MOVE      ONE,DATFLAG1                 * future date/time not allowed
          MOVE      ONE,DATFLAG2                 * date/time validation
          CALL      VDTM0000
.
.         Make sure the date/time is not before the admission date/time and
.         not after the discharge date/time (if discharged) - only if same day.
.         Note: the admission record should have been read in VPV10000.
.
          UNPACK    ZSC02501,DIM8,DIM6
          MATCH     ADATE,DIM8
          IF        @EQUAL
            MATCH     ADMNTIME,DIM6
            IF        @LESS
              MOVE      "ZSC.25: Clinical Review DateTime before Admission",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VZSC1900
            ENDIF
          ENDIF
.
          IF        OPDASTAT = 4
            MATCH     DIM8,DDATE
            IF        @EQUAL
              MATCH     DIM6,DSCHTIME
              IF        @LESS
                MOVE      "ZSC.25: Clinical Review DateTime after Discharge",ERRORDSC
                MOVE      "207",ERRORNUM
                CALL      EROR0000
                GOTO      VZSC1900
              ENDIF
            ENDIF
          ENDIF
.
.         Admitting Nurse Code (ZSC.26 - XCN)
.
VZSC1900  STRIP     ZSC02601
          MOVELPTR  ZSC02601,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZSC2000 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZSC02601            * null field ?
          GOTO      VZSC2000 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 6
            MOVE      "ZSC.26: Admitting Nurse Code has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC2000
          ENDIF
.
.         Check that the nurse code is either a valid HCP (pmshcpaf) or Nurse
.         (oprnuraf)
.
          PACK      KEY6,ZSC02601,SP70
          CALL      RDOPNUR1
          IF        OVRCD <> 1
            GOTO      VZSC2000
          ENDIF
.
          PACK      KEY10,ZSC02601,SP70
          CALL      RDPMHCP1                     * field valid ?
          IF        OVRCD <> 1
            IF        PMHCHCST = 14 | PMHCHCST = 15
              GOTO      VZSC2000
            ENDIF
          ENDIF
.
          MOVE      "ZSC.26: Admitting Nurse Code not on file",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
.
.         Recovery Nurse Day 1 Code (ZSC.27 - XCN)
.
VZSC2000  STRIP     ZSC02701
          MOVELPTR  ZSC02701,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZSC2100 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZSC02701            * null field ?
          GOTO      VZSC2100 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 6
            MOVE      "ZSC.27: Recovery Nurse Day 1 Code has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC2100
          ENDIF
.
.         Check that the nurse code is either a valid HCP (pmshcpaf) or Nurse
.         (oprnuraf)
.
          PACK      KEY6,ZSC02701,SP70
          CALL      RDOPNUR1
          IF        OVRCD <> 1
            GOTO      VZSC2100
          ENDIF
.
          PACK      KEY10,ZSC02701,SP70
          CALL      RDPMHCP1                     * field valid ?
          IF        OVRCD <> 1
            IF        PMHCHCST = 14 | PMHCHCST = 15
              GOTO      VZSC2100
            ENDIF
          ENDIF
.
          MOVE      "ZSC.27: Recovery Nurse Day 1 Code not on file",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
.
.         Recovery Nurse Day 2 Code (ZSC.28 - XCN)
.
VZSC2100  STRIP     ZSC02801
          MOVELPTR  ZSC02801,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZSC2200 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZSC02801            * null field ?
          GOTO      VZSC2200 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 6
            MOVE      "ZSC.28: Recovery Nurse Day 2 Code has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC2200
          ENDIF
.
.         Check that the nurse code is either a valid HCP (pmshcpaf) or Nurse
.         (oprnuraf)
.
          PACK      KEY6,ZSC02801,SP70
          CALL      RDOPNUR1
          IF        OVRCD <> 1
            GOTO      VZSC2200
          ENDIF
.
          PACK      KEY10,ZSC02801,SP70
          CALL      RDPMHCP1                     * field valid ?
          IF        OVRCD <> 1
            IF        PMHCHCST = 14 | PMHCHCST = 15
              GOTO      VZSC2200
            ENDIF
          ENDIF
.
          MOVE      "ZSC.28: Recovery Nurse Day 2 Code not on file",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
.
.         Recovery Nurse Front 1 Code (ZSC.29 - XCN)
.
VZSC2200  STRIP     ZSC02901
          MOVELPTR  ZSC02901,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZSC2300 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZSC02901            * null field ?
          GOTO      VZSC2300 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 6
            MOVE      "ZSC.29: Recovery Nurse Front 1 Code has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC2300
          ENDIF
.
.         Check that the nurse code is either a valid HCP (pmshcpaf) or Nurse
.         (oprnuraf)
.
          PACK      KEY6,ZSC02901,SP70
          CALL      RDOPNUR1
          IF        OVRCD <> 1
            GOTO      VZSC2300
          ENDIF
.
          PACK      KEY10,ZSC02901,SP70
          CALL      RDPMHCP1                     * field valid ?
          IF        OVRCD <> 1
            IF        PMHCHCST = 14 | PMHCHCST = 15
              GOTO      VZSC2300
            ENDIF
          ENDIF
.
          MOVE      "ZSC.29: Recovery Nurse Front 1 Code not on file",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
.
.         Recovery Nurse Front 2 Code (ZSC.30 - XCN)
.
VZSC2300  STRIP     ZSC03001
          MOVELPTR  ZSC03001,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZSC2400 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZSC03001            * null field ?
          GOTO      VZSC2400 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 6
            MOVE      "ZSC.30: Recovery Nurse Front 2 Code has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC2400
          ENDIF
.
.         Check that the nurse code is either a valid HCP (pmshcpaf) or Nurse
.         (oprnuraf)
.
          PACK      KEY6,ZSC03001,SP70
          CALL      RDOPNUR1
          IF        OVRCD <> 1
            GOTO      VZSC2400
          ENDIF
.
          PACK      KEY10,ZSC03001,SP70
          CALL      RDPMHCP1                     * field valid ?
          IF        OVRCD <> 1
            IF        PMHCHCST = 14 | PMHCHCST = 15
              GOTO      VZSC2400
            ENDIF
          ENDIF
.
          MOVE      "ZSC.30: Recovery Nurse Front 2 Code not on file",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
.
.         Recovery Nurse Back 1 Code (ZSC.31 - XCN)
.
VZSC2400  STRIP     ZSC03101
          MOVELPTR  ZSC03101,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZSC2500 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZSC03101            * null field ?
          GOTO      VZSC2500 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 6
            MOVE      "ZSC.31: Recovery Nurse Back 1 Code has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC2500
          ENDIF
.
.         Check that the nurse code is either a valid HCP (pmshcpaf) or Nurse
.         (oprnuraf)
.
          PACK      KEY6,ZSC03101,SP70
          CALL      RDOPNUR1
          IF        OVRCD <> 1
            GOTO      VZSC2500
          ENDIF
.
          PACK      KEY10,ZSC03101,SP70
          CALL      RDPMHCP1                     * field valid ?
          IF        OVRCD <> 1
            IF        PMHCHCST = 14 | PMHCHCST = 15
              GOTO      VZSC2500
            ENDIF
          ENDIF
.
          MOVE      "ZSC.31: Recovery Nurse Back 1 Code not on file",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
.
.         Recovery Nurse Back 2 Code (ZSC.32 - XCN)
.
VZSC2500  STRIP     ZSC03201
          MOVELPTR  ZSC03201,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZSC2600 IF EQUAL            * no
.
.         Check if the field is null
.
          MATCH     BLANKSTR,ZSC03201            * null field ?
          GOTO      VZSC2600 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 6
            MOVE      "ZSC.32: Recovery Nurse Back 2 Code has incorrect number of characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC2600
          ENDIF
.
.         Check that the nurse code is either a valid HCP (pmshcpaf) or Nurse
.         (oprnuraf)
.
          PACK      KEY6,ZSC03201,SP70
          CALL      RDOPNUR1
          IF        OVRCD <> 1
            GOTO      VZSC2600
          ENDIF
.
          PACK      KEY10,ZSC03201,SP70
          CALL      RDPMHCP1                     * field valid ?
          IF        OVRCD <> 1
            IF        PMHCHCST = 14 | PMHCHCST = 15
              GOTO      VZSC2600
            ENDIF
          ENDIF
.
          MOVE      "ZSC.32: Recovery Nurse Back 2 Code not on file",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
.
.         Arrival Late Reason (ZSC.33, Component 1)
.
VZSC2600  STRIP     ZSC03301
          MOVELPTR  ZSC03301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSC2700 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSC03301            * null field ?
          GOTO      VZSC2700 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 3
            MOVE      "ZSC.33: Arrival Late Reason component 1 has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC2700
          ENDIF
.
.         Check that the code exists on file
.
          PACK      KEY5,CATOs,ZSC03301,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ZSC.33: Arrival Late Reason component 1 not on file",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC2700
          ENDIF
.
.         Check that the code is active
.
          MATCH     ANSI,PTCOACTV
          IF        @EQUAL
            MOVE      "ZSC.33: Arrival Late Reason component 1 not active",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC2700
          ENDIF
.
.         Arrival Late Reason (ZSC.33, Component 3)
.
          STRIP     ZSC03303
          MOVELPTR  ZSC03303,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZSC.33: Arrival Late Reason component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC2700
          ENDIF
.
.         Anaesthetic Delay Reason (ZSC.34, Component 1)
.
VZSC2700  STRIP     ZSC03401
          MOVELPTR  ZSC03401,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSC2800 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSC03401            * null field ?
          GOTO      VZSC2800 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 3
            MOVE      "ZSC.34: Anaesthetic Delay Reason component 1 has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC2800
          ENDIF
.
.         Check that the code exists on file
.
          PACK      KEY5,CATol,ZSC03401,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ZSC.34: Anaesthetic Delay Reason component 1 not on file",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC2800
          ENDIF
.
.         Check that the code is active
.
          MATCH     ANSI,PTCOACTV
          IF        @EQUAL
            MOVE      "ZSC.34: Anaesthetic Delay Reason component 1 not active",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC2800
          ENDIF
.
.         Anaesthetic Delay Reason (ZSC.34, Component 3)
.
          STRIP     ZSC03403
          MOVELPTR  ZSC03403,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZSC.34: Anaesthetic Delay Reason component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC2800
          ENDIF
.
.         Surgical Start Late Reason (ZSC.35, Component 1)
.
VZSC2800  STRIP     ZSC03501
          MOVELPTR  ZSC03501,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSC2900 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSC03501            * null field ?
          GOTO      VZSC2900 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 3
            MOVE      "ZSC.35: Surgical Start Late Reason component 1 has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC2900
          ENDIF
.
.         Check that the code exists on file
.
          PACK      KEY5,CATTV,ZSC03501,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ZSC.35: Surgical Start Late Reason component 1 not on file",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC2900
          ENDIF
.
.         Check that the code is active
.
          MATCH     ANSI,PTCOACTV
          IF        @EQUAL
            MOVE      "ZSC.35: Surgical Start Late Reason component 1 not active",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC2900
          ENDIF
.
.         Surgical Start Late Reason (ZSC.35, Component 3)
.
          STRIP     ZSC03503
          MOVELPTR  ZSC03503,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZSC.35: Surgical Start Late Reason component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC2900
          ENDIF
.
.         Reason For Overnight (ZSC.36, Component 1)
.
VZSC2900  STRIP     ZSC03601
          MOVELPTR  ZSC03601,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSC3000 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSC03601            * null field ?
          GOTO      VZSC3000 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 3
            MOVE      "ZSC.36: Reason For Overnight component 1 has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC3000
          ENDIF
.
.         Check that the code exists on file
.
          PACK      KEY5,CATou,ZSC03601,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ZSC.36: Reason For Overnight component 1 not on file",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC3000
          ENDIF
.
.         Check that the code is active
.
          MATCH     ANSI,PTCOACTV
          IF        @EQUAL
            MOVE      "ZSC.36: Reason For Overnight component 1 not active",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC3000
          ENDIF
.
.         Reason For Overnight (ZSC.36, Component 3)
.
          STRIP     ZSC03603
          MOVELPTR  ZSC03603,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZSC.36: Reason For Overnight component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC3000
          ENDIF
.
.         Recovery In Delay Reason (ZSC.37, Component 1)
.
VZSC3000  STRIP     ZSC03701
          MOVELPTR  ZSC03701,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSC3100 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSC03701            * null field ?
          GOTO      VZSC3100 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 3
            MOVE      "ZSC.37: Recovery In Delay Reason component 1 has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC3100
          ENDIF
.
.         Check that the code exists on file
.
          PACK      KEY5,ANSO,LWRCASEU,ZSC03701,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ZSC.37: Recovery In Delay Reason component 1 not on file",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC3100
          ENDIF
.
.         Check that the code is active
.
          MATCH     ANSI,PTCOACTV
          IF        @EQUAL
            MOVE      "ZSC.37: Recovery In Delay Reason component 1 not active",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC3100
          ENDIF
.
.         Recovery In Delay Reason (ZSC.37, Component 3)
.
          STRIP     ZSC03703
          MOVELPTR  ZSC03703,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZSC.37: Recovery In Delay Reason component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC3100
          ENDIF
.
.         Recovery Bay (ZSC.38, Component 1)
.
VZSC3100  STRIP     ZSC03801
          MOVELPTR  ZSC03801,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSC3200 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSC03801            * null field ?
          GOTO      VZSC3200 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 3
            MOVE      "ZSC.38: Recovery Bay component 1 has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC3200
          ENDIF
.
.         Check that the code exists on file
.
          PACK      KEY5,CAToc,ZSC03801,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ZSC.38: Recovery Bay component 1 not on file",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC3200
          ENDIF
.
.         Check that the code is active
.
          MATCH     ANSI,PTCOACTV
          IF        @EQUAL
            MOVE      "ZSC.38: Recovery Bay component 1 not active",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC3200
          ENDIF
.
.         Recovery Bay Reason (ZSC.38, Component 3)
.
          STRIP     ZSC03803
          MOVELPTR  ZSC03803,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZSC.38: Recovery Bay component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC3200
          ENDIF
.
.         Acuity (ZSC.39, Component 1)
.
VZSC3200  STRIP     ZSC03901
          MOVELPTR  ZSC03901,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSC3300 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSC03901            * null field ?
          GOTO      VZSC3300 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 3
            MOVE      "ZSC.39: Acuity component 1 has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC3300
          ENDIF
.
.         Check that the code exists on file
.
          PACK      KEY5,CATod,ZSC03901,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ZSC.39: Acuity component 1 not on file",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC3300
          ENDIF
.
.         Check that the code is active
.
          MATCH     ANSI,PTCOACTV
          IF        @EQUAL
            MOVE      "ZSC.39: Acuity component 1 not active",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC3300
          ENDIF
.
.         Acuity (ZSC.39, Component 3)
.
          STRIP     ZSC03903
          MOVELPTR  ZSC03903,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZSC.39: Acuity component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC3300
          ENDIF
.
.         Recovery Exit Delay Reason (ZSC.40, Component 1)
.
VZSC3300  STRIP     ZSC04001
          MOVELPTR  ZSC04001,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSC3400 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSC04001            * null field ?
          GOTO      VZSC3400 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 3
            MOVE      "ZSC.40: Recovery Exit Delay Reason component 1 has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC3400
          ENDIF
.
.         Check that the code exists on file
.
          PACK      KEY5,CATTk,ZSC04001,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ZSC.40: Recovery Exit Delay Reason component 1 not on file",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC3400
          ENDIF
.
.         Check that the code is active
.
          MATCH     ANSI,PTCOACTV
          IF        @EQUAL
            MOVE      "ZSC.40: Recovery Exit Delay Reason component 1 not active",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC3400
          ENDIF
.
.         Recovery Exit Delay Reason (ZSC.40, Component 3)
.
          STRIP     ZSC04003
          MOVELPTR  ZSC04003,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZSC.40: Recovery Exit Delay Reason component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC3400
          ENDIF
.
.         Blood Loss (ZSC.41)
.
VZSC3400  SQUEEZE   ZSC04101
          MOVELPTR  ZSC04101,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSC3500 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSC04101            * null field ?
          GOTO      VZSC3500 IF EQUAL            * yes
.
.         Check that the field has no more than 6 digits
.
          IF        FORM3 > 6
            MOVE      "ZSC.41: Blood Loss too large",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC3500
          ENDIF
.
.         Check that the field is numeric
.
          TYPE      ZSC04101
          IF        !@EQUAL
            MOVE      "ZSC.41: Blood Loss not numeric",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC3500
          ENDIF
.
.         Check that the field has no decimal place
.
          SCAN      DOT,ZSC04101
          IF        @EQUAL
            MOVE      "ZSC.41: Blood Loss not an integer",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            RESET     ZSC04101
            GOTO      VZSC3500
          ENDIF
          RESET     ZSC04101
.
.         Fast Post Recovery (ZSC.42 - ID)
.
VZSC3500  SQUEEZE   ZSC04201
          MOVELPTR  ZSC04201,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZSC3600 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSC04201            * null field ?
          GOTO      VZSC3600 IF EQUAL            * yes
.
          COMPARE   ONE,FORM3
          IF        !@EQUAL
            MOVE      "ZSC.42: Fast Post Recovery incorrect length",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC3600
          ENDIF
.
.         Task: 0867489 - Mods to cater for Y/N as well as 0 or 1
.
          REP       "Y1y1N0n0",ZSC04201
.
          MATCH     "1",ZSC04201                 * Yes sent ?
          GOTO      VZSC3600 IF EQUAL            * yes - valid value
.
          MATCH     "0",ZSC04201                 * No sent ?
          GOTO      VZSC3600 IF EQUAL            * yes - valid value
.
          MOVE      "ZSC.42: Fast Post Recovery invalid value",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VZSC3600
.
.         Admit Post Procedure (ZSC.43 - ID)
.
VZSC3600  SQUEEZE   ZSC04301
          MOVELPTR  ZSC04301,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZSC3700 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSC04301            * null field ?
          GOTO      VZSC3700 IF EQUAL            * yes
.
          COMPARE   ONE,FORM3
          IF        !@EQUAL
            MOVE      "ZSC.43: Admit Post Procedure incorrect length",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC3700
          ENDIF
.
.         Task: 0867489 - Mods to cater for Y/N as well as 0 or 1
.
          REP       "Y1y1N0n0",ZSC04301
.
          MATCH     "1",ZSC04301                 * Yes sent ?
          GOTO      VZSC3700 IF EQUAL            * yes - valid value
.
          MATCH     "0",ZSC04301                 * No sent ?
          GOTO      VZSC3700 IF EQUAL            * yes - valid value
.
          MOVE      "ZSC.43: Admit Post Procedure invalid value",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VZSC3700
.
.         No Recovery (ZSC.44 - ID)
.
VZSC3700  SQUEEZE   ZSC04401
          MOVELPTR  ZSC04401,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZSC3800 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSC04401            * null field ?
          GOTO      VZSC3800 IF EQUAL            * yes
.
          COMPARE   ONE,FORM3
          IF        !@EQUAL
            MOVE      "ZSC.44: No Recovery incorrect length",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC3800
          ENDIF
.
.         Task: 0867489 - Mods to cater for Y/N as well as 0 or 1
.
          REP       "Y1y1N0n0",ZSC04401
.
          MATCH     "1",ZSC04401                 * Yes sent ?
          GOTO      VZSC3800 IF EQUAL            * yes - valid value
.
          MATCH     "0",ZSC04401                 * No sent ?
          GOTO      VZSC3800 IF EQUAL            * yes - valid value
.
          MOVE      "ZSC.44: No Recovery invalid value",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VZSC3800
.
.         Case Abandoned (ZSC.45 - ID)
.
VZSC3800  SQUEEZE   ZSC04501
          MOVELPTR  ZSC04501,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZSC3900 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSC04501            * null field ?
          GOTO      VZSC3900 IF EQUAL            * yes
.
          COMPARE   ONE,FORM3
          IF        !@EQUAL
            MOVE      "ZSC.45: Case Abandoned incorrect length",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC3900
          ENDIF
.
.         Task: 0867489 - Mods to cater for Y/N as well as 0 or 1
.
          REP       "Y1y1N0n0",ZSC04501
.
          MATCH     "1",ZSC04501                 * Yes sent ?
          GOTO      VZSC3900 IF EQUAL            * yes - valid value
.
          MATCH     "0",ZSC04501                 * No sent ?
          GOTO      VZSC3900 IF EQUAL            * yes - valid value
.
          MOVE      "ZSC.45: Case Abandoned invalid value",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VZSC3900
.
.         Comments (ZSC.46 - ST)
.
VZSC3900   * <<<<>>
.
.         Preadmission and Operation Notes (ZSC.47 - ST)
.
VZSC4000   * <<<<>>
.
.         Prosthesis (ZSC.48 - ST)
.
VZSC4100  STRIP     ZSC04801
          MOVELPTR  ZSC04801,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSC4200 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSC04801            * null field ?
          GOTO      VZSC4200 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 40
            MOVE      "ZSC.48: Prosthesis has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC4200
          ENDIF
.
.         Equipment/Item 1 (Diathermy Type 1) (ZSC.49, Component 1 - CE)
.
VZSC4200  STRIP     ZSC04901
          MOVELPTR  ZSC04901,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSC4300 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSC04901            * null field ?
          GOTO      VZSC4300 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 3
            MOVE      "ZSC.49: EquipmentItems 1 component 1 has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC4300
          ENDIF
.
.         Check that the code exists on file
.
          PACK      KEY5,CATTi,ZSC04901,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ZSC.49: EquipmentItems 1 component 1 not on file",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC4300
          ENDIF
.
.         Check that the code is active
.
          MATCH     ANSI,PTCOACTV
          IF        @EQUAL
            MOVE      "ZSC.49: EquipmentItems 1 component 1 not active",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC4300
          ENDIF
.
.         Equipment/Item 1 (ZSC.49, Component 3)
.
          STRIP     ZSC04903
          MOVELPTR  ZSC04903,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZSC.49: EquipmentItems 1 component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC4300
          ENDIF
.
.         Equipment/Items (Diathermy Type 2) (ZSC.50, Component 1 - CE)
.
VZSC4300  STRIP     ZSC05001
          MOVELPTR  ZSC05001,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSC4400 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSC05001            * null field ?
          GOTO      VZSC4400 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 3
            MOVE      "ZSC.50: EquipmentItems 2 component 1 has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC4400
          ENDIF
.
.         Check that the code exists on file
.
          PACK      KEY5,CATTi,ZSC05001,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ZSC.50: EquipmentItems 2 component 1 not on file",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC4400
          ENDIF
.
.         Check that the code is active
.
          MATCH     ANSI,PTCOACTV
          IF        @EQUAL
            MOVE      "ZSC.50: EquipmentItems 2 component 1 not active",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC4400
          ENDIF
.
.         Equipment/Item 2 (ZSC.50, Component 3)
.
          STRIP     ZSC05003
          MOVELPTR  ZSC05003,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZSC.50: EquipmentItems 2 component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC4400
          ENDIF
.
.         Site Intact 1 (ZSC.51 - ID)
.
VZSC4400  SQUEEZE   ZSC05101
          MOVELPTR  ZSC05101,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZSC4500 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSC05101            * null field ?
          GOTO      VZSC4500 IF EQUAL            * yes
.
          COMPARE   ONE,FORM3
          IF        !@EQUAL
            MOVE      "ZSC.51: Site Intact 1 incorrect length",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC4500
          ENDIF
.
.         Task: 0867489 - Mods to cater for Y/N/A as well as 0, 1 or 2
.
          REP       "Y2y2N1n1A0a0",ZSC05101
.
          MATCH     "0",ZSC05101                 * N/A sent ?
          GOTO      VZSC4500 IF EQUAL            * yes - valid value
.
          MATCH     "1",ZSC05101                 * No sent ?
          GOTO      VZSC4500 IF EQUAL            * yes - valid value
.
          MATCH     "2",ZSC05101                 * Yes sent ?
          GOTO      VZSC4500 IF EQUAL            * yes - valid value
.
          MOVE      "ZSC.51: Site Intact 1 invalid value",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VZSC4500
.
.         Site Intact 2 (ZSC.52 - ID)
.
VZSC4500  SQUEEZE   ZSC05201
          MOVELPTR  ZSC05201,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZSC4600 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSC05201            * null field ?
          GOTO      VZSC4600 IF EQUAL            * yes
.
          COMPARE   ONE,FORM3
          IF        !@EQUAL
            MOVE      "ZSC.52: Site Intact 2 incorrect length",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC4600
          ENDIF
.
.         Task: 0867489 - Mods to cater for Y/N/A as well as 0, 1 or 2
.
          REP       "Y2y2N1n1A0a0",ZSC05201
.
          MATCH     "0",ZSC05201                 * N/A sent ?
          GOTO      VZSC4600 IF EQUAL            * yes - valid value
.
          MATCH     "1",ZSC05201                 * No sent ?
          GOTO      VZSC4600 IF EQUAL            * yes - valid value
.
          MATCH     "2",ZSC05201                 * Yes sent ?
          GOTO      VZSC4600 IF EQUAL            * yes - valid value
.
          MOVE      "ZSC.52: Site Intact 2 invalid value",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VZSC4600
.
.         Equipment/Item Used 1 (ZSC.53, Component 1 - CE)
.
VZSC4600  STRIP     ZSC05301
          MOVELPTR  ZSC05301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSC4700 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSC05301            * null field ?
          GOTO      VZSC4700 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 15
            MOVE      "ZSC.53: EquipmentItem Used 1 component 1 has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC4700
          ENDIF
.
.         Check that the code exists on file
.
          PACK      KEY15,ZSC05301,SP20
          CALL      RDOPITE1
          IF        OVRCD = 1
            MOVE      "ZSC.53: EquipmentItem Used 1 component 1 not on file",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC4700
          ENDIF
.
.         Equipment/Item Used 1 (ZSC.53, Component 3)
.
          STRIP     ZSC05303
          MOVELPTR  ZSC05303,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZSC.53: EquipmentItem Used 1 component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC4700
          ENDIF
.
.         Equipment/Item Used 2 (ZSC.54, Component 1 - CE)
.
VZSC4700  STRIP     ZSC05401
          MOVELPTR  ZSC05401,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSC4800 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSC05401            * null field ?
          GOTO      VZSC4800 IF EQUAL            * yes
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 15
            MOVE      "ZSC.54: EquipmentItem Used 2 component 1 has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC4800
          ENDIF
.
.         Check that the code exists on file
.
          PACK      KEY15,ZSC05401,SP20
          CALL      RDOPITE1
          IF        OVRCD = 1
            MOVE      "ZSC.54: EquipmentItem Used 2 component 1 not on file",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC4800
          ENDIF
.
.         Equipment/Item Used 2 (ZSC.54, Component 3)
.
          STRIP     ZSC05403
          MOVELPTR  ZSC05403,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZSC.54: EquipmentItem Used 2 component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC4800
          ENDIF
.
.         Caesarean Birth Count (ZSC.55 - NM)
.
VZSC4800  MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 21
            SQUEEZE   ZSC05501[COUNTER]
            MOVELPTR  ZSC05501[COUNTER],FORM3    * field populated ?
            COMPARE   ZERO,FORM3
            GOTO      VZSC4900 IF EQUAL          * no
.
            MATCH     BLANKSTR,ZSC05501[COUNTER] * null field ?
            GOTO      VZSC4900 IF EQUAL          * yes
.
.           Check that the field has no more than 2 digits
.
            IF        FORM3 > 2
              MOVE      "ZSC.55: Caesarean Birth Count too large",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VZSC4900
            ENDIF
.
.           Check that the field is numeric
.
            TYPE      ZSC05501[COUNTER]
            IF        !@EQUAL
              MOVE      "ZSC.55: Caesarean Birth Count not numeric",ERRORDSC
              MOVE      "102",ERRORNUM
              CALL      EROR0000
              GOTO      VZSC4900
            ENDIF
.
.           Check that the field has no decimal place
.
            SCAN      DOT,ZSC05501[COUNTER]
            IF        @EQUAL
              MOVE      "ZSC.55: Caesarean Birth Count not an integer",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              RESET     ZSC05501[COUNTER]
              GOTO      VZSC4900
            ENDIF
            RESET     ZSC05501[COUNTER]
.
VZSC4900    ADD       ONE,COUNTER                * increment counter
          DO
.
.         Caesarean Birth Sex of Baby (ZSC.56 - IS)
.
          MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 21
            SQUEEZE   ZSC05601[COUNTER]
            MOVELPTR  ZSC05601[COUNTER],FORM3    * field populated ?
            COMPARE   ZERO,FORM3
            GOTO      VZSC5000 IF EQUAL          * no
.
            MATCH     BLANKSTR,ZSC05601[COUNTER] * null field ?
            GOTO      VZSC5000 IF EQUAL          * yes
.
.           Check that the field has a length of 1
.
            IF        FORM3 > 1
              MOVE      "ZSC.56: Caesarean Birth Sex of Baby too large",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VZSC5000
            ENDIF
.
.           Check that the field is a valid code:
.             M = Male
.             F = Female
.             I = Indeterminate
.             U = Unknown
.
            REP       UPPLOW,ZSC05601[COUNTER]
            MATCH     ANSM,ZSC05601[COUNTER]
            GOTO      VZSC5000 IF EQUAL
.
            MATCH     ANSF,ZSC05601[COUNTER]
            GOTO      VZSC5000 IF EQUAL
.
            MATCH     ANSI,ZSC05601[COUNTER]
            GOTO      VZSC5000 IF EQUAL
.
            MATCH     ANSU,ZSC05601[COUNTER]
            GOTO      VZSC5000 IF EQUAL
.
            MOVE      "ZSC.56: Caesarean Birth Sex of Baby not valid",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
.
VZSC5000    ADD       ONE,COUNTER                * increment counter
          DO
.
.         Caesarean Birth Date/Time of Birth (ZSC.57 - TS)
.
          MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 21
            SQUEEZE   ZSC05701[COUNTER]
            MOVELPTR  ZSC05701[COUNTER],FORM3    * field populated ?
            COMPARE   ZERO,FORM3
            GOTO      VZSC5100 IF EQUAL          * no
.
            MATCH     BLANKSTR,ZSC05701[COUNTER] * null field ?
            GOTO      VZSC5100 IF EQUAL          * yes
.
.           Check that the field has a length of 14 (ccyymmddhhmmss)
.
            IF        FORM3 <> 14
              MOVE      "ZSC.57: Caesarean Birth DateTime of Birth too large",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VZSC5100
            ENDIF
.
            MOVE      ZSC05701[COUNTER],DIM14
            MOVE      "ZSC.57",FIELDID
            MOVE      ONE,DATFLAG1               * future date/time not allowed
            MOVE      ONE,DATFLAG2               * date/time validation
            CALL      VDTM0000
.
.           Make sure the date/time is not before the admission date/time and
.           not after the discharge date/time (if discharged) - only if same day.
.           Note: the admission record should have been read in VPV10000.
.
            UNPACK    ZSC05701[COUNTER],BABYDOBT,BABYTOBT
            PACK      BABYTOBT,BABYTOBT,SP10
            REP       " 0",BABYTOBT
            MATCH     ADATE,BABYDOBT
            IF        @EQUAL
              MATCH     ADMNTIME,BABYTOBT
              IF        @LESS
                MOVE      "ZSC.57: Caesarean Birth DateTime of Birth before Admission",ERRORDSC
                MOVE      "207",ERRORNUM
                CALL      EROR0000
                GOTO      VZSC5100
              ENDIF
            ENDIF
.
            IF        OPDASTAT = 4
              MATCH     BABYDOBT,DDATE
              IF        @EQUAL
                MATCH     BABYTOBT,DSCHTIME
                IF        @LESS
                  MOVE      "ZSC.57: Caesarean Birth DateTime of Birth after Discharge",ERRORDSC
                  MOVE      "207",ERRORNUM
                  CALL      EROR0000
                  GOTO      VZSC5100
                ENDIF
              ENDIF
            ENDIF
.
VZSC5100    ADD       ONE,COUNTER                * increment counter
          DO
.
.         Caesarean Birth U/R Number (ZSC.58 - CX)
.
          MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 21
            SQUEEZE   ZSC05801[COUNTER]
            MOVELPTR  ZSC05801[COUNTER],FORM3    * field populated ?
            COMPARE   ZERO,FORM3
            GOTO      VZSC5200 IF EQUAL          * no
.
            MATCH     BLANKSTR,ZSC05801[COUNTER] * null field ?
            GOTO      VZSC5200 IF EQUAL          * yes
.
.           Check that the field has a maximum length of 8
.
            IF        FORM3 > 8
              MOVE      "ZSC.58: Caesarean Birth UR Number too large",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VZSC5200
            ENDIF
.
            MOVE        ZSC05801[COUNTER],KEY8
            RJUSTIFY    KEY8
            CALL        RDAMAST1                 * baby PMI record on file ?
            IF          OVRCD = 1
              MOVE      "ZSC.58: Caesarean Birth UR Number not valid",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
              GOTO      VZSC5200
            ENDIF
.
VZSC5200    ADD       ONE,COUNTER                * increment counter
          DO
.
.         Caesarean Birth Baby Weight (ZSC.59 - NM)
.
          MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 21
            SQUEEZE   ZSC05901[COUNTER]
            MOVELPTR  ZSC05901[COUNTER],FORM3    * field populated ?
            COMPARE   ZERO,FORM3
            GOTO      VZSC5300 IF EQUAL          * no
.
            MATCH     BLANKSTR,ZSC05901[COUNTER] * null field ?
            GOTO      VZSC5300 IF EQUAL          * yes
.
.           Check that the field has a maximum length of 6
.
            IF        FORM3 > 6
              MOVE      "ZSC.59: Caesarean Birth Baby Weight too large",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VZSC5300
            ENDIF
.
            MOVE        ZSC05901[COUNTER],KEY6
            RJUSTIFY    KEY6
            TYPE        KEY6
            IF          !@EQUAL
              MOVE      "ZSC.58: Caesarean Birth UR Number not numeric",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VZSC5300
            ENDIF
.
VZSC5300    ADD       ONE,COUNTER                * increment counter
          DO
.
.         Caesarean Birth Placenta Delivery Time (ZSC.60 - TS)
.
          MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 21
            STRIP     ZSC06001[COUNTER]
            MOVELPTR  ZSC06001[COUNTER],FORM3
            COMPARE   ZERO,FORM3                 * field populated ?
            GOTO      VZSC5400 IF EQUAL          * no
.
.           Check if the field is null
.
            MATCH     BLANKSTR,ZSC06001[COUNTER] * null field ?
            GOTO      VZSC5400 IF EQUAL          * yes
.
.           Make sure that there is the correct number of characters (hhmmss)
.
            IF        FORM3 <> 6
              MOVE      "ZSC.60: Caesarean Birth Placenta Delivery Time has incorrect number of characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VZSC5400
            ENDIF
.
            PACK      DIM14,OPDADATE,ZSC06001[COUNTER]
            MOVELPTR  DIM14,FORM3
            MOVE      "ZSC.60",FIELDID
            MOVE      ONE,DATFLAG1                 * no date/time in the future
            MOVE      ONE,DATFLAG2                 * date & time validation
            CALL      VDTM0000
.
.           Make sure the date/time is not before the admission date/time and
.           not after the discharge date/time (if discharged) - only if same day
.           Note: the admission record should have been read in VPV10000.
.
            MATCH     ADATE,OPDADATE
            IF        @EQUAL
              MATCH     ADMNTIME,ZSC06001[COUNTER]
              IF        @LESS
                MOVE      "ZSC.60: Caesarean Birth Placenta Delivery Time before Admission",ERRORDSC
                MOVE      "207",ERRORNUM
                CALL      EROR0000
                GOTO      VZSC5400
              ENDIF
            ENDIF
.
            IF        OPDASTAT = 4
              MATCH     OPDADATE,DDATE
              IF        @EQUAL
                MATCH     ZSC06001[COUNTER],DSCHTIME
                IF        @LESS
                  MOVE      "ZSC.60: Caesarean Birth Placenta Delivery Time after Discharge",ERRORDSC
                  MOVE      "207",ERRORNUM
                  CALL      EROR0000
                  GOTO      VZSC5400
                ENDIF
              ENDIF
            ENDIF
VZSC5400    ADD       ONE,COUNTER                * increment counter
          DO
.
.         Admitting Nurse Start Time (ZSC.61)
.
VZSC5500  STRIP     ZSC06101
          MOVELPTR  ZSC06101,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSC5600 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSC06101            * null field ?
          GOTO      VZSC5600 IF EQUAL            * yes
.
          IF        FORM3 <> 6
            MOVE      "ZSC.61: Admitting Nurse Start Time must be 6 characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC5600
          ENDIF
.
          PACK      DIM14,OPDADATE,ZSC06101
          MOVELPTR  DIM14,FORM3
          MOVE      "ZSC.61",FIELDID
          MOVE      ONE,DATFLAG1                 * no date/time in the future
          MOVE      ONE,DATFLAG2                 * date & time validation
          CALL      VDTM0000
.
          MATCH     ADATE,OPDADATE
          IF        @EQUAL
            MATCH     ADMNTIME,ZSC06101
            IF        @LESS
              MOVE      "ZSC.61: Admitting Nurse Start Time before Admission",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VZSC5600
            ENDIF
          ENDIF
.
          COMPARE   FOUR,OPDASTAT                * discharged status ?
          GOTO      VZSC5600 IF NOT EQUAL        * no
.
          MATCH     OPDADATE,DDATE
          IF        @EQUAL
            MATCH     ZSC06101,DSCHTIME
            IF        @LESS
              MOVE      "ZSC.61: Admitting Nurse Start Time after Discharge",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VZSC5600
            ENDIF
          ENDIF
.
.         Admitting Nurse End Time (ZSC.62)
.
VZSC5600  STRIP     ZSC06201
          MOVELPTR  ZSC06201,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSC5700 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSC06201            * null field ?
          GOTO      VZSC5700 IF EQUAL            * yes
.
          IF        FORM3 <> 6
            MOVE      "ZSC.62: Admitting Nurse End Time must be 6 characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC5700
          ENDIF
.
          PACK      DIM14,OPDADATE,ZSC06201
          MOVELPTR  DIM14,FORM3
          MOVE      "ZSC.62",FIELDID
          MOVE      ONE,DATFLAG1                 * no date/time in the future
          MOVE      ONE,DATFLAG2                 * date & time validation
          CALL      VDTM0000
.
          MATCH     ADATE,OPDADATE
          IF        @EQUAL
            MATCH     ADMNTIME,ZSC06201
            IF        @LESS
              MOVE      "ZSC.62: Admitting Nurse End Time before Admission",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VZSC5700
            ENDIF
          ENDIF
.
          COMPARE   FOUR,OPDASTAT                * discharged status ?
          GOTO      VZSC5700 IF NOT EQUAL        * no
.
          MATCH     OPDADATE,DDATE
          IF        @EQUAL
            MATCH     ZSC06201,DSCHTIME
            IF        @LESS
              MOVE      "ZSC.62: Admitting Nurse End Time after Discharge",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VZSC5700
            ENDIF
          ENDIF
.
.         Wheels In Time (ZSC.63)
.
VZSC5700  STRIP     ZSC06301
          MOVELPTR  ZSC06301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSC5800 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSC06301            * null field ?
          GOTO      VZSC5800 IF EQUAL            * yes
.
          IF        FORM3 <> 6
            MOVE      "ZSC.63: Wheels In Time must be 6 characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC5800
          ENDIF
.
          PACK      DIM14,OPDADATE,ZSC06301
          MOVELPTR  DIM14,FORM3
          MOVE      "ZSC.63",FIELDID
          MOVE      ONE,DATFLAG1                 * no date/time in the future
          MOVE      ONE,DATFLAG2                 * date & time validation
          CALL      VDTM0000
.
          MATCH     ADATE,OPDADATE
          IF        @EQUAL
            MATCH     ADMNTIME,ZSC06301
            IF        @LESS
              MOVE      "ZSC.63: Wheels In Time before Admission",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VZSC5800
            ENDIF
          ENDIF
.
          COMPARE   FOUR,OPDASTAT                * discharged status ?
          GOTO      VZSC5800 IF NOT EQUAL        * no
.
          MATCH     OPDADATE,DDATE
          IF        @EQUAL
            MATCH     ZSC06301,DSCHTIME
            IF        @LESS
              MOVE      "ZSC.63: Wheels In Time after Discharge",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VZSC5800
            ENDIF
          ENDIF
.
.         Wheels Out Time (ZSC.64)
.
VZSC5800  STRIP     ZSC06401
          MOVELPTR  ZSC06401,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VZSC5900 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZSC06401            * null field ?
          GOTO      VZSC5900 IF EQUAL            * yes
.
          IF        FORM3 <> 6
            MOVE      "ZSC.64: Wheels Out Time must be 6 characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZSC5900
          ENDIF
.
          PACK      DIM14,OPDADATE,ZSC06401
          MOVELPTR  DIM14,FORM3
          MOVE      "ZSC.64",FIELDID
          MOVE      ONE,DATFLAG1                 * no date/time in the future
          MOVE      ONE,DATFLAG2                 * date & time validation
          CALL      VDTM0000
.
          MATCH     ADATE,OPDADATE
          IF        @EQUAL
            MATCH     ADMNTIME,ZSC06401
            IF        @LESS
              MOVE      "ZSC.64: Wheels Out Time before Admission",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VZSC5900
            ENDIF
          ENDIF
.
          COMPARE   FOUR,OPDASTAT                * discharged status ?
          GOTO      VZSC5900 IF NOT EQUAL        * no
.
          MATCH     OPDADATE,DDATE
          IF        @EQUAL
            MATCH     ZSC06401,DSCHTIME
            IF        @LESS
              MOVE      "ZSC.64: Wheels Out Time after Discharge",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VZSC5900
            ENDIF
          ENDIF
.
VZSC5900
.
VZSC9999  RETURN
+
.*****************************************************************************
.*                            VZTR0000             Called by: PROC0000       *
.*      Validate that the mandatory ZTR fields are populated or null.        *
.*****************************************************************************
.
.         ZTR.1     Presenting Complaint Code (Cat el code)
.
VZTR0000  STRIP     ZTR00101
          MOVELPTR  ZTR00101,FORM3
          IF        FORM3 = 0
            MATCH     MTYPEA08,MESSTYPE
            GOTO      VZTR0100 IF EQUAL          * not mandatory for EMR A08
.
            MOVE      "ZTR.1: Presenting Complaint Code not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0100
          ENDIF
.
          IF        FORM3 > 3
            MOVE      "ZTR.1: Presenting Complaint Code has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0100
          ENDIF
.
          MATCH     BLANKSTR,ZTR00101            * field null ?
          IF        @EQUAL
.0959732    MATCH     MTYPEA08,MESSTYPE
.0959732    GOTO      VZTR0100 IF EQUAL          * not mandatory for EMR A08
.
            MOVE      "ZTR.1: Presenting Complaint Code is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0100
          ENDIF
.
          PACK      KEY5,CATel,ZTR00101,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ZTR.1: Presenting Complaint Code not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0100
          ENDIF
.
          MATCH     ANSI,PTCOACTV
          IF        @EQUAL
            MOVE      "ZTR.1: Presenting Complaint Code not active",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0100
          ENDIF
.
.         ZTR.8     Location (emrlocaf code)
.
VZTR0100  STRIP     ZTR00801
          MOVELPTR  ZTR00801,FORM3
          IF        FORM3 = 0
            MATCH     MTYPEA08,MESSTYPE
            GOTO      VZTR0200 IF EQUAL          * not mandatory for EMR A08
.
            MOVE      "ZTR.8: Location Code not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0200
          ENDIF
.
          IF        FORM3 > 3
            MOVE      "ZTR.8: Location Code has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0200
          ENDIF
.
          MATCH     BLANKSTR,ZTR00801            * field null ?
          IF        @EQUAL
.0959732    MATCH     MTYPEA08,MESSTYPE
.0959732    GOTO      VZTR0200 IF EQUAL          * not mandatory for EMR A08
.
            MOVE      "ZTR.8: Location Code is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0200
          ENDIF
.
          PACK      KEY3,ZTR00801,SP3
          CALL      RDEMLOC1
          IF        OVRCD = 1
            MOVE      "ZTR.8: Location Code not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0200
          ENDIF
.
          MATCH     "1",EMLOACTV
          IF        @EQUAL
            MOVE      "ZTR.8: Location Code not active",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0200
          ENDIF
.
.         Check if location (ZTR.8) is occupied then restore emr visit vars
.         (if location is changing and message is EMR A08)
.
VZTR0150  MATCH     MTYPEA08,MESSTYPE
          GOTO      VZTR0200 IF NOT EQUAL        * for EMR A08 only
.
          MATCH     ZTR00801,EMVILOCN
          GOTO      VZTR0200 IF EQUAL            * no location change
.
          CALL      VALLOC00                     * validate location
          IF        EXIT = 1
            MOVE      "ZTR.8: Location Already occupied",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
          MOVE      PV101901,KEY8
          RJUSTIFY  KEY8
          CALL      RDEMVIS1                     * restore EMR visit
          IF        OVRCD = 1
            MOVE      "PV1.19: Emergency record not found",ERRORDSC
            MOVE      "204",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0200
          ENDIF
.
.         ZTR.10    Arrival Transport (Cat EA code)
.
VZTR0200  STRIP     ZTR01001
          MOVELPTR  ZTR01001,FORM3
          IF        FORM3 = 0
            MATCH     MTYPEA08,MESSTYPE
            GOTO      VZTR0300 IF EQUAL          * not mandatory for EMR A08
.
            MOVE      "ZTR.10: Arrival Transport Code not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0300
          ENDIF
.
          IF        FORM3 > 3
            MOVE      "ZTR.10: Arrival Transport Code has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0300
          ENDIF
.
          MATCH     BLANKSTR,ZTR01001            * field null ?
          IF        @EQUAL
.0959732    MATCH     MTYPEA08,MESSTYPE
.0959732    GOTO      VZTR0300 IF EQUAL          * not mandatory for EMR A08
.
            MOVE      "ZTR.10: Arrival Transport Code is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0300
          ENDIF
.
          PACK      KEY5,ANSE,ANSA,ZTR01001,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ZTR.10: Arrival Transport Code not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0300
          ENDIF
.
          MATCH     ANSI,PTCOACTV
          IF        @EQUAL
            MOVE      "ZTR.10: Arrival Transport Code not active",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0300
          ENDIF
.
.         ZTR.12    Attendance Source (Cat em code)
.
VZTR0300  STRIP     ZTR01201
          MOVELPTR  ZTR01201,FORM3
          IF        FORM3 = 0
            MATCH     MTYPEA08,MESSTYPE
            GOTO      VZTR0400 IF EQUAL          * not mandatory for EMR A08
.
            MOVE      "ZTR.12: Attendance Source Code not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0400
          ENDIF
.
          IF        FORM3 > 3
            MOVE      "ZTR.12: Attendance Source Code has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0400
          ENDIF
.
          MATCH     BLANKSTR,ZTR01201            * field null ?
          IF        @EQUAL
            MATCH     MTYPEA08,MESSTYPE
            GOTO      VZTR0400 IF EQUAL          * not mandatory for EMR A08
.
            MOVE      "ZTR.12: Attendance Source Code is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0400
          ENDIF
.
          PACK      KEY5,CATem,ZTR01201,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ZTR.12: Attendance Source Code not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0400
          ENDIF
.
          MATCH     ANSI,PTCOACTV
          IF        @EQUAL
            MOVE      "ZTR.12: Attendance Source Code not active",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0400
          ENDIF
.
.         ZTR.13    Streaming (Cat eh code)
.
VZTR0400  STRIP     ZTR01301
          MOVELPTR  ZTR01301,FORM3
          IF        FORM3 = 0
            MATCH     MTYPEA08,MESSTYPE
            GOTO      VZTR0500 IF EQUAL          * not mandatory for EMR A08
.
            MOVE      "ZTR.13: Streaming Code not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0500
          ENDIF
.
          IF        FORM3 > 3
            MOVE      "ZTR.13: Streaming Code has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0500
          ENDIF
.
          MATCH     BLANKSTR,ZTR01301            * field null ?
          IF        @EQUAL
.0959732    MATCH     MTYPEA08,MESSTYPE
.0959732    GOTO      VZTR0500 IF EQUAL          * not mandatory for EMR A08
.
            MOVE      "ZTR.13: Streaming Code is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0500
          ENDIF
.
          PACK      KEY5,CATeh,ZTR01301,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ZTR.13: Streaming Code not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0500
          ENDIF
.
          MATCH     ANSI,PTCOACTV
          IF        @EQUAL
            MOVE      "ZTR.13: Streaming Code not active",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0500
          ENDIF
.
.         ZTR.43    Drug / Alcohol Taken (1=Yes/0=No)
.
VZTR0500  STRIP     ZTR04301
          MOVELPTR  ZTR04301,FORM3
          IF        FORM3 = 0
            MATCH     MTYPEA08,MESSTYPE
            GOTO      VZTR0600 IF EQUAL          * not mandatory for EMR A08
.
            MOVE      "ZTR.43: Drug/Alcohol Taken value not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0600
          ENDIF
.
          MATCH     BLANKSTR,ZTR04301            * field null ?
          IF        @EQUAL
.0959732    MATCH     MTYPEA08,MESSTYPE
.0959732    GOTO      VZTR0600 IF EQUAL          * not mandatory for EMR A08
.
            MOVE      "ZTR.43: Drug/Alcohol Taken value is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0600
          ENDIF
.
          MATCH     "0",ZTR04301                 * 0 = no
          IF        !@EQUAL
            MATCH     "1",ZTR04301               * 1 = yes
            IF        !@EQUAL
              MOVE      "ZTR.43: Drug/Alcohol Taken value not valid",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
.         ZTR.45    Triage Date / Time (ccyymmddhhmmss)
.
VZTR0600  MOVE      SP70,EMRTDTTM                * clear triage date/time
.
          PACK      DIM16,EMVITRDT,EMVITRTM,SP70
          MATCH     SP70,DIM16
          GOTO      VZTR0605 IF EQUAL            * no existing triage date/time
.
          REP       ": ",DIM16
          SQUEEZE   DIM16
          MOVE      DIM16,EMRTDTTM               * existing triage date/time
.
VZTR0605  STRIP     ZTR04501
          MOVELPTR  ZTR04501,FORM3
          IF        FORM3 = 0
            MATCH     MTYPEA08,MESSTYPE
            GOTO      VZTR0700 IF EQUAL          * not mandatory for EMR A08
.
            MOVE      "ZTR.45: Triage Date/Time not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0700
          ENDIF
.
          MATCH     BLANKSTR,ZTR04501            * field null ?
          IF        @EQUAL
.0959732    MATCH     MTYPEA08,MESSTYPE
.0959732    GOTO      VZTR0700 IF EQUAL          * not mandatory for EMR A08
.
            MOVE      "ZTR.45: Triage Date/Time is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0700
          ENDIF
.
VZTR0650  MOVE      "ZTR.45",FIELDID
          MOVE      ZTR04501,DIM14
          MOVE      ONE,DATFLAG1                 * no date/time in the future
          MOVE      ONE,DATFLAG2                 * date & time validation
          CALL      VDTM0000
.
          MOVE      ZTR04501,EMRTDTTM            * save incoming triage dte/tme
.
.         ZTR.46    Triage Category (Cat AA code)
.
VZTR0700  STRIP     ZTR04601
          MOVELPTR  ZTR04601,FORM3
          IF        FORM3 = 0
            MATCH     MTYPEA08,MESSTYPE
            GOTO      VZTR0800 IF EQUAL          * not mandatory for EMR A08
.
            MOVE      "ZTR.46: Triage Category Code not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0800
          ENDIF
.
          IF        FORM3 > 3
            MOVE      "ZTR.46: Triage Category Code has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0800
          ENDIF
.
          MATCH     BLANKSTR,ZTR04601            * field null ?
          IF        @EQUAL
.0959732    MATCH     MTYPEA08,MESSTYPE
.0959732    GOTO      VZTR0800 IF EQUAL          * not mandatory for EMR A08
.
            MOVE      "ZTR.46: Triage Category Code is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0800
          ENDIF
.
          PACK      KEY5,CATAA,ZTR04601,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ZTR.46: Triage Category Code not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0800
          ENDIF
.
          MATCH     ANSI,PTCOACTV
          IF        @EQUAL
            MOVE      "ZTR.46: Triage Category Code not active",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0800
          ENDIF
.
.         Validate additional fields (e.g. non-mandatory fields)
.
.         ZTR.15    Airway (Cat A1 code)
.
VZTR0800  STRIP     ZTR01501
          MOVELPTR  ZTR01501,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZTR0900 IF EQUAL
.
          MATCH     BLANKSTR,ZTR01501            * field null ?
          GOTO      VZTR0900 IF EQUAL
.
          IF        FORM3 > 3
            MOVE      "ZTR.15: Airway Code has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0900
          ENDIF
.
          PACK      KEY5,CATA1,ZTR01501,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ZTR.15: Airway Code not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0900
          ENDIF
.
          MATCH     ANSI,PTCOACTV
          IF        @EQUAL
            MOVE      "ZTR.15: Airway Code not active",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR0900
          ENDIF
.
.         ZTR.17    Conscious State (Cat A3 code)
.
VZTR0900  STRIP     ZTR01701
          MOVELPTR  ZTR01701,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZTR1000 IF EQUAL
.
          MATCH     BLANKSTR,ZTR01701            * field null ?
          GOTO      VZTR1000 IF EQUAL
.
          IF        FORM3 > 3
            MOVE      "ZTR.17: Conscious State Code has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR1000
          ENDIF
.
          PACK      KEY5,CATA3,ZTR01701,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ZTR.17: Conscious State Code not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR1000
          ENDIF
.
          MATCH     ANSI,PTCOACTV
          IF        @EQUAL
            MOVE      "ZTR.17: Conscious State Code not active",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR1000
          ENDIF
.
.         ZTR.20    Breathing 1 (Cat A5 code)
.
VZTR1000  STRIP     ZTR02001
          MOVELPTR  ZTR02001,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZTR1100 IF EQUAL
.
          MATCH     BLANKSTR,ZTR02001            * field null ?
          GOTO      VZTR1100 IF EQUAL
.
          IF        FORM3 > 3
            MOVE      "ZTR.20: Breathing 1 Code has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR1100
          ENDIF
.
          PACK      KEY5,CATA5,ZTR02001,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ZTR.20: Breathing 1 Code not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR1100
          ENDIF
.
          MATCH     ANSI,PTCOACTV
          IF        @EQUAL
            MOVE      "ZTR.20: Breathing 1 Code not active",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR1100
          ENDIF
.
.         ZTR.23    Colour 1 (Cat ef code)
.
VZTR1100  STRIP     ZTR02301
          MOVELPTR  ZTR02301,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZTR1200 IF EQUAL
.
          MATCH     BLANKSTR,ZTR02301            * field null ?
          GOTO      VZTR1200 IF EQUAL
.
          IF        FORM3 > 3
            MOVE      "ZTR.23: Colour 1 Code has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR1200
          ENDIF
.
          PACK      KEY5,CATef,ZTR02301,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ZTR.23: Colour 1 Code not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR1200
          ENDIF
.
          MATCH     ANSI,PTCOACTV
          IF        @EQUAL
            MOVE      "ZTR.23: Colour 1 Code not active",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR1200
          ENDIF
.
.         ZTR.42    Isolation (Cat es code)
.
VZTR1200  STRIP     ZTR04201
          MOVELPTR  ZTR04201,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZTR1300 IF EQUAL
.
          MATCH     BLANKSTR,ZTR04201            * field null ?
          GOTO      VZTR1300 IF EQUAL
.
          IF        FORM3 > 3
            MOVE      "ZTR.42: Isolation Code has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR1300
          ENDIF
.
          PACK      KEY5,CATes,ZTR04201,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ZTR.42: Isolation Code not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR1300
          ENDIF
.
          MATCH     ANSI,PTCOACTV
          IF        @EQUAL
            MOVE      "ZTR.42: Isolation Code not active",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR1300
          ENDIF
.
.         Validate length of Presenting Complaint text fields
.
.         ZTR.2     Presenting Complaint field 1
.
VZTR1300  STRIP     ZTR00201
          MOVELPTR  ZTR00201,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZTR1400 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZTR00201            * field null ?
          GOTO      VZTR1400 IF EQUAL            * yes
.
          IF        FORM3 > 50
            MOVE      "ZTR.2: Presenting Complaint 1 is greater than 50 characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         ZTR.3     Presenting Complaint field 2
.
VZTR1400  STRIP     ZTR00301
          MOVELPTR  ZTR00301,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZTR1500 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZTR00301            * field null ?
          GOTO      VZTR1500 IF EQUAL            * yes
.
          IF        FORM3 > 50
            MOVE      "ZTR.3: Presenting Complaint 2 is greater than 50 characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         ZTR.4     Presenting Complaint field 3
.
VZTR1500  STRIP     ZTR00401
          MOVELPTR  ZTR00401,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZTR1600 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZTR00401            * field null ?
          GOTO      VZTR1600 IF EQUAL            * yes
.
          IF        FORM3 > 50
            MOVE      "ZTR.4: Presenting Complaint 3 is greater than 50 characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         ZTR.5     Presenting Complaint field 4
.
VZTR1600  STRIP     ZTR00501
          MOVELPTR  ZTR00501,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZTR1700 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZTR00501            * field null ?
          GOTO      VZTR1700 IF EQUAL            * yes
.
          IF        FORM3 > 50
            MOVE      "ZTR.5: Presenting Complaint 4 is greater than 50 characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         ZTR.6     Presenting Complaint field 5
.
VZTR1700  STRIP     ZTR00601
          MOVELPTR  ZTR00601,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZTR1800 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZTR00601            * field null ?
          GOTO      VZTR1800 IF EQUAL            * yes
.
          IF        FORM3 > 50
            MOVE      "ZTR.6: Presenting Complaint 5 is greater than 50 characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         ZTR.7     Presenting Complaint field 6
.
VZTR1800  STRIP     ZTR00701
          MOVELPTR  ZTR00701,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZTR1900 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZTR00701            * field null ?
          GOTO      VZTR1900 IF EQUAL            * yes
.
          IF        FORM3 > 50
            MOVE      "ZTR.7: Presenting Complaint 6 is greater than 50 characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         ZTR.35    Pain Score (Cat en code)
.
VZTR1900  STRIP     ZTR03501
          MOVELPTR  ZTR03501,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZTR2000 IF EQUAL
.
          MATCH     BLANKSTR,ZTR03501            * field null ?
          GOTO      VZTR2000 IF EQUAL
.
          IF        FORM3 > 3
            MOVE      "ZTR.35: Pain Score Code has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR2000
          ENDIF
.
          PACK      KEY5,CATen,ZTR03501,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ZTR.35: Pain Score Code not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR2000
          ENDIF
.
          MATCH     ANSI,PTCOACTV
          IF        @EQUAL
            MOVE      "ZTR.35: Pain Score Code not active",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR2000
          ENDIF
.
.         ZTR.47    Triage Nurse (valid HCP on pmshcpaf or Nurse on oprnuraf)
.
VZTR2000  STRIP     ZTR04701
          MOVELPTR  ZTR04701,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZTR2100 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZTR04701            * null field ?
          GOTO      VZTR2100 IF EQUAL            * yes
.
          MATCH     "1",EMCNURSE                 * 1 = pmshcpaf / 0 = oprnuraf
          GOTO      VZTR2010 IF EQUAL
.
          IF        FORM3 > 6
            MOVE      "ZTR.47: Triage Nurse has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR2100
          ENDIF
.
          PACK      KEY6,ZTR04701,SP70
          CALL      RDOPNUR1                * check nurse table
          IF        OVRCD = 1
            MOVE      "ZTR.47: Triage Nurse Code not valid on nurse file",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
          ENDIF
          GOTO      VZTR2100
.
VZTR2010  IF        FORM3 > 10
            MOVE      "ZTR.47: Triage Nurse has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR2100
          ENDIF
.
          PACK      KEY10,ZTR04701,SP70
          CALL      RDPMHCP1                * check hcp table for nurse type
          IF        OVRCD <> 1
            IF        PMHCHCST = 14 | PMHCHCST = 15
              GOTO      VZTR2100
            ENDIF
          ENDIF
.
          MOVE      "ZTR.47: Triage Nurse Code not valid on hcp file",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
          GOTO      VZTR2100
.
.         ZTR.48    Model of Care (Cat eu code)
.
VZTR2100  STRIP     ZTR04801
          MOVELPTR  ZTR04801,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZTR2200 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZTR04801            * field null ?
          GOTO      VZTR2200 IF EQUAL            * yes
.
          IF        FORM3 > 3
            MOVE      "ZTR.48: Model of Care has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR2200
          ENDIF
.
          PACK      KEY5,CATeu,ZTR04801,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ZTR.48: Model of Care not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR2200
          ENDIF
.
          MATCH     ANSI,PTCOACTV
          IF        @EQUAL
            MOVE      "ZTR.48: Model of Care not active",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR2200
          ENDIF
.
.         ZTR.49    Reason for Change (Cat FW code)
.
VZTR2200  STRIP     ZTR04901
          MOVELPTR  ZTR04901,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZTR2300 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZTR04901            * field null ?
          GOTO      VZTR2300 IF EQUAL            * yes
.
          IF        FORM3 > 3
            MOVE      "ZTR.49: Reason for Change has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR2300
          ENDIF
.
          PACK      KEY5,CATFW,ZTR04901,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ZTR.49: Reason for Change not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR2300
          ENDIF
.
          MATCH     ANSI,PTCOACTV
          IF        @EQUAL
            MOVE      "ZTR.49: Reason for Change not active",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZTR2300
          ENDIF
.
VZTR2300
.
.
VZTR9999  RETURN
+
.*****************************************************************************
.*                            VZNT0000             Called by: PROC0000       *
.*      Validate that the mandatory ZNT fields are populated or null.        *
.*****************************************************************************
.
.         Comment Type (ZNT.2)
.
VZNT0000  STRIP     ZNT00201
          MOVELPTR  ZNT00201,FORM3
          IF        FORM3 = 0
            MOVE      "ZNT.2: Comment Type not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZNT9999
          ENDIF
.
          MATCH     BLANKSTR,ZNT00201            * field null ?
          IF        @EQUAL
            MOVE      "ZNT.2: Comment Type is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZNT9999
          ENDIF
.
          IF        FORM3 > 1
            MOVE      "ZNT.2: Comment Type must be 1 character long",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZNT9999
          ENDIF
.
          TYPE      ZNT00201
          IF        !@EQUAL
            MOVE      "ZNT.2: Comment Type must be numeric",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VZNT9999
          ENDIF
.
          MATCH     "6",ZNT00201
          IF        !@EQUAL
            MOVE      "ZNT.2: Comment Type must have a value of 6",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZNT9999
          ENDIF
.
.         Comments (ZNT.4)
.
VZNT1000  STRIP     ZNT00401
          MOVELPTR  ZNT00401,F4
          IF        F4 = 0
            MOVE      "ZNT.4: Comments not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZNT9999
          ENDIF
.
          MATCH     BLANKSTR,ZNT00401            * field null ?
          IF        @EQUAL
            MOVE      "ZNT.4: Comments is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZNT9999
          ENDIF
.
          IF        F4 > 2000
            MOVE      "ZNT.4: Comments maximum length is 2000 characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZNT9999
          ENDIF
.
VZNT9999  RETURN
+
.*****************************************************************************
.*                            VRGS0000             Called by: PROC0000       *
.*      Validate that the mandatory RGS fields are populated or null.        *
.*****************************************************************************
.
.         Set ID (RGS.1)
.
VRGS0000  STRIP     RGS00101
          MOVELPTR  RGS00101,FORM3
          IF        FORM3 = 0
            MOVE      "RGS.1: Set ID not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VRGS9999
          ENDIF
.
          MATCH     BLANKSTR,RGS00101            * field null ?
          IF        @EQUAL
            MOVE      "RGS.1: Set ID is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VRGS9999
          ENDIF
.
          IF        FORM3 > 1
            MOVE      "RGS.1: Set ID has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VRGS9999
          ENDIF
.
          TYPE      RGS00101
          IF        !@EQUAL
            MOVE      "RGS.1: Set ID is not numeric",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VRGS9999
          ENDIF
.
          MATCH     "1",RGS00101
          IF        !@EQUAL
            MOVE      "RGS.1: Set ID is not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VRGS9999
          ENDIF
.
VRGS9999  RETURN
+
.*****************************************************************************
.*                       GVIS0000                  Called by: VRF10000       *
.*   Use the originating (RF1.6) or external (RF1.11) referral identifier to *
.*   determine the webPAS visit number.                                      *
.* Requires: RF100601/RF101101 - originating/external referral identifier    *
.* Returns:  SAVEREFN - saved webPAS referral visit number                   *
.*           SAVEUDAT - saved last update date for referral visit record     *
.*           SAVEUTIM - saved last update time for referral visit record     *
.*****************************************************************************
.
GVIS0000  MOVE      ZERO,IGNORFLG                * initialise processing flag
.
          MATCH     MTYPEI12,MESSTYPE
          GOTO      GVIS0200 IF EQUAL            * must use RF1.6 for I12
.
          STRIP     RF101101
          MOVELPTR  RF101101,FORM3               * RF1.11 populated ?
          COMPARE   ZERO,FORM3
          GOTO      GVIS0200 IF EQUAL            * no - use RF1.6
.
          MATCH     BLANKSTR,RF101101
          GOTO      GVIS0200 IF EQUAL            * RF1.11 null ?
.
          SQUEEZE   RF101101
          MOVE      RF101101,KEY8
          RJUSTIFY  KEY8
          GOTO      GVIS0700                     * use RF1.11 for visit number
.
GVIS0200  PACK      DIM20,RF100601,SP20
          PACK      KEY28,DIM20,SP30
          CALL      RSIBALV2                     * position on alternate id
GVIS0500  CALL      RKIBALV2                     * read next record
          BRANCH    OVRCD,GVIS9100               * eof - error
.
          MATCH     DIM20,IBAVAVIS               * same alternate id ?
          GOTO      GVIS9100 IF NOT EQUAL        * no - error
.
          MATCH     " 1",IBAVTYPE                * eReferral id ?
          GOTO      GVIS0500 IF NOT EQUAL        * no - ignore record
.
          MATCH     MTYPEI12,MESSTYPE            * I12 message ?
          IF        @EQUAL
            MOVE      "RF1.6: Alternate ID already exists",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      GVIS9999
          ENDIF
.
          MOVE      IBAVVISN,KEY8
GVIS0700  CALL      RDALREF1
          IF        OVRCD = 1
            MOVE      "RF1.6: Referral Record not found",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      GVIS9999
          ENDIF
.
.         We have an I13 or an I14 message, so check if the status of the
.         referral is "Waiting" (allrefaf.alrestat = "0")
.
          MATCH     "0",ALRESTAT                 * referral status waiting ?
          GOTO      GVIS1000 IF EQUAL            * yes - ok to update/delete
.
          MATCH     MTYPEI13,MESSTYPE            * I13 message ?
          IF        @EQUAL
            MATCH     "0",ALCNUPWR               * yes - is updating allowed ?
            GOTO      GVIS1000 IF EQUAL          * yes
          ENDIF
.
          MATCH     MTYPEI14,MESSTYPE            * I14 message ?
          IF        @EQUAL
            MATCH     "0",ALCNDEWR               * yes - is deleting allowed ?
            GOTO      GVIS1000 IF EQUAL          * yes
          ENDIF
.
.         We cannot update/delete the referral, so we need to set
.         a flag to send an AA message back, even though we are not
.         processing the message and regardless of whether or not there
.         are any errors.
.
          MOVE      ONE,IGNORFLG
.
GVIS1000  MOVE      ALREVISN,SAVEREFN            * save webPAS visit number
          MOVE      ALREPRTY,SAVEPRTY            * save current priority
          MOVE      ALRETRGS,SAVETRGS            * save current triage status
          MOVE      ALRETRGD,SAVETRGD            * save current triage date
          MOVE      ALRERDAT,SAVERDAT            * save current referral date
          MOVE      ALRESTAT,SAVERSTA            * save current status
          MOVE      ALREUDT3,SAVEUDT3            * save current clin ref date
.
          MATCH     SP8,ALREUDAT                 * last update date blank ?
          GOTO      GVIS5000 IF EQUAL            * yes
.
          MOVE      ALREUDAT,SAVEUDAT            * save last update date
          MOVE      ALREUTIM,SAVEUTIM            * save last update time
          GOTO      GVIS9999
.
GVIS5000  MATCH     SP8,ALRECDAT                 * create date blank ?
          IF        @EQUAL
            MOVE      "RF1.6: Create and Update Dates are blank",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ELSE
            MOVE      ALRECDAT,SAVEUDAT            * save last update date
            MOVE      ALRECTIM,SAVEUTIM            * save last update time
          ENDIF
          GOTO      GVIS9999
.
GVIS9100  MATCH     MTYPEI12,MESSTYPE            * I12 message ?
          IF        !@EQUAL
            MOVE      "RF1.6: Alternate ID not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
          ENDIF
.
GVIS9999  RETURN
+
.*****************************************************************************
.*                       VTYP0000                  Called by: VMSH0000       *
.*    Check if the message type (from MSH009) is one we are able to process  *
.* Requires:  MESSTYPE - 3 character message type (eg A28)                   *
.*****************************************************************************
.
VTYP0000  MOVE      ZERO,COUNTER                 * initialise counter
          MOVE      ZERO,MESSGNUM                * initialse message no.
          WHILE     COUNTER < 20
            ADD       ONE,COUNTER                * increment counter
            MATCH     MESSTYPE,MTYPARRY[COUNTER]
            IF        @EQUAL
              MOVE      COUNTER,MESSGNUM
.
              IF        MESSGNUM = 1
                MATCH     "1",PTCNQA28      * Quick registration for A28 ?
                IF        @EQUAL
                  MOVE      ONE,QUICKREG    * yes - set flag
                ENDIF
              ELSE
                IF        MESSGNUM = 2
                  MATCH     "1",PTCNQA31    * Quick registration for A31 ?
                  IF        @EQUAL
                    MOVE      ONE,QUICKREG  * yes - set flag
                  ENDIF
                ENDIF
              ENDIF
.
              IF        MESSGNUM = 1
                CALL      CLPATMAS               * for A28, clear patient vars.
                CALL      CLPATMSX
                CALL      CLPMSPX2
              ENDIF
.
              CALL      URST0000                 * update received stats
              GOTO      VTYP9999
            ENDIF
          DO
.
          MOVE      "MSH.9: Message Type not available",ERRORDSC
          MOVE      "200",ERRORNUM
          CALL      EROR0000
.
VTYP9999  RETURN
+
.*****************************************************************************
.*                                  GSEG0000       Called by: PROC0000       *
.*                        Get the next segment code                          *
.* This routine is called when we are expecting the next segment.  It will   *
.* get the next 3 characters in the message and use this as the segment id.  *
.*                                                                           *
.* Returns: EXIT   0 = segment id read                                       *
.*                 1 = connection timed out                                  *
.*                 2 = connection lost                                       *
.*                 3 = start of block found                                  *
.*                 4 = end of block found                                    *
.*                 5 = end of segment found (CR)                             *
.*                 6 = first segment is not MSH                              *
.*          SEGMENT = 3 character HL7 segment id (eg MSH)                    *
.*****************************************************************************
.
GSEG0000  CLEAR     SEGMENT
          MOVE      ZERO,COUNTER                 * initialise character counter
          WHILE     COUNTER < 3
            BUMP      TMPSTRNG                   * move to next character
            IF        @EOS
              CALL      GTSTR000                 * get next 4000 chars (or less)
              BRANCH    EXIT,GSEG9100:           * timeout
                             GSEG9200            * connection lost
            ENDIF
            MOVE      TMPSTRNG,ANS               * save character
.
            MATCH     CRETURN,ANS                * carriage return found ?
            GOTO      GSEG9500 IF EQUAL          * yes
.
            MATCH     ENDBLOCK,ANS               * end of block found ?
            IF        @EQUAL
              APPEND    ENDBLOCK,RECVMESS        * yes
              APPEND    CRETURN,RECVMESS
              GOTO      GSEG9400
            ENDIF
.
            MATCH     STRTBLOK,ANS               * start of block found ?
            GOTO      GSEG9300 IF EQUAL          * yes
.
            APPEND    ANS,SEGMENT                * load segment id
            ADD       ONE,COUNTER                * increment counter
          DO
.
          RESET     SEGMENT
          APPEND    SEGMENT,RECVMESS             * add seg. to full message
.
.         If this is the first segment, check to make sure it's an
.         MSH segment
.
          COMPARE   ZERO,SEGCOUNT
          GOTO      GSEG9000 IF NOT EQUAL
.
          MATCH     MSHSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      MSHSEGMT,SAVSEGMT          * save first segment
            GOTO      GSEG9000
          ENDIF
.
          IF        DISPFLAG = 1
            DISPLAY   "MSH segment missing",*R,*N;
          ENDIF
          WRITE     TEXTFILE,SEQ;MSHMCAPT
          GOTO      GSEG9600
.
GSEG9000  MOVE      ZERO,EXIT
          GOTO      GSEG9999
.
GSEG9100  MOVE      ONE,EXIT
          GOTO      GSEG9999
.
GSEG9200  MOVE      TWO,EXIT
          GOTO      GSEG9999
.
GSEG9300  MOVE      THREE,EXIT
          GOTO      GSEG9999
.
GSEG9400  MOVE      FOUR,EXIT
          GOTO      GSEG9999
.
GSEG9500  MOVE      FIVE,EXIT
          GOTO      GSEG9999
.
GSEG9600  MOVE      SIX,EXIT
.
GSEG9999  RETURN
+
.*****************************************************************************
.*                          GCHR0000               Called by: PROC0000       *
.*                 Get the next character in the message string              *
.* Returns:  EXIT  0 = ok to continue                                        *
.*                 1 = connection timeout                                    *
.*                 2 = connection lost                                       *
.*                 3 = start of block                                        *
.*                 4 = end of block                                          *
.*                 5 = end of segment (CR)                                   *
.*                 6 = field separator blank (MSH00101 only)                 *
.*                 7 = encoding character(s) missing (MSH00201 only)         *
.*           ANS  - character just read in                                   *
.*****************************************************************************
.
GCHR0000  BUMP      TMPSTRNG                     * move to next field
          IF        @EOS
            CALL      GTSTR000                   * get next 4000 chars (or less)
            BRANCH    EXIT,GCHR9100:             * timeout
                           GCHR9200              * connection lost
          ENDIF
.
          MOVE      TMPSTRNG,ANS                 * save character
.
.         If this is the first field of the MSH segment, then we need to
.         load the field separator.
.
          MATCH     MSHSEGMT,SEGMENT             * MSH segment & first field?
          IF        @EQUAL
            IF        FIELDNO = 0
              MATCH     SP1,ANS                  * yes - blank separator ?
              GOTO      GCHR9600 IF EQUAL        * yes - error
.
              ADD       ONE,FIELDNO              * increment seg. field number
              MOVE      ANS,MSH00101             * no - load field separator
              MOVE      ZERO,COMPFLAG            * set for no component flag
              MOVE      SP1,PREVCHAR             * initialise previous character
            ENDIF
          ENDIF
.
.         Check if this is a field separator and if so, save to the full
.         message buffer (for message display later), increment the segment
.         field number, initialse the component count, then get the next
.         character.
.
          MATCH     MSH00101,ANS                 * field separator found ?
          IF        @EQUAL
            MATCH     PREVCHAR,ANS               * yes
            IF        !@EQUAL
              MATCH     PREVCHAR,COMSEPAR        * yes
              IF        !@EQUAL
                CALL      RFLD0000               * reset component just loaded
              ENDIF
            ENDIF
            ADD       ONE,FIELDNO                * increment seg. field number
            MOVE      ONE,COMPCNT                * init. field component count
            MOVE      ONE,REPTNCNT               * init. field repetition count
            APPEND    ANS,RECVMESS               * add to full message buffer
            MOVE      ANS,PREVCHAR
            GOTO      GCHR0000                   * get next field
          ENDIF
.
.         Check that the encoding characters have been sent in MSH.2 if we
.         have just started processing MSH.3 (component 1)
.
          MATCH     MSHSEGMT,SEGMENT
          IF        @EQUAL
            IF        FIELDNO = 3 & COMPCNT = 1 & COMPFLAG = 0
              RESET     MSH00201
              MOVELPTR  MSH00201,FORM3
              IF        FORM3 <> 4
                GOTO      GCHR9700
               ELSE
                UNPACK    MSH00201,COMSEPAR,REPSEPAR,ESCSEPAR,SUBSEPAR
                MOVE      ONE,COMPFLAG           * set component flag
              ENDIF
            ENDIF
          ENDIF
.
.         Check if end of segment found
.
          MATCH     CRETURN,ANS                  * carriage return found ?
          IF        @EQUAL
            APPEND    ANS,RECVMESS
            CALL      RFLD0000                   * reset component just loaded
            GOTO      GCHR9500
          ENDIF
.
.         Check if end of block (message) found
.
          MATCH     ENDBLOCK,ANS                 * end of block found ?
          IF        @EQUAL
            CALL      RFLD0000                   * reset component just loaded
            GOTO      GCHR9400
          ENDIF
.
.         Check if start of block found
.
          MATCH     STRTBLOK,ANS                 * start of block found ?
          IF        @EQUAL
            CALL      CLER0000                   * clear mess. buffer sand flags
            GOTO      GCHR9300                   * start again
          ENDIF
.
          MOVE      ZERO,EXIT
          GOTO      GCHR9999
.
GCHR9100  MOVE      ONE,EXIT
          GOTO      GCHR9999
.
GCHR9200  MOVE      TWO,EXIT
          GOTO      GCHR9999
.
GCHR9300  MOVE      THREE,EXIT
          GOTO      GCHR9999
.
GCHR9400  MOVE      FOUR,EXIT
          GOTO      GCHR9999
.
GCHR9500  MOVE      FIVE,EXIT
          GOTO      GCHR9999
.
GCHR9600  IF        DISPFLAG = 1
            DISPLAY   "MSH.1: Field Separator not set",*R,*N;
          ENDIF
          MOVE      SIX,EXIT
          GOTO      GCHR9999
.
GCHR9700  IF        DISPFLAG = 1
            DISPLAY   "MSH.2: Missing Encoding Character(s)",*R,*N;
          ENDIF
          MOVE      SEVEN,EXIT
.
GCHR9999  RETURN
+
.*****************************************************************************
.*                            CLER0000             Called by: GCHR0000       *
.*              Clear message buffers and flags               PROC0000       *
.*****************************************************************************
.
CLER0000  PACK      RECVMESS,SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100
          CLEAR     RECVMESS                     * clear full message buffer
          MOVE      ZERO,ERRORCNT                * initialise error flag
          MOVE      SP20,SAVMESID                * initialise message id
          MOVE      ZERO,SEGCOUNT                * initialise segment seq. count
.
          PACK      SEGSTRNG,SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100
          CLEAR     SEGSTRNG                     * clear segment string
          PACK      SENTMESS,SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100
          CLEAR     SENTMESS                     * clear full message buffer
.
          MOVE      SP100,ERORLINE               * clear first error
          CLEAR     ERORLINE
          MOVE      ZERO,ERORNUMB                * initialise first error
          MOVE      "Message accepted",ERORTEXT  * default for no error
.
          MOVE      SP6,SAVHFUND                 * initialise health fund vars.
          MOVE      SP8,SAVHTBLE
          MOVE      SP3,SAVCLAIM
.
          MOVE      SP3,SCH22HSP
          MOVE      SP3,OUTFILPR
          MOVE      SP6,OUTSITPR
          MOVE      SP3,SAVEHOSP                 * initialise REF vars.
          MOVE      SP8,SAVEUDAT
          MOVE      SP8,SAVEUTIM
          MOVE      SP8,SAVEREFN
          MOVE      SP3,SAVEPRTY
          MOVE      SP3,SAVETRGS
          MOVE      SP8,SAVETRGD
          MOVE      SP8,SAVERDAT
          MOVE      SP8,SAVEUDT3
          MOVE      SP1,SAVERSTA
          MOVE      ZERO,PRDCOUNT
          MOVE      SP10,SAVEPROV[1]
          CLEAR     SAVEPROV[1]
          MOVE      SP10,SAVEPROV[2]
          CLEAR     SAVEPROV[2]
          MOVE      SP1,SAVESTAT
          MOVE      SP8,PRVARRAY[1]
          CLEAR     PRVARRAY[1]
          MOVE      SP8,PRVARRAY[2]
          CLEAR     PRVARRAY[2]
          MOVE      SP8,PRVARRAY[3]
          CLEAR     PRVARRAY[3]
          MOVE      SP8,PRVARRAY[4]
          CLEAR     PRVARRAY[4]
          MOVE      SP8,PRVARRAY[5]
          CLEAR     PRVARRAY[5]
          MOVE      SP8,LASTUPDT
          MOVE      SP8,LASTUPTM
.
.         Initialise counts for repeating segments
.
          MOVE      ZERO,DG1COUNT
          MOVE      ZERO,NK1COUNT
          MOVE      ZERO,ZALCOUNT
          MOVE      ZERO,FT1COUNT
          MOVE      ZERO,ZFTCOUNT
          MOVE      ZERO,ZSFCOUNT
          MOVE      ZERO,NTECOUNT
          MOVE      ONE,DG1FOUND                 * init. for no DG1 segments
          MOVE      ONE,NK1FOUND                 * init. for no NK1 segments
          MOVE      ONE,ZALFOUND                 * init. for no ZAL segments
          MOVE      ONE,FT1FOUND                 * init. for no FT1 segments
          MOVE      ONE,ZFTFOUND                 * init. for no ZFT segments
          MOVE      ONE,ZSFFOUND                 * init. for no ZSF segments
          MOVE      ONE,NTEFOUND                 * init. for no NTE segments
          MOVE      ONE,CMBFOUND                 * init. for no CMBS items
.
          MOVE      SP3,SAVSEGMT
          MOVE      ZERO,MESSGNUM
          MOVE      ZERO,QUICKREG
.
.         Initialise the A28 mandatory segment array
.         
          MOVE      ANSN,A28ARRAY[1]
          MOVE      ANSN,A28ARRAY[2]
          MOVE      ANSN,A28ARRAY[3]
          MOVE      ANSN,A28ARRAY[4]
          MOVE      ANSN,A28ARRAY[5]
.         
.         Initialise the A31 mandatory segment array
.         
          MOVE      ANSN,A31ARRAY[1]
          MOVE      ANSN,A31ARRAY[2]
          MOVE      ANSN,A31ARRAY[3]
          MOVE      ANSN,A31ARRAY[4]
          MOVE      ANSN,A31ARRAY[5]
.         
.         Initialise the A34 mandatory segment array
.         
          MOVE      ANSN,A34ARRAY[1]
          MOVE      ANSN,A34ARRAY[2]
          MOVE      ANSN,A34ARRAY[3]
          MOVE      ANSN,A34ARRAY[4]
          MOVE      ANSN,A34ARRAY[5]
.
.         Initialise the P03 mandatory segment array
.
          MOVE      ANSN,P03ARRAY[1]
          MOVE      ANSN,P03ARRAY[2]
          MOVE      ANSN,P03ARRAY[3]
          MOVE      ANSN,P03ARRAY[4]
          MOVE      ANSN,P03ARRAY[5]
          MOVE      ANSN,P03ARRAY[6]
.
.         Initialise the REF (I12/I13/I14) mandatory segment array
.
          MOVE      ANSN,REFARRAY[1]
          MOVE      ANSN,REFARRAY[2]
          MOVE      ANSN,REFARRAY[3]
          MOVE      ANSN,REFARRAY[4]
.
.         Initialise the A03 mandatory segment array
.          
          MOVE      ANSN,A03ARRAY[1]
          MOVE      ANSN,A03ARRAY[2]
          MOVE      ANSN,A03ARRAY[3]
          MOVE      ANSN,A03ARRAY[4]
          MOVE      ANSN,A03ARRAY[5]
          MOVE      ANSN,A03ARRAY[6]
          MOVE      ANSN,A03ARRAY[7]
          MOVE      ANSN,A03ARRAY[8]
.
.         Initialise the A04 mandatory segment array
.          
          MOVE      ANSN,A04ARRAY[1]
          MOVE      ANSN,A04ARRAY[2]
          MOVE      ANSN,A04ARRAY[3]
          MOVE      ANSN,A04ARRAY[4]
          MOVE      ANSN,A04ARRAY[5]
          MOVE      ANSN,A04ARRAY[6]
.
.         Initialise the SRM mandatory segment array (0861257)
.          
          MOVE      ANSY,SRMARRAY[1]
          MOVE      ANSY,SRMARRAY[2]
          MOVE      ANSY,SRMARRAY[3]
          MOVE      ANSY,SRMARRAY[4]
          MOVE      ANSY,SRMARRAY[5]
          MOVE      ANSY,SRMARRAY[6]
.
.         Initialise the MFN (M02) mandatory segment array
.
          MOVE      ANSN,M02ARRAY[1]
          MOVE      ANSN,M02ARRAY[2]
          MOVE      ANSN,M02ARRAY[3]
          MOVE      ANSN,M02ARRAY[4]
          MOVE      ANSN,M02ARRAY[5]
          MOVE      ANSN,M02ARRAY[6]
          MOVE      ANSN,M02ARRAY[7]
          MOVE      ANSN,M02ARRAY[8]
.
.         Initialise the A05 mandatory segment array
.
          MOVE      ANSN,A05ARRAY[1]
          MOVE      ANSN,A05ARRAY[2]
          MOVE      ANSN,A05ARRAY[3]
          MOVE      ANSN,A05ARRAY[4]
          MOVE      ANSN,A05ARRAY[5]
          MOVE      ANSN,A05ARRAY[6]
.
.         Initialise the S12 mandatory segment array
.
          MOVE      ANSN,S12ARRAY[1]
          MOVE      ANSN,S12ARRAY[2]
          MOVE      ANSN,S12ARRAY[3]
          MOVE      ANSN,S12ARRAY[4]
.
.         Initialise the S13 mandatory segment array
.
          MOVE      ANSN,S13ARRAY[1]
          MOVE      ANSN,S13ARRAY[2]
          MOVE      ANSN,S13ARRAY[3]
          MOVE      ANSN,S13ARRAY[4]
.
.         Initialise the S14 mandatory segment array
.
          MOVE      ANSN,S14ARRAY[1]
          MOVE      ANSN,S14ARRAY[2]
          MOVE      ANSN,S14ARRAY[3]
          MOVE      ANSN,S14ARRAY[4]
          MOVE      ANSN,S14ARRAY[5]
          MOVE      ANSN,S14ARRAY[6]
.
.         Initialise the S15 mandatory segment array
.
          MOVE      ANSN,S15ARRAY[1]
          MOVE      ANSN,S15ARRAY[2]
          MOVE      ANSN,S15ARRAY[3]
          MOVE      ANSN,S15ARRAY[4]
.
.         Initialise the A08 mandatory segment array
.
          MOVE      ANSN,A08ARRAY[1]
          MOVE      ANSN,A08ARRAY[2]
          MOVE      ANSN,A08ARRAY[3]
          MOVE      ANSN,A08ARRAY[4]
          MOVE      ANSN,A08ARRAY[5]
          MOVE      ANSN,A08ARRAY[6]
.
.         Initialise the A21 mandatory segment array
.
          MOVE      ANSN,A21ARRAY[1]
          MOVE      ANSN,A21ARRAY[2]
          MOVE      ANSN,A21ARRAY[3]
          MOVE      ANSN,A21ARRAY[4]
          MOVE      ANSN,A21ARRAY[5]
.
.         Initialise the A22 mandatory segment array
.
          MOVE      ANSN,A22ARRAY[1]
          MOVE      ANSN,A22ARRAY[2]
          MOVE      ANSN,A22ARRAY[3]
          MOVE      ANSN,A22ARRAY[4]
          MOVE      ANSN,A22ARRAY[5]
.
.         We need to initialise the Diagnosis Description as the DG1 segment
.         is not mandatory and if it isn't sent, then the DG1 variables
.         wont be cleared and hence data from a previous message may carry over
.         and be posted into ADIAG1 when it shouldn't be
.
          MOVE      SP100,DG100401
.
.         Currently, there doesn't appear to be a requirement for expiry date
.         for either Centrelink Card or Senior's Card, so initialise these
.         fields so that nothing gets populated into pmsccdaf.pmcdexdt
.
          MOVE      SP8,SREXPIRY
          CLEAR     SREXPIRY
          MOVE      SP8,CLEXPIRY
          CLEAR     CLEXPIRY
.
          MOVE      SP4,PASSCODE
.
          MOVE      ZERO,DEATHFLG           * TSK 0951416
.
CLER9999  RETURN
+
.*****************************************************************************
.*                              VSEG0000           Called by: PROC0000       *
.*   Validate that the segment found is relevant, and in the correct         *
.*   sequence, for the message type.                                         *
.* Requires:  SEGMENT - 3 character segment id                               *
.* Returns:   EXIT  0 = valid segment                                        *
.*                  1 = invalid segment                                      *
.*            SEGNUMBR - Segment number                                      *
.*                    0 = unknown segment                                    *
.*                    1 = MSH                                                *
.*                    2 = EVN                                                *
.*                    3 = PID                                                *
.*                    4 = NK1                                                *
.*                    5 = PV1                                                *
.*                    6 = MRG                                                *
.*                    7 = FT1                                                *
.*                    8 = ZXP                                                *
.*                    9 = ZAL                                                *
.*                   10 = RF1                                                *
.*                   11 = PRD                                                *
.*                   12 = ZXV                                                *
.*                   13 = PV2                                                *
.*                   14 = MFI                                                *
.*                   15 = MFE                                                *
.*                   16 = STF                                                *
.*                   17 = PRA                                                *
.*                   18 = ZPR                                                *
.*                   19 = PR1                                                *
.*                   20 = ROL                                                *
.*                   21 = DG1                                                *
.*                   22 = ZST                                                *
.*                   23 = ZSF                                                *
.*                   24 = SCH                                                *
.*                   25 = RGS                                                *
.*                   26 = ZSC                                                *
.*                   27 = ZFT                                                *
.*                   28 = NTE                                                *
.*                   29 = ARQ                                                *
.*                   30 = GT1                                                *
.*                   31 = IN1                                                *
.*                   32 = AIS                                                *
.*                   33 = AIL                                                *
.*                   34 = AIP                                                *
.*                   35 = ZTR                                                *
.*                   36 = ZNT                                                *
.*****************************************************************************
.
VSEG0000  MATCH     MSHSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      ONE,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     EVNSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TWO,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     PIDSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      THREE,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     NK1SEGMT,SEGMENT
          IF        @EQUAL
            MOVE      FOUR,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     PV1SEGMT,SEGMENT
          IF        @EQUAL
            MOVE      FIVE,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     MRGSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      SIX,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     FT1SEGMT,SEGMENT
          IF        @EQUAL
            MOVE      SEVEN,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     ZXPSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      EIGHT,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     ZALSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      NINE,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     RF1SEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TEN,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     PRDSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TEN1,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     ZXVSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TEN2,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     PV2SEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TEN3,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     MFISEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TEN4,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     MFESEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TEN5,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     STFSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TEN6,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     PRASEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TEN7,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     ZPRSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TEN8,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     PR1SEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TEN9,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     ROLSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TWENTY,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     DG1SEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TWENTY1,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     ZSTSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TWENTY2,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     ZSFSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TWENTY3,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     SCHSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TWENTY4,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     RGSSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TWENTY5,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     ZSCSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TWENTY6,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     ZFTSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TWENTY7,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     NTESEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TWENTY8,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     ARQSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TWENTY9,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     GT1SEGMT,SEGMENT
          IF        @EQUAL
            MOVE      THIRTY,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     IN1SEGMT,SEGMENT
          IF        @EQUAL
            MOVE      THIRTY1,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     AISSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      THIRTY2,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     AILSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      THIRTY3,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     AIPSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      THIRTY4,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     ZTRSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      THIRTY5,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     ZNTSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      THIRTY6,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MOVE      "Segment not valid",ERRORDSC
          MOVE      "100",ERRORNUM
          CALL      EROR0000
          MOVE      ZERO,SEGNUMBR
.
          MOVE      ONE,EXIT
          GOTO      VSEG9999
.
VSEG9000  MOVE      ZERO,EXIT
.
VSEG9999  RETURN
+
.******************************************************************************
.*                                  BACK0000              Called by: INIT0000 *
.*                          Display Background Screen                         *
.******************************************************************************
.
BACK0000  DISPLAY   *P1:4,*EF
          BOX       16,2,2,79,24
          HLINE     *G33,5,2,2
          HLINE     *G37,5,3,39
          HLINE     *G31,5,40,40
          HLINE     *G37,5,41,78
          HLINE     *G34,5,79,79
          HLINE     *G30,24,40,40
          VLINE     *G39,40,6,23
          DISPLAY   *P30:3,*HON,*V2LON," MESSAGE STATISTICS ";
.
          CALL      IBACLOCK
          PACK      KEY8,CCC,CYY,CMM,CDD
          UNPACK    KEY8,CCENT,CYEAR,CMON,CDAY
          CALL      PACDATE
          REP       " 0",CPCDATE
          CLOCK     TIME,CTIMEIS
.
          DISPLAY   *P4:4,"Activated on ",*V2LON,CPCDATE,*HOFF:
                    "  @  ",*V2LON,CTIMEIS,*HOFF:
                    *P41:4,"Current status... ",*V2LON,*HON,"Waiting";
.
          DISPLAY   *P4:6,*V2LON,*ULON,"Message":
                    *P12:6,"Received",*P21:6,"Successful",*P32:6,"Rejected":
                    *P42:6,*V2LON,*ULON,"Message":
                    *P50:6,"Received",*P59:6,"Successful":
                    *P70:6,"Rejected",*HOFF:
                    *P6:7,"A28":
                    *P6:8,"A31":
                    *P6:9,"A34":
                    *P6:10,"P03":
                    *P6:11,"I12":
                    *P6:12,"I13":
                    *P6:13,"I14":
                    *P6:14,"A04":
                    *P6:15,"A03":
                    *P6:16,"M02":
                    *P6:17,"A05":
                    *P6:18,"S14":
                    *P6:19,"A08":
                    *P6:20,"A21":
                    *P6:21,"A22"
.
.         Initialise counters
.
          MOVE      ONE,FORM2
          REPEAT
            STORE     ZERO,FORM2,A28RECV,A31RECV,A34RECV,P03RECV,I12RECV:
                                 I13RECV,I14RECV,A04RECV,A03RECV,M02RECV:
                                 A05RECV,S14RECV,A08RECV,A21RECV,A22RECV:
                                 A28FAIL,A31FAIL,A34FAIL,P03FAIL,I12FAIL:
                                 I13FAIL,I14FAIL,A04FAIL,A03FAIL,M02FAIL:
                                 A05FAIL,S14FAIL,A08FAIL,A21FAIL,A22FAIL:
                                 A28SUCC,A31SUCC,A34SUCC,P03SUCC,I12SUCC:
                                 I13SUCC,I14SUCC,A04SUCC,A03SUCC,M02SUCC:
                                 A05SUCC,S14SUCC,A08SUCC,A21SUCC,A22SUCC
            ADD       ONE,FORM2
          UNTIL     FORM2>45
.
BACK9999  RETURN
+
.*****************************************************************************
.*                          WMSH0000               Called by: PROC0000       *
.*        Format and write the message header segment                        *
.* Returns:  EXIT   0 = message sent ok                                      *
.*                  1 = connection lost, message not sent                    *
.*                  2 = timeout, message not sent                            *
.*****************************************************************************
.
WMSH0000  CALL      GDTM0000                     * get message date/time
.
.         If displaying messages, prepare the reply message variable
.
          MOVE      PIPE,MSH001                  * set field delimiter
.
          MOVE      "^~\&",MSH002                * set encoding chars.
.
          MOVE      "webPAS",MSH003              * set sending application
          ENDSET    MSH003
          APPEND    CARET,MSH003
          APPEND    PRGID,MSH003
          APPEND    VERSION,MSH003
          APPEND    CARET,MSH003
          APPEND    ANSL,MSH003
          RESET     MSH003
.
          MOVE      CAPPRVNO,MSH004              * set sending facility
          STRIP     MSH004
.
          MOVE      SAVAPPLI,MSH005              * set receiving application
          STRIP     MSH005
.
          STRIP     SAVFACIL
          MOVE      SAVFACIL,MSH006              * set receiving facility
.
          MOVE      DATETIME,MSH007              * set message date/time
          STRIP     MSH007
.
          CLEAR     MSH008                       * set security
.
.         Set message type
.
          MOVE      SAVMTYPE,MESSTYPE
          PACK      MSH009,ANSA,ANSC,ANSK,CARET,MESSTYPE
.
.         Generate and set message id
.
          MOVE      "  0",PRXCODE                * System Lock Sector 0
          CALL      GETSLK00                     * Get System Lock-Sector 0
          READ      CONTROLF,ZERO;*87,IBCNMESI   * read next message id
          MOVE      IBCNMESI,MSH010              * set message id
          ADD       ONE,IBCNMESI
          WRITAB    CONTROLF,ZERO;*87,IBCNMESI
          CALL      RELSLK00                     * Release System Lock-Sector 0
          SQUEEZE   MSH010
.
          MOVE      SAVMHPID,MSH011              * set processing id
          STRIP     MSH011
.
          MOVE      "2.3.1",MSH012               * set version id 2.3.1
          MATCH     MTYPEM02,MESSTYPE
          IF        @EQUAL
            MOVE      "2.4",MSH012               * set version id 2.4
          ENDIF
          MATCH     MTYPES12,MESSTYPE
          IF        @EQUAL
            MOVE      "2.4",MSH012               * set version id 2.4
          ENDIF
          MATCH     MTYPES13,MESSTYPE
          IF        @EQUAL
            MOVE      "2.4",MSH012               * set version id 2.4
          ENDIF
          MATCH     MTYPES14,MESSTYPE
          IF        @EQUAL
            MATCH     "2.4",MSH01201
            IF        @EQUAL
              MOVE      "2.4",MSH012             * set version id 2.4
            ENDIF
          ENDIF
          MATCH     MTYPES15,MESSTYPE
          IF        @EQUAL
            MOVE      "2.4",MSH012               * set version id 2.4
          ENDIF
          MATCH     MTYPES26,MESSTYPE
          IF        @EQUAL
            MOVE      "2.4",MSH012               * set version id 2.4
          ENDIF
.
          CLEAR     MSH013                       * set sequence number
.
          CLEAR     MSH014                       * set continuation pointer
.
          CLEAR     MSH015                       * set accept ackn. type
.
          CLEAR     MSH016                       * set applic. ackn. type
.
          CLEAR     MSH017                       * set country code
.
          CLEAR     MSH018                       * set character set
.
          MOVE      "en^^ISO 639-1",MSH019       * set principal language
.
          MOVE      "MSH",SEGMENT
          PACK      SEGSTRNG,STRTBLOK,SEGMENT:
                             MSH001,MSH002,PIPE,MSH003,PIPE,MSH004,PIPE:
                             MSH005,PIPE,MSH006,PIPE,MSH007,PIPE,MSH008,PIPE:
                             MSH009,PIPE,MSH010,PIPE,MSH011,PIPE,MSH012,PIPE:
                             MSH013,PIPE,MSH014,PIPE,MSH015,PIPE,MSH016,PIPE:
                             MSH017,PIPE,MSH018,PIPE,MSH019,CRETURN
.
          CALL      SEND0000                     * send message
          BRANCH    EXIT,WMSH9100:               * connection lost
                         WMSH9200                * timeout
.
          MOVE      ZERO,EXIT                    * sent ok
          GOTO      WMSH9999
.
WMSH9100  MOVE      ONE,EXIT
          GOTO      WMSH9999
.
WMSH9200  MOVE      TWO,EXIT
          GOTO      WMSH9999
.
WMSH9999  RETURN
+
.*****************************************************************************
.*                          WMSA0000               Called by: PROC0000       *
.*        Format and write the message acknowledgement segment               *
.* Returns:  EXIT   0 = message sent ok                                      *
.*                  1 = connection lost, message not sent                    *
.*                  2 = timeout, message not sent                            *
.*****************************************************************************
.
WMSA0000  MOVE      SP2,MSA001                   * clear all MSA fields
          MOVE      SP20,MSA002
          MOVE      SP100,MSA003
          MOVE      SP15,MSA004
          MOVE      SP1,MSA005
          MOVE      SP100,MSA006
          CLEAR     MSA001
          CLEAR     MSA002
          CLEAR     MSA003
          CLEAR     MSA004
          CLEAR     MSA005
          CLEAR     MSA006
.
.         Set MSA.1, Acknowledgement Code
.
          IF        ERRORCNT = 0
            MOVE      "AA",MSA001
          ELSE
            IF        ERORNUMB > 199
              MOVE      "AR",MSA001
            ELSE
              MOVE      "AE",MSA001
            ENDIF
          ENDIF
.
.         Set MSA.2, Message Control ID
.
          MOVE      SAVMESID,MSA002
.
.         Set MSA.3, Text message
.
          IF        ERRORCNT > 0
            MOVE      ERORLINE,MSA003
            STRIP     MSA003
          ENDIF
.
.         Set MSA.4, Expected Sequence Number
.
.         Set MSA.5, Delayed Acknowledgement Type
.
.         Set MSA.6, Error Condition
.
          MOVE      ERORNUMB,MSA006
          SQUEEZE   MSA006
          ENDSET    MSA006
          APPEND    CARET,MSA006
          APPEND    ERORTEXT,MSA006
          APPEND    CARET,MSA006
          APPEND    "HL7",MSA006
          RESET     MSA006
.
          MOVE      "MSA",SEGMENT
          PACK      SEGSTRNG,SEGMENT,PIPE:
                             MSA001,PIPE,MSA002,PIPE,MSA003,PIPE,MSA004,PIPE:
                             MSA005,PIPE,MSA006,CRETURN
.
          CALL      SEND0000                     * send message
          BRANCH    EXIT,WMSA9100:               * connection lost
                         WMSA9200                * timeout
.
          MOVE      ZERO,EXIT                    * sent ok
          GOTO      WMSA9999
.
WMSA9100  MOVE      ONE,EXIT
          GOTO      WMSA9999
.
WMSA9200  MOVE      TWO,EXIT
          GOTO      WMSA9999
.
WMSA9999  RETURN
+
.*****************************************************************************
.*                         VMES0000                Called by: PROC0000       *
.*          Validate message specific fields                                 *
.*   Previously, we have performed all the general HL7 validations.  Now we  *
.*   need to validate fields which are specific to the IBA database for      *
.*   the relevant messages.                                                  *
.*****************************************************************************
.
VMES0000  BRANCH    MESSGNUM,VMES1000:    * A28 (Add Person Information)
                             VMES2000:    * A31 (Update Person Information)
                             VMES9999:    * A34 (Merge Person Information)
                             VMES9999:    * P03 (Financial Transaction)
                             VMES9999:    * I12 (Add A/H Patient Referral)
                             VMES9999:    * I13 (Modify A/H Patient Referral)
                             VMES9999:    * I14 (Cancel A/H Patient Referral)
                             VMES8000:    * A04 (Confirm O/P Appointment)
                             VMES9999:    * A03 (Discharge O/P Attendance)
                             VMES9999:    * M02 (Staff/Practitioner)
                             VMES2000:    * A05 (Preadmission)
                             VMES9999:    * S14 (Theatre Booking Update)
                             VMES4000:    * A08 (I/P Visit Update)
                             VMES5000:    * A21 (I/P On-Leave)
                             VMES6000:    * A22 (I/P Return from Leave)
                             VMES9999:    * S0x (O/P Appointment Message)
                             VMES7000:    * S12 (New Appointment OUT/INP)0890602
                             VMES7000:    * S13 (Reschedule Appt OUT)0890602
                             VMES7000:    * S15 (Cancel Appt OUT/INP)0890602
                             VMES7000     * S26 (DNA Appt OUT)0890602
.
.
.         Validate PMI Update (A28)
.
VMES1000  CALL      VADD0000                     * validate additional fields
          GOTO      VMES9999
.
.         Validate PMI Update (A31) and Preadmission (A05)
.
VMES2000  CALL      VADD0000                     * validate additional fields
          GOTO      VMES9999
.
VMES4000  MATCH     "1",PTCNUP31
          IF        @EQUAL
            CALL      VADD0000                   * validate for A08s (0887136)
          ENDIF
.
.         Validate fields for EMR ADT^A08 if required
.
          MATCH     ANSE,PV100201
          IF        @EQUAL
            CALL      VA08E000                   * validate A08 EMR fields
            GOTO      VMES9999
          ENDIF
.
.         Validate fields for OUT ADT^A08 if required (telehealth)
.
          MATCH     ANSO,PV100201
          IF        @EQUAL
            CALL      VA08O000                   * validate A08 OUT fields
            GOTO      VMES9999
          ENDIF
.
.         Validate fields for I/P ADT^A08
.         First, validate & load visitor's allowed flag if populated
.
          SQUEEZE   ZXV00101
          MOVELPTR  ZXV00101,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VMES4050 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZXV00101            * null field ?
          IF        @EQUAL
            MOVE      "ZXV.1: Invalid Visitors Allowed Flag",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VMES4050
          ENDIF
.
          COMPARE   ONE,FORM3
          IF        !@EQUAL
            MOVE      "ZXV.1: Visitors Allowed Flag incorrect length",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VMES4050
          ENDIF
.
          REP       UPPLOW,ZXV00101              * convert to uppercase
.
          MATCH     ANSY,ZXV00101                * Yes sent ?
          GOTO      VMES4050 IF EQUAL            * yes - valid value
.
          MATCH     ANSN,ZXV00101                * No sent ?
          GOTO      VMES4050 IF EQUAL            * yes - valid value
.
          MOVE      "ZXV.1: Visitors Allowed Flag invalid value",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
          GOTO      VMES4050
.
.         Validate & load phone call's allowed flag if populated
.
VMES4050  SQUEEZE   ZXV05801
          MOVELPTR  ZXV05801,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VMES4100 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZXV05801            * null field ?
          IF        @EQUAL
            MOVE      "ZXV.58: Invalid Phone Calls Allowed Flag",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VMES4100
          ENDIF
.
          COMPARE   ONE,FORM3
          IF        !@EQUAL
            MOVE      "ZXV.58: Phone Calls Allowed Flag incorrect length",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VMES4100
          ENDIF
.
          REP       UPPLOW,ZXV05801              * convert to uppercase
.
          MATCH     ANSY,ZXV05801                * Yes sent ?
          GOTO      VMES4100 IF EQUAL            * yes - valid value
.
          MATCH     ANSN,ZXV05801                * No sent ?
          GOTO      VMES4100 IF EQUAL            * yes - valid value
.
          MOVE      "ZXV.58: Phone Calls Allowed Flag invalid value",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
          GOTO      VMES4100
.
.         Validate & load expected discharge date/time if populated
.
VMES4100  SQUEEZE   PV200901
          MOVELPTR  PV200901,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VMES9999 IF EQUAL            * no
.
          MATCH     BLANKSTR,PV200901            * null field ?
          GOTO      VMES9999 IF EQUAL            * yes - valid
.
          IF        FORM3 <> 8 & FORM3 <> 14
            MOVE      "PV2.9: Expected Discharge DateTime incorrect length",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VMES9999
          ENDIF
.
          MOVE      PV200901,DIM14
          MOVE      "PV2.9 ",FIELDID
          MOVE      ZERO,DATFLAG1
          IF        FORM3 = 8
            MOVE      ZERO,DATFLAG2              * date only
          ELSE
            MOVE      ONE,DATFLAG2               * date and time
          ENDIF
          CALL      VDTM0000        
          GOTO      VMES9999
.
.         Processing A21 (On-Leave) message.
.         The final tasks before we start processing are to:
.           - check there is a patwr1af or patnobef record for this visit
.           - check the new transfer record doesn't already exist
.           - read/lock the admission record
.         If any of these fail, then processing will not continue.
.
VMES5000  MATCH     SP3,AWARD                    * blank ward ?
          GOTO      VMES5090 IF EQUAL            * yes - error
.
          MATCH     SP3,ABED                     * ward only ?
          GOTO      VMES5100 IF EQUAL            * yes
.
.         The patient is currently in a ward/bed, so check there is a 
.         corresponding patwr1af record
.
          PACK      KEY6,AWARD,ABED
          CALL      RDWARD1                      * ward/bed record found ?
          BRANCH    OVRCD,VMES5090               * no - error
.
          MATCH     AADMNO,WADMNO                * same visit ?
          GOTO      VMES5090 IF NOT EQUAL        * no - error
.
.         Check if there was another patient on standby for the ward/bed
.         the patient is vacating
.
          MATCH     ZEROVISN,WSTBY               * standby patient ?
          GOTO      VMES5200 IF EQUAL            * no
.
.         Check the admission record for the standby patient to make
.         sure it exists, the ward is not populated and the patient is
.         admitted
.
          MOVE      WSTBY,KEY8
          CALL      RDMISS1
          BRANCH    OVRCD,VMES5091
.
          MATCH     SP3,AWARD
          GOTO      VMES5091 IF NOT EQUAL
.
          COMPARE   ASTAT,TWO
          GOTO      VMES5091 IF NOT EQUAL
.
.         Note: Reposition back on the original admission record will happen
.         when locking the record below.
.
          GOTO      VMES5200
.
VMES5090  MOVE      "PV1.19: Ward/Bed inconsistency found",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VMES5200
.
VMES5091  MOVE      "PV1.19: Standby patient Ward/Bed inconsistency found",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VMES5200
.
.         The patient is currently in a ward only, so check there is a
.         corresponding patnobef record
.
VMES5100  PACK      KEY13,AWARD,AADMNO,SP1,APLUR
          CALL      RDNOBE1
          IF        OVRCD = 1
            MOVE      "PV1.19: Ward/Bed inconsistency found",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Now check that the new transfer key doesn't already exist
.
VMES5200  UNPACK    ZXV02101,TDATE,DIM2H,DIM2M,DIM2S
          PACK      TTIME,DIM2H,COLON,DIM2M,COLON,DIM2S
.
          PACK      KEY30,TADMN,TDATE,TTIME,TWARD,TBED
          CALL      RDATRAN2
          IF        OVRCD = 0
            MOVE      "PV1.19: Transfer record already exists",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VMES9999
          ENDIF
.
.         Finally, lock the admission record
.
          MOVE      PVIBILL,KEY8
          CALL      RLPTMIS1                     * read/lock admission record
          BRANCH    OVRCD,VMES5910:              * record not on file
                          VMES5920               * record already locked
          GOTO      VMES9999                     * ok - record locked
.
VMES5910  MOVE      "PV1.19: Unable to lock admission record",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VMES9999
.
VMES5920  MOVE      "PV1.19: Admission record already locked",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VMES9999
.
.         Processing A22 (Return from Leave) message.
.         The final tasks before we start processing are to:
.           - check the ward/bed is still valid and available
.           - check the room type >>>>>>>??????
.           - read/lock the admission record
.         If any of these fail, then processing will not continue.
.
.
.         First, make sure that the ward or ward/bed is still active
.
VMES6000  PACK      KEY6,SAVEWARD,SAVEBED
          CALL      RDWARD1
          IF        OVRCD = 1
            MOVE      "ZXV.30: WardBed not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VMES9999
          ENDIF
.
          IF        WACTIVE = 1
            MOVE      "ZXV.30: WardBed not active",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VMES9999
          ENDIF
.
.         Check if the ward/bed is occupied already and if so, check there
.         is a standby patient as well.
.
          MOVE      TWO,TRANFLAG                 * default flag to ward only
.
          MATCH     SP3,SAVEBED                  * ward only ?
          GOTO      VMES6100 IF EQUAL            * yes
.
          MOVE      ONE,TRANFLAG                 * set flag for ward/bed
.
          MATCH     ZEROVISN,WADMNO              * bed empty ?
          GOTO      VMES6100 IF EQUAL            * yes - ok to continue
.
          MOVE      THREE,TRANFLAG               * set flag for standby
.
          MATCH     ZEROVISN,WSTBY               * standby patient ?
          GOTO      VMES6100 IF EQUAL            * no - ok to continue
.
.         There is already a patient on standby, so put the patient into
.         the ward only (no bed), regardless of the type of ward.
.
          MOVE      TWO,TRANFLAG                 * default flag to ward only
          MOVE      SP3,TBED                     * clear bed
.
.         Load only those transfer fields that need to change and
.         the rest will default from the previous transfer record.
.         Make sure that the record doesn't already exist on the transfer
.         file (which it shouldn't).
.
VMES6100  UNPACK    ZXV03001,TDATE,HOURTM,MINTIME,SECTIME
          PACK      TTIME,HOURTM,COLON,MINTIME,COLON,SECTIME
          MOVE      ANSR,TMOVE
          PACK      PTTROPER,SAVPSSCD,SP10       * operator Id
          PACK      PTTRCDAT,CCC,CYY,CMM,CDD
          REP       " 0",PTTRCDAT
          MOVE      CTIMEIS,PTTRCTIM
.
          PACK      KEY30,TADMN,TDATE,TTIME,TWARD,TBED
          CALL      RDATRAN2
          IF        OVRCD = 0
            MOVE      "ZXV.30: Transfer record already exists",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VMES9999
          ENDIF
.
          BRANCH    TRANFLAG,VMES6900:           * ward/bed
                             VMES6200:           * ward only
                             VMES6900            * standby
.
VMES6200  PACK      KEY13,NBWARD,NBADMNO,NBPLUR
          CALL      RANOBE1
          IF        OVRCD = 0
            MOVE      "ZXV.30: NoBedWard record already exists",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VMES9999
          ENDIF
.
.         Finally, lock the admission record
.
VMES6900  MOVE      PVIBILL,KEY8
          CALL      RLPTMIS1                     * read/lock admission record
          BRANCH    OVRCD,VMES5910:              * record not on file
                          VMES5920               * record already locked
          GOTO      VMES9999                     * ok - record locked
.
VMES7000  CALL      VAPPT000                     * validate SIU INP/OUT messages
          GOTO      VMES9999
.
VMES8000  MATCH     ANSE,PV100201
          IF        @EQUAL
            CALL      VA04E000                   * validate A04 EMR fields
            GOTO      VMES9999
          ENDIF
.
VMES9999  RETURN
+
.*****************************************************************************
.*                            VAPPT000             Called by: VMES0000       *
.*            Validate additional fields for SIU Appointment messages        *
.*****************************************************************************
VAPPT000
VAPPT999  RETURN
+
.*****************************************************************************
.*                            VA08O000             Called by: VMES0000       *
.*            Validate additional fields for A08 OUT messages                *
.*****************************************************************************
VA08O000  STRIP     ZXV09001
          MOVELPTR  ZXV09001,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VA08O020 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV09001
          GOTO      VA08O020 IF EQUAL
.
          PACK      KEY5,CATOM,ZXV09001,SP5
          CALL      RDCODE1                      * valid code ?
          BRANCH    OVRCD,VA08O010
.
          MATCH     ANSI,PTCOACTV                * inactive ?
          GOTO      VA08O020 IF NOT EQUAL
.
VA08O010  MOVE      "ZXV.90: Telehealth Status is not a valid Cat OM code",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
.
VA08O020  STRIP     ZXV09701
          MOVELPTR  ZXV09701,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          IF        @EQUAL
            MOVE      SP1,ZXV09701
            GOTO      VA08O900                   * no - no change
          ENDIF
.
          MATCH     BLANKSTR,ZXV09701
          GOTO      VA08O900 IF EQUAL            * null - blank out
.
          REP       "Y1y1N0n0",ZXV09701
.
          MATCH     "1",ZXV09701                 * Yes sent ?
          GOTO      VA08O900 IF EQUAL            * yes - valid value
.
          MATCH     "0",ZXV09701                 * No sent ?
          GOTO      VA08O900 IF EQUAL            * yes - valid value
.
          MOVE      "ZXV.97: Appointment confirmed must be Y or N",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VA08O900
.
VA08O900
.
VA08O999  RETURN
+
.*****************************************************************************
.*                            VA04E000             Called by: VMES0000       *
.*            Validate additional fields for A04 EMR messages                *
.*****************************************************************************
.
.         EVN.5     Operator ID (webPAS User ID)
.
VA04E000  STRIP     EVN00501
          MOVELPTR  EVN00501,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "EVN.5: Operator ID not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VA04E100
          ENDIF
.
          MATCH     BLANKSTR,EVN00501
          IF        @EQUAL
            MOVE      "EVN.5: Operator ID is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VA04E100
          ENDIF
.
          IF        FORM3 > 10
            MOVE      "EVN.5: Operator ID has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VA04E100
          ENDIF
.
          PACK      KEY10,EVN00501,SP10
          CALL      RDWBSE1
          IF        OVRCD = 1
            MOVE      "EVN.5: Operator ID not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VA04E100
          ENDIF
.
VA04E100
.
VA04E999  RETURN
+
.
.*****************************************************************************
.*                            VA08E000             Called by: VMES0000       *
.*            Validate additional fields for A08 EMR messages                *
.*****************************************************************************
.
.         Save arrival date/time for validation of other fields
.
VA08E000  MOVE      SP70,EMRADTTM                * clear arrival date/time
          PACK      DIM16,EMVIDATE,EMVITIME,SP70
          MATCH     SP70,DIM16
          GOTO      VA08E005 IF EQUAL            * no existing arrival time
.
          REP       ": ",DIM16
          SQUEEZE   DIM16
          MOVE      DIM16,EMRADTTM               * existing arrival date/time
.
.         Save discharge date/time for validation of other fields
.
VA08E005  MOVE      SP70,EMRDDTTM                * clear discharge date/time
          PACK      DIM16,EMVIDDAT,EMVIDTIM,SP70
          MATCH     SP70,DIM16
          GOTO      VA08E010 IF EQUAL            * no existing discharge time
.
          REP       ": ",DIM16
          SQUEEZE   DIM16
          MOVE      DIM16,EMRDDTTM               * existing discharge date/time
.
.         ZXV.103   Arrival Date/Time
.
VA08E010  STRIP     ZXV10301
          MOVELPTR  ZXV10301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VA08E020 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV10301
          IF        @EQUAL
            MOVE      "ZXV.103: Arrival Date/Time cannot be deleted",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VA08E020
          ENDIF
.
          MOVE      "ZXV.103",FIELDID
          MOVE      ZXV10301,DIM14
          MOVE      ONE,DATFLAG1                 * no date/time in the future
          MOVE      ONE,DATFLAG2                 * date & time validation
          CALL      VDTM0000
.
          MOVE      ZXV10301,EMRADTTM            * save incoming arriv date/time
.
          MATCH     SP70,EMRDDTTM
          GOTO      VA08E020 IF EQUAL            * no existing discharge dte/tme
.
          MATCH     ZXV10301,EMRDDTTM
          IF        @LESS
            MOVE      "ZXV.103: Arrival date/time cannot be after discharge date/time",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         ZXV.59    Ambulance Handover Date/Time
.
VA08E020  STRIP     ZXV05901
          MOVELPTR  ZXV05901,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VA08E030 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV05901
          GOTO      VA08E030 IF EQUAL
.
          MOVE      ZXV05901,DIM14
          MOVE      "ZXV.59 ",FIELDID
          MOVE      ONE,DATFLAG1                 * no future date
          MOVE      ONE,DATFLAG2                 * date/time
          CALL      VDTM0000                     * validation
.
          MATCH     SP70,EMRADTTM
          GOTO      VA08E025 IF EQUAL            * no existing arrival date/time
.
          MATCH     EMRADTTM,ZXV05901
          IF        @LESS
            MOVE      "ZXV.59: Ambulance handover date/time cannot be before arrival",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VA08E025  MATCH     SP70,EMRDDTTM
          GOTO      VA08E030 IF EQUAL            * no existing discharge dte/tme
.
          MATCH     ZXV05901,EMRDDTTM
          IF        @LESS
            MOVE      "ZXV.59: Ambulance handover date/time cannot be after discharge",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         ZXV.60    Ambulance Case Number
.
VA08E030  STRIP     ZXV06001
          MOVELPTR  ZXV06001,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VA08E040 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV06001
          GOTO      VA08E040 IF EQUAL
.
          IF        FORM3 > 15
            MOVE      "ZXV.60: Ambulance Case Number incorrect length",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         ZXV.61    Ambulance Case Created Date/Time
.
VA08E040  STRIP     ZXV06101
          MOVELPTR  ZXV06101,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VA08E050 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV06101
          GOTO      VA08E050 IF EQUAL
.
          MOVE      ZXV06101,DIM14
          MOVE      "ZXV.61 ",FIELDID
          MOVE      ONE,DATFLAG1                 * no future date
          MOVE      ONE,DATFLAG2                 * date/time
          CALL      VDTM0000                     * validation
.
.         ZXV.62    Initial Assessor Code
.
VA08E050  STRIP     ZXV06201
          MOVELPTR  ZXV06201,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VA08E060 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV06201
          GOTO      VA08E060 IF EQUAL
.
          PACK      KEY10,ZXV06201,SP10
          CALL      RDPMHCP1
          IF        OVRCD = 1
            MOVE      "ZXV.62: Initial Assessor Code not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VA08E060  STRIP     ZXV06301
          MOVELPTR  ZXV06301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VA08E070 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV06301
          GOTO      VA08E070 IF EQUAL
.
          MOVE      ZXV06301,DIM14
          MOVE      "ZXV.63 ",FIELDID
          MOVE      ONE,DATFLAG1                 * no future date
          MOVE      ONE,DATFLAG2                 * date/time
          CALL      VDTM0000                     * validation
.
VA08E070  STRIP     ZXV06401
          MOVELPTR  ZXV06401,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VA08E080 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV06401
          GOTO      VA08E080 IF EQUAL
.
          PACK      KEY5,ANSY,ANSN,ZXV06401,SP3
          CALL      RDCODE1                      * valid code ?
          BRANCH    OVRCD,VA08E075
.
          MATCH     ANSI,PTCOACTV                * inactive ?
          GOTO      VA08E080 IF NOT EQUAL
.
VA08E075  MOVE      "ZXV.64: Initial Assessor Reason not valid",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
.
VA08E080  STRIP     ZXV06501
          MOVELPTR  ZXV06501,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VA08E090 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV06501
          GOTO      VA08E090 IF EQUAL
.
          MOVE      ZXV06501,DIM14
          MOVE      "ZXV.65 ",FIELDID
          MOVE      ONE,DATFLAG1                 * no future date
          MOVE      ONE,DATFLAG2                 * date/time
          CALL      VDTM0000                     * validation
.
VA08E090  STRIP     ZXV06601
          MOVELPTR  ZXV06601,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VA08E100 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV06601
          GOTO      VA08E100 IF EQUAL
.
          PACK      KEY10,ZXV06601,SP10
          CALL      RDPMHCP1
          IF        OVRCD = 1
            MOVE      "ZXV.66: Treating Nurse Code not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VA08E100
          ENDIF
.
          IF        PMHCHCST <> 14 & PMHCHCST <> 15
            MOVE      "ZXV.66: Treating Nurse Code status not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VA08E100  STRIP     ZXV06701
          MOVELPTR  ZXV06701,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VA08E110 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV06701
          GOTO      VA08E110 IF EQUAL
.
          MOVE      ZXV06701,DIM14
          MOVE      "ZXV.67 ",FIELDID
          MOVE      ONE,DATFLAG1                 * no future date
          MOVE      ONE,DATFLAG2                 * date/time
          CALL      VDTM0000                     * validation
.
VA08E110  STRIP     ZXV06801
          MOVELPTR  ZXV06801,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VA08E120 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV06801
          GOTO      VA08E120 IF EQUAL
.
          PACK      KEY10,ZXV06801,SP10
          CALL      RDPMHCP1
          IF        OVRCD = 1
            MOVE      "ZXV.68: MH Practitioner Code not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VA08E120  STRIP     ZXV06901
          MOVELPTR  ZXV06901,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VA08E130 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV06901
          GOTO      VA08E130 IF EQUAL
.
          MOVE      ZXV06901,DIM14
          MOVE      "ZXV.69 ",FIELDID
          MOVE      ONE,DATFLAG1                 * no future date
          MOVE      ONE,DATFLAG2                 * date/time
          CALL      VDTM0000                     * validation
.
VA08E130  STRIP     ZXV07001
          MOVELPTR  ZXV07001,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VA08E140 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV07001
          GOTO      VA08E140 IF EQUAL
.
          PACK      KEY10,ZXV07001,SP10
          CALL      RDPMHCP1
          IF        OVRCD = 1
            MOVE      "ZXV.70: First Seen By Doctor Code not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VA08E140  STRIP     ZXV07101
          MOVELPTR  ZXV07101,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VA08E150 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV07101
          GOTO      VA08E150 IF EQUAL
.
          MOVE      ZXV07101,DIM14
          MOVE      "ZXV.71 ",FIELDID
          MOVE      ONE,DATFLAG1                 * no future date
          MOVE      ONE,DATFLAG2                 * date/time
          CALL      VDTM0000                     * validation
.
VA08E150  STRIP     ZXV07201
          MOVELPTR  ZXV07201,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VA08E160 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV07201
          GOTO      VA08E160 IF EQUAL
.
          MOVE      ZXV07201,DIM14
          MOVE      "ZXV.72 ",FIELDID
          MOVE      ONE,DATFLAG1                 * no future date
          MOVE      ONE,DATFLAG2                 * date/time
          CALL      VDTM0000                     * validation
.
VA08E160  STRIP     ZXV07301
          MOVELPTR  ZXV07301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VA08E170 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV07301
          GOTO      VA08E170 IF EQUAL
.
          PACK      KEY5,CATet,ZXV07301,SP3
          CALL      RDCODE1                      * valid code ?
          BRANCH    OVRCD,VA08E165
.
          MATCH     ANSI,PTCOACTV                * inactive ?
          GOTO      VA08E170 IF NOT EQUAL
.
VA08E165  MOVE      "ZXV.73: Readiness to Admit Code not valid",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
.
VA08E170  STRIP     ZXV07401
          MOVELPTR  ZXV07401,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VA08E180 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV07401
          GOTO      VA08E180 IF EQUAL
.
          PACK      KEY10,ZXV07401,SP10
          CALL      RDPMHCP1
          IF        OVRCD = 1
            MOVE      "ZXV.74: Admitting Doctor Code not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VA08E180  STRIP     ZXV07501
          MOVELPTR  ZXV07501,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VA08E190 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV07501
          GOTO      VA08E190 IF EQUAL
.
          MATCH     "Y",ZXV07501
          GOTO      VA08E190 IF EQUAL
.
          MATCH     "N",ZXV07501
          GOTO      VA08E190 IF EQUAL
.
          MOVE      "ZXV.75: Admitting Doctor Contacted not valid",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
.
VA08E190  STRIP     ZXV07601
          MOVELPTR  ZXV07601,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VA08E200 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV07601
          GOTO      VA08E200 IF EQUAL
.
          PACK      KEY5,CATeb,ZXV07601,SP3
          CALL      RDCODE1                      * valid code ?
          BRANCH    OVRCD,VA08E195
.
          MATCH     ANSI,PTCOACTV                * inactive ?
          GOTO      VA08E200 IF NOT EQUAL
.
VA08E195  MOVE      "ZXV.76: Escort Source not valid",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
.
VA08E200  STRIP     ZXV08201
          MOVELPTR  ZXV08201,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VA08E210 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV08201
          GOTO      VA08E210 IF EQUAL
.
          MOVE      ZXV08201,DIM14
          MOVE      "ZXV.82 ",FIELDID
          MOVE      ZERO,DATFLAG1                * no restriction on date/time
          MOVE      ONE,DATFLAG2                 * date/time
          CALL      VDTM0000                     * validation
.
VA08E210  STRIP     ZXV08301
          MOVELPTR  ZXV08301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VA08E220 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV08301
          GOTO      VA08E220 IF EQUAL
.
          PACK      KEY5,CATec,ZXV08301,SP3
          CALL      RDCODE1                      * valid code ?
          BRANCH    OVRCD,VA08E215
.
          MATCH     ANSI,PTCOACTV                * inactive ?
          GOTO      VA08E220 IF NOT EQUAL
.
VA08E215  MOVE      "ZXV.83: Referred to On Departure not valid",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
.
VA08E220  STRIP     ZXV08401
          MOVELPTR  ZXV08401,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VA08E230 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV08401
          GOTO      VA08E230 IF EQUAL
.
          PACK      KEY5,CATed,ZXV08401,SP3
          CALL      RDCODE1                      * valid code ?
          BRANCH    OVRCD,VA08E225
.
          MATCH     ANSI,PTCOACTV                * inactive ?
          GOTO      VA08E230 IF NOT EQUAL
.
VA08E225  MOVE      "ZXV.84: Reason for Transfer not valid",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
.
VA08E230  STRIP     ZXV08501
          MOVELPTR  ZXV08501,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VA08E240 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV08501
          GOTO      VA08E240 IF EQUAL
.
          PACK      KEY5,CATea,ZXV08501,SP3
          CALL      RDCODE1                      * valid code ?
          BRANCH    OVRCD,VA08E235
.
          MATCH     ANSI,PTCOACTV                * inactive ?
          GOTO      VA08E240 IF NOT EQUAL
.
VA08E235  MOVE      "ZXV.85: Transport Mode not valid",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
.
VA08E240  STRIP     ZXV08601
          MOVELPTR  ZXV08601,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VA08E250 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV08601
          GOTO      VA08E250 IF EQUAL
.
          MOVE      ZXV08601,DIM14
          MOVE      "ZXV.86 ",FIELDID
          MOVE      ZERO,DATFLAG1                * any time
          MOVE      TWO,DATFLAG2                 * time
          CALL      VDTM0000                     * validation
.
VA08E250  STRIP     ZXV08701
          MOVELPTR  ZXV08701,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VA08E300 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV08701
          GOTO      VA08E300 IF EQUAL
.
          PACK      KEY5,CATRX,ZXV08701,SP3
          CALL      RDCODE1                      * valid code ?
          BRANCH    OVRCD,VA08E255
.
          MATCH     ANSI,PTCOACTV                * inactive ?
          GOTO      VA08E300 IF NOT EQUAL
.
VA08E255  MOVE      "ZXV.87: ED Extended Visit Reason not valid",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
.
VA08E300
.
VA08E310  STRIP     ZXV07701
          MOVELPTR  ZXV07701,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VA08E320 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV07701
          GOTO      VA08E320 IF EQUAL
.
          PACK      KEY10,ZXV07701,SP10
          CALL      RDPMREL1                     * valid code ?
          BRANCH    OVRCD,VA08E315
.
          MATCH     "1",PMRLACTV                 * inactive ?
          GOTO      VA08E320 IF NOT EQUAL
.
VA08E315  MOVE      "ZXV.77: Relative Contacted not valid",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
.
VA08E320  STRIP     ZXV07801
          MOVELPTR  ZXV07801,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VA08E330 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV07801
          GOTO      VA08E250 IF EQUAL
.
          MOVE      ZXV07801,DIM14
          MOVE      "ZXV.78 ",FIELDID
          MOVE      ZERO,DATFLAG1                * any time
          MOVE      TWO,DATFLAG2                 * time
          CALL      VDTM0000                     * validation
.
VA08E330  STRIP     ZXV07901
          MOVELPTR  ZXV07901,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VA08E340 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV07901
          GOTO      VA08E340 IF EQUAL
.
          MATCH     "Y",ZXV07901
          GOTO      VA08E340 IF EQUAL
.
          MATCH     "N",ZXV07901
          GOTO      VA08E340 IF EQUAL
.
          MOVE      "ZXV.79: Risk Assessment not valid",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
.
VA08E340  STRIP     ZXV08001
          MOVELPTR  ZXV08001,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VA08E350 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV08001
          GOTO      VA08E350 IF EQUAL
.
          IF        FORM3 > 50
            MOVE      "ZXV.80: Specialist / other hospital contacted name incorrect length",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VA08E350  STRIP     ZXV08101
          MOVELPTR  ZXV08101,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      VA08E360 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV08101
          GOTO      VA08E360 IF EQUAL
.
          PACK      KEY5,CATCZ,ZXV08101,SP3
          CALL      RDCODE1                      * valid code ?
          BRANCH    OVRCD,VA08E355
.
          MATCH     ANSI,PTCOACTV                * inactive ?
          GOTO      VA08E360 IF NOT EQUAL
.
VA08E355  MOVE      "ZXV.81: Specialist / other hospital contacted via not valid",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
.
. Validate ZTR.45 (Triage Date/Time) against Arrival & Discharge Date/Time as we
. now potentially have a value in ZTR.45:
.
VA08E360  MATCH     SP70,EMRTDTTM
          GOTO      VA08E380 IF EQUAL            * no existing triage date/time
.
          MATCH     SP70,EMRADTTM
          GOTO      VA08E370 IF EQUAL            * no existing arrival date/time
.
          MATCH     EMRADTTM,EMRTDTTM
          IF        @LESS
            MOVE      "ZTR.45: Triage date/time cannot be before arrival",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VA08E370  MATCH     SP70,EMRDDTTM
          GOTO      VA08E380 IF EQUAL            * no existing discharge dte/tme
.
          MATCH     EMRTDTTM,EMRDDTTM
          IF        @LESS
            MOVE      "ZTR.45: Triage date/time cannot be after discharge",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VA08E380
.
VA08E999  RETURN
+
.*****************************************************************************
.*                            VADD0000             Called by: VMES0000       *
.*            Validate and Load additional PMI fields for A28 & A31          *
.*****************************************************************************
.           
.         Validate & load race (aboriginality) code if populated
.               
VADD0000  SQUEEZE   PID01001
          MOVELPTR  PID01001,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VADD0050 IF EQUAL            * no
.
          MATCH     BLANKSTR,PID01001            * null field ?
          IF        @EQUAL
            MOVE      SP3,PMPXABRG               * yes
            GOTO      VADD0050
          ENDIF
.
          COMPARE   ONE,FORM3
          IF        !@EQUAL
            IF        QUICKREG = 1
              PACK      PID01001,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID01001
            ELSE
              MOVE      "PID.10: Race incorrect length",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD0050
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.
          STRIP     PID01003
          MOVELPTR  PID01003,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            IF        QUICKREG = 1
              PACK      PID01001,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID01001
            ELSE
              MOVE      "PID.10: Race coding system not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000 
            ENDIF
          ELSE
            MATCH     BLANKSTR,PID01003          * null field ?
            IF        @EQUAL
              IF        QUICKREG = 1
                PACK      PID01001,SP100,SP100,SP100,SP100,SP100
                CLEAR     PID01001
              ELSE
                MOVE      "PID.10: Race coding system is mandatory",ERRORDSC
                MOVE      "101",ERRORNUM
                CALL      EROR0000 
              ENDIF
            ENDIF
          ENDIF
.
.         Race codes are 1-digit values, so validate the value sent
.
          TYPE      PID01001
          IF        !@EQUAL
            IF        QUICKREG = 1
              PACK      PID01001,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID01001
            ELSE
              MOVE      "PID.10: Race not numeric",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000 
            ENDIF
            GOTO      VADD0050
          ENDIF
.
          MOVE      PID01001,ANS
          MOVE      ZERO,FORM1
          MOVE      ANS,FORM1
          BRANCH    PTCNHDPS,VADD0050:           * NZ
                             VADD0002:           * NSW
                             VADD0002:           * VIC
                             VADD0001:           * QLD
                             VADD0002:           * SA
                             VADD0003:           * WA
                             VADD0001:           * TAS
                             VADD0050:           * NT
                             VADD0001            * ACT
          GOTO      VADD0050
.
.         QLD, ACT and TAS.
.         1 = Aboriginal
.         2 = Torres Strait Islander
.         3 = Aboriginal & Torres Strait Islander
.         4 = Neither Aboriginal or Torres Strait Islander
.         9 = Other
.
VADD0001  IF        FORM1 > 4 & FORM1 < 9
            GOTO      VADD0004
          ENDIF
          GOTO      VADD0005
.
.         VIC, SA & NSW
.         1 = Aboriginal
.         2 = Torres Strait Islander
.         3 = Aboriginal & Torres Strait Islander
.         4 = Neither Aboriginal or Torres Strait Islander
.         8 = Question unable to to be asked
.         9 = Refused to answer
.
VADD0002  IF        FORM1 > 4 & FORM1 < 8
            GOTO      VADD0004
          ENDIF
          GOTO      VADD0005
.
.         WA.
.         1 = Aboriginal
.         2 = Torres Strait Islander
.         3 = Aboriginal & Torres Strait Islander
.         4 = Other
.
VADD0003  COMPARE   FIVE,FORM1
          GOTO      VADD0005 IF LESS
.
VADD0004  IF        QUICKREG = 1
            PACK      PID01001,SP100,SP100,SP100,SP100,SP100
            CLEAR     PID01001
          ELSE
            MOVE      "PID.10: Race not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000 
          ENDIF
          GOTO      VADD0050
.
.         Check for the first active Cat VA code where the HDP Equiv. matches
.         the value sent
.
VADD0005  MOVE      FORM1,ANS                    * save aboriginality integer
          PACK      KEY5,ANSV,ANSA,SP5
          CALL      RDSCODE1                     * Position on Cat VA
VADD0010  CALL      RDKCODE1                     * read next record
          BRANCH    OVRCD,VADD0020               * end of file
.
          MATCH     "VA",TCODE                   * category VA still ?
          GOTO      VADD0020 IF NOT EQUAL        * no
.
          IF        PTCNHDPS = 3
            UNPACK    THCSCOD,KEY1,KEY1
          ELSE
            MOVE      THCSCOD,KEY1
          ENDIF
.
          MATCH     ANS,KEY1                     * same race value ?
          GOTO      VADD0010 IF NOT EQUAL        * no - get next record
.
.         The code exists, so make sure it is active
.
          MATCH     ANSI,PTCOACTV                * inactive ?
          GOTO      VADD0010 IF EQUAL            * yes - ignore record
.
          MOVE      ACODE,PMPXABRG               * load race code
          GOTO      VADD0050
.
VADD0020  IF        QUICKREG = 1
            PACK      PID01001,SP100,SP100,SP100,SP100,SP100
            CLEAR     PID01001
          ELSE
            MOVE      "PID.10: Race equivalent code not found",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000 
          ENDIF
.
.         Validate & load preferred language if populated
.         
VADD0050  SQUEEZE   PID01501
          MOVELPTR  PID01501,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VADD0200 IF EQUAL            * no
.
          MATCH     BLANKSTR,PID01501            * null field ?
          IF        @EQUAL
            MOVE      SP3,PMPXLNG1               * yes
            MOVE      "U",PMPXINTR               * set interpreter req'd
            GOTO      VADD0200
          ENDIF
.
.         Preferred Language codes are 2 or 4-digit, so validate the value sent
.
          IF        FORM3 <> 2 & FORM3 <> 4
            IF        QUICKREG = 1
              PACK      PID01501,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID01501
            ELSE
              MOVE      "PID.15: Preferred Language incorrect length",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000 
            ENDIF
            GOTO      VADD0180
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.         
          STRIP     PID01503
          MOVELPTR  PID01503,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            IF        QUICKREG = 1
              PACK      PID01501,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID01501
            ELSE
              MOVE      "PID.15: Language coding system not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
          ELSE
            MATCH     BLANKSTR,PID01503          * null field ?
            IF        @EQUAL
              IF        QUICKREG = 1
                PACK      PID01501,SP100,SP100,SP100,SP100,SP100
                CLEAR     PID01501
              ELSE
                MOVE      "PID.15: Language coding system is mandatory",ERRORDSC
                MOVE      "101",ERRORNUM
                CALL      EROR0000
              ENDIF
            ENDIF
          ENDIF
.
          TYPE      PID01501
          IF        !@EQUAL
            IF        QUICKREG = 1
              PACK      PID01501,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID01501
            ELSE
              MOVE      "PID.15: Preferred Language not numeric",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000 
            ENDIF
            GOTO      VADD0180
          ENDIF
.
.         Check for the first active Cat LA code where the HDP Equiv. matches
.         the value sent
.
          PACK      DIM4,PID01501,SP4
          PACK      KEY5,ANSL,ANSA,SP5
          CALL      RDSCODE1                     * Position on Cat LA
VADD0160  CALL      RDKCODE1                     * read next record
          BRANCH    OVRCD,VADD0170               * end of file
.
          MATCH     "LA",TCODE                   * category LA still ?
          GOTO      VADD0170 IF NOT EQUAL        * no
.
          MATCH     THCSCOD,DIM4                 * same pref. language value ?
          GOTO      VADD0160 IF NOT EQUAL        * no - get next record
.
.         The code exists, so make sure it is active
.
          MATCH     ANSI,PTCOACTV                * inactive ?
          GOTO      VADD0160 IF EQUAL            * yes - ignore record
.
          MOVE      ACODE,PMPXLNG1               * load pref. language code
          GOTO      VADD0180
.
VADD0170  IF        QUICKREG = 1
            PACK      PID01501,SP100,SP100,SP100,SP100,SP100
            CLEAR     PID01501
          ELSE
            MOVE      "PID.15: Preferred Language equivalent code not found",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000 
          ENDIF
.
.         Check if component 4 is populated and if it is, then process
.         this for Interpreter Required (pmpxintr) - valid values 0, 1, or U.
.
VADD0180  SQUEEZE   PID01504
          MOVELPTR  PID01504,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VADD0200 IF EQUAL            * no
.
          MATCH     BLANKSTR,PID01504            * null field ?
          IF        @EQUAL
            MOVE      "U",PMPXINTR               * set int. req'd to "Unknown"
            GOTO      VADD0200
          ENDIF
.
          COMPARE   FORM3,ONE
          IF        @LESS
            IF        QUICKREG = 1
              PACK      PID01504,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID01504
            ELSE
              MOVE      "PID.15: Interpreter Required has too many characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD0200
          ENDIF
.
          REP       "N0n0Y1y1uU",PID01504
.
          MATCH     "0",PID01504                 * "No" field ?
          IF        @EQUAL
            MOVE      "0",PMPXINTR               * set int. req'd to "No"
            GOTO      VADD0200
          ENDIF
.
          MATCH     "1",PID01504                 * "Yes" field ?
          IF        @EQUAL
            MOVE      "1",PMPXINTR               * set int. req'd to "Yes"
            GOTO      VADD0200
          ENDIF
.
          MATCH     "U",PID01504                 * "Unknown" field ?
          IF        @EQUAL
            MOVE      "U",PMPXINTR               * set int. req'd to "Unknown"
            GOTO      VADD0200
          ENDIF
.
          IF        QUICKREG = 1
            PACK      PID01504,SP100,SP100,SP100,SP100,SP100
            CLEAR     PID01504
          ELSE
            MOVE      "PID.15: Interpreter Required not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Validate & load marital status code if populated
.
VADD0200  SQUEEZE   PID01601
          MOVELPTR  PID01601,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VADD0250 IF EQUAL            * no
.
          MATCH     BLANKSTR,PID01601            * null field ?
          IF        @EQUAL
            MOVE      SP3,PMSTAT                 * yes
            GOTO      VADD0250
          ENDIF
.
          COMPARE   ONE,FORM3
          IF        !@EQUAL
            IF        QUICKREG = 1
              PACK      PID01601,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID01601
            ELSE
              MOVE      "PID.16: Marital Status incorrect length",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000 
            ENDIF
            GOTO      VADD0250
          ENDIF
.         
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.         
          STRIP     PID01603
          MOVELPTR  PID01603,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            IF        QUICKREG = 1
              PACK      PID01601,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID01601
            ELSE
              MOVE      "PID.16: Marital status coding system not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000 
            ENDIF
          ELSE
            MATCH     BLANKSTR,PID01603          * null field ?
            IF        @EQUAL
              IF        QUICKREG = 1
                PACK      PID01601,SP100,SP100,SP100,SP100,SP100
                CLEAR     PID01601
              ELSE
                MOVE      "PID.16: Marital status coding system is mandatory",ERRORDSC
                MOVE      "101",ERRORNUM
                CALL      EROR0000
              ENDIF
            ENDIF
          ENDIF
.
.         HL7 Marital Status Codes need to be converted to NHDD codes
.         according to the table below:
.
.         NHDD Value        HL7 Value         Description
.         ----------        ---------         -----------
.           1                   S              Single
.           2                   W              Widowed
.           3                   D              Divorced
.           4                   A (X)          Separated (NZ only value)
.           5                   M              Married
.           6                   U              Unknown
.           7                   P              Partner (NZ only)
.           8                   F              Defacto (NZ only)
.           9                   C              Civil Union (NZ only)
.
          MOVE      PID01601,ANS
          REP       "S1W2D3A4X4M5U6P7F8C9",ANS
.
          TYPE      ANS                          * numeric value ?
          GOTO      VADD0204 IF NOT EQUAL        * no - error
.
          MOVE      ANS,FORM1
          COMPARE   ZERO,FORM1                   * zero ?
          GOTO      VADD0204 IF EQUAL            * yes - error
.
.         For NZ only, values can be 1 through 9
.
          COMPARE   ONE,PTCNNHII
          GOTO      VADD0205 IF EQUAL
.
.         For Australia, values can be 1 through 6
.
          COMPARE   SEVEN,FORM1
          GOTO      VADD0205 IF LESS
.
VADD0204  IF        QUICKREG = 1
            PACK      PID01601,SP100,SP100,SP100,SP100,SP100
            CLEAR     PID01601
          ELSE
            MOVE      "PID.16: Marital Status not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000 
          ENDIF
          GOTO      VADD0250
.
.         Check for the first active Cat M code where Indicator 2 matches
.         the NHDD equivalent value sent
.
VADD0205  PACK      KEY5,ANSM,SP5
          CALL      RDSCODE1                     * Position on Cat M
VADD0210  CALL      RDKCODE1                     * read next record
          BRANCH    OVRCD,VADD0220               * end of file
.
          MATCH     "M ",TCODE                   * category M still ?
          GOTO      VADD0220 IF NOT EQUAL        * no
.
          MATCH     TCINDC2,ANS                  * same marital status value ?
          GOTO      VADD0210 IF NOT EQUAL        * no - get next record
.
.         The indicator matches, so if the value is 5 (married), then
.         this could represent married or defacto for non-NZ sites, so
.         we need to check component 2 (description) to see if it also
.         matches (providing it's populated).
.
          MATCH     "5",ANS                      * "Married" status ?
          GOTO      VADD0215 IF NOT EQUAL        * no - check if active
.
          COMPARE   ONE,PTCNNHII                 * using NHI ?
          GOTO      VADD0215 IF EQUAL            * yes - check if active
.
          MOVELPTR  PID01602,FORM3
          COMPARE   ZERO,FORM3                   * component 2 populated ?
          GOTO      VADD0215 IF EQUAL            * no - check if active
.
          MATCH     PID01602,TDESC               * matching description ?
          GOTO      VADD0210 IF NOT EQUAL        * no - get next record
.
.         Make sure the code is active
.
VADD0215  MATCH     ANSI,PTCOACTV                * inactive ?
          GOTO      VADD0210 IF EQUAL            * yes - ignore record
.
          MOVE      ACODE,PMSTAT                 * load marital status code
          GOTO      VADD0250
.
VADD0220  IF        QUICKREG = 1
            PACK      PID01601,SP100,SP100,SP100,SP100,SP100
            CLEAR     PID01601
          ELSE
            MOVE      "PID.16: Marital Status equivalent code not found",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000 
          ENDIF
.         
.         Validate & load religion code if populated
.
VADD0250  SQUEEZE   PID01701
          MOVELPTR  PID01701,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VADD0300 IF EQUAL            * no
.
          MATCH     BLANKSTR,PID01701            * null field ?
          IF        @EQUAL
            MOVE      SP3,PREG                   * yes
            GOTO      VADD0300
          ENDIF
.
          COMPARE   FORM3,THREE
          IF        @LESS
            IF        QUICKREG = 1
              PACK      PID01701,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID01701
            ELSE
              MOVE      "PID.17: Religion Code has too many characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000 
            ENDIF
            GOTO      VADD0300
          ENDIF
.         
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.         
          STRIP     PID01703
          MOVELPTR  PID01703,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            IF        QUICKREG = 1
              PACK      PID01701,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID01701
            ELSE
              MOVE      "PID.17: Religion coding system not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000 
            ENDIF
          ELSE
            MATCH     BLANKSTR,PID01703          * null field ?
            IF        @EQUAL
              IF        QUICKREG = 1
                PACK      PID01701,SP100,SP100,SP100,SP100,SP100
                CLEAR     PID01701
              ELSE
                MOVE      "PID.17: Religion coding system is mandatory",ERRORDSC
                MOVE      "101",ERRORNUM
                CALL      EROR0000
              ENDIF
            ENDIF
          ENDIF
.
.         Check if code is on file
.
          PACK      KEY5,ANSR,SP1,PID01701,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            IF        QUICKREG = 1
              PACK      PID01701,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID01701
            ELSE
              MOVE      "PID.17: Religion code not on file",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000 
            ENDIF
          ELSE
            PACK      PREG,PID01701,SP3
          ENDIF
.
.         Validate & load birth place code if populated
.         
VADD0300  SQUEEZE   PID02301
          MOVELPTR  PID02301,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VADD0330 IF EQUAL            * no
.
          MATCH     BLANKSTR,PID02301            * null field ?
          IF        @EQUAL
            MOVE      SP3,PCONT                  * yes
            GOTO      VADD0330
          ENDIF
.
.         Country of Birth codes are 4-digit, so validate the value sent
.
          TYPE      PID02301
          IF        !@EQUAL
            IF        QUICKREG = 1
              PACK      PID02301,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID02301
            ELSE
              MOVE      "PID.23: Birth Place not numeric",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000 
            ENDIF
            GOTO      VADD0330
          ENDIF
.
          COMPARE   FOUR,FORM3
          IF        !@EQUAL
            IF        QUICKREG = 1
              PACK      PID02301,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID02301
            ELSE
              MOVE      "PID.23: Birth Place incorrect length",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000 
            ENDIF
            GOTO      VADD0330
          ENDIF
.
.         Check for the first active Cat C code where the HDP Equiv. matches
.         the value sent
.
          PACK      KEY5,ANSC,SP5
          CALL      RDSCODE1                     * Position on Cat C
VADD0310  CALL      RDKCODE1                     * read next record
          BRANCH    OVRCD,VADD0320               * end of file
.
          MATCH     "C ",TCODE                   * category C still ?
          GOTO      VADD0320 IF NOT EQUAL        * no
.
          MATCH     THCSCOD,PID02301             * same birth place value ?
          GOTO      VADD0310 IF NOT EQUAL        * no - get next record
.
.         The code exists, so make sure it is active
.
          MATCH     ANSI,PTCOACTV                * inactive ?
          GOTO      VADD0310 IF EQUAL            * yes - ignore record
.
          MOVE      ACODE,PCONT                  * load country of birth code
          GOTO      VADD0330
.
VADD0320  IF        QUICKREG = 1
            PACK      PID02301,SP100,SP100,SP100,SP100,SP100
            CLEAR     PID02301
          ELSE
            MOVE      "PID.23: Birth Place equivalent code not found",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000 
          ENDIF
.
.         Validate & load Citizenship code if populated
.
VADD0330  MATCH     "1",PTCNRP26
          GOTO      VADD0350 IF NOT EQUAL        * receive PID.26 ?
.
          SQUEEZE   PID02601
          MOVELPTR  PID02601,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VADD0350 IF EQUAL            * no
.
          MATCH     BLANKSTR,PID02601            * null field ?
          IF        @EQUAL
            MOVE      SP3,PTYPE                  * yes
            GOTO      VADD0350
          ENDIF
.
.         Citizenship codes are 1-digit, so validate the value sent
.
          TYPE      PID02601
          IF        !@EQUAL
            IF        QUICKREG = 1
              PACK      PID02601,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID02601
            ELSE
              MOVE      "PID.26: Citizenship not numeric",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD0350
          ENDIF
.
          COMPARE   ONE,FORM3
          IF        !@EQUAL
            IF        QUICKREG = 1
              PACK      PID02601,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID02601
            ELSE
              MOVE      "PID.26: Citizenship incorrect length",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD0350
          ENDIF
.
.         Check for the first active Cat T code where indicator 1 matches
.         the value sent
.
          PACK      KEY5,ANST,SP5
          CALL      RDSCODE1                     * Position on Cat T
VADD0335  CALL      RDKCODE1                     * read next record
          BRANCH    OVRCD,VADD0340               * end of file
.
          MATCH     "T ",TCODE                   * category T still ?
          GOTO      VADD0340 IF NOT EQUAL        * no
.
          MATCH     TCINDC1,PID02601             * same citizenship value ?
          GOTO      VADD0335 IF NOT EQUAL        * no - get next record
.
.         The code exists, so make sure it is active
.
          MATCH     ANSI,PTCOACTV                * inactive ?
          GOTO      VADD0335 IF EQUAL            * yes - ignore record
.
          MOVE      ACODE,PTYPE                  * load citizenship code
          GOTO      VADD0350
.
VADD0340  IF        QUICKREG = 1
            PACK      PID02601,SP100,SP100,SP100,SP100,SP100
            CLEAR     PID02601
          ELSE
            MOVE      "PID.26: Citizenship equivalent code not found",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Validate and load veterans military status (DVA Card Colour)
.
VADD0350  MOVE      SP3,DVCOLOUR                 * initialise DVA card colour
          MOVE      TWO,DVCOLFLG                 * default DVA colour flag
.
          SQUEEZE   PID02701
          MOVELPTR  PID02701,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VADD0400 IF EQUAL            * no
.
          MATCH     BLANKSTR,PID02701            * null field ?
          IF        @EQUAL
            MOVE      ONE,DVCOLFLG               * set DVA Colour flag to null
            GOTO      VADD0400
          ENDIF
.
          IF        FORM3 > 1
            IF        QUICKREG = 1
              PACK      PID02701,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID02701
            ELSE
              MOVE      "PID.27: DVA Card Color incorrect length",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000 
            ENDIF
            GOTO      VADD0400
          ENDIF
.         
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.         
          STRIP     PID02703
          MOVELPTR  PID02703,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            IF        QUICKREG = 1
              PACK      PID02701,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID02701
            ELSE
              MOVE      "PID.27: Military status coding system not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000 
            ENDIF
          ELSE
            MATCH     BLANKSTR,PID02703          * null field ?
            IF        @EQUAL
              IF        QUICKREG = 1
                PACK      PID02701,SP100,SP100,SP100,SP100,SP100
                CLEAR     PID02701
              ELSE
                MOVE      "PID.27: Military status coding system is mandatory",ERRORDSC
                MOVE      "101",ERRORNUM
                CALL      EROR0000
              ENDIF
            ENDIF
          ENDIF
.
          MATCH     ANSG,PID02701                * Gold card ?
          GOTO      VADD0355 IF EQUAL            * yes - valid
.
          MATCH     ANSW,PID02701                * White card ?
          GOTO      VADD0355 IF EQUAL            * yes - valid
.
          IF        QUICKREG = 1
            PACK      PID02701,SP100,SP100,SP100,SP100,SP100
            CLEAR     PID02701
          ELSE
            MOVE      "PID.27: DVA Card Colour not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000 
          ENDIF
          GOTO      VADD0400
.
VADD0355  PACK      KEY5,ANSD,ANSX,SP5
          CALL      RDSCODE1                     * Position on Cat DX
VADD0360  CALL      RDKCODE1                     * read next record
          BRANCH    OVRCD,VADD0370               * end of file
.
          MATCH     "DX",TCODE                   * category DX still ?
          GOTO      VADD0370 IF NOT EQUAL        * no
.
          MATCH     PID02701,THCSCOD             * same dva card colour value ?
          GOTO      VADD0360 IF NOT EQUAL        * no - get next record
.
.         The code exists, so make sure it is active
.
          MATCH     ANSI,PTCOACTV                * inactive ?
          GOTO      VADD0360 IF EQUAL            * yes - ignore record
.
          MOVE      ACODE,DVCOLOUR               * load dva card colour
          MOVE      ZERO,DVCOLFLG                * set DVA colour flag for code
          GOTO      VADD0400
.
VADD0370  IF        QUICKREG = 1
            PACK      PID02701,SP100,SP100,SP100,SP100,SP100
            CLEAR     PID02701
          ELSE
            MOVE      "PID.27: DVA Card colour code not found",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000 
          ENDIF
.
.         Validate & load nationality code if populated
.
VADD0400  SQUEEZE   PID02801
          MOVELPTR  PID02801,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VADD0450 IF EQUAL            * no
.
          MATCH     BLANKSTR,PID02801            * null field ?
          IF        @EQUAL
            MOVE      SP3,PTYPE                  * yes
            GOTO      VADD0450
          ENDIF
.
          IF        FORM3 > 3
            IF        QUICKREG = 1
              PACK      PID02801,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID02801
            ELSE
              MOVE      "PID.28: Nationality has too many characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000 
            ENDIF
            GOTO      VADD0450
          ENDIF
.         
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.         
          STRIP     PID02803
          MOVELPTR  PID02803,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            IF        QUICKREG = 1
              PACK      PID02801,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID02801
            ELSE
              MOVE      "PID.28: Nationality coding system not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000 
            ENDIF
          ELSE
            MATCH     BLANKSTR,PID02803          * null field ?
            IF        @EQUAL
              IF        QUICKREG = 1
                PACK      PID02801,SP100,SP100,SP100,SP100,SP100
                CLEAR     PID02801
              ELSE
                MOVE      "PID.28: Nationality coding system is mandatory",ERRORDSC
                MOVE      "101",ERRORNUM
                CALL      EROR0000
              ENDIF
            ENDIF
          ENDIF
.
.         Check if code is on file
.
          PACK      KEY5,ANST,SP1,PID02801,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            IF        QUICKREG = 1
              PACK      PID02801,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID02801
            ELSE
              MOVE      "PID.28: Nationality code not on file",ERRORDSC
              MOVE      "204",ERRORNUM
              CALL      EROR0000 
            ENDIF
          ELSE
            PACK      PTYPE,PID02801,SP3
          ENDIF
.
.         Validate & load date of death
.
VADD0450  SQUEEZE   PID02901
          MOVELPTR  PID02901,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VADD0500 IF EQUAL            * no
.
          MATCH     BLANKSTR,PID02901            * yes - null field ?
          IF        @EQUAL
            MOVE      SP8,PDECDTE                * yes - clear date of death
            GOTO      VADD0500
          ENDIF
.
.         The field is populated, so validate the date
.
          MOVE      PID02901,DIM14
          MOVE      "PID.29",FIELDID
          MOVE      ONE,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * validate date
          IF        PCEASE = 0
            MOVE      ONE,DEATHFLG               * set flag for DEATHPOL
          ENDIF
          MOVE      PID02901,PDECDTE
.
.         Validate & load deceased flag
.
VADD0500  SQUEEZE   PID03001
          MOVELPTR  PID03001,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VADD0540 IF EQUAL            * no
.
          MATCH     BLANKSTR,PID03001            * yes - null field ?
          IF        @EQUAL
            MOVE      ZERO,PCEASE                * yes - clear death indicator
            GOTO      VADD0540
          ENDIF
.
          COMPARE   ONE,FORM3                    * one character field ?
          GOTO      VADD0510 IF NOT EQUAL        * no - error
.
          MATCH     ANSY,PID03001
          IF        @EQUAL
            MOVE      ONE,PCEASE                 * set as deceased
          ENDIF
.
          MATCH     ANSN,PID03001
          IF        @EQUAL
            MOVE      ZERO,PCEASE                * set as not deceased
          ENDIF
          GOTO      VADD0540
.
.         Invalid deceased flag received.  Either too many characters or
.         not Y/N.
.
VADD0510  IF        QUICKREG = 1
            PACK      PID03001,SP100,SP100,SP100,SP100,SP100
            CLEAR     PID03001
          ELSE
            MOVE      "PID.30: Deceased indicator not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Validate & load Unknown/Estimated Date of Death Flag if populated
.
VADD0540  SQUEEZE   ZXP05901
          MOVELPTR  ZXP05901,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VADD0550 IF EQUAL            * no
.
          IF        FORM3 > 1
            IF        QUICKREG = 1
              PACK      ZXP05901,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP05901
            ELSE
              MOVE      "ZXP.59: Unknown/Estimated Date of Death Flag Y/N has too many characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD0550
          ENDIF
          MATCH     ANSY,ZXP05901
          IF        @EQUAL
            MOVE      ANSY,PTMAUKDD              * yes
          ELSE
            MOVE      ANSN,PTMAUKDD              * no
          ENDIF
.
.         Check if we are using external PMI for death notification
.
VADD0550  MATCH     "1",PTCNEPMI
          GOTO      VADD0560 IF NOT EQUAL
.
          COMPARE   ONE,PCEASE
          GOTO      VADD0560 IF NOT EQUAL        * patient deceased ?
.
          PACK      KEY5,ANSD,ANSY,SP70
          CALL      RDSCODE1
VADD0555  CALL      RDKCODE1                     * find external code (Cat.DY)
          BRANCH    OVRCD,VADD0560
.
          MATCH     "DY",TCODE
          GOTO      VADD0560 IF NOT EQUAL
.
          MATCH     "E",TCINDC12
          GOTO      VADD0555 IF NOT EQUAL        * notified by external system ?
.
          MOVE      ACODE,PMPXDETY               * set as Death Type
.
.         Check that the deceased flag matches the date of death field.
.
VADD0560  MATCH     SP8,PDECDTE                  * blank date of death ?
          IF        @EQUAL
            MATCH     "Y",PTMAUKDD
            GOTO      VADD0600 IF EQUAL
.
            COMPARE   ZERO,PCEASE                * yes
            GOTO      VADD0600 IF EQUAL
          ELSE
            COMPARE   ONE,PCEASE                 * no
            GOTO      VADD0600 IF EQUAL
          ENDIF
          IF        QUICKREG = 1
            PACK      PID02901,SP100,SP100,SP100,SP100,SP100
            CLEAR     PID02901
          ELSE
            MOVE      "PID.29: Date of death doesnt match death indicator",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         DVA Expiry Date
.
VADD0600  SQUEEZE   ZXP00501
          MOVELPTR  ZXP00501,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      SP8,DVEXPIRY
            CLEAR     DVEXPIRY
            MOVE      TWO,DVEXPFLG               * set DVA expiry flag to blank
            GOTO      VADD0650
          ENDIF
.
          MATCH     BLANKSTR,ZXP00501            * null field ?
          IF        @EQUAL
            MOVE      SP8,DVEXPIRY               * yes
            MOVE      ONE,DVEXPFLG               * set DVA expiry flag to null
            GOTO      VADD0650
          ENDIF
.
          MOVE      ZXP00501,DIM14
          MOVE      "ZXP.5 ",FIELDID
          MOVE      ZERO,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
          MOVE      ZXP00501,DVEXPIRY
          MOVE      ZERO,DVEXPFLG                * set DVA expiry flag to valid
.
.         Safety Net Expiry Date
.
VADD0650  SQUEEZE   ZXP00601
          MOVELPTR  ZXP00601,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      SP8,SNEXPIRY
            CLEAR     SNEXPIRY
            GOTO      VADD0700
          ENDIF
.
          MATCH     BLANKSTR,ZXP00601            * null field ?
          IF        @EQUAL
            MOVE      SP8,SNEXPIRY               * yes
            GOTO      VADD0700
          ENDIF
.
          MOVE      ZXP00601,DIM14
          MOVE      "ZXP.6 ",FIELDID
          MOVE      ZERO,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
          MOVE      ZXP00601,SNEXPIRY
.
.         Pension No. Expiry Date
.
VADD0700  SQUEEZE   ZXP00101
          MOVELPTR  ZXP00101,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      SP8,PNEXPIRY
            CLEAR     PNEXPIRY
            GOTO      VADD0750
          ENDIF
.
          MATCH     BLANKSTR,ZXP00101            * null field ?
          IF        @EQUAL
            MOVE      SP8,PNEXPIRY               * yes
            GOTO      VADD0750
          ENDIF
.
          MOVE      ZXP00101,DIM14
          MOVE      "ZXP.1 ",FIELDID
          MOVE      ZERO,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
          MOVE      ZXP00101,PNEXPIRY
.
.         Medicare Expiry Date
.
VADD0750  MOVE      PMPXMEDC,MCEXPIRY            * load current value
.
          SQUEEZE   ZXP00201
          MOVELPTR  ZXP00201,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      VADD0770
          ENDIF
.
          MATCH     BLANKSTR,ZXP00201            * null field ?
          IF        @EQUAL
            MOVE      SP8,MCEXPIRY               * yes
            GOTO      VADD0760
          ENDIF
.
          MOVE      ZXP00201,DIM14
          MOVE      "ZXP.2 ",FIELDID
          MOVE      ZERO,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
          MOVE      ZXP00201,MCEXPIRY
VADD0760  MOVE      MCEXPIRY,PMPXMEDC
.
.         Chemotherapy Expiry Date
.
VADD0770  SQUEEZE   ZXP05701
          MOVELPTR  ZXP05701,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      SP8,CMEXPIRY
            CLEAR     CMEXPIRY
            GOTO      VADD0780
          ENDIF
.
          MATCH     BLANKSTR,ZXP05701            * null field ?
          IF        @EQUAL
            MOVE      SP8,CMEXPIRY               * yes
            GOTO      VADD0780
          ENDIF
.
          MOVE      ZXP05701,DIM14
          MOVE      "ZXP.57",FIELDID
          MOVE      ZERO,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
          MOVE      ZXP05701,CMEXPIRY
.
.         NDIS Expiry Date
.
VADD0780  SQUEEZE   ZXP06001
          MOVELPTR  ZXP06001,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      SP8,NDEXPIRY
            CLEAR     NDEXPIRY
            GOTO      VADD0800
          ENDIF
.
          MATCH     BLANKSTR,ZXP06001            * null field ?
          IF        @EQUAL
            MOVE      SP8,NDEXPIRY               * yes
            GOTO      VADD0800
          ENDIF
.
          MOVE      ZXP06001,DIM14
          MOVE      "ZXP.60",FIELDID
          MOVE      ZERO,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
          MOVE      ZXP06001,NDEXPIRY
.
.         Validate & load death notification code if populated
.
VADD0800  SQUEEZE   ZXP00301
          MOVELPTR  ZXP00301,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VADD0850 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZXP00301            * null field ?
          IF        @EQUAL
            MOVE      SP3,PMPXDETY               * yes
            GOTO      VADD0850
          ENDIF
.
          IF        FORM3 > 3
            IF        QUICKREG = 1
              PACK      ZXP00301,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP00301
            ELSE
              MOVE      "ZXP.3: Death Notification has too many characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000 
            ENDIF
            GOTO      VADD0850
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.         
          STRIP     ZXP00303
          MOVELPTR  ZXP00303,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            IF        QUICKREG = 1
              PACK      ZXP00301,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP00301
            ELSE
              MOVE      "ZXP.3: Death notification coding system not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
          ELSE
            MATCH     BLANKSTR,ZXP00303          * null field ?
            IF        @EQUAL
              IF        QUICKREG = 1
                PACK      ZXP00301,SP100,SP100,SP100,SP100,SP100
                CLEAR     ZXP00301
              ELSE
                MOVE      "ZXP.3: Death notification coding system is mandatory",ERRORDSC
                MOVE      "101",ERRORNUM
                CALL      EROR0000
              ENDIF
            ENDIF
          ENDIF
.
.         Check if code is on file
.
          PACK      KEY5,ANSD,ANSY,ZXP00301,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            IF        QUICKREG = 1
              PACK      ZXP00301,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP00301
            ELSE
              MOVE      "ZXP.3: Death notification code not on file",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000 
            ENDIF
          ELSE
            PACK      PMPXDETY,ZXP00301,SP3
          ENDIF
.
.         Validate & load privacy indicator code if populated
.
VADD0850  SQUEEZE   ZXP00401
          MOVELPTR  ZXP00401,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VADD0900 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZXP00401            * null field ?
          IF        @EQUAL
            MOVE      SP3,PMPXPRVI               * yes
            GOTO      VADD0900
          ENDIF
.
          IF        FORM3 > 3
            IF        QUICKREG = 1
              PACK      ZXP00401,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP00401
            ELSE
              MOVE      "ZXP.4: Privacy Indicator has too many characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000 
            ENDIF
            GOTO      VADD0900
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.         
          STRIP     ZXP00403
          MOVELPTR  ZXP00403,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            IF        QUICKREG = 1
              PACK      ZXP00401,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP00401
            ELSE
              MOVE      "ZXP.4: Privacy coding system not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
          ELSE
            MATCH     BLANKSTR,ZXP00403          * null field ?
            IF        @EQUAL
              IF        QUICKREG = 1
                PACK      ZXP00401,SP100,SP100,SP100,SP100,SP100
                CLEAR     ZXP00401
              ELSE
                MOVE      "ZXP.4: Privacy coding system is mandatory",ERRORDSC
                MOVE      "101",ERRORNUM
                CALL      EROR0000
              ENDIF
            ENDIF
          ENDIF
.
.         Check if code is on file
.
          PACK      KEY5,ANSP,ANSV,ZXP00401,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            IF        QUICKREG = 1
              PACK      ZXP00401,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP00401
            ELSE
              MOVE      "ZXP.4: Privacy Indicator code not on file",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000 
            ENDIF
          ELSE
            PACK      PMPXPRVI,ZXP00401,SP3
          ENDIF
.
.         Validate and load Home Phone Number
.         The valid (parameter based) formats received are as follows:
.
.         ^^^^^^^^<home phone>    
.         OR
.         ^^CP^^^^<cell phone>
.         ^PRN^PH^<email address>^^^<home phone>
.
.         The following logic is based on whether or not component 3
.         is populated and if so, what it is populated with (CP, PH or blank).
.
VADD0900  MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 3
.
.           Check Component 3 first to see if it is populated
.
            STRIP     PID01303[COUNTER]          * remove trailing spaces
            MOVELPTR  PID01303[COUNTER],FORM3    * field populated ?
            IF        FORM3 = 0
              GOTO      VADD0940                 * no - check component 9
            ENDIF
.
            MATCH     BLANKSTR,PID01303[COUNTER] * null field ?
            GOTO      VADD0940 IF EQUAL          * yes - check component 9
.
.           Component 3 is populated, so it should be either "CP" or "PH"
.
            IF        FORM3 <> 2
              IF        QUICKREG = 1
                PACK      PID01303[COUNTER],SP100,SP100,SP100,SP100,SP100
                CLEAR     PID01303[COUNTER]
              ELSE
                MOVE      "PID.13: Component 3 incorrect length",ERRORDSC
                MOVE      "207",ERRORNUM
                CALL      EROR0000
              ENDIF
              GOTO      VADD0950
            ENDIF
.
            MATCH     "CP",PID01303[COUNTER]     * cell phone ?
            GOTO      VADD0910 IF EQUAL          * yes
.
            MATCH     "PH",PID01303[COUNTER]     * home phone ?
            GOTO      VADD0920 IF EQUAL          * yes
.
            IF        QUICKREG = 1
              PACK      PID01303[COUNTER],SP100,SP100,SP100,SP100,SP100
              CLEAR     PID01303[COUNTER]
            ELSE
              MOVE      "PID.13: Component 3 not valid",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD0950
.
.           We have a cell phone number, so check Component 7
.
VADD0910    STRIP     PID01307[COUNTER]          * remove trailing spaces
            MOVELPTR  PID01307[COUNTER],FORM3    * field populated ?
            IF        FORM3 = 0
              GOTO      VADD0950
            ENDIF
.
            MATCH     BLANKSTR,PID01307[COUNTER] * null field ?
            IF        @EQUAL
              MOVE      SP20,PTMXCELL            * yes - clear cell phone
              GOTO      VADD0950
            ENDIF
.
            PACK      PTMXCELL,PID01307[COUNTER],SP20
            GOTO      VADD0950
.
.           We have a home phone number, and email address, so first check
.           that component 2 is "PRN"
.
VADD0920    STRIP     PID01302[COUNTER]          * remove trailing spaces
            MOVELPTR  PID01302[COUNTER],FORM3    * field populated ?
            IF        FORM3 = 0
              IF        QUICKREG = 1
                PACK      PID01302[COUNTER],SP100,SP100,SP100,SP100,SP100
                CLEAR     PID01302[COUNTER]
              ELSE
                MOVE      "PID.13: Component 2 not populated",ERRORDSC
                MOVE      "101",ERRORNUM
                CALL      EROR0000
              ENDIF
              GOTO      VADD0950                 * no - finished
            ENDIF
.
            MATCH     BLANKSTR,PID01302[COUNTER] * null field ?
            IF        @EQUAL
              IF        QUICKREG = 1
                PACK      PID01302[COUNTER],SP100,SP100,SP100,SP100,SP100
                CLEAR     PID01302[COUNTER]
              ELSE
                MOVE      "PID.13: Component 2 is mandatory",ERRORDSC
                MOVE      "101",ERRORNUM
                CALL      EROR0000
              ENDIF
              GOTO      VADD0950                 * no - finished
            ENDIF
.
.           Component 2 is populated, so it should be "PRN"
.
            IF        FORM3 <> 3
              IF        QUICKREG = 1
                PACK      PID01302[COUNTER],SP100,SP100,SP100,SP100,SP100
                CLEAR     PID01302[COUNTER]
              ELSE
                MOVE      "PID.13: Component 2 incorrect length",ERRORDSC
                MOVE      "207",ERRORNUM
                CALL      EROR0000
              ENDIF
              GOTO      VADD0950
            ENDIF
.
            MATCH     "PRN",PID01302[COUNTER]    * business phone ?
            GOTO      VADD0925 IF EQUAL          * yes
.
            IF        QUICKREG = 1
              PACK      PID01302[COUNTER],SP100,SP100,SP100,SP100,SP100
              CLEAR     PID01302[COUNTER]
            ELSE
              MOVE      "PID.13: Component 2 not valid",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD0950
.
.           Now check Component 4 for an email address
.
VADD0925    STRIP     PID01304[COUNTER]          * remove trailing spaces
            MOVELPTR  PID01304[COUNTER],FORM3    * field populated ?
            IF        FORM3 = 0
              GOTO      VADD0930                 * no - finished
            ENDIF
.
            MATCH     BLANKSTR,PID01304[COUNTER] * null field ?
            IF        @EQUAL
              MOVE      SP100,PMPXPEML           * yes - clear email address
              GOTO      VADD0930
            ENDIF
.
            PACK      PMPXPEML,PID01304[COUNTER],SP100
.
.           Now check Component 7 for a home phone number
.
VADD0930    STRIP     PID01307[COUNTER]          * remove trailing spaces
            MOVELPTR  PID01307[COUNTER],FORM3    * field populated ?
            IF        FORM3 = 0
              GOTO      VADD0950                 * no - finished
            ENDIF
.
            MATCH     BLANKSTR,PID01307[COUNTER] * null field ?
            IF        @EQUAL
              MOVE      SP20,PTELEP              * yes - clear home phone
              GOTO      VADD0950
            ENDIF
.
            PACK      PTELEP,PID01307[COUNTER],SP20
            GOTO      VADD0950
.
.           Check Component 9 to see if it is populated
.
VADD0940    STRIP     PID01309[COUNTER]          * remove trailing spaces
            MOVELPTR  PID01309[COUNTER],FORM3    * field populated ?
            IF        FORM3 = 0
              GOTO      VADD0950                 * no - finished
            ENDIF
.
            MATCH     BLANKSTR,PID01309[COUNTER] * null field ?
            IF        @EQUAL
              MOVE      SP20,PTELEP
              GOTO      VADD0950
            ENDIF
.
            PACK      PTELEP,PID01309[COUNTER],SP20
.
VADD0950    ADD       ONE,COUNTER                * increment counter
          DO
.
.         Validate and load Business Phone Number
.         The valid (parameter based) formats received are as follows:
.
.         ^^^^^^^^<home phone>
.         OR
.         ^WPN^PH^^^^<home phone>
.
.         The following logic is based on whether or not component 3
.         is populated and if so, what it is populated with (PH or blank).
.
VADD1000  MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 3
.
.           Check Component 3 first to see if it is populated
.
            STRIP     PID01403[COUNTER]          * remove trailing spaces
            MOVELPTR  PID01403[COUNTER],FORM3    * field populated ?
            IF        FORM3 = 0
              GOTO      VADD1040                 * no - check component 9
            ENDIF
.
            MATCH     BLANKSTR,PID01403[COUNTER] * null field ?
            GOTO      VADD1040 IF EQUAL          * yes - check component 9
.
.           Component 3 is populated, so it should be "PH"
.
            IF        FORM3 <> 2
              IF        QUICKREG = 1
                PACK      PID01403[COUNTER],SP100,SP100,SP100,SP100,SP100
                CLEAR     PID01403[COUNTER]
              ELSE
                MOVE      "PID.14: Component 3 incorrect length",ERRORDSC
                MOVE      "207",ERRORNUM
                CALL      EROR0000
              ENDIF
              GOTO      VADD1050
            ENDIF
.
            MATCH     "PH",PID01403[COUNTER]     * business phone ?
            GOTO      VADD1020 IF EQUAL          * yes
.
            IF        QUICKREG = 1
              PACK      PID01403[COUNTER],SP100,SP100,SP100,SP100,SP100
              CLEAR     PID01403[COUNTER]
            ELSE
              MOVE      "PID.14: Component 3 not valid",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD1050
.
.           We have a business phone number, so first check that component 2
.           is "WPN"
.
VADD1020    STRIP     PID01402[COUNTER]          * remove trailing spaces
            MOVELPTR  PID01402[COUNTER],FORM3    * field populated ?
            IF        FORM3 = 0
              IF        QUICKREG = 1
                PACK      PID01402[COUNTER],SP100,SP100,SP100,SP100,SP100
                CLEAR     PID01402[COUNTER]
              ELSE
                MOVE      "PID.14: Component 2 not populated",ERRORDSC
                MOVE      "101",ERRORNUM
                CALL      EROR0000
              ENDIF
              GOTO      VADD1050                 * no - finished
            ENDIF
.
            MATCH     BLANKSTR,PID01402[COUNTER] * null field ?
            IF        @EQUAL
              IF        QUICKREG = 1
                PACK      PID01402[COUNTER],SP100,SP100,SP100,SP100,SP100
                CLEAR     PID01402[COUNTER]
              ELSE
                MOVE      "PID.14: Component 2 is mandatory",ERRORDSC
                MOVE      "101",ERRORNUM
                CALL      EROR0000
              ENDIF
              GOTO      VADD1050                 * no - finished
            ENDIF
.
.           Component 2 is populated, so it should be "PRN"
.
            IF        FORM3 <> 3
              IF        QUICKREG = 1
                PACK      PID01402[COUNTER],SP100,SP100,SP100,SP100,SP100
                CLEAR     PID01402[COUNTER]
              ELSE
                MOVE      "PID.14: Component 2 incorrect length",ERRORDSC
                MOVE      "207",ERRORNUM
                CALL      EROR0000
              ENDIF
              GOTO      VADD1050
            ENDIF
.
            MATCH     "WPN",PID01402[COUNTER]    * business phone ?
            GOTO      VADD1025 IF EQUAL          * yes
.
            IF        QUICKREG = 1
              PACK      PID01402[COUNTER],SP100,SP100,SP100,SP100,SP100
              CLEAR     PID01402[COUNTER]
            ELSE
              MOVE      "PID.14: Component 2 not valid",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD1050
.
.           We have a business phone number, so check Component 7
.
VADD1025    STRIP     PID01407[COUNTER]          * remove trailing spaces
            MOVELPTR  PID01407[COUNTER],FORM3    * field populated ?
            IF        FORM3 = 0
              GOTO      VADD1050                 * no - finished
            ENDIF
.
            MATCH     BLANKSTR,PID01407[COUNTER] * null field ?
            IF        @EQUAL
              MOVE      SP20,PTELEB              * yes - clear business phone
              GOTO      VADD1050
            ENDIF
.
            PACK      PTELEB,PID01407[COUNTER],SP20
            GOTO      VADD1050
.
.           Check Component 9 to see if it is populated
.
VADD1040    STRIP     PID01409[COUNTER]          * remove trailing spaces
            MOVELPTR  PID01409[COUNTER],FORM3    * field populated ?
            IF        FORM3 = 0
              GOTO      VADD1050                 * no - finished
            ENDIF
.
            MATCH     BLANKSTR,PID01409[COUNTER] * null field ?
            IF        @EQUAL
              MOVE      SP20,PTELEB
              GOTO      VADD1050
            ENDIF
.
            PACK      PTELEB,PID01409[COUNTER],SP20
.
VADD1050    ADD       ONE,COUNTER                * increment counter
          DO
.
.         Validate & load Local GP if populated
.
          SQUEEZE   ZXP00701
          MOVELPTR  ZXP00701,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VADD1060 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZXP00701            * null field ?
          IF        @EQUAL
            MOVE      SP10,PMPXRHC1              * yes
            GOTO      VADD1060
          ENDIF
.
          IF        FORM3 > 10
            IF        QUICKREG = 1
              PACK      ZXP00701,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP00701
            ELSE
              MOVE      "ZXP.7: Local GP has too many characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000 
            ENDIF
            GOTO      VADD1060
          ENDIF
.
.         Check if code is on HCP file
.
          PACK      KEY10,ZXP00701,SP10
          CALL      RDPMHCP1
          IF        OVRCD = 1
            IF        QUICKREG = 1
              PACK      ZXP00701,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP00701
            ELSE
              MOVE      "ZXP.7: Local GP code not valid",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000 
            ENDIF
          ELSE
            PACK      PMPXRHC1,ZXP00701,SP10
          ENDIF
.
.         Validate & load Folder Selection code if populated
.
VADD1060  SQUEEZE   ZXP06101
          MOVELPTR  ZXP06101,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VADD1070 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZXP06101            * null field ?
          IF        @EQUAL
            MOVE      SP3,PMPXFLDR               * yes
            GOTO      VADD1070
          ENDIF
.
          IF        FORM3 > 3
            IF        QUICKREG = 1
              PACK      ZXP06101,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP06101
            ELSE
              MOVE      "ZXP.61: Folder Selection has too many characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD1070
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.
          STRIP     ZXP06103
          MOVELPTR  ZXP06103,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            IF        QUICKREG = 1
              PACK      ZXP06101,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP06101
            ELSE
              MOVE      "ZXP.61: Folder Selection coding system not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
          ELSE
            MATCH     BLANKSTR,ZXP06103          * null field ?
            IF        @EQUAL
              IF        QUICKREG = 1
                PACK      ZXP06101,SP100,SP100,SP100,SP100,SP100
                CLEAR     ZXP06101
              ELSE
                MOVE      "ZXP.61: Folder Selection coding system is mandatory",ERRORDSC
                MOVE      "101",ERRORNUM
                CALL      EROR0000
              ENDIF
            ENDIF
          ENDIF
.
.         Check if code is on file
.
          PACK      KEY5,ANSF,ANSS,ZXP06101,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            IF        QUICKREG = 1
              PACK      ZXP06101,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP06101
            ELSE
              MOVE      "ZXP.61: Folder Selection code not on file",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
            ENDIF
          ELSE
            PACK      PMPXFLDR,ZXP06101,SP3
          ENDIF
.
.         Validate & load PMI User Defined Y/N Field 2 if populated
.
VADD1070  SQUEEZE   ZXP06201
          MOVELPTR  ZXP06201,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VADD1080 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZXP06201            * null field ?
          IF        @EQUAL
            MOVE      ZERO,PUYN2                 * remove value
            GOTO      VADD1080
          ENDIF
.
          IF        FORM3 > 1
            IF        QUICKREG = 1
              PACK      ZXP06201,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP06201
            ELSE
              MOVE      "ZXP.62: PMI User Defined Y/N Field 2 has too many characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD1080
          ENDIF
          MATCH     ANSY,ZXP06201
          IF        @EQUAL
            MOVE      TWO,PUYN2                  * yes
            GOTO      VADD1080
          ENDIF
          MATCH     ANSN,ZXP06201
          IF        @EQUAL
            MOVE      ONE,PUYN2                 * no
            GOTO      VADD1080
          ENDIF
.
          MOVE      "ZXP.62: PMI User Defined Y/N Field 2 must be Y or N",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
.
.         PID.24 - Multiple Birth indicator (PID.25 must also be valid)
.
VADD1080  SQUEEZE   PID02401
          MOVELPTR  PID02401,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VADD1090 IF EQUAL            * no
.
          MATCH     ANSN,PID02401
          GOTO      VADD1090 IF EQUAL            * no is valid
.
          MATCH     ANSY,PID02401
          GOTO      VADD1090 IF EQUAL            * yes is valid
.
          IF        QUICKREG = 1
            PACK      PID02401,SP100,SP100,SP100,SP100,SP100
            CLEAR     PID02401
            PACK      PID02501,SP100,SP100,SP100,SP100,SP100
            CLEAR     PID02501
            GOTO      VADD1100
          ELSE
            MOVE      "PID.24: Multiple Birth indicator must be Y or N",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         PID.25 - Birth Order (PID.24 must also be valid)
.
VADD1090  SQUEEZE   PID02501
          MOVELPTR  PID02501,FORM3
          IF        FORM3 = 0
            MATCH     ANSY,PID02401
            IF        @EQUAL
              PACK      PID02401,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID02401
              PACK      PID02501,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID02501
            ENDIF
            GOTO      VADD1100                   * field not populated
          ENDIF
.
          IF        FORM3 > 1
            IF        QUICKREG = 1
              PACK      PID02401,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID02401
              PACK      PID02501,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID02501
            ELSE
              MOVE      "PID.25: Birth Order has too many characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD1100
          ENDIF
.
          TYPE      PID02501
          IF        !@EQUAL
            IF        QUICKREG = 1
              PACK      PID02401,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID02401
              PACK      PID02501,SP100,SP100,SP100,SP100,SP100
              CLEAR     PID02501
            ELSE
              MOVE      "PID.25: Birth Order not numeric",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD1100
          ENDIF
.
.         Validate & load PMI User Defined Field 1 if populated
.
VADD1100  SQUEEZE   ZXP06401
          MOVELPTR  ZXP06401,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VADD1200 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZXP06401            * null field ?
          IF        @EQUAL
            MOVE      SP3,PUSR1                  * yes
            GOTO      VADD1200
          ENDIF
.
          IF        FORM3 > 3
            IF        QUICKREG = 1
              PACK      ZXP06401,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP06401
            ELSE
              MOVE      "ZXP.64: PMI User Defined Field 1 component 1 has too many characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD1200
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.
          STRIP     ZXP06403
          MOVELPTR  ZXP06403,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            IF        QUICKREG = 1
              PACK      ZXP06401,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP06401
            ELSE
              MOVE      "ZXP.64: PMI User Defined Field 1 component 3 is not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD1200
          ELSE
            MATCH     BLANKSTR,ZXP06403          * null field ?
            IF        @EQUAL
              IF        QUICKREG = 1
                PACK      ZXP06401,SP100,SP100,SP100,SP100,SP100
                CLEAR     ZXP06401
              ELSE
                MOVE      "ZXP.64: PMI User Defined Field 1 component 3 is mandatory",ERRORDSC
                MOVE      "101",ERRORNUM
                CALL      EROR0000
              ENDIF
              GOTO      VADD1200
            ENDIF
          ENDIF
.
.         Check if code is on file
.
          PACK      KEY5,ANSP,ONE,ZXP06401,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            IF        QUICKREG = 1
              PACK      ZXP06401,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP06401
            ELSE
              MOVE      "ZXP.64: PMI User Defined Field 1 not on patcodes file",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD1200
          ELSE
            PACK      PUSR1,ZXP06401,SP3         * code is valid
          ENDIF
.
.         Validate & load PMI User Defined Field 2 if populated
.
VADD1200  SQUEEZE   ZXP06501
          MOVELPTR  ZXP06501,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VADD1300 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZXP06501            * null field ?
          IF        @EQUAL
            MOVE      SP3,PUSR2                  * yes
            GOTO      VADD1300
          ENDIF
.
          IF        FORM3 > 3
            IF        QUICKREG = 1
              PACK      ZXP06501,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP06501
            ELSE
              MOVE      "ZXP.65: PMI User Defined Field 2 component 1 has too many characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD1300
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.
          STRIP     ZXP06503
          MOVELPTR  ZXP06503,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            IF        QUICKREG = 1
              PACK      ZXP06501,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP06501
            ELSE
              MOVE      "ZXP.65: PMI User Defined Field 2 component 3 is not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD1300
          ELSE
            MATCH     BLANKSTR,ZXP06503          * null field ?
            IF        @EQUAL
              IF        QUICKREG = 1
                PACK      ZXP06501,SP100,SP100,SP100,SP100,SP100
                CLEAR     ZXP06501
              ELSE
                MOVE      "ZXP.65: PMI User Defined Field 2 component 3 is mandatory",ERRORDSC
                MOVE      "101",ERRORNUM
                CALL      EROR0000
              ENDIF
              GOTO      VADD1300
            ENDIF
          ENDIF
.
.         Check if code is on file
.
          PACK      KEY5,ANSP,TWO,ZXP06501,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            IF        QUICKREG = 1
              PACK      ZXP06501,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP06501
            ELSE
              MOVE      "ZXP.65: PMI User Defined Field 2 not on patcodes file",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD1300
          ELSE
            PACK      PUSR2,ZXP06501,SP3         * code is valid
          ENDIF
.
.         Validate & load PMI User Defined Field 3 if populated
.
VADD1300  SQUEEZE   ZXP06601
          MOVELPTR  ZXP06601,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VADD1400 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZXP06601            * null field ?
          IF        @EQUAL
            MOVE      SP3,PUSR3                  * yes
            GOTO      VADD1400
          ENDIF
.
          IF        FORM3 > 3
            IF        QUICKREG = 1
              PACK      ZXP06601,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP06601
            ELSE
              MOVE      "ZXP.66: PMI User Defined Field 3 component 1 has too many characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD1400
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.
          STRIP     ZXP06603
          MOVELPTR  ZXP06603,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            IF        QUICKREG = 1
              PACK      ZXP06601,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP06601
            ELSE
              MOVE      "ZXP.66: PMI User Defined Field 3 component 3 is not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD1400
          ELSE
            MATCH     BLANKSTR,ZXP06603          * null field ?
            IF        @EQUAL
              IF        QUICKREG = 1
                PACK      ZXP06601,SP100,SP100,SP100,SP100,SP100
                CLEAR     ZXP06601
              ELSE
                MOVE      "ZXP.66: PMI User Defined Field 3 component 3 is mandatory",ERRORDSC
                MOVE      "101",ERRORNUM
                CALL      EROR0000
              ENDIF
              GOTO      VADD1400
            ENDIF
          ENDIF
.
.         Check if code is on file
.
          PACK      KEY5,ANSP,THREE,ZXP06601,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            IF        QUICKREG = 1
              PACK      ZXP06601,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP06601
            ELSE
              MOVE      "ZXP.66: PMI User Defined Field 3 not on patcodes file",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD1400
          ELSE
            PACK      PUSR3,ZXP06601,SP3         * code is valid
          ENDIF
.
.         Validate & load PMI User Defined Field 4 if populated
.
VADD1400  SQUEEZE   ZXP06701
          MOVELPTR  ZXP06701,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VADD1500 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZXP06701            * null field ?
          IF        @EQUAL
            MOVE      SP3,PUSR4                  * yes
            GOTO      VADD1500
          ENDIF
.
          IF        FORM3 > 3
            IF        QUICKREG = 1
              PACK      ZXP06701,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP06701
            ELSE
              MOVE      "ZXP.67: PMI User Defined Field 4 component 1 has too many characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD1500
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.
          STRIP     ZXP06703
          MOVELPTR  ZXP06703,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            IF        QUICKREG = 1
              PACK      ZXP06701,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP06701
            ELSE
              MOVE      "ZXP.67: PMI User Defined Field 4 component 3 is not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD1500
          ELSE
            MATCH     BLANKSTR,ZXP06703          * null field ?
            IF        @EQUAL
              IF        QUICKREG = 1
                PACK      ZXP06701,SP100,SP100,SP100,SP100,SP100
                CLEAR     ZXP06701
              ELSE
                MOVE      "ZXP.67: PMI User Defined Field 4 component 3 is mandatory",ERRORDSC
                MOVE      "101",ERRORNUM
                CALL      EROR0000
              ENDIF
              GOTO      VADD1500
            ENDIF
          ENDIF
.
.         Check if code is on file
.
          PACK      KEY5,ANSP,FOUR,ZXP06701,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            IF        QUICKREG = 1
              PACK      ZXP06701,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP06701
            ELSE
              MOVE      "ZXP.67: PMI User Defined Field 4 not on patcodes file",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD1500
          ELSE
            PACK      PUSR4,ZXP06701,SP3         * code is valid
          ENDIF
.
.         -----------------------------------------------------
.         Validate & load PMI User Defined Field 5 if populated
.         -----------------------------------------------------
VADD1500  SQUEEZE   ZXP06801
          MOVELPTR  ZXP06801,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VADD1600 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZXP06801            * null field ?
          IF        @EQUAL
            MOVE      SP3,PUSR5                  * yes
            GOTO      VADD1600
          ENDIF
.
          IF        FORM3 > 3
            IF        QUICKREG = 1
              PACK      ZXP06801,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP06801
            ELSE
              MOVE      "ZXP.68: PMI User Defined Field 5 component 1 has too many characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD1600
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.
          STRIP     ZXP06803
          MOVELPTR  ZXP06803,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            IF        QUICKREG = 1
              PACK      ZXP06801,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP06801
            ELSE
              MOVE      "ZXP.68: PMI User Defined Field 5 component 3 is not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD1600
          ELSE
            MATCH     BLANKSTR,ZXP06803          * null field ?
            IF        @EQUAL
              IF        QUICKREG = 1
                PACK      ZXP06801,SP100,SP100,SP100,SP100,SP100
                CLEAR     ZXP06801
              ELSE
                MOVE      "ZXP.68: PMI User Defined Field 5 component 3 is mandatory",ERRORDSC
                MOVE      "101",ERRORNUM
                CALL      EROR0000
              ENDIF
              GOTO      VADD1600
            ENDIF
          ENDIF
.
.         Check if code is on file
.
          PACK      KEY5,ANSP,FIVE,ZXP06801,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            IF        QUICKREG = 1
              PACK      ZXP06801,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP06801
            ELSE
              MOVE      "ZXP.68: PMI User Defined Field 5 not on patcodes file",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD1600
          ELSE
            PACK      PUSR5,ZXP06801,SP3         * code is valid
          ENDIF
.
.         ---------------------------------------------------------
.         Validate & load Mutliple Birth Type of Birth if populated
.         ---------------------------------------------------------
VADD1600  SQUEEZE   ZXP06901
          MOVELPTR  ZXP06901,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VADD1650 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZXP06901            * null field ?
          IF        @EQUAL
            MOVE      SP3,ZXP06901               * yes
            GOTO      VADD1650
          ENDIF
.
          MOVE      "mX",D2
          PACK      KEY5,D2,ZXP06901,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            IF        QUICKREG = 1
              PACK      ZXP06901,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP06901
            ELSE
              MOVE      "ZXP.69: Mutliple Birth Type of Birth not on patcodes file",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD1700
          ELSE
            MOVE      ACODE,ZXP06901             * code is valid
          ENDIF
          GOTO      VADD1700
.
VADD1650  MATCH     ANSY,PID02401
          GOTO      VADD1700 IF NOT EQUAL        * mandatory if PID.24 = Y
.
          IF        QUICKREG = 1
            PACK      ZXP06901,SP100,SP100,SP100,SP100,SP100
            CLEAR     ZXP06901
          ELSE
            MOVE      "ZXP.69: Mutliple Birth Type of Birth is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         ---------------------------------------------------
.         Validate & load PMI Identifying Gender if populated
.         ---------------------------------------------------
VADD1700  SQUEEZE   ZXP07001
          MOVELPTR  ZXP07001,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VADD1800 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZXP07001            * null field ?
          IF        @EQUAL
            MOVE      SP3,PMPXUCC4               * yes
            GOTO      VADD1800
          ENDIF
.
          IF        FORM3 > 3
            IF        QUICKREG = 1
              PACK      ZXP07001,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP07001
            ELSE
              MOVE      "ZXP.70: PMI Identifying Gender component 1 has too many characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD1800
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.
          STRIP     ZXP07003
          MOVELPTR  ZXP07003,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            IF        QUICKREG = 1
              PACK      ZXP07001,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP07001
            ELSE
              MOVE      "ZXP.70: PMI Identifying Gender component 3 is not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD1800
          ELSE
            MATCH     BLANKSTR,ZXP07003          * null field ?
            IF        @EQUAL
              IF        QUICKREG = 1
                PACK      ZXP07001,SP100,SP100,SP100,SP100,SP100
                CLEAR     ZXP07001
              ELSE
                MOVE      "ZXP.70: PMI Identifying Gender component 3 is mandatory",ERRORDSC
                MOVE      "101",ERRORNUM
                CALL      EROR0000
              ENDIF
              GOTO      VADD1800
            ENDIF
          ENDIF
.
.         Check if code is on file
.
          MOVE      "Gi",D2
          PACK      KEY5,D2,ZXP07001,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            IF        QUICKREG = 1
              PACK      ZXP07001,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP07001
            ELSE
              MOVE      "ZXP.70: PMI Identifying Gender not on patcodes file",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD1800
          ELSE
            PACK      PMPXUCC4,ZXP07001,SP3      * code is valid
          ENDIF
.
.         ----------------------------------------------------
.         Validate & load PMI Identifying Pronoun if populated
.         ----------------------------------------------------
VADD1800  SQUEEZE   ZXP07101
          MOVELPTR  ZXP07101,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VADD1900 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZXP07101            * null field ?
          IF        @EQUAL
            MOVE      SP3,PMPXUCC5               * yes
            GOTO      VADD1900
          ENDIF
.
          IF        FORM3 > 3
            IF        QUICKREG = 1
              PACK      ZXP07101,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP07101
            ELSE
              MOVE      "ZXP.71: PMI Identifying Pronoun component 1 has too many characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD1900
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.
          STRIP     ZXP07103
          MOVELPTR  ZXP07103,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            IF        QUICKREG = 1
              PACK      ZXP07101,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP07101
            ELSE
              MOVE      "ZXP.71: PMI Identifying Pronoun component 3 is not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD1900
          ELSE
            MATCH     BLANKSTR,ZXP07103          * null field ?
            IF        @EQUAL
              IF        QUICKREG = 1
                PACK      ZXP07101,SP100,SP100,SP100,SP100,SP100
                CLEAR     ZXP07101
              ELSE
                MOVE      "ZXP.71: PMI Identifying Pronoun component 3 is mandatory",ERRORDSC
                MOVE      "101",ERRORNUM
                CALL      EROR0000
              ENDIF
              GOTO      VADD1900
            ENDIF
          ENDIF
.
.         Check if code is on file
.
          MOVE      "Gp",D2
          PACK      KEY5,D2,ZXP07101,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            IF        QUICKREG = 1
              PACK      ZXP07101,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP07101
            ELSE
              MOVE      "ZXP.71: PMI Identifying Pronoun not on patcodes file",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD1900
          ELSE
            PACK      PMPXUCC5,ZXP07101,SP3      * code is valid
          ENDIF
.
.         ----------------------------------------------------
.         Validate & load PMI Ancestry / Ethnicity 1 if populated
.         ----------------------------------------------------
VADD1900  SQUEEZE   ZXP07201
          MOVELPTR  ZXP07201,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VADD2000 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZXP07201            * null field ?
          IF        @EQUAL
            MOVE      SP3,PMPXETH1               * yes
            GOTO      VADD2000
          ENDIF
.
          IF        FORM3 > 3
            IF        QUICKREG = 1
              PACK      ZXP07201,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP07201
            ELSE
              MOVE      "ZXP.72: PMI Ancestry / Ethnicity 1 component 1 has too many characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD2000
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.
          STRIP     ZXP07203
          MOVELPTR  ZXP07203,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            IF        QUICKREG = 1
              PACK      ZXP07201,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP07201
            ELSE
              MOVE      "ZXP.72: PMI Ancestry / Ethnicity 1 component 3 is not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD2000
          ELSE
            MATCH     BLANKSTR,ZXP07203          * null field ?
            IF        @EQUAL
              IF        QUICKREG = 1
                PACK      ZXP07201,SP100,SP100,SP100,SP100,SP100
                CLEAR     ZXP07201
              ELSE
                MOVE      "ZXP.72: PMI Ancestry / Ethnicity 1 component 3 is mandatory",ERRORDSC
                MOVE      "101",ERRORNUM
                CALL      EROR0000
              ENDIF
              GOTO      VADD2000
            ENDIF
          ENDIF
.
.         Check if code is on file
.
          MOVE      "EN",D2
          PACK      KEY5,D2,ZXP07201,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            IF        QUICKREG = 1
              PACK      ZXP07201,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP07201
            ELSE
              MOVE      "ZXP.72: PMI Ancestry / Ethnicity 1 not on patcodes file",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD2000
          ELSE
            PACK      PMPXETH1,ZXP07201,SP3      * code is valid
          ENDIF
.
.         ----------------------------------------------------
.         Validate & load PMI Ancestry / Ethnicity 2 if populated
.         ----------------------------------------------------
VADD2000  SQUEEZE   ZXP07301
          MOVELPTR  ZXP07301,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VADD2100 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZXP07301            * null field ?
          IF        @EQUAL
            MOVE      SP3,PMPXETH2               * yes
            GOTO      VADD2100
          ENDIF
.
          IF        FORM3 > 3
            IF        QUICKREG = 1
              PACK      ZXP07301,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP07301
            ELSE
              MOVE      "ZXP.73: PMI Ancestry / Ethnicity 2 component 1 has too many characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD2100
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.
          STRIP     ZXP07303
          MOVELPTR  ZXP07303,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            IF        QUICKREG = 1
              PACK      ZXP07301,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP07301
            ELSE
              MOVE      "ZXP.73: PMI Ancestry / Ethnicity 2 component 3 is not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD2100
          ELSE
            MATCH     BLANKSTR,ZXP07303          * null field ?
            IF        @EQUAL
              IF        QUICKREG = 1
                PACK      ZXP07301,SP100,SP100,SP100,SP100,SP100
                CLEAR     ZXP07301
              ELSE
                MOVE      "ZXP.73: PMI Ancestry / Ethnicity 2 component 3 is mandatory",ERRORDSC
                MOVE      "101",ERRORNUM
                CALL      EROR0000
              ENDIF
              GOTO      VADD2100
            ENDIF
          ENDIF
.
.         Check if code is on file
.
          MOVE      "EN",D2
          PACK      KEY5,D2,ZXP07301,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            IF        QUICKREG = 1
              PACK      ZXP07301,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP07301
            ELSE
              MOVE      "ZXP.73: PMI Ancestry / Ethnicity 2 not on patcodes file",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD2100
          ELSE
            PACK      PMPXETH2,ZXP07301,SP3      * code is valid
          ENDIF
.
.         ----------------------------------------------------
.         Validate & load Main Language Spoken at Home 1 if populated
.         ----------------------------------------------------
VADD2100  SQUEEZE   ZXP07401
          MOVELPTR  ZXP07401,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VADD2200 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZXP07401            * null field ?
          IF        @EQUAL
            MOVE      SP3,PMPXLAN1               * yes
            GOTO      VADD2200
          ENDIF
.
          IF        FORM3 > 3
            IF        QUICKREG = 1
              PACK      ZXP07401,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP07401
            ELSE
              MOVE      "ZXP.74: PMI Main Language Spoken at Home 1 component 1 has too many characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD2200
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.
          STRIP     ZXP07403
          MOVELPTR  ZXP07403,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            IF        QUICKREG = 1
              PACK      ZXP07401,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP07401
            ELSE
              MOVE      "ZXP.74: PMI Main Language Spoken at Home 1 component 3 is not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD2200
          ELSE
            MATCH     BLANKSTR,ZXP07403          * null field ?
            IF        @EQUAL
              IF        QUICKREG = 1
                PACK      ZXP07401,SP100,SP100,SP100,SP100,SP100
                CLEAR     ZXP07401
              ELSE
                MOVE      "ZXP.74: PMI Main Language Spoken at Home 1 component 3 is mandatory",ERRORDSC
                MOVE      "101",ERRORNUM
                CALL      EROR0000
              ENDIF
              GOTO      VADD2200
            ENDIF
          ENDIF
.
.         Check if code is on file
.
          MOVE      "l1",D2
          PACK      KEY5,D2,ZXP07401,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            IF        QUICKREG = 1
              PACK      ZXP07401,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP07401
            ELSE
              MOVE      "ZXP.74: PMI Main Language Spoken at Home 1 not on patcodes file",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD2200
          ELSE
            PACK      PMPXLAN1,ZXP07401,SP3      * code is valid
          ENDIF
.
.         ----------------------------------------------------
.         Validate & load Main Language Spoken at Home 2 if populated
.         ----------------------------------------------------
VADD2200  SQUEEZE   ZXP07501
          MOVELPTR  ZXP07501,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VADD9000 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZXP07501            * null field ?
          IF        @EQUAL
            MOVE      SP3,PMPXLAN2               * yes
            GOTO      VADD9000
          ENDIF
.
          IF        FORM3 > 3
            IF        QUICKREG = 1
              PACK      ZXP07501,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP07501
            ELSE
              MOVE      "ZXP.75: PMI Main Language Spoken at Home 2 component 1 has too many characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD9000
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.
          STRIP     ZXP07503
          MOVELPTR  ZXP07503,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            IF        QUICKREG = 1
              PACK      ZXP07501,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP07501
            ELSE
              MOVE      "ZXP.75: PMI Main Language Spoken at Home 2 component 3 is not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD9000
          ELSE
            MATCH     BLANKSTR,ZXP07503          * null field ?
            IF        @EQUAL
              IF        QUICKREG = 1
                PACK      ZXP07501,SP100,SP100,SP100,SP100,SP100
                CLEAR     ZXP07501
              ELSE
                MOVE      "ZXP.75: PMI Main Language Spoken at Home 2 component 3 is mandatory",ERRORDSC
                MOVE      "101",ERRORNUM
                CALL      EROR0000
              ENDIF
              GOTO      VADD9000
            ENDIF
          ENDIF
.
.         Check if code is on file
.
          MOVE      "l1",D2
          PACK      KEY5,D2,ZXP07501,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            IF        QUICKREG = 1
              PACK      ZXP07501,SP100,SP100,SP100,SP100,SP100
              CLEAR     ZXP07501
            ELSE
              MOVE      "ZXP.75: PMI Main Language Spoken at Home 2 not on patcodes file",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VADD9000
          ELSE
            PACK      PMPXLAN2,ZXP07501,SP3      * code is valid
          ENDIF
.
VADD9000
.
VADD9999  RETURN
+           
.*****************************************************************************
.*                              VDTM0000           Called by: Lots           *
.*                  Validate a date/time field                               *
.* Requires:  DIM14 - Date in format ccyymmddhhmmss                          *
.*            FORM3 - Length of field passed                                 *
.*            FIELDID - Field being checked                                  *
.*            DATFLAG1 - Dates Allowed flag                                  *
.*                          0 = any date/time allowed                        *
.*                          1 = no future date/time allowed                  *
.*                          2 = future time only allowed                     *
.*                              (date must be past or current)               *
.*                          3 = datetime cannot be in the past               *
.*            DATFLAG2 - Date type                                           *
.*                          0 = Date only (ccyymmdd)                         *
.*                          1 = Date and Time (ccyymmddhhmmss)               *
.*                          2 = Time only (hhmmss)                           *
.* Returns:   ERRORCNT - error count                                         *
.*****************************************************************************
.
VDTM0000  BRANCH    DATFLAG2,VDTM0050:           * validate date and time
                             VDTM0080            * validate time only
.
.         The field only requires date validation
.
          COMPARE   EIGHT,FORM3
          IF        @LESS
            MATCH     "ZXP.2 ",FIELDID
            GOTO      VDTM0070 IF NOT EQUAL      * validate 6 chars (CAR 311429)
          ENDIF
          GOTO      VDTM0100
.
.         The field requires a date and time
.
VDTM0050  MOVE      SP8,SAVEDATE                 * clear saved transaction date
          COMPARE   TEN4,FORM3
          GOTO      VDTM0100 IF NOT LESS
.
VDTM0070  MOVE      FIELDID,ERRORDSC
          ENDSET    ERRORDSC
          APPEND    ": Date is incomplete",ERRORDSC
          RESET     ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VDTM9999
.
.         The field only requires time validation
.
VDTM0080  COMPARE   SIX,FORM3
          IF        !@EQUAL
            MOVE      FIELDID,ERRORDSC
            ENDSET    ERRORDSC
            APPEND    ": Time is incomplete",ERRORDSC
            RESET     ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VDTM9999
          ENDIF
.
          TYPE      DIM14
          IF        !@EQUAL
            MOVE      FIELDID,ERRORDSC
            ENDSET    ERRORDSC
            APPEND    ": Time is not numeric",ERRORDSC
            RESET     ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VDTM9999
          ENDIF
.
          UNPACK    DIM14,DIM2H,DIM2N,DIM2S
          GOTO      VDTM8100
.
.         Validate that the date/time is numeric
.
VDTM0100  TYPE      DIM14
          IF        !@EQUAL
            MOVE      FIELDID,ERRORDSC
            ENDSET    ERRORDSC
            APPEND    ": Date is not numeric",ERRORDSC
            RESET     ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VDTM9999
          ENDIF
.
          UNPACK    DIM14,DIM2C,DIM2Y,DIM2M,DIM2D,DIM2H,DIM2N,DIM2S
.
.         Validate the century is >= 18 for the patient date of birth field,
.         otherwise, for all other fields, the century should be >= 19.
.
          MOVE      DIM2C,FORM2
          MATCH     "PID.7 ",FIELDID
          IF        @EQUAL
            COMPARE   TEN8,FORM2
            GOTO      VDTM0200 IF NOT LESS
          ELSE
            COMPARE   TEN9,FORM2
            GOTO      VDTM0200 IF NOT LESS
          ENDIF
.
          MOVE      FIELDID,ERRORDSC
          ENDSET    ERRORDSC
          APPEND    ": Century is not valid",ERRORDSC
          RESET     ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VDTM9999
.
.         Validate the month
.
VDTM0200  MOVE      DIM2M,FORM2
          IF        FORM2 < 1 | FORM2 > 12
            MOVE      FIELDID,ERRORDSC
            ENDSET    ERRORDSC
            APPEND    ": Month is not valid",ERRORDSC
            RESET     ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VDTM9999
          ENDIF
.
.         Validate the day is:
.              < 32 for January, March, May, July, August, October & December
.              < 31 for April, June, September & November
.              < 29 for February, except in a leap year where it is < 30
.
          BRANCH    FORM2,VDTM1000:              * Jan
                          VDTM3000:              * Feb
                          VDTM1000:              * Mar
                          VDTM2000:              * Apr
                          VDTM1000:              * May
                          VDTM2000:              * Jun
                          VDTM1000:              * Jul
                          VDTM1000:              * Aug
                          VDTM2000:              * Sep
                          VDTM1000:              * Oct
                          VDTM2000:              * Nov
                          VDTM1000               * Dec
.
.         Validate days for month of 31 days
.
VDTM1000  MATCH     "ZXP.2 ",FIELDID
          IF        @EQUAL
            MOVE      "31",DIM2D
          ENDIF
          MOVE      DIM2D,FORM2
          IF        FORM2 < 1 | FORM2 > 31
            GOTO      VDTM3900
          ENDIF
          GOTO      VDTM4000
.
.         Validate days for month of 30 days
.
VDTM2000  MATCH     "ZXP.2 ",FIELDID
          IF        @EQUAL
            MOVE      "30",DIM2D
          ENDIF
          MOVE      DIM2D,FORM2
          IF        FORM2 < 1 | FORM2 > 30
            GOTO      VDTM3900
          ENDIF
          GOTO      VDTM4000
.
.         Validate days for February
.         A leap year is one where:
.           1. Every year divisible by 4 is a leap year.
.           2. But every year divisible by 100 is NOT a leap year
.           3. Unless the year is also divisible by 400, then it is still a
.              leap year.
.
VDTM3000  PACK      DIM4,DIM2C,DIM2Y
          MOVE      DIM4,FORM4
          IF        (FORM4%4) = 0
            IF        (FORM4%100) = 0
              IF        (FORM4%400) = 0
                GOTO      VDTM3200
              ENDIF
            ELSE
              GOTO      VDTM3200
            ENDIF
          ENDIF
.
.         Check for normal Feb days
.
VDTM3100  MATCH     "ZXP.2 ",FIELDID
          IF        @EQUAL
            MOVE      "28",DIM2D
          ENDIF
          MOVE      DIM2D,FORM2
          IF        FORM2 < 1 | FORM2 > 28
            GOTO      VDTM3900
          ENDIF
          GOTO      VDTM4000
.
.         Check for leap year Feb days
.
VDTM3200  MATCH     "ZXP.2 ",FIELDID
          IF        @EQUAL
            MOVE      "29",DIM2D
          ENDIF
          MOVE      DIM2D,FORM2
          IF        FORM2 < 1 | FORM2 > 29
            GOTO      VDTM3900
          ENDIF
          GOTO      VDTM4000
.
VDTM3900  MOVE      FIELDID,ERRORDSC
          ENDSET    ERRORDSC
          APPEND    ": Day is not valid",ERRORDSC
          RESET     ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VDTM9999
.
VDTM4000  MATCH     "ZXP.2 ",FIELDID
          IF        @EQUAL
            PACK      DIM14,DIM2C,DIM2Y,DIM2M,DIM2D,SP70
            PACK      ZXP00201,DIM2C,DIM2Y,DIM2M,DIM2D,SP70
          ENDIF
          MOVE      DIM14,SAVEDATE               * save trans. date (FT1 only)
          CALL      IBACLOCK
          PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
          MOVE      DIM14,DIM8
.
          BRANCH    DATFLAG1,VDTM5000:          * date cannot be in the future
                             VDTM5000:          * time can only be in the future
                             VDTM6000           * date cannot be in the past
          GOTO      VDTM8000                    * any date allowed
.
.         Make sure the date is not in the future
.
VDTM5000  MATCH     DIM8,CURRDATE
          IF        @LESS
            MOVE      FIELDID,ERRORDSC
            ENDSET    ERRORDSC
            APPEND    ": Date in the future",ERRORDSC
            RESET     ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VDTM9999
          ENDIF
          GOTO      VDTM8000
.
.         Make sure the date is not in the past
.
VDTM6000  MATCH     CURRDATE,DIM8
          IF        @LESS
            MOVE      FIELDID,ERRORDSC
            ENDSET    ERRORDSC
            APPEND    ": Date in the past",ERRORDSC
            RESET     ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VDTM9999
          ENDIF
.
VDTM8000  COMPARE   TEN4,FORM3                   * time populated ?
          GOTO      VDTM9999 IF LESS             * no - finished
.
.         Validate the hour
.
VDTM8100  MOVE      DIM2H,FORM2
          IF        FORM2 < 0 | FORM2 > 23
            MOVE      FIELDID,ERRORDSC
            ENDSET    ERRORDSC
            APPEND    ": Hour not valid",ERRORDSC
            RESET     ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VDTM9999
          ENDIF
.
.         Validate the minute
.
          MOVE      DIM2N,FORM2
          IF        FORM2 < 0 | FORM2 > 59
            MOVE      FIELDID,ERRORDSC
            ENDSET    ERRORDSC
            APPEND    ": Minutes not valid",ERRORDSC
            RESET     ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VDTM9999
          ENDIF
.
.         Validate the second
.
          MOVE      DIM2S,FORM2
          IF        FORM2 < 0 | FORM2 > 59
            MOVE      FIELDID,ERRORDSC
            ENDSET    ERRORDSC
            APPEND    ": Seconds not valid",ERRORDSC
            RESET     ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VDTM9999
          ENDIF
.
          BRANCH    DATFLAG1,VDTM9000:          * date cannot be in the future
                             VDTM9999:          * time can only be in the future
                             VDTM9100           * date cannot be in the past
          GOTO      VDTM9999                    * any date allowed
.
.         Make sure that the time is not in the future
.
VDTM9000  MATCH     DIM8,CURRDATE
          IF        @EQUAL
            PACK      DIM8,DIM2H,COLON,DIM2N,COLON,DIM2S
            MATCH     DIM8,CTIMEIS
            IF        @LESS
              MOVE      FIELDID,ERRORDSC
              ENDSET    ERRORDSC
              APPEND    ": Time in the future",ERRORDSC
              RESET     ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
          GOTO      VDTM9999
.
.         Make sure that the time is not in the past
.
VDTM9100  MATCH     DIM8,CURRDATE
          IF        @EQUAL
            PACK      DIM8,DIM2H,COLON,DIM2N,COLON,DIM2S
            MATCH     CTIMEIS,DIM8
            IF        @LESS
              MOVE      FIELDID,ERRORDSC
              ENDSET    ERRORDSC
              APPEND    ": Time in the past",ERRORDSC
              RESET     ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
VDTM9999  RETURN
+
.*****************************************************************************
.*                              EROR0000           Called by:  Lots          *
.*                       Error handling routine                              *
.* Requires: ERRORCNT - current error count                                  *
.*           ERRORDSC - error description                                    *
.*           ERRORNUM - error number                                         *
.* Returns:  ERORLINE - error description for error count = 1 (to be         *
.*                      returned in acknowledgement message - MSA.3)         *
.*           ERRORCNT - updated error count                                  *
.*           ERORNUMB - first error number                                   *
.*****************************************************************************
.
EROR0000  IF        DISPFLAG = 1
            DISPLAY   *+,ERRORDSC,*-,*R,*N;
          ELSE
          ENDIF
          ADD       ONE,ERRORCNT                 * increment error count
.
.         Write the error to the log file
.
          WRITE     TEXTFILE,SEQ;ERRORNUM,SP2,ERRORDSC
.
.         If this is the first error message, then store this to send
.         back in the acknowledgement message - MSA.3 & MSA.6.
.
          IF        ERRORCNT = 1
            MOVE      ERRORDSC,ERORLINE
.
            MOVE      ERRORNUM,ERORNUMB
            IF        ERORNUMB = 100
              MOVE      "Segment sequence error",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 101
              MOVE      "Required field missing",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 102
              MOVE      "Data type error",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 103
              MOVE      "Table value not found",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 200
              MOVE      "Unsupported message type",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 201
              MOVE      "Unsupported event code",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 202
              MOVE      "Unsupported processing id",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 203
              MOVE      "Unsupported version id",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 204
              MOVE      "Unknown key identifier",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 205
              MOVE      "Duplicate key identifier",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 206
              MOVE      "Application record locked",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 207
              MOVE      "Application internal error",ERORTEXT
              GOTO      EROR9000
            ENDIF
            MOVE      "Unknown internal error",ERORTEXT
.
.           Errors for P03 Invoice On Hold message TSK 0922254 (PIOH0000)
.
            IF        ERORNUMB = 1
              MOVE      "Visit number not found",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 2
              MOVE      "Invoice on Hold mismatch",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 3
              MOVE      "No Invoice on Hold",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 4
              MOVE      "No Invoice Pending",ERORTEXT
              GOTO      EROR9000
            ENDIF
.
.           If this is the first error message, then send an email alert.
.           Load the error description and replace blanks with underscores
.           so the description is passed as a single variable to the script
.           for an email alert to be sent
.
EROR9000    MOVE      ERRORDSC,ALTERDSC
            REP       " _",ALTERDSC
            CALL      ALTUSR00                   * email alert
          ENDIF
.
EROR9999  RETURN
+
.*****************************************************************************
.*                              VA280000           Called by: PROC0000       *
.*              Validate the ADT^A28 message segments                        *
.*     MSH (mandatory - 1 only)                                              *
.*     EVN (mandatory - 1 only)                                              *
.*     PID (mandatory - 1 only)                                              *
.*     NK1 (optional - 0 or more)                                            *
.*     PV1 (mandatory - 1 only)                                              *
.*     ZAL (optional - 0 or more)                                            *
.*     ZXP (mandatory - 1 only)                                              *
.* Requires:  SAVSEGMT - saved previous segment id.                          *
.* Returns :  SAVSEGMT - updated current segment id.                         *
.*****************************************************************************
.
.         Check if this is a EVN segment.
.
VA280000  MATCH     EVNSEGMT,SEGMENT             * EVN segment ?
          GOTO      VA281000 IF NOT EQUAL        * no
.
.         Check the EVN segment was preceeded by an MSH segment
.
          MATCH     MSHSEGMT,SAVSEGMT
          GOTO      VA289100 IF NOT EQUAL
.
          MOVE      ANSY,A28ARRAY[1]             * MSH mandatory
          MOVE      ANSY,A28ARRAY[2]             * EVN mandatory
          MOVE      EVNSEGMT,SAVSEGMT            * save segment id
          GOTO      VA289999
.
.         Check if this is a PID segment
.
VA281000  MATCH     PIDSEGMT,SEGMENT
          GOTO      VA281500 IF NOT EQUAL
.
.         Check the PID segment was preceeded by an EVN segment
.
          MATCH     EVNSEGMT,SAVSEGMT
          GOTO      VA289100 IF NOT EQUAL
.
          MOVE      ANSY,A28ARRAY[3]             * PID mandatory
          MOVE      PIDSEGMT,SAVSEGMT            * save segment id
          GOTO      VA289999
.
.         Check if this is an NK1 segment
.
VA281500  MATCH     NK1SEGMT,SEGMENT
          GOTO      VA282000 IF NOT EQUAL
.
.         Check the PID segment was preceeded by an EVN segment if this is
.         the first NK1 segment, or another NK1 segment if it's
.         not the first NK1 segment
.
          IF        NK1COUNT = 0
            MATCH     PIDSEGMT,SAVSEGMT
            GOTO      VA289100 IF NOT EQUAL
          ELSE
            MATCH     NK1SEGMT,SAVSEGMT
            GOTO      VA289100 IF NOT EQUAL
          ENDIF
.
          MOVE      NK1SEGMT,SAVSEGMT            * save segment id
          GOTO      VA289999
.
.         Check if this is a PV1 segment
.
VA282000  MATCH     PV1SEGMT,SEGMENT
          GOTO      VA282500 IF NOT EQUAL
.
.         Check the PV1 segment was preceeded by a PID segment if there were
.         no NK1 segments, otherwise it should be an NK1 segment
.
          IF        NK1COUNT = 0
            MATCH     PIDSEGMT,SAVSEGMT
            GOTO      VA289100 IF NOT EQUAL
          ELSE
            MATCH     NK1SEGMT,SAVSEGMT
            GOTO      VA289100 IF NOT EQUAL
          ENDIF
.
          MOVE      ANSY,A28ARRAY[4]             * PV1 mandatory
          MOVE      PV1SEGMT,SAVSEGMT            * save segment id
          GOTO      VA289999
.
.         Check if this is a ZAL segment
.
VA282500  MATCH     ZALSEGMT,SEGMENT
          GOTO      VA283000 IF NOT EQUAL
.
.         Check the ZAL segment was preceeded by an PV1 segment if this is
.         the first ZAL segment, or another ZAL segment if it's
.         not the first ZAL segment
.
          IF        ZALCOUNT = 0
            MATCH     PV1SEGMT,SAVSEGMT
            GOTO      VA289100 IF NOT EQUAL
          ELSE
            MATCH     ZALSEGMT,SAVSEGMT
            GOTO      VA289100 IF NOT EQUAL
          ENDIF
.
          MOVE      ZALSEGMT,SAVSEGMT            * save segment id
          GOTO      VA289999
.
.         Check if this is a ZXP segment
.
VA283000  MATCH     ZXPSEGMT,SEGMENT
          GOTO      VA289999 IF NOT EQUAL
.
.         Check the ZXP segment was preceeded by a PV1 segment if there were
.         no ZAL segments, otherwise it should be a ZAL segment
.
          IF        ZALCOUNT = 0
            MATCH     PV1SEGMT,SAVSEGMT
            GOTO      VA289100 IF NOT EQUAL
          ELSE
            MATCH     ZALSEGMT,SAVSEGMT
            GOTO      VA289100 IF NOT EQUAL
          ENDIF
.
          MOVE      ANSY,A28ARRAY[5]             * ZXP mandatory
          MOVE      ZXPSEGMT,SAVSEGMT            * save segment id
          GOTO      VA289999
.
VA289100  MOVE      MSEQCAPT,ERRORDSC
          MOVE      "100",ERRORNUM
          CALL      EROR0000
.
VA289999  RETURN
+
.*****************************************************************************
.*                              VA310000           Called by: PROC0000       *
.*              Validate the ADT^A31 message segments                        *
.*     MSH (mandatory - 1 only)                                              *
.*     EVN (mandatory - 1 only)                                              *
.*     PID (mandatory - 1 only)                                              *
.*     NK1 (optional - 0 or more)                                            *
.*     PV1 (mandatory - 1 only)                                              *
.*     ZAL (optional - 0 or more)                                            *
.*     ZXP (mandatory - 1 only)                                              *
.* Requires:  SAVSEGMT - saved previous segment id.                          *
.* Returns :  SAVSEGMT - updated current segment id.                         *
.*****************************************************************************
.
.         Check if this is a EVN segment.
.
VA310000  MATCH     EVNSEGMT,SEGMENT             * EVN segment ?
          GOTO      VA311000 IF NOT EQUAL        * no
.
.         Check the EVN segment was preceeded by an MSH segment
.
          MATCH     MSHSEGMT,SAVSEGMT
          GOTO      VA319100 IF NOT EQUAL
.
          MOVE      ANSY,A31ARRAY[1]             * MSH mandatory
          MOVE      ANSY,A31ARRAY[2]             * EVN mandatory
          MOVE      EVNSEGMT,SAVSEGMT            * save segment id
          GOTO      VA319999
.
.         Check if this is a PID segment
.
VA311000  MATCH     PIDSEGMT,SEGMENT
          GOTO      VA311500 IF NOT EQUAL
.
.         Check the PID segment was preceeded by an EVN segment
.
          MATCH     EVNSEGMT,SAVSEGMT
          GOTO      VA319100 IF NOT EQUAL
.
          MOVE      ANSY,A31ARRAY[3]             * PID mandatory
          MOVE      PIDSEGMT,SAVSEGMT            * save segment id
          GOTO      VA319999
.
.         Check if this is an NK1 segment
.
VA311500  MATCH     NK1SEGMT,SEGMENT
          GOTO      VA312000 IF NOT EQUAL
.
.         Check the PID segment was preceeded by an EVN segment if this is
.         the first NK1 segment, or another NK1 segment if it's
.         not the first NK1 segment
.
          IF        NK1COUNT = 0
            MATCH     PIDSEGMT,SAVSEGMT
            GOTO      VA319100 IF NOT EQUAL
          ELSE
            MATCH     NK1SEGMT,SAVSEGMT
            GOTO      VA319100 IF NOT EQUAL
          ENDIF
.
          MOVE      NK1SEGMT,SAVSEGMT            * save segment id
          GOTO      VA319999
.
.         Check if this is a PV1 segment
.
VA312000  MATCH     PV1SEGMT,SEGMENT
          GOTO      VA312500 IF NOT EQUAL
.
.         Check the PV1 segment was preceeded by a PID segment if there were
.         no NK1 segments, otherwise it should be an NK1 segment
.
          IF        NK1COUNT = 0
            MATCH     PIDSEGMT,SAVSEGMT
            GOTO      VA319100 IF NOT EQUAL
          ELSE
            MATCH     NK1SEGMT,SAVSEGMT
            GOTO      VA319100 IF NOT EQUAL
          ENDIF
.
          MOVE      ANSY,A31ARRAY[4]             * PV1 mandatory
          MOVE      PV1SEGMT,SAVSEGMT            * save segment id
          GOTO      VA319999
.
.         Check if this is a ZAL segment
.
VA312500  MATCH     ZALSEGMT,SEGMENT
          GOTO      VA313000 IF NOT EQUAL
.
.         Check the ZAL segment was preceeded by an PV1 segment if this is
.         the first ZAL segment, or another ZAL segment if it's
.         not the first ZAL segment
.
          IF        ZALCOUNT = 0
            MATCH     PV1SEGMT,SAVSEGMT
            GOTO      VA319100 IF NOT EQUAL
          ELSE
            MATCH     ZALSEGMT,SAVSEGMT
            GOTO      VA319100 IF NOT EQUAL
          ENDIF
.
          MOVE      ZALSEGMT,SAVSEGMT            * save segment id
          GOTO      VA319999
.
.         Check if this is a ZXP segment
.
VA313000  MATCH     ZXPSEGMT,SEGMENT
          GOTO      VA319999 IF NOT EQUAL
.
.         Check the ZXP segment was preceeded by a PV1 segment if there were
.         no ZAL segments, otherwise it should be a ZAL segment
.
          IF        ZALCOUNT = 0
            MATCH     PV1SEGMT,SAVSEGMT
            GOTO      VA319100 IF NOT EQUAL
          ELSE
            MATCH     ZALSEGMT,SAVSEGMT
            GOTO      VA319100 IF NOT EQUAL
          ENDIF
.
          MOVE      ANSY,A31ARRAY[5]             * ZXP mandatory
          MOVE      ZXPSEGMT,SAVSEGMT            * save segment id
          GOTO      VA319999
.
VA319100  MOVE      MSEQCAPT,ERRORDSC
          MOVE      "100",ERRORNUM
          CALL      EROR0000
.
VA319999  RETURN
+
.*****************************************************************************
.*                              VA340000           Called by: PROC0000       *
.*              Validate the ADT^A34 message segments                        *
.*     MSH (mandatory - 1 only)                                              *
.*     EVN (mandatory - 1 only)                                              *
.*     PID (mandatory - 1 only)                                              *
.*     MRG (mandatory - 1 only)                                              *
.*     ZXP (mandatory - 1 only)                                              *
.* Requires:  SAVSEGMT - saved previous segment id.                          *
.* Returns :  SAVSEGMT - updated current segment id.                         *
.*****************************************************************************
.
.         Check if this is a EVN segment.
.
VA340000  MATCH     EVNSEGMT,SEGMENT             * EVN segment ?
          GOTO      VA341000 IF NOT EQUAL        * no
.
.         Check the EVN segment was preceeded by an MSH segment
.
          MATCH     MSHSEGMT,SAVSEGMT
          GOTO      VA349100 IF NOT EQUAL
.
          MOVE      ANSY,A34ARRAY[1]             * MSH mandatory
          MOVE      ANSY,A34ARRAY[2]             * EVN mandatory
          MOVE      EVNSEGMT,SAVSEGMT            * save segment id
          GOTO      VA349999
.
.         Check if this is a PID segment
.
VA341000  MATCH     PIDSEGMT,SEGMENT
          GOTO      VA341500 IF NOT EQUAL
.
.         Check the PID segment was preceeded by an EVN segment
.
          MATCH     EVNSEGMT,SAVSEGMT
          GOTO      VA349100 IF NOT EQUAL
.
          MOVE      ANSY,A34ARRAY[3]             * PID mandatory
          MOVE      PIDSEGMT,SAVSEGMT            * save segment id
          GOTO      VA349999
.
.         Check if this is an MRG segment
.
VA341500  MATCH     MRGSEGMT,SEGMENT
          GOTO      VA342000 IF NOT EQUAL
.
.         Check the MRG segment was preceeded by an PID segment
.
          MATCH     PIDSEGMT,SAVSEGMT
          GOTO      VA349100 IF NOT EQUAL
.
          MOVE      ANSY,A34ARRAY[4]             * MRG mandatory
          MOVE      MRGSEGMT,SAVSEGMT            * save segment id
          GOTO      VA349999
.
.         Check if this is a ZXP segment
.
VA342000  MATCH     ZXPSEGMT,SEGMENT
          GOTO      VA349999 IF NOT EQUAL
.
.         Check the ZXP segment was preceeded by a MRG segment
.
          MATCH     MRGSEGMT,SAVSEGMT
          GOTO      VA349100 IF NOT EQUAL
.
          MOVE      ANSY,A34ARRAY[5]             * ZXP mandatory
          MOVE      ZXPSEGMT,SAVSEGMT            * save segment id
          GOTO      VA349999
.
VA349100  MOVE      MSEQCAPT,ERRORDSC
          MOVE      "100",ERRORNUM
          CALL      EROR0000
.
VA349999  RETURN
+
.*****************************************************************************
.*                              VP030000           Called by: PROC0000       *
.*              Validate the DFT^P03 message segments                        *
.*     MSH (mandatory - 1 only)                                              *
.*     EVN (mandatory - 1 only)                                              *
.*     PID (mandatory - 1 only)                                              *
.*     PV1 (mandatory - 1 only)                                              *
.*     FT1 (mandatory - 1 or more)                                           *
.*     ZFT (optional  - 1 or more)                                           *
.*     ZXV (optional  - 1 only)                                              *
.* Requires:  SAVSEGMT - saved previous segment id.                          *
.* Returns :  SAVSEGMT - updated current segment id.                         *
.*****************************************************************************
.
.         Check if this is a EVN segment.
.
VP030000  MATCH     EVNSEGMT,SEGMENT             * EVN segment ?
          GOTO      VP031000 IF NOT EQUAL        * no
.
.         Check the EVN segment was preceeded by an MSH segment
.
          MATCH     MSHSEGMT,SAVSEGMT
          GOTO      VP039100 IF NOT EQUAL
.
          MOVE      ANSY,P03ARRAY[1]             * MSH mandatory
          MOVE      ANSY,P03ARRAY[2]             * EVN mandatory
          MOVE      EVNSEGMT,SAVSEGMT            * save segment id
          GOTO      VP039999
.
.         Check if this is a PID segment
.
VP031000  MATCH     PIDSEGMT,SEGMENT
          GOTO      VP031500 IF NOT EQUAL
.
.         Check the PID segment was preceeded by an EVN segment
.
          MATCH     EVNSEGMT,SAVSEGMT
          GOTO      VP039100 IF NOT EQUAL
.
          MOVE      ANSY,P03ARRAY[3]             * PID mandatory
          MOVE      PIDSEGMT,SAVSEGMT            * save segment id
          GOTO      VP039999
.
.         Check if this is an PV1 segment
.
VP031500  MATCH     PV1SEGMT,SEGMENT
          GOTO      VP032000 IF NOT EQUAL
.
.         Check the PV1 segment was preceeded by an PID segment
.
          MATCH     PIDSEGMT,SAVSEGMT
          GOTO      VP039100 IF NOT EQUAL
.
          MOVE      ANSY,P03ARRAY[4]             * PV1 mandatory
          MOVE      PV1SEGMT,SAVSEGMT            * save segment id
          GOTO      VP039999
.
.         Check if this is an FT1 segment
.
VP032000  MATCH     FT1SEGMT,SEGMENT
          GOTO      VP032500 IF NOT EQUAL
.
.         Check the FT1 segment was preceeded by a PV1 segment, another
.         FT1 segment or a ZFT segment
.
          IF        FT1COUNT = 0
            MATCH     PV1SEGMT,SAVSEGMT
            GOTO      VP039100 IF NOT EQUAL
          ELSE
            MATCH     FT1SEGMT,SAVSEGMT
            IF        !@EQUAL
              MATCH     ZFTSEGMT,SAVSEGMT
              GOTO      VP039100 IF NOT EQUAL
            ENDIF
          ENDIF
.
          MOVE      ANSY,P03ARRAY[5]             * FT1 mandatory
          MOVE      FT1SEGMT,SAVSEGMT            * save segment id
          GOTO      VP039999
.
.         Check if this is a ZFT segment
.
VP032500  MATCH     ZFTSEGMT,SEGMENT
          GOTO      VP033000 IF NOT EQUAL
.
.         Check the ZFT segment was preceeded by an FT1 segment
.
          MATCH     FT1SEGMT,SAVSEGMT
          GOTO      VP039100 IF NOT EQUAL
.
          MOVE      ZFTSEGMT,SAVSEGMT            * save segment id
          GOTO      VP039999
.
.         Check if this is a ZXV segment
.
VP033000  MATCH     ZXVSEGMT,SEGMENT
          GOTO      VP039999 IF NOT EQUAL
.
.         Check the ZXV segment was preceeded by an FT1 segment or a
.         ZFT segment
.
          MATCH     FT1SEGMT,SAVSEGMT
          IF        !@EQUAL
            MATCH     ZFTSEGMT,SAVSEGMT
            GOTO      VP039100 IF NOT EQUAL
          ENDIF
.
          MOVE      ZXVSEGMT,SAVSEGMT            * save segment id
          GOTO      VP039999
.
VP039100  MOVE      MSEQCAPT,ERRORDSC
          MOVE      "100",ERRORNUM
          CALL      EROR0000
.
VP039999  RETURN
+
.*****************************************************************************
.*                              VREF0000           Called by: PROC0000       *
.*        Validate the REF^I12, REF^I13 & REF^I14  message segments          *
.*     MSH (mandatory - 1 only)                                              *
.*     RF1 (mandatory - 1 only)                                              *
.*     PRD (optional - maximum of 2)                                         *
.*     PID (mandatory - 1 only)                                              *
.*     PV1 (mandatory - 1 only)                                              *
.*     ZXP (optional - 1 only)                                               *
.*     ZXV (optional - 1 only)                                               *
.* Requires:  SAVSEGMT - saved previous segment id.                          *
.* Returns :  SAVSEGMT - updated current segment id.                         *
.*****************************************************************************
.
.         Check if this is an RF1 segment.
.
VREF0000  MATCH     RF1SEGMT,SEGMENT             * RF1 segment ?
          GOTO      VREF1000 IF NOT EQUAL        * no
.
.         Check the RF1 segment was preceeded by an MSH segment
.
          MATCH     MSHSEGMT,SAVSEGMT
          GOTO      VREF9100 IF NOT EQUAL
.
          MOVE      ANSY,REFARRAY[1]             * MSH mandatory
          MOVE      ANSY,REFARRAY[2]             * RF1 mandatory
          MOVE      RF1SEGMT,SAVSEGMT            * save segment id
          GOTO      VREF9999
.
.         Check if this is a PRD segment
.
VREF1000  MATCH     PRDSEGMT,SEGMENT             * PRD segment ?
          GOTO      VREF1500 IF NOT EQUAL        * no
.
.         Check the PRD segment was preceeded by an RF1 segment or another
.         PRD segment (if this is a second PRD segment)
.
          MATCH     RF1SEGMT,SAVSEGMT
          IF        !@EQUAL
            MATCH     PRDSEGMT,SAVSEGMT
            GOTO      VREF9100 IF NOT EQUAL
          ENDIF
          MOVE      PRDSEGMT,SAVSEGMT            * save segment id
          GOTO      VREF9999
.
.         Check if this is a PID segment
.
VREF1500  MATCH     PIDSEGMT,SEGMENT
          GOTO      VREF2000 IF NOT EQUAL
.
.         Check the PID segment was preceeded by an RF1 segment or a PRD
.         segment
.
          MATCH     RF1SEGMT,SAVSEGMT
          IF        !@EQUAL
            MATCH     PRDSEGMT,SAVSEGMT
            GOTO      VREF9100 IF NOT EQUAL
          ENDIF
.
          MOVE      ANSY,REFARRAY[3]             * PID mandatory
          MOVE      PIDSEGMT,SAVSEGMT            * save segment id
          GOTO      VREF9999
.
.         Check if this is an PV1 segment
.
VREF2000  MATCH     PV1SEGMT,SEGMENT
          GOTO      VREF2500 IF NOT EQUAL
.
.         Check the PV1 segment was preceeded by an PID segment
.
          MATCH     PIDSEGMT,SAVSEGMT
          GOTO      VREF9100 IF NOT EQUAL
.
          MOVE      ANSY,REFARRAY[4]             * PV1 mandatory
          MOVE      PV1SEGMT,SAVSEGMT            * save segment id
          GOTO      VREF9999
.
.         Check if this is a ZXP segment
.
VREF2500  MATCH     ZXPSEGMT,SEGMENT
          GOTO      VREF3000 IF NOT EQUAL
.
.         Check the ZXP segment was preceeded by a PV1 segment
.
          MATCH     PV1SEGMT,SAVSEGMT
          GOTO      VREF9100 IF NOT EQUAL
.
          MOVE      ZXPSEGMT,SAVSEGMT            * save segment id
          GOTO      VREF9999
.
.         Check if this is a ZXV segment
.
VREF3000  MATCH     ZXPSEGMT,SEGMENT
          GOTO      VREF9999 IF NOT EQUAL
.
.         Check the ZXV segment was preceeded by a PV1 segment or a ZXP
.         segment
.
          MATCH     PV1SEGMT,SAVSEGMT
          IF        !@EQUAL
            MATCH     ZXPSEGMT,SAVSEGMT
            GOTO      VREF9100 IF NOT EQUAL
          ENDIF
.
          MOVE      ZXPSEGMT,SAVSEGMT            * save segment id
          GOTO      VREF9999
.
VREF9100  MOVE      MSEQCAPT,ERRORDSC
          MOVE      "100",ERRORNUM
          CALL      EROR0000
.
VREF9999  RETURN
+
.*****************************************************************************
.*                              VA040000           Called by: PROC0000       *
.*              Validate the ADT^A04 message segments                        *
.*   1 MSH (mandatory - 1 only)                                              *
.*   2 EVN (mandatory - 1 only)                                              *
.*   3 PID (mandatory - 1 only)                                              *
.*   4 PV1 (mandatory - 1 only)                                              *
.*   5 PV2 (mandatory - 1 only - not required for ED messages)               *
.*   5 ZTR (mandatory - 1 only - only required for ED messages)              *
.*   6 ZXV (mandatory - 1 only - not required for ED messages)               *
.*   6 ZNT (optional  - 1 only - only applies to ED messages)                *
.* Requires:  SAVSEGMT - saved previous segment id.                          *
.* Returns :  SAVSEGMT - updated current segment id.                         *
.*****************************************************************************
.
.         Check if this is a EVN segment.
.
VA040000  MATCH     EVNSEGMT,SEGMENT             * EVN segment ?
          GOTO      VA041000 IF NOT EQUAL        * no
.
.         Check the EVN segment was preceeded by an MSH segment
.
          MATCH     MSHSEGMT,SAVSEGMT
          GOTO      VA049100 IF NOT EQUAL
.
          MOVE      ANSY,A04ARRAY[1]             * MSH mandatory
          MOVE      ANSY,A04ARRAY[2]             * EVN mandatory
          MOVE      EVNSEGMT,SAVSEGMT            * save segment id
          GOTO      VA049999
.
.         Check if this is a PID segment
.
VA041000  MATCH     PIDSEGMT,SEGMENT
          GOTO      VA041500 IF NOT EQUAL
.
.         Check the PID segment was preceeded by an EVN segment
.
          MATCH     EVNSEGMT,SAVSEGMT
          GOTO      VA049100 IF NOT EQUAL
.
          MOVE      ANSY,A04ARRAY[3]             * PID mandatory
          MOVE      PIDSEGMT,SAVSEGMT            * save segment id
          GOTO      VA049999
.
.         Check if this is a PV1 segment
.
VA041500  MATCH     PV1SEGMT,SEGMENT
          GOTO      VA042000 IF NOT EQUAL
.
.         Check the PV1 segment was preceeded by a PID segment
.
          MATCH     PIDSEGMT,SAVSEGMT
          GOTO      VA049100 IF NOT EQUAL
.
          MOVE      ANSY,A04ARRAY[4]             * PV1 mandatory
          MOVE      PV1SEGMT,SAVSEGMT            * save segment id
          GOTO      VA049999
.
.         Check if this is a PV2 segment
.
VA042000  MATCH     PV2SEGMT,SEGMENT
          GOTO      VA042500 IF NOT EQUAL
.
          MATCH     ANSE,PV100201
          GOTO      VA049999 IF EQUAL            * not mandatory for EMR visit
.
.         Check the PV2 segment was preceeded by a PV1 segment
.
          MATCH     PV1SEGMT,SAVSEGMT
          GOTO      VA049100 IF NOT EQUAL
.
          MOVE      ANSY,A04ARRAY[5]             * PV2 mandatory
          MOVE      PV2SEGMT,SAVSEGMT            * save segment id
          GOTO      VA049999
.
.         Check if this is a ZTR segment
.
VA042500  MATCH     ZTRSEGMT,SEGMENT
          GOTO      VA043000 IF NOT EQUAL
.
          MATCH     ANSE,PV100201
          GOTO      VA049999 IF NOT EQUAL        * only mandatory for EMR visit
.
.         Check the ZTR segment was preceeded by a PV1 segment
.
          MATCH     PV1SEGMT,SAVSEGMT
          GOTO      VA049100 IF NOT EQUAL
.
          MOVE      ANSY,A04ARRAY[5]             * ZTR mandatory
          MOVE      ZTRSEGMT,SAVSEGMT            * save segment id
          GOTO      VA049999
.
.         Check if this is a ZXV segment
.
VA043000  MATCH     ZXVSEGMT,SEGMENT
          GOTO      VA043500 IF NOT EQUAL
.
          MATCH     ANSE,PV100201
          GOTO      VA049999 IF EQUAL            * not mandatory for EMR visit
.
.         Check the ZXV segment was preceeded by a PV2 segment
.
          MATCH     PV2SEGMT,SAVSEGMT
          GOTO      VA049100 IF NOT EQUAL
.
          MOVE      ANSY,A04ARRAY[6]             * ZXV mandatory
          MOVE      ZXVSEGMT,SAVSEGMT            * save segment id
          GOTO      VA049999
.
.         Check if this is a ZNT segment
.
VA043500  MATCH     ZNTSEGMT,SEGMENT
          GOTO      VA049999 IF NOT EQUAL
.
.         Check the ZNT segment was preceeded by a ZTR segment
.
          MATCH     ZTRSEGMT,SAVSEGMT
          GOTO      VA049100 IF NOT EQUAL
.
          MOVE      ANSY,A04ARRAY[6]             * ZNT optional so irrelevant
          MOVE      ZNTSEGMT,SAVSEGMT            * save segment id
          GOTO      VA049999
.
VA049100  MOVE      MSEQCAPT,ERRORDSC
          MOVE      "100",ERRORNUM
          CALL      EROR0000
.
VA049999  RETURN
+
.*****************************************************************************
.*                              VSRM0000           Called by: PROC0000       *
.*              Validate the SRM^S0x message segments                        *
.*     MSH (mandatory - 1 only)                                              *
.*     ARQ (mandatory - 1 only)                                              *
.*     PID (mandatory - 1 only)                                              *
.*     PV1 (mandatory - 1 only)                                              *
.*     PV2 (mandatory - 1 only)                                              *
.*     NTE (optional - 1 or more)                                            *
.* Requires:  SAVSEGMT - saved previous segment id.                          *
.* Returns :  SAVSEGMT - updated current segment id.                         *
.*****************************************************************************
.
.         Check if this is a ARQ segment.
.
VSRM0000  MATCH     ARQSEGMT,SEGMENT             * ARQ segment ?
          GOTO      VSRM1000 IF NOT EQUAL        * no
.
.         Check the ARQ segment was preceeded by an MSH segment
.
          MATCH     MSHSEGMT,SAVSEGMT
          GOTO      VSRM9100 IF NOT EQUAL
.
          MOVE      ANSY,SRMARRAY[1]             * MSH mandatory
          MOVE      ANSY,SRMARRAY[2]             * ARQ mandatory
          MOVE      ARQSEGMT,SAVSEGMT            * save segment id
          GOTO      VSRM9999
.
.         Check if this is a PID segment
.
VSRM1000  MATCH     PIDSEGMT,SEGMENT
          GOTO      VSRM1500 IF NOT EQUAL
.
.         Check the PID segment was preceeded by an ARQ segment
.
          MATCH     ARQSEGMT,SAVSEGMT
          GOTO      VSRM9100 IF NOT EQUAL
.
          MOVE      ANSY,SRMARRAY[3]             * PID mandatory
          MOVE      PIDSEGMT,SAVSEGMT            * save segment id
          GOTO      VSRM9999
.
.         Check if this is a PV1 segment
.
VSRM1500  MATCH     PV1SEGMT,SEGMENT
          GOTO      VSRM2000 IF NOT EQUAL
.
.         Check the PV1 segment was preceeded by a PID segment
.
          MATCH     PIDSEGMT,SAVSEGMT
          GOTO      VSRM9100 IF NOT EQUAL
.
          MOVE      ANSY,SRMARRAY[4]             * PV1 mandatory
          MOVE      PV1SEGMT,SAVSEGMT            * save segment id
          GOTO      VSRM9999
.
.         Check if this is a PV2 segment
.
VSRM2000  MATCH     PV2SEGMT,SEGMENT
          GOTO      VSRM2500 IF NOT EQUAL
.
.         Check the PV2 segment was preceeded by a PV1 segment
.
          MATCH     PV1SEGMT,SAVSEGMT
          GOTO      VSRM9100 IF NOT EQUAL
.
          MOVE      ANSY,SRMARRAY[5]             * PV2 mandatory
          MOVE      PV2SEGMT,SAVSEGMT            * save segment id
          GOTO      VSRM9999
.
.         Check if this is an NTE segment
.
VSRM2500  MATCH     NTESEGMT,SEGMENT
          GOTO      VSRM9999 IF NOT EQUAL
.
.         Check the NTE segment was preceeded by a PV2 segment or
.         another NTE segment
.
          MATCH     PV2SEGMT,SAVSEGMT
          IF        !@EQUAL
            MATCH     NTESEGMT,SAVSEGMT
            GOTO      VSRM9100 IF NOT EQUAL
          ENDIF
.
          MOVE      ANSY,SRMARRAY[6]             * NTE mandatory
          MOVE      NTESEGMT,SAVSEGMT            * save segment id
          GOTO      VSRM9999
.
VSRM9100  
.0861257  MOVE      MSEQCAPT,ERRORDSC
.0861257  MOVE      "100",ERRORNUM
.0861257  CALL      EROR0000
.
VSRM9999  RETURN
+
.*****************************************************************************
.*                              VA030000           Called by: PROC0000       *
.*              Validate the ADT^A03 message segments                        *
.*     MSH (mandatory - 1 only)                                              *
.*     EVN (mandatory - 1 only)                                              *
.*     PID (mandatory - 1 only)                                              *
.*     PV1 (mandatory - 1 only)                                              *
.*     PV2 (mandatory - 1 only)                                              *
.*     ZXV (mandatory - 1 only)                                              *
.*     PR1 (mandatory - 1 only)                                              *
.*     ROL (mandatory - 1 only)                                              *
.* Requires:  SAVSEGMT - saved previous segment id.                          *
.* Returns :  SAVSEGMT - updated current segment id.                         *
.*****************************************************************************
.
.         Check if this is a EVN segment.
.
VA030000  MATCH     EVNSEGMT,SEGMENT             * EVN segment ?
          GOTO      VA031000 IF NOT EQUAL        * no
.
.         Check the EVN segment was preceeded by an MSH segment
.
          MATCH     MSHSEGMT,SAVSEGMT
          GOTO      VA039100 IF NOT EQUAL
.
          MOVE      ANSY,A03ARRAY[1]             * MSH mandatory
          MOVE      ANSY,A03ARRAY[2]             * EVN mandatory
          MOVE      EVNSEGMT,SAVSEGMT            * save segment id
          GOTO      VA039999
.
.         Check if this is a PID segment
.
VA031000  MATCH     PIDSEGMT,SEGMENT
          GOTO      VA031500 IF NOT EQUAL
.
.         Check the PID segment was preceeded by an EVN segment
.
          MATCH     EVNSEGMT,SAVSEGMT
          GOTO      VA039100 IF NOT EQUAL
.
          MOVE      ANSY,A03ARRAY[3]             * PID mandatory
          MOVE      PIDSEGMT,SAVSEGMT            * save segment id
          GOTO      VA039999
.
.         Check if this is a PV1 segment
.
VA031500  MATCH     PV1SEGMT,SEGMENT
          GOTO      VA032000 IF NOT EQUAL
.
.         Check the PV1 segment was preceeded by a PID segment
.
          MATCH     PIDSEGMT,SAVSEGMT
          GOTO      VA039100 IF NOT EQUAL
.
          MOVE      ANSY,A03ARRAY[4]             * PV1 mandatory
          MOVE      PV1SEGMT,SAVSEGMT            * save segment id
          GOTO      VA039999
.
.         Check if this is a PV2 segment
.
VA032000  MATCH     PV2SEGMT,SEGMENT
          GOTO      VA032500 IF NOT EQUAL
.
.         Check the PV2 segment was preceeded by a PV1 segment
.
          MATCH     PV1SEGMT,SAVSEGMT
          GOTO      VA039100 IF NOT EQUAL
.
          MOVE      ANSY,A03ARRAY[5]             * PV2 mandatory
          MOVE      PV2SEGMT,SAVSEGMT            * save segment id
          GOTO      VA039999
.
.         Check if this is a ZXV segment
.
VA032500  MATCH     ZXVSEGMT,SEGMENT
          GOTO      VA033000 IF NOT EQUAL
.
.         Check the ZXV segment was preceeded by a PV2 segment
.
          MATCH     PV2SEGMT,SAVSEGMT
          GOTO      VA039100 IF NOT EQUAL
.
          MOVE      ANSY,A03ARRAY[6]             * ZXV mandatory
          MOVE      ZXVSEGMT,SAVSEGMT            * save segment id
          GOTO      VA039999
.
.         Check if this is a PR1 segment
.
VA033000  MATCH     PR1SEGMT,SEGMENT
          GOTO      VA033500 IF NOT EQUAL
.
.         Check the PR1 segment was preceeded by a ZXV segment
.
          MATCH     ZXVSEGMT,SAVSEGMT
          GOTO      VA039100 IF NOT EQUAL
.
          MOVE      ANSY,A03ARRAY[7]             * PR1 mandatory
          MOVE      PR1SEGMT,SAVSEGMT            * save segment id
          GOTO      VA039999
.
.         Check if this is a ROL segment
.
VA033500  MATCH     ROLSEGMT,SEGMENT
          GOTO      VA039999 IF NOT EQUAL
.
.         Check the ROL segment was preceeded by a PR1 segment
.
          MATCH     PR1SEGMT,SAVSEGMT
          GOTO      VA039100 IF NOT EQUAL
.
          MOVE      ANSY,A03ARRAY[8]             * ROL mandatory
          MOVE      ROLSEGMT,SAVSEGMT            * save segment id
          GOTO      VA039999
.
VA039100  MOVE      MSEQCAPT,ERRORDSC
          MOVE      "100",ERRORNUM
          CALL      EROR0000
.
VA039999  RETURN
+
.*****************************************************************************
.*                              VMFN0000           Called by: PROC0000       *
.*        Validate the MFN^M02  message segment                              *
.*     MSH (mandatory - 1 only)                                              *
.*     MFI (mandatory - 1 only)                                              *
.*     MFE (mandatory - 1 only)                                              *
.*     STF (mandatory - 1 only)                                              *
.*     PRA (optional - 1 only)                                               *
.*     ZPR (optional - 1 only)                                               *
.*     ZST (optional - 1 only)                                               *
.*     ZSF (optional - 0 or more)                                            *
.* Requires:  SAVSEGMT - saved previous segment id.                          *
.* Returns :  SAVSEGMT - updated current segment id.                         *
.*****************************************************************************
.
.         Check if this is an MFI segment.
.
VMFN0000  MATCH     MFISEGMT,SEGMENT             * MFI segment ?
          GOTO      VMFN1000 IF NOT EQUAL        * no
.
.         Check the MFI segment was preceeded by an MSH segment
.
          MATCH     MSHSEGMT,SAVSEGMT            * MSH segment ?
          GOTO      VMFN9100 IF NOT EQUAL        * no
.
          MOVE      ANSY,M02ARRAY[1]             * MSH mandatory
          MOVE      ANSY,M02ARRAY[2]             * MFI mandatory
          MOVE      MFISEGMT,SAVSEGMT            * save segment id
          GOTO      VMFN9999
.
.         Check if this is a MFE segment
.
VMFN1000  MATCH     MFESEGMT,SEGMENT             * MFE segment ?
          GOTO      VMFN1500 IF NOT EQUAL        * no
.
.         Check the MFE segment was preceeded by an MFI segment
.
          MATCH     MFISEGMT,SAVSEGMT
          GOTO      VMFN9100 IF NOT EQUAL
.
          MOVE      ANSY,M02ARRAY[3]             * MFE mandatory
          MOVE      MFESEGMT,SAVSEGMT            * save segment id
          GOTO      VMFN9999
.
.         Check if this is a STF segment
.
VMFN1500  MATCH     STFSEGMT,SEGMENT
          GOTO      VMFN2000 IF NOT EQUAL
.
.         Check the STF segment was preceeded by an MFE segment
.
          MATCH     MFESEGMT,SAVSEGMT
          GOTO      VMFN9100 IF NOT EQUAL
.
          MOVE      ANSY,M02ARRAY[4]             * STF mandatory
          MOVE      STFSEGMT,SAVSEGMT            * save segment id
          GOTO      VMFN9999
.
.         Check if this is an PRA segment
.
VMFN2000  MATCH     PRASEGMT,SEGMENT
          GOTO      VMFN2500 IF NOT EQUAL
.
.         Check the PRA segment was preceeded by an STF segment
.
          MATCH     STFSEGMT,SAVSEGMT
          GOTO      VMFN9100 IF NOT EQUAL
.
          MOVE      ANSY,M02ARRAY[5]             * PRA mandatory
          MOVE      PRASEGMT,SAVSEGMT            * save segment id
          GOTO      VMFN9999
.
.         Check if this is a ZPR segment
.
VMFN2500  MATCH     ZPRSEGMT,SEGMENT
          GOTO      VMFN3000 IF NOT EQUAL
.
.         Check the ZPR segment was preceeded by a PRA segment
.
          MATCH     PRASEGMT,SAVSEGMT
          GOTO      VMFN9100 IF NOT EQUAL
.
          MOVE      ANSY,M02ARRAY[6]             * ZPR mandatory
          MOVE      ZPRSEGMT,SAVSEGMT            * save segment id
          GOTO      VMFN9999
.
.         Check if this is a ZST segment
.
VMFN3000  MATCH     ZSTSEGMT,SEGMENT
          GOTO      VMFN3500 IF NOT EQUAL
.
.         Check the ZST segment was preceeded by an ZPR segment
.
          MATCH     ZPRSEGMT,SAVSEGMT
          GOTO      VMFN9100 IF NOT EQUAL
.
          MOVE      ANSY,M02ARRAY[7]             * ZST optional anyway
          MOVE      ZSTSEGMT,SAVSEGMT            * save segment id
          GOTO      VMFN9999
.
.         Check if this is a ZSF segment
.
VMFN3500  MATCH     ZSFSEGMT,SEGMENT
          GOTO      VMFN9999 IF NOT EQUAL
.
.         Check the ZSF segment was preceeded by an ZST segment
.
          IF        ZSFCOUNT = 0
            MATCH     ZSTSEGMT,SAVSEGMT
            GOTO      VMFN9100 IF NOT EQUAL
          ELSE
            MATCH     ZSFSEGMT,SAVSEGMT
            GOTO      VMFN9100 IF NOT EQUAL
          ENDIF
.
          MOVE      ANSY,M02ARRAY[8]             * ZSF optional anyway
          MOVE      ZSFSEGMT,SAVSEGMT            * save segment id
          GOTO      VMFN9999
.
VMFN9100  MOVE      MSEQCAPT,ERRORDSC
          MOVE      "100",ERRORNUM
          CALL      EROR0000
.
VMFN9999  RETURN
+
.*****************************************************************************
.*                              VA050000           Called by: PROC0000       *
.*              Validate the ADT^A05 message segments                        *
.*     MSH (mandatory - 1 only)                                              *
.*     EVN (mandatory - 1 only)                                              *
.*     PID (mandatory - 1 only)                                              *
.*     PV1 (mandatory - 1 only)                                              *
.*     PV2 (mandatory - 1 only)                                              *
.*     DG1 (optional - 1 only)                                               *
.* Requires:  SAVSEGMT - saved previous segment id.                          *
.* Returns :  SAVSEGMT - updated current segment id.                         *
.*****************************************************************************
.
.         Check if this is a EVN segment.
.
VA050000  MATCH     EVNSEGMT,SEGMENT             * EVN segment ?
          GOTO      VA051000 IF NOT EQUAL        * no
.
.         Check the EVN segment was preceeded by an MSH segment
.
          MATCH     MSHSEGMT,SAVSEGMT
          GOTO      VA059100 IF NOT EQUAL
.
          MOVE      ANSY,A05ARRAY[1]             * MSH mandatory
          MOVE      ANSY,A05ARRAY[2]             * EVN mandatory
          MOVE      EVNSEGMT,SAVSEGMT            * save segment id
          GOTO      VA059999
.
.         Check if this is a PID segment
.
VA051000  MATCH     PIDSEGMT,SEGMENT
          GOTO      VA051500 IF NOT EQUAL
.
.         Check the PID segment was preceeded by an EVN segment
.
          MATCH     EVNSEGMT,SAVSEGMT
          GOTO      VA059100 IF NOT EQUAL
.
          MOVE      ANSY,A05ARRAY[3]             * PID mandatory
          MOVE      PIDSEGMT,SAVSEGMT            * save segment id
          GOTO      VA059999
.
.         Check if this is a PV1 segment
.
VA051500  MATCH     PV1SEGMT,SEGMENT
          GOTO      VA051600 IF NOT EQUAL
.
.         Check the PV1 segment was preceeded by a PID segment
.
          MATCH     PIDSEGMT,SAVSEGMT
          GOTO      VA059100 IF NOT EQUAL
.
          MOVE      ANSY,A05ARRAY[4]             * PV1 mandatory
          MOVE      PV1SEGMT,SAVSEGMT            * save segment id
          GOTO      VA059999
.
.         Check if this is a PV2 segment
.
VA051600  MATCH     PV2SEGMT,SEGMENT
          GOTO      VA051700 IF NOT EQUAL
.
.         Check the PV2 segment was preceeded by a PV1 segment
.
          MATCH     PV1SEGMT,SAVSEGMT
          GOTO      VA059100 IF NOT EQUAL
.
          MOVE      ANSY,A05ARRAY[5]             * PV2 mandatory
          MOVE      PV2SEGMT,SAVSEGMT            * save segment id
          GOTO      VA059999
.
.         Check if this is a DG1 segment
.
VA051700  MATCH     DG1SEGMT,SEGMENT
          GOTO      VA059999 IF NOT EQUAL
.
.         Check the DG1 segment was preceeded by a PV2 segment
.
          MATCH     PV2SEGMT,SAVSEGMT
          GOTO      VA059100 IF NOT EQUAL
.
          MOVE      ANSY,A05ARRAY[6]             * DG1 optional so irrelevant
          MOVE      DG1SEGMT,SAVSEGMT            * save segment id
          GOTO      VA059999
.
VA059100  MOVE      MSEQCAPT,ERRORDSC
          MOVE      "100",ERRORNUM
          CALL      EROR0000
.
VA059999  RETURN
+
.*****************************************************************************
.*                              VS120000           Called by: PROC0000       *
.*              Validate the SIU^S12 message segments                        *
.*     MSH (mandatory - 1 only)                                              *
.*     SCH (mandatory - 1 only)                                              *
.*     PID (mandatory - 1 only)                                              *
.*     PV1 (mandatory - 1 only)                                              *
.* Requires:  SAVSEGMT - saved previous segment id.                          *
.* Returns :  SAVSEGMT - updated current segment id.                         *
.*****************************************************************************
.
.         Check if this is an SCH segment.
.
VS120000  MATCH     SCHSEGMT,SEGMENT             * SCH segment ?
          GOTO      VS121000 IF NOT EQUAL        * no
.
.         Check the SCH segment was preceeded by an MSH segment
.
          MATCH     MSHSEGMT,SAVSEGMT
          GOTO      VS129100 IF NOT EQUAL
.
          MOVE      ANSY,S12ARRAY[1]             * MSH mandatory
          MOVE      ANSY,S12ARRAY[2]             * SCH mandatory
          MOVE      SCHSEGMT,SAVSEGMT            * save segment id
          GOTO      VS129999
.
.         Check if this is a PID segment
.
VS121000  MATCH     PIDSEGMT,SEGMENT
          GOTO      VS121500 IF NOT EQUAL
.
.         Check the PID segment was preceeded by an SCH segment
.
          MATCH     SCHSEGMT,SAVSEGMT
          GOTO      VS129100 IF NOT EQUAL
.
          MOVE      ANSY,S12ARRAY[3]             * PID mandatory
          MOVE      PIDSEGMT,SAVSEGMT            * save segment id
          GOTO      VS129999
.
.         Check if this is a PV1 segment
.
VS121500  MATCH     PV1SEGMT,SEGMENT
          GOTO      VS129999 IF NOT EQUAL
.
.         Check the PV1 segment was preceeded by a PID segment
.
          MATCH     PIDSEGMT,SAVSEGMT
          GOTO      VS129100 IF NOT EQUAL
.
          MOVE      ANSY,S12ARRAY[4]             * PV1 mandatory
          MOVE      PV1SEGMT,SAVSEGMT            * save segment id
          GOTO      VS129999
.
VS129100  MOVE      MSEQCAPT,ERRORDSC
          MOVE      "100",ERRORNUM
          CALL      EROR0000
.
VS129999  RETURN
+
.*****************************************************************************
.*                              VS130000           Called by: PROC0000       *
.*              Validate the SIU^S13 message segments                        *
.*     MSH (mandatory - 1 only)                                              *
.*     SCH (mandatory - 1 only)                                              *
.*     PID (mandatory - 1 only)                                              *
.*     PV1 (mandatory - 1 only)                                              *
.* Requires:  SAVSEGMT - saved previous segment id.                          *
.* Returns :  SAVSEGMT - updated current segment id.                         *
.*****************************************************************************
.
.         Check if this is an SCH segment.
.
VS130000  MATCH     SCHSEGMT,SEGMENT             * SCH segment ?
          GOTO      VS131000 IF NOT EQUAL        * no
.
.         Check the SCH segment was preceeded by an MSH segment
.
          MATCH     MSHSEGMT,SAVSEGMT
          GOTO      VS139100 IF NOT EQUAL
.
          MOVE      ANSY,S13ARRAY[1]             * MSH mandatory
          MOVE      ANSY,S13ARRAY[2]             * SCH mandatory
          MOVE      SCHSEGMT,SAVSEGMT            * save segment id
          GOTO      VS139999
.
.         Check if this is a PID segment
.
VS131000  MATCH     PIDSEGMT,SEGMENT
          GOTO      VS131500 IF NOT EQUAL
.
.         Check the PID segment was preceeded by an SCH segment
.
          MATCH     SCHSEGMT,SAVSEGMT
          GOTO      VS139100 IF NOT EQUAL
.
          MOVE      ANSY,S13ARRAY[3]             * PID mandatory
          MOVE      PIDSEGMT,SAVSEGMT            * save segment id
          GOTO      VS139999
.
.         Check if this is a PV1 segment
.
VS131500  MATCH     PV1SEGMT,SEGMENT
          GOTO      VS139999 IF NOT EQUAL
.
.         Check the PV1 segment was preceeded by a PID segment
.
          MATCH     PIDSEGMT,SAVSEGMT
          GOTO      VS139100 IF NOT EQUAL
.
          MOVE      ANSY,S13ARRAY[4]             * PV1 mandatory
          MOVE      PV1SEGMT,SAVSEGMT            * save segment id
          GOTO      VS139999
.
VS139100  MOVE      MSEQCAPT,ERRORDSC
          MOVE      "100",ERRORNUM
          CALL      EROR0000
.
VS139999  RETURN
+
.*****************************************************************************
.*                              VS140000           Called by: PROC0000       *
.*              Validate the SIU^S14 message segments                        *
.*     MSH (mandatory - 1 only)                                              *
.*     SCH (mandatory - 1 only)                                              *
.*     PID (mandatory - 1 only)                                              *
.*     PV1 (mandatory - 1 only)                                              *
.*     RGS (mandatory - 1 only - only required for THE messages)             *
.*     ZSC (mandatory - 1 only - only required for THE messages)             *
.* Requires:  SAVSEGMT - saved previous segment id.                          *
.* Returns :  SAVSEGMT - updated current segment id.                         *
.*****************************************************************************
.
.         Check if this is an SCH segment.
.
VS140000  MATCH     SCHSEGMT,SEGMENT             * SCH segment ?
          GOTO      VS141000 IF NOT EQUAL        * no
.
.         Check the SCH segment was preceeded by an MSH segment
.
          MATCH     MSHSEGMT,SAVSEGMT
          GOTO      VS149100 IF NOT EQUAL
.
          MOVE      ANSY,S14ARRAY[1]             * MSH mandatory
          MOVE      ANSY,S14ARRAY[2]             * SCH mandatory
          MOVE      SCHSEGMT,SAVSEGMT            * save segment id
          GOTO      VS149999
.
.         Check if this is a PID segment
.
VS141000  MATCH     PIDSEGMT,SEGMENT
          GOTO      VS141500 IF NOT EQUAL
.
.         Check the PID segment was preceeded by an SCH segment
.
          MATCH     SCHSEGMT,SAVSEGMT
          GOTO      VS149100 IF NOT EQUAL
.
          MOVE      ANSY,S14ARRAY[3]             * PID mandatory
          MOVE      PIDSEGMT,SAVSEGMT            * save segment id
          GOTO      VS149999
.
.         Check if this is a PV1 segment
.
VS141500  MATCH     PV1SEGMT,SEGMENT
          GOTO      VS141600 IF NOT EQUAL
.
.         Check the PV1 segment was preceeded by a PID segment
.
          MATCH     PIDSEGMT,SAVSEGMT
          GOTO      VS149100 IF NOT EQUAL
.
          MOVE      ANSY,S14ARRAY[4]             * PV1 mandatory
          MOVE      PV1SEGMT,SAVSEGMT            * save segment id
          GOTO      VS149999
.
.         Check if this is an RGS segment
.
VS141600  MATCH     RGSSEGMT,SEGMENT
          GOTO      VS141700 IF NOT EQUAL
.
          MATCH     "2.4",MSH01201
          GOTO      VS149999 IF EQUAL            * only mandatory for THE visit
.
.         Check the RGS segment was preceeded by a PV1 segment
.
          MATCH     PV1SEGMT,SAVSEGMT
          GOTO      VS149100 IF NOT EQUAL
.
          MOVE      ANSY,S14ARRAY[5]             * RGS mandatory
          MOVE      RGSSEGMT,SAVSEGMT            * save segment id
          GOTO      VS149999
.
.         Check if this is a ZSC segment
.
VS141700  MATCH     ZSCSEGMT,SEGMENT
          GOTO      VS149999 IF NOT EQUAL
.
          MATCH     "2.4",MSH01201
          GOTO      VS149999 IF EQUAL            * only mandatory for THE visit
.
.         Check the ZSC segment was preceeded by a RGS segment
.
          MATCH     RGSSEGMT,SAVSEGMT
          GOTO      VS149100 IF NOT EQUAL
.
          MOVE      ANSY,S14ARRAY[6]             * ZSC mandatory
          MOVE      ZSCSEGMT,SAVSEGMT            * save segment id
          GOTO      VS149999
.
VS149100  MOVE      MSEQCAPT,ERRORDSC
          MOVE      "100",ERRORNUM
          CALL      EROR0000
.
VS149999  RETURN
+
.*****************************************************************************
.*                              VS150000           Called by: PROC0000       *
.*              Validate the SIU^S15 message segments                        *
.*     MSH (mandatory - 1 only)                                              *
.*     SCH (mandatory - 1 only)                                              *
.*     PID (mandatory - 1 only)                                              *
.*     PV1 (mandatory - 1 only)                                              *
.* Requires:  SAVSEGMT - saved previous segment id.                          *
.* Returns :  SAVSEGMT - updated current segment id.                         *
.*****************************************************************************
.
.         Check if this is an SCH segment.
.
VS150000  MATCH     SCHSEGMT,SEGMENT             * SCH segment ?
          GOTO      VS151000 IF NOT EQUAL        * no
.
.         Check the SCH segment was preceeded by an MSH segment
.
          MATCH     MSHSEGMT,SAVSEGMT
          GOTO      VS159100 IF NOT EQUAL
.
          MOVE      ANSY,S15ARRAY[1]             * MSH mandatory
          MOVE      ANSY,S15ARRAY[2]             * SCH mandatory
          MOVE      SCHSEGMT,SAVSEGMT            * save segment id
          GOTO      VS159999
.
.         Check if this is a PID segment
.
VS151000  MATCH     PIDSEGMT,SEGMENT
          GOTO      VS151500 IF NOT EQUAL
.
.         Check the PID segment was preceeded by an SCH segment
.
          MATCH     SCHSEGMT,SAVSEGMT
          GOTO      VS159100 IF NOT EQUAL
.
          MOVE      ANSY,S15ARRAY[3]             * PID mandatory
          MOVE      PIDSEGMT,SAVSEGMT            * save segment id
          GOTO      VS159999
.
.         Check if this is a PV1 segment
.
VS151500  MATCH     PV1SEGMT,SEGMENT
          GOTO      VS159999 IF NOT EQUAL
.
.         Check the PV1 segment was preceeded by a PID segment
.
          MATCH     PIDSEGMT,SAVSEGMT
          GOTO      VS159100 IF NOT EQUAL
.
          MOVE      ANSY,S15ARRAY[4]             * PV1 mandatory
          MOVE      PV1SEGMT,SAVSEGMT            * save segment id
          GOTO      VS159999
.
VS159100  MOVE      MSEQCAPT,ERRORDSC
          MOVE      "100",ERRORNUM
          CALL      EROR0000
.
VS159999  RETURN
+
.*****************************************************************************
.*                              VS260000           Called by: PROC0000       *
.*              Validate the SIU^S26 message segments                        *
.*     MSH (mandatory - 1 only)                                              *
.*     SCH (mandatory - 1 only)                                              *
.*     PID (mandatory - 1 only)                                              *
.*     PV1 (mandatory - 1 only)                                              *
.* Requires:  SAVSEGMT - saved previous segment id.                          *
.* Returns :  SAVSEGMT - updated current segment id.                         *
.*****************************************************************************
.
.         Check if this is an SCH segment.
.
VS260000  MATCH     SCHSEGMT,SEGMENT             * SCH segment ?
          GOTO      VS261000 IF NOT EQUAL        * no
.
.         Check the SCH segment was preceeded by an MSH segment
.
          MATCH     MSHSEGMT,SAVSEGMT
          GOTO      VS269100 IF NOT EQUAL
.
          MOVE      ANSY,S26ARRAY[1]             * MSH mandatory
          MOVE      ANSY,S26ARRAY[2]             * SCH mandatory
          MOVE      SCHSEGMT,SAVSEGMT            * save segment id
          GOTO      VS269999
.
.         Check if this is a PID segment
.
VS261000  MATCH     PIDSEGMT,SEGMENT
          GOTO      VS261500 IF NOT EQUAL
.
.         Check the PID segment was preceeded by an SCH segment
.
          MATCH     SCHSEGMT,SAVSEGMT
          GOTO      VS269100 IF NOT EQUAL
.
          MOVE      ANSY,S26ARRAY[3]             * PID mandatory
          MOVE      PIDSEGMT,SAVSEGMT            * save segment id
          GOTO      VS269999
.
.         Check if this is a PV1 segment
.
VS261500  MATCH     PV1SEGMT,SEGMENT
          GOTO      VS269999 IF NOT EQUAL
.
.         Check the PV1 segment was preceeded by a PID segment
.
          MATCH     PIDSEGMT,SAVSEGMT
          GOTO      VS269100 IF NOT EQUAL
.
          MOVE      ANSY,S26ARRAY[4]             * PV1 mandatory
          MOVE      PV1SEGMT,SAVSEGMT            * save segment id
          GOTO      VS269999
.
VS269100  MOVE      MSEQCAPT,ERRORDSC
          MOVE      "100",ERRORNUM
          CALL      EROR0000
.
VS269999  RETURN
+
.*****************************************************************************
.*                              VA080000           Called by: PROC0000       *
.*              Validate the ADT^A08 message segments                        *
.*     MSH (mandatory - 1 only)                                              *
.*     EVN (mandatory - 1 only)                                              *
.*     PID (mandatory - 1 only)                                              *
.*     PV1 (mandatory - 1 only)                                              *
.*     PV2 (webPAS mandatory - 1 only - not required for ED messages)        *
.*     DG1 (webPAS optional - 1 or more - ED A08 messages only)              *
.*     ZXV (webPAS optional - 1 only)                                        *
.*     ZTR (webPAS optional - 1 only - ED messages only)                     *
.*     ZNT (webPAS optional - 1 only - ED messages only)                     *
.* Requires:  SAVSEGMT - saved previous segment id.                          *
.* Returns :  SAVSEGMT - updated current segment id.                         *
.*****************************************************************************
.
.         Check if this is a EVN segment.
.
VA080000  MATCH     EVNSEGMT,SEGMENT             * EVN segment ?
          GOTO      VA081000 IF NOT EQUAL        * no
.
.         Check the EVN segment was preceeded by an MSH segment
.
          MATCH     MSHSEGMT,SAVSEGMT
          GOTO      VA089100 IF NOT EQUAL
.
          MOVE      ANSY,A08ARRAY[1]             * MSH mandatory
          MOVE      ANSY,A08ARRAY[2]             * EVN mandatory
          MOVE      EVNSEGMT,SAVSEGMT            * save segment id
          GOTO      VA089999
.
.         Check if this is a PID segment
.
VA081000  MATCH     PIDSEGMT,SEGMENT
          GOTO      VA081500 IF NOT EQUAL
.
.         Check the PID segment was preceeded by an EVN segment
.
          MATCH     EVNSEGMT,SAVSEGMT
          GOTO      VA089100 IF NOT EQUAL
.
          MOVE      ANSY,A08ARRAY[3]             * PID mandatory
          MOVE      PIDSEGMT,SAVSEGMT            * save segment id
          GOTO      VA089999
.
.         Check if this is a PV1 segment
.
VA081500  MATCH     PV1SEGMT,SEGMENT
          GOTO      VA081600 IF NOT EQUAL
.
.         Check the PV1 segment was preceeded by a PID segment
.
          MATCH     PIDSEGMT,SAVSEGMT
          GOTO      VA089100 IF NOT EQUAL
.
          MOVE      ANSY,A08ARRAY[4]             * PV1 mandatory
          MOVE      PV1SEGMT,SAVSEGMT            * save segment id
          GOTO      VA089999
.
.         Check if this is a PV2 segment
.
VA081600  MATCH     PV2SEGMT,SEGMENT
          GOTO      VA081700 IF NOT EQUAL
.
          MATCH     ANSE,PV100201
          GOTO      VA089999 IF EQUAL            * not mandatory for EMR visit
.
.         Check the PV2 segment was preceeded by a PV1 segment
.
          MATCH     PV1SEGMT,SAVSEGMT
          GOTO      VA089100 IF NOT EQUAL
.
          MOVE      ANSY,A08ARRAY[5]             * PV2 mandatory
          MOVE      PV2SEGMT,SAVSEGMT            * save segment id
          GOTO      VA089999
.
.         Check if this is a ZXV segment
.
VA081700  MATCH     ZXVSEGMT,SEGMENT
          GOTO      VA089999 IF NOT EQUAL
.
.         Check the ZXV segment was preceeded by a PV2 segment
.
          MATCH     ANSE,PV100201
          IF        !@EQUAL
            MATCH     PV2SEGMT,SAVSEGMT
            GOTO      VA089100 IF NOT EQUAL      * not mandatory for EMR visit
          ENDIF
.
          MOVE      ANSY,A08ARRAY[6]             * ZXV optional so irrelevant
          MOVE      ZXVSEGMT,SAVSEGMT            * save segment id
          GOTO      VA089999
.
VA089100  MOVE      MSEQCAPT,ERRORDSC
          MOVE      "100",ERRORNUM
          CALL      EROR0000
.
VA089999  RETURN
+
.*****************************************************************************
.*                              VA210000           Called by: PROC0000       *
.*              Validate the ADT^A21 message segments                        *
.*     MSH (mandatory - 1 only)                                              *
.*     EVN (mandatory - 1 only)                                              *
.*     PID (mandatory - 1 only)                                              *
.*     PV1 (mandatory - 1 only)                                              *
.*     ZXV (webPAS mandatory - 1 only)                                       *
.* Requires:  SAVSEGMT - saved previous segment id.                          *
.* Returns :  SAVSEGMT - updated current segment id.                         *
.*****************************************************************************
.
.         Check if this is a EVN segment.
.
VA210000  MATCH     EVNSEGMT,SEGMENT             * EVN segment ?
          GOTO      VA211000 IF NOT EQUAL        * no
.
.         Check the EVN segment was preceeded by an MSH segment
.
          MATCH     MSHSEGMT,SAVSEGMT
          GOTO      VA219100 IF NOT EQUAL
.
          MOVE      ANSY,A21ARRAY[1]             * MSH mandatory
          MOVE      ANSY,A21ARRAY[2]             * EVN mandatory
          MOVE      EVNSEGMT,SAVSEGMT            * save segment id
          GOTO      VA219999
.
.         Check if this is a PID segment
.
VA211000  MATCH     PIDSEGMT,SEGMENT
          GOTO      VA211500 IF NOT EQUAL
.
.         Check the PID segment was preceeded by an EVN segment
.
          MATCH     EVNSEGMT,SAVSEGMT
          GOTO      VA219100 IF NOT EQUAL
.
          MOVE      ANSY,A21ARRAY[3]             * PID mandatory
          MOVE      PIDSEGMT,SAVSEGMT            * save segment id
          GOTO      VA219999
.
.         Check if this is a PV1 segment
.
VA211500  MATCH     PV1SEGMT,SEGMENT
          GOTO      VA211600 IF NOT EQUAL
.
.         Check the PV1 segment was preceeded by a PID segment
.
          MATCH     PIDSEGMT,SAVSEGMT
          GOTO      VA219100 IF NOT EQUAL
.
          MOVE      ANSY,A21ARRAY[4]             * PV1 mandatory
          MOVE      PV1SEGMT,SAVSEGMT            * save segment id
          GOTO      VA219999
.
.         Check if this is a ZXV segment
.
VA211600  MATCH     ZXVSEGMT,SEGMENT
          GOTO      VA219999 IF NOT EQUAL
.
.         Check the ZXV segment was preceeded by a PV1 segment
.
          MATCH     PV1SEGMT,SAVSEGMT
          GOTO      VA219100 IF NOT EQUAL
.
          MOVE      ANSY,A21ARRAY[5]             * ZXV mandatory
          MOVE      ZXVSEGMT,SAVSEGMT            * save segment id
          GOTO      VA219999
.
VA219100  MOVE      MSEQCAPT,ERRORDSC
          MOVE      "100",ERRORNUM
          CALL      EROR0000
.
VA219999  RETURN
+
.*****************************************************************************
.*                              VA220000           Called by: PROC0000       *
.*              Validate the ADT^A22 message segments                        *
.*     MSH (mandatory - 1 only)                                              *
.*     EVN (mandatory - 1 only)                                              *
.*     PID (mandatory - 1 only)                                              *
.*     PV1 (mandatory - 1 only)                                              *
.*     ZXV (webPAS mandatory - 1 only)                                       *
.* Requires:  SAVSEGMT - saved previous segment id.                          *
.* Returns :  SAVSEGMT - updated current segment id.                         *
.*****************************************************************************
.
.         Check if this is a EVN segment.
.
VA220000  MATCH     EVNSEGMT,SEGMENT             * EVN segment ?
          GOTO      VA221000 IF NOT EQUAL        * no
.
.         Check the EVN segment was preceeded by an MSH segment
.
          MATCH     MSHSEGMT,SAVSEGMT
          GOTO      VA229100 IF NOT EQUAL
.
          MOVE      ANSY,A22ARRAY[1]             * MSH mandatory
          MOVE      ANSY,A22ARRAY[2]             * EVN mandatory
          MOVE      EVNSEGMT,SAVSEGMT            * save segment id
          GOTO      VA229999
.
.         Check if this is a PID segment
.
VA221000  MATCH     PIDSEGMT,SEGMENT
          GOTO      VA221500 IF NOT EQUAL
.
.         Check the PID segment was preceeded by an EVN segment
.
          MATCH     EVNSEGMT,SAVSEGMT
          GOTO      VA229100 IF NOT EQUAL
.
          MOVE      ANSY,A22ARRAY[3]             * PID mandatory
          MOVE      PIDSEGMT,SAVSEGMT            * save segment id
          GOTO      VA229999
.
.         Check if this is a PV1 segment
.
VA221500  MATCH     PV1SEGMT,SEGMENT
          GOTO      VA221600 IF NOT EQUAL
.
.         Check the PV1 segment was preceeded by a PID segment
.
          MATCH     PIDSEGMT,SAVSEGMT
          GOTO      VA229100 IF NOT EQUAL
.
          MOVE      ANSY,A22ARRAY[4]             * PV1 mandatory
          MOVE      PV1SEGMT,SAVSEGMT            * save segment id
          GOTO      VA229999
.
.         Check if this is a ZXV segment
.
VA221600  MATCH     ZXVSEGMT,SEGMENT
          GOTO      VA229999 IF NOT EQUAL
.
.         Check the ZXV segment was preceeded by a PV1 segment
.
          MATCH     PV1SEGMT,SAVSEGMT
          GOTO      VA229100 IF NOT EQUAL
.
          MOVE      ANSY,A22ARRAY[5]             * ZXV mandatory
          MOVE      ZXVSEGMT,SAVSEGMT            * save segment id
          GOTO      VA229999
.
VA229100  MOVE      MSEQCAPT,ERRORDSC
          MOVE      "100",ERRORNUM
          CALL      EROR0000
.
VA229999  RETURN
+
.*****************************************************************************
.*                              PPMI0000           Called by: PROC0000       *
.*              Process the message - write/update PMI details               *
.*****************************************************************************
.
PPMI0000  IF        MESSGNUM = 13
            MATCH     "1",PTCNUP31
            IF        @EQUAL
              DISPLAY   "Updating PMI record",*R,*N;
              CALL      UPDUR                    * update PMI for A08s (0887136)
              CALL      WRUPDD00                 * write demographics updated
            ENDIF
            GOTO      PPMI0050
          ENDIF
.
          IF        MESSGNUM = 2
            DISPLAY   "Updating PMI record",*R,*N;
            CALL      UPDUR                      * update PMI details
            CALL      WRUPDD00                   * write demographics updated
          ELSE
            DISPLAY   "Writing new PMI record",*R,*N;
            DISPLAY   "U/R number: ",*V2LON,PURNO,*R,*N;
            CALL      WRTUR                      * create PMI record
            MOVE      PURNO,KEY8
            CALL      RDMAST1                    * read PMI before updates
            CALL      RDPMPX21
          ENDIF
.
PPMI0050  MATCH     "1",PTCNRNTY
          IF        @EQUAL
            CALL      PADI0000                   * process aliases (type A or D)
          ELSE
            CALL      PALI0000                   * process aliases
          ENDIF
          CALL      PLIN0000                     * process mother-child links
          CALL      PZAL0000                     * process alerts
          CALL      PNOK0000                     * process next of kin
.
          CALL      MULBAT00                     * process multiple births
.
.         Process all the patient identifiers
.
          MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 12
.
            MOVELPTR  PID00301[COUNTER],FORM3    * identifier populated ?
            IF        FORM3 = 0
              GOTO      PPMI1000                 * no - finished
            ENDIF
.
            MATCH     "MR",PID00305[COUNTER]     * identifier type U/R ?
            GOTO      PPMI1000 IF EQUAL          * yes - ignore U/R
.
.           We have a non U/R identifier, so load the relevant database
.           field according to its content
.
            MATCH     "MC",PID00305[COUNTER]     * identifier type Medicare ?
            GOTO      PPMI1000 IF EQUAL          * yes
.
            MATCH     "DV",PID00305[COUNTER]     * identifier type DVA ?
            GOTO      PPMI0100 IF NOT EQUAL      * no
.
            MOVE      THREE,CARDTYPE
            CALL      PCRD0000
            GOTO      PPMI1000
.
PPMI0100    MATCH     "CN",PID00305[COUNTER]     * identifier type Centrelink ?
            GOTO      PPMI0150 IF NOT EQUAL      * no
.
            MOVE      ONE,CARDTYPE
            CALL      PCRD0000
            GOTO      PPMI1000
.
PPMI0150    MATCH     "SN",PID00305[COUNTER]     * identifier type Safety Net ?
            GOTO      PPMI0200 IF NOT EQUAL      * no
.
            MOVE      TWO,CARDTYPE
            CALL      PCRD0000
            GOTO      PPMI1000
.
PPMI0200    MATCH     "PEN",PID00305[COUNTER]    * identifier type Pension # ?
            GOTO      PPMI0300 IF NOT EQUAL      * no
.
            MOVE      FOUR,CARDTYPE
            CALL      PCRD0000
            GOTO      PPMI1000
.
PPMI0300    MATCH     "UP",PID00305[COUNTER]     * identifier type UPI # ?
            GOTO      PPMI0400 IF NOT EQUAL      * no
.
            CALL      ADDUAI00                   * add UPI number as alternateID
            GOTO      PPMI1000
.
PPMI0400    MATCH     "SEN",PID00305[COUNTER]    * identifier type SEN # ?
            GOTO      PPMI0500 IF NOT EQUAL      * no
.
            MOVE      FIVE,CARDTYPE
            CALL      PCRD0000
            GOTO      PPMI1000
.
PPMI0500    MATCH     "CMO",PID00305[COUNTER]    * identifier type CMO # ?
            GOTO      PPMI0600 IF NOT EQUAL      * no
.
            MOVE      SIX,CARDTYPE
            CALL      PCRD0000
            GOTO      PPMI1000
.
PPMI0600    MATCH     "NDS",PID00305[COUNTER]    * identifier type NDS # ?
            GOTO      PPMI0700 IF NOT EQUAL      * no
.
            MOVE      SEVEN,CARDTYPE
            CALL      PCRD0000
            GOTO      PPMI1000
.
PPMI0700    MATCH     "AMB",PID00305[COUNTER]    * identifier type AMB # ?
            GOTO      PPMI1000 IF NOT EQUAL      * no
.
            MOVE      EIGHT,CARDTYPE
            CALL      PCRD0000
            GOTO      PPMI1000
.
PPMI1000    ADD       ONE,COUNTER                * increment counter
          DO
.
.         If this patient has changed from not deceased to deceased, then
.         we need to call DEATHPOL and cancel any bookings etc.
.
PPMI2000  IF        DEATHFLG = 1
            MOVE      "HL7RECVR  ",USERID
            CALL      DEAPOL00              * Update Patient Death Polling Table
          ENDIF
.
PPMI3000  IF        MESSGNUM = 2
            MATCH     "1",PTCNB31R               * allow PMI update broadcast ?
            IF        @EQUAL
              MOVE      "HL7RECVR  ",USERID
              PACK      KEY10,USERID,SP10
              CALL      RDWBSE1
              IF        OVRCD<>0
                CALL      CLWEBSEC
              ENDIF
              MOVE      WBSEPCD,PASSCODE
              CALL      PMIGTNID             * get national id for dgate write
              MOVE      NMPNUMB,PTNINMPI
              MOVE      SEVEN,HL7TRGID
              MOVE      SP8,HL7INCLD
              PROC      DGCLICUP             * broadcast PMI update (A31)
            ENDIF
          ENDIF
.
PPMI9999  RETURN
+
.------------------------------------------------------------
. Multiple Birth Patient Attributes
.------------------------------------------------------------
MULBAT00  CALL      IBACLOCK
          PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
.
          RESET     PID02401
          MATCH     SP70,PID02401
          GOTO      MULBAT90 IF EQUAL       * no action necessary
.
          MATCH     "Y",PID02401            * Add record
          GOTO      MULBAT10 IF EQUAL
.
          MATCH     "N",PID02401            * Delete record
          GOTO      MULBAT30 IF EQUAL
.
          GOTO      MULBAT90                * invalid value in PID.24
.
MULBAT10  CALL      MLTBIR00           * check for active multiple birth record
          BRANCH    EXIT,MULBAT90      * active record exists so finish
.
. Create new active record
.
          CALL      CLPATATR
          MOVE      PURNO,PTARURNO
          MOVE      ZEROUR,PTARVISN
          MOVE      CURRDATE,PTARDATE
          MOVE      CTIMEIS,PTARTIME
          MOVE      "022",PTARTYPE
          MOVE      PID02501,PTARVAL1
.0907877  MOVE      "mX",D2
.0907877  CALL      GDEFT000           * default multiple birth type (Cat mX)
          PACK      PTARCOD1,ZXP06901,SP3   * multiple birth type (Cat mX)
          MOVE      SP70,PTARCOD2      * multiple birth change reason (Cat mW)
          MOVE      "HL7RECVR",PTARCUSR
          MOVE      PTARDATE,PTARCDTE
          MOVE      PTARTIME,PTARCTME
.
          PACK      KEY35,PTARURNO,PTARDATE,PTARTIME,PTARTYPE,PTARVISN,SP70
          CALL      RAPTATR1
          IF        OVRCD = 1
            CALL      WRPTATR1
          ENDIF
.
          MOVE      PTARURNO,KEY8
          CALL      RDPMPX21
          BRANCH    OVRCD,MULBAT90
.
          MOVE      "1",PMPXSN20
          CALL      UPPMPX21           * update the patient banner indicator
.
          GOTO      MULBAT90
.
MULBAT30  CALL      MLTBIR00           * check for active multiple birth record
          COMPARE   ZERO,EXIT
          GOTO      MULBAT90 IF EQUAL  * no active record exists so finish
.
. Delete currently active record
.
          PACK      KEY35,PTARURNO,PTARDATE,PTARTIME,PTARTYPE,PTARVISN,SP70
          CALL      RDPTATR1
          BRANCH    OVRCD,MULBAT90
.
          MOVE      "1",PTARDELR
          MOVE      "mW",D2
          CALL      GDEFT000
          MOVE      D3,PTARCOD2        * default change reason (Cat mW)
.
          MOVE      CURRDATE,PTARUDTE
          MOVE      CTIMEIS,PTARUTME
          MOVE      "HL7RECVR",PTARUUSR
          MOVE      PTARUDTE,PTARFDTE
          MOVE      PTARUTME,PTARFTME
          MOVE      PTARUUSR,PTARFUSR
.
          CALL      UPPTATR1
.
          MOVE      PTARURNO,KEY8
          CALL      RDPMPX21
          BRANCH    OVRCD,MULBAT90
.
          MOVE      "0",PMPXSN20
          CALL      UPPMPX21           * update the patient banner indicator
.
MULBAT90  MOVE      ZERO,EXIT
MULBAT99  RETURN
+
.------------------------------------------------------------
. Check for currently active multiple birth record
.------------------------------------------------------------
MLTBIR00  MOVE      ZERO,EXIT                    * not active
          MOVE      "022",KEY3
          PACK      KEY35,PURNO,ZEROUR,KEY3,Z70
          CALL      RSPTATR3
MLTBIR10  CALL      RPPTATR3
          BRANCH    OVRCD,MLTBIR99
.
          MATCH     PURNO,PTARURNO
          GOTO      MLTBIR99 IF NOT EQUAL        * UR match ?
.
          MATCH     ZEROUR,PTARVISN
          GOTO      MLTBIR99 IF NOT EQUAL        * zero visit number ?
.
          MATCH     KEY3,PTARTYPE
          GOTO      MLTBIR99 IF NOT EQUAL        * type = 022 ?
.
          MATCH     "1",PTARDELR
          GOTO      MLTBIR10 IF EQUAL            * deleted = not active
.
          MATCH     SP70,PTARFDTE
          GOTO      MLTBIR10 IF NOT EQUAL        * has finish date = not active
.
          MATCH     SP70,PTARFTME
          GOTO      MLTBIR10 IF NOT EQUAL        * has finish time = not active
.
          MOVE      ONE,EXIT                     * active
MLTBIR99  RETURN
+
.------------------------------------------------------------
. Get default code for a category
.------------------------------------------------------------
GDEFT000  MOVE      SP70,D3                      * default to blank
          PACK      KEY5,D2,SP70
          CALL      RDSCODE1
GDEFT100  CALL      RDKCODE1
          BRANCH    OVRCD,GDEFT900
          MATCH     D2,TCODE
          GOTO      GDEFT900 IF NOT EQUAL
          MATCH     "1",PTCDDEFT
          GOTO      GDEFT100 IF NOT EQUAL
          MATCH     ANSI,PTCOACTV                * inactive ?
          GOTO      GDEFT100 IF EQUAL
          PACK      D3,ACODE,SP70                * default code
GDEFT900  MATCH     SP70,D3
          IF        @EQUAL
            MOVE      "Warning: No default code found for Category ",ERRORDSC
            ENDSET    ERRORDSC
            APPEND    D2,ERRORDSC
            RESET     ERRORDSC
            MOVE      "103",ERRORNUM
.0878747    CALL      EROR0000
            WRITE     TEXTFILE,SEQ;ERRORNUM,SP2,ERRORDSC        * log warning
          ENDIF
GDEFT999  RETURN
+
.*****************************************************************************
.*                              PA340000           Called by: PROC0000       *
.*              Process the message - merge PMI records                      *
.* Requires: OURNO   - merging from U/R                                      *
.*           OLDURNO - merging from U/R                                      *
.*           PURNO   - merging to U/R                                        *
.*****************************************************************************
.
PA340000  MOVE      OLDURNO,OLDURNUM
          MOVE      PURNO,NEWURNUM
          MOVE      "HL7RECVR  ",USERID
          CALL      PRS2T000                     * check if writing to prspmiaf
.
          MOVE      PURNO,NEWURNO
          CALL      CHANGEUR
          BRANCH    EXIT,PA349100:               * error
                         PA349999:               * warning  - ok to continue
                         PA349999                * warning  - ok to continue
.
          CALL      WRMRG000                     * write record to patmrgaf
          CALL      WESIM000                     * write record to watesmaf
          CALL      WPRSP000                     * write record to prspmiaf
.
          GOTO      PA349999                     * ok to continue
.
PA349100  MOVE      "Merge failed",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
.
PA349999  RETURN
+
.*****************************************************************************
.*                              PZAL0000           Called by: PPMI0000       *
.*                 Process ZAL alert segments                                *
.* Requires:  ZALCOUNT - number of ZAL segments received (with the exception *
.*                       of the ZAL "delete" segment).                       *
.*            ZALFOUND - found ZAL segment flag                              *
.*                             0 = one or more ZAL segment found             *
.*                             1 = no ZAL segment found                      *
.*            PURNO - Patient U/R                                            *
.*****************************************************************************
.
.         Check if a ZAL segment was received
.
PZAL0000  BRANCH    ZALFOUND,PZAL9999            * no ZAL segments received
.
          MATCH     "1",PTCNH7ID
          IF        @EQUAL
            CALL      PALA0000                   * alternate processing routine
            GOTO      PZAL9999
          ENDIF
.
          SUB       ONE,ZALCOUNT
          MOVE      ZALCOUNT,SVZALCNT            * save ZAL segment count
.
.         First, delete all existing alerts for this U/R
.
PZAL0010  PACK      KEY16,PURNO,SP20
          CALL      RSPTALR1                     * position on U/R
          CALL      RKPTALR1                     * read next record
          BRANCH    OVRCD,PZAL0050
.
          MATCH     PURNO,PTALURNO               * same U/R still ?
          GOTO      PZAL0050 IF NOT EQUAL        * no - finished deleting
.
          PACK      KEY16,PTALURNO,PTALCATG,PTALCODE,PTALCNTR
          CALL      DEPTALR1                     * delete record
          GOTO      PZAL0010
.
.         Now delete all alert associated comments for this U/R
.
PZAL0050  PACK      KEY19,PURNO,SP20
          CALL      RSPMALN1                     * position on U/R
          CALL      RKPMALN1                     * read next record
          BRANCH    OVRCD,PZAL0070
.
          MATCH     PURNO,PMANURNO               * same U/R still ?
          GOTO      PZAL0070 IF NOT EQUAL        * no - finised deleting
.
          PACK      KEY19,PMANURNO,PMANACAT,PMANACOD,PMANCNTR,PMANLNNO
          CALL      DEPMALN1                     * delete record
          GOTO      PZAL0050
.
PZAL0070  COMPARE   ZERO,SVZALCNT                * any ZAL's to process ?
          GOTO      PZAL9000 IF EQUAL            * no - finished
.
.         There is one or more valid ZAL segments, so process the
.         alerts from each of the ZAL segments.
.
          MOVE      ZERO,ZALCOUNT                * initialise ZAL segment count
          CALL      CLPATALR                     * clear patalraf fields
.
          PACK      KEY15,ZALSEGMT,SP20
          CALL      RSTEMP1                      * position on ZAL segment
PZAL0080  CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,PZAL0090               * eof - finished
.
          MATCH     ZALSEGMT,RTMPSEGI            * same segment still ?
          GOTO      PZAL0090 IF NOT EQUAL        * no - finished
.
          COMPARE   ZALCOUNT,RTMPSEGC            * same segment count still ?
          GOTO      PZAL0100 IF EQUAL            * yes
.
          ADD       ONE,ZALCOUNT                 * increment ZAL segment count
.
          COMPARE   ONE,ZALCOUNT                 * first ZAL segment ?
          GOTO      PZAL0100 IF EQUAL            * yes
.
.         We have a new segment and therefore have completed loading the
.         patalrtf fields for the previous ZAL segment, so write a new record
.
PZAL0090  MOVE      ZERO,FORM3                   * init. alert type count
          MOVE      PURNO,PTALURNO
PZAL0095  ADD       ONE,FORM3                    * increment counter
          MOVE      FORM3,PTALCNTR
          PACK      KEY16,PTALURNO,PTALCATG,PTALCODE,PTALCNTR
          CALL      RAPTALR1
          COMPARE   ZERO,OVRCD                   * count already on file ?
          GOTO      PZAL0095 IF EQUAL            * yes

          CALL      WRPTALR1                     * write patalrtf record
          CALL      PCOM0000                     * write associated comments
.
          SUB       ONE,SVZALCNT
          COMPARE   ZERO,SVZALCNT                * last ZAL record ?
          GOTO      PZAL9000 IF EQUAL            * yes
.
          CALL      CLPATALR                     * no - clear patalraf fields
.
.         Load the relevant field/component
.
PZAL0100  BRANCH    RTMPFLDN,PZAL0080:           * Set ID
                             PZAL0200:           * Alert Type (Category)
                             PZAL0300:           * Alert Code
                             PZAL0400:           * Reaction Code
                             PZAL0500:           * Alert Date
                             PZAL0600:           * Severity Level
                             PZAL0700:           * Review Date
                             PZAL0800:           * Date Inactive
                             PZAL0900:           * End Date
                             PZAL1000:           * Authorising HCP
                             PZAL1100:           * Last Update Date/Time
                             PZAL1200:           * User Who Last Updated
                             PZAL1300:           * Hospital
                             PZAL1400            * Comments
.
.                   Invalid field number, so ignore
.
          GOTO      PZAL0080
.
.         Alert Category
.
PZAL0200  BRANCH    RTMPCMPN,PZAL0201:           * identifier (ST)
                             PZAL0202:           * text (ST)
                             PZAL0203:           * name of coding system (ST)
                             PZAL0204:           * alternate identifier (ST)
                             PZAL0205:           * alternate text (ST)
                             PZAL0206            * name of alt. cod. system (ST)
          GOTO      PZAL0080
.
PZAL0201  MOVE      RTMPVRBL,PTALCATG            
          GOTO      PZAL0080
.
PZAL0202  GOTO      PZAL0080
.
PZAL0203  GOTO      PZAL0080
.
PZAL0204  GOTO      PZAL0080
.
PZAL0205  GOTO      PZAL0080
.
PZAL0206  GOTO      PZAL0080
.
.         Alert Code
.
PZAL0300  BRANCH    RTMPCMPN,PZAL0301:           * identifier (ST)
                             PZAL0302:           * text (ST)
                             PZAL0303:           * name of coding system (ST)
                             PZAL0304:           * alternate identifier (ST)
                             PZAL0305:           * alternate text (ST)
                             PZAL0306            * name of alt. cod. system (ST)
          GOTO      PZAL0080
.
PZAL0301  MOVE      RTMPVRBL,PTALCODE
          GOTO      PZAL0080
.
PZAL0302  GOTO      PZAL0080
.
PZAL0303  GOTO      PZAL0080
.
PZAL0304  GOTO      PZAL0080
.
PZAL0305  GOTO      PZAL0080
.
PZAL0306  GOTO      PZAL0080
.
.         Reaction Code
.
PZAL0400  BRANCH    RTMPCMPN,PZAL0401:           * identifier (ST)
                             PZAL0402:           * text (ST)
                             PZAL0403:           * name of coding system (ST)
                             PZAL0404:           * alternate identifier (ST)
                             PZAL0405:           * alternate text (ST)
                             PZAL0406            * name of alt. cod. system (ST)
          GOTO      PZAL0080
.
PZAL0401  MOVE      RTMPVRBL,PTALREAC
          GOTO      PZAL0080
.
PZAL0402  GOTO      PZAL0080
.
PZAL0403  GOTO      PZAL0080
.
PZAL0404  GOTO      PZAL0080
.
PZAL0405  GOTO      PZAL0080
.
PZAL0406  GOTO      PZAL0080
.
.         Alert Date (DT)
.
PZAL0500  BRANCH    RTMPCMPN,PZAL0501
          GOTO      PZAL0080
.
PZAL0501  MOVE      RTMPVRBL,PTALDATE
          GOTO      PZAL0080
.
.         Severity Level (NM)
.
PZAL0600  BRANCH    RTMPCMPN,PZAL0601
          GOTO      PZAL0080
.
PZAL0601  MOVE      RTMPVRBL,PTALLSEV
          GOTO      PZAL0080
.
.         Review Date (DT)
.
PZAL0700  BRANCH    RTMPCMPN,PZAL0701
          GOTO      PZAL0080
.
PZAL0701  MOVE      RTMPVRBL,PTALRDTE
          GOTO      PZAL0080
.
.         Date Inactive (DT)
.
PZAL0800  BRANCH    RTMPCMPN,PZAL0801
          GOTO      PZAL0080
.
PZAL0801  MOVE      RTMPVRBL,PTALDTIN
          GOTO      PZAL0080
.
.         End Date (DT)
.
PZAL0900  BRANCH    RTMPCMPN,PZAL0901
          GOTO      PZAL0080
.
PZAL0901  MOVE      RTMPVRBL,PTALEDAT
          GOTO      PZAL0080
.
.         Authorising HCP (XCN)
.
PZAL1000  BRANCH    RTMPCMPN,PZAL1001:           * id number (ST)
                             PZAL1002:           * family name (ST)
                             PZAL1003:           * given name (ST)
                             PZAL1004:           * middle name (ST)
                             PZAL1005:           * suffix (ST)
                             PZAL1006:           * prefix (ST)
                             PZAL1007:           * degree (IS)
                             PZAL1008:           * source table (IS)
                             PZAL1009:           * assigning authority (HD)
                             PZAL1010:           * name type code (ID)
                             PZAL1011:           * identifier check digit (ST)
                             PZAL1012:           * check digit scheme code (ID)
                             PZAL1013:           * identifier type code (IS)
                             PZAL1014:           * assigning facility (HD)
                             PZAL1015            * name representation code (ID)
          GOTO      PZAL0080
.
PZAL1001  MOVE      RTMPVRBL,PTALRQBY
          GOTO      PZAL0080
.                           
PZAL1002  GOTO      PZAL0080
.                           
PZAL1003  GOTO      PZAL0080
.                           
PZAL1004  GOTO      PZAL0080
.                           
PZAL1005  GOTO      PZAL0080
.                           
PZAL1006  GOTO      PZAL0080
.                           
PZAL1007  GOTO      PZAL0080
.                           
PZAL1008  GOTO      PZAL0080
.                           
PZAL1009  GOTO      PZAL0080
.                           
PZAL1010  GOTO      PZAL0080
.                           
PZAL1011  GOTO      PZAL0080
.                           
PZAL1012  GOTO      PZAL0080
.                           
PZAL1013  GOTO      PZAL0080
.                           
PZAL1014  GOTO      PZAL0080
.                           
PZAL1015  GOTO      PZAL0080
.
.         Last Update Date/Time (TS)
.
PZAL1100  BRANCH    RTMPCMPN,PZAL1101
          GOTO      PZAL0080
.
PZAL1101  UNPACK    RTMPVRBL,PTALCDTE,DIM8
          UNPACK    DIM8,CHOUR,CMIN,CSEC
          PACK      PTALCTIM,CHOUR,COLON,CMIN,COLON,CSEC
          GOTO      PZAL0080
.
.         User Who Last Updated (CE)
.
PZAL1200  BRANCH    RTMPCMPN,PZAL1201:           * identifier (ST)
                             PZAL1202:           * text (ST)
                             PZAL1203:           * name of coding system (ST)
                             PZAL1204:           * alternate identifier (ST)
                             PZAL1205:           * alternate text (ST)
                             PZAL1206            * name of alt. cod. system (ST)
          GOTO      PZAL0080
.
PZAL1201  MOVE      RTMPVRBL,PTALUSID
          GOTO      PZAL0080
.
PZAL1202  GOTO      PZAL0080
.
PZAL1203  GOTO      PZAL0080
.
PZAL1204  GOTO      PZAL0080
.
PZAL1205  GOTO      PZAL0080
.
PZAL1206  GOTO      PZAL0080
.
.         Hospital (CE)
.
PZAL1300  BRANCH    RTMPCMPN,PZAL1301:           * identifier (ST)
                             PZAL1302:           * text (ST)
                             PZAL1303:           * name of coding system (ST)
                             PZAL1304:           * alternate identifier (ST)
                             PZAL1305:           * alternate text (ST)
                             PZAL1306            * name of alt. cod. system (ST)
          GOTO      PZAL0080
.
PZAL1301  MOVE      RTMPVRBL,PTALHOSP
          GOTO      PZAL0080
.
PZAL1302  GOTO      PZAL0080
.
PZAL1303  GOTO      PZAL0080
.
PZAL1304  GOTO      PZAL0080
.
PZAL1305  GOTO      PZAL0080
.
PZAL1306  GOTO      PZAL0080
.
.         Comments (ST)
.         Comments are processed and loaded after the patalrtf record is
.         written.
.
PZAL1400  BRANCH    RTMPCMPN,PZAL1401
          GOTO      PZAL0080
.
PZAL1401  MOVE      RTMPVRBL,COMMVRBL
          GOTO      PZAL0080
.
PZAL9000  CALL      SETA0000                     * set pmi alert flags
.
PZAL9999  RETURN
+
.*****************************************************************************
.*                              PALA0000           Called by: PZAL0000       *
.*     Process repeating ZAL segments where the delete segment is being      *
.*     ignored.                                                              *
.* Requires:  ZALCOUNT - number of ZAL segments received (with the exception *
.*                       of the ZAL "delete" segment).                       *
.*            ZALFOUND - found ZAL segment flag                              *
.*                             0 = one or more ZAL segment found             *
.*                             1 = no ZAL segment found                      *
.*            PURNO - Patient U/R                                            *
.*****************************************************************************
.
.         Loop through the current alert records on the alerts
.         temp file and process them back to patalrtf.
.
PALA0000  MOVE      SP10,KEY9
          CALL      RSTEMP3                      * position at start of file
PALA0500  CALL      RKTEMP3                      * read next record
          BRANCH    OVRCD,PALA9000               * eof - finished
.
          BRANCH    ALRTSTAT,PALA1000:           * Add new alert record
                             PALA2000            * Update existing alert rec.
.
.         Delete an existing alert record
.
          PACK      KEY16,PURNO,ALRTCATG,ALRTCODE,ALRTCNTR
          CALL      RDPTALR1                     * current record found ?
          BRANCH    OVRCD,PALA0500               * no - ignore record
.
          PACK      KEY5,ALRTCATG,ALRTCODE
          CALL      RDCODE1                      * code on file ?
          BRANCH    OVRCD,PALA0500               * no - ignore record
.         
          MATCH     ANSX,TCINDC21                * exclude alert ?
          GOTO      PALA0500 IF EQUAL            * yes - don't delete
.
          MOVE      FOUR,AUDTTYPE                * yes
          CALL      WAPTAL00                     * write delete audit record
.
          PACK      KEY16,PTALURNO,PTALCATG,PTALCODE,PTALCNTR
          CALL      DEPTALR1                     * delete record
.
          MOVE      FOUR,AUDTTYPE
          CALL      DCOM0000                     * delete associated comments
          GOTO      PALA0500                     * get next alert record
.
.         Add a new alert record
.
PALA1000  CALL      CLPATALR                     * clear patalrtf variables
          MOVE      PURNO,PTALURNO               * load patalrtf variables
          PACK      PTALCATG,ALRTCATG,SP70
          PACK      PTALCODE,ALRTCODE,SP70
          PACK      PTALCNTR,ALRTCNTR,SP70
          PACK      PTALDATE,ALRTDATE,SP70
          PACK      PTALREAC,ALRTREAC,SP70
          MOVE      "HL7RECVR  ",PTALUSID
          PACK      PTALLSEV,ALRTLSEV,SP70
          PACK      PTALRDTE,ALRTRDTE,SP70
          PACK      PTALDTIN,ALRTDTIN,SP70
          PACK      PTALEDAT,ALRTEDAT,SP70
          PACK      PTALRQBY,ALRTRQBY,SP70
          PACK      PTALHOSP,ALRTHOSP,SP70
          PACK      PTALUDAT,ALRTUDAT,SP70
          MOVE      PTALUDAT,PTALCDTE
          PACK      PTALUTIM,ALRTUTIM,SP70
          MOVE      PTALUTIM,PTALCTIM
          PACK      PTALUUID,ALRTUUID,SP70
          PACK      PTALTPID,ALRTTPID,SP70
.
          PACK      KEY16,PTALURNO,PTALCATG,PTALCODE,PTALCNTR
          CALL      RAPTALR1                     * record already on file ?
          IF        OVRCD = 1
            CALL      WRPTALR1                   * no - write new record
.
            MOVE      ONE,AUDTTYPE
            CALL      WAPTAL00                   * write add audit record
          ENDIF
.
          MOVE      ALRTCOMM,COMMVRBL            * load full comment string
          CALL      PCOM0000                     * write comments
.
          GOTO      PALA0500                     * get next record
.
.         Update an existing alert record
.
PALA2000  PACK      KEY16,PURNO,ALRTCATG,ALRTCODE,ALRTCNTR
          CALL      RDPTALR1                     * record found ?
          BRANCH    OVRCD,PALA0500               * no - ignore record
.
.         Check if the alert data has changed and if so, then we need
.         to update the patalrtf record.
.
          MATCH     PTALDATE,ALRTDATE            * same alert date ?
          GOTO      PALA2500 IF NOT EQUAL        * no - proceed to update record
.
          MATCH     PTALREAC,ALRTREAC            * same reaction code ?
          GOTO      PALA2500 IF NOT EQUAL        * no - proceed to update record
.
          MATCH     PTALLSEV,ALRTLSEV            * same severity level ?
          GOTO      PALA2500 IF NOT EQUAL        * no - proceed to update record
.
          MATCH     PTALRDTE,ALRTRDTE            * same review date ?
          GOTO      PALA2500 IF NOT EQUAL        * no - proceed to update record
.
          MATCH     PTALDTIN,ALRTDTIN            * same date inactive ?
          GOTO      PALA2500 IF NOT EQUAL        * no - proceed to update record
.
          MATCH     PTALEDAT,ALRTEDAT            * same end date ?
          GOTO      PALA2500 IF NOT EQUAL        * no - proceed to update record
.
          MATCH     PTALRQBY,ALRTRQBY            * same authorising hcp ?
          GOTO      PALA2500 IF NOT EQUAL        * no - proceed to update record
.
          MATCH     PTALHOSP,ALRTHOSP            * same hospital ?
          GOTO      PALA2500 IF NOT EQUAL        * no - proceed to update record
.
          MATCH     PTALUDAT,ALRTUDAT            * same update date ?
          GOTO      PALA2500 IF NOT EQUAL        * no - proceed to update record
.
          MATCH     PTALUTIM,ALRTUTIM            * same update time ?
          GOTO      PALA2500 IF NOT EQUAL        * no - proceed to update record
.
          MATCH     PTALUUID,ALRTUUID            * same user who last updated ?
          GOTO      PALA2500 IF NOT EQUAL        * no - proceed to update record
.
          MATCH     PTALTPID,ALRTTPID            * same third party id ?
          GOTO      PALA2500 IF NOT EQUAL        * no - proceed to update record
.
          GOTO      PALA3000                     * check if comments changed
.
.         The patalrtf has changed, so update the relevant data fields.
.
PALA2500  MOVE      TWO,AUDTTYPE
          CALL      WAPTAL00                     * write before audit record
.
          PACK      PTALDATE,ALRTDATE,SP70       * load new data values
          PACK      PTALREAC,ALRTREAC,SP70
          PACK      PTALLSEV,ALRTLSEV,SP70
          PACK      PTALRDTE,ALRTRDTE,SP70
          PACK      PTALDTIN,ALRTDTIN,SP70
          PACK      PTALEDAT,ALRTEDAT,SP70
          PACK      PTALRQBY,ALRTRQBY,SP70
          PACK      PTALHOSP,ALRTHOSP,SP70
          PACK      PTALUDAT,ALRTUDAT,SP70
          PACK      PTALUTIM,ALRTUTIM,SP70
          PACK      PTALUUID,ALRTUUID,SP70
          PACK      PTALTPID,ALRTTPID,SP70
.
          CALL      UPPTALR1                     * update record
.
          MOVE      THREE,AUDTTYPE
          CALL      WAPTAL00                     * write after audit record
.
.         Now check if the comments have changed.
.         Loop through the comments file and load any comments for the
.         alert.
.
PALA3000  PACK      KEY250,SP100,SP100,SP100     * clear comment string
          CLEAR     KEY250
.
          PACK      KEY19,PURNO,ALRTCATG,ALRTCODE,ALRTCNTR,SP20
          CALL      RSPMALN1                     * position on alert comments
PALA3100  CALL      RKPMALN1                     * read next record
          BRANCH    OVRCD,PALA3200               * eof - finished 
.
          MATCH     PURNO,PMANURNO               * same U/R still ?
          GOTO      PALA3200 IF NOT EQUAL        * no - finished
.
          MATCH     ALRTCATG,PMANACAT            * same category still ?
          GOTO      PALA3200 IF NOT EQUAL        * no - finished
.
          MATCH     ALRTCODE,PMANACOD            * same code still ?
          GOTO      PALA3200 IF NOT EQUAL        * no - finished
.
          MATCH     ALRTCNTR,PMANCNTR            * same counter still ?
          GOTO      PALA3200 IF NOT EQUAL        * no - finished
.
          APPEND    PMANCOMM,KEY250              * yes - append comment
.
          GOTO      PALA3100                     * get next record
.
.         All comment lines loaded
.
PALA3200  APPEND    SP100,KEY250
          APPEND    SP100,KEY250
          APPEND    SP100,KEY250
          RESET     KEY250
.
          MATCH     KEY250,ALRTCOMM              * same comment ?
          GOTO      PALA3500 IF NOT EQUAL        * no - proceed to update record
.
          GOTO      PALA0500                     * comments unchanged - ignore
.
.         The comments in pmsalnaf have changed, so re-write the comments
.
PALA3500  MOVE      TWO,AUDTTYPE
          CALL      DCOM0000                     * delete associated comments
          MOVE      ALRTCOMM,COMMVRBL            * load full comment string
          CALL      PCOM0000                     * add new comments
.
          GOTO      PALA0500                     * get next record
.
PALA9000  CALL      SETA0000                     * set pmi alert flags
.
PALA9999  RETURN
+
.*****************************************************************************
.*                              DCOM0000           Called by: PALA0000       *
.*         Delete all comment records associated with an alert record        *
.* Requires - PURNO  - patient U/R                                           *
.*            ALRTCATG - alert category                                      *
.*            ALRTCODE - alert code                                          *
.*            ALRTCNTR - alert counter                                       *
.*            AUDTTYPE - audit type (2 = before, 3 = delete)                 *
.*****************************************************************************
.
DCOM0000  PACK      KEY19,PURNO,ALRTCATG,ALRTCODE,ALRTCNTR,SP20
          CALL      RSPMALN1                     * position on alert comments
DCOM0500  CALL      RKPMALN1                     * read next record
          BRANCH    OVRCD,DCOM9999               * eof - finished 
.
          MATCH     PURNO,PMANURNO               * same U/R still ?
          GOTO      DCOM9999 IF NOT EQUAL        * no - finished
.
          MATCH     ALRTCATG,PMANACAT            * same category still ?
          GOTO      DCOM9999 IF NOT EQUAL        * no - finished
.
          MATCH     ALRTCODE,PMANACOD            * same code still ?
          GOTO      DCOM9999 IF NOT EQUAL        * no - finished
.
          MATCH     ALRTCNTR,PMANCNTR            * same counter still ?
          GOTO      DCOM9999 IF NOT EQUAL        * no - finished
.
          CALL      WAPMAN00                     * write delete audit record
          PACK      KEY19,PMANURNO,PMANACAT,PMANACOD,PMANCNTR,PMANLNNO
          CALL      DEPMALN1                     * delete record
          GOTO      DCOM0500                     * get next comment record
.
DCOM9999  RETURN
+
.*****************************************************************************
.*                            PCOM0000             Called by: PZAL0000       *
.                                                             PALA0000       *
.*          Process the comment line by splitting it up into lines           *
.*          of 70 characters in length and for each line, write a pmsalnaf   *
.*          record.                                                          *
.* Requires: COMMVRBL - comment variable                                     *
.*****************************************************************************
.
PCOM0000  STRIP     COMMVRBL                     * get length of comment
          MOVELPTR  COMMVRBL,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      PCOM9999 IF EQUAL            * no - finished
.
.         Bump through the text string on a character by character basis
.         and for each character check to see whether there is a line break.
.         Allow 100 characters/line, unless of course there is a line break
.         or the end of the string is reached.
.
          MOVE      ZERO,LINENUMB                * initialise line number
          MOVE      ZERO,CHRCOUNT                * initialise character count
          CLEAR     DIM70                        * initialise line string
.
.         Check to see if we have a line break
.
PCOM0200  MOVE      ZERO,BREAKFLG                * initialise break found flag
          MATCH     LINBREAK,COMMVRBL
          IF        !@EQUAL | @LESS
            GOTO      PCOM0500
          ENDIF
.
.         We have found a line break, so if there is no data so far in the
.         the line (CHRCOUNT is zero), then ignore the line break, otherwise,
.         write the current line data
.
          IF        CHRCOUNT = 0
            BUMP      COMMVRBL,5                 * move past line break
            GOTO      PCOM9500 IF EOS            * eos - finished
            GOTO      PCOM0200                   * check for another line break
          ENDIF
.
          MOVE      ONE,BREAKFLG                 * set flag for break found
.
PCOM0300  CALL      WALN0000                     * write a comment line
.
          MOVE      ZERO,CHRCOUNT                * re-initialise character count
.
PCOM0400  IF        BREAKFLG = 1
            BUMP      COMMVRBL,5                 * move past line break
          ELSE
            BUMP      COMMVRBL                   * get next character
          ENDIF
          GOTO      PCOM9000 IF EOS              * eos - finished
          GOTO      PCOM0200                     * check for another line break
.
.         We have a valid character, so load it into the text line and then
.         get the next character
.
PCOM0500  MOVE      COMMVRBL,ANS
          APPEND    ANS,DIM70                    * load current character
          ADD       ONE,CHRCOUNT                 * increment character count
.
          COMPARE   SEVENTY,CHRCOUNT             * full line yet ?
          GOTO      PCOM0400 IF LESS             * no
          GOTO      PCOM0300                     * yes - write comment
.
PCOM9000  IF        CHRCOUNT > 0
            CALL      WALN0000                   * write comment record
          ENDIF
.
PCOM9500  RESET     COMMVRBL
.
PCOM9999  RETURN
+
.*****************************************************************************
.*                            WALN0000             Called by: PCOM0000       *
.*                       Write an alert notes comment line                   *
.*****************************************************************************
.
WALN0000  MOVE      PURNO,PMANURNO
          MOVE      PTALCATG,PMANACAT
          MOVE      PTALCODE,PMANACOD
          MOVE      PTALCNTR,PMANCNTR
          ADD       ONE,LINENUMB
          MOVE      LINENUMB,PMANLNNO
          RESET     DIM70
          PACK      PMANCOMM,DIM70,SP70
.
          PACK      KEY19,PMANURNO,PMANACAT,PMANACOD,PMANCNTR,PMANLNNO
          CALL      RAPMALN1
          IF        OVRCD = 1
            CALL      WRPMALN1
.
            MOVE      ONE,AUDTTYPE
            CALL      WAPMAN00                   * write add audit record
          ENDIF
.
          CLEAR     DIM70                        * clear comment line
.
WALN9999  RETURN
+
.*****************************************************************************
.*                              LODA0000           Called by: VALA0000       *
.*        There is one or more valid ZAL segments, so load the patient's     *
.*        current alert records into the alert's temp file                   *
.*****************************************************************************
.
LODA0000  PACK      KEY16,PURNO,SP20
          CALL      RSPTALR1                     * position on U/R
LODA0500  CALL      RKPTALR1                     * read next record
          BRANCH    OVRCD,LODA9999               * eof - finished load
.
          MATCH     PURNO,PTALURNO               * same U/R still ?
          GOTO      LODA9999 IF NOT EQUAL        * no - finished load
.
          MOVE      PTALCATG,ALRTCATG            * load temp file variables
          MOVE      PTALCODE,ALRTCODE
          MOVE      PTALCNTR,ALRTCNTR
          MOVE      PTALDATE,ALRTDATE
          MOVE      PTALREAC,ALRTREAC
          MOVE      PTALLSEV,ALRTLSEV
          MOVE      PTALRDTE,ALRTRDTE
          MOVE      PTALDTIN,ALRTDTIN
          MOVE      PTALEDAT,ALRTEDAT
          MOVE      PTALRQBY,ALRTRQBY
          MOVE      PTALHOSP,ALRTHOSP
          MOVE      PTALUDAT,ALRTUDAT
          MOVE      PTALUTIM,ALRTUTIM
          MOVE      PTALUUID,ALRTUUID
          MOVE      PTALTPID,ALRTTPID
          MOVE      ZERO,ALRTSTAT                * default to "delete" status
.
.         Loop through the comments file and load any comments for the
.         alert.
.
          PACK      ALRTCOMM,SP100,SP100,SP100   * clear comment string
          CLEAR     ALRTCOMM
.
          PACK      KEY19,PURNO,ALRTCATG,ALRTCODE,ALRTCNTR,SP20
          CALL      RSPMALN1                     * position on alert comments
LODA1000  CALL      RKPMALN1                     * read next record
          BRANCH    OVRCD,LODA2000               * eof - finished 
.
          MATCH     PURNO,PMANURNO               * same U/R still ?
          GOTO      LODA2000 IF NOT EQUAL        * no - finished
.
          MATCH     ALRTCATG,PMANACAT            * same category still ?
          GOTO      LODA2000 IF NOT EQUAL        * no - finished
.
          MATCH     ALRTCODE,PMANACOD            * same code still ?
          GOTO      LODA2000 IF NOT EQUAL        * no - finished
.
          MATCH     ALRTCNTR,PMANCNTR            * same counter still ?
          GOTO      LODA2000 IF NOT EQUAL        * no - finished
.
          APPEND    PMANCOMM,ALRTCOMM            * yes - append comment
.
          GOTO      LODA1000                     * get next record
.
.         All comment lines loaded
.
LODA2000  APPEND    SP100,ALRTCOMM
          APPEND    SP100,ALRTCOMM
          APPEND    SP100,ALRTCOMM
          RESET     ALRTCOMM
.
          CALL      WRTEMP3                      * write temp record
.
          GOTO      LODA0500                     * get next record
.
LODA9999  RETURN
+
.*****************************************************************************
.*                              LODC0000           Called by: VNKA0000       *
.*        There is one or more valid NK1 segments, so load the patient's     *
.*        current contact records into the contact's temp file               *
.*****************************************************************************
.
LODC0000  PACK      KEY14,PURNO,SP20
          CALL      RSPMCEX1                     * position on U/R
LODC0500  CALL      RKPMCEX1                     * read next record
          BRANCH    OVRCD,LODC9999               * eof - finished load
.
          MATCH     PURNO,PMCEURNO               * same U/R still ?
          GOTO      LODC9999 IF NOT EQUAL        * no - finished load
.
          MOVE      PMCETYPE,CONTTYPE            * load temp file variables
          MOVE      PMCECNTR,CONTCNTR
          MOVE      PMCETITL,CONTTITL
          MOVE      PMCESNAM,CONTSNAM
          MOVE      PMCEGNAM,CONTGNAM
          MOVE      PMCEGNM2,CONTGNM2
          MOVE      PMCEADD1,CONTADD1
          MOVE      PMCEADD2,CONTADD2
          MOVE      PMCEADD3,CONTADD3
          MOVE      PMCEADD4,CONTADD4
          MOVE      PMCEPOST,CONTPOST
          MOVE      PMCETELP,CONTTELP
          MOVE      PMCETELB,CONTTELB
          MOVE      PMCETELM,CONTTELM
          MOVE      PMCERELP,CONTRELP
          MOVE      PMCESLET,CONTSLET
          MOVE      PMCESSMS,CONTSSMS
          MOVE      PMCEEMAI,CONTEMAI
          MOVE      PMCEDINA,CONTDINA
          MOVE      PMCETPID,CONTTPID
          MOVE      PMCEWPID,CONTWPID
          MOVE      PMCELAN1,CONTLAN1
          MOVE      ZERO,CONTSTAT                * default to "delete" status
.
          CALL      WRTEMP2                      * write temp record
          GOTO      LODC0500                     * get next record
.
LODC9999  RETURN
+
.*****************************************************************************
.*                              MATA0000           Called by: VZAL0000       *
.*          Try to match the received ZAL segment with the patient's         *
.*          current alert records and then either add the record (if no      *
.*          match is found), or update the record (if a match is found).     *
.*****************************************************************************
.
.         Loop through the current alert records on the alert
.         temp file where the status is "Delete"
.
MATA0000  MATCH     SP20,TOPASID                 * blank TPS ID ?
          GOTO      MATA9999 IF EQUAL            * yes - match cannot proceed
.
          MOVE      ZERO,MAXSCORE                * initialise maximum score
          MOVE      SP9,SAVEKEY9                 * initialise saved alert key
.
          PACK      KEY2,ZAL00201,SP2
          PACK      KEY3,ZAL00301,SP3
          PACK      KEY9,ZERO,KEY2,KEY3,SP10
          CALL      RSTEMP3                      * position on alert cat/code
MATA0500  CALL      RKTEMP3                      * read next record
          BRANCH    OVRCD,MATA0900               * eof - write new record
.
          COMPARE   ZERO,ALRTSTAT                * delete status still ?
          GOTO      MATA0900 IF NOT EQUAL        * no - write new record
.
          MATCH     KEY2,ALRTCATG                * same alert category still ?
          GOTO      MATA0900 IF NOT EQUAL        * no - write new record
.
          MATCH     KEY3,ALRTCODE                * same alert code still ?
          GOTO      MATA0900 IF NOT EQUAL        * no - write new record
.
.         We have a record with matching alert category and code, so
.         check if the hospital matches
.
          MOVELPTR  ZAL01301,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      MATA0500 IF EQUAL            * no - get next record
.
          MATCH     BLANKSTR,ZAL01301            * field null ?
          IF        @EQUAL
            MOVE      SP3,KEY3H                  * yes
          ELSE
            PACK      KEY3H,ZAL01301,SP3         * no
          ENDIF
.
          MATCH     KEY3H,ALRTHOSP               * same hospital ?
          GOTO      MATA0500 IF NOT EQUAL        * no - get next record
.
.         The hospital also matches, so see if the TPS ID matches
.
          MATCH     SP20,ALRTTPID                * TPS Id blank on webPAS ?
          GOTO      MATA0501 IF EQUAL            * yes - check matching
.
          MATCH     ALRTTPID,TOPASID             * same TPS Unique ID ?
          GOTO      MATA0950 IF EQUAL            * yes - update record
          GOTO      MATA0500                     * no - get next record
.
.         The TPS ID on this webPAS record is blank, so match the record
.         data against the incoming ZAL data using specific fields and
.         assigning a score based on each field.  Keep track of the highest
.         score for a webPAS record as this will be the record that is
.         updated, providing that no other record is found where the TPS ID's
.         match.  If this record's score is zero, then it is not a matching
.         record.  If there are no matching records at all, then we need
.         to write a new record.
.
.                Field       Match Score
.          ---------------   -----------
.          Alert Date             5
.          Severity Level         2
.          Review Date            1
.          Date Inactive          1
.          End Date               1
.          Authorising HCP        3
.          Comments               1
.
MATA0501  MOVE      ZERO,ALRTSCOR                * initialise record match score
.
.         Match alert date
.
          MOVELPTR  ZAL00501,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      MATA0505 IF EQUAL            * no - can't match
.
          MATCH     BLANKSTR,ZAL00501            * field null ?
          IF        @EQUAL
            MOVE      SP8,KEY8                   * yes
          ELSE
            PACK      KEY8,ZAL00501,SP8          * no
          ENDIF
.
          MATCH     KEY8,ALRTDATE                * same alert date ?
          IF        @EQUAL
            ADD       FIVE,ALRTSCOR              * yes - update score
          ENDIF
.
.         Match severity level
.
MATA0505  MOVELPTR  ZAL00601,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      MATA0510 IF EQUAL            * no - can't match
.
          MATCH     BLANKSTR,ZAL00601            * field null ?
          IF        @EQUAL
            MOVE      ZERO,ANS                   * yes
          ELSE
            MOVE      ZAL00601,ANS               * no
          ENDIF
.
          MATCH     ANS,ALRTLSEV                 * same severity level ?
          IF        @EQUAL
            ADD       TWO,ALRTSCOR               * yes - update score
          ENDIF
.
.         Match review date
.
MATA0510  MOVELPTR  ZAL00701,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      MATA0515 IF EQUAL            * no - can't match
.
          MATCH     BLANKSTR,ZAL00701            * field null ?
          IF        @EQUAL
            MOVE      SP8,KEY8                   * yes
          ELSE
            PACK      KEY8,ZAL00701,SP8          * no
          ENDIF
.
          MATCH     KEY8,ALRTRDTE                * same review date ?
          IF        @EQUAL
            ADD       ONE,ALRTSCOR               * yes - update score
          ENDIF
.
.         Match date inactive
.
MATA0515  MOVELPTR  ZAL00801,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      MATA0520 IF EQUAL            * no - can't match
.
          MATCH     BLANKSTR,ZAL00801            * field null ?
          IF        @EQUAL
            MOVE      SP8,KEY8                   * yes
          ELSE
            PACK      KEY8,ZAL00801,SP8          * no
          ENDIF
.
          MATCH     KEY8,ALRTDTIN                * same inactive date ?
          IF        @EQUAL
            ADD       ONE,ALRTSCOR               * yes - update score
          ENDIF
.
.         Match end date
.
MATA0520  MOVELPTR  ZAL00901,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      MATA0525 IF EQUAL            * no - can't match
.
          MATCH     BLANKSTR,ZAL00901            * field null ?
          IF        @EQUAL
            MOVE      SP8,KEY8                   * yes
          ELSE
            PACK      KEY8,ZAL00901,SP8          * no
          ENDIF
          MATCH     KEY8,ALRTEDAT                * same end date ?
          IF        @EQUAL
            ADD       ONE,ALRTSCOR               * yes - update score
          ENDIF
.
.         Match authorising hcp
.
MATA0525  MOVELPTR  ZAL01001,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      MATA0535 IF EQUAL            * no - can't match
.
          MATCH     BLANKSTR,ZAL01001            * field null ?
          IF        @EQUAL
            MOVE      SP10,KEY10                 * yes
          ELSE
            PACK      KEY10,ZAL01001,SP10        * no
          ENDIF
.
          MATCH     KEY10,ALRTRQBY               * same authorising hcp ?
          IF        @EQUAL
            ADD       THREE,ALRTSCOR             * yes - update score
          ENDIF
.
.         Match comments
.
MATA0535  MOVELPTR  ZAL01401,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      MATA0800 IF EQUAL            * no - can't match
.
          MATCH     BLANKSTR,ZAL01401            * field null ?
          IF        @EQUAL
            PACK      KEY250,SP100,SP100,SP100  * yes
          ELSE
            PACK      KEY250,ZAL01401,SP100,SP100,SP100  * no
          ENDIF
.
          MATCH     KEY250,ALRTCOMM              * same comment ?
          IF        @EQUAL
            ADD       ONE,ALRTSCOR               * yes - update score
          ENDIF
.
.         All the matches have been performed, so see if this is the highest
.         score so far.  If so, store the score and the record key.
.
MATA0800  COMPARE   ALRTSCOR,MAXSCORE
          IF        @LESS
            MOVE      ALRTSCOR,MAXSCORE
            PACK      SAVEKEY9,ALRTSTAT,ALRTCATG,ALRTCODE,ALRTCNTR
          ENDIF
          GOTO      MATA0500
.
.         We have finished trying to match the record, so check if a match
.         was found
.
MATA0900  COMPARE   ZERO,MAXSCORE                * matching record found ?
          GOTO      MATA5000 IF EQUAL            * no - add new record
.
          MOVE      SAVEKEY9,KEY9                * yes
          CALL      RDTEMP3                      * re-read alert record
          IF        OVRCD = 1
            MOVE      "Temp file alert record not found",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      MATA9999
          ENDIF
.
.         A matching record was found, so update the temp table data fields
.         with the data received, and set the status to "Update".
.
.         Load Reaction
.
MATA0950  MOVELPTR  ZAL00401,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATA1000 IF EQUAL
.
          MATCH     BLANKSTR,ZAL00401
          IF        @EQUAL
            MOVE      SP3,ALRTREAC
            GOTO      MATA1000
          ENDIF
.
          PACK      ALRTREAC,ZAL00401,SP3
.
.         Load Alert date
.
MATA1000  MOVELPTR  ZAL00501,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATA1100 IF EQUAL
.
          MATCH     BLANKSTR,ZAL00501
          IF        @EQUAL
            MOVE      SP8,ALRTDATE
            GOTO      MATA1100
          ENDIF
.
          PACK      ALRTDATE,ZAL00501,SP8
.
.         Load Severity Level
.
MATA1100  MOVELPTR  ZAL00601,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATA1200 IF EQUAL
.
          MATCH     BLANKSTR,ZAL00601
          IF        @EQUAL
            MOVE      ZERO,ALRTLSEV
            GOTO      MATA1200
          ENDIF
.
          PACK      ALRTLSEV,ZAL00601,SP1
.
.         Load Review Date
.
MATA1200  MOVELPTR  ZAL00701,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATA1300 IF EQUAL
.
          MATCH     BLANKSTR,ZAL00701
          IF        @EQUAL
            MOVE      SP8,ALRTRDTE
            GOTO      MATA1300
          ENDIF
.
          PACK      ALRTRDTE,ZAL00701,SP8
.
.         Load Date Inactive
.
MATA1300  MOVELPTR  ZAL00801,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATA1400 IF EQUAL
.
          MATCH     BLANKSTR,ZAL00801
          IF        @EQUAL
            MOVE      SP8,ALRTDTIN
            GOTO      MATA1400
          ENDIF
.
          PACK      ALRTDTIN,ZAL00801,SP8
.
.         Load End Date
.
MATA1400  MOVELPTR  ZAL00901,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATA1500 IF EQUAL
.
          MATCH     BLANKSTR,ZAL00901
          IF        @EQUAL
            MOVE      SP8,ALRTEDAT
            GOTO      MATA1500
          ENDIF
.
          PACK      ALRTEDAT,ZAL00901,SP8
.
.         Load Authorising HCP
.
MATA1500  MOVELPTR  ZAL01001,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATA1600 IF EQUAL
.
          MATCH     BLANKSTR,ZAL01001
          IF        @EQUAL
            MOVE      SP10,ALRTRQBY
            GOTO      MATA1600
          ENDIF
.
          PACK      ALRTRQBY,ZAL01001,SP10
.
.         Load Last Update Date/Time
.
MATA1600  MOVELPTR  ZAL01101,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATA1700 IF EQUAL
.
          MATCH     BLANKSTR,ZAL01101
          IF        @EQUAL
            MOVE      SP8,ALRTUDAT
            MOVE      SP8,ALRTUTIM
            GOTO      MATA1700
          ENDIF
.
          IF        FORM3 = 8
            MOVE      ZAL01101,ALRTUDAT
            MOVE      SP8,ALRTUTIM
          ELSE
            UNPACK    ZAL01101,ALRTUDAT,DIM2H,DIM2N,DIM2S
            PACK      ALRTUTIM,DIM2H,COLON,DIM2N,COLON,DIM2S,SP8
          ENDIF
.
.         Load User Who Last Updated
.
MATA1700  MOVELPTR  ZAL01201,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATA1800 IF EQUAL
.
          MATCH     BLANKSTR,ZAL01201
          IF        @EQUAL
            MOVE      SP10,ALRTUUID
            GOTO      MATA1800
          ENDIF
.
          PACK      ALRTUUID,ZAL01201,SP10
.
.         Load Hospital
.
MATA1800  MOVELPTR  ZAL01301,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATA1900 IF EQUAL
.
          MATCH     BLANKSTR,ZAL01301
          IF        @EQUAL
            MOVE      SP10,ALRTHOSP
            GOTO      MATA1900
          ENDIF
.
          PACK      ALRTHOSP,ZAL01301,SP10
.
.         Load Comments
.
MATA1900  MOVELPTR  ZAL01401,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATA2000 IF EQUAL
.
          MATCH     BLANKSTR,ZAL01401
          IF        @EQUAL
            PACK      ALRTCOMM,SP100,SP100,SP100
            GOTO      MATA2000
          ENDIF
.
          PACK      ALRTCOMM,ZAL01401,SP100,SP100,SP100
.
.         Load Third Party Identifier
.
MATA2000  PACK      ALRTTPID,TOPASID,SP20
.
          MOVE      TWO,ALRTSTAT                 * set status to "Update"
.
          CALL      UPTEMP3                      * update temp record
          GOTO      MATA9999
.
.         No match was found on the alert temp file, so clear all the
.         temp file variables, write a new record to the temp file and
.         set the status to "Add".
.
MATA5000  MOVE      SP70,ALRTCATG
          MOVE      SP70,ALRTCODE
          MOVE      SP70,ALRTCNTR
          MOVE      SP70,ALRTDATE
          MOVE      SP70,ALRTREAC
          MOVE      SP70,ALRTLSEV
          MOVE      SP70,ALRTRDTE
          MOVE      SP70,ALRTDTIN
          MOVE      SP70,ALRTEDAT
          MOVE      SP70,ALRTRQBY
          MOVE      SP70,ALRTHOSP
          MOVE      SP70,ALRTUDAT
          MOVE      SP70,ALRTUTIM
          MOVE      SP70,ALRTUUID
          MOVE      SP70,ALRTTPID
          PACK      ALRTCOMM,SP100,SP100,SP100
.
          MOVE      ONE,ALRTSTAT                 * set status to "Add"
.
          PACK      ALRTCATG,ZAL00201,SP2        * load temp file variables
          PACK      ALRTCODE,ZAL00301,SP3
.
.         First we need to get the next count value for the alert type for
.         this patient.
.
          PACK      ALERT001,ZAL00201,SP2
          PACK      ALERT002,ZAL00301,SP3
          CALL      CONA0000                     * get next alert type counter
          MOVE      ALERT013,ALRTCNTR
.
.         Make sure the record key doesn't already exist (which may happen
.         if the message contains more than one segment with the same alert
.         code).
.
MATA5010  PACK      KEY9,ALRTSTAT,ALRTCATG,ALRTCODE,ALRTCNTR
          CALL      RATEMP3
          BRANCH    OVRCD,MATA5020
.
          MATCH     ANSD,SAVEIND7                
          IF        !@EQUAL
            MOVE      "ZAL: Duplicate Alert Type not allowed",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      MATA9999
          ENDIF
.
          MOVE      ALRTCNTR,FORM3
          ADD       ONE,FORM3
          MOVE      FORM3,ALRTCNTR
          GOTO      MATA5010
.
.         Load Reaction
.
MATA5020  MOVELPTR  ZAL00401,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATA5050 IF EQUAL
.
          MATCH     BLANKSTR,ZAL00401
          IF        @EQUAL
            MOVE      SP3,ALRTREAC
            GOTO      MATA5100
          ENDIF
.
MATA5050  PACK      ALRTREAC,ZAL00401,SP3
.
.         Load Alert date
.
MATA5100  MOVELPTR  ZAL00501,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATA5150 IF EQUAL
.
          MATCH     BLANKSTR,ZAL00501
          IF        @EQUAL
            MOVE      SP8,ALRTDATE
            GOTO      MATA5200
          ENDIF
.
MATA5150  PACK      ALRTDATE,ZAL00501,SP8
.
.         Load Severity Level
.
MATA5200  MOVELPTR  ZAL00601,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATA5250 IF EQUAL
.
          MATCH     BLANKSTR,ZAL00601
          IF        @EQUAL
            MOVE      ZERO,ALRTLSEV
            GOTO      MATA5300
          ENDIF
.
MATA5250  PACK      ALRTLSEV,ZAL00601,SP1
.
.         Load Review Date
.
MATA5300  MOVELPTR  ZAL00701,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATA5350 IF EQUAL
.
          MATCH     BLANKSTR,ZAL00701
          IF        @EQUAL
            MOVE      SP8,ALRTRDTE
            GOTO      MATA5400
          ENDIF
.
MATA5350  PACK      ALRTRDTE,ZAL00701,SP8
.
.         Load Date Inactive
.
MATA5400  MOVELPTR  ZAL00801,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATA5450 IF EQUAL
.
          MATCH     BLANKSTR,ZAL00801
          IF        @EQUAL
            MOVE      SP8,ALRTDTIN
            GOTO      MATA5500
          ENDIF
.
MATA5450  PACK      ALRTDTIN,ZAL00801,SP8
.
.         Load End Date
.
MATA5500  MOVELPTR  ZAL00901,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATA5550 IF EQUAL
.
          MATCH     BLANKSTR,ZAL00901
          IF        @EQUAL
            MOVE      SP8,ALRTEDAT
            GOTO      MATA5600
          ENDIF
.
MATA5550  PACK      ALRTEDAT,ZAL00901,SP8
.
.         Load Authorising HCP
.
MATA5600  MOVELPTR  ZAL01001,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATA5650 IF EQUAL
.
          MATCH     BLANKSTR,ZAL01001
          IF        @EQUAL
            MOVE      SP10,ALRTRQBY
            GOTO      MATA5700
          ENDIF
.
MATA5650  PACK      ALRTRQBY,ZAL01001,SP10
.
.         Load Last Update Date/Time
.
MATA5700  MOVELPTR  ZAL01101,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATA5750 IF EQUAL
.
          MATCH     BLANKSTR,ZAL01101
          IF        @EQUAL
            MOVE      SP8,ALRTUDAT
            GOTO      MATA5800
          ENDIF
.
MATA5750  IF        FORM3 = 8
            MOVE      ZAL01101,ALRTUDAT
            MOVE      SP8,ALRTUTIM
          ELSE
            UNPACK    ZAL01101,ALRTUDAT,DIM2H,DIM2N,DIM2S
            PACK      ALRTUTIM,DIM2H,COLON,DIM2N,COLON,DIM2S,SP8
          ENDIF
.
.         Load User Who Last Updated
.
MATA5800  MOVELPTR  ZAL01201,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATA5850 IF EQUAL
.
          MATCH     BLANKSTR,ZAL01201
          IF        @EQUAL
            MOVE      SP10,ALRTUUID
            GOTO      MATA5900
          ENDIF
.
MATA5850  PACK      ALRTUUID,ZAL01201,SP10
.
.         Load Hospital
.
MATA5900  MOVELPTR  ZAL01301,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATA5950 IF EQUAL
.
          MATCH     BLANKSTR,ZAL01301
          IF        @EQUAL
            MOVE      SP10,ALRTHOSP
            GOTO      MATA6000
          ENDIF
.
MATA5950  PACK      ALRTHOSP,ZAL01301,SP10
.
.         Load Comments
.
MATA6000  MOVELPTR  ZAL01401,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATA6050 IF EQUAL
.
          MATCH     BLANKSTR,ZAL01401
          IF        @EQUAL
            PACK      ALRTCOMM,SP100,SP100,SP100
            GOTO      MATA9000
          ENDIF
.
MATA6050  PACK      ALRTCOMM,ZAL01401,SP100,SP100,SP100
.
.         Load Third Party identifier
.
MATA9000  PACK      ALRTTPID,TOPASID,SP20
.
          CALL      WRTEMP3                      * write temp record
.
MATA9999  RETURN
+
.*****************************************************************************
.*                              MATC0000           Called by: VNOK0000       *
.*          Try to match the received NK1 segment with the patient's         *
.*          current contact records and then either add the record (if no    *
.*          match is found), or update the record (if a match is found).     *
.*****************************************************************************
.
.         Note: The TPS Unique ID should always be populated whereas the
.               webPAS Unique ID may or may not be populated
.
MATC0000  MATCH     SP20,TOPASID                 * blank TPS ID ?
          GOTO      MATC9999 IF EQUAL            * yes - match cannot proceed
.
.         Loop through the current contact records on the contact
.         temp file where the status is "Delete"
.
          PACK      KEY7,ZERO,SP10
          CALL      RSTEMP2                      * position on contact type
MATC0500  CALL      RKTEMP2                      * read next record
          BRANCH    OVRCD,MATC5000               * eof - write new record
.
          COMPARE   ZERO,CONTSTAT                * delete status still ?
          GOTO      MATC5000 IF NOT EQUAL        * no - write new record
.
          MOVE      ZERO,CTCHGFLG                * init.contact type change flag
.
.         If the inbound contact has a webPAS ID, then use this
.         to match with the existing contact records.          
.         
          MATCH     SP10,WEBPASID                * inbound webPAS ID blank ?
          GOTO      MATC0700 IF EQUAL            * yes - use TPS ID 
.         
          MATCH     CONTWPID,WEBPASID            * webPAS ID's match ?
          GOTO      MATC0500 IF NOT EQUAL        * no - get next record
          GOTO      MATC0900                     * yes - update current record
.
.         The inbound webPAS ID is not populated, so we need to match on
.         the TPS ID instead
.
MATC0700  MATCH     SP20,CONTTPID                * current TPS ID blank ?
          GOTO      MATC0500 IF EQUAL            * yes
.
          MATCH     CONTTPID,TOPASID             * same TPS Unique ID ?
          GOTO      MATC0500 IF NOT EQUAL        * no - get next record
.
.         A matching record was found, so check if the contact type has
.         changed, as this will determine if we add or update the record.
.         Note: TOPAS allows a change of contact type on a record, whereas
.         webPAS doesn't.  In the scenario where a change in contact type
.         occurrs in TOPAS, we need to delete the existing webPAS record
.         and add a new webPAS record with the the same webPAS/TPS ID.
.
MATC0900  PACK      KEY3,NK100701,SP3
          MATCH     KEY3,CONTTYPE                * same contact type ?
          GOTO      MATC0950 IF EQUAL            * yes - update record
.
.         The contact type for the record has changed, so we need to add
.         this record instead of updating it.  The existing record will remain
.         with a status of delete and will be deleted later on.
.
          MOVE      ONE,CTCHGFLG                 * set contact type change flag
          GOTO      MATC5010
.
.         Update the temp table data fields with the data received,
.         and set the status to "Update".
.
.         Load Title
.
MATC0950  MOVELPTR  NK103005,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC1000 IF EQUAL
.
          MATCH     BLANKSTR,NK103005
          IF        @EQUAL
            MOVE      SP10,CONTTITL
            GOTO      MATC1000
          ENDIF
.
          PACK      CONTTITL,NK103005,SP10
.
.         Load Surname
.
MATC1000  MOVELPTR  NK103001,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC1100 IF EQUAL
.
          MATCH     BLANKSTR,NK103001
          IF        @EQUAL
            MOVE      SP70,CONTSNAM
            GOTO      MATC1100
          ENDIF
.
          PACK      CONTSNAM,NK103001,SP70
.
.         Load Given Name
.
MATC1100  MOVELPTR  NK103002,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC1200 IF EQUAL
.
          MATCH     BLANKSTR,NK103002
          IF        @EQUAL
            MOVE      SP70,CONTGNAM
            GOTO      MATC1200
          ENDIF
.
          PACK      CONTGNAM,NK103002,SP70
.
.         Load Second Given Name
.
MATC1200  MOVELPTR  NK103003,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC1300 IF EQUAL
.
          MATCH     BLANKSTR,NK103003
          IF        @EQUAL
            MOVE      SP70,CONTGNM2
            GOTO      MATC1300
          ENDIF
.
          PACK      CONTGNM2,NK103003,SP70
.
.         Load Address Line 1
.
MATC1300  MOVELPTR  NK103201,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC1400 IF EQUAL
.
          MATCH     BLANKSTR,NK103201
          IF        @EQUAL
            MOVE      SP70,CONTADD1
            GOTO      MATC1400
          ENDIF
.
          PACK      CONTADD1,NK103201,SP70
.
.         Load Address Line 2
.
MATC1400  MOVELPTR  NK103202,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC1500 IF EQUAL
.
          MATCH     BLANKSTR,NK103202
          IF        @EQUAL
            MOVE      SP70,CONTADD2
            GOTO      MATC1500
          ENDIF
.
          PACK      CONTADD2,NK103202,SP70
.
.         Load Address Line 3
.
MATC1500  MOVELPTR  NK103203,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC1600 IF EQUAL
.
          MATCH     BLANKSTR,NK103203
          IF        @EQUAL
            MOVE      SP70,CONTADD3
            GOTO      MATC1600
          ENDIF
.
          PACK      CONTADD3,NK103203,SP70
.
.         Load Address Line 4
.
MATC1600  MOVELPTR  NK103204,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC1700 IF EQUAL
.
          MATCH     BLANKSTR,NK103204
          IF        @EQUAL
            MOVE      SP70,CONTADD4
            GOTO      MATC1700
          ENDIF
.
          PACK      CONTADD4,NK103204,SP70
.
.         Load Address Postcode
.
MATC1700  MOVELPTR  NK103205,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC1800 IF EQUAL
.
          MATCH     BLANKSTR,NK103205
          IF        @EQUAL
            MOVE      SP70,CONTPOST
            GOTO      MATC1800
          ENDIF
.
          PACK      CONTPOST,NK103205,SP70
.
.         Load private telephone, business telephone, mobile telphone
.         & email address fields if populated
.
.         First, default fields to blank in case component 2 and 3
.         aren't populated
.
MATC1800  MOVE      SP100,CONTTELP
          MOVE      SP100,CONTTELB
          MOVE      SP100,CONTEMAI
          MOVE      SP100,CONTTELM
.
.         Loop through the phone number array
.
          MOVE      ZERO,COUNTER                 * initialise counter
MATC1810  ADD       ONE,COUNTER                  * increment counter
          COMPARE   COUNTER,THREE                * processed 3rd element ?
          GOTO      MATC2200 IF LESS             * yes
.
.         Check the type of phone number
.
          MATCH     "CP",NK103103[COUNTER]
          GOTO      MATC1900 IF NOT EQUAL
.
.         We have a cell phone number
.
          MOVELPTR  NK103107[COUNTER],FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC1810 IF EQUAL
.
          MATCH     BLANKSTR,NK103107[COUNTER]
          IF        @EQUAL
            MOVE      SP70,CONTTELM
            GOTO      MATC1810
          ENDIF
.
          PACK      CONTTELM,NK103107[COUNTER],SP70
          GOTO      MATC1810
.
.         Check if this is a "PH" field
.
MATC1900  MATCH     "PH",NK103103[COUNTER]       * phone number field ?
          GOTO      MATC1810 IF NOT EQUAL        * no
.
.         We have a "PH" field, so check what sort of phone number it is
.
          MATCH     "WPN",NK103102[COUNTER]      * business phone ?
          GOTO      MATC2000 IF NOT EQUAL        * no
.
.         We have a business phone number
.
          MOVELPTR  NK103107[COUNTER],FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC1810 IF EQUAL
.
          MATCH     BLANKSTR,NK103107[COUNTER]
          IF        @EQUAL
            MOVE      SP70,CONTTELB
            GOTO      MATC1810
          ENDIF
.
          PACK      CONTTELB,NK103107[COUNTER],SP70
          GOTO      MATC1810
.
.         Check we have a private phone number and/or email address.
.
MATC2000  MATCH     "PRN",NK103102[COUNTER]      * private phone ?
          GOTO      MATC1810 IF NOT EQUAL        * yes
.
.         Load Private Telephone
.
          MOVELPTR  NK103107[COUNTER],FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC2100 IF EQUAL
.
          MATCH     BLANKSTR,NK103107[COUNTER]
          IF        @EQUAL
            MOVE      SP70,CONTTELP
            GOTO      MATC2100
          ENDIF
.
          PACK      CONTTELP,NK103107[COUNTER],SP70
.
.         Load Email Address
.
MATC2100  MOVELPTR  NK103104[COUNTER],FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC1810 IF EQUAL
.
          MATCH     BLANKSTR,NK103104[COUNTER]
          IF        @EQUAL
            MOVE      SP100,CONTEMAI
            GOTO      MATC1810
          ENDIF
.
          PACK      CONTEMAI,NK103104[COUNTER],SP100
          GOTO      MATC1810
.
.         Load Relationship
.
MATC2200  MOVELPTR  NK100301,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC2210 IF EQUAL
.
          MATCH     BLANKSTR,NK100301
          IF        @EQUAL
            MOVE      SP70,CONTRELP
            GOTO      MATC2210
          ENDIF
.
          PACK      CONTRELP,NK100301,SP70
.
.         Load Send Letter / Send SMS Flag
.
MATC2210  MOVELPTR  NK102201,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC2300 IF EQUAL
.
          MATCH     BLANKSTR,NK102201
          IF        @EQUAL
            MOVE      ZERO,CONTSLET
            MOVE      ZERO,CONTSSMS
            GOTO      MATC2300
          ENDIF
.
          PACK      D2,NK102201,SP2
          MATCH     "LS",D2
          IF        @EQUAL
            MOVE      ONE,CONTSLET
            MOVE      ONE,CONTSSMS
            GOTO      MATC2300
          ENDIF
.
          MATCH     ANSL,NK102201
          IF        @EQUAL
            MOVE      ONE,CONTSLET
            MOVE      ZERO,CONTSSMS
            GOTO      MATC2300
          ENDIF
.
          MATCH     ANSS,NK102201
          IF        @EQUAL
            MOVE      ONE,CONTSSMS
            MOVE      ZERO,CONTSLET
            GOTO      MATC2300
          ENDIF
.
.         Load End Date
.
MATC2300  MOVELPTR  NK100901,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC2400 IF EQUAL
.
          MATCH     BLANKSTR,NK100901
          IF        @EQUAL
            MOVE      SP70,CONTDINA
            GOTO      MATC2400
          ENDIF
.
          PACK      CONTDINA,NK100901,SP70
.
.         Load Main Language Spoken at Home 1
.
MATC2400  MOVELPTR  NK102001,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC2500 IF EQUAL
.
          MATCH     BLANKSTR,NK102001
          IF        @EQUAL
            MOVE      SP70,CONTLAN1
            GOTO      MATC2500
          ENDIF
.
          PACK      CONTLAN1,NK102001,SP70
.
.         Load TPS Unique ID (in case it has changed).
.         This can happen when a webPAS contact is made inactive and then
.         subsquently re-activated.  TPS will delete the contact when
.         it's made inactive and then create a new contact (with a new ID)
.         when it's re-activated.
.
MATC2500  MOVE      TOPASID,CONTTPID
.
          MOVE      TWO,CONTSTAT                 * default to "update" status
.
          CALL      UPTEMP2                      * update temp record
          GOTO      MATC9999
.
.         No match was found on the contact temp file, so make sure
.         that we don't have a webPAS ID
.
MATC5000  MATCH     SP10,WEBPASID
          IF        !@EQUAL
            MOVE      "webPAS Unique ID not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Write a new record with a status of "Add", so clear all
.         the temp file variables.
.
          MOVE      SP70,CONTTYPE
          MOVE      SP70,CONTCNTR
          MOVE      SP70,CONTTITL
          MOVE      SP70,CONTSNAM
          MOVE      SP70,CONTGNAM
          MOVE      SP70,CONTGNM2
          MOVE      SP70,CONTADD1
          MOVE      SP70,CONTADD2
          MOVE      SP70,CONTADD3
          MOVE      SP70,CONTADD4
          MOVE      SP70,CONTPOST
          MOVE      SP70,CONTTELP
          MOVE      SP70,CONTTELB
          MOVE      SP70,CONTTELM
          MOVE      SP70,CONTRELP
          MOVE      SP70,CONTSLET
          MOVE      SP70,CONTSSMS
          MOVE      SP70,CONTEMAI
          MOVE      SP70,CONTDINA
          MOVE      SP70,CONTTPID
          MOVE      SP70,CONTWPID
          MOVE      SP70,CONTLAN1
.
MATC5010  MOVE      ONE,CONTSTAT                 * default to "add" status
.
          PACK      CONTTYPE,NK100701,SP10       * load temp file variables
.
.         First we need to get the next count value for the contact type for
.         this patient.
.
          MOVE      PURNO,PMCEX001
          PACK      PMCEX002,NK100701,SP10
          CALL      CONC0000                     * get next contact type counter
          MOVE      PMCEX003,CONTCNTR
.
.         Make sure the record key doesn't already exist (which may happen
.         if the message contains more than one segment with the same contact
.         code).  Note: Duplicate contact types are only allowed where
.         Indicator 5 of Cat tc is set to "D".
.
MATC5050  PACK      KEY7,CONTSTAT,CONTTYPE,CONTCNTR
          CALL      RATEMP2
          BRANCH    OVRCD,MATC5100
.
          MATCH     ANSD,SAVEIND4
          IF        !@EQUAL
            MOVE      "NK1: Duplicate Contact Type not allowed",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      MATC9999
          ENDIF
.
          MOVE      CONTCNTR,FORM3
          ADD       ONE,FORM3
          MOVE      FORM3,CONTCNTR
          GOTO      MATC5050
.
.         Load Title
.
MATC5100  MOVELPTR  NK103005,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC5150 IF EQUAL
.
          MATCH     BLANKSTR,NK103005
          IF        @EQUAL
            MOVE      SP10,CONTTITL
            GOTO      MATC5200
          ENDIF
.
MATC5150  PACK      CONTTITL,NK103005,SP10
.
.         Load Surname
.
MATC5200  MOVELPTR  NK103001,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC5250 IF EQUAL
.
          MATCH     BLANKSTR,NK103001
          IF        @EQUAL
            MOVE      SP70,CONTSNAM
            GOTO      MATC5300
          ENDIF
.
MATC5250  PACK      CONTSNAM,NK103001,SP70
.
.         Load Given Name
.
MATC5300  MOVELPTR  NK103002,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC5350 IF EQUAL
.
          MATCH     BLANKSTR,NK103002
          IF        @EQUAL
            MOVE      SP70,CONTGNAM
            GOTO      MATC5400
          ENDIF
.
MATC5350  PACK      CONTGNAM,NK103002,SP70
.
.         Load Second Given Name
.
MATC5400  MOVELPTR  NK103003,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC5450 IF EQUAL
.
          MATCH     BLANKSTR,NK103003
          IF        @EQUAL
            MOVE      SP70,CONTGNM2
            GOTO      MATC5500
          ENDIF
.
MATC5450  PACK      CONTGNM2,NK103003,SP70
.
.         Load Address Line 1
.
MATC5500  MOVELPTR  NK103201,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC5550 IF EQUAL
.
          MATCH     BLANKSTR,NK103201
          IF        @EQUAL
            MOVE      SP70,CONTADD1
            GOTO      MATC5600
          ENDIF
.
MATC5550  PACK      CONTADD1,NK103201,SP70
.
.         Load Address Line 2
.
MATC5600  MOVELPTR  NK103202,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC5650 IF EQUAL
.
          MATCH     BLANKSTR,NK103202
          IF        @EQUAL
            MOVE      SP70,CONTADD2
            GOTO      MATC5700
          ENDIF
.
MATC5650  PACK      CONTADD2,NK103202,SP70
.
.         Load Address Line 3
.
MATC5700  MOVELPTR  NK103203,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC5750 IF EQUAL
.
          MATCH     BLANKSTR,NK103203
          IF        @EQUAL
            MOVE      SP70,CONTADD3
            GOTO      MATC5800
          ENDIF
.
MATC5750  PACK      CONTADD3,NK103203,SP70
.
.         Load Address Line 4
.
MATC5800  MOVELPTR  NK103204,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC5850 IF EQUAL
.
          MATCH     BLANKSTR,NK103204
          IF        @EQUAL
            MOVE      SP70,CONTADD4
            GOTO      MATC5900
          ENDIF
.
MATC5850  PACK      CONTADD4,NK103204,SP70
.
.         Load Address Postcode
.
MATC5900  MOVELPTR  NK103205,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC5950 IF EQUAL
.
          MATCH     BLANKSTR,NK103205
          IF        @EQUAL
            MOVE      SP70,CONTPOST
            GOTO      MATC6000
          ENDIF
.
MATC5950  PACK      CONTPOST,NK103205,SP70
.
.         Load private telephone, business telephone, mobile telphone
.         & email address fields.
.
.         First, default fields to blank in case component 2 and 3 aren't
.         populated
.
MATC6000  MOVE      SP100,CONTTELP
          MOVE      SP100,CONTTELB
          MOVE      SP100,CONTEMAI
          MOVE      SP100,CONTTELM
.
.         Loop through the phone number array
.
          MOVE      ZERO,COUNTER                 * initialise counter
MATC6010  ADD       ONE,COUNTER                  * increment counter
          COMPARE   COUNTER,THREE                * processed 3rd element ?
          GOTO      MATC6600 IF LESS             * yes
.
.         Check the type of phone number
.
          MATCH     "CP",NK103103[COUNTER]
          GOTO      MATC6200 IF NOT EQUAL
.
.         We have a cell phone number
.
          MOVELPTR  NK103107[COUNTER],FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC6150 IF EQUAL
.
          MATCH     BLANKSTR,NK103107[COUNTER]
          IF        @EQUAL
            MOVE      SP70,CONTTELM
            GOTO      MATC6010
          ENDIF
.
MATC6150  PACK      CONTTELM,NK103107[COUNTER],SP70
          GOTO      MATC6010
.
.         Check if this is a "PH" field
.
MATC6200  MATCH     "PH",NK103103[COUNTER]       * phone number field ?
          GOTO      MATC6010 IF NOT EQUAL        * no
.
.         We have a "PH" field, so check what sort of phone number it is
.
          MATCH     "WPN",NK103102[COUNTER]      * business phone ?
          GOTO      MATC6400 IF NOT EQUAL        * no
.
.         We have a business phone number
.
          MOVELPTR  NK103107[COUNTER],FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC6350 IF EQUAL
.
          MATCH     BLANKSTR,NK103107[COUNTER]
          IF        @EQUAL
            MOVE      SP70,CONTTELB
            GOTO      MATC6010
          ENDIF
.
MATC6350  PACK      CONTTELB,NK103107[COUNTER],SP70
          GOTO      MATC6010
.
.         Check we have a private phone number and/or email address.
.
MATC6400  MATCH     "PRN",NK103102[COUNTER]      * private phone ?
          GOTO      MATC6010 IF NOT EQUAL        * yes
.
.         Load Private Telephone
.
          MOVELPTR  NK103107[COUNTER],FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC6450 IF EQUAL
.
          MATCH     BLANKSTR,NK103107[COUNTER]
          IF        @EQUAL
            MOVE      SP70,CONTTELP
            GOTO      MATC6500
          ENDIF
.
MATC6450  PACK      CONTTELP,NK103107[COUNTER],SP70
.
.         Load Email Address
.
MATC6500  MOVELPTR  NK103104[COUNTER],FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC6550 IF EQUAL
.
          MATCH     BLANKSTR,NK103104[COUNTER]
          IF        @EQUAL
            MOVE      SP100,CONTEMAI
            GOTO      MATC6010
          ENDIF
.
MATC6550  PACK      CONTEMAI,NK103104[COUNTER],SP100
          GOTO      MATC6010
.
.         Load Relationship
.
MATC6600  MOVELPTR  NK100301,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC6650 IF EQUAL
.
          MATCH     BLANKSTR,NK100301
          IF        @EQUAL
            MOVE      SP70,CONTRELP
            GOTO      MATC6660
          ENDIF
.
MATC6650  PACK      CONTRELP,NK100301,SP70
.
.         Load Send Letter / Send SMS Flag
.
MATC6660  MOVELPTR  NK102201,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC6700 IF EQUAL
.
          MATCH     BLANKSTR,NK102201
          IF        @EQUAL
            MOVE      ZERO,CONTSLET
            MOVE      ZERO,CONTSSMS
            GOTO      MATC6700
          ENDIF
.
          PACK      D2,NK102201,SP2
          MATCH     "LS",D2
          IF        @EQUAL
            MOVE      ONE,CONTSLET
            MOVE      ONE,CONTSSMS
            GOTO      MATC6700
          ENDIF
.
          MATCH     ANSL,NK102201
          IF        @EQUAL
            MOVE      ONE,CONTSLET
            MOVE      ZERO,CONTSSMS
            GOTO      MATC6700
          ENDIF
.
          MATCH     ANSS,NK102201
          IF        @EQUAL
            MOVE      ZERO,CONTSLET
            MOVE      ONE,CONTSSMS
            GOTO      MATC6700
          ENDIF
.
.         Load End Date
.
MATC6700  MOVELPTR  NK100901,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC6750 IF EQUAL
.
          MATCH     BLANKSTR,NK100901
          IF        @EQUAL
            MOVE      SP70,CONTDINA
            GOTO      MATC6800
          ENDIF
.
MATC6750  PACK      CONTDINA,NK100901,SP70
.
.         Load Main Language Spoken at Home 1
.
MATC6800  MOVELPTR  NK102001,FORM3
          COMPARE   ZERO,FORM3
          GOTO      MATC6850 IF EQUAL
.
          MATCH     BLANKSTR,NK102001
          IF        @EQUAL
            MOVE      SP70,CONTLAN1
            GOTO      MATC6900
          ENDIF
.
MATC6850  PACK      CONTLAN1,NK102001,SP70
.
.         Load TPS Unique ID
.
MATC6900  MOVE      TOPASID,CONTTPID
.
.         Load webPAS Unique ID, unless this is a change of contact type
.         to an existing webPAS record.
.
          COMPARE   ZERO,CTCHGFLG                * change of contact type ?
          GOTO      MATC7000 IF EQUAL            * no
.
          MOVE      WEBPASID,CONTWPID            * yes
          GOTO      MATC8000
.
MATC7000  CALL      CONU0000                     * get next webPAS unique id
          MOVE      PMCEWPID,CONTWPID
.
MATC8000  CALL      WRTEMP2                      * write temp record
.
MATC9999  RETURN
+
.*****************************************************************************
.*                              PNOK0000           Called by: PPMI0000       *
.*                 Process repeating NK1 segments (extra contacts only)      *
.* Requires:  NK1COUNT - number of NK1 segments received (with the exception *
.*                       of the NK1 "delete" segment).                       *
.*            NK1FOUND - found NK1 segment flag                              *
.*                             0 = one or more NK1 segment found             *
.*                             1 = no NK1 segment found                      *
.*            PURNO - Patient U/R                                            *
.*****************************************************************************
.
PNOK0000  MATCH     "1",PTCNNEWC                 * using extra contacts ?
          GOTO      PNOK9999 IF NOT EQUAL        * no - finished
.
.         Check if an NK1 segment was received
.
          BRANCH    NK1FOUND,PNOK9999            * no NK1 segments received
.
          MATCH     "1",PTCNH7ID
          IF        @EQUAL
            CALL      PNKA0000                   * alternate processing routine
            GOTO      PNOK9999
          ENDIF
.
          SUB       ONE,NK1COUNT
          MOVE      NK1COUNT,SVNK1CNT            * save NK1 segment count
.
.         First, delete all existing contacts for this U/R
.
PNOK0010  PACK      KEY14,PURNO,SP20
          CALL      RSPMCEX1                     * position on U/R
          CALL      RKPMCEX1                     * read next record
          BRANCH    OVRCD,PNOK0070
.
          MATCH     PURNO,PMCEURNO               * same U/R still ?
          GOTO      PNOK0070 IF NOT EQUAL        * no - finised deleting
.
          PACK      KEY14,PMCEURNO,PMCETYPE,PMCECNTR
          CALL      DEPMCEX1                     * delete record
          GOTO      PNOK0010
.
PNOK0070  COMPARE   ZERO,SVNK1CNT                * any NK1's to process ?
          GOTO      PNOK9999 IF EQUAL            * no - finished
.
.         There is one or more valid NK1 segments, so process the
.         contacts from each of the NK1 segments.
.
          MOVE      ZERO,NK1COUNT                * initialise NK1 segment count
          CALL      CLPMSCEX                     * clear pmscexaf fields
          MOVE      SP70,COUNTRY
.
          PACK      KEY15,NK1SEGMT,SP20
          CALL      RSTEMP1                      * position on NK1 segment
PNOK0080  CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,PNOK0090               * eof - finished
.
          MATCH     NK1SEGMT,RTMPSEGI            * same segment still ?
          GOTO      PNOK0090 IF NOT EQUAL        * no - finished
.
          COMPARE   NK1COUNT,RTMPSEGC            * same segment count still ?
          GOTO      PNOK0100 IF EQUAL            * yes
.
.         We have a new segment, so clear the phone number save variables
.         in preparation for the next segment's data
.
          MOVE      SP3,SAVCOMP2                 * NK1.31 component 2
          MOVE      SP2,SAVCOMP3                 * NK1.31 component 3
.
          ADD       ONE,NK1COUNT                 * increment NK1 segment count
.
          COMPARE   ONE,NK1COUNT                 * first NK1 segment ?
          GOTO      PNOK0100 IF EQUAL            * yes
.
.         We have a new segment and therefore have completed loading the
.         pmscexaf fields for the previous NK1 segment, so write a new record.
.
PNOK0090  MOVE      ZERO,FORM3                   * init. contact type count
          MOVE      PURNO,PMCEURNO
PNOK0095  ADD       ONE,FORM3                    * increment counter
          MOVE      FORM3,PMCECNTR
          PACK      KEY14,PMCEURNO,PMCETYPE,PMCECNTR
          CALL      RAPMCEX1
          COMPARE   ZERO,OVRCD                   * count already on file ?
          GOTO      PNOK0095 IF EQUAL            * yes
.
          CALL      IBACLOCK
          PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
          MOVE      CURRDATE,PMCECDAT
          MOVE      CTIMEIS,PMCECTIM
          MOVE      "HL7RECVR  ",PMCECUID
.
          CALL      WRPMCEX1                     * no - write pmscexaf record
.
          SUB       ONE,SVNK1CNT
          COMPARE   ZERO,SVNK1CNT                * last NK1 record ?
          GOTO      PNOK9999 IF EQUAL            * yes
.
          CALL      CLPMSCEX                     * no - clear pmscexaf fields
          MOVE      SP70,COUNTRY
.
.         Load the relevant field/component
.
PNOK0100  BRANCH    RTMPFLDN,PNOK0080:           * Set ID
                             PNOK0200:           * Name
                             PNOK0300:           * Relationship
                             PNOK0400:           * Address
                             PNOK0500:           * Contact Number
                             PNOK0600:           * Business Phone Number
                             PNOK0700:           * Contact Role
                             PNOK0800:           * Start Date
                             PNOK0900:           * End Date
                             PNOK1000:           * Job Title
                             PNOK1100:           * Job Code/Class
                             PNOK1200:           * Employee Number
                             PNOK1300:           * Organisation Name
                             PNOK1400:           * Marital Status
                             PNOK1500:           * Sex
                             PNOK1600:           * Date/Time of Birth
                             PNOK1700:           * Living Dependency
                             PNOK1800:           * Ambulatory Status
                             PNOK1900:           * Citizenship
                             PNOK2000:           * Primary Language
                             PNOK2100:           * Living Arrangement
                             PNOK2200:           * Publicity Indicator
                             PNOK2300:           * Protection Indicator
                             PNOK2400:           * Student Indicator
                             PNOK2500:           * Religion
                             PNOK2600:           * Mother's Maiden Name
                             PNOK2700:           * Nationality
                             PNOK2800:           * Ethnic Group
                             PNOK2900:           * Contact Reason
                             PNOK3000:           * Contact Person's Name
                             PNOK3100:           * Contact Person's Telephone No
                             PNOK3200:           * Contact Person's Address
                             PNOK3300:           * Identifiers
                             PNOK3400:           * Job Status
                             PNOK3500:           * Race
                             PNOK3600:           * Handicap
                             PNOK3700            * Social Security Number
.
.                   Invalid field number, so ignore
.
          GOTO      PNOK0080
.
.         Name (XPN)
.
PNOK0200  BRANCH    RTMPCMPN,PNOK0201:           * family name (ST)
                             PNOK0202:           * given name (ST)
                             PNOK0203:           * middle name (ST)
                             PNOK0204:           * suffix (ST)
                             PNOK0205:           * prefix (ST)
                             PNOK0206:           * degree (IS)
                             PNOK0207:           * name type code (ID)
                             PNOK0208            * name representation code (ID)
          GOTO      PNOK0080
.
PNOK0201  GOTO      PNOK0080
.
PNOK0202  GOTO      PNOK0080
.
PNOK0203  GOTO      PNOK0080
.
PNOK0204  GOTO      PNOK0080
.
PNOK0205  GOTO      PNOK0080
.
PNOK0206  GOTO      PNOK0080
.
PNOK0207  GOTO      PNOK0080
.
PNOK0208  GOTO      PNOK0080
.
.         Relationship (CE)
.
PNOK0300  BRANCH    RTMPCMPN,PNOK0301:           * identifier (ST)
                             PNOK0302:           * text (ST)
                             PNOK0303:           * name of coding system (ST)
                             PNOK0304:           * alternate identifier (ST)
                             PNOK0305:           * alternate text (ST)
                             PNOK0306            * name of alt. cod. system (ST)
          GOTO      PNOK0080
.
PNOK0301  MOVE      RTMPVRBL,PMCERELP
          GOTO      PNOK0080
.
PNOK0302  GOTO      PNOK0080
.
PNOK0303  GOTO      PNOK0080
.
PNOK0304  GOTO      PNOK0080
.
PNOK0305  GOTO      PNOK0080
.
PNOK0306  GOTO      PNOK0080
.
.         Address (XAD)
.
PNOK0400  BRANCH    RTMPCMPN,PNOK0401:           * street address (ST)
                             PNOK0402:           * other designation (ST)
                             PNOK0403:           * city (ST)
                             PNOK0404:           * state (ST)
                             PNOK0405:           * postal code (ST)
                             PNOK0406:           * country (ID)
                             PNOK0407:           * address type (ID)
                             PNOK0408:           * other geographic dest. (ST)
                             PNOK0409:           * county code (IS)
                             PNOK0410:           * census tract (IS)
                             PNOK0411            * address rep. code (ID)
          GOTO      PNOK0080
.
PNOK0401  GOTO      PNOK0080
.
PNOK0402  GOTO      PNOK0080
.
PNOK0403  GOTO      PNOK0080
.
PNOK0404  GOTO      PNOK0080
.
PNOK0405  GOTO      PNOK0080
.
PNOK0406  GOTO      PNOK0080
.
PNOK0407  GOTO      PNOK0080
.
PNOK0408  GOTO      PNOK0080
.
PNOK0409  GOTO      PNOK0080
.
PNOK0410  GOTO      PNOK0080
.
PNOK0411  GOTO      PNOK0080
.
.         Contact Number (XTN)
.
PNOK0500  BRANCH    RTMPCMPN,PNOK0501:           * number
                             PNOK0502:           * telecomm. use code (ID)
                             PNOK0503:           * telecomm. equipment type (ID)
                             PNOK0504:           * email address (ST)
                             PNOK0505:           * country code (NM)
                             PNOK0506:           * area code (NM)
                             PNOK0507:           * phone numeric (NM)
                             PNOK0508:           * extension (NM)
                             PNOK0509            * any text (ST)
          GOTO      PNOK0080
.
PNOK0501  GOTO      PNOK0080
.
PNOK0502  GOTO      PNOK0080
.
PNOK0503  GOTO      PNOK0080
.
PNOK0504  GOTO      PNOK0080
.
PNOK0505  GOTO      PNOK0080
.
PNOK0506  GOTO      PNOK0080
.
PNOK0507  GOTO      PNOK0080
.
PNOK0508  GOTO      PNOK0080
.
PNOK0509  GOTO      PNOK0080
.
.         Business Phone Number (XTN)
.
PNOK0600  BRANCH    RTMPCMPN,PNOK0601:           * number
                             PNOK0602:           * telecomm. use code (ID)
                             PNOK0603:           * telecomm. equipment type (ID)
                             PNOK0604:           * email address (ST)
                             PNOK0605:           * country code (NM)
                             PNOK0606:           * area code (NM)
                             PNOK0607:           * phone numeric (NM)
                             PNOK0608:           * extension (NM)
                             PNOK0609            * any text (ST)
          GOTO      PNOK0080
.
PNOK0601  GOTO      PNOK0080
.
PNOK0602  GOTO      PNOK0080
.
PNOK0603  GOTO      PNOK0080
.
PNOK0604  GOTO      PNOK0080
.
PNOK0605  GOTO      PNOK0080
.
PNOK0606  GOTO      PNOK0080
.
PNOK0607  GOTO      PNOK0080
.
PNOK0608  GOTO      PNOK0080
.
PNOK0609  GOTO      PNOK0080
.
.         Contact Role (CE)
.
PNOK0700  BRANCH    RTMPCMPN,PNOK0701:           * identifier (ST)
                             PNOK0702:           * text (ST)
                             PNOK0703:           * name of coding system (ST)
                             PNOK0704:           * alternate identifier (ST)
                             PNOK0705:           * alternate text (ST)
                             PNOK0706            * name of alt. cod. system (ST)
          GOTO      PNOK0080
.
PNOK0701  MOVE      RTMPVRBL,PMCETYPE
          GOTO      PNOK0080
.
PNOK0702  GOTO      PNOK0080
.
PNOK0703  GOTO      PNOK0080
.
PNOK0704  GOTO      PNOK0080
.
PNOK0705  GOTO      PNOK0080
.
PNOK0706  GOTO      PNOK0080
.
.         Start Date (DT)
.
PNOK0800  BRANCH    RTMPCMPN,PNOK0801
          GOTO      PNOK0080
.
PNOK0801  GOTO      PNOK0080
.
.         End Date (DT)
.
PNOK0900  BRANCH    RTMPCMPN,PNOK0901
          GOTO      PNOK0080
.
PNOK0901  GOTO      PNOK0080
.
.         Job Title (ST)
.
PNOK1000  BRANCH    RTMPCMPN,PNOK1001
          GOTO      PNOK0080
.
PNOK1001  GOTO      PNOK0080
.                           
.         Job Code/Class (JCC)
.
PNOK1100  BRANCH    RTMPCMPN,PNOK1101:           * job code (IS)
                             PNOK1102            * employee classification (IS)
          GOTO      PNOK0080
.
PNOK1101  GOTO      PNOK0080
.
PNOK1102  GOTO      PNOK0080
.                           
.         Employee Number (CX)
.
PNOK1200  BRANCH    RTMPCMPN,PNOK1201:           * id (ST)
                             PNOK1202:           * check digit (ST)
                             PNOK1203:           * check digit scheme code (ID)
                             PNOK1204:           * assigning authority (HD)
                             PNOK1205:           * identifier type code (ID)
                             PNOK1206            * assigning facility (HD)
          GOTO      PNOK0080
.
PNOK1201  GOTO      PNOK0080
.
PNOK1202  GOTO      PNOK0080
.
PNOK1203  GOTO      PNOK0080
.
PNOK1204  GOTO      PNOK0080
.
PNOK1205  GOTO      PNOK0080
.
PNOK1206  GOTO      PNOK0080
.
.         Organisation Name (XON)
.
PNOK1300  BRANCH    RTMPCMPN,PNOK1301:           * organisation name (ST)
                             PNOK1302:           * org. name type code. (ID)
                             PNOK1303:           * id number (ID)
                             PNOK1304:           * check digit (NM)
                             PNOK1305:           * check digit scheme (ID)
                             PNOK1306:           * assigning authority (HD)
                             PNOK1307:           * identifier type code (ID)
                             PNOK1308:           * assigning facility (HD)
                             PNOK1309            * name representation code (ID)
          GOTO      PNOK0080
.
PNOK1301  GOTO      PNOK0080
.
PNOK1302  GOTO      PNOK0080
.
PNOK1303  GOTO      PNOK0080
.
PNOK1304  GOTO      PNOK0080
.
PNOK1305  GOTO      PNOK0080
.
PNOK1306  GOTO      PNOK0080
.
PNOK1307  GOTO      PNOK0080
.
PNOK1308  GOTO      PNOK0080
.
PNOK1309  GOTO      PNOK0080
.
.         Marital Status (CE)
.
PNOK1400  BRANCH    RTMPCMPN,PNOK1401:           * identifier (ST)
                             PNOK1402:           * text (ST)
                             PNOK1403:           * name of coding system (ST)
                             PNOK1404:           * alternate identifier (ST)
                             PNOK1405:           * alternate text (ST)
                             PNOK1406            * name of alt. cod. system (ST)
          GOTO      PNOK0080
.
PNOK1401  GOTO      PNOK0080
.
PNOK1402  GOTO      PNOK0080
.
PNOK1403  GOTO      PNOK0080
.
PNOK1404  GOTO      PNOK0080
.
PNOK1405  GOTO      PNOK0080
.
PNOK1406  GOTO      PNOK0080
.
.         Sex (IS)
.
PNOK1500  BRANCH    RTMPCMPN,PNOK1501
          GOTO      PNOK0080
.
PNOK1501  GOTO      PNOK0080
.
.         Date/Time of Birth (TS)
.
PNOK1600  BRANCH    RTMPCMPN,PNOK1601
          GOTO      PNOK0080
.
PNOK1601  GOTO      PNOK0080
.
.         Living Dependency (IS)
.
PNOK1700  BRANCH    RTMPCMPN,PNOK1701
          GOTO      PNOK0080
.
PNOK1701  GOTO      PNOK0080
.
.         Ambulatory Status (IS)
.
PNOK1800  BRANCH    RTMPCMPN,PNOK1801
          GOTO      PNOK0080
.
PNOK1801  GOTO      PNOK0080
.
.         Citizenship (CE)
.
PNOK1900  BRANCH    RTMPCMPN,PNOK1901:           * identifier (ST)
                             PNOK1902:           * text (ST)
                             PNOK1903:           * name of coding system (ST)
                             PNOK1904:           * alternate identifier (ST)
                             PNOK1905:           * alternate text (ST)
                             PNOK1906            * name of alt. cod. system (ST)
          GOTO      PNOK0080
.
PNOK1901  GOTO      PNOK0080
.
PNOK1902  GOTO      PNOK0080
.
PNOK1903  GOTO      PNOK0080
.
PNOK1904  GOTO      PNOK0080
.
PNOK1905  GOTO      PNOK0080
.
PNOK1906  GOTO      PNOK0080
.
.         Primary Language (CE)
.
PNOK2000  BRANCH    RTMPCMPN,PNOK2001:           * identifier (ST)
                             PNOK2002:           * text (ST)
                             PNOK2003:           * name of coding system (ST)
                             PNOK2004:           * alternate identifier (ST)
                             PNOK2005:           * alternate text (ST)
                             PNOK2006            * name of alt. cod. system (ST)
          GOTO      PNOK0080
.
PNOK2001  MOVE      RTMPVRBL,PMCELAN1
          GOTO      PNOK0080
.
PNOK2002  GOTO      PNOK0080
.
PNOK2003  GOTO      PNOK0080
.
PNOK2004  GOTO      PNOK0080
.
PNOK2005  GOTO      PNOK0080
.
PNOK2006  GOTO      PNOK0080
.
.         Living Arrangement (IS)
.
PNOK2100  BRANCH    RTMPCMPN,PNOK2101
          GOTO      PNOK0080
.
PNOK2101  GOTO      PNOK0080
.
.         Publicity Code (CE)
.
PNOK2200  BRANCH    RTMPCMPN,PNOK2201:           * identifier (ST)
                             PNOK2202:           * text (ST)
                             PNOK2203:           * name of coding system (ST)
                             PNOK2204:           * alternate identifier (ST)
                             PNOK2205:           * alternate text (ST)
                             PNOK2206            * name of alt. cod. system (ST)
          GOTO      PNOK0080
.
PNOK2201  MOVE      RTMPVRBL,D2
          MATCH     "LS",D2
          IF        @EQUAL
            MOVE      ONE,PMCESLET               * send letter
            MOVE      ONE,PMCESSMS               * send sms
            GOTO      PNOK0080
          ENDIF
          MATCH     ANSL,RTMPVRBL
          IF        @EQUAL
            MOVE      ONE,PMCESLET
            MOVE      ZERO,PMCESSMS
            GOTO      PNOK0080
          ENDIF
          MATCH     ANSS,RTMPVRBL
          IF        @EQUAL
            MOVE      ZERO,PMCESLET
            MOVE      ONE,PMCESSMS
            GOTO      PNOK0080
          ENDIF
          GOTO      PNOK0080
.
PNOK2202  GOTO      PNOK0080
.
PNOK2203  GOTO      PNOK0080
.
PNOK2204  GOTO      PNOK0080
.
PNOK2205  GOTO      PNOK0080
.
PNOK2206  GOTO      PNOK0080
.
.         Protection Indicator (ID)
.
PNOK2300  BRANCH    RTMPCMPN,PNOK2301
          GOTO      PNOK0080
.
PNOK2301  GOTO      PNOK0080
.
.         Student Indicator (IS)
.
PNOK2400  BRANCH    RTMPCMPN,PNOK2401
          GOTO      PNOK0080
.
PNOK2401  GOTO      PNOK0080
.
.         Religion (CE)
.
PNOK2500  BRANCH    RTMPCMPN,PNOK2501:           * identifier (ST)
                             PNOK2502:           * text (ST)
                             PNOK2503:           * name of coding system (ST)
                             PNOK2504:           * alternate identifier (ST)
                             PNOK2505:           * alternate text (ST)
                             PNOK2506            * name of alt. cod. system (ST)
          GOTO      PNOK0080
.
PNOK2501  GOTO      PNOK0080
.
PNOK2502  GOTO      PNOK0080
.
PNOK2503  GOTO      PNOK0080
.
PNOK2504  GOTO      PNOK0080
.
PNOK2505  GOTO      PNOK0080
.
PNOK2506  GOTO      PNOK0080
.
.         Mother's Maiden Name (XPN)
.
PNOK2600  BRANCH    RTMPCMPN,PNOK2601:           * family name (ST)
                             PNOK2602:           * given name (ST)
                             PNOK2603:           * middle name (ST)
                             PNOK2604:           * suffix (ST)
                             PNOK2605:           * prefix (ST)
                             PNOK2606:           * degree (IS)
                             PNOK2607:           * name type code (ID)
                             PNOK2608            * name representation code (ID)
          GOTO      PNOK0080
.
PNOK2601  GOTO      PNOK0080
.                           
PNOK2602  GOTO      PNOK0080
.                           
PNOK2603  GOTO      PNOK0080
.                           
PNOK2604  GOTO      PNOK0080
.                           
PNOK2605  GOTO      PNOK0080
.                           
PNOK2606  GOTO      PNOK0080
.                           
PNOK2607  GOTO      PNOK0080
.                           
PNOK2608  GOTO      PNOK0080
.                           
.         Nationality (CE)
.
PNOK2700  BRANCH    RTMPCMPN,PNOK2701:           * identifier (ST)
                             PNOK2702:           * text (ST)
                             PNOK2703:           * name of coding system (ST)
                             PNOK2704:           * alternate identifier (ST)
                             PNOK2705:           * alternate text (ST)
                             PNOK2706            * name of alt. cod. system (ST)
          GOTO      PNOK0080
.
PNOK2701  GOTO      PNOK0080
.
PNOK2702  GOTO      PNOK0080
.
PNOK2703  GOTO      PNOK0080
.
PNOK2704  GOTO      PNOK0080
.
PNOK2705  GOTO      PNOK0080
.
PNOK2706  GOTO      PNOK0080
.
.         Ethnic Group (CE)
.
PNOK2800  BRANCH    RTMPCMPN,PNOK2801:           * identifier (ST)
                             PNOK2802:           * text (ST)
                             PNOK2803:           * name of coding system (ST)
                             PNOK2804:           * alternate identifier (ST)
                             PNOK2805:           * alternate text (ST)
                             PNOK2806            * name of alt. cod. system (ST)
          GOTO      PNOK0080
.
PNOK2801  GOTO      PNOK0080
.
PNOK2802  GOTO      PNOK0080
.
PNOK2803  GOTO      PNOK0080
.
PNOK2804  GOTO      PNOK0080
.
PNOK2805  GOTO      PNOK0080
.
PNOK2806  GOTO      PNOK0080
.
.         Contact Reason (CE)
.
PNOK2900  BRANCH    RTMPCMPN,PNOK2901:           * identifier (ST)
                             PNOK2902:           * text (ST)
                             PNOK2903:           * name of coding system (ST)
                             PNOK2904:           * alternate identifier (ST)
                             PNOK2905:           * alternate text (ST)
                             PNOK2906            * name of alt. cod. system (ST)
          GOTO      PNOK0080
.
PNOK2901  GOTO      PNOK0080
.
PNOK2902  GOTO      PNOK0080
.
PNOK2903  GOTO      PNOK0080
.
PNOK2904  GOTO      PNOK0080
.
PNOK2905  GOTO      PNOK0080
.
PNOK2906  GOTO      PNOK0080
.
.         Contact Person's Name (XPN)
.
PNOK3000  BRANCH    RTMPCMPN,PNOK3001:           * family name (ST)
                             PNOK3002:           * given name (ST)
                             PNOK3003:           * middle name (ST)
                             PNOK3004:           * suffix (ST)
                             PNOK3005:           * prefix (ST)
                             PNOK3006:           * degree (IS)
                             PNOK3007:           * name type code (ID)
                             PNOK3008            * name representation code (ID)
          GOTO      PNOK0080
.
PNOK3001  MOVE      RTMPVRBL,PMCESNAM
          GOTO      PNOK0080
.                           
PNOK3002  MOVE      RTMPVRBL,PMCEGNAM
          GOTO      PNOK0080
.                           
PNOK3003  MOVE      RTMPVRBL,PMCEGNM2
          GOTO      PNOK0080
.                           
PNOK3004  GOTO      PNOK0080
.                           
PNOK3005  MOVE      RTMPVRBL,PMCETITL
          GOTO      PNOK0080
.                           
PNOK3006  GOTO      PNOK0080
.                           
PNOK3007  GOTO      PNOK0080
.                           
PNOK3008  GOTO      PNOK0080
.
.         Contact Person's Telephone Number (XTN)
.         The valid (parameter based) formats received are as follows:
.
.         ^^CP^^^^<cell phone>
.         ^PRN^PH^<email address>^^^<home phone>
.         ^WPN^PH^^^^<business phone>
.
PNOK3100  BRANCH    RTMPCMPN,PNOK3101:           * number
                             PNOK3102:           * telecomm. use code (ID)
                             PNOK3103:           * telecomm. equipment type (ID)
                             PNOK3104:           * email address (ST)
                             PNOK3105:           * country code (NM)
                             PNOK3106:           * area code (NM)
                             PNOK3107:           * phone numeric (NM)
                             PNOK3108:           * extension (NM)
                             PNOK3109            * any text (ST)
          GOTO      PNOK0080
.
PNOK3101  GOTO      PNOK0080
.
PNOK3102  MATCH     "PRN",RTMPVRBL               * home phone ?
          IF        @EQUAL
            MOVE      "PRN",SAVCOMP2             * yes
          ENDIF
.
          MATCH     "WPN",RTMPVRBL               * business phone ?
          IF        @EQUAL
            MOVE      "WPN",SAVCOMP2             * yes
          ENDIF
.
          GOTO      PNOK0080
.
PNOK3103  MATCH     "CP",RTMPVRBL                * cell phone ?
          IF        @EQUAL
            MOVE      "CP",SAVCOMP3              * yes
          ENDIF
.
          MATCH     "PH",RTMPVRBL                * phone ?
          IF        @EQUAL
            MOVE      "PH",SAVCOMP3
          ENDIF
.
          GOTO      PNOK0080
.
PNOK3104  MATCH     "PH",SAVCOMP3                * phone number ?
          GOTO      PNOK0080 IF NOT EQUAL        * no
.
          MATCH     "PRN",SAVCOMP2               * home phone ?
          GOTO      PNOK0080 IF NOT EQUAL        * no
.
          STRIP     RTMPVRBL                     * remove trailing spaces
          MOVELPTR  RTMPVRBL,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      PNOK0080
          ENDIF
.
          MATCH     BLANKSTR,RTMPVRBL            * null field ?
          IF        @EQUAL
            MOVE      SP100,PMCEEMAI             * yes - clear email address
            GOTO      PNOK0080
          ENDIF
.
          PACK      PMCEEMAI,RTMPVRBL,SP100
          GOTO      PNOK0080
.
PNOK3105  GOTO      PNOK0080
.
PNOK3106  GOTO      PNOK0080
.
PNOK3107  MATCH     "PH",SAVCOMP3                * phone number ?
          IF         !@EQUAL
            MATCH     "CP",SAVCOMP3              * no - cell phone ?
            GOTO      PNOK0080 IF NOT EQUAL
          ENDIF
.
          STRIP     RTMPVRBL                     * remove trailing spaces
          MOVELPTR  RTMPVRBL,FORM3               * field populated ?
          IF        FORM3 = 0
            GOTO      PNOK0080
          ENDIF
.
          MATCH     BLANKSTR,RTMPVRBL            * null field ?
          IF        @EQUAL
            MATCH     "CP",SAVCOMP3              * cell phone ?
            IF        @EQUAL
              MOVE      SP100,PMCETELM           * yes
            ELSE
              MATCH     "PRN",SAVCOMP2           * home phone ?
              IF        @EQUAL
                MOVE      SP100,PMCETELP         * yes
              ELSE
                MOVE      SP100,PMCETELB         * yes
              ENDIF
            ENDIF
            GOTO      PNOK0080
          ENDIF
.
          MATCH     "CP",SAVCOMP3                * cell phone ?
          IF        @EQUAL
            PACK      PMCETELM,RTMPVRBL,SP100    * yes
          ELSE
            MATCH     "PRN",SAVCOMP2             * home phone ?
            IF        @EQUAL
              PACK      PMCETELP,RTMPVRBL,SP100  * yes
            ELSE
              PACK      PMCETELB,RTMPVRBL,SP100
            ENDIF
          ENDIF
.
          GOTO      PNOK0080
.
PNOK3108  GOTO      PNOK0080
.
PNOK3109  GOTO      PNOK0080
.
.         Contact Person's Address (XAD)
.
PNOK3200  BRANCH    RTMPCMPN,PNOK3201:           * street address (ST)
                             PNOK3202:           * other designation (ST)
                             PNOK3203:           * city (ST)
                             PNOK3204:           * state (ST)
                             PNOK3205:           * postal code (ST)
                             PNOK3206:           * country (ID)
                             PNOK3207:           * address type (ID)
                             PNOK3208:           * other geographic dest. (ST)
                             PNOK3209:           * county code (IS)
                             PNOK3210:           * census tract (IS)
                             PNOK3211            * address rep. code (ID)
          GOTO      PNOK0080
.
PNOK3201  MOVE      RTMPVRBL,PMCEADD1
          GOTO      PNOK0080
.
PNOK3202  MOVE      RTMPVRBL,PMCEADD2
          GOTO      PNOK0080
.
PNOK3203  MOVE      RTMPVRBL,PMCEADD3
          GOTO      PNOK0080
.
PNOK3204  MOVE      RTMPVRBL,PMCEADD4
          GOTO      PNOK0080
.
PNOK3205  MOVE      RTMPVRBL,PMCEPOST
          GOTO      PNOK0080
.
PNOK3206  MOVE      RTMPVRBL,COUNTRY
          GOTO      PNOK0080
.
PNOK3207  GOTO      PNOK0080
.
PNOK3208  GOTO      PNOK0080
.
PNOK3209  GOTO      PNOK0080
.
PNOK3210  GOTO      PNOK0080
.
PNOK3211  GOTO      PNOK0080
.
.         Identifiers (CX)
.
PNOK3300  BRANCH    RTMPCMPN,PNOK3301:           * id (ST)
                             PNOK3302:           * check digit (ST)
                             PNOK3303:           * check digit scheme code (ID)
                             PNOK3304:           * assigning authority (HD)
                             PNOK3305:           * identifier type code (ID)
                             PNOK3306            * assigning facility (HD)
          GOTO      PNOK0080
.
PNOK3301  GOTO      PNOK0080
.
PNOK3302  GOTO      PNOK0080
.
PNOK3303  GOTO      PNOK0080
.
PNOK3304  GOTO      PNOK0080
.
PNOK3305  GOTO      PNOK0080
.
PNOK3306  GOTO      PNOK0080
.
.         Job Status (IS)
.
PNOK3400  BRANCH    RTMPCMPN,PNOK3401
          GOTO      PNOK0080
.
PNOK3401  GOTO      PNOK0080
.
.         Race (CE)
.
PNOK3500  BRANCH    RTMPCMPN,PNOK3501:           * identifier (ST)
                             PNOK3502:           * text (ST)
                             PNOK3503:           * name of coding system (ST)
                             PNOK3504:           * alternate identifier (ST)
                             PNOK3505:           * alternate text (ST)
                             PNOK3506            * name of alt. cod. system (ST)
          GOTO      PNOK0080
.
PNOK3501  GOTO      PNOK0080
.
PNOK3502  GOTO      PNOK0080
.
PNOK3503  GOTO      PNOK0080
.
PNOK3504  GOTO      PNOK0080
.
PNOK3505  GOTO      PNOK0080
.
PNOK3506  GOTO      PNOK0080
.
.         Handicap (IS)
.
PNOK3600  BRANCH    RTMPCMPN,PNOK3601
          GOTO      PNOK0080
.
PNOK3601  GOTO      PNOK0080
.
.         Contact Person Social Security Number (ST)
.
PNOK3700  BRANCH    RTMPCMPN,PNOK3701
          GOTO      PNOK0080
.
PNOK3701  GOTO      PNOK0080
.
PNOK9999  RETURN
+
.*****************************************************************************
.*                              PNKA0000           Called by: PNOK0000       *
.*     Process repeating NK1 segments (extra contacts only) where the        *
.*     delete segment is being ignored.                                      *
.* Requires:  NK1COUNT - number of NK1 segments received (with the exception *
.*                       of the NK1 "delete" segment).                       *
.*            NK1FOUND - found NK1 segment flag                              *
.*                             0 = one or more NK1 segment found             *
.*                             1 = no NK1 segment found                      *
.*            PURNO - Patient U/R                                            *
.*****************************************************************************
.
.         Loop through the current contact records on the contact
.         temp file and process them back to pmscexaf.
.
PNKA0000  MOVE      SP10,KEY7
          CALL      RSTEMP2                      * position at start of file
PNKA0500  CALL      RKTEMP2                      * read next record
          BRANCH    OVRCD,PNKA9999               * eof - finished
.
          BRANCH    CONTSTAT,PNKA1000:           * Add new contact record
                             PNKA2000            * Update existing contact rec.
.
.         Delete an existing contact record
.
          PACK      KEY14,PURNO,CONTTYPE,CONTCNTR
          CALL      RDPMCEX1                     * current record found ?
          BRANCH    OVRCD,PNKA0500               * no - ignore record
.
          PACK      KEY5,CATTC,CONTTYPE
          CALL      RDCODE1                      * code on file ?
          BRANCH    OVRCD,PNKA0500               * no - ignore record
.         
          MATCH     ANSX,TCINDC21                * exclude this contact ?
          GOTO      PNKA0500 IF EQUAL            * yes - ignore record
.
          MATCH     "1",PMCEACTV                 * inactive contact ?
          GOTO      PNKA0500 IF EQUAL            * yes - don't delete
.
          MOVE      FOUR,AUDTTYPE                * yes
          CALL      WAPMCE00                     * write delete audit record
.
          PACK      KEY14,PMCEURNO,PMCETYPE,PMCECNTR
          CALL      DEPMCEX1                     * delete record
          GOTO      PNKA0500                     * read next record
.
.         Add a new contact record
.
PNKA1000  CALL      CLPMSCEX                     * clear pmscexaf variables
          MOVE      PURNO,PMCEURNO               * load pmscexaf variables
          PACK      PMCETYPE,CONTTYPE,SP70
          PACK      PMCECNTR,CONTCNTR,SP70
          PACK      PMCETITL,CONTTITL,SP70
          PACK      PMCESNAM,CONTSNAM,SP70
          PACK      PMCEGNAM,CONTGNAM,SP70
          PACK      PMCEGNM2,CONTGNM2,SP70
          PACK      PMCEADD1,CONTADD1,SP70
          PACK      PMCEADD2,CONTADD2,SP70
          PACK      PMCEADD3,CONTADD3,SP70
          PACK      PMCEADD4,CONTADD4,SP70
          PACK      PMCEPOST,CONTPOST,SP70
          PACK      PMCETELP,CONTTELP,SP70
          PACK      PMCETELB,CONTTELB,SP70
          PACK      PMCETELM,CONTTELM,SP70
          PACK      PMCERELP,CONTRELP,SP70
          PACK      PMCESLET,CONTSLET,SP70
          PACK      PMCESSMS,CONTSSMS,SP70
          PACK      PMCEEMAI,CONTEMAI,SP100
          PACK      PMCELAN1,CONTLAN1,SP70
          PACK      PMCEDINA,CONTDINA,SP70
          MATCH     SP8,PMCEDINA
          IF        @EQUAL
            MOVE      ZERO,PMCEACTV
          ELSE
            MOVE      ONE,PMCEACTV
          ENDIF
          CALL      IBACLOCK
          PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
          MOVE      CURRDATE,PMCECDAT
          MOVE      CTIMEIS,PMCECTIM
          MOVE      "HL7RECVR  ",PMCECUID
          PACK      PMCETPID,CONTTPID,SP70
          PACK      PMCEWPID,CONTWPID,SP70
.
          PACK      KEY14,PMCEURNO,PMCETYPE,PMCECNTR
          CALL      RAPMCEX1                     * record already on file ?
          IF        OVRCD = 1
            CALL      WRPMCEX1                   * no - write new record
.
            MOVE      ONE,AUDTTYPE
            CALL      WAPMCE00                   * write add audit record
          ENDIF
          GOTO      PNKA0500                     * get next record
.
.         Update an existing contact record
.
PNKA2000  PACK      KEY14,PURNO,CONTTYPE,CONTCNTR
          CALL      RDPMCEX1                     * record found ?
          BRANCH    OVRCD,PNKA0500               * no - ignore record
.
.         Check if the record data has changed and if so, then we need
.         to update the pmscexaf record.
.
          MATCH     PMCETITL,CONTTITL            * same title ?
          GOTO      PNKA2100 IF NOT EQUAL        * no - proceed to update record
.
          MATCH     PMCESNAM,CONTSNAM            * same surname ?
          GOTO      PNKA2100 IF NOT EQUAL        * no - proceed to update record
.
          MATCH     PMCEGNAM,CONTGNAM            * same given name ?
          GOTO      PNKA2100 IF NOT EQUAL        * no - proceed to update record
.
          MATCH     PMCEGNM2,CONTGNM2            * same second given name ?
          GOTO      PNKA2100 IF NOT EQUAL        * no - proceed to update record
.
          MATCH     PMCEADD1,CONTADD1            * same address line 1 ?
          GOTO      PNKA2100 IF NOT EQUAL        * no - proceed to update record
.
          MATCH     PMCEADD2,CONTADD2            * same address line 2 ?
          GOTO      PNKA2100 IF NOT EQUAL        * no - proceed to update record
.
          MATCH     PMCEADD3,CONTADD3            * same address line 3 ?
          GOTO      PNKA2100 IF NOT EQUAL        * no - proceed to update record
.
          MATCH     PMCEADD4,CONTADD4            * same address line 4 ?
          GOTO      PNKA2100 IF NOT EQUAL        * no - proceed to update record
.
          MATCH     PMCEPOST,CONTPOST            * same postcode ?
          GOTO      PNKA2100 IF NOT EQUAL        * no - proceed to update record
.
          MATCH     PMCETELP,CONTTELP            * same private telephone ?
          GOTO      PNKA2100 IF NOT EQUAL        * no - proceed to update record
.
          MATCH     PMCETELB,CONTTELB            * same business telephone ?
          GOTO      PNKA2100 IF NOT EQUAL        * no - proceed to update record
.
          MATCH     PMCETELM,CONTTELM            * same mobile telephone ?
          GOTO      PNKA2100 IF NOT EQUAL        * no - proceed to update record
.
          MATCH     PMCERELP,CONTRELP            * same relationship ?
          GOTO      PNKA2100 IF NOT EQUAL        * no - proceed to update record
.
          MATCH     PMCESLET,CONTSLET            * same send letter flag ?
          GOTO      PNKA2100 IF NOT EQUAL        * no - proceed to update record
.
          MATCH     PMCESSMS,CONTSSMS            * same send sms flag ?
          GOTO      PNKA2100 IF NOT EQUAL        * no - proceed to update record
.
          MATCH     PMCEEMAI,CONTEMAI            * same email address ?
          GOTO      PNKA2100 IF NOT EQUAL        * no - proceed to update record
.
          MATCH     PMCEDINA,CONTDINA            * same end date ?
          GOTO      PNKA2100 IF NOT EQUAL        * no - proceed to update record
.
          MATCH     PMCETPID,CONTTPID            * same TPS Unique ID ?
          GOTO      PNKA2100 IF NOT EQUAL        * no - proceed to update record
.
          MATCH     PMCELAN1,CONTLAN1            * same Main Lang at Home 1 ?
          GOTO      PNKA2100 IF NOT EQUAL        * no - proceed to update record
.
          GOTO      PNKA0500                     * record unchanged - ignore
.
PNKA2100  MOVE      TWO,AUDTTYPE
          CALL      WAPMCE00                     * write before audit record
.
          PACK      PMCETITL,CONTTITL,SP70       * load new data values
          PACK      PMCESNAM,CONTSNAM,SP70
          PACK      PMCEGNAM,CONTGNAM,SP70
          PACK      PMCEGNM2,CONTGNM2,SP70
          PACK      PMCEADD1,CONTADD1,SP70
          PACK      PMCEADD2,CONTADD2,SP70
          PACK      PMCEADD3,CONTADD3,SP70
          PACK      PMCEADD4,CONTADD4,SP70
          PACK      PMCEPOST,CONTPOST,SP70
          PACK      PMCETELP,CONTTELP,SP70
          PACK      PMCETELB,CONTTELB,SP70
          PACK      PMCETELM,CONTTELM,SP70
          PACK      PMCERELP,CONTRELP,SP70
          PACK      PMCESLET,CONTSLET,SP70
          PACK      PMCESSMS,CONTSSMS,SP70
          PACK      PMCEEMAI,CONTEMAI,SP100
          PACK      PMCELAN1,CONTLAN1,SP70
          PACK      PMCEDINA,CONTDINA,SP70
          MATCH     SP8,PMCEDINA
          IF        @EQUAL
            MOVE      ZERO,PMCEACTV
          ELSE
            MOVE      ONE,PMCEACTV
          ENDIF
          CALL      IBACLOCK
          PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
          MOVE      CURRDATE,PMCEUDAT
          MOVE      CTIMEIS,PMCEUTIM
          MOVE      "HL7RECVR  ",PMCEUUID
          PACK      PMCETPID,CONTTPID,SP70
          PACK      PMCEWPID,CONTWPID,SP70
          CALL      UPPMCEX1                     * update record
.
          MOVE      THREE,AUDTTYPE
          CALL      WAPMCE00                     * write after audit record
          GOTO      PNKA0500                     * get next record
.
PNKA9999  RETURN
+
.*****************************************************************************
.*                              PCRD0000           Called by: PPMI0000       *
.*                 Process concession card details                           *
.* Requires:  CARDTYPE - concession card type                                *
.*              1 = Centrelink                                               *
.*              2 = Safety Net                                               *
.*              3 = DVA                                                      *
.*              4 = Pension                                                  *
.*              5 = Seniors                                                  *
.*              6 = Chemotherapy                                             *
.*              7 = NDIS                                                     *
.*              8 = Ambulance Number                                         *
.*            PID00301 - identifier value                                    *
.*            DVCOLOLD - DVA card colour code (Cat DX) - currently on file   *
.*            DVCOLOUR - DVA card colour code (Cat DX) - received in PID.27  *
.*            DVCOLFLG - DVA card colour flag                                *
.*                         0 = valid code present, so load data              *
.*                         1 = code is null so replace with spaces           *
.*                         2 = not populated, so field remains unchanged     *
.*            DVEXPFLG - DVA expiry date flag                                *
.*                         0 = valid date present, so load data              *
.*                         1 = date is null so replace with spaces           *
.*                         2 = not populated, so date remains unchanged      *
.*****************************************************************************
.
.         Find the first category ct code where Indicator 1 matches the
.         type of identifier we are processing.
.
PCRD0000  IF        CARDTYPE = 4
            MATCH     SP3,SAVPCARD               * TSK 0946106
            GOTO      PCRD0050 IF EQUAL          * not using 'NoVal' pension crd
.
            PACK      KEY5,CATCT,SAVPCARD
            CALL      RDCODE1
            BRANCH    OVRCD,PCRD0050
            GOTO      PCRD0500                   * use 'NoVal' pension card
          ENDIF
.
PCRD0050  PACK      KEY5,CATCT,SP5
          CALL      RDSCODE1                     * code on file ?
PCRD0100  CALL      RDKCODE1                     * read next record
          BRANCH    OVRCD,PCRD0400               * eof - not found
.
          MATCH     CATCT,TCODE                  * same category still ?
          GOTO      PCRD0400 IF NOT EQUAL        * no - not found
.
          MATCH     SP1,TCINDC1                  * blank indicator 1 ?
          GOTO      PCRD0100 IF EQUAL            * yes - ignore record
.
          TYPE      TCINDC1                      * numeric indicator 1 ?
          GOTO      PCRD0100 IF NOT EQUAL        * no - ignore record
.
          MOVE      TCINDC1,FORM1
          COMPARE   FORM1,CARDTYPE               * same concession card type ?
          GOTO      PCRD0100 IF NOT EQUAL        * no - ignore record
.
          IF        CARDTYPE = 4
PCRD0200    MATCH     ANSV,TCINDC5               * TSK 0946106
            GOTO      PCRD0100 IF EQUAL          * do not use 'NoVal' card type
          ENDIF
          GOTO      PCRD0500                     * card type found so continue
.
.         No concession card code set up for the concession card type
.
PCRD0400  MATCH     BLANKSTR,PID00301[COUNTER]   * blank ? (CAR 312020)
          GOTO      PCRD9999 IF EQUAL            * yes - ignore
.
          MOVE      "Concession Card code not set up for card type",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      PCRD9999
.
.         First, delete any existing pmsccdaf record for the concession card
.         type.
.
PCRD0500  PACK      KEY19,PURNO,SP20
PCRD0510  CALL      RSPMCCD1                     * position on U/R
PCRD0520  CALL      RKPMCCD1                     * read next record
          BRANCH    OVRCD,PCRD5000               * eof - no existing record
.
          MATCH     PURNO,PMCDURNO               * same U/R still ?
          GOTO      PCRD5000 IF NOT EQUAL        * no - no existing record
.
          MATCH     ACODE,PMCDCTYP               * same concession card type ?
          GOTO      PCRD0520 IF NOT EQUAL        * no - get next record
.
          MOVE      SP3,DVCOLOLD                 * 0918843
          MOVE      SP8,DVEXPOLD                 * 0943359
          IF        CARDTYPE = 3
            MATCH     PMCDCNUM,PID00301[COUNTER]
            IF        @EQUAL
              MOVE      PMCDDVAC,DVCOLOLD        * save existing DVA card colour
              MOVE      PMCDEXDT,DVEXPOLD        * save existing DVA expiry date
            ENDIF
          ENDIF
.
          PACK      KEY19,PURNO,PMCDEXDT,ACODE,SP20
          MOVE      KEY19,SAVKEY19
          CALL      DEPMCCD1                     * delete old concession card
.
          MOVE      SAVKEY19,KEY19
          GOTO      PCRD0510                     * get next record
.
.         There is no existing concession card record now, so check if
.         the concession card number field was null.
.
PCRD5000  MATCH     BLANKSTR,PID00301[COUNTER]   * null field ?
          GOTO      PCRD9999 IF EQUAL            * yes - finished
.
.         The field is not null, so write a new record
.
          MOVE      PURNO,PMCDURNO               * load pmsccdaf variables
          MOVE      ACODE,PMCDCTYP
          PACK      PMCDCNUM,PID00301[COUNTER],SP100
.
          MOVE      SP8,DIM8
          CLEAR     DIM8
          LOAD      DIM8,CARDTYPE,CLEXPIRY,SNEXPIRY,DVEXPIRY,PNEXPIRY:
                                  SREXPIRY,CMEXPIRY,NDEXPIRY
          MOVELPTR  DIM8,FORM1
          IF        FORM1 <> 0
            LOAD      PMCDEXDT,CARDTYPE,CLEXPIRY,SNEXPIRY,DVEXPIRY,PNEXPIRY:
                                        SREXPIRY,CMEXPIRY,NDEXPIRY
          ELSE
            LOAD      PMCDEXDT,CARDTYPE,SP8,SP8,SP8,SP8,SP8,SP8,SP8
          ENDIF
.
          CALL      IBACLOCK                     * get current date/time
          PACK      PMCDCDAT,CCC,CYY,CMM,CDD
          REP       " 0",PMCDCDAT
          MOVE      CTIMEIS,PMCDCTIM
          REP       " 0",PMCDCTIM
          MOVE      "HL7RECVR  ",PMCDCUID
          MOVE      SP100,PMCDUDAT
          MOVE      SP100,PMCDUTIM
          MOVE      SP100,PMCDUUID
.0918843
          MOVE      SP3,PMCDDVAC
          IF        CARDTYPE = 3
            IF        DVCOLFLG = 0
              MOVE      DVCOLOUR,PMCDDVAC        * valid code received in PID.27
            ENDIF
            IF        DVCOLFLG = 2
              MOVE      DVCOLOLD,PMCDDVAC        * use currently existing code
            ENDIF
          ENDIF
.0943359
          IF        CARDTYPE = 3
            IF        DVEXPFLG = 0
              MOVE      DVEXPIRY,PMCDEXDT        * valid date received in ZXP.5
            ENDIF
            IF        DVEXPFLG = 2
              MOVE      DVEXPOLD,PMCDEXDT        * use currently existing date
            ENDIF
          ENDIF
.
          MOVE      SP100,PMCDSPAR
.
          CALL      WRPMCCD1                     * write pmsccdaf record
.
PCRD9999  RETURN
+
.*****************************************************************************
.*                              ADDUAI00           Called by: PPMI0000       *
.*        Add a new Alternate ID record using the first Cat AI code          *
.*        found with Indicator 4=U and the UPI as the Alternate ID.          *
.*        Note: This will replace any existing alternate ID with type=UPI.   *
.*****************************************************************************
ADDUAI00  MATCH     "1",PTCNEPMI
          GOTO      ADDUAI99 IF NOT EQUAL        * not using extrnal PMI
.
          MATCH     BLANKSTR,PID00301[COUNTER]
          GOTO      ADDUAI99 IF EQUAL            * no UPI number
.
          MATCH     SP70,PID00301[COUNTER]
          GOTO      ADDUAI99 IF EQUAL            * no UPI number
.
          PACK      KEY5,ANSA,ANSI,SP70
          CALL      RDSCODE1
ADDUAI10  CALL      RDKCODE1                     * find the code for type=UPI
          BRANCH    OVRCD,ADDUAI99
.
          MATCH     "AI",TCODE
          GOTO      ADDUAI99 IF NOT EQUAL
.
          MATCH     "U",TCINDC4
          GOTO      ADDUAI10 IF NOT EQUAL
.
          MOVE      PID00301[COUNTER],DIM20      * set the alternate ID (UPI)
          RJUSTIFY  DIM20
.
          PACK      KEY31,DIM20,SP70
          CALL      RSPMAID2
          CALL      RKPMAID2
          BRANCH    OVRCD,ADDUAI50               * ok to add new UPI
.
          MATCH     DIM20,PMAIALID
          GOTO      ADDUAI99 IF EQUAL            * UPI already exists so finish
.
ADDUAI50  PACK      KEY31,PURNO,ACODE,SP70
          CALL      RSPMAID1
          CALL      RKPMAID1
          BRANCH    OVRCD,ADDUAI60
.
          MATCH     PURNO,PMAIURNO               * same U/R still ?
          GOTO      ADDUAI60 IF NOT EQUAL        * no - finished deleting
.
          MATCH     ACODE,PMAITYPE               * same type still ?
          GOTO      ADDUAI60 IF NOT EQUAL        * no - finished deleting
.
          PACK      KEY31,PMAIURNO,PMAITYPE,PMAIALID
          CALL      DEPMAID1                     * delete existing UPI record
          GOTO      ADDUAI50
.
ADDUAI60  CALL      CLPMSAID
          CALL      IBACLOCK
          READ      CONTROLF,HUND10;*249,PTCNDAUR
.
          PACK      KEY31,PURNO,ACODE,DIM20,SP70
          CALL      RAPMAID1
          IF        OVRCD=1
            MATCH     "1",PTCNDAUR
            IF        @EQUAL
              MOVE      "1",PMAIDISU
            ENDIF
            MOVE      PURNO,PMAIURNO
            MOVE      ACODE,PMAITYPE
            MOVE      DIM20,PMAIALID
            MOVE      "HL7RECVR  ",USERID
            MOVE      USERID,PMAICRUD
            PACK      PMAICRDT,CCC,CYY,CMM,CDD
            REP       " 0",PMAICRDT
            MOVE      CTIMEIS,PMAICRTM
            CALL      WRPMAID1                   * add new UPI record
          ELSE
            GOTO      ADDUAI99                   * should not exist
          ENDIF
.
.         Write nsw edw record for UPI change
.
          MOVE      "16",PMEWTYPE
          PACK      PMEWNEWV,PMAIURNO,PMAITYPE,PMAIALID,SP70
          CALL      WREDW000
.
ADDUAI99  RETURN
+
.******************************************************************************
.*                                 WREDW000                                   *
.* If any of the EDWWARD variables have changed, write/update pmsedwaf        *
.******************************************************************************
WREDW000  READ      CONTROLF,HUND25;*93,PTCNNSSI
          MATCH     SP70,PTCNNSSI        * no edward source system
          GOTO      WREDW999 IF EQUAL
.
          MATCH     "00000000000000000000",PTCNNSSI  * no edward source system
          GOTO      WREDW999 IF EQUAL
.
          OPEN      PMSEDWA2,"pmsedwaf"
.
          MOVE      PURNO,PMEWURNO
          CALL      IBACLOCK
          PACK      PMEWCDAT,CCC,CYY,CMM,CDD
          REP       " 0",PMEWCDAT
          CLOCK     TIME,PMEWCTIM
          PACK      PMEWCUID,USERID
          PACK      PMEWTYPE,PMEWTYPE,SP70
          PACK      PMEWSPAR,SP70,SP70
.
          PACK      KEY27,PMEWURNO,PMEWTYPE,PMEWCDAT,PMEWCTIM,SP70
          CALL      RAPMEDW2
          IF        OVRCD=1
            CALL      WRPMEDW2
          ELSE
            CALL      UPPMEDW2
          ENDIF
.
WREDW999  CLOSE     PMSEDWA2
          RETURN
+
.*****************************************************************************
.*                              PADI0000           Called by: PPMI0000       *
.*  Process aliases if receiving name type in PID.9.7 (ptcnrnty=1)           *
.*  Write to patgsrnf (type A) and/or pmspx2af (type D)                      *
.*****************************************************************************
.
.         If both components 1 and 2 of the first element of the PID.9 array
.         are not populated, then we don't need to do anything
.
PADI0000  MOVELPTR  PID00901[1],FORM3            * component 1 populated ?
          IF        FORM3 = ZERO
            MOVELPTR  PID00902[1],FORM3          * component 2 populated ?
            COMPARE   ZERO,FORM3
            GOTO      PADI9999 IF EQUAL          * no - finished
          ENDIF
.
.         If component 7 (name type) = A in one or more of the fields, remove
.         all current aliases except for the current patient record.
.
          MOVE      ONE,COUNTER                  * initialise loop counter
          WHILE     COUNTER < 81
            STRIP     PID00907[COUNTER]          * remove trailing spaces
            MOVELPTR  PID00907[COUNTER],FORM3    * name type populated ?
            COMPARE   ZERO,FORM3
            GOTO      PADI2000 IF EQUAL          * no - finished checking
.
            MATCH     ANSA,PID00907[COUNTER]
            IF        @EQUAL
              CALL      RGSR0000                 * remove current alias records
              GOTO      PADI2000                 * continue
            ENDIF
.
            ADD       ONE,COUNTER                * increment counter
          DO
.
.         There is one or more aliases present, so add all the new alias
.         records that have been sent
.
PADI2000  MOVE      ONE,COUNTER                  * initialise loop counter
          WHILE     COUNTER < 81
.
            STRIP     PID00907[COUNTER]          * remove trailing spaces
            MOVELPTR  PID00907[COUNTER],FORM3    * name type populated ?
            COMPARE   ZERO,FORM3
            GOTO      PADI9999 IF EQUAL          * no - finished
.
            MATCH     ANSD,PID00907[COUNTER]
            GOTO      PADI3000 IF EQUAL          * allow blanks for type D
.
            MOVELPTR  PID00901[COUNTER],FORM3    * field populated ?
            COMPARE   ZERO,FORM3
            GOTO      PADI4000 IF EQUAL          * no - don't write alias
.
PADI3000    MATCH     BLANKSTR,PID00901[COUNTER] * null field ?
            GOTO      PADI4000 IF EQUAL          * yes - don't write alias
.
            MOVE      PURNO,GSRURNO              * load patgsrnf variables
            MOVE      ZEROVISN,GSRBILL
.
            MATCH     BLANKSTR,PID00901[COUNTER]
            IF        @EQUAL
              PACK      GSRSNAM,SP100
            ELSE
              PACK      GSRSNAM,PID00901[COUNTER],SP100
            ENDIF
            MATCH     ANSD,PID00907[COUNTER]
            IF        @EQUAL
              MATCH     SP70,GSRSNAM
              IF        @EQUAL
                PACK      GSRSNAM,PSNAME,SP100     * use psname if name type = D
              ENDIF
            ENDIF
.
            MATCH     BLANKSTR,PID00902[COUNTER]
            IF        @EQUAL
              PACK      GSRGNAM,SP100
            ELSE
              PACK      GSRGNAM,PID00902[COUNTER],SP100
            ENDIF
            MATCH     ANSD,PID00907[COUNTER]
            IF        @EQUAL
              MATCH     SP70,GSRGNAM
              IF        @EQUAL
                PACK      GSRGNAM,PGNAME,SP100     * use pgname if name type = D
              ENDIF
            ENDIF
.
            MATCH     BLANKSTR,PID00903[COUNTER]
            IF        @EQUAL
              PACK      PTGSGNM2,SP100
            ELSE
              PACK      PTGSGNM2,PID00903[COUNTER],SP100
            ENDIF
.
            MOVE      ZERO,GSRSYS
            MOVE      PBDATE,GSRDOB
            MOVE      PSEX,GSRSEX
            CALL      SOUNDEX                    * set soundex keys
            CALL      SOUNDX2
.
            PACK      KEY115,GSRURNO,GSRBILL,GSRSNAM,GSRGNAM,PTGSGNM2,GSRDOB:
                             GSRSEX
            CALL      RAPTGSR1
            IF        OVRCD = 1
              CALL      WRPTGSR1
            ENDIF
.
.           Check if we need to update preferred name(s) in pmspx2
.
PADI4000    MATCH     ANSD,PID00907[COUNTER]
            GOTO      PADI5000 IF NOT EQUAL      * name type = Display ?
.
            MOVE      PMPXPFSN,SAVXPFSN          * save pmspx2 preferred names
            MOVE      PMPXPFGN,SAVXPFGN
.
            STRIP     PID00901[COUNTER]          * remove trailing spaces
            MOVELPTR  PID00901[COUNTER],FORM3    * field populated ?
            COMPARE   ZERO,FORM3
            GOTO      PADI4100 IF EQUAL          * no
.
            PACK      DIM20,PID00901[COUNTER],SP70
            MATCH     PMPXPFSN,DIM20
            GOTO      PADI4100 IF EQUAL          * no change to pmpxpfsn
.
            MATCH     BLANKSTR,PID00901[COUNTER]
            IF        @EQUAL
              PACK      PMPXPFSN,SP100           * set as blank
            ELSE
              PACK      PMPXPFSN,PID00901[COUNTER],SP100   * populate from PID.9
            ENDIF
.
PADI4100    STRIP     PID00902[COUNTER]          * remove trailing spaces
            MOVELPTR  PID00902[COUNTER],FORM3    * field populated ?
            COMPARE   ZERO,FORM3
            GOTO      PADI4900 IF EQUAL          * no
.
            PACK      DIM25,PID00902[COUNTER],SP70
            MATCH     PMPXPFGN,DIM25
            GOTO      PADI4900 IF EQUAL          * no change to pmpxpfgn
.
            MATCH     BLANKSTR,PID00902[COUNTER]
            IF        @EQUAL
              PACK      PMPXPFGN,SP100           * set as blank
            ELSE
              PACK      PMPXPFGN,PID00902[COUNTER],SP100   * populate from PID.9
            ENDIF
.
PADI4900    MATCH     PMPXPFSN,SAVXPFSN
            IF        @EQUAL
              MATCH     PMPXPFGN,SAVXPFGN
              GOTO      PADI5000 IF EQUAL        * no need to update pmspx2
            ENDIF
            CALL      UPPMPX21                   * update for preferred name(s)
.
PADI5000    ADD       ONE,COUNTER                * increment counter
          DO
.
PADI9999  RETURN
+
.*****************************************************************************
.*                              PALI0000           Called by: PPMI0000       *
.*                 Process aliases from PID.9 and write to patgsrnf          *
.*****************************************************************************
.
.         If the first element of the PID.9 array is not populated
.         (ie, it has the following format ..||..), then we don't need
.         to do anything
.
PALI0000  MOVELPTR  PID00901[1],FORM3            * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PALI9999 IF EQUAL            * no - finished
.
.         There is something in one or more of the fields, so remove
.         all current aliases except for the current patient record.
.
          CALL      RGSR0000                     * remove current alias records
.
.         If the first element of the PID.9 array is null (ie, it has
.         the following format ..|""|..), then we don't need to do any more.
.
          MATCH     BLANKSTR,PID00901[1]         * null field ?
          GOTO      PALI9999 IF EQUAL            * yes - finished
.
.         There is one or more aliases present, so add all the new alias
.         records that have been sent
.
PALI2000  MOVE      ONE,COUNTER                  * initialise loop counter
          WHILE     COUNTER < 81
.
            MOVELPTR  PID00901[COUNTER],FORM3    * field populated ?
            COMPARE   ZERO,FORM3
            GOTO      PALI9999 IF EQUAL          * no - finished
.
            MATCH     BLANKSTR,PID00901[COUNTER] * null field ?
            GOTO      PALI9999 IF EQUAL          * yes - finished
.
            MOVE      PURNO,GSRURNO              * load patgsrnf variables
            MOVE      ZEROVISN,GSRBILL
.
            MATCH     BLANKSTR,PID00901[COUNTER]
            IF        @EQUAL
              PACK      GSRSNAM,SP100
            ELSE
              PACK      GSRSNAM,PID00901[COUNTER],SP100
            ENDIF
.
            MATCH     BLANKSTR,PID00902[COUNTER]
            IF        @EQUAL
              PACK      GSRGNAM,SP100
            ELSE
              PACK      GSRGNAM,PID00902[COUNTER],SP100
            ENDIF
.
            MATCH     BLANKSTR,PID00903[COUNTER]
            IF        @EQUAL
              PACK      PTGSGNM2,SP100
            ELSE
              PACK      PTGSGNM2,PID00903[COUNTER],SP100
            ENDIF
.
            MOVE      ZERO,GSRSYS
            MOVE      PBDATE,GSRDOB
            MOVE      PSEX,GSRSEX
            CALL      SOUNDEX                    * set soundex keys
            CALL      SOUNDX2
.
            PACK      KEY115,GSRURNO,GSRBILL,GSRSNAM,GSRGNAM,PTGSGNM2,GSRDOB:
                             GSRSEX
            CALL      RAPTGSR1
            IF        OVRCD = 1
              CALL      WRPTGSR1
            ENDIF
.
            ADD       ONE,COUNTER                * increment counter
          DO
.
PALI9999  RETURN
+
.*****************************************************************************
.*                              RGSR0000           Called by: PALI0000       *
.*          Remove patgsrnf records for a U/R number except for              *
.*          the one matching the current patient details                     *
.*****************************************************************************
.
RGSR0000  PACK      KEY115,PURNO,SP70,SP70
RGSR0100  CALL      RSPTGSR1                     * position on U/R
RGSR0500  CALL      RKPTGSR1                     * read next record
          BRANCH    OVRCD,RGSR9999               * eof - finished
.
          MATCH     PURNO,GSRURNO                * same U/R still ?
          GOTO      RGSR9999 IF NOT EQUAL        * no
.
.         Check if these match the current patient details
.
          MATCH     GSRSNAM,PTMASNAM             * same surname ?
          GOTO      RGSR1000 IF NOT EQUAL        * no
.
          MATCH     GSRGNAM,PMPXFNAM             * same first given name ?
          GOTO      RGSR1000 IF NOT EQUAL        * no
.
          MATCH     PTGSGNM2,PMPXSNAM            * same second given name ?
          GOTO      RGSR1000 IF NOT EQUAL        * no
.
.         Matches current patient details, so leave record.
.         This may be the record that matches the current PMI details, or
.         it may be an alias record which only had a change of DOB and/or Sex.
.
          GOTO      RGSR0500
.
.         This record represents a true alias, so delete it
.
RGSR1000  PACK      KEY115,GSRURNO,GSRBILL,GSRSNAM,GSRGNAM,PTGSGNM2,GSRDOB:
                           GSRSEX
          MOVE      KEY115,SAVKY115
          CALL      DEPTGSR1                     * delete alias record
          MOVE      SAVKY115,KEY115
          GOTO      RGSR0100
.
RGSR9999  RETURN
+
.*****************************************************************************
.*                             URST0000            Called by: VTYP0000       *
.*        Update stats on screen for messages received                       *
.*****************************************************************************
.
URST0000  BRANCH    DISPFLAG,URST9999            * not displaying
.
          BRANCH    MESSGNUM,URST0100:           * A28 - PMI register
                             URST0200:           * A31 - PMI update
                             URST0300:           * A34 - Merge U/R
                             URST0400:           * P03 - financial transaction
                             URST0500:           * I12 - Add Patient Referral
                             URST0600:           * I13 - Modify Patient Referral
                             URST0700:           * I14 - Delete Patient Referral
                             URST0800:           * A04 - O/P Conform Appt.
                             URST0900:           * A03 - O/P Disch. Attendance
                             URST1000:           * M02 - Staff/Practitioner
                             URST1100:           * A05 - Preadmission
                             URST1200:           * S14 - Theatre Booking Update
                             URST1300:           * A08 - I/P Visit Update
                             URST1400:           * A21 - On-Leave
                             URST1500            * A22 - Return from Leave
.
          GOTO      URST9999                     * invalid message type
.
URST0100  ADD       ONE,A28RECV
          DISPLAY   *P12:7,A28RECV;
          GOTO      URST9999
.
URST0200  ADD       ONE,A31RECV
          DISPLAY   *P12:8,A31RECV;
          GOTO      URST9999
.
URST0300  ADD       ONE,A34RECV
          DISPLAY   *P12:9,A34RECV;
          GOTO      URST9999
.
URST0400  ADD       ONE,P03RECV
          DISPLAY   *P12:10,P03RECV;
          GOTO      URST9999
.
URST0500  ADD       ONE,I12RECV
          DISPLAY   *P12:11,I12RECV;
          GOTO      URST9999
.
URST0600  ADD       ONE,I13RECV
          DISPLAY   *P12:12,I13RECV;
          GOTO      URST9999
.
URST0700  ADD       ONE,I14RECV
          DISPLAY   *P12:13,I14RECV;
          GOTO      URST9999
.
URST0800  ADD       ONE,A04RECV
          DISPLAY   *P12:14,A04RECV;
          GOTO      URST9999
.
URST0900  ADD       ONE,A03RECV
          DISPLAY   *P12:15,A03RECV;
          GOTO      URST9999
.
URST1000  ADD       ONE,M02RECV
          DISPLAY   *P12:16,M02RECV;
          GOTO      URST9999
.
URST1100  ADD       ONE,A05RECV
          DISPLAY   *P12:17,A05RECV;
          GOTO      URST9999
.
URST1200  ADD       ONE,S14RECV
          DISPLAY   *P12:18,S14RECV;
          GOTO      URST9999
.
URST1300  ADD       ONE,A08RECV
          DISPLAY   *P12:19,A08RECV;
          GOTO      URST9999
.
URST1400  ADD       ONE,A21RECV
          DISPLAY   *P12:20,A21RECV;
          GOTO      URST9999
.
URST1500  ADD       ONE,A22RECV
          DISPLAY   *P12:21,A22RECV;
          GOTO      URST9999
.
URST9999  RETURN
+
.*****************************************************************************
.*                             UFST0000            Called by: PROC0000       *
.*        Update stats on screen for messages which failed processing        *
.*****************************************************************************
.
UFST0000  BRANCH    DISPFLAG,UFST9999            * not displaying
.
          BRANCH    MESSGNUM,UFST0100:           * A28 - PMI register
                             UFST0200:           * A31 - PMI update
                             UFST0300:           * A34 - Merge U/R
                             UFST0400:           * P03 - financial transaction
                             UFST0500:           * I12 - Add Patient Referral
                             UFST0600:           * I13 - Modify Patient Referral
                             UFST0700:           * I14 - Delete Patient Referral
                             UFST0800:           * A04 - O/P Conform Appt.
                             UFST0900:           * A03 - O/P Disch. Attendance
                             UFST1000:           * M02 - Staff/Practitioner
                             UFST1100:           * A05 - Preadmission
                             UFST1200:           * S14 - Theatre Booking Update
                             UFST1300:           * A08 - I/P Visit Update
                             UFST1400:           * A21 - On-Leave
                             UFST1500            * A22 - Return from Leave
.
          GOTO      UFST9999                     * invalid message type
.
UFST0100  ADD       ONE,A28FAIL
          DISPLAY   *P32:7,A28FAIL;
          GOTO      UFST9999
.
UFST0200  ADD       ONE,A31FAIL
          DISPLAY   *P32:8,A31FAIL;
          GOTO      UFST9999
.
UFST0300  ADD       ONE,A34FAIL
          DISPLAY   *P32:9,A34FAIL;
          GOTO      UFST9999
.
UFST0400  ADD       ONE,P03FAIL
          DISPLAY   *P32:10,P03FAIL;
          GOTO      UFST9999
.
UFST0500  ADD       ONE,I12FAIL
          DISPLAY   *P32:11,I12FAIL;
          GOTO      UFST9999
.
UFST0600  ADD       ONE,I13FAIL
          DISPLAY   *P32:12,I13FAIL;
          GOTO      UFST9999
.
UFST0700  ADD       ONE,I14FAIL
          DISPLAY   *P32:13,I14FAIL;
          GOTO      UFST9999
.
UFST0800  ADD       ONE,A04FAIL
          DISPLAY   *P32:14,A04FAIL;
          GOTO      UFST9999
.
UFST0900  ADD       ONE,A03FAIL
          DISPLAY   *P32:15,A03FAIL;
          GOTO      UFST9999
.
UFST1000  ADD       ONE,M02FAIL
          DISPLAY   *P32:16,M02FAIL;
          GOTO      UFST9999
.
UFST1100  ADD       ONE,A05FAIL
          DISPLAY   *P32:17,A05FAIL;
          GOTO      UFST9999
.
UFST1200  ADD       ONE,S14FAIL
          DISPLAY   *P32:18,S14FAIL;
          GOTO      UFST9999
.
UFST1300  ADD       ONE,A08FAIL
          DISPLAY   *P32:19,A08FAIL;
          GOTO      UFST9999
.
UFST1400  ADD       ONE,A21FAIL
          DISPLAY   *P32:20,A21FAIL;
          GOTO      UFST9999
.
UFST1500  ADD       ONE,A22FAIL
          DISPLAY   *P32:21,A22FAIL;
          GOTO      UFST9999
.
UFST9999  RETURN
+
.*****************************************************************************
.*                             USST0000            Called by: PROC0000       *
.*        Update stats on screen for successfully processed messages         *
.*****************************************************************************
.
USST0000  BRANCH    DISPFLAG,USST9999            * not displaying
.
          BRANCH    MESSGNUM,USST0100:           * A28 - PMI register
                             USST0200:           * A31 - PMI update
                             USST0300:           * A34 - Merge U/R
                             USST0400:           * P03 - financial transaction
                             USST0500:           * I12 - Add Patient Referral
                             USST0600:           * I13 - Modify Patient Referral
                             USST0700:           * I14 - Delete Patient Referral
                             USST0800:           * A04 - O/P Conform Appt.
                             USST0900:           * A03 - O/P Disch. Attendance
                             USST1000:           * M02 - Staff/Practitioner
                             USST1100:           * A05 - Preadmission
                             USST1200:           * S14 - Theatre Booking Update
                             USST1300:           * A08 - I/P Visit Update
                             USST1400:           * A21 - On-Leave
                             USST1500            * A22 - Return from Leave
.
          GOTO      USST9999                     * invalid message type
.
USST0100  ADD       ONE,A28SUCC
          DISPLAY   *P21:7,A28SUCC;
          GOTO      USST9999
.
USST0200  ADD       ONE,A31SUCC
          DISPLAY   *P21:8,A31SUCC;
          GOTO      USST9999
.
USST0300  ADD       ONE,A34SUCC
          DISPLAY   *P21:9,A34SUCC;
          GOTO      USST9999
.
USST0400  ADD       ONE,P03SUCC
          DISPLAY   *P21:10,P03SUCC;
          GOTO      USST9999
.
USST0500  ADD       ONE,I12SUCC
          DISPLAY   *P21:11,I12SUCC;
          GOTO      USST9999
.
USST0600  ADD       ONE,I13SUCC
          DISPLAY   *P21:12,I13SUCC;
          GOTO      USST9999
.
USST0700  ADD       ONE,I14SUCC
          DISPLAY   *P21:13,I14SUCC;
          GOTO      USST9999
.
USST0800  ADD       ONE,A04SUCC
          DISPLAY   *P21:14,A04SUCC;
          GOTO      USST9999
.
USST0900  ADD       ONE,A03SUCC
          DISPLAY   *P21:15,A03SUCC;
          GOTO      USST9999
.
USST1000  ADD       ONE,M02SUCC
          DISPLAY   *P21:16,M02SUCC;
          GOTO      USST9999
.
USST1100  ADD       ONE,A05SUCC
          DISPLAY   *P21:17,A05SUCC;
          GOTO      USST9999
.
USST1200  ADD       ONE,S14SUCC
          DISPLAY   *P21:18,S14SUCC;
          GOTO      USST9999
.
USST1300  ADD       ONE,A08SUCC
          DISPLAY   *P21:19,A08SUCC;
          GOTO      USST9999
.
USST1400  ADD       ONE,A21SUCC
          DISPLAY   *P21:20,A21SUCC;
          GOTO      USST9999
.
USST1500  ADD       ONE,A22SUCC
          DISPLAY   *P21:21,A22SUCC;
          GOTO      USST9999
.
USST9999  RETURN
+
.*****************************************************************************
.*                              GMIS0000           Called by: VFT10000       *
.*              Validate the miscellaneous charge code                       *
.* Requires: FT100701 - Transaction Code (Miscellaneous charge code)         *
.*           FT100703 - Transaction Code Coding System (nzpribil only)       *
.*           FT100401 - Transaction Date/Time (ccyymmddhhmmss)               *
.*           SAVHFUND - Health Fund Code                                     *
.*           SAVHTBLE - Health Fund Table Code                               *
.*           SAVCLAIM - Claim Code (Cat CL)                                  *
.* Returns:  EXIT   0 = Ok to continue                                       *
.*                  1 = Error                                                *
.*****************************************************************************
.
GMIS0000  CALL      IBACLOCK
          PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
.
          BRANCH    NZPRIBIL,GMIS7000            * validate FT100703 for nzpriv
.
          PACK      KEY9,FT100701,SP9            * load misc. charge code
          MOVE      FT100401,DIM8                * load transaction date
.
          MATCH     SP3,SAVCLAIM                 * blank claim code ?
          GOTO      GMIS5000 IF EQUAL            * yes - try default claim code
.
          MATCH     SP6,SAVHFUND                 * blank health fund ?
          GOTO      GMIS3000 IF EQUAL            * yes - try with no HF.
.
          MATCH     SP8,SAVHTBLE                 * blank health fund table ?
          GOTO      GMIS3000 IF EQUAL            * yes - try with no HF.
.
.         Check if the miscellaneous charge code is valid using
.         the visit claim code and the health fund/table.
.
          PACK      KEY14,SAVHFUND,SAVHTBLE,SP20
          CALL      RDFUND1                      * fund on file ?
          BRANCH    OVRCD,GMIS3000               * no - try with no HF.
.
          MATCH     SP3,PTHFBCAT                 * blank table type ?
          GOTO      GMIS3000 IF EQUAL            * yes - try with no HF.
.
          PACK      KEY29,SAVCLAIM,SAVHFUND,PTHFBCAT,KEY9,DIM8,SP10
          CALL      PATMCHRD                * find Miscellaneous Charge Item
          IF        EXIT = 0 & MITMTYP = 3
            GOTO      GMIS9000
          ENDIF
.
.         Check if the miscellaneous charge code is valid using
.         the visit claim code and no health fund/table.
.
GMIS3000  PACK      KEY29,SAVCLAIM,SP6,SP3,KEY9,DIM8,SP10
          CALL      PATMCHRD                * find Miscellaneous Charge Item
          IF        EXIT = 0 & MITMTYP = 3
            GOTO      GMIS9000
          ENDIF
.
.         Finally, see if the miscellaneous charge code is valid using
.         the default claim code and no health fund/table.
.
GMIS5000  CALL      DCLMC000                     * get default claim code
          PACK      KEY29,DEFCLAIM,SP6,SP3,KEY9,DIM8,SP10
          CALL      PATMCHRD                * find Miscellaneous Charge Item
          IF        EXIT = 0 & MITMTYP = 3
            GOTO      GMIS9000
          ENDIF
.
.         Miscellaneous charge code was not found, so process error
.
          MOVE      "FT1.7: Transaction code not valid",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
          MOVE      ONE,EXIT
          GOTO      GMIS9999
.
GMIS7000  PACK      KEY5,CATFI,FT100703
          CALL      RDCODE1
          BRANCH    OVRCD,GMIS7300               * code on file ?
.
          MATCH     ANSI,PTCOACTV                * inactive ?
          GOTO      GMIS9000 IF NOT EQUAL
.
GMIS7300  PACK      KEY5,CATFI,SP70
          CALL      RDSCODE1
GMIS7500  CALL      RDKCODE1
          BRANCH    OVRCD,GMIS7600
          MATCH     CATFI,TCODE
          GOTO      GMIS7600 IF NOT EQUAL
          MATCH     "1",PTCDDEFT
          GOTO      GMIS7500 IF NOT EQUAL
          MATCH     ANSI,PTCOACTV                * inactive ?
          GOTO      GMIS7500 IF EQUAL
          PACK      FT100703,ACODE,SP70          * use default code from Cat.FI
          GOTO      GMIS9000
.
.         Miscellaneous charge group (Cat.FI) was not found, so process error
.
GMIS7600  MOVE      "FT1.7: Transaction Code coding system not valid",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
          MOVE      ONE,EXIT
          GOTO      GMIS9999
.
GMIS9000  MOVE      ZERO,EXIT
.
GMIS9999  RETURN
+
.*****************************************************************************
.*                              DCLMC000           Called by: GMIS0000       *
.*            Get default claim code for multi hospital                      *
.* Requires: PTCNDCLM - System default claim code (Cat CL)                   *
.* Returns:  DEFCLAIM - Default claim code to be used                        *
.*****************************************************************************
.
DCLMC000  MOVE      PTCNDCLM,DEFCLAIM            * use system default claim code
.
.         Check if multi hospital is turned on
.
          IF        IBCNMHOS=1
            MOVE      PVIBILL,KEY8
            CALL      RDPMVX11
            IF        OVRCD=1
              MOVE      "Visit extension record missing",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      DCLMC999
            ENDIF
.
.           The visit extension record was found, so use the hospital id
.           to read the hospital record
.
            MATCH     SP3,PMVXMHOS               * blank hospital code ?
            GOTO      DCLMC999 IF EQUAL          * yes - finished
.
            MOVE      PMVXMHOS,KEY3
            CALL      RDPTHSP1
            IF        OVRCD=1
              MOVE      "Hospital id record missing",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      DCLMC999
            ENDIF
            MOVE      PTHSDCLM,DEFCLAIM          * use hosp. default claim code
          ENDIF
.
DCLMC999  RETURN
+
.*****************************************************************************
.*                              PA030000           Called by: PROC0000       *
.*              Process the A03 message - write/update PAS database          *
.*****************************************************************************
.
PA030000  MOVE      PV100501,KEY8                * visit number
          RJUSTIFY  KEY8
          MATCH     KEY8,DOBAOUTN                * visit exists ?
          GOTO      PA039998 IF NOT EQUAL
.
          COMPARE   FOUR,OBASTAT                 * attended ?
          GOTO      PA039997 IF NOT EQUAL
.
          UNPACK    PV200801,DIM8,HOURTM,MINTIME * format booking date
          PACK      DIM5,HOURTM,COLON,MINTIME
.
          MATCH     DIM8,OBADATE                 * same date ?
          GOTO      PA039996 IF NOT EQUAL        * no
.
          MATCH     DIM5,OBATIME                 * same time ?
          GOTO      PA039995 IF NOT EQUAL        * no
.
          MOVE      PV101901,DIM8                * referral number
          RJUSTIFY  DIM8
          PACK      KEY16,DIM8,KEY8,SP70
          CALL      RDALLNK1                     * referral link exists ?
          BRANCH    OVRCD,PA039994
.
          PACK      KEY8,DIM8
          CALL      RDALREF1                     * referral exists ?
          BRANCH    OVRCD,PA039993
.
          MATCH     "0",ALRESTAT
          IF        !@EQUAL
            MATCH     "1",ALRESTAT
            GOTO      PA039992 IF NOT EQUAL      * only want waiting/active
          ENDIF
.
          MOVE      ALLNSITE,KEY6
          CALL      RDSITA1
          BRANCH    OVRCD,PA039991               * site on file ?
.
          CLOSE     OUTCTYA1
          PACK      FILENAME,OSTFILE,FILCTYA1
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTCTYA1,FILENAME
          TRAPCLR   IO
          BRANCH    OVRCD,PA039990               * can't open clinic type file
.
          PACK      KEY12,ALLNSITE,PV101001,SP70
          CALL      RDCTYA1                      * valid clinic type ?
          BRANCH    OVRCD,PA039989
.
          PACK      KEY9,ALREDEPT,ZXV05101,SP70
          CALL      RDALSER1                     * valid service code ?
          BRANCH    OVRCD,PA039988
.
          PACK      KEY3,ALREDEPT,SP70
          CALL      RDALDEP1                     * valid department ?
          BRANCH    OVRCD,PA039987
.
          MATCH     "1",ALREUYN4
          IF        @EQUAL
            MATCH     "1",ALDEPENC          * Don't allow enc on primary ref
            GOTO      PA039986 IF EQUAL
          ENDIF
.
          UNPACK    PV104501,DIM8,HOURTM,MINTIME * format depart (contact) date
          PACK      DIM5,HOURTM,COLON,MINTIME
.
          MOVE      DIM8,ALENC005
          PACK      ALENC006,DIM5,COLON,ZERO,ZERO
          CALL      VALIDT00                * Check Date and Time
          BRANCH    EXIT,PA039983
.
          UNPACK    PV104401,DIM8,HOURTM,MINTIME
          PACK      SEENTIME,HOURTM,COLON,MINTIME   * set seen time (CAR 309716)
.
          PACK      KEY8,ALREURNO,SP70
          CALL      RDMAST1
          BRANCH    OVRCD,PA039985
          CALL      RDPMPX21
          BRANCH    OVRCD,PA039985
.
          COMPARE   FOUR,PSTAT              * EBS Unknown U/R
          GOTO      PA039984 IF EQUAL
.
          MOVE      ZERO,CHECKBX1           * vars for add contact routines
          MOVE      ZERO,CHECKBX2
          MOVE      Z70,ALENC118
          MOVE      Z70,ALREF006
          MOVE      SP70,PRHDUNIQ
          MOVE      ALREVISN,ADMISSNO
          MOVE      "HL7RECVR  ",USERID
.
          CALL      NEWENC00                * Add New Encounter
          BRANCH    EXIT,PA039982
.
          MOVE      ALREVISN,CHECKREF
          CALL      AMAS0000                * Auto activate master referral
.
.         Load the departure time for the current booking
.
          PACK      IDDD,ALLNSITE,SP6        * load O/P site code
          MOVE      TWO,AUDIFLAG
          CALL      AUDOTBOB                 * write before change audit record
.
          MOVE      SEENTIME,OTBBASTM        * set seen time (CAR 309716)
.
          UNPACK    PV104501,DIM8,HOURTM,MINTIME
          PACK      OTBBDPTM,HOURTM,COLON,MINTIME   * set departure time
          MOVE      PV100901,OTBBADCS               * set doctor seen
          CALL      UPBOKB1                  * update booking record
.
          MOVE      THREE,AUDIFLAG
          CALL      AUDOTBOB                 * write after change audit record
.
.         Trigger HL7 broadcast message for departure/discharge
.
          CALL      CLOUTRSH                     * clear unused variables
          CALL      CLOUTCAN
          MOVE      SP3,OTMALTYP
.
          CALL      PMIGTNID                * get national id for dgate write
          MOVE      NMPNUMB,PTNINMPI
          MOVE      ONE,HL7TRGID
          MOVE      SP8,HL7INCLD
          PROC      DGCLICOG
.
          GOTO      PA039999
.
.         Error messages
.
PA039982  MOVE      "Error when adding contact",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      PA039999
.
PA039983  MOVE      "Date/Time validation error",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      PA039999
.
PA039984  MOVE      "Patient has an inappropriate identifier",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      PA039999
.
PA039985  MOVE      "U/R does not exist",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      PA039999
.
PA039986  MOVE      "Cannot add contact to primary referral",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      PA039999
.
PA039987  MOVE      "Invalid department",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      PA039999
.
PA039988  MOVE      "ZXV.51: Invalid service code",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      PA039999
.
PA039989  MOVE      "PV1.10: Invalid clinic type",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      PA039999
.
PA039990  MOVE      "PV1.10: Unable to open clinic type file",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      PA039999
.
PA039991  MOVE      "PV1.10: Site not on file",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      PA039999
.
PA039992  MOVE      "PV1.19: Referral status not waiting/active",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      PA039999
.
PA039993  MOVE      "PV1.19: Referral does not exist",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      PA039999
.
PA039994  MOVE      "PV1.19: Referral link does not exist",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      PA039999
.
PA039995  MOVE      "PV2.8: Booking Time does not match",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      PA039999
.
PA039996  MOVE      "PV2.8: Booking Date does not match",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      PA039999
.
PA039997  MOVE      "PV1.5: Outpatient not attended",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      PA039999
.
PA039998  MOVE      "PV1.5: Outpatient Booking A record not found",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      PA039999
.
PA039999  RETURN
+
.*****************************************************************************
.*                              PA040000           Called by: PROC0000       *
.*              Process the A04 message - write/update PAS database          *
.* Requires: Valid read on outbokaf for visit number                         *
.*           Valid read on patma1af/patmx1af for U/R number                  *
.*****************************************************************************
.
.         Create a patvisaf record
.
PA040000  CALL      CLPATVIS                     * clear patvisaf fields
.
          MOVE      OBAURNO,PVIURNO              * load patvisaf data variables
          MOVE      OBADATE,PVIDATE
          MOVE      OBAOUTNO,PVIBILL
          MOVE      TWO,PVITYPE
          MOVE      OBACLIN,PVIDOCT
.
.         Load Public/Private status based on patient classification (Cat A),
.         Indicator 1
.
          MOVE      ONE,TCINDC1                  * default to public patient
          PACK      KEY5,ANSA,SP1,OBACLASS
          CALL      RDCODE1
          MOVE      ONE,FORM1
          MOVE      TCINDC1,FORM1
          LOAD      PVISTAT,FORM1,TWO:           * public
                                  ONE            * private
.
          MOVE      ONE,PVITRAN
          MOVE      OBASITE,PVISITE
          MOVE      PTYPE,PVIRESI
.
          MOVE      PVIBILL,KEY8
          CALL      RDAVISA1                 * visit record on file ?
          IF        OVRCD = 1
            CALL      WRVISA1                * no - write record
          ENDIF
.
.         Now delete the pre-attendance information
.
          MOVE      OBAOUTNO,KEY8
          CALL      RDPREA1                  * record on file ?
          IF        OVRCD = 0
            CALL      DEPREA1                * yes - delete the record
          ENDIF
.
.         Change the status on the current booking to attended
.
          MOVE      TWO,AUDIFLAG
          CALL      AUDOTBOA                 * write before change audit record
.
          MOVE      FOUR,OBASTAT             * set status to "Attended"
          CALL      UPBOKA1                  * update booking record
.
          MOVE      THREE,AUDIFLAG
          CALL      AUDOTBOA                 * write after change audit record
.
.         Load the check-in time on the current booking
.
          PACK      IDDD,ZXV03501,SP6        * load O/P site code
          MOVE      TWO,AUDIFLAG
          CALL      AUDOTBOB                 * write before change audit record
.
          UNPACK    PV104401,DIM8,HOURTM,MINTIME
          PACK      OTBBCITM,HOURTM,COLON,MINTIME   * set check-in time
          CALL      UPBOKB1                  * update booking record
.
          MOVE      THREE,AUDIFLAG
          CALL      AUDOTBOB                 * write after change audit record
.
.         We need to add a new mrtvisaf record.  First we need to get the 
.         hospital code as this is used by ADDVIS00.
.
          PACK      KEY25,OBASITE,OBACLIN,OBADATE,OBASTRT
          CALL      RDSESA1                      * session record on file ?
          BRANCH    OVRCD,PA049999               * no
.
          PACK      KEY18,OBASITE,OBACLIN,OBADAY,OBASTRT
          CALL      RDMASA1                      * clinic master rec. on file ?
          BRANCH    OVRCD,PA049999               * no
.
          PACK      KEY28,OSESITE,OSECLIN,OSEDAY,OSESTRT,OSESSHNO,OSESSDAT
          CALL      RDOTHED1                     * master header rec. on file ?
          BRANCH    OVRCD,PA049999               * no
.
.         Now that we have read the clinic open sessions file,
.         the clinic master file and the master header file, we
.         can also update the slot stats for the clinic
.
          PACK      BOKKEY28,OBASITE,OBACLIN,OBADATE,OBASTRT,OBASLOT
          CALL      SLTCOUNT                     * re-calculate clinic stats
.
.         Reposition on the booking after looping through the session
.
          MOVE      BOKKEY28,KEY28
          CALL      RDBOKA1
          BRANCH    OVRCD,PA049999
.
          MOVE      OBAOUTNO,KEY8
          CALL      RDPMVX11                     * visit ext. record on file ?
          BRANCH    OVRCD,PA041000               * no - use default hosp. code
.
          MATCH     SP3,PMVXMHOS                 * blank hospital code ?
          GOTO      PA041500 IF NOT EQUAL        * no - use this hosp. code
.
PA041000  MOVE      OTHEHOSP,PMVXMHOS            * load default hospital code
.
.         Given that HL7RECVR runs in background, we have no associated
.         web user, so we need to clear the websecaf variables as these
.         are used by ADDVIS00.
.
PA041500  CALL      CLWEBSEC
.
          CALL      ADDVIS00                     * writes mrtvisaf record
.
          CALL      ATWLLINK                     * update W/L link records
          CALL      POLX0000                     * Polling AH referral expiry
.
          CALL      XCHG0000                     * check if charging
          CALL      POSTCHRG                     * process charge
.
.         Trigger HL7 broadcast message for attendance
.
          CALL      CLOUTRSH                     * clear unused variables
          CALL      CLOUTCAN
          MOVE      SP3,OTMALTYP
.
          CALL      PMIGTNID                * get national id for dgate write
          MOVE      NMPNUMB,PTNINMPI
          MOVE      TWO,HL7TRGID
          MOVE      SP8,HL7INCLD
          PROC      DGCLICOA
.
PA049999  RETURN
+
.*****************************************************************************
.*                              PA04E000           Called by: PROC0000       *
.*              Process the A04 message - write/update PAS database          *
.*****************************************************************************
. Code taken from EMRWEB02 / NEWPAT00 (FORMACTN = N1)
PA04E000  CALL      ZUNK0000                * Zero U/R, emrunkaf,emrvisaf
          CALL      ADDINC00                * Add to Incomplete
.
PA04E100  CALL      PZNT0000                * Presenting Complaint Notes (ZNT.4)
.
PA04E999  RETURN
+
.------------------------------------------------------------
. Register a new emergency patient with a zero U/R
. Taken / modified from EMRWEB02
.------------------------------------------------------------
ZUNK0000  PACK      KEY3,WBSEESC,SP70            * user id site code is valid?
          CALL      RDEMSIT1
          IF        OVRCD=0
            MATCH     "1",EMSTACTV               * Verify if site code is active
            IF        @EQUAL
              GOTO      ZUNK9400                 * Not active
            ENDIF
          ENDIF
.
          CALL      CLEMRVIS       * clear emergency details
          CALL      CLPMSVX1       * clear visit extn file variables
.
          CALL      VALLOC00                     * validate location
          BRANCH    EXIT,ZUNK9200
.
          READ      CONTROLF,HUND30;*75,PTCNUANV      * Using AN Visit Numbers
.
          MATCH     "1",PTCNUANV
          IF        @EQUAL
            CALL      GANV0000                * Get next AN visit number
            MOVE      PTCNNXTV,EMVIADMN
          ELSE
            MOVE      " 10",PRXCODE   * System Lock Sector 10
            CALL      GETSLK00        * Get System Lock of Sector 10
            READ      CONTROLF,TEN;*1,FORM8V    * Get next visit number
            ADD       ONE,FORM8V
            WRITAB    CONTROLF,TEN;*1,FORM8V
            CALL      RELSLK00        * Release System Lock of Sector 10
            SUB       ONE,FORM8V
            MOVE      FORM8V,EMVIADMN
          ENDIF
.
.         Make sure new visit number does not already exist
.
          MOVE      EMVIADMN,PVIBILL
          MOVE      PVIBILL,KEY8
          CALL      RDAVISA1                    * visit already on file?
          COMPARE   ZERO,OVRCD
          GOTO      ZUNK0000 IF EQUAL
.
          CALL      CLEMRVIS                    * Clear emrvisaf file variables
.
          MOVE      KEY8,EMVIADMN
          MOVE      ZEROUR,EMVIURNO
          MOVE      ONE,EMVISTAT
          MATCH     SP70,WBSENURS
          IF        @EQUAL
            MOVE      "HL7",EMVITRNS
          ELSE
            MOVE      WBSENURS,EMVITRNS          * triage nurse
          ENDIF
          MOVE      WBSEPCD,PASSCODE             * 0931586
          MOVE      PASSCODE,EMVIOPR1
          MOVE      WBSEESC,EMVISITE
.
          CALL      STVIS000                * store ZTR vars in emrvis file vars
.
.         check that name has been entered, default to Unknown Patient if blank
.
          PACK      EMUNDET1,EMUNDET1,SP70
          PACK      EMUNDET2,EMUNDET2,SP70
          MATCH     SP70,EMUNDET1
          IF        @EQUAL
            MATCH     SP70,EMUNDET2
            IF        @EQUAL
              MOVE      "Unknown",EMUNDET1
              MOVE      EMVIADMN,EMUNDET2
            ELSE
              MOVE      EMUNDET2,EMUNDET1
              MOVE      EMVIADMN,EMUNDET2
            ENDIF
          ENDIF
.
          MATCH     SP70,EMVITRDT
          IF        @EQUAL
            PACK      EMVITRDT,CCC,CYY,CMM,CDD
            CLOCK     TIME,EMVITRTM
          ENDIF
          REP       " 0",EMVITRDT         * Date
          PACK      EMVIDATE,EMVITRDT
          PACK      EMVITIME,EMVITRTM
          MOVE      EMVIDATE,SAVEDATE       * save date & time for WRTHIS00
          UNPACK    EMVITIME,HOURE,D1,MIN,D1,SEC
          PACK      SAVETIME,HOURE,MIN,SEC
.
          CALL      IBACLOCK
.
          PACK      EMVIDATE,EMVIDATE,SP70
          MATCH     SP70,EMVIDATE
          IF        @EQUAL
            PACK      EMVIDATE,CCC,CYY,CMM,CDD
            REP       " 0",EMVIDATE
          ENDIF
.
          PACK      EMVITIME,EMVITIME,SP70
          MATCH     SP70,EMVITIME
          IF        @EQUAL
            PACK      EMVITIME,CTIMEIS
          ENDIF
.
          CALL      GETDAY00
          MOVE      DYCNT,EMVIUN01
.
          CALL      WREMVIS1               * write new emergency record
.
          MOVE      EMVIADMN,PMVXVISN
          MOVE      EMVIDATE,PMVXVSDT
          PACK      PMVXCDTE,CCC,CYY,CMM,CDD
          REP       " 0",PMVXCDTE           * Date
          CLOCK     TIME,PMVXCTIM
.
.0931586  MOVE      EMVIDOCT,PMVXDOCA       * could use PV1.9 for emvidoct?
          MOVE      EVN00501,PMVXWEBC       * user ID from EVN.5
          MOVE      EVN00501,USERID         * user ID from EVN.5
.
          PACK      KEY3,EMVISITE,SP70
          CALL      RDEMSIT1
          IF        OVRCD<>1
            PACK      PMVXMHOS,EMSTHSNO,SP70
          ENDIF
.
          MOVE      PMVXVISN,KEY8
ZUNK2000  CALL      RAPMVX11
          IF        OVRCD=1
            CALL      WRPMVX11              * write visit extension record
          ELSE
            CALL      UPPMVX11
          ENDIF
.
.0931586  Broadcast registration message (not currently available for zero URs)
.
          CALL      PMIGTNID               * get national id for dgate write
          MOVE      NMPNUMB,PTNINMPI
          MOVE      FIFTY1,HL7TRGID
          MOVE      SP8,HL7INCLD
          PROC      DGCLICAE               * send emr visit message
.
          MATCH     SP70,EMUNBDAT
          IF        !@EQUAL
            IF        EMUNAGE=0
              MOVE      EMUNBDAT,PBDATE          * If birthday populated and the
              PACK      AGEDATE,CCC,CYY,CMM,CDD  * age is zero calculate age
              REP       " 0",AGEDATE
              CALL      CALCAGE
              MOVE      PSAGEYRS,EMUNAGE
            ENDIF
          ENDIF
.
          MOVE      EMVIADMN,KEY8
          CALL      WREMUNK1               * write new unknown record
          MOVE      EMUNDET1,PSNAME
          MOVE      EMUNDET1,PTMASNAM
          MOVE      EMUNDET2,PGNAME
          MOVE      EMUNDET2,PMPXFNAM      * 0931586
          MOVE      SP70,PMPXSNAM          * 0931586
          MOVE      ZERO,PURNO
          CALL      WRCPEM00               * write to current patient table
.
.         Write a new record to the old A&E files
.
          CALL      CLDT0000             * clear a&e files
          CALL      UPDTA000             * update aae detail fields
.
          PACK      KEY8,EMVIADMN,SP70
          CALL      RDADETA1
          IF        OVRCD=1
            CALL      WRDETA1              * write aae details record
          ELSE
            CALL      UPDETA1
          ENDIF
.
          MOVE      EMVIADMN,ADMISSNO
          MOVE      EMVIURNO,URNUMBER
.
          MOVE      "ARRIV",UPDTEMHI         * 0931586
          CALL      WTEMHS00
          PROC      EMRDRCHR                 * Update Visit Billing Complete
.
          MOVE      "Triage Complete",WEBTITLE
          MOVE      ZERO,EXIT
          GOTO      ZUNK9999
.
ZUNK9100  MOVE      "Patient Already in Emergency",WEBTITLE
          CALL      WEBERR00
          MOVE      ONE,EXIT
          GOTO      ZUNK9999
.
ZUNK9200  MOVE      "Location Already occupied",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          MOVE      ONE,EXIT
          GOTO      ZUNK9999
.
ZUNK9300  MOVE      "Patient is Deceased",WEBTITLE
          CALL      WEBERR00
          MOVE      ONE,EXIT
          GOTO      ZUNK9999
.
ZUNK9400  MOVE      "Site Code Inactive",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          MOVE      ONE,EXIT
          GOTO      ZUNK9999

ZUNK9000  MOVE      ONE,EXIT
          GOTO      ZUNK9999
.
ZUNK9999  RETURN
+
.------------------------------------------------------------
. Add New Patient to Incomplete Table
.------------------------------------------------------------
ADDINC00  MOVE      "2",EMIPDCOM           * Set to two untill discharge
          MOVE      "2",EMIPNCOM
          MOVE      "0",EMIPCCOM
          MOVE      EMVIDOCT,EMIPDOCT
          MOVE      EMVITRNS,EMIPNURS
          MOVE      SP70,EMIPSPAR
          MOVE      EMVIADMN,EMIPADMN
          PACK      KEY8,EMVIADMN,SP70
          CALL      RDEMINC1
          IF        OVRCD=1
            CALL      WREMINC1
          ENDIF
          RETURN
+
.------------------------------------------------------------
.         VALLOC00  Checks whether location is already occupied
.
.         Returns:
.           EXIT    0 - empty
.                   1 - occupied
.------------------------------------------------------------
VALLOC00  PACK      KEY3,ZTR00801,SP70
          CALL      RDEMLOC1
          BRANCH    OVRCD,VALLOC90
.
          MATCH     "O",EMLOTYPE            * Other Departments
          GOTO      VALLOC90 IF EQUAL
.
          MATCH     "W",EMLOTYPE            * Waiting Room
          GOTO      VALLOC90 IF EQUAL
.
          MATCH     "E",EMLOTYPE            * Emergency Telehealth Service
          GOTO      VALLOC90 IF EQUAL
.
          MOVE      ZERO,LOCNCNTR
          PACK      KEY11,ZTR00801,SP70
          CALL      RSEMVIS7
VALLOC20  CALL      RKEMVIS7
          BRANCH    OVRCD,VALLOC85
.
          MATCH     ZTR00801,EMVILOCN
          GOTO      VALLOC85 IF NOT EQUAL
.
          COMPARE   ONE,EMVISTAT
          GOTO      VALLOC20 IF NOT EQUAL
.
          MATCH     MTYPEA08,MESSTYPE
          GOTO      VALLOC80 IF EQUAL            * no userid for EMR A08
.
          MATCH     EMVISITE,WBSEESC
          GOTO      VALLOC20 IF NOT EQUAL
.
VALLOC80  ADD       ONE,LOCNCNTR
          GOTO      VALLOC20
.
VALLOC85  IF          EMLOMAXP = 0
            GOTO        VALLOC90                 * Zero assumes unlimited!!!!!!
          ENDIF
.
          IF        LOCNCNTR < EMLOMAXP
            GOTO      VALLOC90
          ENDIF
.
          MOVE      ONE,EXIT
          GOTO      VALLOC99
.
VALLOC90  MOVE     ZERO,EXIT
          GOTO     VALLOC99
.
VALLOC99  RETURN
+
.------------------------------------------------------------
.         Get day number
.------------------------------------------------------------
GETDAY00  CALL      IBACLOCK
          PACK      TODYDATE,CCC,CYY,CMM,CDD
          REP       " 0",TODYDATE
.
          MOVE      ZERO,DYCNT
          PACK      KEY8,SP70
          CALL      RSEMDY1
GETDAY10  CALL      RKEMDY1
          BRANCH    OVRCD,GETDAY20
.
          MATCH     TODYDATE,EMDYDAT
          GOTO      GETDAY30 IF EQUAL
.
          MOVE      EMDYDAT,KEY8
          CALL      RLEMDY1
          BRANCH    OVRCD,GETDAY00,GETDAY00
          CALL      DEEMDY1
          PACK      KEY8,SP70
          CALL      RSEMDY1
          GOTO      GETDAY10
.
GETDAY20  MOVE      ONE,DYCNT
          MOVE      TODYDATE,EMDYDAT
          MOVE      ONE,EMDYCNT
          MOVE      EMDYDAT,KEY8
          CALL      WREMDY1
          PACK      KEY8,SP70
          CALL      RSEMDY1
          GOTO      GETDAY10
.
GETDAY30  MOVE      EMDYDAT,KEY8
          CALL      RLEMDY1
          BRANCH    OVRCD,GETDAY00,GETDAY00
          MOVE      ZERO,DYCNT
          MOVE      EMDYCNT,DYCNT
          ADD       ONE,EMDYCNT
          CALL      UPEMDY1
          MOVE      EMDYDAT,KEY8
          CALL      UUEMDY1
.
GETDAY99  RETURN
+
.------------------------------------------------------------
. Write to the current patient list (WRCPAT00 from EMRWEB02)
.------------------------------------------------------------
WRCPEM00  CALL      CALRAN00
.
          MATCH     STRTDATE,EMVIDATE        * before start date
          GOTO      WRCPEM99 IF LESS
.
          MATCH     EMVIDATE,LASTDATE        * after end date
          GOTO      WRCPEM99 IF LESS
.
          MOVE      DEMVIADM,PMCUVISN
          MOVE      EMVIDATE,PMCUDATE
          MOVE      PTMASNAM,PMCUSURN
          MOVE      PMPXFNAM,PMCUGNAM
          MOVE      PMPXSNAM,PMCUGNM2
          MOVE      PURNO,PMCUURNO
          MOVE      "1",PMCUSYST
          MOVE      SP70,PMCULOCN
          MOVE      SP70,PMCUOSIT
          MOVE      EMSTHSNO,PMCUHOSP
          MOVE      SP70,PMCUTSTA
          MOVE      SP70,PMCUTLOC
.
          PACK      KEY8,PMCUVISN,SP70
          CALL      RAPMCUR1
          IF        OVRCD=1
            CALL      WRPMCUR1
          ENDIF
.
WRCPEM99  RETURN
+
.****************************************************************************
.*                               UPDTA000              Called by: GPAT0000  *
.*               Update old aae details file variables                      *
.****************************************************************************
.
UPDTA000  MOVE      EMVIADMN,ADANUMB
          MOVE      EMVIURNO,ADAURNO
          MOVE      EMVIDATE,ADADATE
          UNPACK    EMVITIME,ADATIME,ANS,ANS,ANS
          PACK      ADADIAG,EMVICOM1,EMVICOM2
          MOVE      EMVIDOCT,ADADOCT
          MOVE      EMVICOMP,ADACOMP
          MOVE      EMVICLAS,ADACLASS
          MOVE      EMVIINSR,ADAINSUR
          MOVE      EMVISRCE,ADASRC
          MOVE      EMVISITN,ADASIT
          MOVE      EMVIMODE,ADAMODE
          MOVE      EMVIADMT,ADAADMIT
          MOVE      EMVIDURN,ADADURN
          MOVE      EMVIEMPL,ADAEMPL
          MOVE      EMVIWAIT,ADAWAIT
          MOVE      EMVIPREV,ADAPREV
          MOVE      EMVIREFD,AEDARDOC
          MOVE      EMVIUC01,ADAUSR1
          MOVE      EMVIUC02,ADAUSR2
          MOVE      EMVIUC03,ADAUSR3
          MOVE      EMVIUC04,ADAUSR4
          MOVE      EMVIUC05,ADAUSR5
          MATCH     SP8,EMVINSDT
          IF        !@EQUAL
            MOVE      EMVINSDT,ADASDTE
            MOVE      EMVINSTM,ADASEEN
          ELSE
            MOVE      EMVIDRDT,ADASDTE
            MOVE      EMVIDRTM,ADASEEN
          ENDIF
.
UPDTA999  RETURN
+
.------------------------------------------------------------
.         CLDT0000  Clear old aae details file variables
.------------------------------------------------------------
CLDT0000  MOVE      SP8,ADADATE
          MOVE      SP8,ADATIME
          MOVE      SP3,ADACOMP
          MOVE      SP3,ADACLASS
          MOVE      SP3,ADASRC
          MOVE      SP3,ADAINSUR
          MOVE      SP3,ADASIT
          MOVE      SP3,ADAMODE
          MOVE      SP1,ADAFILL
          MOVE      SP3,ADAPREV
          MOVE      SP6,ADADOCT
          MOVE      SP5,ADASEEN
          MOVE      ZERO,ADAADMIT
          MOVE      SP2,ADALOCK
          MOVE      SP30,ADAEMPL
          PACK      ADAADD1,SP30,SP10
          PACK      ADAADD2,SP30,SP10
          PACK      ADASUBR,SP30,SP10
          MOVE      SP30,ADAPOST
          MOVE      SP30,ADATELE
          MOVE      SP30,ADACONT
.
          MOVE      SP3,ADAUSR1
          MOVE      SP3,ADAUSR2
          MOVE      SP3,ADAUSR3
          MOVE      SP3,ADAUSR4
          MOVE      SP3,ADAUSR5
          PACK      ADADIAG,SP30,SP30
          MOVE      SP5,ADAWAIT
          MOVE      SP8,ADASDTE
.
          MOVE      SP5,AEDARDOC
.
CLDT9999  RETURN
+
.------------------------------------------------------------
.         Write history record (WRTHIS00 from EMRWEB02)
.------------------------------------------------------------
WTEMHS00  MOVE      SP70,SAVEDRDT
          MOVE      SP70,SAVEDRTM
          MOVE      SP70,SAVENRDT
          MOVE      SP70,SAVENRTM
          MOVE      SP70,SAVEDOCT
          MOVE      SP70,SAVENURS
          MOVE      SP70,SAVEOTDC
          MOVE      SP70,SAVEOTDT
          MOVE      SP70,SAVEOTTM
.
          PACK      KEY22,EMVIADMN,Z70
          CALL      RSEMHIS1
WTEMHS05  CALL      RPEMHIS1
          BRANCH    OVRCD,WTEMHS10
.
          MATCH     DEMVIADM,EMHIVIS
          GOTO      WTEMHS10 IF NOT EQUAL
.
          MOVE      EMHIDSD,SAVEDRDT
          MOVE      EMHIDST,SAVEDRTM
          MOVE      EMHINSD,SAVENRDT
          MOVE      EMHINST,SAVENRTM
          MOVE      EMHIDOC,SAVEDOCT
          MOVE      EMHINUR,SAVENURS
          MOVE      EMHIODCD,SAVEOTDC
          MOVE      EMHIODSD,SAVEOTDT
          MOVE      EMHIODST,SAVEOTTM
.
WTEMHS10  MOVE      EMVIADMN,EMHIVIS
          CLOCK     TIME,CTIMEIS
.
WTEMHS15  MOVE      SAVEDATE,EMHIDAT
          MOVE      SAVETIME,EMHITIM
.
WTEMHS20  MATCH     SAVEDOCT,EMVIDOCT       * Is this a new doctor
          IF        @EQUAL
            MOVE      SAVEDRDT,EMHIDSD        * Restore current doctor date and
            MOVE      SAVEDRTM,EMHIDST        * time
            IF        EMCNDDTM=1
              MOVE      EMVIDRDT,EMHIDSD        * Use keyed in doctor date/time
              UNPACK    EMVIDRTM,HOURE,D1,MIN,D1,SEC
              PACK      EMHIDST,HOURE,MIN,SEC,SP70 * from emrvisaf. Taranaki
            ENDIF
          ELSE
            IF        EMCNDDTM=1
              MOVE      EMVIDRDT,EMHIDSD        * Use keyed in doctor date/time
              UNPACK    EMVIDRTM,HOURE,D1,MIN,D1,SEC
              PACK      EMHIDST,HOURE,MIN,SEC,SP70 * from emrvisaf. Taranaki
            ELSE
              PACK      EMHIDSD,CCC,CYY,CMM,CDD * New doctor so seen date and
              REP       " 0",EMHIDSD            * time are set the current and
              PACK      EMHIDST,HOURE,MIN,SEC    * time
              REP       " 0",EMHIDST
            ENDIF
          ENDIF
.
          MATCH     SAVENURS,EMVIATNS       * Is this a new nurse
          IF        @EQUAL
            MOVE      SAVENRDT,EMHINSD        * Restore current nurse date and
            MOVE      SAVENRTM,EMHINST        * time
          ELSE
            PACK      EMHINSD,CCC,CYY,CMM,CDD * New nurse so seen date and time
            REP       " 0",EMHINSD            * are set the current and time
            PACK      EMHINST,HOURE,MIN,SEC
            REP       " 0",EMHINST
          ENDIF
.
          MATCH     SAVEOTDC,EMVIUR04       * Is this a new other doctor
          IF        @EQUAL
            MOVE      SAVEOTDT,EMHIODSD       * Restore current od date and
            MOVE      SAVEOTTM,EMHIODST       * time
          ELSE
            PACK      EMHIODSD,CCC,CYY,CMM,CDD * New nurse so seen date and time
            REP       " 0",EMHIODSD           * are set the current and time
            PACK      EMHIODST,HOURE,MIN,SEC
            REP       " 0",EMHIODST
          ENDIF
.
WTEMHS40  MOVE      UPDTEMHI,EMHIUPT             * 0931586 / 0959732
          MOVE      USERID,EMHIEUS               * 0931586 / 0959732
.
          MOVE      EMVILOCN,EMHILOC
          MOVE      EMVIDOCT,EMHIDOC
          MOVE      EMVIATNS,EMHINUR
          MOVE      EMVIUR04,EMHIODCD
          PACK      EMHISPA,SP70,SP70
          PACK      EMHIDSD,EMHIDSD,SP70
          PACK      EMHIDST,EMHIDST,SP70
          PACK      EMHINSD,EMHINSD,SP70
          PACK      EMHINST,EMHINST,SP70
          PACK      EMHIODSD,EMHIODSD,SP70
          PACK      EMHIODST,EMHIODST,SP70
.
          MATCH     SP70,EMHINUR
          IF        @EQUAL
            MOVE      SP70,EMHINSD
            MOVE      SP70,EMHINST
          ENDIF
.
          MATCH     SP70,EMHIDOC
          IF        @EQUAL
            MOVE      SP70,EMHIDSD
            MOVE      SP70,EMHIDST
          ENDIF
.
          MATCH     SP70,EMHIODCD
          IF        @EQUAL
            MOVE      SP70,EMHIODSD
            MOVE      SP70,EMHIODST
          ENDIF
.
          CALL      IBACLOCK
          PACK      EMHICDAT,CCC,CYY,CMM,CDD  * Date Record Created (ccyymmdd)
          REP       " 0",EMHICDAT
          CLOCK     TIME,EMHICTIM             * Time Record Created (hh:mm:ss)
          MOVE      USERID,EMHICUID           * Web User Id Created (websecaf)
.
          MOVE      SP70,EMHIUDAT      * Date Record Updated (ccyymmdd)
          MOVE      SP70,EMHIUTIM      * Time Record Updated (hh:mm:ss)
          MOVE      SP70,EMHIUUID      * Web User Id Updated (websecaf)
.
WTEMHS80  PACK      KEY22,EMHIVIS,EMHIDAT,EMHITIM,SP70
          CALL      RAEMHIS1
          IF        OVRCD=1
            MOVE      ZERO,OVRCD
            TRAP      OVERCOND IF IO
            MOVE      SP70,EMHIDRBC              * Billing Incomplete
            CALL      WREMHIS1
            TRAPCLR   IO
            BRANCH    OVRCD,WTEMHS85             * Add one second and try again
.
          ELSE
WTEMHS85    CALL      IBACLOCK                   * Set new date and time and
            PACK      EMHIDAT,CCC,CYY,CMM,CDD    * try write again
            REP       " 0",EMHIDAT
            CLOCK     TIME,CTIMEIS
            UNPACK    CTIMEIS,HOURE,D1,MIN,D1,SEC
            PACK      EMHITIM,HOURE,MIN,SEC
            REP       " 0",EMHITIM
            GOTO      WTEMHS80
          ENDIF
.
          MOVE      ZERO,EXIT
.
WTEMHS99  RETURN
+
.------------------------------------------------------------
.         STVIS000  Store EMVISXXX vars in file vars
. store ZTR vars in emrvis file vars (modified from EMRWEB02)
.------------------------------------------------------------
STVIS000  STRIP     ZTR00101
          MOVELPTR  ZTR00101,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      STVIS010 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZTR00101
          IF        @EQUAL
            MOVE      SP70,EMVIUC20
          ELSE
            MOVE      ZTR00101,EMVIUC20          * presenting complaint code
          ENDIF
.
STVIS010  STRIP     ZTR00201
          MOVELPTR  ZTR00201,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      STVIS020 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZTR00201
          IF        @EQUAL
            MOVE      SP70,EMVICOM1
          ELSE
            MOVE      ZTR00201,EMVICOM1          * presenting complaint 1
          ENDIF
.
STVIS020  STRIP     ZTR00301
          MOVELPTR  ZTR00301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      STVIS030 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZTR00301
          IF        @EQUAL
            MOVE      SP70,EMVICOM2
          ELSE
            MOVE      ZTR00301,EMVICOM2          * presenting complaint 2
          ENDIF
.
STVIS030  STRIP     ZTR00401
          MOVELPTR  ZTR00401,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      STVIS040 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZTR00401
          IF        @EQUAL
            MOVE      SP70,EMVICOM3
          ELSE
            MOVE      ZTR00401,EMVICOM3          * presenting complaint 3
          ENDIF
.
STVIS040  STRIP     ZTR00501
          MOVELPTR  ZTR00501,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      STVIS050 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZTR00501
          IF        @EQUAL
            MOVE      SP70,EMVICOM4
          ELSE
            MOVE      ZTR00501,EMVICOM4          * presenting complaint 4
          ENDIF
.
STVIS050  STRIP     ZTR00601
          MOVELPTR  ZTR00601,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      STVIS060 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZTR00601
          IF        @EQUAL
            MOVE      SP70,EMVICOM5
          ELSE
            MOVE      ZTR00601,EMVICOM5          * presenting complaint 5
          ENDIF
.
STVIS060  STRIP     ZTR00701
          MOVELPTR  ZTR00701,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      STVIS070 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZTR00701
          IF        @EQUAL
            MOVE      SP70,EMVICOM6
          ELSE
            MOVE      ZTR00701,EMVICOM6          * presenting complaint 6
          ENDIF
.
STVIS070  STRIP     ZTR00801
          MOVELPTR  ZTR00801,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      STVIS080 IF EQUAL            * no - no change
.
          PACK      UPDVALUE,EMVILOCN,SP70       * old value
.
          MATCH     BLANKSTR,ZTR00801
          IF        @EQUAL
            MOVE      SP70,EMVILOCN
          ELSE
            MOVE      ZTR00801,EMVILOCN          * location code
          ENDIF
.
          MATCH     MTYPEA04,MESSTYPE
          GOTO      STVIS080 IF EQUAL            * no audit/history for A04
.
          PACK      NEWVALUE,EMVILOCN,SP70       * new value
          MATCH     UPDVALUE,NEWVALUE
          IF        !@EQUAL
            MOVE      "HL7RECVR  ",USERID
            MOVE      "MOVEL",UPDTEMHI
            CALL      WTEMHS00              * Write EMR history record
          ENDIF
.
STVIS080  STRIP     ZTR01001
          MOVELPTR  ZTR01001,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      STVIS090 IF EQUAL            * no - no change
.
          PACK      UPDVALUE,EMVIMODE,SP70       * old value
.
          MATCH     BLANKSTR,ZTR01001
          IF        @EQUAL
            MOVE      SP70,EMVIMODE
          ELSE
            MOVE      ZTR01001,EMVIMODE          * mode of arrival
          ENDIF
.
          MATCH     MTYPEA04,MESSTYPE
          GOTO      STVIS090 IF EQUAL            * no audit/history for A04
.
          PACK      NEWVALUE,EMVIMODE,SP70       * new value
          MATCH     UPDVALUE,NEWVALUE
          IF        !@EQUAL
            MOVE      "HL7RECVR  ",USERID
            MOVE      "UPDAT",UPDTEMHI
            CALL      WTEMHS00              * Write EMR history record
          ENDIF
.
STVIS090  STRIP     ZTR01201
          MOVELPTR  ZTR01201,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      STVIS100 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZTR01201
          IF        @EQUAL
.0959732    MOVE      SP70,EMVIUC21
          ELSE
            MOVE      ZTR01201,EMVIUC21          * attendance source
          ENDIF
.
STVIS100  STRIP     ZTR01301
          MOVELPTR  ZTR01301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      STVIS110 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZTR01301
          IF        @EQUAL
.0959732    MOVE      SP70,EMVIUC16
          ELSE
            MOVE      ZTR01301,EMVIUC16          * streaming
          ENDIF
.
STVIS110  STRIP     ZTR01501
          MOVELPTR  ZTR01501,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      STVIS120 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZTR01501
          IF        @EQUAL
            MOVE      SP70,EMVIUC01
          ELSE
            MOVE      ZTR01501,EMVIUC01          * airway
          ENDIF
.
STVIS120  STRIP     ZTR01701
          MOVELPTR  ZTR01701,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      STVIS130 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZTR01701
          IF        @EQUAL
            MOVE      SP70,EMVIUC03
          ELSE
            MOVE      ZTR01701,EMVIUC03          * conscious state
          ENDIF
.
STVIS130  STRIP     ZTR02001
          MOVELPTR  ZTR02001,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      STVIS140 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZTR02001
          IF        @EQUAL
            MOVE      SP70,EMVIUC05
          ELSE
            MOVE      ZTR02001,EMVIUC05          * breathing 1
          ENDIF
.
STVIS140  STRIP     ZTR02301
          MOVELPTR  ZTR02301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      STVIS150 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZTR02301
          IF        @EQUAL
            MOVE      SP70,EMVIUC14
          ELSE
            MOVE      ZTR02301,EMVIUC14          * colour 1
          ENDIF
.
STVIS150  STRIP     ZTR03501
          MOVELPTR  ZTR03501,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      STVIS160 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZTR03501
          IF        @EQUAL
            MOVE      SP70,EMVIUC22
          ELSE
            MOVE      ZTR03501,EMVIUC22          * pain
          ENDIF
.
STVIS160  STRIP     ZTR04201
          MOVELPTR  ZTR04201,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      STVIS170 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZTR04201
          IF        @EQUAL
            MOVE      SP70,EMVIUC27
          ELSE
            MOVE      ZTR04201,EMVIUC27          * isolation
          ENDIF
.
STVIS170  STRIP     ZTR04301
          MOVELPTR  ZTR04301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      STVIS180 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZTR04301
          IF        @EQUAL
.0959732    MOVE      SP70,EMVIYN06
          ELSE
            MOVE      ZTR04301,EMVIYN06          * drug / alcohol taken
          ENDIF
.
STVIS180  STRIP     ZTR04501
          MOVELPTR  ZTR04501,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      STVIS190 IF EQUAL            * no - no change
.
          PACK      UPDVALUE,EMVITRDT,EMVITRTM,SP70        * old value
.
          MATCH     BLANKSTR,ZTR04501
          IF        @EQUAL
            MOVE      SP70,EMVITRDT
            MOVE      SP70,EMVITRTM
          ELSE
            UNPACK    ZTR04501,EMVITRDT,CHOUR,CMIN,CSEC    * triage date/time
            PACK      EMVITRTM,CHOUR,COLON,CMIN,COLON,CSEC
          ENDIF
.
          MATCH     MTYPEA04,MESSTYPE
          GOTO      STVIS190 IF EQUAL            * no audit/history for A04
.
          PACK      NEWVALUE,EMVITRDT,EMVITRTM,SP70        * new value
          MATCH     UPDVALUE,NEWVALUE
          IF        !@EQUAL
            MOVE      "HL7RECVR  ",USERID
            MOVE      "02",UPDFIELD
            CALL      WRECHA00              * Emergency Field Change Audit
.
            MOVE      "UPDAT",UPDTEMHI
            CALL      WTEMHS00              * Write EMR history record
          ENDIF
.
STVIS190  STRIP     ZTR04601
          MOVELPTR  ZTR04601,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      STVIS200 IF EQUAL            * no - no change
.
          PACK      UPDVALUE,EMVITRIG,SP70       * old value
.
          MATCH     BLANKSTR,ZTR04601
          IF        @EQUAL
            MOVE      SP70,EMVITRIG
          ELSE
            MOVE      ZTR04601,EMVITRIG          * triage category
          ENDIF
.
          MATCH     MTYPEA04,MESSTYPE
          GOTO      STVIS200 IF EQUAL            * no audit/history for A04
.
          PACK      NEWVALUE,EMVITRIG,SP70       * new value
          MATCH     UPDVALUE,NEWVALUE
          IF        !@EQUAL
            MOVE      "HL7RECVR  ",USERID
            MOVE      "03",UPDFIELD
            CALL      WRECHA00              * Emergency Field Change Audit
.
            MOVE      "UPDAT",UPDTEMHI
            CALL      WTEMHS00              * Write EMR history record
          ENDIF
.
STVIS200  STRIP     ZTR04701
          MOVELPTR  ZTR04701,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      STVIS210 IF EQUAL            * no - no change
.
          PACK      UPDVALUE,EMVITRNS,SP70       * old value
.
          MATCH     BLANKSTR,ZTR04701
          IF        @EQUAL
            MOVE      SP70,EMVITRNS
          ELSE
            MOVE      ZTR04701,EMVITRNS          * triage nurse
          ENDIF
.
          MATCH     MTYPEA04,MESSTYPE
          GOTO      STVIS210 IF EQUAL            * no audit/history for A04
.
          PACK      NEWVALUE,EMVITRNS,SP70       * new value
          MATCH     UPDVALUE,NEWVALUE
          IF        !@EQUAL
            MOVE      "HL7RECVR  ",USERID
            MOVE      "08",UPDFIELD
            CALL      WRECHA00              * Emergency Field Change Audit
.
            MOVE      "UPDAT",UPDTEMHI
            CALL      WTEMHS00              * Write EMR history record
          ENDIF
.
STVIS210  STRIP     ZTR04801
          MOVELPTR  ZTR04801,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      STVIS220 IF EQUAL            * no - no change
.
          PACK      UPDVALUE,EMVIUC29,SP70       * old value
.
          MATCH     BLANKSTR,ZTR04801
          IF        @EQUAL
            MOVE      SP70,EMVIUC29
          ELSE
            MOVE      ZTR04801,EMVIUC29          * mode of arrival
          ENDIF
.
          MATCH     MTYPEA04,MESSTYPE
          GOTO      STVIS220 IF EQUAL            * no audit/history for A04
.
          PACK      NEWVALUE,EMVIUC29,SP70       * new value
          MATCH     UPDVALUE,NEWVALUE
          IF        !@EQUAL
            MOVE      "HL7RECVR  ",USERID
            MOVE      "11",UPDFIELD
            CALL      WRECHA00              * Emergency Field Change Audit
.
            MOVE      "UPDAT",UPDTEMHI
            CALL      WTEMHS00              * Write EMR history record
          ENDIF
.
STVIS220
.
STVIS999  RETURN
+
.*****************************************************************************
.*                               PZNT0000                                    *
.*                   Process any Additional Presenting Complaint Notes       *
.* Requires: ZNT00201 - Note Type = 6 (presenting complaint)                 *
.*           ZNT00401 - Presenting Complaint Notes                           *
.*****************************************************************************
.
PZNT0000  SQUEEZE   ZNT00201
          MATCH     "6",ZNT00201
          GOTO      PZNT9999 IF NOT EQUAL        * expecting Comment Type = 6
.
          STRIP     ZNT00401
          MOVE      ZNT00401,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZNT00401
          MOVELPTR  ZNT00401,SAVFORM4
.
          COMPARE   ZERO,SAVFORM4                * field populated ?
          GOTO      PZNT9999 IF EQUAL            * no - finished
.
.         Delete any existing presenting complaint notes in webPAS
.
PZNT0100  MOVE      "023",KEY3                   * 0931586
          PACK      KEY14,DEMVIADM,KEY3,SP70
          CALL      RSVSCMT1
PZNT0200  CALL      RKVSCMT1
          BRANCH    OVRCD,PZNT0500
.
          MATCH     VSCTVIST,DEMVIADM
          GOTO      PZNT0500 IF NOT EQUAL
.
          MATCH     VSCTTYPE,KEY3
          GOTO      PZNT0500 IF NOT EQUAL
.
          PACK      KEY14,VSCTVIST,VSCTTYPE,VSCTLINE
          CALL      DEVSCMT1
          GOTO      PZNT0200
.
PZNT0500  MATCH     BLANKSTR,ZNT00401            * null field ?
          GOTO      PZNT9999 IF EQUAL            * no comments to write
.
.         There are presenting complaints in the field, so write to viscmtaf
.
          CALL      WZNT0000
.
PZNT9999  RETURN
+
.*****************************************************************************
.*                           WZNT0000              Called by: PZNT0000       *
.*                    Write viscmtaf (type 023) record(s)                    *
.* Requires: DEMVIADM - webPAS visit number for presenting complaint info    *
.*           ZNT00401 - presenting complaint notes                           *
.*****************************************************************************
.
.         Bump through the text string on a character by character basis
.         and for each character check to see whether there is a line break.
.         Allow 50 characters/line, unless of course there is a line break
.         or the end of the string is reached.
.
WZNT0000  MOVE      ZERO,LINENUMB                * initialise line number
          MOVE      ZERO,CHRCOUNT                * initialise character count
          MOVE      SP50,DIM50
          CLEAR     DIM50                       * initialise line string
.
.         Check to see if we have a line break
.
WZNT0200  MOVE      ZERO,BREAKFLG                * initialise break found flag
          MATCH     LINBREAK,ZNT00401
          IF        !@EQUAL | @LESS
            GOTO      WZNT0500
          ENDIF
.
.         We have found a line break, so if there is no data so far in the
.         the line (CHRCOUNT is zero), then ignore the line break, otherwise,
.         write the current line data
.
          IF        CHRCOUNT = 0
            BUMP      ZNT00401,5                 * move past line break
            GOTO      WZNT9500 IF EOS            * eos - finished
            GOTO      WZNT0200                   * check for another line break
          ENDIF
.
          MOVE      ONE,BREAKFLG                 * set flag for break found
.
WZNT0300  CALL      WZLN0000                     * write a comment line
.
          MOVE      ZERO,CHRCOUNT                * re-initialise character count
.
WZNT0400  IF        BREAKFLG = 1
            BUMP      ZNT00401,5                 * move past line break
          ELSE
            BUMP      ZNT00401                   * get next character
          ENDIF
          GOTO      WZNT9000 IF EOS              * eos - finished
          GOTO      WZNT0200                     * check for another line break
.
.         We have a valid character, so load it into the text line and then
.         get the next character
.
WZNT0500  MOVE      ZNT00401,ANS
          APPEND    ANS,DIM50                    * load current character
          ADD       ONE,CHRCOUNT                 * increment character count
.
          COMPARE   FIFTY,CHRCOUNT               * full line yet ?
          GOTO      WZNT0400 IF LESS             * no
.
.         Check for blank space on char 50 so as not to split up words
.
WZNT1000  MATCH     SP1,ANS
          IF        !@EQUAL
            BUMP      DIM50,-1                   * go back to previous character
            LENSET    DIM50                      * set LL to FP position
            BUMP      ZNT00401,-1
            MOVE      ZNT00401,ANS               
            MOVEFPTR  DIM50,FPPOSITN
            IF        FPPOSITN = 1
WZNT1500      SETLPTR   DIM50,50
              BUMP      ZNT00401,49
              GOTO      WZNT0300
            ENDIF
            GOTO      WZNT1000                   * check for space again
          ELSE
            GOTO      WZNT0300                   * write comment if space
          ENDIF
.
WZNT9000  IF        CHRCOUNT > 0
            CALL      WZLN0000                   * write comment record
          ENDIF
.
WZNT9500  RESET     ZNT00401
.
WZNT9999  RETURN
+
.*****************************************************************************
.*                                  WZLN0000       Called by: WZNT0000       *
.*            Write a presenting complaint line record to viscmtaf           *
.*****************************************************************************
.
WZLN0000  MOVE      DEMVIADM,VSCTVIST            * load record variables
          MOVE      "023",VSCTTYPE               * 0931586
          RESET     DIM50
          PACK      VSCTDATA,DIM50,SP50
.
          UNPACK    CTIMEIS,CHOUR,ANS,CMIN,ANS,CSEC
          MOVE      USERID,D10
          PACK      VSCTUKEY,CURRDATE,CHOUR,CMIN,CSEC,D10,SP70
          MOVE      SP30,VSCTSPAR
.
WZLN0100  ADD       ONE,LINENUMB                 * increment line number
          MOVE      LINENUMB,VSCTLINE
.
          PACK      KEY14,VSCTVIST,VSCTTYPE,VSCTLINE
          CALL      RAVSCMT1
          IF        OVRCD = 1
            CALL      WRVSCMT1                   * write new record
          ELSE
            GOTO      WZLN0100
          ENDIF
.
          MOVE      SP50,DIM50
          CLEAR     DIM50                        * clear comment line
.
WZLN9999  RETURN
+
.*****************************************************************************
.*                              PA050000           Called by: PROC0000       *
.*              Process the A05 message - write/update PAS database          *
.*****************************************************************************
.
PA050000  MOVE      PURNO,PADMURNO
.davvy    CALL      CLPATMAS                     * clear database variables
.davvy    CALL      CLPATMSX
.davvy    CALL      CLPMSPX2
          CALL      CLPATMIS
          CALL      CLWATTR1
          CALL      CLWATTX1
          CALL      CLPATVIS
          CALL      CLPMSVX1
          MOVE      "HL7RECVR  ",USERID
          PACK      KEY10,USERID,SP10
          CALL      RDWBSE1
          IF        OVRCD<>0
            CALL      CLWEBSEC
          ENDIF
          MOVE      WBSEPCD,PASSCODE
.
          CALL      CALT0000                     * check ibaalvaf
          BRANCH    EXIT,PA059999                * error
.
          CALL      SA050000                     * set up file variables
          BRANCH    EXIT,PA059999                * error
.
          CALL      WA050000                     * write the record details
          BRANCH    EXIT,PA059999                * error
.
.         Load PCEHR flag (advertised MyHR icon)
.
          PACK      ZXP05801,ZXP05801,SP70
          MATCH     SP70,ZXP05801
          IF        !@EQUAL
            MATCH     BLANKSTR,ZXP05801
            IF        @EQUAL
              MOVE      SP1,PMPXSN10
            ELSE
              MOVE      ZXP05801,PMPXSN10        * PCEHR Flag
            ENDIF
            CALL      UPPMPX21
          ENDIF
.
          CALL      ADDVIS00                     * write MR visit link
          CALL      AVISA000                     * write alt. visit id.
          CALL      WRCPT000                     * check if current patient
          CALL      WRINT000                     * write interpreter details
          CALL      BRDPRE00                     * broadcast HL7 A14
          CALL      AEXP0000                     * write expected payors
          MOVE      PURNO,URNUMBER
          MOVE      AADMNO,ADMISSNO
          PROC      BBUP0000                     * Bed Board update
.
PA059999  RETURN
+
.*****************************************************************************
.*                              SA050000           Called by: PA050000       *
.*                 Set variables for the A05 message                         *
.*****************************************************************************
.         First generate a new visit number
.
SA050000  READ      CONTROLF,HUND30;*75,PTCNUANV      * Using AN Visit Numbers
.        
          MATCH     "1",PTCNUANV
          IF        @EQUAL
            CALL      GANV0000                * Get next AN visit number
            MOVE      PTCNNXTV,KEY8
          ELSE
            MOVE      " 10",PRXCODE                * Set to sector 10
            CALL      GETSLK00                     * Lock sector 10
            READ      CONTROLF,TEN;*1,FORM8
            ADD       ONE,FORM8
            WRITAB    CONTROLF,TEN;*1,FORM8
            CALL      RELSLK00                     * Release sector 10 lock
            SUB       ONE,FORM8
            MOVE      FORM8,KEY8
          ENDIF
.
          CALL      RDAVISA1                     * visit already on file ?
          COMPARE   ZERO,OVRCD
          GOTO      SA050000 IF EQUAL            * yes - get next visit no
.
SA051000  MOVE      KEY8,AADMNO                                * admit number
          MOVE      PADMURNO,AURNO                              * ur number
          UNPACK    PV200801,ADATE,HOURTM,MINTIME,SECTIME       * admit date
          MOVE      ADATE,ALACDTE
          PACK      ATIME,HOURTM,COLON,MINTIME,COLON,SECTIME    * admit time
          MOVE      ONE,ASTAT
.
          MATCH     PBDATE,ADATE                 * adm.date < DOB ?
          GOTO      SA059490 IF LESS
.
          MATCH     BLANKSTR,PV100301
          IF        !@EQUAL
            PACK      PTMIXWRD,PV100301,SP70                    * expected ward
          ENDIF
          MATCH     BLANKSTR,PV100303
          IF        !@EQUAL
            PACK      PTMIEBED,PV100303,SP70                    * expected bed
          ENDIF
.
          MATCH     BLANKSTR,PV100901
          IF        !@EQUAL
            PACK      ADOCTA,PV100901,SP70                      * att.doctor
            PACK      PMVXDOCA,PV100901,SP70
          ENDIF
.
          MATCH     BLANKSTR,PV100801
          IF        !@EQUAL
            PACK      PMVXRHC1,PV100801,SP70                    * ref.doctor
          ENDIF
.
          MATCH     BLANKSTR,PV101401
          IF        !@EQUAL
            PACK      ASRCE,PV101401,SP70                       * category S
          ENDIF
.
          MATCH     BLANKSTR,PV100401
          IF        !@EQUAL
            PACK      ACLSS,PV100401,SP70                       * category P
          ENDIF
.
          MATCH     BLANKSTR,PV101801
          IF        !@EQUAL
            PACK      ACARE,PV101801,SP70                       * category CC
          ENDIF
.
          MATCH     BLANKSTR,PV102001
          IF        !@EQUAL
            PACK      ACLAIM,PV102001,SP70                      * category CL
          ENDIF
.
          MATCH     BLANKSTR,DG100401
          IF        !@EQUAL
            PACK      ADIAG1,DG100401,SP70,SP70                 * diagnosis
          ENDIF
.
          MOVE      PFUNDH,AFUNDH                * Default HF details from PMI
          MOVE      PFNDTB,AFNDTB
          MOVE      PFNDMM,AFNDMM
          MOVE      AFNDMM,PMVXFNDM
.
          MOVE      "HL7RECVR  ",PTMIWEBC
          MOVE      CURRDATE,PTMIDATC
          MOVE      CTIMEIS,PTMITIMC
          REP       " 0",PTMITIMC
.
          CALL      VALF0000                     * validate facility (PV1.3/4)
          BRANCH    EXIT,SA059500                * error
          MOVE      SAVEHOSP,PMVXMHOS            * hospital id
.
.         Default common fields from PMI
.
          MOVE      PMPXABRG,PMVXABRG            * aboriginality
          MOVE      PMPXLNG1,PMVXLNG1            * preferred language
          MOVE      PPOST,PMVXPOST               * postcode
          MOVE      PMPXPRVI,PMVXPIND            * Privacy Indicator
          MOVE      PMPXCRIN,PMVXCSNR            * Consent Release of info
          MOVE      PMPXHOML,PMVXHOME            * Homeless status
.
          MOVE      AADMNO,PMVXVISN              * set other pmsvx1af fields
          MOVE      ADATE,PMVXVSDT
          MOVE      CURRDATE,PMVXCDTE
          MOVE      CTIMEIS,PMVXCTIM
          REP       " 0",PMVXCTIM
          MOVE      "HL7RECVR  ",PMVXWEBC
.
          MOVE      PV100501,PADMAVIS            * Alternate Visit Number (Epic)
.
SA059000  MOVE      ZERO,EXIT
          GOTO      SA059999
.
.         Error messages
.
SA059490  MOVE      "PV2.8: Admission Date less than DOB",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      SA059500
.
SA059500  MOVE      ONE,EXIT
SA059999  RETURN
+
.*****************************************************************************
.*                                 CALT0000        Called by: PA050000       *
.*    Check if an alternate visit number record already exists on ibaalvaf   *
.* Requires: PV100501 - Alternate Visit ID                                   *
.* Returns:  EXIT 0 = Ok to continue                                         *
.*                1 = Error - Record already exists on ibaalvaf              *
.*           ALVISFLG - Alternate Visit Flag                                 *
.*                0 = Write new ibaalvaf record                              *
.*                1 = Update existing ibaalvaf record                        *
.*****************************************************************************
.
CALT0000  MOVE      ZERO,ALVISFLG                  * initial alt. visit flag
.
          MATCH     SP20,PV100501                  * blank alternate visit no. ?
          GOTO      CALT9000 IF EQUAL              * yes - finished
.
          PACK      KEY28,PV100501,SP30
          CALL      RSIBALV2                       * position on alt. visit no.
CALT0500  CALL      RKIBALV2                       * read next record
          BRANCH    OVRCD,CALT9000                 * eof - finished
.
          MATCH     PV100501,IBAVAVIS              * same alt. visit no. ?
          GOTO      CALT9000 IF NOT EQUAL          * no
.
          MATCH     " 1",IBAVTYPE                  * eReferral type record ?
          GOTO      CALT0500 IF EQUAL              * yes - ignore record
.
.         Check if the legacy webPAS visit is a cancelled pre-admission
.         and if so, then we can update the ibaalvaf record with the new
.         visit number
.
          MOVE      IBAVVISN,KEY8
          CALL      RDPTMIS1                       * webPAS visit found ?
          BRANCH    OVRCD,CALT9100                 * no
.
          COMPARE   FIVE,ASTAT                     * cancelled pre-admission ?
          GOTO      CALT9100 IF NOT EQUAL          * no
.
          MOVE      ONE,ALVISFLG                   * set to update alt. visit
.
CALT9000  MOVE      ZERO,EXIT
          GOTO      CALT9999
.
CALT9100  MOVE      "Alternate visit id already exists in ibaalvaf",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          MOVE      ONE,EXIT
.
CALT9999  RETURN
+
.*****************************************************************************
.*                            WA050000             Called by: PA050000       *
.*            Write to patmi1af, patvisaf and pmsvx1af                       *
.*****************************************************************************
.
.         Validate admission number
.
WA050000  MOVE      AADMNO,KEY8
          CALL      RAPTMIS1
          IF        OVRCD = 0
            MOVE      "I/P Admission record already exists ",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      WA059500
          ENDIF
.
.         Validate visit number
.
          MOVE      AADMNO,KEY8
          CALL      RDAVISA1                     * visit on file already ?
          IF        OVRCD = 0
            MOVE      "Visit record already exists",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      WA059500
          ENDIF
.
          MOVE      AADMNO,KEY8
          CALL      RAPMVX11                     * visit on file already ?
          IF        OVRCD = 0
            MOVE      "Visit extension record already exists",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      WA059500
          ENDIF
.
.         Check if webPAS visit number record already exists on ibaalvaf
.
          MATCH     SP20,PADMAVIS                * blank alternate visit no. ?
          IF        !@EQUAL
            MOVE      AADMNO,KEY8
            CALL      RAIBALV1                   * webPAS visit already on file?
            IF        OVRCD = 0
              MOVE      "webPAS visit no. already exists on ibaalvaf",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      WA059500
            ENDIF
          ENDIF
.
.         Write an admission record (patmi1af)
.
          CALL      WRMISS1                      * write new record

.         Write a visit record (patvisaf)
.
          MOVE      AURNO,PVIURNO                * load patvisaf fields
          MOVE      ADATE,PVIDATE
          MOVE      AADMNO,PVIBILL
          MOVE      THREE,PVITYPE
.
          MOVE      ZERO,FORM1
          MATCH     SP3,ATYPE                    * blank admission type ?
          GOTO      WA051000 IF EQUAL            * yes
.
          PACK      KEY5,ANSA,SP1,ATYPE
          CALL      RDCODE1
          IF        OVRCD = 0
            MOVE      TCINDC1,FORM1
          ENDIF
WA051000  MOVE      TWO,PVISTAT                  * Default Public Patient
          LOAD      PVISTAT,FORM1,TWO,ONE

          MOVE      ONE,PVITRAN
          MOVE      SP6,PVISITE
          MOVE      " 2",PVISYST
.
          MOVE      PVIBILL,KEY8
          CALL      RDAVISA1                     * visit on file already ?
          IF        OVRCD = 1
            CALL      WRPTVIS1                   * no
          ENDIF
.
          COMPARE   TWO,PTCNHDPS                 * Australian site ?
          GOTO      WA052000 IF LESS             * no
.
.         Write a visit extension record (pmsvx1af)
.
          PACK      KEY56,PPOST,PSUBRB,SP10,PADD4,SP70
          CALL      RDIBPOS1
          IF        OVRCD = 0
            MOVE      IBPOASGC,PMVXASGC
          ELSE
            PACK      KEY56,PPOST,PSUBRB,SP70
            CALL      RSIBPOS1
            CALL      RKIBPOS1
            BRANCH    OVRCD,WA052000
.
            MATCH     PPOST,IBPOPCOD
            IF        @EQUAL
              MATCH     PSUBRB,IBPOSUBR
              IF        @EQUAL
                MOVE      IBPOASGC,PMVXASGC
              ENDIF
            ENDIF
          ENDIF
.
WA052000  MOVE      AADMNO,KEY8
          CALL      RAPMVX11                     * visit on file already ?
          IF        OVRCD=1
            CALL      WRPMVX11                   * no
          ENDIF
.
WA059000  MOVE      ZERO,EXIT
          GOTO      WA059999
.
WA059500  MOVE      ONE,EXIT
WA059999  RETURN
+
.*****************************************************************************
.*                              AVISA000           Called by: PA050000       *
.*        Check if we need to create an alternate visit number record        *
.*        in ibaalvaf.                                                       *
.* Requires: PADMAVIS - Alternate Visit Number (left justified)              *
.*           AADMNO   - webPAS Visit Number (right justified)                *
.*           ALVISFLG - alternate visit flag                                 *
.*                0 = Create new alternate visit record in ibaalvaf          *
.*                1 = Update existing alternate visit record in ibaalvaf     *
.*****************************************************************************
.
AVISA000  MATCH     SP20,PADMAVIS                * blank alternate visit no. ?
          GOTO      AVISA999 IF EQUAL            * yes - finished
.
          BRANCH    ALVISFLG,AVISA500            * update existing record
.
.         Write a new ibaalvaf record
.
          MOVE      AADMNO,KEY8
          CALL      RAIBALV1                     * webPAS visit already on file?
          IF        OVRCD = 1
            MOVE      AADMNO,IBAVVISN            * load field data
            MOVE      PADMAVIS,IBAVAVIS
            MOVE      " 0",IBAVTYPE
            CALL      WRIBALV1                   * write alt. visit no. record
          ENDIF
          GOTO      AVISA999
.
.         Update the existing ibaalvaf record
.
AVISA500  PACK      KEY28,PADMAVIS,SP30
          CALL      RSIBALV2                       * position on alt. visit no.
AVISA550  CALL      RKIBALV2                       * read next record
          BRANCH    OVRCD,AVISA999                 * eof - finished
.
          MATCH     PADMAVIS,IBAVAVIS              * same alt. visit no. ?
          GOTO      AVISA999 IF NOT EQUAL          * no
.
          MATCH     " 1",IBAVTYPE                  * eReferral type record ?
          GOTO      AVISA550 IF EQUAL              * yes - ignore record
.
          MOVE      AADMNO,IBAVVISN
          CALL      UPIBALV2                       * update record
.
AVISA999  RETURN
+
.*****************************************************************************
.*                              PA08E000           Called by: PROC0000       *
.*              Process the A08 EMR message - update PAS database            *
.*****************************************************************************
.
.         Populate webPAS database with incoming EMR fields
.
PA08E000  CALL      IBACLOCK                     * get current date/time
          PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
.
PA08E010  MOVE      EMVIDOCT,SAVTRDOC            * save original values
.
          STRIP     PV100901
          MOVELPTR  PV100901,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E020 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,PV100901
          IF        @EQUAL
            MOVE      SP70,EMVIDOCT
          ELSE
            PACK      EMVIDOCT,PV100901,SP10
          ENDIF
.
PA08E020  STRIP     ZXV05901
          MOVELPTR  ZXV05901,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E030 IF EQUAL            * no - no change
.
          PACK      UPDVALUE,EMVIAHDT,EMVIAHTM,SP70        * old value
.
          MATCH     BLANKSTR,ZXV05901
          IF        @EQUAL
            MOVE      SP70,EMVIAHDT
            MOVE      SP70,EMVIAHTM
          ELSE
            UNPACK    ZXV05901,EMVIAHDT,CHOUR,CMIN,CSEC
            PACK      EMVIAHTM,CHOUR,COLON,CMIN,COLON,CSEC
          ENDIF
.
          PACK      NEWVALUE,EMVIAHDT,EMVIAHTM,SP70        * new value
          MATCH     UPDVALUE,NEWVALUE
          IF        !@EQUAL
            MOVE      "HL7RECVR  ",USERID
            MOVE      "17",UPDFIELD
            CALL      WRECHA00              * Emergency Field Change Audit
.
            MOVE      "UPDAT",UPDTEMHI
            CALL      WTEMHS00              * Write EMR history record
          ENDIF
.
PA08E030  STRIP     ZXV06001
          MOVELPTR  ZXV06001,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E040 IF EQUAL            * no - no change
.
          PACK      UPDVALUE,EMVIAMBL,SP70       * old value
.
          MATCH     BLANKSTR,ZXV06001
          IF        @EQUAL
            MOVE      SP70,EMVIAMBL
          ELSE
            PACK      EMVIAMBL,ZXV06001,SP20
          ENDIF
.
          PACK      NEWVALUE,EMVIAMBL,SP70       * new value
          MATCH     UPDVALUE,NEWVALUE
          IF        !@EQUAL
            MOVE      "HL7RECVR  ",USERID
            MOVE      "UPDAT",UPDTEMHI
            CALL      WTEMHS00              * Write EMR history record
          ENDIF
.
PA08E040  STRIP     ZXV06101
          MOVELPTR  ZXV06101,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E050 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV06101
          IF        @EQUAL
            MOVE      SP70,EMVIUD09
            MOVE      SP70,EMVIUT09
          ELSE
            UNPACK    ZXV06101,EMVIUD09,CHOUR,CMIN,CSEC
            PACK      EMVIUT09,CHOUR,COLON,CMIN,COLON,CSEC
          ENDIF
.
PA08E050  PACK      UPDVALUE,EMVIMDDT,EMVIMDTM,EMVIMDCD,EMVIUC31,SP70     * old
.
          STRIP     ZXV06201
          MOVELPTR  ZXV06201,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E060 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV06201
          IF        @EQUAL
            MOVE      SP70,EMVIMDCD
          ELSE
            PACK      EMVIMDCD,ZXV06201,SP10
          ENDIF
.
PA08E060  STRIP     ZXV06301
          MOVELPTR  ZXV06301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E070 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV06301
          IF        @EQUAL
            MOVE      SP70,EMVIMDDT
            MOVE      SP70,EMVIMDTM
          ELSE
            UNPACK    ZXV06301,EMVIMDDT,CHOUR,CMIN,CSEC
            PACK      EMVIMDTM,CHOUR,COLON,CMIN,COLON,CSEC
          ENDIF
.
PA08E070  STRIP     ZXV06401
          MOVELPTR  ZXV06401,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E075 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV06401
          IF        @EQUAL
            MOVE      SP70,EMVIUC31
          ELSE
            PACK      EMVIUC31,ZXV06401,SP3
          ENDIF
.
PA08E075  PACK      NEWVALUE,EMVIMDDT,EMVIMDTM,EMVIMDCD,EMVIUC31,SP70     * new
          MATCH     UPDVALUE,NEWVALUE
          IF        !@EQUAL
            MOVE      "HL7RECVR  ",USERID
            MOVE      "14",UPDFIELD
            CALL      WRECHA00              * Emergency Field Change Audit
.
            MOVE      "UPDAT",UPDTEMHI
            CALL      WTEMHS00              * Write EMR history record
          ENDIF
.
PA08E080  MOVE      EMVIDRDT,SAVTRDAT            * save original values
          UNPACK    EMVIDRTM,HOURE,D1,MIN,D1,SEC
          PACK      SAVTRTIM,HOURE,MIN,SEC       * hhmmss
          REP       " 0",SAVTRTIM
          MOVE      SP8,TRDOCDAT
.
          STRIP     ZXV06501
          MOVELPTR  ZXV06501,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E090 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV06501
          IF        @EQUAL
            MOVE      SP70,EMVIDRDT
            MOVE      SP70,EMVIDRTM
          ELSE
            MATCH     SP70,EMVIDRDT
            IF        @EQUAL
              UNPACK    ZXV06501,EMVIDRDT,CHOUR,CMIN,CSEC
            ENDIF
            MATCH     SP70,EMVIDRTM
            IF        @EQUAL
              PACK      EMVIDRTM,CHOUR,COLON,CMIN,COLON,CSEC
            ENDIF
            MOVE      ZXV06501,TRDOCDAT
          ENDIF
.
PA08E090  PACK      UPDVALUE,EMVINSDT,EMVINSTM,EMVIATNS,SP70    * old
.
          STRIP     ZXV06601
          MOVELPTR  ZXV06601,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E110 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV06601
          IF        @EQUAL
            MOVE      SP70,EMVIATNS
          ELSE
            PACK      EMVIATNS,ZXV06601,SP10
          ENDIF
.
PA08E100  STRIP     ZXV06701
          MOVELPTR  ZXV06701,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E102 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV06701
          IF        @EQUAL
            MOVE      SP70,EMVINSDT
            MOVE      SP70,EMVINSTM
          ELSE
            MATCH     SP70,EMVINSDT
            IF        @EQUAL
              UNPACK    ZXV06701,EMVINSDT,CHOUR,CMIN,CSEC
            ENDIF
            MATCH     SP70,EMVINSTM
            IF        @EQUAL
              PACK      EMVINSTM,CHOUR,COLON,CMIN,COLON,CSEC
            ENDIF
          ENDIF
.
PA08E102  PACK      NEWVALUE,EMVINSDT,EMVINSTM,EMVIATNS,SP70    * new
          MATCH     UPDVALUE,NEWVALUE
          GOTO      PA08E110 IF EQUAL                           * no change
.
          PACK      KEY22,DEMVIADM,Z70
          CALL      RSEMHIS1
          CALL      RPEMHIS1                     * loop emrhisaf
          BRANCH    OVRCD,PA08E110
.
          MATCH     DEMVIADM,EMHIVIS             * same visit ?
          GOTO      PA08E110 IF NOT EQUAL
.
          MOVE      CURRDATE,EMHIDAT
          UNPACK    CTIMEIS,CHOUR,ANS,CMIN,ANS,CSEC
          PACK      EMHITIM,CHOUR,CMIN,CSEC
          MOVE      "ALNUR",EMHIUPT              * nurse update
          MOVE      EMVIATNS,EMHINUR             * nurse code
          UNPACK    ZXV06701,EMHINSD,EMHINST     * nurse date/time
.
          MOVE      CURRDATE,EMHICDAT      * Date Record Created (ccyymmdd)
          MOVE      CTIMEIS,EMHICTIM       * Time Record Created (hh:mm:ss)
          MOVE      "HL7RECVR  ",EMHICUID  * Web User Id Created (websecaf)
.
          MOVE      SP70,EMHIUDAT      * Date Record Updated (ccyymmdd)
          MOVE      SP70,EMHIUTIM      * Time Record Updated (hh:mm:ss)
          MOVE      SP70,EMHIUUID      * Web User Id Updated (websecaf)
.
PA08E105  PACK      KEY22,EMHIVIS,EMHIDAT,EMHITIM,SP70
          CALL      RAEMHIS1
          IF        OVRCD=1
            CALL      WREMHIS1                   * write to emr history
          ELSE
            CALL      IBACLOCK                   * Set new date and time and
            PACK      EMHIDAT,CCC,CYY,CMM,CDD    * try write again
            REP       " 0",EMHIDAT
            CLOCK     TIME,CTIMEIS
            UNPACK    CTIMEIS,CHOUR,D1,CMIN,D1,CSEC
            PACK      EMHITIM,CHOUR,CMIN,CSEC
            REP       " 0",EMHITIM
            GOTO      PA08E105
          ENDIF
.
PA08E110  PACK      UPDVALUE,EMVIMPDT,EMVIMPTM,EMVIMPRA,SP70    * old
.
          STRIP     ZXV06801
          MOVELPTR  ZXV06801,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E130 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV06801
          IF        @EQUAL
            MOVE      SP70,EMVIMPRA
          ELSE
            PACK      EMVIMPRA,ZXV06801,SP10
          ENDIF
.
PA08E120  STRIP     ZXV06901
          MOVELPTR  ZXV06901,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E122 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV06901
          IF        @EQUAL
            MOVE      SP70,EMVIMPDT
            MOVE      SP70,EMVIMPTM
          ELSE
            MATCH     SP70,EMVIMPDT
            IF        @EQUAL
              UNPACK    ZXV06901,EMVIMPDT,CHOUR,CMIN,CSEC
            ENDIF
            MATCH     SP70,EMVIMPTM
            IF        @EQUAL
              PACK      EMVIMPTM,CHOUR,COLON,CMIN,COLON,CSEC
            ENDIF
          ENDIF
.
PA08E122  PACK      NEWVALUE,EMVIMPDT,EMVIMPTM,EMVIMPRA,SP70    * new
          MATCH     UPDVALUE,NEWVALUE
          GOTO      PA08E130 IF EQUAL                           * no change
.
          MOVE      "HL7RECVR  ",USERID
          MOVE      "06",UPDFIELD
          CALL      WRECHA00                * Emergency Field Change Audit
.
          PACK      KEY22,DEMVIADM,Z70
          CALL      RSEMHIS1
          CALL      RPEMHIS1                     * loop emrhisaf
          BRANCH    OVRCD,PA08E130
.
          MATCH     DEMVIADM,EMHIVIS             * same visit ?
          GOTO      PA08E130 IF NOT EQUAL
.
          MOVE      CURRDATE,EMHIDAT
          UNPACK    CTIMEIS,CHOUR,ANS,CMIN,ANS,CSEC
          PACK      EMHITIM,CHOUR,CMIN,CSEC
          MOVE      "MHPRA",EMHIUPT              * other doctor update
          MOVE      EMVIMPRA,EMHIODCD            * other doctor code
          UNPACK    ZXV06901,EMHIODSD,EMHIODST   * other doctor date/time
.
          MOVE      CURRDATE,EMHICDAT      * Date Record Created (ccyymmdd)
          MOVE      CTIMEIS,EMHICTIM       * Time Record Created (hh:mm:ss)
          MOVE      "HL7RECVR  ",EMHICUID  * Web User Id Created (websecaf)
.
          MOVE      SP70,EMHIUDAT      * Date Record Updated (ccyymmdd)
          MOVE      SP70,EMHIUTIM      * Time Record Updated (hh:mm:ss)
          MOVE      SP70,EMHIUUID      * Web User Id Updated (websecaf)
.
PA08E125  PACK      KEY22,EMHIVIS,EMHIDAT,EMHITIM,SP70
          CALL      RAEMHIS1
          IF        OVRCD=1
            CALL      WREMHIS1                   * write to emr history
          ELSE
            CALL      IBACLOCK                   * Set new date and time and
            PACK      EMHIDAT,CCC,CYY,CMM,CDD    * try write again
            REP       " 0",EMHIDAT
            CLOCK     TIME,CTIMEIS
            UNPACK    CTIMEIS,CHOUR,D1,CMIN,D1,CSEC
            PACK      EMHITIM,CHOUR,CMIN,CSEC
            REP       " 0",EMHITIM
            GOTO      PA08E125
          ENDIF
.
PA08E130  PACK      UPDVALUE,EMVIDRDT,EMVIDRTM,EMVIDOCT,SP70    * old
.
          MOVE      SP70,FSDOCCOD
.
          STRIP     ZXV07001
          MOVELPTR  ZXV07001,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E140 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV07001
          IF        !@EQUAL
            PACK      FSDOCCOD,ZXV07001,SP10
          ENDIF
.
PA08E140  STRIP     ZXV07101
          MOVELPTR  ZXV07101,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E141 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV07101
          IF        @EQUAL
            MOVE      SP70,EMVIDRDT
            MOVE      SP70,EMVIDRTM
          ELSE
.>>>>>      MATCH     SP70,EMVIDRDT
.>>>>>      IF        @EQUAL
              UNPACK    ZXV07101,EMVIDRDT,CHOUR,CMIN,CSEC
.>>>>>      ENDIF
.>>>>>      MATCH     SP70,EMVIDRTM
.>>>>>      IF        @EQUAL
              PACK      EMVIDRTM,CHOUR,COLON,CMIN,COLON,CSEC
.>>>>>      ENDIF
.
            MATCH     SP8,EMVIDOCT
            IF        @EQUAL
              MATCH     SP10,FSDOCCOD
              IF        !@EQUAL
                MOVE      FSDOCCOD,EMVIDOCT
              ENDIF
            ENDIF
          ENDIF
.
PA08E141  PACK      NEWVALUE,EMVIDRDT,EMVIDRTM,EMVIDOCT,SP70    * new
          MATCH     UPDVALUE,NEWVALUE
          GOTO      PA08E142 IF EQUAL                           * no change
.
          MOVE      "HL7RECVR  ",USERID
          MOVE      "05",UPDFIELD
          CALL      WRECHA00                * Emergency Field Change Audit
.
.         Check if there is an ALDOC emrhisaf record on file already
.
PA08E142  MATCH     SP8,FSDOCCOD
          IF        @EQUAL
            MOVE      EMVIDOCT,D10
          ELSE
            MOVE      FSDOCCOD,D10               * ???? davvy ????
          ENDIF
          MATCH     SP10,D10
          GOTO      PA08E150 IF EQUAL            * don't write if blank doctor
.
          PACK      KEY22,DEMVIADM,Z70
          CALL      RSEMHIS1
PA08E143  CALL      RPEMHIS1                     * loop emrhisaf
          BRANCH    OVRCD,PA08E144
.
          MATCH     DEMVIADM,EMHIVIS             * same visit ?
          GOTO      PA08E144 IF NOT EQUAL
.
          MATCH     "ALDOC",EMHIUPT              * ALDOC record ?
          GOTO      PA08E143 IF NOT EQUAL        * no - get next record
.
.         An ALDOC record exists on file, so we only need to write a new one if
.         any of the doctor code/date/time fields have changed
.
          MATCH     EMVIDOCT,SAVTRDOC            * same tr. dr code ?
          GOTO      PA08E144 IF NOT EQUAL        * no - write new ALDOC record
.
          MATCH     EMHIDSD,SAVTRDAT             * same tr. dr date ?
          GOTO      PA08E144 IF NOT EQUAL        * no - write new ALDOC record
.
          MATCH     EMHIDST,SAVTRTIM             * same tr. dr time ?
          GOTO      PA08E144 IF NOT EQUAL        * no - write new ALDOC record
.
.         The treating doctor data hasn't changed, so no need to write
.         a new ALDOC record
.
          GOTO      PA08E150
.
.         Write a new ALDOC record to emrhisaf
.
PA08E144  MOVE      EMVIADMN,EMHIVIS
          MOVE      CURRDATE,EMHIDAT
          UNPACK    CTIMEIS,CHOUR,ANS,CMIN,ANS,CSEC
          PACK      EMHITIM,CHOUR,CMIN,CSEC
          MOVE      "ALDOC",EMHIUPT              * doctor update
          MOVE      D10,EMHIDOC
          MATCH     SP8,TRDOCDAT
          IF        @EQUAL
            UNPACK    ZXV07101,EMHIDSD,EMHIDST
          ELSE
            UNPACK    ZXV06501,EMHIDSD,EMHIDST     * doctor date/time
          ENDIF
.
PA08E145  PACK      KEY22,EMHIVIS,EMHIDAT,EMHITIM,SP70
          CALL      RAEMHIS1
          IF        OVRCD=1
            CALL      WREMHIS1                   * write to emr history
          ELSE
            CALL      IBACLOCK                   * Set new date and time and
            PACK      EMHIDAT,CCC,CYY,CMM,CDD    * try write again
            REP       " 0",EMHIDAT
            CLOCK     TIME,CTIMEIS
            UNPACK    CTIMEIS,CHOUR,D1,CMIN,D1,CSEC
            PACK      EMHITIM,CHOUR,CMIN,CSEC
            REP       " 0",EMHITIM
            GOTO      PA08E145
          ENDIF
.
PA08E150  STRIP     ZXV07201
          MOVELPTR  ZXV07201,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E160 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV07201
          IF        @EQUAL
            MOVE      SP70,EMVIDADT
            MOVE      SP70,EMVIDATM
          ELSE
            UNPACK    ZXV07201,EMVIDADT,CHOUR,CMIN,CSEC
            PACK      EMVIDATM,CHOUR,COLON,CMIN,COLON,CSEC
          ENDIF
.
PA08E160  STRIP     ZXV07301
          MOVELPTR  ZXV07301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E170 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV07301
          IF        @EQUAL
            MOVE      SP70,EMVIUC28
          ELSE
            PACK      EMVIUC28,ZXV07301,SP3
          ENDIF
.
PA08E170  STRIP     ZXV07401
          MOVELPTR  ZXV07401,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E180 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV07401
          IF        @EQUAL
            MOVE      SP70,EMVIUR01
          ELSE
            MOVE      ZXV07401,EMVIUR01
          ENDIF
.
PA08E180  STRIP     ZXV07501
          MOVELPTR  ZXV07501,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E190 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV07501
          IF        @EQUAL
            MOVE      SP70,EMVIYN01
          ENDIF
          MATCH     "Y",ZXV07501
          IF        @EQUAL
            MOVE      "1",EMVIYN01
          ENDIF
          MATCH     "N",ZXV07501
          IF        @EQUAL
            MOVE      "0",EMVIYN01
          ENDIF
.
PA08E190  STRIP     ZXV07601
          MOVELPTR  ZXV07601,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E200 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV07601
          IF        @EQUAL
            MOVE      SP70,EMVIUC10
          ELSE
            MOVE      ZXV07601,EMVIUC10
          ENDIF
.
PA08E200  STRIP     ZXV08201
          MOVELPTR  ZXV08201,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E210 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV08201
          IF        @EQUAL
            MOVE      SP70,EMVIUD01
            MOVE      SP70,EMVIUT01
          ELSE
            UNPACK    ZXV08201,EMVIUD01,CHOUR,CMIN,CSEC
            PACK      EMVIUT01,CHOUR,COLON,CMIN,COLON,CSEC
          ENDIF
.
PA08E210  STRIP     ZXV08301
          MOVELPTR  ZXV08301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E220 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV08301
          IF        @EQUAL
            MOVE      SP70,EMVIUC11
          ELSE
            PACK      EMVIUC11,ZXV08301,SP3
          ENDIF
.
PA08E220  STRIP     ZXV08401
          MOVELPTR  ZXV08401,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E230 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV08401
          IF        @EQUAL
            MOVE      SP70,EMVIUC12
          ELSE
            PACK      EMVIUC12,ZXV08401,SP3
          ENDIF
.
PA08E230  STRIP     ZXV08501
          MOVELPTR  ZXV08501,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E240 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV08501
          IF        @EQUAL
            MOVE      SP70,EMVIUC09
          ELSE
            PACK      EMVIUC09,ZXV08501,SP3
          ENDIF
.
PA08E240  STRIP     ZXV08601
          MOVELPTR  ZXV08601,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E250 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV08601
          IF        @EQUAL
            MOVE      SP70,ZXV08601
          ELSE
            UNPACK    ZXV08601,CHOUR,CMIN,CSEC
            PACK      EMVIUT07,CHOUR,COLON,CMIN,COLON,CSEC
          ENDIF
.
PA08E250  STRIP     ZXV08701
          MOVELPTR  ZXV08701,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E260 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV08701
          IF        @EQUAL
            MOVE      SP70,EMVIEXRS
          ELSE
            PACK      EMVIEXRS,ZXV08701,SP3
          ENDIF
.
.         ZXV.103   EMR Arrival Date/Time
.
PA08E260  STRIP     ZXV10301
          MOVELPTR  ZXV10301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E270 IF EQUAL            * no - no change
.
          PACK      UPDVALUE,EMVIDATE,EMVITIME,SP70        * old value
.
          MATCH     BLANKSTR,ZXV10301
          IF        @EQUAL
            MOVE      SP70,EMVIDATE
            MOVE      SP70,EMVITIME
          ELSE
            UNPACK    ZXV10301,EMVIDATE,CHOUR,CMIN,CSEC
            PACK      EMVITIME,CHOUR,COLON,CMIN,COLON,CSEC
          ENDIF
.
          PACK      NEWVALUE,EMVIDATE,EMVITIME,SP70        * new value
          MATCH     UPDVALUE,NEWVALUE
          IF        !@EQUAL
            MOVE      "HL7RECVR  ",USERID
            MOVE      "01",UPDFIELD
            CALL      WRECHA00              * Emergency Field Change Audit
.
            MOVE      "UPDAT",UPDTEMHI
            CALL      WTEMHS00              * Write EMR history record
          ENDIF
.
.         Process any ZTR fields received
.
PA08E270  CALL      STVIS000                * store ZTR vars in emrvis file vars
.
PA08E300  CALL      UPEMVIS1                     * update emr visit
.
          PACK      KEY8,DEMVIADM,SP70
          CALL      RDEMCLI1
          BRANCH    OVRCD,PA08E370
.
PA08E310  STRIP     ZXV07701
          MOVELPTR  ZXV07701,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E320 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV07701
          IF        @EQUAL
            MOVE      SP70,EMCIRCCD
          ELSE
            PACK      EMCIRCCD,ZXV07701,SP10
          ENDIF
.
PA08E320  STRIP     ZXV07801
          MOVELPTR  ZXV07801,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E330 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV07801
          IF        @EQUAL
            MOVE      SP70,EMCIRCTM
          ELSE
            UNPACK    ZXV07801,CHOUR,CMIN,CSEC
            PACK      EMCIRCTM,CHOUR,COLON,CMIN
          ENDIF
.
PA08E330  STRIP     ZXV07901
          MOVELPTR  ZXV07901,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E340 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV07901
          IF        @EQUAL
            MOVE      SP70,EMCIOR08
          ENDIF
          MATCH     "Y",ZXV07901
          IF        @EQUAL
            MOVE      "1",EMCIOR08
          ENDIF
          MATCH     "N",ZXV07901
          IF        @EQUAL
            MOVE      "0",EMCIOR08
          ENDIF
.
PA08E340  STRIP     ZXV08001
          MOVELPTR  ZXV08001,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E350 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV08001
          IF        @EQUAL
            MOVE      SP70,EMCISCFF
          ELSE
            PACK      EMCISCFF,ZXV08001,SP70
          ENDIF
.
PA08E350  STRIP     ZXV08101
          MOVELPTR  ZXV08101,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E360 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV08101
          IF        @EQUAL
            MOVE      SP70,EMCISCVC
          ELSE
            PACK      EMCISCVC,ZXV08101,SP3
          ENDIF
.
PA08E360  MOVE      CURRDATE,EMCIRUDT
          MOVE      CTIMEIS,EMCITRUP
          MOVE      "HL7RECVR  ",EMCIUUPD
          CALL      UPEMCLI1                     * update other clinical info
.
.         ZXV.19 - Inform GP (0887136)
.
PA08E370  STRIP     ZXV01901
          MOVELPTR  ZXV01901,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08E380 IF EQUAL            * no - no change
.
          MOVE      PV101901,KEY8
          RJUSTIFY  KEY8
          CALL      RDPMVX11
          BRANCH    OVRCD,PA08E380
.
          MATCH     BLANKSTR,ZXV01901
          IF        @EQUAL
            MOVE      SP70,PMVXINGP
          ELSE
            REP       "N0Y1",ZXV01901
            MOVE      ZXV01901,PMVXINGP
          ENDIF
          CALL      UPPMVX11                     * update visit extension record
.
PA08E380  PACK      KEY5,CATwl,ZERO,ZERO,FIVE,SP70
          CALL      RDCODE1
          BRANCH    OVRCD,PA08E900
.
          CALL      PDG10000                     * add to EMR Visit Coding Table
.
PA08E900  CALL      PIN1E000                     * update IN1 visit fields
.
.         Process ZNT segment if received
.
          CALL      PZNT0000                * Presenting Complaint Notes (ZNT.4)
.
PA08E999  RETURN
+
.-------------------------------------------------------------------------
. Update Emergency Field Change Audit if required (from EMRWEB08 WRCHA000)
.-------------------------------------------------------------------------
WRECHA00  MOVE      PV101901,EMCHVISN
          RJUSTIFY  EMCHVISN                     * visit number
          PACK      EMCHUPTY,UPDFIELD,SP70       * Update Type
          MATCH     BLANKSTR,ZTR04901
          IF        @EQUAL
            MOVE      SP3,EMCHREAS
          ELSE
            PACK      EMCHREAS,ZTR04901,SP70     * reason for change (Cat FW)
          ENDIF
.
          MOVE      USERID,EMCHUSID              * user ID
.
          PACK      EMCHOVAL,UPDVALUE,SP70       * original value
          PACK      EMCHCVAL,NEWVALUE,SP70       * new value
.
          CALL      IBACLOCK
          PACK      EMCHDATE,CCC,CYY,CMM,CDD
          REP       " 0",EMCHDATE                * date of change
          CLOCK     TIME,EMCHTIME                * time of change
.
          PACK      KEY24,EMCHVISN,EMCHDATE,EMCHTIME,SP70
          CALL      RDEMCHA1
          IF        OVRCD=1
            CALL      WREMCHA1
          ENDIF
.
WRECHA99  RETURN
+
.*****************************************************************************
.*                              PDG10000                                     *
.*                 Process DG1 diagnosis segments                            *
.* Requires:  DG1COUNT - number of DG1 segments received                     *
.*            DG1FOUND - found DG1 segment flag                              *
.*                             0 = one or more DG1 segment found             *
.*                             1 = no DG1 segment found                      *
.*****************************************************************************
.
.         Check if a DG1 segment was received
.
PDG10000  BRANCH    DG1FOUND,PDG19999            * no DG1 segments received
.
          MOVE      DG1COUNT,SVDG1CNT            * save DG1 segment count
.
          COMPARE   ZERO,SVDG1CNT                * any DG1's to process ?
          GOTO      PDG19999 IF EQUAL            * no - finished
.
.         There is one or more valid DG1 segments
.
          MOVE      ZERO,DG1COUNT                * initialise DG1 segment count
          CALL      CLRVCD00                     * clear emrvcdaf fields
          CALL      CDG10000                     * clear DG1 fields
.
          PACK      KEY15,DG1SEGMT,SP20
          CALL      RSTEMP1                      * position on DG1 segment
PDG10080  CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,PDG10085               * eof - finished
.
          MATCH     DG1SEGMT,RTMPSEGI            * same segment still ?
          GOTO      PDG10085 IF NOT EQUAL        * no - finished
.
          COMPARE   DG1COUNT,RTMPSEGC            * same segment count still ?
          GOTO      PDG10100 IF EQUAL            * yes
.
          ADD       ONE,DG1COUNT                 * increment DG1 segment count
.
          COMPARE   ONE,DG1COUNT                 * first DG1 segment ?
          GOTO      PDG10100 IF EQUAL            * yes
.
.         We have a new segment and therefore have completed loading the
.         fields for the previous DG1 segment, so write or update emrvcdaf
.
PDG10085  PACK      KEY14,EMVIADMN,ZERO,ZERO,FIVE,SP70
          CALL      RSEMVCD1
PDG10087  CALL      RKEMVCD1
          BRANCH    OVRCD,PDG10090               * doesn't exist, so write new
.
          MATCH     DEMVIADM,EMVCVIST
          GOTO      PDG10090 IF NOT EQUAL        * doesn't exist, so write new
.
          MATCH     "005",EMVCTYPE
          GOTO      PDG10090 IF NOT EQUAL        * doesn't exist, so write new
.
          MATCH     DG100301,EMVCMNCD
          GOTO      PDG10098 IF EQUAL            * already exists, don't write
.
          GOTO      PDG10087                     * keep checking for diag code
.
PDG10090  MOVE      ONE,F3
          PACK      KEY14,EMVIADMN,ZERO,ZERO,FIVE,Z70
          CALL      RSEMVCD1
          CALL      RPEMVCD1
          BRANCH    OVRCD,PDG10095
.
          MATCH     DEMVIADM,EMVCVIST
          GOTO      PDG10095 IF NOT EQUAL
.
          MOVE      EMVCUNIQ,F3
          ADD       ONE,F3
.
PDG10095  CALL      CLRVCD00                  * Clear all the file variables
.
          MOVE      EMVIADMN,EMVCVIST
          MOVE      "005",EMVCTYPE
          MOVE      F3,EMVCUNIQ
          REP       " 0",EMVCUNIQ
          MOVE      FIVE,EMVCCSYS
          MOVE      "1",EMVCEFLG
          MOVE      "0",EMVCDELE
.
          IF        F3 = 1
            MOVE      "000",EMVCSEQU            * ??? (0=primary)
          ELSE
            MOVE      "001",EMVCSEQU            * ??? (1=additional)
          ENDIF
.
          MOVE      DG100301,EMVCMNCD
          MOVE      DG100401,EMVCFTXT
.davvy    MOVE      DG100501,EMVCCDAT
.davvy    MOVE      DG100501,EMVCCTIM
.
          MOVE      "HL7RECVR  ",EMVCWUSR
          MOVE      "HL7RECVR  ",EMVCCUID     * user id created
.
          MOVE      CURRDATE,EMVCCDAT
          MOVE      CTIMEIS,EMVCCTIM
          MOVE      CURRDATE,EMVCLUDT
          MOVE      CTIMEIS,EMVCLUTM
.
          PACK      KEY14,EMVCVIST,EMVCTYPE,EMVCUNIQ,SP70
          CALL      RAEMVCD1
          IF        OVRCD = 1
            CALL      WREMVCD1                   * write emrvcdaf
          ELSE
            CALL      UPEMVCD1                   * update emrvcdaf
          ENDIF
.
          MOVELPTR  DG100302,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PDG10098 IF EQUAL            * no - no change
.
          PACK      KEY9,EMVCMNCD,SP70
          CALL      RDEMICD1                     * code on emricdaf ?
          IF        OVRCD = 0
            MOVE      DG100302,EMICVEMD          * update VEMD Code
            CALL      UPEMICD1
          ENDIF
.
PDG10098  SUB       ONE,SVDG1CNT
          COMPARE   ZERO,SVDG1CNT                * last DG1 record ?
          GOTO      PDG19999 IF EQUAL            * yes
.
          CALL      CLRVCD00                     * no - clear emrvcdaf fields
          CALL      CDG10000                     * clear DG1 fields
.
.         Load the relevant field/component
.
PDG10100  BRANCH    RTMPFLDN,PDG10110:           * Set ID (SI)
                             PDG10200:           * Diagnosis Coding Method (ID)
                             PDG10300:           * Diagnosis Code (CE)
                             PDG10400:           * Diagnosis Description (ST)
                             PDG10500:           * Diagnosis Date/Time (TS)
                             PDG10600            * Diagnosis Type (IS)
.
.                   Invalid field number, so ignore
.
          GOTO      PDG10080
.
.         DG1.1  Set ID (SI)
.
PDG10110  GOTO      PDG10080
.
.         DG1.2  Diagnosis Coding Method (ID)
.
PDG10200  GOTO      PDG10080
.
.         DG1.3  Diagnosis Code (CE)
.
PDG10300  BRANCH    RTMPCMPN,PDG10301:           * identifier (ST)
                             PDG10302:           * text (ST)
                             PDG10303:           * name of coding system (ST)
                             PDG10304:           * alternate identifier (ST)
                             PDG10305:           * alternate text (ST)
                             PDG10306            * name of alt. cod. system (ST)
          GOTO      PDG10080
.
PDG10301  STRIP     RTMPVRBL
          MOVELPTR  RTMPVRBL,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PDG10080 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,RTMPVRBL            * field null ?
          IF        @EQUAL
            PACK      DG100301,SP70              * yes
          ELSE
            PACK      DG100301,RTMPVRBL,SP70     * load Diagnosis Code
          ENDIF
          GOTO      PDG10080
.
PDG10302  STRIP     RTMPVRBL
          MOVELPTR  RTMPVRBL,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PDG10080 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,RTMPVRBL            * field null ?
          IF        @EQUAL
            PACK      DG100302,SP70              * yes
          ELSE
            PACK      DG100302,RTMPVRBL,SP70     * load Diagnosis Code
          ENDIF
          GOTO      PDG10080
.
PDG10303  GOTO      PDG10080
.
PDG10304  GOTO      PDG10080
.
PDG10305  GOTO      PDG10080
.
PDG10306  GOTO      PDG10080
.
.         DG1.4  Diagnosis Description (ST)
.
PDG10400  BRANCH    RTMPCMPN,PDG10401            * text (ST)
          GOTO      PDG10080
.
PDG10401  STRIP     RTMPVRBL
          MOVELPTR  RTMPVRBL,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PDG10080 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,RTMPVRBL            * field null ?
          IF        @EQUAL
            PACK      DG100401,SP70              * yes
          ELSE
            PACK      DG100401,RTMPVRBL,SP70     * load Diagnosis Description
          ENDIF
          GOTO      PDG10080
.
.         DG1.5  Diagnosis Date/Time (TS)
.
PDG10500  GOTO      PDG10080
.
.         DG1.6  Diagnosis Type (IS)
.
PDG10600  GOTO      PDG10080
.
.
PDG19999  RETURN
+
.------------------------------------------------------------
. Clear emrvcdaf file data
.-----------------------------------------------------------
CLRVCD00  MOVE      SP70,EMVCVIST
          MOVE      SP70,EMVCTYPE
          MOVE      SP70,EMVCUNIQ
          MOVE      SP70,EMVCCSYS
          MOVE      SP70,EMVCMNCD
          MOVE      SP70,EMVCSEQU
          MOVE      SP70,EMVCDATE
          MOVE      SP70,EMVCTIME
          MOVE      SP70,EMVCUDC1
          MOVE      SP70,EMVCUDC2
          MOVE      SP70,EMVCUDC3
          MOVE      SP70,EMVCUDC4
          MOVE      SP70,EMVCUDR1
          MOVE      SP70,EMVCUDR2
          MOVE      SP70,EMVCUYN1
          MOVE      SP70,EMVCUYN2
          MOVE      SP70,EMVCUYN3
          MOVE      SP70,EMVCUYN4
          MOVE      ZERO,EMVCUDA1
          MOVE      ZERO,EMVCUDA2
          MOVE      ZERO,EMVCUDA3
          MOVE      ZERO,EMVCUDA4
          MOVE      SP70,EMVCUDD1
          MOVE      SP70,EMVCUDD2
          MOVE      SP70,EMVCUDD3
          MOVE      SP70,EMVCUDD4
          MOVE      SP70,EMVCUDT1
          MOVE      SP70,EMVCUDT2
          MOVE      SP70,EMVCUDT3
          MOVE      SP70,EMVCUDT4
          MOVE      SP70,EMVCEFLG
          MOVE      SP70,EMVCLUDT
          MOVE      SP70,EMVCLUTM
          MOVE      SP70,EMVCWUSR
          MOVE      SP70,EMVCDELE
          MOVE      SP70,EMVCCDAT
          MOVE      SP70,EMVCCTIM
          MOVE      SP70,EMVCCUID
          MOVE      SP70,EMVCSUBN
          MOVE      SP70,EMVCEDAD
          PACK      EMVCFTXT,SP70,SP70
          MOVE      SP70,EMVCSPAR
.
CLRVCD99  RETURN
+
.------------------------------------------------------------------------
.   Clear All Fields for Outpatients Appointment Request file
.------------------------------------------------------------------------
CLOUTART  MOVE      SP70,OTARURNO
          MOVE      SP70,OTARREFN
          MOVE      SP70,OTARRQDT
          MOVE      SP70,OTARRQTM
          MOVE      SP70,OTARRDEP
          MOVE      SP70,OTARADEP
          MOVE      SP70,OTARPRDT
          MOVE      SP70,OTARPRHS
          MOVE      SP70,OTARPRSI
          MOVE      SP70,OTARCLTY
          MOVE      SP70,OTARCLID
          MOVE      SP70,OTARVIST
          MOVE      SP70,OTARTRRQ
          MOVE      SP70,OTARPCOM
          MOVE      SP70,OTARFINC
          MOVE      SP70,OTARPRIO
          MOVE      SP70,OTARSORF
          MOVE      SP70,OTARSARR
          MOVE      SP70,OTAROOBN
          MOVE      SP70,OTARSTAT
          MOVE      SP70,OTARRREQ
          MOVE      SP70,OTARRCAN
          MOVE      SP70,OTARCADT
          MOVE      SP70,OTARCATM
          MOVE      SP70,OTARCAUS
          MOVE      SP70,OTARBKNO
          MOVE      SP70,OTARBKSI
          MOVE      SP70,OTARBKCL
          MOVE      SP70,OTARBKDT
          MOVE      SP70,OTARCLST
          MOVE      SP70,OTARCLSN
          MOVE      SP70,OTARCLTM
          MOVE      SP70,OTARBKID
          MOVE      SP70,OTARCDAT
          MOVE      SP70,OTARCTIM
          MOVE      SP70,OTARCUID
          MOVE      SP70,OTARCPDT
          MOVE      SP70,OTARCPTM
          MOVE      SP70,OTARCPID
          MOVE      SP70,OTARFSRC
          MOVE      SP70,OTARINTR
          MOVE      SP70,OTARLNG1
          MOVE      SP70,OTARCMID
          MOVE      SP70,OTARSPAR
.
CLOTART9  RETURN
+
.*****************************************************************************
.*                              PA08O000           Called by: PROC0000       *
.*          Process the A08 OUT message - update PAS database (Telehealth)   *
.*****************************************************************************
PA08O000  CALL      IBACLOCK                     * get current date/time
          PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
.
          MOVE      PV101901,D8                  * Visit Number
.0861253  MOVE      PV100501,D8                  * Booking Number
          RJUSTIFY  D8
.
          PACK      KEY8,D8,SP70
          CALL      RDOTTHI1
          IF        OVRCD=1
            CALL      CLOUTTHI                   * Clear vars from outthiaf
          ENDIF
.
.         ZXV.90 - Telehealth Status (Cat OM)
.
PA08O100  STRIP     ZXV09001
          MOVELPTR  ZXV09001,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08O200 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV09001
          IF        @EQUAL
            MOVE      SP70,OTTHSTAT              * blank out database field
          ELSE
            MOVE      ZXV09001,OTTHSTAT          * update database field
          ENDIF
.
.         ZXV.91 - Telehealth Receiving Site Name
.
PA08O200  STRIP     ZXV09101
          MOVELPTR  ZXV09101,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08O300 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV09101
          IF        @EQUAL
            MOVE      SP70,OTTHRSIT              * blank out database field
          ELSE
            MOVE      ZXV09101,OTTHRSIT          * update database field
          ENDIF
.
.         ZXV.92 - Telehealth Receiving Code
.
PA08O300  STRIP     ZXV09201
          MOVELPTR  ZXV09201,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08O400 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV09201
          IF        @EQUAL
            MOVE      SP70,OTTHRCOD              * blank out database field
          ELSE
            MOVE      ZXV09201,OTTHRCOD          * update database field
          ENDIF
.
.         ZXV.93 - Telehealth Receiving Address
.
PA08O400  STRIP     ZXV09301
          MOVELPTR  ZXV09301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08O500 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV09301
          IF        @EQUAL
            MOVE      SP70,OTTHRADD              * blank out database field
          ELSE
            MOVE      ZXV09301,OTTHRADD          * update database field
          ENDIF
.
.         ZXV.94 - Telehealth Waiting Room URL
.
PA08O500  STRIP     ZXV09401
          MOVELPTR  ZXV09401,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08O600 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV09401
          IF        @EQUAL
            MOVE      SP70,OTTHWURL              * blank out database field
          ELSE
            MOVE      ZXV09401,OTTHWURL          * update database field
          ENDIF
.
.         ZXV.95 - Telehealth Receiving E164
.
PA08O600  STRIP     ZXV09501
          MOVELPTR  ZXV09501,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA08O700 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV09501
          IF        @EQUAL
            MOVE      SP70,OTTHE164              * blank out database field
          ELSE
            MOVE      ZXV09501,OTTHE164          * update database field
          ENDIF
.
.         Write/Update Telehealth Information
.
PA08O700  MOVE      D8,OTTHOUTN                  * Outpatient Number
          PACK      KEY8,OTTHOUTN,SP70
          CALL      RAOTTHI1
          IF        OVRCD=1
            CALL      WROTTHI1                   * Write Telehealth record
          ELSE
            CALL      UPOTTHI1                   * Update Telehealth record
          ENDIF
.
PA08O800  CALL      PTHI0000                     * Telehealth notes (ZXV.96)
.
          MATCH     SP1,ZXV09701
          GOTO      PA08O900 IF EQUAL            * blank field, so finish
.
          MATCH     BLANKSTR,ZXV09701
          IF        @EQUAL
            MOVE      SP1,ZXV09701               * null field, so blank out
          ENDIF
.
          PACK      KEY8,OTTHOUTN,SP70
          CALL      RDPMVX11                     * visit ext. record on file ?
          BRANCH    OVRCD,PA08O900               * no
.
          MOVE      ZXV09701,PMVXCONF            * Appt Confirmed (0=No 1=Yes)
          CALL      UPPMVX11
.
PA08O900  CALL      PIN1O000                     * update IN1 visit fields
.
PA08O999  RETURN
+
.*****************************************************************************
.*                              PA080000           Called by: PROC0000       *
.*              Process the A08 message - update PAS database                *
.*****************************************************************************
.
.         PV2.9 - Expected Discharge Date/Time
.
PA080000  STRIP     PV200901
          MOVELPTR  PV200901,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA080100 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,PV200901
          IF        @EQUAL
            UNPACK    SP70,PMWOEDAT,PMWOEDTM
            GOTO      PA080100
          ENDIF
.
          IF        FORM3 = 8
            MOVE      PV200901,PMWOEDAT
            MOVE      SP70,PMWOEDTM
          ELSE
            UNPACK    PV200901,CCENT,CYEAR,CMON,CDAY,DIM2H,DIM2N,DIM2S
            PACK      PMWOEDAT,CCENT,CYEAR,CMON,CDAY
            PACK      PMWOEDTM,DIM2H,COLON,DIM2N,COLON,DIM2S
          ENDIF
.
.         ZXV.1 - Visitors Allowed
.
PA080100  STRIP     ZXV00101
          MOVELPTR  ZXV00101,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA080200 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV00101
          IF        @EQUAL
            MOVE      SP70,PMVXVALW
          ELSE
            REP       "N0Y1",ZXV00101
            MOVE      ZXV00101,PMVXVALW
          ENDIF
.
.         ZXV.19 - Inform GP
.
PA080200  STRIP     ZXV01901
          MOVELPTR  ZXV01901,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA080300 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV01901
          IF        @EQUAL
            MOVE      SP70,PMVXINGP
          ELSE
            REP       "N0Y1",ZXV01901
            MOVE      ZXV01901,PMVXINGP
          ENDIF
.
.         ZXV.58 - Phone Calls Allowed
.
PA080300  STRIP     ZXV05801
          MOVELPTR  ZXV05801,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PA080900 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV05801
          IF        @EQUAL
            MOVE      SP70,PMVXPALW
          ELSE
            REP       "N0Y1",ZXV05801
            MOVE      ZXV05801,PMVXPALW
          ENDIF
.
PA080900  CALL    UPPMVX11                       * update visit extension record
.
          IF      PMWORFLG = 1
            MOVE    PMVXVISN,PMWOADMN
            CALL    WRPMWOR1
          ELSE
            CALL    UPPMWOR1                     * update working diag. record
          ENDIF
.
          CALL      PIN1I000                     * update IN1 visit fields
.
PA089999  RETURN
+
.*****************************************************************************
.*                              PGT10000           Called by: PROC0000       *
.*              Process the GT1 segment - update PAS database                *
.*****************************************************************************
PGT10000  MOVE      PV101901,KEY8
          RJUSTIFY  KEY8
          CALL      RDPTRES1
          IF        OVRCD = 1
            CALL      CLPATRE1
          ENDIF
.
          MOVE      KEY8,PKADMN                       * visit number
.
.         GT1.3 - Guarantor Name (patre1af.pkname)
.
          STRIP     GT100301
          MOVELPTR  GT100301,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PGT10100 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,GT100301
          IF        @EQUAL
            PACK      PKNAME,SP70,SP70
          ELSE
            PACK      PKNAME,GT100301,SP70,SP70
          ENDIF
.
.         GT1.5 - Guarantor Address(patre1af.pkadd1/pkadd2/pksubr/pkadd4/pkpost)
.
PGT10100  STRIP     GT100501
          MOVELPTR  GT100501,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PGT10200 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,GT100501
          IF        @EQUAL
            PACK      PKADD1,SP70,SP70
          ELSE
            PACK      PKADD1,GT100501,SP70,SP70
          ENDIF
.
PGT10200  STRIP     GT100502
          MOVELPTR  GT100502,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PGT10300 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,GT100502
          IF        @EQUAL
            PACK      PKADD2,SP70,SP70
          ELSE
            PACK      PKADD2,GT100502,SP70,SP70
          ENDIF
.
PGT10300  STRIP     GT100503
          MOVELPTR  GT100503,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PGT10400 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,GT100503
          IF        @EQUAL
            PACK      PKSUBR,SP70,SP70
          ELSE
            PACK      PKSUBR,GT100503,SP70,SP70
          ENDIF
.
PGT10400  STRIP     GT100504
          MOVELPTR  GT100504,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PGT10500 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,GT100504
          IF        @EQUAL
            PACK      PKADD4,SP70,SP70
          ELSE
            PACK      PKADD4,GT100504,SP70,SP70
          ENDIF
.
PGT10500  STRIP     GT100505
          MOVELPTR  GT100505,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PGT10600 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,GT100505
          IF        @EQUAL
            PACK      PKPOST,SP70,SP70
          ELSE
            PACK      PKPOST,GT100505,SP70,SP70
          ENDIF
.
.         GT1.6 - Guarantor Home/Mobile Phone (patre1af.pktelep/ptremobl)
.
.         Loop through the phone number array
.
PGT10600  MOVE      ZERO,COUNTER                 * initialise counter
PGT10610  ADD       ONE,COUNTER                  * increment counter
          COMPARE   COUNTER,TWO                  * processed 2nd element ?
          GOTO      PGT10700 IF LESS             * yes
.
.         Check the type of phone number
.
          MATCH     "CP",GT100603[COUNTER]
          GOTO      PGT10650 IF NOT EQUAL
.
.         We have a cell phone number
.
          MOVELPTR  GT100607[COUNTER],FORM3
          COMPARE   ZERO,FORM3
          GOTO      PGT10610 IF EQUAL
.
          MATCH     BLANKSTR,GT100607[COUNTER]
          IF        @EQUAL
            MOVE      SP70,PTREMOBL
          ELSE
            PACK      PTREMOBL,GT100607[COUNTER],SP70
          ENDIF
          GOTO      PGT10610
.
.         Check if this is a "PH" field
.
PGT10650  MATCH     "PH",GT100603[COUNTER]       * phone number field ?
          GOTO      PGT10610 IF NOT EQUAL        * no
.
.         We have a "PH" field, so check we have a private phone number
.
          MATCH     "PRN",GT100602[COUNTER]      * private phone ?
          GOTO      PGT10610 IF NOT EQUAL        * yes
.
.         Load Private Telephone
.
          MOVELPTR  GT100607[COUNTER],FORM3
          COMPARE   ZERO,FORM3
          GOTO      PGT10610 IF EQUAL
.
          MATCH     BLANKSTR,GT100607[COUNTER]
          IF        @EQUAL
            MOVE      SP70,PKTELEP
          ELSE
            PACK      PKTELEP,GT100607[COUNTER],SP70
          ENDIF
          GOTO      PGT10610
.
.         GT1.7 - Guarantor Work Phone (patre1af.pkteleb)
.
PGT10700  STRIP     GT100707
          MOVELPTR  GT100707,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PGT10800 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,GT100707
          IF        @EQUAL
            PACK      PKTELEB,SP70
          ELSE
            PACK      PKTELEB,GT100707,SP70
          ENDIF
.
.         GT1.11 - Guarantor Relationship (patre1af.pkrelp)
.
PGT10800  STRIP     GT101101
          MOVELPTR  GT101101,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PGT10900 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,GT101101
          IF        @EQUAL
            PACK      PKRELP,SP70
          ELSE
            PACK      PKRELP,GT101101,SP70
          ENDIF
.
PGT10900  PACK      KEY8,PKADMN,SP70
          CALL      RAPTRES1
          IF        OVRCD = 1
            CALL      WRPTRES1                   * write new PRFA record
          ELSE
            CALL      UPPTRES1                   * update existing PRFA record
          ENDIF
.
PGT19999  RETURN
+
.*****************************************************************************
.*                              PIN1P000           Called by: PROC0000       *
.*              Process the IN1 segment - update PAS database (PMI fields)   *
.*****************************************************************************
PIN1P000  MATCH     "1",PTCNUP31
          GOTO      PIN1P999 IF NOT EQUAL        * update IN1 for A08s (0887136)
.
          MOVE      PURNO,KEY8
          CALL      RDMAST1
          BRANCH    OVRCD,PIN1P999
.
.         IN1.2 - Insurance Plan ID (patma1af.pfndtb)
.
PIN1P200  STRIP     IN100201
          MOVELPTR  IN100201,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PIN1P300 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,IN100201
          IF        @EQUAL
            PACK      PFNDTB,SP70
          ELSE
            PACK      PFNDTB,IN100201,SP70
          ENDIF
.
.         IN1.3 - Insurance Company ID (patma1af.pfundh)
.
PIN1P300  STRIP     IN100301
          MOVELPTR  IN100301,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PIN1P360 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,IN100301
          IF        @EQUAL
            PACK      PFUNDH,SP70
          ELSE
            PACK      PFUNDH,IN100301,SP70
          ENDIF
.
.         Insurance Policy Number (patma1af.pfndmm)
.
PIN1P360  STRIP     IN103601
          MOVELPTR  IN103601,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PIN1P900 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,IN103601
          IF        @EQUAL
            PACK      PFNDMM,SP70
          ELSE
            PACK      PFNDMM,IN103601,SP70
          ENDIF
.
PIN1P900  CALL      UPMAST1
.
PIN1P999  RETURN
+
.*****************************************************************************
.*                              PIN1I000           Called by: PROC0000       *
.*              Process the IN1 segment - update PAS database (INP fields)   *
.*****************************************************************************
PIN1I000  MATCH     "1",PTCNUP31
          GOTO      PIN1I999 IF NOT EQUAL        * update IN1 for A08s (0887136)
.         
          MOVE      PV101901,KEY8
          RJUSTIFY  KEY8
          CALL      RDMISS1
          BRANCH    OVRCD,PIN1I999
.
.         IN1.2 - Insurance Plan ID (patmi1af.afndtb)
.
PIN1I200  STRIP     IN100201
          MOVELPTR  IN100201,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PIN1I300 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,IN100201
          IF        @EQUAL
            PACK      AFNDTB,SP70
          ELSE
            PACK      AFNDTB,IN100201,SP70
          ENDIF
.
.         IN1.3 - Insurance Company ID (patmi1af.afundh)
.
PIN1I300  STRIP     IN100301
          MOVELPTR  IN100301,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PIN1I360 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,IN100301
          IF        @EQUAL
            PACK      AFUNDH,SP70
          ELSE
            PACK      AFUNDH,IN100301,SP70
          ENDIF
.
.         Insurance Policy Number (pmsvx1af.pmvxfndm)
.
PIN1I360  STRIP     IN103601
          MOVELPTR  IN103601,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PIN1I900 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,IN103601
          IF        @EQUAL
            PACK      PMVXFNDM,SP70
          ELSE
            PACK      PMVXFNDM,IN103601,SP70
          ENDIF
.
PIN1I900  CALL      UPMISS1
          CALL      UPPMVX11
.
PIN1I999  RETURN
+
.*****************************************************************************
.*                              PIN1O000           Called by: PROC0000       *
.*              Process the IN1 segment - update PAS database (OUT fields)   *
.*****************************************************************************
PIN1O000  MATCH     "1",PTCNUP31
          GOTO      PIN1O999 IF NOT EQUAL        * update IN1 for A08s (0887136)
.
          MOVE      PV101901,KEY8
          RJUSTIFY  KEY8
          CALL      RDBOKB1
          BRANCH    OVRCD,PIN1O999
.
          CALL      RDPMVX11
          IF        OVRCD = 1
            MOVE      ONE,F1
          ELSE
            MOVE      ZERO,F1
          ENDIF
.
.         IN1.2 - Insurance Plan ID (outbb1af.otbbtble)
.
PIN1O200  STRIP     IN100201
          MOVELPTR  IN100201,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PIN1O300 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,IN100201
          IF        @EQUAL
            PACK      OTBBTBLE,SP70
          ELSE
            PACK      OTBBTBLE,IN100201,SP70
          ENDIF
.
.         IN1.3 - Insurance Company ID (outbb1af.otbbfund)
.
PIN1O300  STRIP     IN100301
          MOVELPTR  IN100301,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PIN1O360 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,IN100301
          IF        @EQUAL
            PACK      OTBBFUND,SP70
          ELSE
            PACK      OTBBFUND,IN100301,SP70
          ENDIF
.
.         Insurance Policy Number (pmsvx1af.pmvxfndm)
.
PIN1O360  STRIP     IN103601
          MOVELPTR  IN103601,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PIN1O900 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,IN103601
          IF        @EQUAL
            PACK      PMVXFNDM,SP70
          ELSE
            PACK      PMVXFNDM,IN103601,SP70
          ENDIF
.
PIN1O900  CALL      UPBOKB1
          BRANCH    F1,PIN1O999                  * do not update pmsvx1af
          CALL      UPPMVX11
.
PIN1O999  RETURN
+
.*****************************************************************************
.*                              PIN1E000           Called by: PROC0000       *
.*              Process the IN1 segment - update PAS database (EMR fields)   *
.*****************************************************************************
PIN1E000  MATCH     "1",PTCNUP31
          GOTO      PIN1E999 IF NOT EQUAL        * update IN1 for A08s (0887136)
.
          MOVE      PV101901,KEY8
          RJUSTIFY  KEY8
          CALL      RDEMVIS1
          BRANCH    OVRCD,PIN1E999
.
          CALL      RDPMVX11
          IF        OVRCD = 1
            MOVE      ONE,F1
          ELSE
            MOVE      ZERO,F1
          ENDIF
.
.         IN1.2 - Insurance Plan ID (emrvisaf.emvitabl)
.
PIN1E200  STRIP     IN100201
          MOVELPTR  IN100201,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PIN1E300 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,IN100201
          IF        @EQUAL
            PACK      EMVITABL,SP70
          ELSE
            PACK      EMVITABL,IN100201,SP70
          ENDIF
.
.         IN1.3 - Insurance Company ID (emrvisaf.emvifund)
.
PIN1E300  STRIP     IN100301
          MOVELPTR  IN100301,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PIN1E360 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,IN100301
          IF        @EQUAL
            PACK      EMVIFUND,SP70
          ELSE
            PACK      EMVIFUND,IN100301,SP70
          ENDIF
.
.         Insurance Policy Number (pmsvx1af.pmvxfndm)
.
PIN1E360  STRIP     IN103601
          MOVELPTR  IN103601,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PIN1E900 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,IN103601
          IF        @EQUAL
            PACK      PMVXFNDM,SP70
          ELSE
            PACK      PMVXFNDM,IN103601,SP70
          ENDIF
.
PIN1E900  CALL      UPEMVIS1
          BRANCH    F1,PIN1E999                  * do not update pmsvx1af
          CALL      UPPMVX11
.
PIN1E999  RETURN
+
.*****************************************************************************
.*                              PA210000           Called by: PROC0000       *
.*              Process the A21 message - update PAS database                *
.*****************************************************************************
.
.         Write on on-leave record (patonlvf) - (as per PATWEB96 - UPDOLV00)
.
PA210000  MOVE      AWARD,OWARD                  * load variables
          MOVE      ABED,OBED
          MOVE      AADMNO,OADMNO
          MOVELPTR  ZXV02201,FORM3
          IF        FORM3 = 8
            MOVE      ZXV02201,OERDATE
            MOVE      SP8,OERTIME
          ELSE
            UNPACK    ZXV02201,OERDATE,DIM2H,DIM2M,DIM2S
            PACK      OERTIME,DIM2H,COLON,DIM2M,COLON,DIM2S
          ENDIF
          MOVE      SP3,OROOM
          MOVE      SP70,OSPARE
.
          PACK      KEY14,OWARD,OBED,OADMNO
          CALL      RAONLV1
          IF        OVRCD = 1
            CALL      WRONLV1                    * write record
          ENDIF
.
.         WRLBT000 - write transfer record (pattranf)
.         Requires valid read on last pattranf for admission (in A21ZXV00)
.         with TDATE & TTIME set in VMES5000.
.
          MOVE      "L",TMOVE
          PACK      PTTRCDAT,CCC,CYY,CMM,CDD
          REP       " 0",PTTRCDAT
          CLOCK     TIME,PTTRCTIM
          MOVE      WBSEUID,PTTRUCID
          UNPACK    SP70,TRCDATE,TRCTIME,PTTRUUID
          MOVE      ZXV02001,PTTRLTYP
          PACK      PTTROPER,SAVPSSCD,SP10       * operator Id
.
.         Note: VMES5000 has already checked to make sure that a
.               duplicate pattranf record doesn't exist, so this WRITE
.               should always work
.
          PACK      KEY30,TADMN,TDATE,TTIME,TWARD,TBED
          CALL      RDATRAN2
          IF        OVRCD = 1
            CALL      WRTRAN2
          ENDIF
.
          COMPARE   ONE,MHCNUSE                  * using Mental Health ?
          GOTO      PA210100 IF NOT EQUAL        * no
.
          MOVE      AADMNO,MHVIADMN              * yes
          PACK      KEY8,MHVIADMN
          CALL      RDMHVIS1                     * MH visit on file ?
          BRANCH    OVRCD,PA210100               * no
.
          MOVE      TWO,AUDIFLAG
          CALL      MHAUDVIS                     * write before audit
.
.         Check the type of leave and update the mehvisaf record
.         status accordingly
.
          MOVE      TWO,MHVISTAT                 * default to short term leave
.
          MATCH     ANST,SAVEIND1
          IF        @EQUAL
            MOVE      THREE,MHVISTAT             * set as trial leave
          ENDIF
.
          MATCH     ANSH,SAVEIND1
          IF        @EQUAL
            MOVE      FOUR,MHVISTAT              * set as holiday leave
          ENDIF
.
          MATCH     ANSA,SAVEIND1
          IF        @EQUAL
            MOVE      FIVE,MHVISTAT              * set as A.W.O.L. leave
          ENDIF
.
          CALL      UPMHVIS1                     * update mehvi1af record
.
          MOVE      THREE,AUDIFLAG
          CALL      MHAUDVIS                     * write after audit
.
.         Broadcast ADT^A21 On-leave message
.
PA210100  CALL      CLPATDSC                     * clear variables not used
          CALL      CLPATRE1
          MOVE      SP3,MHLRCODE
.
          CALL      PMIGTNID                * get national id for dgate write
          MOVE      NMPNUMB,PTNINMPI
          MOVE      THREE,HL7TRGID
          MOVE      SP8,HL7INCLD
          PROC      DGCLICPO
.
.         Remove patient from Ward/Bed (patwr1af) or no bed ward (patnobef)
.         (As per RMPWO000/RMPWB000 in PATWEB96).
.         Note: Ward/Bed (patwr1af) OR Ward (patnobef) record already read in
.         VMES0000.
.
          MATCH     SP3,ABED                     * ward only
          GOTO      PA210200 IF EQUAL            * yes
.
.         The patient is currently in a ward/bed, so remove them from patwr1af
.         and save the standby admission number and the ward/bed
.
          MOVE      WSTBY,STBYPAT
          MOVE      AWARD,STBYWRD
          MOVE      ABED,STBYBED
.
          MOVE      ZEROVISN,WADMNO
          MOVE      WSTBY,WADMNO
          MOVE      ZERO,WPLUR
          MOVE      ZEROVISN,WSTBY
          CALL      UPWARD1
          GOTO      PA210300
.
.         The patient is currently in a ward only, so remove them from patnobef
.
PA210200  MOVE      APLUR,NBPLUR
          PACK      KEY13,AWARD,AADMNO,NBPLUR
          CALL      DENOBE1
          MOVE      ZEROVISN,STBYPAT
.
.         Update the admission record status
.
PA210300  MOVE      FOUR,ASTAT                   * set on-leave status
          CALL      UPPTMIS1                     * update patmi1af record
.
.         Check if there was another patient on standby for the ward/bed
.         our patient is vacating (as per UPSTBY00 in PATWEB96)
.
          MATCH     ZEROVISN,STBYPAT             * standby pt for ward/bed ?
          GOTO      PA210500 IF EQUAL            * no
.
.         The following validation of the standby patient's admission
.         and ward/bed shouldn't fail based on the fact that these checks
.         have already been done in VMES0000.
.
          MOVE      STBYPAT,KEY8
          CALL      RDMISS1                      * standby admission on file ?
          BRANCH    OVRCD,PA210400               * no - shouldn't happen
.
          MATCH     SP3,AWARD                    * ward blank ?
          GOTO      PA210400 IF NOT EQUAL        * no - shouldn't happen
.
          COMPARE   ASTAT,TWO                    * admitted ?
          GOTO      PA210400 IF NOT EQUAL        * no - shouldn't happen
.
          PACK      KEY6,STBYWRD,STBYBED
          CALL      RDWARD1                      * ward/bed record on file ?
          BRANCH    OVRCD,PA210400               * no - shouldn't happen
.
          MATCH     AADMNO,WADMNO                * same admission ?
          GOTO      PA210400 IF NOT EQUAL        * no - shouldn't happen
.
          MOVE      STBYWRD,AWARD                * load ward/bed
          MOVE      STBYBED,ABED
          CALL      UPMISS1                      * update admission record
.
.         Read the relevant records for the standby patient before
.         Broadcasting an update admission (A08) message
.
          MOVE      AURNO,KEY8
          CALL      RDMAST1                      * pmi record on file ?
          BRANCH    OVRCD,PA210400               * no - error
.
          CALL      CLPMSPX2
          MOVE      AURNO,KEY8
          CALL      RDPMPX21                     * get pmi extension record
.
          CALL      CLPATRE1
          PACK      KEY8,AADMNO,SP70
          CALL      RDPTRES1                     * get PRA record
.
.         Get the last transfer record
.
          PACK      KEY30,AADMNO,TILDA35
          CALL      RDSTRAN2                     * pos'n after last tran record
          CALL      RDPTRAN2                     * read previous record
          BRANCH    OVRCD,PA210400               * eof - error
.
          MATCH     AADMNO,TADMN                 * same admission still ?
          GOTO      PA210400 IF NOT EQUAL        * no - error
.
          CALL      PMIGTNID              * get national id for dgate write
          MOVE      NMPNUMB,PTNINMPI
          MOVE      FOUR,HL7TRGID
          MOVE      SP8,HL7INCLD
          PROC      DGCLICAC              * broadcast change admission details
.               
.         Update bed board details for the standby patient
.
          MOVE      AURNO,URNUMBER               * load bed board variables
          MOVE      AADMNO,ADMISSNO
          PROC      BBUP0000                     * update bed board
.
.         Re-read our original patient details before proceeding
.
PA210400  MOVE      PVIBILL,KEY8
          CALL      RDPTMIS1                     * admission on file ?
          BRANCH    OVRCD,PA219999               * no - shouldn't happen
.
          MOVE      AURNO,KEY8
          CALL      RDMAST1                      * PMI record on file ?
          BRANCH    OVRCD,PA219999               * no - shouldn't happen
.
          CALL      CLPMSPX2
          MOVE      AURNO,KEY8
          CALL      RDPMPX21                     * read PMI extension record
.
PA210500  PROC      CALCCODE                     * Recalc. hrs of ICU/NCU/CCU
.
.         Update bed board details for our original on-leave patient
.
          MOVE      AURNO,URNUMBER               * load bed board variables
          MOVE      AADMNO,ADMISSNO
          PROC      BBUP0000                     * update bed board
.
          IF        CHOSTYP = 1 & CFEETYP = 0
            MOVE      FIVE,PTIPRSTA              * Update bed fees
            CALL      CINVP000                   * check for to be invoiced
          ENDIF
.
PA219999  RETURN
+
.*****************************************************************************
.*                              PA220000           Called by: PROC0000       *
.*              Process the A22 message - update PAS database                *
.*****************************************************************************
.
PA220000  
.>>>>>    Not sure if any of these variables are needed
.         MOVE      SP8,SAVDATE
.         MOVE      SP8,SAVTIME
.         MOVE      ZERO,TRANFLAG
.         MOVE      SP3,SAVATYP
.         MOVE      SP70,SAVACLM
.
.>>>>>    CHKT0000 - not required here, so ignore
.>>>>>    EPTST000 - HEA not using episode coding so ignore
.>>>>>    UPDBT000
.>>>>>      CHKSTA00 - already catered for in VPV10000
.>>>>>      CHKDAT00 - already catered for in A22ZXV00
.>>>>>      read ward record - coded in VMES6000
.
.>>>>>      check PTCNXCOM and determine if MH room type
.                 - don't believe this is being used, so ignore
.
.>>>>>      CHKHOS00 - multi hospital only, so ignore
.>>>>>      CHKVAL00 - using same ward/bed as previous, so ignore check
.>>>>>      CHKBHS00 - ward is active, so why check ward/bed history (ask Jill)
.>>>>>      WBOL0000 - relevant parts coded in VMES6000
.>>>>>      RLABT000 - coded in VMES6000
.>>>>>      CHKBTR00 - coded in A22ZXV00
.>>>>>      BTRAN000
.>>>>>        DPCWBT00 - sets SOURCE value, ward. ward/bed, standby
.>>>>>        UPDDEP00 - using default values from last transfer record,
.                        so this code not required
.
.
.>>>>>        RMPOL000 - delete on-leave record, update admission status
.                        and unlock admission record
          PACK      KEY14,SAVEWARD,SAVEBED,AADMNO
          CALL      DEONLV1
.
.
.>>>>>        RECALC00 - JT says no need to recalculate given same ward/bed
.
.>>>>>        WRBTR000 - 
.
.         Write a return pattranf record.
.         All the new values required have been loaded via VMES6000 and
.         checked to make sure a record doesn't already exist.
.
          PACK      KEY30,TADMN,TDATE,TTIME,TWARD,TBED
          CALL      WRTRAN2
.
.         Process now according to the following scenarios:
.            - Ward only (WRNOBF00)
.            - Ward/Bed  (UPDWF000)
.            - Standby   (UPDSTB00)
.
          BRANCH    TRANFLAG,PA220100:           * ward/bed
                             PA220200:           * ward only
                             PA220300            * standby
.
.         Process a patient returning to a ward/bed.
.         Note: The ward/bed record has already be read in VMES6000.
.
PA220100  MOVE      TWARD,WWARD
          MOVE      TBED,WBED
          MOVE      AADMNO,WADMNO
          MOVE      ZERO,WPLUR
          CALL      UPWARD1
.
.         Also load up the admission ward/bed ready for update
.>>>>>    Maybe do this just prior to update/unlock
.
          MOVE      TWARD,AWARD
          MOVE      TBED,ABED
          GOTO      PA220500
.
.         Process a patient returning to a ward only.
.         Note: A check has already been done in VMES6000 to make sure a
.         record doesn't already exist.
.
PA220200  MOVE      TWARD,NBWARD
          MOVE      AADMNO,NBADMNO
          MOVE      APLUR,NBPLUR
          MOVE      SP3,NBROOM
          MOVE      SP6,NBSPARE
.
          PACK      KEY13,NBWARD,NBADMNO,NBPLUR
          CALL      WRNOBE1
.
          MOVE      TWARD,AWARD
          MOVE      TBED,ABED
          GOTO      PA220500
.
.         Process a patient returning as a standby patient.
.         Note: The ward/bed record has already be read in VMES6000.
.
PA220300  MOVE      AADMNO,WSTBY
          MOVE      SP3,AWARD
          MOVE      SP3,ABED
          CALL      UPWARD1
.
.         Now update the admission status and the admitted ward/bed as set
.         above
.
PA220500  MOVE      TWO,ASTAT
          CALL      UPLMISS1                     * update and keep locked
.
.>>>>>      WRMHLV00 - MH not in use for NBH, so ignore
.           Code below left just in case, but we would need to resolve how
.           ENDLEAVE is populated.
.           Also, we'd need to check record doesn't already exist in VMES6000.
.
.         COMPARE   ONE,MHCNUSE                  * using MH ?
.         GOTO      PA220600 IF NOT EQUAL        * no
.
.         MOVE      AADMNO,KEY8
.         CALL      RDMHVIS1                     * MH visit on file ?
.         BRANCH    OVRCD,PA220600               * no
.
.         MOVE      ONE,MHVISTAT                 * set status to admitted
.         CALL      UPMHVIS1                     * update mehvi1af
.
.         MOVE      MHVIADMN,MHLRADMN
.         MOVE      TDATE,MHLRDATE
.         MOVE      TTIME,MHLRTIME
.         MOVE      ENDLEAVE,MHLRCODE
.
.         PACK      KEY24,MHLRADMN,MHLRDATE,MHLRTIME
.         CALL      RDMHLER1
.         IF        OVRCD = 1
.           CALL      WRMHLER1
.         ENDIF
.
.         If the `return from leave' broadcast parameter is turned on,
.         then send this broadcast (ADT^A22) message.
.         The `return from leave' is by default going back into the same
.         ward/bed unless another patient is already in the bed and there
.         is also a standby patient.  In this case, the patient will go back
.         into the same ward with no bed assignment.
.         This means, we will need to send a transfer (ADT^A02) message
.         as well as the ADT^A22.
.
PA220600  CALL      PMIGTNID                * get national id for dgate write
          MOVE      NMPNUMB,PTNINMPI
          MOVE      FIVE,HL7TRGID
          MOVE      SP8,HL7INCLD
.
          MATCH     SAVEBED,ABED                 * same bed as before ?
          IF        !@EQUAL
            MOVE      SAVEBED,TBED               * no
          ENDIF
.
          PROC      DGCLICPR
.
.>>>>>    UPDADM00 - nothing changing re relevant fields, so ignore
.
          MATCH     SAVEBED,ABED                 * same bed as before ?
          GOTO      PA220700 IF EQUAL            * yes - no need to send A22
.
          MOVE      ABED,TBED                    * restore new bed
.
.         Get PRA details for message and then send the ADR^A22 message
.
          CALL      CLPATRE1
          MOVE      AADMNO,KEY8
          CALL      RDPTRES1
.
          MOVE      SIX,HL7TRGID
          MOVE      SP8,HL7INCLD
          PROC      DGCLICTR                     * broadcast transfer
.
.>>>>>    UPSTBY00 - not changing existing standby patients, so ignore
.
PA220700  PROC      CALCCODE                     * Recalc. hrs of ICU/NCU/CCU
.
.>>>>>      check PTCNBMAN
.>>>>>      UPPBMN00 - Helen indicated that this functionality was not required
.
.
.>>>>>      check MRCNAMTR
.>>>>>      MVMED000 - Helen indicated that this functionality was not required
.
.         Update bed board details for our original on-leave patient
.>>>>>      BBUP0000
.
          MOVE      AURNO,URNUMBER               * load bed board variables
          MOVE      AADMNO,ADMISSNO
          PROC      BBUP0000                     * update bed board
.
.>>>>>      CINVP000
          IF        CHOSTYP = 1 & CFEETYP = 0
            MOVE      FIVE,PTIPRSTA              * Update bed fees
            CALL      CINVP000                   * check for to be invoiced
          ENDIF
.
.>>>>>    HREQ0000 - not part of interface, so ignore
.>>>>>    UPBTY000 - no change in bed type, so ignore
.>>>>>    SUPT000O - not relevant to this function, so ignore
.
PA229999  RETURN
+
.*****************************************************************************
.*                              PM020000           Called by: PROC0000       *
.*              Process the M02 message - write/update PAS database          *
.*****************************************************************************
.
PM020000  CALL      IBACLOCK                     * get current date/time
          PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
.
.         Process the HCP first.
.         Check if the code already exists on file or if it's new.
.
          PACK      KEY10,STF00201,SP10
          CALL      RDPMHCP1
          MOVE      OVRCD,STAFFFLG               * set staff rec found flag
.
          IF        STAFFFLG = 1
            CALL      CLPMSHCP                   * clear file variables
            PACK      PMHCHCPC,STF00201,SP10     * load hcp code
          ENDIF
.
          CALL      SISH0000                     * Save EDWARD ISP Audit vars
.
.         Load all the file variables using the sent data
.
          MOVE      "G ",PMHCHCPT                * default to GP
          MOVE      FIVE,PMHCHCST                * default to Ref. Doctor & GP
.
PM020030  PACK      PMHCSNAM,STF00301,SP70       * load hcp surname
          PACK      PMHCGNAM,STF00302,SP70       * load hcp given names
          PACK      PMHCTITL,STF00305,SP10       * load hcp title
.
          MOVELPTR  STF00501,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PM020060 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,STF00501            * field null ?
          IF        @EQUAL
            MOVE      ANSU,PMHCGNDR              * yes
          ELSE
            PACK      PMHCGNDR,STF00501,SP1      * load hcp gender
          ENDIF
.
PM020060  MOVELPTR  STF00601,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PM020070 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,STF00601            * field null ?
          IF        @EQUAL
            MOVE      SP8,PMHCDTOB               * yes
          ELSE
            PACK      PMHCDTOB,STF00601,SP8      * load date of birth
          ENDIF
.
PM020070  MOVE      ZERO,PMHCSTTS                * load default active status
          MATCH     ANSI,STF00701
          IF        @EQUAL
            MOVE      ONE,PMHCSTTS               * load hcp status
          ENDIF
.
PM020080  MOVELPTR  STF00801[1],FORM3            * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PM020200 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,STF00801[1]         * field null ?
          IF        @EQUAL
            MOVE      SP3,PMHCSPC1               * yes
          ELSE
            PACK      PMHCSPC1,STF00801[1],SP3   * load speciality 1 (cat.DT)
          ENDIF
.
PM020200  MOVELPTR  STF00801[2],FORM3            * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PM020300 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,STF00801[2]         * field null ?
          IF        @EQUAL
            MOVE      SP3,PMHCSPC2               * yes
          ELSE
            PACK      PMHCSPC2,STF00801[2],SP3   * load speciality 2 (cat.DT)
          ENDIF
.
PM020300  MOVELPTR  STF00801[3],FORM3            * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PM020400 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,STF00801[3]         * field null ?
          IF        @EQUAL
            MOVE      SP3,PMHCSPC3               * yes
          ELSE
            PACK      PMHCSPC3,STF00801[3],SP3   * load speciality 3 (cat.DT)
          ENDIF
.
PM020400  MOVELPTR  STF00801[4],FORM3            * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PM020500 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,STF00801[4]         * field null ?
          IF        @EQUAL
            MOVE      SP3,PMHCSPC4               * yes
          ELSE
            PACK      PMHCSPC4,STF00801[4],SP3   * load speciality 4 (cat.DT)
          ENDIF
.
PM020500  MOVELPTR  STF00801[5],FORM3            * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PM021000 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,STF00801[5]         * field null ?
          IF        @EQUAL
            MOVE      SP3,PMHCSPC5               * yes
          ELSE
            PACK      PMHCSPC5,STF00801[5],SP3   * load speciality 5 (cat.DT)
          ENDIF
.
.         Phone (STF.10, Components 1 and 3 [6 possible types])
.
PM021000  MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 7
            MOVELPTR  STF01001[COUNTER],FORM3    * field populated ?
            COMPARE   ZERO,FORM3
            GOTO      PM021010 IF EQUAL          * no - no change
.
            MATCH     "INTERNET",STF01003[COUNTER]
            IF        @EQUAL
              MATCH     BLANKSTR,STF01001[COUNTER] * field null ?
              IF        @EQUAL
                PACK      PMHCSEML,SP70,SP70       * yes
              ELSE
                PACK      PMHCSEML,STF01001[COUNTER],SP70    * hcp surgery email
              ENDIF
            ENDIF
.
            MATCH     "PH",STF01003[COUNTER]
            IF        @EQUAL
              MATCH     BLANKSTR,STF01001[COUNTER] * field null ?
              IF        @EQUAL
                PACK      PMHCSTEL,SP70,SP70       * yes
              ELSE
                PACK      PMHCSTEL,STF01001[COUNTER],SP70    * hcp surgery phone
              ENDIF
            ENDIF
.
            MATCH     "FX",STF01003[COUNTER]
            IF        @EQUAL
              MATCH     BLANKSTR,STF01001[COUNTER] * field null ?
              IF        @EQUAL
                PACK      PMHCFAXN,SP70,SP70       * yes
              ELSE
                PACK      PMHCFAXN,STF01001[COUNTER],SP70    * hcp surgery fax
              ENDIF
            ENDIF
.
            MATCH     "MOB",STF01003[COUNTER]
            IF        @EQUAL
              MATCH     BLANKSTR,STF01001[COUNTER] * field null ?
              IF        @EQUAL
                PACK      PMHCMOBN,SP70,SP70       * yes
              ELSE
                PACK      PMHCMOBN,STF01001[COUNTER],SP70    * hcp surgery fax
              ENDIF
            ENDIF
.
            MATCH     "BEP",STF01003[COUNTER]
            IF        @EQUAL
              MATCH     BLANKSTR,STF01001[COUNTER] * field null ?
              IF        @EQUAL
                PACK      PMHCPAGN,SP70,SP70       * yes
              ELSE
                PACK      PMHCPAGN,STF01001[COUNTER],SP70    * hcp pager number
              ENDIF
            ENDIF
.
            MATCH     "BPN",STF01003[COUNTER]
            IF        @EQUAL
              MATCH     BLANKSTR,STF01001[COUNTER] * field null ?
              IF        @EQUAL
                PACK      PMHCPAGR,SP70,SP70       * yes
              ELSE
                PACK      PMHCPAGR,STF01001[COUNTER],SP70    * hcp pager phone
              ENDIF
            ENDIF
.
PM021010    ADD       ONE,COUNTER                * increment counter
          DO
.
          MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 3
            MOVELPTR  STF01101[COUNTER],FORM3    * field populated ?
            COMPARE   ZERO,FORM3
            GOTO      PM021015 IF EQUAL          * no - no change
.
            MATCH     "H",STF01107[COUNTER]
            IF        @EQUAL
              MATCH     BLANKSTR,STF01101[COUNTER] * field null ?
              IF        @EQUAL
                PACK      PMHCHAD1,SP70,SP70       * yes
              ELSE
                PACK      PMHCHAD1,STF01101[COUNTER],SP70    * home Address 1
              ENDIF
              MATCH     BLANKSTR,STF01102[COUNTER] * field null ?
              IF        @EQUAL
                PACK      PMHCHAD2,SP70,SP70       * yes
              ELSE
                PACK      PMHCHAD2,STF01102[COUNTER],SP70    * home Address 2
              ENDIF
              MATCH     BLANKSTR,STF01103[COUNTER] * field null ?
              IF        @EQUAL
                PACK      PMHCHAD3,SP70,SP70       * yes
              ELSE
                PACK      PMHCHAD3,STF01103[COUNTER],SP70    * home Address 3
              ENDIF
              MATCH     BLANKSTR,STF01104[COUNTER] * field null ?
              IF        @EQUAL
                PACK      PMHCHAD4,SP70,SP70       * yes
              ELSE
                PACK      PMHCHAD4,STF01104[COUNTER],SP70    * home Address 4
              ENDIF
              MATCH     BLANKSTR,STF01105[COUNTER] * field null ?
              IF        @EQUAL
                PACK      PMHCHPCD,SP70,SP70       * yes
              ELSE
                PACK      PMHCHPCD,STF01105[COUNTER],SP70    * home Post Code
              ENDIF
            ENDIF
.
            MATCH     "O",STF01107[COUNTER]
            IF        @EQUAL
              MATCH     BLANKSTR,STF01101[COUNTER] * field null ?
              IF        @EQUAL
                PACK      PMHCADR1,SP70,SP70       * yes
              ELSE
                PACK      PMHCADR1,STF01101[COUNTER],SP70    * office Address 1
              ENDIF
              MATCH     BLANKSTR,STF01102[COUNTER] * field null ?
              IF        @EQUAL
                PACK      PMHCADR2,SP70,SP70       * yes
              ELSE
                PACK      PMHCADR2,STF01102[COUNTER],SP70    * office Address 2
              ENDIF
              MATCH     BLANKSTR,STF01103[COUNTER] * field null ?
              IF        @EQUAL
                PACK      PMHCADR3,SP70,SP70       * yes
              ELSE
                PACK      PMHCADR3,STF01103[COUNTER],SP70    * office Address 3
              ENDIF
              MATCH     BLANKSTR,STF01104[COUNTER] * field null ?
              IF        @EQUAL
                PACK      PMHCADR4,SP70,SP70       * yes
              ELSE
                PACK      PMHCADR4,STF01104[COUNTER],SP70    * office Address 4
              ENDIF
              MATCH     BLANKSTR,STF01105[COUNTER] * field null ?
              IF        @EQUAL
                PACK      PMHCPOST,SP70,SP70       * yes
              ELSE
                PACK      PMHCPOST,STF01105[COUNTER],SP70    * office Post Code
              ENDIF
            ENDIF
.
PM021015    ADD       ONE,COUNTER                * increment counter
          DO
.
          MATCH     BLANKSTR,STF01201            * field null ?
          IF        @EQUAL
            MOVE      SP8,PMHCSDAT               * yes
          ELSE
            PACK      PMHCSDAT,STF01201,SP8      * load hcp start date
          ENDIF
.
          MOVELPTR  STF01301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PM021020 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,STF01301            * field null ?
          IF        @EQUAL
            MOVE      SP8,PMHCEDAT               * yes
          ELSE
            PACK      PMHCEDAT,STF01301,SP8      * load hcp end date
          ENDIF
.
.         There may be multiple hcp email address, however, we are
.         assuming that the first one is the primary one (based on
.         feedback from DoH).
.
PM021020  MOVELPTR  STF01501[1],FORM3            * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PM021025 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,STF01501[1]         * field null ?
          IF        @EQUAL
            PACK      PMHCSEML,SP70,SP10         * yes
          ELSE
            PACK      PMHCSEML,STF01501[1],SP70,SP10 * load hcp email
          ENDIF
.
PM021025  CALL      SZST0000                     * set ZST fields
.
          CALL      PZSF0000                     * process ZSF fields
.
PM021030  BRANCH    STAFFFLG,PM021900            * new record
.
.         Update the record
.
          MATCH     SP8,LASTUPDT
          IF        @EQUAL
            PACK      PMHCLUPD,CCC,CYY,CMM,CDD
            REP       " 0",PMHCLUPD
            MOVE      CTIMEIS,PMHCLUPT
            REP       " 0",PMHCLUPT
          ELSE
            MOVE      LASTUPDT,PMHCLUPD
            MOVE      LASTUPTM,PMHCLUPT
          ENDIF
          MOVE      "HL7RECVR  ",PMHCWEBU
          CALL      UPPMHCP1
          CALL      WISH0000                  * Write EDWARD ISP Audit vars
          GOTO      PM022000
.
.         Write the record
.
PM021900  MOVE      ANSA,PMHCUPDF                * set for auto update
          MATCH     SP8,LASTUPDT
          IF        @EQUAL
            PACK      PMHCCDTE,CCC,CYY,CMM,CDD
            REP       " 0",PMHCCDTE
            MOVE      CTIMEIS,PMHCCTIM
            REP       " 0",PMHCCTIM
            MOVE      PMHCCDTE,PMHCLUPD
            MOVE      PMHCCTIM,PMHCLUPT
          ELSE
            MOVE      LASTUPDT,PMHCCDTE
            MOVE      LASTUPTM,PMHCCTIM
            MOVE      LASTUPDT,PMHCLUPD
            MOVE      LASTUPTM,PMHCLUPT
          ENDIF
          MOVE      "HL7RECVR  ",PMHCWEBC
          CALL      WRPMHCP1
          CALL      WISH0000                  * Write EDWARD ISP Audit vars
PM022000  PROC      PMSHKIUP
.
          MATCH     PMHCLDOC,SP70
          GOTO      PM022020 IF EQUAL
.
          PACK      KEY6,PMHCLDOC,SP70
          CALL      RDDOCT1
          BRANCH    OVRCD,PM022010            * Doctor does not exist
.
          CALL      MVPTDO00                  * Move HCP to Doctor File
.
          CALL      UPDOCT1
          PROC      PATDKIUP                  * Updates keyword index
          GOTO      PM022020
.
PM022010  CALL      MVPTDO00                  * Move HCP to Doctor File
.
          PACK      KEY6,PMHCLDOC,SP70
          CALL      WRDOCT1                   * New data written
          CALL      DSCR0000                  * Create blank patdstat
          PROC      PATDKIUP                  * Update keyword index
.
PM022020  CALL      PDUN0000                     * process pmsdunaf doctor/unit
.
.         Process the Practice details
.         If it's a new record, then set the key fields
.
PM022030  CALL      SISG0000                     * Save EDWARD ISP Audit vars
          IF        PRACFLAG = 1
            CALL      CLPMSHCG                   * clear file variables
            CALL      SISG0000                   * Save EDWARD ISP Audit vars
            PACK      PMHGPRAC,ZPR00201,SP10     * load practice code
            MOVE      " 1",PMHGCNTR              * load count
          ENDIF
.
.         Load all the file variables using the sent data
.
          MOVE      ZERO,PMHGSTTS                * load default active status
.
          MATCH     SP10,PMHGSPCD
          IF        @EQUAL
            PACK      PMHGSPCD,STF00201,SP10     * load senior partner
          ENDIF
.
          PACK      PMHGPNAM,ZPR00301,SP70,SP10  * load practice name
.
          MOVELPTR  ZPR00501,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      PM022100 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZPR00501            * field null ?
          IF        @EQUAL
            MOVE      SP70,PMHGADD1              * yes
          ELSE
            PACK      PMHGADD1,ZPR00501,SP70     * load address line 1
          ENDIF
.
PM022100  MOVELPTR  ZPR00502,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      PM022110 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZPR00502            * field null ?
          IF        @EQUAL
            MOVE      SP70,PMHGADD2              * yes
          ELSE
            PACK      PMHGADD2,ZPR00502,SP70     * load address line 2
          ENDIF
.
PM022110  MOVELPTR  ZPR00503,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      PM022120 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZPR00503            * field null ?
          IF        @EQUAL
            MOVE      SP70,PMHGADD3              * yes
          ELSE
            PACK      PMHGADD3,ZPR00503,SP70     * load address line 3 (suburb)
          ENDIF
.
PM022120  MOVELPTR  ZPR00504,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      PM022130 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZPR00504            * field null ?
          IF        @EQUAL
            MOVE      SP70,PMHGADD4              * yes
          ELSE
            PACK      PMHGADD4,ZPR00504,SP70     * load address line 4 (state)
          ENDIF
.
PM022130  MOVELPTR  ZPR00505,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      PM022140 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZPR00505            * field null ?
          IF        @EQUAL
            MOVE      SP8,PMHGPOST               * yes
          ELSE
            PACK      PMHGPOST,ZPR00505,SP8      * load postcode
          ENDIF
.
PM022140  PACK      PMHGFMDT,ZPR00701,SP8        * load formation date
.
          MOVELPTR  ZPR00801,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      PM022150 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZPR00801            * field null ?
          IF        @EQUAL
            MOVE      SP8,PMHGDSDT               * yes
          ELSE
            PACK      PMHGDSDT,ZPR00801,SP8      * load dissolution date
          ENDIF
.
PM022150  MOVELPTR  ZPR00901,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      PM022160 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZPR00901            * field null ?
          IF        @EQUAL
            PACK      PMHGPPNO,SP70              * yes
          ELSE
            PACK      PMHGPPNO,ZPR00901,SP70     * load provider number
          ENDIF
.
PM022160  STRIP     ZPR01001
          MOVELPTR  ZPR01001,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      PM022170 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZPR01001            * field null ?
          IF        @EQUAL
            PACK      PMHGPPCN,SP70              * yes
          ELSE
            PACK      PMHGPPCN,ZPR01001,SP70     * load preferred contact
          ENDIF
.
PM022170  STRIP     ZPR01101
          MOVELPTR  ZPR01101,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      PM022180 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZPR01101            * field null ?
          IF        @EQUAL
            PACK      PMHGSPCD,SP70              * yes
          ELSE
            PACK      PMHGSPCD,ZPR01101,SP70     * load senior hcp
          ENDIF
.
PM022180  STRIP     ZPR01201
          MOVELPTR  ZPR01201,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      PM022190 IF EQUAL            * no
.
          MOVE      ZPR01201,PMHGUPFL            * load update flag
.
PM022190  STRIP     ZPR01301
          MOVELPTR  ZPR01301,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      PM022200 IF EQUAL            * no
.
          MOVE      ZPR01301,PMHGFXDS            * load fax disch. summary flag
          REP       "Y1N0",PMHGFXDS
.
PM022200  STRIP     ZPR01401
          MOVELPTR  ZPR01401,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      PM022210 IF EQUAL            * no
.
          MOVE      ZPR01401,PMHGELDS            * load elec disch. summary flag
          REP       "Y1N0",PMHGELDS
.
PM022210  MATCH     SP8,PMHGDSDT                 * blank end date ?
          GOTO      PM022220 IF EQUAL            * yes
.
          MATCH     CURRDATE,PMHGDSDT            * no - end date in past ?
          IF        @LESS
            MOVE      ONE,PMHGSTTS               * yes - load inactive status
          ENDIF
.
PM022220  MATCH     "1",PTCNSSMD
          GOTO      PM025100 IF NOT EQUAL        * only populate if using SMD
.
          STRIP     ZPR01601
          MOVELPTR  ZPR01601,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      PM022230 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZPR01601            * field null ?
          IF        @EQUAL
            PACK      PMHGSMD1,SP70              * yes
          ELSE
            PACK      PMHGSMD1,ZPR01601,SP70     * load SMD GUID value 1
          ENDIF
.
PM022230  STRIP     ZPR01701
          MOVELPTR  ZPR01701,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      PM022240 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZPR01701            * field null ?
          IF        @EQUAL
            PACK      PMHGSMD2,SP70              * yes
          ELSE
            PACK      PMHGSMD2,ZPR01701,SP70     * load SMD GUID value 2
          ENDIF
.
PM022240  STRIP     ZPR01801
          MOVELPTR  ZPR01801,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      PM025100 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZPR01801            * field null ?
          IF        @EQUAL
            PACK      PMHGHPIO,SP70              * yes
          ELSE
            PACK      PMHGHPIO,ZPR01801,SP70     * load HPI-O value
          ENDIF
.
.         Check ZPR.6 for the practice phone number, practice fax number
.         and practice email address
.
PM025100  MOVE      ZERO,COUNTER
PM025200  WHILE     COUNTER < 5
            ADD       ONE,COUNTER
.
.           First check component 3 to see what communication type this is.
.             INTERNET - email address
.             PH - phone number
.             FX - fax number
.
            STRIP     ZPR00603[COUNTER]
            MOVELPTR  ZPR00603[COUNTER],FORM3
            COMPARE   ZERO,FORM3                   * field populated ?
            GOTO      PM025200 IF EQUAL            * no - ignore
.
            MATCH     BLANKSTR,ZPR00603[COUNTER]   * field null ?
            GOTO      PM025200 IF EQUAL            * yes - ignore
.
.           Based on the communication type, check if there is a value
.           and if there is, load it into the corresponding database field
.
            MATCH     "PH",ZPR00603[COUNTER]
            IF        @EQUAL
              STRIP     ZPR00601[COUNTER]
              MOVELPTR  ZPR00601[COUNTER],FORM3
              COMPARE   ZERO,FORM3                 * field populated ?
              GOTO      PM025200 IF EQUAL          * no - ignore
.
              MATCH     BLANKSTR,ZPR00601[COUNTER] * field null ?
              IF        @EQUAL
                MOVE      SP20,PMHGPTEL
              ELSE
                PACK      PMHGPTEL,ZPR00601[COUNTER],SP20
              ENDIF
              GOTO      PM025200
            ENDIF
.
            MATCH     "FX",ZPR00603[COUNTER]
            IF        @EQUAL
              STRIP     ZPR00601[COUNTER]
              MOVELPTR  ZPR00601[COUNTER],FORM3
              COMPARE   ZERO,FORM3                 * field populated ?
              GOTO      PM025200 IF EQUAL          * no - ignore
.
              MATCH     BLANKSTR,ZPR00601[COUNTER] * field null ?
              IF        @EQUAL
                MOVE      SP20,PMHGPFAX
              ELSE
                PACK      PMHGPFAX,ZPR00601[COUNTER],SP20
              ENDIF
              GOTO      PM025200
            ENDIF
.
            MATCH     "INTERNET",ZPR00603[COUNTER]
            IF        @EQUAL
              STRIP     ZPR00604[COUNTER]
              MOVELPTR  ZPR00604[COUNTER],FORM3
              COMPARE   ZERO,FORM3                 * field populated ?
              GOTO      PM025200 IF EQUAL          * no - ignore
.
              MATCH     BLANKSTR,ZPR00604[COUNTER] * field null ?
              IF        @EQUAL
                PACK      PMHGPEML,SP70,SP10
              ELSE
                PACK      PMHGPEML,ZPR00604[COUNTER],SP70,SP10
              ENDIF
              GOTO      PM025200
            ENDIF
          DO
.
          MOVE      "0",PMHGGPPI
.
          BRANCH    PRACFLAG,PM025300            * new record
.
.         Update the record
.
          MATCH     SP8,LASTUPDT
          IF        @EQUAL
            PACK      PMHGLUPD,CCC,CYY,CMM,CDD
            REP       " 0",PMHGLUPD
            MOVE      CTIMEIS,PMHGLUPT
            REP       " 0",PMHGLUPT
          ELSE
            MOVE      LASTUPDT,PMHGLUPD
            MOVE      LASTUPTM,PMHGLUPT
          ENDIF
          MOVE      "HL7RECVR  ",PMHGWEBU
          CALL      UPPMHCG1
          CALL      WISG0000      * Write EDWARD ISP Audit vars
          GOTO      PM027000
.
.         Write the record.
.         Determine if the Update Flag (ZPR.12) is populated.  If it is,
.         use the sent value, otherwise default the value to "A".
.
PM025300  STRIP     ZPR01201
          MOVELPTR  ZPR01201,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      ANSA,PMHGUPFL              * set for auto update
          ENDIF
.
          MATCH     SP8,LASTUPDT
          IF        @EQUAL
            PACK      PMHGCDTE,CCC,CYY,CMM,CDD
            REP       " 0",PMHGCDTE
            MOVE      CTIMEIS,PMHGCTIM
            REP       " 0",PMHGCTIM
          ELSE
            MOVE      LASTUPDT,PMHGCDTE
            MOVE      LASTUPTM,PMHGCTIM
          ENDIF
          MOVE      "HL7RECVR  ",PMHGWEBC
          CALL      WRPMHCG1
          CALL      WISG0000      * Write EDWARD ISP Audit vars
PM027000  PROC      PMSPKIUP
.
.         Process the Linked HCP details
.         Check if the code already exists on file or if it's new.
.
          CALL      SISL0000                     * Save EDWARD ISP Audit vars
          IF        LINKFLAG = 1
            CALL      CLPMSHCL                   * clear file variables
            CALL      SISL0000                   * Save EDWARD ISP Audit vars
            PACK      PMHLHCPC,STF00201,SP10     * load hcp code
            PACK      PMHLHCPR,PRA00201,SP10     * load practice code
          ENDIF
.
.         Load all the file variables using the sent data
.
          MOVE      ZERO,PMHLSTAT                * load default active status
.
.         Check if Practice Active Link Flag (ZPR.15) is populated and
.         if so and the value is "N" (Inactive), then set the flag
.         accordingly
.
          STRIP     ZPR01501
          MOVELPTR  ZPR01501,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        !@EQUAL
            MATCH     ANSN,ZPR01501              * yes - Inactive ?
            IF        @EQUAL
              MOVE      ONE,PMHLSTAT             * yes
            ENDIF
          ENDIF
.
          WHILE     SAVCOUNT > 0
            PACK      KEY10,PRVARRAY[SAVCOUNT],SP10
            STORE     KEY10,SAVCOUNT,PMHLPRV1,PMHLPRV2,PMHLPRV3,PMHLPRV4:
                                     PMHLPRV5    * load provider numbers
            SUB       ONE,SAVCOUNT
          DO
.
          PACK      PMHLJPDT,PRA00801,SP8        * load joined date
.
          MOVELPTR  PRA01001,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      PM027050 IF EQUAL            * no - ignore
.
          MATCH     BLANKSTR,PRA01001            * field null ?
          IF        @EQUAL
            MOVE      SP8,PMHLLPDT               * yes
          ELSE
            PACK      PMHLLPDT,PRA01001,SP8      * load left date
          ENDIF
.
PM027050  MATCH     SP8,PMHLLPDT                 * left date blank ?
          GOTO      PM027100 IF EQUAL            * yes
.
          MATCH     CURRDATE,PMHLLPDT            * no - left date in past ?
          IF        @LESS
            MOVE      ONE,PMHLSTAT               * yes - set to inactive status
          ENDIF
.
.         If the hcp status is inactive, or if the practice has an end date,
.         then the linked record status should also be inactive
.         (if it isn't already)
.
PM027100  MATCH     "1",PMHCSTTS                 * hcp inactive ?
          IF        @EQUAL
            MOVE      ONE,PMHLSTAT               * yes - load inactive status
            GOTO      PM027200
          ENDIF
.
          MATCH     "1",PMHGSTTS                 * practice inactive ?
          IF        @EQUAL
            MOVE      ONE,PMHLSTAT               * yes - load inactive status
          ENDIF
.
PM027200  BRANCH    LINKFLAG,PM027300            * new record
.
.         Update the record
.
          MATCH     SP8,LASTUPDT
          IF        @EQUAL
            PACK      PMHLLUPD,CCC,CYY,CMM,CDD
            REP       " 0",PMHLLUPD
            MOVE      CTIMEIS,PMHLLUPT
            REP       " 0",PMHLLUPT
          ELSE
            MOVE      LASTUPDT,PMHLLUPD
            MOVE      LASTUPTM,PMHLLUPT
          ENDIF
          MOVE      "HL7RECVR  ",PMHLWEBU
          CALL      UPPMHCL1
          CALL      WISL0000                     * Write EDWARD ISP Audit vars
          MOVE      "U",PMHCACTN                 * upd action flag for DGCLIM02
          GOTO      PM029000
.
.         Write the record
.
PM027300  MATCH     SP8,LASTUPDT
          IF        @EQUAL
            PACK      PMHLCDTE,CCC,CYY,CMM,CDD
            REP       " 0",PMHLCDTE
            MOVE      CTIMEIS,PMHLCTIM
            REP       " 0",PMHLCTIM
          ELSE
            MOVE      LASTUPDT,PMHLCDTE
            MOVE      LASTUPTM,PMHLCTIM
          ENDIF
          MOVE      "HL7RECVR  ",PMHLWEBC
          CALL      WRPMHCL1
          CALL      WISL0000                     * Write EDWARD ISP Audit vars
          MOVE      "A",PMHCACTN                 * add action flag for DGCLIM02
.
PM029000  MATCH     "1",PTCNFNM2
          GOTO      PM029999 IF NOT EQUAL        * rebroadcast HL7 MFN^M02 ?
.
          MOVE      "HL7RECVR  ",USERID
          PACK      KEY10,USERID,SP10
          CALL      RDWBSE1
          IF        OVRCD<>0
            CALL      CLWEBSEC
          ENDIF
          MOVE      WBSEPCD,PASSCODE
.
          MOVE      FIFTY2,HL7TRGID
          MOVE      SP8,HL7INCLD
          PROC      DGCLIM02                     * trigger M02 message
.
PM029999  RETURN
+
.*****************************************************************************
.*                              SZST0000                                     *
.*              Set the ZST fields (if they exist) for the M02 message       *
.*****************************************************************************
SZST0000
.
SZST0100
.
SZST0200  STRIP     ZST00201
          MOVELPTR  ZST00201,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      SZST0300 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZST00201            * field null ?
          IF        @EQUAL
            PACK      PMHCLDOC,SP70              * yes
          ELSE
            PACK      PMHCLDOC,ZST00201,SP70     * load Linked Doctor Code
          ENDIF
.
SZST0300  STRIP     ZST00301
          MOVELPTR  ZST00301,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      SZST0400 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZST00301            * field null ?
          IF        !@EQUAL
            MOVE      ZST00301,D2
            MOVE      D2,F2
            MOVE      F2,PMHCHCST                * load HCP status
          ENDIF
.
SZST0400  STRIP     ZST00401
          MOVELPTR  ZST00401,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      SZST0500 IF EQUAL            * no - ignore
.
          MATCH     BLANKSTR,ZST00401            * field null ?
          IF        @EQUAL
            PACK      PMHCNHSN,SP70              * yes
          ELSE
            PACK      PMHCNHSN,ZST00401,SP70     * load Prescriber Number
          ENDIF
.
SZST0500  STRIP     ZST00501
          MOVELPTR  ZST00501,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      SZST0600 IF EQUAL            * no - ignore
.
          MATCH     BLANKSTR,ZST00501            * field null ?
          IF        @EQUAL
            PACK      PMHCPRV1,SP70              * yes
          ELSE
            PACK      PMHCPRV1,ZST00501,SP70     * load Provider Number
          ENDIF
.
SZST0600  STRIP     ZST00602
          MOVELPTR  ZST00602,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      SZST0610 IF EQUAL            * no - ignore
.
          MATCH     BLANKSTR,ZST00602            * field null ?
          IF        @EQUAL
            PACK      PMHCATYP,SP70              * yes
          ELSE
            PACK      PMHCATYP,ZST00602,SP70     * load Accreditation Type
          ENDIF
.
SZST0610  STRIP     ZST00603
          MOVELPTR  ZST00603,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      SZST0620 IF EQUAL            * no - ignore
.
          MATCH     BLANKSTR,ZST00603            * field null ?
          IF        @EQUAL
            PACK      PMHCDEAC,SP70              * yes
          ELSE
            PACK      PMHCDEAC,ZST00603,SP70     * load Accred. Expiry Date
          ENDIF
.
SZST0620  STRIP     ZST00604
          MOVELPTR  ZST00604,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      SZST0700 IF EQUAL            * no - ignore
.
          MATCH     BLANKSTR,ZST00604            * field null ?
          IF        @EQUAL
            MOVE      ZERO,PMHCYACC              * yes
          ELSE
            MOVE      ZST00604,D2
            MOVE      D2,F2
            MOVE      F2,PMHCYACC                * load Years Of Accreditation
          ENDIF
.
SZST0700  STRIP     ZST00701
          MOVELPTR  ZST00701,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      SZST0710 IF EQUAL            * no - ignore
.
          MATCH     BLANKSTR,ZST00701            * field null ?
          IF        @EQUAL
            PACK      PMHCMRBN,SP70              * yes
          ELSE
            PACK      PMHCMRBN,ZST00701,SP70     * load Registration Number
          ENDIF
.
SZST0710  STRIP     ZST00702
          MOVELPTR  ZST00702,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      SZST0720 IF EQUAL            * no - ignore
.
          MATCH     BLANKSTR,ZST00702            * field null ?
          IF        @EQUAL
            PACK      PMHCRGDF,SP70              * yes
          ELSE
            PACK      PMHCRGDF,ZST00702,SP70     * load Registration from date
          ENDIF
.
SZST0720  STRIP     ZST00703
          MOVELPTR  ZST00703,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      SZST0800 IF EQUAL            * no - ignore
.
          MATCH     BLANKSTR,ZST00703            * field null ?
          IF        @EQUAL
            PACK      PMHCRGDT,SP70              * yes
          ELSE
            PACK      PMHCRGDT,ZST00703,SP70     * load Registration to date
          ENDIF
.
SZST0800  STRIP     ZST00802
          MOVELPTR  ZST00802,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      SZST0810 IF EQUAL            * no - ignore
.
          MATCH     BLANKSTR,ZST00802            * field null ?
          IF        @EQUAL
            PACK      PMHCINSC,SP70              * yes
          ELSE
            PACK      PMHCINSC,ZST00802,SP70     * load Insurance Code (patin1)
          ENDIF
.
SZST0810  STRIP     ZST00803
          MOVELPTR  ZST00803,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      SZST0820 IF EQUAL            * no - ignore
.
          MATCH     BLANKSTR,ZST00803            * field null ?
          IF        @EQUAL
            PACK      PMHCIPLN,SP70              * yes
          ELSE
            PACK      PMHCIPLN,ZST00803,SP70     * load Insurance Policy Number
          ENDIF
.
SZST0820  STRIP     ZST00804
          MOVELPTR  ZST00804,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      SZST0830 IF EQUAL            * no - ignore
.
          MATCH     BLANKSTR,ZST00804            * field null ?
          IF        @EQUAL
            PACK      PMHCIDTF,SP70              * yes
          ELSE
            PACK      PMHCIDTF,ZST00804,SP70     * load Insurance Date From
          ENDIF
.
SZST0830  STRIP     ZST00805
          MOVELPTR  ZST00805,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      SZST0900 IF EQUAL            * no - ignore
.
          MATCH     BLANKSTR,ZST00805            * field null ?
          IF        @EQUAL
            PACK      PMHCIDTT,SP70              * yes
          ELSE
            PACK      PMHCIDTT,ZST00805,SP70     * load Insurance Date To
          ENDIF
.
SZST0900  STRIP     ZST00901
          MOVELPTR  ZST00901,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      SZST0910 IF EQUAL            * no - ignore
.
          MATCH     BLANKSTR,ZST00901            * field null ?
          IF        @EQUAL
            PACK      PMHCPRFN,SP70              * yes
          ELSE
            PACK      PMHCPRFN,ZST00901,SP70     * load Preferred Name
          ENDIF
.
SZST0910  STRIP     ZST00902
          MOVELPTR  ZST00902,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      SZST1000 IF EQUAL            * no - ignore
.
          MATCH     BLANKSTR,ZST00902            * field null ?
          IF        @EQUAL
            PACK      PMHCPRFC,SP70              * yes
          ELSE
            PACK      PMHCPRFC,ZST00902,SP70     * load Preferred Contact Method
          ENDIF
.
SZST1000  STRIP     ZST01001
          MOVELPTR  ZST01001,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      SZST1100 IF EQUAL            * no - ignore
.
          MATCH     BLANKSTR,ZST01001            * field null ?
          IF        @EQUAL
            PACK      PMHCMPGN,SP70              * yes
          ELSE
            PACK      PMHCMPGN,ZST01001,SP70     * load MPG Certificate Number
          ENDIF
.
SZST1100  MATCH     "1",PTCNSSMD
          GOTO      SZST9999 IF NOT EQUAL        * only populate if using SMD
.
          STRIP     ZST01101
          MOVELPTR  ZST01101,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      SZST1200 IF EQUAL            * no - ignore
.
          MATCH     BLANKSTR,ZST01101            * field null ?
          IF        @EQUAL
            PACK      PMHCSMD1,SP70              * yes
          ELSE
            PACK      PMHCSMD1,ZST01101,SP70     * load SMD GUID value 1
          ENDIF
.
SZST1200  STRIP     ZST01201
          MOVELPTR  ZST01201,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      SZST1300 IF EQUAL            * no - ignore
.
          MATCH     BLANKSTR,ZST01201            * field null ?
          IF        @EQUAL
            PACK      PMHCSMD2,SP70              * yes
          ELSE
            PACK      PMHCSMD2,ZST01201,SP70     * load SMD GUID value 2
          ENDIF
.
SZST1300  STRIP     ZST01301
          MOVELPTR  ZST01301,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      SZST9999 IF EQUAL            * no - ignore
.
          MATCH     BLANKSTR,ZST01301            * field null ?
          IF        @EQUAL
            PACK      PMHCNHTA,SP70              * yes
          ELSE
            PACK      PMHCNHTA,ZST01301,SP70     * load HPI-I value
          ENDIF
.
SZST9999  RETURN
+
.*****************************************************************************
.*                              PZSF0000                                     *
.*                 Process ZSF hospital segments                             *
.* Requires:  ZSFCOUNT - number of ZSF segments received                     *
.*            ZSFFOUND - found ZSF segment flag                              *
.*                             0 = one or more ZSF segment found             *
.*                             1 = no ZSF segment found                      *
.*****************************************************************************
.
.         Check if a ZSF segment was received
.
PZSF0000  BRANCH    ZSFFOUND,PZSF9999            * no ZSF segments received
.
          MOVE      ZSFCOUNT,SVZSFCNT            * save ZSF segment count
.
          COMPARE   ZERO,SVZSFCNT                * any ZSF's to process ?
          GOTO      PZSF9999 IF EQUAL            * no - finished
.
.         There is one or more valid ZSF segments
.
          MOVE      ZERO,ZSFCOUNT                * initialise ZSF segment count
          CALL      CLMLTHCP                     * clear mulhcpaf fields
.
          PACK      KEY15,ZSFSEGMT,SP20
          CALL      RSTEMP1                      * position on ZSF segment
PZSF0080  CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,PZSF0090               * eof - finished
.
          MATCH     ZSFSEGMT,RTMPSEGI            * same segment still ?
          GOTO      PZSF0090 IF NOT EQUAL        * no - finished
.
          COMPARE   ZSFCOUNT,RTMPSEGC            * same segment count still ?
          GOTO      PZSF0100 IF EQUAL            * yes
.
          ADD       ONE,ZSFCOUNT                 * increment ZSF segment count
.
          COMPARE   ONE,ZSFCOUNT                 * first ZSF segment ?
          GOTO      PZSF0100 IF EQUAL            * yes
.
.         We have a new segment and therefore have completed loading the
.         fields for the previous ZSF segment, so write or update mlthcpaf
.
PZSF0090  PACK      KEY13,MLHCHOSP,MLHCHCPC,SP70
          CALL      RAMLHCP1
          IF        OVRCD = 1
            CALL      WRMLHCP1                   * write mlthcpaf record
          ELSE
            CALL      UPMLHCP1                   * update mlthcpaf record
          ENDIF
.
          SUB       ONE,SVZSFCNT
          COMPARE   ZERO,SVZSFCNT                * last ZSF record ?
          GOTO      PZSF9999 IF EQUAL            * yes
.
          CALL      CLMLTHCP                     * no - clear mlthcpaf fields
.
.         Load the relevant field/component
.
PZSF0100  BRANCH    RTMPFLDN,PZSF0080:           * Primary Key Value
                             PZSF0200:           * Hospital Campus Code
                             PZSF0300:           * Hospital Staff ID
                             PZSF0400:           * HCP Status for Campus
                             PZSF0500:           * Doctor Provider Number
                             PZSF0600:           * Accreditation Details
                             PZSF0700:           * Active/Inactive Flag
                             PZSF0800:           * Institution Active Date
                             PZSF0900            * Institution Inactive Date
.
.                   Invalid field number, so ignore
.
          GOTO      PZSF0080
.
.         ZSF.2  Hospital Campus Code
.
PZSF0200  BRANCH    RTMPCMPN,PZSF0201:           * identifier (ST)
                             PZSF0202:           * text (ST)
                             PZSF0203:           * name of coding system (ST)
                             PZSF0204:           * alternate identifier (ST)
                             PZSF0205:           * alternate text (ST)
                             PZSF0206            * name of alt. cod. system (ST)
          GOTO      PZSF0080
.
PZSF0201  STRIP     RTMPVRBL
          MOVELPTR  RTMPVRBL,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PZSF0080 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,RTMPVRBL            * field null ?
          IF        @EQUAL
            PACK      MLHCHOSP,SP70              * yes
            MOVE      ZERO,PMHCHOSS              * hcp hospital indicator = no
          ELSE
            PACK      MLHCHOSP,RTMPVRBL,SP70     * load Hospital Campus Code
            MOVE      ONE,PMHCHOSS               * hcp hospital indicator = yes
          ENDIF
          GOTO      PZSF0080
.
PZSF0202  GOTO      PZSF0080
.
PZSF0203  GOTO      PZSF0080
.
PZSF0204  GOTO      PZSF0080
.
PZSF0205  GOTO      PZSF0080
.
PZSF0206  GOTO      PZSF0080
.
.         ZSF.3  Hospital Staff ID
.
PZSF0300  BRANCH    RTMPCMPN,PZSF0301:           * identifier (ST)
                             PZSF0302:           * text (ST)
                             PZSF0303:           * name of coding system (ST)
                             PZSF0304:           * alternate identifier (ST)
                             PZSF0305:           * alternate text (ST)
                             PZSF0306            * name of alt. cod. system (ST)
          GOTO      PZSF0080
.
PZSF0301  STRIP     RTMPVRBL
          MOVELPTR  RTMPVRBL,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PZSF0080 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,RTMPVRBL            * field null ?
          IF        @EQUAL
            PACK      MLHCHCPC,SP70              * yes
          ELSE
            PACK      MLHCHCPC,RTMPVRBL,SP70     * load Hospital Staff ID
          ENDIF
.
          PACK      KEY13,MLHCHOSP,MLHCHCPC,SP70
          CALL      RDMLHCP1
          MOVE      OVRCD,MULTFLAG               * set multihospital staff flag
.
          GOTO      PZSF0080
.
PZSF0302  GOTO      PZSF0080
.
PZSF0303  GOTO      PZSF0080
.
PZSF0304  GOTO      PZSF0080
.
PZSF0305  GOTO      PZSF0080
.
PZSF0306  GOTO      PZSF0080
.
.         ZSF.4  HCP Status for Campus
.
PZSF0400  BRANCH    RTMPCMPN,PZSF0401            * status identifier (ID)
          GOTO      PZSF0080
.
PZSF0401  STRIP     RTMPVRBL
          MOVELPTR  RTMPVRBL,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PZSF0080 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,RTMPVRBL            * field null ?
          IF        @EQUAL
            MOVE      ZERO,MLHCSTAT              * yes
          ELSE
            MOVE      RTMPVRBL,D2
            MOVE      D2,F2
            MOVE      F2,MLHCSTAT                * load HCP Status for Campus
          ENDIF
          GOTO      PZSF0080
.
.         ZSF.5  Doctor Provider Number
.
PZSF0500  BRANCH    RTMPCMPN,PZSF0501            * text (ST)
          GOTO      PZSF0080
.
PZSF0501  STRIP     RTMPVRBL
          MOVELPTR  RTMPVRBL,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PZSF0080 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,RTMPVRBL            * field null ?
          IF        @EQUAL
            PACK      MLHCPROV,SP70              * yes
          ELSE
            PACK      MLHCPROV,RTMPVRBL,SP70     * load Provider Number
          ENDIF
          GOTO      PZSF0080
.
.         ZSF.6  Accreditation Details
.
PZSF0600  BRANCH    RTMPCMPN,PZSF0601:           * accreditation type (ST)
                             PZSF0602:           * accreditation id (ID)
                             PZSF0603:           * accreditation expiry date(DT)
                             PZSF0604            * accreditation years (ST)
          GOTO      PZSF0080
.
PZSF0601  
          GOTO      PZSF0080
.
PZSF0602  STRIP     RTMPVRBL
          MOVELPTR  RTMPVRBL,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PZSF0080 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,RTMPVRBL            * field null ?
          IF        @EQUAL
            PACK      MLHCATYP,SP70              * yes
          ELSE
            PACK      MLHCATYP,RTMPVRBL,SP70     * load Accreditation Type
          ENDIF
          GOTO      PZSF0080
.
PZSF0603  STRIP     RTMPVRBL
          MOVELPTR  RTMPVRBL,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PZSF0080 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,RTMPVRBL            * field null ?
          IF        @EQUAL
            PACK      MLHCDEAC,SP70              * yes
          ELSE
            PACK      MLHCDEAC,RTMPVRBL,SP70     * load Accred. Expiry Date
          ENDIF
          GOTO      PZSF0080
.
PZSF0604  STRIP     RTMPVRBL
          MOVELPTR  RTMPVRBL,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PZSF0080 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,RTMPVRBL            * field null ?
          IF        @EQUAL
            MOVE      ZERO,MLHCYACC              * yes
          ELSE
            MOVE      RTMPVRBL,D2
            MOVE      D2,F2
            MOVE      F2,MLHCYACC                * load Years Of Accreditation
          ENDIF
          GOTO      PZSF0080
.
.         ZSF.7  Active/Inactive Flag
.
PZSF0700  BRANCH    RTMPCMPN,PZSF0701            * text (ID)
          GOTO      PZSF0080
.
PZSF0701  STRIP     RTMPVRBL
          MOVELPTR  RTMPVRBL,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PZSF0080 IF EQUAL            * no - no change
.
          MOVE      ZERO,MLHCACTV                * load default active status
          MATCH     ANSI,RTMPVRBL
          IF        @EQUAL
            MOVE      ONE,MLHCACTV               * load Active status
          ENDIF
          GOTO      PZSF0080
.
.         ZSF.8  Institution Active Date
.
PZSF0800  BRANCH    RTMPCMPN,PZSF0801            * active date (DT)
          GOTO      PZSF0080
.
PZSF0801  STRIP     RTMPVRBL
          MOVELPTR  RTMPVRBL,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PZSF0080 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,RTMPVRBL            * field null ?
          IF        @EQUAL
            MOVE      SP8,MLHCSDAT               * yes
          ELSE
            PACK      MLHCSDAT,RTMPVRBL,SP8      * load hcp start date
          ENDIF
          GOTO      PZSF0080
.
.         ZSF.9  Institution Inactive Date
.
PZSF0900  BRANCH    RTMPCMPN,PZSF0901            * inactive date (DT)
          GOTO      PZSF0080
.
PZSF0901  STRIP     RTMPVRBL
          MOVELPTR  RTMPVRBL,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PZSF0080 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,RTMPVRBL            * field null ?
          IF        @EQUAL
            MOVE      SP8,MLHCEDAT               * yes
          ELSE
            PACK      MLHCEDAT,RTMPVRBL,SP8      * load hcp end date
          ENDIF
          GOTO      PZSF0080
.
PZSF9999  RETURN
+
.*****************************************************************************
.*                              PDUN0000                                     *
.*     Process department fields for M02 message if ZST00201 is populated    *
.*****************************************************************************
PDUN0000  STRIP     ZST00201
          MOVELPTR  ZST00201,FORM3
          COMPARE   ZERO,FORM3
          GOTO      PDUN9999 IF EQUAL            * doctor link not populated
.
          MATCH     BLANKSTR,ZST00201
          GOTO      PDUN9999 IF EQUAL            * doctor link null
.
PDUN1000  MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 6
            STRIP     STF00801[COUNTER]
            MOVELPTR  STF00801[COUNTER],FORM3    * department populated ?
            COMPARE   ZERO,FORM3
            GOTO      PDUN5000 IF EQUAL          * no
.
.           Check if the field is null
.
            MATCH     BLANKSTR,STF00801[COUNTER] * field null ?
            GOTO      PDUN5000 IF EQUAL          * yes
.
.           Make sure that the code is valid for Cat.AC
.
            PACK      KEY5,ANSA,ANSC,STF00801[COUNTER],SP5
            CALL      RDCODE1
            BRANCH    OVRCD,PDUN5000             * code not on file
.
            MATCH     ANSI,PTCOACTV
            GOTO      PDUN5000 IF EQUAL          * code inactive
.
            PACK      PMDUDOCT,ZST00201,SP70
            PACK      PMDUUNIT,STF00801[COUNTER],SP70
.
            PACK      KEY9,PMDUDOCT,PMDUUNIT,SP70
            CALL      RDPMDUN1
            IF        OVRCD = 1
              CALL      WRPMDUN1                 * write doctor/unit combo
              CALL      WEUN0000                 * write EDWARD ISP Audit
            ENDIF
.
PDUN5000    ADD       ONE,COUNTER                * increment counter
          DO
.
PDUN9999  RETURN
+
.*****************************************************************************
.*                              PS140000           Called by: PROC0000       *
.*              Process the S14 message - write/update PAS database          *
.*****************************************************************************
.
PS140000  CALL      SS140000                * set variables for database
.
          CALL      VALCAS00                * validate theatre case
          BRANCH    EXIT,PS149999
.
          CALL      UPDDAY00                * Update Day Procedure Details
          BRANCH    EXIT,PS149999
.
          MOVE      "021",TADTTYPE          * audit type "S14 message received"
          PROC      OPTHETAT
.
          CALL      UPMMB000                * update "patmmbsf" Start/End times
.
          MATCH     SP70,OPSGTISE
          IF        !@EQUAL
            MOVE      OPDADATE,MMDATE
            CALL      WESE0000                * update Episode details
          ENDIF
.
.         Write Theatre Staff Member variables if necessary
.
          MOVE      OPARANUR,D6                  * Arrival Nurse Code
          MOVE      OPARATIM,D8                  * Arrival Time
          MOVE      "A",D1                       * Arrival Nurse Type
          MOVE      "ON",D2                      * staff category (op nurse=ON)
          CALL      WTSM0000                     * write team staff member
.
          MOVE      OPARNUD1,D6                  * Recovery Nurse 1 Day Code
          MOVE      OPARTIRD,D8                  * Recovery Day Time
          MOVE      "R",D1                       * Recovery Nurse Type
          MOVE      "ON",D2                      * staff category (op nurse=ON)
          CALL      WTSM0000                     * write team staff member
.
          MOVE      OPARNUD2,D6                  * Recovery Nurse 2 Day Code
          MOVE      OPARTIRD,D8                  * Recovery Day Time
          MOVE      "R",D1                       * Recovery Nurse Type
          MOVE      "ON",D2                      * staff category (op nurse=ON)
          CALL      WTSM0000                     * write team staff member
.
          MOVE      OPARNUF1,D6                  * Recovery Nurse 1 Front Code
          MOVE      OPARTIRF,D8                  * Recovery Front Time
          MOVE      "R",D1                       * Recovery Nurse Type
          MOVE      "ON",D2                      * staff category (op nurse=ON)
          CALL      WTSM0000                     * write team staff member
.
          MOVE      OPARNUF2,D6                  * Recovery Nurse 2 Front Code
          MOVE      OPARTIRF,D8                  * Recovery Front Time
          MOVE      "R",D1                       * Recovery Nurse Type
          MOVE      "ON",D2                      * staff category (op nurse=ON)
          CALL      WTSM0000                     * write team staff member
.
          MOVE      OPARNUB1,D6                  * Recovery Nurse 1 Back Code
          MOVE      OPARTIRB,D8                  * Recovery Back Time
          MOVE      "R",D1                       * Recovery Nurse Type
          MOVE      "ON",D2                      * staff category (op nurse=ON)
          CALL      WTSM0000                     * write team staff member
.
          MOVE      OPARNUB2,D6                  * Recovery Nurse 2 Back Code
          MOVE      OPARTIRB,D8                  * Recovery Back Time
          MOVE      "R",D1                       * Recovery Nurse Type
          MOVE      "ON",D2                      * staff category (op nurse=ON)
          CALL      WTSM0000                     * write team staff member
.
.         Write any comments from ZSC.46 & ZSC.47 to oprdedaf
.
          CALL      WCOM0000
.
.         Write any Caesarean Birth Details from ZSC.55-60 to oprcbdaf
.
          CALL      WCBD0000
.
PS149999  RETURN
+
.*****************************************************************************
.*                              WCBD0000           Called by: PS140000       *
.*          Load any Caesarean Birth Details into oprcbdaf (ZSC55-60)        *
.*****************************************************************************
WCBD0000  MOVE      ZERO,COUNTER
.
          WHILE     COUNTER < 20
            ADD       ONE,COUNTER
            MATCH     OPCBD002[COUNTER],Z70
            IF        !@EQUAL
              PACK      KEY12,UNIQUEKY,OPCBD002[COUNTER],SP70
              CALL      RDOPCBD1
              IF        OVRCD = 1
                CALL      CLOPRCBD
                CALL      MVOPCB00
                MOVE      UNIQUEKY,OPCBUNIQ
                MOVE      "HL7RECVR  ",OPCBCUID
                MOVE      CURRDATE,OPCBCDAT
                MOVE      CTIMEIS,OPCBCTIM
                CALL      WROPCBD1
              ENDIF
            ENDIF
          DO
.
WCBD9999  RETURN
+
.*****************************************************************************
.*                              WTSM0000           Called by: PS140000       *
.*          Load Theatre Staff Member variables and write record (ZSC26-32)  *
.*****************************************************************************
.
WTSM0000  CALL      CLOPRTSM                     * clear oprtsmaf variables
.
          MOVE      UNIQUEKY,OPTSUNID            * Unique ID
.
          MATCH     SP70,OPTSUNID
          GOTO      WTSM9999 IF EQUAL            * must be populated
.
          MOVE      ONE,OPTSTMNO                 * team number (default=1)
          MOVE      TWO,OPTSSIND                 * staff type (nurse=2)
          MOVE      D6,OPTSSCDE                  * field id from S14
          MOVE      OPDADATE,OPTSSDAT            * Start Date (CCYYMMDD)
          MOVE      D8,OPTSSTIM                  * Start Time (HH:MM:SS)
.
          MATCH     SP70,OPTSSCDE
          GOTO      WTSM9999 IF EQUAL            * must be populated
.
          MATCH     SP70,OPTSSDAT
          GOTO      WTSM9999 IF EQUAL            * must be populated
.
          MATCH     SP70,OPTSSTIM
          GOTO      WTSM9999 IF EQUAL            * must be populated
.
          PACK      KEY5,D2,SP5                  * staff category
          CALL      RDSCODE1
WTSM1000  CALL      RDKCODE1
          BRANCH    OVRCD,WTSM5000               * still write record
.
          MATCH     D2,TCODE                     * same staff category
          GOTO      WTSM5000 IF NOT EQUAL        * no - still write record
.
          MATCH     D1,TCINDC1
          GOTO      WTSM1000 IF NOT EQUAL        * first matching indc1 value
.
          MOVE      ACODE,OPTSSTYP               * Staff Category Code
.
WTSM5000  PACK      KEY35,OPTSUNID,OPTSTMNO,OPTSSIND,OPTSSCDE,OPTSSDAT,OPTSSTIM
          CALL      RAOPTSM1
          IF        OVRCD = 1
            CALL      WROPTSM1
          ENDIF
.
WTSM9999  RETURN
+
.*****************************************************************************
.*                              WCOM0000           Called by: PS140000       *
.*       Write type "008" and "002" comments to oprdedaf if present          *
.*****************************************************************************
.
.         First process the "008" type comments.
.
WCOM0000  MOVE      ZERO,SAVELINE                * initialise line count
.
.         Get the next comment line number
.
          PACK      KEY16,OPDAUNIQ,ZERO,ZERO,EIGHT,TILDA35
          CALL      RSOPDED1                     * posn after last typ 1 comment
          CALL      RPOPDED1                     * read previous record
          BRANCH    OVRCD,WCOM0100
.
          MATCH     OPDAUNIQ,OPDDUNIQ            * same theatre unique id still?
          GOTO      WCOM0100 IF NOT EQUAL        * no
.
          MATCH     "008",OPDDTYPE               * same comment type still ?
          GOTO      WCOM0100 IF NOT EQUAL        * no
.
          MOVE      OPDDLINE,SAVELINE            * save last line number
.
.         Loop through the temp for comment type "008" and for each matching
.         record found, write a corresponding record to oprdedaf
.
WCOM0100  PACK      KEY5,ONE,SP5
          CALL      RSTEMP5                      * position on type "1" records
WCOM0500  CALL      RKTEMP5                      * read next record
          BRANCH    OVRCD,WCOM5000               * eof - finished type "1"
.
          MATCH     "1",COMMTYPE                 * same type still ?
          GOTO      WCOM5000 IF NOT EQUAL        * no  -finished type "1"
.
          MOVE      OPDAUNIQ,OPDDUNIQ            * load theatre unique id
          MOVE      "008",OPDDTYPE               * load comment type
.
          ASSIGN    (SAVELINE + 1),FORM3         * load line number
          MOVE      FORM3,OPDDLINE
          MOVE      COMMTEXT,OPDDDATA            * load comment text
          PACK      KEY16,OPDDUNIQ,OPDDTYPE,OPDDLINE
          CALL      RAOPDED1                     * record on file ?
          IF        OVRCD = 1
            CALL      WROPDED1                   * no - write new record
          ENDIF
          MOVE      OPDDLINE,SAVELINE            * save last line number
          GOTO      WCOM0500                     * get next record
.
.         Now process the "002" type comments
.
WCOM5000  MOVE      ZERO,SAVELINE                * initialise line count
.
.         Get the next comment line number
.
          PACK      KEY16,OPDAUNIQ,ZERO,ZERO,TWO,TILDA35
          CALL      RSOPDED1                     * posn after last typ 1 comment
          CALL      RPOPDED1                     * read previous record
          BRANCH    OVRCD,WCOM5100
.
          MATCH     OPDAUNIQ,OPDDUNIQ            * same theatre unique id still?
          GOTO      WCOM5100 IF NOT EQUAL        * no
.
          MATCH     "002",OPDDTYPE               * same comment type still ?
          GOTO      WCOM5100 IF NOT EQUAL        * no
.
          MOVE      OPDDLINE,SAVELINE            * save last line number
.
.         Loop through the temp for comment type "002" and for each matching
.         record found, write a corresponding record to oprdedaf
.
WCOM5100  PACK      KEY5,TWO,SP5
          CALL      RSTEMP5                      * position on type "2" records
WCOM5500  CALL      RKTEMP5                      * read next record
          BRANCH    OVRCD,WCOM9999               * eof - finished type "2"
.
          MATCH     "2",COMMTYPE                 * same type still ?
          GOTO      WCOM9999 IF NOT EQUAL        * no  -finished type "2"
.
          MOVE      OPDAUNIQ,OPDDUNIQ            * load theatre unique id
          MOVE      "002",OPDDTYPE               * load comment type
.
          ASSIGN    (SAVELINE + 1),FORM3         * load line number
          MOVE      FORM3,OPDDLINE
          MOVE      COMMTEXT,OPDDDATA            * load comment text
          PACK      KEY16,OPDDUNIQ,OPDDTYPE,OPDDLINE
          CALL      RAOPDED1                     * record on file ?
          IF        OVRCD = 1
            CALL      WROPDED1                   * no - write new record
          ENDIF
          MOVE      OPDDLINE,SAVELINE            * save last line number
          GOTO      WCOM5500                     * get next record
.
WCOM9999  RETURN
+
.*****************************************************************************
.*                              SS140000           Called by: PS140000       *
.*                 Set variables for the S14 message                         *
.*****************************************************************************
.
SS140000  MOVE      SCH02001,USERID                   * user id (e.g. HTRAK)
          PACK      KEY10,USERID,SP10
          CALL      RDWBSE1
          IF        OVRCD<>0
            CALL      CLWEBSEC
          ENDIF
          MOVE      WBSEPCD,PASSCODE
.
          MOVE      ZERO,STAFFLAG                     * TSK 0926165
.
          MOVE      Z70,OPDEA003                      * clear opdea003
          MOVE      Z70,OPDEA021                      * clear opdea021
          MOVE      Z70,OPDEA022                      * clear opdea022
          CALL      CPOPSG00                          * clear oprsrgaf fields
          CALL      CPOPAR00                          * clear oprardaf fields
          CALL      CPOPCB00                          * clear oprcbdaf fields
.
          MOVE      ZSC00101,D10                      * theatre unique id
          RJUSTIFY  D10
          MOVE      D10,UNIQUEKY
          MOVE      D10,OPSRG001
          MOVE      D10,OPARD001
.
          STRIP     ZSC00401
          MOVELPTR  ZSC00401,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS140100 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC00401
          IF        @EQUAL
            MOVE      SP70,OPDEA003
          ELSE
            MOVE      ZSC00401,OPDEA003               * anaesthetic key (Cat.OA)
          ENDIF
.
SS140100  STRIP     ZSC00501
          MOVELPTR  ZSC00501,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS140200 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC00501
          IF        @EQUAL
            MOVE      SP70,OPARD002
          ELSE
            UNPACK    ZSC00501,DIM2H,DIM2N,DIM2S      * arrival time
            PACK      OPARD002,DIM2H,COLON,DIM2N,COLON,DIM2S
          ENDIF
.
SS140200  STRIP     ZSC00601
          MOVELPTR  ZSC00601,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS140300 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC00601
          IF        @EQUAL
            MATCH     "1",OPCNZSC6
            IF        !@EQUAL
              MOVE      SP70,OPDEA021
            ENDIF
            MOVE      SP70,OPDEA022
            MATCH     "1",OPCNZSC6
            IF        !@EQUAL
              MOVE      SP70,OPARD041
            ENDIF
            MOVE      SP70,OPARD042
          ELSE
            UNPACK    ZSC00601,DIM2H,DIM2N,DIM2S      * anaesthetic start time
            MATCH     "1",OPCNZSC6
            IF        !@EQUAL
              PACK      OPDEA021,DIM2H,COLON,DIM2N
            ENDIF
            PACK      OPDEA022,DIM2H,COLON,DIM2N
            MATCH     "1",OPCNZSC6
            IF        !@EQUAL
              PACK      OPARD041,DIM2H,COLON,DIM2N,COLON,DIM2S
            ENDIF
            PACK      OPARD042,DIM2H,COLON,DIM2N,COLON,DIM2S
          ENDIF
.
SS140300  STRIP     ZSC00701
          MOVELPTR  ZSC00701,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS140400 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC00701
          IF        @EQUAL
            MOVE      SP70,OPSRG003
            MOVE      SP70,OPSRG005
          ELSE
            UNPACK    ZSC00701,DIM2H,DIM2N,DIM2S      * surgery start time
            PACK      OPSRG003,DIM2H,COLON,DIM2N,COLON,DIM2S
            PACK      OPSRG005,DIM2H,COLON,DIM2N,COLON,DIM2S
          ENDIF
.
SS140400  STRIP     ZSC00801
          MOVELPTR  ZSC00801,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS140500 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC00801
          IF        @EQUAL
            MOVE      SP70,OPSRG004
            MOVE      SP70,OPSRG006
          ELSE
            UNPACK    ZSC00801,DIM2H,DIM2N,DIM2S      * surgery end time
            PACK      OPSRG004,DIM2H,COLON,DIM2N,COLON,DIM2S
            PACK      OPSRG006,DIM2H,COLON,DIM2N,COLON,DIM2S
          ENDIF
.
SS140500  STRIP     ZSC00901
          MOVELPTR  ZSC00901,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS140600 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC00901
          IF        @EQUAL
            MOVE      SP70,OPARD043
          ELSE
            UNPACK    ZSC00901,DIM2H,DIM2N,DIM2S      * anaesthetic stop time
            PACK      OPARD043,DIM2H,COLON,DIM2N,COLON,DIM2S
          ENDIF
.
.davvy2   MOVE      ZSC01001,OPARD045                 * already set in vzsc0000
.davvy2   MOVE      ZSC01101,OPSRG060                 * already set in vzsc0000
.
SS140600  STRIP     ZSC01201
          MOVELPTR  ZSC01201,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS140700 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC01201
          IF        @EQUAL
            MOVE      SP70,OPARD077
          ELSE
            UNPACK    ZSC01201,DIM2H,DIM2N,DIM2S      * time into recovery
            PACK      OPARD077,DIM2H,COLON,DIM2N,COLON,DIM2S
          ENDIF
.
SS140700  STRIP     ZSC01301
          MOVELPTR  ZSC01301,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS140800 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC01301
          IF        @EQUAL
            MOVE      SP70,OPARD080
          ELSE
            UNPACK    ZSC01301,DIM2H,DIM2N,DIM2S      * exit theatre complex
            PACK      OPARD080,DIM2H,COLON,DIM2N,COLON,DIM2S
          ENDIF
.
SS140800  STRIP     ZSC01401
          MOVELPTR  ZSC01401,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS140900 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC01401
          IF        @EQUAL
            MOVE      SP70,OPSRG071
          ELSE
            MOVE      ZSC01401,OPSRG071               * overnight indicator
          ENDIF
.
SS140900  STRIP     ZSC01501
          MOVELPTR  ZSC01501,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS141000 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC01501
          IF        @EQUAL
            MOVE      SP70,OPARD039
          ELSE
            UNPACK    ZSC01501,DIM2H,DIM2N,DIM2S      * time patient called for
            PACK      OPARD039,DIM2H,COLON,DIM2N,COLON,DIM2S
          ENDIF
.
SS141000  STRIP     ZSC01601
          MOVELPTR  ZSC01601,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS141100 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC01601
          IF        @EQUAL
            MOVE      SP70,OPARD061
          ELSE
            UNPACK    ZSC01601,DIM2H,DIM2N,DIM2S      * anaesthetic time out
            PACK      OPARD061,DIM2H,COLON,DIM2N,COLON,DIM2S
          ENDIF
.
SS141100  STRIP     ZSC01701
          MOVELPTR  ZSC01701,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS141200 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC01701
          IF        @EQUAL
            MATCH     "1",OPCNZSC6
            IF        @EQUAL
              MOVE      SP70,OPDEA021
              MOVE      SP70,OPARD041
            ENDIF
          ELSE
            MATCH     "1",OPCNZSC6
            IF        @EQUAL
              UNPACK    ZSC01701,DIM2H,DIM2N,DIM2S    * anaesthetic cannulation
              PACK      OPDEA021,DIM2H,COLON,DIM2N,COLON,DIM2S
              UNPACK    ZSC01701,DIM2H,DIM2N,DIM2S
              PACK      OPARD041,DIM2H,COLON,DIM2N,COLON,DIM2S
            ENDIF
          ENDIF
.
SS141200  STRIP     ZSC01801
          MOVELPTR  ZSC01801,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS141300 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC01801
          IF        @EQUAL
            MOVE      SP70,OPARD029
          ELSE
            UNPACK    ZSC01801,DIM2H,DIM2N,DIM2S      * surgical time out
            PACK      OPARD029,DIM2H,COLON,DIM2N,COLON,DIM2S
          ENDIF
.
SS141300  STRIP     ZSC01901
          MOVELPTR  ZSC01901,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS141400 IF EQUAL                 * no - no change
.
          MOVE      OPCNPACU,FORM1
          MATCH     BLANKSTR,ZSC01901
          IF        @EQUAL
            STORE     SP70,FORM1,OPARD060,D8,OPARD062,OPARD063,OPARD064
          ELSE
            UNPACK    ZSC01901,DIM2H,DIM2N,DIM2S      * ready for recovery
            PACK      KEY8,DIM2H,COLON,DIM2N,COLON,DIM2S
            STORE     KEY8,FORM1,OPARD060,D8,OPARD062,OPARD063,OPARD064
          ENDIF
.
SS141400  STRIP     ZSC02001
          MOVELPTR  ZSC02001,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS141500 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC02001
          IF        @EQUAL
            MOVE      SP70,OPARD071
          ELSE
            UNPACK    ZSC02001,DIM2H,DIM2N,DIM2S      * time into recovery front
            PACK      OPARD071,DIM2H,COLON,DIM2N,COLON,DIM2S
          ENDIF
.
SS141500  STRIP     ZSC02101
          MOVELPTR  ZSC02101,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS141600 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC02101
          IF        @EQUAL
            MOVE      SP70,OPARD074
          ELSE
            UNPACK    ZSC02101,DIM2H,DIM2N,DIM2S      * time into recovery back
            PACK      OPARD074,DIM2H,COLON,DIM2N,COLON,DIM2S
          ENDIF
.
SS141600  STRIP     ZSC02201
          MOVELPTR  ZSC02201,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS141700 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC02201
          IF        @EQUAL
            MOVE      SP70,OPARD085
          ELSE
            UNPACK    ZSC02201,DIM2H,DIM2N,DIM2S      * ready to depart time
            PACK      OPARD085,DIM2H,COLON,DIM2N,COLON,DIM2S
          ENDIF
.
SS141700  STRIP     ZSC02301
          MOVELPTR  ZSC02301,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS141800 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC02301
          IF        @EQUAL
            MOVE      SP70,OPARD083
          ELSE
            UNPACK    ZSC02301,DIM2H,DIM2N,DIM2S      * time to icu
            PACK      OPARD083,DIM2H,COLON,DIM2N,COLON,DIM2S
          ENDIF
.
SS141800  STRIP     ZSC02401
          MOVELPTR  ZSC02401,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS141900 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC02401
          IF        @EQUAL
            MOVE      SP70,OPARD082
          ELSE
            UNPACK    ZSC02401,DIM2H,DIM2N,DIM2S      * time patient died
            PACK      OPARD082,DIM2H,COLON,DIM2N,COLON,DIM2S
          ENDIF
.
SS141900  STRIP     ZSC02501
          MOVELPTR  ZSC02501,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS142000 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC02501
          IF        @EQUAL
            MOVE      SP70,OPARD030
            MOVE      SP70,OPARD031
          ELSE
            UNPACK    ZSC02501,OPARD030,DIM2H,DIM2N,DIM2S   * clin. review dt/tm
            PACK      OPARD031,DIM2H,COLON,DIM2N,COLON,DIM2S
          ENDIF
.
SS142000  STRIP     ZSC02601
          MOVELPTR  ZSC02601,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS142100 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC02601
          IF        @EQUAL
            MOVE      SP70,OPARD003
          ELSE
            MOVE      ZSC02601,OPARD003               * admitting nurse code
          ENDIF
.
SS142100  STRIP     ZSC02701
          MOVELPTR  ZSC02701,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS142200 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC02701
          IF        @EQUAL
            MOVE      SP70,OPARD078
          ELSE
            MOVE      ZSC02701,OPARD078               * recov. nurse day 1 code
          ENDIF
.
SS142200  STRIP     ZSC02801
          MOVELPTR  ZSC02801,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS142300 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC02801
          IF        @EQUAL
            MOVE      SP70,OPARD079
          ELSE
            MOVE      ZSC02801,OPARD079               * recov. nurse day 2 code
          ENDIF
.
SS142300  STRIP     ZSC02901
          MOVELPTR  ZSC02901,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS142400 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC02901
          IF        @EQUAL
            MOVE      SP70,OPARD072
          ELSE
            MOVE      ZSC02901,OPARD072               * recov nurse front 1 code
          ENDIF
.
SS142400  STRIP     ZSC03001
          MOVELPTR  ZSC03001,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS142500 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC03001
          IF        @EQUAL
            MOVE      SP70,OPARD073
          ELSE
            MOVE      ZSC03001,OPARD073               * recov nurse front 2 code
          ENDIF
.
SS142500  STRIP     ZSC03101
          MOVELPTR  ZSC03101,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS142600 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC03101
          IF        @EQUAL
            MOVE      SP70,OPARD075
          ELSE
            MOVE      ZSC03101,OPARD075               * recov. nurse back 1 code
          ENDIF
.
SS142600  STRIP     ZSC03201
          MOVELPTR  ZSC03201,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS142700 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC03201
          IF        @EQUAL
            MOVE      SP70,OPARD076
          ELSE
            MOVE      ZSC03201,OPARD076               * recov. nurse back 2 code
          ENDIF
.
SS142700  STRIP     ZSC03301
          MOVELPTR  ZSC03301,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS142800 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC03301
          IF        @EQUAL
            MOVE      SP70,OPARD004
          ELSE
            MOVE      ZSC03301,OPARD004               * arrival late reason
          ENDIF
.
SS142800  STRIP     ZSC03401
          MOVELPTR  ZSC03401,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS142900 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC03401
          IF        @EQUAL
            MOVE      SP70,OPARD046
          ELSE
            MOVE      ZSC03401,OPARD046               * anaesthetic delay reason
          ENDIF
.
SS142900  STRIP     ZSC03501
          MOVELPTR  ZSC03501,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS143000 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC03501
          IF        @EQUAL
            MOVE      SP70,OPSRG007
          ELSE
            MOVE      ZSC03501,OPSRG007               * Surg. Start Late Reason
          ENDIF
.
SS143000  STRIP     ZSC03601
          MOVELPTR  ZSC03601,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS143100 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC03601
          IF        @EQUAL
            MOVE      SP70,OPARD086
          ELSE
            MOVE      ZSC03601,OPARD086               * reason for overnight
          ENDIF
.
SS143100  STRIP     ZSC03701
          MOVELPTR  ZSC03701,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS143200 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC03701
          IF        @EQUAL
            MOVE      SP70,OPARD084
          ELSE
            MOVE      ZSC03701,OPARD084               * revovery in delay reason
          ENDIF
.
SS143200  STRIP     ZSC03801
          MOVELPTR  ZSC03801,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS143300 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC03801
          IF        @EQUAL
            MOVE      SP70,OPARD016
          ELSE
            MOVE      ZSC03801,OPARD016               * recovery bay
          ENDIF
.
SS143300  STRIP     ZSC03901
          MOVELPTR  ZSC03901,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS143400 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC03901
          IF        @EQUAL
            MOVE      SP70,OPARD017
          ELSE
            MOVE      ZSC03901,OPARD017               * acuity
          ENDIF
.
SS143400  STRIP     ZSC04001
          MOVELPTR  ZSC04001,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS143500 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC04001
          IF        @EQUAL
            MOVE      SP70,OPSRG055
          ELSE
            MOVE      ZSC04001,OPSRG055               * recov. exit delay reason
          ENDIF
.
SS143500  STRIP     ZSC04101
          MOVELPTR  ZSC04101,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS143600 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC04101
          IF        @EQUAL
            MOVE      SP70,OPARD034
          ELSE
            MOVE      ZSC04101,OPARD034               * blood loss
          ENDIF
.
SS143600  STRIP     ZSC04201
          MOVELPTR  ZSC04201,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS143700 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC04201
          IF        @EQUAL
            MOVE      SP70,OPSRG072
          ELSE
            MOVE      ZSC04201,OPSRG072               * fast post recovery
          ENDIF
.
SS143700  STRIP     ZSC04301
          MOVELPTR  ZSC04301,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS143800 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC04301
          IF        @EQUAL
            MOVE      SP70,OPSRG073
          ELSE
            MOVE      ZSC04301,OPSRG073               * admit post procedure
          ENDIF
.
SS143800  STRIP     ZSC04401
          MOVELPTR  ZSC04401,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS143900 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC04401
          IF        @EQUAL
            MOVE      SP70,OPSRG076
          ELSE
            MOVE      ZSC04401,OPSRG076               * no recovery
          ENDIF
.
SS143900  STRIP     ZSC04501
          MOVELPTR  ZSC04501,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS144000 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC04501
          IF        @EQUAL
            MOVE      SP70,OPSRG074
          ELSE
            MOVE      ZSC04501,OPSRG074               * recov. exit delay reason
          ENDIF
.
.         Now check if there is a final comment line in both ZSC.46 and ZSC.47
.         that needs to be written to the temp file
.
SS144000  MOVELPTR  ZSC04601,FIELDLEN
          IF        FIELDLEN > 0
            MOVE      ONE,COMMTYPE
            ADD       ONE,ZSC46CNT
            MOVE      ZSC46CNT,COMMLINE
            MOVE      ZSC04601,COMMTEXT
            CALL      WRTEMP5                    * write temp file comment line
          ENDIF
.
          MOVELPTR  ZSC04701,FIELDLEN
          IF        FIELDLEN > 0
            MOVE      TWO,COMMTYPE
            ADD       ONE,ZSC47CNT
            MOVE      ZSC47CNT,COMMLINE
            MOVE      ZSC04701,COMMTEXT
            CALL      WRTEMP5                    * write temp file comment line
          ENDIF
.
          STRIP     ZSC04801
          MOVELPTR  ZSC04801,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS144100 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC04801
          IF        @EQUAL
            MOVE      SP70,OPARD013
          ELSE
            MOVE      ZSC04801,OPARD013               * prosthesis
          ENDIF
.
SS144100  STRIP     ZSC04901
          MOVELPTR  ZSC04901,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS144200 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC04901
          IF        @EQUAL
            MOVE      SP70,OPSRG053
          ELSE
            MOVE      ZSC04901,OPSRG053               * diathermy type 1
          ENDIF
.
SS144200  STRIP     ZSC05001
          MOVELPTR  ZSC05001,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS144300 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC05001
          IF        @EQUAL
            MOVE      SP70,OPSRG054
          ELSE
            MOVE      ZSC05001,OPSRG054               * Diathermy Type 2
          ENDIF
.
SS144300  STRIP     ZSC05101
          MOVELPTR  ZSC05101,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS144400 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC05101
          IF        @EQUAL
            MOVE      SP70,OPSRG022
          ELSE
            MOVE      ZSC05101,OPSRG022               * Site Intact 1
          ENDIF
.
SS144400  STRIP     ZSC05201
          MOVELPTR  ZSC05201,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS144500 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC05201
          IF        @EQUAL
            MOVE      SP70,OPSRG028
          ELSE
            MOVE      ZSC05201,OPSRG028               * Site Intact 2
          ENDIF
.
SS144500  STRIP     ZSC05301
          MOVELPTR  ZSC05301,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS144600 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC05301
          IF        @EQUAL
            MOVE      SP70,OPSRG020
          ELSE
            MOVE      ZSC05301,OPSRG020               * equipment/item used 1
          ENDIF
.
SS144600  STRIP     ZSC05401
          MOVELPTR  ZSC05401,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS144700 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC05401
          IF        @EQUAL
            MOVE      SP70,OPSRG026
          ELSE
            MOVE      ZSC05401,OPSRG026               * equipment/item used 2
          ENDIF
.
SS144700  MOVE      ONE,COUNTER                       * initialise counter
.
          WHILE     COUNTER < 21
            STRIP     ZSC05501[COUNTER]
            MOVELPTR  ZSC05501[COUNTER],FORM3         * field populated ?
            COMPARE   ZERO,FORM3
            GOTO      SS144800 IF EQUAL               * no - no change
.
            MATCH     BLANKSTR,ZSC05501[COUNTER]
            IF        @EQUAL
              MOVE      SP70,OPCBD002[COUNTER]
            ELSE
              MOVE      ZSC05501[COUNTER],OPCBD002[COUNTER]  * caes. birth count
              RJUSTIFY  OPCBD002[COUNTER]
            ENDIF
.
SS144800    ADD       ONE,COUNTER                     * increment counter
          DO
.
          MOVE      ONE,COUNTER                       * initialise counter
.
          WHILE     COUNTER < 21
            STRIP     ZSC05601[COUNTER]
            MOVELPTR  ZSC05601[COUNTER],FORM3         * field populated ?
            COMPARE   ZERO,FORM3
            GOTO      SS144900 IF EQUAL               * no - no change
.
            MATCH     BLANKSTR,ZSC05601[COUNTER]
            IF        @EQUAL
              MOVE      SP70,OPCBD003[COUNTER]
            ELSE
              MOVE      ZSC05601[COUNTER],OPCBD003[COUNTER]  * caes. baby sex
            ENDIF
.
SS144900    ADD       ONE,COUNTER                     * increment counter
          DO
.
          MOVE      ONE,COUNTER                       * initialise counter
.
          WHILE     COUNTER < 21
            STRIP     ZSC05701[COUNTER]
            MOVELPTR  ZSC05701[COUNTER],FORM3         * field populated ?
            COMPARE   ZERO,FORM3
            GOTO      SS145000 IF EQUAL               * no - no change
.
            MATCH     BLANKSTR,ZSC05701[COUNTER]
            IF        @EQUAL
              MOVE      SP70,OPCBD004[COUNTER]
              MOVE      SP70,OPCBD005[COUNTER]        * birth date/time
            ELSE
              UNPACK    ZSC05701[COUNTER],OPCBD004[COUNTER],DIM2H,DIM2N,DIM2S
              PACK      OPCBD005[COUNTER],DIM2H,COLON,DIM2N,COLON,DIM2S
            ENDIF
.
SS145000    ADD       ONE,COUNTER                     * increment counter
          DO
.
          MOVE      ONE,COUNTER                       * initialise counter
.
          WHILE     COUNTER < 21
            STRIP     ZSC05801[COUNTER]
            MOVELPTR  ZSC05801[COUNTER],FORM3         * field populated ?
            COMPARE   ZERO,FORM3
            GOTO      SS145100 IF EQUAL               * no - no change
.
            MATCH     BLANKSTR,ZSC05801[COUNTER]
            IF        @EQUAL
              MOVE      SP70,OPCBD006[COUNTER]
            ELSE
              MOVE      ZSC05801[COUNTER],OPCBD006[COUNTER]  * caes. birth U/R
              RJUSTIFY  OPCBD006[COUNTER]
            ENDIF
.
SS145100    ADD       ONE,COUNTER                     * increment counter
          DO
.
          MOVE      ONE,COUNTER                       * initialise counter
.
          WHILE     COUNTER < 21
            STRIP     ZSC05901[COUNTER]
            MOVELPTR  ZSC05901[COUNTER],FORM3         * field populated ?
            COMPARE   ZERO,FORM3
            GOTO      SS145200 IF EQUAL               * no - no change
.
            MATCH     BLANKSTR,ZSC05901[COUNTER]
            IF        @EQUAL
              MOVE      SP70,OPCBD007[COUNTER]
            ELSE
              MOVE      ZSC05901[COUNTER],OPCBD007[COUNTER] * caes. birth weight
              RJUSTIFY  OPCBD007[COUNTER]
            ENDIF
.
SS145200    ADD       ONE,COUNTER                     * increment counter
          DO
.
          MOVE      ONE,COUNTER                       * initialise counter
.
          WHILE     COUNTER < 21
            STRIP     ZSC06001[COUNTER]
            MOVELPTR  ZSC06001[COUNTER],FORM3         * field populated ?
            COMPARE   ZERO,FORM3
            GOTO      SS145300 IF EQUAL               * no - no change
.
            MATCH     BLANKSTR,ZSC06001[COUNTER]
            IF        @EQUAL
              MOVE      SP70,OPCBD008[COUNTER]
            ELSE
              UNPACK    ZSC06001[COUNTER],DIM2H,DIM2N,DIM2S * placenta del. time
              PACK      OPCBD008[COUNTER],DIM2H,COLON,DIM2N,COLON,DIM2S
            ENDIF
.
SS145300    ADD       ONE,COUNTER                     * increment counter
          DO
.
SS145400  STRIP     ZSC06101
          MOVELPTR  ZSC06101,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS145500 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC06101
          IF        @EQUAL
            MOVE      SP70,OPARD115
          ELSE
            UNPACK    ZSC06101,DIM2H,DIM2N,DIM2S      * Adm Nurse Start Time
            PACK      OPARD115,DIM2H,COLON,DIM2N,COLON,DIM2S
          ENDIF
.
SS145500  STRIP     ZSC06201
          MOVELPTR  ZSC06201,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS145600 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC06201
          IF        @EQUAL
            MOVE      SP70,OPARD116
          ELSE
            UNPACK    ZSC06201,DIM2H,DIM2N,DIM2S      * Adm Nurse End Time
            PACK      OPARD116,DIM2H,COLON,DIM2N,COLON,DIM2S
          ENDIF
.
SS145600  STRIP     ZSC06301
          MOVELPTR  ZSC06301,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS145700 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC06301
          IF        @EQUAL
            MOVE      SP70,OPSRG080
          ELSE
            UNPACK    ZSC06301,DIM2H,DIM2N,DIM2S      * Wheels In Time
            PACK      OPSRG080,DIM2H,COLON,DIM2N,COLON,DIM2S
          ENDIF
.
SS145700  STRIP     ZSC06401
          MOVELPTR  ZSC06401,FORM3                    * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS149000 IF EQUAL                 * no - no change
.
          MATCH     BLANKSTR,ZSC06401
          IF        @EQUAL
            MOVE      SP70,OPSRG081
          ELSE
            UNPACK    ZSC06401,DIM2H,DIM2N,DIM2S      * Wheels Out Time
            PACK      OPSRG081,DIM2H,COLON,DIM2N,COLON,DIM2S
          ENDIF
.
SS149000  MOVE      ONE,TEAMNUMB                      * default team number
.
SS149999  RETURN
+
.*****************************************************************************
.*                              PP030000           Called by: PROC0000       *
.*              Process the P03 message - write/update PAS database          *
.* Requires: Valid read on patmchgf for transaction code (for Misc. Item)    *
.*           Valid read on patitemn for transaction code (for CMBS Item)     *
.*           Valid read on patvisaf for visit number                         *
.*****************************************************************************
.
.         First check that we have at least one FT1 segment
.
PP030000  CALL      IBACLOCK                     * load current date/time
          PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
.
          BRANCH    FT1FOUND,PP039999            * no FT1 segments in message
.
          BRANCH    CMBFOUND,PP030090            * no CMBS items in message
.
.         There is one or more CMBS items in the message, so check what CMBS
.         items already exist on oprdetaf and oprpmbaf
.
          MOVE      ONE,TEAMNUMB                 * set default team number
          CALL      GETMBS00
.
.         BRANCH    PMBSFLAG,PP030090            * prov mbs already in oprpmbaf
.
.         Check if we found a provisional CMBS item on either oprdetaf
.         or oprpmbaf
.
.         MATCH     SP70,OPPMCMBS                * CMBS item code blank ?
.         GOTO      PP030090 IF EQUAL            * no - finished
.
.         The provisional CMBS is not in oprpmbaf so we need write
.         a record to oprpmbaf using that code
.
.         CALL      CLOPRPMB                     * clear oprpmbaf variables
.
.         MOVE      OPDAUNIQ,OPPMUNID            * load oprpmbaf variables
.         MOVE      TEAMNUMB,OPPMTMNO
.         MOVE      MBSFCODE,OPPMCMBS
.         ADD       ONE,MBSCOUNT
.         MOVE      MBSCOUNT,OPPMCNTR
.         MOVE      "   1",OPPMSERV              * set quantity to one
.         MOVE      ZERO,OPPMGSTA
.         MOVE      SP70,OPPMGSTC
.
.         PACK      KEY14,OPDAUNIQ,TEAMNUMB,OPPMCNTR,SP70
.         CALL      RAOPPMB1                     * record on file ?
.         IF        OVRCD = 1
.           CALL      WROPPMB1                   * no - write oprpmbaf record
.         ENDIF
.
PP030090  MOVE      FT1COUNT,SVFT1CNT            * save FT1 segment count
.
          COMPARE   ZERO,SVFT1CNT                * any FT1's to process ?
          GOTO      PP039999 IF EQUAL            * no - finished
.
.         There is one or more valid FT1 segments
.
          MOVE      ZERO,FT1COUNT                * initialise FT1 segment count
.
.         Only check for theatre items if this is an OPR visit (TSK 0954083)
.
          MATCH     ZEROVISN,OPDAADMN            * OPR visit number ?
          GOTO      PP030095 IF EQUAL            * no
.
          MATCH     PVIBILL,OPDAADMN             * same visit number ?
          GOTO      PP030095 IF NOT EQUAL        * no
.
          CALL      USIMB000                     * get the initial patmmbs
          CALL      USGIM000                     * locate existing item records
.
PP030095  CALL      CLPMSMTI                     * clear pmsmtiaf fields
.
.         Clear FT1 temp file load variables
.
          MOVE      ZERO,LOADAMTP                * FT1.12.1
          MOVE      ZERO,LOADAMTT                * FT1.12.1
          MOVE      SP70,LOADCTYP                * FT1.26.1
          MOVE      SP70,LOADDESC                * FT1.8.1
          MOVE      SP70,LOADITEM                * FT1.7.1
          MOVE      SP70,LOADMGRP                * FT1.7.3
          MOVE      SP70,LOADPROC                * FT1.25.1
          MOVE      ZERO,LOADRBAT                * FT1.12.1
          MOVE      SP70,LOADREFN                * FT1.23.1
          MOVE      ZERO,LOADSERV                * FT1.10.1
          MOVE      SP70,LOADTDAT                * FT1.4.1
          MOVE      SP70,LOADUNIQ                * FT1.3.1
.
.         Loop through the temp file looking for all the FT1 segment records
.
          PACK      KEY15,FT1SEGMT,SP20
          CALL      RSTEMP1                      * position on FT1 segment
PP030100  CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,PP030150               * eof - finished
.
          MATCH     FT1SEGMT,RTMPSEGI            * same segment still ?
          GOTO      PP030150 IF NOT EQUAL        * no - finished
.
          COMPARE   FT1COUNT,RTMPSEGC            * same segment count still ?
          GOTO      PP030200 IF EQUAL            * yes
.
          ADD       ONE,FT1COUNT                 * no - incr. FT1 segment count
.
          COMPARE   ONE,FT1COUNT                 * first FT1 segment ?
          GOTO      PP030200 IF EQUAL            * yes
.
.         We have a new segment or there are no more segments and therefore
.         we have completed loading the fields for the previous FT1 segment,
.         so write, update or delete records according to the transaction type
.
. *** PROCESS ITEM ***
PP030150  PERFORM   TRANSFLG,AMIS0000:           * add miscellaneous charge
                             DMIS0000:           * delete miscellaneous charge
                             ACMB0000:           * add CBMS item
                             DCMB0000            * delete CBMS item
.
          SUB       ONE,SVFT1CNT                 * decrement FT1 count
          COMPARE   ZERO,SVFT1CNT                * last FT1 record ?
          GOTO      PP030180 IF NOT EQUAL        * no
.
PP030160  BRANCH    CMBFOUND,PP039999            * no CMBS items in message
.
.         There was at least one CMBS item in the message, so process
.         ???????
.
.0846231  CALL      USIMB000                * get the initial patmmbs
.0846231  CALL      USGIM000                * locate existing item records
.
          CALL      USMBS000                * set up patient MBS account
          CALL      USMMB000                * Write MBS Code to medical records
.
          MOVE      "017",TADTTYPE          * write theatre item audit detail
          PROC      OPTHETAT
.
          GOTO      PP039999
.
PP030180  CALL      CLPMSMTI                     * clear pmsmtiaf fields
.
.         Load the relevant field/component
.
PP030200  BRANCH    RTMPFLDN,PP030100:           * Set ID - info only
                             PP030100:           * Not in use
                             PP030300:           * Transaction Batch ID
                             PP030400:           * Transaction Date
                             PP030100:           * Not in use
                             PP030600:           * Transaction Type
                             PP030700:           * Transaction Code
                             PP030800:           * Transaction Description
                             PP030100:           * Not in use
                             PP031000:           * Transaction Quantity
                             PP030100:           * Not in use
                             PP031200:           * Transaction Amount
                             PP030100:           * Not in use
                             PP030100:           * Not in use
                             PP030100:           * Not in use
                             PP030100:           * Not in use
                             PP030100:           * Not in use
                             PP030100:           * Not in use
                             PP030100:           * Not in use
                             PP030100:           * Not in use
                             PP030100:           * Not in use
                             PP030100:           * Not in use
                             PP032300:           * Filler Order Number
                             PP030100:           * Not in use
                             PP032500:           * Procedure Code
                             PP032600            * Procedure Code Modifier
.
.                   Invalid field number, so ignore
.
          GOTO      PP030100
.
.         FT1.3  Transaction Batch ID (ST) - Mandatory for CMBS items.
.
PP030300  BRANCH    RTMPCMPN,PP030301
          GOTO      PP030100
.
.         There will only be temp file records for this field for CMBS items.
.         It is irrelevant and not collected for Miscellaneous charges.
.         *** NB: May exist for misc. items charged through theatre. ***
.
PP030301  MOVE      RTMPVRBL,LOADUNIQ
          RJUSTIFY  LOADUNIQ
          GOTO      PP030100
.
.         FT1.4  Transaction Date (TS) - Mandatory
.
PP030400  BRANCH    RTMPCMPN,PP030401
          GOTO      PP030100
.
PP030401  MOVE      RTMPVRBL,LOADTDAT
          GOTO      PP030100
.
.         FT1.6  Transaction Type (IS) - Mandatory
.
PP030600  BRANCH    RTMPCMPN,PP030601
          GOTO      PP030100
.
PP030601  STRIP     RTMPVRBL
          MATCH     "CG",RTMPVRBL
          IF        @EQUAL
            MOVE      ONE,TRANSFLG               * set flag for add misc. charge
          ENDIF
          MATCH     "CD",RTMPVRBL
          IF        @EQUAL
            MOVE      TWO,TRANSFLG               * set flag for del misc. charge
          ENDIF
          MATCH     "MB",RTMPVRBL
          IF        @EQUAL
            MOVE      THREE,TRANSFLG             * set flag for add CMBS item
          ENDIF
          MATCH     "MD",RTMPVRBL
          IF        @EQUAL
            MOVE      FOUR,TRANSFLG              * set flag for del CMBS item
          ENDIF
.
          GOTO      PP030100
.
.         FT1.7  Transaction Code (CE) - Mandatory
.
PP030700  BRANCH    RTMPCMPN,PP030701:           * identifier (ST)
                             PP030702:           * text (ST)
                             PP030703:           * name of coding system (ST)
                             PP030704:           * alternate identifier (ST)
                             PP030705:           * alternate text (ST)
                             PP030706            * name of alt. cod. system (ST)
          GOTO      PP030100
.
PP030701  MOVE      RTMPVRBL,LOADITEM
          GOTO      PP030100
.
PP030702  GOTO      PP030100
.
PP030703  MOVE      RTMPVRBL,LOADMGRP            * used for nzpribil (Cat.FI)
          GOTO      PP030100
.
PP030704  GOTO      PP030100
.
PP030705  GOTO      PP030100
.
PP030706  GOTO      PP030100
.
.         FT1.8  Transaction Description (ST) - Conditional Mandatory
.
PP030800  BRANCH    RTMPCMPN,PP030801
          GOTO      PP030100
.
PP030801  MOVE      RTMPVRBL,LOADDESC
          GOTO      PP030100
.
.         FT1.10  Transaction Quantity (NM) - Mandatory
.
PP031000  BRANCH    RTMPCMPN,PP031001
          GOTO      PP030100
.
PP031001  STRIP     RTMPVRBL
          MOVE      RTMPVRBL,LOADSERV
          GOTO      PP030100
.
.         FT1.12  Transaction Amount - Unit (CP) - Conditional Mandatory
.
PP031200  BRANCH    RTMPCMPN,PP031201:           * price (MO)
                             PP031203:           * price type (ID)
                             PP031204:           * from value (NM)
                             PP031205:           * to value (NM)
                             PP031206:           * range units (CE)
                             PP031207            * range type (ID)
          GOTO      PP030100
.
.         There are three amounts (total amount, patient portion and
.         rebate portion) in three separate temp file records, each
.         with a different field number count, so load accordingly to
.         the relevant database field.
.
PP031201  STRIP     RTMPVRBL
          IF        RTMPFCNT = 1
            MOVE      RTMPVRBL,LOADAMTT
          ELSE
            IF        RTMPFCNT = 2
              MOVE      RTMPVRBL,LOADAMTP
            ELSE
              MOVE      RTMPVRBL,LOADRBAT
            ENDIF
          ENDIF
          GOTO      PP030100
.
PP031202  GOTO      PP030100
.
PP031203  GOTO      PP030100
.
PP031204  GOTO      PP030100
.
PP031205  GOTO      PP030100
.
PP031206  GOTO      PP030100
.
PP031207  GOTO      PP030100
.
.         FT1.23  Filler Order Number (EI) - Mandatory
.
PP032300  BRANCH    RTMPCMPN,PP032301:           * entity identifier (ST)
                             PP032302:           * namespace id (IS)
                             PP032303:           * universal id (ST)
                             PP032304            * universal id type (ID)
          GOTO      PP030100
.
PP032301  MOVE      RTMPVRBL,LOADREFN
          GOTO      PP030100
.
PP032302  GOTO      PP030100
.
PP032303  GOTO      PP030100
.
PP032304  GOTO      PP030100
.
.         FT1.25  Procedure Code (CE) - Misc. Charge only
.
PP032500  BRANCH    RTMPCMPN,PP032501:           * identifier (ST)
                             PP032502:           * text (ST)
                             PP032503:           * name of coding system (ST)
                             PP032504:           * alternate identifier (ST)
                             PP032505:           * alternate text (ST)
                             PP032506            * name of alt. cod. system (ST)
          GOTO      PP030100
.
PP032501  MOVE      RTMPVRBL,LOADPROC
          GOTO      PP030100
.
PP032502  GOTO      PP030100
.
PP032503  GOTO      PP030100
.
PP032504  GOTO      PP030100
.
PP032505  GOTO      PP030100
.
PP032506  GOTO      PP030100
.
.         FT1.26  Procedure Code Modifier (CE) - Misc. Charge only
.
PP032600  BRANCH    RTMPCMPN,PP032601:           * identifier (ST)
                             PP032602:           * text (ST)
                             PP032603:           * name of coding system (ST)
                             PP032604:           * alternate identifier (ST)
                             PP032605:           * alternate text (ST)
                             PP032606            * name of alt. cod. system (ST)
          GOTO      PP030100
.
PP032601  STRIP     RTMPVRBL
          MOVELPTR  RTMPVRBL,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PP030100 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,RTMPVRBL            * field null ?
          GOTO      PP030100 IF EQUAL            * yes - no change
.
          MOVE      RTMPVRBL,LOADCTYP
          GOTO      PP030100
.
PP032602  GOTO      PP030100
.
PP032603  GOTO      PP030100
.
PP032604  GOTO      PP030100
.
PP032605  GOTO      PP030100
.
PP032606  GOTO      PP030100
.
PP039999  MOVE      SP8,OPDAADMN                 * clear OPR vars (TSK 0954083)
          MOVE      SP10,OPDAUNIQ
          RETURN
+
.*****************************************************************************
.*                              AMIS0000           Called by: PP030000       *
.*                     Add a miscellaneous charge to pmsmtiaf                *
.* Requires: Valid read on patvisaf record                                   *
.*           Valid read on patmchgf miscellaneous charge code record         *
.*           Population of LOAD.... variables from PP030000                  *
.*           Clearing of all pmsmtiaf fields                                 *
.*****************************************************************************
.
.         Load data from message variables
.
AMIS0000  BRANCH    NZPRIBIL,AMIS0500            * using nzprivate billing
.
. Aust Only:
.         If LOADCTYP is not populated, default value to end up as "Used"
.         (TSK: 0858058)
.
          STRIP     LOADCTYP                     * TSK 0953886
          MOVELPTR  LOADCTYP,FORM1
          IF        FORM1 = 0
            MOVE      "1",LOADCTYP               * consumption type for Aust
          ENDIF
.
. Note as per the hl7 manual we receive "0=Not Used/1=Used/2=Exp" which then
. needs to be mapped due to an FD change in pmsmti for TSK 0837479 (V10.10/11)
          MATCH     "0",LOADCTYP
          IF        @EQUAL
            MOVE      "1",PMMICTYP               * not used
          ELSE
            MATCH     "1",LOADCTYP
            IF        @EQUAL
              MOVE      "0",PMMICTYP             * used
            ELSE
              MOVE      "2",PMMICTYP             * expired
            ENDIF
          ENDIF
.
          MOVE      LOADAMTP,PMMIAMTP
          MOVE      LOADAMTT,PMMIAMTT
          MOVE      ZERO,PMMIAMTG
          MOVE      LOADRBAT,PMMIRBAT
          IF        CFEETYP=9
            MOVE      PTMCALGR,PMMIMGRP      * Misc.Charge group Cat FN
            PACK      PMMIBTCH,MMSCGRP,SP70  * Misc.Charge group Cat FI
          ELSE
            MOVE      MMSCGRP,PMMIMGRP
            MOVE      ONE,PMMIBTCH
          ENDIF
          IF        IBCNUGST=2
            MOVE      PTMCGSTA,PMMIGSTA          * load GST applicable flag
            MOVE      PTMCGSTC,PMMIGSTC          * load GST payable code
          ENDIF
          MOVE      MITMTYP,PMMIRTYP             * load record type
.
          GOTO      AMIS0700
.
. NZ Private Only:
AMIS0500  MOVE      SP1,PMMICTYP            * N/A for nzprivate
          MOVE      "3",PMMIITYP            * nzpribil - no mchrg validation
          MOVE      LOADMGRP,PMMIMGRP       * nzpribil - Misc.Chrg group Cat FI
          MOVE      ONE,PMMIBTCH
          MOVE      "3",PMMIRTYP            * load record type
          MOVE      SP70,PMMICNTR           * contract/fund
.
. check NZSPPROC (FT1.25) to determine pmmisunq (nzprivate unique theatre count)
          MOVE      "  1",PMMISUNQ          * default nz proc unique ID
          OPEN      NZPSPRA1,"nzpspraf"
          PACK      KEY11,PVIBILL,SP70
          CALL      RSNZSPR1
AMIS0550  CALL      RKNZSPR1
          BRANCH    OVRCD,AMIS0600
.
          MATCH     KEY11,NZSPADMN
          GOTO      AMIS0600 IF NOT EQUAL   * same visit ?
.
          MATCH     SP70,LOADPROC
          IF        !@EQUAL
            MATCH     LOADPROC,NZSPPROC
            GOTO      AMIS0550 IF NOT EQUAL   * same procedure ?
          ENDIF
.
          COMPARE   ONE,NZSPPRIM
          IF        @EQUAL
            MOVE      NZSPUNIQ,PMMISUNQ     * use primary as default
          ENDIF
.
          COMPARE   TWO,NZSPPIND
          IF        @LESS
            MOVE      NZSPUNIQ,PMMISUNQ     * use planned/performed
            GOTO      AMIS0600              * finished
          ENDIF
          GOTO      AMIS0550
.
. check PMMIINCT (FT1.26) to determine pmmiamtp/pmmiamtt/pmmiamtg/pmmirbat
AMIS0600  MATCH     "1",LOADCTYP
          IF        !@EQUAL
            MATCH     "2",LOADCTYP
            IF        !@EQUAL
              MOVE      "0",LOADCTYP        * default to zero if not 1 or 2
            ENDIF
          ENDIF
          MOVE      LOADCTYP,PMMIINCT       * inclusion type for nzprivate
.
          PACK      KEY11,PVIBILL,PMMISUNQ
          CALL      RDNZSPR1                * get claim code for procedure
          BRANCH    OVRCD,AMIS0605
.
          MATCH     "1",PMMIINCT
          IF        !@EQUAL
            MOVE      NZSPCNTR,PMMICNTR     * contract/fund if not patient
          ENDIF
.
          MOVE      SP1,TCINDC7
          PACK      KEY5,CATCL,NZSPCLMN
          CALL      RDCODE1                 * get funding type (indc.7=P,F," ")
          BRANCH    OVRCD,AMIS0605
.
          MATCH     "P",TCINDC7
          IF        @EQUAL
            MOVE      SP70,PMMICNTR         * blank funder for patient contract
          ENDIF
.
          MOVE      PMMIINCT,F1
          BRANCH    F1,AMIS0610,AMIS0620    * allocate based on inclusion type
.
AMIS0605  MOVE      ZERO,PMMIAMTT           * gross total
          MOVE      ZERO,PMMIAMTP           * patient portion
          MOVE      LOADAMTT,PMMIAMTG       * government portion
          MOVE      ZERO,PMMIRBAT           * rebate portion
          MATCH     SP1,TCINDC7
          IF        @EQUAL
            MOVE      LOADAMTT,PMMIAMTT     * gross total
            MOVE      LOADAMTT,PMMIAMTP     * patient portion
          ENDIF
          GOTO      AMIS0700
.
AMIS0610  MOVE      LOADAMTT,PMMIAMTT       * gross total
          MOVE      LOADAMTT,PMMIAMTP       * patient portion
          MOVE      ZERO,PMMIAMTG           * government portion
          MOVE      ZERO,PMMIRBAT           * rebate portion
          GOTO      AMIS0700
.
AMIS0620  MOVE      LOADAMTT,PMMIAMTT       * gross total
          MOVE      ZERO,PMMIAMTP           * patient portion
          MOVE      ZERO,PMMIAMTG           * government portion
          MOVE      LOADAMTT,PMMIRBAT       * rebate portion
          MATCH     SP1,TCINDC7
          IF        @EQUAL
            MOVE      LOADAMTT,PMMIAMTP     * patient portion
            MOVE      ZERO,PMMIRBAT         * rebate portion
          ENDIF
          GOTO      AMIS0700
.
. Common to both Aus and NZ Private:
AMIS0700  UNPACK    LOADDESC,PMMIDESC,PMMIDES2   * item description
          MOVE      LOADITEM,PMMIITEM       * item code
          MOVE      LOADREFN,PMMIREFN       * reference (filler order number)
          MOVE      LOADSERV,PMMISERV       * service number (quantity)
          MOVE      LOADTDAT,PMMITDAT       * transaction date
          MOVE      LOADUNIQ,PMMIUNIQ    * unique id for itms added thru theatre
.
.         Load the remaining pmsmtiaf variables
.
          MOVE      PVIBILL,PMMIVISN             * load visit number
          MOVE      PVIURNO,PMMIURNO             * load U/R number
          MOVE      PVITYPE,FORM2                * load visit type
          MOVE      FORM2,PMMISYST
          MOVE      ONE,PMMIINVN                 * load no. of invoices
.
          PACK      PMMIDTCR,CCC,CYY,CMM,CDD     * load date created
          REP       " 0",PMMIDTCR
          CALL      IBACLOCK
          MOVE      CTIMEIS,PMMITMCR             * load time created
          MOVE      "hl7recvr  ",PMMIIDCR        * load receiver pgm as user id
          MOVE      "0",PMMIMVBR                 * load MV flag
.
          PACK      PMMIACOI,SP70       * After Care Override Indicator
          PACK      PMMIDSOV,SP70       * Duplicate Service Override
          PACK      PMMISTXT,SP70       * Service Text
          PACK      PMMILSPN,SP70       * Location Specific Practice No(LSPN)
          PACK      PMMIMPOV,SP70       * Multi Procedure Override
          PACK      PMMINMPT,SP70       * Number of Patients Seen
          PACK      PMMISDCD,SP70       * Self Deem Code (Cat Sd)
          PACK      PMMITDUR,SP70       * Time Duration (Mins)
.
AMIS1000  MOVE      PMMIVISN,KEY8                * get next transaction no
          CALL      TRVISA1
          MOVE      PVITRAN,PMMITRAN             * load transaction number
.
          PACK      KEY14,PMMIVISN,PMMITRAN
          CALL      RAPMMTI1                     * transaction on file already ?
          COMPARE   ZERO,OVRCD
          GOTO      AMIS1000 IF EQUAL            * yes
.
          CALL      WRPMMTI1                     * write pending item record
.
AMIS1500  MATCH     "2",PTCNRP03                 * check for preadmission ?
          GOTO      AMIS2000 IF NOT EQUAL        * no
.
          COMPARE   ONE,ASTAT                    * preadmission ?
          GOTO      AMIS9999 IF EQUAL            * yes - don't write to patipenf
.
AMIS2000  MOVE      PVIBILL,KEY8
          CALL      RAIPEN1
          IF        OVRCD = 1
            MOVE      PVIBILL,KEY8
            MOVE      PVITYPE,IPSYSTM
            MOVE      PVISITE,IPSITE
            MOVE      SP3,PTIPRHLD
            MOVE      SP100,PTIPRDES
            MOVE      SEVEN,PTIPRSTA
            MOVE      SP100,PTIPSVAR
            CALL      WRIPEN1
          ENDIF
.
AMIS9999  RETURN
+
.*****************************************************************************
.*                              DMIS0000           Called by: PP030000       *
.*                    Delete a miscellaneous charge from pmsmtiaf            *
.*****************************************************************************
.
DMIS0000  PACK      KEY14,PVIBILL,SP20
          CALL      RSPMMTI1                     * position on visit
DMIS1500  CALL      RKPMMTI1                     * read next record
          BRANCH    OVRCD,DMIS1990               * eof - error
.
          MATCH     PVIBILL,PMMIVISN             * same visit still ?
          GOTO      DMIS1990 IF NOT EQUAL        * no - error
.
          MATCH     SP12,PMMIREFN                * reference number blank ?
          GOTO      DMIS1500 IF EQUAL            * yes - get next record
.
          PACK      DIM12,LOADREFN,SP20
          MATCH     PMMIREFN,DIM12               * same reference number ?
          GOTO      DMIS1500 IF NOT EQUAL        * no - get next record
.
.         A matching record record has been found, so delete it
.
          PACK      KEY14,PMMIVISN,PMMITRAN
          CALL      DEPMMTI1
.
          MATCH     "1",PTCNDSAE
          IF        @EQUAL
            MOVE      TWO,MATCHTYP               * item type (2=MiscChg)
            MOVE      TWO,MATCHREF               * item status (2=Match found)
            CALL      WCIT0000                   * Write Cancelled Items Table
          ENDIF
.
.         Now check if there are any more pmsmtiaf records for this visit.
.
          PACK      KEY14,PVIBILL,SP20
          CALL      RSPMMTI1                     * position on visit
          CALL      RKPMMTI1                     * read next record
          BRANCH    OVRCD,DMIS1600               * eof - no other records
.
          MATCH     PVIBILL,PMMIVISN             * same visit still ?
          GOTO      DMIS9999 IF EQUAL            * yes - other records found
.
.         No other pmsmtiaf records were found for this visit
.
DMIS1600  BRANCH    PVITYPE,DMIS1900:            * Emergency
                            DMIS1900:            * Outpatient
                            DMIS1700             * Inpatient
          GOTO      DMIS9999
.
.         This is an I/P visit, so check if the patient is discharged
.
DMIS1700  COMPARE   THREE,ASTAT                  * discharged ?
          GOTO      DMIS9999 IF NOT EQUAL        * no - finished
.
.         The patient is discharged, so check if it is a daycase or
.         an O/N stay.
.
          MATCH     ADATE,DDATE                  * daycase ?
          GOTO      DMIS1800 IF NOT EQUAL        * no
.
.         This is a daycase, so check if an invoice has been raised
.
          COMPARE   ZERO,AINVPRT                 * invoice raised yet ?
          GOTO      DMIS9999 IF EQUAL            * no - finished
          GOTO      DMIS1900                     * yes - delete patipenf record
.
.         This is an O/N visit
.
DMIS1800  COMPARE   ZERO,AINVPRT                 * invoice raised yet ?
          GOTO      DMIS9999 IF EQUAL            * no - finished
.
          MATCH     DDATE,ALACDTE                * final invoice raised ?
          GOTO      DMIS9999 IF NOT EQUAL        * no - finished
.
.         Delete the patipenf record if it exists
.
DMIS1900  MOVE      PVIBILL,KEY8
          CALL      RDIPEN1                      * patipenf record on file ?
          IF        OVRCD = 0
            CALL      DEIPEN1                    * yes - delete it
          ENDIF
          GOTO      DMIS9999                     * finished
.
DMIS1990  MATCH     "1",PTCNDSAE
          IF        @EQUAL
            MOVE      TWO,MATCHTYP               * item type (2=MiscChg)
            MOVE      ONE,MATCHREF               * item status (1=No match)
            CALL      WCIT0000                   * Write Cancelled Items Table
            GOTO      DMIS9999
          ENDIF
.
          MOVE      "Reference number not on file",ERRORDSC
          MOVE      "204",ERRORNUM
          CALL      EROR0000
          GOTO      DMIS9999
.
DMIS9999  RETURN
+
.*****************************************************************************
.*                               ACMB0000          Called by: PP030000       *
.*            Add a CMBS item from an FT1 segment to oprpmbaf                *
.* Requires: MBSCOUNT: Last count for oprpmbaf records for unique id/team    *
.* Returns:  MBSCOUNT: Updated count for oprpmbaf records for unique id/team *
.*****************************************************************************
.
ACMB0000  MATCH     "1",PTCNQP03
          IF        @EQUAL
            MOVE      ONE,F5                       * Load as separate items
            MOVE      F5,DIM5                      * and write multiple records.
          ELSE
            MOVE      LOADSERV,F5                  * Load quantity as sent and
            MOVE      F5,DIM5                      * and write a single record.
          ENDIF
.
          WHILE     F5 <= LOADSERV
            CALL      CLOPRPMB                     * clear oprpmbaf variables
.
            ADD       ONE,MBSCOUNT                 * increment CMBS count
.
            MOVE      LOADUNIQ,OPPMUNID
            MOVE      TEAMNUMB,OPPMTMNO
            MOVE      LOADITEM,OPPMCMBS
            MOVE      MBSCOUNT,OPPMCNTR
.0849641    MOVE      LOADSERV,DIM5
            UNPACK    DIM5,ANS,OPPMSERV
            MOVE      ZERO,OPPMGSTA
            MOVE      SP3,OPPMGSTC
            MOVE      LOADREFN,OPPMREFN
            MOVE      SP70,OPPMSPAR
.
            PACK      KEY14,OPPMUNID,OPPMTMNO,OPPMCNTR
            CALL      RAOPPMB1                     * record on file already ?
            IF        OVRCD = 1
              CALL      WROPPMB1                   * no - write oprpmbaf record
            ENDIF
            ADD       ONE,F5
          DO
.
ACMB9999  RETURN
+
.*****************************************************************************
.*                               ACMBNT00          Called by: P3NT0000       *
.*            Add a CMBS item from an FT1 segment (no theatre)               *
.*****************************************************************************
ACMBNT00  MATCH     "1",PTCNQP03
          IF        @EQUAL
            MOVE      ONE,F5                       * Load as separate items
            MOVE      F5,DIM5                      * and write multiple records.
          ELSE
            MOVE      LOADSERV,F5                  * Load quantity as sent and
            MOVE      F5,DIM5                      * and write a single record.
          ENDIF
.
          PACK      KEY9,LOADITEM,SP9
          PACK      KEY17,KEY9,LOADTDAT,SP70
          CALL      PATITMRD                       * CMBS item on file ?
          IF        OVRCD = 1
            MOVE      SP70,IMISGRP
            MOVE      SP70,PTITGSTA
            MOVE      SP70,PTITGSTC
          ENDIF
.
          WHILE     F5 <= LOADSERV
            CALL      CLPMSMTI                     * clear pmsmtiaf variables
.
            ADD       ONE,MBSCOUNT                 * increment CMBS count
.
            MOVE      PVIBILL,PMMIVISN
            MOVE      PVIURNO,PMMIURNO
            MOVE      PVITYPE,FORM2              * load visit type
            MOVE      FORM2,PMMISYST
            MOVE      " 1",PMMISESS
            MOVE      TWO,PMMIRTYP
.davrecvr   MOVE      MITMTYP,PMMIRTYP           * load record type
            MOVE      IMISGRP,PMMIMGRP           * ????????????????????????
.davrecvr   MOVE      MMSCGRP,PMMIMGRP
            MOVE      ONE,PMMIBTCH
            MOVE      ONE,PMMIINVN               * load no. of invoices
.
            IF        IBCNUGST=2
              MOVE      PTITGSTA,PMMIGSTA        * load GST applicable flag
              MOVE      PTITGSTC,PMMIGSTC        * load GST payable code
.davrecvr     MOVE      PTMCGSTA,PMMIGSTA        * load GST applicable flag
.davrecvr     MOVE      PTMCGSTC,PMMIGSTC        * load GST payable code
            ENDIF
.
            PACK      PMMIDTCR,CCC,CYY,CMM,CDD   * load date created
            REP       " 0",PMMIDTCR
            CALL      IBACLOCK
            MOVE      CTIMEIS,PMMITMCR           * load time created
            MOVE      "HL7RECVR  ",PMMIIDCR      * load receiver pgm as user id
            MOVE      "HL7RECVR  ",PMMIWUSR      * load receiver pgm as user id
            MOVE      "0",PMMIMVBR               * load MV flag
.
            MATCH     SP6,LOADPSTM
            IF        @EQUAL
              MOVE      SP8,PMMISVTM             * procedure start time (ZFT.1)
            ELSE
              UNPACK    LOADPSTM,D2,DIM2,D1,DIM1
              PACK      PMMISVTM,D2,COLON,DIM2,COLON,D1,DIM1
            ENDIF
.
            MOVE      LOADTDAT,PMMITDAT
            MOVE      LOADDESC,PMMIDESC
            MOVE      LOADAMTT,PMMIAMTT
            MOVE      LOADAMTP,PMMIAMTP
            MOVE      LOADRBAT,PMMIRBAT
            MOVE      LOADCTYP,PMMICTYP
.
            MOVE      LOADUNIQ,PMMIUNIQ
.davrecvr   PACK      PMMIPMBS,TEAMNUMB,MBSCOUNT
.           MOVE      TEAMNUMB,PMMITMNO
.           MOVE      MBSCOUNT,PMMIPMBS
            MOVE      LOADITEM,PMMIITEM
            MOVE      DIM5,PMMISERV
            MOVE      LOADREFN,PMMIREFN
            MOVE      SP70,PMMIDKSM              * Distance in kms
            MOVE      SP70,PMMISPAR
.
ACMBNT10    MOVE      PMMIVISN,KEY8              * get next transaction no
            CALL      TRVISA1
            MOVE      PVITRAN,PMMITRAN           * load transaction number
.
            PACK      KEY14,PMMIVISN,PMMITRAN
            CALL      RAPMMTI1                   * transaction on file already ?
            COMPARE   ZERO,OVRCD
            GOTO      ACMBNT10 IF EQUAL          * yes
.
            CALL      WRPMMTI1                   * write item charge record
            CALL      UPMBS000                   * write to patmmbsf
.
            ADD       ONE,F5
          DO
.
          MATCH     SP70,P03ANTYP
          IF        !@EQUAL
            MOVE      P03ANTYP,PMVXUD15          * Anaesthetic Type for Billing
            CALL      UPPMVX11
          ENDIF
.
          MOVE      "HL7RECVR  ",WBSEUID
          MOVE      PMMIVISN,OPDAADMN
          MOVE      ADATE,OPDADATE
          PROC      AUTOATYP                * automatic update admission type
.
ACMBNT99  RETURN
+
.------------------------------------------------------------
. Update MBS Coding File
.------------------------------------------------------------
UPMBS000  MOVE      ZERO,FORM3
          MOVE      PMMIVISN,DMMADMN
          PACK      KEY11,DMMADMN,SP10
          CALL      RDSMMBS1
UPMBS100  CALL      RDKMMBS1
          BRANCH    OVRCD OF UPMBS200
          MATCH     DMMADMN,PMMIVISN
          GOTO      UPMBS200 IF NOT EQUAL
          MOVE      MMRECN,FORM3
          GOTO      UPMBS100
.
UPMBS200  ADD       ONE,FORM3
          PACK      MMCODE,LOADITEM,SP10
          MOVE      PMMIVISN,MMADMN
          MOVE      FORM3,MMRECN
.
          MOVE      LOADDESC,PTMMDESC
          MOVE      LOADTDAT,MMDATE
.
          MATCH     SP6,LOADPSTM
          IF        @EQUAL
            MOVE      SP6,MMSTIM
          ELSE
            UNPACK    LOADPSTM,D2,DIM2
            PACK      MMSTIM,D2,COLON,DIM2
          ENDIF
          MATCH     SP6,LOADPETM
          IF        @EQUAL
            MOVE      SP6,MMETIM
          ELSE
            UNPACK    LOADPETM,D2,DIM2
            PACK      MMETIM,D2,COLON,DIM2
          ENDIF
.
          MOVE      LOADTEDT,PTMMEDAT
.
          MATCH     SP6,LOADRPST
          IF        @EQUAL
            MOVE      SP6,PTMMRPST
          ELSE
            UNPACK    LOADRPST,D2,DIM2
            PACK      PTMMRPST,D2,COLON,DIM2
          ENDIF
          MATCH     SP6,LOADRPET
          IF        @EQUAL
            MOVE      SP6,PTMMRPET
          ELSE
            UNPACK    LOADRPET,D2,DIM2
            PACK      PTMMRPET,D2,COLON,DIM2
          ENDIF
.
          MOVE      LOADAPRA,PTMMAPRA            * AHPRA ID value
          MOVE      ZERO,PTMMVAID                * 0 = no AHPRA ID sent
          MATCH     PTMMAPRA,SP70
          GOTO      UPMBS900 IF EQUAL
.
          MOVE      TWO,PTMMVAID                 * 2 = AHPRA ID sent
.
          PACK      KEY30,PTMMAPRA,SP70
          CALL      RSPMHCP7
          CALL      RKPMHCP7
          BRANCH    OVRCD,UPMBS900
.
          MATCH     PTMMAPRA,PMHCMPGN
          IF        @EQUAL
            MOVE      ONE,PTMMVAID               * 1 = AHPRA ID sent and matched
          ENDIF
.
UPMBS900  MOVE      LOADUNIQ,PTMMOPID
          MOVE      SP70,PTMMTMNO
          MOVE      SP70,MMSPARE
.
          PACK      KEY11,MMADMN,MMRECN
          CALL      WRMMBS1
UPMBS999  RETURN
+
.*****************************************************************************
.*                              DCMB0000           Called by: PP030000       *
.*                    Delete a CMBS item from pmsmtiaf                       *
.*****************************************************************************
DCMB0000  MOVE      ZERO,F5                 * count for separate item delete
.
          MOVE      LOADUNIQ,UNIQUEKY
          CALL      VALCAS00
          BRANCH    EXIT,DCMB9999
.
          MOVE      ONE,TEAMNUMB
.
DCMB0010  PACK      KEY10,OPDAUNIQ,SP70
          CALL      RDOPARD1                * arrival/recovery details
          BRANCH    OVRCD,DCMB0091
.
          PACK      KEY11,OPDAUNIQ,TEAMNUMB,SP70
          CALL      RDOPSRG1                * Read Operating Surgical details
          BRANCH    OVRCD,DCMB0095
.
          MATCH     SP70,OPSGTISS
          GOTO      DCMB0097 IF EQUAL       * Surgical time is blank
.
          MOVE      ZERO,F1
.
.0846231  CALL      USIMB000                * get the initial patmmbs
.0846231  CALL      USGIM000                * locate any existing items records
.
DCMB0025  PACK      KEY14,OPDAADMN,SP70
          CALL      RSPMMTI1
DCMB0026  CALL      RKPMMTI1
          BRANCH    OVRCD,DCMB0093
.
          MATCH     OPDAADMN,PMMIVISN            * same visit still ?
          GOTO      DCMB0093 IF NOT EQUAL        * no - error
.
          MATCH     SP12,PMMIREFN                * reference number blank ?
          GOTO      DCMB0026 IF EQUAL            * yes - get next record
.
          PACK      DIM12,LOADREFN,SP20
          MATCH     PMMIREFN,DIM12               * same reference number ?
          GOTO      DCMB0026 IF NOT EQUAL        * no - get next record
.
          MOVE      PMMIITEM,OPPMB001
          MOVE      SP3,OPPMB002
.
          MATCH     SP70,PMMIPMBS
          IF        !@EQUAL
            MOVE      PMMITMNO,TEAMNUMB
            MOVE      PMMIPMBS,OPPMB002
          ENDIF
.
.         This item is being deleted, so check if it is a 'confirmed'
.         theatre item. If so, send an appropriate HL7 message.
.
.0846231  MATCH     "2",PMMIRTYP
.0846231  IF        @EQUAL
.0846231    MATCH     "1",PMMICCON
.0846231    IF        @EQUAL
.0846231      CALL      PMIGTNID              * get national id for HL7 write
.0846231      MOVE      NMPNUMB,PTNINMPI
.0846231      MOVE      ANSD,HL7ITMFL         * set flag for delete record
.0846231      MOVE      TWO,HL7TRGID
.0846231      MOVE      SP8,HL7INCLD
.0846231      PROC      DGCLIITM              * send HL7 message
.0846231    ENDIF
.0846231  ENDIF
.
          PACK      KEY14,PMMIVISN,PMMITRAN,SP70
          CALL      DEPMMTI1
          ADD       ONE,F5                    * item count for delete
.
DCMB0028  PACK      KEY23,OPPMB001,OPDAUNIQ,TEAMNUMB,OPPMB002,SP70
          CALL      RDOPPMB2
          COMPARE   ZERO,OVRCD
          GOTO      DCMB0032 IF EQUAL
.
          PACK      KEY23,OPPMB001,OPDAUNIQ,TEAMNUMB,SP70
          CALL      RSOPPMB2                 * Partial Read on oprpmbaf
          CALL      RKOPPMB2                 * Read Next Record from oprpmbaf
          BRANCH    OVRCD,DCMB0094
.
          MATCH     OPPMB001,OPPMCMBS
          GOTO      DCMB0033 IF NOT EQUAL    * Error Record NOt Exist
          MATCH     OPDAUNIQ,OPPMUNID
          GOTO      DCMB0033 IF NOT EQUAL    * Error Record NOt Exist
          GOTO      DCMB0031
.
.******************************************************************************
.*                      Delete CMBS Item                                      *
.******************************************************************************
DCMB0030  PACK      KEY23,OPPMB001,OPDAUNIQ,TEAMNUMB,OPPMB002,SP70
          CALL      RDOPPMB2                 * Partial Read on oprpmbaf
          COMPARE   ZERO,OVRCD
          GOTO      DCMB0032 IF EQUAL
.
          PACK      KEY23,OPPMB001,OPDAUNIQ,TEAMNUMB,SP70
          CALL      RSOPPMB2                 * Partial Read on oprpmbaf
          CALL      RKOPPMB2                 * Read Next Record from oprpmbaf
          BRANCH    OVRCD,DCMB0094
.
          MATCH     OPPMB001,OPPMCMBS
          GOTO      DCMB0094 IF NOT EQUAL    * Error Record NOt Exist
          MATCH     OPDAUNIQ,OPPMUNID
          GOTO      DCMB0094 IF NOT EQUAL    * Error Record NOt Exist
          MATCH     TEAMNUMB,OPPMTMNO
          GOTO      DCMB0094 IF NOT EQUAL    * Error Record NOt Exist
.
DCMB0031  PACK      KEY23,OPPMB001,OPDAUNIQ,TEAMNUMB,OPPMCNTR,SP70
          CALL      RLOPPMB2                 * Lock the record
DCMB0032  CALL      DEOPPMB2                 * Deletes the Record (oprpmbaf)
.
DCMB0033  
.0846231  CALL      USMBS000                * Set up patient MBS Account
.0846231  CALL      USMMB000                * Write MBS Code to medical records
.
          MATCH     "1",PTCNDSAE
          IF        @EQUAL
            MOVE      ONE,MATCHTYP               * item type (1=CMBS)
            MOVE      TWO,MATCHREF               * item status (2=Match found)
            CALL      WCIT0000                   * Write Cancelled Items Table
          ENDIF
          GOTO      DCMB9900
.
.******************************************************************************
.*                  Error Handling Section                                    *
.******************************************************************************
DCMB0091  MOVE      "Arrival Details Missing",ERRORDSC
          MOVE      "204",ERRORNUM
          CALL      EROR0000
          GOTO      DCMB9999
.
DCMB0093  MATCH     "1",PTCNDSAE
          IF        @EQUAL
            MOVE      ONE,MATCHTYP               * item type (1=CMBS)
            MOVE      ONE,MATCHREF               * item status (1=No match)
            CALL      WCIT0000                   * Write Cancelled Items Table
            GOTO      DCMB9999
          ENDIF
.
          MOVE      "Reference number not on file",ERRORDSC
          MOVE      "204",ERRORNUM
          CALL      EROR0000
          GOTO      DCMB9999
.
DCMB0094  MOVE      "Record does not exist on oprpmb",ERRORDSC
          MOVE      "204",ERRORNUM
          CALL      EROR0000
          GOTO      DCMB9999
.
DCMB0095  MOVE      "Theatre Details must be entered first",ERRORDSC
          MOVE      "204",ERRORNUM
          CALL      EROR0000
          GOTO      DCMB9999
.
DCMB0097  MOVE      "Surgery Start Time must be entered first.",ERRORDSC
          MOVE      "204",ERRORNUM
          CALL      EROR0000
          GOTO      DCMB9999
.
DCMB9900  MATCH     "1",PTCNQP03
          IF        @EQUAL
            IF        F5 < LOADSERV
              GOTO      DCMB0026                 * More items to delete ?
            ENDIF
          ENDIF
.
DCMB9999  RETURN
+
.*****************************************************************************
.*                              DCMBNT00                                     *
.*                    Delete CMBS Item (no theatre)                          *
.*****************************************************************************
DCMBNT00  MOVE      ZERO,F5                 * count for separate item delete
.
          PACK      KEY14,PVIBILL,SP70
          CALL      RSPMMTI1
DCMBNT10  CALL      RKPMMTI1
          BRANCH    OVRCD,DCMBNT95
.
          MATCH     DPVIBILL,PMMIVISN            * same visit still ?
          GOTO      DCMBNT95 IF NOT EQUAL        * no - error
.
          MATCH     SP12,PMMIREFN                * reference number blank ?
          GOTO      DCMBNT10 IF EQUAL            * yes - get next record
.
          PACK      DIM12,LOADREFN,SP20
          MATCH     PMMIREFN,DIM12               * same reference number ?
          GOTO      DCMBNT10 IF NOT EQUAL        * no - get next record
.
          PACK      KEY14,PMMIVISN,PMMITRAN,SP70
          CALL      DEPMMTI1
.
          CALL      DELMBS00                     * delete from patmmbsf
.
          ADD       ONE,F5                       * item count for delete
.
          MATCH     "1",PTCNDSAE
          IF        @EQUAL
            MOVE      ONE,MATCHTYP               * item type (1=CMBS)
            MOVE      TWO,MATCHREF               * item status (2=Match found)
            CALL      WCIT0000                   * Write Cancelled Items Table
          ENDIF
.
DCMBNT90  MATCH     "1",PTCNQP03
          IF        @EQUAL
            IF        F5 < LOADSERV
              GOTO      DCMBNT10                 * More items to delete ?
            ENDIF
          ENDIF
.
          MATCH     SP70,P03ANTYP
          IF        !@EQUAL
            MOVE      P03ANTYP,PMVXUD15          * Anaesthetic Type for Billing
            CALL      UPPMVX11
          ENDIF
.
          MOVE      "HL7RECVR  ",WBSEUID
          MOVE      PMMIVISN,OPDAADMN
          MOVE      ADATE,OPDADATE
          PROC      AUTOATYP                * automatic update admission type
.
          GOTO      DCMBNT99
.
DCMBNT95  MATCH     "1",PTCNDSAE
          IF        @EQUAL
            MOVE      ONE,MATCHTYP               * item type (1=CMBS)
            MOVE      ONE,MATCHREF               * item status (1=No match)
            CALL      WCIT0000                   * Write Cancelled Items Table
            GOTO      DCMBNT99
          ENDIF
.
          MOVE      "Reference number not on file",ERRORDSC
          MOVE      "204",ERRORNUM
          CALL      EROR0000
          GOTO      DCMBNT99
.
DCMBNT99  RETURN
+
.******************************************************************************
.*                                  DELMBS00                                  *
.*                Delete an MBS Item (patmmbs) matching PMSMTIaf item         *
.******************************************************************************
DELMBS00  MATCH     "2",PMMIRTYP
          GOTO      DELMBS99 IF NOT EQUAL
.
          PACK      KEY11,PVIBILL,Z70
          CALL      RDSMMBS1
DELMBS10  CALL      RDPMMBS1
          BRANCH    OVRCD,DELMBS99
.
          MATCH     MMADMN,PVIBILL          * check if same visit
          GOTO      DELMBS99 IF NOT EQUAL
.
          MATCH     PMMIITEM,MMCODE         * if not same Item Code then
          GOTO      DELMBS10 IF NOT EQUAL   * loop for next record
.
          MATCH     PMMITDAT,MMDATE         * if not same date then
          GOTO      DELMBS10 IF NOT EQUAL   * loop for next record
          MATCH     SP8,PMMISVTM
          IF        !@EQUAL
            UNPACK    PMMISVTM,KEY5,KEY3
            MATCH     KEY5,MMSTIM           * is it the same start time
            GOTO      DELMBS10 IF NOT EQUAL * loop for next record
          ENDIF
.
          MATCH     PMMIUNIQ,PTMMOPID       * same Theatre Unique Id. ?
          GOTO      DELMBS10 IF NOT EQUAL   * loop for next record
.
          PACK      KEY11,DMMADMN,MMRECN
          CALL      DEMMBS1                 * delete matching "patmmbsf" item
.
DELMBS99  RETURN
+
.*****************************************************************************
.*                              WCIT0000        Called by: DMIS0000,DCMB0000 *
.* Write to Cancelled Items Table if no error is being sent for failed P03s  *
.*****************************************************************************
WCIT0000  MATCH     "1",PTCNDSAE
          GOTO      WCIT9999 IF NOT EQUAL        * parameter set ?
.
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      PMSCMBA1,"pmscmbaf"          * table exists ?
          TRAPCLR   IO
          BRANCH    OVRCD,WCIT9999
.
          MOVE      ZERO,F6
          PACK      KEY14,PVIBILL,Z70
          CALL      RSPMCMB1
          CALL      RPPMCMB1
          BRANCH    OVRCD,WCIT1000
.
          MATCH     PVIBILL,PMCBVISN             * same visit still ?
          GOTO      WCIT1000 IF NOT EQUAL        * no - add record
.
          MOVE      PMCBCNTR,F6
.
WCIT1000  COMPARE   "999999",F6                  * max 999999
          GOTO      WCIT9999 IF EQUAL
.
          ADD       ONE,F6
.
          MOVE      PVIBILL,PMCBVISN             * visit number
          MOVE      F6,PMCBCNTR                  * record counter
          MOVE      LOADUNIQ,PMCBUNID            * unique ID
          MOVE      MATCHTYP,PMCBRTYP            * item type (1=CMBS/2=MiscChg)
          MOVE      MATCHREF,PMCBSTAT            * item status
          MOVE      LOADITEM,PMCBITEM            * item number
          MATCH     "1",PTCNQP03
          IF        @EQUAL
            MOVE      "    1",PMCBQUAN           * item quantity (single)
          ELSE
            MOVE      LOADSERV,PMCBQUAN          * item quantity (multiple)
          ENDIF
          MOVE      LOADREFN,PMCBREFN            * reference number
          MOVE      CURRDATE,PMCBRDTE            * date message received
          MOVE      SP70,PMCBTACT
          MOVE      SP70,PMCBTUID
          MOVE      SP70,PMCBTDTE
          MOVE      SP70,PMCBTTIM
          MOVE      SP70,PMCBCACT
          MOVE      SP70,PMCBCUID
          MOVE      SP70,PMCBCDTE
          MOVE      SP70,PMCBCTIM
          MOVE      SP70,PMCBBACT
          MOVE      SP70,PMCBBUID
          MOVE      SP70,PMCBBDTE
          MOVE      SP70,PMCBBTIM
          MOVE      ZERO,PMCBRSTA                * removal status (new entry)
          MOVE      SP70,PMCBDUID
          MOVE      SP70,PMCBDDTE
          MOVE      SP70,PMCBDTIM
          MOVE      SP70,PMCBDCOM
          MOVE      SP70,PMCBSPAR
.
          PACK      KEY14,PMCBVISN,PMCBCNTR
          CALL      RAPMCMB1
          COMPARE   ONE,OVRCD
          GOTO      WCIT1000 IF NOT EQUAL
.
          CALL      WRPMCMB1
.
WCIT9999  RETURN
+
.*****************************************************************************
.*                              P3NT0000           Called by: PROC0000       *
.*              Process the P03 message - write/update PAS database          *
.* Requires: Valid read on patmchgf for transaction code (for Misc. Item)    *
.*           Valid read on patitemn for transaction code (for CMBS Item)     *
.*           Valid read on patvisaf for visit number                         *
.*****************************************************************************
.
.         First check that we have at least one FT1 segment
.
P3NT0000  CALL      IBACLOCK                     * load current date/time
          PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
.
          BRANCH    FT1FOUND,P3NT9999            * no FT1 segments in message
.
P3NT0090  MOVE      FT1COUNT,SVFT1CNT            * save FT1 segment count
.
          COMPARE   ZERO,SVFT1CNT                * any FT1's to process ?
          GOTO      P3NT9999 IF EQUAL            * no - finished
.
.         There is one or more valid FT1 segments
.
          MOVE      ONE,FT1COUNT                 * initialise FT1 segment count
          CALL      CLPMSMTI                     * clear pmsmtiaf fields
.
.         Clear FT1 temp file load variables
.
          MOVE      ZERO,LOADAMTP                * FT1.12.1
          MOVE      ZERO,LOADAMTT                * FT1.12.1
          MOVE      SP70,LOADCTYP                * FT1.26.1
          MOVE      SP70,LOADDESC                * FT1.8.1
          MOVE      SP70,LOADITEM                * FT1.7.1
          MOVE      SP70,LOADMGRP                * FT1.7.3
          MOVE      SP70,LOADPROC                * FT1.25.1
          MOVE      ZERO,LOADRBAT                * FT1.12.1
          MOVE      SP70,LOADREFN                * FT1.23.1
          MOVE      ZERO,LOADSERV                * FT1.10.1
          MOVE      SP70,LOADTDAT                * FT1.4.1
          MOVE      SP70,LOADUNIQ                * FT1.3.1
.
.         Loop through the temp file looking for all the FT1 segment records
.
          PACK      KEY15,FT1SEGMT,SP20
          CALL      RSTEMP1                      * position on FT1 segment
P3NT0100  CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,P3NT0150               * eof - finished
.
          MATCH     FT1SEGMT,RTMPSEGI            * FT1 segment still ?
          IF        !@EQUAL
            CALL      ZFTS0000                   * check for ZFT
            GOTO      P3NT0150                   * no - finished
          ENDIF
.
          COMPARE   FT1COUNT,RTMPSEGC            * same segment count still ?
          GOTO      P3NT0200 IF EQUAL
.
          CALL      ZFTS0000                     * check for ZFT
.
          ADD       ONE,FT1COUNT                 * no - incr. FT1 segment count
.
.         We have a new segment or there are no more segments and therefore
.         we have completed loading the fields for the previous FT1 segment,
.         so write, update or delete records according to the transaction type
.
. *** PROCESS ITEM ***
P3NT0150  PERFORM   TRANSFLG,AMIS0000:           * add miscellaneous charge
                             DMIS0000:           * delete miscellaneous charge
                             ACMBNT00:           * add CBMS item
                             DCMBNT00            * delete CBMS item
.
          SUB       ONE,SVFT1CNT                 * decrement FT1 count
          COMPARE   ZERO,SVFT1CNT                * last FT1 record ?
          GOTO      P3NT0100 IF NOT EQUAL        * no - get next record
.
          GOTO      P3NT9999
.
.         Load the relevant field/component
.
P3NT0200  BRANCH    RTMPFLDN,P3NT0100:           * Set ID - info only
                             P3NT0100:           * Not in use
                             P3NT0300:           * Transaction Batch ID
                             P3NT0400:           * Transaction Date
                             P3NT0100:           * Not in use
                             P3NT0600:           * Transaction Type
                             P3NT0700:           * Transaction Code
                             P3NT0800:           * Transaction Description
                             P3NT0100:           * Not in use
                             P3NT1000:           * Transaction Quantity
                             P3NT0100:           * Not in use
                             P3NT1200:           * Transaction Amount
                             P3NT0100:           * Not in use
                             P3NT0100:           * Not in use
                             P3NT0100:           * Not in use
                             P3NT0100:           * Not in use
                             P3NT0100:           * Not in use
                             P3NT0100:           * Not in use
                             P3NT0100:           * Not in use
                             P3NT0100:           * Not in use
                             P3NT0100:           * Not in use
                             P3NT0100:           * Not in use
                             P3NT2300:           * Filler Order Number
                             P3NT0100:           * Not in use
                             P3NT2500:           * Procedure Code
                             P3NT2600            * Procedure Code Modifier
.
.                   Invalid field number, so ignore
.
          GOTO      P3NT0100
.
.         FT1.3  Transaction Batch ID (ST) - Mandatory for CMBS items.
.
P3NT0300  BRANCH    RTMPCMPN,P3NT0301
          GOTO      P3NT0100
.
.         There will only be temp file records for this field for CMBS items.
.         It is irrelevant and not collected for Miscellaneous charges.
.         *** NB: May exist for misc. items charged through theatre. ***
.
P3NT0301  MOVE      RTMPVRBL,LOADUNIQ
          RJUSTIFY  LOADUNIQ
          GOTO      P3NT0100
.
.         FT1.4  Transaction Date (TS) - Mandatory
.
P3NT0400  BRANCH    RTMPCMPN,P3NT0401
          GOTO      P3NT0100
.
P3NT0401  MOVE      RTMPVRBL,LOADTDAT
          GOTO      P3NT0100
.
.         FT1.6  Transaction Type (IS) - Mandatory
.
P3NT0600  BRANCH    RTMPCMPN,P3NT0601
          GOTO      P3NT0100
.
P3NT0601  STRIP     RTMPVRBL
          MATCH     "CG",RTMPVRBL
          IF        @EQUAL
            MOVE      ONE,TRANSFLG               * set flag for add misc. charge
          ENDIF
          MATCH     "CD",RTMPVRBL
          IF        @EQUAL
            MOVE      TWO,TRANSFLG               * set flag for del misc. charge
          ENDIF
          MATCH     "MB",RTMPVRBL
          IF        @EQUAL
            MOVE      THREE,TRANSFLG             * set flag for add CMBS item
          ENDIF
          MATCH     "MD",RTMPVRBL
          IF        @EQUAL
            MOVE      FOUR,TRANSFLG              * set flag for del CMBS item
          ENDIF
.
          GOTO      P3NT0100
.
.         FT1.7  Transaction Code (CE) - Mandatory
.
P3NT0700  BRANCH    RTMPCMPN,P3NT0701:           * identifier (ST)
                             P3NT0702:           * text (ST)
                             P3NT0703:           * name of coding system (ST)
                             P3NT0704:           * alternate identifier (ST)
                             P3NT0705:           * alternate text (ST)
                             P3NT0706            * name of alt. cod. system (ST)
          GOTO      P3NT0100
.
P3NT0701  MOVE      RTMPVRBL,LOADITEM
          GOTO      P3NT0100
.
P3NT0702  GOTO      P3NT0100
.
P3NT0703  MOVE      RTMPVRBL,LOADMGRP            * used for nzpribil (Cat.FI)
          GOTO      P3NT0100
.
P3NT0704  GOTO      P3NT0100
.
P3NT0705  GOTO      P3NT0100
.
P3NT0706  GOTO      P3NT0100
.
.         FT1.8  Transaction Description (ST) - Conditional Mandatory
.
P3NT0800  BRANCH    RTMPCMPN,P3NT0801
          GOTO      P3NT0100
.
P3NT0801  MOVE      RTMPVRBL,LOADDESC
          GOTO      P3NT0100
.
.         FT1.10  Transaction Quantity (NM) - Mandatory
.
P3NT1000  BRANCH    RTMPCMPN,P3NT1001
          GOTO      P3NT0100
.
P3NT1001  STRIP     RTMPVRBL
          MOVE      RTMPVRBL,LOADSERV
          GOTO      P3NT0100
.
.         FT1.12  Transaction Amount - Unit (CP) - Conditional Mandatory
.
P3NT1200  BRANCH    RTMPCMPN,P3NT1201:           * price (MO)
                             P3NT1203:           * price type (ID)
                             P3NT1204:           * from value (NM)
                             P3NT1205:           * to value (NM)
                             P3NT1206:           * range units (CE)
                             P3NT1207            * range type (ID)
          GOTO      P3NT0100
.
.         There are three amounts (total amount, patient portion and
.         rebate portion) in three separate temp file records, each
.         with a different field number count, so load accordingly to
.         the relevant database field.
.
P3NT1201  STRIP     RTMPVRBL
          IF        RTMPFCNT = 1
            MOVE      RTMPVRBL,LOADAMTT
          ELSE
            IF        RTMPFCNT = 2
              MOVE      RTMPVRBL,LOADAMTP
            ELSE
              MOVE      RTMPVRBL,LOADRBAT
            ENDIF
          ENDIF
          GOTO      P3NT0100
.
P3NT1202  GOTO      P3NT0100
.
P3NT1203  GOTO      P3NT0100
.
P3NT1204  GOTO      P3NT0100
.
P3NT1205  GOTO      P3NT0100
.
P3NT1206  GOTO      P3NT0100
.
P3NT1207  GOTO      P3NT0100
.
.         FT1.23  Filler Order Number (EI) - Mandatory
.
P3NT2300  BRANCH    RTMPCMPN,P3NT2301:           * entity identifier (ST)
                             P3NT2302:           * namespace id (IS)
                             P3NT2303:           * universal id (ST)
                             P3NT2304            * universal id type (ID)
          GOTO      P3NT0100
.
P3NT2301  MOVE      RTMPVRBL,LOADREFN
          GOTO      P3NT0100
.
P3NT2302  GOTO      P3NT0100
.
P3NT2303  GOTO      P3NT0100
.
P3NT2304  GOTO      P3NT0100
.
.         FT1.25  Procedure Code (CE) - Misc. Charge only
.
P3NT2500  BRANCH    RTMPCMPN,P3NT2501:           * identifier (ST)
                             P3NT2502:           * text (ST)
                             P3NT2503:           * name of coding system (ST)
                             P3NT2504:           * alternate identifier (ST)
                             P3NT2505:           * alternate text (ST)
                             P3NT2506            * name of alt. cod. system (ST)
          GOTO      P3NT0100
.
P3NT2501  MOVE      RTMPVRBL,LOADPROC
          GOTO      P3NT0100
.
P3NT2502  GOTO      P3NT0100
.
P3NT2503  GOTO      P3NT0100
.
P3NT2504  GOTO      P3NT0100
.
P3NT2505  GOTO      P3NT0100
.
P3NT2506  GOTO      P3NT0100
.
.         FT1.26  Procedure Code Modifier (CE) - Misc. Charge only
.
P3NT2600  BRANCH    RTMPCMPN,P3NT2601:           * identifier (ST)
                             P3NT2602:           * text (ST)
                             P3NT2603:           * name of coding system (ST)
                             P3NT2604:           * alternate identifier (ST)
                             P3NT2605:           * alternate text (ST)
                             P3NT2606            * name of alt. cod. system (ST)
          GOTO      P3NT0100
.
P3NT2601  STRIP     RTMPVRBL
          MOVELPTR  RTMPVRBL,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      P3NT0100 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,RTMPVRBL            * field null ?
          GOTO      P3NT0100 IF EQUAL            * yes - no change
.
          MOVE      RTMPVRBL,LOADCTYP
          GOTO      P3NT0100
.
P3NT2602  GOTO      P3NT0100
.
P3NT2603  GOTO      P3NT0100
.
P3NT2604  GOTO      P3NT0100
.
P3NT2605  GOTO      P3NT0100
.
P3NT2606  GOTO      P3NT0100
.
P3NT9999  RETURN
+
.------------------------------------------------------------
. Check and load corresponding ZFT segment for each FT1
.------------------------------------------------------------
.         Loop through the temp file for ZFT records for segment FT1COUNT
.
ZFTS0000  MOVE      SP70,LOADPSTM
          MOVE      SP70,LOADPETM
          MOVE      SP70,LOADTEDT
          MOVE      SP70,LOADRPST
          MOVE      SP70,LOADRPET
          MOVE      SP70,LOADAPRA
          PACK      SAVKEY15,RTMPSEGI,DRTMPSGC,SP70
.
          PACK      KEY15,ZFTSEGMT,FT1COUNT,SP20
          CALL      RSTEMP1                      * position on ZFT segment
ZFTS0050  CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,ZFTS9000               * eof - finished
.
          MATCH     ZFTSEGMT,RTMPSEGI            * ZFT segment still ?
          GOTO      ZFTS9000 IF NOT EQUAL        * no - finished
.
          COMPARE   FT1COUNT,RTMPSEGC            * same segment count still ?
          GOTO      ZFTS9000 IF NOT EQUAL        * no - finished
.
.         Load the relevant field/component
.
          BRANCH    RTMPFLDN,ZFTS0100:           * Procedure Start Time
                             ZFTS0200:           * Procedure End Time
                             ZFTS0300:           * Transaction End Date
                             ZFTS0400:           * Reporting Proc Start Time
                             ZFTS0500:           * Reporting Proc End Time
                             ZFTS0600            * AHPRA Identifier
.
.                   Invalid field number, so ignore
.
          GOTO      ZFTS0050
.
.         ZFT.1  Procedure Start Time
.
ZFTS0100  BRANCH    RTMPCMPN,ZFTS0101
          GOTO      ZFTS0050
.
ZFTS0101  MOVE      RTMPVRBL,LOADPSTM
          GOTO      ZFTS0050
.
.         ZFT.2  Procedure End Time
.
ZFTS0200  BRANCH    RTMPCMPN,ZFTS0201
          GOTO      ZFTS0050
.
ZFTS0201  MOVE      RTMPVRBL,LOADPETM
          GOTO      ZFTS0050
.
.         ZFT.3  Transaction End Date
.
ZFTS0300  BRANCH    RTMPCMPN,ZFTS0301
          GOTO      ZFTS0050
.
ZFTS0301  MOVE      RTMPVRBL,LOADTEDT
          GOTO      ZFTS0050
.
.         ZFT.4  Reporting Proc Start Time
.
ZFTS0400  BRANCH    RTMPCMPN,ZFTS0401
          GOTO      ZFTS0050
.
ZFTS0401  MOVE      RTMPVRBL,LOADRPST
          GOTO      ZFTS0050
.
.         ZFT.5  Reporting Proc End Time
.
ZFTS0500  BRANCH    RTMPCMPN,ZFTS0501
          GOTO      ZFTS0050
.
ZFTS0501  MOVE      RTMPVRBL,LOADRPET
          GOTO      ZFTS0050
.
.         ZFT.6  AHPRA Identifier
.
ZFTS0600  BRANCH    RTMPCMPN,ZFTS0601
          GOTO      ZFTS0050
.
ZFTS0601  MOVE      RTMPVRBL,LOADAPRA
          GOTO      ZFTS0050
.
ZFTS9000  PACK      KEY15,SAVKEY15,SP70
          CALL      RSTEMP1                      * reposition on FT1 segment
ZFTS9999  RETURN
+
.*****************************************************************************
.*                              PIOH0000                                     *
.*              Process the P03 message - update Invoice on Hold status      *
.* Requires: Valid read on patvisaf for visit number                         *
.*****************************************************************************
.
.         First check that we have at least one FT1 segment
.
PIOH0000  CALL      IBACLOCK                     * load current date/time
          PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
.
          BRANCH    FT1FOUND,PIOH9999            * no FT1 segments in message
.
PIOH0090  MOVE      FT1COUNT,SVFT1CNT            * save FT1 segment count
.
          COMPARE   ZERO,SVFT1CNT                * any FT1's to process ?
          GOTO      PIOH9999 IF EQUAL            * no - finished
.
.         There is one or more valid FT1 segments
.
          MOVE      ONE,FT1COUNT                 * initialise FT1 segment count
          CALL      CLPMSMTI                     * clear pmsmtiaf fields
.
.         Clear FT1 temp file load variables
.
          MOVE      ZERO,LOADAMTP                * FT1.12.1
          MOVE      ZERO,LOADAMTT                * FT1.12.1
          MOVE      SP70,LOADCTYP                * FT1.26.1
          MOVE      SP70,LOADDESC                * FT1.8.1
          MOVE      SP70,LOADITEM                * FT1.7.1
          MOVE      SP70,LOADMGRP                * FT1.7.3
          MOVE      SP70,LOADPROC                * FT1.25.1
          MOVE      ZERO,LOADRBAT                * FT1.12.1
          MOVE      SP70,LOADREFN                * FT1.23.1
          MOVE      ZERO,LOADSERV                * FT1.10.1
          MOVE      SP70,LOADTDAT                * FT1.4.1
          MOVE      SP70,LOADUNIQ                * FT1.3.1
          MOVE      SP70,LOADIOHC                * FT1.7.1      * IOH
          PACK      LOADIOHD,SP70,SP70           * FT1.7.2      * IOH
.
.         Loop through the temp file looking for all the FT1 segment records
.
          PACK      KEY15,FT1SEGMT,SP20
          CALL      RSTEMP1                      * position on FT1 segment
PIOH0100  CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,PIOH0150               * eof - finished
.
          MATCH     FT1SEGMT,RTMPSEGI            * FT1 segment still ?
          IF        !@EQUAL
            CALL      ZFTS0000                   * check for ZFT
            GOTO      PIOH0150                   * no - finished
          ENDIF
.
          COMPARE   FT1COUNT,RTMPSEGC            * same segment count still ?
          GOTO      PIOH0200 IF EQUAL
.
          CALL      ZFTS0000                     * check for ZFT
.
          ADD       ONE,FT1COUNT                 * no - incr. FT1 segment count
.
.         We have a new segment or there are no more segments and therefore
.         we have completed loading the fields for the previous FT1 segment,
.         so write, update or delete records according to the transaction type
.
. *** PROCESS ITEM ***
PIOH0150  PERFORM   TRANSFLG,AMIS0000:           * add miscellaneous charge
                             DMIS0000:           * delete miscellaneous charge
                             ACMBNT00:           * add CBMS item
                             DCMBNT00:           * delete CBMS item
                             UPDIOH00:           * Update Invoice on Hold
                             REMIOH00            * Remove Invoice on Hold
.
          SUB       ONE,SVFT1CNT                 * decrement FT1 count
          COMPARE   ZERO,SVFT1CNT                * last FT1 record ?
          GOTO      PIOH0100 IF NOT EQUAL        * no - get next record
.
          GOTO      PIOH9999
.
.         Load the relevant field/component
.
PIOH0200  BRANCH    RTMPFLDN,PIOH0100:           * Set ID - info only
                             PIOH0100:           * Not in use
                             PIOH0100:           * Not in use
                             PIOH0100:           * Not in use
                             PIOH0100:           * Not in use
                             PIOH0600:           * Transaction Type
                             PIOH0700:           * Transaction Code
                             PIOH0100:           * Not in use
                             PIOH0100:           * Not in use
                             PIOH0100:           * Not in use
                             PIOH0100:           * Not in use
                             PIOH0100:           * Not in use
                             PIOH0100:           * Not in use
                             PIOH0100:           * Not in use
                             PIOH0100:           * Not in use
                             PIOH0100:           * Not in use
                             PIOH0100:           * Not in use
                             PIOH0100:           * Not in use
                             PIOH0100:           * Not in use
                             PIOH0100:           * Not in use
                             PIOH0100:           * Not in use
                             PIOH0100:           * Not in use
                             PIOH0100:           * Not in use
                             PIOH0100:           * Not in use
                             PIOH0100:           * Not in use
                             PIOH0100            * Not in use
.
.                   Invalid field number, so ignore
.
          GOTO      PIOH0100
.
.         FT1.6  Transaction Type (IS) - Mandatory
.
PIOH0600  BRANCH    RTMPCMPN,PIOH0601
          GOTO      PIOH0100
.
PIOH0601  STRIP     RTMPVRBL
          MATCH     "CG",RTMPVRBL
          IF        @EQUAL
            MOVE      ONE,TRANSFLG               * set flag for add misc. charge
          ENDIF
          MATCH     "CD",RTMPVRBL
          IF        @EQUAL
            MOVE      TWO,TRANSFLG               * set flag for del misc. charge
          ENDIF
          MATCH     "MB",RTMPVRBL
          IF        @EQUAL
            MOVE      THREE,TRANSFLG             * set flag for add CMBS item
          ENDIF
          MATCH     "MD",RTMPVRBL
          IF        @EQUAL
            MOVE      FOUR,TRANSFLG              * set flag for del CMBS item
          ENDIF
          MATCH     "ID",RTMPVRBL
          IF        @EQUAL
            MOVE      FIVE,TRANSFLG              * set flag for upd Inv on Hold
          ENDIF
          MATCH     "RD",RTMPVRBL
          IF        @EQUAL
            MOVE      SIX,TRANSFLG               * set flag for rem Inv on Hold
          ENDIF
.
          GOTO      PIOH0100
.
.         FT1.7  Transaction Code (CE) - Mandatory
.
PIOH0700  BRANCH    RTMPCMPN,PIOH0701:           * identifier (ST)
                             PIOH0702:           * text (ST)
                             PIOH0703:           * name of coding system (ST)
                             PIOH0704:           * alternate identifier (ST)
                             PIOH0705:           * alternate text (ST)
                             PIOH0706            * name of alt. cod. system (ST)
          GOTO      PIOH0100
.
PIOH0701  MOVE      RTMPVRBL,LOADIOHC            * used for patipenf.ptiprhld
          GOTO      PIOH0100
.
PIOH0702  MOVE      RTMPVRBL,LOADIOHD            * used for patipenf.ptiprdes
          GOTO      PIOH0100
.
PIOH0703  GOTO      PIOH0100
.
PIOH0704  GOTO      PIOH0100
.
PIOH0705  GOTO      PIOH0100
.
PIOH0706  GOTO      PIOH0100
.
PIOH9999  RETURN
+
.*****************************************************************************
.*                               UPDIOH00          Called by: PIOH0000       *
.*                  Update an Invoice on Hold record                         *
.*****************************************************************************
UPDIOH00  MOVE      SP70,D3
          PACK      KEY80,SP70,SP70
.
          PACK      KEY8,PVIBILL,SP70
          CALL      RDIPEN1
          BRANCH    OVRCD,UPDIOH93               * no invoice pending
.
          PACK      D3,PTIPRHLD,SP70             * save reason for hold
          PACK      KEY80,PTIPRDES,SP70
.
          MATCH     SP70,PTIPRHLD
          GOTO      UPDIOH90 IF EQUAL            * invoice not currently on hold
.
          PACK      KEY5,CATrh,PTIPRHLD
          CALL      RDCODE1                      * code on file ?
          BRANCH    OVRCD,UPDIOH91               * no - finished
.
          MATCH     "C",TCINDC4                  * current onhold CodeFocus ?
          GOTO      UPDIOH92 IF NOT EQUAL        * no - finished
.
.         Invoice on Hold code can be updated
.
UPDIOH90  PACK      PTIPRHLD,LOADIOHC,SP70       * update code
          PACK      PTIPRDES,LOADIOHD,SP70,SP70  * update free text description
.
.         MATCH     D3,PTIPRHLD              * checking hold invoice code
.         IF        @EQUAL
.           MATCH     KEY80,PTIPRDES         * checking hold invoice desc.
.           GOTO      UPDIOH99 IF EQUAL      * both same, no change
.         ENDIF
.
          CALL      UPIPEN1
.
          OPEN      PATONHA1,"patonhaf"
          MOVE      "L",KEY1                     * updated by HL7
          MOVE      "HL7RECVR  ",KEY10           * updated by
          MOVE      SP70,D8
          MOVE      SP70,KEY9                    * blank Claim Code/HF
          CALL      WHAU0000      * write to audit file
.
          CALL      BVISUP00      * Send A08 when Invoice placed on hold
.
          GOTO      UPDIOH99
.
.         Invoice on Hold code was not found, so process error
.
UPDIOH91  MOVE      "Existing Invoice on Hold code not valid on Cat rh",ERRORDSC
          MOVE      "2",ERRORNUM
          CALL      EROR0000
          GOTO      UPDIOH99
.
.         Invoice on Hold code is not CodeFocus, so process error
.
UPDIOH92  MOVE      "Existing Invoice on Hold code indicator 4 not C",ERRORDSC
          MOVE      "2",ERRORNUM
          CALL      EROR0000
          GOTO      UPDIOH99
.
.         No invoice pending, so process error
.
UPDIOH93  MOVE      "No Invoice Pending and no Invoice on Hold",ERRORDSC
          MOVE      "4",ERRORNUM
          CALL      EROR0000
          GOTO      UPDIOH99
.
UPDIOH99  RETURN
+
.*****************************************************************************
.*                               REMIOH00          Called by: PIOH0000       *
.*                  Remove an Invoice on Hold record                         *
.*****************************************************************************
REMIOH00  PACK      KEY8,PVIBILL,SP70
          CALL      RDIPEN1
          BRANCH    OVRCD,REMIOH95               * no invoice pending
.
          MATCH     SP70,PTIPRHLD
          GOTO      REMIOH94 IF EQUAL            * invoice not currently on hold
.
          PACK      KEY5,CATrh,PTIPRHLD
          CALL      RDCODE1                      * code on file ?
          BRANCH    OVRCD,REMIOH91               * no - finished
.
          MATCH     "C",TCINDC4                  * current onhold CodeFocus ?
          GOTO      REMIOH92 IF NOT EQUAL        * no - finished
.
          MATCH     LOADIOHC,PTIPRHLD
          GOTO      REMIOH93 IF NOT EQUAL        * incoming code must match file
.
.         Invoice on Hold code can be removed
.
REMIOH90  PACK      PTIPRHLD,SP70                * remove hold code
          PACK      PTIPRDES,SP70,SP70           * remove hold free text desc
.
          CALL      UPIPEN1
.
          OPEN      PATONHA1,"patonhaf"
          PACK      KEY83,SP70,SP20
          MOVE      "M",KEY1                     * deleted by HL7
          MOVE      "HL7RECVR  ",KEY10           * updated by
          MOVE      SP70,D8
          MOVE      SP70,KEY9                    * blank Claim Code/HF
          CALL      WHAU0000      * write to audit file
.
          CALL      BVISUP00      * Send A08 when invoice hold removed
.
          GOTO      REMIOH99
.
.         Invoice on Hold code was not found, so process error
.
REMIOH91  MOVE      "Existing Invoice on Hold code not valid on Cat rh",ERRORDSC
          MOVE      "2",ERRORNUM
          CALL      EROR0000
          GOTO      REMIOH99
.
.         Invoice on Hold code is not CodeFocus, so process error
.
REMIOH92  MOVE      "Existing Invoice on Hold code indicator 4 not C",ERRORDSC
          MOVE      "2",ERRORNUM
          CALL      EROR0000
          GOTO      REMIOH99
.
.         Incoming InvOnHold code does not match existing code, so process error
.
REMIOH93  MOVE      "Incoming Invoice on Hold code does not match existing code",ERRORDSC
          MOVE      "2",ERRORNUM
          CALL      EROR0000
          GOTO      REMIOH99
.
.         No invoice on hold, so process error
.
REMIOH94  MOVE      "Invoice Pending is not on Hold for this visit",ERRORDSC
          MOVE      "3",ERRORNUM
          CALL      EROR0000
          GOTO      REMIOH99
.
.         No invoice pending, so process error
.
REMIOH95  MOVE      "No Invoice Pending for this visit",ERRORDSC
          MOVE      "4",ERRORNUM
          CALL      EROR0000
          GOTO      REMIOH99
.
REMIOH99  RETURN
+
.----------------------------------------------------------------------------
. Read the relevant records for the patient and broadcast an HL7 update visit
. message (A08) - Based on "Send A08 when Invoice on Hold data is changed"
.----------------------------------------------------------------------------
BVISUP00  MATCH     "1",PTCNINVH
          GOTO      BVISUP99 IF NOT EQUAL        * sending A08?
.
          CALL      IBACLOCK                     * current date/time
.
.         Read the relevant records for the patient and
.         broadcast an HL7 update visit message (A08)
.
          PACK      KEY8,IPADMNO,SP70
          CALL      RDPTMIS1                     * admission on file ?
          BRANCH    OVRCD,BVISUP99               * no - finish
.
          MOVE      AURNO,KEY8
          CALL      RDMAST1                      * pmi record on file ?
          BRANCH    OVRCD,BVISUP99               * no - finish
.
          MOVE      AURNO,KEY8
          CALL      RDPMPX21                     * get pmi extension record
          IF        OVRCD=1
            CALL      CLPMSPX2
          ENDIF
.
          PACK      KEY8,IPADMNO,SP70
          CALL      RDPTRES1                     * get PRA record
          IF        OVRCD=1
            CALL      CLPATRE1
          ENDIF
.
          PACK      KEY8,IPADMNO,SP70
          CALL      RDDSCH1                      * check for discharge record
          IF        OVRCD=1
            CALL      CLPATDSC
          ENDIF
.
.         Get the last transfer record
.
          PACK      KEY30,IPADMNO,TILDA35
          CALL      RDSTRAN2                     * pos'n after last tran record
          CALL      RDPTRAN2                     * read previous record
          BRANCH    OVRCD,BVISUP99               * eof - finish
.
          MATCH     IPADMNO,TADMN                * same admission still ?
          GOTO      BVISUP99 IF NOT EQUAL        * no - finish
.
          MOVE      "HL7RECVR  ",USERID
          PACK      KEY10,USERID,SP10
          CALL      RDWBSE1
          IF        OVRCD<>0
            CALL      CLWEBSEC
          ENDIF
          MOVE      WBSEPCD,PASSCODE
.
          CALL      PMIGTNID              * get national id for dgate write
          MOVE      NMPNUMB,PTNINMPI
          MOVE      FORTY8,HL7TRGID
          MOVE      SP8,HL7INCLD
          PROC      DGCLICAC              * broadcast change admission details
.
BVISUP99  RETURN
+
.*****************************************************************************
.*                              PI120000           Called by: PROC0000       *
.*              Process the REF^I12 message - add A/H database record        *
.* Requires: Transmitted message variables                                   *
.*****************************************************************************
.
PI120000  CALL      CLALLREF                     * clear record variables
.
.         First generate a new visit number
.
          CALL      IBACLOCK                     * load current date/time
          PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
.
PI121000  READ      CONTROLF,HUND30;*75,PTCNUANV      * Using AN Visit Numbers
.
          MATCH     "1",PTCNUANV
          IF        @EQUAL
            CALL      GANV0000                * Get next AN visit number
            MOVE      PTCNNXTV,KEY8
          ELSE
            MOVE      " 10",PRXCODE                * Set to sector 10
            CALL      GETSLK00                     * Lock sector 10
            READ      CONTROLF,TEN;*1,FORM8
            ADD       ONE,FORM8
            WRITAB    CONTROLF,TEN;*1,FORM8
            CALL      RELSLK00                     * Release sector 10 lock
            SUB       ONE,FORM8
            MOVE      FORM8,KEY8
          ENDIF
.
          CALL      RDAVISA1                     * visit already on file ?
          COMPARE   ZERO,OVRCD
          GOTO      PI121000 IF EQUAL            * yes - get next visit no
.
.         Load data file variables
.
          MOVE      PURNO,ALREURNO               * U/R number
          MOVE      KEY8,ALREVISN               * visit number
          MOVE      RF100101,ALRESTAT            * referral status
          PACK      ALREORIG,RF100601,SP30       * originating referral id
          MOVE      RF100701,ALRERDAT            * referral date
.
          MATCH     BLANKSTR,SAVEPROV[1]
          IF        !@EQUAL
            PACK      ALRERHCP,SAVEPROV[1],SP10  * referring HCP
          ENDIF
          MATCH     BLANKSTR,SAVEPROV[2]
          IF        !@EQUAL
            PACK      ALREHCP,SAVEPROV[2],SP10   * responsible HCP
          ENDIF
.
          MATCH     BLANKSTR,ZXV04901
          IF        !@EQUAL
            PACK      ALRERHCR,ZXV04901,SP10     * referring Practice
            MOVE      " 1",ALRERHCT
          ENDIF
.
          MATCH     BLANKSTR,PV100301
          IF        !@EQUAL
            PACK      ALRECLID,PV100301,SP6      * clinic id
          ENDIF
.
          MOVE      SAVEHOSP,ALREHOSN            * hospital id
          PACK      ALRECOMP,PV102001,SP3        * claim type
.
          MATCH     "2",ALRESTAT
          IF        @EQUAL
            MOVE      PV104501,ALREDCLO           * date/time closed
            UNPACK    PV104501,KEY8,DIM2H,DIM2N,DIM2S
            PACK      ALRETCLO,DIM2H,COLON,DIM2N,COLON,DIM2S
          ENDIF
.
          MATCH     "5",ALRESTAT                 * rejection ?
          IF        @EQUAL
            MOVE      ZXV04101,ALRESRDT          * date/time rejected
            UNPACK    ZXV04101,KEY8,DIM2H,DIM2N,DIM2S
            PACK      ALRESRTM,DIM2H,COLON,DIM2N,COLON,DIM2S
            MOVE      SP70,ALRESREJ
.
            STRIP     MSH00301
            MOVELPTR  MSH00301,FORM3
            IF        FORM3 = 0
              MOVE      "HL7RECVR  ",ALRESRUI    * default created by
            ELSE
              PACK      ALRESRUI,MSH00301,SP10   * use sending application
            ENDIF
          ENDIF
.
          PACK      ALREPRTY,ZXV00601,SP3        * priority
          PACK      ALREPRO1,ZXV00701,SP9        * problem code 1
          MATCH     SP70,SVALPROB
          IF        !@EQUAL
            PACK      ALREPRO1,SVALPROB,SP9      * referral in problem code
          ENDIF
          MOVE      ZXV04101,ALRECDAT            * date/time created
          UNPACK    ZXV04101,KEY8,DIM2H,DIM2N,DIM2S
          PACK      ALRECTIM,DIM2H,COLON,DIM2N,COLON,DIM2S
.
          STRIP     MSH00301
          MOVELPTR  MSH00301,FORM3
          IF        FORM3 = 0
            MOVE      "HL7RECVR  ",ALRECUID      * default created by
          ELSE
            PACK      ALRECUID,MSH00301,SP10     * use sending application
          ENDIF
.
          PACK      ALRESRCE,ZXV01501,SP3        * source of referral
.
          MATCH     BLANKSTR,ZXV03401
          IF        !@EQUAL
            PACK      ALRERTYP,ZXV03401,SP3      * type of referral
          ENDIF
.
          PACK      ALREPSIT,ZXV03501,SP6        * preferred site
          MOVE      ZXV03601,ALREDREC            * date referral received
          PACK      ALRECTYP,ZXV03701,SP6        * clinic type
.
          MATCH     BLANKSTR,ZXV03801
          IF        !@EQUAL
            PACK      ALREPRCM,ZXV03801,SP70     * presenting complaint
          ENDIF
.
          MATCH     BLANKSTR,ZXV03901[1]
          IF        !@EQUAL
            PACK      ALREDIA1,ZXV03901[1],SP9   * diagnosis 1
          ENDIF
.
          MATCH     BLANKSTR,ZXV03901[2]
          IF        !@EQUAL
            PACK      ALREDIA2,ZXV03901[2],SP9   * diagnosis 2
          ENDIF
.
          MATCH     BLANKSTR,ZXV03901[3]
          IF        !@EQUAL
            PACK      ALREDIA3,ZXV03901[3],SP9   * diagnosis 3
          ENDIF
.
          MATCH     BLANKSTR,ZXV05001
          IF        !@EQUAL
            PACK      ALREEVPR,ZXV05001,SP3      * event program (VINAH)
          ENDIF
.
          MATCH     BLANKSTR,ZXV05201
          IF        !@EQUAL
            MOVE      ZXV05201,ALREUDT1         * date referral accepted (VINAH)
          ENDIF
.
          MATCH     BLANKSTR,ZXV05401
          IF        !@EQUAL
            MOVE      ZXV05401,ALREUDT3         * clinical referral date (VINAH)
          ENDIF
.
          MATCH     BLANKSTR,ZXV05501
          IF        !@EQUAL
            PACK      ALRESTYP,ZXV05501,SP3      * visit type (VINAH)
          ENDIF
.
          MATCH     BLANKSTR,ZXV05601
          IF        !@EQUAL
            PACK      ALRETRGS,ZXV05601,SP3      * triage status (VINAH)
          ENDIF
.
          PACK      ALREDEPT,ZXV04001,SP3        * department
.
          MATCH     "1",ALRESTAT
          IF        @EQUAL
            MOVE      CURRDATE,ALREDACT          * date active
          ENDIF
.
          MATCH     BLANKSTR,ZXV10101
          IF        !@EQUAL
            MOVE      ZXV10101,ALRETRGD          * triage date
          ENDIF
.
          MATCH     BLANKSTR,ZXV10201
          IF        !@EQUAL
            MOVE      ZXV10201,ALREUDT5          * referral-in receipt ack date
          ENDIF
.
          MATCH     BLANKSTR,ZXV04701
          GOTO      PI125000 IF EQUAL
.
.         Check if reason fields are relevant based on the referral status
.
          MOVE      RF100101,FORM1               * load status field
          COMPARE   TWO,FORM1                    * waiting or active ?
          GOTO      PI125000 IF LESS             * yes
.
          BRANCH    FORM1,PI125000:              * not relevant
                          PI122000:              * closed
                          PI122100:              * inactive
                          PI122200:              * cancelled
                          PI122300               * rejected
          GOTO      PI125000
.
PI122000  PACK      ALRERCLO,ZXV04701,SP3        * reason for closure
          GOTO      PI125000
.
PI122100  PACK      ALRERINA,ZXV04701,SP3        * reason for inactive
          GOTO      PI125000
.
PI122200  PACK      ALRERCAN,ZXV04701,SP3        * reason for cancellation
          GOTO      PI125000
.
PI122300  PACK      ALRESREJ,ZXV04701,SP3        * reason for rejection
.
PI125000  CALL      WRALREF1                     * write new record
.
          MOVE      ONE,AUDTTYPE                 * write add allaudre record
          CALL      WAALRE00
.
          CALL      WVIS0000                   * write patvisaf/pmsvx1af records
          CALL      WHIS0000                     * write allstsaf record
          CALL      WAUD0000                     * write allaudaf record
          CALL      AVIS0000                     * write alternate visit record
          CALL      PEID0000                     * process alleidaf values
          CALL      PBIN0000                     * process booking instructions
.
.         If we are processing a VINAH Episode and Referral In Service
.         Type is populated, then we need to check if we need to create
.         an allrhlaf record.
.
          IF        PROGTYPE <> 0
            CALL      PRHL0000
            CALL      PRHLC000                   * process health conditions
            CALL      ADDPRG00                   * add program referral ?
          ENDIF
.
PI129999  RETURN
+
.*****************************************************************************
.*                              ADDPRG00                                     *
.*                    Add Master/Program referral                            *
.*****************************************************************************
ADDPRG00  MATCH     "1",PTCNCPRG
          GOTO      ADDPRG99 IF NOT EQUAL        * not creating program ref.
.
. If Victoria and therefore publics will be using VINAH. Create the program
. referral one second after the episode referral so the PCB is reported
. correctly by the extract
.
          IF        PTCNHDPS=3
            DISPLAY   *W1 
          ENDIF                             
.
          MOVE      ALREVISN,INTRVISN            * episode referral number
          CALL      CLALLREF                     * clear record variables
.
          CALL      GVPRG000                     * get vinah program dept
          BRANCH    EXIT,ADDPRG99
.
          PACK      ALREDEPT,D3,SP70             * vinah program department
.
.         First generate a new visit number
.
          CALL      IBACLOCK                     * load current date/time
          PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
.
ADDPRG10  READ      CONTROLF,HUND30;*75,PTCNUANV      * Using AN Visit Numbers
.
          MATCH     "1",PTCNUANV
          IF        @EQUAL
            CALL      GANV0000                * Get next AN visit number
            MOVE      PTCNNXTV,KEY8
          ELSE
            MOVE      " 10",PRXCODE                * Set to sector 10
            CALL      GETSLK00                     * Lock sector 10
            READ      CONTROLF,TEN;*1,FORM8
            ADD       ONE,FORM8
            WRITAB    CONTROLF,TEN;*1,FORM8
            CALL      RELSLK00                     * Release sector 10 lock
            SUB       ONE,FORM8
            MOVE      FORM8,KEY8
          ENDIF
.
          CALL      RDAVISA1                     * visit already on file ?
          COMPARE   ZERO,OVRCD
          GOTO      ADDPRG10 IF EQUAL            * yes - get next visit no
.
          CALL      RAALREF1
          COMPARE   ZERO,OVRCD
          GOTO      ADDPRG10 IF EQUAL
.
.         Load data file variables
.
          MOVE      PURNO,ALREURNO               * U/R number
          MOVE      KEY8,ALREVISN               * visit number
          MOVE      RF100101,ALRESTAT            * referral status
          PACK      ALREORIG,RF100601,SP30       * originating referral id
          MOVE      RF100701,ALRERDAT            * referral date
.
          PACK      ALREPRTY,ZXV00601,SP3        * priority
          MOVE      ZXV03601,ALREDREC            * date referral received
          MOVE      "1",ALREUYN4                 * program/master referral
.
          MATCH     BLANKSTR,ZXV05401
          IF        !@EQUAL
            MOVE      ZXV05401,ALREUDT3          * clinical referral date(VINAH)
          ENDIF
.
          MOVE      ZXV04101,ALRECDAT            * date/time created
          UNPACK    ZXV04101,KEY8,DIM2H,DIM2N,DIM2S
          PACK      ALRECTIM,DIM2H,COLON,DIM2N,COLON,DIM2S
.
          MOVE      "HL7RECVR  ",ALRECUID        * created by userid
.
          MATCH     BLANKSTR,ZXV10201
          IF        !@EQUAL
            MOVE      ZXV10201,ALREUDT5          * referral-in receipt ack date
          ENDIF
.
          MATCH     BLANKSTR,ZXV05601
          IF        !@EQUAL
            PACK      ALRETRGS,ZXV05601,SP3      * triage status (VINAH)
          ENDIF
.
          MATCH     BLANKSTR,ZXV10101
          IF        !@EQUAL
            MOVE      ZXV10101,ALRETRGD          * triage date
          ENDIF
.
          CALL      WRALREF1                     * write new record
.
          MOVE      ONE,AUDTTYPE                 * write add allaudre record
          CALL      WAALRE00
.
          CALL      WVIS0000                   * write patvisaf/pmsvx1af records
          CALL      WHIS0000                     * write allstsaf record
          CALL      WAUD0000                     * write allaudaf record
.0900673  CALL      AVIS0000                     * write alternate visit record
.0900673  CALL      PEID0000                     * process alleidaf values
.0900673  CALL      PBIN0000                     * process booking instructions
.
          CALL      PRHL0000
.0900673  Create program/episode referral link (from ALLWEB02):
          MOVE      ALREVISN,ALRLVISN
          MOVE      INTRVISN,ALRLLNKV
          PACK      ALRLCDAT,CCC,CYY,CMM,CDD
          REP       " 0",ALRLCDAT
          CLOCK     TIME,ALRLCTIM
          MOVE      "HL7RECVR  ",ALRLCUID
          MOVE      SP70,ALRLSPAR
          PACK      KEY16,ALREVISN,INTRVISN,SP70
          CALL      RDALRLN1
          IF        OVRCD=1
            CALL      WRALRLN1            * Write to SAC referral link file
          ENDIF
          PACK      KEY13,INTRVISN,ZERO,FOUR,SP2,ONE,SP70  * Delete referral in
          CALL      DEALRHL1                 * service type from episode ref
.
ADDPRG99  RETURN
+
.*****************************************************************************
.*                              GVPRG000                                     *
.*                     Get VINAH master program department                   *
.*****************************************************************************
GVPRG000  MOVE      SP3,D3                       * initialise dept
.
          PACK      KEY5,ANSC,ANSG,ZXV04001,SP70
          CALL      RDCODE1
          BRANCH    OVRCD,GVPRG950
.
          MOVE      TCINDC8,D1                   * episode program type
.
          MATCH     BLANKSTR,ZXV05001
          GOTO      GVPRG050 IF EQUAL
.
          MOVE      ZXV05001,D3                  * event program received
          MATCH     D3,SP70
          GOTO      GVPRG050 IF EQUAL
.
          PACK      KEY5,ANSC,ANSG,D3,SP70
          CALL      RDCODE1                      * check program received
          BRANCH    OVRCD,GVPRG050
.
          MATCH     ANSP,TCINDC11
          GOTO      GVPRG050 IF NOT EQUAL        * master program ?
.
          MATCH     D1,TCINDC8
          GOTO      GVPRG900 IF EQUAL            * same program as episode ?
.
GVPRG050  PACK      KEY5,ANSC,ANSG,SP70
          CALL      RDSCODE1
GVPRG100  CALL      RDKCODE1
          BRANCH    OVRCD,GVPRG950
.
          MATCH     "CG",TCODE
          GOTO      GVPRG950 IF NOT EQUAL
.
          MATCH     ANSP,TCINDC11
          GOTO      GVPRG100 IF NOT EQUAL        * master program ?
.
          MATCH     D1,TCINDC8
          GOTO      GVPRG100 IF NOT EQUAL        * same program as episode ?
.
          MOVE      ACODE,D3                     * program referral department
.
GVPRG900  MOVE      ZERO,EXIT                    * dept found
          GOTO      GVPRG999
.
GVPRG950  MOVE      ONE,EXIT                     * dept not found
          MOVE      "Program referral not created. No department found",ERRORDSC
          MOVE      "103",ERRORNUM
          WRITE     TEXTFILE,SEQ;ERRORNUM,SP2,ERRORDSC        * log warning
GVPRG999  RETURN
+
.*****************************************************************************
.*                              PI130000           Called by: PROC0000       *
.*              Process the REF^I13 message - update A/H database record     *
.* Requires: A valid read on an existing allrefaf record                     *
.*           Transmitted message variables                                   *
.*****************************************************************************
.
PI130000  CALL      IBACLOCK                     * load current date/time
          PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
.
          MOVE      TWO,AUDTTYPE                 * write before allaudre record
          CALL      WAALRE00
.
.         Check if status has changed and write a new allstsaf record if it has
.
          MATCH     RF100101,SAVESTAT            * status changed ?
          GOTO      PI131000 IF EQUAL            * no
.
.         Load data file variables
.
          MOVE      RF100101,ALRESTAT            * referral status
.
          CALL      WHIS0000                     * write allstsaf record
.
.         If the previous status was closed, then we need to clear the relevant
.         variables
.
          MATCH     "2",SAVESTAT
          IF        @EQUAL
            MOVE      SP70,ALRERCLO
            MOVE      SP70,ALREDCLO
            MOVE      SP70,ALRETCLO
            MOVE      SP70,ALREUCLO
          ENDIF
.
.         If the previous status was inactive, then we need to clear the
.         relevant variables
.
          MATCH     "3",SAVESTAT
          IF        @EQUAL
            MOVE      SP70,ALRERINA
            MOVE      SP70,ALREDINA
            MOVE      SP70,ALRETINA
            MOVE      SP70,ALREDINU
            MOVE      SP70,ALREUINA
          ENDIF
.
.         If the previous status was cancelled, then we need to clear the
.         relevant variables
.
          MATCH     "4",SAVESTAT
          IF        @EQUAL
            MOVE      SP70,ALRERCAN
            MOVE      SP70,ALREDCAN
            MOVE      SP70,ALRETCAN
            MOVE      SP70,ALREUCAN
          ENDIF
.
.         If the previous status was rejected, then we need to clear the
.         relevant variables
.
          MATCH     "5",SAVESTAT
          IF        @EQUAL
            MOVE      SP70,ALRESREJ
            MOVE      SP70,ALRESRDT
            MOVE      SP70,ALRESRTM
            MOVE      SP70,ALRESRUI
          ENDIF
.
.         If the new status is waiting, then there shouldn't be a date active.
.
          MATCH     "0",ALRESTAT
          IF        @EQUAL
            MOVE      SP8,ALREDACT
          ENDIF
.
.         If the new status is closed, then load the relevant associated fields
.
          MATCH     "2",ALRESTAT
          IF        @EQUAL
            MOVE      PV104501,ALREDCLO           * date/time closed
            UNPACK    PV104501,KEY8,DIM2H,DIM2N,DIM2S
            PACK      ALRETCLO,DIM2H,COLON,DIM2N,COLON,DIM2S
            MOVE      SP70,ALRERCLO
            MOVE      "HL7RECVR  ",ALREUCLO
          ENDIF
.
.         If the new status is inactive, then load the relevant associated
.         fields
.
          MATCH     "3",ALRESTAT
          IF        @EQUAL
            MOVE      ZXV04101,ALREDINA           * date/time inactivated
            UNPACK    ZXV04101,KEY8,DIM2H,DIM2N,DIM2S
            PACK      ALRETINA,DIM2H,COLON,DIM2N,COLON,DIM2S
            MOVE      SP70,ALRERINA
            MOVE      SP70,ALREDINU
            MOVE      "HL7RECVR  ",ALREUINA
          ENDIF
.
.         If the new status is cancelled, then load the relevant associated
.         fields
.
          MATCH     "4",ALRESTAT                 * cancelled ?
          IF        @EQUAL
            MOVE      ZXV04101,ALREDCAN          * date/time cancelled
            UNPACK    ZXV04101,KEY8,DIM2H,DIM2N,DIM2S
            PACK      ALRETCAN,DIM2H,COLON,DIM2N,COLON,DIM2S
            MOVE      SP70,ALRERCAN
.
            STRIP     MSH00301
            MOVELPTR  MSH00301,FORM3
            IF        FORM3 = 0
              MOVE      "HL7RECVR  ",ALREUCAN    * default created by
            ELSE
              PACK      ALREUCAN,MSH00301,SP10   * use sending application
            ENDIF
          ENDIF
.
.         If the new status is rejected, then load the relevant associated
.         fields
.
          MATCH     "5",ALRESTAT                 * rejection ?
          IF        @EQUAL
            MOVE      ZXV04101,ALRESRDT          * date/time rejected
            UNPACK    ZXV04101,KEY8,DIM2H,DIM2N,DIM2S
            PACK      ALRESRTM,DIM2H,COLON,DIM2N,COLON,DIM2S
            MOVE      SP70,ALRESREJ
.
            STRIP     MSH00301
            MOVELPTR  MSH00301,FORM3
            IF        FORM3 = 0
              MOVE      "HL7RECVR  ",ALRESRUI    * default created by
            ELSE
              PACK      ALRESRUI,MSH00301,SP10   * use sending application
            ENDIF
          ENDIF
.
.         If the status is active and there is no date active, then use the
.         update date to populate it.
.
          MATCH     "1",ALRESTAT
          GOTO      PI131000 IF NOT EQUAL
.
          MATCH     SP8,ALREDACT
          GOTO      PI131000 IF NOT EQUAL
.
          MOVE      ZXV04101,ALREDACT            * date active
.
PI131000  MOVE      RF100701,ALRERDAT            * referral date
.
          MOVELPTR  SAVEPROV[1],FORM3            * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PI131500 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,SAVEPROV[1]         * field null ?
          IF        @EQUAL
            MOVE      SP10,ALRERHCP              * yes
          ELSE
            PACK      ALRERHCP,SAVEPROV[1],SP10  * no - load referring HCP
          ENDIF
.
PI131500  MOVELPTR  SAVEPROV[2],FORM3            * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PI131700 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,SAVEPROV[2]         * field null ?
          IF        @EQUAL
            MOVE      SP10,ALREHCP               * yes
          ELSE
            PACK      ALREHCP,SAVEPROV[2],SP10   * no - load responsible HCP
          ENDIF
.
PI131700  MOVELPTR  ZXV04901,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PI132000 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV04901            * field null ?
          IF        @EQUAL
            MOVE      SP10,ALRERHCR              * yes
            MOVE      SP2,ALRERHCT
          ELSE
            PACK      ALRERHCR,ZXV04901,SP10     * no - load referring Practice
            MOVE      " 1",ALRERHCT
          ENDIF
.
PI132000  MOVELPTR  PV100301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PI132500 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,PV100301            * field null ?
          IF        @EQUAL
            MOVE      SP6,ALRECLID               * yes
          ELSE
            PACK      ALRECLID,PV100301,SP6      * no - load clinic id
          ENDIF
.
PI132500  MATCH     SP70,SAVEHOSP
          IF        !@EQUAL
            MOVE      SAVEHOSP,ALREHOSN          * hospital id
          ENDIF
          PACK      ALRECOMP,PV102001,SP3        * claim type
          PACK      ALREPRTY,ZXV00601,SP3        * priority
          PACK      ALREPRO1,ZXV00701,SP9        * problem code 1
          MATCH     SP70,SVALPROB
          IF        !@EQUAL
            PACK      ALREPRO1,SVALPROB,SP9      * referral in problem code
          ENDIF
          MOVE      ZXV04101,ALREUDAT            * date/time updated
          UNPACK    ZXV04101,KEY8,DIM2H,DIM2N,DIM2S
          PACK      ALREUTIM,DIM2H,COLON,DIM2N,COLON,DIM2S
.
          STRIP     MSH00301
          MOVELPTR  MSH00301,FORM3
          IF        FORM3 = 0
            MOVE      "HL7RECVR  ",ALREUUID      * default created by
          ELSE
            PACK      ALREUUID,MSH00301,SP10     * use sending application
          ENDIF
.
          PACK      ALRESRCE,ZXV01501,SP3        * source of referral
.
          MOVELPTR  ZXV03401,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PI133000 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV03401            * field null ?
          IF        @EQUAL
            MOVE      SP3,ALRERTYP               * yes
          ELSE
            PACK      ALRERTYP,ZXV03401,SP3      * no - load type of referral
          ENDIF
.
PI133000  PACK      ALREPSIT,ZXV03501,SP6        * preferred site
          MOVE      ZXV03601,ALREDREC            * date referral received
          PACK      ALRECTYP,ZXV03701,SP6        * clinic type
.
          MOVELPTR  ZXV03801,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PI133500 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV03801            * field null ?
          IF        @EQUAL
            MOVE      SP70,ALREPRCM              * yes
          ELSE
            PACK      ALREPRCM,ZXV03801,SP70     * no -load presenting complaint
          ENDIF
.
PI133500  MOVELPTR  ZXV03901[1],FORM3            * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PI134000 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV03901[1]         * field null ?
          IF        @EQUAL
            MOVE      SP9,ALREDIA1               * yes
          ELSE
            PACK      ALREDIA1,ZXV03901[1],SP9   * no - load diagnosis 1
          ENDIF
.
PI134000  MOVELPTR  ZXV03901[2],FORM3            * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PI134500 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV03901[2]         * field null ?
          IF        @EQUAL
            MOVE      SP9,ALREDIA2               * yes
          ELSE
            PACK      ALREDIA2,ZXV03901[2],SP9   * no - load diagnosis 2
          ENDIF
.
PI134500  MOVELPTR  ZXV03901[3],FORM3            * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PI134600 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV03901[3]         * field null ?
          IF        @EQUAL
            MOVE      SP9,ALREDIA3               * yes
          ELSE
            PACK      ALREDIA3,ZXV03901[3],SP9   * no - load diagnosis 3
          ENDIF
.
PI134600  MOVELPTR  ZXV05001,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PI134700 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV05001            * field null ?
          IF        @EQUAL
            MOVE      SP3,ALREEVPR               * yes
          ELSE
            PACK      ALREEVPR,ZXV05001,SP3      * no - load VINAH event program
          ENDIF
.
PI134700  MOVELPTR  ZXV05201,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PI134800 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV05201            * field null ?
          IF        @EQUAL
            MOVE      SP8,ALREUDT1               * yes
          ELSE
            MOVE      ZXV05201,ALREUDT1          * no - load date ref'l accepted
          ENDIF
.
PI134800  MOVELPTR  ZXV05401,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PI134900 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV05401            * field null ?
          IF        @EQUAL
            MOVE      SP8,ALREUDT3               * yes
          ELSE
            MOVE      ZXV05401,ALREUDT3          * no - load clinical ref'l date
          ENDIF
.
PI134900  MOVELPTR  ZXV05501,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PI134950 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV05501            * field null ?
          IF        @EQUAL
            MOVE      SP3,ALRESTYP               * yes
          ELSE
            PACK      ALRESTYP,ZXV05501,SP3      * no - load visit type (VINAH)
          ENDIF
.
PI134950  MOVELPTR  ZXV05601,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PI134960 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV05601            * field null ?
          IF        @EQUAL
            MOVE      SP3,ALRETRGS               * yes
          ELSE
            PACK      ALRETRGS,ZXV05601,SP3      * no-load triage status (VINAH)
          ENDIF
.
PI134960  MOVELPTR  ZXV10101,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PI134970 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV10101            * field null ?
          IF        @EQUAL
            MOVE      SP8,ALRETRGD               * yes
          ELSE
            MOVE      ZXV10101,ALRETRGD          * no - load triage date
          ENDIF
.
PI134970  MOVELPTR  ZXV10201,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PI135000 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV10201            * field null ?
          IF        @EQUAL
            MOVE      SP8,ALREUDT5               * yes
          ELSE
            MOVE      ZXV10201,ALREUDT5          * no - load Ref-In Rec Ack Date
          ENDIF
.
PI135000  PACK      ALREDEPT,ZXV04001,SP3        * department
.
          MOVELPTR  ZXV04701,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PI138000 IF EQUAL            * no - no change
.
.         Check if reason fields are relevant based on the referral status
.
          MOVE      RF100101,FORM1               * load status field
.
          BRANCH    FORM1,PI138000:              * active - not relevant
                          PI136000:              * closed
                          PI136100:              * inactive
                          PI136200:              * cancelled
                          PI136300               * rejected
          GOTO      PI138000                     * waiting - not relevant
.
PI136000  MATCH     BLANKSTR,ZXV04701            * field null ?
          IF        @EQUAL
            MOVE      SP3,ALRERCLO               * yes
          ELSE
            PACK      ALRERCLO,ZXV04701,SP3      * no
          ENDIF
          GOTO      PI138000
.
PI136100  MATCH     BLANKSTR,ZXV04701            * field null ?
          IF        @EQUAL
            MOVE      SP3,ALRERINA               * yes
          ELSE
            PACK      ALRERINA,ZXV04701,SP3      * no
          ENDIF
          GOTO      PI138000
.
PI136200  MATCH     BLANKSTR,ZXV04701            * field null ?
          IF        @EQUAL
            MOVE      SP3,ALRERCAN               * yes
          ELSE
            PACK      ALRERCAN,ZXV04701,SP3      * no
          ENDIF
          GOTO      PI138000
.
PI136300  MATCH     BLANKSTR,ZXV04701            * field null ?
          IF        @EQUAL
            MOVE      SP3,ALRESREJ               * yes
          ELSE
            PACK      ALRESREJ,ZXV04701,SP3      * no
          ENDIF
.
PI138000  CALL      WAUD0000                     * write allaudaf record
          CALL      UMEH0000                     * update alremohr for MH
.
          CALL      UPALREF1                     * update referral record
.
          MOVE      THREE,AUDTTYPE               * write after allaudre record
          CALL      WAALRE00
.
          CALL      UVIS0000                     * upd patvisaf/pmsvx1af records
          CALL      PEID0000                     * process alleidaf values
          CALL      PBIN0000                     * process booking instructions
.
.         If we are processing a VINAH Episode, then we need to check
.         if we need to create, update or delete an allrhlaf record depending
.         on whether the Service Type field is populated and if the Create
.         Program button has been triggered from the front-end.
.
.         We also need to check if the priority of the referral has changed
.         and if so, call VINAHDEF to update the relevant files.
.
PI138500  COMPARE   ZERO,PROGTYPE
          GOTO      PI139500 IF EQUAL
.
          CALL      PRHL0000
          CALL      PRHLC000                   * process health conditions
.
          MOVE      ZERO,EPAUDFLG              * init. audit flags
          MOVE      ZERO,RIAUDFLG
.
          MOVE      SAVEREFN,SAVVREFN
          MOVE      SAVEPRTY,SAVVPRTY
          MOVE      SAVETRGS,SAVVTRGS
          MOVE      SAVETRGD,SAVVTRGD
          MOVE      SAVERDAT,SAVVREFD
          MOVE      SAVERSTA,SAVVRSTA
          MOVE      SAVEUDT3,SAVVUDT3
.
          MATCH     SAVEPRTY,ALREPRTY          * priority changed ?
          GOTO      PI138600 IF NOT EQUAL
.
          MATCH     SAVETRGS,ALRETRGS          * triage status changed ?
          GOTO      PI138600 IF NOT EQUAL
.
          MATCH     SAVETRGD,ALRETRGD          * triage date changed?
          GOTO      PI138600 IF NOT EQUAL
.
          MATCH     SAVERDAT,ALRERDAT          * ref date changed?
          GOTO      PI138600 IF NOT EQUAL
.
          MATCH     SAVERSTA,ALRESTAT          * status changed?
          GOTO      PI138600 IF NOT EQUAL
.
          MATCH     SAVEUDT3,ALREUDT3          * clinical ref date changed?
          GOTO      PI138600 IF NOT EQUAL
.
.0915066  CALL      UPDPRG00                   * update program referral ?
.
          GOTO      PI139500
.
PI138600  MATCH     "1",PTCNCPRG
          IF        @EQUAL
            PROC      VHL70000                 * update VINAH fields (0915066)
          ELSE
            PROC      VDEF0000                 * update VINAH fields
          ENDIF
.
PI139500
.
PI139999  RETURN
+
.*****************************************************************************
.*                              UPDPRG00                                     *
.*                    Upd Master/Program referral (from VINAHDEF VDEF7000)   *
.*****************************************************************************
UPDPRG00  MATCH     "1",PTCNCPRG
          GOTO      UPDPRG99 IF NOT EQUAL        * not updating program ref.
.
          MATCH     SAVVPRTY,ALREPRTY            * episode ref priority changed?
          IF        @EQUAL
            MATCH     SAVVTRGS,ALRETRGS          * episode triage stat changed?
            IF        @EQUAL
              MATCH     SAVVTRGD,ALRETRGD        * episode triage date changed?
              GOTO      UPDPRG99 IF EQUAL
            ENDIF
          ENDIF
.
          MOVE      ALREPRTY,EPSDPRTY       * Episode referral priority
          MOVE      ALREUDT1,EPSDUDT1       * Episode date referral accepted
          MOVE      ALRETRGS,EPSDTRGS       * Episode referral triage status
          MOVE      ALRETRGD,EPSDTRGD       * Episode referral triage date
.
          PACK      KEY16,SAVVREFN,SP70
          CALL      RSALRLN2                     * Find program referral
          CALL      RKALRLN2
          BRANCH    OVRCD,UPDPRG99
.
          MATCH     SAVVREFN,ALRLLNKV            * Correct episode referral
          GOTO      UPDPRG99 IF NOT EQUAL
.
          MOVE      ALRLVISN,D8                  * Program referral number
.
          PACK      KEY16,D8,SP70
          CALL      RSALRLN1                     * Check if this is the first
          CALL      RKALRLN1                     * linked episode referral
          BRANCH    OVRCD,UPDPRG99
.
          MATCH     D8,ALRLVISN                  * Correct program referral
          GOTO      UPDPRG99 IF NOT EQUAL
.
          MATCH     SAVVREFN,ALRLLNKV            * First linked episode referral
          GOTO      UPDPRG99 IF NOT EQUAL
.
          PACK      KEY8,D8,SP70
          CALL      RDALREF1                     * Read program referral
          BRANCH    OVRCD,UPDPRG99
.
          MATCH     EPSDPRTY,ALREPRTY            * Has the priority changed
          IF        @EQUAL
            MATCH     EPSDTRGS,ALRETRGS          * Has triage status changed
            IF        @EQUAL
              MATCH     EPSDTRGD,ALRETRGD        * Has triage date changed
              GOTO      UPDPRG99 IF EQUAL
            ENDIF
          ENDIF
.
          IF        RIAUDFLG = 0
            MOVE      TWO,AUDTTYPE            * write before history record
            CALL      WAALRE00
.
.           Set flag to indicate that a before audit record has been written
.
            MOVE      ONE,RIAUDFLG
          ENDIF
.
          MOVE      EPSDPRTY,ALREPRTY    * Update program referral priority
          MOVE      EPSDTRGS,ALRETRGS    * Update program ref triage status
          MOVE      EPSDTRGD,ALRETRGD    * Update program ref triage date
.
          MATCH     SP70,ALREUDT5
          IF        @EQUAL
            MATCH     ALRERDAT,EPSDUDT1
            IF        !@LESS
              MOVE      EPSDUDT1,ALREUDT5     * Update program referral referral
            ENDIF                             * in receipt acknowledgement date
          ENDIF
.
          CALL      UPALREF1                  * Update program referral
.
          CALL      PMIGTNID             * get national id for dgate write
          MOVE      NMPNUMB,PTNINMPI
          MOVE      FOUR,HL7TRGID
          MOVE      "VINAHDEF",HL7INCLD
          CALL      DGCLII13             * broadcast Update Ref. (REF^I13)
.
.         Check if we need to write an after audit record, but only if
.         we are writing audits in VINAHDEF.  If not, save the Referral In
.         visit number for update on return (ALLWEB02 - UPDREF00 only)
.
          IF        RIAUDFLG = 1
            IF        VINAHFLG = 0
              MOVE      THREE,AUDTTYPE           * write after history record
              CALL      WAALRE00
            ELSE
              MOVE      ALREVISN,VINAHREF        * save the master referral no.
            ENDIF
          ENDIF
.
UPDPRG99  RETURN
+
.*****************************************************************************
.*                              PI140000           Called by: PROC0000       *
.*              Process the REF^I14 message - cancel A/H database record     *
.* Requires: A valid read on an existing allrefaf record                     *
.*           PROGTYPE = VINAH Program Type                                   *
.*                        0 = Not a VINAH Episode referral                   *
.*                        1 = HARP                                           *
.*                        2 = HBPCCT                                         *
.*                        3 = Medi-Hotel                                     *
.*                        4 = Palliative Care                                *
.*                        5 = Post Acute Care                                *
.*                        6 = RIR                                            *
.*                        7 = SACS                                           *
.*                        8 = SOP                                            *
.*                        9 = TCP / HBD                                      *
.*****************************************************************************
.
PI140000  CALL      IBACLOCK                     * load current date/time
          PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
.
          COMPARE   ZERO,PROGTYPE                * VINAH Episode referral ?
          GOTO      PI145000 IF NOT EQUAL        * yes
.
.         We are processing a Standard Internal Referral
.
          MOVE      TWO,AUDTTYPE                 * before allaudre record
          CALL      WAALRE00
.
          MOVE      RF100101,ALRESTAT            * load referral status
          CALL      UMEH0000                     * update alremohr for MH
.
          MOVE      SP70,ALRERCLO
          MOVE      SP70,ALREDCLO
          MOVE      SP70,ALRETCLO
          MOVE      SP70,ALREUCLO
.
          MATCH     "4",ALRESTAT                 * cancellation ?
          IF        @EQUAL
            MOVE      ZXV04101,ALREDCAN          * date/time cancelled
            UNPACK    ZXV04101,KEY8,DIM2H,DIM2N,DIM2S
            PACK      ALRETCAN,DIM2H,COLON,DIM2N,COLON,DIM2S
            MOVE      SP70,ALRERCAN
.
            STRIP     MSH00301
            MOVELPTR  MSH00301,FORM3
            IF        FORM3 = 0
              MOVE      "HL7RECVR  ",ALREUCAN    * default created by
            ELSE
              PACK      ALREUCAN,MSH00301,SP10   * use sending application
            ENDIF
          ENDIF
.
          MATCH     "5",ALRESTAT                 * rejection ?
          IF        @EQUAL
            MOVE      ZXV04101,ALRESRDT          * date/time rejected
            UNPACK    ZXV04101,KEY8,DIM2H,DIM2N,DIM2S
            PACK      ALRESRTM,DIM2H,COLON,DIM2N,COLON,DIM2S
            MOVE      SP70,ALRESREJ
.
            STRIP     MSH00301
            MOVELPTR  MSH00301,FORM3
            IF        FORM3 = 0
              MOVE      "HL7RECVR  ",ALRESRUI    * default created by
            ELSE
              PACK      ALRESRUI,MSH00301,SP10   * use sending application
            ENDIF
          ENDIF
.
          MOVE      SP70,ALRERINA
          MOVE      SP70,ALREDINA
          MOVE      SP70,ALRETINA
          MOVE      SP70,ALREDINU
          MOVE      SP70,ALREUINA
.
          MOVELPTR  ZXV04701,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PI143000 IF EQUAL            * no - no change
.
.         Check if reason fields are relevant based on the referral status
.
          MOVE      RF100101,FORM1               * load status field
.
          BRANCH    FORM1,PI143000:              * active - not relevant
                          PI143000:              * closed - not I14
                          PI143000:              * inactive - not I14
                          PI141000:              * cancelled
                          PI142000               * rejected
          GOTO      PI143000                     * waiting - not relevant
.
PI141000  MATCH     BLANKSTR,ZXV04701            * field null ?
          IF        @EQUAL
            MOVE      SP3,ALRERCAN               * yes
          ELSE
            PACK      ALRERCAN,ZXV04701,SP3      * no
          ENDIF
          GOTO      PI143000
.
PI142000  MATCH     BLANKSTR,ZXV04701            * field null ?
          IF        @EQUAL
            MOVE      SP3,ALRESREJ               * yes
          ELSE
            PACK      ALRESREJ,ZXV04701,SP3      * no
          ENDIF
.
PI143000  CALL      UPALREF1                     * update record
.
          MOVE      THREE,AUDTTYPE               * after allaudre record
          CALL      WAALRE00
.
          CALL      WHIS0000                     * write allstsaf record
          CALL      WAUD0000                     * write allaudaf record
          GOTO      PI149999
.
.         We are processing a VINAH Episode, so we need to delete the
.         internal referral and any associated records.
.         First check if there is a linked referral record on allrlnaf.
.
PI145000  PACK      KEY16,ALREVISN,SP20
          CALL      RSALRLN2                     * position on Episode number
          CALL      RKALRLN2                     * read next record
          BRANCH    OVRCD,PI146000               * eof - no allrhlaf record
.
          MATCH     ALREVISN,ALRLLNKV            * same visit number still ?
          GOTO      PI146000 IF NOT EQUAL        * no - no allrhlaf record
.
          PACK      KEY16,ALRLLNKV,ALRLVISN
          CALL      DEALRLN2                     * delete allrlnaf
.
.         Check if we need to create, update or delete an allrhlaf
.         record depending on whether the Service Type field is populated
.         and if the Create Program button has been triggered from the
.         front-end.
.
PI146000  CALL      PRHL0000
          CALL      PRHLC000                     * process health conditions
.
          MOVE      FOUR,AUDTTYPE                * delete allaudre record
          CALL      WAALRE00
.
.         Delete the ibaalvaf record if it exists
.
          MOVE      ALREVISN,KEY8
          CALL      DEIBALV1
.
.         Finally, delete the actual VINAH Episode record
.
          MOVE      ALREVISN,KEY8
          CALL      DEALREF1
.
PI149999  RETURN
+
.*****************************************************************************
.*                          OLOG0000               Called by: PROC0000       *
.*                Create/Open Day log file                                   *
.*****************************************************************************
.
.         Get the current date for the log file name
.
OLOG0000  CALL      IBACLOCK                     * get current date/time
          MOVE      CTIMEIS,TIMSTAMP
          REP       " 0",TIMSTAMP
.
.         Load the filename with the path and current date
.
          MOVE      SP100,FULLPATH
          CLEAR     FULLPATH
          APPEND    CDDRCTRY,FULLPATH
          PACK      TXTFNAME,CCC,CYY,CMM,CDD
          REP       " 0",TXTFNAME
          APPEND    TXTFNAME,FULLPATH
          APPEND    ".rec",FULLPATH
          RESET     FULLPATH
.
.         Open the file and if it doesn't exist, then PREP it.
.
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      TEXTFILE,FULLPATH            * open text file
          TRAPCLR   IO
          IF        OVRCD = 1
            PREP      TEXTFILE,FULLPATH          * create & open text file
            WRITE     TEXTFILE,MINUS3;DASHLINE   * write line to start new mess.
          ELSE
            WRITE     TEXTFILE,MINUS3;SP1        * move to new line
            WRITE     TEXTFILE,SEQ;DASHLINE      * write line to start new mess.
          ENDIF
.
OLOG9999  RETURN
+
.*****************************************************************************
.*                                 ALTUSR00        Called by: EROR0000       *
.*      Alert user of Interface error by executing a script to send an email *
.*****************************************************************************
.
ALTUSR00  MOVE      "hl7recvr.us1 ",KEY13
.
.         Clear the U/R number for M02 messages
.
          MATCH     "M02",MESSTYPE
          IF        @EQUAL
            MOVE      SP8,DIM8A
          ELSE
            MOVE      PURNO,DIM8A
            SQUEEZE   DIM8A
          ENDIF
.
.         Load the company name from ANSWER and strip off any leading and
.         trailing spaces
.
          MOVE      CSNAME,DIM25
          STRIP     DIM25
ALTUSR10  MATCH     SP1,DIM25
          IF        @EQUAL
            BUMP      DIM25
            GOTO      ALTUSR10
          ENDIF
          REP       " _",DIM25
.
          PACK      CMDLINE,KEY13,PRGID,SP1,SAVMESID,SP1,ERRORNUM,SP1,ALTERDSC:
                    SP1,MSH00901,CARET,MSH00902,SP1,DIM25,SP1,DIM8A
          EXECUTE   CMDLINE,TASKID
.
ALTUSR99  RETURN
+
.*****************************************************************************
.*                              PLIN0000               Called by: PPMI0000   *
.*      Process mother-child links for this patient                          *
.*****************************************************************************
.
.         Validation of fields has already been done in VPID0000
.
PLIN0000  MOVELPTR  PID02101,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      PLIN9999 IF EQUAL            * no - no change required
.
          CALL      RLIN0000                     * remove current link records
.
          MATCH     BLANKSTR,PID02101            * field null ?
          GOTO      PLIN9999 IF EQUAL            * yes - finished
.
          MOVE      PURNO,LINKFUR                * load patlinkf fields
          PACK      LINKTUR,PID02101,SP8
          RJUSTIFY  LINKTUR
          CALL      IBACLOCK
          PACK      LINKDAT,CCC,YY,MM,DD
          REP       " 0",LINKDAT
          MOVE      SAVELINK,LINKREA
          MOVE      SP100,LINKSPR
.
.         Write child-mother link record
.
          PACK      KEY16,LINKFUR,LINKTUR
          CALL      RDALINK1                     * link already on file ?
          IF        OVRCD = 1
            CALL      WRLINK1                    * no
          ENDIF
.
PLIN9999  RETURN
+
.*****************************************************************************
.*                              RLIN0000               Called by: PLIN0000   *
.*      Remove any mother-child link records on patlinkf for this patient    *
.*****************************************************************************
.
RLIN0000  PACK      KEY16,PURNO,SP20
RLIN0500  CALL      RDSLINK1                     * position on patient
RLIN1000  CALL      RDKLINK1                     * read next record
          BRANCH    OVRCD,RLIN9999               * eof - finished
.
          MATCH     PURNO,LINKFUR                * same U/R still ?
          GOTO      RLIN9999 IF NOT EQUAL        * no - finished
.
          MATCH     SP3,LINKREA                  * blank reason ?
          GOTO      RLIN1000 IF EQUAL            * yes - ignore record
.
          PACK      KEY5,ANSL,ANSU,LINKREA
          CALL      RDCODE1                      * code on file ?
          BRANCH    OVRCD,RLIN1000               * no - ignore record
.
.
          MATCH     ANSM,TCINDC1                 * mother-child link ?
          GOTO      RLIN1000 IF NOT EQUAL        * no - ignore rcord
.
.         We have a valid child-mother link for this patient, so
.         delete the record
.
          PACK      KEY16,LINKFUR,LINKTUR
          MOVE      KEY16,SAVKEY16
          CALL      DELINK1
.
          MOVE      SAVKEY16,KEY16               * reload key for repositioning
          GOTO      RLIN0500
.
RLIN9999  RETURN
+
.****************************************************************************
.*                              VALA0000               Called by: VNOK0000  *
.*       Validate, load and write ZAL fields to the temporary table.        *
.*       The temporary table is used as we can receive more than 1 ZAL      *
.*       segment per message.                                               *
.****************************************************************************
.
.         First, check if this is a "delete segment" where all fields are
.         null (..|""|...).
.
VALA0000  MATCH     BLANKSTR,ZAL00101            * null field ?
          GOTO      VALA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,ZAL00201            * null field ?
          GOTO      VALA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,ZAL00301            * null field ?
          GOTO      VALA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,ZAL00401            * null field ?
          GOTO      VALA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,ZAL00501            * null field ?
          GOTO      VALA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,ZAL00601            * null field ?
          GOTO      VALA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,ZAL00701            * null field ?
          GOTO      VALA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,ZAL00801            * null field ?
          GOTO      VALA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,ZAL00901            * null field ?
          GOTO      VALA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,ZAL01001            * null field ?
          GOTO      VALA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,ZAL01101            * null field ?
          GOTO      VALA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,ZAL01201            * null field ?
          GOTO      VALA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,ZAL01301            * null field ?
          GOTO      VALA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,ZAL01401            * null field ?
          GOTO      VALA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,ZAL01501[1]         * null field ?
          GOTO      VALA0005 IF NOT EQUAL        * no - proceed with validation
.
.         This is a delete segment, so make sure it's the first ZAL segment
.
          COMPARE   ZERO,ZALCOUNT                * first ZAL segment ?
          IF        @EQUAL
            ADD       ONE,ZALCOUNT               * increment ZAL segment count
            MOVE      ZERO,ZALFOUND              * yes - set ZAL found flag
            CALL      LODA0000                   * load current patient alerts
            GOTO      VALA9999                   * finished validation
          ENDIF
.
          MOVE      "ZAL: Delete ZAL segment out of sequence",ERRORDSC
          MOVE      "100",ERRORNUM
          CALL      EROR0000
          GOTO      VALA9999
.
.         We have a ZAL segment which contains data, so check that it's not
.         the first ZAL segment (which should be a delete segment).
.
VALA0005  ADD       ONE,ZALCOUNT                 * increment ZAL segment count
          COMPARE   ONE,ZALFOUND
          IF        @EQUAL
            MOVE      "ZAL: ZAL delete segment missing",ERRORDSC
            MOVE      "100",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          MOVE      SP1,SAVEIND7
.
.         Validate the Set ID.
.
          SQUEEZE   ZAL00101
          MOVELPTR  ZAL00101,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "ZAL.1: Set ID not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0010
          ENDIF
.
          MATCH     BLANKSTR,ZAL00101            * field null ?
          IF        @EQUAL
            MOVE      "ZAL.1: Set ID is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0010
          ENDIF
.
          TYPE      ZAL00101
          IF        !@EQUAL
            MOVE      "ZAL.1: Set ID not numeric",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0010
          ENDIF
.
          MOVE      ZAL00101,RTMPSEGC
          ASSIGN    (ZALCOUNT-1),FORM3
          COMPARE   FORM3,RTMPSEGC
          IF        !@EQUAL
            MOVE      "ZAL.1: Set ID not in sequence",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Validate Alert Category
.
VALA0010  STRIP     ZAL00201
          MOVELPTR  ZAL00201,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "ZAL.2: Alert Category not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0020
          ENDIF
.
          MATCH     BLANKSTR,ZAL00201            * field null ?
          IF        @EQUAL
            MOVE      "ZAL.2: Alert Category is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0020
          ENDIF
.
          IF        FORM3 <> 2
            MOVE      "ZAL.2: Alert Category incorrect length",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0020
          ENDIF
.         
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.         
          STRIP     ZAL00203
          MOVELPTR  ZAL00203,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "ZAL.2: Alert Type coding system not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000 
          ELSE
            MATCH     BLANKSTR,ZAL00203          * null field ?
            IF        @EQUAL
              MOVE      "ZAL.2: Alert Type coding system is mandatory",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
          MOVE      ZAL00201,ANS
          MATCH     ANSH,ANS
          IF        !@EQUAL
            MOVE      "ZAL.2: Alert Category not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0020
          ENDIF
.
          UNPACK    ZAL00201,ANS,ANS
          TYPE      ANS
          IF        !@EQUAL
            MOVE      "ZAL.2: Alert Category not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0020
          ENDIF
.
          PACK      KEY5,ZAL00201,SP5
          CALL      RDCODE1                      * category on file ?
          IF        OVRCD = 1
            MOVE      "ZAL.2: Alert Category not on file",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0020
          ENDIF
.
.         Validate Alert Code
.
VALA0020  STRIP     ZAL00301
          MOVELPTR  ZAL00301,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "ZAL.3: Alert Code not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0030
          ENDIF
.
          MATCH     BLANKSTR,ZAL00301            * field null ?
          IF        @EQUAL
            MOVE      "ZAL.3: Alert Code is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0030
          ENDIF
.
          IF        FORM3 > 3
            MOVE      "ZAL.3: Alert Code has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0030
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.
          STRIP     ZAL00303
          MOVELPTR  ZAL00303,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "ZAL.3: Alert Code coding system not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ELSE
            MATCH     BLANKSTR,ZAL00303          * null field ?
            IF        @EQUAL
              MOVE      "ZAL.3: Alert Code coding system is mandatory",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
          PACK      KEY5,ZAL00201,ZAL00301,SP5
          CALL      RDCODE1                      * code on file ?
          IF        OVRCD = 1
            MOVE      "ZAL.3: Alert Code not on file",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
          ELSE
            MOVE      TCINDC7,SAVEIND7
          ENDIF
.
.         Validate Reaction Code
.
VALA0030  STRIP     ZAL00401
          MOVELPTR  ZAL00401,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VALA0040 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZAL00401            * field null ?
          GOTO      VALA0040 IF EQUAL            * yes
.
          IF        FORM3 > 3
            MOVE      "ZAL.4: Reaction Code has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0040
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.
          STRIP     ZAL00403
          MOVELPTR  ZAL00403,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "ZAL.4: Reaction coding system not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ELSE
            MATCH     BLANKSTR,ZAL00403          * null field ?
            IF        @EQUAL
              MOVE      "ZAL.4: Reaction coding system is mandatory",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
          PACK      KEY5,CATWN,ZAL00401,SP5
          CALL      RDCODE1                      * code on file ?
          IF        OVRCD = 1
            MOVE      "ZAL.4: Reaction Code not on file",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0040
          ENDIF
.
.         Validate Alert Date
.
VALA0040  STRIP     ZAL00501
          MOVELPTR  ZAL00501,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "ZAL.5: Alert Date not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0050
          ENDIF
.
          MATCH     BLANKSTR,ZAL00501            * field null ?
          IF        @EQUAL
            MOVE      "ZAL.5: Alert Date is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0050
          ENDIF
.
          MOVE      ZAL00501,DIM14
          MOVE      "ZAL.5 ",FIELDID
          MOVE      ONE,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
.         Validate Severity Level
.
VALA0050  SQUEEZE   ZAL00601
          MOVELPTR  ZAL00601,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VALA0060 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZAL00601            * field null ?
          GOTO      VALA0060 IF EQUAL            * yes
.
          TYPE      ZAL00601
          IF        !@EQUAL
            MOVE      "ZAL.6: Severity level not numeric",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0060
          ENDIF
.
          IF        FORM3 <> 1
            MOVE      "ZAL.6: Severity level incorrect length",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0060
          ENDIF
.
.         Validate Review Date
.
VALA0060  STRIP     ZAL00701
          MOVELPTR  ZAL00701,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VALA0070 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZAL00701            * field null ?
          GOTO      VALA0070 IF EQUAL            * yes
.
          MOVE      ZAL00701,DIM14
          MOVE      "ZAL.7 ",FIELDID
          MOVE      ZERO,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
          MATCH     ZAL00501,ZAL00701        
          IF        @LESS
            MOVE      "ZAL.7: Review date less than alert date",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0070
          ENDIF
.
.         Validate Date Inactive
.
VALA0070  STRIP     ZAL00801
          MOVELPTR  ZAL00801,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VALA0080 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZAL00801            * field null ?
          GOTO      VALA0080 IF EQUAL            * yes
.
          MOVE      ZAL00801,DIM14
          MOVE      "ZAL.8 ",FIELDID
          MOVE      ZERO,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
          MATCH     ZAL00501,ZAL00801        
          IF        @LESS
            MOVE      "ZAL.8: Date Inactive less than alert date",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0080
          ENDIF
.
.         Validate End Date
.
VALA0080  STRIP     ZAL00901
          MOVELPTR  ZAL00901,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VALA0090 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZAL00901            * field null ?
          GOTO      VALA0090 IF EQUAL            * yes
.
          MOVE      ZAL00901,DIM14
          MOVE      "ZAL.9 ",FIELDID
          MOVE      ZERO,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
          MATCH     ZAL00501,ZAL00901        
          IF        @LESS
            MOVE      "ZAL.9: End Date less than alert date",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0090
          ENDIF
.
.         Validate Authorising HCP
.
VALA0090  STRIP     ZAL01001
          MOVELPTR  ZAL01001,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VALA0100 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZAL01001            * field null ?
          GOTO      VALA0100 IF EQUAL            * yes
.
          IF        FORM3 > 10
            MOVE      "ZAL.4: Authorising HCP Code has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0100
          ENDIF
.
          PACK      KEY10,ZAL01001,SP10
          CALL      RDPMHCP1                     * code on file ?
          IF        OVRCD = 1
            MOVE      "ZAL.10: Authorising HCP Code not on file",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0100
          ENDIF
.
.         Validate Last Update Date/Time
.
VALA0100  STRIP     ZAL01101
          MOVELPTR  ZAL01101,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "ZAL.11: Last Update DateTime not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0110
          ENDIF
.
          MATCH     BLANKSTR,ZAL01101            * field null ?
          IF        @EQUAL
            MOVE      "ZAL.11: Last Update DateTime is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0110
          ENDIF
.
          MOVE      ZAL01101,DIM14
          MOVE      "ZAL.11",FIELDID
          MOVE      ONE,DATFLAG1
          MOVE      ONE,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
.         Validate User Who Last Updated
.
VALA0110  STRIP     ZAL01201
          MOVELPTR  ZAL01201,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "ZAL.12: User Who Last Updated not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0120
          ENDIF
.
          MATCH     BLANKSTR,ZAL01201            * field null ?
          IF        @EQUAL
            MOVE      "ZAL.12: User Who Last Updated is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0120
          ENDIF
.
          MATCH     "1",PTCNH7LN
          IF        !@EQUAL
            IF        FORM3 > 10
              MOVE      "ZAL.12: User Who Last Updated has too many characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VALA0120
            ENDIF
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.         
          STRIP     ZAL01203
          MOVELPTR  ZAL01203,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "ZAL.12: User coding system not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ELSE
            MATCH     BLANKSTR,ZAL01203          * null field ?
            IF        @EQUAL
              MOVE      "ZAL.12: User coding system is mandatory",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
.         Check if we are using the Security Login Name
.
          MATCH     "1",PTCNH7LN
          IF        @EQUAL
            PACK      KEY80,ZAL01201,SP100
            CALL      RDWBSE7                    * login name in file ?
            IF        OVRCD = 1
              MOVE      "ZAL.12: Long Login Name Who Last Updated not on file",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
              GOTO      VALA0120
            ELSE
              MOVE      WBSEUID,ZAL01201         * yes - load User ID
              STRIP     ZAL01201
            ENDIF
          ENDIF
.
          PACK      KEY10,ZAL01201,SP10
          CALL      RDWBSE1                      * code on file ?
          IF        OVRCD = 1
            MOVE      "ZAL.12: User ID Who Last Updated not on file",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0120
          ENDIF
.
.         Validate Hospital
.
VALA0120  STRIP     ZAL01301
          MOVELPTR  ZAL01301,FORM3
.
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
.             * only mandatory for multi hospital database
            COMPARE   ONE,IBCNMHOS                 * using multi-hospital
            GOTO      VALA0130 IF NOT EQUAL        * no
.
            MOVE      "ZAL.13: Hospital not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0130
          ENDIF
.
          MATCH     BLANKSTR,ZAL01301            * field null ?
          IF        @EQUAL
.             * only mandatory for multi hospital database
            COMPARE   ONE,IBCNMHOS                 * using multi-hospital
            GOTO      VALA0130 IF NOT EQUAL        * no
.
            MOVE      "ZAL.13: Hospital is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0130
          ENDIF
.
          IF        FORM3 > 3
            MOVE      "ZAL.13: Hospital has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0130
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.         
          STRIP     ZAL01303
          MOVELPTR  ZAL01303,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "ZAL.13: Hospital coding system not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ELSE
            MATCH     BLANKSTR,ZAL01303          * null field ?
            IF        @EQUAL
              MOVE      "ZAL.13: Hospital coding system is mandatory",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
          PACK      KEY3,ZAL01301,SP3
          CALL      RDPTHSP1                     * code on file ?
          IF        OVRCD = 1
            MOVE      "ZAL.13: Hospital not on file",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0130
          ENDIF
.
.         Load Comments
.
VALA0130  STRIP     ZAL01401
.             
.         Validate that we have a Third Party System Identifier
.         
          MOVE      SP20,TOPASID                 * initialise TPS unique id
          MOVE      SP10,WEBPASID                * initialise webPAS unique id
.         
          MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 3                  
.         
.           Check to see if Component 1 and 3 are populated
.           
            STRIP     ZAL01501[COUNTER]          * remove trailing spaces
            MOVELPTR  ZAL01501[COUNTER],FORM3A   
.           
            STRIP     ZAL01503[COUNTER]          * remove trailing spaces
            MOVELPTR  ZAL01503[COUNTER],FORM3C   
.           
            IF        FORM3A = 0 & FORM3C = 0
              GOTO      VALA0155                 * neither populated
            ENDIF
.           
            IF        FORM3C = 0
              MOVE      "ZAL.15: Component 3 not populated",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VALA0155
            ENDIF
.
.           Component 3 is populated, so validate the contents which
.           should be either "TPS" or "webPAS".
.
            COMPARE   THREE,FORM3C               * length of 3 characters ?
            GOTO      VALA0140 IF EQUAL          * yes - validate for TPS
.
            COMPARE   SIX,FORM3C                 * length of 6 characters ?
            GOTO      VALA0145 IF EQUAL          * yes - validate for webPAS
.
            MOVE      "ZAL.15: Component 3 incorrect length",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VALA0155
.
.           Validate that we have a Third Party System identifier
.
VALA0140    MATCH     "TPS",ZAL01503[COUNTER]    * Third Party System ?
            GOTO      VALA0150 IF NOT EQUAL      * no - error
.
.           Now make sure that component 1 is populated
.
            COMPARE   ZERO,FORM3A
            IF        @EQUAL
              MOVE      "ZAL.15: TPS unique id not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
              GOTO      VALA0155
            ENDIF
.
.           Component 1 is populated, so make sure it's not null
.
            MATCH     BLANKSTR,ZAL01501[COUNTER]
            IF        @EQUAL
              MOVE      "ZAL.15: TPS unique id is mandatory",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
              GOTO      VALA0155
            ENDIF
.
.           We have a TPS Unique ID so check it's not too long
.
            MOVELPTR  ZAL01501[COUNTER],FORM3
            IF        FORM3 > 20
              MOVE      "ZAL.15: TPS unique id is too long",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VALA0155
            ENDIF
.
.           We have a valid TPS Unique ID so save it
.
            PACK      TOPASID,ZAL01501[COUNTER],SP20
            GOTO      VALA0155
.
.           Validate that we have a webPAS identifier
.
VALA0145    MATCH     "webPAS",ZAL01503[COUNTER] * webPAS ?
            GOTO      VALA0150 IF NOT EQUAL      * no - error
.
            COMPARE   ZERO,FORM3A                * field populated ?
            GOTO      VALA0155 IF EQUAL          * no - finished
.
            MATCH     BLANKSTR,ZAL01501[COUNTER] * null field ?
            GOTO      VALA0155 IF EQUAL          * yes - finished
.
.           We have a webPAS Unique ID so check it's not too long
.
            SQUEEZE   ZAL01501[COUNTER]
            MOVELPTR  ZAL01501[COUNTER],FORM3
            IF        FORM3 > 3
              MOVE      "ZAL.15: webPAS unique id is too long",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VALA0155
            ENDIF
.
.           Check it's numeric
.
            TYPE      ZAL01501[COUNTER]
            IF        !@EQUAL
              MOVE      "ZAL.15: webPAS unique id is not numeric",ERRORDSC
              MOVE      "102",ERRORNUM
              CALL      EROR0000
              GOTO      VALA0155
            ENDIF
.
.           We have a valid webPAS Unique ID so save it
.
            PACK      WEBPASID,ZAL01501[COUNTER],SP10
            GOTO      VALA0155
.
VALA0150    MOVE      "ZAL.15: Component 3 not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
.
VALA0155    STRIP     ZAL01502[COUNTER]
            STRIP     ZAL01504[COUNTER]
            STRIP     ZAL01505[COUNTER]
            STRIP     ZAL01506[COUNTER]
.
            ADD       ONE,COUNTER                * increment counter
          DO
.
.         Make sure that we at least have a TPS ID.
.
          MATCH     SP20,TOPASID
          IF        @EQUAL
            MOVE      "ZAL.15: TPS unique id is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VALA9999  RETURN
+
.****************************************************************************
.*                              VNKA0000               Called by: VNOK0000  *
.*       Validate, load and write NK1 fields to the temporary table.        *
.*       The temporary table is used as we can receive more than 1 NK1      *
.*       segment per message.                                               *
.****************************************************************************
.
.         First, check if this is a "delete segment" where all fields are
.         null (..|""|...).
.
VNKA0000  MATCH     BLANKSTR,NK100101            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK100201            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK100301            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK100401            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK100501            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK100601            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK100701            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK100801            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK100901            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK101001            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK101101            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK101201            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK101301            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK101401            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK101501            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK101601            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK101701            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK101801            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK101901            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK102001            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK102101            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK102201            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK102301            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK102401            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK102501            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK102601            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK102701            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK102801            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK102901[1]         * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK103001            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK103101[1]         * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK103201            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK103301            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK103401            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK103501            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK103601            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK103701            * null field ?
          GOTO      VNKA0005 IF NOT EQUAL        * no - proceed with validation
.
.         This is a delete segment, so make sure it's the first NK1 segment
.
          COMPARE   ZERO,NK1COUNT                * first NK1 segment ?
          IF        @EQUAL
            ADD       ONE,NK1COUNT               * increment NK1 segment count
            MOVE      ZERO,NK1FOUND              * yes - set NK1 found flag
            CALL      LODC0000                   * load current patient contacts
            GOTO      VNKA9999                   * yes - finished validation
          ENDIF
.
          MOVE      "NK1: Delete NK1 segment out of sequence",ERRORDSC
          MOVE      "100",ERRORNUM
          CALL      EROR0000
          GOTO      VNKA9999
.
.         We have a NK1 segment which contains data, so check that it's not
.         the first NK1 segment (which should be a delete segment).
.
VNKA0005  ADD       ONE,NK1COUNT                 * increment NK1 segment count
          COMPARE   ONE,NK1FOUND
          IF        @EQUAL
            MOVE      "NK1: NK1 delete segment missing",ERRORDSC
            MOVE      "100",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          MOVE      SP1,SAVEIND4
.
.         Validate the Set ID.
.
          SQUEEZE   NK100101
          MOVELPTR  NK100101,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "NK1.1: Set ID not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VNKA0010
          ENDIF
.
          MATCH     BLANKSTR,NK100101            * field null ?
          IF        @EQUAL
            MOVE      "NK1.1: Set ID is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VNKA0010
          ENDIF
.
          TYPE      NK100101
          IF        !@EQUAL
            MOVE      "NK1.1: Set ID not numeric",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VNKA0010
          ENDIF
.
          MOVE      NK100101,RTMPSEGC
          ASSIGN    (NK1COUNT-1),FORM3
          COMPARE   FORM3,RTMPSEGC
          IF        !@EQUAL
            MOVE      "NK1.1: Set ID not in sequence",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Validate Relationship
.
VNKA0010  STRIP     NK100301
          MOVELPTR  NK100301,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VNKA0022 IF EQUAL            * no
.
          MATCH     BLANKSTR,NK100301            * field null ?
          GOTO      VNKA0020 IF EQUAL            * yes
.
.         Make sure the relationship code is not more than 10 characters
.
          IF        FORM3 > 10
            MOVE      "NK1.3: Relationship has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ELSE
            PACK      KEY10,NK100301,SP10
            CALL      RDPMREL1                   * code on file ?
            IF        OVRCD = 1
              MOVE      "NK1.3: Relationship Code not valid",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.         
VNKA0020  STRIP     NK100303
          MOVELPTR  NK100303,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "NK1.3: Relationship coding system not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ELSE
            MATCH     BLANKSTR,NK100303          * null field ?
            IF        @EQUAL
              MOVE      "NK1.3: Relationship coding system is mandatory",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
.         Validate Contact Role (mandatory for webPAS)
.
VNKA0022  STRIP     NK100701
          MOVELPTR  NK100701,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "NK1.7: Contact Type not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VNKA0023
          ENDIF
.
          MATCH     BLANKSTR,NK100701            * field null ?
          IF        @EQUAL
            MOVE      "NK1.7: Contact Type is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VNKA0023
          ENDIF
.
          IF        FORM3 > 3
            MOVE      "NK1.7: Contact Type has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ELSE
            PACK      KEY5,CATTC,NK100701,SP5
            CALL      RDCODE1                    * code on file ?
            IF        OVRCD = 1
              MOVE      "NK1.7: Contact Type Code not on file",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
            ELSE
              MOVE      TCINDC4,SAVEIND4
            ENDIF
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.         
          STRIP     NK100703
          MOVELPTR  NK100703,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "NK1.7: Role coding system not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ELSE
            MATCH     BLANKSTR,NK100703          * null field ?
            IF        @EQUAL
              MOVE      "NK1.7: Role coding system is mandatory",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
.         Validate End Date
.
VNKA0023  STRIP     NK100901
          MOVELPTR  NK100901,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VNKA0025 IF EQUAL            * no
.
          MATCH     BLANKSTR,NK100901            * null field ?
          GOTO      VNKA0025 IF EQUAL            * yes
.
          MOVE      NK100901,DIM14
          MOVE      "NK1.9 ",FIELDID
          MOVE      ONE,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
.         Validate Contact Reason.
.         Note: This field is being used for the webPAS and Third Party System
.         unique id's given there is no specific NK1 field for these data items.
.
VNKA0025  MOVE      SP20,TOPASID                 * initialise TPS unique id
          MOVE      SP10,WEBPASID                * initialise webPAS unique id
.
          MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 3
.
.           Check to see if Component 1 and 3 are populated
.
            STRIP     NK102901[COUNTER]          * remove trailing spaces
            MOVELPTR  NK102901[COUNTER],FORM3A
.
            STRIP     NK102903[COUNTER]          * remove trailing spaces
            MOVELPTR  NK102903[COUNTER],FORM3C
.
            IF        FORM3A = 0 & FORM3C = 0
              GOTO      VNKA0030                 * neither populated
            ENDIF
.
            IF        FORM3C = 0
              MOVE      "NK1.29: Component 3 not populated",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VNKA0030
            ENDIF
.
.           Component 3 is populated, so validate the contents which
.           should be either "TPS" or "webPAS".
.
            COMPARE   THREE,FORM3C               * length of 3 characters ?
            GOTO      VNKA0027 IF EQUAL          * yes - validate for TPS
.
            COMPARE   SIX,FORM3C                 * length of 6 characters ?
            GOTO      VNKA0028 IF EQUAL          * yes - validate for webPAS
.
            MOVE      "NK1.29: Component 3 incorrect length",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VNKA0030
.
.           Validate that we have a Third Party System identifier
.
VNKA0027    MATCH     "TPS",NK102903[COUNTER]    * Third Party System ?
            GOTO      VNKA0029 IF NOT EQUAL      * no - error
.
.           Now make sure that component 1 is populated
.
            COMPARE   ZERO,FORM3A
            IF        @EQUAL
              MOVE      "NK1.29: TPS unique id not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
              GOTO      VNKA0030
            ENDIF
.
.           Component 1 is populated, so make sure it's not null
.
            MATCH     BLANKSTR,NK102901[COUNTER]
            IF        @EQUAL
              MOVE      "NK1.29: TPS unique id is mandatory",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
              GOTO      VNKA0030
            ENDIF
.
.           We have a TPS Unique ID so check it's not too long
.
            MOVELPTR  NK102901[COUNTER],FORM3
            IF        FORM3 > 20
              MOVE      "NK1.29: TPS unique id is too long",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VNKA0030
            ENDIF
.
.           We have a valid TPS Unique ID so save it
.
            PACK      TOPASID,NK102901[COUNTER],SP20
            GOTO      VNKA0030
.
.           Validate that we have a webPAS identifier
.
VNKA0028    MATCH     "webPAS",NK102903[COUNTER] * webPAS ?
            GOTO      VNKA0029 IF NOT EQUAL      * no - error
.
            COMPARE   ZERO,FORM3A                * field populated ?
            GOTO      VNKA0030 IF EQUAL          * no - finished
.
            MATCH     BLANKSTR,NK102901[COUNTER] * null field ?
            GOTO      VNKA0030 IF EQUAL          * yes - finished
.
.           We have a webPAS Unique ID so check it's not too long
.
            SQUEEZE   NK102901[COUNTER]
            MOVELPTR  NK102901[COUNTER],FORM3
            IF        FORM3 > 10
              MOVE      "NK1.29: webPAS unique id is too long",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VNKA0030
            ENDIF
.
.           Check it's numeric
.
            TYPE      NK102901[COUNTER]
            IF        !@EQUAL
              MOVE      "NK1.29: webPAS unique id is not numeric",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VNKA0030
            ENDIF
.
.           We have a valid webPAS Unique ID so save it
.
            PACK      WEBPASID,NK102901[COUNTER],SP10
            RJUSTIFY  WEBPASID
            GOTO      VNKA0030
.
VNKA0029    MOVE      "NK1.29: Component 3 not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
.
VNKA0030    STRIP     NK102902[COUNTER]
            STRIP     NK102904[COUNTER]
            STRIP     NK102905[COUNTER]
            STRIP     NK102906[COUNTER]
.
            ADD       ONE,COUNTER                * increment counter
          DO
.
.         Make sure that we at least have a TPS ID.
.
          MATCH     SP20,TOPASID
          IF        @EQUAL
            MOVE      "NK1.29: TPS unique id is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Validate Contact Person's Name
.         No single component is mandatory
.
          STRIP     NK103001
          STRIP     NK103002
          STRIP     NK103003
          STRIP     NK103004
.
          STRIP     NK103005
          MOVELPTR  NK103005,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VNKA0040 IF EQUAL            * no
.
          MATCH     BLANKSTR,NK103005            * field null ?
          GOTO      VNKA0040 IF EQUAL            * yes
.
          IF        FORM3 > 4
            MOVE      "NK1.30: Title has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ELSE
            PACK      KEY4,NK103005,SP4
            CALL      RDPMTLE1                   * code on file ?
            IF        OVRCD = 1
              MOVE      "NK1.30: Title not on file",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
VNKA0040  STRIP     NK103006
          STRIP     NK103007
          STRIP     NK103008
.
.         Validate and load Contact Person's Telephone Number
.         The valid (parameter based) formats received are as follows:
.
.         ^^CP^^^^<cell phone>
.         ^PRN^PH^<email address>^^^<home phone>
.         ^WPN^PH^^^^<business phone>
.
.         The following logic is based on whether or not component 3
.         is populated and if so, what it is populated with (CP, PH or blank).
.
          MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 4
.
.           Check Component 3 first to see if it is populated
.
            STRIP     NK103103[COUNTER]          * remove trailing spaces
            MOVELPTR  NK103103[COUNTER],FORM3
            COMPARE   ZERO,FORM3                 * field populated ?
            GOTO      VNKA0060 IF EQUAL          * no
.
            MATCH     BLANKSTR,NK103103[COUNTER] * null field ?
            GOTO      VNKA0060 IF EQUAL          * yes
.
.           Component 3 is populated, so it should be either "CP" or "PH"
.
            IF        FORM3 <> 2
              MOVE      "NK1.31: Component 3 incorrect length",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VNKA0060
            ENDIF
.
            MATCH     "CP",NK103103[COUNTER]     * cell phone ?
            GOTO      VNKA0060 IF EQUAL          * yes
.
            MATCH     "PH",NK103103[COUNTER]     * home phone ?
            GOTO      VNKA0050 IF EQUAL          * yes
.
            MOVE      "NK1.31: Component 3 not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VNKA0060
.
.           We have a phone number, so check that component 2 is "PRN"
.           (home phone) or "WPN" (business phone).
.
VNKA0050    STRIP     NK103102[COUNTER]          * remove trailing spaces
            MOVELPTR  NK103102[COUNTER],FORM3    * field populated ?
            IF        FORM3 = 0
              MOVE      "NK1.31: Component 2 not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
              GOTO      VNKA0060                 * no - finished
            ENDIF
.
            MATCH     BLANKSTR,NK103102[COUNTER] * null field ?
            IF        @EQUAL
              MOVE      "NK1.31: Component 2 is mandatory",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
              GOTO      VNKA0060                 * no - finished
            ENDIF
.
.           Component 2 is populated, so it should be "PRN"
.
            IF        FORM3 <> 3
              MOVE      "NK1.31: Component 2 incorrect length",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VNKA0060
            ENDIF
.
            MATCH     "PRN",NK103102[COUNTER]    * home phone ?
            GOTO      VNKA0060 IF EQUAL          * yes
.
            MATCH     "WPN",NK103102[COUNTER]    * business phone ?
            GOTO      VNKA0060 IF EQUAL          * yes
.
            MOVE      "NK1.31: Component 2 not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
.
VNKA0060    STRIP     NK103101[COUNTER]
            STRIP     NK103102[COUNTER]
            STRIP     NK103104[COUNTER]
            STRIP     NK103105[COUNTER]
            STRIP     NK103106[COUNTER]
            STRIP     NK103107[COUNTER]
            STRIP     NK103108[COUNTER]
            SQUEEZE   NK103109[COUNTER]
            ADD       ONE,COUNTER                * increment counter
          DO
.
.         Validate Address.
.         Street Address (Component 1) is mandatory if address is being
.         populated.  If address line 1 is not populated, then we should
.         assume that the rest of the address is also not populated (even
.         if it is).  If address line 1 is null, then we should assume
.         that the rest of the address is also null (even if it is populated).
.
          STRIP     NK103201
          MOVELPTR  NK103201,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK103202,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK103202
            PACK      NK103203,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK103203
            PACK      NK103204,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK103204
            PACK      NK103205,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK103205
            PACK      NK103206,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK103206
            PACK      NK103207,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK103207
            PACK      NK103208,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK103208
            PACK      NK103209,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK103209
            PACK      NK103210,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK103210
            PACK      NK103211,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK103211
            GOTO      VNKA9999
          ENDIF
.
          MATCH     BLANKSTR,NK103201            * field null ?
          IF        @EQUAL
            MOVE      BLANKSTR,NK103202
            MOVE      BLANKSTR,NK103203
            MOVE      BLANKSTR,NK103204
            MOVE      BLANKSTR,NK103205
            MOVE      BLANKSTR,NK103206
            MOVE      BLANKSTR,NK103207
            MOVE      BLANKSTR,NK103208
            MOVE      BLANKSTR,NK103209
            MOVE      BLANKSTR,NK103210
            MOVE      BLANKSTR,NK103211
            GOTO      VNKA9999
          ENDIF
.
.         Other designation - Component 2
.
VNKA0321  STRIP     NK103202
.
.         City - Component 3 (webPAS Suburb)
.
VNKA0322  STRIP     NK103203
.
.         Country - Component 6
.         Check this field first to determine how to validate the rest
.         of the fields
.
VNKA0323  STRIP     NK103206
          MOVELPTR  NK103206,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "NK1.32: Address Country not populated",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VNKA9999
          ENDIF
.
          MATCH     BLANKSTR,NK103206            * null field ?
          IF        @EQUAL
            MOVE      "NK1.32: Address Country is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VNKA9999
          ELSE
            MOVE      "NK1.32",DIM6
            MOVE      NK103206,DIM20
            CALL      VALC0000                   * validate country description
          ENDIF
.
.         Country Address is populated, so check if the country is Australia
.         which will determine if it is an overseas address or a local address
.
          MATCH     "AUSTRALIA",NK103206         * local address ?
          GOTO      VNKA0350 IF NOT EQUAL        * no
.
.         State - Component 4 (Local Address Only)
.
          STRIP     NK103204
.
.         Postcode - Component 5 (Local Address Only)
.
          SQUEEZE   NK103205
          MOVELPTR  NK103205,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VNKA9999 IF EQUAL            * no
.
          MATCH     BLANKSTR,NK103205            * null field ?
          GOTO      VNKA9999 IF EQUAL            * yes
.
.         Post Code is populated, so validate it
.
          IF        FORM3 <> 4
            MOVE      "NK1.32: Address Postcode incorrect length",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VNKA9999
          ENDIF
.
          TYPE      NK103205
          IF        !@EQUAL
            MOVE      "NK1.32: Address Postcode not numeric",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VNKA9999
          ENDIF
.
          COMPARE   TWO,PTCNHDPS                 * Australian site ?
          GOTO      VNKA9999 IF LESS             * no
.
.         Postcode is populated, so if the suburb is also populated,
.         check that the suburb and postcode are valid.  If state is also
.         populated, then use this to validate as well.
.
          MOVELPTR  NK103203,FORM3
          COMPARE   ZERO,FORM3                   * suburb populated ?
          GOTO      VNKA9999 IF EQUAL            * no
.
          MATCH     BLANKSTR,NK103203            * blank suburb ?
          GOTO      VNKA9999 IF EQUAL            * yes
.
          MOVELPTR  NK103204,FORM3
          COMPARE   ZERO,FORM3                   * state populated ?
          GOTO      VNKA0330 IF EQUAL            * no
.
          MATCH     BLANKSTR,NK103204            * blank state ?
          GOTO      VNKA0330 IF EQUAL            * yes
.
.         Check that the postcode/suburb/state is on file
.
          PACK      KEY8,NK103205,SP10
          PACK      KEY45,NK103203,SP70
          PACK      KEY3,NK103204,SP3
          PACK      KEY56,KEY8,KEY45,KEY3
          CALL      RDIBPOS1                     * postcode on file ?
          BRANCH    OVRCD,VNKA0340               * no - invalid
          GOTO      VNKA9999
.
.         Check that the postcode/suburb is on file
.
VNKA0330  PACK      KEY8,NK103205,SP10
          PACK      KEY56,KEY8,NK103203,SP70
          CALL      RDIBPOS1                     * postcode/suburb on file ?
          COMPARE   ZERO,OVRCD
          GOTO      VNKA9999 IF EQUAL            * yes - valid
.
          CALL      RKIBPOS1                     * no - read next record
          BRANCH    OVRCD,VNKA0340               * eof - error
.
          PACK      KEY8,NK103205,SP10
          MATCH     KEY8,IBPOPCOD                * same postcode still ?
          IF        @EQUAL
            PACK      KEY45,NK103203,SP70
            MATCH     KEY45,IBPOSUBR             * yes - same suburb still ?
            GOTO      VNKA9999 IF EQUAL          * yes
          ENDIF
.
VNKA0340  MOVE      "NK1.32: Address PostcodeSuburb not valid",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
          GOTO      VNKA9999
.
.         We have an overseas address, so set the postcode (component 5)
.         to "8888" and load the country (component 6) into state (component 4),
.         remove any data from country (component 6) and set city (component 3)
.         to "OVERSEAS ADDRESS"
.
VNKA0350  MOVE      "OVERSEAS ADDRESS",NK103203
          MOVE      NK103206,NK103204
          PACK      NK103205,EIGHT,EIGHT,EIGHT,EIGHT
          PACK      NK103206,SP100,SP100,SP100,SP100,SP100
.
VNKA9999  RETURN
+
.****************************************************************************
.*                              VNOK0000               Called by: PROC0000  *
.*       Validate, load and write NK1 fields to the temporary table.        *
.*       The temporary table is used as we can receive more than 1 NK1      *
.*       segment per message.                                               *
.****************************************************************************
.
.         If the parameter is set to ignore the delete segment for NK1/ZAL,
.         then we need to use the VNKA0000 routine instead of the VNOK0000
.         routine.
.
VNOK0000  MATCH     "1",PTCNH7ID
          IF        @EQUAL
            CALL      VNKA0000                   * alternate validation routine
            IF        NK1COUNT > 1
              CALL      MATC0000                 * match contact
            ENDIF
            GOTO      VNOK9999
          ENDIF
.
          MOVE      NK1SEGMT,RTMPSEGI            * load segment id
.
.         Now check if this is a "delete segment" where all fields are
.         null (..|""|...).
.
          MATCH     BLANKSTR,NK100101            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK100201            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK100301            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK100401            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK100501            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK100601            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK100701            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK100801            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK100901            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK101001            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK101101            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK101201            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK101301            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK101401            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK101501            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK101601            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK101701            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK101801            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK101901            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK102001            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK102101            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK102201            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK102301            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK102401            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK102501            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK102601            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK102701            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK102801            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK102901[1]         * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK103001            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK103101[1]         * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK103201            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK103301            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK103401            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK103501            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK103601            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,NK103701            * null field ?
          GOTO      VNOK0005 IF NOT EQUAL        * no - proceed with validation
.
.         This is a delete segment, so make sure it's the first NK1 segment
.
          COMPARE   ZERO,NK1COUNT                * first NK1 segment ?
          IF        @EQUAL
            ADD       ONE,NK1COUNT               * increment NK1 segment count
            MOVE      ZERO,NK1FOUND              * yes - set NK1 found flag
            GOTO      VNOK9999                   * yes - finished validation
          ENDIF
.
          MOVE      "NK1: Delete NK1 segment out of sequence",ERRORDSC
          MOVE      "100",ERRORNUM
          CALL      EROR0000
          GOTO      VNOK9999
.
.         We have a NK1 segment which contains data, so check that it's not
.         the first NK1 segment (which should be a delete segment).
.
VNOK0005  ADD       ONE,NK1COUNT                 * increment NK1 segment count
          ASSIGN    (NK1COUNT-1),RTMPSEGC        * load NK1 segment count
          COMPARE   ONE,NK1FOUND
          IF        @EQUAL
            MOVE      "NK1: NK1 delete segment missing",ERRORDSC
            MOVE      "100",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Validate and Load the Set ID.
.
          SQUEEZE   NK100101
          MOVELPTR  NK100101,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "NK1.1: Set ID not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VNOK0010
          ENDIF
.
          MATCH     BLANKSTR,NK100101            * field null ?
          IF        @EQUAL
            MOVE      "NK1.1: Set ID is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VNOK0010
          ENDIF
.
          TYPE      NK100101
          IF        !@EQUAL
            MOVE      "NK1.1: Set ID not numeric",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VNOK0010
          ENDIF
.
          MOVE      NK100101,RTMPSEGC
          ASSIGN    (NK1COUNT-1),FORM3
          COMPARE   FORM3,RTMPSEGC
          IF        !@EQUAL
            MOVE      "NK1.1: Set ID not in sequence",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          MOVE      ONE,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK100101,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and Load Name (currently not used)
.
VNOK0010  STRIP     NK100201
          MOVELPTR  NK100201,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK100201,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK100201
            GOTO      VNOK0020
          ENDIF
.
          MATCH     BLANKSTR,NK100201            * field null ?
          IF        @EQUAL
            PACK      NK100201,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK100201
            GOTO      VNOK0020
          ENDIF
.
VNOK0020  MOVE      TWO,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK100201,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100202
          MOVE      TWO,RTMPCMPN
          PACK      RTMPVRBL,NK100202,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100203
          MOVE      THREE,RTMPCMPN
          PACK      RTMPVRBL,NK100203,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100204
          MOVE      FOUR,RTMPCMPN
          PACK      RTMPVRBL,NK100204,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100205
          MOVE      FIVE,RTMPCMPN
          PACK      RTMPVRBL,NK100205,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100206
          MOVE      SIX,RTMPCMPN
          PACK      RTMPVRBL,NK100206,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100207
          MOVE      SEVEN,RTMPCMPN
          PACK      RTMPVRBL,NK100207,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100208
          MOVE      EIGHT,RTMPCMPN
          PACK      RTMPVRBL,NK100208,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and Load Relationship
.
          STRIP     NK100301
          MOVELPTR  NK100301,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK100301,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK100301
            GOTO      VNOK0030
          ENDIF
.
          MATCH     BLANKSTR,NK100301            * field null ?
          IF        @EQUAL
            PACK      NK100301,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK100301
            GOTO      VNOK0030
          ENDIF
.
.         Make sure the relationship code is not more than 10 characters
.
          IF        FORM3 > 10
            MOVE      "NK1.3: Relationship has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VNOK0030
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.         
          STRIP     NK100303
          MOVELPTR  NK100303,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "NK1.3: Relationship coding system not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ELSE
            MATCH     BLANKSTR,NK100303          * null field ?
            IF        @EQUAL
              MOVE      "NK1.3: Relationship coding system is mandatory",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
          PACK      KEY10,NK100301,SP10
          CALL      RDPMREL1                     * code on file ?
          IF        OVRCD = 1
            MOVE      "NK1.3: Relationship Code not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VNOK0030  MOVE      THREE,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK100301,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100302
          MOVE      TWO,RTMPCMPN
          PACK      RTMPVRBL,NK100302,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100303
          MOVE      THREE,RTMPCMPN
          PACK      RTMPVRBL,NK100303,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100304
          MOVE      FOUR,RTMPCMPN
          PACK      RTMPVRBL,NK100304,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100305
          MOVE      FIVE,RTMPCMPN
          PACK      RTMPVRBL,NK100305,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100306
          MOVE      SIX,RTMPCMPN
          PACK      RTMPVRBL,NK100306,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and Load Address (currently not used)
.
          STRIP     NK100401
          MOVELPTR  NK100401,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK100401,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK100401
            GOTO      VNOK0040
          ENDIF
.
          MATCH     BLANKSTR,NK100401            * field null ?
          IF        @EQUAL
            PACK      NK100401,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK100401
            GOTO      VNOK0040
          ENDIF
.
VNOK0040  MOVE      FOUR,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK100401,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100402
          MOVE      TWO,RTMPCMPN
          PACK      RTMPVRBL,NK100402,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100403
          MOVE      THREE,RTMPCMPN
          PACK      RTMPVRBL,NK100403,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100404
          MOVE      FOUR,RTMPCMPN
          PACK      RTMPVRBL,NK100404,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100405
          MOVE      FIVE,RTMPCMPN
          PACK      RTMPVRBL,NK100405,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100406
          MOVE      SIX,RTMPCMPN
          PACK      RTMPVRBL,NK100406,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100407
          MOVE      SEVEN,RTMPCMPN
          PACK      RTMPVRBL,NK100407,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100408
          MOVE      EIGHT,RTMPCMPN
          PACK      RTMPVRBL,NK100408,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100409
          MOVE      NINE,RTMPCMPN
          PACK      RTMPVRBL,NK100409,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100410
          MOVE      TEN,RTMPCMPN
          PACK      RTMPVRBL,NK100410,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100411
          MOVE      TEN1,RTMPCMPN
          PACK      RTMPVRBL,NK100411,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and Load Phone Number (currently not used)
.
          STRIP     NK100501
          MOVELPTR  NK100501,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK100501,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK100501
            GOTO      VNOK0050
          ENDIF
.
          MATCH     BLANKSTR,NK100501            * field null ?
          IF        @EQUAL
            PACK      NK100501,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK100501
            GOTO      VNOK0050
          ENDIF
.
VNOK0050  MOVE      FIVE,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK100501,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100502
          MOVE      TWO,RTMPCMPN
          PACK      RTMPVRBL,NK100502,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100503
          MOVE      THREE,RTMPCMPN
          PACK      RTMPVRBL,NK100503,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100504
          MOVE      FOUR,RTMPCMPN
          PACK      RTMPVRBL,NK100504,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100505
          MOVE      FIVE,RTMPCMPN
          PACK      RTMPVRBL,NK100505,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100506
          MOVE      SIX,RTMPCMPN
          PACK      RTMPVRBL,NK100506,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100507
          MOVE      SEVEN,RTMPCMPN
          PACK      RTMPVRBL,NK100507,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100508
          MOVE      EIGHT,RTMPCMPN
          PACK      RTMPVRBL,NK100508,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100509
          MOVE      NINE,RTMPCMPN
          PACK      RTMPVRBL,NK100509,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and Load Business Phone (currently not used)
.
          SQUEEZE   NK100601
          MOVELPTR  NK100601,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK100601,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK100601
            GOTO      VNOK0060
          ENDIF
.
          MATCH     BLANKSTR,NK100601            * field null ?
          IF        @EQUAL
            PACK      NK100601,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK100601
            GOTO      VNOK0060
          ENDIF
.
VNOK0060  MOVE      SIX,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK100601,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100602
          MOVE      TWO,RTMPCMPN
          PACK      RTMPVRBL,NK100602,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100603
          MOVE      THREE,RTMPCMPN
          PACK      RTMPVRBL,NK100603,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100604
          MOVE      FOUR,RTMPCMPN
          PACK      RTMPVRBL,NK100604,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100605
          MOVE      FIVE,RTMPCMPN
          PACK      RTMPVRBL,NK100605,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100606
          MOVE      SIX,RTMPCMPN
          PACK      RTMPVRBL,NK100606,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100607
          MOVE      SEVEN,RTMPCMPN
          PACK      RTMPVRBL,NK100607,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100608
          MOVE      EIGHT,RTMPCMPN
          PACK      RTMPVRBL,NK100608,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100609
          MOVE      NINE,RTMPCMPN
          PACK      RTMPVRBL,NK100609,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and Load Contact Role (mandatory for webPAS)
.
          STRIP     NK100701
          MOVELPTR  NK100701,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "NK1.7: Contact Type not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VNOK0070
          ENDIF
.
          MATCH     BLANKSTR,NK100701            * field null ?
          IF        @EQUAL
            MOVE      "NK1.7: Contact Type is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VNOK0070
          ENDIF
.
          IF        FORM3 > 3
            MOVE      "NK1.7: Contact Type has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VNOK0070
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.         
          STRIP     NK100703
          MOVELPTR  NK100703,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "NK1.7: Role coding system not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ELSE
            MATCH     BLANKSTR,NK100703          * null field ?
            IF        @EQUAL
              MOVE      "NK1.7: Role coding system is mandatory",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
          PACK      KEY5,CATTC,NK100701,SP5
          CALL      RDCODE1                      * code on file ?
          IF        OVRCD = 1
            MOVE      "NK1.7: Contact Type Code not on file",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VNOK0070  MOVE      SEVEN,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK100701,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100702
          MOVE      TWO,RTMPCMPN
          PACK      RTMPVRBL,NK100702,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100703
          MOVE      THREE,RTMPCMPN
          PACK      RTMPVRBL,NK100703,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100704
          MOVE      FOUR,RTMPCMPN
          PACK      RTMPVRBL,NK100704,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100705
          MOVE      FIVE,RTMPCMPN
          PACK      RTMPVRBL,NK100705,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK100706
          MOVE      SIX,RTMPCMPN
          PACK      RTMPVRBL,NK100706,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and Load Start Date (not currently used)
.
          STRIP     NK100801
          MOVELPTR  NK100801,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK100801,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK100801
            GOTO      VNOK0080
          ENDIF
.
          MATCH     BLANKSTR,NK100801            * field null ?
          IF        @EQUAL
            PACK      NK100801,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK100801
            GOTO      VNOK0080
          ENDIF
.
VNOK0080  MOVE      EIGHT,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK100801,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and Load End Date (not currently used)
.
          STRIP     NK100901
          MOVELPTR  NK100901,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK100901,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK100901
            GOTO      VNOK0090
          ENDIF
.
          MATCH     BLANKSTR,NK100901            * field null ?
          IF        @EQUAL
            PACK      NK100901,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK100901
            GOTO      VNOK0090
          ENDIF
.
VNOK0090  MOVE      NINE,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK100901,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and Load Job Title (not currently used)
.
          STRIP     NK101001
          MOVELPTR  NK101001,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK101001,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK101001
            GOTO      VNOK0100
          ENDIF
.
          MATCH     BLANKSTR,NK101001            * field null ?
          IF        @EQUAL
            PACK      NK101001,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK101001
            GOTO      VNOK0100
          ENDIF
.
VNOK0100  MOVE      TEN,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK101001,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and Load Job Code/Class (not currently used)
.
          STRIP     NK101101
          MOVELPTR  NK101101,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK101101,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK101101
            GOTO      VNOK0110
          ENDIF
.
          MATCH     BLANKSTR,NK101101            * field null ?
          IF        @EQUAL
            PACK      NK101101,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK101101
            GOTO      VNOK0110
          ENDIF
.
VNOK0110  MOVE      TEN1,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK101101,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK101102
          MOVE      TWO,RTMPCMPN
          PACK      RTMPVRBL,NK101102,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and Load Employee Number (not currently used)
.
          STRIP     NK101201
          MOVELPTR  NK101201,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK101201,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK101201
            GOTO      VNOK0120
          ENDIF
.
          MATCH     BLANKSTR,NK101201            * field null ?
          IF        @EQUAL
            PACK      NK101201,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK101201
            GOTO      VNOK0120
          ENDIF
.
VNOK0120  MOVE      TEN2,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK101201,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK101202
          MOVE      TWO,RTMPCMPN
          PACK      RTMPVRBL,NK101202,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK101203
          MOVE      THREE,RTMPCMPN
          PACK      RTMPVRBL,NK101203,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK101204
          MOVE      FOUR,RTMPCMPN
          PACK      RTMPVRBL,NK101204,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK101205
          MOVE      FIVE,RTMPCMPN
          PACK      RTMPVRBL,NK101205,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK101206
          MOVE      SIX,RTMPCMPN
          PACK      RTMPVRBL,NK101206,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and Load Organisation Name (not currently used)
.
          STRIP     NK101301
          MOVELPTR  NK101301,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK101301,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK101301
            GOTO      VNOK0130
          ENDIF
.
          MATCH     BLANKSTR,NK101301            * field null ?
          IF        @EQUAL
            PACK      NK101301,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK101301
            GOTO      VNOK0130
          ENDIF
.
VNOK0130  MOVE      TEN3,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK101301,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK101302
          MOVE      TWO,RTMPCMPN
          PACK      RTMPVRBL,NK101302,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK101303
          MOVE      THREE,RTMPCMPN
          PACK      RTMPVRBL,ZAL01303,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK101304
          MOVE      FOUR,RTMPCMPN
          PACK      RTMPVRBL,NK101304,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK101305
          MOVE      FIVE,RTMPCMPN
          PACK      RTMPVRBL,NK101305,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK101306
          MOVE      SIX,RTMPCMPN
          PACK      RTMPVRBL,NK101306,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK101307
          MOVE      SEVEN,RTMPCMPN
          PACK      RTMPVRBL,NK101307,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK101308
          MOVE      EIGHT,RTMPCMPN
          PACK      RTMPVRBL,NK101308,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK101309
          MOVE      NINE,RTMPCMPN
          PACK      RTMPVRBL,NK101309,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and Load Marital Status (not currently used)
.
          STRIP     NK101401
          MOVELPTR  NK101401,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK101401,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK101401
            GOTO      VNOK0140
          ENDIF
.
          MATCH     BLANKSTR,NK101401            * field null ?
          IF        @EQUAL
            PACK      NK101401,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK101401
            GOTO      VNOK0140
          ENDIF
.
VNOK0140  MOVE      TEN4,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK101401,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK101402
          MOVE      TWO,RTMPCMPN
          PACK      RTMPVRBL,NK101402,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK101403
          MOVE      THREE,RTMPCMPN
          PACK      RTMPVRBL,NK101403,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK101404
          MOVE      FOUR,RTMPCMPN
          PACK      RTMPVRBL,NK101404,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK101405
          MOVE      FIVE,RTMPCMPN
          PACK      RTMPVRBL,NK101405,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK101406
          MOVE      SIX,RTMPCMPN
          PACK      RTMPVRBL,NK101406,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and Load Sex (not currently used)
.
          STRIP     NK101501
          MOVELPTR  NK101501,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK101501,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK101501
            GOTO      VNOK0150
          ENDIF
.
          MATCH     BLANKSTR,NK101501            * field null ?
          IF        @EQUAL
            PACK      NK101501,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK101501
            GOTO      VNOK0150
          ENDIF
.
VNOK0150  MOVE      TEN5,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK101501,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and Load Date/Time of Birth (not currently used)
.
          STRIP     NK101601
          MOVELPTR  NK101601,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK101601,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK101601
            GOTO      VNOK0160
          ENDIF
.
          MATCH     BLANKSTR,NK101601            * field null ?
          IF        @EQUAL
            PACK      NK101601,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK101601
            GOTO      VNOK0160
          ENDIF
.
          MOVE      NK101601,DIM14
          MOVE      "NK1.16",FIELDID
          MOVE      ONE,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
VNOK0160  MOVE      TEN6,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK101601,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and Load Living Dependency (not currently used)
.
          STRIP     NK101701
          MOVELPTR  NK101701,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK101701,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK101701
            GOTO      VNOK0170
          ENDIF
.
          MATCH     BLANKSTR,NK101701            * field null ?
          IF        @EQUAL
            PACK      NK101701,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK101701
            GOTO      VNOK0170
          ENDIF
.
VNOK0170  MOVE      TEN7,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK101701,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and Load Ambulatory Status (not currently used)
.
          STRIP     NK101801
          MOVELPTR  NK101801,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK101801,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK101801
            GOTO      VNOK0180
          ENDIF
.
          MATCH     BLANKSTR,NK101801            * field null ?
          IF        @EQUAL
            PACK      NK101801,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK101801
            GOTO      VNOK0180
          ENDIF
.
VNOK0180  MOVE      TEN8,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK101801,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and Load Marital Status (not currently used)
.
          STRIP     NK101901
          MOVELPTR  NK101901,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK101901,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK101901
            GOTO      VNOK0190
          ENDIF
.
          MATCH     BLANKSTR,NK101901            * field null ?
          IF        @EQUAL
            PACK      NK101901,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK101901
            GOTO      VNOK0190
          ENDIF
.
VNOK0190  MOVE      TEN9,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK101901,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK101902
          MOVE      TWO,RTMPCMPN
          PACK      RTMPVRBL,NK101902,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK101903
          MOVE      THREE,RTMPCMPN
          PACK      RTMPVRBL,NK101903,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK101904
          MOVE      FOUR,RTMPCMPN
          PACK      RTMPVRBL,NK101904,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK101905
          MOVE      FIVE,RTMPCMPN
          PACK      RTMPVRBL,NK101905,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK101906
          MOVE      SIX,RTMPCMPN
          PACK      RTMPVRBL,NK101906,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and Load Primary Language (activated for TSK 0941543)
.
          STRIP     NK102001
          MOVELPTR  NK102001,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK102001,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK102001
            GOTO      VNOK0200
          ENDIF
.
          MATCH     BLANKSTR,NK102001            * field null ?
          IF        @EQUAL
            PACK      NK102001,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK102001
            GOTO      VNOK0200
          ENDIF
.
.         Make sure the language code is not more than 3 characters
.
          IF        FORM3 > 3
            MOVE      "NK1.20: Main Language Spoken has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VNOK0200
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.
          STRIP     NK102003
          MOVELPTR  NK102003,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "NK1.20: Main Language coding system not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ELSE
            MATCH     BLANKSTR,NK102003          * null field ?
            IF        @EQUAL
              MOVE      "NK1.20: Main Language coding system is mandatory",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
          MOVE      "l1",D2
          PACK      KEY5,D2,NK102001,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "NK1.20: Main Language Spoken Code not valid on patcodes file",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VNOK0200  MOVE      TWENTY,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK102001,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102002
          MOVE      TWO,RTMPCMPN
          PACK      RTMPVRBL,NK102002,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102003
          MOVE      THREE,RTMPCMPN
          PACK      RTMPVRBL,NK102003,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102004
          MOVE      FOUR,RTMPCMPN
          PACK      RTMPVRBL,NK102004,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102005
          MOVE      FIVE,RTMPCMPN
          PACK      RTMPVRBL,NK102005,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102006
          MOVE      SIX,RTMPCMPN
          PACK      RTMPVRBL,NK102006,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and Load Living Arrangement (not currently used)
.
          STRIP     NK102101
          MOVELPTR  NK102101,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK102101,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK102101
            GOTO      VNOK0210
          ENDIF
.
          MATCH     BLANKSTR,NK102101            * field null ?
          IF        @EQUAL
            PACK      NK102101,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK102101
            GOTO      VNOK0210
          ENDIF
.
VNOK0210  MOVE      TWENTY1,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK102101,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and Load Publicity Code (used for Send Letter/SMS 0898004)
.
          STRIP     NK102201
          MOVELPTR  NK102201,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK102201,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK102201
            GOTO      VNOK0220
          ENDIF
.
          MATCH     BLANKSTR,NK102201            * field null ?
          IF        @EQUAL
            PACK      NK102201,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK102201
            GOTO      VNOK0220
          ENDIF
.
VNOK0220  MOVE      TWENTY2,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK102201,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102202
          MOVE      TWO,RTMPCMPN
          PACK      RTMPVRBL,NK102202,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102203
          MOVE      THREE,RTMPCMPN
          PACK      RTMPVRBL,NK102203,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102204
          MOVE      FOUR,RTMPCMPN
          PACK      RTMPVRBL,NK102204,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102205
          MOVE      FIVE,RTMPCMPN
          PACK      RTMPVRBL,NK102205,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102206
          MOVE      SIX,RTMPCMPN
          PACK      RTMPVRBL,NK102206,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and Load Protection Indicator (not currently used)
.
          STRIP     NK102301
          MOVELPTR  NK102301,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK102301,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK102301
            GOTO      VNOK0230
          ENDIF
.
          MATCH     BLANKSTR,NK102301            * field null ?
          IF        @EQUAL
            PACK      NK102301,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK102301
            GOTO      VNOK0230
          ENDIF
.
VNOK0230  MOVE      TWENTY3,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK102301,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and Load Student Indicator (not currently used)
.
          STRIP     NK102401
          MOVELPTR  NK102401,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK102401,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK102401
            GOTO      VNOK0240
          ENDIF
.
          MATCH     BLANKSTR,NK102401            * field null ?
          IF        @EQUAL
            PACK      NK102401,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK102401
            GOTO      VNOK0240
          ENDIF
.
VNOK0240  MOVE      TWENTY4,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK102401,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and Load Religion (not currently used)
.
          STRIP     NK102501
          MOVELPTR  NK102501,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK102501,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK102501
            GOTO      VNOK0250
          ENDIF
.
          MATCH     BLANKSTR,NK102501            * field null ?
          IF        @EQUAL
            PACK      NK102501,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK102501
            GOTO      VNOK0250
          ENDIF
.
VNOK0250  MOVE      TWENTY5,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK102501,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102502
          MOVE      TWO,RTMPCMPN
          PACK      RTMPVRBL,NK102502,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102503
          MOVE      THREE,RTMPCMPN
          PACK      RTMPVRBL,NK102503,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102504
          MOVE      FOUR,RTMPCMPN
          PACK      RTMPVRBL,NK102504,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102505
          MOVE      FIVE,RTMPCMPN
          PACK      RTMPVRBL,NK102505,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102506
          MOVE      SIX,RTMPCMPN
          PACK      RTMPVRBL,NK102506,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and Load Mother's Maiden Name (not currently used)
.
          STRIP     NK102601
          MOVELPTR  NK102601,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK102601,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK102601
            GOTO      VNOK0260
          ENDIF
.
          MATCH     BLANKSTR,NK102601            * field null ?
          IF        @EQUAL
            PACK      NK102601,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK102601
            GOTO      VNOK0260
          ENDIF
.
VNOK0260  MOVE      TWENTY6,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK102601,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102602
          MOVE      TWO,RTMPCMPN
          PACK      RTMPVRBL,NK102602,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102603
          MOVE      THREE,RTMPCMPN
          PACK      RTMPVRBL,NK102603,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102604
          MOVE      FOUR,RTMPCMPN
          PACK      RTMPVRBL,NK102604,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102605
          MOVE      FIVE,RTMPCMPN
          PACK      RTMPVRBL,NK102605,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102606
          MOVE      SIX,RTMPCMPN
          PACK      RTMPVRBL,NK102606,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102607
          MOVE      SEVEN,RTMPCMPN
          PACK      RTMPVRBL,NK102607,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102608
          MOVE      EIGHT,RTMPCMPN
          PACK      RTMPVRBL,NK102608,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and Load Nationality (not currently used)
.
          STRIP     NK102701
          MOVELPTR  NK102701,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK102701,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK102701
            GOTO      VNOK0270
          ENDIF
.
          MATCH     BLANKSTR,NK102701            * field null ?
          IF        @EQUAL
            PACK      NK102701,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK102701
            GOTO      VNOK0270
          ENDIF
.
VNOK0270  MOVE      TWENTY7,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK102701,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102702
          MOVE      TWO,RTMPCMPN
          PACK      RTMPVRBL,NK102702,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102703
          MOVE      THREE,RTMPCMPN
          PACK      RTMPVRBL,NK102703,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102704
          MOVE      FOUR,RTMPCMPN
          PACK      RTMPVRBL,NK102704,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102705
          MOVE      FIVE,RTMPCMPN
          PACK      RTMPVRBL,NK102705,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102706
          MOVE      SIX,RTMPCMPN
          PACK      RTMPVRBL,NK102706,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and Load Ethnic Group (not currently used)
.
          STRIP     NK102801
          MOVELPTR  NK102801,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK102801,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK102801
            GOTO      VNOK0280
          ENDIF
.
          MATCH     BLANKSTR,NK102801            * field null ?
          IF        @EQUAL
            PACK      NK102801,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK102801
            GOTO      VNOK0280
          ENDIF
.
VNOK0280  MOVE      TWENTY8,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK102801,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102802
          MOVE      TWO,RTMPCMPN
          PACK      RTMPVRBL,NK102802,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102803
          MOVE      THREE,RTMPCMPN
          PACK      RTMPVRBL,NK102803,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102804
          MOVE      FOUR,RTMPCMPN
          PACK      RTMPVRBL,NK102804,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102805
          MOVE      FIVE,RTMPCMPN
          PACK      RTMPVRBL,NK102805,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102806
          MOVE      SIX,RTMPCMPN
          PACK      RTMPVRBL,NK102806,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and Load Contact Reason (not currently used)
.         Note: the array element for this field has been hardcoded to "1"
.               given that the array was only put in place for WA and is
.               not used anywhere else as the field will not be populated
.               (or even if it is it will be ignored).
.
          STRIP     NK102901[1]
          MOVELPTR  NK102901[1],FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK102901[1],SP100,SP100,SP100,SP100,SP100
            CLEAR     NK102901[1]
            GOTO      VNOK0290
          ENDIF
.
          MATCH     BLANKSTR,NK102901[1]         * field null ?
          IF        @EQUAL
            PACK      NK102901[1],SP100,SP100,SP100,SP100,SP100
            CLEAR     NK102901[1]
            GOTO      VNOK0290
          ENDIF
.
VNOK0290  MOVE      TWENTY9,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK102901[1],SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102902[1]
          MOVE      TWO,RTMPCMPN
          PACK      RTMPVRBL,NK102902[1],SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102903[1]
          MOVE      THREE,RTMPCMPN
          PACK      RTMPVRBL,NK102903[1],SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102904[1]
          MOVE      FOUR,RTMPCMPN
          PACK      RTMPVRBL,NK102904[1],SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102905[1]
          MOVE      FIVE,RTMPCMPN
          PACK      RTMPVRBL,NK102905[1],SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK102906[1]
          MOVE      SIX,RTMPCMPN
          PACK      RTMPVRBL,NK102906[1],SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and Load Contact Person's Name
.         No single component is mandatory
.
          STRIP     NK103001
          MOVELPTR  NK103001,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK103001,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK103001
            GOTO      VNOK0300
          ENDIF
.
          MATCH     BLANKSTR,NK103001            * field null ?
          IF        @EQUAL
            PACK      NK103001,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK103001
            GOTO      VNOK0300
          ENDIF
.
VNOK0300  MOVE      THIRTY,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK103001,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK103002
          MOVELPTR  NK103002,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK103002,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK103002
            GOTO      VNOK0302
          ENDIF
.
          MATCH     BLANKSTR,NK103002            * field null ?
          IF        @EQUAL
            PACK      NK103002,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK103002
            GOTO      VNOK0302
          ENDIF
.
VNOK0302  MOVE      TWO,RTMPCMPN
          PACK      RTMPVRBL,NK103002,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK103003
          MOVELPTR  NK103003,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK103003,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK103003
            GOTO      VNOK0303
          ENDIF
.
          MATCH     BLANKSTR,NK103003            * field null ?
          IF        @EQUAL
            PACK      NK103003,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK103003
            GOTO      VNOK0303
          ENDIF
.
VNOK0303  MOVE      THREE,RTMPCMPN
          PACK      RTMPVRBL,NK103003,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK103004
          MOVE      FOUR,RTMPCMPN
          PACK      RTMPVRBL,NK103004,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK103005
          MOVELPTR  NK103005,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK103005,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK103005
            GOTO      VNOK0305
          ENDIF
.
          MATCH     BLANKSTR,NK103005            * field null ?
          IF        @EQUAL
            PACK      NK103005,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK103005
            GOTO      VNOK0305
          ENDIF
.
          IF        FORM3 > 4
            MOVE      "NK1.30: Title has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VNOK0305
          ENDIF
.
          PACK      KEY4,NK103005,SP4
          CALL      RDPMTLE1                     * code on file ?
          IF        OVRCD = 1
            MOVE      "NK1.30: Title not on file",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VNOK0305
          ENDIF
.
VNOK0305  MOVE      FIVE,RTMPCMPN
          PACK      RTMPVRBL,NK103005,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK103006
          MOVE      SIX,RTMPCMPN
          PACK      RTMPVRBL,NK103006,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK103007
          MOVE      SEVEN,RTMPCMPN
          PACK      RTMPVRBL,NK103007,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK103008
          MOVE      EIGHT,RTMPCMPN
          PACK      RTMPVRBL,NK103008,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and load Contact Person's Telephone Number
.         The valid (parameter based) formats received are as follows:
.
.         ^^CP^^^^<cell phone>
.         ^PRN^PH^<email address>^^^<home phone>
.         ^WPN^PH^^^^<business phone>
.
.         The following logic is based on whether or not component 3
.         is populated and if so, what it is populated with (CP, PH or blank).
.
          MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 4
.
.           Check Component 3 first to see if it is populated
.
            STRIP     NK103103[COUNTER]          * remove trailing spaces
            MOVELPTR  NK103103[COUNTER],FORM3    * field populated ?
            IF        FORM3 = 0
              GOTO      VNOK0318                 * no
            ENDIF
.
            MATCH     BLANKSTR,NK103103[COUNTER] * null field ?
            GOTO      VNOK0318 IF EQUAL          * yes
.
.           Component 3 is populated, so it should be either "CP" or "PH"
.
            IF        FORM3 <> 2
              MOVE      "NK1.31: Component 3 incorrect length",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VNOK0318
            ENDIF
.
            MATCH     "CP",NK103103[COUNTER]     * cell phone ?
            GOTO      VNOK0318 IF EQUAL          * yes
.
            MATCH     "PH",NK103103[COUNTER]     * home phone ?
            GOTO      VNOK0312 IF EQUAL          * yes
.
            MOVE      "NK1.31: Component 3 not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VNOK0318
.
.           We have a phone number, so check that component 2 is "PRN"
.           (home phone) or "WPN" (business phone).
.
VNOK0312    STRIP     NK103102[COUNTER]          * remove trailing spaces
            MOVELPTR  NK103102[COUNTER],FORM3    * field populated ?
            IF        FORM3 = 0
              MOVE      "NK1.31: Component 2 not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
              GOTO      VNOK0318                 * no - finished
            ENDIF
.
            MATCH     BLANKSTR,NK103102[COUNTER] * null field ?
            IF        @EQUAL
              MOVE      "NK1.31: Component 2 is mandatory",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
              GOTO      VNOK0318                 * no - finished
            ENDIF
.
.           Component 2 is populated, so it should be "PRN"
.
            IF        FORM3 <> 3
              MOVE      "NK1.31: Component 2 incorrect length",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VNOK0318
            ENDIF
.
            MATCH     "PRN",NK103102[COUNTER]    * home phone ?
            GOTO      VNOK0318 IF EQUAL          * yes
.
            MATCH     "WPN",NK103102[COUNTER]    * business phone ?
            GOTO      VNOK0318 IF EQUAL          * yes
.
            MOVE      "NK1.31: Component 2 not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
.
VNOK0318    STRIP     NK103101[COUNTER]
            MOVE      THIRTY1,RTMPFLDN
            MOVE      COUNTER,RTMPFCNT
            MOVE      ONE,RTMPCMPN
            PACK      RTMPVRBL,NK103101[COUNTER],SP100,SP100,SP100,SP100,SP100
            CALL      WTMP0000
.
            STRIP     NK103102[COUNTER]
            MOVE      TWO,RTMPCMPN
            PACK      RTMPVRBL,NK103102[COUNTER],SP100,SP100,SP100,SP100,SP100
            CALL      WTMP0000
.
            STRIP     NK103103[COUNTER]
            MOVE      THREE,RTMPCMPN
            PACK      RTMPVRBL,NK103103[COUNTER],SP100,SP100,SP100,SP100,SP100
            CALL      WTMP0000
.
            STRIP     NK103104[COUNTER]
            MOVE      FOUR,RTMPCMPN
            PACK      RTMPVRBL,NK103104[COUNTER],SP100,SP100,SP100,SP100,SP100
            CALL      WTMP0000
.
            STRIP     NK103105[COUNTER]
            MOVE      FIVE,RTMPCMPN
            PACK      RTMPVRBL,NK103105[COUNTER],SP100,SP100,SP100,SP100,SP100
            CALL      WTMP0000
.
            STRIP     NK103106[COUNTER]
            MOVE      SIX,RTMPCMPN
            PACK      RTMPVRBL,NK103106[COUNTER],SP100,SP100,SP100,SP100,SP100
            CALL      WTMP0000
.
            STRIP     NK103107[COUNTER]
            MOVE      SEVEN,RTMPCMPN
            PACK      RTMPVRBL,NK103107[COUNTER],SP100,SP100,SP100,SP100,SP100
            CALL      WTMP0000
.
            STRIP     NK103108[COUNTER]
            MOVE      EIGHT,RTMPCMPN
            PACK      RTMPVRBL,NK103108[COUNTER],SP100,SP100,SP100,SP100,SP100
            CALL      WTMP0000
.
            SQUEEZE   NK103109[COUNTER]
            MOVELPTR  NK103109[COUNTER],FORM3
            COMPARE   ZERO,FORM3                  * field populated ?
            IF        @EQUAL
              PACK      NK103109[COUNTER],SP100,SP100,SP100,SP100,SP100
              CLEAR     NK103109[COUNTER]
              GOTO      VNOK0319
            ENDIF
.
            MATCH     BLANKSTR,NK103109[COUNTER]  * field null ?
            IF        @EQUAL
              PACK      NK103109[COUNTER],SP100,SP100,SP100,SP100,SP100
              CLEAR     NK103109[COUNTER]
            ENDIF
.
VNOK0319    MOVE      NINE,RTMPCMPN
            PACK      RTMPVRBL,NK103109[COUNTER],SP100,SP100,SP100,SP100,SP100
            CALL      WTMP0000
.
            ADD       ONE,COUNTER                * increment counter
          DO
.
.         Validate and Load Address
.         Street Address (Component 1) is mandatory if field is being populated
.
          STRIP     NK103201
          MOVELPTR  NK103201,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VNOK0320 IF EQUAL            * no
.
          MATCH     BLANKSTR,NK103201            * field null ?
          GOTO      VNOK0320 IF EQUAL            * yes
.
          GOTO      VNOK0321                     * field is populated
.
VNOK0320  PACK      NK103201,SP100,SP100,SP100,SP100,SP100
          PACK      NK103202,SP100,SP100,SP100,SP100,SP100
          PACK      NK103203,SP100,SP100,SP100,SP100,SP100
          PACK      NK103204,SP100,SP100,SP100,SP100,SP100
          PACK      NK103205,SP100,SP100,SP100,SP100,SP100
          PACK      NK103206,SP100,SP100,SP100,SP100,SP100
          PACK      NK103207,SP100,SP100,SP100,SP100,SP100
          PACK      NK103208,SP100,SP100,SP100,SP100,SP100
          PACK      NK103209,SP100,SP100,SP100,SP100,SP100
          PACK      NK103210,SP100,SP100,SP100,SP100,SP100
          PACK      NK103211,SP100,SP100,SP100,SP100,SP100
          GOTO      VNOK0329
.
.         Other designation - Component 2
.
VNOK0321  STRIP     NK103202
          MOVELPTR  NK103202,FORM3               * field populated ?
          IF        FORM3 = 0
            PACK      NK103202,SP100,SP100,SP100,SP100,SP100
            GOTO      VNOK0322
          ENDIF
.
          MATCH     BLANKSTR,NK103202            * field null ?
          IF        @EQUAL
            PACK      NK103202,SP100,SP100,SP100,SP100,SP100
          ENDIF
.
.         City - Component 3
.
VNOK0322  STRIP     NK103203
          MOVELPTR  NK103203,FORM3               * field populated ?
          IF        FORM3 = 0
            PACK      NK103203,SP100,SP100,SP100,SP100,SP100
            GOTO      VNOK0323
          ENDIF
.
          MATCH     BLANKSTR,NK103203            * field null ?
          IF        @EQUAL
            PACK      NK103203,SP100,SP100,SP100,SP100,SP100
          ENDIF
.
.         Country - Component 6
.         Check this field first to determine how to validate the rest
.         of the fields
.
VNOK0323  STRIP     NK103206
          MOVELPTR  NK103206,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "NK1.32: Address Country not populated",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VNOK0330
          ENDIF
.
          MATCH     BLANKSTR,NK103206            * null field ?
          IF        @EQUAL
            MOVE      "NK1.32: Address Country is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VNOK0330
          ENDIF
.
.         Country Address is populated, so check if the country is Australia
.         which will determine if it is an overseas address or a local address
.
          MATCH     "AUSTRALIA",NK103206         * local address ?
          GOTO      VNOK0328 IF NOT EQUAL        * no
.
.         State - Component 4 (Local Address Only)
.
          STRIP     NK103204
          MOVELPTR  NK103204,FORM3               * field populated ?
          IF        FORM3 = 0
            PACK      NK103204,SP100,SP100,SP100,SP100,SP100
            GOTO      VNOK0324
          ENDIF
.
          MATCH     BLANKSTR,NK103204            * null field ?
          IF        @EQUAL
            PACK      NK103204,SP100,SP100,SP100,SP100,SP100
          ENDIF
.
.         Postcode - Component 5 (Local Address Only)
.
VNOK0324  SQUEEZE   NK103205
          MOVELPTR  NK103205,FORM3               * field populated ?
          IF        FORM3 = 0
            PACK      NK103205,SP100,SP100,SP100,SP100,SP100
            GOTO      VNOK0329
          ENDIF
.
          MATCH     BLANKSTR,NK103205            * null field ?
          IF        @EQUAL
            PACK      NK103205,SP100,SP100,SP100,SP100,SP100
            GOTO      VNOK0329
          ENDIF
.
.         Post Code is populated, so validate it
.
          IF        FORM3 <> 4
            MOVE      "NK1.32: Address Postcode incorrect length",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VNOK0330
          ENDIF
.
          TYPE      NK103205
          IF        !@EQUAL
            MOVE      "NK1.32: Address Postcode not numeric",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VNOK0330
          ENDIF
.
          COMPARE   TWO,PTCNHDPS                 * Australian site ?
          GOTO      VNOK0329 IF LESS             * no
.
.         Postcode is populated, so if the suburb is also populated,
.         check that the suburb and postcode are valid.  If state is also
.         populated, then use this to validate as well.
.
          MATCH     SP100,NK103203               * suburb populated ?
          GOTO      VNOK0329 IF EQUAL            * no
.
          MATCH     BLANKSTR,NK103203            * blank suburb ?
          GOTO      VNOK0329 IF EQUAL            * yes
.
          MATCH     SP100,NK103204               * state populated ?
          GOTO      VNOK0326 IF EQUAL            * no
.
          MATCH     BLANKSTR,NK103204            * blank state ?
          GOTO      VNOK0326 IF EQUAL            * yes
.
.         Check if the postcode/suburb/state combination is valid
.
          PACK      KEY8,NK103205,SP10
          PACK      KEY45,NK103203,SP70
          PACK      KEY3,NK103204,SP10
          PACK      KEY56,KEY8,KEY45,KEY3
          CALL      RDIBPOS1                     * postcode on file ?
          BRANCH    OVRCD,VNOK0327               * no
          GOTO      VNOK0329
.
.         Check if the postcode/suburb combination is valid
.
VNOK0326  PACK      KEY8,NK103205,SP10
          PACK      KEY56,KEY8,NK103203,SP70
          CALL      RDIBPOS1                     * postcode/suburb on file ?
          COMPARE   ZERO,OVRCD
          GOTO      VNOK0329 IF EQUAL            * yes - valid
.
          CALL      RKIBPOS1                     * read next record
          BRANCH    OVRCD,VNOK0327               * eof - error
.
          PACK      KEY8,NK103205,SP10
          MATCH     KEY8,IBPOPCOD                * same postcode still ?
          IF        @EQUAL
            PACK      KEY45,NK103203,SP70
            MATCH     KEY45,IBPOSUBR             * yes - same suburb still ?
            GOTO      VNOK0329 IF EQUAL          * yes
          ENDIF
.
.         The postcode/address doesn't exist on ibapostf, so check if
.         the parameter is set to use a default value and if so,then
.         load the default value
.
VNOK0327  MATCH     "1",PTCNUNPC                 * using default unknown pcode ?
          IF        !@EQUAL
            MOVE      "NK1.32: Address PostcodeSuburb not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VNOK0330
          ELSE
            UNPACK    PTCNADDR,DIM4,DIM45,DIM3   * yes
            MOVE      DIM4,NK103205
            MOVE      DIM45,NK103203
            STRIP     NK103203
            MOVE      DIM3,NK103204
            STRIP     NK103204
            GOTO      VNOK0329
          ENDIF
.
.         We have an overseas address, so set the postcode (component 5)
.         to "8888" and load the country (component 6) into state (component 4),
.         remove any data from country (component 6) and set city (component 3)
.         to "OVERSEAS ADDRESS"
.
VNOK0328  MOVE      "NK1.32",DIM6
          MOVE      NK103206,DIM20
          CALL      VALC0000                     * validate country
          MOVE      "OVERSEAS ADDRESS",NK103203
          MOVE      NK103206,NK103204
          PACK      NK103205,EIGHT,EIGHT,EIGHT,EIGHT
          PACK      NK103206,SP100,SP100,SP100,SP100,SP100
.
VNOK0329  MOVE      THIRTY2,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK103201,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          MOVE      TWO,RTMPCMPN
          PACK      RTMPVRBL,NK103202,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          MOVE      THREE,RTMPCMPN
          PACK      RTMPVRBL,NK103203,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          MOVE      FOUR,RTMPCMPN
          PACK      RTMPVRBL,NK103204,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          MOVE      FIVE,RTMPCMPN
          PACK      RTMPVRBL,NK103205,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          MOVE      SIX,RTMPCMPN
          PACK      RTMPVRBL,NK103206,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK103207
          MOVE      SEVEN,RTMPCMPN
          PACK      RTMPVRBL,NK103207,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK103208
          MOVE      EIGHT,RTMPCMPN
          PACK      RTMPVRBL,NK103208,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK103209
          MOVE      NINE,RTMPCMPN
          PACK      RTMPVRBL,NK103209,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK103210
          MOVE      TEN,RTMPCMPN
          PACK      RTMPVRBL,NK103210,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK103211
          MOVE      TEN1,RTMPCMPN
          PACK      RTMPVRBL,NK103211,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Load and validate Identifiers
.
VNOK0330  STRIP     NK103301
          MOVELPTR  NK103301,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK103301,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK103301
            GOTO      VNOK0331
          ENDIF
.
          MATCH     BLANKSTR,NK103301            * field null ?
          IF        @EQUAL
            PACK      NK103301,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK103301
          ENDIF
.
VNOK0331  MOVE      THIRTY3,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK103301,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK103302
          MOVE      TWO,RTMPCMPN
          PACK      RTMPVRBL,NK103302,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK103303
          MOVE      THREE,RTMPCMPN
          PACK      RTMPVRBL,NK103303,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK103304
          MOVE      FOUR,RTMPCMPN
          PACK      RTMPVRBL,NK103304,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK103305
          MOVE      FIVE,RTMPCMPN
          PACK      RTMPVRBL,NK103305,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK103306
          MOVE      SIX,RTMPCMPN
          PACK      RTMPVRBL,NK103306,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Load and validate Job Status
.
          STRIP     NK103401
          MOVELPTR  NK103401,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK103401,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK103401
            GOTO      VNOK0340
          ENDIF
.
          MATCH     BLANKSTR,NK103401            * field null ?
          IF        @EQUAL
            PACK      NK103401,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK103401
            GOTO      VNOK0340
          ENDIF
.
VNOK0340  MOVE      THIRTY4,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK103401,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Load and validate Race
.
          STRIP     NK103501
          MOVELPTR  NK103501,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK103501,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK103501
            GOTO      VNOK0350
          ENDIF
.
          MATCH     BLANKSTR,NK103501            * field null ?
          IF        @EQUAL
            PACK      NK103501,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK103501
            GOTO      VNOK0350
          ENDIF
.
VNOK0350  MOVE      THIRTY5,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK103501,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK103502
          MOVE      TWO,RTMPCMPN
          PACK      RTMPVRBL,NK103502,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK103503
          MOVE      THREE,RTMPCMPN
          PACK      RTMPVRBL,NK103503,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK103504
          MOVE      FOUR,RTMPCMPN
          PACK      RTMPVRBL,NK103504,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK103505
          MOVE      FIVE,RTMPCMPN
          PACK      RTMPVRBL,NK103505,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     NK103506
          MOVE      SIX,RTMPCMPN
          PACK      RTMPVRBL,NK103506,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Load and validate Handicap
.
          STRIP     NK103601
          MOVELPTR  NK103601,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK103601,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK103601
            GOTO      VNOK0360
          ENDIF
.
          MATCH     BLANKSTR,NK103601            * field null ?
          IF        @EQUAL
            PACK      NK103601,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK103601
            GOTO      VNOK0360
          ENDIF
.
VNOK0360  MOVE      THIRTY6,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK103601,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Load and validate Social Security Number
.
          STRIP     NK103701
          MOVELPTR  NK103701,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      NK103701,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK103701
            GOTO      VNOK0370
          ENDIF
.
          MATCH     BLANKSTR,NK103701            * field null ?
          IF        @EQUAL
            PACK      NK103701,SP100,SP100,SP100,SP100,SP100
            CLEAR     NK103701
            GOTO      VNOK0370
          ENDIF
.
VNOK0370  MOVE      THIRTY7,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,NK103701,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
VNOK9999  RETURN
+
.****************************************************************************
.*                              VZAL0000               Called by: PROC0000  *
.*       Validate, load and write ZAL fields to the temporary table.        *
.*       The temporary table is used as we can receive more than 1 ZAL      *
.*       segment per message.                                               *
.****************************************************************************
.           
.         If the parameter is set to ignore the delete segment for NK1/ZAL,
.         then we need to use the VALA0000 routine instead of the VZAL0000
.         routine.    
.         
VZAL0000  MATCH     "1",PTCNH7ID
          IF        @EQUAL
            CALL      VALA0000                   * alternate validation routine
            IF        ZALCOUNT > 1
              CALL      MATA0000                 * match alert
            ENDIF     
            GOTO      VZAL9999
          ENDIF
.
          MOVE      ZALSEGMT,RTMPSEGI            * load segment id
.
.         Now check if this is a "delete segment" where all fields are
.         null (..|""|...).
.
          MATCH     BLANKSTR,ZAL00101            * null field ?
          GOTO      VZAL0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,ZAL00201            * null field ?
          GOTO      VZAL0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,ZAL00301            * null field ?
          GOTO      VZAL0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,ZAL00401            * null field ?
          GOTO      VZAL0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,ZAL00501            * null field ?
          GOTO      VZAL0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,ZAL00601            * null field ?
          GOTO      VZAL0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,ZAL00701            * null field ?
          GOTO      VZAL0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,ZAL00801            * null field ?
          GOTO      VZAL0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,ZAL00901            * null field ?
          GOTO      VZAL0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,ZAL01001            * null field ?
          GOTO      VZAL0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,ZAL01101            * null field ?
          GOTO      VZAL0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,ZAL01201            * null field ?
          GOTO      VZAL0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,ZAL01301            * null field ?
          GOTO      VZAL0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,ZAL01401            * null field ?
          GOTO      VZAL0005 IF NOT EQUAL        * no - proceed with validation
.
          MATCH     BLANKSTR,ZAL01501[1]         * null field ?
          GOTO      VZAL0005 IF NOT EQUAL        * no - proceed with validation
.
.         This is a delete segment, so make sure it's the first ZAL segment
.
          COMPARE   ZERO,ZALCOUNT                * first ZAL segment ?
          IF        @EQUAL
            ADD       ONE,ZALCOUNT               * increment ZAL segment count
            MOVE      ZERO,ZALFOUND              * yes - set ZAL found flag
            GOTO      VZAL9999                   * yes - finished validation
          ENDIF
.
          MOVE      "ZAL: Delete ZAL segment out of sequence",ERRORDSC
          MOVE      "100",ERRORNUM
          CALL      EROR0000
          GOTO      VZAL9999
.
.         We have a ZAL segment which contains data, so check that it's not
.         the first ZAL segment (which should be a delete segment).
.
VZAL0005  ADD       ONE,ZALCOUNT                 * increment ZAL segment count
          ASSIGN    (ZALCOUNT-1),RTMPSEGC        * load ZAL segment count
          COMPARE   ONE,ZALFOUND
          IF        @EQUAL
            MOVE      "ZAL: ZAL delete segment missing",ERRORDSC
            MOVE      "100",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Load and validate the Set ID.
.
          SQUEEZE   ZAL00101
          MOVELPTR  ZAL00101,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "ZAL.1: Set ID not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZAL0010
          ENDIF
.
          MATCH     BLANKSTR,ZAL00101            * field null ?
          IF        @EQUAL
            MOVE      "ZAL.1: Set ID is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZAL0010
          ENDIF
.
          TYPE      ZAL00101
          IF        !@EQUAL
            MOVE      "ZAL.1: Set ID not numeric",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VZAL0010
          ENDIF
.
          MOVE      ZAL00101,RTMPSEGC
          ASSIGN    (ZALCOUNT-1),FORM3
          COMPARE   FORM3,RTMPSEGC
          IF        !@EQUAL
            MOVE      "ZAL.1: Set ID not in sequence",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          MOVE      ONE,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,ZAL00101,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Load and validate Alert Category
.
VZAL0010  STRIP     ZAL00201
          MOVELPTR  ZAL00201,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "ZAL.2: Alert Category not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZAL0020
          ENDIF
.
          MATCH     BLANKSTR,ZAL00201            * field null ?
          IF        @EQUAL
            MOVE      "ZAL.2: Alert Category is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZAL0020
          ENDIF
.
          IF        FORM3 <> 2
            MOVE      "ZAL.2: Alert Category incorrect length",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZAL0020
          ENDIF
.         
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.         
          STRIP     ZAL00203
          MOVELPTR  ZAL00203,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "ZAL.2: Alert Type coding system not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000 
          ELSE
            MATCH     BLANKSTR,ZAL00203          * null field ?
            IF        @EQUAL
              MOVE      "ZAL.2: Alert Type coding system is mandatory",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
          MOVE      ZAL00201,ANS
          MATCH     ANSH,ANS
          IF        !@EQUAL
            MOVE      "ZAL.2: Alert Category not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZAL0020
          ENDIF
.
          UNPACK    ZAL00201,ANS,ANS
          TYPE      ANS
          IF        !@EQUAL
            MOVE      "ZAL.2: Alert Category not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZAL0020
          ENDIF
.
          PACK      KEY5,ZAL00201,SP5
          CALL      RDCODE1                      * category on file ?
          IF        OVRCD = 1
            MOVE      "ZAL.2: Alert Category not on file",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZAL0020
          ENDIF
.
          MOVE      TWO,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,ZAL00201,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL00202
          MOVE      TWO,RTMPCMPN
          PACK      RTMPVRBL,ZAL00202,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL00203
          MOVE      THREE,RTMPCMPN
          PACK      RTMPVRBL,ZAL00203,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL00204
          MOVE      FOUR,RTMPCMPN
          PACK      RTMPVRBL,ZAL00204,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL00205
          MOVE      FIVE,RTMPCMPN
          PACK      RTMPVRBL,ZAL00205,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL00206
          MOVE      SIX,RTMPCMPN
          PACK      RTMPVRBL,ZAL00206,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and load Alert Code
.
VZAL0020  STRIP     ZAL00301
          MOVELPTR  ZAL00301,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "ZAL.3: Alert Code not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZAL0030
          ENDIF
.
          MATCH     BLANKSTR,ZAL00301            * field null ?
          IF        @EQUAL
            MOVE      "ZAL.3: Alert Code is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZAL0030
          ENDIF
.
          IF        FORM3 > 3
            MOVE      "ZAL.3: Alert Code has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZAL0030
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.
          STRIP     ZAL00303
          MOVELPTR  ZAL00303,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "ZAL.3: Alert Code coding system not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ELSE
            MATCH     BLANKSTR,ZAL00303          * null field ?
            IF        @EQUAL
              MOVE      "ZAL.3: Alert Code coding system is mandatory",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
          PACK      KEY5,ZAL00201,ZAL00301,SP5
          CALL      RDCODE1                      * code on file ?
          IF        OVRCD = 1
            MOVE      "ZAL.3: Alert Code not on file",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZAL0030
          ENDIF
.
          MOVE      THREE,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,ZAL00301,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL00302
          MOVE      TWO,RTMPCMPN
          PACK      RTMPVRBL,ZAL00302,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL00303
          MOVE      THREE,RTMPCMPN
          PACK      RTMPVRBL,ZAL00303,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL00304
          MOVE      FOUR,RTMPCMPN
          PACK      RTMPVRBL,ZAL00304,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL00305
          MOVE      FIVE,RTMPCMPN
          PACK      RTMPVRBL,ZAL00305,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL00306
          MOVE      SIX,RTMPCMPN
          PACK      RTMPVRBL,ZAL00306,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and load Reaction Code
.
VZAL0030  STRIP     ZAL00401
          MOVELPTR  ZAL00401,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      SP3,ZAL00401
            CLEAR     ZAL00401
            GOTO      VZAL0035
          ENDIF
.
          MATCH     BLANKSTR,ZAL00401            * field null ?
          IF        @EQUAL
            MOVE      SP3,ZAL00401
            CLEAR     ZAL00401
            GOTO      VZAL0035
          ENDIF
.
          IF        FORM3 > 3
            MOVE      "ZAL.4: Reaction Code has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZAL0040
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.
          STRIP     ZAL00403
          MOVELPTR  ZAL00403,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "ZAL.4: Reaction coding system not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ELSE
            MATCH     BLANKSTR,ZAL00403          * null field ?
            IF        @EQUAL
              MOVE      "ZAL.4: Reaction coding system is mandatory",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
          PACK      KEY5,CATWN,ZAL00401,SP5
          CALL      RDCODE1                      * code on file ?
          IF        OVRCD = 1
            MOVE      "ZAL.4: Reaction Code not on file",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZAL0040
          ENDIF
.
VZAL0035  MOVE      FOUR,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,ZAL00401,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL00402
          MOVE      TWO,RTMPCMPN
          PACK      RTMPVRBL,ZAL00402,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL00403
          MOVE      THREE,RTMPCMPN
          PACK      RTMPVRBL,ZAL00403,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL00404
          MOVE      FOUR,RTMPCMPN
          PACK      RTMPVRBL,ZAL00404,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL00405
          MOVE      FIVE,RTMPCMPN
          PACK      RTMPVRBL,ZAL00405,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL00406
          MOVE      SIX,RTMPCMPN
          PACK      RTMPVRBL,ZAL00406,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and load Alert Date
.
VZAL0040  STRIP     ZAL00501
          MOVELPTR  ZAL00501,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "ZAL.5: Alert Date not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZAL0050
          ENDIF
.
          MATCH     BLANKSTR,ZAL00501            * field null ?
          IF        @EQUAL
            MOVE      "ZAL.5: Alert Date is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZAL0050
          ENDIF
.
          MOVE      ZAL00501,DIM14
          MOVE      "ZAL.5 ",FIELDID
          MOVE      ONE,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
          MOVE      FIVE,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,ZAL00501,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and load Severity Level
.
VZAL0050  SQUEEZE   ZAL00601
          MOVELPTR  ZAL00601,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      SP2,ZAL00601
            CLEAR     ZAL00601
            GOTO      VZAL0055
          ENDIF
.
          MATCH     BLANKSTR,ZAL00601            * field null ?
          IF        @EQUAL
            MOVE      SP2,ZAL00601
            CLEAR     ZAL00601
            GOTO      VZAL0055
          ENDIF
.
          TYPE      ZAL00601
          IF        !@EQUAL
            MOVE      "ZAL.6: Severity level not numeric",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VZAL0060
          ENDIF
.
          IF        FORM3 <> 1
            MOVE      "ZAL.6: Severity level incorrect length",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZAL0060
          ENDIF
.
VZAL0055  MOVE      SIX,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,ZAL00601,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and load Review Date
.
VZAL0060  STRIP     ZAL00701
          MOVELPTR  ZAL00701,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      SP8,ZAL00701
            CLEAR     ZAL00701
            GOTO      VZAL0065
          ENDIF
.
          MATCH     BLANKSTR,ZAL00701            * field null ?
          IF        @EQUAL
            MOVE      SP8,ZAL00701
            CLEAR     ZAL00701
            GOTO      VZAL0065
          ENDIF
.
          MOVE      ZAL00701,DIM14
          MOVE      "ZAL.7 ",FIELDID
          MOVE      ZERO,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
          MATCH     ZAL00501,ZAL00701        
          IF        @LESS
            MOVE      "ZAL.7: Review date less than alert date",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZAL0070
          ENDIF
.
VZAL0065  MOVE      SEVEN,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,ZAL00701,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and load Date Inactive
.
VZAL0070  STRIP     ZAL00801
          MOVELPTR  ZAL00801,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      SP8,ZAL00801
            CLEAR     ZAL00801
            GOTO      VZAL0075
          ENDIF
.
          MATCH     BLANKSTR,ZAL00801            * field null ?
          IF        @EQUAL
            MOVE      SP8,ZAL00801
            CLEAR     ZAL00801
            GOTO      VZAL0075
          ENDIF
.
          MOVE      ZAL00801,DIM14
          MOVE      "ZAL.8 ",FIELDID
          MOVE      ZERO,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
          MATCH     ZAL00501,ZAL00801        
          IF        @LESS
            MOVE      "ZAL.8: Date Inactive less than alert date",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZAL0080
          ENDIF
.
VZAL0075  MOVE      EIGHT,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,ZAL00801,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and load End Date
.
VZAL0080  STRIP     ZAL00901
          MOVELPTR  ZAL00901,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      SP8,ZAL00901
            CLEAR     ZAL00901
            GOTO      VZAL0085
          ENDIF
.
          MATCH     BLANKSTR,ZAL00901            * field null ?
          IF        @EQUAL
            MOVE      SP8,ZAL00901
            CLEAR     ZAL00901
            GOTO      VZAL0085
          ENDIF
.
          MOVE      ZAL00901,DIM14
          MOVE      "ZAL.9 ",FIELDID
          MOVE      ZERO,DATFLAG1
          MOVE      ZERO,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
          MATCH     ZAL00501,ZAL00901        
          IF        @LESS
            MOVE      "ZAL.9: End Date less than alert date",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZAL0090
          ENDIF
.
VZAL0085  MOVE      NINE,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,ZAL00901,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and load Authorising HCP
.
VZAL0090  STRIP     ZAL01001
          MOVELPTR  ZAL01001,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      SP10,ZAL01001
            CLEAR     ZAL01001
            GOTO      VZAL0095
          ENDIF
.
          MATCH     BLANKSTR,ZAL01001            * field null ?
          IF        @EQUAL
            MOVE      SP8,ZAL01001
            CLEAR     ZAL01001
            GOTO      VZAL0095
          ENDIF
.
          IF        FORM3 > 10
            MOVE      "ZAL.4: Authorising HCP Code has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZAL0095
          ENDIF
.
          PACK      KEY10,ZAL01001,SP10
          CALL      RDPMHCP1                     * code on file ?
          IF        OVRCD = 1
            MOVE      "ZAL.10: Authorising HCP Code not on file",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZAL0100
          ENDIF
.
VZAL0095  MOVE      TEN,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,ZAL01001,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL01002
          MOVE      TWO,RTMPCMPN
          PACK      RTMPVRBL,ZAL01002,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL01003
          MOVE      THREE,RTMPCMPN
          PACK      RTMPVRBL,ZAL01003,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL01004
          MOVE      FOUR,RTMPCMPN
          PACK      RTMPVRBL,ZAL01004,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL01005
          MOVE      FIVE,RTMPCMPN
          PACK      RTMPVRBL,ZAL01005,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL01006
          MOVE      SIX,RTMPCMPN
          PACK      RTMPVRBL,ZAL01006,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL01007
          MOVE      SEVEN,RTMPCMPN
          PACK      RTMPVRBL,ZAL01007,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL01008
          MOVE      EIGHT,RTMPCMPN
          PACK      RTMPVRBL,ZAL01008,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL01009
          MOVE      NINE,RTMPCMPN
          PACK      RTMPVRBL,ZAL01009,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL01010
          MOVE      TEN,RTMPCMPN
          PACK      RTMPVRBL,ZAL01010,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL01011
          MOVE      TEN1,RTMPCMPN
          PACK      RTMPVRBL,ZAL01011,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL01012
          MOVE      TEN2,RTMPCMPN
          PACK      RTMPVRBL,ZAL01012,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL01013
          MOVE      TEN3,RTMPCMPN
          PACK      RTMPVRBL,ZAL01013,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL01014
          MOVE      TEN4,RTMPCMPN
          PACK      RTMPVRBL,ZAL01014,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL01015
          MOVE      TEN5,RTMPCMPN
          PACK      RTMPVRBL,ZAL01015,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and load Last Update Date/Time
.
VZAL0100  STRIP     ZAL01101
          MOVELPTR  ZAL01101,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "ZAL.11: Last Update DateTime not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZAL0110
          ENDIF
.
          MATCH     BLANKSTR,ZAL01101            * field null ?
          IF        @EQUAL
            MOVE      "ZAL.11: Last Update DateTime is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZAL0110
          ENDIF
.
          MOVE      ZAL01101,DIM14
          MOVE      "ZAL.11",FIELDID
          MOVE      ONE,DATFLAG1
          MOVE      ONE,DATFLAG2
          CALL      VDTM0000                     * date/time validation
.
          MOVE      TEN1,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,ZAL01101,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and load User Who Last Updated
.
VZAL0110  STRIP     ZAL01201
          MOVELPTR  ZAL01201,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VZAL0120 IF EQUAL            * no
.
          MATCH     BLANKSTR,ZAL01201            * field null ?
          GOTO      VZAL0120 IF EQUAL            * yes
.
          MATCH     "1",PTCNH7LN
          IF        !@EQUAL
            IF        FORM3 > 10
              MOVE      "ZAL.12: User Who Last Updated has too many characters",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VZAL0120
            ENDIF
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.         
          STRIP     ZAL01203
          MOVELPTR  ZAL01203,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "ZAL.12: User coding system not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ELSE
            MATCH     BLANKSTR,ZAL01203          * null field ?
            IF        @EQUAL
              MOVE      "ZAL.12: User coding system is mandatory",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
.         Check if we are using the Security Login Name
.
          MATCH     "1",PTCNH7LN
          IF        @EQUAL
            PACK      KEY80,ZAL01201,SP100
            CALL      RDWBSE7                    * login name in file ?
            IF        OVRCD = 1
              MOVE      "ZAL.12: Long Login Name Who Last Updated not on file",ERRORDSC
              MOVE      "103",ERRORNUM
              CALL      EROR0000
              GOTO      VZAL0120
            ELSE
              MOVE      WBSEUID,ZAL01201         * yes - load User ID
              STRIP     ZAL01201
            ENDIF
          ENDIF
.
          PACK      KEY10,ZAL01201,SP10
          CALL      RDWBSE1                      * code on file ?
          IF        OVRCD = 1
            MOVE      "ZAL.12: User ID Who Last Updated not on file",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZAL0120
          ENDIF
.
          MOVE      TEN2,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,ZAL01201,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL01202
          MOVE      TWO,RTMPCMPN
          PACK      RTMPVRBL,ZAL01202,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL01203
          MOVE      THREE,RTMPCMPN
          PACK      RTMPVRBL,ZAL01203,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL01204
          MOVE      FOUR,RTMPCMPN
          PACK      RTMPVRBL,ZAL01204,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL01205
          MOVE      FIVE,RTMPCMPN
          PACK      RTMPVRBL,ZAL01205,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL01206
          MOVE      SIX,RTMPCMPN
          PACK      RTMPVRBL,ZAL01206,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Validate and load Hospital
.
VZAL0120  STRIP     ZAL01301
          MOVELPTR  ZAL01301,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
.             * only mandatory for multi hospital database
            COMPARE   ONE,IBCNMHOS                 * using multi-hospital
            GOTO      VZAL0130 IF NOT EQUAL        * no
.
            MOVE      "ZAL.13: Hospital not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZAL0130
          ENDIF
.
          MATCH     BLANKSTR,ZAL01301            * field null ?
          IF        @EQUAL
.             * only mandatory for multi hospital database
            COMPARE   ONE,IBCNMHOS                 * using multi-hospital
            GOTO      VZAL0130 IF NOT EQUAL        * no
.
            MOVE      "ZAL.13: Hospital is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VZAL0130
          ENDIF
.
          IF        FORM3 > 3
            MOVE      "ZAL.13: Hospital has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VZAL0130
          ENDIF
.
.         Component 1 is populated, so make sure that component 3 is also
.         populated (HL7 requirement)
.         
          STRIP     ZAL01303
          MOVELPTR  ZAL01303,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            MOVE      "ZAL.13: Hospital coding system not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ELSE
            MATCH     BLANKSTR,ZAL01303          * null field ?
            IF        @EQUAL
              MOVE      "ZAL.13: Hospital coding system is mandatory",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
            ENDIF
          ENDIF
.
          PACK      KEY3,ZAL01301,SP3
          CALL      RDPTHSP1                     * code on file ?
          IF        OVRCD = 1
            MOVE      "ZAL.13: Hospital not on file",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VZAL0130
          ENDIF
.
          MOVE      TEN3,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,ZAL01301,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL01302
          MOVE      TWO,RTMPCMPN
          PACK      RTMPVRBL,ZAL01302,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL01303
          MOVE      THREE,RTMPCMPN
          PACK      RTMPVRBL,ZAL01303,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL01304
          MOVE      FOUR,RTMPCMPN
          PACK      RTMPVRBL,ZAL01304,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL01305
          MOVE      FIVE,RTMPCMPN
          PACK      RTMPVRBL,ZAL01305,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
          STRIP     ZAL01306
          MOVE      SIX,RTMPCMPN
          PACK      RTMPVRBL,ZAL01306,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
.         Load Comments
.
VZAL0130  STRIP     ZAL01401
          MOVELPTR  ZAL01401,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          IF        @EQUAL
            PACK      ZAL01401,SP100,SP100,SP100
            CLEAR     ZAL01401
            GOTO      VZAL0135
          ENDIF
.
          MATCH     BLANKSTR,ZAL01401            * field null ?
          IF        @EQUAL
            PACK      ZAL01401,SP100,SP100,SP100
            CLEAR     ZAL01401
            GOTO      VZAL0135
          ENDIF
.
VZAL0135  MOVE      TEN4,RTMPFLDN
          MOVE      ONE,RTMPFCNT
          MOVE      ONE,RTMPCMPN
          PACK      RTMPVRBL,ZAL01401,SP100,SP100,SP100,SP100,SP100
          CALL      WTMP0000
.
VZAL9999  RETURN
+
.****************************************************************************
.*                              WTMP0000               Called by: VZAL0000  *
.*               Write segment fields to the temporary table                *
.* Requires: All temporary table fields to be populated                     *
.* RTMPSEGI - segment identifier                                            *
.* RTMPSEGC - segment count                                                 *
.****************************************************************************
.
WTMP0000  PACK      KEY15,RTMPSEGI,RTMPSEGC,RTMPFLDN,RTMPFCNT,RTMPCMPN
          CALL      RATEMP1
          IF        OVRCD = 0
            MOVE      "Duplicate record on temporary table",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ELSE
            CALL      WRTEMP1
          ENDIF
.
WTMP9999  RETURN
+
.*****************************************************************************
.*                              VMED0000               Called by: VPID0000   *
.*              Validate the Medicare Number                                 *
.* Requires:  PID00301[COUNTER] - Medicare Number                            *
.*****************************************************************************
.
VMED0000  UNPACK    PID00301[COUNTER],DIGNUM01,DIGNUM02,DIGNUM03,DIGNUM04:
                                      DIGNUM05,DIGNUM06,DIGNUM07,DIGNUM08:
                                      DIGNUM09
.
          MOVE      DIGNUM01,DIGIT01             * convert to numeric variables
          MOVE      DIGNUM02,DIGIT02
          MOVE      DIGNUM03,DIGIT03
          MOVE      DIGNUM04,DIGIT04
          MOVE      DIGNUM05,DIGIT05
          MOVE      DIGNUM06,DIGIT06
          MOVE      DIGNUM07,DIGIT07
          MOVE      DIGNUM08,DIGIT08
          MOVE      DIGNUM09,DIGIT09
.
.         The first digit must be in the range 2 - 6, unless we are using the
.         test value of 123123123.
.
          IF        DIGIT01 < 2 | DIGIT01 > 6
            MATCH     "123123123",PID00301[COUNTER]
            IF        !@EQUAL
              BRANCH    QUICKREG,VMED9000
              MOVE      "PID.3: Medicare Number first digit not valid",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VMED9999
            ENDIF
          ENDIF
.
          MOVE      DIGIT01,FORMTOT
          ASSIGN    ((DIGIT02*3)+FORMTOT),FORMTOT
          ASSIGN    ((DIGIT03*7)+FORMTOT),FORMTOT
          ASSIGN    ((DIGIT04*9)+FORMTOT),FORMTOT
          ASSIGN    (DIGIT05+FORMTOT),FORMTOT
          ASSIGN    ((DIGIT06*3)+FORMTOT),FORMTOT
          ASSIGN    ((DIGIT07*7)+FORMTOT),FORMTOT
          ASSIGN    ((DIGIT08*9)+FORMTOT),FORMTOT
          ASSIGN    (FORMTOT%10),FORMTOT
.
          COMPARE   DIGIT09,FORMTOT
          IF        !@EQUAL
            BRANCH    QUICKREG,VMED9000
            MOVE      "PID.3: Medicare Number not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
          GOTO      VMED9999
.
VMED9000  PACK      PID00301[COUNTER],SP100,SP100,SP100,SP100,SP100
          CLEAR     PID00301[COUNTER]
.
VMED9999  RETURN
+
.*****************************************************************************
.*                              VPEN0000               Called by: VPID0000   *
.*                        Validate pension number                            *
.* Requires:  PID00301[COUNTER] - Pension Number                             *
.*****************************************************************************
.
.
VPEN0000  UNPACK    PID00301[COUNTER],DIGNUM01,DIGNUM02,DIGNUM03,DIGNUM04:
                                      DIGNUM05,DIGNUM06,DIGNUM07,DIGNUM08:
                                      DIGNUM09,DIGNUM10
.
          MOVE      DIGNUM01,PNCHKARR[1]         * convert to numeric variables
          MOVE      DIGNUM02,PNCHKARR[2]
          MOVE      DIGNUM03,PNCHKARR[3]
          MOVE      DIGNUM04,PNCHKARR[4]
          MOVE      DIGNUM05,PNCHKARR[5]
          MOVE      DIGNUM06,PNCHKARR[6]
          MOVE      DIGNUM07,PNCHKARR[7]
          MOVE      DIGNUM08,PNCHKARR[8]
          MOVE      DIGNUM09,PNCHKARR[9]           
.
          MOVE      "X",PNCHKSMK[1]
          MOVE      "V",PNCHKSMK[2]
          MOVE      "T",PNCHKSMK[3]
          MOVE      "S",PNCHKSMK[4]
          MOVE      "L",PNCHKSMK[5]
          MOVE      "K",PNCHKSMK[6]
          MOVE      "J",PNCHKSMK[7]
          MOVE      "H",PNCHKSMK[8]
          MOVE      "C",PNCHKSMK[9]
          MOVE      "B",PNCHKSMK[10]
          MOVE      "A",PNCHKSMK[11] 
.
.         FIRST CHECK THE LENGTH OF THE PENSION CARD
.         SHOULD BE A TOTAL OF 10 CHARACTERS IN LENGTH
.
          MOVELPTR  PID00301[COUNTER],FORM3
          IF        FORM3<=9
            GOTO      VPEN5000                             * error
          ELSE
            IF        FORM3>=11
              GOTO      VPEN5100                           * error
            ENDIF
          ENDIF
.
.         NEXT CHECK IF THE FIRST CHARACTER IS A NUMBER
.         BETWEEN 1 AND 7
.
          TYPE      DIGNUM01
          GOTO      VPEN5200 IF NOT EQUAL                  * error
.
          IF        PNCHKARR[1] = 0 | PNCHKARR[1] >= 8
            GOTO      VPEN5200                             * error
          ENDIF
.
.         NEXT CALCULATE THE CHECKSUM OF THE PENSION NUMBER
.         TO DETERMINE THE VALIDITY
.
          MOVE      1024,PNCHKDIV
          MOVE      0,PNCHKSMT
          MOVE      1,PNCHKCNT
VPEN0100  DIV       TWO,PNCHKDIV
          ASSIGN    (PNCHKARR[PNCHKCNT]*PNCHKDIV)+PNCHKSMT,PNCHKSMT 
          ADD       ONE,PNCHKCNT
          COMPARE   TWO,PNCHKDIV
          GOTO      VPEN0100 IF NOT EQUAL
          ASSIGN    (PNCHKSMT%11),PNCHKREM
          ADD       ONE,PNCHKREM
          MATCH     PNCHKSMK[PNCHKREM],DIGNUM10
          IF        !@EQUAL
            GOTO      VPEN5300                             * error
          ELSE
            GOTO      VPEN9999
          ENDIF
.
.         Error handling
.
VPEN5000  MOVE      "PID.3 Pension Number has insufficient digits",ERRORDSC
          MOVE      "207",ERRORNUM
          GOTO      VPEN8000
.
VPEN5100  MOVE      "PID.3 Pension Number too long",ERRORDSC
          MOVE      "207",ERRORNUM
          GOTO      VPEN8000
.
VPEN5200  MOVE      "PID.3 Pension Number first digit not valid",ERRORDSC
          MOVE      "207",ERRORNUM
          GOTO      VPEN8000
.
VPEN5300  MOVE      "PID.3 Pension Number not valid",ERRORDSC
          MOVE      "207",ERRORNUM
          GOTO      VPEN8000
.
.         Record error message
.
VPEN8000  CALL      CPDVA000                   * a 'no validation' code exists ?
          MATCH     SP3,SAVPCARD
          GOTO      VPEN9999 IF NOT EQUAL      * yes so allow and use this code
.
          BRANCH    QUICKREG,VPEN9000          * using quick registration ?
.
          MATCH     "1",PTCNPCVA
          IF        @EQUAL
            CALL      EROR0000                                  * error
            GOTO      VPEN9999
          ELSE
            MATCH     "2",PTCNPCVA
            IF        @EQUAL
              WRITE     TEXTFILE,SEQ;ERRORNUM,SP2,ERRORDSC      * log warning
            ENDIF
          ENDIF
          GOTO      VPEN9999
.
.         Using quick registration so do not error, just clear the field
.
VPEN9000  PACK      PID00301[COUNTER],SP100,SP100,SP100,SP100,SP100
          CLEAR     PID00301[COUNTER]
.
VPEN9999  RETURN
+
.*****************************************************************************
.*                              CPDVA000                                     *
.*            Check if Pension Card type exists with 'no validation'         *
.*****************************************************************************
.         Find the first category ct code WHERE Indicator 1 = '4'
.         AND indicator 5 = 'V'
.
CPDVA000  PACK      KEY5,CATCT,SP5
          CALL      RDSCODE1                     * code on file ?
CPDVA100  CALL      RDKCODE1                     * read next record
          BRANCH    OVRCD,CPDVA950               * eof - not found
.
          MATCH     CATCT,TCODE                  * same category still ?
          GOTO      CPDVA950 IF NOT EQUAL        * no - not found
.
          MATCH     "4",TCINDC1                  * card type = 4 (Pension) ?
          GOTO      CPDVA100 IF NOT EQUAL        * no - ignore record
.
          MATCH     "V",TCINDC5                  * card type has 'no Validation'
          GOTO      CPDVA100 IF NOT EQUAL        * no - ignore record
.
CPDVA900  MOVE      ACODE,SAVPCARD               * valid cat ct code found
          GOTO      CPDVA999
.
CPDVA950  MOVE      SP3,SAVPCARD                 * no valid cat ct code found
CPDVA999  RETURN
+
.*****************************************************************************
.*                              VSNN0000               Called by: VPID0000   *
.*              Validate the Safety Net Number                               *
.* Requires:  PID00301[COUNTER] - Safety Net Number                          *
.*****************************************************************************
.
.
VSNN0000  MATCH     BLANKSTR,PID00301[COUNTER]   * null field ?
          GOTO      VSNN9999 IF EQUAL            * yes
.
.         We have a value in the Safety Net identifier, so validate it
.
          UNPACK    PID00301[COUNTER],KEY2,KEY9,DIM9
          PACK      KEY2,KEY2,SP2
          PACK      KEY9,KEY9,SP9
          PACK      DIM9,DIM9,SP9
.
          MATCH     "SN",KEY2
          IF        !@EQUAL
            MATCH     "CN",KEY2
            IF        !@EQUAL
              BRANCH    QUICKREG,VSNN9000
              MOVE      "PID.3: Safety Net Number prefix not valid",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VSNN9999
            ENDIF
          ENDIF
.
          TYPE      KEY9
          IF        !@EQUAL
            BRANCH    QUICKREG,VSNN9000
            MOVE      "PID.3: Safety Net Number suffix not numeric",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VSNN9999
          ENDIF
.         
          MATCH     SP70,DIM9
          IF        !@EQUAL
            BRANCH    QUICKREG,VSNN9000
            MOVE      "PID.3: Safety Net Number too long",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VSNN9999
          ENDIF
.
          UNPACK    KEY9,DIGNUM01,DIGNUM02,DIGNUM03,DIGNUM04:
                         DIGNUM05,DIGNUM06,DIGNUM07,DIGNUM08:
                         DIGNUM09
.
          MOVE      DIGNUM01,DIGIT01             * convert to numeric variables
          MOVE      DIGNUM02,DIGIT02
          MOVE      DIGNUM03,DIGIT03
          MOVE      DIGNUM04,DIGIT04
          MOVE      DIGNUM05,DIGIT05
          MOVE      DIGNUM06,DIGIT06
          MOVE      DIGNUM07,DIGIT07
          MOVE      DIGNUM08,DIGIT08
          MOVE      DIGNUM09,DIGIT09
.
          MOVE      DIGIT01,FORMTOT
          ASSIGN    ((DIGIT02*3)+FORMTOT),FORMTOT
          ASSIGN    ((DIGIT03*7)+FORMTOT),FORMTOT
          ASSIGN    ((DIGIT04*9)+FORMTOT),FORMTOT
          ASSIGN    (DIGIT05+FORMTOT),FORMTOT
          ASSIGN    ((DIGIT06*3)+FORMTOT),FORMTOT
          ASSIGN    ((DIGIT07*7)+FORMTOT),FORMTOT
          ASSIGN    ((DIGIT08*9)+FORMTOT),FORMTOT
          ASSIGN    (FORMTOT%10),FORMTOT
.
          COMPARE   DIGIT09,FORMTOT
          IF        !@EQUAL
            BRANCH    QUICKREG,VSNN9000
            MOVE      "PID.3: Safety Net Number not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
          GOTO      VSNN9999
.
VSNN9000  PACK      PID00301[COUNTER],SP100,SP100,SP100,SP100,SP100
          CLEAR     PID00301[COUNTER]
.
VSNN9999  RETURN
+
.*****************************************************************************
.*                              VDVA0000               Called by: VPID0000   *
.*                      Validate the DVA Number                              *
.* Requires:  PID00301[COUNTER] - DVA Number                                 *
.*****************************************************************************
.
.     DVA Number format:
.       - A valid state indicator
.       - A valid war code (one only).  War codes are between 1 and 3
.                          characters (A-Z). A one character war code can 
.                          also be a space.
.       - A valid numeric number (up to 6 digits for a one character war code,
.                                 up to 5 digits for a 2 character war code,
.                                 or up to 4 digits for a 3 character war code).
.       - A valid dependent indicator ('space' or 'A' through 'Z')
.
.     In addition:
.       - The war code can be a single space but the space can be omitted in the
.         received number - either format is valid. Eg. 'N 123456A' is
.         equivalent to 'N123456A' and both are considered valid.
.       - The length of the war code component plus the numeric component
.         should be 7 characters.  However, the numeric component can be 
.         padded out with leading zeros which may or may not be present
.         in the received DVA number - either format is valid. Eg. VSS00151A is
.         equivalent to VSS151A and both are considered valid.
.
VDVA0000  MOVELPTR  PID00301[COUNTER],FORM3
          IF        FORM3 > 9
            BRANCH    QUICKREG,VDVA9000
            MOVE      "PID.3: DVA Number too long",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VDVA9999
          ENDIF
.
          MATCH     BLANKSTR,PID00301[COUNTER]   * null field ?
          GOTO      VDVA9999 IF EQUAL            * yes
.
.         We have a value in the DVA identifier, so validate it
.
          UNPACK    PID00301[COUNTER],KEY1,KEY8
.
.         Make sure that the first character represents the state
.            N = NSW/ACT
.            V = VIC
.            Q = QLD
.            S = SA/NT
.            W = WA
.            T = TAS
.
          RESET     DVACHAR1                     * reset from previous SCAN
          SCAN      KEY1,DVACHAR1
          IF        !@EQUAL
            BRANCH    QUICKREG,VDVA9000
            MOVE      "PID.3: State Indicator not valid",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VDVA9999
          ENDIF
.
.         Check to see if character 2 is an alpha (A-Z), a space or a numeric.
.         Note: CHRCOUNT is initialised to "1" given that if a war code
.               is not present, we are assuming that it is actually a single
.               space.
.               Also, there is no need to check if a space is present, as
.               the field has already been SQUEEZEd
.         
VDVA1000  MOVE      ONE,CHRCOUNT                 * initialise character count
          MOVE      ZERO,DIGCOUNT                * initialise digit count
          MOVE      ZERO,EOSFLAG                 * initialise eos flag
.
          MOVE      KEY8,ANS                     * load character 2
.
          RESET     ALPHABET                     * reset from previous SCAN
          SCAN      ANS,ALPHABET                 * A-Z or space ?
          GOTO      VDVA2000 IF EQUAL            * yes
.
          TYPE      ANS                          * no - numeric ?
          GOTO      VDVA5000 IF EQUAL            * yes
.
          BRANCH    QUICKREG,VDVA9000
          MOVE      "PID.3: DVA Number contains invalid character",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VDVA9999
.
.         We have a war code present
.
VDVA2000  BUMP      KEY8                         * move to next character
          IF        @EOS
            BRANCH    QUICKREG,VDVA9000
            MOVE      "PID.3: DVA Number has no numeric component",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VDVA9999
          ENDIF
.
          MOVE      KEY8,ANS                     * load next character
          TYPE      ANS                          * digit ?
          GOTO      VDVA5000 IF EQUAL            * yes
.
          RESET     ALPHABET                     * reset after previous SCAN
          SCAN      ANS,ALPHABET                 * A-Z ?
          IF        @EQUAL
            ADD       ONE,CHRCOUNT               * yes - incr. character count
            GOTO      VDVA2000
          ENDIF
.
          BRANCH    QUICKREG,VDVA9000
          MOVE      "PID.3: DVA Number contains invalid character",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VDVA9999
.
.
.         We have processed the war code, so check the character count
.         for the code
.
VDVA5000  ADD       ONE,DIGCOUNT
.
          IF        CHRCOUNT > 3
            BRANCH    QUICKREG,VDVA9000
            MOVE      "PID.3: DVA Number war code too long",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VDVA9999
          ENDIF
.
.         We now need to process the numeric component of the DVA number.
.
VDVA5100  BUMP      KEY8                         * move to next character
          IF        @EOS
            MOVE      ONE,EOSFLAG                * eos - set eos flag
            GOTO      VDVA7500
          ENDIF
.
          MOVE      KEY8,ANS                     * load next character
          TYPE      ANS                          * digit ?
          GOTO      VDVA7500 IF NOT EQUAL        * no
.
          ADD       ONE,DIGCOUNT                 * increment digit count
          GOTO      VDVA5100
.
.         Make sure that the number of digits is valid for the size of
.         the war code
.
VDVA7500  LOAD      MAXCOUNT,CHRCOUNT,SIX,FIVE,FOUR
.
          COMPARE   DIGCOUNT,MAXCOUNT
          IF        @LESS
            BRANCH    QUICKREG,VDVA9000
            MOVE      "PID.3: DVA Number has too many digits",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VDVA9999
          ENDIF
.
.         Check this is the last character and it is a space or A-Z and that
.         there are no further characters
.
          BRANCH    EOSFLAG,VDVA9999             * no last character
.
          RESET     ALPHABET                     * reset after previous SCAN
          SCAN      ANS,ALPHABET                 * A-Z ?
          IF        @EQUAL
            BUMP      KEY8                       * eos ?
            GOTO      VDVA9999 IF EOS            * yes - finished
          ENDIF
.
          BRANCH    QUICKREG,VDVA9000
          MOVE      "PID.3: DVA Number has invalid last character",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VDVA9999
.
VDVA9000  PACK      PID00301[COUNTER],SP100,SP100,SP100,SP100,SP100
          CLEAR     PID00301[COUNTER]
.
VDVA9999  RETURN
+
.*****************************************************************************
.*                               CONV0000              Called by: Lots       *
.*        Convert HL7 escape sequences to their corresponding characters     *
.*        Field Separator         "\F\" becomes "|"                          *
.*        Component separator     "\S\" becomes "^"                          *
.*        Sub-component separator "\T\" becomes "&"                          *
.*        Repetition separator    "\R\" becomes "~"                          *
.*        Escape character        "\E\" becomes "\"                          *
.*        Hexidecimal Tab         "\X09\" becomes " "                        *
.* Requires:  OLDSTRNG  - field on which to check for escape sequences       *
.* Returns:   NEWSTRNG  - field with escape sequences converted              *
.*****************************************************************************
.
.         Load the FP position of the parsed string (which will
.         always be one)
.
CONV0000  MOVE      ONE,FPPOSITN
.
.         Initialise the last position of the escape sequence just
.         processed (set to zero as it is only relevant later on when
.         an escape sequence has been found)
.
          MOVE      ZERO,LASTPOSN
.
.         Clear the new string variable that we will be loading into
.
          CLEAR     NEWSTRNG
.
.         Remove trailing blanks from the parsed string
.
          STRIP     OLDSTRNG
.
.         Save the LL position of the parsed string as this will be used
.         to reposition the LL pointer later on
.
          MOVELPTR  OLDSTRNG,LLPOSITN
.
.         If the string is null, then we don't need to do anything more as
.         the new string is also null
.
          COMPARE   ZERO,LLPOSITN
          GOTO      CONV9999 IF EQUAL
.
.         There are characters to be processed in the parsed string,
.         so check if there are any more escape sequences
.
CONV0500  SCAN      "\",OLDSTRNG                 * backslash found in string ?
          GOTO      CONV8000 IF NOT EQUAL        * no - finished
.
.         A backslash has been found, so see if it is the start of an
.         escape sequence we are handling.  If so, then load the appropriate
.         character that will replace the escape sequence and set the
.         flag to identify which escape sequence was found (this is
.         important later on as escape sequences are either 3 characters
.         or 5 characters in length).
.
          MATCH     PIPESEQN,OLDSTRNG            * \F\ field separator ?
          IF        @EQUAL & !@LESS
            MOVE      ONE,SPCHFLAG               * yes
            MOVE      MSH00101,ANS               * load field separator char.
            GOTO      CONV5000
          ENDIF
.
          MATCH     CARTSEQN,OLDSTRNG            * \S\ component separator ?
          IF        @EQUAL & !@LESS
            MOVE      TWO,SPCHFLAG               * yes
            MOVE      COMSEPAR,ANS
            GOTO      CONV5000
          ENDIF
.
          MATCH     AMPRSEQN,OLDSTRNG            * \T\ subcomponent separator ?
          IF        @EQUAL & !@LESS
            MOVE      THREE,SPCHFLAG             * yes
            MOVE      SUBSEPAR,ANS
            GOTO      CONV5000
          ENDIF
.
          MATCH     TILDSEQN,OLDSTRNG            * \R\ repetition separator ?
          IF        @EQUAL & !@LESS
            MOVE      FOUR,SPCHFLAG              * yes
            MOVE      REPSEPAR,ANS
            GOTO      CONV5000
          ENDIF
.
          MATCH     BSLASEQN,OLDSTRNG            * \E\ escape character ?
          IF        @EQUAL & !@LESS
            MOVE      FIVE,SPCHFLAG              * yes
            MOVE      ESCSEPAR,ANS
            GOTO      CONV5000
          ENDIF
.
          MATCH     TABSEQN,OLDSTRNG             * \X09\ hexidecimal tab ?
          IF        @EQUAL & !@LESS
            MOVE      SIX,SPCHFLAG               * yes
            MOVE      SP1,ANS
            GOTO      CONV5000
          ENDIF
.
.         The backslash is not associated with a known escape sequence,
.         so treat it as a normal character and continue
.
          BUMP      OLDSTRNG                     * move to next character
          GOTO      CONV7000 IF EOS              * eos - finished
          GOTO      CONV0500                     * back to search for next "\"
.
.         We've found a valid escape sequence, so save the starting position
.         of the current string and check if we have consecutive escape
.         sequences (the last position will be 1 character position less
.         than the starting position we are currently on).
.         If there were consecutive escape sequences, or the escape sequence
.         occurred at the start of the parsed string, then simply load the
.         replacement character into the new string and reposition on the
.         character after the escape sequence so we can continue.
.         If there weren't consecutive escape sequences, or the escape
.         sequence wasn't at the start of the parsed string, then we
.         need to reposition the FP and LL for the previous string of normal
.         characters, load this into the new string, reposition the FP back
.         to the start of the escape sequence and reset the LL to the end
.         of the parsed string.
.
CONV5000  MOVEFPTR  OLDSTRNG,STRTPOSN
          ASSIGN    (STRTPOSN-LASTPOSN),POSNDIFF
          IF        STRTPOSN <> 1 & POSNDIFF <> 1
            BUMP      OLDSTRNG,-1                * go back to previous character
            LENSET    OLDSTRNG                   * set LL to FP position
            RESET     OLDSTRNG,FPPOSITN          * move FP back to start
            APPEND    OLDSTRNG,NEWSTRNG          * append string
          ENDIF
          APPEND    ANS,NEWSTRNG                 * append replacement character
.
          IF        STRTPOSN <> 1 & POSNDIFF <> 1
            ENDSET    OLDSTRNG                   * move FP back to LL position
            SETLPTR   OLDSTRNG,LLPOSITN          * move LL back to EOS
          ENDIF
.
.         Move past the escape sequence and position to get the next string.
.         The number of characters we move will depend on the escape sequence
.         and whether or not we are on consecutive escape sequences.
.
          IF        SPCHFLAG < 6
            IF        STRTPOSN = 1 | POSNDIFF = 1
              BUMP      OLDSTRNG,3               * moved past escape sequence
            ELSE
              BUMP      OLDSTRNG,4               * moved past escape sequence
            ENDIF
            GOTO      CONV8500 IF EOS            * eos - finished
            ASSIGN    (STRTPOSN+2),LASTPOSN      * save last esc seq position
          ELSE
            IF        STRTPOSN = 1 | POSNDIFF = 1
              BUMP      OLDSTRNG,5               * moved past escape sequence
            ELSE
              BUMP      OLDSTRNG,6               * moved past escape sequence
            ENDIF
            GOTO      CONV8500 IF EOS            * eos - finished
            ASSIGN    (STRTPOSN+4),LASTPOSN      * save last esc seq position
          ENDIF
.
          MOVEFPTR  OLDSTRNG,FPPOSITN            * save FP for the next string
          GOTO      CONV0500                     * back to search for next "\"
.
.         EOS encountered on BUMP command, so process as per above logic except
.         no need to load any more characters into the new string and if the
.         last character found was a "\", then we need to include this in
.         the load to new string.
.
CONV7000  MOVEFPTR  OLDSTRNG,STRTPOSN
          ASSIGN    (STRTPOSN-LASTPOSN),POSNDIFF
          IF        STRTPOSN <> 1 & POSNDIFF <> 1
            IF        STRTPOSN <> LLPOSITN
              BUMP      OLDSTRNG,-1              * go back to previous character
              LENSET    OLDSTRNG                 * set LL to FP position
            ENDIF
            RESET     OLDSTRNG,FPPOSITN          * move FP back to start
            APPEND    OLDSTRNG,NEWSTRNG          * append string
          ELSE
            IF        STRTPOSN = LLPOSITN
              APPEND    OLDSTRNG,NEWSTRNG        * append string
            ENDIF
          ENDIF
.
          IF        STRTPOSN <> 1 & POSNDIFF <> 1
            ENDSET    OLDSTRNG                   * move FP back to LL position
            SETLPTR   OLDSTRNG,LLPOSITN          * move LL back to EOS
          ENDIF
.
          GOTO      CONV8500
.
.         If we found a "\" somewhere which was not part of an escape
.         sequence and there were no escape sequences found and we're
.         at the end of the parsed string, then we can load the full
.         string into new string, so reset the FP on the parsed string
.
CONV8000  IF        LASTPOSN = 0 & FPPOSITN =1
            RESET     OLDSTRNG
          ENDIF
.
          APPEND    OLDSTRNG,NEWSTRNG            * append string
CONV8500  RESET     NEWSTRNG                     * reset new string
          STRIP     NEWSTRNG
.
CONV9999  RETURN
+
.*****************************************************************************
.*                              CREA0000               Called by: MAIN0000   *
.*             Create a new temporary file                                   *
.*****************************************************************************
.
CREA0000  CALL      TFILENAM                     * get new tempfile A name
          MOVE      TFILNAME,TEMPFILA
.
          CALL      TFILENAM                     * get new tempfile B name
          MOVE      TFILNAME,TEMPFILB
.
          CALL      TFILENAM                     * get new tempfile C name
          MOVE      TFILNAME,TEMPFILC
.
          CALL      TFILENAM                     * get new tempfile D name
          MOVE      TFILNAME,TEMPFILD
.
          CALL      TFILENAM                     * get new tempfile F name
          MOVE      TFILNAME,TEMPFILF
.
          CALL      KILL0000                     * remove existing file
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ISBUILD,TEMPFILA,UKEYA
          EXECUTE   CMDLINE,TASKID               * create temporary index file
.
          OPEN      RCVRTMP1,TEMPFILA            * open temp index file
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ISBUILD,TEMPFILB,UKEYB
          EXECUTE   CMDLINE,TASKID               * create temporary index file
.
          OPEN      CONTEMP1,TEMPFILB            * open temp index file
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ISBUILD,TEMPFILC,UKEYC
          EXECUTE   CMDLINE,TASKID               * create temporary index file
.
          OPEN      ALRTEMP1,TEMPFILC            * open temp index file
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ISBUILD,TEMPFILD,UKEYD
          EXECUTE   CMDLINE,TASKID               * create temporary index file
.
          OPEN      INPUSETF,TEMPFILD            * open temp index file
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ISBUILD,TEMPFILF,UKEYF
          EXECUTE   CMDLINE,TASKID               * create temporary index file
.
          OPEN      COMTEMP1,TEMPFILF            * open temp index file
.
CREA9999  RETURN
+
.****************************************************************************
.*                              KILL0000               Called by: MAIN0000  *
.*               Close and erase the temporary file                         *
.****************************************************************************
.
KILL0000  CLOSE     RCVRTMP1                     * close file
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ERASE,TEMPFILA       * set file erase command
          EXECUTE   CMDLINE,TASKID               * erase temp file
.
          CLOSE     CONTEMP1                     * close file
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ERASE,TEMPFILB       * set file erase command
          EXECUTE   CMDLINE,TASKID               * erase temp file
.
          CLOSE     ALRTEMP1                     * close file
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ERASE,TEMPFILC       * set file erase command
          EXECUTE   CMDLINE,TASKID               * erase temp file
.
          CLOSE     INPUSETF                     * close file
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ERASE,TEMPFILD       * set file erase command
          EXECUTE   CMDLINE,TASKID               * erase temp file
.
          CLOSE     COMTEMP1                     * close file
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ERASE,TEMPFILF       * set file erase command
          EXECUTE   CMDLINE,TASKID               * erase temp file
.
KILL9999 RETURN
+
.****************************************************************************
.*                              CTMP0000               Called by: MAIN0000  *
.*               Clear all records from the temporary tables                *
.****************************************************************************
.
.         Delete Temp file 1 records
.
CTMP0000  MOVE      SP20,KEY15
          CALL      RSTEMP1                      * position at start of file
          CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,CTMP1000               * eof - finished
.
          PACK      KEY15,RTMPSEGI,RTMPSEGC,RTMPFLDN,RTMPFCNT,RTMPCMPN
          CALL      DETEMP1                      * delete current record
          GOTO      CTMP0000                     * get next record
.
.         Delete Temp file 2 records
.
CTMP1000  MOVE      SP10,KEY7
          CALL      RSTEMP2                      * position at start of file
          CALL      RKTEMP2                      * read next record
          BRANCH    OVRCD,CTMP2000               * eof - finished
.
          PACK      KEY7,CONTSTAT,CONTTYPE,CONTCNTR
          CALL      DETEMP2                      * delete current record
          GOTO      CTMP1000                     * get next record
.
.         Delete Temp file 3 records
.
CTMP2000  MOVE      SP10,KEY9
          CALL      RSTEMP3                      * position at start of file
          CALL      RKTEMP3                      * read next record
          BRANCH    OVRCD,CTMP3000               * eof - finished
.
          PACK      KEY9,ALRTSTAT,ALRTCATG,ALRTCODE,ALRTCNTR
          CALL      DETEMP3                      * delete current record
          GOTO      CTMP2000                     * get next record
.
.         Delete Temp file 4 records
.
CTMP3000  MOVE      SP30,KEY25
          CALL      RSTEMP4                      * position at start of file
          CALL      RKTEMP4                      * read next record
          BRANCH    OVRCD,CTMP4000               * eof - finished
.
          PACK      KEY25,AMOUNT,IAMT,PROVITEM,UNIQUE
          CALL      DETEMP4                      * delete current record
          GOTO      CTMP3000                     * get next record
.
.         Delete Temp file 5 records
.
CTMP4000  MOVE      SP5,KEY5
          CALL      RSTEMP5                      * position at start of file
          CALL      RKTEMP5                      * read next record
          BRANCH    OVRCD,CTMP9999               * eof - finished
.
          PACK      KEY5,COMMTYPE,COMMLINE
          CALL      DETEMP5                      * delete current record
          GOTO      CTMP4000                     * get next record
.
CTMP9999  RETURN
+
.****************************************************************************
.*                              MANR0000               Called by: PROC0000  *
.*    Validate that mandatory segments have been received for the message   *
.****************************************************************************
.
MANR0000  BRANCH    MESSGNUM,MANR0100:           * A28 message
                             MANR0200:           * A31 message
                             MANR0300:           * A34 message
                             MANR0400:           * P03 message
                             MANR0500:           * I12 message
                             MANR0500:           * I13 message
                             MANR0500:           * I14 message
                             MANR0600:           * A04 message
                             MANR0700:           * A03 message
                             MANR0800:           * M02 message
                             MANR0900:           * A05 message
                             MANR1000:           * S14 message
                             MANR1100:           * A08 message
                             MANR1200:           * A21 message
                             MANR1300:           * A22 message
                             MANR1400:           * SRM message
                             MANR1500:           * S12 message
                             MANR1600:           * S13 message
                             MANR1700:           * S15 message
                             MANR1800            * S26 message
.
.         Check that all A28 mandatory segments have been received
.
MANR0100  MATCH     ANSY,A28ARRAY[1]
          IF        !@EQUAL
            MOVE      MSHSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A28ARRAY[2]
          IF        !@EQUAL
            MOVE      EVNSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A28ARRAY[3]
          IF        !@EQUAL
            MOVE      PIDSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A28ARRAY[4]
          IF        !@EQUAL
            MOVE      PV1SEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A28ARRAY[5]
          IF        !@EQUAL
            MOVE      ZXPSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          GOTO      MANR9999
.
.         Check that all A31 mandatory segments have been received
.
MANR0200  MATCH     ANSY,A31ARRAY[1]
          IF        !@EQUAL
            MOVE      MSHSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A31ARRAY[2]
          IF        !@EQUAL
            MOVE      EVNSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A31ARRAY[3]
          IF        !@EQUAL
            MOVE      PIDSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A31ARRAY[4]
          IF        !@EQUAL
            MOVE      PV1SEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A31ARRAY[5]
          IF        !@EQUAL
            MOVE      ZXPSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          GOTO      MANR9999
.
.         Check that all A34 mandatory segments have been received
.
MANR0300  MATCH     ANSY,A34ARRAY[1]
          IF        !@EQUAL
            MOVE      MSHSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A34ARRAY[2]
          IF        !@EQUAL
            MOVE      EVNSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A34ARRAY[3]
          IF        !@EQUAL
            MOVE      PIDSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A34ARRAY[4]
          IF        !@EQUAL
            MOVE      MRGSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A34ARRAY[5]
          IF        !@EQUAL
            MOVE      ZXPSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          GOTO      MANR9999
.
.         Check that all P03 mandatory segments have been received
.
MANR0400  MATCH     ANSY,P03ARRAY[1]
          IF        !@EQUAL
            MOVE      MSHSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,P03ARRAY[2]
          IF        !@EQUAL
            MOVE      EVNSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,P03ARRAY[3]
          IF        !@EQUAL
            MOVE      PIDSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,P03ARRAY[4]
          IF        !@EQUAL
            MOVE      PV1SEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,P03ARRAY[5]
          IF        !@EQUAL
            MOVE      FT1SEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          GOTO      MANR9999
.
.         Check that all REF mandatory segments have been received
.
MANR0500  MATCH     ANSY,REFARRAY[1]
          IF        !@EQUAL
            MOVE      MSHSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,REFARRAY[2]
          IF        !@EQUAL
            MOVE      RF1SEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,REFARRAY[3]
          IF        !@EQUAL
            MOVE      PIDSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,REFARRAY[4]
          IF        !@EQUAL
            MOVE      PV1SEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          GOTO      MANR9999
.
.         Check that all A04 mandatory segments have been received
.
MANR0600  MATCH     ANSY,A04ARRAY[1]
          IF        !@EQUAL
            MOVE      MSHSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A04ARRAY[2]
          IF        !@EQUAL
            MOVE      EVNSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A04ARRAY[3]
          IF        !@EQUAL
            MOVE      PIDSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A04ARRAY[4]
          IF        !@EQUAL
            MOVE      PV1SEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A04ARRAY[5]
          IF        !@EQUAL
            MATCH     ANSE,PV100201                * EMR visit ?
            IF        @EQUAL
              MOVE      ZTRSEGMT,DIM3              * yes - ZTR is mandatory
            ELSE
              MOVE      PV2SEGMT,DIM3              * no  - PV2 is mandatory
            ENDIF
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A04ARRAY[6]
          IF        !@EQUAL
            MATCH     ANSE,PV100201                * not mandatory for EMR visit
            IF        !@EQUAL
              MOVE      ZXVSEGMT,DIM3
              GOTO      MANR9100
            ENDIF
          ENDIF
.
          GOTO      MANR9999
.
.         Check that all A03 mandatory segments have been received
.
MANR0700  MATCH     ANSY,A03ARRAY[1]
          IF        !@EQUAL
            MOVE      MSHSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A03ARRAY[2]
          IF        !@EQUAL
            MOVE      EVNSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A03ARRAY[3]
          IF        !@EQUAL
            MOVE      PIDSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A03ARRAY[4]
          IF        !@EQUAL
            MOVE      PV1SEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A03ARRAY[5]
          IF        !@EQUAL
            MOVE      PV2SEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A03ARRAY[6]
          IF        !@EQUAL
            MOVE      ZXVSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A03ARRAY[7]
          IF        !@EQUAL
            MOVE      PR1SEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A03ARRAY[8]
          IF        !@EQUAL
            MOVE      ROLSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          GOTO      MANR9999
.
.         Check that all MFN mandatory segments have been received
.
MANR0800  MATCH     ANSY,M02ARRAY[1]
          IF        !@EQUAL
            MOVE      MSHSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,M02ARRAY[2]
          IF        !@EQUAL
            MOVE      MFISEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,M02ARRAY[3]
          IF        !@EQUAL
            MOVE      MFESEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,M02ARRAY[4]
          IF        !@EQUAL
            MOVE      STFSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,M02ARRAY[5]
          IF        !@EQUAL
            MOVE      PRASEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,M02ARRAY[6]
          IF        !@EQUAL
            MOVE      ZPRSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          GOTO      MANR9999
.
.         Check that all A05 mandatory segments have been received
.
MANR0900  MATCH     ANSY,A05ARRAY[1]
          IF        !@EQUAL
            MOVE      MSHSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A05ARRAY[2]
          IF        !@EQUAL
            MOVE      EVNSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A05ARRAY[3]
          IF        !@EQUAL
            MOVE      PIDSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A05ARRAY[4]
          IF        !@EQUAL
            MOVE      PV1SEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A05ARRAY[5]
          IF        !@EQUAL
            MOVE      PV2SEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          GOTO      MANR9999
.
.         Check that all S14 mandatory segments have been received
.
MANR1000  MATCH     ANSY,S14ARRAY[1]
          IF        !@EQUAL
            MOVE      MSHSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,S14ARRAY[2]
          IF        !@EQUAL
            MOVE      SCHSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,S14ARRAY[3]
          IF        !@EQUAL
            MOVE      PIDSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,S14ARRAY[4]
          IF        !@EQUAL
            MOVE      PV1SEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,S14ARRAY[5]
          IF        !@EQUAL
            MATCH     "2.4",MSH01201             * only mandatory for THE visit
            IF        !@EQUAL
              MOVE      RGSSEGMT,DIM3
              GOTO      MANR9100
            ENDIF
          ENDIF
.
          MATCH     ANSY,S14ARRAY[6]
          IF        !@EQUAL
            MATCH     "2.4",MSH01201             * only mandatory for THE visit
            IF        !@EQUAL
              MOVE      ZSCSEGMT,DIM3
              GOTO      MANR9100
            ENDIF
          ENDIF
.
          GOTO      MANR9999
.
.         Check that all A08 mandatory segments have been received
.
MANR1100  MATCH     ANSY,A08ARRAY[1]
          IF        !@EQUAL
            MOVE      MSHSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A08ARRAY[2]
          IF        !@EQUAL
            MOVE      EVNSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A08ARRAY[3]
          IF        !@EQUAL
            MOVE      PIDSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A08ARRAY[4]
          IF        !@EQUAL
            MOVE      PV1SEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A08ARRAY[5]
          IF        !@EQUAL
            MATCH     ANSE,PV100201                * not mandatory for EMR visit
            IF        !@EQUAL
              MOVE      PV2SEGMT,DIM3
              GOTO      MANR9100
            ENDIF
          ENDIF
.
.0879964  MATCH     ANSY,A08ARRAY[6]
.0879964  IF        !@EQUAL
.0879964    MOVE      ZXVSEGMT,DIM3
.0879964    GOTO      MANR9100
.0879964  ENDIF
.
          GOTO      MANR9999
.
.         Check that all A21 mandatory segments have been received
.
MANR1200  MATCH     ANSY,A21ARRAY[1]
          IF        !@EQUAL
            MOVE      MSHSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A21ARRAY[2]
          IF        !@EQUAL
            MOVE      EVNSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A21ARRAY[3]
          IF        !@EQUAL
            MOVE      PIDSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A21ARRAY[4]
          IF        !@EQUAL
            MOVE      PV1SEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A21ARRAY[5]
          IF        !@EQUAL
            MOVE      ZXVSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          GOTO      MANR9999
.
.         Check that all A22 mandatory segments have been received
.
MANR1300  MATCH     ANSY,A22ARRAY[1]
          IF        !@EQUAL
            MOVE      MSHSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A22ARRAY[2]
          IF        !@EQUAL
            MOVE      EVNSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A22ARRAY[3]
          IF        !@EQUAL
            MOVE      PIDSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A22ARRAY[4]
          IF        !@EQUAL
            MOVE      PV1SEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A22ARRAY[5]
          IF        !@EQUAL
            MOVE      ZXVSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          GOTO      MANR9999
.
.         Check that all SRM mandatory segments have been received
.
MANR1400  MATCH     ANSY,SRMARRAY[1]
          IF        !@EQUAL
            MOVE      MSHSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
.0861257  MATCH     ANSY,SRMARRAY[2]
.0861257  IF        !@EQUAL
.0861257    MOVE      ARQSEGMT,DIM3
.0861257    GOTO      MANR9100
.0861257  ENDIF
.
          MATCH     ANSY,SRMARRAY[3]
          IF        !@EQUAL
            MOVE      PIDSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,SRMARRAY[4]
          IF        !@EQUAL
            MOVE      PV1SEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,SRMARRAY[5]
          IF        !@EQUAL
            MOVE      PV2SEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
.0861257  MATCH     ANSY,SRMARRAY[6]
.0861257  IF        !@EQUAL
.0861257    MOVE      NTESEGMT,DIM3
.0861257    GOTO      MANR9100
.0861257  ENDIF
.
          GOTO      MANR9999
.
.         Check that all S12 mandatory segments have been received
.
MANR1500  MATCH     ANSY,S12ARRAY[1]
          IF        !@EQUAL
            MOVE      MSHSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,S12ARRAY[2]
          IF        !@EQUAL
            MOVE      SCHSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,S12ARRAY[3]
          IF        !@EQUAL
            MOVE      PIDSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,S12ARRAY[4]
          IF        !@EQUAL
            MOVE      PV1SEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          GOTO      MANR9999
.
.         Check that all S13 mandatory segments have been received
.
MANR1600  MATCH     ANSY,S13ARRAY[1]
          IF        !@EQUAL
            MOVE      MSHSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,S13ARRAY[2]
          IF        !@EQUAL
            MOVE      SCHSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,S13ARRAY[3]
          IF        !@EQUAL
            MOVE      PIDSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,S13ARRAY[4]
          IF        !@EQUAL
            MOVE      PV1SEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          GOTO      MANR9999
.
.         Check that all S15 mandatory segments have been received
.
MANR1700  MATCH     ANSY,S15ARRAY[1]
          IF        !@EQUAL
            MOVE      MSHSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,S15ARRAY[2]
          IF        !@EQUAL
            MOVE      SCHSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,S15ARRAY[3]
          IF        !@EQUAL
            MOVE      PIDSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,S15ARRAY[4]
          IF        !@EQUAL
            MOVE      PV1SEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          GOTO      MANR9999
.
.         Check that all S26 mandatory segments have been received
.
MANR1800  MATCH     ANSY,S26ARRAY[1]
          IF        !@EQUAL
            MOVE      MSHSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,S26ARRAY[2]
          IF        !@EQUAL
            MOVE      SCHSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,S26ARRAY[3]
          IF        !@EQUAL
            MOVE      PIDSEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,S26ARRAY[4]
          IF        !@EQUAL
            MOVE      PV1SEGMT,DIM3
            GOTO      MANR9100
          ENDIF
.
          GOTO      MANR9999
.
MANR9100  MOVE      "Mandatory segment ",ERRORDSC
          ENDSET    ERRORDSC
          APPEND    DIM3,ERRORDSC
          APPEND    " missing",ERRORDSC
          RESET     ERRORDSC
          MOVE      "100",ERRORNUM
          CALL      EROR0000
.
MANR9999  RETURN
+
.*****************************************************************************
.*                            CONA0000             Called by: MATA0000       *
.*    Calculate the counter number for this U/R and alert type (patalrf)     *
.*****************************************************************************
.
CONA0000  MOVE      ZERO,F3                       * Set alert type counter
          READ      CONTROLF,TEN;*250,CAUDA1
.
          PACK      KEY16,PURNO,ALERT001,ALERT002,Z70
          CALL      RSPTALR1
          CALL      RPPTALR1
          BRANCH    OVRCD,CONA2000
.
          MATCH     PURNO,PTALURNO
          GOTO      CONA2000 IF NOT EQUAL
.
          MATCH     ALERT001,PTALCATG
          GOTO      CONA2000 IF NOT EQUAL
.
          MATCH     ALERT002,PTALCODE
          GOTO      CONA2000 IF NOT EQUAL
.
          MOVE      PTALCNTR,F3
.
CONA2000  BRANCH    CAUDA1,CONA9000          * Check if using audit file
.
          PACK      KEY27,URNUMBER,Z70
          CALL      ASPTALR2
CONA3000  CALL      APPTALR2
          BRANCH    OVRCD,CONA9000
.
          MATCH     URNUMBER,PTALURNO
          GOTO      CONA9000 IF NOT EQUAL
.
          MATCH     ALERT001,PTALCATG
          GOTO      CONA3000 IF NOT EQUAL
.
          MATCH     ALERT002,PTALCODE
          GOTO      CONA3000 IF NOT EQUAL
.
          MOVE      ZERO,F3A                    * Use audit file counter if
          MOVE      PTALCNTR,F3A                * higher
          IF        F3A>F3
            MOVE      F3A,F3
          ENDIF
          GOTO      CONA3000
.
CONA9000  ADD       ONE,F3
          MOVE      F3,ALERT013
.
CONA9999  RETURN
+
.*****************************************************************************
.*                              SETA0000           Called by: PZAL0000       *
.*                                                            PALA0000       *
.*        Alert segemnts were received, so reset the PMI alert flags based   *
.*        on the alerts that the patient has now.                            *
.*****************************************************************************
.
SETA0000  MOVE      PTMXSIN1,SAVESIN1
          MOVE      PMPXSIN7,SAVESIN7
          MOVE      PMPXSIN8,SAVESIN8
          MOVE      PMPXSIN9,SAVESIN9
          MOVE      PMPXSN11,SAVESN11
          UNPACK    SP70,PTMXSIN1,PMPXSIN7,PMPXSIN8,PMPXSIN9,PMPXSN11
.
          PACK      KEY16,PURNO,SP70
          CALL      RSPTALR1
SETA1000  CALL      RKPTALR1
          BRANCH    OVRCD,SETA9000
.
          MATCH     PURNO,PTALURNO
          GOTO      SETA9000 IF NOT EQUAL
.
          MATCH     SP70,PTALEDAT
          IF        !@EQUAL
            MATCH     PTALEDAT,CURRDATE            * Tsk: 0818645
            GOTO      SETA2000 IF LESS
.
            GOTO      SETA1000                     * show alert as inactive
          ENDIF
.
SETA2000  PACK      KEY5,PTALCATG,PTALCODE,SP70
          CALL      RDCODE1
          BRANCH    OVRCD,SETA1000
.
          MATCH     ANSM,TCINDC5
          IF        @EQUAL
            MOVE      "1",PMPXSIN7               * wahealth medical alert
            GOTO      SETA1000
          ENDIF
.
          MATCH     ANSB,TCINDC5
          IF        @EQUAL
            MOVE      "1",PMPXSIN8               * wahealth micro alert
            GOTO      SETA1000
          ENDIF
.
          MATCH     ANSR,TCINDC5
          IF        @EQUAL
            MOVE      "1",PMPXSIN9               * wahealth risk alert
            GOTO      SETA1000
          ENDIF
.
          MATCH     ANSC,TCINDC5
          IF        @EQUAL
            MOVE      "1",PMPXSN11               * wahealth chronic alert
            GOTO      SETA1000
          ENDIF
.
.         Standard alert functionality
.
          REP       "S2 1",TCINDC4
.
          MATCH     "2",TCINDC4        * check for security alert, if yes stop
          IF        @EQUAL
            PACK      PTMXSIN1,TCINDC4
            GOTO      SETA9000
          ENDIF
.
          MATCH     PTMXSIN1,TCINDC4
          IF        @LESS
            PACK      PTMXSIN1,TCINDC4
          ENDIF
          MATCH     SP70,PTMXSIN1
          IF        @EQUAL
            PACK      PTMXSIN1,TCINDC4
          ENDIF
.
          GOTO      SETA1000
.
SETA9000  MATCH     PTMXSIN1,SAVESIN1
          IF        !@EQUAL
            CALL      UPMAST1
          ENDIF
.
          MATCH     PMPXSIN7,SAVESIN7
          IF        @EQUAL
            MATCH     PMPXSIN8,SAVESIN8
            IF        @EQUAL
              MATCH     PMPXSIN9,SAVESIN9
              IF        @EQUAL
                MATCH     PMPXSN11,SAVESN11
                IF        @EQUAL
                  GOTO      SETA9999        * no wahealth indicators changed
                ENDIF
              ENDIF
            ENDIF
          ENDIF
          CALL      UPPMPX21                * update for wahealth alerts (indc5)
.
SETA9999  RETURN
+
.*****************************************************************************
.*                              SEND0000           Called by: WMSH0000       *
.*         Send the message segment to Third Party receiver   WMSA0000       *
.* Requires:  SEGSTRNG - the segment string to be sent                       *
.* Returns:   EXIT    0 = message sent ok                                    *
.*                    1 = connection lost, message not sent                  *
.*                    2 = timeout occurred                                   *
.*****************************************************************************
.
SEND0000  MOVELPTR  SEGSTRNG,STRNGLEN            * get string length
.
          IF        DISPFLAG = 1
            DISPLAY   "Sending [",SEGMENT,"] segment",*R,*N;
            MOVE      ZERO,COUNTR
            MOVE      STRNGLEN,FORM4
            DISPLAY   "Sending ",FORM4," bytes: (* = carriage return)",*R,*N;
            WHILE     FORM4 > 0
              ADD       ONE,COUNTR
              MATCH     CRETURN,SEGSTRNG
              IF        @EQUAL
                MOVE      ASK,ANS
              ELSE
                MOVE      SEGSTRNG,ANS
              ENDIF
              IF        COUNTR = 1
                DISPLAY   "[";
              ENDIF
              DISPLAY   *HON,ANS,*HOFF;
              IF        COUNTR = 70
                DISPLAY   "]",*R,*N;
                MOVE      ZERO,COUNTR
              ENDIF
              SUB       ONE,FORM4
              BUMP      SEGSTRNG
            DO
            DISPLAY     "]",*R,*N;
            RESET       SEGSTRNG
          ENDIF
          APPEND      SEGSTRNG,SENTMESS
.
.         Set TRAP for loss of connection then send segment
.
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF SIGPIPE                  * set trap
          WRITE     COMSOCKT,STRNGLEN,RPLYTIME;SEGSTRNG; * send segment
          TRAPCLR   SIGPIPE                              * clear trap
          GOTO      SEND9200 IF TIMEOUT                  * timeout expired
          BRANCH    OVRCD,SEND9100                       * connection lost
.
          IF        DISPFLAG = 1
            DISPLAY   "[",SEGMENT,"] segment sent",*R,*N;
          ENDIF
.
.         If this is message receiver, then write the response to the
.         log file
.
          MATCH     "HL7RECVR",PRGID
          IF        @EQUAL
            WRITE     TEXTFILE,SEQ;*+,SEGSTRNG;
          ENDIF
.
          PACK      SEGSTRNG,SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100
          CLEAR     SEGSTRNG                     * clear segment string
          MOVE      ZERO,EXIT                    * sent ok
          GOTO      SEND9999
.
SEND9100  MOVE      ONE,EXIT
          GOTO      SEND9999
.
SEND9200  MOVE      TWO,EXIT
          GOTO      SEND9999
.
SEND9999  RETURN
+
.------------------------------------------------------------
. Write an update demographics record (pmsupdaf)
.------------------------------------------------------------
WRUPDD00  OPEN      PMSUPDA1,"pmsupdaf"
.
          PACK      PMUDURNO,PURNO,SP70
.
          CALL      IBACLOCK
          PACK      PMUDDATE,CCC,CYY,CMM,CDD
          REPLACE   " 0",PMUDDATE
          CLOCK     TIME,PMUDTIME
.
          MOVE      "HL7RECVR  ",PMUDUSER
.
          PACK      KEY8,PMUDURNO,SP70
          CALL      RDPMUPD1
          IF        OVRCD=1
            CALL      IBACLOCK
            PACK      PMUDDATC,CCC,CYY,CMM,CDD
            REPLACE   " 0",PMUDDATC
            CLOCK     TIME,PMUDTIMC
            MOVE      "HL7RECVR  ",PMUDWEBC
            CALL      WRPMUPD1
          ELSE
            CALL      IBACLOCK
            PACK      PMUDDATE,CCC,CYY,CMM,CDD
            REPLACE   " 0",PMUDDATE
            CLOCK     TIME,PMUDTIME
            CALL      UPPMUPD1
          ENDIF
.
          CLOSE     PMSUPDA1
.
WRUPDD99  RETURN
+
.*****************************************************************************
.*                               VALF0000          Called by: VPV10000       *
.*                  Validate the facility code                               *
.* Requires: IBCNMHOS - multi hospital parameter                             *
.*           ALCNDHOS - Not using Department Hospital                        *
.*                       0 = No (get hospital from Department)               *
.*                       1 = Yes (get hospital from message)                 *
.*           PV100304 - Facility (PV1.3, component 4)                        *
.*           Valid read of alldepaf record                                   *
.* Returns:  SAVEHOSP - facility hospital code (pathspaf)                    *
.*           EXIT   0 - Ok to continue                                       *
.*                  1 - Error occurred                                       *
.*****************************************************************************
.
VALF0000  COMPARE   ONE,IBCNMHOS                 * using multi-hospital
          GOTO      VALF9000 IF NOT EQUAL        * no
.
          COMPARE   TEN1,MESSGNUM
          GOTO      VALF1000 IF EQUAL            * A05 INP message?
.
          MOVE      ALDEHOSP,SAVEHOSP            * load department hospital
.
          MATCH     "1",ALCNDHOS                 * using hospital from dept ?
          GOTO      VALF9000 IF NOT EQUAL        * yes
.
.         The hospital code is not coming from the department, so
.         make sure we have a Facility (PV1.3, Component 4)
.
VALF1000  STRIP     PV100304
          MOVELPTR  PV100304,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "PV1.3: Facility not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VALF9200
          ENDIF
.
          MATCH     BLANKSTR,PV100304
          IF        @EQUAL
            MOVE      "PV1.3: Facility is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VALF9200
          ENDIF
.
.         Validate that the facility code exists as an approval number
.         on a hospital record (pathspaf)
.
          MOVE      SP3,KEY3
          CALL      RSPTHSP1                     * position at start of file
VALF5500  CALL      RKPTHSP1                     * read next record
          BRANCH    OVRCD,VALF9100               * eof - finished
.
          MATCH     PV100304,PTHSAPPR            * same approval number ?
          IF        @EQUAL
            MOVE      PTHSHOSP,SAVEHOSP          * load hospital code
            GOTO      VALF9000
          ENDIF
          GOTO      VALF5500
.
VALF9000  MOVE      ZERO,EXIT
          GOTO      VALF9999
.
VALF9100  MOVE      "PV1.3: Facility not valid",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
VALF9200  MOVE      ONE,EXIT
.
VALF9999  RETURN
+
.*****************************************************************************
.*                               PEID0000          Called: PI120000          *
.*                                                         PI130000          *
.*                Write/Update data to alleidaf record                       *
.* Requires: ZXV04401 - Service                                              *
.*           ZXV04501 - Referred by Other                                    *
.*           ZXV04601 - Referrer contact                                     *
.*           ALREVISN - webPAS visit number for referral                     *
.*****************************************************************************
.
PEID0000  MATCH     MTYPEI12,MESSTYPE            * I12 message ?
          GOTO      PEID5000 IF EQUAL            * yes
.
          MOVE      ALREVISN,KEY8
          CALL      RDALEID1                     * record on file already ?
          BRANCH    OVRCD,PEID5000               * no - write new record
.
.         Updating a record (REF^I13)
.
          MOVELPTR  ZXV04401,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PEID1000 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV04401
          IF        @EQUAL
            MOVE      SP100,ALEISERV
          ELSE
            PACK      ALEISERV,ZXV04401,SP100
          ENDIF
.
PEID1000  MOVELPTR  ZXV04501,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PEID2000 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV04501
          IF        @EQUAL
            MOVE      SP100,ALEIROTH
          ELSE
            PACK      ALEIROTH,ZXV04501,SP100
          ENDIF
.
PEID2000  MOVELPTR  ZXV04601,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PEID3000 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV04601
          IF        @EQUAL
            MOVE      SP100,ALEIRCON
          ELSE
            PACK      ALEIRCON,ZXV04601,SP100
          ENDIF
.
PEID3000  CALL      UPALEID1                     * update record
          GOTO      PEID9999
.
.         Writing a new record (REF^I12)
.
PEID5000  MATCH     BLANKSTR,ZXV04401
          IF        @EQUAL
            MOVE      SP100,ALEISERV
          ELSE
            PACK      ALEISERV,ZXV04401,SP100
          ENDIF
.
          MATCH     BLANKSTR,ZXV04501
          IF        @EQUAL
            MOVE      SP100,ALEIROTH
          ELSE
            PACK      ALEIROTH,ZXV04501,SP100
          ENDIF
.
          MATCH     BLANKSTR,ZXV04601
          IF        @EQUAL
            MOVE      SP100,ALEIRCON
          ELSE
            PACK      ALEIRCON,ZXV04601,SP100
          ENDIF
.
          MOVE      ALREVISN,ALEIVISN
          PACK      ALEIOAPP,MSH00301,SP100,SP100
          MOVE      SP100,ALEISPAR
.
          CALL      WRALEID1                     * write record
.
PEID9999  RETURN
+
.*****************************************************************************
.*                               PBIN0000          Called: PI120000          *
.*                                                         PI130000          *
.*                Process the booking instructions field                     *
.* Requires: ZXV04801 - Booking Instructions                                 *
.*           ALREVISN - webPAS visit number for referral                     *
.*****************************************************************************
.
PBIN0000  STRIP     ZXV04801
          MOVE      ZXV04801,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,ZXV04801
          MOVELPTR  ZXV04801,SAVFORM4
.
          COMPARE   ZERO,SAVFORM4                * field populated ?
          GOTO      PBIN9999 IF EQUAL            * no - finished
.
          MATCH     BLANKSTR,ZXV04801            * null field ?
          GOTO      PBIN9999 IF EQUAL            * yes
.
.         There are booking instructions in the field, so get the next
.         note number
.
          MOVE      "     1",FORM6               * load default note number
.
          PACK      KEY17,ALREVISN,ZERO,ZERO,FIVE,TILDA35
          CALL      RSVSMDT1                     * position after last note
          CALL      RPVSMDT1                     * read previous record
          BRANCH    OVRCD,PBIN2500               * eof - no notes found
.
          MATCH     ALREVISN,VSMDVISN            * same visit still ?
          GOTO      PBIN2500 IF NOT EQUAL        * no - no notes found
.
          MATCH     "005",VSMDTYPE               * same type still ?
          GOTO      PBIN2500 IF NOT EQUAL        * no - no notes found
.
          MOVE      VSMDNOTE,FORM6
PBIN2000  ADD       ONE,FORM6                    * increment note number
PBIN2500  MOVE      FORM6,VSMDNOTE               * load next note number
.
PBIN3000  PACK      KEY17,ALREVISN,ZERO,ZERO,FIVE,FORM6
          CALL      RAVSMDT1                     * record found ?
          BRANCH    OVRCD,PBIN5000               * no - create record
.
          GOTO      PBIN2000                     * yes - get next note number
.
.         Write a new header record
.
PBIN5000  CALL      WMDT0000
.
.         Now write the booking instructions to vismtxaf (detail) record(s)
.
          CALL      WBIN0000
.
PBIN9999  RETURN
+
.*****************************************************************************
.*                           WMDT0000              Called by: PBIN0000       *
.*                    Write a vismdtaf (type 005) record                     *
.* Requires: ALREVISN - webPAS visit number for referral                     *
.*           VSMDNOTE - Next Note number for visit                           *
.*****************************************************************************
.
WMDT0000  CALL      IBACLOCK                     * get current date/time
          PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
.
          MOVE      ALREVISN,VSMDVISN            * load visit number
          MOVE      "005",VSMDTYPE               * load comment type
          MOVE      CURRDATE,VSMDDATE            * load input date
          MOVE      CTIMEIS,VSMDTIME             * load input time
          MOVE      "HL7RECVR  ",VSMDUSER        * load user
          MOVE      SP3,VSMDOCCG                 * load occ. gp.
          MOVE      ZERO,VSMDDELT                * load delete indicator
          MOVE      SP8,VSMDDDAT                 * load delete date 
          MOVE      SP8,VSMDDTIM                 * load delete time
          MOVE      SP10,VSMDDUSE                * load delete user
          MOVE      SP3,VSMDDOCC                 * load delete occ. gp.
          PACK      VSMDSPAR,SP100,SP100
.
          CALL      WRVSMDT1                     * write record
.
WMDT9999  RETURN
+
.*****************************************************************************
.*                           WBIN0000              Called by: PBIN0000       *
.*                    Write vismtxaf (type 005) record(s)                    *
.* Requires: ALREVISN - webPAS visit number for referral                     *
.*           ZXV04801 - booking instructions                                 *
.*           VSMDNOTE - Note Number                                          *
.*****************************************************************************
.
.         Bump through the text string on a character by character basis
.         and for each character check to see whether there is a line break.
.         Allow 100 characters/line, unless of course there is a line break
.         or the end of the string is reached.
.
WBIN0000  MOVE      ZERO,LINENUMB                * initialise line number
          MOVE      ZERO,CHRCOUNT                * initialise character count
          CLEAR     DIM100                       * initialise line string
.
.         Check to see if we have a line break
.
WBIN0200  MOVE      ZERO,BREAKFLG                * initialise break found flag
          MATCH     LINBREAK,ZXV04801
          IF        !@EQUAL | @LESS
            GOTO      WBIN0500
          ENDIF
.
.         We have found a line break, so if there is no data so far in the
.         the line (CHRCOUNT is zero), then ignore the line break, otherwise,
.         write the current line data
.
          IF        CHRCOUNT = 0
            BUMP      ZXV04801,5                 * move past line break
            GOTO      WBIN9500 IF EOS            * eos - finished
            GOTO      WBIN0200                   * check for another line break
          ENDIF
.
          MOVE      ONE,BREAKFLG                 * set flag for break found
.
WBIN0300  CALL      WBLN0000                     * write a comment line
.
          MOVE      ZERO,CHRCOUNT                * re-initialise character count
.
WBIN0400  IF        BREAKFLG = 1
            BUMP      ZXV04801,5                 * move past line break
          ELSE
            BUMP      ZXV04801                   * get next character
          ENDIF
          GOTO      WBIN9000 IF EOS              * eos - finished
          GOTO      WBIN0200                     * check for another line break
.
.         We have a valid character, so load it into the text line and then
.         get the next character
.
WBIN0500  MOVE      ZXV04801,ANS
          APPEND    ANS,DIM100                   * load current character
          ADD       ONE,CHRCOUNT                 * increment character count
.
          COMPARE   HUNDRED,CHRCOUNT             * full line yet ?
          GOTO      WBIN0400 IF LESS             * no
          GOTO      WBIN0300                     * yes - write comment
.
WBIN9000  IF        CHRCOUNT > 0
            CALL      WBLN0000                   * write comment record
          ENDIF
.
WBIN9500  RESET     ZXV04801
.
WBIN9999  RETURN
+
.*****************************************************************************
.*                                  WBLN0000       Called by: WBIN0000       *
.*            Write a booking comment line record to vismtxaf                *
.*****************************************************************************
.
WBLN0000  MOVE      ALREVISN,VSMTVISN            * load record variables
          MOVE      "005",VSMTTYPE
          MOVE      VSMDNOTE,VSMTNOTE
          ADD       ONE,LINENUMB                 * increment line number
          MOVE      LINENUMB,VSMTUNIQ
          RESET     DIM100
          PACK      VSMTCMNT,DIM100,SP100
          MOVE      SP30,VSMTSPAR
 
          CALL      WRVSMTX1                     * write new record
 
          CLEAR     DIM100                       * clear comment line
.
WBLN9999  RETURN
+
.*****************************************************************************
.*                              AVIS0000           Called by: PI120000       *
.*                   Create an alternate visit number record                 *
.*        in ibaalvaf.                                                       *
.* Requires: RF100601 - Alternate Visit Number (left justified)              *
.*           ALREVISN - webPAS Visit Number (right justified)                *
.*****************************************************************************
.
AVIS0000  MOVE      ALREVISN,KEY8
          CALL      RAIBALV1                     * webPAS visit already on file?
          IF        OVRCD = 1
            MOVE      ALREVISN,IBAVVISN          * load field data
            PACK      IBAVAVIS,RF100601,SP20
            MOVE      " 1",IBAVTYPE
            MOVE      SP20,IBAVSPAR
            CALL      WRIBALV1                   * write alt. visit no. record
          ENDIF
.
AVIS9999  RETURN
+
.*****************************************************************************
.*                            UVIS0000             Called by: PI130000       *
.*            Write a visit record to patvisaf and pmsvx1af                  *
.* Requires: Valid read on patvisaf & pmsvx1af records                       *
.*****************************************************************************
.
.         Update visit record (patvisaf)
.
UVIS0000  MOVE      ALRERDAT,PVIDATE             * load patvisaf fields
          MOVE      ALREPSIT,PVISITE
.
          CALL      UPVISA1                      * update patvisaf record
.
.         Update visit extension record (pmsvx1af)
.
          MOVE      ALRERDAT,PMVXVSDT
          MOVE      ALREHCP,PMVXDOCA
          MOVE      PPOST,PMVXPOST
          MOVE      ALRERHCP,PMVXRHC1
          MOVE      ALRERHCR,PMVXRH1G
          MOVE      ALRERHCT,PMVXRH1C
          MOVE      ALREHOSN,PMVXMHOS
.
          MOVELPTR  ZXV03201,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      UVIS1000 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,ZXV03201
          IF        @EQUAL
            MOVE      SP1,PMVXINTR
          ELSE
            PACK      PMVXINTR,ZXV03201,SP1
          ENDIF
.
UVIS1000  MOVE      ZXV04101,PMVXLUPD
          UNPACK    ZXV04101,KEY8,DIM2H,DIM2N,DIM2S
          PACK      PMVXLUPT,DIM2H,COLON,DIM2N,COLON,DIM2S
          MOVE      "HL7RECVR  ",PMVXWEBU
.
          COMPARE   TWO,PTCNHDPS                 * Australian site ?
          GOTO      UVIS2000 IF LESS             * no
.
          PACK      KEY56,PPOST,PSUBRB,SP10,PADD4,SP70                *C-240184
          CALL      RDIBPOS1
          IF        OVRCD = 0
            MOVE      IBPOASGC,PMVXASGC
          ELSE                                                        *I-240184
            PACK      KEY56,PPOST,PSUBRB,SP70
            CALL      RSIBPOS1
            CALL      RKIBPOS1
            BRANCH    OVRCD,UVIS2000
            MATCH     PPOST,IBPOPCOD
            IF        @EQUAL
              MATCH     PSUBRB,IBPOSUBR
              IF        @EQUAL
                MOVE      IBPOASGC,PMVXASGC
              ENDIF
            ENDIF
          ENDIF
.
UVIS2000  CALL      UPPMVX11                     * update pmsvx1af record
.
UVIS9999  RETURN
+
.*****************************************************************************
.*                            WVIS0000             Called by: PI120000       *
.*            Write a visit record to patvisaf and pmsvx1af                  *
.*****************************************************************************
.
.         Write a visit record (patvisaf)
.
WVIS0000  CALL      CLPATVIS                     * clear patvisaf fields
.
          MOVE      PURNO,PVIURNO                * load patvisaf fields
          MOVE      ALRERDAT,PVIDATE
          MOVE      ALREVISN,PVIBILL
          MOVE      NINE,PVITYPE
          MOVE      TWO,PVISTAT
          MOVE      ONE,PVITRAN
          MOVE      ALREPSIT,PVISITE
          MOVE      " 2",PVISYST
.
          MOVE      PVIBILL,KEY8
          CALL      RDAVISA1                     * visit on file already ?
          IF        OVRCD = 1
            CALL      WRPTVIS1                   * no
          ENDIF
.
.         Write a visit extension record (pmsvx1af)
.
          CALL      CLPMSVX1                     * clear pmsvx1af fields
.
          MOVE      ALREVISN,PMVXVISN            * load pmsvx1af fields
          MOVE      ALRERDAT,PMVXVSDT
          MOVE      ALREHCP,PMVXDOCA
          MOVE      PPOST,PMVXPOST
          MOVE      ALRERHCP,PMVXRHC1
          MOVE      ALRERHCR,PMVXRH1G
          MOVE      ALRERHCT,PMVXRH1C
          MOVE      ALREHOSN,PMVXMHOS
          MATCH     BLANKSTR,ZXV03201
          IF        !@EQUAL
            MOVE      ZXV03201,PMVXINTR
          ENDIF
          MOVE      ZXV04101,PMVXCDTE
          UNPACK    ZXV04101,KEY8,DIM2H,DIM2N,DIM2S
          PACK      PMVXCTIM,DIM2H,COLON,DIM2N,COLON,DIM2S
          MOVE      CTIMEIS,PMVXCTIM
          MOVE      "HL7RECVR  ",PMVXWEBC
.
          COMPARE   TWO,PTCNHDPS                 * Australian site ?
          GOTO      WVIS2000 IF LESS             * no
.
          PACK      KEY56,PPOST,PSUBRB,SP10,PADD4,SP70                *C-240184
          CALL      RDIBPOS1
          IF        OVRCD = 0
            MOVE      IBPOASGC,PMVXASGC
          ELSE                                                        *I-240184
            PACK      KEY56,PPOST,PSUBRB,SP70
            CALL      RSIBPOS1
            CALL      RKIBPOS1
            BRANCH    OVRCD,WVIS2000
            MATCH     PPOST,IBPOPCOD
            IF        @EQUAL
              MATCH     PSUBRB,IBPOSUBR
              IF        @EQUAL
                MOVE      IBPOASGC,PMVXASGC
              ENDIF
            ENDIF
          ENDIF
.
WVIS2000  MOVE      ALREVISN,KEY8
          CALL      RAPMVX11                     * visit on file already ?
          IF        OVRCD=1
            CALL      WRPMVX11                   * no
          ENDIF
.
WVIS9999  RETURN
+
.*****************************************************************************
.*                            WHIS0000             Called by: PI120000       *
.*        Write referral status history record to allstsaf    PI130000       *
.*                                                            PI140000       *
.*****************************************************************************
.
WHIS0000  MATCH     MTYPEI12,MESSTYPE            * I12 message ?
          GOTO      WHIS5000 IF NOT EQUAL        * no
.
.         I12 message only
.
          MOVE      ALREVISN,ALSTVISN            * yes
          MOVE      ALRESTAT,ALSTSTAT
          MOVE      ZXV04101,ALSTSDAT
          MOVE      CURRDATE,ALSTCDAT
          MOVE      CTIMEIS,ALSTCTIM
          MOVE      "HL7RECVR  ",ALSTCUID
          MOVE      SP10,ALSTUUID
          MOVE      SP8,ALSTUDAT
          MOVE      SP8,ALSTUTIM
          MOVE      SP20,ALSTSPAR
.
          PACK      KEY17,ALSTVISN,ALSTSTAT,ALSTSDAT
          CALL      RAALSTS1
          IF        OVRCD = 1
            CALL      WRALSTS1
          ENDIF
          GOTO      WHIS9999
.
.         I13 or I14 message only
.
WHIS5000  PACK      KEY17,ALREVISN,ALRESTAT,ZXV04101
          CALL      RDALSTS1
          IF        OVRCD = 1
            MOVE      ALREVISN,ALSTVISN
            MOVE      ALRESTAT,ALSTSTAT
            MOVE      ZXV04101,ALSTSDAT
            MOVE      CURRDATE,ALSTCDAT
            MOVE      CTIMEIS,ALSTCTIM
            MOVE      "HL7RECVR  ",ALSTCUID
            MOVE      SP10,ALSTUUID
            MOVE      SP8,ALSTUDAT
            MOVE      SP8,ALSTUTIM
            MOVE      SP20,ALSTSPAR
            CALL      WRALSTS1
          ELSE
            MOVE      CURRDATE,ALSTUDAT
            MOVE      CTIMEIS,ALSTUTIM
            MOVE      "HL7RECVR  ",ALSTCUID
            CALL      UPALSTS1
          ENDIF
.
WHIS9999  RETURN
+
.*****************************************************************************
.*                           CHKA0000              Called by: VRF10000       *
.*            Check there are no active contacts or linked referrals         *
.*            for this visit prior to cancellation                           *
.*****************************************************************************
.
.         Loop through the contacts for this referral and make sure
.         none are active
.
CHKA0000  PACK      KEY16,ALREVISN,SP20
          CALL      RSALENC1                     * position on visit number
CHKA1000  CALL      RKALENC1                     * read next record
          BRANCH    OVRCD,CHKA3000               * eof - finished
.
          MATCH     ALREVISN,ALENVISN            * same visit still ?
          GOTO      CHKA3000 IF NOT EQUAL        * no - finished
.
          MATCH     "0",ALENRSTA                 * active encounter ?
          GOTO      CHKA2000 IF EQUAL            * yes - error
.
          MATCH     " ",ALENRSTA                 * active encounter ?
          GOTO      CHKA2000 IF EQUAL            * yes - error
.
          GOTO      CHKA1000                     * get next record
.
CHKA2000  MOVE      "REF.1: Active Contacts exist for the Referral",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      CHKA9999
.
.         Now loop through and make sure there are no active linked referrals
.
CHKA3000  MATCH     "1",ALREUYN4                 * master referral ?
          GOTO      CHKA9999 IF NOT EQUAL        * no - finished
.
          PACK      KEY16,ALREVISN,SP20
          CALL      RSALRLN1                     * position on visit number
CHKA3500  CALL      RKALRLN1                     * read next record
          BRANCH    OVRCD,CHKA9000               * eof - finished
.
          MATCH     ALREVISN,ALRLVISN            * same visit still ?
          GOTO      CHKA9000 IF NOT EQUAL        * no - finished
.
          MOVE      ALRLLNKV,KEY8
          CALL      RDALREF1                     * linked referral found ?
          BRANCH    OVRCD,CHKA3500               * no - get next record
.
          MATCH     "4",ALRESTAT                 * referral cancelled ?
          GOTO      CHKA3500 IF EQUAL            * yes - get next record
.
          MATCH     "5",ALRESTAT                 * referral rejected ?
          GOTO      CHKA3500 IF EQUAL            * yes - get next record
.
          MOVE      "REF.2: Active Linked Referrals exists",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
.
.         Re-read the allrefaf record as we may have repositioned when
.         checking for linked referrals
.
CHKA9000  MOVE      RF101101,KEY8
          RJUSTIFY  KEY8
          CALL      RDALREF1
          IF        OVRCD = 1
            MOVE      "REF.3: Referral record not found",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
CHKA9999  RETURN
+
.*****************************************************************************
.*                             UMEH0000            Called by: PI130000       *
.*                      MHINC - Update Referral               PI140000       *
.* Requires: Read of original allrefaf record prior to update                *
.*           ZXV04001 - Referral Department (from message)                   *
.*           SAVESTAT - Status or original referral record                   *
.* Returns:  ALREMOHR - MOH Indicator Record sent to MHINC                   *
.*****************************************************************************
.
UMEH0000  MATCH     "1",ALREUYN4                 * master referral ?
          GOTO      UMEH9999 IF NOT EQUAL        * no - finished
.
          MATCH     SAVESTAT,ALRESTAT            * status change ?
          GOTO      UMEH9999 IF EQUAL            * no
.
          PACK      KEY5,ANSC,ANSG,ALREDEPT
          CALL      RDCODE1                      * code on file ?
          BRANCH    OVRCD,UMEH9999               * no
.
          MATCH     "M",TCINDC4                  * Mental Health department ?
          GOTO      UMEH9999 IF NOT EQUAL        * no - finished
.
          MATCH     "0",ALREMOHR                 * flag set as unsent ?
          GOTO      UMEH2000 IF EQUAL            * yes
.
          MATCH     "1",ALREMOHR                 * flag set as sent ?
          GOTO      UMEH4000 IF EQUAL            * yes
.
          GOTO      UMEH9999                     * finished
.
.         If Closing referral for Unsent - then set indicator to 4
.
UMEH2000  MATCH     "2",ALRESTAT                 * closed status ?
          GOTO      UMEH9999 IF NOT EQUAL        * no
.
          MOVE      "4",ALREMOHR              * 'Send RF and Discharge required'
          GOTO      UMEH9999
.
.         Already sent
.
UMEH4000  MATCH     "2",ALRESTAT                 * closed referral ?
          GOTO      UMEH5000 IF EQUAL            * yes
.
          MATCH     "4",ALRESTAT                 * cancelled referral ?
          GOTO      UMEH6000 IF EQUAL            * yes
.
          MATCH     "5",ALRESTAT                 * rejected referral ?
          GOTO      UMEH6000 IF EQUAL            * yes
.
          MOVE      "0",ALREMOHR                 * Unsent/Resend
.
.         If this was re-actived from Closed sent Referral - set indicator to 5
.
          MATCH     "1",ALRESTAT                 * active status ?
          GOTO      UMEH9999 IF NOT EQUAL        * no
.
          MATCH     "2",SAVESTAT                 * originally closed status ?
          GOTO      UMEH9999 IF NOT EQUAL        * no
.
          MOVE      "5",ALREMOHR                 * 'Send Delete Discharge'
          GOTO      UMEH9999
.
UMEH5000  MOVE      "3",ALREMOHR                 * Send Discharge required
          GOTO      UMEH9999
.
UMEH6000  MOVE      "2",ALREMOHR                 * Send delete
          GOTO      UMEH9999
.
UMEH9999  RETURN
+
.*****************************************************************************
.*                          WAUD0000               Called by: PI120000       *
.*            Write audit record to allaudaf                  PI130000       *
.*                                                            PI140000       *
.*****************************************************************************
.
WAUD0000  CALL      CLALLAUD                     * clear allaudaf variables
.
          MOVE      ALREVISN,ALAUVISN
          MOVE      ZXV04101,ALAUADAT
          UNPACK    ZXV04101,KEY8,DIM2H,DIM2N,DIM2S
          PACK      ALAUATIM,DIM2H,COLON,DIM2N,COLON,DIM2S
          MOVE      "HL7RECVR  ",ALAUAUID
.
          MATCH     MTYPEI12,MESSTYPE            * add referral ?
          IF        @EQUAL
            PACK      ALAUUPDT,ANSA,SP1          * yes - set to Add
            GOTO      WAUD3000
          ENDIF
.
          MATCH     MTYPEI14,MESSTYPE            * delete referral ?
          GOTO      WAUD1000 IF NOT EQUAL        * no
.
          MATCH     "4",ALRESTAT                 * cancellation 
          IF        @EQUAL
            PACK      ALAUUPDT,ANSN,SP1          * yes - set to Cancel
            GOTO      WAUD3000
          ENDIF
.
          MATCH     "5",ALRESTAT                 * rejection ?
          IF        @EQUAL
            PACK      ALAUUPDT,ANSJ,SP1          * yes - set to Reject
            GOTO      WAUD3000
          ENDIF
.
.         This is an update, so check if it is a change in status or
.         a simple update
.
WAUD1000  MATCH     SAVESTAT,ALRESTAT            * status change ?
          GOTO      WAUD2000 IF EQUAL            * no
.
.         Check what sort of status change to determine the update type
.
          MATCH     "2",ALRESTAT                 * closed ?
          IF        @EQUAL
            PACK      ALAUUPDT,ANSC,SP1          * yes - set to Closed
            GOTO      WAUD3000
          ENDIF
.
          MATCH     "3",ALRESTAT                 * inactive ?
          IF        @EQUAL
            PACK      ALAUUPDT,ANSI,SP1          * yes - set to Inactive
            GOTO      WAUD3000
          ENDIF
.
          MATCH     "1",ALRESTAT                 * active ?
          IF        @EQUAL
            PACK      ALAUUPDT,ANSA,SP1          * yes - set to Active
            GOTO      WAUD3000
          ENDIF
.
WAUD2000  PACK      ALAUUPDT,ANSU,SP1            * set to Update
.
WAUD3000  PACK      KEY24,ALAUVISN,ALAUADAT,ALAUATIM
          CALL      RAALAUD1
          IF        OVRCD = 1
            CALL      WRALAUD1                   * write record
          ENDIF
.
WAUD9999  RETURN
+
.*****************************************************************************
.*                             VSIT0000            Called by: AZXV0000       *
.*                   Validate O/P site component 1            OZXV0000       *
.* Requires: ZXV03501 - Preferred Site Code                                  *
.* Returns:  EXIT  0 = Valid site code                                       *
.*                 1 = Site code validation error                            *
.*           OSTFILE  - O/P file prefix                                      *
.*****************************************************************************
.
VSIT0000  MOVE      SP6,OSTFILE                  * initialise O/P site prefix
.
          STRIP     ZXV03501
          MOVELPTR  ZXV03501,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZXV.35: Preferred Site component 1 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VSIT9100
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,ZXV03501
          IF        @EQUAL
            MOVE      "ZXV.35: Preferred Site component 1 is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VSIT9100
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 6
            MOVE      "ZXV.35: Preferred Site component 1 has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VSIT9100
          ENDIF
.
.         Make sure the code is valid (outsitaf)
.
          PACK      KEY6,ZXV03501,SP6
          CALL      RDSITA1
          IF        OVRCD = 1
            MOVE      "ZXV.35: Preferred Site component 1 not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VSIT9100
          ENDIF
.
          MATCH     SP6,OSTFILE
          IF        @EQUAL
            MOVE      "ZXV.35: File prefix for site not found",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VSIT9100
          ENDIF
.
          MOVE      ZERO,EXIT
          GOTO      VSIT9999
.
VSIT9100  MOVE      ONE,EXIT
.
VSIT9999  RETURN
+
.*****************************************************************************
.*                                  OSIT0000       Called by: AZXV0000       *
.*               Validate the remaining site components       OZXV0000       *
.* Requires: ZXV03503 - Source of Code (ie webPAS)                           *
.*****************************************************************************
.
.         Preferred Site (ZXV.35, Component 3)
.
OSIT0000  STRIP     ZXV03503
          MOVELPTR  ZXV03503,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZXV.35: Preferred Site component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
OSIT9999  RETURN
+
.*****************************************************************************
.*                             CVIN0000            Called by: AZXV0000       *
.*                 Check if this is a valid VINAH Episode referral           *
.* Requires: ALDEDEPT - Department code (Cat CG) from valid read of alldepaf *
.*           ALCNDEVP - Using VINAH Event Program parameter                  *
.*           ZXV05001 - Event program (Cat zG)                               *
.* Returns: PROGTYPE - VINAH Program type                                    *
.*                0 = Standard Internal Referral (not VINAH)                 *
.*                1 = HARP                                                   *
.*                2 = HBPCCT                                                 *
.*                3 = Medi-Hotel                                             *
.*                4 = Palliative Care                                        *
.*                5 = Post Acute Care                                        *
.*                6 = RIR                                                    *
.*                7 = SACS                                                   *
.*                8 = SOP                                                    *
.*                9 = TCP / HBD / HEN / TPN / ALP                            *
.*****************************************************************************
.
.         Indicator 11 (Cat CG) must be set to "E" AND the referral
.         must be a valid VINAH program type for this to be a valid VINAH
.         Episode.
.         This code is essentially the same as that found in LDALLHDT
.         (VREC0000) and they should remain consistent with their logic.
.         The only real difference is that this routine checks Cat CG first,
.         then Cat zG, whereas, LDALLHDT does it in the reverse sequence.
.
CVIN0000  MOVE      ZERO,PROGTYPE                * initialise VINAH program type
.
.         First we need to use Cat CG to check if this is a VINAH Episode.
.         This also allows Indicator 11 to be checked first, to see if the
.         department allows episodes to be created.
.
          PACK      CATEGORY,ANSC,ANSG
          MOVE      ALDEDEPT,DIM3
CVIN0500  PACK      KEY5,CATEGORY,DIM3
CVIN1000  CALL      RDCODE1                      * department code on file ?
          BRANCH    OVRCD,CVIN1500               * no - ignore record
.
          MATCH     CATzG,CATEGORY               * checking zG ?
          GOTO      CVIN1200 IF EQUAL            * yes
.
.         We are checking Cat CG, so if Indicator 11 is not set to "E",
.         then we need to treat this as a standard internal referral
.         (not a VINAH Episode).
.
          MATCH     ANSE,TCINDC11                * creating VINAH episode ?
          GOTO      CVIN9000 IF NOT EQUAL        * no - finished
.
CVIN1200  MATCH     SP1,TCINDC8                  * indicator 8 populated ?
          GOTO      CVIN1500 IF EQUAL            * no - ignore record
.
          MOVE      TCINDC8,ANS
          TYPE      ANS                          * indicator 8 numeric ?
          GOTO      CVIN1500 IF EQUAL            * yes - ignore record
.
          MOVE      ZERO,FORM1
          REP       "A5H2S7O8M3P4R6T9I1D9E9L9V9",ANS
          MOVE      ANS,FORM1
          COMPARE   ZERO,FORM1                   * valid VINAH program type ?
          GOTO      CVIN1500 IF EQUAL            * no
.
          MOVE      FORM1,PROGTYPE               * yes - save program type
.
CVIN1500  MATCH     "zG",CATEGORY                * tried Cat zG ?
          GOTO      CVIN9000 IF EQUAL            * yes - finished
.
.         We've tried Cat CG first, so now try using Cat zG, but only
.         do this if the Using Event Program parameter is turned on
.
          MATCH     "1",ALCNDEVP                 * using Cat zG ?
          GOTO      CVIN9000 IF NOT EQUAL        * no
.
          MOVE      CATzG,CATEGORY               * set up for Cat zG
          PACK      DIM3,ZXV05001,SP3
.
          MATCH     SP3,DIM3                     * event program blank ?
          GOTO      CVIN0500 IF NOT EQUAL        * no
.
.         When IGNORFLG was set, we didn't know whether this was a VINAH
.         referral or a standard internal referral, so if this is the latter,
.         then reset the ignore flag as it is only relevant to VINAH referrals.
.
CVIN9000  COMPARE   ZERO,PROGTYPE
          IF        @EQUAL
            MOVE      ZERO,IGNORFLG              * not VINAH
            GOTO      CVIN9999
          ENDIF
.
CVIN9999  RETURN
+
.*****************************************************************************
.*                               PRHL0000          Called by: PI120000       *
.*             Process allrhlaf record for VINAH Episode      PI130000       *
.*                                                            PI140000       *
.*        When a VINAH Episode I12 message is processed, it will write a     *
.*        Referral In allrhlaf record if Service Type (ZXV05301) is          *
.*        populated.  The record will be written using the Episode visit     *
.*        number and then later on when the user creates the Referral In     *
.*        record from the Episode record using the Create Program button     *
.*        from the front-end, the visit number will be updated to the        *
.*        Referral In visit number.                                          *
.*        Subsequent I13 and I14 messages will then either add, delete or    *
.*        update the Episode related allrhlaf record, depending on whether   *
.*        or not the Create Program button has been triggered from the       *
.*        front-end to create the linked Referral In.                        *
.*****************************************************************************
.
PRHL0000  MATCH     MTYPEI12,MESSTYPE            * I12 message ?
          GOTO      PRHL5000 IF NOT EQUAL        * no
.
          MATCH     BLANKSTR,ZXV05301            * yes - blank service type ?
          GOTO      PRHL9999 IF EQUAL            * yes - finished
.
.         We are processing an I12 message, so write a new allrhlaf record.
.
PRHL1000  MOVE      ALREVISN,ALRHVISN            * load allrhlaf variables
          MOVE      "04",ALRHTYPE
          MOVE      "  1",ALRHUNIQ
          PACK      ALRHCODE,ZXV05301,SP9
          PACK      ALRHDATE,CCC,CYY,CMM,CDD
          REP       " 0",ALRHDATE
          PACK      ALRHCDAT,CCC,CYY,CMM,CDD
          REP       " 0",ALRHCDAT
          MOVE      CTIMEIS,ALRHCTIM
          MOVE      "HL7RECVR  ",ALRHCUID
          MOVE      SP9,ALRHCOD2
          MOVE      SP70,ALRHSPAR
.
          PACK      KEY13,ALRHVISN,ALRHTYPE,ALRHUNIQ
          CALL      RAALRHL1
          IF        OVRCD = 1
            CALL      WRALRHL1                   * write allrhlaf record
          ENDIF
.
          GOTO      PRHL9999
.
.         This is either an I3 or an I14 message
.
PRHL5000  MATCH     MTYPEI14,MESSTYPE            * I14 message ?
          GOTO      PRHL7000 IF EQUAL            * yes
.
.         This is an I13 message, so if the Referral In Service Type
.         is blank, we need to delete the allrhlaf record, otherwise
.         update the record with the new value
.
          MATCH     BLANKSTR,ZXV05301            * blank service type in ?
          GOTO      PRHL7000 IF EQUAL            * yes
.
          PACK      KEY13,ALREVISN,ZERO,FOUR,SP2,ONE
          CALL      RDALRHL1
          IF        OVRCD = 0
            PACK      ALRHCODE,ZXV05301,SP9
            CALL      UPALRHL1
            GOTO      PRHL9999
          ENDIF
.
.         There isn't a current Referral In record for the Episode, so
.         check if there is a linked Referral In.  If there is, we don't need
.         to do anything as the Create Program button has been triggered
.         from the front-end.
.         Otherwise, if there is no linked Referral In, then create an
.         allrhlaf record for the Episode as per the I12 function as the
.         Create Program button hasn't been triggered as yet.
.
          PACK      KEY16,ALREVISN,SP20
          CALL      RSALRLN2                     * position on Episode number
          CALL      RKALRLN2                     * read next record
          BRANCH    OVRCD,PRHL1000               * eof - create allrhlaf record
.
          MATCH     ALREVISN,ALRLLNKV            * same visit number still ?
          GOTO      PRHL1000 IF NOT EQUAL        * no - create allrhlaf record
.
          MATCH     "1",PTCNCPRG                 * TSK 0900673
          GOTO      PRHL9999 IF NOT EQUAL        * not updating program ref.
.
          MOVE      ALRLVISN,D8                  * Program referral number
.
          PACK      KEY16,D8,SP70
          CALL      RSALRLN1                     * Check if this is the first
          CALL      RKALRLN1                     * linked episode referral
          BRANCH    OVRCD,PRHL9999
.
          MATCH     D8,ALRLVISN                  * Correct program referral
          GOTO      PRHL9999 IF NOT EQUAL
.
          MATCH     ALREVISN,ALRLLNKV            * First linked episode referral
          GOTO      PRHL9999 IF NOT EQUAL
.
          PACK      KEY13,ALRLVISN,ZERO,FOUR,SP2,ONE
          CALL      RDALRHL1
          IF        OVRCD = 0
            PACK      ALRHCODE,ZXV05301,SP9
            CALL      UPALRHL1                   * update prog ref service type
          ENDIF
.
          GOTO      PRHL9999                     * yes - finished
.
.         Delete the Referral In record if it exists
.
PRHL7000  PACK      KEY13,ALREVISN,ZERO,FOUR,SP2,ONE
          CALL      DEALRHL1
.
PRHL9999  RETURN
+
.*****************************************************************************
.*                               PRHLC000                                    *
.*             Process allrhlaf episode health conditions for VINAH Episode  *
.*****************************************************************************
PRHLC000  MOVE      ZERO,COUNTER
PRHLC050  ADD       ONE,COUNTER
          COMPARE   COUNTER,FIVE
          GOTO      PRHLC999 IF LESS             * process up to 5 codes
.
          LOAD      D9,COUNTER,SVALDIA1,SVALDIA2,SVALDIA3,SVALDIA4,SVALDIA5
.
          MATCH     SP70,D9                      * blank code
          GOTO      PRHLC050 IF EQUAL            * yes
.
          MATCH     BLANKSTR,D9                  * null code
          GOTO      PRHLC050 IF EQUAL            * yes
.
          PACK      KEY22,D9,ALREVISN,ZERO1,SP70
          CALL      RSALRHL2
PRHLC100  CALL      RKALRHL2
          BRANCH    OVRCD,PRHLC150
.
          MATCH     D9,ALRHCODE
          IF        @EQUAL
            MATCH     ALREVISN,ALRHVISN
            IF        @EQUAL
              MATCH     ZERO1,ALRHTYPE
              GOTO      PRHLC050 IF EQUAL        * code already exists
            ENDIF
          ENDIF
.
PRHLC150  PACK      KEY13,ALREVISN,ZERO1,Z70
          CALL      RSALRHL1
          CALL      RPALRHL1
          BRANCH    OVRCD,PRHLC200
.
          MATCH     ALREVISN,ALRHVISN
          GOTO      PRHLC200 IF NOT EQUAL
.
          MATCH     ZERO1,ALRHTYPE
          GOTO      PRHLC200 IF NOT EQUAL
.
          GOTO      PRHLC300
.
PRHLC200  MOVE      ONE,F3
          MOVE      F3,ALRHUNIQ
          GOTO      PRHLC400
.
PRHLC300  MOVE      ALRHUNIQ,F3
          ADD       ONE,F3
          MOVE      F3,ALRHUNIQ
.
PRHLC400  MOVE      D9,ALRHCODE
          MOVE      ALREVISN,ALRHVISN
          MOVE      "HL7RECVR  ",ALRHCUID
          PACK      ALRHCDAT,CCC,CYY,CMM,CDD
          REP       " 0",ALRHCDAT
          MOVE      CTIMEIS,ALRHCTIM
.
          MOVE      ZERO1,ALRHTYPE
          PACK      KEY13,ALREVISN,ZERO1,F3,SP70
.
          CALL      RAALRHL1
          IF        OVRCD=1
            CALL      WRALRHL1
          ENDIF
.
          GOTO      PRHLC050
.
PRHLC999  RETURN
+
.*****************************************************************************
.*                            XRF10000             Called by: AZXV0000       *
.*  Validation for status (RF1.1) for VINAH Episode Referral differs from    *
.*  that for a Standard Internal Referral.  This extra validation used to be *
.*  done in VRF10000, however we don't know if the referral is a VINAH       *
.*  referral or not until CVIN0000 is called from AZXV0000.  As such, the    *
.*  extra validation of RF1.1 is now done in this routine after PROGTYPE has *
.*  been set.                                                                *
.* Requires: PROGTYPE - VINAH program type                                   *
.*                        0 = Standard Internal Referral (not VINAH)         *
.*                        1 = HARP                                           *
.*                        2 = HBPCCT                                         *
.*                        3 = Medi-Hotel                                     *
.*                        4 = Palliative Care                                *
.*                        5 = Post Acute Care                                *
.*                        6 = RIR                                            *
.*                        7 = SACS                                           *
.*                        8 = SOP                                            *
.*                        9 = TCP / HBD                                      *
.*           RF100101 - Referral Status                                      *
.*****************************************************************************
.
XRF10000  MOVE      ONE,MANDFLAG                 * set flag for mand. priority
.
          MOVE      RF100101,FORM1               * load status
.
          COMPARE   ZERO,PROGTYPE                * VINAH internal referral ?
          GOTO      XRF15000 IF NOT EQUAL        * yes
.
.         This is a standard internal referral message, so do all the
.         normal validations of status versus message type.
.
          CALL      VPTY0000                     * validate priority
.
.         If this is a REF^I12 (Add Referral), then the status should only
.         be Waiting or Active.
.
          MATCH     MTYPEI12,MESSTYPE            * I12 message ?
          GOTO      XRF10300 IF NOT EQUAL        * no
.
          IF        FORM1 > 1
            MOVE      "RF1.1: Referral Status not valid for I12",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
          GOTO      XRF19999
.
.         If this is a REF^I13 (Update Referral), then the status should only
.         be Waiting, Active, Closed or Inactive unless this is a VINAH
.         referral, in which case rejected and cancelled statuses are allowed.
.
XRF10300  MATCH     MTYPEI13,MESSTYPE            * I13 message ?
          GOTO      XRF10400 IF NOT EQUAL        * no
.
          IF        FORM1 > 3
            MOVE      "RF1.1: Referral Status not valid for I13",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
          GOTO      XRF19999
.
.         If this is a REF^I14 (Delete Referral), then the status should only
.         be Cancelled or Rejected
.
XRF10400  MATCH     MTYPEI14,MESSTYPE            * I14 message ?
          GOTO      XRF19999 IF NOT EQUAL        * no
.
          IF        FORM1 < 4
            MOVE      "RF1.1: Referral Status not valid for I14",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
          GOTO      XRF19999
.
.         This is a VINAH Episode referral message, so we need to
.         use different validations of status versus message type.
.
XRF15000  MATCH     MTYPEI14,MESSTYPE            * I14 message ?
          GOTO      XRF16000 IF EQUAL            * yes - status is irrelevant
.
.         For a REF^I12 and REF^I13 message, the referral status should
.         only be Waiting, Cancelled or Rejected.
.
          IF        FORM1 > 0 & FORM1 < 4
            MOVE      "RF1.1: Referral Status not valid for I12/I13",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Validate Triage Status. (ZXV.56) - not mandatory for REF^I14
.
XRF16000  STRIP     ZXV05601
          MOVELPTR  ZXV05601,FORM3               * field populated ?
.
          COMPARE   ZERO,FORM3
          IF        @EQUAL
            MATCH     MTYPEI14,MESSTYPE          * I14 message ?
            GOTO      XRF19999 IF EQUAL          * yes - not required
.
            MOVE      "ZXV.56: Triage Status not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      XRF19999
          ENDIF
.
          MATCH     BLANKSTR,ZXV05601            * field null ?
          IF        @EQUAL
            MATCH     MTYPEI14,MESSTYPE          * I14 message ?
            GOTO      XRF19999 IF EQUAL          * yes - not required
.
            MOVE      "ZXV.56: Triage Status is mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      XRF19999
          ENDIF
.
.         Make sure the code is valid for Cat ts
.
          PACK      KEY5,CATTS,ZXV05601,SP5
          CALL      RDCODE1                      * valid code ?
          IF        OVRCD = 1
            MOVE      "ZXV.56: Triage Status not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      XRF19999
          ENDIF
.
.         Verify the code is active only if we are creating a referral
.
          MATCH     MTYPEI12,MESSTYPE            * I12 message ?
          GOTO      XRF16500 IF NOT EQUAL        * no
.
          MATCH     ANSA,PTCOACTV
          IF        !@EQUAL
            MOVE      "ZXV.56: Triage Status not active",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Check if triage status is "Accepted" or not.
.
          MATCH     "1",THCSCOD                  * Accepted ?
          GOTO      XRF16300 IF EQUAL            * yes
.
          COMPARE   EIGHT,PROGTYPE               * SOP ?
          GOTO      XRF16200 IF NOT EQUAL        * no - not accepted
.
          MATCH     "010",THCSCOD                * Accepted - New Appointment ?
          GOTO      XRF16300 IF EQUAL            * yes
.
          MATCH     "020",THCSCOD                * Accepted - New Appointment ?
          GOTO      XRF16300 IF EQUAL            * yes
.
XRF16200  MOVE      ZERO,MANDFLAG                * set flag non-mand. priority
.
XRF16300  CALL      VPTY0000                     * validate priority
.
.         Make sure Component 3 is also populated
.
XRF16500  STRIP     ZXV05603
          MOVELPTR  ZXV05603,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZXV.56: Triage Status component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
XRF19999  RETURN
+
.*****************************************************************************
.*                              VPTY0000           Called by: XRF10000       *
.*               Validate the priority field (ZXV.6)                         *
.*     The rules for validation are different for a VINAH referral compared  *
.*     to a non-VINAH referral, so we need to validate this field after we   *
.*     have determined if it is a VINAH referral.                            *
.*****************************************************************************
.
.         Referral Priority (ZXV.6, Component 1)
.
VPTY0000  STRIP     ZXV00601
          MOVELPTR  ZXV00601,FORM3               * field populated ?
          IF        FORM3 = 0
            IF        MANDFLAG = 1
              MOVE      "ZXV.6: Referral Priority component 1 not populated",ERRORDSC
              MOVE      "101",ERRORNUM
              CALL      EROR0000
              GOTO      VPTY0050
            ELSE
              GOTO      VPTY9999
            ENDIF
          ENDIF
.
.         The field is mandatory, so make sure that the field is not null
.
          MATCH     BLANKSTR,ZXV00601
          IF        @EQUAL
            COMPARE   ONE,MANDFLAG
            IF        @EQUAL
              MOVE      "ZXV.6: Referral Priority is mandatory",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      VPTY0050
            ELSE
              GOTO      VPTY9999
            ENDIF
          ENDIF
.
.         Make sure that there is the correct number of characters
.
          IF        FORM3 > 3
            MOVE      "ZXV.6: Referral Priority component 1 has too many characters",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VPTY0050
          ENDIF
.
.         Make sure the code is valid and active for Cat PR
.
          PACK      KEY5,ANSP,ANSR,ZXV00601,SP5
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "ZXV.6: Referral Priority component 1 not valid",ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      VPTY0050
          ENDIF
.
.         Verify the code is active only if we are creating a referral
.
          MATCH     MTYPEI12,MESSTYPE            * I12 message ?
          GOTO      VPTY0050 IF NOT EQUAL        * no
.
          MATCH     ANSA,PTCOACTV
          IF        !@EQUAL
            MOVE      "ZXV.6: Referral Priority component 1 not active",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Referral Priority (ZXV.6, Component 3)
.
VPTY0050  STRIP     ZXV00603
          MOVELPTR  ZXV00603,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "ZXV.6: Referral Priority component 3 not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
VPTY9999  RETURN
+
.===============================================================================
. Copy common variables from the HCP file to the doctors file
. pmshcpaf -> patdo1af                                                CAR 244064
.===============================================================================
MVPTDO00  MOVE      PMHCLDOC,DCODE               * Doctor Code
          MOVE      PMHCTITL,DTITL               * Doctor Title
          MOVE      PMHCGNAM,DGNAME              * Given Name
          MOVE      PMHCSNAM,DSNAME              * Surname
          MOVE      PMHCSPC1,DRTYPE              * Speciality
          MOVE      PMHCRCPT,DRNAME              * Receptionist name
          MOVE      PMHCADR1,DSADD1              * Address line 1
          MOVE      PMHCADR2,DSADD2              * Address line 2
          MOVE      PMHCADR3,DSADD3              * Address line 3
          MOVE      PMHCADR4,DSADD4              * Address line 4
          MOVE      PMHCPOST,DSPOST              * Post code
          MOVE      PMHCSEML,PTDOSEML            * E-Mail
          MOVE      PMHCSTEL,DTELES              * Surgery Telephone
          MOVE      PMHCPAGR,DTELEP              * Page Telephone
          MOVE      PMHCPAGN,DPAGER              * Pager Number
          MOVE      PMHCAHP1,DASSOC1             * Associated HCP 1
          MOVE      PMHCAHP2,DASSOC2             * Associated HCP 2
          MOVE      PMHCAHP3,DASSOC3             * Associated HCP 3
          MOVE      PMHCAHP4,DASSOC4             * Associated HCP 4
          MOVE      PMHCAHP5,DASSOC5             * Associated HCP 5
          MOVE      PMHCPRV1,DPROV               * Provider number 1
          MOVE      PMHCHTEL,DTELEH              * Home Telephone
          MOVE      PMHCHAD1,DHADD1              * Address line 1
          MOVE      PMHCHAD2,DHADD2              * Address line 2
          MOVE      PMHCHAD3,DHADD3              * Address line 3
          MOVE      PMHCHAD4,DHADD4              * Address line 4
          MOVE      PMHCHPCD,DHPOST              * Post code
          MOVE      PMHCHEML,PTDOHEML            * E-Mail
          MOVE      PMHCDFAC,DAFIRST             * Date first accred
          MOVE      PMHCDLAC,DALAST              * Date last accred
          MOVE      PMHCYACC,DAYEARS             * Accred years
          MOVE      PMHCATYP,DACCRED             * Accred type
          MOVE      PMHCSPC2,DRTYPE2             * Speciality
          MOVE      PMHCSPC3,DRTYPE3             * Speciality
          MOVE      PMHCSPC4,DRTYPE4             * Speciality
          MOVE      PMHCSPC5,DRTYPE5             * Speciality
          MOVE      PMHCDTOB,DBIRTH              * Date of birth
          MOVE      PMHCHHCP,DHCSCOD             * H.C.S HCP Code
          MOVE      PMHCOSLV,DALEVEL             * Service level
.
.         If the HCP is inactive set the doctor to inactive
.
          MATCH     "1",PMHCSTTS                 * HCP Inactive
          IF        @EQUAL
            MOVE      ONE,DRSTAT                 * Doctor Inactive
            GOTO      MVPTDO20
          ENDIF
.
.         If the HCP type contains attending set the doctor status
.         to active in hospital.
.
          IF        PMHCHCST=0 | PMHCHCST=2 | PMHCHCST=4 | PMHCHCST=6
            MOVE      ZERO,DRSTAT                * Active inside hospital
            GOTO      MVPTDO20
          ENDIF
.
          IF        PMHCHCST=8 | PMHCHCST=10 | PMHCHCST=11 | PMHCHCST=13
            MOVE      ZERO,DRSTAT                * Active inside hospital
            GOTO      MVPTDO20
          ENDIF
.
.         HCP type doesn't contain attending so set the doctor
.         status to active outside hospital
.
          MOVE      TWO,DRSTAT                   * Active outside hosital
.
MVPTDO20  MOVE      PMHCFAXN,PTDOFAXN            * Fax number
          MOVE      PMHCHFXN,PTDOHFAX            * Home Fax
          MOVE      PMHCMOBN,PTDOMOBL            * Mobile
          MOVE      PMHCCRDC,PTDOGLCC            * Creditor code
          MOVE      PMHCWAHC,PTDOWHDP            * WA HDP HCP code
          MOVE      PMHCMRBN,PTDOMREG            * Med Reg Board No
          MOVE      PMHCNHSN,PTDONHSN            * N.H.S Pros Number
          MOVE      PMHCUDF1,PTDOUDF1            * User Def Field 1
          MOVE      PMHCUDF2,PTDOUDF2            * User Def Field 2
          MOVE      PMHCUDF3,PTDOUDF3            * User Def Field 3
          MOVE      PMHCUDF4,PTDOUDF4            * User Def Field 4
          MOVE      PMHCUDF5,PTDOUDF5            * User Def Field 5
          MOVE      PMHCINSC,PTDOINSC            * Insurance code
          MOVE      PMHCIPLN,PTDOINSN            * Insurance number
          MOVE      PMHCIDTF,PTDOINSF            * Insurance date from
          MOVE      PMHCIDTT,PTDOINST            * Insurance date to
          MOVE      PMHCMPGN,PTDOREGN            * MPG Cert No
          MOVE      PMHCRGDF,PTDOREGF            * Reg Date From
          MOVE      PMHCRGDT,PTDOREGT            * Reg Date To
          MOVE      PMHCVISD,PTDOVISA            * Visa date
          MOVE      PMHCPRFC,PTDOCOMT            * Pref Comm
          MOVE      PMHCPRFN,PTDOPREF            * Pref Name
          MOVE      PMHCABNN,PTDOABNN            * ABN Number
          MOVE      PMHCDLMI,PTDODINA            * Date Made Inactive
          MOVE      PMHCDLMA,PTDODACT            * Date Made Active
          MOVE      SP70,PTDODACO                * Date Made Active Outside
          MOVE      PMHCPRV2,PTDOPRO2            * Provider number 2
          MOVE      PMHCPRV3,PTDOPRO3            * Provider number 3
          MOVE      PMHCPRV4,PTDOPRO4            * Provider number 4
          MOVE      PMHCPRV5,PTDOPRO5            * Provider number 5
          MOVE      PMHCSDAT,PTDOSDAT            * Start Date (ccyymmdd)
          MOVE      PMHCEDAT,PTDOEDAT            * End Date (ccyymmdd)
          MOVE      PMHCUPDF,PTDOAUPD            * Auto Update Yes=1 0=No
          REP       "M0A1",PTDOAUPD
.
          MOVE      PMHCHOSS,PTDOHOSS            * Hospital Specific Doctor
          MOVE      PMHCEXML,PTDOEXML            * Exclude from Mailing List
          MOVE      PMHCDEAC,PTDODEAC            * Accred. Expiry Date
          MOVE      PMHCAHC1,PTDOAHC1            * AH Contact Method 1
          MOVE      PMHCAHC2,PTDOAHC2            * AH Contact Method 2
          MOVE      PMHCAHC3,PTDOAHC3            * AH Contact Method 3
.
          MOVE      PMHCLUPD,DLUPDDTE            * Date updated
          MOVE      PMHCLUPT,DLUPDTME            * Time updated
.
MVPTDO99  RETURN
+
.******************************************************************************
.         DSCR0000                                                            *
.         Create blank records in patdstat file for each period this year     *
.******************************************************************************
DSCR0000  PACK      KEY6,FINYEAR,SP10
          CALL      RDSDRGA1
DSCR1000  CALL      RDKDRGA1
.
          BRANCH    OVRCD,DSCR9999
.
          MATCH     DRGYR,FINYEAR
          GOTO      DSCR9999 IF LESS
.
          MOVE      ZERO,PTDSBADM
          MOVE      ZERO,PTDSBBED
          MOVE      ZERO,PTDSBOPR
          MOVE      ZERO,PTDSBMBS
          MOVE      ZERO,PTDSADMS
          MOVE      ZERO,PTDSBEDD
          MOVE      ZERO,PTDSOPRS
          MOVE      ZERO,PTDSMBSC
          MOVE      FINYEAR,PTDSYEAR
          MOVE      DRGNUM,PTDSPERD
          MOVE      DCODE,PTDSCODE
.
          PACK      KEY13,PTDSYEAR,PTDSPERD,ANSR,PTDSCODE
          CALL      RADSTA1
          IF        OVRCD=1
            CALL      WRDSTA1
          ENDIF
          PACK      KEY13,PTDSYEAR,PTDSPERD,ANSA,PTDSCODE
          CALL      RADSTA1
          IF        OVRCD=1
            CALL      WRDSTA1
          ENDIF
.
          GOTO      DSCR1000
.
DSCR9999  RETURN
+
.*****************************************************************************
.*                              VITM0000           Called by: VFT10000       *
.*                    Validate the item code                                 *
.* Requires: FT100701 - Transaction Code                                     *
.* Returns:  EXIT   0 = Ok to continue                                       *
.*                  1 = Error                                                *
.*****************************************************************************
.
VITM0000  PACK      KEY9,FT100701,SP9
          PACK      KEY17,KEY9,FT100401,SP70
          CALL      PATITMRD                     * item on file ?
          BRANCH    OVRCD,VITM9100               * no - error
.
          MATCH     "I",PTITACTV
          GOTO      VITM9200 IF EQUAL            * item inactive ?
.
          MOVE      ZERO,EXIT                    * item is valid
          GOTO      VITM9999
.
.         CMBS item code was not found, so process error
.
VITM9100  MOVE      "FT1.7: Transaction code not valid",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
          MOVE      ONE,EXIT
.
.         CMBS item code is inactive, so process error
.
VITM9200  MOVE      "FT1.7: Transaction code inactive",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
          MOVE      ONE,EXIT
.
VITM9999  RETURN
+
.*****************************************************************************
.*                              VIOH0000           Called by: VFT10000       *
.*                    Validate the Invoice on Hold code                      *
.* Requires: FT100701 - Transaction Code                                     *
.*           FT100702 - Transaction Code Text                                *
.* Returns:  EXIT   0 = Ok to continue                                       *
.*                  1 = Error                                                *
.*****************************************************************************
VIOH0000  STRIP     FT100702
          MOVELPTR  FT100702,FORM3
          COMPARE   ZERO,FORM3                   * description populated ?
          IF        @EQUAL
            MOVE      "FT1.7: Component 2 text not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            MOVE      ONE,EXIT
            GOTO      VIOH9999
          ENDIF
          MATCH     BLANKSTR,FT100702
          IF        @EQUAL
            MOVE      "FT1.7: Component 2 text is mandatory",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            MOVE      ONE,EXIT
            GOTO      VIOH9999
          ENDIF
.
          PACK      KEY5,CATrh,FT100701
          CALL      RDCODE1                      * code on file ?
          BRANCH    OVRCD,VIOH9100               * no - finished
.
          MATCH     "C",TCINDC4                  * CodeFocus hold invoice ?
          GOTO      VIOH9200 IF NOT EQUAL        * no - finished
.
VIOH9000  MOVE      ZERO,EXIT                    * item is valid
          GOTO      VIOH9999
.
.         Invoice on Hold code was not found, so process error
.
VIOH9100  MOVE      "FT1.7: Invoice on Hold code not valid on Cat rh",ERRORDSC
          MOVE      "2",ERRORNUM
          CALL      EROR0000
          MOVE      ONE,EXIT
          GOTO      VIOH9999
.
.         Invoice on Hold code is not CodeFocus, so process error
.
VIOH9200  MOVE      "FT1.7: Invoice on Hold code indicator 4 not C",ERRORDSC
          MOVE      "2",ERRORNUM
          CALL      EROR0000
          MOVE      ONE,EXIT
          GOTO      VIOH9999
.
VIOH9999  RETURN
+
.******************************************************************************
.*                      Update Day Procedure Details                          *
.******************************************************************************
UPDDAY00  PACK      KEY11,OPDAUNIQ,TEAMNUMB,SP70
          CALL      RLOPSRG1               * locks the record for updating
          BRANCH    OVRCD,UPDDAY10,UPDDAY92
          GOTO      UPDDAY20
.
UPDDAY10  MATCH     "1",TEAMNUMB
          GOTO      UPDDAY91 IF NOT EQUAL
          MOVE      TEAMNUMB,OPSRG002
          MOVE      OPDAUNIQ,OPSRG001
          CALL      CLOPRSRG
          MOVE      ZERO,UPDTMFLG
          CALL      CHKOPM00                * Check for recalculation of Op Min
          CALL      MVOPSG00
          PROC      PREVTIME
          BRANCH    EXIT,UPDDAY90,UPDDAY93
.
          PACK      KEY11,OPSRG001,OPSRG002,SP70
          CALL      RAOPSRG1
          IF        OVRCD = 1
            CALL      WROPSRG1
          ENDIF
          IF        STAFFLAG <> 1
            CALL      DFLTTM00
            MOVE      ONE,STAFFLAG          * don't default again
          ENDIF
          GOTO      UPDDAY30
.
UPDDAY20  MOVE      TEAMNUMB,OPSRG002
          MOVE      OPDAUNIQ,OPSRG001
          MOVE      ONE,UPDTMFLG
          CALL      CHKOPM00                * Check for recalculation of Op Min
          CALL      MVOPSG00                * moving cgi variables to file var
          PROC      PREVTIME
          BRANCH    EXIT,UPDDAY90,UPDDAY93
          CALL      UPOPSRG1                * updating surgical details
.
.         Check if any mbs written to oprpmbs file
.
          CALL      GETMBS00                * Get Theatre MBS Details
.
          CALL      UUOPSRG1                * unlock the record
.
UPDDAY30  PACK      KEY10,OPDAUNIQ,SP70
          CALL      RDOPARD1
          IF        OVRCD=1
            CALL      CLOPRARD
            CALL      MVOPAR00
            MOVE      OPDAUNIQ,OPARUNID
            CALL      WROPARD1
          ELSE
            MATCH     SP70,OPARANAS
            IF        !@EQUAL
              MOVE      ONE,STAFFLAG   * default team has already been written
            ENDIF
            CALL      MVOPAR00
            CALL      UPOPARD1
          ENDIF
          IF        STAFFLAG = 2
            CALL      DFLTTM00         * default team as anaesthetic time exists
          ENDIF
.
          MATCH     Z70,OPDEA003
          IF        !@EQUAL
            MOVE      OPDEA003,OPDAANAE     * cat OA anaesthetic key (type)
          ENDIF
.
          MATCH     Z70,OPDEA021
          IF        !@EQUAL
            MOVE      OPDEA021,OPDAPRE2     * anaesthetic start (hh:mm)
          ENDIF
.
          MATCH     Z70,OPDEA022
          IF        !@EQUAL
            MOVE      OPDEA022,OPDAPRE3     * anaesthetic start (hh:mm)
          ENDIF
.
          CALL      IBACLOCK
          MOVE      CURRDATE,OPDAUDAT
          CLOCK     TIME,OPDAUTIM
          MOVE      USERID,OPDAWEBU
.
          CALL      UPOPDEA1
.
          PACK      CASEKEYZ,OPDAHOSP,OPDADATE,OPDATIME,OPDACLIN,OPDASTAT:
                             OPDACASE
.
          PACK      KEY22,CASEKEYZ,SP70
          CALL      RDOPSES1
          BRANCH    OVRCD,UPDDAY95
.
          MOVE      OPSEDATE,OPSEACDE
.
. If DATEFLAG=1 then surgery ends on next day else on same day.
.
          MATCH     "1",DATEFLAG
          IF        @EQUAL
            CALL      NXTDAT00
          ENDIF
          CALL      UPOPSES1
.
          IF        RECOPMIN=ONE
            CALL      ROPMIN00              * Recalculate Actual Op Minutes.
          ENDIF
.
          PROC      PMSCURTH           * Update patient header theatre status
.
          MOVE      ZERO,EXIT
          GOTO      UPDDAY99
.
UPDDAY90  MOVE      "Surgery start time is before previous end time",ERRORDSC
          MOVE      "204",ERRORNUM
          CALL      EROR0000
          MOVE      ONE,EXIT
          GOTO      UPDDAY99
.
UPDDAY91  MOVE      "Record Not Found on oprsrgaf",ERRORDSC
          MOVE      "204",ERRORNUM
          CALL      EROR0000
          MOVE      ONE,EXIT
          GOTO      UPDDAY99
.
UPDDAY92  MOVE      "Record Locked on oprsrgaf",ERRORDSC
          MOVE      "204",ERRORNUM
          CALL      EROR0000
          MOVE      ONE,EXIT
          GOTO      UPDDAY99
.
UPDDAY93  MOVE      "Previous end time required",ERRORDSC
          MOVE      "204",ERRORNUM
          CALL      EROR0000
          MOVE      ONE,EXIT
          GOTO      UPDDAY99
.
UPDDAY94  MOVE      "Record Not Found on oprardaf",ERRORDSC
          MOVE      "204",ERRORNUM
          CALL      EROR0000
          MOVE      ONE,EXIT
          GOTO      UPDDAY99
.
UPDDAY95  MOVE      "Record Not Found on oprsesaf",ERRORDSC
          MOVE      "204",ERRORNUM
          CALL      EROR0000
          MOVE      ONE,EXIT
          GOTO      UPDDAY99
.
UPDDAY99  RETURN
+
.-------------------------------------------------------------------------
. UPMMB000 - Update patmmbsf Start/end times
.-------------------------------------------------------------------------
UPMMB000  MOVE      ZERO,TIMEDONE
.                                           * restore Opr Arrival/Recovery times
          READ      CONTROLF,FORTY2;*235,OPCNFTIM,*237,OPCNTTIM
          PACK      KEY10,OPDAUNIQ,SP70
          CALL      RDOPARD1                * Read Arrival/Departure table
          BRANCH    OVRCD,UPMMB999
.
          CALL      RCVT0000                * determine time in recovery
.
.                                           * read thru "patmmbsf" MBS Items
          PACK      KEY11,ADMISSNO,SP70
          CALL      RDSMMBS1
UPMMB010  CALL      RDKMMBS1
          BRANCH    OVRCD,UPMMB999
.
          MATCH     ADMISSNO,DMMADMN
          GOTO      UPMMB999 IF NOT EQUAL

          MATCH     PTMMOPID,OPDAUNIQ       * Same unique number      *I-224277
          GOTO      UPMMB010 IF NOT EQUAL                             *I-224277
.
.                                           * set Start Time
          LOAD      DIM5,OPCNFTIM,OPARTCAL,OPARATIM,OPARANAP,OPARANAS:
                                  OPSGTIPS,OPSGTISS,OPSGTISE,OPARANAE:
                                  OPSGTIDR,OPARTIRF,OPARTIRB,OPARTIRD:
                                  OPARTIDP,OPARTETC
          MATCH     MMSTIM,DIM5                               * start *C-224277
          GOTO      UPMMB020 IF EQUAL
          MOVE      DIM5,MMSTIM
          MOVE      ONE,TIMEDONE                              * end   *C-224277
.                                           * set End Time
UPMMB020  LOAD      DIM5,OPCNTTIM,OPARTCAL,OPARATIM,OPARANAP,OPARANAS:
                                    OPSGTIPS,OPSGTISS,OPSGTISE,OPARANAE:
                                    OPSGTIDR,OPARTIRF,OPARTIRB,OPARTIRD:
                                    OPARTIDP,OPARTETC
          MATCH     MMETIM,DIM5                               * start *C-224277
          GOTO      UPMMB030 IF EQUAL
          MOVE      DIM5,MMETIM
          MOVE      ONE,TIMEDONE                              * end   *C-224277
.
UPMMB030  IF        TIMEDONE = 1
            CALL      UPMMBS1
          ENDIF
.
          MOVE      ZERO,TIMEDONE
          GOTO      UPMMB010
.
UPMMB999  RETURN
+
.*****************************************************************************
.*                                MVALEN00         Called by:                *
.*                                                                           *
.*****************************************************************************
.
MVALEN00  MOVE      PV101001,ALENCLIN            * clinic type
          MOVE      BOOKNUMB,ALENLINK            * linked O/P visit number
          MOVE      PV100901,ALENHCP             * health care provider
          MOVE      PV102001,ALENCOMP            * claim code
          MOVE      ALENC005,ALENSDAT            * contact date
          MOVE      ALENC006,ALENSTIM            * contact time
.
          PACK      FIRSTDAT,OBADATE,SP70
          MOVE      SEENTIME,DIM5                * CAR 309716
          REP       ": ",DIM5
          SQUEEZE   DIM5
          PACK      FIRSTIME,DIM5,SP70
          PACK      LASTDATE,ALENC005,SP70
          MOVE      ALENC006,DIM5
          REP       ": ",DIM5
          SQUEEZE   DIM5
          PACK      LASTTIME,DIM5,SP70
          CALL      TIMEDIFF
          MOVE      CALCTIME,ALENDIUN            * direct units (min)
.
          MOVE      PV200701,ALENUC37            * client present status
          MOVE      ROL01001,ALENUC38            * delivery mode
          MOVE      PR100301,ALENUC34            * contact purpose
          MOVE      PV100301,ALENUC40            * delivery setting
          MOVE      PR100601,ALENUC35            * session type
          MOVE      ZXV05001,ALENUC33            * event program
          MOVE      ZXV05101,ALENSERV            * occasion of service
MVALEN99  RETURN
+
.*****************************************************************************
.*                             USIMB000            Called by: PP030000       *
.*        Get the initial patmmbaf items on file for patient/unique id       *
.*****************************************************************************
.
USIMB000  MOVE      ZERO,TOTMMBS                 * initialise MBS count
          MOVE      ZERO,CCITE2CN
.
          PACK      KEY11,OPDAADMN,SP10
          CALL      RDSMMBS1                     * posn before visit number
USIMB100  CALL      RDKMMBS1                     * read next record
          BRANCH    OVRCD,USIMB900               * eof - finished
.
          MATCH     OPDAADMN,MMADMN              * same visit still ?
          GOTO      USIMB900 IF NOT EQUAL        * no - finished
.
          MATCH     PTMMOPID,OPDAUNIQ            * same theatre unique id ?
          GOTO      USIMB100 IF NOT EQUAL        * no - get next record
.
          MATCH     MMDATE,OPDADATE              * same session date ?
          GOTO      USIMB100 IF NOT EQUAL        * no - get next record
.
          PACK      KEY14,OPDAUNIQ,SP20
          CALL      RSOPPMB1                     * posn before unique id
USIMB200  CALL      RKOPPMB1                     * read next record
          BRANCH    OVRCD,USIMB100               * eof - get next patmmbsf rec.
.
          MATCH     OPPMUNID,OPDAUNIQ            * same unique number still ?
          GOTO      USIMB100 IF NOT EQUAL        * no - get next patmmbsf rec.
.
          MOVE      OPPMCMBS,KEY9
          MATCH     KEY9,MMCODE                  * same CMBS code ?
          GOTO      USIMB200 IF NOT EQUAL        * no - get next record
.
          MATCH     SP4,OPPMSERV                 * blank quantity ?
          IF        @EQUAL
            MOVE      "   1",OPPMSERV            * yes - default to "1"
          ENDIF
.
          ADD       ONE,CCITE2CN                 * increment CMBS item count
          PACK      INITMMBS[CCITE2CN],MMADMN,MMRECN
          GOTO      USIMB100
.
USIMB900  MOVE      CCITE2CN,TOTMMBS
.
USIMB999  RETURN
+
.*****************************************************************************
.*                                USGIM000      Called by : PP030000         *
.*        Locate the existing item records for the MBS codes                 *
.*****************************************************************************
.
.>>>>>   oprpmbaf CMBS items are only entered from theatre (usage), not
.        from billing, so we need to ignore any items which are not on oprpmbaf.
.        An item on patdtraf and on oprpmbaf has already been invoiced.
.
.        INITMMBS and INITDTRA are only being cleared after the fact and only
.        those populated elements are cleared.  We can change the clear to be
.        at the start and get rid of the INITDTRA count as long as we change
.        code to check for a blank array element which indicates we have
.        processed all
.
.
.
USGIM000  MOVE      ZERO,TOTDTRA                 * initialise total dtr recs.
          MOVE      ZERO,CCITE2CN                * init. count for DTR items
          MOVE      ONE,INVOICED                 * set flag for no invoice
.
          CALL      GSES0000                     * get current session
.
.         Loop through patdtraf to see if there are any CMBS items already
.         invoiced
.
          PACK      KEY18,OPDAADMN,TWO,SP20
          CALL      RDSDTRN3                     * posn before visit #
USGIM100  CALL      RDKDTRN3                     * read next record
          BRANCH    OVRCD,USGIM500               * eof - finished loop
.
          MATCH     TADMNO,OPDAADMN              * same visit still ?
          GOTO      USGIM500 IF NOT EQUAL        * no - finished loop
.
          COMPARE   TWO,TRECTYPE                 * theatre record still ?
          GOTO      USGIM500 IF NOT EQUAL        * no - finished loop
.
.         Ignore cancelled records
.
          MATCH     "1",PTDTCRST                 * fully credited ?
          GOTO      USGIM100 IF EQUAL            * yes - ignore record
.
          MATCH     "2",PTDTCRST                 * credit by item ?
          GOTO      USGIM100 IF EQUAL            * yes - ignore record
.
.         Check if the session date matches
.
          PACK      KEY8,TFCENT,TFYEAR,TFMONTH,TFDAY
          REP       " 0",KEY8
          MATCH     KEY8,OPDADATE                * same session date ?
          GOTO      USGIM100 IF NOT EQUAL        * no - ignore record
.
          MATCH     SP9,TITEMNO                  * blank item number ?
          GOTO      USGIM100 IF EQUAL            * no - ignore record
.
.         Check if the current DTR item code matches any of the usage codes
.
          MATCH     SP70,PTDTPMBS                * blank oprpmbaf team/counter ?
          GOTO      USGIM200 IF EQUAL            * yes - 
.
.         There should be a matching oprpmbaf record, so read it
.
          PACK      KEY23,TITEMNO,OPDAUNIQ,PTDTTMNO,PTDTPMBS
          CALL      RDOPPMB2
          IF        OVRCD = 0
            MOVE      PTDTTMNO,TEAMNUMB
            MOVE      PTDTPMBS,OPPMB002
            MOVE      OPPMCMBS,PROVITEM             * save CMBS item code
            GOTO      USGIM320
          ENDIF
.
.         old records may not have ptdtpmbs populated, so....
.         The team/counter field is blank so loop through oprpmbaf to see
.         if there is a matching CMBS item
.
USGIM200  PACK      KEY14,OPDAUNIQ,SP20
          CALL      RSOPPMB1                     * posn before theatre unique id
USGIM300  CALL      RKOPPMB1                     * read next record
          BRANCH    OVRCD,USGIM100               * eof -get next patdtraf record
.
          MATCH     OPPMUNID,OPDAUNIQ            * same theatre unique id ?
          GOTO      USGIM100 IF NOT EQUAL        * no - get next patdtraf record
.
          MOVE      OPPMCMBS,PROVITEM            * save CMBS item code
          MATCH     PROVITEM,TITEMNO             * same CMBS item code ?
          GOTO      USGIM300 IF NOT EQUAL        * no - get next oprpmbaf rec.
.
.         We've found a matching oprpmbaf record with the same CMBS item code,
.         so this must have been invoiced, so set the invoice flag
.
USGIM320  MOVE      ZERO,INVOICED                * set as invoiced
.>>>>>>   no need to go further as flag is set already
.>>>>>>   GOTO      USGIM100                     * get next patdtraf record
.
.         Check with pmsmtiaf for items not yet invoiced and load these into
.         array ready for billing later on
.
USGIM500  PACK      KEY15,OPDAADMN,TWO,SP20
          CALL      RSPMMTI2                     * posn before visit #
USGIM600  CALL      RKPMMTI2                     * read next record
          BRANCH    OVRCD,USGIM900               * eof - finished loop
.
          MATCH     PMMIVISN,OPDAADMN            * same visit still ?
          GOTO      USGIM900 IF NOT EQUAL        * no - finished loop
.
          MATCH     "2",PMMIRTYP                 * theatre item still ?
          GOTO      USGIM900 IF NOT EQUAL        * no - finished loop
.
          MATCH     PMMIUNIQ,OPDAUNIQ            * same theatre unique number ?
          GOTO      USGIM600 IF NOT EQUAL        * no - get next pmsmtiaf record
.
.         Check if the session date matches
.
          MATCH     PMMITDAT,OPDADATE            * same session date ?
          GOTO      USGIM600 IF NOT EQUAL        * no - get next pmsmtiaf record
.
          MATCH     SP9,PMMIITEM                 * blank CMBS item code ?
          GOTO      USGIM600 IF EQUAL            * yes -get next pmsmtiaf record
.
.         Check if the current item code matches any of the usage codes
.
          MATCH     SP70,PMMIPMBS                * team/counter blank ?
          GOTO      USGIM700 IF EQUAL            * yes - 
.
.         The team/counter field is populated, so use this read the oprpmbaf
.         record
.
          PACK      KEY23,PMMIITEM,PMMIUNIQ,PMMITMNO,PMMIPMBS
          CALL      RDOPPMB2
          IF        OVRCD = 0
            MOVE      PMMITMNO,TEAMNUMB
            MOVE      PMMIPMBS,OPPMB002
            MOVE      OPPMCMBS,PROVITEM          * save CMBS item code
            GOTO      USGIM820
          ENDIF
.
.         The pmsmtiaf team/counter is blank, so loop through the oprpmbaf
.         file 
.
USGIM700  PACK      KEY14,OPDAUNIQ,SP20
          CALL      RSOPPMB1                     * posn before unique id
USGIM800  CALL      RKOPPMB1                     * read next record
          BRANCH    OVRCD,USGIM600               * eof - get next pmsmtiaf rec
.
          MATCH     OPPMUNID,OPDAUNIQ            * same theatre unique id
          GOTO      USGIM600 IF NOT EQUAL        * no - get next pmsmtiaf rec
.
          MOVE      OPPMCMBS,PROVITEM            * save CMBS item code
          MATCH     PROVITEM,PMMIITEM            * same CMBS item code ?
          GOTO      USGIM800 IF NOT EQUAL        * no - get next oprpmbaf rec
.
USGIM820  MATCH     SP4,OPPMSERV                 * blank quantity ?
          IF        @EQUAL
            MOVE      "   1",OPPMSERV            * yes - default to "1"
          ENDIF
.
.         One of the MBS codes matches item from the Misc.theare item file
.
          ADD       ONE,CCITE2CN
          MOVE      "00000000",TREF
          PACK      INITDTR[CCITE2CN],PMMIVISN,TREF,PMMITRAN
          GOTO      USGIM600
.
USGIM900  MOVE      CCITE2CN,TOTDTRA
.
USGIM999  RETURN
+
.*****************************************************************************
.*                            GSES0000             Called by: USGIM000       *
.*                       Setup current session                               *
.*     Checking how many different unique id's (cases) for the visit         *
.*****************************************************************************
.
GSES0000  MOVE      OPDAUNIQ,UNIQUEKY
.
          MOVE      ZERO,CURCASE                 * initialise session
          MOVE      SP70,KEY10
.
          PACK      KEY31,PVIBILL,SP70
          CALL      RSOPDEA2                     * position before visit #
GSES1000  CALL      RKOPDEA2                     * read next record
          BRANCH    OVRCD,GSES9000               * eof - finished loop
.
          MATCH     PVIBILL,OPDAADMN             * same visit still ?
          GOTO      GSES9000 IF NOT EQUAL        * no - finished loop
.
          MATCH     SP70,KEY10
          IF        !@EQUAL
            MATCH     KEY10,OPDAUNIQ
            GOTO      GSES1000 IF EQUAL     * get next record
          ENDIF
.
          MATCH     UNIQUEKY,OPDAUNIQ            * same theatre unique id ?
          GOTO      GSES9000 IF EQUAL            * yes - finished loop
.
          ADD       ONE,CURCASE                  * no - increment case count
          MOVE      OPDAUNIQ,KEY10               * save theatre unique id
          GOTO      GSES1000                     * get next oprdetaf record
.
GSES9000  ADD       ONE,CURCASE                  * increment case count
.
.         Reposition back to the oprdetaf record for the Unique Theatre Id
.
          MOVE      UNIQUEKY,KEY10
          CALL      RDOPDEA3
.
GSES9999  RETURN
+
.******************************************************************************
.*         Setup patients MBS account (only if an inpatient) - (oprpmbaf)     *
.******************************************************************************
.
USMBS000  COMPARE   ONE,OPCNCHMB                 * bill MBS Items ?
          GOTO      USMBS999 IF NOT EQUAL        * no - finished
.
.>>>>>>   VPV10000 routine contains read on admission file
.         and already validates ASTAT
.         MOVE      OPDAADMN,KEY8
.         CALL      RDMISS1                      * admission record on file ?
.         BRANCH    OVRCD,USMBS999               * no - finished
.         BRANCH    ASTAT,USMBS999               * ignore if preadmission
.
          CALL      CLPATDSC
          IF        ASTAT = 3
            MOVE      PVIBILL,KEY8
            CALL      RDDSCH1                    * read the discharge record
          ENDIF
.
          IF        IBCNMHOS = 1
            CALL      CLPMSVX1
            MOVE      OPDAADMN,KEY8
            CALL      RDPMVX11
.
            CALL      CLPATHSP
            MOVE      PMVXMHOS,KEY3
            CALL      RDPTHSP1
          ENDIF
.
          BRANCH    INVOICED,USMBS100            * all un-invoiced items
.
.>>>>>>>  Ignore this for the time being as we have no way of handling
.         this in a HL7 message
.
.         PACK      WEBTITLE,SP70
.         APPEND    "Warning: Patient has been invoiced,",WEBTITLE
.         APPEND    " MBS item won't be posted to Billing",WEBTITLE
.         RESET     WEBTITLE
.         CALL      WEBERR00
.         MOVE      ONE,EXIT
          GOTO      USMBS999
.
USMBS100  IF        IBCNMHOS = 1
            MATCH     "1",PTHSTFEE               * using theatre fees file ?
            GOTO      USMBS800 IF NOT EQUAL      * no
          ELSE
            COMPARE   "1",PTCNTFEE               * using theatre fees file ?
            GOTO      USMBS800 IF NOT EQUAL      * no
          ENDIF
.
.         Get theatre fees for MBS item, based on the most expensive item amount
.
          MOVE      ZERO,MBSCNT                  * initialise MBS count
.>>>>>>   below already happened in CREA0000
.>>>>>>   CALL      CTEMP000                     * create temp file
          MOVE      " 1",UNIQUE
.
.         Load the MBS from "oprpmbs" file and write to a tempfile with
.         index on the amount
.
USMBS200  PACK      KEY14,OPDAUNIQ,SP70
          CALL      RSOPPMB1                     * posn before theatre unique id
          CALL      RKOPPMB1                     * read next record
          BRANCH    OVRCD,USMBS500               * eof - finished loop
.
          MATCH     OPPMUNID,OPDAUNIQ            * same unique id still ?
          GOTO      USMBS500 IF NOT EQUAL        * no - finished loop
.
          MATCH     SP4,OPPMSERV
          IF        @EQUAL
            MOVE      "   1",OPPMSERV            * default to "1"
          ENDIF
.
          MOVE      ZERO,AMOUNT                  * init. total theatre charge
          MOVE      OPPMCMBS,PROVITEM            * save CMBS item
          MOVE      OPPMREFN,ITEMREFN            * save CMBS item reference no.
.
          MOVE      OPPMCMBS,KEY9
          PACK      KEY17,OPPMCMBS,OPDADATE,SP70
          CALL      PATITMRD                     * CMBS item on file ?
          BRANCH    OVRCD,USMBS300               * no - ??
.
          MOVE      OPDADATE,CEFFDATE            * load effective date
          MOVE      IAMT,DIAMT                   * load item charge
          CALL      GETTHR00                     * get theatre fee
          BRANCH    OVRCD,USMBS300               *
.
          MOVE      TFPAT1,AMOUNT           * patient portion of charge
          ADD       TFHF1,AMOUNT            * rebate portion of charge
.
.>>>>>>>  Fix temp file vars loading and naming
.
USMBS300  CALL      WRTEMP4
          MOVE      UNIQUE,FORM3            * increment unique
          ADD       ONE,FORM3
          MOVE      FORM3,UNIQUE
.
          PACK      KEY14,OPDAUNIQ,OPPMTMNO,OPPMCNTR
          CALL      DEOPPMB1                * delete record from oprpmbaf
          GOTO      USMBS200
.
USMBS500  CALL      USCHP000                * charge patient
.>>>>>>    temp file is cleared by CTMP0000 for every message that
.          is processed, so no need to clear here
.         CALL      DTEMP000                * delete tempfile
          GOTO      USMBS900
.
.         Use MBS Fee amount for charging
.
USMBS800  CALL      USDIM000                * delete non-invoiced item records
.
          PACK      KEY14,OPDAUNIQ,TEAMNUMB,SP20
          CALL      RSOPPMB1                     * posn before unique id/team
USMBS850  CALL      RKOPPMB1                     * read next record
          BRANCH    OVRCD,USMBS900               * eof - finished
.
          MATCH     OPPMUNID,OPDAUNIQ            * same unique id still ?
          GOTO      USMBS900 IF NOT EQUAL        * no - finished
.
          MATCH     OPPMTMNO,TEAMNUMB            * same team still ?
          GOTO      USMBS900 IF NOT EQUAL        * no - finished
.
          MOVE      OPPMCMBS,PROVITEM
          MOVE      OPPMREFN,ITEMREFN
          MOVE      OPPMCMBS,KEY9
          PACK      KEY17,OPPMCMBS,OPDADATE,SP70
          CALL      PATITMRD                     * item on file ?
          BRANCH    OVRCD,USMBS850               * no - 
.
          IF        PTITGSTA=2
            MOVE      OPPMGSTA,PTITGSTA
            MOVE      OPPMGSTC,PTITGSTC
          ENDIF
.
          MATCH     SP4,OPPMSERV
          IF        @EQUAL
            MOVE      "   1",OPPMSERV            * default to "1"
          ENDIF
.
          MOVE      ZERO,TFPAT1
          MOVE      ZERO,TFHF1
          IF        CMBSFEE = 1
            MOVE      QIAMT,TFPAT1
          ENDIF
.
          MOVE      IDESC,PMMIDESC
          MOVE      SP70,PMMISUNQ
          CALL      USRAT000                * calculate rate for item & write
          GOTO      USMBS850
.
USMBS900  PACK      KEY16,OPDADATE,OPSGTISS
          PROC      AUTOATYP                * automatic update admission type
          UNPACK    KEY16,OPDADATE,OPSGTISS
.
USMBS999  RETURN
+
.*************************************************************************
.*                           GETTHR00                                    *
.*           Sub-routine to get the theatre fee amount                   *
.*************************************************************************
.
GETTHR00  MOVE      SP1,DIM1A                    * init. daycase rate flag
          MATCH     ADATE,DDATE                  * sameday admission ?
          IF        @EQUAL
            MOVE      ANSD,DIM1A                 * yes - set flag for daycase
          ENDIF
          MOVE      CEFFDATE,TSRVDATE            * Service date
.
.         Determine if we are using MBS fee or theatre bandings
.
          PACK      KEY9,ACLAIM,AFUNDH
          CALL      GETCNEFF               * Get Contract Effective From
          BRANCH    EXIT,GETTHR90
.
          LOAD      CEFFDATE,CNTRCEFR,ADATE,DDATE
.
.         If Contract Effective From is 'For Discharges From', Discharged date
.         is blank and TCINDC19=D, default Effective date to Current date
.
          COMPARE   TWO,CNTRCEFR
          GOTO      GETTHR80 IF NOT EQUAL
.
          MATCH     SP70,DDATE
          GOTO      GETTHR80 IF NOT EQUAL
.
          PACK      KEY5,ANSC,ANSL,ACLAIM
          CALL      RDCODE1
          BRANCH    OVRCD,GETTHR80
.
          MATCH     ANSD,TCINDC19
          IF        @EQUAL
            PACK      CEFFDATE,CCC,CYY,CMM,CDD
            REP       " 0",CEFFDATE
          ENDIF
.
GETTHR80  PACK      KEY18,ACLAIM,AFUNDH,AFNDTB,DIM1A
          CALL      GETTFEES                * Get theatre amount
          GOTO      GETTHR99
.
.
GETTHR90  MOVE      ONE,OVRCD
.
GETTHR99  RETURN
+
.*****************************************************************************
.*                              GETCOD00                                     *
.*                      Get category/code record                             *
.* Requires: CATEGORY - patcodes category                                    *
.*           CODE     - patcodes category/code                               *
.* Returns:  populated patcodes variables                                    *
.*****************************************************************************
.
GETCOD00  CALL      CLPATCOD
.
          MATCH     SP2,CATEGORY                 * blank category ?
          GOTO      GETCOD99 IF EQUAL            * yes - finished
.
          MATCH     SP3,CODE                     * blank code ?
          GOTO      GETCOD99 IF EQUAL            * yes - finished
.
          PACK      KEY5,CATEGORY,CODE
          CALL      RDCODE1                      * get cat/code record
.
GETCOD99  RETURN
+
.******************************************************************************
.*                              GETMBS00                                      *
.*                            Get Theatre MBS Details                         *
.*       Get the first CMBS item from either oprdetaf or oprpmbaf, recording  *
.*       the source.                                                          *
.*       Also determine the total number of CMBS items on oprpmsaf for the    *
.*       theatre unique id.                                                   *
.* Requires: Valid oprdetaf read for Unique Theatre ID                        *
.*           Team Number                                                      *
.* Returns: MBSCOUNT - Last CMBS Item count for unique id/team                *
.*          MBSFCODE - First CMBS Item code for unique id/team                *
.*          PMBSFLAG - Provisional CMBS Item flag                             *
.*                      0 = Prov. CMBS item from oprdetaf                     *
.*                      1 = Prov. CMBS item from oprpmbaf                     *
.******************************************************************************
.
GETMBS00  MOVE      ZERO,MBSTOTAL                * initialise variables
          MOVE      ZERO,MBSCOUNT
          MOVE      SP70,MBSFCODE
          MOVE      ZERO,PMBSFLAG
.
.         Check if there is a provisional CMBS item in oprdetaf for our
.         theatre unique id and if there isn't, then set the flag to indicate
.         we are using the provisional CMBS from oprpmbaf
.
          MATCH     SP70,OPDAPROV                * blank oprdetaf Prov. CMBS ?
          IF        @EQUAL
            MOVE      ONE,PMBSFLAG               * yes - prov cmbs from oprpmbaf
          ENDIF
.
          MOVE      OPDAPROV,MBSFCODE            * no -save first CMBS item code
.
.         Now loop through the oprpmbaf file looking for records matching
.         our theatre unique id/team
.
          PACK      KEY14,OPDAUNIQ,TEAMNUMB,SP70
          CALL      RSOPPMB1                     * posn before unique id/team
GETMBS10  CALL      RKOPPMB1                     * read next record
          BRANCH    OVRCD,GETMBS99               * eof - finished
.
          MATCH     OPPMUNID,OPDAUNIQ            * same theatre unique id still?
          GOTO      GETMBS99 IF NOT EQUAL        * no - finished
.
          MATCH     OPPMTMNO,TEAMNUMB            * same team still ?
          GOTO      GETMBS99 IF NOT EQUAL        * no - finished
.
          ADD       ONE,MBSTOTAL                 * increment CMBS total
.
          MATCH     OPDAPROV,OPPMCMBS
          IF        @EQUAL
            MOVE      ONE,PMBSFLAG               * prov. CMBS from oprpmbaf
          ENDIF
.
.         If this is the first CMBS item to be found, then store the code
.         if it hasn't already been populated from oprdetaf
.
          IF        MBSTOTAL = 1
            MOVE      OPPMCNTR,MBSCOUNT          * save first CMBS item count
.
            MATCH     SP70,MBSFCODE              * blank first CMBS item code ?
            GOTO      GETMBS10 IF NOT EQUAL      * no - get next record
.
            MOVE      OPPMCMBS,MBSFCODE          * save first CMBS Item code
          ELSE
            IF        OPPMCNTR > MBSCOUNT
              MOVE      OPPMCNTR,MBSCOUNT        * save last CMBS item count
            ENDIF
          ENDIF
.
          GOTO      GETMBS10                     * get next oprmbsaf record
.
GETMBS99  RETURN
+
.*****************************************************************************
.*                               USCHP000                                    *
.*        Charge patient only if no invoices raised yet                      *
.*****************************************************************************
.         Check if the patient is discharged. This is necessary, as we
.         need to determine if the patient is a day case patient.
.
.         Loop over the temp file for all MBS items entered
.
USCHP000  MOVE      ZERO,MBSCNT                  * initialize op count
.
          CALL      USDIM000                     * delete non-invoiced item recs
.
          MOVE      TILDA35,KEY25
          CALL      RSTEMP4                      * posn at eof
USCHP100  CALL      RPTEMP4                      * read previous record
          BRANCH    OVRCD,USCHP999               * eof - finished loop
.>>>>>>>    previously reading in DIM1B instead of OPPMTMNO - different to
.           WRTEMP4 and RKTEMP4
          ADD       ONE,MBSCNT                   * update count number
.
.         Check in theatre fee for the charge
.
          MOVE      SP70,PMMISUNQ       .>>> where does this get used ????
          MOVE      PROVITEM,KEY9
          PACK      KEY17,PROVITEM,OPDADATE,SP70
          CALL      PATITMRD                     * item on file ?
          BRANCH    OVRCD,USCHP200               * no - ???
.
.         If GST is applicable, then load the ?????
.
          IF        PTITGSTA = 2
            MOVE      OPPMGSTA,PTITGSTA
            MOVE      OPPMGSTC,PTITGSTC
          ENDIF
.
          MOVE      OPDADATE,CEFFDATE
          CALL      GETTHR00                     * get theatre fee
          IF        OVRCD = 0
            IF        HFBAND <> 0
              UNPACK    DIM5,PMMISUNQ       .>>>>* Theatre banding ?????
            ENDIF
          ENDIF
.
          MOVE      IDESC,PMMIDESC
          MOVE      DIM1B,OPPMTMNO
          MOVE      UNIQUE,DOPPMCNT
          CALL      USRAT000                     * calc. rate for item & write
.
.         Re-arrange the MBS codes to be posted from highest to lowest charge
.
USCHP200  MOVE      OPDAUNIQ,OPPMUNID
          MOVE      DIM1B,OPPMTMNO
          MOVE      UNIQUE,OPPMCNTR
          MOVE      PROVITEM,OPPMCMBS
          MOVE      ITEMREFN,OPPMREFN
.
          PACK      KEY14,OPPMUNID,OPPMTMNO,OPPMCNTR,SP20
          CALL      RAOPPMB1              * Writing To Patient CMBS File
          IF        OVRCD = 1
            CALL      WROPPMB1
          ENDIF
.
          GOTO      USCHP100
.
USCHP999  RETURN
+
.*****************************************************************************
.*                             USRAT000            Called by : USMBS000      *
.*                                                             USCHP000      *
.*        Calculate charge rate for an item.                                 *
.*        Para's  : PROVITEM      the MBS code                               *
.*                  MBSCNT        which number the code is                   *
.*****************************************************************************
.
USRAT000  MOVE      ZERO,PMMIAMTT                * initialise totals
          MOVE      ZERO,PMMIAMTP
          MOVE      ZERO,PMMIRBAT
.
.         Check if prov item will be billed
.
          IF        CHRGPMBS = 0
            MATCH     PROVITEM,MBSFCODE
            GOTO      USRAT999 IF EQUAL
          ENDIF
.
.         If this the claim code is for overseas and to use MBS amount
.
          IF        CMBSFEE = 1
            MOVE      TFPAT1,PMMIAMTP
            MOVE      TFHF1,PMMIRBAT
            GOTO      USRAT200
          ENDIF
.
          IF        IBCNMHOS = 1
            MATCH     "1",PTHSTFEE
            GOTO      USRAT100 IF EQUAL
          ELSE
            COMPARE   ONE,PTCNTFEE
            GOTO      USRAT100 IF EQUAL
          ENDIF
.
          MOVE      ZERO,PMMIAMTP                * if theatre fees is not used
          MOVE      ZERO,PMMIRBAT                * zero charges.
          GOTO      USRAT200
.
.         Using Theatre Fee
.
USRAT100  MOVE      ZERO,FORM12P2
          LOAD      FORM12P2,MBSCNT,TFPAT1,TFPAT2,TFPAT3,TFPAT4,TFPAT5,TFPAT6
          MOVE      FORM12P2,PMMIAMTP            * set up patient portion
          MOVE      ZERO,FORM12P2
          LOAD      FORM12P2,MBSCNT,TFHF1,TFHF2,TFHF3,TFHF4,TFHF5,TFHF6
          MOVE      FORM12P2,PMMIRBAT            * set up rebate portion
.
USRAT200  MOVE      PMMIAMTP,PMMIAMTT
          ADD       PMMIRBAT,PMMIAMTT            * set up total
.
.         Write a record to Misc.Theatre item file
.
          MOVE      OPDAADMN,PMMIVISN
          MOVE      AURNO,PMMIURNO
          MOVE      " 3",PMMISYST
          MOVE      PROVITEM,PMMIITEM
          MOVE      SP70,PMMIDES2
          MOVE      OPDADATE,PMMITDAT
          MOVE      TWO,PMMIRTYP
          PACK      PMMIREFN,ITEMREFN,SP70       * 0846231
          MOVE      ZERO,PMMIAMTG
          MOVE      ZERO,PMMIAMTH
          MOVE      SP10,PMMITDOC
          MOVE      OPDACLIN,PMMIODOC
          MOVE      ONE,PMMISERV
          PACK      OPPMSERV,OPPMSERV,SP70    .>>>>>> ?????
.
          MATCH     SP4,OPPMSERV
          IF        !@EQUAL
            MOVE      ZERO,F4
            MOVE      OPPMSERV,F4
            MOVE      F4,PMMISERV
          ENDIF
.
          IF        PMMISERV = 0
            MOVE      ONE,PMMISERV
          ENDIF
.
          MULT      PMMISERV,PMMIAMTT
.
          MOVE      CURCASE,FORM2           * get as current case as form2
          MOVE      FORM2,PMMISESS          * set session id as the case number
.
          MOVE      IMISGRP,PMMIMGRP
          MOVE      SP10,PMMIBTCH
          MOVE      ZERO,PMMIINVN
          MOVE      ZERO,PMMIGSTM
          MOVE      PTITGSTA,PMMIGSTA
          MOVE      PTITGSTC,PMMIGSTC
          MOVE      "HL7RECVR  ",PMMIWUSR
          MOVE      "0",PMMIMVBR
          MOVE      SP70,PMMISPAR
.                                                             * start *I-206410
USRAT300  CALL      CLOPRSRG
          PACK      KEY11,OPDAUNIQ,OPPMTMNO,SP70
          CALL      RDOPSRG1                * get opr surgical start/end time
          PACK      PMMISVTM,OPSGTISS,SP8   * default - surgical start time
.
          MOVE      OPDAUNIQ,KEY10
          CALL      RDOPARD1                * Reading Arrival/Departure table
          BRANCH    OVRCD,USRAT400
.                                           * load Start time from selected
          CALL      RCVT0000                * determine time in recovery
.
          LOAD      PMMISVTM,OPCNFTIM,OPARTCAL,OPARATIM,OPARANAP,OPARANAS:
                                      OPSGTIPS,OPSGTISS,OPSGTISE,OPARANAE:
                                      OPSGTIDR,OPARTIRF,OPARTIRB,OPARTIRD:
                                      OPARTIDP,OPARTETC        * end  *I-206410
.
.         Get last transaction number
.
USRAT400  MOVE      OPDAADMN,KEY8
          CALL      TRVISA1                 * get next transaction no. PVITRAN
.
          MOVE      PVITRAN,PMMITRAN
          MOVE      OPDAUNIQ,PMMIUNIQ
          PACK      KEY14,PMMIVISN,PMMITRAN
          MOVE      SP70,PMMICNTR
          MOVE      SP70,PMMIINCT
          MOVE      SP70,PMMISUBN
          MOVE      SP70,PMMIEDAD
          MOVE      SP1,PMMICCON
          MOVE      SP70,PMMIDUPD
          MOVE      SP70,PMMITUPD
          MOVE      SP70,PMMIWUSR
          CALL      IBACLOCK
          PACK      PMMIDTCR,CCC,CYY,CMM,CDD
          REP       " 0",PMMIDTCR
          MOVE      CTIMEIS,PMMITMCR
          MOVE      "HL7RECVR  ",PMMIIDCR
.
          PACK      PMMITMNO,OPPMTMNO,SP70
          PACK      PMMIPMBS,DOPPMCNT,SP70
          RJUSTIFY  PMMIPMBS
          MOVE      SP70,PMMIRBRS
          PACK      PMMIACOI,SP70       * After Care Override Indicator
          PACK      PMMIDSOV,SP70       * Duplicate Service Override
          PACK      PMMISTXT,SP70       * Service Text
          PACK      PMMILSPN,SP70       * Location Specific Practice No(LSPN)
          PACK      PMMIMPOV,SP70       * Multi Procedure Override
          PACK      PMMINMPT,SP70       * Number of Patients Seen
          PACK      PMMISDCD,SP70       * Self Deem Code (Cat Sd)
          PACK      PMMITDUR,SP70       * Time Duration (Mins)
          MOVE      SP70,PMMIDKSM       * Distance in kms
          PACK      PMMISPAR,SP70,SP70
          CALL      WRPMMTI1                * write a record
.
.>>>>>>>  Removed as only for oncology
.         CALL      MMBONC00
.
.         Add to invoice pending file if necessary
.
.         If Using the Invoice Pending File
.
          IF        PTCNIPEN = 0
            CALL      CUIP0000              * Check Inv.pending update flag
.
            MOVE      OPDAADMN,IPADMNO
            MOVE      THREE,IPSYSTM
            MOVE      SP70,IPSITE
.
            MOVE      SP70,PENDHOSP
            IF        IBCNMHOS=1
              MOVE      IPADMNO,KEY8
              CALL      RDPMVX11
              IF        OVRCD=0
                MOVE      PMVXMHOS,PENDHOSP         * Hospital ID
              ENDIF
            ENDIF
            MOVE      " 3",PENDSYST                 * Inpatient
.
            MOVE      PMMITDAT,PENDSDAT          * as at date
            MOVE      ADATE,PENDADAT             * admission date
            IF        ASTAT = 3
              MOVE      DDATE,PENDDDAT           * discharged date
            ELSE
              MOVE      SP70,PENDDDAT
            ENDIF
            MOVE      AFUNDH,PENDFUND
            MOVE      ACLAIM,PENDCLAM
            CALL      IPRH0000
            MOVE      SEVEN,PTIPRSTA
            MOVE      SP70,PTIPSVAR
.
.           Public hospital, check if there is Item amount
.
            IF        CHOSTYP = 1 & CFEETYP = 0
              COMPARE   ZERO,PMMIAMTT
              GOTO      USRAT999 IF EQUAL   * zero item amount
            ENDIF
.
            PACK      KEY8,IPADMNO,SP70
            CALL      RAIPEN1
            IF        OVRCD = 1
              CALL      WRIPEN1
            ELSE
              MATCH     SP100,KEY83
              IF        !@EQUAL
                UNPACK    KEY83,PTIPRHLD,PTIPRDES  * restore reason on hold inv.
              ENDIF
              CALL      UPIPEN1
            ENDIF
          ENDIF
.
USRAT999  RETURN
+
.*****************************************************************************
.*                               CUIP0000          Called by: USRAT000       *
.*                  Check Update invoice pending flag                        *
.*****************************************************************************
.
CUIP0000  MOVE      PVIBILL,KEY8
          CALL      RDIPEN1                      * visit on patipenf ?
          BRANCH    OVRCD,CUIP9100               * yes - finished
.
.         Check if the invoice is currently on hold
.
          MATCH     SP70,PTIPRHLD                * reason for hold blank ?
          GOTO      CUIP9100 IF EQUAL            * no - finished
.
          PACK      KEY5,CATrh,PTIPRHLD
          CALL      RDCODE1                      * code on file ?
          BRANCH    OVRCD,CUIP9100               * no - finished
.
          MATCH     "P",TCINDC2                  * patient hold invoice ?
          GOTO      CUIP9100 IF NOT EQUAL        * no - finished
.
          PACK      KEY83,PTIPRHLD,PTIPRDES      * save pat.reason on hold inv.
          GOTO      CUIP9999
.
.         Record not found so clear KEY
.
CUIP9100  MOVE      SP100,KEY83
.
CUIP9999  RETURN
+
.*****************************************************************************
.*                               USDIM000          Called by : USCHP000      *
.*                                                             USMBS000      *
.*        Delete all the item records for the MBS codes which were on        *
.*        file before change mode as long as none are invoiced.              *
.* Requires: TOTDTRA - number of >>>>>>  records                             *
.*****************************************************************************
.
USDIM000  MOVE      ZERO,FORM3                   * init. array record counter
.
          COMPARE   ZERO,TOTDTRA                 * any items to process ?
          GOTO      USDIM999 IF EQUAL            * no - finished
.
USDIM100  ADD       ONE,FORM3                    * incr. array record counter
          COMPARE   FORM3,TOTDTRA                * all elements processed ?
          GOTO      USDIM800 IF LESS             * yes - finished
.
          MOVE      INITDTR[FORM3],KEY22         * load the record key
          MATCH     SP30,KEY22                   * blank key ?
          GOTO      USDIM100 IF EQUAL            * yes - get next array element
.
.         Only delete items if they haven't been invoiced
.
          UNPACK    KEY22,KEY8,TREF,KEY6
          MATCH     "00000000",TREF              * invoiced item ?
          GOTO      USDIM100 IF NOT EQUAL        * yes - get next array element
.
          PACK      KEY14,KEY8,KEY6              * load visit #/transaction #
          CALL      RDPMMTI1                     * item record found ?
          BRANCH    OVRCD,USDIM100               * no - get next array element
.
          PACK      KEY14,PMMIVISN,PMMITRAN
          CALL      DEPMMTI1                     * delete un-invoiced item
          GOTO      USDIM100
.
.         Clear the array once all items are deleted
.
USDIM800  MOVE      ONE,INVOICED                 * set as none invoiced
          MOVE      TOTDTRA,FORM3                * set total count
          WHILE     FORM3 > 0
            MOVE      SP30,INITDTR[FORM3]        * clear array element
            SUB       ONE,FORM3                  * decrement count
          DO
.
USDIM999  RETURN
+
.*****************************************************************************
.*                               USMMB000          Called by: PP030000       *
.*           Save operations to PATMMBFD medical records file                *
.*  (allow for change mode in which new codes may have been added/deleted)   *
.*****************************************************************************
.
USMMB000  BRANCH    OPCNMREC,USMMB999            * dont update file
.
.         Have to now check if in hospital due to new parameter (opcnusge)
.>>>>>    ASTAT previously validated in VPV10000
.         BRANCH    ASTAT,USMMB999               * a pre-admission so dont write
.
.         Delete the initial MBS codes from PATMMBFD
.
          MOVE      ONE,FORM3                    * initialise array count
          WHILE     FORM3 <= TOTMMBS
            MOVE      INITMMBS[FORM3],KEY11
            CALL      DEMMBS1                    * delete record
            ADD       ONE,FORM3                  * incr. array count
          DO
.
.         Now check what MBS codes have been entered and write these to file
.
          MOVE      ZERO,MMRECN                  * initialise counter
          MOVE      ZERO,FORM3
          MOVE      OPDAADMN,MMADMN              * set Admission Number
.
          PACK      KEY14,OPDAUNIQ,SP70
          CALL      RSOPPMB1                     * posn before unique id
USMMB300  CALL      RKOPPMB1                     * read next oprpmbaf record
          BRANCH    OVRCD,USMMB995               * eof - finished oprpmbaf loop
.
          MATCH     OPPMUNID,OPDAUNIQ            * same unique id still ?
          GOTO      USMMB995 IF NOT EQUAL        * no - finished oprpmbaf loop
.
          MOVE      OPPMCMBS,KEY9
          PACK      KEY17,OPPMCMBS,OPDADATE,SP70
          CALL      PATITMRD                     * item on file ?
          IF        OVRCD = 1
            MOVE      SP70,IDESC                 * no - clear item description
          ENDIF
.
          MATCH     SP4,OPPMSERV                 * blank no. of services ?
          IF        @EQUAL
            MOVE      "   1",OPPMSERV            * yes - default to "1"
          ENDIF
.
.         Set up patmmbsf record variables
.
          MOVE      OPPMCMBS,MMCODE
          MOVE      OPDADATE,MMDATE
.
          CALL      CLOPRSRG                     * clear oprsrgaf records
          PACK      KEY11,OPDAUNIQ,OPPMTMNO
          CALL      RDOPSRG1                     * read oprsrgaf record
.
.         Load default values from oprsrgaf
.
          MOVE      OPSGTISS,MMSTIM
          MOVE      OPSGTISE,MMETIM
.
          MOVE      OPDAUNIQ,KEY10
          CALL      RDOPARD1                     * oprardaf record on file ?
          BRANCH    OVRCD,USMMB500               * no - 
.
          CALL      RCVT0000                     * determine time in recovery
.
.         Load Start time based on parameter
.
          LOAD      MMSTIM,OPCNFTIM,OPARTCAL,OPARATIM,OPARANAP,OPARANAS:
                                    OPSGTIPS,OPSGTISS,OPSGTISE,OPARANAE:
                                    OPSGTIDR,OPARTIRF,OPARTIRB,OPARTIRD:
                                    OPARTIDP,OPARTETC
.
.         Load End time based on parameter
.
          LOAD      MMETIM,OPCNTTIM,OPARTCAL,OPARATIM,OPARANAP,OPARANAS:
                                    OPSGTIPS,OPSGTISS,OPSGTISE,OPARANAE:
                                    OPSGTIDR,OPARTIRF,OPARTIRB,OPARTIRD:
                                    OPARTIDP,OPARTETC
.
USMMB500  MOVE      IDESC,PTMMDESC
          MOVE      OPDAUNIQ,PTMMOPID            * theatre unique no.  *I-207386
          MOVE      OPPMTMNO,PTMMTMNO            * theatre Team No.    *I-207386
          MOVE      SP70,MMSPARE
.
USMMB600  ADD       ONE,MMRECN                   * increment counter
.
          PACK      KEY11,MMADMN,MMRECN
          CALL      RDAMMBS1                     * record key on file already ?
          COMPARE   ZERO,OVRCD
          GOTO      USMMB600 IF EQUAL            * yes - get next counter
.
          CALL      WRMMBS1                      * write operation record
.
          CALL      WESE0000                     * update episode details
          GOTO      USMMB300                     * get next oprpmbaf record
.
.         Sort MBS items into the required order.
.
USMMB995  CALL      SRTMB000
.
USMMB999  RETURN
+
.******************************************************************************
.*                                 WESE0000                                   *
.*                Write/update wateseaf (episode details)                     *
.*  Check to see if there is a W/L record for this theatre procedure and if   *
.*  so, then the operation has been completed so remove the record for ESIS   *
.*                                                                            *
.* Requires: Valid read on oprdetaf record                                    *
.*           PTCNHDPS - State parameter                                       *
.******************************************************************************
.
WESE0000  COMPARE   THREE,PTCNHDPS               * Vic state ?
          GOTO      WESE9999 IF NOT EQUAL        * no - finished
.
          PACK      KEY19,OPDAURNO,OPDAPROC,OPDACONT
          CALL      RDTREA1                      * wattr1af record on file ?
          BRANCH    OVRCD,WESE9999               * no - finished
.
.         We have a W/L record for this theatre procedure, so use the ESIS
.         unique count to see if there is a record with a blank "Extract
.         sent date".  If so, then update the record with the latest details.
.
          PACK     KEY17,WTWMECNT,SP20
          CALL     RDWTESE1                      * ESIS uniq count on wateseaf ?
          IF       OVRCD = 0
            GOTO     WESE0500                    * yes
          ENDIF
.
.         There was no record waiting to be sent, so find the last record
.         sent.  If no record on file, then we don't need to do anything.
.
          PACK      KEY17,WTWMECNT,TILDA35
          CALL      RSWTESE1                     * no - posn after uniq count
          CALL      RPWTESE1                     * read previous record
          BRANCH    OVRCD,WESE9999               * eof - finished
.
          MATCH     WTEEUNIQ,WTWMECNT            * same unique count ?
          GOTO      WESE9999 IF NOT EQUAL        * no - finished
.
.         Latest record found, so check if it has the same details
.         (admission date, claim code and operation date) that we are about to
.         load and if found, we don't need to do anything
.
WESE0500  MATCH     WTEEADAT,ADATE               * adm. date already on file ?
          GOTO      WESE1000 IF NOT EQUAL        * no - create/update record
.
          MATCH     WTEEINSD,ACLAIM              * claim type already on file ?
          GOTO      WESE1000 IF NOT EQUAL        * no - create/update record
.
          MATCH     WTEEREMD,MMDATE              * same op.date & removal date
          GOTO      WESE9999 IF EQUAL            * yes - finished
.
.         Load new field values and use the default values from the latest
.         record for the remainder of the fields.
.
WESE1000  MOVE      ADATE,WTEEADAT
          MOVE      ACLAIM,WTEEINSD
          MOVE      MMDATE,WTEEREMD
          REP       " 0",WTEEREMD
          MOVE      SP70,WTEERREM
.
.         Find the first category WR (W/L Removal) code for "Admitted at
.         the Hospital" (Indicator 3 = "W")
.
          PACK      KEY5,ANSW,ANSR,SP70
          CALL      RDSCODE1                     * posn on category WR
WESE1500  CALL      RDKCODE1                     * read next record
          BRANCH    OVRCD,WESE2000               * eof - leave reason blank
.
          MATCH     "WR",TCODE                   * same category still ?
          GOTO      WESE2000 IF NOT EQUAL        * no - leave reason blank
.
          MATCH     ANSW,TCINDC3                 * Ind. 3 = W ?
          IF        @EQUAL
            MOVE      ACODE,WTEERREM             * yes - load reason for removal
            GOTO      WESE2000
          ENDIF
          GOTO      WESE1500                     * get next record
.
.         Write or update a wateseaf record
.
WESE2000  MOVE      SP70,WTEEEDAT                * init. wateseaf variables
          MOVE      SP70,WTEEWEBU
          MOVE      SP70,WTEEUDAT
          MOVE      SP70,WTEEUTIM
          MOVE      ZERO,WTEEMANU
          PACK      WTEEASAS,SP70
.
          CALL      CLWATTX1
          PACK      KEY19,WMURNO,WMCODE,WMCNT,SP70
WESE2100  CALL      RDWTTX11
          BRANCH    OVRCD,WESE2500
.
          MOVE      WTTXASAS,WTEEASAS
.
WESE2500  CALL      IBACLOCK
          PACK      KEY17,WTEEUNIQ,WTEEEDAT
          CALL      RAWTESE1                     * record already on file ?
          IF        OVRCD = 0
            MOVE      "HL7RECVR  ",WTEEWEBU      * yes - update record
            PACK      WTEEUDAT,CCC,CYY,CMM,CDD
            REP       " 0",WTEEUDAT
            MOVE      CTIMEIS,WTEEUTIM
            REP       " 0",WTEEUTIM
            CALL      UPWTESE1
          ELSE
            MOVE      "HL7RECVR  ",WTEEWEBC      * no - write new record
            PACK      WTEECDAT,CCC,CYY,CMM,CDD
            REP       " 0",WTEECDAT
            MOVE      CTIMEIS,WTEECTIM
            REP       " 0",WTEECTIM
            MOVE      SP70,WTEEWEBU
            MOVE      SP70,WTEEUDAT
            MOVE      SP70,WTEEUTIM
            MOVE      ZERO,WTEEMANU
            CALL      WRWTESE1
          ENDIF
.
WESE9999  RETURN
+
.******************************************************************************
.*                              SRTMB000           Called by: USMMB000        *
.*            Sort MBS items into the order required by medical records       *
.* Requires: Valid read on oprdetaf record                                    *
.******************************************************************************
.
.         Loop over each of the MBS items in the file, and sort into
.         charge order. This uses a bubble sort.
.
SRTMB000  PACK      KEY11,OPDAADMN,SP10
          CALL      RDSMMBS1                     * posn before visit #
SRTMB100  CALL      RDKMMBS1                     * read next patmmbaf record
          BRANCH    OVRCD,SRTMB999               * eof - finished sort
.
          MATCH     OPDAADMN,MMADMN              * same visit still ?
          GOTO      SRTMB999 IF NOT EQUAL        * no - finished sort
.
          MOVE      MMRECN,CURMRECN              * save current record number
          MOVE      MMRECN,SWPMRECN              * save rec. number to swap with
.
          MOVE      MMCODE,KEY9
          PACK      KEY17,MMCODE,OPDADATE,SP70
          CALL      PATITMRD                     * item on file ?
          BRANCH    OVRCD,SRTMB200               * no - ????
.
          MOVE      OPDADATE,CEFFDATE
          CALL      GETTHR00                     * theatre fee found ?
          BRANCH    OVRCD,SRTMB200               * no - 
.
.         Set the charge for this item
.
          MOVE      TFPAT1,CURCHRGE
          ADD       TFHF1,CURCHRGE
          GOTO      SRTMB300
.
.         Missing theatre fee
.
SRTMB200  MOVE      ZERO,CURCHRGE
.
.         Loop through the rest of the MBS procedures to see if there are
.         any with a charge greater than this one.
.
SRTMB300  CALL      RDKMMBS1                     * get next record
          BRANCH    OVRCD,SRTMB800               * eof - ????
.
          MATCH     OPDAADMN,MMADMN              * same visit still ?
          GOTO      SRTMB800 IF NOT EQUAL        * no - finished sub-loop
.
          MOVE      MMCODE,KEY9
          PACK      KEY17,MMCODE,OPDADATE,SP70
          CALL      PATITMRD                     * item on file ?
          BRANCH    OVRCD,SRTMB300               * no - ??
.
          MOVE      OPDADATE,CEFFDATE
          CALL      GETTHR00                     * theatre fee found ?
          BRANCH    OVRCD,SRTMB300               * no - 
.
.         Set the charge for this item
.
          MOVE      TFPAT1,SWPCHRGE
          ADD       TFHF1,SWPCHRGE
.
          COMPARE   SWPCHRGE,CURCHRGE
          GOTO      SRTMB300 IF NOT LESS
.
.         This item has a higher charge
.
          MOVE      SWPCHRGE,CURCHRGE
          MOVE      MMRECN,SWPMRECN
          GOTO      SRTMB300
.
.         Finished loop. Check if we have to swap items
.
SRTMB800  COMPARE   SWPMRECN,CURMRECN            * same record ?
          GOTO      SRTMB900 IF EQUAL            * yes - no need to swap
.
.         Swap the two records found. Use a record number of "-1" as a save
.         area to swap to.
.
          PACK      KEY11,OPDAADMN,CURMRECN      * current record -> temp.
          CALL      RDMMBS1                      * record on file ?
          BRANCH    OVRCD,SRTMB900               * yes
.
          MOVE      "-1",MMRECN              * temporary record number
          CALL      UPMMBS1
.
          PACK      KEY11,MMADMN,SWPMRECN
          CALL      RDMMBS1                  * new record -> current
          BRANCH    OVRCD,SRTMB850
.
          MOVE      CURMRECN,MMRECN
          CALL      UPMMBS1
.
          MOVE      "-1",MMRECN
          PACK      KEY11,MMADMN,MMRECN       * temp -> new record
          CALL      RDMMBS1
.
          MOVE      SWPMRECN,MMRECN
          CALL      UPMMBS1
          GOTO      SRTMB900
.
.         This code should never be executed, but we have it here just in case
.
SRTMB850  MOVE      "-1",MMRECN
          PACK      KEY11,MMADMN,MMRECN
          CALL      RDMMBS1
.
          MOVE      CURMRECN,MMRECN
          CALL      UPMMBS1
.
.         Reposition ready for the next loop
.
SRTMB900  PACK      KEY11,OPDAADMN,CURMRECN
          CALL      RDMMBS1
          GOTO      SRTMB100
.
SRTMB999  RETURN
+
.******************************************************************************
.*                        Check Operation Minutes                             *
.* This procedure checks wheather recalculation of Actual Operation Minutes   *
.* is necessary or not based on the values of Prep Start Time, Dressing Time  *
.* and Overnight Indicator.                                                   *
.*                                                                            *
.* INPUTS:  UPDTMFLG - indicates 'insert' or 'update' of oprsrgaf             *
.*                     ZERO = insert                                          *
.*                     ONE  = update                                          *
.* OUTPUTS: RECOPMIN - indicates whether recalculation of Op Min is required  *
.*                     ZERO = do not recalculate                              *
.*                     ONE  = recalculate                                     *
.******************************************************************************
CHKOPM00  MOVE      ZERO,RECOPMIN           * Reset 'Recalc Op Min' flag
          BRANCH    UPDTMFLG,CHKOPM50
.
.         Inserting first row to oprsrgaf (team number = 1). The calculation of
.         Actaul Op Min is required only if both, Prep Start Time and
.         Dressing Time are populated.

          MATCH     SP70,OPSRG003           * Is 'Prep Start Time' blank?
          IF        !@EQUAL
            MATCH     SP70,OPSRG004         * No, Is 'Dressing Time' blank?
            IF        !@EQUAL
              MOVE      ONE,RECOPMIN        * No, set 'Recalc Op Min' flag
            ENDIF
          ENDIF
.
          GOTO      CHKOPM99
.
.         Updating details for an existing team. The recalculation of Actual
.         Op Min is required when at least one of the times (Prep Start Time or
.         Dressing Time) or Overnight Indicator has changed.
.
CHKOPM50  MATCH     OPSRG003,OPSGTIPS       * Is 'Prep Start Time' the same?
          IF        !@EQUAL
            MOVE      ONE,RECOPMIN          * No, set 'Recalc Op Min' flag
            GOTO      CHKOPM99
          ENDIF
.
          MATCH     OPSRG004,OPSGTIDR       * Is 'Dressing Time' the same?
          IF        !@EQUAL
            MOVE      ONE,RECOPMIN          * No, set 'Recalc Op Min' flag
            GOTO      CHKOPM99
          ENDIF
.
          MATCH     Z70,OPSRG071            * Is 'Overnight Ind' defined on scr
          GOTO      CHKOPM99 IF EQUAL       * No, do not check, go to exit
.
          MATCH     OPSRG071,OPSGUY02       * Is 'Overnight Ind' the same?
          IF        !@EQUAL
            MOVE      ONE,RECOPMIN          * No, set 'Recalc Op Min' flag
            GOTO      CHKOPM99
          ENDIF
.
CHKOPM99  RETURN
+
.******************************************************************************
.*                Recalculate Actual Operation Minutes                        *
.******************************************************************************
ROPMIN00  MOVE      "99:99",MINPREPT        * Initialize work variables
          MOVE      ONE,PREPDIND
          MOVE      SP70,MAXDREST
          MOVE      ZERO,DRESDIND
          MOVE      ZERO,CURRDAY
.
.         Loop through all surgical teams to determine the earliest 'Prep Start
.         Time' and the latest 'Dressing Time' taking into account the
.         overnight indicator.
.
          PACK      KEY11,UNIQUEKY,SP70
          CALL      RSOPSRG1
ROPMIN10  CALL      RKOPSRG1
          BRANCH    OVRCD,ROPMIN30
          MATCH     OPDAUNIQ,OPSGUNID
          GOTO      ROPMIN30 IF NOT EQUAL
.
          MATCH     SP70,OPSGTIPS           * Is 'Prep Start Time' blank?
          GOTO      ROPMIN20 IF EQUAL       * Yes, skip 'Prep Start Time' check

          COMPARE   PREPDIND,CURRDAY        * Is time found for earlier day?
          IF        @LESS
            MOVE      CURRDAY,PREPDIND      * Yes, CURRDAY < PREPDIND
            MOVE      OPSGTIPS,MINPREPT     * Store new Min day and time
            GOTO      ROPMIN20
          ENDIF
          IF        @EQUAL
            MATCH     MINPREPT,OPSGTIPS     * Same day but is it earlier time?
            IF        @LESS
              MOVE      OPSGTIPS,MINPREPT   * Yes, store new Min time
            ENDIF
          ENDIF
.
ROPMIN20  MATCH     "1",OPSGUY02            * Is 'Overnight Indicator' set?
          IF        @EQUAL
            MOVE      ONE,CURRDAY           * Yes, set CURRDAY to next day
          ENDIF
.
          MATCH     SP70,OPSGTIDR           * Is 'Dressing Time' blank?
          GOTO      ROPMIN10 IF EQUAL       * Yes, skip 'Dressing Time' check
.
          COMPARE   CURRDAY,DRESDIND        * Is time found for later day?
          IF        @LESS
            MOVE      CURRDAY,DRESDIND      * Yes, DRESDIND < CURRDAY
            MOVE      OPSGTIDR,MAXDREST     * Store new Max day and time
            GOTO      ROPMIN10
          ENDIF
          IF        @EQUAL
            MATCH     OPSGTIDR,MAXDREST     * Same day but is it later time?
            IF        @LESS
              MOVE      OPSGTIDR,MAXDREST   * Yes, store new Max time
            ENDIF
          ENDIF
.
          GOTO      ROPMIN10                * Get next team details
.
.         Calculate the duration in theatre for this patient based on
.         earliest 'Prep Start Time' and latest 'Dressing Time' found.
.
ROPMIN30  MOVE      ZERO,ACDURMIN           * Initalise Act Duration in theatre
          MATCH     "99:99",MINPREPT
          GOTO      ROPMIN40 IF EQUAL       * No 'Prep Start Time'. Set Dur = 0
          MATCH     SP70,MAXDREST
          GOTO      ROPMIN40 IF EQUAL       * No 'Dressing Time'. Set Dur = 0
          COMPARE   PREPDIND,DRESDIND
          GOTO      ROPMIN40 IF LESS        * 'Dress Day' < 'Prep Day', Dur = 0
          IF        @EQUAL
            MATCH     MINPREPT,MAXDREST     * Is 'Dress Time' < 'Prep Time'?
            GOTO      ROPMIN40 IF LESS      * Yes, set Dur = 0
          ENDIF
.
          CALL      ACTDUR00                * Calculate Actual Duration
.
.         Update Theatre Opeartion Detail record with new duration. If the
.         newly calculated duration is equal to the current duration then no
.         further processing is necessary.
.
ROPMIN40  PACK      KEY10,UNIQUEKY,SP70
          CALL      RDOPDEA3
          BRANCH    OVRCD,ROPMIN99
          COMPARE   ACDURMIN,OPDATDUR       * Has Duration in Theatre changed?
          GOTO      ROPMIN99 IF EQUAL       * No, go to exit.
          MOVE      ACDURMIN,OPDATDUR       * Yes, update with New Duration
          CALL      IBACLOCK
          MOVE      CURRDATE,OPDAUDAT
.
          CLOCK     TIME,OPDAUTIM
          MOVE      WBSEUID,OPDAWEBU
.
          CALL      UPOPDEA3
.
.         Loop through Operation Details records for the given session and
.         calculate the Actual Operation Minutes for the session.
.         Actual Op Min = Sum of (Patient Duration in theatre + Prep Time/Pat)
.
          PACK      KEY22,CASEKEYZ,SP70
          CALL      RDOPSES1
          BRANCH    OVRCD,ROPMIN99
.
          MOVE      ZERO,ACDURMIN            * Initalize Session Actual Op Min
          MOVE      TWO,D1                   * Use for status, TWO = Admitted
          PACK      KEY26,OPSEHOSP,OPSEDATE,OPSETIME,OPSECLIN,D1,SP70
          CALL      RSOPDEA1
ROPMIN50  CALL      RKOPDEA1
          BRANCH    OVRCD,ROPMIN70
.
          MATCH     OPSEHOSP,OPDAHOSP        * Same Session Date?
          GOTO      ROPMIN70 IF NOT EQUAL    * No, exit loop
.
          MATCH     OPSEDATE,OPDADATE        * Same Session Date?
          GOTO      ROPMIN70 IF NOT EQUAL    * No, exit loop
          MATCH     OPSETIME,OPDATIME        * Same Session Time?
          GOTO      ROPMIN70 IF NOT EQUAL    * No, exit loop
          MATCH     OPSECLIN,OPDACLIN        * Same Clinic/Surgeon?
          GOTO      ROPMIN70 IF NOT EQUAL    * No, exit loop
          COMPARE   TWO,OPDASTAT             * Is booking status = Admitted?
          GOTO      ROPMIN60 IF EQUAL        * Yes, Add to Actual Op Min
          COMPARE   FOUR,OPDASTAT            * Is booking status = Discharged?
          GOTO      ROPMIN60 IF EQUAL        * Yes, Add to Actual Op Min
.
          GOTO      ROPMIN50                 * Get next record
.
ROPMIN60  IF        (OPDATDUR > ZERO)
            ADD       OPDATDUR,ACDURMIN      * Add patient's duration in theatre
            ADD       OPSEPREP,ACDURMIN      * Add preperation time per patient
          ENDIF
          GOTO      ROPMIN50                 * Get next record
.
ROPMIN70  MOVE      ACDURMIN,OPSEACTD        * Set sessions Actual Op Min
          CALL      UPOPSES1
.
          PACK      KEY10,UNIQUEKY,SP70      * Re - position on correct
          CALL      RDOPDEA3                 * oprdetaf record after session
          BRANCH    OVRCD,ROPMIN99           * Actual op min
.
ROPMIN99  RETURN
+
.*****************************************************************************
.*        Check if surgery start is after previous end time (if required)    *
.*****************************************************************************
          DEFPROC   PREVTIME
.
          INC       OPRDEAFD/INC
          INC       OPRSRGFD/INC
.
SAVTHETR  DIM       6
          OPEN      OPRSRGA1,"oprsrgaf"
          OPEN      OPRDETA3,"oprdetaf"
          OPEN      OPRDETA5,"oprdetaf"
.
PREN0000  MOVE      ZERO,EXIT
          MATCH     "1",OPCNSEMP
          GOTO      PREN9999 IF NOT EQUAL
.
          PACK      KEY10,OPSRG001,SP70
          CALL      RDOPDEA3
          BRANCH    OVRCD,PREN9000
.
          MOVE      OPDATHET,SAVTHETR
          MATCH     OPSRG001,OPDAUNIQ
          GOTO      PREN9000 IF NOT EQUAL
.
          PACK      KEY22,OPDAHOSP,OPDADATE,OPDATIME,OPDACLIN,SP70
          PACK      KEY26,OPDAHOSP,OPDADATE,OPDATIME,OPDACLIN,OPDACASE:
                          OPDASTAT,SP70
          CALL      RDOPDEA5
PREN1000  CALL      RPOPDEA5
          BRANCH    OVRCD,PREN9000
.
          COMPARE   THREE,OPDASTAT
          GOTO      PREN1000 IF EQUAL
.
          PACK      SAVKEY22,OPDADATE,OPDATIME,OPDACLIN,SP70
          MATCH     SAVKEY22,KEY22
          GOTO      PREN9000 IF NOT EQUAL
.
          MATCH     OPDATHET,SAVTHETR
          GOTO      PREN1000 IF NOT EQUAL
.
          PACK      KEY11,OPDAUNIQ,ONE,SP70
          CALL      RDOPSRG1
          BRANCH    OVRCD,PREN2000
.
          MATCH     SP70,OPSGTISE
          GOTO      PREN3000 IF EQUAL
          MATCH     OPSGTISE,OPSRG005
          GOTO      PREN2000 IF LESS
          GOTO      PREN9000
.
PREN2000  MOVE      ONE,EXIT
          GOTO      PREN9999
.
PREN3000  MOVE      TWO,EXIT
          GOTO      PREN9999
.
PREN9000  MOVE      ZERO,EXIT
          GOTO      PREN9999
.
          INC       OPRDEAIO/INC
          INC       OPRSRGIO/INC
          INC       IBAOVRIO/INC
.
PREN9999  ENDPROC
+
.******************************************************************************
.*         ACTDUR00 - Calculates the actual duration in theatre               *
.* INPUTS:  MINPREPT - Minimum 'Prep Start Time' (HH:MM)                      *
.*          MAXDREST - Maximum 'Dressing Time'   (HH:MM)                      *
.*          PREPDIND - Day Indicator for 'Prep Start Time'                    *
.*          DRESDIND - Day Indicator for 'Dressing Time'                      *
.*                                                                            *
.* OUTPUTS: ACDURMIN - Time between MINPREPT and MAXDREST in minutes          *
.******************************************************************************
ACTDUR00  MOVE      ZERO,ACDURMIN
          UNPACK    MINPREPT,CHOUR,ANS,CMIN * unpack the prep start time
          MOVE      CHOUR,FORM2             * set up hours as a form
          MOVE      FORM2,PREPTMIN
          MULT      "60",PREPTMIN           * convert hours to minutes
          MOVE      CMIN,FORM2              * set up minutes as a form
          ADD       FORM2,PREPTMIN          * get the total min of prep time
.
          UNPACK    MAXDREST,CHOUR,ANS,CMIN * unpack the dressing time
          MOVE      CHOUR,FORM2             * set up hours as a form
          MOVE      FORM2,DRESTMIN
          MULT      "60",DRESTMIN           * convert hours to minutes
          MOVE      CMIN,FORM2              * set up minutes as a form
          ADD       FORM2,DRESTMIN          * get the total min of dressing time
.
.         Check for session going over midnight. The seesion has gone over
.         midnight only if the PREPDIND is ZERO and DRESDIND is ONE.
.
          IF        ((PREPDIND=ZERO) & (DRESDIND=ONE))
.
.         Added this check for the case where the Overnight indicator is set
.         to allow an Exit Theatre Complex time after midnight, but the surgery
.         end time is before midnight.
.
            COMPARE   PREPTMIN,DRESTMIN
            IF        @LESS
              ADD       "1440",DRESTMIN      * Add 24 hours to the 'Dress Time'
            ENDIF
          ENDIF
.
.         Calculate Actaul Duration = ('Dressing Time' - 'Prep Start Time')
.
          ASSIGN    (DRESTMIN - PREPTMIN),ACDURMIN
.
ACTDUR99  RETURN
+
.*******************************************************************************
. Calculate next date
.*******************************************************************************
NXTDAT00  UNPACK    OPSEDATE,CCENT,CYEAR,CMON,CDAY
          MOVE      CDAY,DD
          MOVE      CMON,MM
          MOVE      CYEAR,YY
          MOVE      CCENT,CC
          CALL      DMYCON
.
          ADD       ONE,JULDAY
          MOVE      JULDAY,JWKDAY
          MOVE      CYY,JWKYER
          MOVE      CCC,JWKCC
          CALL      JULCON
.
          PACK      OPSEACDE,CC,YY,MM,DD
          REP       " 0",OPSEACDE
NXTDAT99  RETURN
+
.*************************************************************************
. Write Default Team members from Session file. If no default team specified
. then default Consultatnt as Operating Surgeon.
.*************************************************************************
DFLTTM00  PACK      KEY22,CASEKEYZ
          CALL      RDOPSES1
          BRANCH    OVRCD,DFLTTM99
.
          MATCH     SP70,OPSEDCC1           * Default team empty?
          GOTO      DFLTTM90 IF EQUAL       * Yes, default Cons as Op.Surgeon
.
          CALL      CLOPRTSM
          MOVE      ZERO,STAFTYPE           * Set Staff Type (Operating Surg)
          MOVE      OPSEDCC1,OPTSSCDE       * Set Staff Code
          MOVE      OPSETYD1,OPTSSTYP       * Set Staff Category Code
          CALL      SAVDFL00                * Write Staff Member
.
          MATCH     SP70,OPSETYD2           * Second default doctor type blank?
          GOTO      DFLTTM10 IF EQUAL       * Yes, skip this doctor
          MATCH     SP70,OPSEDCC2           * Second default doctor code blank?
          GOTO      DFLTTM10 IF EQUAL       * Yes, skip this doctor
.
          CALL      CLOPRTSM
          MOVE      ONE,STAFTYPE            * Set Staff Type (Doctor)
          MOVE      OPSEDCC2,OPTSSCDE       * Set Staff Code
          MOVE      OPSETYD2,OPTSSTYP       * Set Staff Category Code
          CALL      SAVDFL00                * Write Staff Member
.
DFLTTM10  MATCH     SP70,OPSETYD3           * Next default doctor type blank?
          GOTO      DFLTTM15 IF EQUAL       * Yes, skip this doctor
          MATCH     SP70,OPSEDCC3           * Next default doctor code blank?
          GOTO      DFLTTM15 IF EQUAL       * Yes, skip this doctor
.
          CALL      CLOPRTSM
          MOVE      ONE,STAFTYPE            * Set Staff Type (Doctor)
          MOVE      OPSEDCC3,OPTSSCDE       * Set Staff Code
          MOVE      OPSETYD3,OPTSSTYP       * Set Staff Category Code
          CALL      SAVDFL00                * Write Staff Member
.
DFLTTM15  MATCH     SP70,OPSETYD4           * Next default doctor type blank?
          GOTO      DFLTTM20 IF EQUAL       * Yes, skip this doctor
          MATCH     SP70,OPSEDCC4           * Next default doctor code blank?
          GOTO      DFLTTM20 IF EQUAL       * Yes, skip this doctor
.
          CALL      CLOPRTSM
          MOVE      ONE,STAFTYPE            * Set Staff Type (Doctor)
          MOVE      OPSEDCC4,OPTSSCDE       * Set Staff Code
          MOVE      OPSETYD4,OPTSSTYP       * Set Staff Category Code
          CALL      SAVDFL00                * Write Staff Member
.
DFLTTM20  MATCH     SP70,OPSETYD5           * Next default doctor type blank?
          GOTO      DFLTTM25 IF EQUAL       * Yes, skip this doctor
          MATCH     SP70,OPSEDCC5           * Next default doctor code blank?
          GOTO      DFLTTM25 IF EQUAL       * Yes, skip this doctor
.
          CALL      CLOPRTSM
          MOVE      ONE,STAFTYPE            * Set Staff Type (Doctor)
          MOVE      OPSEDCC5,OPTSSCDE       * Set Staff Code
          MOVE      OPSETYD5,OPTSSTYP       * Set Staff Category Code
          CALL      SAVDFL00                * Write Staff Member
.
DFLTTM25  MATCH     SP70,OPSETYD6           * Next default doctor type blank?
          GOTO      DFLTTM30 IF EQUAL       * Yes, skip this doctor
          MATCH     SP70,OPSEDCC6           * Next default doctor code blank?
          GOTO      DFLTTM30 IF EQUAL       * Yes, skip this doctor
.
          CALL      CLOPRTSM
          MOVE      ONE,STAFTYPE            * Set Staff Type (Doctor)
          MOVE      OPSEDCC6,OPTSSCDE       * Set Staff Code
          MOVE      OPSETYD6,OPTSSTYP       * Set Staff Category Code
          CALL      SAVDFL00                * Write Staff Member
.
DFLTTM30  MATCH     SP70,OPSETYD7           * Next default doctor type blank?
          GOTO      DFLTTM35 IF EQUAL       * Yes, skip this doctor
          MATCH     SP70,OPSEDCC7           * Next default doctor code blank?
          GOTO      DFLTTM35 IF EQUAL       * Yes, skip this doctor
.
          CALL      CLOPRTSM
          MOVE      ONE,STAFTYPE            * Set Staff Type (Doctor)
          MOVE      OPSEDCC7,OPTSSCDE       * Set Staff Code
          MOVE      OPSETYD7,OPTSSTYP       * Set Staff Category Code
          CALL      SAVDFL00                * Write Staff Member
.
DFLTTM35  MATCH     SP70,OPSETYD8           * Next default doctor type blank?
          GOTO      DFLTTM40 IF EQUAL       * Yes, skip this doctor
          MATCH     SP70,OPSEDCC8           * Next default doctor code blank?
          GOTO      DFLTTM40 IF EQUAL       * Yes, skip this doctor
.
          CALL      CLOPRTSM
          MOVE      ONE,STAFTYPE            * Set Staff Type (Doctor)
          MOVE      OPSEDCC8,OPTSSCDE       * Set Staff Code
          MOVE      OPSETYD8,OPTSSTYP       * Set Staff Category Code
          CALL      SAVDFL00                * Write Staff Member
.
DFLTTM40  MATCH     SP70,OPSETYN1           * First default nurse type blank?
          GOTO      DFLTTM45 IF EQUAL       * Yes, skip this nurse
          MATCH     SP70,OPSENUC1           * First default nurse code blank?
          GOTO      DFLTTM45 IF EQUAL       * Yes, skip this nurse
.
          CALL      CLOPRTSM
          MOVE      TWO,STAFTYPE            * Set Staff Type (Nurse)
          MOVE      OPSENUC1,OPTSSCDE       * Set Staff Code
          MOVE      OPSETYN1,OPTSSTYP       * Set Staff Category Code
          CALL      SAVDFL00                * Write Staff Member
.
DFLTTM45  MATCH     SP70,OPSETYN2           * Next default nurse type blank?
          GOTO      DFLTTM50 IF EQUAL       * Yes, skip this nurse
          MATCH     SP70,OPSENUC2           * Next default nurse code blank?
          GOTO      DFLTTM50 IF EQUAL       * Yes, skip this nurse
.
          CALL      CLOPRTSM
          MOVE      TWO,STAFTYPE            * Set Staff Type (Nurse)
          MOVE      OPSENUC2,OPTSSCDE       * Set Staff Code
          MOVE      OPSETYN2,OPTSSTYP       * Set Staff Category Code
          CALL      SAVDFL00                * Write Staff Member
.
DFLTTM50  MATCH     SP70,OPSETYN3           * Next default nurse type blank?
          GOTO      DFLTTM55 IF EQUAL       * Yes, skip this nurse
          MATCH     SP70,OPSENUC3           * Next default nurse code blank?
          GOTO      DFLTTM55 IF EQUAL       * Yes, skip this nurse
.
          CALL      CLOPRTSM
          MOVE      TWO,STAFTYPE            * Set Staff Type (Nurse)
          MOVE      OPSENUC3,OPTSSCDE       * Set Staff Code
          MOVE      OPSETYN3,OPTSSTYP       * Set Staff Category Code
          CALL      SAVDFL00                * Write Staff Member
.
DFLTTM55  MATCH     SP70,OPSETYN4           * Next default nurse type blank?
          GOTO      DFLTTM60 IF EQUAL       * Yes, skip this nurse
          MATCH     SP70,OPSENUC4           * Next default nurse code blank?
          GOTO      DFLTTM60 IF EQUAL       * Yes, skip this nurse
.
          CALL      CLOPRTSM
          MOVE      TWO,STAFTYPE            * Set Staff Type (Nurse)
          MOVE      OPSENUC4,OPTSSCDE       * Set Staff Code
          MOVE      OPSETYN4,OPTSSTYP       * Set Staff Category Code
          CALL      SAVDFL00                * Write Staff Member
.
DFLTTM60  MATCH     SP70,OPSETYN5           * Next default nurse type blank?
          GOTO      DFLTTM65 IF EQUAL       * Yes, skip this nurse
          MATCH     SP70,OPSENUC5           * Next default nurse code blank?
          GOTO      DFLTTM65 IF EQUAL       * Yes, skip this nurse
.
          CALL      CLOPRTSM
          MOVE      TWO,STAFTYPE            * Set Staff Type (Nurse)
          MOVE      OPSENUC5,OPTSSCDE       * Set Staff Code
          MOVE      OPSETYN5,OPTSSTYP       * Set Staff Category Code
          CALL      SAVDFL00                * Write Staff Member
.
DFLTTM65  MATCH     SP70,OPSETYN6           * Next default nurse type blank?
          GOTO      DFLTTM99 IF EQUAL       * Yes, skip this nurse
          MATCH     SP70,OPSENUC6           * Next default nurse code blank?
          GOTO      DFLTTM99 IF EQUAL       * Yes, skip this nurse
.
          CALL      CLOPRTSM
          MOVE      TWO,STAFTYPE            * Set Staff Type (Nurse)
          MOVE      OPSENUC6,OPTSSCDE       * Set Staff Code
          MOVE      OPSETYN6,OPTSSTYP       * Set Staff Category Code
          CALL      SAVDFL00                * Write Staff Member
          GOTO      DFLTTM99
.
DFLTTM90  CALL      CLOPRTSM
          MOVE      TEAMNUMB,F1
          CALL      SAVSUR00                * Write Cons as Operating Surgeon
.
DFLTTM99  RETURN
+
.*****************************************************************************
.                  Save (Write) Deafult Team Member
.*****************************************************************************
SAVDFL00  MOVE      OPDAUNIQ,OPTSUNID
          MOVE      TEAMNUMB,OPTSTMNO
          MOVE      STAFTYPE,OPTSSIND
          MOVE      OPDADATE,OPTSSDAT
          PACK      OPTSSTIM,OPDAEXPS,SECONDS
          PACK      KEY35,OPTSUNID,OPTSTMNO,OPTSSIND,OPTSSCDE,OPTSSDAT:
                          OPTSSTIM,SP70
          CALL      RDOPTSM1
          COMPARE   ZERO,OVRCD
          GOTO      SAVDFL99 IF EQUAL
          CALL      WROPTSM1
.
SAVDFL99  RETURN
+
.*************************************************************************
. Default Consultant as Operating Surgeon in Staff Member List
. CLOPRTSM should be called before this routine to clear the fields
.*************************************************************************
SAVSUR00  MOVE      OPDAUNIQ,OPTSUNID
          MOVE      TEAMNUMB,OPTSTMNO
          MOVE      ZERO,OPTSSIND
          MOVE      OPDACLIN,OPTSSCDE
          MOVE      OPDADATE,OPTSSDAT
          MOVE      OPCNSTCT,OPTSSTYP
          PACK      OPTSSTIM,OPDAEXPS,SECONDS
          PACK      KEY35,OPTSUNID,OPTSTMNO,OPTSSIND,OPTSSCDE,OPTSSDAT:
                          OPTSSTIM,SP70
          CALL      RDOPTSM1
          COMPARE   ZERO,OVRCD
          GOTO      SAVSRG99 IF EQUAL
          CALL      WROPTSM1
SAVSRG99  RETURN
+
.------------------------------------------------------------------------
.   Clear Parameters for Operating Surgical Details
.------------------------------------------------------------------------
CPOPSG00  MOVE      Z70,OPSRG001
          MOVE      Z70,OPSRG002
          MOVE      Z70,OPSRG003
          MOVE      Z70,OPSRG004
          MOVE      Z70,OPSRG005
          MOVE      Z70,OPSRG006
          MOVE      Z70,OPSRG007
          MOVE      Z70,OPSRG020
          MOVE      Z70,OPSRG022
          MOVE      Z70,OPSRG026
          MOVE      Z70,OPSRG028
          MOVE      Z70,OPSRG053
          MOVE      Z70,OPSRG054
          MOVE      Z70,OPSRG055
          MOVE      Z70,OPSRG060
          MOVE      Z70,OPSRG071
          MOVE      Z70,OPSRG072
          MOVE      Z70,OPSRG073
          MOVE      Z70,OPSRG074
          MOVE      Z70,OPSRG076
          MOVE      Z70,OPSRG080
          MOVE      Z70,OPSRG081
CPOPSG99  RETURN
+
.------------------------------------------------------------
.  Update Operating Surgical Details file
.------------------------------------------------------------
MVOPSG00  MATCH     OPSRG001,Z70
          IF        !@EQUAL
            MOVE      OPSRG001,OPSGUNID       * rjustify (unique id)
          ENDIF
          MATCH     OPSRG002,Z70
          IF        !@EQUAL
            MOVE      OPSRG002,OPSGTMNO       * 1 char
          ENDIF
          MATCH     OPSRG003,Z70
          IF        !@EQUAL
            MOVE      OPSRG003,OPSGTIPS       * hh:mm:ss (surgery start)
          ENDIF
          MATCH     OPSRG004,Z70
          IF        !@EQUAL
            MOVE      OPSRG004,OPSGTIDR       * hh:mm:ss (surgey end)
          ENDIF
          MATCH     OPSRG005,Z70
          IF        !@EQUAL
            MOVE      OPSRG005,OPSGTISS       * hh:mm:ss (surgery start)
          ENDIF
          MATCH     OPSRG006,Z70
          IF        !@EQUAL
            MOVE      OPSRG006,OPSGTISE       * hh:mm:ss (surgey end)
          ENDIF
          MATCH     OPSRG007,Z70
          IF        !@EQUAL
            MOVE      OPSRG007,OPSGSGDL       * cat TV (surg. start late reason)
          ENDIF
          MATCH     OPSRG020,Z70
          IF        !@EQUAL
            MOVE      OPSRG020,OPSGDNM1       * (equip/item used 1)
          ENDIF
          MATCH     OPSRG022,Z70
          IF        !@EQUAL
            MOVE      OPSRG022,OPSGDCK1       * (site intact 1)
          ENDIF
          MATCH     OPSRG026,Z70
          IF        !@EQUAL
            MOVE      OPSRG026,OPSGDNM2       * (equip/item used 2)
          ENDIF
          MATCH     OPSRG028,Z70
          IF        !@EQUAL
            MOVE      OPSRG028,OPSGDCK2       * (site intact 2)
          ENDIF
          MATCH     OPSRG053,Z70
          IF        !@EQUAL
            MOVE      OPSRG053,OPSGUC04       * cat Ti (equip/items 1)
          ENDIF
          MATCH     OPSRG054,Z70
          IF        !@EQUAL
            MOVE      OPSRG054,OPSGUC05       * cat Ti (equip/items 2)
          ENDIF
          MATCH     OPSRG055,Z70
          IF        !@EQUAL
            MOVE      OPSRG055,OPSGUC06       * cat Tk (recov exit delay reason)
          ENDIF
          MATCH     OPSRG060,Z70
          IF        !@EQUAL
            MOVE      OPSRG060,OPSGUC11       * cat Tp (operation class code)
          ENDIF
          MATCH     OPSRG071,Z70
          IF        !@EQUAL
            MOVE      OPSRG071,OPSGUY02       * 0 or 1 (overnight indicator)
          ENDIF
          MATCH     OPSRG072,Z70
          IF        !@EQUAL
            MOVE      OPSRG072,OPSGUY03       * 0 or 1 (fast post recovery)
          ENDIF
          MATCH     OPSRG073,Z70
          IF        !@EQUAL
            MOVE      OPSRG073,OPSGUY04       * 0 or 1 (admit post procedure)
          ENDIF
          MATCH     OPSRG074,Z70
          IF        !@EQUAL
            MOVE      OPSRG074,OPSGUY05       * 0 or 1 (case abandoned)
          ENDIF
          MATCH     OPSRG076,Z70
          IF        !@EQUAL
            MOVE      OPSRG076,OPSGUY07       * 0 or 1 (no recovery)
          ENDIF
          MATCH     OPSRG080,Z70
          IF        !@EQUAL
            MOVE      OPSRG080,OPSGUT01       * Wheels In Time
          ENDIF
          MATCH     OPSRG081,Z70
          IF        !@EQUAL
            MOVE      OPSRG081,OPSGUT02       * Wheels Out Time
          ENDIF
MVOPSG99  RETURN
+
.------------------------------------------------------------------------
.   Clear Parameters for Operating Arrival & Recovery Details
.------------------------------------------------------------------------
CPOPAR00  MOVE      Z70,OPARD001
          MOVE      Z70,OPARD002
          MOVE      Z70,OPARD003
          MOVE      Z70,OPARD004
          MOVE      Z70,OPARD013
          MOVE      Z70,OPARD016
          MOVE      Z70,OPARD017
          MOVE      Z70,OPARD029
          MOVE      Z70,OPARD030
          MOVE      Z70,OPARD031
          MOVE      Z70,OPARD034
          MOVE      Z70,OPARD039
          MOVE      Z70,OPARD041
          MOVE      Z70,OPARD042
          MOVE      Z70,OPARD043
          MOVE      Z70,OPARD045
          MOVE      Z70,OPARD046
          MOVE      Z70,OPARD060
          MOVE      Z70,OPARD061
          MOVE      Z70,OPARD062
          MOVE      Z70,OPARD063
          MOVE      Z70,OPARD064
          MOVE      Z70,OPARD071
          MOVE      Z70,OPARD072
          MOVE      Z70,OPARD073
          MOVE      Z70,OPARD074
          MOVE      Z70,OPARD075
          MOVE      Z70,OPARD076
          MOVE      Z70,OPARD077
          MOVE      Z70,OPARD078
          MOVE      Z70,OPARD079
          MOVE      Z70,OPARD080
          MOVE      Z70,OPARD082
          MOVE      Z70,OPARD083
          MOVE      Z70,OPARD084
          MOVE      Z70,OPARD085
          MOVE      Z70,OPARD086
          MOVE      Z70,OPARD105
          MOVE      Z70,OPARD115
          MOVE      Z70,OPARD116
CPOPAR99  RETURN
+
.------------------------------------------------------------
.  Update Operating Arrival & Recovery Details file
.------------------------------------------------------------
MVOPAR00  MATCH     OPARD001,Z70
          IF        !@EQUAL
            MOVE      OPARD001,OPARUNID       * rjustify (unique id)
          ENDIF
          MATCH     OPARD002,Z70
          IF        !@EQUAL
            MOVE      OPARD002,OPARATIM       * hh:mm:ss (arrival time)
          ENDIF
          MATCH     OPARD003,Z70
          IF        !@EQUAL
            MOVE      OPARD003,OPARANUR       * (admitting nurse code)
          ENDIF
          MATCH     OPARD004,Z70
          IF        !@EQUAL
            MOVE      OPARD004,OPARRLAT       * (arrival late reason)
          ENDIF
          MATCH     OPARD013,Z70
          IF        !@EQUAL
            MOVE      OPARD013,OPARPROT       * (prosthesis)
          ENDIF
          MATCH     OPARD016,Z70
          IF        !@EQUAL
            MOVE      OPARD016,OPARUC03       * Cat oc (recovery bay)
          ENDIF
          MATCH     OPARD017,Z70
          IF        !@EQUAL
            MOVE      OPARD017,OPARUC04       * Cat od (acuity)
          ENDIF
          MATCH     OPARD029,Z70
          IF        !@EQUAL
            MOVE      OPARD029,OPARUT01       * hh:mm:ss (surgical time out)
          ENDIF
          MATCH     OPARD030,Z70
          IF        !@EQUAL
            MOVE      OPARD030,OPARUT02       * ccyymmdd (clinical review date)
          ENDIF
          MATCH     OPARD031,Z70
          IF        !@EQUAL
            MOVE      OPARD031,OPARUT03       * hh:mm:ss (clinical review time)
          ENDIF
          MATCH     OPARD034,Z70
          IF        !@EQUAL
            MOVE      OPARD034,OPARUF01       * (blood loss)
          ENDIF
          MATCH     OPARD039,Z70
          IF        !@EQUAL
            MOVE      OPARD039,OPARTCAL       * hh:mm:ss (time pt. called for)
          ENDIF
          MATCH     OPARD041,Z70
          IF        !@EQUAL
.davs       MATCH     "1",OPCNZSC6
.davs       IF        !@EQUAL
              MOVE      OPARD041,OPARANAP     * hh:mm:ss (anaesthetic prep)
.davs       ENDIF
          ENDIF
          MATCH     OPARD042,Z70
          IF        !@EQUAL
            MOVE      OPARD042,OPARANAS       * hh:mm:ss (anaesthetic start)
          ENDIF
          MATCH     OPARD043,Z70
          IF        !@EQUAL
            MOVE      OPARD043,OPARANAE       * hh:mm:ss (anaesthetic stop)
          ENDIF
          MATCH     OPARD045,Z70
          IF        !@EQUAL
            MOVE      OPARD045,OPARUC11       * cat ok (ASA score code)
          ENDIF
          MATCH     OPARD046,Z70
          IF        !@EQUAL
            MOVE      OPARD046,OPARUC12       * cat ol (Anaes. delay reason)
          ENDIF
.
.         Load "Ready For Recovery" time into the appropriate field
.         based on the parameter value
.
.0910134  MOVE      OPCNPACU,FORM1
.0910134  BRANCH    FORM1,MVOPAR10:           * using UDF Time Field 6
.0910134                  MVOPAR20:           * using UDF Time Field 7
.0910134                  MVOPAR30:           * using UDF Time Field 8
.0910134                  MVOPAR40:           * using UDF Time Field 9
.0910134                  MVOPAR50            * using UDF Time Field 10
.0910134  GOTO      MVOPAR60
.
MVOPAR10  MATCH     OPARD060,Z70
          IF        !@EQUAL
            MOVE      OPARD060,OPARUT06       * hh:mm:ss (ready for recovery)
          ENDIF
.0910134  GOTO      MVOPAR60
.
MVOPAR20  MATCH     OPARD061,Z70
          IF        !@EQUAL
            MOVE      OPARD061,OPARUT07       * hh:mm:ss (anaesthetic time out)
          ENDIF
.0910134  GOTO      MVOPAR60
.
MVOPAR30  MATCH     OPARD062,Z70
          IF        !@EQUAL
            MOVE      OPARD062,OPARUT08       * hh:mm:ss (ready for recovery)
          ENDIF
.0910134  GOTO      MVOPAR60
.
MVOPAR40  MATCH     OPARD063,Z70
          IF        !@EQUAL
            MOVE      OPARD063,OPARUT09       * hh:mm:ss (ready for recovery)
          ENDIF
.0910134  GOTO      MVOPAR60
.
MVOPAR50  MATCH     OPARD064,Z70
          IF        !@EQUAL
            MOVE      OPARD064,OPARUT10       * hh:mm:ss (ready for recovery)
          ENDIF
.0910134  GOTO      MVOPAR60
.
MVOPAR60  MATCH     OPARD071,Z70
          IF        !@EQUAL
            MOVE      OPARD071,OPARTIRF       * hh:mm:ss (time into recov front)
          ENDIF
          MATCH     OPARD072,Z70
          IF        !@EQUAL
            MOVE      OPARD072,OPARNUF1       * (recovery nurse front 1 code)
          ENDIF
          MATCH     OPARD073,Z70
          IF        !@EQUAL
            MOVE      OPARD073,OPARNUF2       * (recovery nurse front 2 code)
          ENDIF
          MATCH     OPARD074,Z70
          IF        !@EQUAL
            MOVE      OPARD074,OPARTIRB       * hh:mm:ss (time into recov back)
          ENDIF
          MATCH     OPARD075,Z70
          IF        !@EQUAL
            MOVE      OPARD075,OPARNUB1       * (recovery nurse back 1 code)
          ENDIF
          MATCH     OPARD076,Z70
          IF        !@EQUAL
            MOVE      OPARD076,OPARNUB2       * (recovery nurse back 2 code)
          ENDIF
          MATCH     OPARD077,Z70
          IF        !@EQUAL
            MOVE      OPARD077,OPARTIRD       * hh:mm:ss (time into recovery)
          ENDIF
          MATCH     OPARD078,Z70
          IF        !@EQUAL
            MOVE      OPARD078,OPARNUD1       * (recovery nurse day 1 code)
          ENDIF
          MATCH     OPARD079,Z70
          IF        !@EQUAL
            MOVE      OPARD079,OPARNUD2       * (recovery nurse day 2 code)
          ENDIF
          MATCH     OPARD080,Z70
          IF        !@EQUAL
            MOVE      OPARD080,OPARTETC       * hh:mm:ss (exit theatre complex)
          ENDIF
          MATCH     OPARD082,Z70
          IF        !@EQUAL
            MOVE      OPARD082,OPARTEXP       * hh:mm:ss (time patient died)
          ENDIF
          MATCH     OPARD083,Z70
          IF        !@EQUAL
            MOVE      OPARD083,OPARTICU       * hh:mm:ss (time to icu)
          ENDIF
          MATCH     OPARD084,Z70
          IF        !@EQUAL
            MOVE      OPARD084,OPARRDCD       * Cat Ou (recovery in delay reas.)
          ENDIF
          MATCH     OPARD085,Z70
          IF        !@EQUAL
            MOVE      OPARD085,OPARTIDP       * hh:mm:ss (ready to depart time)
          ENDIF
          MATCH     OPARD086,Z70
          IF        !@EQUAL
            MOVE      OPARD086,OPARUC21       * Cat ou (reason for overnight)
          ENDIF
          MATCH     OPARD105,Z70
          IF        !@EQUAL
            MOVE      OPARD105,OPARUT13       * User Defined Time Field 13
          ENDIF
          MATCH     OPARD115,Z70
          IF        !@EQUAL
            MOVE      OPARD115,OPARADST       * hh:mm:ss (Adm Nurse Start Time)
          ENDIF
          MATCH     OPARD116,Z70
          IF        !@EQUAL
            MOVE      OPARD116,OPARADET       * hh:mm:ss (Adm Nurse End Time)
          ENDIF
MVOPAR99  RETURN
+
.*****************************************************************************
.*                          CPOPCB00               Called by: UPDDAY00       *
.*           Clear variables for Caesarean Birth Details                     *
.*****************************************************************************
.
CPOPCB00  MOVE      ZERO,COUNTER
          WHILE     COUNTER < 20
            ADD       ONE,COUNTER
            MOVE      Z70,OPCBD002[COUNTER]
            MOVE      Z70,OPCBD003[COUNTER]
            MOVE      Z70,OPCBD004[COUNTER]
            MOVE      Z70,OPCBD005[COUNTER]
            MOVE      Z70,OPCBD006[COUNTER]
            MOVE      Z70,OPCBD007[COUNTER]
            MOVE      Z70,OPCBD008[COUNTER]
          DO
.
CPOPCB99  RETURN
+
.*****************************************************************************
.*                          MVOPCB00               Called by: UPDDAY00       *
.*           Load variables for Caesarean Birth Details                      *
.*****************************************************************************
.
MVOPCB00  MATCH     OPCBD002[COUNTER],Z70
          IF        !@EQUAL
            MOVE      OPCBD002[COUNTER],OPCBCOUN    * caesarean birth count
          ENDIF
.
          MATCH     OPCBD003[COUNTER],Z70
          IF        !@EQUAL
            MOVE      OPCBD003[COUNTER],OPCBBSEX    * caesarean birth baby sex
          ENDIF
.
          MATCH     OPCBD004[COUNTER],Z70
          IF        !@EQUAL
            MOVE      OPCBD004[COUNTER],OPCBBDOB    * caes. birth date of birth
          ENDIF
.
          MATCH     OPCBD005[COUNTER],Z70
          IF        !@EQUAL
            MOVE      OPCBD005[COUNTER],OPCBBTME    * caes. birth time of birth
          ENDIF
.
          MATCH     OPCBD006[COUNTER],Z70
          IF        !@EQUAL
            MOVE      OPCBD006[COUNTER],OPCBBURN    * caes. birth U/R number
          ENDIF
.
          MATCH     OPCBD007[COUNTER],Z70
          IF        !@EQUAL
            MOVE      OPCBD007[COUNTER],OPCBBWGT    * caes. birth baby weight
          ENDIF
.
          MATCH     OPCBD008[COUNTER],Z70
          IF        !@EQUAL
            MOVE      OPCBD008[COUNTER],OPCBPDTM    * caes. birth plac. del.time
          ENDIF
.
MVOPCB99  RETURN
+
.******************************************************************************
.*                      Validation of CASEKEYZ                                *
.******************************************************************************
VALCAS00  CALL      CLWATTR1
          CALL      CLPATMAS
          CALL      CLPATMSX
          MATCH     SP70,UNIQUEKY
          IF        !@EQUAL
            PACK      KEY10,UNIQUEKY,SP70
            CALL      RDOPDEA3
            BRANCH    OVRCD,VALCAS90
            PACK      CASEKEYZ,OPDAHOSP,OPDADATE,OPDATIME,OPDACLIN,OPDASTAT:
                               OPDACASE,SP70
          ENDIF
.
          MATCH     SP70,CASEKEYZ
          GOTO      VALCAS85 IF EQUAL
.
          PACK      KEY26,CASEKEYZ,SP70
          CALL      RDOPDEA1
          BRANCH    OVRCD,VALCAS90
          MOVE      OPDAADMN,ADMISSNO
          GOTO      VALCAS80
.
VALCAS80  COMPARE   THREE,OPDASTAT
          GOTO      VALCAS91 IF EQUAL
          CALL      CASDET00
          MOVE      ZERO,EXIT
          GOTO      VALCAS99
.
VALCAS85  MOVE      "Case not selected",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          MOVE      ONE,EXIT
          GOTO      VALCAS99
.
VALCAS90  MOVE      "Invalid Case Access",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          MOVE      ONE,EXIT
          GOTO      VALCAS99
.
VALCAS91  MOVE      "SC",CATEGORY
          MOVE      OPDACANC,CODE
          CALL      GETCOD00
          MATCH     ANST,TCINDC3
          IF        @EQUAL
            MOVE      "Patient has been Transferred",ERRORDSC
          ELSE
            MOVE      "Patient has been Cancelled",ERRORDSC
          ENDIF
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          MOVE      ONE,EXIT
          GOTO      VALCAS99
.
VALCAS99  RETURN
.------------------------------------------------------------
. Get Case Details
.------------------------------------------------------------
CASDET00  MOVE      ZERO,CMBSFEE
          MOVE      OPDAADMN,KEY8
          MOVE      OPDAADMN,ADMISSNO
          CALL      GURN0000
          BRANCH    EXIT,CASDET99
          MATCH     "0       ",AURNO
          GOTO      CASDET05 IF EQUAL   * have a UR number
          MATCH     "       0",AURNO
          GOTO      CASDET05 IF EQUAL   * have a UR number
          MATCH     "        ",AURNO
          GOTO      CASDET10 IF NOT EQUAL   * have a UR number
.
.         on pre-admission file
.
CASDET05  MOVE      OPDAADMN,KEY8           * visit number
          CALL      RDPRAM1
          BRANCH    OVRCD,CASDET10          * invalid visit number
.
          MOVE      ZERO,PURNO
          MOVE      PURNO,URNUMBER
          GOTO      CASDET99                * valid patient
.
.         on master file
.
CASDET10  PACK      KEY8,AURNO,SP70
          CALL      RDMAST1
          BRANCH    OVRCD,CASDET99          * invalid UR number
.
          MOVE      PURNO,KEY8
          CALL      RDPMPX21
          IF        OVRCD=1
            CALL      CLPMSPX2
          ENDIF
.
          MOVE      PURNO,URNUMBER
          PACK      KEY19,PURNO,SP70
          CALL      RDSTREA1
CASDET20  CALL      RDKTREA1
          BRANCH    OVRCD,CASDET30
          MATCH     PURNO,WMURNO
          GOTO      CASDET30 IF NOT EQUAL
          MOVE      WMBOOK,KEY8
          MATCH     KEY8,OPDAADMN
          GOTO      CASDET20 IF NOT EQUAL
          GOTO      CASDET99

CASDET30  CALL      CLWATTR1
.
CASDET99  RETURN
+
.******************************************************************************
.                   GURN0000
.    Given the admission number in KEY8/KEY6 this gets the UR number from
.    either the admission or booking master file.
.    Returns : AURNO
.    Routine by Bill Dew 14/03/90
.*******************************************************************************
GURN0000  CALL      RDMISS1                 * read admission file
          BRANCH    OVRCD,GURN5555
.
          PACK      KEY5,ANSC,ANSL,ACLAIM
          CALL      RDCODE1
          IF        OVRCD=0
            MATCH     "1",TCINDC1             * check for overseas
            IF        @EQUAL
              MATCH     "1",TCINDC2           * Use MBS fee amount ?
              IF        @EQUAL
                MOVE      ONE,CMBSFEE
              ENDIF
            ENDIF
          ENDIF
.
          MOVE      ADMISSNO,KEY8
          CALL      RDPTVIS1
          BRANCH    OVRCD,GURN9990          * invalid visit number
.
          MOVE      ADMISSNO,KEY8
          CALL      RDPMVX11
          BRANCH    OVRCD,GURN9990          * invalid visit number
.
GURN5555  CALL      RDBKREC1                * read booking records file
          BRANCH    OVRCD,GURN9990
          MOVE      BKREURNO,AURNO
.
          CALL      RDBKRX11
          BRANCH    OVRCD,GURN9990
          MOVE      ZERO,EXIT               * a valid admission number
          GOTO      GURN9999
.
GURN9990  MOVE      ONE,EXIT                * an invalid admission number
.
GURN9999  RETURN
+
.******************************************************************************
.                   WEUN0000
. Write EDWARD doctor unit ISP Audit
.******************************************************************************
WEUN0000  PACK      PMIWCODE,PMHCHCPC,SP70                  * HCP Code
          MOVE      "08 ",PMIWTYPE                          * Add Unit
          PACK      PMIWOLDV,SP70,SP70,SP70,SP70            * Old Value
          PACK      PMIWNEWV,PMDUUNIT,SP70,SP70,SP70,SP70   * New Value
          CALL      WRIDW000
.
WEUN9999  RETURN
+
.*****************************************************************************
.*                              POPD0000           Called by: PROC0000       *
.*              Process the OPD (S02/S03/S04) message - update PAS database  *
.*****************************************************************************
POPD0000  CALL      IBACLOCK                     * get current date/time
          PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
.
          CALL      CLOUTDAN                * clear Outpatient Direct Actions
.
          MOVE      PURNO,OTDNURNO                         * U/R Number
          UNPACK    MSH00701,OTDNADAT,D6                   * Action Date
          UNPACK    D6,CHOUR,CMIN,CSEC
          PACK      OTDNATIM,CHOUR,COLON,CMIN,COLON,CSEC   * Action Time
          MOVE      " 1",OTDNATYP                          * Action Type
          MOVE      PV101901,D8                            * ???
.0861257  MOVE      PV100501,D8                            * Booking Number
          RJUSTIFY  D8
          MOVE      D8,OTDNVISN                            * Visit Number
          MOVE      PV200801,OTDNVDAT                      * Visit Date
          MOVE      MSH00301,OTDNREQC                      * Requestor Code
.
          MOVE      "HL7RECVR  ",OTDNCUID                  * User ID Created
          MOVE      CURRDATE,OTDNCDAT                      * Date Created
          MOVE      CTIMEIS,OTDNCTIM                       * Time Created
.
          PACK      KEY34,OTDNURNO,OTDNADAT,OTDNATIM,OTDNATYP,OTDNVISN,SP70
          CALL      RAOTDAN1
          IF        OVRCD=1
            CALL      WROTDAN1                   * Write actions record
          ENDIF
.
          CALL      PNTE0000                     * appointment comments (NTE)
.
POPD9999  RETURN
+
.*****************************************************************************
.*                              PNTE0000                                     *
.*                 Process NTE diagnosis segments                            *
.* Requires:  NTECOUNT - number of NTE segments received                     *
.*            NTEFOUND - found NTE segment flag                              *
.*                             0 = one or more NTE segment found             *
.*                             1 = no NTE segment found                      *
.*****************************************************************************
.
.         Check if a NTE segment was received
.
PNTE0000  BRANCH    NTEFOUND,PNTE9999            * no NTE segments received
.
          MOVE      NTECOUNT,SVNTECNT            * save NTE segment count
.
          COMPARE   ZERO,SVNTECNT                * any NTE's to process ?
          GOTO      PNTE9999 IF EQUAL            * no - finished
.
.         There is one or more valid NTE segments
.
          MOVE      ZERO,LINENUMB                * initialise line number
          MOVE      ZERO,NTECOUNT                * initialise NTE segment count
.0861257  CALL      CLRDCO00                     * clear outdcoaf fields
          CALL      CNTE0000                     * clear NTE fields
.
          PACK      KEY15,NTESEGMT,SP20
          CALL      RSTEMP1                      * position on NTE segment
PNTE0080  CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,PNTE0090               * eof - finished
.
          MATCH     NTESEGMT,RTMPSEGI            * same segment still ?
          GOTO      PNTE0090 IF NOT EQUAL        * no - finished
.
          COMPARE   NTECOUNT,RTMPSEGC            * same segment count still ?
          GOTO      PNTE0100 IF EQUAL            * yes
.
          ADD       ONE,NTECOUNT                 * increment NTE segment count
.
          COMPARE   ONE,NTECOUNT                 * first NTE segment ?
          GOTO      PNTE0100 IF EQUAL            * yes
.
.         We have a new segment and therefore have completed loading the
.         fields for the previous NTE segment, so write or update outdcoaf
.
PNTE0090  SUB       ONE,SVNTECNT
          COMPARE   ZERO,SVNTECNT                * last NTE record ?
          GOTO      PNTE9999 IF EQUAL            * yes
.
.0861257  CALL      CLRDCO00                     * no - clear outdcoaf fields
          CALL      CNTE0000                     * clear NTE fields
.
.         Load the relevant field/component
.
PNTE0100  BRANCH    RTMPFLDN,PNTE0110:           * Set ID (SI)
                             PNTE0200:           * Comment Source (ID)
                             PNTE0300:           * Comment (FT)
                             PNTE0400            * Comment Type (CE)
.
.                   Invalid field number, so ignore
.
          GOTO      PNTE0080
.
.         NTE.1  Set ID (SI)
.
PNTE0110  GOTO      PNTE0080
.
.         NTE.2  Comment Source (ID)
.
PNTE0200  GOTO      PNTE0080
.
.         NTE.3  Comment (FT)
.
PNTE0300  BRANCH    RTMPCMPN,PNTE0301            * identifier (ST)
          GOTO      PNTE0080
.
PNTE0301  STRIP     RTMPVRBL
          MOVELPTR  RTMPVRBL,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PNTE0080 IF EQUAL            * no - no change
.
          MATCH     BLANKSTR,RTMPVRBL            * field null ?
          IF        @EQUAL
            PACK      DIM60,SP100                * yes
          ELSE
            PACK      DIM60,RTMPVRBL,SP100       * load Note Comments
            CALL      WDCO0000                   * write to outdcoaf
          ENDIF
          GOTO      PNTE0080
.
.         NTE.4  Comment Type (CE)
.
PNTE0400  BRANCH    RTMPCMPN,PNTE0401:           * identifier (ST)
                             PNTE0402:           * text (ST)
                             PNTE0403:           * name of coding system (ST)
                             PNTE0404:           * alternate identifier (ST)
                             PNTE0405:           * alternate text (ST)
                             PNTE0406            * name of alt. cod. system (ST)
          GOTO      PNTE0080
.
PNTE0401  GOTO      PNTE0080
.
PNTE0402  GOTO      PNTE0080
.
PNTE0403  GOTO      PNTE0080
.
PNTE0404  GOTO      PNTE0080
.
PNTE0405  GOTO      PNTE0080
.
PNTE0406  GOTO      PNTE0080
.
PNTE9999  RETURN
+
.*****************************************************************************
.* Write NTE00301 comment to outdcoaf                                        *
.*****************************************************************************
WDCO0000  MOVE      OTDNURNO,OTDOURNO            * load record variables
          MOVE      OTDNADAT,OTDOADAT
          MOVE      OTDNATIM,OTDOATIM
          MOVE      OTDNATYP,OTDOATYP
.
WDCO0100  ADD       ONE,LINENUMB                 * increment line number
          MOVE      LINENUMB,OTDOCLNO
.
          PACK      KEY29,OTDOURNO,OTDOADAT,OTDOATIM,OTDOATYP,OTDOCLNO
          CALL      RAOTDCO1
          IF        OVRCD<>1
            GOTO      WDCO0100
          ENDIF
.
          RESET     DIM60
          PACK      OTDOCOMM,DIM60,SP100         * Comment Line
.
          MOVE      OTDNCUID,OTDOCUID            * User ID Created
          MOVE      OTDNCDAT,OTDOCDAT            * Date Created
          MOVE      OTDNCTIM,OTDOCTIM            * Time Created
.
          MOVE      SP70,OTDOUUID                * User ID Updated
          MOVE      SP70,OTDOUDAT                * Date Updated
          MOVE      SP70,OTDOUTIM                * Time Updated
.
          MOVE      SP70,OTDOSPAR
.
          CALL      WROTDCO1                     * write new record

          MOVE      SP100,DIM60
          CLEAR     DIM60                        * clear comment line
WDCO9999  RETURN
+
.****************************************************************************
.*                              GENDR000               Called by: VPID0000  *
.*    Validate PID.8 (patient sex) against Cat.G HDP default / indc.1       *
.****************************************************************************
.         Check for the first active Cat G code where the HDP Default or
.         indicator 1 matches the value sent
.
GENDR000  MOVE      SP1,D1
          MATCH     "1",PTCNGNDR                 * receive as stored ?
          IF        @EQUAL
            CALL      GENAS000                   * yes - validate actual code
            GOTO      GENDR999
          ENDIF
.
          PACK      KEY5,ANSG,SP5
          CALL      RDSCODE1                     * Position on Cat G
GENDR100  CALL      RDKCODE1                     * read next record
          BRANCH    OVRCD,GENDR950               * end of file
.
          MATCH     "G ",TCODE                   * category G still ?
          GOTO      GENDR950 IF NOT EQUAL        * no
.
          MATCH     ANS,THCSCOD                  * matches HDP default ?
          IF        !@EQUAL
            MATCH     ANS,TCINDC1                * matches indicator 1 ?
            GOTO      GENDR100 IF NOT EQUAL      * no - get next record
          ENDIF
.
          IF        MESSGNUM = 1 | MESSGNUM = 2
            MATCH     ANSI,PTCOACTV              * check active for A28/A31
            GOTO      GENDR100 IF EQUAL          * inactive - ignore record
          ENDIF
.
          IF        MESSGNUM = 8
            MATCH     "EMR",EVN00401
            IF        @EQUAL
              MATCH     ANSI,PTCOACTV            * check active for A04 EMR
              GOTO      GENDR100 IF EQUAL        * inactive - ignore record
            ENDIF
          ENDIF
.
          MOVE      ACODE,D1                     * save gender code
.
GENDR900  MOVE      ZERO,EXIT                    * valid
          GOTO      GENDR999
.
GENDR950  MOVE      ONE,EXIT                     * invalid
GENDR999  RETURN
+
.****************************************************************************
.*                              GENAS000               Called by: VPID0000  *
.*    Validate PID.8 (patient sex) against Cat.G Code value as stored       *
.****************************************************************************
.         Check that the value sent matches an actual Cat G code
.
GENAS000  PACK      KEY5,ANSG,SP1,ANS,SP5
          CALL      RDCODE1                      * Read Cat G
          BRANCH    OVRCD,GENAS950               * end of file
.
          IF        MESSGNUM = 1 | MESSGNUM = 2
            MATCH     ANSI,PTCOACTV              * check if inactive (A28/A31)
            GOTO      GENAS950 IF EQUAL          * yes - invalid record
          ENDIF
.
          MOVE      ACODE,D1                     * save gender code
.
GENAS900  MOVE      ZERO,EXIT                    * valid
          GOTO      GENAS999
.
GENAS950  MOVE      ONE,EXIT                     * invalid
GENAS999  RETURN
+
.*****************************************************************************
.*                              DEFINP00                                     *
.*          Set default MOSAIQ codes when/if required in webPAS (INP)        *
.*****************************************************************************
DEFINP00  COMPARE   TEN7,MESSGNUM
          GOTO      DEFINP70 IF NOT EQUAL        * SIU^S12 (MOSAIQ) ?
.
          MOVE      "VB",DEFTCATG                * default category
          MOVE      "3",DEFTINDC                 * check indicator
          CALL      GDCOD000                     * check for default code
          BRANCH    EXIT,DEFINP10                * no default set
.
          MOVE      DEFTCODE,PMVXCADM            * Admission Criteria (Cat VB)
.
DEFINP10  MOVE      "VI",DEFTCATG                * default category
          MOVE      "2",DEFTINDC                 * check indicator
          CALL      GDCOD000                     * check for default code
          BRANCH    EXIT,DEFINP20                * no default set
.
          MOVE      DEFTCODE,PMVXIDUS            * Intended Stay (Cat VI)
.
DEFINP20  MOVE      "ap",DEFTCATG                * default category
          MOVE      "2",DEFTINDC                 * check indicator
          CALL      GDCOD000                     * check for default code
          BRANCH    EXIT,DEFINP30                * no default set
.
          MOVE      DEFTCODE,PMVXAPWD            * Admitting Point (Cat ap)
.
DEFINP30  MOVE      "A ",DEFTCATG                * default category
          MOVE      "17",DEFTINDC                * check indicator
          CALL      GDCOD000                     * check for default code
          BRANCH    EXIT,DEFINP40                * no default set
.
          MOVE      DEFTCODE,ATYPE               * CMBS Class (Cat A)
.
DEFINP40  MOVE      "P ",DEFTCATG                * default category
          MOVE      "15",DEFTINDC                * check indicator
          CALL      GDCOD000                     * check for default code
          BRANCH    EXIT,DEFINP50                * no default set
.
          MOVE      DEFTCODE,PV100401            * Admission Type (Cat P)
.
DEFINP50  MOVE      "S ",DEFTCATG                * default category
          MOVE      "16",DEFTINDC                * check indicator
          CALL      GDCOD000                     * check for default code
          BRANCH    EXIT,DEFINP60                * no default set
.
          MOVE      DEFTCODE,PV101401            * Admission Source (Cat S)
.
DEFINP60  MOVE      "CC",DEFTCATG                * default category
          MOVE      "23",DEFTINDC                * check indicator
          CALL      GDCOD000                     * check for default code
          BRANCH    EXIT,DEFINP70                * no default set
.
          MOVE      DEFTCODE,PV101801            * Patient Care Type (Cat CC)
.
DEFINP70  COMPARE   TEN9,MESSGNUM
          GOTO      DEFINP80 IF NOT EQUAL        * SIU^S15 (MOSAIQ) ?
.
          MOVE      "PC",DEFTCATG                * default category
          MOVE      "3",DEFTINDC                 * check indicator
          CALL      GDCOD000                     * check for default code
          BRANCH    EXIT,DEFINP80                * no default set
.
          MOVE      DEFTCODE,PTMIS003            * Cancellation Reason (Cat PC)
.
DEFINP80
.
DEFINP99  RETURN
+
.*****************************************************************************
.*                              DEFOUT00                                     *
.*          Set default MOSAIQ codes when/if required in webPAS (OUT)        *
.*****************************************************************************
DEFOUT00  MOVE      "CV",DEFTCATG                * default category
          MOVE      "10",DEFTINDC                * check indicator
          CALL      GDCOD000                     * check for default code
          BRANCH    EXIT,DEFOUT10                * no default set
.
          MOVE      DEFTCODE,OUTBB047            * visit type (Cat CV)
.
DEFOUT10  MOVE      SP3,REFRDEPT
          MOVE      "CG",DEFTCATG                * default category
          MOVE      "27",DEFTINDC                * check indicator
          CALL      GDCOD000                     * check for default code
          BRANCH    EXIT,DEFOUT20                * no default set
.
          MOVE      DEFTCODE,REFRDEPT            * referral dept (Cat CG)
.
DEFOUT20  COMPARE   TEN7,MESSGNUM
          GOTO      DEFOUT30 IF NOT EQUAL        * SIU^S12 (MOSAIQ) ?
.
          MOVE      "OB",DEFTCATG                * default category
          MOVE      "2",DEFTINDC                 * check indicator
          CALL      GDCOD000                     * check for default code
          BRANCH    EXIT,DEFOUT30                * no default set
.
          MOVE      DEFTCODE,OUTBB023            * transport allocation (Cat OB)
.
DEFOUT30  COMPARE   TEN7,MESSGNUM
          GOTO      DEFOUT40 IF NOT EQUAL        * SIU^S12 (MOSAIQ) ?
.
          MOVE      OSTCATG,DEFTCATG             * default category
          MOVE      "16",DEFTINDC                * check indicator
          CALL      GDCOD000                     * check for default code
          BRANCH    EXIT,DEFOUT40                * no default set
.
          MOVE      DEFTCODE,OUTBB001            * source of referral (Cat LQ/S)
.
DEFOUT40  COMPARE   TEN8,MESSGNUM
          GOTO      DEFOUT50 IF NOT EQUAL        * SIU^S13 (MOSAIQ) ?
.
          MOVE      "RR",DEFTCATG                * default category
          MOVE      "2",DEFTINDC                 * check indicator
          CALL      GDCOD000                     * check for default code
          BRANCH    EXIT,DEFOUT50                * no default set
.
          MOVE      DEFTCODE,OUTBB014            * reschedule reason (Cat RR)
.
DEFOUT50  COMPARE   TEN9,MESSGNUM
          GOTO      DEFOUT60 IF NOT EQUAL        * SIU^S15 (MOSAIQ) ?
.
          MOVE      "CB",DEFTCATG                * default category
          MOVE      "2",DEFTINDC                 * check indicator
          CALL      GDCOD000                     * check for default code
          BRANCH    EXIT,DEFOUT60                * no default set
.
          MOVE      DEFTCODE,OUTBB053            * cancellation reason (Cat CB)
.
.
DEFOUT60  COMPARE   TWENTY,MESSGNUM
          GOTO      DEFOUT70 IF NOT EQUAL        * SIU^S26 (MOSAIQ) ?
.
          MOVE      "CA",DEFTCATG                * default category
          MOVE      "2",DEFTINDC                 * check indicator
          CALL      GDCOD000                     * check for default code
          BRANCH    EXIT,DEFOUT70                * no default set
.
          MOVE      DEFTCODE,OUTBB005            * DNA reason (Cat CA)
.
DEFOUT70
.
DEFOUT99  RETURN
+
.*****************************************************************************
.*                              LINKR000                                     *
.*          Link MOSAIQ appointment to an existing referral                  *
.*****************************************************************************
LINKR000  MATCH     SP70,REFRDEPT
          GOTO      LINKR999 IF EQUAL            * no MOSAIQ department set
.
          PACK      KEY16,OBAURNO,SP70
          CALL      RSALREF2
LINKR100  CALL      RKALREF2
          BRANCH    OVRCD,LINKR999
.
          MATCH     OBAURNO,ALREURNO             * same u/r ?
          GOTO      LINKR999 IF NOT EQUAL
.
          MATCH     "0",ALRESTAT                 * Waiting ?
          IF        !@EQUAL
            MATCH     "1",ALRESTAT               * Active ?
            GOTO      LINKR100 IF NOT EQUAL
          ENDIF
.
          MATCH     REFRDEPT,ALREDEPT            * MOSAIQ department ?
          GOTO      LINKR100 IF NOT EQUAL
.
          PACK      KEY16,ALREVISN,OBAOUTNO,SP70
          CALL      RAALLNK1
          IF        OVRCD=1
            MOVE      ALREVISN,ALLNVISN
            MOVE      OBAOUTNO,ALLNLNKV
            MOVE      OBASITE,ALLNSITE
            MOVE      OBACLIN,ALLNCLIN
            MOVE      OBADATE,ALLNDATE
            MOVE      OBASTRT,ALLNSTRT
            MOVE      OBASLOT,ALLNSLOT
            MOVE      ZERO,ALLNMOHR
            MOVE      SP1,ALLNRCST
            MOVE      ZERO,ALLNSTAT
            MOVE      SP70,ALLNSPAR
            CALL      WRALLNK1                   * write link to A/H referral
.
            MOVE      ONE,AUDTTYPE               * write history record
            CALL      WAALLN00
.
            CALL      URSR0000                   * Update Referral Status
.0890602    BOOKFLAG = 2 @ WRTBOK45 ?? or use ALLWEB02 code? (no: use URSR0000)
          ENDIF
.
LINKR999  RETURN
+
.*****************************************************************************
.*                              INPIN000                                     *
.*                 Init variables for the SIU (INP) messages                 *
.*****************************************************************************
INPIN000  OPEN      DISPTLA1,"disptlaf"
          OPEN      EMRVISA3,"emrvisaf"
          OPEN      PATASFA1,"patasfaf"
          OPEN      PATBMDA2,"patbmdaf"
          OPEN      PATDADA1,"patdadaf"
          OPEN      PATPNIA1,"patpniaf"
          OPEN      PMSBRQA2,"pmsbrqaf"
          OPEN      PMSCTCA1,"pmsctcaf"
          OPEN      PMSWX1A1,"pmswx1af"
          OPEN      PATONHA1,"patonhaf"
.
          READ      CONTROLF,FIFTY9;*220,PTCNUADT
          READ      CONTROLF,SEVENTY9;*120,PTCNUEOC
          READ      CONTROLF,HUND16;*222,PTCNXCOM
          READ      CONTROLF,HUND19;*182,PTCNEPIS
.
          CALL      CLPATMIS
          CALL      CLWATTR1
          CALL      CLWATTX1
          CALL      CLPATVIS
          CALL      CLPMSVX1
.
          MOVE      SP100,WEBTITLE
          CLEAR     WEBTITLE
.
          STRIP     MSH00301
          MOVELPTR  MSH00301,FORM3
          IF        FORM3 = 0
            MOVE      "HL7RECVR  ",USERID        * default created by
          ELSE
            PACK      USERID,MSH00301,SP10       * use sending application
          ENDIF
.
          CALL      CLWEBSEC
          PACK      KEY10,USERID,SP10
          CALL      RDWBSE1
          IF        OVRCD = 1
            MOVE      USERID,ERRORDSC
            STRIP     ERRORDSC
            ENDSET    ERRORDSC
            APPEND    " is not a valid webPAS User ID",ERRORDSC
            RESET     ERRORDSC
            MOVE      "103",ERRORNUM
            CALL      EROR0000
            GOTO      INPIN950
          ELSE
            MOVE      WBSEPCD,PASSCODE           * operator id
            MOVE      WBSESIT,OUTSITPR           * outpatient site
          ENDIF
.
INPIN900  MOVE      ZERO,EXIT                    * no error
          GOTO      INPIN999
.
INPIN950  MOVE      ONE,EXIT                     * error
INPIN999  RETURN
+
.*****************************************************************************
.*                              OUTIN000                                     *
.*                 Init variables for the SIU (OUT) messages                 *
.*****************************************************************************
OUTIN000  PACK      CFILEPRE,OUTFILPR,SP70       * open with out file prefix
          MATCH     SP70,CFILEPRE
          IF        @EQUAL
            MOVE      "out",CFILEPRE
          ENDIF
          CALL      OPNOUT00                     * Open Outpatient Files
.
          OPEN      ACCAUDA1,"accaudaf"
          OPEN      COMDEPA2,"comdepaf"
          OPEN      DISPTLA1,"disptlaf"
          OPEN      HICCLMA2,"hicclmaf"
          OPEN      OUTRF1A1,"outrf1af"
          OPEN      OUTRF1A2,"outrf1af"
          OPEN      PMSADWA1,"pmsadwaf"
          OPEN      PMSCAUA1,"pmscauaf"
          OPEN      PMSTSPA1,"pmstspaf"
          OPEN      PMSWX1A1,"pmswx1af"
.
          READ      CONTROLF,THIRTY2;*108,OTCNCREV,*111,OTCNAUPD:
                                     *128,OTCNREVC,*131,OTCNINTR
          READ      CONTROLF,SEVENTY1;*200,CCCNSVHM
          READ      CONTROLF,HUND05;*210,PTCNLCLM
          READ      CONTROLF,HUND12;*96,PTCNH7AC
          READ      CONTROLF,HUND16;*222,PTCNXCOM
.
          CALL      CLRBB000                     * clear cgis for outbb1af
          CALL      CPOTPC00                     * clear cgis for outprcaf
          CALL      CPVXTF00                     * clear cgis for pmsvx1af
.
          MOVE      SP100,WEBTITLE
          CLEAR     WEBTITLE
.
OUTIN999  RETURN
+
.*****************************************************************************
.*                              PS12O000           Called by: PROC0000       *
.*              Process the S12 (OUT) message - write/update PAS database    *
.*****************************************************************************
PS12O000  CALL      OUTIN000                * initialise vars / open files
.
          CALL      DEFOUT00                * set default codes if required
.
          CALL      SS12O000                * set variables for database
          BRANCH    EXIT,PS12O999           * error - stop processing
.
          CALL      WRTBOK00                * write new outpatient booking
          IF        EXIT = 1
            MATCH     "Error",WEBTITLE      * only stop for errors
            IF        @EQUAL
              MOVE      WEBTITLE,ERRORDSC   * error writing booking
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      PS12O999
            ENDIF
          ENDIF
.
.          MATCH     "1",PTCNUNET
.          IF        @EQUAL
.            MOVE      "01",KEY2                 * IHI Validation
.            PACK      KEY11,WBSEUID,SP70        * User ID
.            PACK      KEY50,OBAURNO,SP70
.            CALL      WIPL0000                  * Write to polling table
.          ENDIF
.
          CALL      LINKR000                * link appt to existing referral 
.
          MOVE      OBAOUTNO,AADMNO
          CALL      MVISA000                * Create alternate visit number
          IF        EXIT = 1
            MOVE      "Alternate visit id already exists",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
PS12O999  RETURN
+
.*****************************************************************************
.*                              SS12O000           Called by: PS12O000       *
.*                 Set variables for the S12 (OUT) message                   *
.*****************************************************************************
SS12O000  MOVE      PURNO,URNUMBER               * ur number
          MOVE      PMPXINTR,PMSVX093            * interpreter reqd (visit)
          MOVE      PFUNDH,OUTBB008              * health fund
          MOVE      PFNDTB,OUTBB009              * health fund table
.0890602  MOVE      xxxxxx,OUTBB036              * send letter / notify gp?
.0890602  MOVE      OTHETCOD,OUTBB072            * tier 2 code (Cat NC) (tag?)
          MOVE      SP70,DISPT001                * disaster code
          MOVE      ZERO,VSCMTFLG                * no vist comments
          MOVE      ONE,OTXFLAG                  * no booking comments
          MOVE      " 6",REPORTNO                * reportno for write booking
          MOVE      " 5",UPDATETY                * new booking
          MOVE      Z70,WAITLKEY                 * waiting list key
.
          STRIP     PV102001
          MOVELPTR  PV102001,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS12O010 IF EQUAL
.
          MATCH     BLANKSTR,PV102001            * field null ?
          IF        @EQUAL
            MOVE      SP70,OUTBB002
          ELSE
            MOVE      PV102001,OUTBB002          * claim code
          ENDIF
.
SS12O010  STRIP     PV18HCPC
          MOVELPTR  PV18HCPC,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS12O020 IF EQUAL
.
          MATCH     BLANKSTR,PV18HCPC            * field null ?
          IF        @EQUAL
            MOVE      SP70,OUTBB029
          ELSE
            MOVE      PV18HCPC,OUTBB029          * referring gp
          ENDIF
.
SS12O020  BRANCH    NTEFOUND,SS12O030            * no NTE segments received
.
          STRIP     NTE00301
          MOVELPTR  NTE00301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS12O030 IF EQUAL
.
          MATCH     BLANKSTR,NTE00301            * field null ?
          IF        @EQUAL
            MOVE      SP70,PMSVX052
          ELSE
            MOVE      NTE00301,PMSVX052          * comments (pmvxudf1)
          ENDIF
.
SS12O030  PACK      PADMAVIS,PV101901,SP70       * Alt. Visit Number (MOSAIQ)
          CALL      MALT0000                     * check if MOSIAQ id exists
          BRANCH    EXIT,SS12O948                * error - stop processing
.
.0890602  MOVE      OBASITE+OBACLIN+OBADATE+OBASTRT+OBASLOT,NEWSLOTK
.NEWSLOTK="OPD   EBON  2020091409:00 30"
.
.OUTSITPR = OBASITE (6)
.AIL3CLIN or AIP3DOCT = OBACLIN (6)
.SCH01104 = OBADATE+OBASTRT (8+5)
.SLOT     = (3)
.NEWSLOTK = (28)
.
SS12O050  MOVE      SP70,NEWSLOTK
          CLEAR     NEWSLOTK
          PACK      D6,OUTSITPR,SP70
          APPEND    D6,NEWSLOTK                  * site
          MATCH     "1",PTCNAILP
          IF        @EQUAL
            PACK      D6,AIL3CLIN,SP70           * use AIL.3
          ELSE
            PACK      D6,AIP3DOCT,SP70           * use AIP.3
          ENDIF
          APPEND    D6,NEWSLOTK                  * clinic
          UNPACK    SCH01104,D8,D2,KEY2
          APPEND    D8,NEWSLOTK                  * date
          RESET     NEWSLOTK
          PACK      D5,D2,COLON,KEY2             * time
.
          MOVE      ZERO,OBADTFLG
          MOVE      SP5,SAVOBAST
          PACK      KEY28,NEWSLOTK,SP70          * find clinic for booking
          CALL      RDSBOKA1
SS12O100  CALL      RDKBOKA1
          BRANCH    OVRCD,SS12O949
.
          MATCH     OUTSITPR,OBASITE
          IF        !@EQUAL
            IF        OBADTFLG = 1
              GOTO      SS12O200                 * add new slot for clinic date
            ELSE
              GOTO      SS12O949                 * clinic date doesn't exist
            ENDIF
          ENDIF
.
          MATCH     D6,OBACLIN
          IF        !@EQUAL
            IF        OBADTFLG = 1
              GOTO      SS12O200                 * add new slot for clinic date
            ELSE
              GOTO      SS12O949                 * clinic date doesn't exist
            ENDIF
          ENDIF
.
          MATCH     D8,OBADATE
          IF        !@EQUAL
            IF        OBADTFLG = 1
              GOTO      SS12O200                 * add new slot for clinic date
            ELSE
              GOTO      SS12O949                 * clinic date doesn't exist
            ENDIF
          ENDIF
.
          MOVE      ONE,OBADTFLG                 * clinic date exists
          MOVE      OBASTRT,SAVOBAST             * save session start time
.
          MATCH     D5,OBATIME
          IF        @EQUAL
            COMPARE   ZERO,OBASTAT               * slot time exists - empty ?
            IF        @EQUAL
              GOTO      SS12O500                 * empty - so use it
            ELSE
              GOTO      SS12O100                 * not empty - so check next
            ENDIF
          ENDIF
.
          MATCH     D5,OBATIME
          IF        @LESS
            GOTO      SS12O100                   * check next slot time
          ENDIF
.
SS12O200  MOVE      OUTBB047,NEWSLTYP            * MOSAIQ slot type
          MOVE      D5,NEWSLTIM                  * requested slot time
          PACK      SESSKEYS,NEWSLOTK,SAVOBAST,SP70
          CALL      ADDSLT00                     * need to add new slot
          BRANCH    EXIT,SS12O945
.
SS12O500  PACK      NEWSLOTK,OBASITE,OBACLIN,OBADATE,OBASTRT,DOBASLOT
.
.         Need to read following tables for Tier 2 Code (TSK 0914201)
          PACK      KEY25,OBASITE,OBACLIN,OBADATE,OBASTRT
          CALL      RDSESA1                      * session record on file ?
          BRANCH    OVRCD,SS12O900               * no
.
          PACK      KEY28,OSESITE,OSECLIN,OSEDAY,OSESTRT,OSESSHNO,OSESSDAT
          CALL      RDOTHED1                     * master header rec. on file ?
          BRANCH    OVRCD,SS12O900               * no
.
          MOVE      OTHETCOD,OUTBB072            * tier 2 code (Cat NC)
.
.0890602  MOVE      "R",OUTBB047
.0890602  Check Cat CV in ADDBOK00?
.
.0890602  MOVE      HL7RECVR,USERID? Done
.0890602  Check pmsvx093 (PMVXINTR) Done
.0890602  MOVE      Z70,OUTBBxxx (VALICD00)? Done
.0890602  MOVE      Z70,OUTBBxxx (MOVBB000)? Done
.0890602  MOVE      Z70,OTPRCxxx (MVOTPC00)? Done
.0890602  MOVE      Z70,PMSVXxxx (MVVXTF00)? Done - check
.0890602  Read parameters (e.g. PTCNXCOM,PTCNLCLM,PTCNH7AC) Done (these 3)
.0890602  MOVE      ZERO,OTCNINTR? (WRTBOK60) (done - parameter)
.0890602  Check PTCNUNET after WRTBOK00 (MAIN1600) (done - parameter)
.0890602  Check outbb002,008,009,047,072 (Done)
.0890602  Check front-end: Clinic/visit type/claim type/hfund&table (done)
.0890602  Check dispt001 (DISVAL00) (done)
.0890602  MOVE      ONE,OTXFLAG? (XWPCOM00) (Done = no comments to upd)
.0890602  MOVE      ONE,VSCMTFLG? (UPVCM000) (Done)
.0890602  MOVE      ZERO,VSCMTLIN? (UPVCM000) (Done)
.0890602  MOVE      " 5",UPDATETY? Done
.0890602  MOVE      " 6",REPORTNO? (e.g. for DGCLICON in REAP0000) (Done)
.0890602  Check value of CASEKEYS (DIM 28 ?!) (Done)
.
.0890602  Check value of OBADATE="20200914"/CLINDATE=" 2020 10:00" (WRTBOK60?)
.0890602  Check value of OBBCTYP,OTBBSNDL (outbb036),OTBBOPER (outbb039)
.
SS12O900  MOVE      ZERO,EXIT
          GOTO      SS12O999
.
SS12O945  MOVE      WEBTITLE,ERRORDSC            * error adding slot
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      SS12O950
.
SS12O948  MOVE      "Alternate visit id already exists",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      SS12O950
.
SS12O949  MOVE      "Error: Cannot find clinic slot for booking",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      SS12O950
.
SS12O950  MOVE      ONE,EXIT
SS12O999  RETURN
+
.*****************************************************************************
.*                              PS12I000           Called by: PROC0000       *
.*              Process the S12 (INP) message - write/update PAS database    *
.*****************************************************************************
PS12I000  CALL      INPIN000                * initialise vars / open files
.
          CALL      SS12I000                * set variables for database
          BRANCH    EXIT,PS12I999           * error - stop processing
.
          CALL      WS12I000                * write the record details
          BRANCH    EXIT,PS12I999           * error
.
.0890602  MOVE      OBAOUTNO,AADMNO
          CALL      MVISA000                * Create alternate visit number
          IF        EXIT = 1
            MOVE      "Alternate visit id already exists",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      PS12I999
          ENDIF
.
          CALL      ADDVIS00                     * write MR visit link
          CALL      WRCPT000                     * check if current patient
          CALL      WRINT000                     * write interpreter details
          CALL      BRDSIU00                     * broadcast HL7 A14/A05 (SIU)
          CALL      AEXP0000                     * write expected payors
          MOVE      PURNO,URNUMBER
          MOVE      AADMNO,ADMISSNO
          PROC      BBUP0000                     * Bed Board update
.
PS12I999  RETURN
+
.*****************************************************************************
.*                                   BRDSIU00                                *
.*                           Broadcast the pre-admission (SIU)               *
.*****************************************************************************
BRDSIU00  CALL      PMIGTNID                   * get national id for dgate write
          MOVE      NMPNUMB,PTNINMPI
          MOVE      TWO,HL7TRGID
          MOVE      "PREADMIT",HL7INCLD
          PROC      DGCLICPE                    * broadcast change Pre-admission
BRDSIU99  RETURN
+
.*****************************************************************************
.*                                   UPDSIU00                                *
.*                     Broadcast the preadmission update (SIU)               *
.*****************************************************************************
UPDSIU00  PACK      KEY8,ADMISSNO,SP70
          CALL      RDMISS1
          BRANCH    OVRCD,UPDSIU99
.
          PACK      KEY8,AURNO,SP70
          CALL      RDMAST1
          BRANCH    OVRCD,UPDSIU99
.
          PACK      KEY8,AURNO,SP70
          CALL      RDPMPX21
          IF        OVRCD = 1
            CALL      CLPMSPX2
          ENDIF
.
          PACK      KEY8,ADMISSNO,SP70
          CALL      RDVISA1
          IF        OVRCD=1
            CALL      CLPATVIS
          ENDIF
.
          PACK      KEY8,ADMISSNO,SP70
          CALL      RDDSCH1
          IF        OVRCD=1
            CALL      CLPATDSC
          ENDIF
.
          PACK      KEY8,ADMISSNO,SP70
          CALL      RDRESP1
          IF        OVRCD=1
            CALL      CLPATRE1
          ENDIF
.
          CALL      PMIGTNID            * get national id for dgate write
          MOVE      NMPNUMB,PTNINMPI
          MOVE      FORTY5,HL7TRGID
          MOVE      SP8,HL7INCLD
          PROC      DGCLICCP            * broadcast change Pre-admission
.
UPDSIU99  RETURN
+
.*****************************************************************************
.*                                   GDUNL000                                *
.*                   Get first active unit code linked to doctor             *
.*****************************************************************************
GDUNL000  PACK      KEY9,AIP3LDOC,SP70
          MATCH     SP70,KEY9
          GOTO      GDUNL950 IF EQUAL            * blank doctor code
.
          CALL      RSPMDUN1
GDUNL100  CALL      RKPMDUN1
          BRANCH    OVRCD,GDUNL950               * doctor has no linked units
.
          MATCH     AIP3LDOC,PMDUDOCT
          GOTO      GDUNL950 IF NOT EQUAL        * doctor has no linked units
.
          PACK      KEY5,ANSA,ANSC,PMDUUNIT,SP70
          CALL      RDCODE1
          BRANCH    OVRCD,GDUNL100               * unit code does not exist
.
          MATCH     ANSI,PTCOACTV
          GOTO      GDUNL100 IF EQUAL            * unit code not active
.
          PACK      ACLSSFT,PMDUUNIT,SP70        * save unit linked to doctor
          GOTO      GDUNL999
.
GDUNL950  PACK      ACLSSFT,SP70                 * no unit linked to doctor
GDUNL999  RETURN
+
.*****************************************************************************
.*                              SS12I000           Called by: PS12I000       *
.*                 Set variables for the S12 (INP) message                   *
.*****************************************************************************
.PATWEB89:
.=========
.         UPDATETY = 1
.         BOARDERF = 0
.         ADMITBOX = 0
.         CALL      UPPRE000                * Update Pre-Admission
.... CALL VALDWB00
.
. CALL INIVAR00 - Initialise Pre-admission variables
.         PREADBOK = 0
.         Pre-Admit by U/R Number
.
.READ PTCNXCOM
.
.PTMAS00,PMPXI cgi vars
.PPMI0000 ?? not posting pmi details
. PTCNPREG = 0
.
.CALL UPDMIS00 (admiss cgis)
.NXTA0000 - Get Next Admission Number -  From PATPRG31
.CALL  PPRE3200
.PPRE5000
.CFEETYP = 0
.PTCNNEWC
. patient is responsible for account
.
.PRAD0500  MOVE      PTMASNAM,PACSNAMX
.PTVIS cgis
...
.CALL BRDPRE00 (broadcast preadmn)
.PADM9000
.MOVE      "Patient Pre-Admitted Successfully",WEBTITLE
.EXIT = 2
.PROADM91
.
.=====================================================
SS12I000  MOVE      PURNO,PADMURNO               * ur number
.
SS12I005  PACK      PADMAVIS,PV101901,SP70       * Alt. Visit Number (MOSAIQ)
          CALL      MALT0000                     * check if MOSIAQ id exists
          BRANCH    EXIT,SS12I948                * error - stop processing
.==============================================================
.From SA050000:
.==============================================================
.         First generate a new visit number
.
SS12I050  READ      CONTROLF,HUND30;*75,PTCNUANV      * Using AN Visit Numbers
.
          MATCH     "1",PTCNUANV
          IF        @EQUAL
            CALL      GANV0000                * Get next AN visit number
            MOVE      PTCNNXTV,KEY8
          ELSE
            MOVE      " 10",PRXCODE                * Set to sector 10
            CALL      GETSLK00                     * Lock sector 10
            READ      CONTROLF,TEN;*1,FORM8
            ADD       ONE,FORM8
            WRITAB    CONTROLF,TEN;*1,FORM8
            CALL      RELSLK00                     * Release sector 10 lock
            SUB       ONE,FORM8
            MOVE      FORM8,KEY8
          ENDIF
.
          CALL      RDAVISA1                     * visit already on file ?
          COMPARE   ZERO,OVRCD
          GOTO      SS12I050 IF EQUAL            * yes - get next visit no
.
SS12I100  MOVE      KEY8,AADMNO                                 * admit number
          MOVE      PADMURNO,AURNO                              * ur number
          UNPACK    SCH01104,ADATE,HOURTM,MINTIME,SECTIME      * admit date/time
          MOVE      ADATE,ALACDTE
          PACK      ATIME,HOURTM,COLON,MINTIME,COLON,SECTIME,ZERO,ZERO
          MOVE      ONE,ASTAT
.
          MATCH     PBDATE,ADATE                 * adm.date < DOB ?
          GOTO      SS12I949 IF LESS
.
          CALL      DEFINP00                * set default codes if required
.
          MATCH     BLANKSTR,PV100301
          IF        !@EQUAL
            PACK      PTMIXWRD,PV100301,SP70                    * expected ward
          ENDIF
          MATCH     BLANKSTR,PV100303
          IF        !@EQUAL
            PACK      PTMIEBED,PV100303,SP70                    * expected bed
          ENDIF
.
          MATCH     BLANKSTR,AIP3HCPC
          IF        !@EQUAL
            PACK      PMVXDOCA,AIP3HCPC,SP70                    * att.doctor
          ENDIF
.
          MATCH     BLANKSTR,AIP3LDOC
          IF        !@EQUAL
            PACK      ADOCTA,AIP3LDOC,SP70                      * att.doctor
            CALL      GDUNL000                                  * linked unit
          ENDIF
.
          MATCH     BLANKSTR,PV18HCPC
          IF        !@EQUAL
            PACK      PMVXRHC1,PV18HCPC,SP70                    * ref.doctor
          ENDIF
.
          MATCH     BLANKSTR,PV101401
          IF        !@EQUAL
            PACK      ASRCE,PV101401,SP70                       * category S
          ENDIF
.
          MATCH     BLANKSTR,PV100401
          IF        !@EQUAL
            PACK      ACLSS,PV100401,SP70                       * category P
          ENDIF
.
          MATCH     BLANKSTR,PV101801
          IF        !@EQUAL
            PACK      ACARE,PV101801,SP70                       * category CC
          ENDIF
.
          MATCH     BLANKSTR,PV102001
          IF        !@EQUAL
            PACK      ACLAIM,PV102001,SP70                      * category CL
          ENDIF
.
          BRANCH    NTEFOUND,SS12I200            * no NTE segments received
.
          MATCH     BLANKSTR,NTE00301
          IF        !@EQUAL
            PACK      ADIAG1,NTE00301,SP70,SP70                 * diagnosis
          ENDIF
.
SS12I200  MOVE      ZERO,ASTAY                   * MOSAIQ default 0
.
          MOVE      PFUNDH,AFUNDH                * Default HF details from PMI
          MOVE      PFNDTB,AFNDTB
          MOVE      PFNDMM,AFNDMM
          MOVE      AFNDMM,PMVXFNDM
.
          MOVE      USERID,PTMIWEBC
          MOVE      CURRDATE,PTMIDATC
          MOVE      CTIMEIS,PTMITIMC
          REP       " 0",PTMITIMC
.
          MOVE      SCH22HSP,PMVXMHOS            * hospital code from SCH.22
.
.         Default common fields from PMI
.
          MOVE      PMPXABRG,PMVXABRG            * aboriginality
          MOVE      PMPXLNG1,PMVXLNG1            * preferred language
          MOVE      PPOST,PMVXPOST               * postcode
          MOVE      PMPXPRVI,PMVXPIND            * Privacy Indicator
          MOVE      PMPXCRIN,PMVXCSNR            * Consent Release of info
          MOVE      PMPXHOML,PMVXHOME            * Homeless status
.
          MOVE      AADMNO,PMVXVISN              * set other pmsvx1af fields
          MOVE      ADATE,PMVXVSDT
          MOVE      CURRDATE,PMVXCDTE
          MOVE      CTIMEIS,PMVXCTIM
          REP       " 0",PMVXCTIM
          MOVE      USERID,PMVXWEBC
.
SS12I900  MOVE      ZERO,EXIT
          GOTO      SS12I999
.
.         Error messages
.
SS12I948  MOVE      "Alternate visit id already exists",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      SS12I950
.
SS12I949  MOVE      "PV2.8: Admission Date less than DOB",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      SS12I950
.
SS12I950  MOVE      ONE,EXIT
SS12I999  RETURN
+
.*****************************************************************************
.*                            WS12I000             Called by: PS12I000       *
.*            Write to patmi1af, patvisaf and pmsvx1af                       *
.*****************************************************************************
.
.         Validate admission number
.
WS12I000  MOVE      AADMNO,KEY8
          CALL      RAPTMIS1
          IF        OVRCD = 0
            MOVE      "I/P Admission record already exists ",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      WS12I950
          ENDIF
.
.         Validate visit number
.
          MOVE      AADMNO,KEY8
          CALL      RDAVISA1                     * visit on file already ?
          IF        OVRCD = 0
            MOVE      "Visit record already exists",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      WS12I950
          ENDIF
.
          MOVE      AADMNO,KEY8
          CALL      RAPMVX11                     * visit on file already ?
          IF        OVRCD = 0
            MOVE      "Visit extension record already exists",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      WS12I950
          ENDIF
.
.         Check if webPAS visit number record already exists on ibaalvaf
.
          MATCH     SP20,PADMAVIS                * blank alternate visit no. ?
          IF        !@EQUAL
            MOVE      AADMNO,KEY8
            CALL      RAIBALV1                   * webPAS visit already on file?
            IF        OVRCD = 0
              MOVE      "webPAS visit no. already exists on ibaalvaf",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              GOTO      WS12I950
            ENDIF
          ENDIF
.
.0890602  MOVE      ,PTMIPANO               * 0890602 ? prev adm
.0890602  MOVE      ,PTMIPADT               * 0890602 ? prev adm date
.0890602  MOVE      ,PTMIGSTA               * 0890602 ? gst
.0890602  MOVE      ,PTMICMXP               * 0890602 ? casemix
.
.         Write an admission record (patmi1af)
.
          CALL      WRMISS1                      * write new record

.         Write a visit record (patvisaf)
.
          MOVE      AURNO,PVIURNO                * load patvisaf fields
          MOVE      ADATE,PVIDATE
          MOVE      AADMNO,PVIBILL
          MOVE      THREE,PVITYPE
          MOVE      ADOCTA,PVIDOCT
.
          MOVE      ZERO,FORM1
          MATCH     SP3,ATYPE                    * blank admission type ?
          GOTO      WS12I100 IF EQUAL            * yes
.
          PACK      KEY5,ANSA,SP1,ATYPE
          CALL      RDCODE1
          IF        OVRCD = 0
            MOVE      TCINDC1,FORM1
          ENDIF
WS12I100  MOVE      TWO,PVISTAT                  * Default Public Patient
          LOAD      PVISTAT,FORM1,TWO,ONE

          MOVE      ONE,PVITRAN
          MOVE      SP6,PVISITE
.0890602  MOVE      " 2",PVISYST                 * 0890602 ? Extra Visit Type
          MOVE      PTYPE,PVIRESI                * 0890602 ? resident status
.
          MOVE      PVIBILL,KEY8
          CALL      RDAVISA1                     * visit on file already ?
          IF        OVRCD = 1
            CALL      WRPTVIS1                   * no
          ENDIF
.
          COMPARE   TWO,PTCNHDPS                 * Australian site ?
          GOTO      WS12I200 IF LESS             * no
.
.         Write a visit extension record (pmsvx1af)
.
          PACK      KEY56,PPOST,PSUBRB,SP10,PADD4,SP70
          CALL      RDIBPOS1
          IF        OVRCD = 0
            MOVE      IBPOASGC,PMVXASGC
          ELSE
            PACK      KEY56,PPOST,PSUBRB,SP70
            CALL      RSIBPOS1
            CALL      RKIBPOS1
            BRANCH    OVRCD,WS12I200
.
            MATCH     PPOST,IBPOPCOD
            IF        @EQUAL
              MATCH     PSUBRB,IBPOSUBR
              IF        @EQUAL
                MOVE      IBPOASGC,PMVXASGC
              ENDIF
            ENDIF
          ENDIF
.
WS12I200  MOVE      AADMNO,KEY8
          CALL      RAPMVX11                     * visit on file already ?
          IF        OVRCD=1
            CALL      WRPMVX11                   * no
          ENDIF
.
WS12I900  MOVE      ZERO,EXIT
          GOTO      WS12I999
.
WS12I950  MOVE      ONE,EXIT
WS12I999  RETURN
+
.*****************************************************************************
.*                              PS13O000           Called by: PROC0000       *
.*              Process the S13 (OUT) message - write/update PAS database    *
.*****************************************************************************
PS13O000  CALL      OUTIN000                * initialise vars / open files
.
          CALL      DEFOUT00                * set default codes if required
.
          CALL      SS13O000                * set variables for database
          BRANCH    EXIT,PS13O999           * error - stop processing
.
          CALL      UPDBOK00                * update booking details
          IF        EXIT = 1
            MOVE      WEBTITLE,ERRORDSC     * error updating booking
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      PS13O999
          ENDIF
.
          CALL      UPPMS000                * Copy outbitaf data to pmsmitaf
.
          IF        PTCNHDPS=1
            MOVE      OBAOUTNO,ADMISSNO
            CALL      WRPORD00              * write/upd ACC Purchase Order
          ENDIF
.
PS13O999  RETURN
+
.*****************************************************************************
.*                              SS13O000           Called by: PS13O000       *
.*                 Set variables for the S13 (OUT) message                   *
.*****************************************************************************
SS13O000  MOVE      " 4",REPORTNO                * reportno for update booking
          MOVE      " 5",UPDATETY                * reschedule booking
          MOVE      ONE,FLGOTBOK                 * indicates outbb vars updated
          MOVE      SP1,BULKBILL                 * flag for UPPMS000
.
          STRIP     PV102001
          MOVELPTR  PV102001,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS13O010 IF EQUAL
.
          MATCH     BLANKSTR,PV102001            * field null ?
          IF        @EQUAL
            MOVE      SP70,OUTBB002
          ELSE
            MOVE      PV102001,OUTBB002          * claim code
          ENDIF
.
SS13O010  STRIP     PV18HCPC
          MOVELPTR  PV18HCPC,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS13O020 IF EQUAL
.
          MATCH     BLANKSTR,PV18HCPC            * field null ?
          IF        @EQUAL
            MOVE      SP70,OUTBB029
          ELSE
            MOVE      PV18HCPC,OUTBB029          * referring gp
          ENDIF
.
SS13O020  BRANCH    NTEFOUND,SS13O030            * no NTE segments received
.
          STRIP     NTE00301
          MOVELPTR  NTE00301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS13O030 IF EQUAL
.
          MATCH     BLANKSTR,NTE00301            * field null ?
          IF        @EQUAL
            MOVE      SP70,PMSVX052
          ELSE
            MOVE      NTE00301,PMSVX052          * comments (pmvxudf1)
          ENDIF
.
.OUTBBxxx (14/47/etc.) Done (otbbtcod?)
.oprsbkdt? (Done? = date original booking was made)
.
SS13O030  PACK      PADMAVIS,PV101901,SP70       * Alt. Visit Number (MOSAIQ)
          CALL      MALT0000                     * check if MOSIAQ id exists
          COMPARE   ZERO,EXIT
          GOTO      SS13O948 IF EQUAL            * error - stop processing
.
.CASEKEYS = current slot
.NEWSLOTK = new slot
.
          PACK      KEY36,IBAVVISN,SP70
          CALL      RDSBOKA6
          CALL      RDKBOKA6
          BRANCH    OVRCD,SS13O947               * webPAS visit does not exist
.
          MATCH     PURNO,OBAURNO
          GOTO      SS13O946 IF NOT EQUAL        * U/R does not match visit
.
          MATCH     IBAVVISN,DOBAOUTN
          GOTO      SS13O947 IF NOT EQUAL        * webPAS visit does not exist
.
          PACK      CASEKEYS,OBASITE,OBACLIN,OBADATE,OBASTRT,OBASLOT
          MOVE      CASEKEYS,SAVECASE
.
SS13O050  MOVE      SP70,NEWSLOTK
          CLEAR     NEWSLOTK
          PACK      D6,OUTSITPR,SP70
          APPEND    D6,NEWSLOTK                  * site
          MATCH     "1",PTCNAILP
          IF        @EQUAL
            PACK      D6,AIL3CLIN,SP70           * use AIL.3
          ELSE
            PACK      D6,AIP3DOCT,SP70           * use AIP.3
          ENDIF
          APPEND    D6,NEWSLOTK                  * clinic
          UNPACK    SCH01104,D8,D2,KEY2
          APPEND    D8,NEWSLOTK                  * date
          RESET     NEWSLOTK
          PACK      D5,D2,COLON,KEY2             * time
.
          MOVE      ZERO,OBADTFLG
          MOVE      SP5,SAVOBAST
          PACK      KEY28,NEWSLOTK,SP70          * find clinic for booking
          CALL      RDSBOKA1
SS13O100  CALL      RDKBOKA1
          BRANCH    OVRCD,SS13O949
.
          MATCH     OUTSITPR,OBASITE
          IF        !@EQUAL
            IF        OBADTFLG = 1
              GOTO      SS13O200                 * add new slot for clinic date
            ELSE
              GOTO      SS13O949                 * clinic date doesn't exist
            ENDIF
          ENDIF
.
          MATCH     D6,OBACLIN
          IF        !@EQUAL
            IF        OBADTFLG = 1
              GOTO      SS13O200                 * add new slot for clinic date
            ELSE
              GOTO      SS13O949                 * clinic date doesn't exist
            ENDIF
          ENDIF
.
          MATCH     D8,OBADATE
          IF        !@EQUAL
            IF        OBADTFLG = 1
              GOTO      SS13O200                 * add new slot for clinic date
            ELSE
              GOTO      SS13O949                 * clinic date doesn't exist
            ENDIF
          ENDIF
.
          MOVE      ONE,OBADTFLG                 * clinic date exists
          MOVE      OBASTRT,SAVOBAST             * save session start time
.
          MATCH     D5,OBATIME
          IF        @EQUAL
            COMPARE   ZERO,OBASTAT               * slot time exists - empty ?
            IF        @EQUAL
              GOTO      SS13O500                 * empty - so use it
            ELSE
              GOTO      SS13O100                 * not empty - so check next
            ENDIF
          ENDIF
.
          MATCH     D5,OBATIME
          IF        @LESS
            GOTO      SS13O100                   * check next slot time
          ENDIF
.
SS13O200  MOVE      OUTBB047,NEWSLTYP            * MOSAIQ slot type
          MOVE      D5,NEWSLTIM                  * requested slot time
          PACK      SESSKEYS,NEWSLOTK,SAVOBAST,SP70
          CALL      ADDSLT00                     * need to add new slot
          BRANCH    EXIT,SS13O945
.
SS13O500  PACK      NEWSLOTK,OBASITE,OBACLIN,OBADATE,OBASTRT,DOBASLOT
          MOVE      SAVECASE,CASEKEYS
.
SS13O900  MOVE      ZERO,EXIT
          GOTO      SS13O999
.
SS13O945  MOVE      WEBTITLE,ERRORDSC            * error adding slot
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      SS13O950
.
SS13O946  MOVE      "UR number in PID.3 does not match visit",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      SS13O950
.
SS13O947  MOVE      "webPAS visit id does not exist",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      SS13O950
.
SS13O948  MOVE      "Alternate visit id does not exist",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      SS13O950
.
SS13O949  MOVE      "Error: Cannot find clinic slot for booking",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      SS13O950
.
SS13O950  MOVE      ONE,EXIT
SS13O999  RETURN
+
.*****************************************************************************
.*                              PS14O000           Called by: PROC0000       *
.*              Process the S14 (OUT) message - write/update PAS database    *
.*****************************************************************************
PS14O000  CALL      OUTIN000                * initialise vars / open files
.
          CALL      DEFOUT00                * set default codes if required
.
          CALL      SS14O000                * set variables for database
          BRANCH    EXIT,PS14O999           * error - stop processing
.
          CALL      UPDBOK00                * update booking details
          IF        EXIT = 1
            MOVE      WEBTITLE,ERRORDSC     * error updating booking
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      PS14O999
          ENDIF
.
          CALL      UPPMS000                * Copy outbitaf data to pmsmitaf
.
          IF        PTCNHDPS=1
            MOVE      OBAOUTNO,ADMISSNO
            CALL      WRPORD00              * write/upd ACC Purchase Order
          ENDIF
.
PS14O999  RETURN
+
.*****************************************************************************
.*                              S14OA000           Called by: SS14O000       *
.*                 Attend outpatient for S14 (OUT) message                   *
.*****************************************************************************
S14OA000  MATCH     "1",PTCNRS25
          GOTO      S14OA900 IF NOT EQUAL        * Receive SCH.25 in SIU ?
.
S14OA050  STRIP     SCH02501
          MOVELPTR  SCH02501,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      S14OA900 IF EQUAL            * no - finished
.
          MATCH     BLANKSTR,SCH02501
          GOTO      S14OA900 IF EQUAL            * null - finished
.
S14OA100  STRIP     MSH00701
          ENDSET    MSH00701
          APPEND    ZERO,MSH00701
          APPEND    ZERO,MSH00701
          RESET     MSH00701
          MOVELPTR  MSH00701,FORM3               * field populated ?
          MOVE      MSH00701,DIM14
          MOVE      "MSH.7 ",FIELDID
          MOVE      ONE,DATFLAG1                 * no future dae/time allowed
          MOVE      ONE,DATFLAG2                 * date and time
          CALL      VDTM0000                     * date/time validation
          IF        ERRORCNT > 0
            GOTO      S14OA950                   * error
          ENDIF
.
          UNPACK    MSH00701,D8,D6               * message date/time
          UNPACK    D6,CHOUR,CMIN,CSEC
.
S14OA150  MOVE      IBAVVISN,KEY8
          CALL      RDBOKB1                      * get existing outbb1 vars
          IF        OVRCD = 1
            MOVE      "PV1.19: OP Booking B record not found",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      S14OA950                   * error
          ENDIF
.
          MOVE      OTBBCITM,OUTBB032            * existing check-in time
          MOVE      OTBBASTM,OUTBB033            * existing seen time
          MOVE      OTBBDPTM,OUTBB034            * existing departure time
.
S14OA200  MATCH     "Started",SCH02501
          GOTO      S14OA250 IF NOT EQUAL
.
          MATCH     SP70,OUTBB032
          IF        @EQUAL
            PACK      OUTBB032,CHOUR,COLON,CMIN  * check-in time (OTBBCITM)
            MOVE      " 1",UPDATETY              * attend booking
            GOTO      S14OA900
          ELSE
            MOVE      "MSH.7: Check-in time already exists",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      S14OA950                   * error
          ENDIF
.
S14OA250  MATCH     "Seen",SCH02501
          GOTO      S14OA300 IF NOT EQUAL
.
          MATCH     SP70,OUTBB033
          IF        @EQUAL
            PACK      OUTBB033,CHOUR,COLON,CMIN  * seen time (OTBBASTM)
            MOVE      " 1",UPDATETY              * attend booking
            GOTO      S14OA900
          ELSE
            MOVE      "MSH.7: Seen time already exists",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      S14OA950                   * error
          ENDIF
.
S14OA300  MATCH     "Complete",SCH02501
          GOTO      S14OA350 IF NOT EQUAL
.
          MATCH     SP70,OUTBB034
          IF        @EQUAL
            PACK      OUTBB034,CHOUR,COLON,CMIN  * departure time (OTBBDPTM)
            MOVE      " 1",UPDATETY              * attend booking
            GOTO      S14OA900
          ELSE
            MOVE      "MSH.7: Departure time already exists",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      S14OA950                   * error
          ENDIF
.
S14OA350
.
S14OA900  MOVE      ZERO,EXIT                    * valid date/time
          GOTO      S14OA999
.
S14OA950  MOVE      ONE,EXIT                     * error - stop
.
S14OA999  RETURN
+
.*****************************************************************************
.*                              SS14O000           Called by: PS14O000       *
.*                 Set variables for the S14 (OUT) message                   *
.*****************************************************************************
SS14O000  MOVE      " 4",REPORTNO                * reportno for update booking
          MOVE      " 6",UPDATETY                * update booking
          MOVE      ONE,FLGOTBOK                 * indicates outbb vars updated
          MOVE      SP1,BULKBILL                 * flag for UPPMS000
          MOVE      ONE,OTXFLAG                  * no comments
          MOVE      SP70,NEWSLOTK                * no new appointment slot
.
SS14O005  STRIP     PV102001
          MOVELPTR  PV102001,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS14O010 IF EQUAL
.
          MATCH     BLANKSTR,PV102001            * field null ?
          IF        @EQUAL
            MOVE      SP70,OUTBB002
          ELSE
            MOVE      PV102001,OUTBB002          * claim code
          ENDIF
.
SS14O010  STRIP     PV18HCPC
          MOVELPTR  PV18HCPC,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS14O020 IF EQUAL
.
          MATCH     BLANKSTR,PV18HCPC            * field null ?
          IF        @EQUAL
            MOVE      SP70,OUTBB029
          ELSE
            MOVE      PV18HCPC,OUTBB029          * referring gp
          ENDIF
.
SS14O020  BRANCH    NTEFOUND,SS14O030            * no NTE segments received
.
          STRIP     NTE00301
          MOVELPTR  NTE00301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS14O030 IF EQUAL
.
          MATCH     BLANKSTR,NTE00301            * field null ?
          IF        @EQUAL
            MOVE      SP70,PMSVX052
          ELSE
            MOVE      NTE00301,PMSVX052          * comments (pmvxudf1)
          ENDIF
.
SS14O030  PACK      PADMAVIS,PV101901,SP70       * Alt. Visit Number (MOSAIQ)
          CALL      MALT0000                     * check if MOSIAQ id exists
          COMPARE   ZERO,EXIT
          GOTO      SS14O948 IF EQUAL            * error - stop processing
.
          CALL      S14OA000                     * attendance details ?
          BRANCH    EXIT,SS14O950                * error - stop
.
.CASEKEYS = current slot
.
          PACK      KEY36,IBAVVISN,SP70
          CALL      RDSBOKA6
          CALL      RDKBOKA6
          BRANCH    OVRCD,SS14O947               * webPAS visit does not exist
.
          MATCH     PURNO,OBAURNO
          GOTO      SS14O946 IF NOT EQUAL        * U/R does not match visit
.
          MATCH     IBAVVISN,DOBAOUTN
          GOTO      SS14O947 IF NOT EQUAL        * webPAS visit does not exist
.
          PACK      CASEKEYS,OBASITE,OBACLIN,OBADATE,OBASTRT,OBASLOT
          MOVE      CASEKEYS,NEWSLOTK
.
          IF        UPDATETY = 1
            MOVE      SP70,NEWSLOTK              * no new slot for attd booking
          ENDIF
.
SS14O900  MOVE      ZERO,EXIT
          GOTO      SS14O999
.
SS14O946  MOVE      "UR number in PID.3 does not match visit",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      SS14O950
.
SS14O947  MOVE      "webPAS visit id does not exist",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      SS14O950
.
SS14O948  MOVE      "Alternate visit id does not exist",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      SS14O950
.
SS14O950  MOVE      ONE,EXIT
SS14O999  RETURN
+
.*****************************************************************************
.*                              PS14I000           Called by: PROC0000       *
.*              Process the S14 (INP) message - write/update PAS database    *
.*****************************************************************************
PS14I000  CALL      INPIN000                * initialise vars / open files
.
          CALL      DEFINP00                * set default codes if required
.
          CALL      SS14I000                * set variables for database
          BRANCH    EXIT,PS14I999           * error - stop processing
.
          CALL      UPDSIU00                * broadcast preadmission update
.
PS14I999  RETURN
+
.*****************************************************************************
.*                              SS14I000           Called by: PS14I000       *
.*                 Set variables for the S14 (INP) message                   *
.*****************************************************************************
SS14I000  MOVE      PURNO,PADMURNO               * ur number
.
SS14I005  PACK      PADMAVIS,PV101901,SP70       * Alt. Visit Number (MOSAIQ)
          CALL      MALT0000                     * check if MOSIAQ id exists
          COMPARE   ZERO,EXIT
          GOTO      SS14I948 IF EQUAL            * error - stop processing
.
          PACK      KEY8,IBAVVISN,SP70
          CALL      RDMISS1
          BRANCH    OVRCD,SS14I947               * webPAS visit does not exist
.
          MATCH     PURNO,AURNO
          GOTO      SS14I946 IF NOT EQUAL        * U/R does not match visit
.
          MATCH     IBAVVISN,DAADMNO
          GOTO      SS14I947 IF NOT EQUAL        * webPAS visit does not exist
.
          COMPARE   ONE,ASTAT
          GOTO      SS14I945 IF NOT EQUAL        * status is not preadmitted
.
          MOVE      IBAVVISN,ADMISSNO
          MOVE      PURNO,URNUMBER
.
SS14I050  MOVE      ADMISSNO,KEY8
          CALL      RDVISA1                      * visit on file ?
          BRANCH    OVRCD,SS14I947
.
SS14I100  STRIP     SCH01104
          MOVELPTR  SCH01104,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS14I110 IF EQUAL
.
          MATCH     BLANKSTR,SCH01104            * field null ?
          IF        @EQUAL
            PACK      ADATE,SP70
            PACK      PVIDATE,SP70
            PACK      ATIME,SP70
          ELSE
            UNPACK    SCH01104,ADATE,HOURTM,MINTIME,SECTIME    * admit date/time
            MOVE      ADATE,ALACDTE
            MOVE      ADATE,PVIDATE
            PACK      ATIME,HOURTM,COLON,MINTIME,COLON,SECTIME,ZERO,ZERO
          ENDIF
.
          MATCH     PBDATE,ADATE                 * adm.date < DOB ?
          GOTO      SS14I949 IF LESS
.
.0890602  CALL      DEFINP00                * set default codes if required
.
SS14I110  STRIP     PV100301
          MOVELPTR  PV100301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS14I120 IF EQUAL
.
          MATCH     BLANKSTR,PV100301            * field null ?
          IF        @EQUAL
            PACK      PTMIXWRD,SP70
          ELSE
            PACK      PTMIXWRD,PV100301,SP70     * expected ward
          ENDIF
.
SS14I120  STRIP     PV100303
          MOVELPTR  PV100303,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS14I130 IF EQUAL
.
          MATCH     BLANKSTR,PV100303            * field null ?
          IF        @EQUAL
            PACK      PTMIEBED,SP70
          ELSE
            PACK      PTMIEBED,PV100303,SP70     * expected bed
          ENDIF
.
SS14I130  STRIP     AIP3HCPC
          MOVELPTR  AIP3HCPC,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS14I140 IF EQUAL
.
          MATCH     BLANKSTR,AIP3HCPC            * field null ?
          IF        @EQUAL
            PACK      PMVXDOCA,SP70
          ELSE
            PACK      PMVXDOCA,AIP3HCPC,SP70     * attending doctor (hcp)
          ENDIF
.
SS14I140  STRIP     AIP3LDOC
          MOVELPTR  AIP3LDOC,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS14I150 IF EQUAL
.
          MATCH     BLANKSTR,AIP3LDOC            * field null ?
          IF        @EQUAL
            PACK      ADOCTA,SP70
            PACK      PVIDOCT,SP70
            PACK      ACLSSFT,SP70
          ELSE
            PACK      ADOCTA,AIP3LDOC,SP70       * attending doctor
            PACK      PVIDOCT,AIP3LDOC,SP70      * attending doctor
            CALL      GDUNL000                   * linked unit
          ENDIF
.
SS14I150  STRIP     PV18HCPC
          MOVELPTR  PV18HCPC,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS14I160 IF EQUAL
.
          MATCH     BLANKSTR,PV18HCPC            * field null ?
          IF        @EQUAL
            PACK      PMVXRHC1,SP70
          ELSE
            PACK      PMVXRHC1,PV18HCPC,SP70     * referring doctor (hcp)
          ENDIF
.
SS14I160  STRIP     PV101401
          MOVELPTR  PV101401,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS14I170 IF EQUAL
.
          MATCH     BLANKSTR,PV101401            * field null ?
          IF        @EQUAL
            PACK      ASRCE,SP70
          ELSE
            PACK      ASRCE,PV101401,SP70        * category S
          ENDIF
.
SS14I170  STRIP     PV100401
          MOVELPTR  PV100401,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS14I180 IF EQUAL
.
          MATCH     BLANKSTR,PV100401            * field null ?
          IF        @EQUAL
            PACK      ACLSS,SP70
          ELSE
            PACK      ACLSS,PV100401,SP70        * category P
          ENDIF
.
SS14I180  STRIP     PV101801
          MOVELPTR  PV101801,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS14I190 IF EQUAL
.
          MATCH     BLANKSTR,PV101801            * field null ?
          IF        @EQUAL
            PACK      ACARE,SP70
          ELSE
            PACK      ACARE,PV101801,SP70        * category CC
          ENDIF
.
SS14I190  STRIP     PV102001
          MOVELPTR  PV102001,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS14I200 IF EQUAL
.
          MATCH     BLANKSTR,PV102001            * field null ?
          IF        @EQUAL
            PACK      ACLAIM,SP70
          ELSE
            PACK      ACLAIM,PV102001,SP70       * category CL
          ENDIF
.
SS14I200  BRANCH    NTEFOUND,SS14I210            * no NTE segments received
.
          STRIP     NTE00301
          MOVELPTR  NTE00301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS14I210 IF EQUAL
.
          MATCH     BLANKSTR,NTE00301            * field null ?
          IF        @EQUAL
            PACK      ADIAG1,SP70,SP70
          ELSE
            PACK      ADIAG1,NTE00301,SP70,SP70  * diagnosis (notes/comments)
          ENDIF
.
.0890602  MOVE      ZERO,ASTAY                   * MOSAIQ default 0
.
.0890602  MOVE      PFUNDH,AFUNDH                * Default HF details from PMI
.0890602  MOVE      PFNDTB,AFNDTB
.0890602  MOVE      PFNDMM,AFNDMM
.0890602  MOVE      AFNDMM,PMVXFNDM
.
SS14I210  MOVE      USERID,PTMIWEBU              * user/date/time updated
          MOVE      CURRDATE,PTMIDATU
          MOVE      CTIMEIS,PTMITIMU
          REP       " 0",PTMITIMU
.
          CALL      UPMISS1                      * update patmi1 fields
.
          CALL      UPVISA1                      * update visit record
.
.0890602  MOVE      SCH22HSP,PMVXMHOS            * hospital code from SCH.22
.
.         Default common fields from PMI
.
.0890602  MOVE      PMPXABRG,PMVXABRG            * aboriginality
.0890602  MOVE      PMPXLNG1,PMVXLNG1            * preferred language
.0890602  MOVE      PPOST,PMVXPOST               * postcode
.0890602  MOVE      PMPXPRVI,PMVXPIND            * Privacy Indicator
.0890602  MOVE      PMPXCRIN,PMVXCSNR            * Consent Release of info
.0890602  MOVE      PMPXHOML,PMVXHOME            * Homeless status
.
.0890602  MOVE      AADMNO,PMVXVISN              * set other pmsvx1af fields
.0890602  MOVE      ADATE,PMVXVSDT
.
          MOVE      USERID,PMVXWEBU              * user/date/time updated
          MOVE      CURRDATE,PMVXLUPD
          MOVE      CTIMEIS,PMVXLUPT
          REP       " 0",PMVXLUPT
.
          CALL      UPPMVX11                     * update pmsvx1 fields
.
SS14I900  MOVE      ZERO,EXIT
          GOTO      SS14I999
.
.         Error messages
.
SS14I945  MOVE      "Visit does not have a status of preadmitted",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      SS14I950
.
SS14I946  MOVE      "UR number in PID.3 does not match visit",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      SS14I950
.
SS14I947  MOVE      "webPAS visit id does not exist",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      SS14I950
.
SS14I948  MOVE      "Alternate visit id does not exist",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      SS14I950
.
SS14I949  MOVE      "PV2.8: Admission Date less than DOB",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      SS14I950
.
SS14I950  MOVE      ONE,EXIT
SS14I999  RETURN
+
.*****************************************************************************
.*                              PS15O000           Called by: PROC0000       *
.*              Process the S15 (OUT) message - write/update PAS database    *
.*****************************************************************************
PS15O000  CALL      OUTIN000                * initialise vars / open files
.
          CALL      DEFOUT00                * set default codes if required
.
          CALL      SS15O000                * set variables for database
          BRANCH    EXIT,PS15O999           * error - stop processing
.
          CALL      UPDBOK00                * update booking details
          IF        EXIT = 1
            MOVE      WEBTITLE,ERRORDSC     * error updating booking
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      PS15O999
          ENDIF
.
          CALL      UPPMS000                * Copy outbitaf data to pmsmitaf
.
          IF        PTCNHDPS=1
            MOVE      OBAOUTNO,ADMISSNO
            CALL      WRPORD00              * write/upd ACC Purchase Order
          ENDIF
.
PS15O999  RETURN
+
.*****************************************************************************
.*                              SS15O000           Called by: PS15O000       *
.*                 Set variables for the S15 (OUT) message                   *
.*****************************************************************************
SS15O000  MOVE      " 4",REPORTNO                * reportno for update booking
          MOVE      " 8",UPDATETY                * cancel booking
          MOVE      ONE,FLGOTBOK                 * indicates outbb vars updated
          MOVE      SP1,BULKBILL                 * flag for UPPMS000
          MOVE      ONE,OTXFLAG                  * no comments
          MOVE      ONE,UPBOOKRD                 * update linked booking
.0890602  MOVE      NTE00301,PMSVX052            * comments (pmvxudf1)
.
          PACK      PADMAVIS,PV101901,SP70       * Alt. Visit Number (MOSAIQ)
          CALL      MALT0000                     * check if MOSIAQ id exists
          COMPARE   ZERO,EXIT
          GOTO      SS15O948 IF EQUAL            * error - stop processing
.
.CASEKEYS = current slot
.
          PACK      KEY36,IBAVVISN,SP70
          CALL      RDSBOKA6
          CALL      RDKBOKA6
          BRANCH    OVRCD,SS15O947               * webPAS visit does not exist
.
          MATCH     PURNO,OBAURNO
          GOTO      SS15O946 IF NOT EQUAL        * U/R does not match visit
.
          MATCH     IBAVVISN,DOBAOUTN
          GOTO      SS15O947 IF NOT EQUAL        * webPAS visit does not exist
.
          PACK      CASEKEYS,OBASITE,OBACLIN,OBADATE,OBASTRT,OBASLOT
.
SS15O900  MOVE      ZERO,EXIT
          GOTO      SS15O999
.
SS15O946  MOVE      "UR number in PID.3 does not match visit",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      SS15O950
.
SS15O947  MOVE      "webPAS visit id does not exist",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      SS15O950
.
SS15O948  MOVE      "Alternate visit id does not exist",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      SS15O950
.
SS15O950  MOVE      ONE,EXIT
SS15O999  RETURN
+
.*****************************************************************************
.*                              PS15I000           Called by: PROC0000       *
.*              Process the S15 (INP) message - write/update PAS database    *
.*****************************************************************************
PS15I000  CALL      INPIN000                * initialise vars / open files
.
          CALL      DEFINP00                * set default codes if required
.
          CALL      SS15I000                * set variables for database
          BRANCH    EXIT,PS15I999           * error - stop processing
.
          CALL      CPADM000                * Cancel Pre-Admission
          IF        EXIT = 1
            MOVE      WEBTITLE,ERRORDSC     * error cancelling preadmission
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      PS15I999
          ENDIF
.
PS15I999  RETURN
+
.*****************************************************************************
.*                              SS15I000           Called by: PS15I000       *
.*                 Set variables for the S15 (INP) message                   *
.*****************************************************************************
SS15I000  MOVE      " 2",REPORTNO                * reportno for cancel preadm
          MOVE      " 3",UPDATETY                * cancel preadm
.
          PACK      PADMAVIS,PV101901,SP70       * Alt. Visit Number (MOSAIQ)
          CALL      MALT0000                     * check if MOSIAQ id exists
          COMPARE   ZERO,EXIT
          GOTO      SS15I948 IF EQUAL            * error - stop processing
.
          PACK      KEY8,IBAVVISN,SP70
          CALL      RDMISS1
          BRANCH    OVRCD,SS15I947               * webPAS visit does not exist
.
          MATCH     PURNO,AURNO
          GOTO      SS15I946 IF NOT EQUAL        * U/R does not match visit
.
          MATCH     IBAVVISN,DAADMNO
          GOTO      SS15I947 IF NOT EQUAL        * webPAS visit does not exist
.
          MOVE      IBAVVISN,ADMISSNO
          MOVE      PURNO,URNUMBER
.
SS15I900  MOVE      ZERO,EXIT
          GOTO      SS15I999
.
SS15I946  MOVE      "UR number in PID.3 does not match visit",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      SS15I950
.
SS15I947  MOVE      "webPAS visit id does not exist",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      SS15I950
.
SS15I948  MOVE      "Alternate visit id does not exist",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      SS15I950
.
SS15I950  MOVE      ONE,EXIT
SS15I999  RETURN
+
.*****************************************************************************
.*                              PS26O000           Called by: PROC0000       *
.*              Process the S26 (OUT) message - write/update PAS database    *
.*****************************************************************************
PS26O000  CALL      OUTIN000                * initialise vars / open files
.
          CALL      DEFOUT00                * set default codes if required
.
          CALL      SS26O000                * set variables for database
          BRANCH    EXIT,PS26O999           * error - stop processing
.
          CALL      UPDBOK00                * update booking details
          IF        EXIT = 1
            MOVE      WEBTITLE,ERRORDSC     * error updating booking
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      PS26O999
          ENDIF
.
          CALL      UPPMS000                * Copy outbitaf data to pmsmitaf
.
          IF        PTCNHDPS=1
            MOVE      OBAOUTNO,ADMISSNO
            CALL      WRPORD00              * write/upd ACC Purchase Order
          ENDIF
.
PS26O999  RETURN
+
.*****************************************************************************
.*                              SS26O000           Called by: PS26O000       *
.*                 Set variables for the S26 (OUT) message                   *
.*****************************************************************************
SS26O000  MOVE      " 4",REPORTNO                * reportno for update booking
          MOVE      " 2",UPDATETY                * DNA booking
          MOVE      ONE,FLGOTBOK                 * indicates outbb vars updated
          MOVE      SP1,BULKBILL                 * flag for UPPMS000
          MOVE      ONE,OTXFLAG                  * no comments
          MOVE      SP70,NEWSLOTK                * no new appointment slot
.
          BRANCH    NTEFOUND,SS26O010            * no NTE segments received
.
          STRIP     NTE00301
          MOVELPTR  NTE00301,FORM3               * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      SS26O010 IF EQUAL
.
          MATCH     BLANKSTR,NTE00301            * field null ?
          IF        @EQUAL
            MOVE      SP70,PMSVX052
          ELSE
            MOVE      NTE00301,PMSVX052          * comments (pmvxudf1)
          ENDIF
.
SS26O010  PACK      PADMAVIS,PV101901,SP70       * Alt. Visit Number (MOSAIQ)
          CALL      MALT0000                     * check if MOSIAQ id exists
          COMPARE   ZERO,EXIT
          GOTO      SS26O948 IF EQUAL            * error - stop processing
.
.CASEKEYS = current slot
.
          PACK      KEY36,IBAVVISN,SP70
          CALL      RDSBOKA6
          CALL      RDKBOKA6
          BRANCH    OVRCD,SS26O947               * webPAS visit does not exist
.
          MATCH     PURNO,OBAURNO
          GOTO      SS26O946 IF NOT EQUAL        * U/R does not match visit
.
          MATCH     IBAVVISN,DOBAOUTN
          GOTO      SS26O947 IF NOT EQUAL        * webPAS visit does not exist
.
          PACK      CASEKEYS,OBASITE,OBACLIN,OBADATE,OBASTRT,OBASLOT
.
SS26O900  MOVE      ZERO,EXIT
          GOTO      SS26O999
.
SS26O946  MOVE      "UR number in PID.3 does not match visit",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      SS26O950
.
SS26O947  MOVE      "webPAS visit id does not exist",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      SS26O950
.
SS26O948  MOVE      "Alternate visit id does not exist",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      SS26O950
.
SS26O950  MOVE      ONE,EXIT
SS26O999  RETURN
+
.*****************************************************************************
.* Dummy I/O labels                                                          *
.*****************************************************************************
.
PATCALF
PRLN0000
NXTTRAN1
RDPMQVI1
EDG10000
ODG10000
OPV10000
TPV10000
LOGM0000
WERR0000  RETURN
+
          DEFPROC   DGCLICEU
          ENDPROC
          DEFPROC   DGCLICEA
          ENDPROC
+
.*****************************************************************************
.* Dummy Labels for ACONTACT                                                 *
.*****************************************************************************
.
WEBERR00
ALLBIL00
ALIT0000
DGCLII13
WOUT0000
LASTEN00  RETURN
+
.*****************************************************************************
.* Dummy Labels for WRITBOOK                                                 *
.*****************************************************************************
.
ERRLST00
HICCLAIM
NXTPAG00
WRPORD00
WRTACC00  RETURN
+
.**********************************************************************
.         Update Default Printer File for User (WEBPRTCD)
.**********************************************************************
UPDFPT00  MOVE      REPORTNO,F2
          MOVE      F2,KEY2
          REP       " 0",KEY2
          PACK      KEY20,PRGID,KEY2,WBSEUID,SP70
          UNPACK    KEY20,IBPDPID,IBPDREP,IBPDUID
          MOVE      SELPRINT,IBPDPRT
          MOVE      SP70,IBPDSPA
          CALL      RAIBPD1
          IF        OVRCD=0
            CALL      UPIBPD1
          ELSE
            CALL      WRIBPD1
          ENDIF
UPDFPT99  RETURN
+
.******************************************************************************
.* SAVHIS00 - Save the History Variables (WLHISSUB)
.******************************************************************************
SAVHIS00  MOVE      WMPTY,SAVEPRIO
          MOVE      WTWMRANK,SAVERANK
          MOVE      WMDATE2,SAVEDAT2
          MOVE      WMDATE3,SAVEDAT3
          MOVE      WTWMBSCD,SAVEBSCD     * Save Booking Status Code
          MOVE      SP10,SAVERDT3
          MOVE      WMBOOK,SAVEBOOK
          READ      CONTROLF,THIRTY7;*236,WTCNBRSR
          LOAD      SAVEBRSR,WTCNBRSR,WMUDEF1,WMUDEF2,WMUDEF3,WMUDEF4,WMUDEF5:
                                     WMUDEF6,WMUDEF7,WMUDEF8
          COMPARE   ZERO,WTCNBRSR
          IF        @EQUAL
            PACK      SAVEBRSR,WTWMSRCR
          ENDIF
          MOVE      WTWMDRSA,SAVEDRSA
          MOVE      WTWMDOSA,SAVEDOSA
          MOVE      WTWMPHSP,SAVEPHSP
          MOVE      WMPCAT,SAVEPCAT
          MOVE      WTWMDTAD,SAVEDTAD
          MOVE      WTWMCSST,SAVECSST
          MOVE      WTWMCSDT,SAVECSDT
          MOVE      WTWMASSR,SAVEASSR
.
SAVHIS99  RETURN
+
.*******************************************************************************
. INTINP00 - Delete Interpreter Table Record (replaces INTDEL00 from PATWEB89)
. Input  - DAADMNO
.          AURNO
.*******************************************************************************
INTINP00  PACK      KEY8,AURNO,SP70
          CALL      RDPMPX21
          BRANCH    OVRCD,INTINP99
.
          MATCH     "1",PMPXINTR
          GOTO      INTINP99 IF NOT EQUAL
.
          PACK      KEY8,DAADMNO
          CALL      RDVSINT1
          IF        OVRCD=0
            CALL      DEVSINT1           * Delete record from Int.Table(Cancel)
            MOVE      "D",INTAUDTY
            CALL      INTAUD00           * Add record to Int.Audit after Delete
          ENDIF
          MOVE      ZERO,EXIT
.
INTINP99  RETURN
+
.****************************************************************************
.*        IO ROUTINES FOR TEMPORARY FILE                                    *
.****************************************************************************
.
.         HL7 Temp File I/O routines
.
RATEMP1   MOVE      ZERO,OVRCD
          READ      RCVRTMP1,KEY15;ANS
          GOTO      OVERCOND IF OVER
          RETURN
.
RSTEMP1   READ      RCVRTMP1,KEY15;;
          RETURN
.
RDTEMP1   MOVE      ZERO,OVRCD
          READ      RCVRTMP1,KEY15;RTMPSEGI,DRTMPSGC,DRTMPFLD,DRTMPFCT,DRTMPCMP:
                                   RTMPVRBL
          GOTO      OVERCOND IF OVER
          MOVE      DRTMPSGC,RTMPSEGC
          MOVE      DRTMPFLD,RTMPFLDN
          MOVE      DRTMPFCT,RTMPFCNT
          MOVE      DRTMPCMP,RTMPCMPN
          RETURN
.
RKTEMP1   MOVE      ZERO,OVRCD
          READKS    RCVRTMP1;RTMPSEGI,DRTMPSGC,DRTMPFLD,DRTMPFCT,DRTMPCMP:
                             RTMPVRBL
          GOTO      OVERCOND IF OVER
          MOVE      DRTMPSGC,RTMPSEGC
          MOVE      DRTMPFLD,RTMPFLDN
          MOVE      DRTMPFCT,RTMPFCNT
          MOVE      DRTMPCMP,RTMPCMPN
          RETURN
.
RPTEMP1   MOVE      ZERO,OVRCD
          READKP    RCVRTMP1;RTMPSEGI,DRTMPSGC,DRTMPFLD,DRTMPFCT,DRTMPCMP:
                             RTMPVRBL
          GOTO      OVERCOND IF OVER
          MOVE      DRTMPSGC,RTMPSEGC
          MOVE      DRTMPFLD,RTMPFLDN
          MOVE      DRTMPFCT,RTMPFCNT
          MOVE      DRTMPCMP,RTMPCMPN
          RETURN
.
WRTEMP1   MOVE      RTMPSEGC,DRTMPSGC
          MOVE      RTMPFLDN,DRTMPFLD
          MOVE      RTMPFCNT,DRTMPFCT
          MOVE      RTMPCMPN,DRTMPCMP
          WRITE     RCVRTMP1,KEY15;RTMPSEGI,DRTMPSGC,DRTMPFLD,DRTMPFCT,DRTMPCMP:
                                   RTMPVRBL
          RETURN
.
UPTEMP1   MOVE      RTMPSEGC,DRTMPSGC
          MOVE      RTMPFLDN,DRTMPFLD
          MOVE      RTMPFCNT,DRTMPFCT
          MOVE      RTMPCMPN,DRTMPCMP
          UPDATE    RCVRTMP1;RTMPSEGI,DRTMPSGC,DRTMPFLD,DRTMPFCT,DRTMPCMP:
                             RTMPVRBL
          RETURN
.
DETEMP1   DELETE    RCVRTMP1,KEY15
          RETURN
.
.         Contacts Temp File I/O routines
.
RATEMP2   MOVE      ZERO,OVRCD
          READ      CONTEMP1,KEY7;ANS
          GOTO      OVERCOND IF OVER
          RETURN
.
RSTEMP2   READ      CONTEMP1,KEY7;;
          RETURN
.
RDTEMP2   MOVE      ZERO,OVRCD
          READ      CONTEMP1,KEY7;DCONTSTA,CONTTYPE,CONTCNTR,CONTTITL,CONTSNAM:
                                  CONTGNAM,CONTGNM2,CONTADD1,CONTADD2,CONTADD3:
                                  CONTADD4,CONTPOST,CONTTELP,CONTTELB,CONTTELM:
                                  CONTRELP,CONTEMAI,CONTDINA,CONTTPID,CONTWPID:
                                  CONTSLET,CONTSSMS,CONTLAN1
          GOTO      OVERCOND IF OVER
          MOVE      DCONTSTA,CONTSTAT
          RETURN
.
RKTEMP2   MOVE      ZERO,OVRCD
          READKS    CONTEMP1;DCONTSTA,CONTTYPE,CONTCNTR,CONTTITL,CONTSNAM:
                             CONTGNAM,CONTGNM2,CONTADD1,CONTADD2,CONTADD3:
                             CONTADD4,CONTPOST,CONTTELP,CONTTELB,CONTTELM:
                             CONTRELP,CONTEMAI,CONTDINA,CONTTPID,CONTWPID:
                             CONTSLET,CONTSSMS,CONTLAN1
          GOTO      OVERCOND IF OVER
          MOVE      DCONTSTA,CONTSTAT
          RETURN
.
RPTEMP2   MOVE      ZERO,OVRCD
          READKP    CONTEMP1;DCONTSTA,CONTTYPE,CONTCNTR,CONTTITL,CONTSNAM:
                             CONTGNAM,CONTGNM2,CONTADD1,CONTADD2,CONTADD3:
                             CONTADD4,CONTPOST,CONTTELP,CONTTELB,CONTTELM:
                             CONTRELP,CONTEMAI,CONTDINA,CONTTPID,CONTWPID:
                             CONTSLET,CONTSSMS,CONTLAN1
          GOTO      OVERCOND IF OVER
          MOVE      DCONTSTA,CONTSTAT
          RETURN
.
WRTEMP2   MOVE      CONTSTAT,DCONTSTA
          WRITE     CONTEMP1,KEY7;DCONTSTA,CONTTYPE,CONTCNTR,CONTTITL,CONTSNAM:
                                  CONTGNAM,CONTGNM2,CONTADD1,CONTADD2,CONTADD3:
                                  CONTADD4,CONTPOST,CONTTELP,CONTTELB,CONTTELM:
                                  CONTRELP,CONTEMAI,CONTDINA,CONTTPID,CONTWPID:
                                  CONTSLET,CONTSSMS,CONTLAN1
          RETURN
.
UPTEMP2   MOVE      CONTSTAT,DCONTSTA
          UPDATE    CONTEMP1;DCONTSTA,CONTTYPE,CONTCNTR,CONTTITL,CONTSNAM:
                             CONTGNAM,CONTGNM2,CONTADD1,CONTADD2,CONTADD3:
                             CONTADD4,CONTPOST,CONTTELP,CONTTELB,CONTTELM:
                             CONTRELP,CONTEMAI,CONTDINA,CONTTPID,CONTWPID:
                             CONTSLET,CONTSSMS,CONTLAN1
          RETURN
.
DETEMP2   DELETE    CONTEMP1,KEY7
          RETURN
.
.         Alerts Temp File I/O routines
.
RATEMP3   MOVE      ZERO,OVRCD
          READ      ALRTEMP1,KEY9;ANS
          GOTO      OVERCOND IF OVER
          RETURN
.
RSTEMP3   READ      ALRTEMP1,KEY9;;
          RETURN
.
RDTEMP3   MOVE      ZERO,OVRCD
          READ      ALRTEMP1,KEY9;DALRTSTA,ALRTCATG,ALRTCODE,ALRTCNTR,ALRTDATE:
                                  ALRTREAC,ALRTLSEV,ALRTRDTE,ALRTDTIN,ALRTEDAT:
                                  ALRTRQBY,ALRTHOSP,ALRTUDAT,ALRTUTIM,ALRTUUID:
                                  ALRTCOMM,ALRTTPID
          GOTO      OVERCOND IF OVER
          MOVE      DALRTSTA,ALRTSTAT
          RETURN
.
RKTEMP3   MOVE      ZERO,OVRCD
          READKS    ALRTEMP1;DALRTSTA,ALRTCATG,ALRTCODE,ALRTCNTR,ALRTDATE:
                             ALRTREAC,ALRTLSEV,ALRTRDTE,ALRTDTIN,ALRTEDAT:
                             ALRTRQBY,ALRTHOSP,ALRTUDAT,ALRTUTIM,ALRTUUID:
                             ALRTCOMM,ALRTTPID
          GOTO      OVERCOND IF OVER
          MOVE      DALRTSTA,ALRTSTAT
          RETURN
.
RPTEMP3   MOVE      ZERO,OVRCD
          READKP    ALRTEMP1;DALRTSTA,ALRTCATG,ALRTCODE,ALRTCNTR,ALRTDATE:
                             ALRTREAC,ALRTLSEV,ALRTRDTE,ALRTDTIN,ALRTEDAT:
                             ALRTRQBY,ALRTHOSP,ALRTUDAT,ALRTUTIM,ALRTUUID:
                             ALRTCOMM,ALRTTPID
          GOTO      OVERCOND IF OVER
          MOVE      DALRTSTA,ALRTSTAT
          RETURN
.
WRTEMP3   MOVE      ALRTSTAT,DALRTSTA
          WRITE     ALRTEMP1,KEY9;DALRTSTA,ALRTCATG,ALRTCODE,ALRTCNTR,ALRTDATE:
                                  ALRTREAC,ALRTLSEV,ALRTRDTE,ALRTDTIN,ALRTEDAT:
                                  ALRTRQBY,ALRTHOSP,ALRTUDAT,ALRTUTIM,ALRTUUID:
                                  ALRTCOMM,ALRTTPID
          RETURN
.
UPTEMP3   MOVE      ALRTSTAT,DALRTSTA
          UPDATE    ALRTEMP1;DALRTSTA,ALRTCATG,ALRTCODE,ALRTCNTR,ALRTDATE:
                             ALRTREAC,ALRTLSEV,ALRTRDTE,ALRTDTIN,ALRTEDAT:
                             ALRTRQBY,ALRTHOSP,ALRTUDAT,ALRTUTIM,ALRTUUID:
                             ALRTCOMM,ALRTTPID
          RETURN
.
DETEMP3   DELETE    ALRTEMP1,KEY9
          RETURN
.
.         Theatre Charges Temp File I/O routines
.
RATEMP4   MOVE      ZERO,OVRCD
          READ      INPUSETF,KEY25;ANS
          GOTO      OVERCOND IF OVER
          RETURN
.
RSTEMP4   READ      INPUSETF,KEY25;;
          RETURN
.
RDTEMP4   MOVE      ZERO,OVRCD
          READ      INPUSETF,KEY25;DAMOUNT,DIAMT,PROVITEM,UNIQUE,OPPMTMNO:
                                   OPPMGSTA,OPPMGSTC,DOPPMCNT,OPPMSERV,ITEMREFN
          GOTO      OVERCOND IF OVER
          MOVE      DAMOUNT,AMOUNT
          MOVE      DIAMT,IAMT
          MOVE      DOPPMCNT,OPPMCNTR
          RETURN
.
RKTEMP4   MOVE      ZERO,OVRCD
          READKS    INPUSETF;DAMOUNT,DIAMT,PROVITEM,UNIQUE,OPPMTMNO:
                             OPPMGSTA,OPPMGSTC,DOPPMCNT,OPPMSERV,ITEMREFN
          GOTO      OVERCOND IF OVER
          MOVE      DAMOUNT,AMOUNT
          MOVE      DIAMT,IAMT
          MOVE      DOPPMCNT,OPPMCNTR
          RETURN
.
RPTEMP4   MOVE      ZERO,OVRCD
          READKP    INPUSETF;DAMOUNT,DIAMT,PROVITEM,UNIQUE,DIM1B:
                             OPPMGSTA,OPPMGSTC,DOPPMCNT,OPPMSERV,ITEMREFN
          GOTO      OVERCOND IF OVER
          MOVE      DAMOUNT,AMOUNT
          MOVE      DIAMT,IAMT
          MOVE      DOPPMCNT,OPPMCNTR
          RETURN
.
WRTEMP4   MOVE      AMOUNT,DAMOUNT
          MOVE      IAMT,DIAMT
          MOVE      OPPMCNTR,DOPPMCNT
          WRITE     INPUSETF,KEY25;DAMOUNT,DIAMT,PROVITEM,UNIQUE,OPPMTMNO:
                                   OPPMGSTA,OPPMGSTC,DOPPMCNT,OPPMSERV,ITEMREFN
          RETURN
.
UPTEMP4   MOVE      AMOUNT,DAMOUNT
          MOVE      IAMT,DIAMT
          MOVE      OPPMCNTR,DOPPMCNT
          UPDATE    INPUSETF;DAMOUNT,DIAMT,PROVITEM,UNIQUE,OPPMTMNO:
                             OPPMGSTA,OPPMGSTC,DOPPMCNT,OPPMSERV,ITEMREFN
          RETURN
.
DETEMP4   DELETE    INPUSETF,KEY25
          RETURN
.
.         Comment Temp File I/O routines
.
RATEMP5   MOVE      ZERO,OVRCD
          READ      COMTEMP1,KEY5;ANS
          GOTO      OVERCOND IF OVER
          RETURN
.
RSTEMP5   READ      COMTEMP1,KEY5;;
          RETURN
.
RDTEMP5   MOVE      ZERO,OVRCD
          READ      COMTEMP1,KEY5;COMMTYPE,DCOMMLIN,COMMTEXT
          GOTO      OVERCOND IF OVER
          MOVE      DCOMMLIN,COMMLINE
          RETURN
.
RKTEMP5   MOVE      ZERO,OVRCD
          READKS    COMTEMP1;COMMTYPE,DCOMMLIN,COMMTEXT
          GOTO      OVERCOND IF OVER
          MOVE      DCOMMLIN,COMMLINE
          RETURN
.
RPTEMP5   MOVE      ZERO,OVRCD
          READKP    COMTEMP1;COMMTYPE,DCOMMLIN,COMMTEXT
          GOTO      OVERCOND IF OVER
          MOVE      DCOMMLIN,COMMLINE
          RETURN
.
WRTEMP5   MOVE      COMMLINE,DCOMMLIN
          WRITE     COMTEMP1,KEY5;COMMTYPE,DCOMMLIN,COMMTEXT
          RETURN
.
UPTEMP5   MOVE      COMMLINE,DCOMMLIN
          UPDATE    COMTEMP1;COMMTYPE,DCOMMLIN,COMMTEXT
          RETURN
.
DETEMP5   DELETE    COMTEMP1,KEY5
          RETURN
+
.*****************************************************************************
.*        I/O Includes                                                       *
.*****************************************************************************
.
          INC       STD002IO
.
          INC       ACONTACT
          INC       ACTMSAV
          INC       ATWLLINK
          INC       AUDOTBOA
          INC       AUDOTBOB
          INC       AUTOATYP
          INC       BEDBDPRO
          INC       BRHLCOMN
          INC       CALCAGE
          INC       CALCCODE
          INC       CALCDAYS
          INC       CHKWCCLM
          INC       CINVPEND
          INC       CLACCAUD
          INC       CLALLAUD
          INC       CLALLENC
          INC       CLALLREF
          INC       CLEMRVIS
          INC       CLMLTHCP
          INC       CLMRTMAS
          INC       CLOPRARD
          INC       CLOPRCBD
          INC       CLOPRPMB
          INC       CLOPRSRG
          INC       CLOPRTSM
          INC       CLOUTBOA
          INC       CLOUTBOB
          INC       CLOUTBB1
          INC       CLOUTCAN
          INC       CLOUTHED
          INC       CLOUTPRC
          INC       CLOUTRSH
          INC       CLOUTTHI
          INC       CLOUTXSC
          INC       CLPATALR
          INC       CLPATATR
          INC       CLPATCOD
          INC       CLPATDSC
          INC       CLPATHSP
          INC       CLPATMAS
          INC       CLPATMIS
          INC       CLPATMSX
          INC       CLPATRE1
          INC       CLPATVIS
          INC       CLPMSAID
          INC       CLPMSCEX
          INC       CLPMSDAU
          INC       CLPMSHCG
          INC       CLPMSHCL
          INC       CLPMSHCP
          INC       CLPMSMTI
          INC       CLPMSPX2
          INC       CLPMSUPG
          INC       CLPMSUPO
          INC       CLPMSVX1
          INC       CLVISIAU
          INC       CLVISINT
          INC       CLVISPAY
          INC       CLWATTR1
          INC       CLWATTX1
          INC       CLWEBSEC
          INC       COUNTSLT
          INC       DEATHAUD
          INC       DEATHPOL
.0890602  INC       DGCLII13
          INC       DGCLICAC
          INC       DGCLICAE
          INC       DGCLICCB
          INC       DGCLICCP
          INC       DGCLICMR
          INC       DGCLICOA
          INC       DGCLICOB
          INC       DGCLICOC
          INC       DGCLICOD
          INC       DGCLICOG
          INC       DGCLICOH
          INC       DGCLICON
          INC       DGCLICOR
          INC       DGCLICOU
          INC       DGCLICPA
          INC       DGCLICPE
          INC       DGCLICPO
          INC       DGCLICPR
          INC       DGCLICTR
          INC       DGCLICUP
          INC       DGCLIM02
          INC       DGCLIRWL
          INC       DGCLIS14
          INC       DGCLIS15
          INC       DGCLIUWL
          INC       DGCLIWLD
          INC       EMRDRCHR
          INC       EOCDELEV
          INC       EXPPAYCD
          INC       GENANVIS
          INC       GENBOKNO
          INC       GETCNEFF
          INC       GETTFEES
.0890602  INC       HICCLAIM
          INC       HL7CLRVR
          INC       IBALPCCD
          INC       MERGECOD
          INC       MHAUDVIS
          INC       MRTVISCD
          INC       NAMSTRCD
          INC       OPRECOVT
          INC       OPTHETAT
          INC       OUT002
.0890602  INC       OUTBOATM
          INC       OUTDANTM
          INC       OUTPRCTM
          INC       OUTXSCTM
          INC       PATCOMN2
          INC       PATCOMN3
          INC       PATDKIPR
          INC       PATDOCCD
          INC       PATDPATH
          INC       PATIPERH
          INC       PATITMDS
          INC       PATITMRD
          INC       PATMCHRD                * Miscellaneous Charges read routine
          INC       PATDDHRD
          INC       PMSCEXTM
          INC       PMSCURTH
          INC       PMSHKIPR
          INC       PMSHPGTM
          INC       PMSIDWWR
.          INC       PMSIPLCD
          INC       PMSOSDTM
          INC       PMSPKIPR
          INC       PMSVX1TM
          INC       POSTCHRG
          INC       PREADCAN
          INC       PREADMIT
          INC       RTIODAYS
          INC       SLTCOUNT
          INC       SVPMSPX2
          INC       TFILENAM
          INC       TIMEDIFF
          INC       UPDUR
          INC       UPEADSTS             * Update eAdmission Status if required
          INC       VALCONTR
          INC       VALDIOPS
          INC       VINAHDEF
          INC       VINAHHL7             * VINAHDEF for HL7RECVR (0915066)
          INC       WEBCHGUR
.
.0890602  INC       DAVUBOOK
.0890602  INC       DAVWBOOK
          INC       WRITBOOK
          INC       PRFAINSR                * Default PRFA based on claim code
.
          INC       AAEDE1IO/INC
          INC       ACCAUDIO/INC
          INC       ALLAUDIO/INC
          INC       ALLDEPIO/INC
          INC       ALLDIAIO/INC
          INC       ALLEIDIO/INC
          INC       ALLENCIO/INC
          INC       ALLEDTIO/INC
          INC       ALLETXIO/INC
          INC       ALLLINIO/INC
          INC       ALLLNKIO/INC
          INC       ALLLONIO/INC
          INC       ALLPCTIO/INC
          INC       ALLQUEIO/INC
          INC       ALLPRRIO/INC
          INC       ALLREFIO/INC
          INC       ALLRHLIO/INC
          INC       ALLRLNIO/INC
          INC       ALLSERIO/INC
          INC       ALLSTSIO/INC
          INC       BOKRC1IO/INC
          INC       BOKRX1IO/INC
          INC       BOKSTAIO/INC
          INC       CCIEX7IO/INC
          INC       COMDEPIO/INC
          INC       DISMASIO/INC
          INC       DISPATIO/INC
          INC       DISPTLIO/INC
          INC       EMRCHAIO/INC
          INC       EMRCLIIO/INC
          INC       EMRDAYIO/INC
          INC       EMRHISIO/INC
          INC       EMRICDIO/INC
          INC       EMRINCIO/INC
          INC       EMRLOCIO/INC
          INC       EMRSITIO/INC
          INC       EMRUNKIO/INC
          INC       EMRVCDIO/INC
          INC       EMRVISIO/INC
          INC       EOCLNKIO/INC
          INC       HICBCNIO/INC
          INC       HICCITIO/INC
          INC       HICCLMIO/INC
          INC       HL7CISIO/INC
          INC       HL7INBIO/INC
          INC       IBAALVIO/INC
          INC       IBALPCIO/INC
          INC       IBAPDFIO/INC
          INC       IBAPOLIO/INC
          INC       IBAPOSIO/INC
          INC       LEGALTIO/INC
          INC       LEGBOAIO/INC
          INC       LEGDEAIO/INC
          INC       LEGDSCIO/INC
          INC       LEGINVIO/INC
          INC       LEGMISIO/INC
          INC       LEGTRNIO/INC
          INC       LEGVISIO/INC
          INC       MEHCJAIO/INC
          INC       MEHDIAIO/INC
          INC       MEHLEGIO/INC
          INC       MEHVI1IO/INC
          INC       MLTHCPIO/INC
          INC       MRTMASIO/INC
          INC       MRTVISIO/INC
          INC       NHIETHIO/INC
          INC       NHIMASIO/INC
          INC       NZPSPRIO/INC
          INC       OPRARDIO/INC
          INC       OPRCBDIO/INC
          INC       OPRDEAIO/INC
          INC       OPRDEDIO/INC
          INC       OPRITEIO/INC
          INC       OPRNURIO/INC
          INC       OPRPMBIO/INC
          INC       OPRSESIO/INC
          INC       OPRSRGIO/INC
          INC       OPRTSMIO/INC
          INC       OUTARTIO/INC
          INC       OUTBB1IO/INC
          INC       OUTBITIO/INC
          INC       OUTBOAIO/INC
          INC       OUTBOCIO/INC
          INC       OUTCANIO/INC
          INC       OUTCLIIO/INC
          INC       OUTCTYIO/INC
          INC       OUTDANIO/INC
          INC       OUTDCOIO/INC
          INC       OUTDIAIO/INC
          INC       OUTDTRIO/INC
          INC       OUTHEDIO/INC
          INC       OUTHISIO/INC
          INC       OUTLKBIO/INC
          INC       OUTLPCIO/INC
          INC       OUTMA1IO/INC
          INC       OUTMSPIO/INC
          INC       OUTPRCIO/INC
          INC       OUTPREIO/INC
          INC       OUTRAPIO/INC
          INC       OUTRF1IO/INC
          INC       OUTRSHIO/INC
          INC       OUTSESIO/INC
          INC       OUTSITIO/INC
          INC       OUTSRVIO/INC
          INC       OUTTHIIO/INC
          INC       OUTXSCIO/INC
          INC       OUTXWPIO/INC
          INC       PATALRIO/INC
          INC       PATAM1IO/INC
          INC       PATASFIO/INC
          INC       PATATRIO/INC
          INC       PATBMDIO/INC
          INC       PATCANIO/INC
          INC       PATCFAIO/INC
          INC       PATCODIO/INC
          INC       PATDADIO/INC
          INC       PATDDHIO/INC
          INC       PATDKIIO/INC
          INC       PATDO1IO/INC
          INC       PATDRGIO/INC
          INC       PATDSCIO/INC
          INC       PATDSTIO/INC
          INC       PATDTHIO/INC
          INC       PATDTRIO/INC
          INC       PATECDIO/INC
          INC       PATFINIO/INC
          INC       PATFN1IO/INC
          INC       PATFX1IO/INC
          INC       PATFHIIO/INC
          INC       PATGSRIO/INC
          INC       PATHOSIO/INC
          INC       PATHSPIO/INC
          INC       PATICUIO/INC
          INC       PATICDIO/INC
          INC       PATIN1IO/INC
          INC       PATINVIO/INC
          INC       PATIPEIO/INC
          INC       PATITMIO/INC
          INC       PATLINIO/INC
          INC       PATLOCIO/INC
          INC       PATMA1IO/INC
          INC       PATMCHIO/INC
          INC       PATMI1IO/INC
          INC       PATMMBIO/INC
          INC       PATMRGIO/INC
          INC       PATNIDIO/INC
          INC       PATNIPIO/INC
          INC       PATNOBIO/INC
          INC       PATONLIO/INC
          INC       PATPA1IO/INC
          INC       PATPNIIO/INC
          INC       PATPR1IO/INC
          INC       PATRE1IO/INC
          INC       PATSGCIO/INC
          INC       PATTFEIO/INC
          INC       PATTRNIO/INC
          INC       PATUNAIO/INC
          INC       PATURAIO/INC
          INC       PATURCIO/INC
          INC       PATVISIO/INC
          INC       PATWC1IO/INC
          INC       PATWMAIO/INC
          INC       PATWR1IO/INC
          INC       PATWVEIO/INC
          INC       PATONHIO/INC
          INC       PMSADWIO/INC
          INC       PMSAIDIO/INC
          INC       PMSALNIO/INC
          INC       PMSBRQIO/INC
          INC       PMSCAUIO/INC
          INC       PMSCCDIO/INC
          INC       PMSCEXIO/INC
          INC       PMSCIDIO/INC
          INC       PMSCMBIO/INC
          INC       PMSCTCIO/INC
          INC       PMSCURIO/INC
          INC       PMSDAUIO/INC
          INC       PMSDUNIO/INC
          INC       PMSEDWIO/INC
          INC       PMSEHBIO/INC
          INC       PMSEXTIO/INC
          INC       PMSHCGIO/INC
          INC       PMSHCLIO/INC
          INC       PMSHCPIO/INC
          INC       PMSHPGIO/INC
          INC       PMSHPOIO/INC
          INC       PMSIDWIO/INC
.          INC       PMSIPLIO/INC
          INC       PMSMTIIO/INC
          INC       PMSPAYIO/INC
          INC       PMSPTDIO/INC
          INC       PMSPX2IO/INC
          INC       PMSQPTIO/INC
          INC       PMSRELIO/INC
          INC       PMSTLEIO/INC
          INC       PMSTSPIO/INC
          INC       PMSUPDIO/INC
          INC       PMSUPGIO/INC
          INC       PMSUPOIO/INC
          INC       PMSVX1IO/INC
          INC       PMSWORIO/INC
          INC       PMSWX1IO/INC
          INC       PRIPRAIO/INC
          INC       RCPBNKIO/INC
          INC       RCPDTEIO/INC
          INC       PRSPMIIO/INC
          INC       VISCMTIO/INC
          INC       VISIAUIO/INC
          INC       VISINTIO/INC
          INC       VISMDTIO/INC
          INC       VISMTXIO/INC
          INC       VISPAYIO/INC
          INC       WATCATIO/INC
          INC       WATCHAIO/INC
          INC       WATESEIO/INC
          INC       WATESMIO/INC
          INC       WATESNIO/INC
          INC       WATESPIO/INC
          INC       WATOPAIO/INC
          INC       WATOPSIO/INC
          INC       WATTR1IO/INC
          INC       WATTX1IO/INC
          INC       WEBERRIO/INC
          INC       WEBSECIO/INC
+
