.******************************************************************************
.* System    :   Mental Health                                                *
.* Program   :   IBAMEH17                                                     *
.* Desc      :   Load PRIMHD Acknowledgement Messages to "mehpmeaf"           *
.******************************************************************************
.* Date      :   16/09/2008                                                   *
.* Author    :   Mike Laming                                                  *
.* Mods      :                                                                *
.*       V11.01.01  30/03/2021 Tracey Nguyen  TSK 0904417                     *
.*                  Added ATFAMW for mehpataf.MHPTFAMW - Family/Whanau        *
.*                  Involvement                                               *
.*       V10.13.01  31/01/2019 Ebon Clements  TSK 0868180                     *
.*                  Increased CMDLINE from DIM 80 to DIM 127                  *
.*       V10.12.01  22/03/2018 Ania P         TSK 0261630                     *
.*                  Removed multiple instances of PORT                        *
.*       V10.11.01  05/09/2017 Jill Parkinson TSK 0275199                     *
.*                  Added check for EOS in GETXML11 to stop loop              *
.*                  Added check for 999 RECCNCNT to stop another loop         *
.*       V10.10.01  11/05/2017 Jill Parkinson TSK 0275199                     *
.*                  Changed PINP92000 to go back to PINP1000 not stop         *
.*       V10.08.01  18/11/2016  Jill Parkinson TSK 0275199                    *
.*                  Added 3 new fields for DIM100x & DIM4090x to handle       *
.*       V10.03.03  20/09/2012  Mike Laming   CAR 266950                      *
.*                  Added 3 new fields for DIM100x & DIM4090x to handle       *
.*                  30,000 characters in a record                             *
.*       V10.03.02  29/06/2012  Mike Laming   CAR 266950                      *
.*                  Mods to GETXML00 to fix hard loop (caused by split fields)*
.*       V10.03.01  12/04/2012  Mike Laming   CAR 261603                      *
.*                  Mods for MEHPATaf file change - see MHPTOCUR (MHPTSPAR)   *
.*        V9.12.02  30/07/2009 Mike Laming    CAR 201941                      *
.*                  Recompiled for changes to Count fields in MEHPTFFD        *
.*        V9.12.01  26/06/2009 Mike Laming    CAR 194293                      *
.*                  Re-ported from V9.10 for latest changes                   *
.*        V9.10.07  24/06/2009  Mike Laming   CAR 194293                      *
.*                  Add Table "mehpewaf" for multiple Errors. Add routines to *
.*                  write Message Ids to table - WRERR000 & GETERID0          *
.*        V9.10.06  26/05/2009  Mike Laming   CAR 196789                      *
.*                  Change CHKERR00 to strip "-" from Error Message Ids to    *
.*                  allow "Rn-annn-nn" to fit in DIM 9 field                  *
.*        V9.10.05  25/03/2009  Mike Laming   CAR 191877                      *
.*                  Change PRIMHD Unique No. fields to DIM 3 - Correct KEYs   *
.*        V9.10.04  06/01/2009  Mike Laming   CAR 166690                      *
.*                  Final touches?                                            *
.*        V9.10.03  23/12/2008  Mike Laming   CAR 166690                      *
.*                  Another fix to save the idiots who cant enter Path & File *
.*        V9.10.02  17/12/2008  Mike Laming   CAR 166690                      *
.*                  Fix "Hitenter" at KASCI300 (to save idiots)               *
.*        V9.10.01  18/11/2008  Mike Laming   CAR 166690                      *
.*                  Change Keyin routine to cleanup field name                *
.*        V9.10.00  16/09/2008  Mike Laming   CAR 166690                      *
.*                  New Program                                               *
.*                                                                            *
.******************************************************************************
+
          INC       STD001FD
          INC       PATCONFD/INC
          INC       MEHCONFD/INC
          INC       MEHPMEFD/INC            * Mental Health PRIMHD Error Table
          INC       MEHPLSFD/INC            * PRIMHD "LS" Record - Legal Status
          INC       MEHPRDFD/INC            * PRIMHD "RD" Record - Referral Disc
          INC       MEHPATFD/INC            * PRIMHD "AT" Record
          INC       MEHPCNFD/INC            * PRIMHD "CN" Record
          INC       MEHPCOFD/INC            * PRIMHD "CO" Record
          INC       MEHPOIFD/INC            * PRIMHD "OT" & "OI" record
          INC       MEHPTFFD/INC            * PRIMHD Transmission File table
          INC       MEHPEWFD/INC            * PRIMHD Ack. Errors/Warnings
          INC       WEBSECFD/INC            * Web Security / Web Users
          INC       IBASEQFD/INC 
          INC       TFILEVAR/INC
          INC       WEBERRFD/INC

.
. ----- Input Text File Definitions -----
.
INTEST01  FILE      ASCII, FIXED=2000       * used to test if file exists
INNAMXML  FILE      ASCII, FIXED=4090       * input XML from MoH               
BLOKFILE  FILE      ASCII, FIXED=4090       * input XML from MoH               
TESTFILE  FILE      ASCII, FIXED=4090       * test output file                 
INNAMTXT  FILE      ASCII, FIXED=300        * input file for XML file names
.
INPRERCD  DIM       9
INPRTYPE  DIM       1
INPRREFR  DIM       25
INPREMSG  DIM       250
INPRSPAR  DIM       14
.
TMFN0113  DIM       13                      * vars to identify XML file names
TMFN1470  DIM       60
.
. ----- Program Variables -----
.
.
BLOCK     FORM      3
BLOCKSS   FORM      3
BLOCKTT   FORM      3
BLOKCNT   FORM      3
BLKLVLNO  FORM      3
CMDLINE   DIM       127
DATALEN   FORM      5
DATBLOK   FORM      5
DIM2A     DIM       2 
DIM2B     DIM       2 
DIM3A     DIM       3 
DIM3B     DIM       3 
DIM4A     DIM       4 
DIM5A     DIM       5 
DIM6A     DIM       6 
DIM8A     DIM       8 
DIM10A    DIM       10
DIM12A    DIM       12
DIM17A    DIM       17
DIM20A    DIM       20
DIM25A    DIM       25
DIM30     DIM       30
DIM100A   DIM       100[5]
DIM100B   DIM       100[5]
DIM100C   DIM       100[5]
DIM100D   DIM       100[5]
DIM100E   DIM       100[5]
DIM100F   DIM       100[5]
DIM100G   DIM       100[5]
DIM100H   DIM       100[5]
DIM120    DIM       120
DIM150    DIM       150
DIM4060   DIM       4060
DIM4090A  DIM       4090[5]
DIM4090B  DIM       4090[5]
DIM4090C  DIM       4090[5]
DIM4090D  DIM       4090[5]
DIM4090E  DIM       4090[5]
DIM4090F  DIM       4090[5]
DIM4090G  DIM       4090[5]
DIM4090H  DIM       4090[5]
DIM4090I  DIM       4090
DONE      FORM      1
ERUNIQID  DIM       9
ERUNCNT   FORM      3
ERRTYPE   DIM       1
ERRORSSS  FORM      1
EXTRDATE  DIM       8
GETPATHN  FORM      1
FILENAME  DIM       60
FINDSTOP  FORM      1
FL1       FORM      1
FL2       FORM      1
FORM8     FORM      8
FORM9     FORM      9
FLD60IN   DIM       60
FLD60OUT  DIM       60
FNAMEIN   DIM       8 
FNAMEXML  DIM       8 
FOUND     FORM      1
FULLNAME  DIM       80
F5A       FORM      5
HEADDES1  DIM       35
HEADDES2  DIM       60
LENGTH    FORM      3
LENIN     FORM      3
LENOUT    FORM      3
NOTFOUND  FORM      1
PATHNAME  DIM       60
PRNTLINE  DIM       132
.
RECDSTAT  DIM       1
RECDTYPE  DIM       1
RECDDATE  DIM       8
RECDLSID  DIM       8
RECDLSUN  DIM       2
RECDRDID  DIM       8
RECDIDID  DIM       20
.
RECATCNT  FORM      5
RECCNCNT  FORM      3
RECCOCNT  FORM      3
RECOTCNT  FORM      3
RECOICNT  FORM      3
.
.                                           * output fields for all recd. types
ACKEXDAT  DIM       8                       * from ".zip" file name
ACKEXNUM  DIM       3                       * ditto
ACKESTAT  DIM       1
ACKEFDAT  DIM       8
ACKETDAT  DIM       8
ACKESORG  DIM       8
.
KEYLSID   DIM       8                       * from "Legal Status" xml
KEYUNIQ   DIM       2
KEYRDID   DIM       8                       * from "Referral Discharge" xml
KEYURNO   DIM       8
.
.                                           * variables for PRIMHD data fields
LSFVER    DIM       3
LSLSID    DIM       20
LSSORG    DIM       8
LSORID    DIM       8
LSFDAT    DIM       19
LSTDAT    DIM       19
LSDELT    DIM       9
LSOTYP    DIM       3
LSEHCU    DIM       8
LSPSEX    DIM       1
LSPDOB    DIM       10
LSLSCD    DIM       2
LSRCPN    DIM       6
LSSDAT    DIM       19
LSEDAT    DIM       19
.
RDFVER    DIM       3 
RDRFID    DIM       10
RDSORG    DIM       8
RDORID    DIM       8
RDOTYP    DIM       3
RDFDAT    DIM       19
RDTDAT    DIM       19
RDDELT    DIM       9
RDTEAM    DIM       6
RDEHCU    DIM       7
RDPSEX    DIM       1
RDPDOB    DIM       10
RDRFFR    DIM       2
RDRFTO    DIM       2
RDECOD    DIM       2
RDRSTR    DIM       19
RDREND    DIM       19
.
ATACID    DIM       3
ATATYP    DIM       3
ATASET    DIM       2
ATFAMW    DIM       1
ATWCPN    DIM       6
ATSDAT    DIM       19
ATEDAT    DIM       19
.
CNCSCD    DIM       20
CNCSYS    DIM       2
CNDTYP    DIM       1
CNCCOD    DIM       8
CNICID    DIM       2
CNITYP    DIM       1
CNIVAL    DIM       8
CNSDAT    DIM       19
CNEDAT    DIM       19
.
COCCOD    DIM       20
CORCOL    DIM       4
COCDAT    DIM       19
COWCPN    DIM       6
COOESP    DIM       9
COPVER    DIM       4
COFCAR    DIM       4
.
OIOITM    DIM       3
OITYPE    DIM       2
OIMADM    DIM       4
OICSTA    DIM       4
OICDAT    DIM       19
OIIVAL    DIM       1
.
REFRCID   DIM       8
REFREFID  DIM       8
REFSTAT   DIM       1
REFETYP   DIM       1
REFERRS   DIM       3
REFWARN   DIM       3
REFERRID  DIM       9
REFERTTL  DIM       25
.
OUTTLVER  DIM       10
.
SP700     DIM       700
SP4090    DIM       4090
TESTPORT  DIM       8
WRK100A   DIM       100
WRK4090A  DIM       4090
WRK4090B  DIM       4090
WRK4090C  DIM       4090
WRK4090D  DIM       4090
XMLTAGIN  DIM       150
XMLTAGXX  DIM       150
SAVTAGXX  DIM       150
XMLSTTAG  DIM       150
XMLENTAG  DIM       150
XMLXXTAG  DIM       150
XMLDATA   DIM       500
.
.
STRTTAG   FORM      5
ENDDATA   FORM      5
ENDTAG    FORM      5
ENDRECD   FORM      5
TAGLEN1   FORM      5
TAGLEN2   FORM      5
TOTRDNO   FORM      5
TOTRDER   FORM      5
TOTRDWN   FORM      5
TOTLSNO   FORM      5
TOTLSER   FORM      5
TOTLSWN   FORM      5
.
RECIN     FORM      5
RECLS     FORM      5
RECREF    FORM      5
RECUP     FORM      5
RECOUT    FORM      5
RECERR    FORM      5
.
. ----- Program Constants -----
.
ST1       INIT      "<"
ST2       INIT      "</"
EN        INIT      ">"
PP        INIT      "|"
.
.
PRGNAM    INIT      "Upload PRIMHD Acknowledgements"
PRGID     INIT      "IBAMEH17"
VERSION   INIT      "V12.00.00"
+
.******************************************************************************
.*                                   ML0000                                   *
.*                                 Main Module                                *
.******************************************************************************
ML0000    CALL      INIT0000                * Initialise variables & open files
          BRANCH    EXIT,ML9000
.
ML1000    CALL      OPTN0000                * Select Option          
          BRANCH    EXIT,ML1000,ML9000
.
ML3000    CALL      UNZP0000                * Unzip the file & list input files
          BRANCH    EXIT,ML1000
.
ML5000    CALL      PINP0000                * Process the input file/s
          GOTO      ML1000
.
ML9000    CALL      KILL0000                * remove temporary files
          MATCH     SP8,PGM
          GOTO      ML9999 IF EQUAL
.
          CHAIN     PGM                     * Chain back to appropriate menu
ML9999    SHUTDOWN  ""
+
.******************************************************************************
.*                                  INIT0000                                  *
.*                      Initialise Variables & Open Files                     *
.******************************************************************************
INIT0000  MOVE      ZERO,EXIT
          MOVE      "999",CLNO
          CALL      IBACLOCK
          CALL      DISPHEAD                * Display screen header
.
          DISPLAY   *P64:24,"controlf";
          OPEN      CONTROLF,"controlf"
.
          DISPLAY   *P64:24,"mehpmeaf";
          OPEN      MEHPMEA1,"mehpmeaf"
.
          DISPLAY   *P64:24,"mehprdaf";
          OPEN      MEHPRDA1,"mehprdaf"
.
          DISPLAY   *P64:24,"mehpataf";
          OPEN      MEHPATA1,"mehpataf"
.
          DISPLAY   *P64:24,"mehpcnaf";
          OPEN      MEHPCNA1,"mehpcnaf"
.
          DISPLAY   *P64:24,"mehpcoaf";
          OPEN      MEHPCOA1,"mehpcoaf"
.
          DISPLAY   *P64:24,"mehpoiaf";
          OPEN      MEHPOIA1,"mehpoiaf"
.
          DISPLAY   *P64:24,"mehplsaf";
          OPEN      MEHPLSA1,"mehplsaf"
.
          DISPLAY   *P64:24,"mehpewaf";
          OPEN      MEHPEWA1,"mehpewaf"
.
          DISPLAY   *P64:24,"mehptfaf";
          OPEN      MEHPTFA1,"mehptfaf"
.
          READ      CONTROLF,SIXTY9;*137,MHCNEDIR
.
          PACK      SP700,SP70,SP70,SP70,SP70,SP70,SP70,SP70,SP70,SP70,SP70
          PACK      SP4090,SP700,SP700,SP700,SP700,SP700,SP700
.
          MOVE      MHCNEDIR,PATHNAME
          UNPACK    SP70,FILENAME
.                                           * fields used in keys
          UNPACK    SP70,ACKEXDAT,ACKEXNUM,RECDDATE,RECDSTAT,RECDTYPE
          MOVE      "001",ACKEXNUM
          UNPACK    SP70,RECDLSID,RECDLSUN,RECDRDID,RECDIDID
.
          CALL      TFILENAM
          MOVE      TFILNAME,FNAMEIN
.
          CALL      TFILENAM
          MOVE      TFILNAME,TESTPORT
.
          CALL      TFILENAM
          MOVE      TFILNAME,FNAMEXML
.
          CALL      TFILENAM
          MOVE      TFILNAME,KEY8
.
INIT9999  RETURN
+
.******************************************************************************
.*                                  OPTN0000                                  *
.*                         Select option to run upload                        *
.******************************************************************************
OPTN0000  MOVE      ZERO,EXIT
          DISPLAY   *P1:3,*EF:
                    *P1:4,*V2LON," 0",*HOFF," = Exit":
                    *P1:5,*V2LON," 1",*HOFF," = Upload PRIMHD Acknowledgements":
                    *P1:6,*V2LON," 2",*HOFF," = Character based testing only ":
                          "- Upload PRIMHD Acknowledgements":
                    *P1:8,"Select Option : ";
.
OPTN1000  KEYIN     *P17:8,*V2LON,*DV,UNDLN2,*P17:8,OPTION;
          COMPARE   ZERO,OPTION
          GOTO      OPTN9500 IF EQUAL
.
          BRANCH    OPTION,OPTN3000,OPTN3000
          GOTO      OPTN1000 IF NOT EQUAL
.
.
OPTN3000  MOVE      MHCNEDIR,FLD60OUT
          DISPLAY   *P8:10,"Enter Path for PRIMHD Acknowledgement '.zip' file ":
                    "(eg.   /mnt/tmp/   ) ";
.
          MOVE      "11",CVERT
          MOVE      "1",GETPATHN
          CALL      KASCI000                * keyin path (or file) name
          BRANCH    EXIT,OPTN0000
.
          PACK      FLD60OUT,SP30,SP30
          DISPLAY   *P8:13,"Enter PRIMHD Acknowledgement file name":
                    " (eg. aKPEccyymmdd_123_001.zip ) ";
.
          MOVE      "14",CVERT
          MOVE      "0",GETPATHN
          CALL      KASCI000                * keyin (path or) file name
          BRANCH    EXIT,OPTN0000
.
          IF        OPTION = 2
            CALL      CONTQST               * Ok to Continue (Y/N/C) ?
            BRANCH    CEXIT,OPTN5000,OPTN9300,OPTN9500
          ENDIF
.
.
OPTN5000  MOVE      ZERO,EXIT
          SCAN      "AKPE",FILENAME         * get the ACK file-name date
          IF        !@EQUAL
            SCAN      "RKPE",FILENAME
            GOTO      OPTN9700 IF NOT EQUAL
          ENDIF
          MOVEFPTR  FILENAME,F5
          ADD       "4",F5                  * Extract date is in Posn.5
          RESET     FILENAME,F5
          MOVE      FILENAME,ACKEXDAT
          RESET     FILENAME
          SCAN      ".zip",FILENAME
          IF        @EQUAL
            MOVEFPTR  FILENAME,F5           * get the ACK file-name run number
            SUB       "3",F5                * Run No - last 3 chars of File Name
            RESET     FILENAME,F5
            MOVE      FILENAME,DIM3A
            CMATCH    "0",DIM3A
            GOTO      OPTN9999 IF NOT EQUAL
            TYPE      DIM3A
            GOTO      OPTN9999 IF NOT EQUAL
            MOVE      DIM3A,ACKEXNUM
          ENDIF
          GOTO      OPTN9999
.
OPTN9300  MOVE      ONE,EXIT
          GOTO      OPTN9999
.
OPTN9500  MOVE      TWO,EXIT
          GOTO      OPTN9999
.
OPTN9700  CLEAR     PRNTLINE
          MOVE      "File name does not start with 'AKPE' or 'RKPE'",PRNTLINE
          CALL      PRNT0000
          GOTO      OPTN9999
.
OPTN9999  RETURN
+
.******************************************************************************
.*                                 KASCI000                                   *
.*                            Keyin PATH or FILE name                         *
.* Returns: EXIT  0 = no file name entered                                    *
.*                1 = valid filename entered                                  *
.******************************************************************************
KASCI000  KEYIN     *P8:CVERT,*V2LON,*EL,*RV,FLD60OUT;
.
          PACK      FLD60OUT,FLD60OUT,SP20,SP20,SP20
.
          MATCH     SP70,FLD60OUT           * anything entered ?
          GOTO      KASCI950 IF EQUAL       * no
          CMATCH    "\",FLD60OUT            * "\" entered ?
          GOTO      KASCI950 IF EQUAL       * no
.
          COMPARE   "1",GETPATHN
          GOTO      KASCI500 IF NOT EQUAL
.
KASCI100  CMATCH    "/",FLD60OUT            * check format of Path
          GOTO      KASCI300 IF NOT EQUAL
          BUMP      FLD60OUT,1
          SCAN      "/",FLD60OUT            * check format of Path
          GOTO      KASCI300 IF NOT EQUAL
.
.                                           * it's a Path
          RESET     FLD60OUT
          SQUEEZE   FLD60OUT
          ENDSET    FLD60OUT
          BUMP      FLD60OUT,-1
          CMATCH    "/",FLD60OUT
          IF        !@EQUAL
            APPEND    "/",FLD60OUT          * add end "/"
          ENDIF
.
KASCI200  RESET     FLD60OUT
          DISPLAY   *P8:CVERT,*V2LON,*EL,FLD60OUT;
          MOVE      FLD60OUT,PATHNAME
          GOTO      KASCI999
.
KASCI300  DISPLAY   *P1:24,*EL,"Path name is invalid - ";
          CLEAR     PRNTLINE
          APPEND    "'",PRNTLINE
          APPEND    FLD60OUT,PRNTLINE
          APPEND    "' - Path name is invalid",PRNTLINE
          CALL      PRNT0000
          BRANCH    OPTION,KASCI950         * terminate if Option 1
          CALL      HITENTER
          GOTO      KASCI000
.
.                                           * get a file name
KASCI500  RESET     FLD60OUT
          SCAN      ".zip",FLD60OUT
          GOTO      KASCI600 IF EQUAL
.                                           * add ".zip" if missing
          SQUEEZE   FLD60OUT
          ENDSET    FLD60OUT
          APPEND    ".zip",FLD60OUT
          RESET     FLD60OUT
          DISPLAY   *P8:CVERT,*V2LON,*EL,FLD60OUT;
.                                           * see if file exists
KASCI600  RESET     FLD60OUT
          MOVE      FLD60OUT,FILENAME
          SQUEEZE   PATHNAME
          SQUEEZE   FILENAME
          PACK      FULLNAME,PATHNAME,FILENAME
          DISPLAY   *P1:22,*EL,FULLNAME
.
          CLEAR     PRNTLINE
          APPEND    "Path & File name entered : ",PRNTLINE
          APPEND    FULLNAME,PRNTLINE
          CALL      PRNT0000
          CLEAR     PRNTLINE
          CALL      PRNT0000
.
.
KASCI700  MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      INTEST01,FULLNAME       * open file
          TRAPCLR   IO
.
          IF        OVRCD = 0
            DISPLAY   *P68:CVERT,*HOFF,"file found";
          ELSE
            DISPLAY   *P1:24,*EL,*B,"File not found.  ";
            CLEAR     PRNTLINE
            APPEND    "File not found in path '",PRNTLINE
            APPEND    PATHNAME,PRNTLINE
            APPEND    "' - program ended",PRNTLINE
            CALL      PRNT0000
            BRANCH    OPTION,KASCI950,KASCI0000
            GOTO      KASCI0000
          ENDIF
.
KASCI900  MOVE      ZERO,EXIT
          GOTO      KASCI999
.
KASCI950  MOVE      ONE,EXIT
.
KASCI999  RETURN
+
.******************************************************************************
.*                                  UNZP0000              Called by: ML0000   *
.*                  Unzip the Ack file & list the input files                 *
.******************************************************************************
UNZP0000  MOVE      ZERO,EXIT
          MOVE      "2",ACKESTAT
          CMATCH    "A",FILENAME
          IF        @EQUAL
            MOVE      "3",ACKESTAT
          ENDIF
.                                           * unzip the file
          SQUEEZE   FULLNAME
          CLEAR     CMDLINE
          APPEND    "unzip -o ",CMDLINE     * unzip & overwrite existing files
          APPEND    FULLNAME,CMDLINE
          APPEND    " > ",CMDLINE
          APPEND    FNAMEIN,CMDLINE
          APPEND    ".txt",CMDLINE
          RESET     CMDLINE
          EXECUTE   CMDLINE,TASKID
.
          DISPLAY   *P1:22,"CMDLINE : ",CMDLINE,*W1
          MATCH     "0       ",TASKID
          IF        !@EQUAL
            DISPLAY   *P1:23,"Error unzipping Acknowledgement file":
                      *P1:24," ";
            CLEAR     PRNTLINE
            APPEND    "Error unzipping Acknowledgement file - '",PRNTLINE
            APPEND    TASKID,PRNTLINE
            APPEND    "' - program ended",PRNTLINE
            CALL      PRNT0000
            MOVE      ONE,EXIT
            GOTO      UNZP9999
          ENDIF
.
          DISPLAY   *P1:22,*EF
.
UNZP9999  RETURN
.******************************************************************************
.*                                  PINP0000                                  *
.*                         Process The Input XML Files                        *
.******************************************************************************
PINP0000  MOVE      ZERO,EXIT     
          MOVE      ZERO,RECIN
          MOVE      ZERO,RECLS
          MOVE      ZERO,RECREF
          MOVE      ZERO,RECOUT
          MOVE      ZERO,RECERR
          MOVE      ZERO,RECUP
          MOVE      ZERO,TOTRDNO
          MOVE      ZERO,TOTRDER
          MOVE      ZERO,TOTRDWN
          MOVE      ZERO,TOTLSNO
          MOVE      ZERO,TOTLSER
          MOVE      ZERO,TOTLSWN
          UNPACK    SP30,ACKESORG,ACKEFDAT,ACKETDAT
          DISPLAY   *P1:22,*EF
          PACK      CMDLINE,SP30,SP30,SP30,SP70
.
          OPEN      INNAMTXT,FNAMEIN
.
          IF        OPTION = 2
            PREP      TESTFILE,TESTPORT
          ENDIF
.
.                                           * find the LS or REF ".XML" data 
PINP1000  READ      INNAMTXT,SEQ;TMFN0113,TMFN1470
          GOTO      PINP5000 IF OVER        * end of file
.
          MOVE      SP70,DIM4090I
          SCAN      "inflating",TMFN0113
          GOTO      PINP1000 IF NOT EQUAL
.
          UNPACK    TMFN1470,RECDSTAT:      * "A"ccepted or "R"ejected
                             RECDTYPE:      * "L"egal_Status, "R"eferral_Disch
                             RECDDATE:      * ccyymmdd
                             DIM150         * rest of the file name
.                                           * 
          MATCH     SP8,ACKEXDAT
          IF        @EQUAL
            MOVE      RECDDATE,ACKEXDAT
          ENDIF
.                                           * get the "LS" or "RD" Id.
          SCAN      ".xml",DIM150
          IF        @EQUAL
            MOVEFPTR  DIM150,F5A
            BUMP      DIM150,-12
            SCAN      "_",DIM150
            BUMP      DIM150,1
            ASSIGN    (F5A-1),F5
            SETLPTR   DIM150,F5
            MOVE      DIM150,FLD60IN
            MOVE      "10",LENGTH
            CALL      RJUS0000
            MOVE      FLD60OUT,DIM10A
            CMATCH    "L",RECDTYPE
            IF        @EQUAL
              UNPACK    DIM10A,RECDLSID,RECDLSUN    * Id=8, Unique No.=2 
            ELSE
              UNPACK    DIM10A,DIM2,RECDRDID
            ENDIF
          ENDIF
.
.                                           * rename the XML file to ".txt" file
PINP1500  SQUEEZE   TMFN1470
          MOVE      ".txt",DIM4A
          CLEAR     CMDLINE
          APPEND    "mv ",CMDLINE
          APPEND    TMFN1470,CMDLINE  
          APPEND    " ",CMDLINE
          APPEND    FNAMEXML,CMDLINE
          APPEND    DIM4A,CMDLINE
          RESET     CMDLINE
          EXECUTE   CMDLINE,TASKID          * EXECUTE the rename
.
          DISPLAY   *P1:23,*EF,"Reading file : ",TMFN1470,*W1
          CLEAR     PRNTLINE
          APPEND    "Processing file - ",PRNTLINE
          APPEND    TMFN1470,PRNTLINE
          CALL      PRNT0000
.                                    
          OPEN      INNAMXML,FNAMEXML        * Open the ".txt" file
          
. ----- Read the input XML file into temporary variables -----
.
.                                           * read PRIMHD Acknowledgement data
PINP2000  CALL      CLRARR00
          MOVE      SP70,DIM4090I
          READ      INNAMXML,SEQ;DIM4090A[1],DIM4090B[1],DIM4090C[1]:
                                 DIM4090D[1],DIM4090E[1],DIM4090F[1]:
                                 DIM4090G[1],DIM4090H[1],DIM4090I
          GOTO      PINP1000 IF OVER        * end of file - get next XML file
.
. *** file too big to process, print error and skip ***
          PACK      DIM4090I,DIM4090I,SP70
          MATCH     SP70,DIM4090I
          GOTO      PINP9100 IF NOT EQUAL
.
          MATCH     "<?xml version=",DIM4090A[1]
          GOTO      PINP9200 IF NOT EQUAL   * not a valid xml record
.
          REP       " @",DIM4090A[1]        * get rid of blanks in input fields
          REP       " @",DIM4090B[1]
          REP       " @",DIM4090C[1]
          REP       " @",DIM4090D[1]
          REP       " @",DIM4090E[1]
          REP       " @",DIM4090F[1]
          REP       " @",DIM4090G[1]
          REP       " @",DIM4090H[1]
.
          CMATCH    "L",RECDTYPE            * "LS" Record
          IF        @EQUAL
            CALL      PRLS0000
            IF        EXIT = 0
              ADD       ONE,RECLS 
            ENDIF
          ENDIF
.
          CMATCH    "R",RECDTYPE            * "RD" Record
          IF        @EQUAL
            CALL      PRRD0000
            IF        EXIT = 0
              ADD       ONE,RECREF
            ENDIF
          ENDIF
.
          ADD       ONE,RECIN
          GOTO      PINP2000
.
. ----- Finished -----
.
PINP5000  MOVE      ZERO,EXIT               * update Transmission File data
          PACK      KEY11,ACKEXDAT,ACKEXNUM,SP20
          CALL      RDMHPTF1                * find the "mehptfaf" record
          IF        OVRCD <> 1 & OPTION = 1
            MOVE      ACKESTAT,MHPFSTAT
            MOVE      TOTRDER,MHPFRDER
            MOVE      TOTRDWN,MHPFRDWN
            MOVE      TOTLSER,MHPFLSER
            MOVE      TOTLSWN,MHPFLSWN
            CALL      UPMHPTF1
            GOTO      PINP6000
          ENDIF
.
          BRANCH    OPTION,PINP6000
.
.                                           * testing stuff (Option = 2)
          CALL      DEMHPTF1                * delete old record
          PACK      MHPFXDAT,ACKEXDAT,SP10
          PACK      MHPFXNUM,ACKEXNUM,SP10
          PACK      KEY11,ACKEXDAT,ACKEXNUM,SP20
          PACK      MHPFSORG,ACKESORG,SP20
          PACK      MHPFFDAT,ACKEFDAT,SP20
          PACK      MHPFTDAT,ACKETDAT,SP20
          MOVE      ACKESTAT,MHPFSTAT
          MOVE      TOTRDNO,MHPFRDNO
          MOVE      TOTRDER,MHPFRDER
          MOVE      TOTRDWN,MHPFRDWN
          MOVE      TOTLSNO,MHPFLSNO
          MOVE      TOTLSER,MHPFLSER
          MOVE      TOTLSWN,MHPFLSWN
          PACK      MHPFSPAR,SP70
          CALL      WRMHPTF1
.
.
PINP6000  DISPLAY   *P1:19,*EF:
                    *P1:19,"Total records read    : ",RECIN:
                     SP5,RECLS," Legal Status ",RECREF," Referral Discharge":
                    *P1:20,"Total records updated : ",RECUP:
                    *P1:21,"Total records written : ",RECOUT:
                    *P1:22,"Records not found     : ",RECERR:
                    *P1:24,*EL,*B,"No more records.  ",*W3;
.
          CLEAR     PRNTLINE
          CALL      PRNT0000
          APPEND    "Total records read    : ",PRNTLINE
          APPEND    RECIN,PRNTLINE
          APPEND    SP5,PRNTLINE
          APPEND    RECLS,PRNTLINE
          APPEND    " Legal Status ",PRNTLINE
          APPEND    RECREF,PRNTLINE
          APPEND    " Referral Discharge ",PRNTLINE
          CALL      PRNT0000
.
          CLEAR     PRNTLINE
          APPEND    " Total records updated : ",PRNTLINE
          MOVE      RECUP,DIM5A
          APPEND    DIM5A,PRNTLINE
          CALL      PRNT0000
.
          CLEAR     PRNTLINE
          APPEND    " Total records written : ",PRNTLINE
          MOVE      RECOUT,DIM5A
          APPEND    DIM5A,PRNTLINE
          CALL      PRNT0000
.
          CLEAR     PRNTLINE
          APPEND    " Records not found     : ",PRNTLINE
          MOVE      RECERR,DIM5A
          APPEND    DIM5A,PRNTLINE
          CALL      PRNT0000
.
          CLEAR     PRNTLINE
          APPEND    "*** End of Report *** ",PRNTLINE
          CALL      PRNT0000
          GOTO      PINP9999
.
PINP9100  CLEAR     PRNTLINE
          APPEND    "Record too large to process ",PRNTLINE
          APPEND    TMFN1470,PRNTLINE
          APPEND    "skipping ",PRNTLINE
          CALL      PRNT0000
          GOTO      PINP1000
.
PINP9200  CLEAR     PRNTLINE
          APPEND    "Record read does not appear to be ",PRNTLINE
          APPEND    "a valid xml record - record starts with :",PRNTLINE
          CALL      PRNT0000
          CLEAR     PRNTLINE
          PACK      KEY30,DIM4090A[1],SP30
          APPEND    SP10,PRNTLINE
          APPEND    KEY30,PRNTLINE
          CALL      PRNT0000
          CLEAR     PRNTLINE
          PACK      KEY30,DIM4090H[1],SP30
          MATCH     SP30,KEY30
          IF        !@EQUAL
            APPEND    "Acknowledgement record may exceed 32,000 ",PRNTLINE
            APPEND    "characters - Please notify iSOFT",PRNTLINE
          ELSE
            APPEND    "File may not be a valid format (one long ",PRNTLINE
            APPEND    "record)   ",PRNTLINE
          ENDIF
          CALL      PRNT0000
          GOTO      PINP1000
.
PINP9999  RETURN
+
.******************************************************************************
.*                                  PRLS0000                                  *
.*                         Process LS Record & Errors                         *
.******************************************************************************
PRLS0000  MOVE      ZERO,EXIT     
          ADD       ONE,TOTLSNO
.
          MOVE      "LEGAL_STATUS_ID",XMLTAGIN
          CALL      GETXML00
          MOVE      XMLDATA,FLD60IN
          MOVE      "10",LENGTH
          CALL      RJUS0000
          MOVE      FLD60OUT,KEY10          * LS Id. + Uniq.No. (8+2)
          UNPACK    KEY10,KEYLSID,KEYUNIQ
          MOVE      KEYUNIQ,F2
          MOVE      F2,KEYUNIQ              * remove leading zero from unique no
          PACK      LSLSID,FLD60IN,SP10
.
          MOVE      "EVENT_HCU_ID",XMLTAGIN * UR No./NHI Id.
          CALL      GETXML00
          MOVE      XMLDATA,FLD60IN
          MOVE      "8",LENGTH
          CALL      RJUS0000
          MOVE      FLD60OUT,KEYURNO
          PACK      LSEHCU,FLD60IN,SP10
.         
          MOVE      "STATUS",XMLTAGIN       * Status - "A"ccepted or "R"ejected
          CALL      GETXML00
          MOVE      XMLDATA,REFSTAT
.
          MOVE      "NUM_ERRORS",XMLTAGIN   *
          CALL      GETXML00                
          MOVE      XMLDATA,FLD60IN
          MOVE      "3",LENGTH
          CALL      RJUS0000
          MOVE      FLD60OUT,REFERRS
          MOVE      REFERRS,F3
          MOVE      F3,REFERRS              * remove leading zeros
          ADD       F3,TOTLSER              * count total errors for file
.         
          MOVE      "NUM_WARNINGS",XMLTAGIN *
          CALL      GETXML00
          MOVE      XMLDATA,FLD60IN
          MOVE      "3",LENGTH
          CALL      RJUS0000
          MOVE      FLD60OUT,REFWARN
          MOVE      REFWARN,F3
          MOVE      F3,REFWARN              * remove leading zeros
          ADD       F3,TOTLSWN              * count total warnings for file
.
          MOVE      "EXTRACT_FROM_DATE_TIME",XMLTAGXX  * don't read past this
          CALL      CHKERR00                * call the Error/Warning routine
          MOVE      KEY9,REFERRID           * blank if no errors
.
.
          IF        OPTION = 2
.                                           * testing stuff - build the record
            MOVE      "FILE_VERSION",XMLTAGIN *
            CALL      GETXML00
            PACK      LSFVER,XMLDATA,SP30
.
            MOVE      "SUBMITTING_ORG_ID",XMLTAGIN *
            CALL      GETXML00
            PACK      LSSORG,XMLDATA,SP30
            MATCH     SP8,ACKESORG
            IF        @EQUAL
              PACK      ACKESORG,LSSORG,SP10
            ENDIF
.
            MOVE      "ORGANISATION_ID",XMLTAGIN *
            CALL      GETXML00
            PACK      LSORID,XMLDATA,SP30
.
            MOVE      "EXTRACT_FROM_DATE_TIME",XMLTAGIN *
            CALL      GETXML00
            PACK      LSFDAT,XMLDATA,SP30
            MATCH     SP8,ACKEFDAT
            IF        @EQUAL
              UNPACK    LSFDAT,DIM4A,DIM1,DIM2A,DIM1,DIM2B
              PACK      ACKEFDAT,DIM4A,DIM2A,DIM2B
            ENDIF
.
            MOVE      "EXTRACTED_DATE_TIME",XMLTAGIN *
            CALL      GETXML00
            PACK      LSTDAT,XMLDATA,SP30
            MATCH     SP8,ACKETDAT
            IF        @EQUAL
              UNPACK    LSTDAT,DIM4A,DIM1,DIM2A,DIM1,DIM2B
              PACK      ACKETDAT,DIM4A,DIM2A,DIM2B
            ENDIF
.
            MOVE      "DELETED_FLAG",XMLTAGIN *
            CALL      GETXML00
            PACK      LSDELT,XMLDATA,SP30
.
            MOVE      "ORGANISATION_TYPE",XMLTAGIN *
            CALL      GETXML00
            PACK      LSOTYP,XMLDATA,SP30
.
            MOVE      "SEX",XMLTAGIN *
            CALL      GETXML00
            PACK      LSPSEX,XMLDATA,SP30
.
            MOVE      "DATE_OF_BIRTH",XMLTAGIN *
            CALL      GETXML00
            PACK      LSPDOB,XMLDATA,SP30
.
            MOVE      "LEGAL_STATUS_CODE",XMLTAGIN *
            CALL      GETXML00
            PACK      LSLSCD,XMLDATA,SP30
.
            MOVE      "RESPONSIBLE_CLINICIAN_CPN",XMLTAGIN *
            CALL      GETXML00
            PACK      LSRCPN,XMLDATA,SP30
.
            MOVE      "START_DATE_TIME",XMLTAGIN *
            CALL      GETXML00
            PACK      LSSDAT,XMLDATA,SP30
.
            MOVE      "END_DATE_TIME",XMLTAGIN *
            CALL      GETXML00
            PACK      LSEDAT,XMLDATA,SP30
          ENDIF
.
PRLS5000  CALL      UPDTLS00                * Update Legal Stat.recd "mehplsaf"
.
PRLS9999  RETURN
+
.******************************************************************************
.*                                  PRRD0000                                  *
.*                         Process RD Record & Errors                         *
.******************************************************************************
PRRD0000  MOVE      ZERO,EXIT
          ADD       ONE,TOTRDNO
.                                           * reset Level 1 Group counters
          MOVE      ZERO,RECATCNT           * "AT" record count  <ACTIVITY>
          MOVE      ZERO,RECCNCNT           * "CN" record count  <CLASIFICATION>
          MOVE      ZERO,RECCOCNT           * "CO" record count  <COLLECTION_OC
.
.                                           * process "RD" record data
PRRD0100  MOVE      "REFERRAL_ID",XMLTAGIN  *
          CALL      GETXML00
          MOVE      XMLDATA,FLD60IN
          MOVE      "8",LENGTH
          CALL      RJUS0000
          MOVE      FLD60OUT,KEYRDID
          PACK      RDRFID,XMLDATA,SP30
.
          MOVE      "EVENT_HCU_ID",XMLTAGIN   * UR No./NHI Id.
          CALL      GETXML00
          MOVE      XMLDATA,FLD60IN
          MOVE      "8",LENGTH
          CALL      RJUS0000
          MOVE      FLD60OUT,KEYURNO
          PACK      RDEHCU,XMLDATA,SP30
.
          MOVE      "STATUS",XMLTAGIN       * Status - "A"ccepted or "R"ejected
          CALL      GETXML00
          MOVE      XMLDATA,REFSTAT
.
          MOVE      "NUM_ERRORS",XMLTAGIN   * 
          CALL      GETXML00
          MOVE      XMLDATA,FLD60IN
          MOVE      "3",LENGTH
          CALL      RJUS0000
          MOVE      FLD60OUT,REFERRS
          MOVE      REFERRS,F3
          MOVE      F3,REFERRS              * remove leading zeros
          ADD       F3,TOTRDER              * count total errors for file
.
          MOVE      "NUM_WARNINGS",XMLTAGIN *
          CALL      GETXML00
          MOVE      XMLDATA,FLD60IN
          MOVE      "3",LENGTH
          CALL      RJUS0000
          MOVE      FLD60OUT,REFWARN
          MOVE      REFWARN,F3
          MOVE      F3,REFWARN              * remove leading zeros
          ADD       F3,TOTRDWN              * count total warnings for file
.
          MOVE      "EXTRACT_FROM_DATE_TIME",XMLTAGXX  * don't read past this
          CALL      CHKERR00                * call the Error/Warning routine
          MOVE      KEY9,REFERRID           * blank if no errors
.
.
          IF        OPTION = 2
.                                           * testing stuff - build the record
            MOVE      "FILE_VERSION",XMLTAGIN *
            CALL      GETXML00
            PACK      RDFVER,XMLDATA,SP30
.         
            MOVE      "SUBMITTING_ORG_ID",XMLTAGIN *
            CALL      GETXML00
            PACK      RDSORG,XMLDATA,SP30
            MATCH     SP8,ACKESORG
            IF        @EQUAL
              PACK      ACKESORG,RDSORG,SP10
            ENDIF
.
            MOVE      "ORGANISATION_ID",XMLTAGIN *
            CALL      GETXML00
            PACK      RDORID,XMLDATA,SP30
.
            MOVE      "ORGANISATION_TYPE",XMLTAGIN *
            CALL      GETXML00
            PACK      RDOTYP,XMLDATA,SP30
.
            MOVE      "EXTRACT_FROM_DATE_TIME",XMLTAGIN *
            CALL      GETXML00
            PACK      RDFDAT,XMLDATA,SP30
            MATCH     SP8,ACKEFDAT
            IF        @EQUAL
              UNPACK    RDFDAT,DIM4A,DIM1,DIM2A,DIM1,DIM2B
              PACK      ACKEFDAT,DIM4A,DIM2A,DIM2B
            ENDIF
.
            MOVE      "EXTRACTED_DATE_TIME",XMLTAGIN *
            CALL      GETXML00
            PACK      RDTDAT,XMLDATA,SP30
            MATCH     SP8,ACKETDAT
            IF        @EQUAL
              UNPACK    RDTDAT,DIM4A,DIM1,DIM2A,DIM1,DIM2B
              PACK      ACKETDAT,DIM4A,DIM2A,DIM2B
            ENDIF
.
            MOVE      "DELETED_FLAG",XMLTAGIN *
            CALL      GETXML00
            PACK      RDDELT,XMLDATA,SP30
.
            MOVE      "TEAM_CODE",XMLTAGIN
            CALL      GETXML00
            PACK      RDTEAM,XMLDATA,SP30
.
            MOVE      "SEX",XMLTAGIN *
            CALL      GETXML00
            PACK      RDPSEX,XMLDATA,SP30
.
            MOVE      "DATE_OF_BIRTH",XMLTAGIN *
            CALL      GETXML00
            PACK      RDPDOB,XMLDATA,SP30
.
            MOVE      "REFERRAL_FROM",XMLTAGIN
            CALL      GETXML00
            PACK      RDRFFR,XMLDATA,SP30
.
            MOVE      "REFERRAL_TO",XMLTAGIN
            CALL      GETXML00
            PACK      RDRFTO,XMLDATA,SP30
.
            MOVE      "REFERRAL_END_CODE",XMLTAGIN
            CALL      GETXML00
            PACK      RDECOD,XMLDATA,SP30
.
            MOVE      "START_DATE_TIME",XMLTAGIN
            CALL      GETXML00
            PACK      RDRSTR,XMLDATA,SP30
.
            MOVE      "END_DATE_TIME",XMLTAGIN
            CALL      GETXML00
            PACK      RDREND,XMLDATA,SP30
          ENDIF
.
PRRD5000  CALL      UPDTRD00                * Find Referral record "mehprdaf"
          BRANCH    EXIT,PRRD9999
.
.
PRRD6000  MOVE      "ACTIVITY",XMLTAGIN     * "ACTIVITY" recurring group
          CALL      GETXML00
          BRANCH    EXIT,PRRD7000
          CALL      PRAT0000
          BRANCH    EXIT,PRRD7000
          GOTO      PRRD6000
.
.                                           * "CLASSIFICATION" recurring group
PRRD7000  MOVE      "CLASSIFICATION",XMLTAGIN 
          CALL      GETXML00
          BRANCH    EXIT,PRRD8000
          CALL      PRCN0000
          BRANCH    EXIT,PRRD8000
          GOTO      PRRD7000
.
.                                           * "COLLECTION_OCCASION" recurring 
PRRD8000  MOVE      "COLLECTION_OCCASION",XMLTAGIN
          CALL      GETXML00
          BRANCH    EXIT,PRRD9000
          CALL      PRCO0000
          BRANCH    EXIT,PRRD9000
          GOTO      PRRD8000
.
PRRD9000  MOVE      ZERO,EXIT
          GOTO      PRRD9999
.
PRRD9500  MOVE      ONE,EXIT
.
PRRD9999  RETURN
+
.******************************************************************************
.*                                  PRAT0000                                  *
.*                           Process "AT" data                                *
.******************************************************************************
PRAT0000  MOVE      ZERO,EXIT
          ADD       ONE,RECATCNT            * count the activity occurance
.
          CALL      DNLEVL00                * move down for recurring group
.
          MOVE      "ACTIVITY_ID",XMLTAGIN
          CALL      GETXML00
          PACK      ATACID,XMLDATA,SP30
.
          CALL      CHKERR00                * call the Error/Warning routine
          IF        OPTION = 1 & ERRORSSS = 0
            GOTO      PRAT9000              * no Error/Warnings
          ENDIF
          MOVE      KEY9,REFERRID
.
          IF        OPTION = 2
.                                           * testing stuff - build a record
            MOVE      "ACTIVITY_TYPE",XMLTAGIN
            CALL      GETXML00
            PACK      ATATYP,XMLDATA,SP30
.
            MOVE      "ACTIVITY_SETTING",XMLTAGIN
            CALL      GETXML00
            PACK      ATASET,XMLDATA,SP30
.
            MOVE      "FAMILY_WHANAU_INVOLVEMENT",XMLTAGIN
            CALL      GETXML00
            PACK      ATFAMW,XMLDATA,SP30
.
            MOVE      "HEALTHCARE_WORKER_CPN",XMLTAGIN
            CALL      GETXML00
            PACK      ATWCPN,XMLDATA,SP30
.
            MOVE      "START_DATE_TIME",XMLTAGIN
            CALL      GETXML00
            PACK      ATSDAT,XMLDATA,SP30
.
            MOVE      "END_DATE_TIME",XMLTAGIN
            CALL      GETXML00
            PACK      ATEDAT,XMLDATA,SP30
          ENDIF
.
PRAT5000  CALL      UPDTAT00                * update "AT" record
.
PRAT9000  CALL      UPLEVL00                * move up a level from recurring grp
PRAT9999  RETURN
+
.******************************************************************************
.*                                  PRCN0000                                  *
.*                           Process "CN" data                                *
.******************************************************************************
PRCN0000  MOVE      ZERO,EXIT
          COMPARE   "999",RECCNCNT
          GOTO      PRCN9500 IF EQUAL
.
          ADD       ONE,RECCNCNT            * count the classification occurance
.
          CALL      DNLEVL00                * move down for recurring group
.
          CALL      CHKERR00                * call the Error/Warning routine
          IF        OPTION = 1 & ERRORSSS = 0
            GOTO      PRCN9000              * no Error/Warnings
          ENDIF
          MOVE      KEY9,REFERRID    
.
          BRANCH    OPTION,PRCN5000
.
.                                           * testing stuff
          MOVE      "CLASSIFICATION_CODE_ID",XMLTAGIN
          CALL      GETXML00
          PACK      CNCSCD,XMLDATA
.
          MOVE      "CLINICAL_CODING_SYSTEM_ID",XMLTAGIN
          CALL      GETXML00
          PACK      CNCSYS,XMLDATA,SP30
.
          MOVE      "DIAGNOSIS_TYPE",XMLTAGIN
          CALL      GETXML00
          PACK      CNDTYP,XMLDATA,SP30
.
          MOVE      "CLINICAL_CODE_VALUE",XMLTAGIN
          CALL      GETXML00
          PACK      CNCCOD,XMLDATA,SP30
.
          MOVE      "ISSUE_CODING_SYSTEM_ID",XMLTAGIN
          CALL      GETXML00
          PACK      CNICID,XMLDATA,SP30
.
          MOVE      "ISSUE_TYPE",XMLTAGIN
          CALL      GETXML00
          PACK      CNITYP,XMLDATA,SP30
.
          MOVE      "ISSUE_CODE_VALUE",XMLTAGIN
          CALL      GETXML00
          PACK      CNIVAL,XMLDATA,SP30
.
          MOVE      "START_DATE_TIME",XMLTAGIN
          CALL      GETXML00
          PACK      CNSDAT,XMLDATA,SP30
.
          MOVE      "END_DATE_TIME",XMLTAGIN
          CALL      GETXML00
          PACK      CNEDAT,XMLDATA,SP30
.
PRCN5000  CALL      UPDTCN00                * update "CN" record
.
PRCN9000  CALL      UPLEVL00                * move up a level from recurring grp
          GOTO      PRCN9999
.
PRCN9500  DISPLAY   *P1:24,*EL,"Too many CN records  - ";
          CLEAR     PRNTLINE
          APPEND    "Too many CN records",PRNTLINE
          CALL      PRNT0000
          CALL      HITENTER
          MOVE      ONE,EXIT

PRCN9999  RETURN
+
.******************************************************************************
.*                                  PRCO0000                                  *
.*                           Process "CO" data                                *
.******************************************************************************
PRCO0000  MOVE      ZERO,EXIT
          MOVE      ZERO,RECOTCNT           * reset the outcome_tool occurance
          ADD       ONE,RECCOCNT            * count the collection_occ occurance
.
          CALL      DNLEVL00                * move down for recurring group

.
          MOVE      "COLLECTION_OCCASION_DATE",XMLTAGXX  * don't read past this
          CALL      CHKERR00                * call the Error/Warning routine
          IF        OPTION = 1 & ERRORSSS = 0
            GOTO      PRCO6000              * no Error/Warnings
          ENDIF
          MOVE      KEY9,REFERRID
.
          BRANCH    OPTION,PRCO5000
.
.                                           * testing stuff
          MOVE      "COLLECTION_OCCASION_ID",XMLTAGIN
          CALL      GETXML00
          PACK      COCCOD,XMLDATA,SP30
.
          MOVE      "REASON_FOR_COLLECTION",XMLTAGIN
          CALL      GETXML00
          PACK      CORCOL,XMLDATA,SP30
.
          MOVE      "COLLECTION_OCCASION_DATE",XMLTAGIN
          CALL      GETXML00
          PACK      COCDAT,XMLDATA,SP30
.
          MOVE      "HEALTHCARE_WORKER_CPN",XMLTAGIN
          CALL      GETXML00
          PACK      COWCPN,XMLDATA,SP30
.
          MOVE      "OUTCOME_EPISODE_ID",XMLTAGIN
          CALL      GETXML00
          PACK      COOESP,XMLDATA,SP30
.
          MOVE      "PROTOCOL_VERSION",XMLTAGIN
          CALL      GETXML00
          PACK      COPVER,XMLDATA,SP30
.
          MOVE      "FOCUS_OF_CARE",XMLTAGIN
          CALL      GETXML00
          PACK      COFCAR,XMLDATA,SP30
.
PRCO5000  CALL      UPDTCO00                * update "CO" record
.
.                                           * "OUTCOME_TOOL" recurring group
PRCO6000  MOVE      "OUTCOME_TOOL",XMLTAGIN
          CALL      GETXML00
          BRANCH    EXIT,PRCO7000
          CALL      PROT0000
          GOTO      PRCO6000                * finf next "OUTCOME_TOOL"
.
PRCO7000  CALL      UPLEVL00                * move up a level from recurring grp
.
PRCO9999  RETURN
+
.******************************************************************************
.*                                  PROT0000                                  *
.*                           Process "OT" data                                *
.******************************************************************************
PROT0000  MOVE      ZERO,EXIT
          ADD       ONE,RECOTCNT            * count the outcome_tool occurance
          MOVE      ZERO,RECOICNT           * reset the "OI" counter
          UNPACK    SP70,OIOITM,OITYPE,OIMADM,OICSTA,OICDAT,OIIVAL
.
          CALL      DNLEVL00                * move down for recurring group
.
          MOVE      "COMPLETION_DATE",XMLTAGXX  * don't read past this
          CALL      CHKERR00                * call the Error/Warning routine
          IF        OPTION = 1 & ERRORSSS = 0
            GOTO      PROT1000              * no Error/Warnings
          ENDIF
          MOVE      KEY9,REFERRID
.
          MOVE      "OUTCOME_TOOL_TYPE_VERSION",XMLTAGIN
          CALL      GETXML00
          PACK      OITYPE,XMLDATA,SP30
.
          MOVE      "MODE_OF_ADMINISTRATION",XMLTAGIN
          CALL      GETXML00
          PACK      OIMADM,XMLDATA,SP30
.
          MOVE      "COLLECTION_STATUS",XMLTAGIN
          CALL      GETXML00
          PACK      OICSTA,XMLDATA,SP30
.
          MOVE      "COMPLETION_DATE",XMLTAGIN
          CALL      GETXML00
          PACK      OICDAT,XMLDATA,SP30
.
PROT1000  MOVE      ZERO,RECOICNT           * use Item count " 0" for "OT" recd
          CALL      UPDTOI00                * update "OT" record (uses "OI")
.
.                                           * "OUTCOME_ITEM" recurring group
PROT2000  MOVE      "OUTCOME_ITEM",XMLTAGIN
          CALL      GETXML00
          BRANCH    EXIT,PROT3000
          CALL      PROI0000
          GOTO      PROT2000                * find next "OUTCOME_ITEM"
.
PROT3000  CALL      UPLEVL00                * move up a level from recurring grp
.
PROT9999  RETURN
+
.******************************************************************************
.*                                  PROI0000                                  *
.*                           Process "OI" data                                *
.******************************************************************************
PROI0000  MOVE      ZERO,EXIT
          ADD       ONE,RECOICNT            * count the collection_occ occurance
.
          CALL      DNLEVL00                * move down from recurring group
.
.
          MOVE      "OUTCOME_ITEM",XMLTAGXX              * don't read past this
          CALL      CHKERR00                * call the Error/Warning routine
          IF        OPTION = 1 & ERRORSSS = 0
            GOTO      PROI2000              * no Error/Warnings
          ENDIF
          MOVE      KEY9,REFERRID
.
          MOVE      "OUTCOME_ITEM_CODE",XMLTAGIN
          CALL      GETXML00
          PACK      OIOITM,XMLDATA,SP30
.
          MOVE      "OUTCOME_ITEM_VALUE",XMLTAGIN
          CALL      GETXML00
          PACK      OIIVAL,XMLDATA,SP30
.
          CALL      UPDTOI00                * update "OI" record
.
PROI2000  CALL      UPLEVL00                * move up a level from recurring grp
.
PROI9999  RETURN
.
.******************************************************************************
.*                                  UPDTRD00                                  *
.*                         Update "RD" Record - "mehprdaf"                    *
.******************************************************************************
UPDTRD00  MOVE      ZERO,EXIT
          MOVE      ONE,NOTFOUND
          PACK      KEY19,ACKEXDAT,ACKEXNUM,KEYRDID,SP20
          CALL      RDMHPRD1                * read 
          MOVE      OVRCD,NOTFOUND
.
          REP       "A3R2",REFSTAT          * Accepted = 3, Rejected = 2
          MOVE      SP1,REFETYP
          MOVE      REFWARN,F3
          IF        F3 > 0
            MOVE      "W",REFETYP
          ENDIF
          MOVE      REFERRS,F3
          IF        F3 > 0
            MOVE      "E",REFETYP
          ENDIF
.
          MOVE      REFSTAT,MHPDSTAT
          MOVE      REFETYP,MHPDETYP
          MOVE      REFERRS,MHPDECNT
          MOVE      REFWARN,MHPDWCNT
          MOVE      ERUNIQID,MHPDERID       * was REFERRID

          IF        OPTION = 1
            IF        NOTFOUND <> 1
              CALL      UPMHPRD1            * update record
              ADD       ONE,RECUP             
            ELSE
              ADD       ONE,RECERR
            ENDIF
            GOTO      UPDTRD99              * it's production
          ENDIF
.         
.                                           * testing stuff
UPDTRD50  IF        NOTFOUND = 0
            CALL      DEMHPRD1             * delete existing history if testing
          ENDIF
          MOVE      ACKEXDAT,MHPDXDAT
          MOVE      ACKEXNUM,MHPDXNUM
          MOVE      KEYRDID,MHPDVISN
          MOVE      KEYURNO,MHPDURNO
          PACK      KEY19,MHPDXDAT,MHPDXNUM,MHPDVISN,SP20
          PACK      MHPDFVER,RDFVER,SP30
          PACK      MHPDRFID,RDRFID,SP30
          PACK      MHPDSORG,RDSORG,SP30
          PACK      MHPDORID,RDORID,SP30
          PACK      MHPDOTYP,RDOTYP,SP30
          PACK      MHPDFDAT,RDFDAT,SP30
          PACK      MHPDTDAT,RDTDAT,SP30
.
          PACK      MHPDDELT,SP30
          MATCH     "TRUE",RDDELT 
          IF        @EQUAL
            MOVE      "Deleted",MHPDDELT
          ENDIF
.
          PACK      MHPDTEAM,RDTEAM,SP30
          PACK      MHPDEHCU,RDEHCU,SP30
          PACK      MHPDPSEX,RDPSEX,SP30
          PACK      MHPDPDOB,RDPDOB,SP30
          PACK      MHPDRFFR,RDRFFR,SP30
          PACK      MHPDRFTO,RDRFTO,SP30
          PACK      MHPDECOD,RDECOD,SP30
          PACK      MHPDRSTR,RDRSTR,SP30
          PACK      MHPDREND,RDREND,SP30
          CALL      WRMHPRD1              * write a new record
          ADD       ONE,RECOUT
.
          PACK      DIM150,RDFVER,RDRFID,RDSORG,RDORID,RDOTYP,RDFDAT,RDTDAT:
                           RDDELT,RDTEAM,RDEHCU,RDPSEX,RDPDOB,RDRFFR,RDRFTO:
                           RDECOD,RDRSTR,RDREND
          WRITE     TESTFILE,SEQ;*+,KEY19,PP,DIM150   *  ----- testing MLML
.
UPDTRD99  RETURN
.
.******************************************************************************
.*                                  UPDTAT00                                  *
.*                         Update "AT" Record - key data for "mehpataf"       *
.******************************************************************************
UPDTAT00  MOVE      ZERO,EXIT
          MOVE      ONE,NOTFOUND
.
          MOVE      RECATCNT,KEY5
          PACK      KEY32,ACKEXDAT,ACKEXNUM,KEYRDID,KEYURNO,KEY5,SP20
          CALL      RDMHPAT1                * read 
          MOVE      OVRCD,NOTFOUND
.
          MOVE      ERUNIQID,MHPTERID       * was REFERRID
          IF        OPTION = 1
            IF        NOTFOUND <> 1
              CALL      UPMHPAT1            * update record
              ADD       ONE,RECUP
            ELSE
              ADD       ONE,RECERR
            ENDIF
            GOTO      UPDTAT99              * it's production
          ENDIF
.
.                                           * testing stuff
UPDTAT50  IF        NOTFOUND = 0
            CALL  DEMHPAT1                  * delete existing history if testing
          ENDIF
          MOVE      ACKEXDAT,MHPTXDAT
          MOVE      ACKEXNUM,MHPTXNUM
          MOVE      KEYRDID,MHPTVISN
          MOVE      KEYURNO,MHPTURNO
          MOVE      KEY5,MHPTOCUR
          PACK      KEY32,ACKEXDAT,ACKEXNUM,KEYRDID,KEYURNO,KEY5,SP20
          PACK      MHPTACID,ATACID,SP30
          PACK      MHPTATYP,ATATYP,SP30
          PACK      MHPTASET,ATASET,SP30
          PACK      MHPTFAMW,ATFAMW,SP30
          PACK      MHPTWCPN,ATWCPN,SP30
          PACK      MHPTSDAT,ATSDAT,SP30
          PACK      MHPTEDAT,ATEDAT,SP30
          CALL      WRMHPAT1              * write a new record
          ADD       ONE,RECOUT
.
          PACK      DIM150,ATACID,ATATYP,ATASET,ATFAMW,ATWCPN,ATSDAT,ATEDAT
          WRITE     TESTFILE,SEQ;*+,KEY29,PP,DIM150   *  ----- testing MLML
.
.
UPDTAT99  RETURN
.
.******************************************************************************
.*                                  UPDTCN00                                  *
.*                         Update "CN" Record - key data for "mehpcnaf"       *
.******************************************************************************
UPDTCN00  MOVE      ZERO,EXIT
          MOVE      ONE,NOTFOUND
.
          MOVE      RECCNCNT,KEY3 
          PACK      KEY30,ACKEXDAT,ACKEXNUM,KEYRDID,KEYURNO,KEY3,SP20
          CALL      RDMHPCN1                * read
          MOVE      OVRCD,NOTFOUND
.
          MOVE      ERUNIQID,MHPNERID       * was REFERRID 
          IF        OPTION = 1
            IF        NOTFOUND <> 1
              CALL      UPMHPCN1            * update record
              ADD       ONE,RECUP
            ELSE
              ADD       ONE,RECERR
            ENDIF
            GOTO      UPDTCN99              * it's production
          ENDIF
.
.                                           * testing stuff
UPDTCN50  IF        NOTFOUND = 0
            CALL      DEMHPCN1              * delete existing history if testing
          ENDIF
          MOVE      ACKEXDAT,MHPNXDAT
          MOVE      ACKEXNUM,MHPNXNUM
          MOVE      KEYRDID,MHPNVISN
          MOVE      KEYURNO,MHPNURNO
          MOVE      KEY3,MHPNOCUR
          PACK      KEY30,ACKEXDAT,ACKEXNUM,KEYRDID,KEYURNO,KEY3,SP20
          PACK      MHPNCSCD,CNCSCD,SP30
          PACK      MHPNCSYS,CNCSYS,SP30
          PACK      MHPNDTYP,CNDTYP,SP30
          PACK      MHPNCCOD,CNCCOD,SP30
          PACK      MHPNICID,CNICID,SP30
          PACK      MHPNITYP,CNITYP,SP30
          PACK      MHPNIVAL,CNIVAL,SP30
          PACK      MHPNSDAT,CNSDAT,SP30
          PACK      MHPNEDAT,CNEDAT,SP30
          CALL      WRMHPCN1              * write a new record
          ADD       ONE,RECOUT
.
          PACK      DIM150,CNCSCD,CNCSYS,CNDTYP,CNCCOD,CNICID,CNITYP,CNIVAL:
                           CNSDAT,CNEDAT
          WRITE     TESTFILE,SEQ;*+,KEY30,PP,DIM150   *  ----- testing MLML
.
UPDTCN99  RETURN
.
.******************************************************************************
.*                                  UPDTCO00                                  *
.*                         Update "CO" Record - key data for "mehpcoaf"       *
.******************************************************************************
UPDTCO00  MOVE      ZERO,EXIT
          MOVE      ONE,NOTFOUND
.
          MOVE      RECCOCNT,KEY3
          PACK      KEY30,ACKEXDAT,ACKEXNUM,KEYRDID,KEYURNO,KEY3,SP20
          CALL      RDMHPCO1                * read
          MOVE      OVRCD,NOTFOUND
.
          MOVE      ERUNIQID,MHPOERID       * was REFERRID
          IF        OPTION = 1
            IF        NOTFOUND <> 1
              CALL      UPMHPCO1            * update record
              ADD       ONE,RECUP             
            ELSE
              ADD       ONE,RECERR
            ENDIF       
            GOTO      UPDTCO99              * it's production
          ENDIF
.
.                                           * testing stuff
UPDTCO50  IF        NOTFOUND = 0
            CALL      DEMHPCO1              * delete existing history if testing
          ENDIF
          MOVE      ACKEXDAT,MHPOXDAT
          MOVE      ACKEXNUM,MHPOXNUM
          MOVE      KEYRDID,MHPOVISN
          MOVE      KEYURNO,MHPOURNO
          MOVE      KEY3,MHPOOCUR
          PACK      KEY30,ACKEXDAT,ACKEXNUM,KEYRDID,KEYURNO,KEY3,SP20
.
          PACK      MHPOCCOD,COCCOD,SP30
          PACK      MHPORCOL,CORCOL,SP30
          PACK      MHPOCDAT,COCDAT,SP30
          PACK      MHPOWCPN,COWCPN,SP30
          PACK      MHPOOESP,COOESP,SP30
          PACK      MHPOPVER,COPVER,SP30
          PACK      MHPOFCAR,COFCAR,SP30
          CALL      WRMHPCO1              * write a new record
          ADD       ONE,RECOUT
.
          PACK      DIM150,COCCOD,CORCOL,COCDAT,COWCPN,COOESP,COPVER,COFCAR
          WRITE     TESTFILE,SEQ;*+,KEY30,PP,DIM150   *  ----- testing MLML
.
UPDTCO99  RETURN
.
.******************************************************************************
.*                                  UPDTOI00                                  *
.*                    Update "OT" or "OI" Record - "mehpoiaf"                 *
.******************************************************************************
UPDTOI00  MOVE      ZERO,EXIT
          MOVE      ONE,NOTFOUND
.
          MOVE      RECCOCNT,KEY3
          MOVE      RECOTCNT,DIM3A
          MOVE      RECOICNT,DIM3B          * set to " 0" for "OT" record
          PACK      KEY36,ACKEXDAT,ACKEXNUM,KEYRDID,KEYURNO,KEY3,DIM3A,DIM3B
          CALL      RDMHPOI1                * read
          MOVE      OVRCD,NOTFOUND
.
          MATCH     SP9,REFERRID
          MOVE      ERUNIQID,MHPIERID       * was REFERRID
          IF        OPTION = 1            
            IF        NOTFOUND <> 1
              CALL      UPMHPOI1            * update record
              ADD       ONE,RECUP             
            ELSE    
              ADD       ONE,RECERR
            ENDIF
            GOTO      UPDTOI99              * it's production
          ENDIF
.
.                                           * testing stuff
UPDTOI50  IF        NOTFOUND = 0
            CALL      DEMHPOI1             * delete existing history if testing
          ENDIF
          MOVE      ACKEXDAT,MHPIXDAT
          MOVE      ACKEXNUM,MHPIXNUM
          MOVE      KEYRDID,MHPIVISN
          MOVE      KEYURNO,MHPIURNO
          MOVE      KEY3,MHPIOCUR
          MOVE      DIM3A,MHPIOCOT
          MOVE      DIM3B,MHPIOCOI
          PACK      MHPIOITM,OIOITM,SP30
          PACK      MHPITYPE,OITYPE,SP30
          PACK      MHPIMADM,OIMADM,SP30
          PACK      MHPICSTA,OICSTA,SP30
          PACK      MHPICDAT,OICDAT,SP30
          PACK      MHPIIVAL,OIIVAL,SP30
          PACK      KEY36,ACKEXDAT,ACKEXNUM,KEYRDID,KEYURNO,KEY3,DIM3A,DIM3B
          CALL      WRMHPOI1              * write a new record
          ADD       ONE,RECOUT
.
          PACK      DIM150,OIOITM,OITYPE,OIMADM,OICSTA,OICDAT,OIIVAL
          WRITE     TESTFILE,SEQ;*+,KEY36,PP,DIM150   *  ----- testing MLML
.
UPDTOI99  RETURN
.
.******************************************************************************
.*                                  UPDTLS00                                  *
.*                         Update "LS" Record - "mehplsaf"                    *
.******************************************************************************
UPDTLS00  MOVE      ZERO,EXIT
          MOVE      ONE,NOTFOUND
.
          PACK      KEY22,ACKEXDAT,ACKEXNUM,KEYLSID,KEYUNIQ,SP20
          CALL      RDMHPLS1                * read 
          MOVE      OVRCD,NOTFOUND          
.         
          REP       "A3R2",REFSTAT          * Accepted = 3, Rejected = 2
.         
          MOVE      SP1,REFETYP
          MOVE      REFWARN,F3
          IF        F3 > 0
            MOVE      "W",REFETYP
          ENDIF
          MOVE      REFERRS,F3
          IF        F3 > 0
            MOVE      "E",REFETYP
          ENDIF
.
          MOVE      REFSTAT,MHPSSTAT
          MOVE      REFETYP,MHPSETYP
          MOVE      REFERRS,MHPSECNT    
          MOVE      REFWARN,MHPSWCNT
          MOVE      ERUNIQID,MHPSERID       * was REFERRID
.
          IF        OPTION = 1
            IF        NOTFOUND <> 1
              CALL      UPMHPLS1            * update record
              ADD       ONE,RECUP             
            ELSE
              ADD       ONE,RECERR
            ENDIF       
            GOTO      UPDTLS99              * it's production
          ENDIF
.
.                                           * testing stuff - create the record
UPDTLS50  IF        NOTFOUND = 0
            CALL      DEMHPLS1             * delete existing history if testing
          ENDIF
          MOVE      ACKEXDAT,MHPSXDAT
          MOVE      ACKEXNUM,MHPSXNUM
          MOVE      KEYLSID,MHPSVISN
          MOVE      KEYUNIQ,MHPSUNIQ
          MOVE      KEYURNO,MHPSURNO
          PACK      KEY22,MHPSXDAT,MHPSXNUM,MHPSVISN,MHPSUNIQ,SP20
          PACK      MHPSFVER,LSFVER,SP30
          PACK      MHPSLSID,LSLSID,SP30
          PACK      MHPSSORG,LSSORG,SP30
          PACK      MHPSORID,LSORID,SP30
          PACK      MHPSFDAT,LSFDAT,SP30
          PACK      MHPSTDAT,LSTDAT,SP30
.
          PACK      MHPSDELT,SP30
          MATCH     "TRUE",LSDELT 
          IF        @EQUAL
            MOVE      "Deleted",MHPSDELT
          ENDIF
.
          PACK      MHPSOTYP,LSOTYP,SP30
          PACK      MHPSEHCU,LSEHCU,SP30
          PACK      MHPSPSEX,LSPSEX,SP30
          PACK      MHPSPDOB,LSPDOB,SP30
          PACK      MHPSLSCD,LSLSCD,SP30
          PACK      MHPSRCPN,LSRCPN,SP30
          PACK      MHPSSDAT,LSSDAT,SP30
          PACK      MHPSEDAT,LSEDAT,SP30
.
          CALL      WRMHPLS1              * write a new record
          ADD       ONE,RECOUT
.
          PACK      DIM150,LSFVER,LSLSID,LSSORG,LSORID,LSFDAT,LSTDAT,LSDELT:
                           LSOTYP,LSEHCU,LSPSEX,LSPDOB,LSLSCD,LSRCPN,LSSDAT:
                           LSEDAT
          WRITE     TESTFILE,SEQ;*+,KEY22,PP,DIM150   *  ----- testing MLML
.
UPDTLS99  RETURN
.******************************************************************************
.*                                  CHKERR00                                  *
.*                single routine to read/update Warnings and errors           *
.******************************************************************************
CHKERR00  MOVE      ZERO,ERRORSSS
.
          UNPACK    SP70,KEY9,REFERRID,ERUNIQID,ERRTYPE
          MOVE      ZERO,ERUNCNT
          MOVE      XMLTAGXX,SAVTAGXX
.
          CALL      GETERID0                * get next Error/Warn Unique Ident.
.
.                                           * get any Error Tags
CHKERR20  MOVE      "ERROR_REF",XMLTAGIN
          MOVE      SAVTAGXX,XMLTAGXX       * don't read past given Tag
          CALL      GETXML00
          BRANCH    EXIT,CHKERR40           * error not found (no more Errors)
.
          PACK      KEY12,XMLDATA,SP70
          REP       "- ",KEY12              * format xx-xxxx-00 
          SQUEEZE   KEY12                   * now    xxxxxx00
          PACK      REFERRID,KEY12,SP10
.
          PACK      KEY9,REFERRID,SP10                          * end *I-196789
          CALL      RDMHPME1                * read the Errors table "mehpmeaf"
          MOVE      OVRCD,F1                * set for "update" or "write"
.
          MOVE      KEY9,MHPEERCD
          MOVE      "E",MHPETYPE
.
          MOVE      "ERROR_TITLE",XMLTAGIN
          CALL      GETXML00
          UNPACK    XMLDATA,DIM8A,DIM25A
          MATCH     "Error - ",DIM8A
          IF        @EQUAL
            PACK      MHPEREFR,DIM25A,SP30
          ELSE
            PACK      MHPEREFR,XMLDATA,SP30
          ENDIF
          MOVE      "ERROR_MESSAGE",XMLTAGIN
          CALL      GETXML00
          PACK      MHPEEMSG,XMLDATA,SP70
.
          MOVE      "E",ERRTYPE
          CALL      WRERR000                * write E/W to "mehpme" & "mehpew"
          MOVE      ONE,ERRORSSS            * set "Errors exist" flag
          MOVE      SP1,ERRTYPE
.
          GOTO      CHKERR20                * check for more ERRORs
.                                           * get any Warning Tags
CHKERR40  MOVE      "WARNING_REF",XMLTAGIN
          MOVE      SAVTAGXX,XMLTAGXX       * don't read past given Tag
          CALL      GETXML00
          BRANCH    EXIT,CHKERR90           * warning not found - finished
.
          PACK      KEY12,XMLDATA,SP70
          REP       "- ",KEY12              * format xx-xxxx-00
          SQUEEZE   KEY12                   * now    xxxxxx00
          PACK      REFERRID,KEY12,SP10
.
          PACK      KEY9,REFERRID,SP10
          CALL      RDMHPME1                * read the Errors table "mehpmeaf"
          MOVE      OVRCD,F1                * set for "update" or "write"
.
          MOVE      KEY9,MHPEERCD
          MOVE      "W",MHPETYPE
.
          MOVE      "WARNING_TITLE",XMLTAGIN
          CALL      GETXML00
          UNPACK    XMLDATA,DIM10A,DIM25A
          MATCH     "Warning - ",DIM10A     * remove the word "Warning - " ?
          IF        @EQUAL
            PACK      MHPEREFR,DIM25A,SP30
          ELSE
            PACK      MHPEREFR,XMLDATA,SP30
          ENDIF
          MOVE      "WARNING_MESSAGE",XMLTAGIN
          CALL      GETXML00
          PACK      MHPEEMSG,XMLDATA,SP70
.
          MOVE      "W",ERRTYPE
          CALL      WRERR000                * write E/W to "mehpme" & "mehpew"
          MOVE      ONE,ERRORSSS            * set "Errors exist" flag
          MOVE      SP1,ERRTYPE
.
          GOTO      CHKERR40                * check for more Warnings
.          
CHKERR90  IF        ERRORSSS = 0
            UNPACK    SP10,ERUNIQID
          ENDIF
.
CHKERR99  RETURN
+
.******************************************************************************
.*                                  WRERR000                                  *
.*              Write the Error/Warning to "mehpewaf" & "mehpmeaf"            *
.******************************************************************************
WRERR000  MOVE      ZERO,EXIT
.                                           * write/update error to "mehpmeaf"
          IF        F1 = 1
            CALL      WRMHPME1
          ELSE
            CALL      UPMHPME1
          ENDIF
.                                           * write the error to "mehpewaf"
WRERR100  ADD       ONE,ERUNCNT
          MOVE      ERUNIQID,MHPWUNIQ
          MOVE      ERUNCNT,MHPWXCNT
          MOVE      ERRTYPE,MHPWTYPE
          MOVE      REFERRID,MHPWERCD
          PACK      MHPWSPAR,SP20
.
          PACK      KEY12,ERUNIQID,ERUNCNT,SP10
          CALL      WRMHPEW1
.
WRERR999  RETURN
+
.******************************************************************************
.*                                  GETERID0                                  *
.*                    Get next Error/Warning Unique Identifier                * 
.******************************************************************************
GETERID0  MOVE      SP9,ERUNIQID
.
          PACK      KEY12,Z70
          CALL      RSMHPEW1
          CALL      RPMHPEW1                * position on last E/W Unique Id.
          IF        OVRCD = 1
            MOVE      ONE,FORM9
          ELSE
            MOVE      MHPWUNIQ,FORM9
            ADD       ONE,FORM9
          ENDIF
          MOVE      FORM9,KEY9              * store the next E/W Unique Id
          PACK      ERUNIQID,KEY9,SP10
.
GETERID9  RETURN
+
.******************************************************************************
.*                                  HEAD0000                                  *
.*                           Print The Report Header                          *
.******************************************************************************
HEAD0000  MOVE      ONE,CNOUNDLN
          MOVE      "- Process report",CPHDROPT
          CALL      HEAD132                 * Print the report header
          PRINT     *1,HEADDES1,*36,HEADDES2,*N 
          PRINT     *N;
HEAD9999  RETURN
+
.******************************************************************************
.*                                  PRNT0000                                  *
 *                            Print An Error Report                           *
.******************************************************************************
PRNT0000  COMPARE   "56",CLNO
          CALL      HEAD0000 IF NOT LESS    * Print the report header
.
          RESET     PRNTLINE
          PRINT     *1,PRNTLINE
.
          ADD       ONE,CLNO
          PACK      PRNTLINE,SP70,SP70
.
PRNT9999  RETURN
+
.******************************************************************************
.******************************************************************************
.*                                  GETXML00                                  *
.*                        Extract XML data from between Tags                  *
.******************************************************************************
GETXML00  MOVE      ZERO,EXIT
          MOVE      ZERO,DATBLOK
          MOVE      ZERO,FINDSTOP
          UNPACK    SP700,XMLDATA
.
.                                           * set the Start, End and Stop Tags
          PACK      XMLSTTAG,ST1,XMLTAGIN,SP700
          SQUEEZE   XMLSTTAG
          MOVELPTR  XMLSTTAG,F5 
          ASSIGN    (F5+1),TAGLEN1          * length of start Tag
          PACK      XMLENTAG,ST2,XMLTAGIN,EN,SP700
          SQUEEZE   XMLENTAG
          MOVELPTR  XMLENTAG,TAGLEN2        * length of end Tag
.
          MATCH     SP700,XMLTAGXX          * is there a place to stop
          IF        !@EQUAL & !@EOS
            MOVE      ONE,FINDSTOP
            PACK      XMLXXTAG,ST1,XMLTAGXX,EN
            SQUEEZE   XMLXXTAG
          ENDIF
.
          CALL      FNDBLK00                * identify which blocks have data
.
GETXML10  MOVE      ZERO,FOUND              * find the Start Tag
          MOVE      ZERO,BLOCKSS
          MOVE      ZERO,BLOCKTT
          MOVE      ZERO,STRTTAG
.
          MOVE      ONE,BLOCK
          REPEAT
            LOAD      WRK4090A,BLOCK,DIM4090A[FL1],DIM4090B[FL1],DIM4090C[FL1]:
                                     DIM4090D[FL1],DIM4090E[FL1],DIM4090F[FL1]:
                                     DIM4090G[FL1],DIM4090H[FL1]
            LOAD      WRK100A,BLOCK,DIM100A[FL1],DIM100B[FL1],DIM100C[FL1]:
                                    DIM100D[FL1],DIM100E[FL1],DIM100F[FL1]:
                                    DIM100G[FL1],DIM100H[FL1]
.
GETXML11    SCAN      XMLSTTAG,WRK4090A     * scan for Tag (eg "<LEGALSTATUS")
            IF        @EQUAL
              MOVEFPTR  WRK4090A,STRTTAG
.
              ASSIGN    (TAGLEN1-1),F5      * check for ">" or "@"
              BUMP      WRK4090A,F5
              IF        @EOS
                GOTO      GETXML18
              ENDIF
              CMATCH    ">",WRK4090A
              IF        !@EQUAL
                CMATCH    "@",WRK4090A
                GOTO      GETXML11 IF NOT EQUAL
              ENDIF
.
              RESET     WRK4090A,STRTTAG
              SCAN      EN,WRK4090A
              GOTO      GETXML18 IF NOT EQUAL   * data is not on this record
.
              MOVEFPTR  WRK4090A,F5
              ASSIGN    (F5-STRTTAG+1),TAGLEN1
              MOVE      BLOCK,BLOCKSS       * save the Start block number
              MOVE      ONE,FOUND
.
            ELSE                            * see if Tag is on the stiched bit
GETXML12      SCAN      XMLSTTAG,WRK100A
              GOTO      GETXML18 IF NOT EQUAL   * Tag not on this record      
              MOVEFPTR  WRK100A,F5
.
              ASSIGN    (TAGLEN1-1),F5      * check for ">" or "@"    *I-266950
              BUMP      WRK100A,F5
              CMATCH    ">",WRK100A
              IF        !@EQUAL
                CMATCH    "@",WRK100A
                GOTO      GETXML18 IF NOT EQUAL
              ENDIF
.
              IF        F5 < 31
                ASSIGN    (4060+F5),STRTTAG
                MOVE      BLOCK,BLOCKSS     * save the Start block number
                MOVE      ONE,FOUND
              ENDIF
            ENDIF
.
GETXML18    IF        FINDSTOP = 1
              RESET     WRK4090A
              SCAN      XMLXXTAG,WRK4090A 
              IF        @EQUAL
                MOVEFPTR  WRK4090A,F5A
                IF        (STRTTAG = 0) | (F5A < STRTTAG)
                  MOVE      ONE,EXIT
                ENDIF
                MOVE      ONE,FOUND
              ELSE
                RESET     WRK100A
                SCAN      XMLXXTAG,WRK100A  * scan the stiched bit
                IF        @EQUAL
                  MOVEFPTR  WRK100A,F5
                  ASSIGN    (4060+F5),F5A
                  IF        (STRTTAG = 0) | (F5A < STRTTAG)
                    MOVE      ONE,EXIT
                  ENDIF
                  MOVE      ONE,FOUND
                ENDIF
              ENDIF
            ENDIF
.
            BRANCH    FOUND,GETXML19
            ADD       ONE,BLOCK
.
GETXML19    MOVE      SP1,ANS    
          UNTIL     (BLOCK > BLOKCNT) | (FOUND = 1)
.
          BRANCH    EXIT,GETXML90           * Tag not found
          BRANCH    FOUND,GETXML20          * Tag was found
          GOTO      GETXML90                * Tag not found
.
.                   --------------------------                    
GETXML20  MOVE      ZERO,FOUND              * find the End Tag
.         MOVE      BLOCKSS,BLOCK           * start where it finished
          REPEAT
            IF        BLOCK = BLOCKSS
              RESET     WRK4090A,STRTTAG    * start from the Start Tag
            ELSE
              LOAD      WRK4090A,BLOCK,DIM4090A[FL1],DIM4090B[FL1]:
                                    DIM4090C[FL1],DIM4090D[FL1],DIM4090E[FL1]:
                                    DIM4090F[FL1],DIM4090G[FL1],DIM4090H[FL1]
              LOAD      WRK100A,BLOCK,DIM100A[FL1],DIM100B[FL1],DIM100C[FL1]:
                                    DIM100D[FL1],DIM100E[FL1],DIM100F[FL1]:
                                    DIM100G[FL1],DIM100H[FL1]
            ENDIF
.
            SCAN      XMLENTAG,WRK4090A     * scan for Tag (eg "</LEGALSTATUS>")
            IF        @EQUAL
              MOVEFPTR  WRK4090A,F5
              ASSIGN    (F5-1),ENDDATA
              ASSIGN    (F5+TAGLEN2-1),ENDTAG
              MOVE      BLOCK,BLOCKTT
              MOVE      ONE,FOUND
              GOTO      GETXML29
            ELSE
              SCAN      XMLENTAG,WRK100A    * scan the stiched bit
              IF        @EQUAL
                MOVEFPTR  WRK100A,F5
                IF        F5 < 31
                  ASSIGN    (F5-1),ENDDATA
                  ASSIGN    (F5+TAGLEN2-1),ENDTAG  * (check if on next record)
                  MOVE      BLOCK,BLOCKTT
                  MOVE      ONE,FOUND
                  GOTO      GETXML29
                ENDIF
              ENDIF
            ENDIF
.
            ADD       ONE,BLOCK
.
GETXML29    MOVE      ZERO,EXIT
          UNTIL     (BLOCK > BLOKCNT) | (FOUND = 1)
.
          IF        FOUND <> 1
            MOVE      BLOCKSS,BLOCKTT       * set End to Start block only
          ENDIF
.
.                                           * now extract the data
GETXML30  MOVE      "4090",ENDRECD
.
          MOVE      ZERO,DATBLOK
          MOVE      BLOCKSS,BLOCK
          REPEAT
            LOAD      WRK4090A,BLOCK,DIM4090A[FL1],DIM4090B[FL1],DIM4090C[FL1]:
                                     DIM4090D[FL1],DIM4090E[FL1],DIM4090F[FL1]:
                                     DIM4090G[FL1],DIM4090H[FL1]
            MOVE      WRK4090A,WRK4090B
            MOVELPTR  WRK4090A,ENDRECD
.                                           * set bounds of the data    
            IF        BLOCK = BLOCKSS
              RESET     WRK4090A,STRTTAG    * set the FP
            ENDIF
            IF        (BLOCK > BLOCKSS) & (BLOCK < BLOCKTT)
.                       * use the FP and LL for length
            ENDIF
            IF        BLOCK = BLOCKTT
              SETLPTR   WRK4090A,ENDTAG     * set the LL
            ENDIF
.
.                                           * move the data to next Level
            ADD       ONE,DATBLOK
            STORE     WRK4090A,DATBLOK,DIM4090A[FL2],DIM4090B[FL2]:
                                     DIM4090C[FL2],DIM4090D[FL2],DIM4090E[FL2]:
                                     DIM4090F[FL2],DIM4090G[FL2],DIM4090H[FL2]
.
.                                           * now compress unused data and put
.                                           * it back into the current level
GETXML40    CLEAR     WRK4090C
            IF        BLOCK = BLOCKSS
              SETLPTR   WRK4090B,STRTTAG
              APPEND    WRK4090B,WRK4090C   * move first bit
              IF        BLOCK = BLOCKTT
                RESET     WRK4090B,ENDTAG
                SETLPTR   WRK4090B,ENDRECD
                APPEND    WRK4090B,WRK4090C * move second bit
              ENDIF
              APPEND    SP4090,WRK4090C
            ELSE
              IF        BLOCK = BLOCKTT
                RESET     WRK4090B,ENDTAG
                SETLPTR   WRK4090B,ENDRECD
                APPEND    WRK4090B,WRK4090C * move last bit
              ENDIF
              APPEND    SP4090,WRK4090C
            ENDIF 
.
            RESET     WRK4090C
            STORE     WRK4090C,BLOCK,DIM4090A[FL1],DIM4090B[FL1],DIM4090C[FL1]:
                                     DIM4090D[FL1],DIM4090E[FL1],DIM4090F[FL1]:
                                     DIM4090G[FL1],DIM4090H[FL1]
.
          ADD       ONE,BLOCK
          UNTIL     BLOCK > BLOCKTT
          BRANCH    BLOKCNT,GETXML80
.                                           * now squeeze ALL the data
          SQUEEZE   DIM4090A[FL1]
          SQUEEZE   DIM4090B[FL1]
          SQUEEZE   DIM4090C[FL1]
          SQUEEZE   DIM4090D[FL1]
          SQUEEZE   DIM4090E[FL1]
          SQUEEZE   DIM4090F[FL1]
          SQUEEZE   DIM4090G[FL1]
          SQUEEZE   DIM4090H[FL1]
.
          PREP      BLOKFILE,KEY8     
          WRITE     BLOKFILE,SEQ;*+,DIM4090A[FL1];
          WRITE     BLOKFILE,SEQ;*+,DIM4090B[FL1];
          WRITE     BLOKFILE,SEQ;*+,DIM4090C[FL1];
          WRITE     BLOKFILE,SEQ;*+,DIM4090D[FL1];
          WRITE     BLOKFILE,SEQ;*+,DIM4090E[FL1];
          WRITE     BLOKFILE,SEQ;*+,DIM4090F[FL1];
          WRITE     BLOKFILE,SEQ;*+,DIM4090G[FL1];
          WRITE     BLOKFILE,SEQ;*+,DIM4090H[FL1]
          OPEN      BLOKFILE,KEY8     
          READ      BLOKFILE,SEQ;DIM4090A[FL1],DIM4090B[FL1],DIM4090C[FL1]:
                                 DIM4090D[FL1],DIM4090E[FL1],DIM4090F[FL1]:
                                 DIM4090G[FL1],DIM4090H[FL1]
          CLOSE     BLOKFILE
.
          SQUEEZE   DIM4090A[FL2]
          SQUEEZE   DIM4090B[FL2]
          SQUEEZE   DIM4090C[FL2]
          SQUEEZE   DIM4090D[FL2]
          SQUEEZE   DIM4090E[FL2]
          SQUEEZE   DIM4090F[FL2]
          SQUEEZE   DIM4090G[FL2]
          SQUEEZE   DIM4090H[FL2]
          MOVELPTR  DIM4090B[FL2],F5
          IF        F5 > 0
            PREP      BLOKFILE,KEY8     
            WRITE     BLOKFILE,SEQ;*+,DIM4090A[FL2];
            WRITE     BLOKFILE,SEQ;*+,DIM4090B[FL2];
            WRITE     BLOKFILE,SEQ;*+,DIM4090C[FL2];
            WRITE     BLOKFILE,SEQ;*+,DIM4090D[FL2];
            WRITE     BLOKFILE,SEQ;*+,DIM4090E[FL2];
            WRITE     BLOKFILE,SEQ;*+,DIM4090F[FL2];
            WRITE     BLOKFILE,SEQ;*+,DIM4090G[FL2];
            WRITE     BLOKFILE,SEQ;*+,DIM4090H[FL2]
            OPEN      BLOKFILE,KEY8     
            READ      BLOKFILE,SEQ;DIM4090A[FL2],DIM4090B[FL2],DIM4090C[FL2]:
                                   DIM4090D[FL2],DIM4090E[FL2],DIM4090F[FL2]:
                                   DIM4090G[FL2],DIM4090H[FL2]
            CLOSE     BLOKFILE
          ENDIF
.
GETXML80  MOVE      ZERO,EXIT
          MOVELPTR  DIM4090A[FL2],F5
.                                           * move to XMLDATA if short enough
          IF        F5 < 500   
            MOVE      DIM4090A[FL2],WRK4090A
            MATCH     XMLSTTAG,WRK4090A
            GOTO      GETXML99 IF NOT EQUAL
            SCAN      EN,WRK4090A           * strip leading Tag (Start tag)
            MOVEFPTR  WRK4090A,F5
            ADD       ONE,F5
            SCAN      XMLENTAG,WRK4090A
            MOVEFPTR  WRK4090A,F5A
            SUB       ONE,F5A
            RESET     WRK4090A,F5
            SETLPTR   WRK4090A,F5A          * strip End tag
            PACK      XMLDATA,WRK4090A,SP4090
            SQUEEZE   XMLDATA
            REP       "@ ",XMLDATA
          ENDIF
.
          GOTO      GETXML99
.
GETXML90  MOVE      ONE,EXIT
.
GETXML99  UNPACK    SP700,XMLTAGXX
          RETURN
+
.******************************************************************************
.*                                  FNDBLK00                                  *
.*                      Identify which Data Blocks have data                  *
.******************************************************************************
FNDBLK00  MOVE      ZERO,EXIT     

          MOVE      "0",BLOKCNT
          MOVELPTR  DIM4090A[FL1],F5
          IF        F5 > 0
            MOVE      "1",BLOKCNT
            MOVE      F5,F5A
          ENDIF
.
          MOVELPTR  DIM4090B[FL1],F5
          IF        F5 > 0
            MOVE      "2",BLOKCNT
            UNPACK    DIM4090A[FL1],DIM4060,DIM30
            PACK      DIM100A[FL1],DIM30,DIM4090B[FL1],SP70 
            SQUEEZE   DIM100A[FL1]
          ENDIF
.
          MOVELPTR  DIM4090C[FL1],F5
          IF        F5 > 0
            MOVE      "3",BLOKCNT
            UNPACK    DIM4090B[FL1],DIM4060,DIM30
            PACK      DIM100B[FL1],DIM30,DIM4090C[FL1],SP70 
            SQUEEZE   DIM100B[FL1]
          ENDIF
.
          MOVELPTR  DIM4090D[FL1],F5
          IF        F5 > 0
            MOVE      "4",BLOKCNT
            UNPACK    DIM4090C[FL1],DIM4060,DIM30
            PACK      DIM100C[FL1],DIM30,DIM4090D[FL1],SP70 
            SQUEEZE   DIM100C[FL1]
          ENDIF
.
          MOVELPTR  DIM4090E[FL1],F5
          IF        F5 > 0
            MOVE      "5",BLOKCNT
            UNPACK    DIM4090D[FL1],DIM4060,DIM30
            PACK      DIM100D[FL1],DIM30,DIM4090E[FL1],SP70 
            SQUEEZE   DIM100D[FL1]
          ENDIF
.
          MOVELPTR  DIM4090F[FL1],F5
          IF        F5 > 0
            MOVE      "6",BLOKCNT
            UNPACK    DIM4090E[FL1],DIM4060,DIM30
            PACK      DIM100E[FL1],DIM30,DIM4090F[FL1],SP70
            SQUEEZE   DIM100E[FL1]
          ENDIF
.
          MOVELPTR  DIM4090G[FL1],F5
          IF        F5 > 0
            MOVE      "7",BLOKCNT
            UNPACK    DIM4090F[FL1],DIM4060,DIM30
            PACK      DIM100F[FL1],DIM30,DIM4090G[FL1],SP70
            SQUEEZE   DIM100F[FL1]
          ENDIF
.
          MOVELPTR  DIM4090H[FL1],F5
          IF        F5 > 0
            MOVE      "8",BLOKCNT
            UNPACK    DIM4090G[FL1],DIM4060,DIM30
            PACK      DIM100G[FL1],DIM30,DIM4090H[FL1],SP70
            SQUEEZE   DIM100G[FL1]
          ENDIF
.
          MOVE      SP4090,WRK4090A
          MOVE      SP4090,WRK4090B
          SQUEEZE   WRK4090A
          SQUEEZE   WRK4090B
+
FNDBLK99  RETURN
+
.******************************************************************************
.*                                  RJUS0000                                  *
.*                         Right Justify a field                              *
.******************************************************************************
RJUS0000  MOVE      SP70,FLD60OUT
          SQUEEZE   FLD60IN
          IF        @EOS
            MOVE      "0",FLD60IN
          ENDIF
          MOVELPTR  FLD60IN,LENIN
          MOVE      LENGTH,LENOUT
          COMPARE   LENIN,LENOUT
          IF        @EQUAL
            MOVE      FLD60IN,FLD60OUT
            GOTO      RJUS9999
          ENDIF
.
          SUB       LENIN,LENOUT
          SUB       ONE,LENOUT
          BUMP      FLD60OUT,LENOUT
          APPEND    FLD60IN,FLD60OUT
          RESET     FLD60OUT
.
RJUS9999  RETURN
.
.******************************************************************************
.*                                  CLRARR00                                  *
.*                  Clear the array and set the Level counter                 *
.******************************************************************************
CLRARR00  MOVE      ZERO,EXIT
          MOVE      ONE,F1
          REPEAT
            MOVE      SP4090,DIM4090A[F1]
            MOVE      SP4090,DIM4090B[F1]
            MOVE      SP4090,DIM4090C[F1]
            MOVE      SP4090,DIM4090D[F1]
            MOVE      SP4090,DIM4090E[F1]
            MOVE      SP4090,DIM4090F[F1]
            MOVE      SP4090,DIM4090G[F1]
            MOVE      SP4090,DIM4090H[F1]
            SQUEEZE   DIM4090A[F1]
            SQUEEZE   DIM4090B[F1]
            SQUEEZE   DIM4090C[F1]
            SQUEEZE   DIM4090D[F1]
            SQUEEZE   DIM4090E[F1]
            SQUEEZE   DIM4090F[F1]
            SQUEEZE   DIM4090G[F1]
            SQUEEZE   DIM4090H[F1]
            UNPACK    SP700,DIM100A[F1],DIM100B[F1],DIM100C[F1],DIM100D[F1]:
                            DIM100E[F1]
            UNPACK    SP700,DIM100F[F1],DIM100G[F1],DIM100H[F1]
            SQUEEZE   DIM100A[F1]
            SQUEEZE   DIM100B[F1]
            SQUEEZE   DIM100C[F1]
            SQUEEZE   DIM100D[F1]
            SQUEEZE   DIM100E[F1]
            SQUEEZE   DIM100F[F1]
            SQUEEZE   DIM100G[F1]
            SQUEEZE   DIM100H[F1]
            ADD       ONE,F1
          UNTIL     F1 > 5
.
          MOVE      ONE,BLKLVLNO            * set the data array Level count
          MOVE      BLKLVLNO,FL1
          ASSIGN    (FL1+1),FL2
.
CLRARR99  RETURN
.
.******************************************************************************
.*                                  DNLEVL00                                  *
.*                  Arrange data fields to allow next level down              *
.******************************************************************************
DNLEVL00  MOVE      ZERO,EXIT
          ADD       ONE,BLKLVLNO
          MOVE      BLKLVLNO,FL1
          ASSIGN    (FL1+1),FL2
.
DNLEVL99  RETURN
+
.
.******************************************************************************
.*                                  UPLEVL00                                  *
.*                  Arrange data fields to allow next level down              *
.******************************************************************************
UPLEVL00  MOVE      SP70,FLD60OUT
          MOVE      SP4090,DIM4090A[FL2]
          MOVE      SP4090,DIM4090B[FL2]
          MOVE      SP4090,DIM4090C[FL2]
          MOVE      SP4090,DIM4090D[FL2]
          MOVE      SP4090,DIM4090E[FL2]
          MOVE      SP4090,DIM4090F[FL2]
          MOVE      SP4090,DIM4090G[FL2]
          MOVE      SP4090,DIM4090H[FL2]
          CLEAR     DIM4090A[FL2]
          CLEAR     DIM4090B[FL2]
          CLEAR     DIM4090C[FL2]
          CLEAR     DIM4090D[FL2]
          CLEAR     DIM4090E[FL2]
          CLEAR     DIM4090F[FL2]
          CLEAR     DIM4090G[FL2]
          CLEAR     DIM4090H[FL2]
.
          SUB       ONE,BLKLVLNO
          MOVE      BLKLVLNO,FL1
          ASSIGN    (FL1+1),FL2
.
UPLEVL99  RETURN
+
.
.******************************************************************************
.*                                  KILL0000                                  *
.*                         Delete all the work files                          *
KILL0000  CLOSE     INNAMXML,DELETE         * get rid of XML .txt file
          CLOSE     INNAMTXT,DELETE         * get rid of list of .xml files
          CLOSE     BLOKFILE,DELETE         * get rid of "blocking" file
          CLOSE     TESTFILE,DELETE         * get rid of the Optn.2 test file
.
KILL9999  RETURN
.
.==============================================================================
.
          INC       STD001IO
          INC       MEHPMEIO/INC            * PRIMHD Errors Table 
          INC       MEHPLSIO/INC            * PRIMHD "LS" Record - Legal Status
          INC       MEHPRDIO/INC            * PRIMHD "RD" Record - Referral Disc
          INC       MEHPATIO/INC            * PRIMHD "AT" Record
          INC       MEHPCNIO/INC            * PRIMHD "CN" Record
          INC       MEHPCOIO/INC            * PRIMHD "CO" Record
          INC       MEHPOIIO/INC            * PRIMHD "OT" & "OI" record
          INC       MEHPTFIO/INC            * PRIMHD Transmission File table
          INC       MEHPEWIO/INC            * PRIMHD Ack. Errors/Warnings
          INC       WEBSECIO/INC            * 
          INC       TFILENAM 
          INC       IBASEQIO/INC 
          INC       WEBERRIO/INC
+
