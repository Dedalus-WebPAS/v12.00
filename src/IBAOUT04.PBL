.******************************************************************************
.* System         : Emergency/Private Practice                                *
.* Program        : IBAOUT04.PBL                                              *
.* Name           : Eclipse DBS (Bulk Billing Claims Extract)                 *
.******************************************************************************
.* Date           : 03/10/2018                                                *
.* Author         : Steve Armstrong                                           *
.* Function       : Extract Eclipse DBS (Bulk Billing) Claims                 *
.*                  Loops through outectaf table and loads any unextracted    *
.*                  records into a temporary table from which they are then   *
.*                  displayed to the user.  The user can select which records *
.*                  to extract, then proceed with the extraction.             *
.*                                                                            *
.* Modifications  :                                                           *
.******************************************************************************
.*        V12.00.01 21/05/2025 Nikitha B         TSK 0955096                  *
.*                  Alphanumeric changes                                      *
.*        V11.02.01 09/02/2022  Thanh T          TSK 0905641                  *
.*                  Recompiled as OUTHEDFD changes                            *
.*        V10.14.00 19/02/2019  Peter Vela       TSK 0870678                  *
.*                  Fixed Provider Number validation VPRN0000                 *
.*                  LARY0000 missing                                          *
.*                  21/01/2019  Peter Vela       TSK 0867807                  *
.*                  Changed ServiceType doctor to Servicing Provider OTBBADCS *
.*                  17/01/2019  Peter Vela       TSK 0867807                  *
.*                  Fixed source of PayeeProviderNum for OUT to be from       *
.*                  slot template                                             *
.*                  15/01/2019  Steve Armstrong  TSK 0859743                  *
.*                  Fixed source of PayeeProviderNum for PRI to be the same   *
.*                  as that used in the PCS Extract (IBAEMR04).               *
.*                  Also swapped code for population of ServiceProviderNum    *
.*                  and PayeeProviderNum for OP records.                      *
.*                  Also added new temp file for separating items on vouchers *
.*                  by date (as per PCS extract).                             *
.*                  Also changed source of ReferralOverrideTypeCde (VCHSEG08) *
.*                  from PRDTROVR to PRHRROVR.                                *
.*                  10/01/2019  Steve Armstrong  TSK 0859743                  *
.*                  Fixed validation of outdtrof record type in WRIT0000      *
.*                  routine (only process where value is 6 - same as per      *
.*                  VALD0000 routine).                                        *
.*                  07/01/2019  Peter Vela       TSK 0859743                  *
.*                  Changed OBADOCT to OTBBADCS                               *
.*                  04/12/2018  Peter Vela       TSK 0859743                  *
.*                  Increased length of LISTARRY                              *
.*                  Changed OTRECTYP to 6 - Theatre Items VALD2100            *
.*                  03/10/2018  Steve Armstrong  TSK 0859743                  *
.*                  Program created based on IBAEMR04 and modified for DBS    *
.*                  (Bulk Billing Claims) Extract.                            *
.******************************************************************************

          INC       STD001FD
.
.         INC       AAEDTRFD/INC
          INC       ALLCONFD/INC
          INC       ALLLNKFD/INC
          INC       ALLREFFD/INC
          INC       IBACONFD/INC
          INC       IBASEQFD/INC
          INC       OUTBOAFD/INC
          INC       OUTBB1FD/INC
          INC       OUTDTRFD/INC
          INC       OUTECAFD/INC
          INC       OUTECTFD/INC
          INC       OUTHEDFD/INC
          INC       OUTIBHFD/INC
          INC       OUTSESFD/INC
          INC       OUTSITFD/INC
          INC       PATCODFD/INC
          INC       PATCONFD/INC
          INC       PATCRTFD/INC
          INC       PATHSPFD/INC
          INC       PATINVFD/INC
          INC       PATMA1FD/INC
          INC       PATVISFD/INC
          INC       PMSHCPFD/INC
          INC       PMSPX2FD/INC
          INC       PRIDOCFD/INC
          INC       PRIDTRFD/INC
          INC       PRIHDBFD/INC
          INC       PRIHREFD/INC
          INC       PRIINVFD/INC
          INC       PRIPRAFD/INC
          INC       TFILEVAR/INC
          INC       WEBERRFD/INC
          INC       WEBSECFD/INC
.
EXTFILE1  FILE      ASCII,FIXED=256
.
.
.         Temporary File Definitions
.         --------------------------
.
.         Unsorted Invoice Listing for Eclipse Extract
.
LSTTEMP1  IFILE SQL, FIXED=86, KEY="U1-8,9-16"
.
.NAME     TYPE    LENGTH     PHYSICAL     START     DESCRIPTION
.----     ----    ------     --------     -----     -----------
LISTUNIQ  DIM       8           8           1       Unique Identifier
LISTINVN  DIM       8           8           9       Invoice Number
LISTURNO  DIM       8           8          17       U/R Number
LISTDATE  DIM       8           8          25       Invoice Date (ccyymmdd)
LISTAMNT  FORM      12.2        8          33       Outstanding Invoice Amount
LISTFLAG  FORM      1           2          41       Extract Flag
.                                                     0 = Extract
.                                                     1 = Don't extract
LISTHOSP  DIM       3           3          43       Hospital Code
LISTRTYP  FORM      1           2          46       Record Type
.                                                     1 = Emergency
.                                                     2 = Private Practice
.                                                     3 = Outpatient
LISTOKEY  DIM       36         36          48       O/P outbokaf key
LISTIHOS  FORM      1           2          84       In-Hospital Indicator
.                                                     0 = Not In-Hospital
.                                                     1 = In-Hospital
.
.End of Record                             86
.
.
.         Sorted Invoice Listing for Extraction
.         - will contain a record for each pridtraf/aaedtref item record for
.           the single invoice being processed, sorted by the service date,
.           which represents a Voucher
.
SRTTEMP2  IFILE SQL, FIXED=15, KEY="U1-8,9-14"
.
.NAME     TYPE    LENGTH     PHYSICAL     START     DESCRIPTION
.----     ----    ------     --------     -----     -----------
SORTSDAT  DIM       8            8          1       Item Service Date (ccyymmdd)
SORTTRAN  DIM       6            6          9       Transaction Number
.                                                      (pridtraf.prdttran)
.                                                      (aaedtref.attrans)
. End of Record                            15
.
.
. LOCAL VARIABLE DEFINITION
. -------------------------
BATCHNUM  DIM       8
CALLPOSN  FORM      1
CMDLINE   DIM       100
COUNTER   FORM      2
CURRDATE  DIM       8                       * Current date (ccyymmdd)
.
DATEVAR1  DATE      8
DATEVAR2  DATE      8
DIM2A     DIM       2
DIM2B     DIM       2
DIM4      DIM       4
DIM5      DIM       5
DIM6      DIM       6
DIM6A     DIM       6
DIM6B     DIM       6
DIM7      DIM       7
DIM8      DIM       8
DIM8A     DIM       8
DIM8B     DIM       8
DIM9      DIM       9
DIM15     DIM       15
.
ERRCT     FORM      6                       * Error counter
ERRFLG    FORM      1                       * Error flag
ERRMSG    DIM       90                      * Error message
.
FIELD     FORM      2
FIELDESC  DIM       23
FILENAMB  DIM       8
FILENAME  DIM       8
FIRSTREC  FORM      1                       * first record flag
FLAGDIM3  DIM       3
.                                                0 = no
.                                                1 = yes
FORM12P2  FORM      12.2
FORM3     FORM      3
FORM5     FORM      5
FORM8     FORM      8
.
HOSPCODE  DIM       3
.
INCLFLAG  FORM      1                       * include flag
.                                             0 = include all
.                                             1 = exclude all
INHOSFLG  FORM      1                       * in-hospital flag
.                                             0 = not in-hospital
.                                             1 = in-hospital
ITMCOUNT  FORM      2                       * item count
.
LISTARRY  DIM       90[90]
LONGFNAM  DIM       10
LSTCOUNT  FORM      2
.
PLVCARRY  DIM       1[22]                   * PLV character array
PLVNARRY  FORM      2[22]                   * PLV numeric array
PROVARRY  DIM       1[8]                    * provider number character array
PRVNARRY  FORM      2[7]                    * provider number numeric array
PROVFLAG  FORM      1                       * provider flag
.                                                1 = Hospital Facility
.                                                4 = Doctor Provider
.
RECCNT    FORM      6
.
SAVBTHN   DIM       8
SAVEHOSP  DIM       3
SAVERDAT  DIM       8
SAVESDAT  DIM       8
SVHOSIND  DIM       1
SAVKEY30  DIM       30
SAVPRVBN  DIM       8
SEGFIELD  DIM       2
SEGMTYPE  DIM       3
SERVTXT1  DIM       50
SERVTXT2  DIM       50
.
TEMPFILA  DIM       8
TEMPFILB  DIM       8
TMPKEY    DIM       16[17]
TOTAMTCT  FORM      12.2
.
VALDFLG   FORM      1                       * Validation flag
VCHCOUNT  FORM      2
.
WRTCT     FORM      6                       * Write counter
.
. PROGRAM CONSTANTS
. -----------------
ATSYMBOL  INIT      "@"
.
CATro     INIT      "ro"
CATst     INIT      "st"
CATSd     INIT      "Sd"
.
ERASE     INIT      "iserase "
.
HASHSYM   INIT      0X23                    * hash symbol (#)
.
ISBUILD   INIT      "isbuild "
.
PIPE      INIT      "|"
.
SP90      INIT      "                                                                                           "
.
TILDA01   INIT      "~"
TILDA40   INIT      "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
TXT       INIT      ".txt"
.
UKEYA     INIT      " 86 U1-8,9-16"
UKEYB     INIT      " 15 U1-8,9-14"
.
. ----- Eclipse Data Variables -----
.
. HDR segment       Len    Pos
.-------------      ---    ---
.~        DIM       1      1
.HDR      DIM       3      2
HDRSEG01  DIM       8      5     * Batch Number
HDRSEG02  DIM       8      13    * Location Id
HDRSEG03  DIM       10     21    * Certificate Id
HDRSEG04  DIM       60     31    * Sender Id
HDRSEG05  DIM       1      91    * Test/Production Flag (T/P)
. End of Segment           93
.
.
. CLM segment       Len    Pos
.-------------      ---    ---
.~        DIM       1      1
.CLM      DIM       3      2
CLMSEG01  DIM       8      5     * AuthorisationDate
CLMSEG02  DIM       6     13     * PmsClaimId
CLMSEG03  DIM       8     19     * ServicingProviderNum
CLMSEG04  DIM       8     27     * PayeeProviderNum
CLMSEG05  DIM       1     35     * ServiceTypeCde
CLMSEG06  DIM      24     36     * TransactionId
CLMSEG07  DIM       9     60     * AccountReferenceId
CLMSEG08  DIM       1     69     * Module
.                                    1 = Emergency  
.                                    2 = Private Practice
.                                    3 = Outpatient
. End of Segment          70
.
.
. VCH segment       Len    Pos
.-------------      ---    ---
.~        DIM       1      1
.VCH      DIM       3      2
VCHSEG01  DIM       1      5     * BenefitAssignmentAuthorised
VCHSEG02  DIM       8      6     * DateOfService
VCHSEG03  DIM       8     14     * PatientDateOfBirth
VCHSEG04  DIM      40     22     * PatientFamilyName
VCHSEG05  DIM      40     62     * PatientFirstName
VCHSEG06  DIM      10    102     * PatientMedicareCardNum
VCHSEG07  DIM       1    112     * PatientReferenceNum
VCHSEG08  DIM       1    113     * ReferralOverrideTypeCde
VCHSEG09  DIM       8    114     * ReferringProviderNum/RequestingProviderNum
VCHSEG10  DIM       8    122     * ReferralIssueDate/RequestIssueDate
VCHSEG11  DIM       1    130     * ReferralPeriodTypeCde
VCHSEG12  DIM       1    131     * RequestTypeCde
VCHSEG13  DIM       4    132     * TimeOfService
. End of Segment         136
.
.
. SRV segment       Len    Pos
.-------------      ---    ---
.~        DIM       1      1
.SRV      DIM       3      2
SRVSEG01  DIM      12      5     * AccessionDateTime
SRVSEG02  DIM       1     17     * AfterCareOverrideInd
SRVSEG03  DIM       7     18     * ChargeAmount
SRVSEG04  DIM      12     25     * CollectionDateTime
SRVSEG05  DIM       1     37     * DuplicateServiceOverrideInd
SRVSEG06  DIM       5     38     * EquipmentId
SRVSEG07  DIM       2     43     * FieldQuantity
SRVSEG08  DIM       1     45     * HospitalInd
SRVSEG09  DIM       5     46     * ItemNum
SRVSEG10  DIM       5     51     * SCPId
SRVSEG11  DIM       6     56     * LSPNum
SRVSEG12  DIM       1     62     * MultipleProcedureOverrideInd
SRVSEG13  DIM       2     63     * NoOfPatientsSeen
SRVSEG14  DIM       2     65     * RestrictiveOverrideCde
SRVSEG15  DIM       1     67     * Rule3ExemptInd
SRVSEG16  DIM       1     68     * S4B3ExemptInd
SRVSEG17  DIM       2     69     * SelfDeemedCde
SRVSEG18  DIM      50     71     * ServiceText
SRVSEG19  DIM       3    121     * TimeDuration
. End of Segment         124
.
.
.
PRGID     INIT      "IBAOUT04"
PRGNAM    INIT      "Eclipse Bulk Billing Claims Extract"
VERSION   INIT      "V12.00.01"
+
.******************************************************************************
.*                                   MAIN0000                                 *
.*                                 Main Module                                *
.******************************************************************************
.
MAIN0000  CALL      INIT0000                * Initialise variables & open files
          CALL      CTMP0000                * Create tempfiles
.
MAIN0500  CALL      GHSP0000                * get hospital code
          BRANCH    EXIT,MAIN9999           * nothing/exitchar entered
.
MAIN1500  CALL      OPTN0000                * Choose main option
          BRANCH    EXIT,MAIN8000           * exit selected
          BRANCH    COPTION,MAIN2000        * S&F Extract
.
MAIN2000  CALL      HEAD0000                * Print report header
          CALL      CLER0000                * clear temp file records
          CALL      RERR0000                * reset any error records
          CALL      LOAD0000                * load outectaf records to temp file
          CALL      DCLM0000                * display waiting records
          BRANCH    EXIT,MAIN8000           * cancel selected
.
          CALL      VALD0000                * Validate the tempfile
          CALL      QUES0000                * Extract question
          BRANCH    EXIT,MAIN8000
.
          CALL      WRIT0000                * Write to the files
.
MAIN8000  CALL      TAIL0000                * Print report tail
.
MAIN9000  CALL      KILL0000                * Kill tempfile
.
MAIN9999  CHAIN     PGM
+
.******************************************************************************
.*                                  INIT0000              Called by: MAIN0000 *
.*                       Initialise Variable & Open Files                     *
.******************************************************************************
.
INIT0000  CALL      DISPHEAD                * Display screen heading
.
          DISPLAY   *P56:24,"Opening controlf"
          OPEN      CONTROLF,"controlf"
.
.         DISPLAY   *P64:24,"aaedtref"
.         OPEN      AAEDTRE1,"aaedtref"
.         OPEN      AAEDTRE4,"aaedtref"
.
          DISPLAY   *P64:24,"alllnkaf"
          OPEN      ALLLNKA2,"alllnkaf"
.
          DISPLAY   *P64:24,"allrefaf"
          OPEN      ALLREFA1,"allrefaf"
.
          DISPLAY   *P64:24,"outecaaf"
          OPEN      OUTECAA1,"outecaaf"
.
          DISPLAY   *P64:24,"outectaf"
          OPEN      OUTECTA1,"outectaf"
.
          DISPLAY   *P64:24,"outibhaf"
          OPEN      OUTIBHA1,"outibhaf"
.
          DISPLAY   *P64:24,"outdtrof"
          OPEN      OUTDTRO1,"outdtrof"
          OPEN      OUTDTRO4,"outdtrof"
.
          DISPLAY   *P64:24,"outecaaf"
          OPEN      OUTECAA1,"outecaaf"
.
          DISPLAY   *P64:24,"outsitaf"
          OPEN      OUTSITA1,"outsitaf"
.
          DISPLAY   *P64:24,"patcodes"
          OPEN      PATCODE1,"patcodes"
.
          DISPLAY   *P64:24,"patcrtaf"
          OPEN      PATCRTA1,"patcrtaf"
.
          DISPLAY   *P64:24,"pathspaf"
          OPEN      PATHSPA1,"pathspaf"
.
          DISPLAY   *P64:24,"patinvrf"
          OPEN      PATINVR1,"patinvrf"
.
          DISPLAY   *P64:24,"patma1af"
          OPEN      PATMA1A1,"patma1af"
          OPEN      PATMX1A1,"patmx1af"
.
          DISPLAY   *P64:24,"patvisaf"
          OPEN      PATVISA1,"patvisaf"
.
          DISPLAY   *P64:24,"pmshcpaf"
          OPEN      PMSHCPA1,"pmshcpaf"
          OPEN      PMSHCPA4,"pmshcpaf"
.
          DISPLAY   *P64:24,"pmspx2af"
          OPEN      PMSPX2A1,"pmspx2af"
.
          DISPLAY   *P64:24,"pridoctf"
          OPEN      PRIDOCT1,"pridoctf"
.
          DISPLAY   *P64:24,"pridtraf"
          OPEN      PRIDTRA1,"pridtraf"
          OPEN      PRIDTRA4,"pridtraf"
.
          DISPLAY   *P64:24,"prihdbtf"
          OPEN      PRIHDBT2,"prihdbtf"
.
          DISPLAY   *P64:24,"prihreff"
          OPEN      PRIHREF1,"prihreff"
.
          DISPLAY   *P64:24,"priinvof"
          OPEN      PRIINVO1,"priinvof"
.
          DISPLAY   *P64:24,"pripracf"
          OPEN      PRIPRAC1,"pripracf"
.
          DISPLAY   *P64:24,"websecaf"
          OPEN      WEBSECA3,"websecaf"
.
          READ      CONTROLF,ZERO;*43,IBCNMHOS
          READ      CONTROLF,TEN;*79,CAPPRVNO
          READ      CONTROLF,HUND10;*115,PTCNUEDI,*116,PTCNEDIH
          READ      CONTROLF,HUND14;*145,PTCNCLID
          READ      CONTROLF,HUND27;*122,PTCNUEBB,*123,PTCNEDBO,*243,PTCNUTPB
.
          PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
          CLOCK     TIME,CTIMEIS
.
          MOVE      ONE,VALDFLG                  * set validation flag
.
          CALL      LARY0000
.
INIT9999  RETURN
+
.******************************************************************************
.*                                  OPTN0000              Called by: MAIN0000 *
.*                                Select Option                               *
.******************************************************************************
.
OPTN0000  HLINE     *G37,2,63,80
          DISPLAY   *P40:4,*EF:
                    *P1:6,*V2LON,"0",*HOFF," = Exit":
                    *P1:7,*V2LON,"1",*HOFF," = Create Bulk Billing Claims ":
                    "Extract ":
                    *P1:9,"Select Option : ";
.
OPTN1000  KEYIN     *P17:9,*V2LON,COPTION;
.
          COMPARE   ZERO,COPTION                 * exit selected ?
          GOTO      OPTN9500 IF EQUAL            * yes - finished
.
          BRANCH    COPTION,OPTN2000             * Bulk Billing extract
.
          BEEP
          GOTO      OPTN1000
.
OPTN2000  COMPARE   ONE,PTCNUEDI
          IF        !@EQUAL
            MOVE      "GEN.11-Hospital not using the EDI Module",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      OPTN9500
          ENDIF
.
          MATCH     "1",PTCNUEBB
          IF        !@EQUAL
            MOVE      "GEN.12-Bulk Billing Claiming not available",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      OPTN9500
          ENDIF
.
          MATCH     SP70,PTCNEDBO
          IF        @EQUAL
            MOVE      "GEN.13-Eclipse Bulk Billing Outbound Path blank",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      OPTN9500
          ENDIF
.
OPTN9000  MOVE      ZERO,EXIT
          GOTO      OPTN9999
.
OPTN9500  MOVE      ONE,EXIT
.
OPTN9999  RETURN
+
.*****************************************************************************
.*                                 GHSP0000        Called by: MAIN0000       *
.*               Get the user to keyin a hospital code                       *
.* Returns: EXIT   0 = Valid Hospital selected                               *
.*                 1 = nothing, exitchar or spaces input                     *
.*          HOSPCODE - 3 character hospital code                             *
.*****************************************************************************
.
GHSP0000  HLINE     *G37,2,63,80
          MOVE      FOUR,EVERT
          MOVE      TEN2,ECOL
          MOVE      SP3,CKYIDEF3
          MOVE      ZERO,CKYIMAND
          MOVE      ZERO,CKYIMODE
.
          DISPLAY   *P1:3,*EF,*P1:4,"Hospital :":
                    *P1:24,"(",*V2LON,EXITCHAR,*HOFF," to exit)"
          CALL      PATHSPKY
          BRANCH    EXIT,GHSP8000:               * nothing input
                         GHSP9100:               * exitchar input
                         GHSP8000                * spaces input
.
.         Valid hospital entered
.
          DISPLAY   *P16:4,PTHSNAME;
          GOTO      GHSP9000
.
GHSP8000  DISPLAY   *P16:4,*V2LON,"All"
.
GHSP9000  MOVE      KEY3,HOSPCODE
          MOVE      ZERO,EXIT
          GOTO      GHSP9999
.
GHSP9100  MOVE      ONE,EXIT
.
GHSP9999  RETURN
+
.******************************************************************************
.*                                  HEAD0000              Called by: MAIN0000 *
.*                             Print Report Header                            *
.******************************************************************************
.
HEAD0000  CALL      HEAD132
.
          PRINT     *N,*1,"Bulk Billing Claims"
.
          CALL      UND132
          PRINT     *1,PIPE,*3,"Invoice",*12,PIPE,*14,"U/R No.",*23,PIPE:
                    *25,"Item",*35,PIPE,*37,"Error",*132,PIPE
          CALL      UND132
          MOVE      EIGHT,CLNO
.
HEAD9000  MOVE      ZERO,EXIT
.
HEAD9999  RETURN
+
.******************************************************************************
.*                                  VALD0000              Called by: MAIN0000 *
.*                   Validate the invoice records on the temp file            *
.******************************************************************************
.
.         Initialise counters
.
VALD0000  MOVE      ZERO,RECCNT                  * init. invoice record count
          MOVE      ZERO,ERRCT                   * init. error count
.
          MOVE      ZERO,TOTAMTCT                * clear total amount counter
          MOVE      ZERO,WRTCT
          DISPLAY   *P1:24,*EL,"Validating : ";
.
          MOVE      SP20,KEY16
          CALL      RSTEMP1                      * position at start of file
VALD0500  CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,VALD9999               * eof - finished
.
          BRANCH    LISTFLAG,VALD0500            * excluded from extract
.
          MOVE      ZERO,INHOSFLG                * init. in-hospital flag
          MOVE      ZERO,ERRFLG                  * initialise error flag
          ADD       ONE,RECCNT                   * incr. invoice record count
.
.         Get the original outectaf record
.
          PACK      KEY30,LISTHOSP,SP1,ZERO,LISTRTYP,LISTUNIQ,LISTINVN,SP30
          CALL      RDOTECT1                     * record on file ?
          IF        OVRCD = 1
            MOVE      "GEN.1-Matching outectaf record not found",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VALD0500
          ENDIF
.
          MOVE      LISTURNO,KEY8
          CALL      RDMAST1                      * pmi master record found ?
          IF        OVRCD = 1
            MOVE      "GEN.7-Missing patma1af record",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VALD9000
          ENDIF
.
          MOVE      LISTURNO,KEY8
          CALL      RDPMPX21                     * pmi extension found ?
          IF        OVRCD = 1
            MOVE      "GEN.8-Missing pmspx2af record",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VALD9000
          ENDIF
.
          IF        LISTRTYP = 2
            MOVE      LISTUNIQ,KEY8
            CALL      RDPRHD2                      * header record on file ?
            IF        OVRCD = 1
              MOVE      "GEN.2-Missing prihdbtf record",ERRMSG
              MOVE      SP9,DIM9
              CALL      PERR0000
              GOTO      VALD9000
            ENDIF
          ENDIF
.
.         Now get the first pridtraf/outdtrof records for the invoice
.
          MATCH     "3",OTECMODL                 * OP record ?
          GOTO      VALD3000 IF NOT EQUAL        * yes
.
.         OP Record
.
          PACK      KEY23,LISTINVN,SP70
          CALL      RDSDTRO4                     * position before invoice
VALD2100  CALL      RDKDTRO4                     * read next record
          BRANCH    OVRCD,VALD8000               * eof - finished
.
          MATCH     LISTINVN,OTINVNO             * same invoice still ?
          GOTO      VALD8000 IF NOT EQUAL        * no - finished
.
          IF        OTRECTYP <> 6
            GOTO      VALD2100
          ENDIF
.
          MOVE      LISTUNIQ,DIM8VISN
          MATCH     DIM8VISN,OTNUMB                 * same visit ?
          IF        !@EQUAL
            MOVE      "GEN.30-Visit inconsistency for outdtrof record",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VALD2100
          ENDIF
.
.         Get the corresponding outbokaf and outbb1af records
.
          UNPACK    LISTOKEY,KEY24,KEY6
          CALL      RDSITA1
          IF        OVRCD = 1
            MOVE      "GEN.32-OP Site not found",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VALD0500
          ENDIF
.
          CLOSE     OUTBOKA6
          PACK      FILENAME,OSTFILE,FILBOKA6
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTBOKA6,FILENAME
          TRAPCLR   IO
          IF        OVRCD = 1
            MOVE      "GEN.31-Open failed on outbokaf",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VALD0500
          ENDIF
.
          CLOSE     OUTBB1A1
          PACK      FILENAME,OSTFILE,FILBB1A1
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTBB1A1,FILENAME
          TRAPCLR   IO
          IF        OVRCD = 1
            MOVE      "GEN.14-Open failed on outbb1af",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VALD0500
          ENDIF
.
          CLOSE     OUTSESA1
          PACK      FILENAME,OSTFILE,FILSESA1
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTSESA1,FILENAME
          TRAPCLR   IO
          IF        OVRCD = 1
            MOVE      "GEN.37-Open failed on outsesaf",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VALD0500
          ENDIF
.
          CLOSE     OUTHEDA1
          PACK      FILENAME,OSTFILE,FILHEDA1
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTHEDA1,FILENAME
          TRAPCLR   IO
          IF        OVRCD = 1
            MOVE      "GEN.38-Open failed on outhedaf",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VALD0500
          ENDIF
.
          MOVE      LISTOKEY,KEY36
          CALL      RDBOKA6
          IF        OVRCD = 1
            MOVE      "GEN.22-OP Booking A record not found",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VALD0500
          ENDIF
.
          MOVE      OBAOUTNO,KEY8
          CALL      RDBOKB1
          IF        OVRCD = 1
            MOVE      "GEN.23-OP Booking B record not found",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VALD0500
          ENDIF
.
          PACK      KEY25,OBASITE,OBACLIN,OBADATE,OBASTRT,SP70
          CALL      RDSESA1
          IF        OVRCD = 1
            MOVE      "GEN.39-outsesaf visit record not found",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VALD0500
          ENDIF
.
          PACK      KEY28,OSESITE,OSECLIN,OSEDAY,OSESTRT,OSESSHNO,OSESSDAT,SP70
          CALL      RDOTHED1
          IF        OVRCD = 1
            MOVE      "GEN.40-outhedaf visit record not found",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VALD0500
          ENDIF
.
VALD2500  MOVE      OTECINVN,KEY8
          CALL      RDINV1                     * ED/OP invoice on file ?
          IF        OVRCD = 1
            MATCH     "1",OTECMODL
            IF        @EQUAL
              MOVE      "GEN.20-Emergency invoice ",ERRMSG
            ELSE
              MOVE      "GEN.20-Outpatient invoice ",ERRMSG
            ENDIF
            ENDSET    ERRMSG
            SQUEEZE   KEY8
            APPEND    KEY8,ERRMSG
            APPEND    " not on file",ERRMSG
            RESET     ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VALD0500
          ENDIF
.
          GOTO      VALD4000                     * process record
.
.         PRI Record
.
VALD3000  PACK      KEY22,LISTINVN,SP30
          CALL      RSPRDT4                      * position before invoice
VALD3500  CALL      RKPRDT4                      * read next record
          BRANCH    OVRCD,VALD8000               * eof - finished
.
          MATCH     LISTINVN,PRDTINVN            * same invoice still ?
          GOTO      VALD8000 IF NOT EQUAL        * no - finished
.
          COMPARE   ONE,PRDTRTYP                 * item record ?
          GOTO      VALD3500 IF NOT EQUAL        * no - ignore record
.
.         Get the corresponding prihreff record now that we have the patient
.         indicator
.
          PACK      KEY27,PRDTUNIQ,PRDTPRAC,PRDTDOCT,PRDTCODE
          CALL      RDPRHR1
          IF        OVRCD = 1
            MOVE      "GEN.3-Missing prihreff record",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VALD9000
          ENDIF
.
          MOVE      OTECINVN,KEY8
          CALL      RDPRIN1
          IF        OVRCD = 1
            MOVE      "GEN.21-Private Practice invoice ",ERRMSG
            ENDSET    ERRMSG
            SQUEEZE   KEY8
            APPEND    KEY8,ERRMSG
            APPEND    " not on file",ERRMSG
            RESET     ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VALD0500
          ENDIF
.
.         Process the record for the claim
.
VALD4000  DISPLAY   *P15:24,*V2LON,LISTINVN,SP2,LISTUNIQ;
.
          IF        RECCNT = 1
            CALL      WHDR0000                   * write header details
          ENDIF
.
          CALL      WCLM0000                     * write claim details
.
          CALL      CLRB0000                     * clear sort tempfile
          CALL      LODS0000                     * load sort tempfile
.
.         Process all the service items for the current invoice and write
.         the relevant voucher and service segment records
.
          CALL      PITM0000
.
          CALL      WTLR0000                     * write trailer record
          GOTO      VALD9000
.
.         Check if there were DBS charges to be processed
.
VALD8000  MOVE      "GEN.4-No billing transactions for invoice ",ERRMSG
          ENDSET    ERRMSG
          APPEND    LISTINVN,ERRMSG
          RESET     ERRMSG
          MOVE      SP9,DIM9
          CALL      PERR0000
.
.         Check if there were any errors associated with processing
.         the outectaf record
.
VALD9000  COMPARE   ONE,ERRFLG                   * any errors ?
          IF        @EQUAL
            MOVE      ONE,OTECFLAG               * yes
            CALL      UPOTECT1                   * update error flag
          ENDIF
.
          GOTO      VALD0500                     * get next temp record
.
VALD9999  RETURN
+
.******************************************************************************
.*                                  QUES0000              Called by: MAIN0000 *
.*                              Extract Question                              *
.******************************************************************************
.
QUES0000  DISPLAY   *P1:19,*EF:
                    *P1:20,*EF,"Total Records Read     : ",*V2LON,RECCNT,*HOFF:
                    *P1:21,"Total Number of Errors : ",*V2LON,ERRCT,*HOFF;
.
          COMPARE   ZERO,RECCNT
          GOTO      QUES1000 IF NOT EQUAL   * No data found
.
          DISPLAY   *P1:24,*EL,*B,"No data found. Extract not created.  ";
          CALL      HITENTER
          GOTO      QUES9500
.
QUES1000  COMPARE   ZERO,ERRCT
          IF        !@EQUAL
            DISPLAY   *P1:24,*EL,*B,"Errors found.  ";
            CALL      HITENTER
            GOTO      QUES3000
          ENDIF
.
          GOTO      QUES9000                     * no errors - extract
.
.         Not doing extraction, reset status of records back to "0"
.
QUES3000  CALL      RERR0000
          GOTO      QUES9500
.
QUES9000  MOVE      ZERO,EXIT
          GOTO      QUES9999
.
QUES9500  MOVE      ONE,EXIT
.
QUES9999  RETURN
+
.******************************************************************************
.*                                  PITM0000              Called by: VALD0000 *
.*         Process the current invoice transaction items and write   WRIT0000 *
.*         the relevant voucher (VCH) and service item (SRV) segment records. *
.******************************************************************************
.
PITM0000  MOVE      SP10,SAVESDAT                * initialise save variables
          MOVE      ZERO,VCHCOUNT                * initialise voucher count
.
          MOVE      SP20,KEY14
          CALL      RSTEMP2                      * pos'n at start of temp file
PITM0500  CALL      RKTEMP2                      * read next record
          BRANCH    OVRCD,PITM9999               * eof - finished
.
.         Read the corresponding dtr record
.
          PACK      KEY22,LISTUNIQ,LISTINVN,SORTTRAN
          IF        LISTRTYP = 3
            CALL      RDDTRO1
          ELSE
            CALL      RDPRDT1
          ENDIF
          IF        OVRCD = 1
            MOVE      "GEN.18-Transaction Record not found",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
          ENDIF
.
          MATCH     SAVESDAT,SORTSDAT            * same service date still ?
          GOTO      PITM5000 IF EQUAL            * yes - same voucher
.
.         The Service Date has changed, so we need to create a new
.         voucher segment
.
          MOVE      SORTSDAT,SAVESDAT            * save new Service Date
          MOVE      SP1,SVHOSIND                 * clear saved hosp. indicator
          CALL      WVCH0000
.
          MOVE      ZERO,ITMCOUNT                * init. item count
.
.         Create an SRV segment for a dtr item record.
.
PITM5000  CALL      WSRV0000
.
          GOTO      PITM0500                     * get the next record (item)
.
PITM9999  RETURN
+
.******************************************************************************
.*                                  WRIT0000              Called by: MAIN0000 *
.*                   Extract the invoice records on the temp file             *
.******************************************************************************
.
WRIT0000  MOVE      ZERO,VALDFLG                 * set flag for writing
          CALL      TFILENAM                     * get new extract file name
          MOVE      TFILNAME,FILENAMB
.
.         Initialise counters
.
          MOVE      ZERO,RECCNT                  * init. invoice record count
          MOVE      ZERO,ERRCT                   * init. error count
.
          CALL      PREP0000                     * prepare extract file
.
          MOVE      ZERO,TOTAMTCT                * clear total amount counter
          MOVE      ZERO,WRTCT
          DISPLAY   *P1:24,*EL,"Writing : ";
.
          MOVE      SP20,KEY16
          CALL      RSTEMP1                      * position at start of file
WRIT0500  CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,WRIT9000               * eof - finished
.
          BRANCH    LISTFLAG,WRIT0500            * excluded from extract
.
          MOVE      ZERO,ERRFLG                  * initialise error flag
          ADD       ONE,RECCNT                   * incr. invoice record count
.
          PACK      KEY30,LISTHOSP,SP1,ZERO,LISTRTYP,LISTUNIQ,LISTINVN,SP30
          CALL      RDOTECT1                     * record on file ?
          BRANCH    OVRCD,WRIT0500               * no - ignore invoice
.
          MOVE      LISTURNO,KEY8
          CALL      RDMAST1                      * pmi master record found ?
          BRANCH    OVRCD,WRIT0500               * no - ignore invoice
.
          MOVE      LISTURNO,KEY8
          CALL      RDPMPX21                     * pmi extension found ?
          BRANCH    OVRCD,WRIT0500               * no - ignore invoice
.
          IF        LISTRTYP = 2
            MOVE      LISTUNIQ,KEY8
            CALL      RDPRHD2                    * header record on file ?
            BRANCH    OVRCD,WRIT0500             * no - ignore invoice
          ENDIF
.
.         Now get the first dtr record for the invoice
.
          MATCH     "3",OTECMODL                 * OP record ?
          GOTO      WRIT3000 IF NOT EQUAL        * no - PRI
.
.         OP Record
.
          PACK      KEY23,LISTINVN,SP70
          CALL      RDSDTRO4                     * position before invoice
WRIT2100  CALL      RDKDTRO4                     * read next record
          BRANCH    OVRCD,WRIT8000               * eof - finished
.
          MATCH     LISTINVN,OTINVNO             * same invoice still ?
          GOTO      WRIT8000 IF NOT EQUAL        * no - finished
.
          IF        OTRECTYP <> 6
            GOTO      WRIT2100
          ENDIF
.
          MOVE      LISTUNIQ,DIM8VISN
          MATCH     DIM8VISN,OTNUMB              * same visit ?
          GOTO      WRIT2100 IF NOT EQUAL        * no - finished
.
.         Get the corresponding outbokaf and outbb1af records
.
          UNPACK    LISTOKEY,KEY24,KEY6
          CALL      RDSITA1
          BRANCH    OVRCD,WRIT0500
.
          CLOSE     OUTBOKA6
          PACK      FILENAME,OSTFILE,FILBOKA6
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTBOKA6,FILENAME
          TRAPCLR   IO
          BRANCH    OVRCD,WRIT0500
.
.
          CLOSE     OUTBB1A1
          PACK      FILENAME,OSTFILE,FILBB1A1
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTBB1A1,FILENAME
          TRAPCLR   IO
          BRANCH    OVRCD,WRIT0500
.
          CLOSE     OUTSESA1
          PACK      FILENAME,OSTFILE,FILSESA1
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTSESA1,FILENAME
          TRAPCLR   IO
          BRANCH    OVRCD,WRIT0500
.
          CLOSE     OUTHEDA1
          PACK      FILENAME,OSTFILE,FILHEDA1
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTHEDA1,FILENAME
          TRAPCLR   IO
          BRANCH    OVRCD,WRIT0500
.
          MOVE      LISTOKEY,KEY36
          CALL      RDBOKA6
          BRANCH    OVRCD,WRIT0500
.
          MOVE      OBAOUTNO,KEY8
          CALL      RDBOKB1
          BRANCH    OVRCD,WRIT0500
.
          PACK      KEY25,OBASITE,OBACLIN,OBADATE,OBASTRT,SP70
          CALL      RDSESA1
          BRANCH    OVRCD,WRIT0500          
.
          PACK      KEY28,OSESITE,OSECLIN,OSEDAY,OSESTRT,OSESSHNO,OSESSDAT,SP70
          CALL      RDOTHED1
          BRANCH    OVRCD,WRIT0500
.
WRIT2500  MOVE      OTECINVN,KEY8
          CALL      RDINV1                       * ED/OP invoice on file ?
          BRANCH    OVRCD,WRIT0500               * no - get next invoice
.
          GOTO      WRIT4000                     * process record
.
.         PRI Record
.
WRIT3000  PACK      KEY22,LISTINVN,SP30
          CALL      RSPRDT4                      * position before invoice
WRIT3500  CALL      RKPRDT4                      * read next record
          BRANCH    OVRCD,WRIT8000               * eof - finished
.
          MATCH     LISTINVN,PRDTINVN            * same invoice still ?
          GOTO      WRIT8000 IF NOT EQUAL        * no - finished
.
          COMPARE   ONE,PRDTRTYP                 * item record ?
          GOTO      WRIT3500 IF NOT EQUAL        * no - ignore record
.
.         Get the corresponding prihreff record now that we have the patient
.         indicator
.
          PACK      KEY27,PRDTUNIQ,PRDTPRAC,PRDTDOCT,PRDTCODE
          CALL      RDPRHR1                      * referral record on file ?
          BRANCH    OVRCD,WRIT0500               * no - get next invoice
.
          MOVE      OTECINVN,KEY8
          CALL      RDPRIN1                      * invoice record on file ?
          BRANCH    OVRCD,WRIT0500               * no - get next invoice
.
.         Process the record for the claim
.
WRIT4000  DISPLAY   *P15:24,*V2LON,LISTINVN,SP2,LISTUNIQ;
          ADD       ONE,WRTCT                    * increment records extracted
.
          IF        RECCNT = 1
            CALL      WHDR0000                   * write header details
          ENDIF
.
          CALL      WCLM0000                     * write claim details
.
          CALL      CLRB0000                     * clear sort tempfile
          CALL      LODS0000                     * load sort tempfile
.
.         Process all the service items for the invoice and write
.         the relevant voucher and service segment records
.
WRIT5000  CALL      PITM0000
.
WRIT8000  CALL      WTLR0000                     * write trailer record
.
          CALL      PROC0000                     * update outectaf records
.
.         A claim has been successfully extracted, so write the claim
.         details to the report without any error details
.
          COMPARE   "55",CLNO                    * page full ?
          CALL      HEAD0000 IF NOT LESS         * yes
.
          PACK      ERRMSG,SP70,SP70
          PRINT     *1,PIPE,*3,LISTINVN,*12,PIPE,*14,PURNO,*23,PIPE:
                    *25,DIM9,*35,PIPE,*37,ERRMSG,*132,PIPE
          ADD       ONE,CLNO
.
          GOTO      WRIT0500
.
.         Update batch and move extract file
.
WRIT9000  CALL      UPBT0000
.
          DISPLAY   *P1:20,*EF,"Total records read      : ",*V2LON,RECCNT,*HOFF:
                    *P1:21,"Total records extracted : ",*V2LON,WRTCT,*HOFF:
                    *P1:22,*EF,"Processing Extract file : ",*V2LON,*+,LONGFNAM:
                    *-,TXT,*HOFF:
                    *P1:24,*HOFF,*B,"Extract finished.  ";
          CALL      HITENTER
.
WRIT9999  RETURN
+
.******************************************************************************
.*                                  PROC0000              Called by: WRIT0000 *
.*    Check if re-submission, Update records in outectaf accordingly          *
.******************************************************************************
.
PROC0000  MOVE      SP10,SAVPRVBN
.
          MOVE      SAVBTHN,OTECBATN             * load the batch number
          MOVE      TWO,OTECFLAG                 * update status to "extracted"
          MOVE      LISTAMNT,OTECAMTC            * load claim amount
          CALL      UPOTECT1                     * update record
.
.         Write a record to the claims audit/history table for this claim
.
          MOVE      OTECINVN,OTEAINVN
          CALL      IBACLOCK
          PACK      OTEADATE,CCC,CYY,CMM,CDD
          REP       " 0",OTEADATE
          MOVE      CTIMEIS,OTEATIME
          MOVE      SAVBTHN,OTEABATN
          MOVE      TWO,OTEASTAT
          MOVE      " 0",OTEATYPE
          MOVE      OTIBOPER,OTEAOPER
          MOVE      SP30,OTEATRID
          MOVE      SP10,OTEAEROR
          PACK      OTEAEROT,SP70,SP30
          MOVE      OTECMODL,OTEAMODL
          MOVE      SP70,OTEASPAR
          CALL      WROTECA1
.
.         Check if this claim was the result of a resubmission
.
          MATCH     SP8,OTECPBAT                 * blank previous batch ?
          GOTO      PROC9999 IF EQUAL            * yes - not a resubmission
.
.         Update the next batch number in the original source claim for this
.         resubmission
.
          MOVE      OTECPBAT,SAVPRVBN            * save previous batch number
          PACK      KEY30,OTECHOSP,TEN5,OTECMODL,OTECUNIQ,OTECINVN,SAVPRVBN
          CALL      RDOTECT1
          BRANCH    OVRCD,PROC9999
.
          MOVE      SAVBTHN,OTECNBAT
          CALL      UPOTECT1
.
PROC9999  RETURN
+
.******************************************************************************
.*                                  UPBT0000              Called by: WRIT0000 *
.*        Update batch totals and move extract file to outbound directory     *
.******************************************************************************
.
UPBT0000  MOVE      SAVBTHN,KEY8
          CALL      RDOTIBH1
          IF        OVRCD = 1
            DISPLAY   *P1:24,*EL,*B,"Error updating outibhaf record.  ";
            CALL      HITENTER
            GOTO      UPBT1000
          ENDIF
.
          MOVE      TOTAMTCT,OTIBBHTL            * update batch total
          MOVE      HDRSEG02,OTIBLOCN            * update location
          MOVE      HDRSEG04,OTIBSNID            * update sender id
          CALL      UPOTIBH1
.
.         Move extract file to output path
.
UPBT1000  MOVE      ZERO,HLEF
          CALL      GETSCR00
          STRIP     PTCNEDBO
          CLEAR     CMDLINE
          APPEND    "mv ",CMDLINE
          APPEND    FILENAMB,CMDLINE
          APPEND    TXT,CMDLINE
          APPEND    SP1,CMDLINE
          APPEND    PTCNEDBO,CMDLINE
          APPEND    LONGFNAM,CMDLINE
          APPEND    TXT,CMDLINE
          RESET     CMDLINE
          EXECUTE   CMDLINE,TASKID
.
          CALL      PUTSCR00
.
          MATCH     "0       ",TASKID
          IF        !@EQUAL
            MOVE      "GEN.10-Unable to move extract file",ERRMSG
            ENDSET    ERRMSG
            APPEND    LONGFNAM,ERRMSG
            RESET     ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
          ENDIF
.
UPBT9999  RETURN
+
.*****************************************************************************
.*                                  PREP0000       Called by: WRIT0000       *
.*               Prep extract file and get next batch number                 *
.* Returns: SAVBTHN - saved batch number                                     *
.*****************************************************************************
.
.         Get the next batch number
.
PREP0000  MOVE      "128",PRXCODE                * System Lock Sector 128
          CALL      GETSLK00                     * Get System Lock-Sector 128
.
          READ      CONTROLF,HUND28;*6,PTCNDBBC
          MOVE      PTCNDBBC,DIM8
          RJUSTIFY  DIM8
          MOVE      DIM8,FORM8
.
          COMPARE   "99999999",FORM8
          IF        @EQUAL
            MOVE      ZERO,FORM8                 * Initialise the batch number
          ENDIF
.
          ADD       ONE,FORM8                    * Increment next batch number
          MOVE      FORM8,PTCNDBBC
          WRITAB    CONTROLF,HUND28;*6,PTCNDBBC
.
          CALL      RELSLK00                    * Release System Lock-Sector 128
.
          MOVE      FORM8,SAVBTHN
          MOVE      SAVBTHN,BATCHNUM
          REP       " 0",BATCHNUM
.
.         If multi-hospital is turned on, use the hospital prefix if not
.         blank, otherwise use the default prefix parameter.
.
          COMPARE   ONE,IBCNMHOS                 * using multi-hospital ?
          GOTO      PREP1000 IF NOT EQUAL        * no
.
          MATCH     SP3,HOSPCODE                 * blank hospital code ?
          GOTO      PREP1000 IF EQUAL            * yes - use default parameter
.
          MATCH     SP2,PTHSEDIP                 * blank hospital prefix ?
          GOTO      PREP1000 IF EQUAL            * yes - use default parameter
.
          PACK      LONGFNAM,PTHSEDIP,BATCHNUM   * use hospital specific prefix
          GOTO      PREP2000
.
.         Use default parameter for hospital prefix
.
PREP1000  PACK      LONGFNAM,PTCNEDIH,BATCHNUM
PREP2000  PREP      EXTFILE1,FILENAMB
.
          MOVE      SAVBTHN,OTIBBTHN
          MOVE      ZERO,OTIBBHTL
          MOVE      RECCNT,OTIBTRIB
          CALL      IBACLOCK
          PACK      OTIBDTBC,CCC,CYY,CMM,CDD
          REP       " 0",OTIBDTBC
          MOVE      CTIMEIS,OTIBTMBC
.
          MOVE      SP10,OTIBOPER
          PACK      KEY14,PASSCODE,SP20
          CALL      RSWBSE3
          CALL      RKWBSE3
          IF        OVRCD = 0
            MATCH     PASSCODE,WBSEPCD
            IF        @EQUAL
              MOVE      WBSEUID,OTIBOPER
            ENDIF
          ENDIF
.
          PACK      OTIBEFNM,LONGFNAM,SP20
          MOVE      SP70,OTIBSPAR
          CALL      WROTIBH1
.
PREP9999  RETURN
+
.******************************************************************************
.*                                  TAIL0000              Called by: MAIN0000 *
.*                              Print Report Tail                             *
.******************************************************************************
.
TAIL0000  CALL      UND132
.
          PRINT     *N,*1,"Total Records Read      : ",RECCNT:
                    *N,*1,"Total Number of Errors  : ",ERRCT:
                    *N,*N,*1,"Total Records Extracted : ",WRTCT
.
          IF        WRTCT =0
            PRINT     *N,*1,"No Extract file created"
            GOTO      TAIL2000
          ENDIF
          BRANCH    VALDFLG,TAIL9000
.
TAIL1000  PRINT     *N,*1,"Extract filename created : ",*+,LONGFNAM,*-,TXT
.
TAIL2000  PRINT     *N,"*** End of Report ***"
.
TAIL9000  MOVE      ZERO,EXIT
.
TAIL9999  RETURN
+
.*****************************************************************************
.*                             CTMP0000            Called by: MAIN0000       *
.*                      Create temporary files                               *
.*****************************************************************************
.
CTMP0000  CALL      TFILENAM                     * Generate temporary file names
          MOVE      TFILNAME,TEMPFILA
.
          CALL      TFILENAM
          MOVE      TFILNAME,TEMPFILB
.
          CALL      KILL0000
.
.         Create and open temp file 1
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ISBUILD,TEMPFILA,UKEYA
          EXECUTE   CMDLINE,TASKID
          OPEN      LSTTEMP1,TEMPFILA
.
.         Create and open temp file 2
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ISBUILD,TEMPFILB,UKEYB
          EXECUTE   CMDLINE,TASKID
          OPEN      SRTTEMP2,TEMPFILB
.
CTMP9999  RETURN
+
.*****************************************************************************
.*                             KILL0000             Called by: MAIN0000      *
.*                   erase temporary file                      CREA0000      *
.*****************************************************************************
.
.         Remove temp file 1
.
KILL0000  CLOSE     LSTTEMP1                     * close file
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ERASE,TEMPFILA       * set file erase command
          EXECUTE   CMDLINE,TASKID               * erase temp file
.
          CLOSE     SRTTEMP2                     * close file
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ERASE,TEMPFILB       * set file erase command
          EXECUTE   CMDLINE,TASKID               * erase temp file
.
KILL9999  RETURN
+
.*****************************************************************************
.*                             CLER0000            Called by: MAIN0000       *
.*               Clear all temporary table records for invoice listing       *
.*****************************************************************************
.
.         Clear temp file 1
.
CLER0000  MOVE      SP20,KEY16
          CALL      RSTEMP1                      * position at start of file
          CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,CLER9999               * end of file - finished
.
          PACK      KEY16,LISTUNIQ,LISTINVN
          CALL      DETEMP1                      * delete record
          GOTO      CLER0000                     * get next record
.
CLER9999  RETURN
+
.*****************************************************************************
.*                                CLRB0000         Called by: VALD0000       *
.*              Clear records for tempfile 2                  WRIT0000       *
.*****************************************************************************
.
.         Clear temp file 2
.
CLRB0000  MOVE      SP20,KEY14
          CALL      RSTEMP2                      * position at start of file
          CALL      RKTEMP2                      * read next record
          BRANCH    OVRCD,CLRB9999               * end of file - finished
.
          PACK      KEY14,SORTSDAT,SORTTRAN
          CALL      DETEMP2                      * delete record
          GOTO      CLRB0000                     * get next record
.
CLRB9999  RETURN
+
.*****************************************************************************
.*                              RERR0000           Called by: MAIN0000       *
.*             Reset error records back to zero status (Not Sent)            *
.*             just in case there were any problems with a previous          *
.*             batch and the error records were not set back to zero.        *
.*****************************************************************************
.
RERR0000  MOVE      HOSPCODE,SAVEHOSP            * initialise hospital
          MOVE      ZERO,FIRSTREC                * initialise flag
.
          PACK      KEY30,HOSPCODE,SP1,ONE,SP30
RERR0500  CALL      RSOTECT1                     * position in file
          CALL      RKOTECT1                     * read next record
          BRANCH    OVRCD,RERR9999               * eof - finished
.
          BRANCH    FIRSTREC,RERR1000            * not first record
.
          MATCH     SP3,HOSPCODE                 * all hospitals extract ?
          GOTO      RERR0800 IF NOT EQUAL        * no
.
          MOVE      OTECHOSP,SAVEHOSP            * yes-load first hospital code
.
.         If this is the first record when using a blank hospital code,
.         it may have a status of waiting, so we need to
.         reposition on the first error record for the hospital, if
.         one exists
.
          COMPARE   ZERO,OTECFLAG                * waiting record ?
          GOTO      RERR0800 IF NOT EQUAL        * no
.
          PACK      KEY30,SAVEHOSP,SP1,ONE,SP30
          GOTO      RERR0500
.
RERR0800  MOVE      ONE,FIRSTREC                 * set first flag to no
.
RERR1000  MATCH     SP3,HOSPCODE                 * all hospitals extract ?
          GOTO      RERR5000 IF NOT EQUAL        * no
.
.         We are running an extract for all hospitals
.
          MATCH     SAVEHOSP,OTECHOSP            * same hospital still ?
          IF        !@EQUAL
            MOVE      OTECHOSP,SAVEHOSP          * no - save new hospital code
            PACK      KEY30,OTECHOSP,SP1,ONE,SP30
            GOTO      RERR0500
          ENDIF
.
          COMPARE   ONE,OTECFLAG                 * error record still ?
          GOTO      RERR4000 IF NOT EQUAL        * no - get next hospital
.
          GOTO      RERR8000
.
RERR4000  PACK      KEY30,OTECHOSP,TILDA40
          GOTO      RERR0500
.
.         We are running an extract for a given hospital id
.
RERR5000  MATCH     HOSPCODE,OTECHOSP            * same hospital still ?
          GOTO      RERR9999 IF NOT EQUAL        * no - finished
.
          COMPARE   ONE,OTECFLAG                 * error record still ?
          GOTO      RERR9999 IF NOT EQUAL        * no - finished
.
.         Reset the record status to "Waiting"
.
RERR8000  PACK      SAVKEY30,OTECHOSP,OTECFLAG,OTECMODL,OTECUNIQ,OTECINVN:
                             OTECBATN
          MOVE      ZERO,OTECFLAG                * yes - reset flag to "0"
          CALL      UPOTECT1                     * update record
          MOVE      SAVKEY30,KEY30               * load key to reposition
          GOTO      RERR0500                     * get next record
.
RERR9999  RETURN
+
.*****************************************************************************
.*                             LOAD0000               Called by: MAIN0000    *
.*        Load all invoice records waiting to be extracted                   *
.*****************************************************************************
.
LOAD0000  MATCH     "IBARSH",PGM                 * using web front-end ?
          IF        @EQUAL
            CALL      WLOD0000                   * yes - load list array
            GOTO      LOAD9999
          ENDIF
.
.         Program is running from the character system
.
          PACK      KEY30,HOSPCODE,SP1,ZERO,SP30
LOAD0400  CALL      RSOTECT1                     * position in file
LOAD0500  CALL      RKOTECT1                     * read next record
          BRANCH    OVRCD,LOAD9999               * end of file
.
          MATCH     SP3,HOSPCODE                 * all hospitals ?
          IF        !@EQUAL
            MATCH     HOSPCODE,OTECHOSP          * no - same hospital still ?
            GOTO      LOAD9999 IF NOT EQUAL      * no - finished
          ENDIF
.
          COMPARE   ZERO,OTECFLAG                * waiting for extract still ?
          IF        !@EQUAL
            PACK      KEY30,OTECHOSP,TILDA40
            GOTO      LOAD0400                   * get next record
          ENDIF
.
.         A waiting record has been found, so get the invoice details
.         and calculate the amount outstanding.
.>>>>>>   ED records are currently out of scope for the first stage, so
.         ignore these records.  The ED related code has been left in, but
.         will need to be checked when coding ED handling.
.
          MOVE      OTECMODL,FORM1
          BRANCH    FORM1,LOAD0500:              * ED
                          LOAD2200:              * PRI
                          LOAD2100               * O/P
.
.         ED or OP Claim
.
LOAD2100  MOVE      OTECINVN,KEY8
          CALL      RDINV1                       * ED invoice on file ?
          IF        OVRCD = 1
            MATCH     "1",OTECMODL
            IF        @EQUAL
              MOVE      "GEN.5-Emergency invoice ",ERRMSG
            ELSE
              MOVE      "GEN.5-Outpatient invoice ",ERRMSG
            ENDIF
            ENDSET    ERRMSG
            SQUEEZE   KEY8
            APPEND    KEY8,ERRMSG
            APPEND    " not on file",ERRMSG
            RESET     ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      LOAD0500
          ENDIF
.
.         Make sure the invoice is not fully credited
.
          MATCH     "1",PTINCRST                 * ED fully credited ?
          GOTO      LOAD9000 IF EQUAL            * yes - delete record
.
.         Calculate the oustanding amount for the invoice
.
          ASSIGN    (PINVAMT+PINVPATA+PINVHFDA+PINVOTHA+PINVJOUR+PINVREB),FORM12P2
          IF        IBCNUGST=2
            ADD       PTINGSTJ,FORM12P2
          ENDIF
.
.         Ignore zero balance invoices
.
          COMPARE   ZERO,FORM12P2                * zero balance invoice ?
          GOTO      LOAD9000 IF EQUAL            * yes - delete record
.
          MATCH     "3",OTECMODL                 * OP claim ?
          GOTO      LOAD2300 IF EQUAL            * yes
.
.         Get the ED visit details
.>>>>>    Left the below ED code here to be implemented at a later date.
.
.         MOVE      OTECUNIQ,KEY8
.         CALL      RDEMVIS1
.         IF        OVRCD = 1
.           MOVE      "GEN.15-Emergency visit not on file",ERRMSG
.           MOVE      SP9,DIM9
.           CALL      PERR0000
.           GOTO      LOAD0500
.         ENDIF
.
          GOTO      LOAD3000
.
.         PRI Claim
.
LOAD2200  MOVE      OTECINVN,KEY8
          CALL      RDPRIN1                      * PRI invoice on file ?
          IF        OVRCD = 1
            MOVE      "GEN.6-Private Practice invoice ",ERRMSG
            ENDSET    ERRMSG
            SQUEEZE   KEY8
            APPEND    KEY8,ERRMSG
            MOVE      " not on file",ERRMSG
            RESET     ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      LOAD0500
          ENDIF
.
.         Make sure the invoice is not fully credited
.
          MATCH     "1",PRINCNST                 * PRI fully credited ?
          GOTO      LOAD9000 IF EQUAL            * yes - delete record
.
.         Calculate the oustanding amount for the invoice
.
          ASSIGN    (PRINITOT+PRINPAMT+PRINHAMT+PRINIAMT+PRINMAMT+PRINVAMT+PRINOTHA+PRINJAMT+PRINCNTT),FORM12P2
          IF        IBCNUGST=2
            ADD       PRINGSTJ,FORM12P2
          ENDIF
.
.         Ignore zero balance invoices
.
          COMPARE   ZERO,FORM12P2                * zero balance invoice ?
          GOTO      LOAD9000 IF EQUAL            * yes - delete record
.
.         Get the PRI referral details
.
          MOVE      OTECUNIQ,KEY8              * yes
          CALL      RDPRHD2                    * header record on file ?
          IF        OVRCD = 1
            MOVE      "GEN.16-Private Practice referral not on file",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      LOAD0500
          ENDIF
.
          GOTO      LOAD3000
.
.         OP Claim
.
LOAD2300  MOVE      OTECUNIQ,KEY8
          CALL      RDVISA1                      * visit record on file ?
          IF        OVRCD = 1
            MOVE      "GEN.24-Visit record not on file",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      LOAD0500
          ENDIF
.
.         Get the OP visit details (outbokaf & outbb1af)
.
          MOVE      PINVSITE,KEY6
          CALL      RDSITA1
          IF        OVRCD = 1
            MOVE      "GEN.25-OP Site not on file",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      LOAD0500
          ENDIF
.
          CLOSE     OUTBOKA6
          PACK      FILENAME,OSTFILE,FILBOKA6
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTBOKA6,FILENAME
          TRAPCLR   IO
          IF        OVRCD = 1
            MOVE      "GEN.26-Open failed on outbokaf",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      LOAD0500
          ENDIF
.
          CLOSE     OUTBB1A1
          PACK      FILENAME,OSTFILE,FILBB1A1
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTBB1A1,FILENAME
          TRAPCLR   IO
          IF        OVRCD = 1
            MOVE      "GEN.27-Open failed on outbb1af",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      LOAD0500
          ENDIF
.
          CLOSE     OUTSESA1
          PACK      FILENAME,OSTFILE,FILSESA1
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTSESA1,FILENAME
          TRAPCLR   IO
          IF        OVRCD = 1
            MOVE      "GEN.33-Open failed on outsesaf",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      LOAD0500
          ENDIF
.
          CLOSE     OUTHEDA1
          PACK      FILENAME,OSTFILE,FILHEDA1
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OUTHEDA1,FILENAME
          TRAPCLR   IO
          IF        OVRCD = 1
            MOVE      "GEN.34-Open failed on outhedaf",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      LOAD0500
          ENDIF
.
          PACK      KEY36,OTECUNIQ,PVIDATE,SP70
          CALL      RDSBOKA6                     * pos'n before visit/date
LOAD2400  CALL      RDKBOKA6                     * read next record
          BRANCH    OVRCD,LOAD2500               * eof - error
.
          MOVE      OTECUNIQ,DIM8VISN
          MATCH     DIM8VISN,OBAOUTNO            * same visit still ?
          GOTO      LOAD2500 IF NOT EQUAL        * no - error
.
          MATCH     PVIDATE,OBADATE              * same date still ?
          GOTO      LOAD2500 IF NOT EQUAL        * no - error
.
          MATCH     PVISITE,OBASITE              * same site ?
          GOTO      LOAD2400 IF NOT EQUAL        * no - get next record
.
          MATCH     PVIDOCT,OBACLIN              * same clinic ?
          GOTO      LOAD2400 IF NOT EQUAL        * no - get next record
.
          GOTO      LOAD2600
.
LOAD2500  MOVE      "GEN.28-outbokaf visit record not found",ERRMSG
          MOVE      SP9,DIM9
          CALL      PERR0000
          GOTO      LOAD0500
.
LOAD2600  MOVE      OTECUNIQ,KEY8
          CALL      RDBOKB1                      * record on file ?
          IF        OVRCD = 1
            MOVE      "GEN.29-outbb1af visit record not found",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      LOAD0500
          ENDIF
.
          PACK      KEY25,OBASITE,OBACLIN,OBADATE,OBASTRT,SP70
          CALL      RDSESA1
          IF        OVRCD = 1
            MOVE      "GEN.35-outsesaf visit record not found",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      LOAD0500
          ENDIF 
.
          PACK      KEY28,OSESITE,OSECLIN,OSEDAY,OSESTRT,OSESSHNO,OSESSDAT,SP70
          CALL      RDOTHED1
          IF        OVRCD = 1
            MOVE      "GEN.36-outhedaf visit record not found",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      LOAD0500
          ENDIF
.
.         There is an amount outstanding for the invoice, so write
.         the details away to the temp file
.
LOAD3000  MOVE      OTECUNIQ,LISTUNIQ
          MOVE      OTECINVN,LISTINVN
          MOVE      OTECURNO,LISTURNO
          MATCH     "2",OTECMODL
          IF        @EQUAL
            MOVE      PRINDATE,LISTDATE
          ELSE
            MOVE      PINVDTE,LISTDATE
          ENDIF
          MOVE      FORM12P2,LISTAMNT
          MOVE      ZERO,LISTFLAG
          MOVE      OTECHOSP,LISTHOSP
          MOVE      OTECMODL,LISTRTYP
          MOVE      ZERO,LISTIHOS
          PACK      LISTOKEY,OBAOUTNO,OBADATE,OBASTRT,OBASLOT,OBASITE,OBACLIN
          CALL      WRTEMP1                      * write temp file record
.
          GOTO      LOAD0500                     * get next record
.
.         The current record is not going to be extracted, so delete it
.         and reposition in outectaf
.
LOAD9000  PACK      SAVKEY30,OTECHOSP,OTECFLAG,OTECMODL,OTECUNIQ,OTECINVN:
                             OTECBATN
          MOVE      SAVKEY30,KEY30
          CALL      DEOTECT1                 * delete cancelled/zero invoices
          MOVE      SAVKEY30,KEY30
          CALL      RSOTECT1
          GOTO      LOAD0500
.
LOAD9999  RETURN
+
.*****************************************************************************
.*                             WLOD0000               Called by: LOAD0000    *
.*      The extract is being run from the web front-end, so load the passed  *
.*      array variables into the tempfile.                                   *
.* Requires: an array occurrence for each claim to be extracted.  The array  *
.*           has the following format:                                       *
.*                    Hospital Id      - char(3)                             *
.*                    Unique Id        - char(8)  right justified            *
.*                    Invoice Number   - char(8)  right justified            *
.*                    U/R Number       - char(8)  right justified            *
.*                    Invoice Date     - char(8)  ccyymmdd                   *
.*                    Outstanding Invoice Amount - char(15)                  *
.*****************************************************************************
.
.         Clear list array
.
.>>>>>>   Need to change after consult with Peter V
.         Check if all variables need to be loaded
.
WLOD0000  MOVE      ZERO,LSTCOUNT
          WHILE     LSTCOUNT < 50
            ADD       ONE,LSTCOUNT
            PACK      LISTARRY[LSTCOUNT],SP70,SP20
          DO
.
.         Receive list array input from web front-end via keyin until
.         a blank record is received (end of array) or limit is reached
.
          MOVE      ZERO,LSTCOUNT
          WHILE     LSTCOUNT < 50
            ADD       ONE,LSTCOUNT
            KEYIN     LISTARRY[LSTCOUNT]
            PACK      LISTARRY[LSTCOUNT],LISTARRY[LSTCOUNT],SP70,SP20
            MATCH     SP90,LISTARRY[LSTCOUNT]    * last array record ?
            GOTO      WLOD1000 IF EQUAL          * yes
          DO
.
          ADD       ONE,LSTCOUNT            * only if array limit reached
.
.         Write each array record to the temp file
.
WLOD1000  WHILE     LSTCOUNT > 1
            SUB       ONE,LSTCOUNT
            UNPACK    LISTARRY[LSTCOUNT],LISTHOSP,LISTUNIQ,LISTINVN,LISTURNO:
                                         LISTDATE,DIM15,DIM2A,DIM2B,LISTOKEY
            MOVE      ZERO,LISTFLAG
            MOVE      DIM15,LISTAMNT
            PACK      DIM2A,DIM2A,SP70
            RJUSTIFY  DIM2A
            MOVE      DIM2A,LISTRTYP
            PACK      DIM2B,DIM2B,SP70
            RJUSTIFY  DIM2B
            MOVE      DIM2B,LISTFLAG
            CALL      WRTEMP1
          DO
.
WLOD9999  RETURN
+
.*****************************************************************************
.*                             DCLM0000               Called by: MAIN0000    *
.*               Display records waiting for extraction                      *
.* Returns:  EXIT  0 = Process claim extract                                 *
.*                 1 = Cancel selected                                       *
.*****************************************************************************
.
DCLM0000  DISPLAY   *P54:5,*V2LON,"Outstanding":
                    *P1:6,*EF,*ULON,"Item",*P6:6,"Invoice ",*P15:6,"Type":
                    *P20:6,"Uniq. Id",*P29:6,"U/R No. ",*P38:6,"Invoice Date":
                    *P51:6," Invoice Amount ",*P68:6,"Extract"
.
          MATCH     SP3,HOSPCODE
          IF        !@EQUAL
            DISPLAY   *P76:6,*V2LON,*ULON,"Hosp"
          ENDIF
.
          MOVE      ONE,CPAGENO
          MOVE      SIX,CVERT                    * Reset line number
          MOVE      ZERO,FIELD                   * Reset record count
.
          MOVE      SP20,KEY16
          CALL      RSTEMP1                      * position in file
DCLM1000  CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,DCLM5000               * end of file
.
          ADD       ONE,CVERT                    * increment line count
.
          COMPARE   TWENTY3,CVERT                * page full ?
          GOTO      DCLM4000 IF NOT LESS         * yes
.
DCLM3000  ADD       ONE,FIELD                    * increment field count
.
          MATCH     SP8,LISTDATE                 * invoice date blank ?
          IF        @EQUAL
            MOVE      "Invoice   ",CPCDATE
            MOVE      "  not found",DIM15
          ELSE
            UNPACK    LISTDATE,CCENT,CYEAR,CMON,CDAY
            CALL      PACDATE
            MOVE      LISTAMNT,DIM15
          ENDIF
.
.         Only display extract flag if record is NOT set for extraction
.
          MOVE      DYES,FLAGDIM3
          LOAD      FLAGDIM3,LISTFLAG,DNO
          PACK      FLAGDIM3,FLAGDIM3,SP1
          IF        LISTRTYP = 1
            MOVE      "EMR ",DIM4
          ELSE
            IF        LISTRTYP = 2
              MOVE      "PRI ",DIM4
            ELSE
              MOVE      "OUT ",DIM4
            ENDIF
          ENDIF
.
          IF        LISTFLAG = 1
            DISPLAY   *P1:CVERT,*V2LON,*HON,FIELD,SP3:
                      LISTINVN,SP1,DIM4,SP1,LISTUNIQ,SP1,LISTURNO,SP2:
                      CPCDATE,SP3,DIM15,SP3,FLAGDIM3,SP4
            MATCH     SP3,HOSPCODE
            IF        !@EQUAL
              DISPLAY   *P76:CVERT,*HON,LISTHOSP,SP1
            ENDIF
          ELSE
            DISPLAY   *P1:CVERT,*V2LON,FIELD,*HOFF,*P6:CVERT,LISTINVN:
                      *P15:CVERT,DIM4,*P20:CVERT,LISTUNIQ:
                      *P29:CVERT,LISTURNO,*P39:CVERT,CPCDATE,*P52:CVERT,DIM15:
                      *P70:CVERT,FLAGDIM3
            MATCH     SP3,HOSPCODE
            IF        !@EQUAL
              DISPLAY   *P76:CVERT,LISTHOSP
            ENDIF
          ENDIF
          PACK      TMPKEY[FIELD],LISTUNIQ,LISTINVN
          GOTO      DCLM1000
.
.         new page needed
.
DCLM4000  BRANCH    CPAGENO,DCLM4500
.
.         in middle pages : Next & First options
.
DCLM4100  MOVE      "1",CALLPOSN                 * set call position
          CALL      KEYC0000                     * keyin response
          BRANCH    EXIT,DCLM9999:               * exit
                         DCLM7000:               * next
                         DCLM8000:               * previous
                         DCLM6000:               * swap extract flag
                         DCLM6500:               * include all
                         DCLM6600                * exclude all
          GOTO      DCLM9000                     * post
.
.         on first page : Next option
.
DCLM4500  MOVE      "2",CALLPOSN                 * set call position
          CALL      KEYC0000                     * keyin response
          BRANCH    EXIT,DCLM9999:               * exit
                         DCLM7000:               * next
                         DCLM5900:               * previous
                         DCLM6000:               * swap extract flag
                         DCLM6500:               * include all
                         DCLM6600                * exclude all
          GOTO      DCLM9000                     * post
.
.         end of data
.
DCLM5000  BRANCH    CPAGENO,DCLM5500
.
.         in middle pages : First option
.
DCLM5100  MOVE      "3",CALLPOSN                 * set call position
          CALL      KEYC0000                     * keyin response
          BRANCH    EXIT,DCLM9999:               * exit
                         DCLM5900:               * next
                         DCLM8000:               * prev
                         DCLM6000:               * swap extract flag
                         DCLM6500:               * include all
                         DCLM6600                * exclude all
          GOTO      DCLM9000                     * post
.
.         on first page : No options
.
DCLM5500  MOVE      "4",CALLPOSN                 * set call position
          CALL      KEYC0000                     * keyin response
          BRANCH    EXIT,DCLM9999:               * exit
                         DCLM5900:               * next
                         DCLM5900:               * previous
                         DCLM6000:               * swap extract flag
                         DCLM6500:               * include all
                         DCLM6600                * exclude all
          GOTO      DCLM9000                     * post
.
DCLM5900  BEEP
DCLM5910  BRANCH    CALLPOSN,DCLM4100,DCLM4500,DCLM5100,DCLM5500
.
.         A valid selection has been made so swap the extract flag value
.
DCLM6000  MOVE      TMPKEY[FORM2],KEY16
          CALL      RDTEMP1
          BRANCH    OVRCD,DCLM0000
.
          IF        LISTFLAG = 0
            MOVE      ONE,LISTFLAG
          ELSE
            MOVE      ZERO,LISTFLAG
          ENDIF
          CALL      UPTEMP1
.
.         Now redisplay the current screen again
.
          MOVE      TMPKEY[1],KEY16
          CALL      RDTEMP1
          BRANCH    OVRCD,DCLM0000
.
          MOVE      SEVEN,CVERT
          DISPLAY   *P1:CVERT,*EF
          MOVE      ZERO,FIELD
          GOTO      DCLM3000
.
.         Set all records for extract
.
DCLM6500  MOVE      ZERO,INCLFLAG
          GOTO      DCLM6700
.
.         Set all records to be excluded from extract
.
DCLM6600  MOVE      ONE,INCLFLAG
DCLM6700  COMPARE   ZERO,FIELD                   * any records displayed ?
          GOTO      DCLM0000 IF EQUAL            * no - finished
.
          CALL      RSET0000
          MOVE      TMPKEY[1],KEY16
          CALL      RDTEMP1                      * reread first record on screen
          BRANCH    OVRCD,DCLM0000
.
          MOVE      SEVEN,CVERT
          DISPLAY   *P1:CVERT,*EF
          MOVE      ZERO,FIELD
          GOTO      DCLM3000                     * redisplay list
.
.         next screen selected
.
DCLM7000  MOVE      SEVEN,CVERT
          ADD       ONE,CPAGENO
          DISPLAY   *P1:CVERT,*EF
          MOVE      ZERO,FIELD
          GOTO      DCLM3000
.
.         previous screen selected
.
DCLM8000  MOVE      TMPKEY[1],KEY16
          CALL      RDTEMP1                      * reread first record on screen
          MOVE      ZERO,FORM2                   * initialise count
          WHILE     FORM2 <= 15
            CALL      RPTEMP1                    * read previous record
            BRANCH    OVRCD,DCLM0000             * start of file
.
            ADD       ONE,FORM2                  * increment count
          DO
.
          MOVE      SEVEN,CVERT                  * reset line position
          SUB       ONE,CPAGENO                  * decrement page number
          MOVE      ZERO,FIELD                   * reset record counter
          DISPLAY   *P1:CVERT,*EF
          GOTO      DCLM3000
.
DCLM9000  MOVE      ZERO,CPAGENO                 * initialise print variables
          MOVE      ZERO,CNOUNDLN
          CALL      IBACLOCK                     * get current date/time
          PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
.
          MOVE      ZERO,EXIT
          GOTO      DCLM9999
.
DCLM9100  MOVE      ONE,EXIT
.
DCLM9999  RETURN
+
.*****************************************************************************
.*                             RSET0000            Called by: DCLM0000       *
.*   Reset all records for either inclusion or exclusion as required         *
.* Requires: INCLFLAG  0 = set all records for inclusion in extract          *
.*                     1 = set all records for exclusion from extract        *
.*****************************************************************************
.
RSET0000  MOVE      SP20,KEY16
          CALL      RSTEMP1                      * position at start of file
RSET0500  CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,RSET9999               * end of file - finished
.
          MOVE      INCLFLAG,LISTFLAG            * set inclusion flag
          CALL      UPTEMP1                      * update record
          GOTO      RSET0500                     * get next record
.
RSET9999  RETURN
+
.*****************************************************************************
.*                  KEYC0000                    Called by : DCLM0000         *
.*        Keyin response to prompt                                           *
.*        Returns : EXIT = 0      Post entered                               *
.*                  EXIT = 1      Exit entered                               *
.*                  EXIT = 2      Next entered                               *
.*                  EXIT = 3      Prev entered                               *
.*                  EXIT = 4      Extract flag swapped                       *
.*                  EXIT = 5      Include All                                *
.*                  EXIT = 6      Exclude All                                *
.*****************************************************************************
.
KEYC0000  DISPLAY   *P1:24,*EL,"Select Item, (",*V2LON,ANSI,*HOFF:
                    ")nclude all, e(",*V2LON,ANSX,*HOFF,")clude all, (":
                    *V2LON,ANSP,*HOFF,")ost, (",*V2LON,ANSC,*HOFF,")ancel";
          MOVE      FIFTY8,CCOL
          IF        CALLPOSN = 1 | CALLPOSN = 2
            DISPLAY   ", (",*V2LON,ANSN,*HOFF,")ext";
            ADD       EIGHT,CCOL
          ENDIF
          IF        CALLPOSN = 1 | CALLPOSN = 3
            DISPLAY   ", p(",*V2LON,ANSR,*HOFF,")ev.";
            ADD       NINE,CCOL
          ENDIF
.
          DISPLAY   " :  ";
          ADD       FOUR,CCOL
.
KEYC1000  KEYIN     *PCCOL:24,*V2LON,*JR,DIM2:
                    *PCCOL:24,*DV,DIM2
          PACK      DIM2,DIM2,SP2
          UNPACK    DIM2,ANS,ANS
          REP       UPPLOW,ANS
.
          MATCH     ANSC,ANS                * cancel selected ?
          GOTO      KEYC9100 IF EQUAL       * yes
.
          MATCH     ANSN,ANS                * next page selected ?
          GOTO      KEYC9200 IF EQUAL       * yes
.
          MATCH     ANSR,ANS                * previous page selected ?
          GOTO      KEYC9300 IF EQUAL       * yes
.
          MATCH     ANSP,ANS                * post selected ?
          GOTO      KEYC9000 IF EQUAL       * yes
.
          MATCH     ANSI,ANS                * include all selected ?
          GOTO      KEYC9500 IF EQUAL       * yes
.
          MATCH     ANSX,ANS                * exclude all selected ?
          GOTO      KEYC9600 IF EQUAL       * yes
.
          TYPE      DIM2
          GOTO      KEYC5000 IF EQUAL       * a number entered
.
KEYC1500  BEEP
          GOTO      KEYC1000
.
.         number entered directly
.
KEYC5000  MOVE      DIM2,FORM2
.
          COMPARE   FORM2,ZERO              * number < 1 ?
          GOTO      KEYC1500 IF NOT LESS    * yes - invalid
.
          COMPARE   FORM2,FIELD             * number in range ?
          GOTO      KEYC1500 IF LESS        * no - too high
.
          GOTO      KEYC9400
.
KEYC9000  MOVE      ZERO,EXIT               * post
          GOTO      KEYC9999
.
KEYC9100  MOVE      ONE,EXIT                * exit
          GOTO      KEYC9999
.
KEYC9200  MOVE      TWO,EXIT                * next
          GOTO      KEYC9999
.
KEYC9300  MOVE      THREE,EXIT              * previous
          GOTO      KEYC9999
.
KEYC9400  MOVE      FOUR,EXIT               * swap extract flag
          GOTO      KEYC9999
.
KEYC9500  MOVE      FIVE,EXIT               * include all
          GOTO      KEYC9999
.
KEYC9600  MOVE      SIX,EXIT                * exclude all
          GOTO      KEYC9999
.
KEYC9999  RETURN
+
.******************************************************************************
.*                             WHDR0000            Called by: WRIT0000        *
.*                  Write the Header segment                  VALD0000        *
.******************************************************************************
.
WHDR0000  MOVE      SAVBTHN,HDRSEG01             * load batch number
          REP       " 0",HDRSEG01
.
.         Load the Location ID.
.         If multi-hospital is turned on, use the hospital location if not
.         blank, otherwise use the default location parameter.
.
          COMPARE   ONE,IBCNMHOS                 * using multi-hospital ?
          GOTO      WHDR1000 IF NOT EQUAL        * no
.
          MATCH     SP3,LISTHOSP                 * blank hospital ?
          GOTO      WHDR1000 IF EQUAL            * yes - default to parameter
.
          MOVE      LISTHOSP,KEY3
          CALL      RDPTHSP1                     * hospital on file ?
          BRANCH    OVRCD,WHDR1000               * no - default to parameter
.
          MATCH     SP8,PTHSLOCN                 * blank location for hosp. ?
          GOTO      WHDR1000 IF EQUAL            * yes - default to parameter
.
          MOVE      PTHSLOCN,HDRSEG02            * set location id
          GOTO      WHDR2000
.
.         Use the default location parameter
.
WHDR1000  MATCH     SP8,PTCNCLID
          IF        @EQUAL
            MOVE      "HDR.2.1-Current Location not set up",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
          ELSE
            MOVE      PTCNCLID,HDRSEG02          * set location id
          ENDIF
.
.         Get the certificate that covers today
.
WHDR2000  PACK      KEY16,HDRSEG02,CURRDATE
          CALL      RDPTCTI1                     * record found for today ?
          COMPARE   ZERO,OVRCD
          GOTO      WHDR9000 IF EQUAL            * yes - use this certificate id
.
          CALL      RPPTCTI1                     * no - read previous record
          IF        OVRCD = 0
            MATCH     CURRDATE,PTCITDTE          * within date range ?
            GOTO      WHDR9000 IF NOT LESS       * yes - use this certificate id
          ENDIF
.
          MOVE      "HDR.3.1-Current Certificate not available",ERRMSG
          MOVE      SP9,DIM9
          CALL      PERR0000
.
WHDR9000  MATCH     SP10,PTCIIDEN
          IF        @EQUAL
            MOVE      "HDR.3.2-Certificate Identifier blank",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
          ELSE
            MOVE      PTCIIDEN,HDRSEG03          * load certificate identifier
          ENDIF
.
          MATCH     SP70,PTCISNID
          IF        @EQUAL
            MOVE      "HDR.4.1-Sender Id blank",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
          ELSE
            MOVE      PTCISNID,HDRSEG04          * load sender id
          ENDIF
.
.         Load the Test/Production flag for the claim based on the parameter
.
          MOVE      PTCNUTPB,HDRSEG05
.
          BRANCH    VALDFLG,WHDR9999             * validation only
.
          WRITE     EXTFILE1,SEQ;TILDA01,ANSH,ANSD,ANSR:
                                 HDRSEG01,HDRSEG02,HDRSEG03,HDRSEG04,HDRSEG05
.
WHDR9999  RETURN
+
.******************************************************************************
.*                                  WCLM0000              Called by: VALD0000 *
.*                            Write Claim Details                  & WRIT0000 *
.******************************************************************************
.
WCLM0000  MOVE      SP70,CLMSEG01
          MOVE      SP70,CLMSEG02
          MOVE      SP70,CLMSEG03
          MOVE      SP70,CLMSEG04
          MOVE      SP70,CLMSEG05
          MOVE      SP70,CLMSEG06
.
          MOVE      SP8,SAVERDAT
.
.         Load AuthorisationDate (CLMSEG01)
.         Not required/applicable to webPAS.
.
.         Load PmsClaimId (CLMSEG02)
.
.         This field doesn't need to be populated for validation, only for
.         writing the extract file.
.         Get the current PmsClaimId number from the parameter.
.
          BRANCH    VALDFLG,WCLM2000             * validation only
.
          MOVE      "128",PRXCODE                * System Lock Sector 128
          CALL      GETSLK00                     * Get System Lock-Sector 128
.
          READ      CONTROLF,HUND28;*1,PTCNDBBN
          UNPACK    PTCNDBBN,ANS,DIM4
.
.         Check if this parameter has never been set (first character will
.         be "0" or space).
.
          REP       " 0",ANS
          REP       " 0",DIM4
          MATCH     "0",ANS
          IF        @EQUAL
            MATCH     "0000",DIM4
            IF        @EQUAL
              MOVE      ANSA,ANS
              MOVE      ZERO,FORM4
              GOTO      WCLM1000
            ENDIF
          ENDIF
.
.         The parameter already has a value, so check the value
.
          RJUSTIFY  DIM4
          MOVE      DIM4,FORM4
.
          COMPARE   "9999",FORM4                 * less than 9999 ?
          GOTO      WCLM1000 IF LESS             * yes - increment number
.
.         The batch number is "9999", so reset back to "0001" and increment
.         the alpha prefix.
.
          MOVE      ZERO,FORM4                   * initialise the batch number
.
          MATCH     ANSA,ANS
          IF        @EQUAL
            MOVE      ANSB,ANS
            GOTO      WCLM1000
          ENDIF
.
          MATCH     ANSB,ANS
          IF        @EQUAL
            MOVE      ANSC,ANS
            GOTO      WCLM1000
          ENDIF
.
          MATCH     ANSC,ANS
          IF        @EQUAL
            MOVE      ANSD,ANS
            GOTO      WCLM1000
          ENDIF
.
          MATCH     ANSD,ANS
          IF        @EQUAL
            MOVE      ANSE,ANS
            GOTO      WCLM1000
          ENDIF
.
          MATCH     ANSE,ANS
          IF        @EQUAL
            MOVE      ANSF,ANS
            GOTO      WCLM1000
          ENDIF
.
          MATCH     ANSF,ANS
          IF        @EQUAL
            MOVE      ANSG,ANS
            GOTO      WCLM1000
          ENDIF
.
          MATCH     ANSG,ANS
          IF        @EQUAL
            MOVE      ANSH,ANS
            GOTO      WCLM1000
          ENDIF
.
          MATCH     ANSH,ANS
          IF        @EQUAL
            MOVE      ANSI,ANS
            GOTO      WCLM1000
          ENDIF
.
          MATCH     ANSI,ANS
          IF        @EQUAL
            MOVE      ANSJ,ANS
            GOTO      WCLM1000
          ENDIF
.
          MATCH     ANSJ,ANS
          IF        @EQUAL
            MOVE      ANSK,ANS
            GOTO      WCLM1000
          ENDIF
.
          MATCH     ANSK,ANS
          IF        @EQUAL
            MOVE      ANSL,ANS
            GOTO      WCLM1000
          ENDIF
.
          MATCH     ANSL,ANS
          IF        @EQUAL
            MOVE      ANSM,ANS
            GOTO      WCLM1000
          ENDIF
.
          MATCH     ANSM,ANS
          IF        @EQUAL
            MOVE      ANSN,ANS
            GOTO      WCLM1000
          ENDIF
.
          MATCH     ANSN,ANS
          IF        @EQUAL
            MOVE      ANSO,ANS
            GOTO      WCLM1000
          ENDIF
.
          MATCH     ANSO,ANS
          IF        @EQUAL
            MOVE      ANSP,ANS
            GOTO      WCLM1000
          ENDIF
.
          MATCH     ANSP,ANS
          IF        @EQUAL
            MOVE      ANSQ,ANS
            GOTO      WCLM1000
          ENDIF
.
          MATCH     ANSQ,ANS
          IF        @EQUAL
            MOVE      ANSR,ANS
            GOTO      WCLM1000
          ENDIF
.
          MATCH     ANSR,ANS
          IF        @EQUAL
            MOVE      ANSS,ANS
            GOTO      WCLM1000
          ENDIF
.
          MATCH     ANSS,ANS
          IF        @EQUAL
            MOVE      ANST,ANS
            GOTO      WCLM1000
          ENDIF
.
          MATCH     ANST,ANS
          IF        @EQUAL
            MOVE      ANSU,ANS
            GOTO      WCLM1000
          ENDIF
.
          MATCH     ANSU,ANS
          IF        @EQUAL
            MOVE      ANSV,ANS
            GOTO      WCLM1000
          ENDIF
.
          MATCH     ANSV,ANS
          IF        @EQUAL
            MOVE      ANSW,ANS
            GOTO      WCLM1000
          ENDIF
.
          MATCH     ANSW,ANS
          IF        @EQUAL
            MOVE      ANSX,ANS
            GOTO      WCLM1000
          ENDIF
.
          MATCH     ANSX,ANS
          IF        @EQUAL
            MOVE      ANSY,ANS
            GOTO      WCLM1000
          ENDIF
.
          MATCH     ANSY,ANS
          IF        @EQUAL
            MOVE      ANSZ,ANS
            GOTO      WCLM1000
          ENDIF
.
.         Note: Glenn has indicated that it's ok to recycle these Id's,
.         hence below code starts from A0001 again, once we hit Z9999.
.
          MATCH     ANSZ,ANS
          IF        @EQUAL
            MOVE      ANSA,ANS
            GOTO      WCLM1000
          ENDIF
.
WCLM1000  ADD       ONE,FORM4                    * increment next batch number
          PACK      PTCNDBBN,ANS,FORM4
          REP       " 0",PTCNDBBN
          WRITAB    CONTROLF,HUND28;*1,PTCNDBBN
          PACK      CLMSEG02,PTCNDBBN,ATSYMBOL
.
          CALL      RELSLK00                    * Release System Lock-Sector 128
.
.         If any of the service items for this invoice were in-hospital,
.         then instead of prefixing with an alpha, use # instead.
.
          IF        LISTIHOS = 1
            UNPACK    CLMSEG02,ANS,DIM5
            PACK      CLMSEG02,HASHSYM,DIM5
          ENDIF
.
.         Load ServicingProviderNum (CLMSEG03)
.
WCLM2000  MATCH     "3",OTECMODL                 * OP ?
          IF        @EQUAL
            MOVE      OTBBADCS,KEY10             * yes
          ELSE
            MOVE      PRHRDOCT,KEY10             * no - PRI
          ENDIF
.
.         Get Doctor Provider Number
.
WCLM3600  MATCH     SP10,KEY10                   * blank attending dr. code ?
          IF        @EQUAL
            MOVE      "CLM.3.2-Doctor code not populated",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WCLM4000
          ENDIF
.
          CALL      RDPMHCP1                     * HCP on file ?
          BRANCH    OVRCD,WCLM3900               * no
.
          MATCH     SP10,PMHCPRV1                * blank provider number ?
          GOTO      WCLM3900 IF EQUAL            * yes
.
          MOVE      "CLM",SEGMTYPE
          MOVE      "03",SEGFIELD
          MOVE      "-ServicingProviderNum (",FIELDESC
          MOVE      FOUR,PROVFLAG                * set flag to servicing doctor
          MOVE      PMHCPRV1,DIM8
          CALL      VPRN0000                     * valid provider ?
          BRANCH    EXIT,WCLM4000                * no
.
WCLM3800  MOVE      PMHCPRV1,CLMSEG03            * yes - load data
          GOTO      WCLM4000
.
WCLM3900  MOVE      "CLM.3.3-ServicingProviderNum cannot be found",ERRMSG
          MOVE      SP9,DIM9
          CALL      PERR0000
.
.         Load PayeeProviderNum (CLMSEG04)
.
WCLM4000  MATCH     "2",OTECMODL                 * PRI record ?
          IF        @EQUAL
            MOVE      PRHRPRAC,KEY6              * yes
            CALL      RDPRPR1                    * practice on file ?
            BRANCH    OVRCD,WCLM4900             * no - error
.
            MATCH     SP10,PRPRPDOC              * primary doctor code blank?
            GOTO      WCLM4900 IF EQUAL          * yes
.
            PACK      KEY22,PRHRPRAC,PRPRPDOC,PRHDCLAM,PRHRPIND
            CALL      RDPRDO1
            BRANCH    OVRCD,WCLM4900
.
            MOVE      PRDOPROV,KEY8
          ELSE
.           Check if there's a link referral (alllnkaf) and if so, use the
.           Referral Responsible HCP (alrehcp), otherwise default back to
.           using the O/P doctor code.
.
            PACK      KEY16,OBAOUTNO,SP20
            CALL      RSALLNK2                   * position before linked visit
            CALL      RKALLNK2                   * read next record
            BRANCH    OVRCD,WCLM4500             * eof - use default value
.
            MOVE      ALLNLNKV,DIM8VISN
            MATCH     OBAOUTNO,DIM8VISN          * same linked visit still ?
            GOTO      WCLM4500 IF NOT EQUAL      * no - use default value
.
            MOVE      ALLNVISN,KEY8
            CALL      RDALREF1                   * referral on file ?
            BRANCH    OVRCD,WCLM4500             * no - use default value
.
            MOVE      ALRERDAT,SAVERDAT          * save referral date for later
.
            MATCH     SP10,ALREHCP               * blank HCP ?
            GOTO      WCLM4500 IF EQUAL          * yes - use default value
.
            MOVE      ALREHCP,KEY10              * no
            CALL      RDPMHCP1                   * HCP on file ?
            BRANCH    OVRCD,WCLM4500             * no
.
            MATCH     SP10,PMHCPRV1              * blank provider number ?
            GOTO      WCLM4500 IF EQUAL          * yes
.
            MOVE      PMHCPRV1,KEY8              * no
            GOTO      WCLM4800
.
WCLM4500    MATCH     SP10,OTHEDEFD              * blank doctor ?
            GOTO      WCLM6000 IF EQUAL          * yes
.
            MOVE      OTHEDEFD,KEY10
            CALL      RDPMHCP1                   * HCP on file ?
            BRANCH    OVRCD,WCLM6000             * no
.
            MOVE      PMHCPRV1,KEY8              * yes
.
          ENDIF
.
          MATCH     SP8,KEY8                     * payee provider blank ?
          GOTO      WCLM6000 IF EQUAL            * yes
.
WCLM4800  MOVE      "CLM",SEGMTYPE
          MOVE      "04",SEGFIELD
          MOVE      "-PayeeProviderNum (",FIELDESC
          MOVE      FOUR,PROVFLAG                * set flag to servicing doctor
          MOVE      KEY8,DIM8
          CALL      VPRN0000                     * valid provider ?
          BRANCH    EXIT,WCLM5000                * no
.
          MOVE      KEY8,CLMSEG04
          GOTO      WCLM5000
.
WCLM4900  MOVE      "CLM.4.1-PayeeProviderNum cannot be found",ERRMSG
          MOVE      SP9,DIM9
          CALL      PERR0000
.
.         Make sure that the PayeeProviderNum (if populated) is not the
.         same as the ServiceProviderNum and if it is, then clear the
.         PayeeProviderNum
.
WCLM5000  MATCH     CLMSEG03,CLMSEG04
          IF        @EQUAL
            MOVE      SP8,CLMSEG04
          ENDIF
.
.         Load ServiceTypeCde (CLMSEG05)
.
WCLM6000  MATCH     "2",OTECMODL                 * PRI record ?
          GOTO      WCLM6500 IF EQUAL            * yes
.
.         O/P record
.
          MATCH     SP10,OTBBADCS                * blank doctor code ?
          IF        @EQUAL
            MOVE      "CLM.5.5-ServiceTypeCde is blank",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WCLM8000
          ENDIF
.
.         PACK      KEY16,OBADOCT,KEY20
.         CALL      RSPMHCP4                     * pos'n before local doctor
.         CALL      RKPMHCP4                     * read next record
.         IF        OVRCD = 1
.           MOVE      "CLM.5.6-Local Doctor not found",ERRMSG
.           MOVE      SP9,DIM9
.           CALL      PERR0000
.           GOTO      WCLM8000
.         ENDIF
.
.         MATCH     OBADOCT,PMHCLDOC             * same local doctor still ?
.         IF        !@EQUAL
.           MOVE      "CLM.5.7-Local Doctor not found",ERRMSG
.           MOVE      SP9,DIM9
.           CALL      PERR0000
.           GOTO      WCLM8000
.         ENDIF
.
          MOVE      OTBBADCS,KEY10
          CALL      RDPMHCP1
          IF        OVRCD = 1
            MOVE      "CLM.5.6-Doctor not found",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WCLM8000
          ENDIF
.
          MATCH     SP3,PMHCSPC1
          IF        @EQUAL
            MOVE      "CLM.5.8-Doctor Specialty is blank",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WCLM8000
          ENDIF
.
          PACK      KEY5,ANSD,ANST,PMHCSPC1
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "CLM.5.9-Doctor Specialty not on file",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WCLM8000
          ENDIF
.
          MATCH     SP1,TCINDC8
          IF        @EQUAL
            MOVE      "CLM.5.10-ServiceTypeCde Indicator 8 is blank",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WCLM8000
          ENDIF
.
          MATCH     ANSS,TCINDC8                 * specialist ?
          IF        !@EQUAL
            MATCH     ANSO,TCINDC8                 * general ?
            IF        !@EQUAL
              MOVE      "CLM.5.11-ServiceTypeCde Indicator 8 not valid",ERRMSG
              MOVE      SP9,DIM9
              CALL      PERR0000
            ENDIF
          ENDIF
.
          MOVE      TCINDC8,CLMSEG05
          GOTO      WCLM8000
.
.         PRI record
.
WCLM6500  MATCH     SP3,PRHRSTCD                 * blank service type ?
          IF        @EQUAL
            MOVE      "CLM.5.1-ServiceTypeCde is blank",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WCLM8000
          ENDIF
.
          PACK      KEY5,CATst,PRHRSTCD
          CALL      RDCODE1                      * code on file ?
          IF        OVRCD = 1
            MOVE      "CLM.5.2-ServiceTypeCde not on file",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WCLM8000
          ENDIF
.
          MATCH     SP1,TCINDC1                  * blank Indicator 1 ?
          IF        @EQUAL
            MOVE      "CLM.5.3-ServiceTypeCde Indicator 1 is blank",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WCLM8000
          ENDIF
.
          MATCH     ANSS,TCINDC1
          IF        !@EQUAL
            MATCH     ANSO,TCINDC1
            IF        !@EQUAL
              MOVE      "CLM.5.4-ServiceTypeCde Indicator 1 not valid",ERRMSG
              MOVE      SP9,DIM9
              CALL      PERR0000
              GOTO      WCLM8000
            ENDIF
          ENDIF
.
          MOVE      TCINDC1,CLMSEG05
.
.         Load TransactionId (CLMSEG06)
.
WCLM8000  MOVE      OTECTRID,CLMSEG06
.
.         Load AccountReferenceId (CLMSEG07)
.
          MOVE      OTECINVN,CLMSEG07
          SQUEEZE   CLMSEG07
          PACK      CLMSEG07,CLMSEG07,SP10
.
.         Load the Emergency/Outpatient/Private Practice Flag (CLMSEG08)
.
          MATCH     "1",OTECMODL                 * ED record ?
          IF        @EQUAL
            MOVE      "1",CLMSEG08               * yes
          ELSE
            MATCH     "2",OTECMODL               * no - PRI ?
            IF        @EQUAL
              MOVE      "2",CLMSEG08             * yes
            ELSE
              MOVE      "3",CLMSEG08             * no - Outpatient
            ENDIF
          ENDIF
.
          BRANCH    VALDFLG,WCLM9999             * validation only
.
          WRITE     EXTFILE1,SEQ;TILDA01,ANSC,ANSL,ANSM:
                                 CLMSEG01,CLMSEG02,CLMSEG03,CLMSEG04,CLMSEG05:
                                 CLMSEG06,CLMSEG07,CLMSEG08
.
WCLM9999  RETURN
+
.*****************************************************************************
.*                              WVCH0000           Called by: VALD0000       *
.*                        Write Voucher Details               WRIT0000       *
.*****************************************************************************
.
.         There should only be 1 voucher/claim
.
WVCH0000  MOVE      SP70,VCHSEG01
          MOVE      SP70,VCHSEG02
          MOVE      SP70,VCHSEG03
          MOVE      SP70,VCHSEG04
          MOVE      SP70,VCHSEG05
          MOVE      SP70,VCHSEG06
          MOVE      SP70,VCHSEG07
          MOVE      SP70,VCHSEG08
          MOVE      SP70,VCHSEG09
          MOVE      SP70,VCHSEG10
          MOVE      SP70,VCHSEG11
          MOVE      SP70,VCHSEG12
          MOVE      SP70,VCHSEG13
.
.>>>>>>   Do we need this ????
          MOVE      SP70,SERVTXT1
          MOVE      SP70,SERVTXT2
.
.         Load BenefitAssignmentAuthorised (VCHSEG01)
.
          MATCH     "2",OTECMODL                 * PRI ?
          IF        @EQUAL
            MOVE      PRHRBASS,VCHSEG01          * yes
          ELSE
            MOVE      OTBBBKBA,VCHSEG01          * no - OP
          ENDIF
          REP       "1Y",VCHSEG01
.
          MATCH     ANSY,VCHSEG01
          IF        !@EQUAL
            MOVE      "VCH.1.1-BenefitAssignmentAuthorised must be Y",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
          ENDIF
.
.         Load DateOfService (VCHSEG02)
.
          MATCH     "2",OTECMODL                 * PRI record ?
          IF        @EQUAL
            MOVE      PRDTSDAT,DIM8B             * yes
          ELSE
            MOVE      OTDDATE,DIM8B              * no - OP
          ENDIF
.
          MATCH     SP8,DIM8B
          IF        @EQUAL
            MOVE      "VCH.2.1-DateOfService is blank",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WVCH1000
          ENDIF
.
.         Check that the DateOfService is not in the future.
.
          MATCH     DIM8B,CURRDATE
          IF        @LESS
            MOVE      "VCH.2.2-DateOfService cannot be a future date",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WVCH1000
          ENDIF
.
.         Check that the DateOfService is not prior to PatientDateOfBirth.
.
          MATCH     PBDATE,DIM8B
          IF        @LESS
            MOVE      "VCH.2.3-DateOfService prior to date of birth",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WVCH1000
          ENDIF
.
.         Cannot be more than 2 years prior to date of transmission.
.
          UNPACK    DIM8B,CCENT,CYEAR,CMON,CDAY
.
          MOVE      DIM8B,DATEVAR1
          MOVE      CURRDATE,DATEVAR2
          DAYSEP    DATEVAR1,DATEVAR2,FORM5
          IF        FORM5 > 729
            MOVE      "VCH.2.4-DateOfService too old",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WVCH1000
          ENDIF
.
          PACK      VCHSEG02,CDAY,CMON,CCENT,CYEAR
.
.         Load PatientDateOfBirth (VCHSEG03)
.
WVCH1000  UNPACK    PBDATE,CCENT,CYEAR,CMON,CDAY
          PACK      VCHSEG03,CDAY,CMON,CCENT,CYEAR
.
.         Load PatientFamilyName (VCHSEG04)
.
          MOVE      PTMASNAM,VCHSEG04
.
.         Load PatientFirstName (VCHSEG05)
.
          MOVE      PMPXFNAM,VCHSEG05
.
.         Load PatientMedicareCardNum (VCHSEG06)
.         Mandatory given that Patient Surname will always be populated.
.
          MATCH     SP10,PMEDI
          IF        @EQUAL
            MOVE      "VCH.6.1-PatientMedicareCardNum not populated",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
          ELSE
            MOVE      PMEDI,VCHSEG06
          ENDIF
.
.         Load PatientReferenceNum (VCHSEG07)
.         Mandatory given that Patient Surname will always be populated.
.
          MATCH     SP2,PTMXMCCD
          IF        @EQUAL
            MOVE      "VCH.7.1-PatientReferenceNum not populated",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
          ELSE
            SQUEEZE   PTMXMCCD
            MOVE      PTMXMCCD,VCHSEG07
          ENDIF
.
.         Load ReferralOverrideTypeCde (VCHSEG08)
.
          MATCH     "2",OTECMODL                 * PRI record ?
          IF        @EQUAL
            MOVE      PRHRROVR,KEY3              * yes
          ELSE
            MOVE      OTBBBKOV,KEY3              * no - PRI
          ENDIF
.
          MATCH     SP3,KEY3                     * blank field ?
          GOTO      WVCH3000 IF EQUAL            * yes
.
          PACK      KEY5,CATro,KEY3
          CALL      RDCODE1
          BRANCH    OVRCD,WVCH3000
.
          MATCH     ANSE,THCSCOD
          GOTO      WVCH2000 IF EQUAL
.
          MATCH     ANSH,THCSCOD
          GOTO      WVCH2000 IF EQUAL
.
          MATCH     ANSL,THCSCOD
          GOTO      WVCH2000 IF EQUAL
.
          MATCH     ANSN,THCSCOD
          GOTO      WVCH2000 IF EQUAL
.
          MOVE      "VCH.8.1-ReferralOverrideTypeCde value is invalid",ERRMSG
          MOVE      SP9,DIM9
          CALL      PERR0000
          GOTO      WVCH3000
.
WVCH2000  MOVE      THCSCOD,VCHSEG08
.
.         Load ReferringProviderNum (VCHSEG09)
.
WVCH3000  MATCH     "2",OTECMODL                 * PRI record ?
          IF        @EQUAL
            MOVE      PRHRREFD,KEY10             * yes
          ELSE
            MOVE      OTBBRFGP,KEY10             * no - PRI
          ENDIF
.
          MATCH     SP10,KEY10                   * blank referring doctor ?
          GOTO      WVCH5000 IF EQUAL            * yes
.
          CALL      RDPMHCP1                     * referring dr on file ?
          BRANCH    OVRCD,WVCH4900               * no
.
          MATCH     SP10,PMHCPRV1                * blank provider number ?
          GOTO      WVCH4900 IF EQUAL
.
          MOVE      "VCH",SEGMTYPE
          MOVE      " 9",SEGFIELD
          MOVE      "-ReferringProviderNum (",FIELDESC
          MOVE      FOUR,PROVFLAG                * set flag to servicing doctor
          MOVE      PMHCPRV1,DIM8
          CALL      VPRN0000                     * valid provider ?
          BRANCH    EXIT,WVCH5000                * no
.
          MOVE      PMHCPRV1,VCHSEG09            * yes
.
.         ReferralOverrideTypeCde can only be set with ReferringProviderNum when
.         the former is set to "N" or not set at all
.
          MATCH     SP1,VCHSEG08
          IF        !@EQUAL
            MATCH     ANSN,VCHSEG08
            IF        !@EQUAL
              MOVE      "VCH.9.3-ReferralOverrideTypeCde can only be N when ReferringProviderNum is populated",ERRMSG
              MOVE      SP9,DIM9
              CALL      PERR0000
              GOTO      WVCH5100
            ENDIF
          ENDIF
.
.         ServicingProviderNum (CLMSEG03) cannot have the same first 6 digits
.         as the ReferringProviderNum (VCHSEG09)
.
          MOVE      VCHSEG09,DIM6A
          MOVE      CLMSEG03,DIM6B
          MATCH     DIM6A,DIM6B
          IF        @EQUAL
            MOVE      "VCH.9.2-ReferringProviderNum has same six digits as ServicingProviderNum",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
          ENDIF
          GOTO      WVCH5000
.
WVCH4900  MOVE      "VCH.9.1-ReferringProviderNum cannot be found",ERRMSG
          MOVE      SP9,DIM9
          CALL      PERR0000
.
.         Load ReferralIssueDate (VCHSEG10)
.
WVCH5000  MATCH     "2",OTECMODL                 * PRI record ?
          IF        @EQUAL
            MATCH     SP8,PRHRRDAT               * yes
            IF        !@EQUAL
              UNPACK    PRHRRDAT,CCENT,CYEAR,CMON,CDAY
              MOVE      PRHRRDAT,DIM8A
              PACK      VCHSEG10,CDAY,CMON,CCENT,CYEAR
            ENDIF
          ELSE
            MATCH     SP8,SAVERDAT               * no - PRI
            IF        !@EQUAL
              UNPACK    SAVERDAT,CCENT,CYEAR,CMON,CDAY
              MOVE      SAVERDAT,DIM8A
              PACK      VCHSEG10,CDAY,CMON,CCENT,CYEAR
            ELSE
              MATCH     SP8,OTBBRDAT
              IF        !@EQUAL
                UNPACK    OTBBRDAT,CCENT,CYEAR,CMON,CDAY
                MOVE      OTBBRDAT,DIM8A
                PACK      VCHSEG10,CDAY,CMON,CCENT,CYEAR
              ENDIF
            ENDIF
          ENDIF
.
          MATCH     SP8,VCHSEG10                 * field populated ?
          GOTO      WVCH5100 IF EQUAL            * no - ignore validations
.
.         ReferralOverrideTypeCde can only be set with ReferralIssueDate when
.         the former is set to "N" or not set at all
.
          MATCH     SP1,VCHSEG08
          IF        !@EQUAL
            MATCH     ANSN,VCHSEG08
            IF        !@EQUAL
              MOVE      "VCH.10.1-ReferralOverrideTypeCde can only be N when ReferralIssueDate is populated",ERRMSG
              MOVE      SP9,DIM9
              CALL      PERR0000
              GOTO      WVCH5100
            ENDIF
          ENDIF
.
.         Where ReferralOverrideTypeCde (VCHSEG08) is blank and
.         ReferralIssueDate (VCHSEG10) is populated, then DateOfService
.         (VCHSEG02) must not be less than the ReferralIssueDate.
.
          MATCH     SP1,VCHSEG08
          GOTO      WVCH5100 IF NOT EQUAL
.
          MATCH     DIM8A,DIM8B
          IF        @LESS
            MOVE      "VCH.10.2-DateOfService less than ReferralIssueDate",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
          ENDIF
.
.         Load ReferralPeriodTypeCde (VCHSEG11)
.
WVCH5100  MATCH     "2",OTECMODL                 * PRI record ?
          IF        @EQUAL
            MOVE      PRHRRFPD,KEY3              * yes
          ELSE
            MOVE      OTBBBKPR,KEY3              * no - OP
          ENDIF
.
          MATCH     SP3,KEY3                     * blank field ?
          GOTO      WVCH6000 IF EQUAL            * yes
.
          PACK      KEY5,ANSR,ANSF,KEY3
          CALL      RDCODE1                      * referral period code on file?
          BRANCH    OVRCD,WVCH6000               * no
.
          MATCH     SP1,TCINDC1                  * Indicator 1 set ?
          GOTO      WVCH6000 IF EQUAL            * no
.
          MATCH     ANSI,TCINDC1                 * Indefinite ?
          GOTO      WVCH5900 IF EQUAL            * yes - valid
.
          MATCH     ANSN,TCINDC1                 * Non-Standard ?
          GOTO      WVCH5900 IF EQUAL            * yes - valid
.
          MATCH     ANSS,TCINDC1                 * Standard ?
          GOTO      WVCH5900 IF EQUAL            * yes - valid
.
          MOVE      "VCH.11.2-ReferralPeriodTypeCde not valid",ERRMSG
          MOVE      SP9,DIM9
          CALL      PERR0000
.
          GOTO      WVCH8000
.
WVCH5900  MOVE      TCINDC1,VCHSEG11
.
WVCH6000  MATCH     SP1,VCHSEG11                 * blank value ?
          GOTO      WVCH6100 IF NOT EQUAL        * no
.
.         If ReferralProviderNum and ReferralIssueDate are both populated,
.         then ReferralPeriodTypeCde is mandatory
.
          MATCH     SP8,VCHSEG09
          IF        !@EQUAL
            MATCH     SP8,VCHSEG10
            IF        !@EQUAL
              MOVE      "VCH.11.1-ReferralPeriodTypeCde mandatory",ERRMSG
              MOVE      SP9,DIM9
              CALL      PERR0000
            ENDIF
          ENDIF
          GOTO      WVCH8000
.
.         ReferralOverrideTypeCde can only be set with ReferralPeriodTypeCde
.         when the former is set to "N" or not set at all
.
WVCH6100  MATCH     SP1,VCHSEG08
          IF        !@EQUAL
            MATCH     ANSN,VCHSEG08
            IF        !@EQUAL
              MOVE      "VCH.11.3-ReferralOverrideTypeCde can only be N when ReferralPeriodTypeCde is populated",ERRMSG
              MOVE      SP9,DIM9
              CALL      PERR0000
              GOTO      WVCH8000
            ENDIF
          ENDIF
.
          MATCH     ANSN,VCHSEG11                * ReferralPeriodTypeCde "No"?
          GOTO      WVCH8000 IF NOT EQUAL        * no
.
.         If ReferralPeriodTypeCde is set to "N", then we need to load
.         the period into the ServiceText (SRVSEG19) field
.
          MATCH     "2",OTECMODL                 * PRI ?
          IF        @EQUAL
            MOVE      PRHRRPER,KEY2              * yes
          ELSE
            MOVE      OTBBBKPM,KEY2              * no - PRI
          ENDIF
.
          MATCH     SP2,KEY2
          IF        @EQUAL
            MOVE      "VCH.11.4-Period cannot be blank if ReferralPeriodTypeCde is N",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WVCH8000
          ELSE
            SQUEEZE   KEY2
            MOVE      "Period = ",SERVTXT1
            ENDSET    SERVTXT1
            APPEND    KEY2,SERVTXT1
            APPEND    " months",SERVTXT1
            APPEND    SP70,SERVTXT1
            RESET     SERVTXT1
          ENDIF
.
.         Load RequestTypeCde (VCHSEG12)
.         Not populated for webPAS (Pathology and Radiology only)
.
.         Load TimeOfService (VCHSEG13)
.
WVCH8000  MATCH     "2",OTECMODL                 * PRI record ?
          IF        @EQUAL
            MOVE      PRDTSTIM,DIM5              * yes
          ELSE
            MOVE      OTBBASTM,DIM5              * no - OP
          ENDIF
.
          MATCH     SP5,DIM5                     * blank field ?
          GOTO      WVCH9000 IF EQUAL            * yes
.
          REP       " 0",DIM5                    * no - format time
          REP       ": ",DIM5
          SQUEEZE   DIM5
          MOVE      DIM5,VCHSEG13
.
WVCH9000  BRANCH    VALDFLG,WVCH9999             * validation only
.
          WRITE     EXTFILE1,SEQ;TILDA01,ANSV,ANSC,ANSH:
                                 VCHSEG01,VCHSEG02,VCHSEG03,VCHSEG04,VCHSEG05:
                                 VCHSEG06,VCHSEG07,VCHSEG08,VCHSEG09,VCHSEG10:
                                 VCHSEG11,VCHSEG12,VCHSEG13
.
WVCH9999  RETURN
+
.******************************************************************************
.*                                  LODS0000              Called by: VALD0000 *
.*                 Load the sorted tempfile with all the items       WRIT0000 *
.*                 for the invoice being processed.
.******************************************************************************
.
LODS0000  GOTO      LODS0500                     * first dtr rec for processing
.
.         Get the next outdtrof/pridtraf record for processing
.
LODS0050  MATCH     "3",OTECMODL                 * OP record ?
          GOTO      LODS0200 IF NOT EQUAL        * no - PRI record
.
.         OP Record
.
LODS0100  CALL      RDKDTRO4                     * read next record
          BRANCH    OVRCD,LODS9999               * eof - finished
.
          MATCH     LISTINVN,OTINVNO             * same invoice still ?
          GOTO      LODS9999 IF NOT EQUAL        * no - finished
.
          IF        OTRECTYP <> 6
            GOTO      LODS0100                   * not a procedure
          ENDIF
.
          MOVE      LISTUNIQ,DIM8VISN
          MATCH     DIM8VISN,OTNUMB                 * same visit ?
          IF        !@EQUAL
            MOVE      "GEN.17-Visit inconsistency for outdtrof record",ERRMSG
            MOVE      OTITEMNO,DIM9
            CALL      PERR0000
            GOTO      LODS0100
          ENDIF
.
          GOTO      LODS0500
.
.         PRI Record
.
LODS0200  CALL      RKPRDT4                      * read next record
          BRANCH    OVRCD,LODS9999               * eof - finished
.
          MATCH     LISTINVN,PRDTINVN            * same invoice still ?
          GOTO      LODS9999 IF NOT EQUAL        * no - finished
.
          COMPARE   ONE,PRDTRTYP                 * item record ?
          GOTO      LODS0200 IF NOT EQUAL        * no - ignore record
.
.         We have found a valid item record so load the temp file fields.
.
LODS0500  MATCH     "3",OTECMODL                 * OP record ?
          IF        @EQUAL
            MOVE      OTDDATE,SORTSDAT           * yes
            MOVE      OTTRANS,SORTTRAN
          ELSE
            MOVE      PRDTSDAT,SORTSDAT          * no - PRI
            MOVE      PRDTTRAN,SORTTRAN
          ENDIF
.
          PACK      KEY14,SORTSDAT,SORTTRAN
          CALL      RATEMP2
          IF        OVRCD = 1
            CALL      WRTEMP2
          ENDIF
.
          GOTO      LODS0050                     * get next ...dtraf record
.
LODS9999  RETURN
+
.******************************************************************************
.*                                  WSRV0000              Called by: VALD0000 *
.*                            Write Service Details                & WRIT0000 *
.******************************************************************************
.
WSRV0000  ADD       ONE,ITMCOUNT                 * increment item count
.
          IF        ITMCOUNT > 14
            MOVE      "GEN.9-Too many items to claim - process manually or split invoice",ERRMSG
            MATCH     "2",OTECMODL               * PRI record ?
            IF        @EQUAL
              MOVE      PRDTITMN,DIM9            * yes
            ELSE
              MOVE      OTITEMNO,DIM9            * no - PRI
            ENDIF
            CALL      PERR0000
            GOTO      WSRV9999
          ENDIF
.
WSRV0500  MOVE      SP70,SRVSEG01                * Initialise all segment fields
          MOVE      SP70,SRVSEG02
          MOVE      SP70,SRVSEG03
          MOVE      SP70,SRVSEG04
          MOVE      SP70,SRVSEG05
          MOVE      SP70,SRVSEG06
          MOVE      SP70,SRVSEG07
          MOVE      SP70,SRVSEG08
          MOVE      SP70,SRVSEG09
          MOVE      SP70,SRVSEG10
          MOVE      SP70,SRVSEG11
          MOVE      SP70,SRVSEG12
          MOVE      SP70,SRVSEG13
          MOVE      SP70,SRVSEG14
          MOVE      SP70,SRVSEG15
          MOVE      SP70,SRVSEG16
          MOVE      SP70,SRVSEG17
          MOVE      SP70,SRVSEG18
          MOVE      SP70,SRVSEG19
.
.         Load AccessionDateTime (SRVSEG01)
.         Not applicable to webPAS - only relates to pathology services.
.
.         Load AfterCareOverrideInd (SRVSEG02)
.
          MOVE      ANSN,SRVSEG02                * set to default value "N"
          MATCH     "2",OTECMODL                 * PRI record ?
          IF        @EQUAL
            MATCH     "1",PRDTACOI               * yes
            IF        @EQUAL
              MOVE      ANSY,SRVSEG02
            ENDIF
          ELSE
            MATCH     "1",OTDTACAO               * no - OP
            IF        @EQUAL
              MOVE      ANSY,SRVSEG02
            ENDIF
          ENDIF
.
.         Load ChargeAmount (SRVSEG03)
.
          MATCH     "2",OTECMODL
          IF        @EQUAL
            ADD       PRDTAMNT,TOTAMTCT          * increm. total amount counter
            MOVE      PRDTAMNT,KEY15
          ELSE
            ADD       OTPATAMT,TOTAMTCT          * increm. total amount counter
            MOVE      OTPATAMT,KEY15
          ENDIF
          REP       ". ",KEY15
          SQUEEZE   KEY15
          RJUSTIFY  KEY15
          REP       " 0",KEY15
          UNPACK    KEY15,KEY8,SRVSEG03
.
          MATCH     "0000100",SRVSEG03
          IF        @LESS
            MOVE      "SRV.3.1-ChargeAmount is less than 100",ERRMSG
            MATCH     "2",OTECMODL
            IF        @EQUAL
              MOVE      PRDTITMN,DIM9
            ELSE
              MOVE      OTITEMNO,DIM9
            ENDIF
            CALL      PERR0000
          ENDIF
.
.         Load CollectionDateTime (SRVSEG04)
.         Not applicable to webPAS - only relates to pathology services.
.
.         Load DuplicateServiceOverrideInd (SRVSEG05)
.
WSRV2000  MOVE      ANSN,SRVSEG05                * set to default value of "N"
          MATCH     "2",OTECMODL                 * PRI record ?
          IF        @EQUAL
            MATCH     "1",PRDTDSOV               * yes
            IF        @EQUAL
              MOVE      ANSY,SRVSEG05
            ENDIF
          ELSE
            MATCH     "1",OTDTDSRO               * no - OP
            IF        @EQUAL
              MOVE      ANSY,SRVSEG05
            ENDIF
          ENDIF
.
.         If the value is "Y", then DateOfService (VCHSEG02) must be populated
.
          MATCH     ANSY,SRVSEG05
          GOTO      WSRV2100 IF NOT EQUAL
.
          MATCH     SP4,VCHSEG02
          IF        @EQUAL
            MOVE      "SRV.5.1-DuplicateServiceOverrideInd value requires DateofService to be populated",ERRMSG
            MATCH     "2",OTECMODL
            IF        @EQUAL
              MOVE      PRDTITMN,DIM9
            ELSE
              MOVE      OTITEMNO,DIM9
            ENDIF
            CALL      PERR0000
          ENDIF
.
.>>>>>    Note: If set to "Y", reason for override is expected to be captured
.               in ServiceText
.
.         Load EquipmentId (SRVSEG06)
.         Not required/applicable to webPAS.
.
.         Load FieldQuantity (SRVSEG07)
.         Not required/applicable to webPAS.
.
.         Below code was added to pass NOI test only, but has been
.         saved just in case it is required in the future
.
.WSRV2090  MOVE      SP70,SRVSEG07
.          MATCH     "2",OTECMODL
.          IF        @EQUAL
.            IF        PRDTSERV > 1
.              MOVE      PRDTSERV,DIM5
.              LJUSTIFY  DIM5
.              MOVE      DIM5,SRVSEG07
.              RJUSTIFY  SRVSEG07
.            ENDIF
.          ENDIF
.
.         Load HospitalInd (SRVSEG08)
.
WSRV2100  MOVE      ANSN,SRVSEG08
          MATCH     "2",OTECMODL                 * PRI record ?
          IF        @EQUAL
            MATCH     "1",PRDTHOSI               * yes
            IF        @EQUAL
              MOVE       ANSY,SRVSEG08
            ENDIF
          ENDIF
.
.         The HospitalInd must be consistent within a voucher, so check it
.         hasn't changed
.
          MATCH     SP1,SVHOSIND
          IF        @EQUAL
            MOVE      SRVSEG08,SVHOSIND
          ELSE
            MATCH     SRVSEG08,SVHOSIND
            IF        !@EQUAL
              MOVE      "SRV.8.1-HospitalInd not consistent in voucher",ERRMSG
              MOVE      PRDTITMN,DIM9
              CALL      PERR0000
            ENDIF
          ENDIF
.
          MATCH     ANSY,SRVSEG08                * in-hospital service ?
          GOTO      WSRV2500 IF NOT EQUAL        * no
.
.         If this is the validation phase and this is the first in-hospital
.         item that we've found for this invoice, then update the temp file
.         record field to show this claim is an in-hospital claim.  We need
.         to know this to set PmsClaimId (CLMSEG02) during the write phase,
.         given that the CLM segment is written before we process the SRV
.         segment.  As long as there is one or more items for the claim where
.         the service item has the HospitalInd set to "Y", then the
.         PmsClaimID setting needs to reflect this.
.
          IF        VALDFLG = 1 & INHOSFLG = 0
            MOVE      ONE,LISTIHOS
            MOVE      ONE,INHOSFLG
            CALL      UPTEMP1                    * update record
          ENDIF
.
.         The HospitalInd is set to "Y", so we need to send the hospital
.         provider number in the ServiceText (SRVSEG18) field.
.
          IF        IBCNMHOS = 1
            MOVE      PTHSAPPR,KEY8
          ELSE
            MOVE      CAPPRVNO,KEY8
          ENDIF
.
          MATCH     SP8,KEY8
          IF        @EQUAL
            MOVE      "SRV.18.1-Hospital Approval number not found",ERRMSG
            MOVE      PRDTITMN,DIM9
            CALL      PERR0000
            GOTO      WSRV2500
          ENDIF
.
.         A hospital provider number has been found, so validate it
.
          MOVE      "SRV",SEGMTYPE
          MOVE      " 8",SEGFIELD
          MOVE      "-Hospital provider no (",FIELDESC
          MOVE      ONE,PROVFLAG                 * set flag to hospital
          MOVE      KEY8,DIM8
          CALL      VPRN0000                     * valid provider ?
          BRANCH    EXIT,WSRV2500                * no
.
.         We have a valid hospital provider number, so load the service
.         text field for use in SRVSEG19
.
          MOVE      "Hospital Provider Number - ",SERVTXT2
          ENDSET    SERVTXT2
          APPEND    KEY8,SERVTXT2
          APPEND    SP70,SERVTXT2
          RESET     SERVTXT2
.
.         ItemNum (SRVSEG09)
.
WSRV2500  MATCH     "2",OTECMODL                 * PRI Record ?
          IF        @EQUAL
            MOVE      PRDTITMN,KEY9              * no - PRI
          ELSE
            MOVE      OTITEMNO,KEY9              * yes
          ENDIF
          STRIP     KEY9
          MOVELPTR  KEY9,FORM1
          IF        FORM1 > 5
            MOVE      "SRV.9.1-ItemNum is too long",ERRMSG
            MATCH     "2",OTECMODL
            IF        @EQUAL
              MOVE      PRDTITMN,DIM9
            ELSE
              MOVE      OTITEMNO,DIM9
            ENDIF
            CALL      PERR0000
          ELSE
            PACK      SRVSEG09,KEY9,SP10
          ENDIF
.
.         Load SCPId (SRVSEG10)
.         Not required/applicable to webPAS.
.
.         Load LSPNum (SRVSEG11)
.
          MOVE      SP6,KEY6
          MATCH     "2",OTECMODL                 * PRI Record ?
          IF        @EQUAL
            MATCH     SP6,PRDTLSPN               * yes
            IF        !@EQUAL
              MOVE      PRDTLSPN,KEY6
            ENDIF
          ELSE
            MATCH     SP6,OTDTLSPN               * no - OP
            IF        !@EQUAL
              MOVE      OTDTLSPN,KEY6
            ENDIF
          ENDIF
.
          MATCH     SP6,KEY6                     * blank LSPN ?
          GOTO      WSRV2600 IF EQUAL            * yes
.
          MOVE      KEY6,SRVSEG11                * no
          RJUSTIFY  SRVSEG11
          REP       " 0",SRVSEG11
.
          MATCH     "000000",SRVSEG11
          IF        @EQUAL
            MOVE      "SRV.11.1-LSPNum cannot be zeroes",ERRMSG
            MATCH     "2",OTECMODL
            IF        @EQUAL
              MOVE      PRDTITMN,DIM9
            ELSE
              MOVE      OTITEMNO,DIM9
            ENDIF
            CALL      PERR0000
          ENDIF
.
.         Load MultipleProcedureOverrideInd (SRVSEG12)
.
WSRV2600  MOVE      ANSN,SRVSEG12
          MATCH     "2",OTECMODL                 * PRI Record ?
          IF        @EQUAL
            MATCH     "1",PRDTMPOV               * yes
            IF        @EQUAL
              MOVE      ANSY,SRVSEG12
            ENDIF
          ELSE
            MATCH     "1",OTDTMPRO               * no - OP
            IF        @EQUAL
              MOVE      ANSY,SRVSEG12
            ENDIF
          ENDIF
.
.>>>>>    Note: If set to "Y", reason for override is expected to be captured
.               in ServiceText
.
.         Load NoOfPatientsSeen (SRVSEG13)
.
WSRV2700  MOVE      SP2,KEY2
          MATCH     "2",OTECMODL                 * PRI Record ?
          IF        @EQUAL
            MATCH     SP70,PRDTNMPT              * yes
            IF        !@EQUAL
              MOVE      PRDTNMPT,KEY2
            ENDIF
          ELSE
            MATCH     SP70,OTDTNPAT              * no - OP
            IF        !@EQUAL
              MOVE      OTDTNPAT,KEY2
            ENDIF
          ENDIF
.
          MATCH     SP2,KEY2                     * blank field ?
          GOTO      WSRV2800 IF EQUAL            * yes
.
.         Make sure that MultipleProcedureOverrideInd is not set to "Y"
.
          MATCH     ANSY,SRVSEG12
          IF        @EQUAL
            MOVE      "SRV.12.1-MultipleProcedureOverrideInd cannot be populated when NoOfPatientsSeen is also populated",ERRMSG
            MATCH     "2",OTECMODL
            IF        @EQUAL
              MOVE      PRDTITMN,DIM9
            ELSE
              MOVE      OTITEMNO,DIM9
            ENDIF
            CALL      PERR0000
          ENDIF
.
.         Make sure that ReferringProviderNum is not populated
.
          MATCH     SP8,VCHSEG09
          IF        !@EQUAL
            MOVE      "SRV.12.2-ReferringProviderNum cannot be populated when NoOfPatientsSeen is also populated",ERRMSG
            MATCH     "2",OTECMODL
            IF        @EQUAL
              MOVE      PRDTITMN,DIM9
            ELSE
              MOVE      OTITEMNO,DIM9
            ENDIF
            CALL      PERR0000
          ENDIF
.
.         Make sure that ReferralIssueDate is not populated
.
          MATCH     SP8,VCHSEG10
          IF        !@EQUAL
            MOVE      "SRV.12.3-ReferralIssueDate cannot be populated when NoOfPatientsSeen is also populated",ERRMSG
            MATCH     "2",OTECMODL
            IF        @EQUAL
              MOVE      PRDTITMN,DIM9
            ELSE
              MOVE      OTITEMNO,DIM9
            ENDIF
            CALL      PERR0000
          ENDIF
.
.         Make sure that ReferralPeriodTypeCde is not populated
.
          MATCH     SP1,VCHSEG11
          IF        !@EQUAL
            MOVE      "SRV.12.4-ReferralPeriodTypeCde cannot be populated when NoOfPatientsSeen is also populated",ERRMSG
            MATCH     "2",OTECMODL
            IF        @EQUAL
              MOVE      PRDTITMN,DIM9
            ELSE
              MOVE      OTITEMNO,DIM9
            ENDIF
            CALL      PERR0000
          ENDIF
.
          MOVE      KEY2,SRVSEG13
          RJUSTIFY  SRVSEG13
          REP       " 0",SRVSEG13
.
.         Load RestrictiveOverrideCde (SRVSEG14)
.
WSRV2800  MATCH     "2",OTECMODL                 * PRI record ?
          IF        @EQUAL
            MOVE      PRDTROVC,KEY3              * yes
          ELSE
            MOVE      OTDTNCAT,KEY3              * no - OP
          ENDIF
.
          MATCH     SP3,KEY3                     * blank field ?
          GOTO      WSRV5000 IF EQUAL            * yes
.
          MOVE      CATro,KEY2
          REP       "rR",KEY2
          PACK      KEY5,KEY2,KEY3
          CALL      RDCODE1                      * code on file ?
          BRANCH    OVRCD,WSRV5000               * no
.
          MATCH     SP6,PTCDASC1                 * blank associated field 1
          GOTO      WSRV5000 IF EQUAL            * yes
.
          MATCH     "SP",PTCDASC1                * separate sites ?
          GOTO      WSRV4000 IF EQUAL            * yes - valid code
.
          MATCH     "NR",PTCDASC1                * not related ?
          GOTO      WSRV4000 IF EQUAL            * yes - valid code
.
          MATCH     "NC",PTCDASC1                * not for comparison ?
          GOTO      WSRV4000 IF EQUAL            * yes - valid code
.
          MOVE      "SRV.14.1-RestrictiveOverrideCde not valid",ERRMSG
          MATCH     "2",OTECMODL
          IF        @EQUAL
            MOVE      PRDTITMN,DIM9
          ELSE
            MOVE      OTITEMNO,DIM9
          ENDIF
          CALL      PERR0000
.
          GOTO      WSRV5000
.
WSRV4000  MOVE      PTCDASC1,SRVSEG14
.
.         Load Rule3ExemptInd (SRVSEG15)
.         Not required/applicable to webPAS.
.
.         Load S4b3ExemptInd (SRVSEG16)
.         Not required/applicable to webPAS.
.
.         Load SelfDeemedCode (SRVSEG17)
.
WSRV5000  MATCH     "2",OTECMODL                 * PRI record ?
          IF        @EQUAL
            PACK      KEY3,PRDTSDCD,SP3          * yes
          ELSE
            MOVE      OTDTSFDM,KEY3              * no - OP
          ENDIF
.
          MATCH     SP3,KEY3                     * blank code ?
          GOTO      WSRV7000 IF EQUAL            * yes
.
          PACK      KEY5,CATSd,KEY3
          CALL      RDCODE1                      * code on file ?
          BRANCH    OVRCD,WSRV7000               * no
.
          MATCH     SP4,THCSCOD                  * blank HDP Default ?
          GOTO      WSRV7000 IF EQUAL            * yes
.
          MATCH     "SD",THCSCOD                 * self deemed ?
          GOTO      WSRV6000 IF EQUAL            * yes - valid code
.
          MATCH     "SS",THCSCOD                 * substituted service ?
          GOTO      WSRV6000 IF EQUAL            * yes - valid code
.
          MATCH     "N ",THCSCOD                 * not self deemed ?
          GOTO      WSRV6000 IF EQUAL            * yes - valid code
.
          MOVE      "SRV.17.1-SelfDeemedCode not valid",ERRMSG
          MATCH     "2",OTECMODL
          IF        @EQUAL
            MOVE      PRDTITMN,DIM9
          ELSE
            MOVE      OTITEMNO,DIM9
          ENDIF
          CALL      PERR0000
.
          GOTO      WSRV7000
.
.         Make sure that ReferralOverrideTypeCde is set to "N" or spaces where
.         SelfDeemedCode is populated
.
WSRV6000  MATCH     SP1,VCHSEG08
          IF        !@EQUAL
            MATCH     ANSN,VCHSEG08                * blank field ?
            IF        !@EQUAL
              MOVE      "SRV.17.2-SelfDeemedCode not valid unless ReferralOverrideTypeCde set to N",ERRMSG
              MATCH     "2",OTECMODL
              IF        @EQUAL
                MOVE      PRDTITMN,DIM9
              ELSE
                MOVE      OTITEMNO,DIM9
              ENDIF
              CALL      PERR0000
            ENDIF
          ENDIF
.
.         Make sure that NoOfPatientsSeen is not populated
.
          MATCH     SP2,SRVSEG13                * blank field ?
          IF        !@EQUAL
            MOVE      "SRV.17.3-SelfDeemedCode cannot be populated when NoOfPatientsSeen is populated",ERRMSG
            MATCH     "2",OTECMODL
            IF        @EQUAL
              MOVE      PRDTITMN,DIM9
            ELSE
              MOVE      OTITEMNO,DIM9
            ENDIF
            CALL      PERR0000
          ENDIF
.
          MOVE      THCSCOD,SRVSEG17
.
.         If the value is "SS" (Substituted Service), then voucher Referral
.         details must be present
.
          MATCH     "SS",SRVSEG17
          GOTO      WSRV7000 IF NOT EQUAL
.
          MATCH     SP1,VCHSEG11
          IF        @EQUAL
            MOVE      "SRV.17.4-SelfDeemedCode cannot be populated without voucher referral details",ERRMSG
            MATCH     "2",OTECMODL
            IF        @EQUAL
              MOVE      PRDTITMN,DIM9
            ELSE
              MOVE      OTITEMNO,DIM9
            ENDIF
            CALL      PERR0000
          ENDIF
.
.         Load ServiceText (SRVSEG18)
.
.>>>>>>>  ServiceText is supposed to be populated if HospitalInd = "Y".
.         Glenn said use CAPPRVNO or PTHSAPPR for Hospital Approval No.
.         Multiple fields require information to also be provided in this
.         field, so concatenate data or put it against different items
.         where multiple items (SRV segments) are being sent for the same
.         visit.
.>>>>>    Need to validate if this is going to work the way it's currently
.         coded ???
.
WSRV7000  MATCH     "2",OTECMODL                 * PRI record ?
          IF        @EQUAL
            MOVE      PRDTSTXT,SRVSEG18          * yes
          ELSE
            MOVE      OTDTSRTX,SRVSEG18          * no - OP
          ENDIF
.
          MATCH     SP70,SRVSEG18                * blank ServiceText ?
          GOTO      WSRV8000 IF NOT EQUAL        * no
.
.         There is no comment for this dtr record, so see if there are
.         any other comments that we can load.
.         If the HospitalInd (SRVSEG08) is "Y", then we need to put the
.         Hospital Approval Number into the Service text.
.
          MATCH     ANSY,SRVSEG08
          IF        @EQUAL
            MATCH     SP70,SERVTXT2
            IF        !@EQUAL
              MOVE      SERVTXT2,SRVSEG18
              MOVE      SP70,SERVTXT2
              GOTO      WSRV8000
            ENDIF
          ENDIF
.
.>>>>> ServiceText can be used by at least 3 other fields for different puposes,
.      How are we going to handle this?????
.
          MATCH     SP70,SERVTXT1
          IF        !@EQUAL
            MOVE      SERVTXT1,SRVSEG18
          ENDIF
.
.         If DuplicateServiceOverrideInd (SRVSEG05) is set to "Y", then
.         either ServiceText (SRVSEG18) or TimeOfService (VCHSEG13) must
.         be populated.
.
WSRV8000  MATCH     ANSY,SRVSEG05
          GOTO      WSRV8500 IF NOT EQUAL
.
          MATCH     SP70,SRVSEG18
          GOTO      WSRV8500 IF NOT EQUAL
.
          MATCH     SP4,VCHSEG13
          IF        @EQUAL
            MOVE      "SRV.18.2-DuplicateServiceOverrideInd requires ServiceText or TimeOfService to be populated",ERRMSG
            MATCH     "2",OTECMODL
            IF        @EQUAL
              MOVE      PRDTITMN,DIM9
            ELSE
              MOVE      OTITEMNO,DIM9
            ENDIF
            CALL      PERR0000
          ENDIF
.
.         Load TimeDuration (SRVSEG19)
.
WSRV8500  MATCH     "2",OTECMODL                 * PRI record ?
          IF        @EQUAL
            MOVE      PRDTTDUR,KEY3              * yes
          ELSE
            MOVE      OTDTTDUR,KEY3              * no - OP
          ENDIF
.
          MATCH     SP3,KEY3                     * blank duration ?
          GOTO      WSRV9000 IF EQUAL            * yes - no further validation
.
          MOVE      ZERO,FORM3
          MOVE      KEY3,SRVSEG19
.
          RJUSTIFY  SRVSEG19
          REP       " 0",SRVSEG19
.
          TYPE      SRVSEG19
          IF        !@EQUAL
            MOVE      "SRV.19.1-TimeDuration not numeric",ERRMSG
            MATCH     "2",OTECMODL
            IF        @EQUAL
              MOVE      PRDTITMN,DIM9
            ELSE
              MOVE      OTITEMNO,DIM9
            ENDIF
            CALL      PERR0000
            GOTO      WSRV8800
          ENDIF
.
          MOVE      SRVSEG19,FORM3
          COMPARE   ZERO,FORM3
          IF        @EQUAL
            MOVE      "SRV.19.2-TimeDuration cannot be zero",ERRMSG
            MATCH     "2",OTECMODL
            IF        @EQUAL
              MOVE      PRDTITMN,DIM9
            ELSE
              MOVE      OTITEMNO,DIM9
            ENDIF
            CALL      PERR0000
            GOTO      WSRV8800
          ENDIF
.
.         Non-zero value, so must be a value divisible by 15
.
          IF        (FORM3%15) <> 0
            MOVE      "SRV.19.3-TimeDuration not a fifteen minute interval",ERRMSG
            MATCH     "2",OTECMODL
            IF        @EQUAL
              MOVE      PRDTITMN,DIM9
            ELSE
              MOVE      OTITEMNO,DIM9
            ENDIF
            CALL      PERR0000
          ENDIF
.
.         Make sure that NoOfPatientsSeen is not populated
.
WSRV8800  MATCH     SP2,SRVSEG13
          IF        !@EQUAL
            MOVE      "SRV.19.4-TimeDuration cannot be populated when NoOfPatientsSeen is populated",ERRMSG
            MATCH     "2",OTECMODL
            IF        @EQUAL
              MOVE      PRDTITMN,DIM9
            ELSE
              MOVE      OTITEMNO,DIM9
            ENDIF
            CALL      PERR0000
          ENDIF
.
WSRV9000  BRANCH    VALDFLG,WSRV9999             * validation only
.
          WRITE     EXTFILE1,SEQ;TILDA01,ANSS,ANSR,ANSV:
                                 SRVSEG01,SRVSEG02,SRVSEG03,SRVSEG04,SRVSEG05:
                                 SRVSEG06,SRVSEG07,SRVSEG08,SRVSEG09,SRVSEG10:
                                 SRVSEG11,SRVSEG12,SRVSEG13,SRVSEG14,SRVSEG15:
                                 SRVSEG16,SRVSEG17,SRVSEG18,SRVSEG19
.
WSRV9999  RETURN
+
.******************************************************************************
.*                                  WTLR0000              Called by: WRIT0000 *
.*                           Write Trailer                                    *
.******************************************************************************
.
WTLR0000  BRANCH    VALDFLG,WTLR9999             * validation only
.
          WRITE     EXTFILE1,SEQ;TILDA01,ANST,ANSL,ANSR
.
WTLR9999  RETURN
+
.*****************************************************************************
.*                                  PERR0000              Called by: Lots    *
.*                             Print Error Message                           *
.* Requires: ERRMSG - error description                                      *
.*           INVNO  - invoice number                                         *
.*           DIM9   - Item number from prdtitmn                              *
.*           Valid read on prihreff record for invoice                       *
.*****************************************************************************
.
PERR0000  COMPARE   ONE,VALDFLG                  * validation ?
          GOTO      PERR9999 IF NOT EQUAL        * no - finished
.
          COMPARE   "55",CLNO                    * page full ?
          CALL      HEAD0000 IF NOT LESS         * yes
.
          PACK      ERRMSG,ERRMSG,SP70,SP70
          PRINT     *1,PIPE,*3,LISTINVN,*12,PIPE,*14,PURNO,*23,PIPE:
                    *25,DIM9,*35,PIPE,*37,ERRMSG,*132,PIPE
          ADD       ONE,CLNO
.
          MOVE      ONE,ERRFLG                   * set error flag
          ADD       ONE,ERRCT                    * incr. error counter
.
PERR9999  RETURN
+
.*****************************************************************************
.*                             VPRN0000            Called by: WCID0000       *
.*                Validate the provider no                    SATR0000       *
.* Requires: DIM8 - Provider  number                          SDTR0000       *
.*           PROVFLAG - Type of provider                      WCER0000       *
.*                          1 = Hospital facility                            *
.*                          4 = Servicing Doctor                             *
.*           PLVCARRY - PLV character array                                  *
.*           PLVNARRY - PLV numeric array                                    *
.*           SEGMTYPE - Segment type e.g. CLM                                *
.*           SEGFIELD - Segment field number                                 *
.*           FIELDESC - Field Description                                    *
.* Returns:  EXIT   0 = valid provider no                                    *
.*                  1 = invalid provider no                                  *
.*****************************************************************************
.
VPRN0000  COMPARE   FOUR,PROVFLAG                * doctor provider ?
          GOTO      VPRN0100 IF EQUAL            * yes - check already done
.
          MATCH     SP8,DIM8                     * blank provider number ?
          IF        @EQUAL
            MOVE      "CLM.20.1-Hospital provider no. is blank",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VPRN9100
          ENDIF
.
.         Validate the provider number.
.         First make sure it is 8 characters in length.
.
VPRN0100  STRIP     DIM8
          MOVELPTR  DIM8,FORM1
          IF        FORM1 <> 8
            PACK      ERRMSG,SEGMTYPE,DOT,SEGFIELD
            ENDSET    ERRMSG
            APPEND    FIELDESC,ERRMSG
            APPEND    DIM8,ERRMSG
            APPEND    ") is incorrect length",ERRMSG
            RESET     ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VPRN9100
          ENDIF
.
.         Check that the first 6 characters are numeric for a doctor provider,
.
          COMPARE   FOUR,PROVFLAG
          GOTO      VPRN0500 IF NOT EQUAL
.
          UNPACK    DIM8,DIM6,DIM2
          TYPE      DIM6
          IF        !@EQUAL
            PACK      ERRMSG,SEGMTYPE,DOT,SEGFIELD
            ENDSET    ERRMSG
            APPEND    FIELDESC,ERRMSG
            APPEND    DIM8,ERRMSG
            APPEND    ") does not have 6 digits",ERRMSG
            RESET     ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VPRN9100
          ENDIF
          GOTO      VPRN0600
.
VPRN0500  UNPACK    DIM8,DIM7,DIM1
          TYPE      DIM7
          IF        !@EQUAL
            PACK      ERRMSG,SEGMTYPE,DOT,SEGFIELD
            ENDSET    ERRMSG
            APPEND    "-Hospital provider no. (",ERRMSG
            APPEND    DIM8,ERRMSG
            APPEND    ") does not have 7 digits",ERRMSG
            RESET     ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VPRN9100
          ENDIF
.
.         Validate the check digit.
.         The algorithm used for the Provider Check Digit is:
.                   (digit 1 * 3) +
.                   (digit 2 * 5) +
.                   (digit 3 * 8) +
.                   (digit 4 * 4) +
.                   (digit 5 * 2) +
.                   (digit 6) +
.                   (PLV * 6)
.                   Divide the result by 11
.
.         The Practice Location Character (PLV) indicates the order of the
.         practices that a provider has been registered at. Each Practice
.         Location Character is allocated a Practice Location Value (PLV) that
.         is used in the Provider Check Digit Routine.  The values are below:
.
.                   Character  Value  Character  Value
.                       0        0        G        16
.                       1        1        H        17
.                       2        2        J        18
.                       3        3        K        19
.                       4        4        L        20
.                       5        5        M        21
.                       6        6        N        22
.                       7        7        P        23
.                       8        8        Q        24
.                       9        9        R        25
.                       A        10       T        26
.                       B        11       U        27
.                       C        12       V        28
.                       D        13       W        29
.                       E        14       X        30
.                       F        15       Y        31
.
.         The remainder is allocated an alpha that is the provider check digit
.         (See table below for details).
.               Remainder  Check-digit
.                   0          Y
.                   1          X
.                   2          W
.                   3          T
.                   4          L
.                   5          K
.                   6          J
.                   7          H
.                   8          F
.                   9          B
.                  10          A
.
.         Calculate the Practice Location Character (PLV).
.         If the seventh character in the provider number is a numeric, then
.         the PLV will equal the value of the seventh character.
.         If the seventh character in the provider number is not numeric, then
.         determine the PLV based on the table above.
.
VPRN0600  UNPACK    DIM8,PROVARRY[1],PROVARRY[2],PROVARRY[3],PROVARRY[4]:
                         PROVARRY[5],PROVARRY[6],PROVARRY[7],PROVARRY[8]
.
          MOVE      ZERO,FORM1
          WHILE     FORM1 < 7
            ADD       ONE,FORM1
            MOVE      PROVARRY[FORM1],PRVNARRY[FORM1]
          DO
.
          TYPE      PROVARRY[7]                  * seventh char. numeric ?
          GOTO      VPRN0700 IF EQUAL            * yes
.
          MOVE      ZERO,FORM2
          WHILE     FORM2 < 22
            ADD       ONE,FORM2
            MATCH     PROVARRY[7],PLVCARRY[FORM2] * 7th character match ?
            IF        @EQUAL
              MOVE      PLVNARRY[FORM2],PRVNARRY[7]  * yes - load value
              GOTO      VPRN0700
            ENDIF
          DO
.
VPRN0700  MOVE      ZERO,FORM4                   * initialise total
          MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 8
            MOVE      PRVNARRY[COUNTER],FORM2
            BRANCH    COUNTER,VPRN1000:
                              VPRN2000:
                              VPRN3000:
                              VPRN4000:
                              VPRN5000:
                              VPRN6000:
                              VPRN7000
.
VPRN1000    ASSIGN    ((FORM2*3) + FORM4),FORM4
            GOTO      VPRN8000
.
VPRN2000    ASSIGN    ((FORM2*5) + FORM4),FORM4
            GOTO      VPRN8000
.
VPRN3000    ASSIGN    ((FORM2*8) + FORM4),FORM4
            GOTO      VPRN8000
.
VPRN4000    ASSIGN    ((FORM2*4) + FORM4),FORM4
            GOTO      VPRN8000
.
VPRN5000    ASSIGN    ((FORM2*2) + FORM4),FORM4
            GOTO      VPRN8000
.
VPRN6000    ASSIGN    (FORM2 + FORM4),FORM4
            GOTO      VPRN8000
.
VPRN7000    ASSIGN    ((FORM2*6) + FORM4),FORM4
.
VPRN8000    ADD       ONE,COUNTER                * increment FP counter
          DO
.
          ASSIGN    (FORM4%11),FORM2             * remainder when divided by 11
          MOVE      ANSY,ANS                     * set default check digit
          LOAD      ANS,FORM2,ANSX,ANSW,ANST,ANSL,ANSK,ANSJ,ANSH,ANSF,ANSB,ANSA
.
          MATCH     ANS,PROVARRY[8]
          IF        !@EQUAL
            PACK      ERRMSG,SEGMTYPE,DOT,SEGFIELD
            ENDSET    ERRMSG
            IF        PROVFLAG = 1
              APPEND    "-Hospital provider no. (",ERRMSG
            ELSE
              APPEND    FIELDESC,ERRMSG
            ENDIF
            APPEND    DIM8,ERRMSG
            APPEND    ") ",ERRMSG
            APPEND    "check digit is not valid",ERRMSG
            RESET     ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VPRN9100
          ENDIF
.
          MOVE      ZERO,EXIT
          GOTO      VPRN9999
.
VPRN9100  MOVE      ONE,EXIT
.
VPRN9999  RETURN
+
.*****************************************************************************
.*                               LARY0000          Called by: INIT0000       *
.*          Load the array variables for the provider number PLV's           *
.*****************************************************************************
.
.         Load the characters used in the seventh position of the
.         provider number
.
LARY0000  MOVE      ANSA,PLVCARRY[1]
          MOVE      ANSB,PLVCARRY[2]
          MOVE      ANSC,PLVCARRY[3]
          MOVE      ANSD,PLVCARRY[4]
          MOVE      ANSE,PLVCARRY[5]
          MOVE      ANSF,PLVCARRY[6]
          MOVE      ANSG,PLVCARRY[7]
          MOVE      ANSH,PLVCARRY[8]
          MOVE      ANSJ,PLVCARRY[9]
          MOVE      ANSK,PLVCARRY[10]
          MOVE      ANSL,PLVCARRY[11]
          MOVE      ANSM,PLVCARRY[12]
          MOVE      ANSN,PLVCARRY[13]
          MOVE      ANSP,PLVCARRY[14]
          MOVE      ANSQ,PLVCARRY[15]
          MOVE      ANSR,PLVCARRY[16]
          MOVE      ANST,PLVCARRY[17]
          MOVE      ANSU,PLVCARRY[18]
          MOVE      ANSV,PLVCARRY[19]
          MOVE      ANSW,PLVCARRY[20]
          MOVE      ANSX,PLVCARRY[21]
          MOVE      ANSY,PLVCARRY[22]
.
.         Load the corresponding numbers associated with the characters
.         used in the seventh position of the provider number
.
          MOVE      TEN,PLVNARRY[1]
          MOVE      TEN1,PLVNARRY[2]
          MOVE      TEN2,PLVNARRY[3]
          MOVE      TEN3,PLVNARRY[4]
          MOVE      TEN4,PLVNARRY[5]
          MOVE      TEN5,PLVNARRY[6]
          MOVE      TEN6,PLVNARRY[7]
          MOVE      TEN7,PLVNARRY[8]
          MOVE      TEN8,PLVNARRY[9]
          MOVE      TEN9,PLVNARRY[10]
          MOVE      TWENTY,PLVNARRY[11]
          MOVE      TWENTY1,PLVNARRY[12]
          MOVE      TWENTY2,PLVNARRY[13]
          MOVE      TWENTY3,PLVNARRY[14]
          MOVE      TWENTY4,PLVNARRY[15]
          MOVE      TWENTY5,PLVNARRY[16]
          MOVE      TWENTY6,PLVNARRY[17]
          MOVE      TWENTY7,PLVNARRY[18]
          MOVE      TWENTY8,PLVNARRY[19]
          MOVE      TWENTY9,PLVNARRY[20]
          MOVE      THIRTY,PLVNARRY[21]
          MOVE      THIRTY1,PLVNARRY[22]
.
LARY9999  RETURN
+
.*****************************************************************************
.*        IO ROUTINES FOR TEMPORARY FILE                                     *
.*****************************************************************************
.
.         First tempfile routines
.
RSTEMP1   READ      LSTTEMP1,KEY16;;
          RETURN
.
RDTEMP1   MOVE      ZERO,OVRCD
          READ      LSTTEMP1,KEY16;LISTUNIQ,LISTINVN,LISTURNO,LISTDATE:
                                   LISTAMNT,LISTFLAG,LISTHOSP,LISTRTYP:
                                   LISTOKEY,LISTIHOS
          GOTO      OVERCOND IF OVER
          RETURN
.
RKTEMP1   MOVE      ZERO,OVRCD
          READKS    LSTTEMP1;LISTUNIQ,LISTINVN,LISTURNO,LISTDATE,LISTAMNT:
                             LISTFLAG,LISTHOSP,LISTRTYP,LISTOKEY,LISTIHOS
          GOTO      OVERCOND IF OVER
          RETURN
.
RPTEMP1   MOVE      ZERO,OVRCD
          READKP    LSTTEMP1;LISTUNIQ,LISTINVN,LISTURNO,LISTDATE,LISTAMNT:
                             LISTFLAG,LISTHOSP,LISTRTYP,LISTOKEY,LISTIHOS
          GOTO      OVERCOND IF OVER
          RETURN
.
UPTEMP1   UPDATE    LSTTEMP1;LISTUNIQ,LISTINVN,LISTURNO,LISTDATE,LISTAMNT:
                             LISTFLAG,LISTHOSP,LISTRTYP,LISTOKEY,LISTIHOS
          RETURN
.
WRTEMP1   WRITE     LSTTEMP1,KEY16;LISTUNIQ,LISTINVN,LISTURNO,LISTDATE:
                                   LISTAMNT,LISTFLAG,LISTHOSP,LISTRTYP:
                                   LISTOKEY,LISTIHOS
          RETURN
.
DETEMP1   DELETE    LSTTEMP1,KEY16
          RETURN
.
.         Second tempfile routines
.
RATEMP2   MOVE      ZERO,OVRCD
          READ      SRTTEMP2,KEY14;ANS
          GOTO      OVERCOND IF OVER
          RETURN
.
RSTEMP2   READ      SRTTEMP2,KEY14;;
          RETURN
.
RDTEMP2   MOVE      ZERO,OVRCD
          READ      SRTTEMP2,KEY14;SORTSDAT,SORTTRAN
          GOTO      OVERCOND IF OVER
          RETURN
.
RKTEMP2   MOVE      ZERO,OVRCD
          READKS    SRTTEMP2;SORTSDAT,SORTTRAN
          GOTO      OVERCOND IF OVER
          RETURN
.
RPTEMP2   MOVE      ZERO,OVRCD
          READKP    SRTTEMP2;SORTSDAT,SORTTRAN
          GOTO      OVERCOND IF OVER
          RETURN
.
UPTEMP2   UPDATE    SRTTEMP2;SORTSDAT,SORTTRAN
          RETURN
.
WRTEMP2   WRITE     SRTTEMP2,KEY14;SORTSDAT,SORTTRAN
          RETURN
.
DETEMP2   DELETE    SRTTEMP2,KEY14
          RETURN
+
.*****************************************************************************
.         I/O Routines
.*****************************************************************************
.
          INC       STD001IO
.
          INC       PATHSPKY
          INC       TFILENAM
.
.         INC       AAEDTRIO/INC
          INC       ALLLNKIO/INC
          INC       ALLREFIO/INC
          INC       IBASEQIO/INC
          INC       OUTBOAIO/INC
          INC       OUTBB1IO/INC
          INC       OUTDTRIO/INC
          INC       OUTECAIO/INC
          INC       OUTECTIO/INC
          INC       OUTHEDIO/INC
          INC       OUTIBHIO/INC
          INC       OUTSESIO/INC
          INC       OUTSITIO/INC
          INC       PATCODIO/INC
          INC       PATCRTIO/INC
          INC       PATHSPIO/INC
          INC       PATINVIO/INC
          INC       PATMA1IO/INC
          INC       PATVISIO/INC
          INC       PMSHCPIO/INC
          INC       PMSPX2IO/INC
          INC       PRIDOCIO/INC
          INC       PRIDTRIO/INC
          INC       PRIHDBIO/INC
          INC       PRIHREIO/INC
          INC       PRIINVIO/INC
          INC       PRIPRAIO/INC
          INC       WEBERRIO/INC
          INC       WEBSECIO/INC

