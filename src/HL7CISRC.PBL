.***************************************************************************
.* System    :   System Management                                         *
.* Program   :   HL7CISRC                                                  *
.* Desc      :   HL7 Message Receiving Server                              *
.***************************************************************************
.* Date      :   20/02/2004                                                *
.* Author    :   Steve Armstrong                                           *
.* Function  :   This program will accept HL7 messages via a TCP/IP port.  *
.*               It will then validate the message and send an             *
.*               acknowledgement message back to the sender.  All messages *
.*               received are recorded for reviewing.                      *
.*               The first stage of message validation is purely at the    *
.*               HL7 level.  If this validation is successful, then the    *
.*               message will be processed by a subroutine specific for the*
.*               message type.  This subroutine will validate data against *
.*               the data tables then, if successful, update the tables    *
.*               accordingly.                                              *
.*                                                                         *
.*       Note:   Each read from the socket (via RECV) is into a buffer     *
.*               which can hold 4000 characters.  We may receive as few as *
.*               one character or as many as 4000 characters on any given  *
.*               read (RECV), so we need to keep reading while there are   *
.*               characters coming through.                                *
.*               For example, a message which is 30 characters long, may   *
.*               come through in 3 reads (RECV), the first read receiving  *
.*               10 characters, the second 15 characters, and the third    *
.*               5 characters.  It may also be the case that characters    *
.*               from two separate messages may come through in a single   *
.*               read ie, the tail of one message and the start of the     *
.*               next message.                                             *
.*                                                                         *
.*  Segments Validated                                                     *
.*            MSH - Message Header                                         *
.*            EVN - Event Type                                             *
.*            PID - Patient Identification                                 *
.*            NK1 - Next of Kin                                            *
.*            PV1 - Patient Visit                                          *
.*            PV2 - Patient Visit - Additional Information                 *
.*            AL1 - Patient Allergy Information                            *
.*            DG1 - Diagnosis Information                                  *
.*            MRG - Merge Patient Information                              *
.*            TXA - Transcription Document Header                          *
.*            IN1 - Insurance                                              *
.*            MFI - Master File Identification                             *
.*            MFE - Master File Entry                                      *
.*            STF - Staff Identification                                   *
.*            PRA - Practitioner Detail                                    *
.*            SCH - Schedule Activity Information                          *
.*            OBX - Observation/Result                                     *
.*            RGS - Resource Group                                         *
.*            AIS - Appointment Information - Services                     *
.*            AIL - Appointment Information - Location Resource            *
.*            AIP - Appointment Information - Personnel Resource           *
.*            RF1 - Referral Information                                   *
.*            PRD - Provider Data                                          *
.*            PR1 - Procedures                                             *
.*            ZAL - Full Patient Alerts                                    *
.*            ZXP - Patient Extra Information                              *
.*            ZXV - Extra Visit Information                                *
.*            ZSD - Medical Record Locations Information                   *
.*            ZCT - Clinic Type Information                                *
.*            ZLH - Doctor/Hospital Information                            *
.*            ZLU - Doctor/Hospital/Unit Information                       *
.*            ZCM - Clinic Master Information                              *
.*            GT1 - Guarantor                                              *
.*            ZLS - Legal Status                                           *
.*            ZBR - Ward/Bed Request Information                           *
.*                                                                         *
.*  HL7 Messages Processed                                                 *
.*            A01 - Admit/Visit Notification                               *
.*            A02 - Transfer a Patient                                     *
.*            A03 - Discharge/End Visit                                    *
.*            A04 - Register a Patient                                     *
.*            A05 - Pre-admit a Patient                                    *
.*            A08 - Update Patient Information                             *
.*            A11 - Cancel Admit/Visit Notification                        *
.*            A12 - Cancel Transfer                                        *
.*            A13 - Cancel Discharge/End Visit                             *
.*            A14 - Pending Admit                                          *
.*            A19 - Query                                                  *
.*            A21 - Patient "Leave of Absence"                             *
.*            A22 - Patient Return From "Leave of Absence"                 *
.*            A27 - Cancel Pending Admit                                   *
.*            A28 - Add Person Information                                 *
.*            A31 - Update Person Information                              *
.*            A34 - Merge Patient Information - Patient ID Only            *
.*            A38 - Cancel Pre-admit                                       *
.*            A44 - Move Visit Information                                 *
.*            T01 - Original Document Notification                         *
.*            T03 - Document Status Change Notification                    *
.*            T11 - Document Cancel Notification                           *
.*            M02 - Staff/Practitioner Master File                         *
.*            S12 - Notification of New Appointment Booking                *
.*            S14 - Notification of Appointment Modification               *
.*            S15 - Notification of Appointment Cancellation               *
.*            I12 - Add Patient Referral                                   *
.*            I13 - Update Patient Referral                                *
.*            I14 - Cancel Patient Referral                                *
.*                                                                         *
.***************************************************************************
.*                                                                         *
.*  Mod's     :                                                            *
.***************************************************************************
.*        V10.15.02 31/10/2019  Thanh T          TSK 0856646               *
.*                  Recompiled for HL7CISVR changes                        *
.*        V10.15.01 07/10/2019  Ken Bell         TSK 0875392               *
.*                  Recompiled for HL7CISVR - Cancelled ACC Status         *
.*        V10.14.01 23/05/2019  Jill Parkinson Task 0875286                *
.*                  Added move zero to F1 for IBCNMHPI in case of spaces   *
.*        V10.13.03 09/01/2019  Ania P           TSK 0865039               *
.*                  Changed population of MSH011                           *
.*        V10.13.02 03/10/2018  Davin            TSK 0857734               *
.*                  Send "" in ZXP.2 if medi exp. date is blank (WRZXP000) *
.*        V10.13.01 28/08/2018  Davin            TSK 0857732               *
.*                  Added NK1 segment to A19 response (WRNK1000)           *
.***************************************************************************
.*        V10.12.09 19/06/2018  Steve Armstrong  TSK 0854259               *
.*                  Added handling of ZBR segment.                         *
.*        V10.12.08 07/05/2018  Steve Armstrong  TSK 0837181               *
.*                  Fixed I*M after connection is lost by moving PROC0100  *
.*                  label back to the LISTEN command instead of the        *
.*                  ACCEPT command.                                        *
.*        V10.12.07 01/05/2018  Davin            TSK 0844685               *
.*                  Added 8 new fields to A19 response (WRPID000)          *
.*        V10.12.06 20/04/2018  Davin            TSK 0844685               *
.*                  Added NSLHD PersonID to PID.3 (WRPID000)               *
.*                  Cater for medicare number in QRD.8 for APN             *
.*        V10.12.05 18/04/2018  Davin            TSK 0844685               *
.*                  Added PID.9 (Aliases) and PID.33 (last update date)    *
.*        V10.12.04 09/03/2018  Davin            TSK 0844685               *
.*                  Added DSC segment for A19 continuation pointer         *
.*        V10.12.03 01/03/2018  Davin            TSK 0844685               *
.*                  Produce test response to A19 query (WRQRD000/WRPID000) *
.*        V10.12.02 01/02/2018  Davin            TSK 0844685               *
.*                  Fixed a few typos                                      *
.*        V10.12.01 19/01/2018  Steve Armstrong  TSK 0844685               *
.*                  Added handling of A19 Query (for HEA UPI Interface)    *
.***************************************************************************
.*        V10.11.02 06/11/2017  Steve Armstrong  TSK 0845336               *
.*                  Added handling of ZLS segment.                         *
.*                  Added validation of Referral Category (RF1.5).         *
.*                  Mods to validation of Originating Referral Identifier  *
.*                  (RF1.6) depending on the value of Referral Category    *
.*                  (RF1.5).                                               *
.*        V10.11.01 14/09/2017  Thanh T.         TSK 0821710               *
.*                  Recompiled for HL7CISVR                                *
.***************************************************************************
.*        V10.05.01 05/11/2014  Steve Armstrong  CAR 306617                *
.*                  Recompiled for changes to HL7CISVR                     *
.***************************************************************************
.*        V10.03.08 17/07/2013 Steve Armstrong  CAR 268961                 *
.*                  Added code to handle the following new segments:       *
.*                  ZCT, ZLH, ZLU, ZCM & ZSD.                              *
.*                  Also fixed display of data received and processed.     *
.*        V10.03.07 31/01/2013 Steve Armstrong  CAR 262292                 *
.*                  Added code to handle ZXV.23 - ZXV.32.                  *
.*        V10.03.06 20/12/2012 Steve Armstrong  CAR 278463                 *
.*                  Added value 26 to CISMNUMB definition.                 *
.*        V10.03.05 16/05/2012 Steve Armstrong  CAR 256322                 *
.*                  Mods to ignore validation of ZAL.11/12 for medical     *
.*                  warnings where the NHI interface is turned on.         *
.*        V10.03.04 23/04/2012 Steve Armstrong  CAR 263812                 *
.*                  Recompiled for changes to HL7CISVR.                    *
.*                  Added code to handle ZXP.16 - ZXP.21.                  *
.*                  Added M01 stat handling.                               *
.*        V10.03.03 05/04/2012 Steve Armstrong  CAR 263261                 *
.*                  Recompiled for changes to HL7CISVR.                    *
.*                  Added code to handle ZAL.15.                           *
.*        V10.03.02 21/02/2012 Steve Armstrong  CAR 259400                 *
.*                  Removed FD's now declared in HL7CISVR.                 *
.*                  Recompiled for changes to HL7COMN.                     *
.*        V10.03.01 28/10/2011 Steve Armstrong  CAR 249257                 *
.*                  Added GT1 segment                                      *
.***************************************************************************
.*        V10.02.05 11/10/2011 Steve Armstrong  CAR 251644                 *
.*                  Added fields ZXV020 through ZXV022                     *
.*        V10.02.04 04/10/2011 Steve Armstrong  CAR 246137                 *
.*                  Updated for changes to ZXP segment and added ZXV       *
.*                  segment.                                               *
.*        V10.02.03 11/08/2011 Steve Armstrong  CAR 246137                 *
.*                  Mods to cater for ZXP segment.                         *
.*        V10.02.02 20/07/2011 Steve Armstrong  CAR 246138                 *
.*                  Mods to cater for ZAL segment.                         *
.*                  Also removed update question as this is only a message *
.*                  validation service.                                    *
.*                  Changed TMPSTRNG & RPLYMESS to DIM 4000.               *
.*        V10.02.01 06/01/2011 Steve Armstrong  CAR 235689                 *
.*                  Mods to key in TCP/IP port number instead of using     *
.*                  parameter.                                             *
.***************************************************************************
.*        V10.01.01 10/03/2011 Jill Parkinson CAR 233088                   *
.*                  Added pmsvx1af                                         *
.***************************************************************************
.*        V10.00.01 27/08/2009   CAR 135505                                *
.*                  Mods to handle I12, I13 and I14 messages               *
.***************************************************************************
.*        V9.10.01  26/08/2008   CAR 147323                                *
.*                  Mods to handle S12, S14 and S15 messages               *
.***************************************************************************
.*        V9.08.01  10/11/2006   CAR 124393                                *
.*                  Mods to send an ERR segment if there is an error       *
.***************************************************************************
.*        V9.06.01  18/04/2006   CAR 81335                                 *
.*                  Added code to handle an M02 message                    *
.***************************************************************************
.*        V9.04.01  20/07/2005   CAR                                       *
.*                  Added code to handle an A44 message                    *
.***************************************************************************
.*        V9.03.01  04/06/2004   CAR 52367  (Product Integration)          *
.*                  Mods to make this server more generic so that it can   *
.*                  be used as a standard HL7 message receiver where all   *
.*                  messages are logged for reviewing.  At the same time,  *
.*                  code has been added to accept a T01, T03 & T11 message *
.*                  from CIS to update PAS with the date of a discharge    *
.*                  summary.                                               *
.***************************************************************************
.
.  Things to do
. ---------------
. - Add code to validate segments and sequence of segments for a given message.
. - Logging of messages and errors to file (also need to log messages when 
.   connection is lost or timed out, or message separator not found).
. - Fix ERORLINE logic for capturing first error message.
. - Fix reply messages (based on whether errors occured or not).  Only need to
.   return the first error encountered in ACK, but log all errors for viewing.
. - Create new program for viewing logged messages & errors (like IBASY95).  May
.   need facility to change status of message so that it can be reprocessed???
. - Need to add facility to control whether or not data is written to the 
.   database (flag to indicate this as well in message file)
. - GSEG0000 if error, then need to store characters for fullmess, etc
. - If no field separator found, where should code go (may be another SOB
.   in current tmpstrng
. - Need to add code for display of message counters (received & rejected)
.
          INC       STD002FD
.
.         File Definitions
.         ----------------
.
          INC       HL7CISVR/INC
.
LISSOCKT  SOCKET    ASCII,FIXED=1   * socket on which to listen for connections
.
.
. LOCAL VARIABLES
. ---------------
ADDRNUMB  FORM      1                  * address field number
.
A01FAIL   FORM      8
A01SENT   FORM      8
A02FAIL   FORM      8
A02SENT   FORM      8
A03FAIL   FORM      8
A03SENT   FORM      8
A04FAIL   FORM      8
A04SENT   FORM      8
A05FAIL   FORM      8
A05SENT   FORM      8
A08FAIL   FORM      8
A08SENT   FORM      8
A11FAIL   FORM      8
A11SENT   FORM      8
A12FAIL   FORM      8
A12SENT   FORM      8
A13FAIL   FORM      8
A13SENT   FORM      8
A14FAIL   FORM      8
A14SENT   FORM      8
A19FAIL   FORM      8
A19SENT   FORM      8
A21FAIL   FORM      8
A21SENT   FORM      8
A22FAIL   FORM      8
A22SENT   FORM      8
A27FAIL   FORM      8
A27SENT   FORM      8
A28FAIL   FORM      8
A28SENT   FORM      8
A31FAIL   FORM      8
A31SENT   FORM      8
A34FAIL   FORM      8
A34SENT   FORM      8
A38FAIL   FORM      8
A38SENT   FORM      8
A44FAIL   FORM      8
A44SENT   FORM      8
.
CISCOUNT  FORM      2
CISMNUMB  FORM      2                  * Message number
.                                           1 = admission (A01)
.                                           2 = transfer (A02)
.                                           3 = discharge (A03)
.                                           4 = register patient (A04)
.                                           5 = new O/P booking (A05)
.                                           6 = update (A08)
.                                           7 = cancel admit (A11)
.                                           8 = cancel transfer (A12)
.                                           9 = cancel discharge (A13)
.                                          10 = pre-admission (A14)
.                                          11 = on-leave (A21)
.                                          12 = return from leave (A22)
.                                          13 = cancel preadmit (A27)
.                                          14 = register pmi (A28)
.                                          15 = update pmi (A31)
.                                          16 = merge patient (A34)
.                                          17 = cancel O/P booking  (A38)
.                                          18 = change U/R for visit (A44)
.                                          19 = doct. staff messages (M02)
.                                          20 = new theatre booking (S12)
.                                          21 = modified theatre booking (S14)
.                                          22 = cancelled theatre booking (S15)
.                                          23 = add patient referral (I12)
.                                          24 = modify patient referral (I13)
.                                          25 = cancel patient referral (I14)
.                                          26 = O/P Clinic Maintenance (M01)
.                                          27 = Query (A19)
CISMTYPE  DIM       3                  * HL7 message type (eg, A21)
CISSTRNG  DIM       1000
CISTCPIP  DIM       5                  * receiving port number
COMPNT01  DIM       500                * HL7 field component 1
COMPNT02  DIM       500                * HL7 field component 2
COMPNT03  DIM       500                * HL7 field component 3
COMPNT04  DIM       500                * HL7 field component 4
COMPNT05  DIM       500                * HL7 field component 5
COMPNT06  DIM       500                * HL7 field component 6
COMPNT07  DIM       500                * HL7 field component 7
COMPNT08  DIM       500                * HL7 field component 8
COMPNT09  DIM       500                * HL7 field component 9
COMPNT10  DIM       500                * HL7 field component 10
COMPNT11  DIM       500                * HL7 field component 11
COMPNT12  DIM       500                * HL7 field component 12
COMPNT13  DIM       500                * HL7 field component 13
COMPNT14  DIM       500                * HL7 field component 14
COMPNT15  DIM       500                * HL7 field component 15
COMPNT16  DIM       500                * HL7 field component 16
COMPNT17  DIM       500                * HL7 field component 17
COMPNT18  DIM       500                * HL7 field component 18
COMPNT19  DIM       500                * HL7 field component 19
COMPNT20  DIM       500                * HL7 field component 20
COUNTR    FORM      2
CSEC      DIM       2
CURRDATE  DIM       8
.
DATETIME  DIM       14                 * current date/time
DIM2C     DIM       2             * century variable (cc)
DIM2Y     DIM       2             * year variable    (yy)
DIM2M     DIM       2             * month variable   (mm)
DIM2D     DIM       2             * day variable     (dd)
DIM4      DIM       4             * full year work variable (ccyy)
DIM40     DIM       40
DIM8      DIM       8
DISCCODE  DIM       3
DISCCATG  DIM       2
DISPFLAG  FORM      1             * display to screen flag
.                                     0 = don't display messages to screen
.                                     1 = display messages to screen (debug)
DSC00101  DIM       180
DSPSTRNG  DIM       60
.
EOSFLAG   FORM      1             * end of string flag
.                                     0 = not end of string
.                                     1 = end of string
ERORCODE  DIM       80            * error code for ERR001
ERORFLAG  FORM      1             * error flag
.                                     0 = no errors occured
.                                     1 = errors occured
ERORLINE  DIM       100           * error description
ERRORCNT  FORM      3             * error count
ERRORFLD  DIM       3             * error field sequence number
ERRORSEG  DIM       3             * error segment
ERRORTXT  DIM       80            * error text
.
FIELDCNT  FORM      3             * HL7 field counter
FIELDNO   FORM      3             * segment field counter
FORM3     FORM      3
.
HL7SURNM  DIM       30            * query parameters (based on patgsrnf sizes)
HL7FGNAM  DIM       30
HL7SGNAM  DIM       30
HL7GENDR  DIM       1
HL7BTHDT  DIM       8
HL7CONTP  DIM       180
HL7SMODE  FORM      1             * HL7 mode
.                                   0 = Initial search
.                                   1 = Continuation search
.                                   2 = Retrieve Patient using UPI
.                                   3 = Test Connection Only
HOURTM    DIM       2
.
I12FAIL   FORM      8
I12SENT   FORM      8
I13FAIL   FORM      8
I13SENT   FORM      8
I14FAIL   FORM      8
I14SENT   FORM      8
.
MESSTRNG  DIM       999           * reply message string
MESSTYPE  DIM       3             * message type (ie A01)
MINTIME   DIM       2
.
MTYPARRY  DIM       3[27]
M01FAIL   FORM      8
M01SENT   FORM      8
M02FAIL   FORM      8
M02SENT   FORM      8
.
NEWCOUNT  FORM      3
NK1COUNT  FORM      3
.
OLDURNO   DIM       8
.
QRD001    DIM       26
QRD002    DIM       1
QRD003    DIM       1
QRD004    DIM       10
QRD005    DIM       1
QRD006    DIM       26
QRD007    DIM       10
QRD00701  DIM       7
QRD00702  DIM       10
QRD008    DIM       60
QRD00801  DIM       10
QRD00802  DIM       40
QRD00803  DIM       40
QRD00804  DIM       40
QRD009    DIM       60
QRD00901  DIM       60
QRD00902  DIM       60
QRD00903  DIM       60
QRD010    DIM       60
QRD01001  DIM       60
QRD01002  DIM       60
QRD01003  DIM       60
QRD011    DIM       20
QRD012    DIM       1
.
QRF001    DIM       20
QRF002    DIM       26
QRF003    DIM       26
QRF004    DIM       60
QRF00401  DIM       60
QRF00402  DIM       60
QRF005    DIM       60
QRF006    DIM       12
QRF007    DIM       12
QRF008    DIM       12
QRF009    DIM       60
.
RPLYMESS  DIM       4000
.
SAVAPPLI  DIM       180           * save application variable
SAVERTXT  DIM       80            * saved error text
SAVFACIL  DIM       180           * save facility variable
SAVFIELD  DIM       3             * saved field sequence number for errors
SAVMESID  DIM       20            * saved incoming message id
SAVSEGMT  DIM       3             * saved segment for errors
SECTIME   DIM       2
SEGMENT   DIM       3                  * 3 character HL7 segment code
SEGNUMBR  FORM      2             * segment number
.                                     1 = MSH
.                                     2 = EVN
.                                     3 = PID
.                                     4 = NK1
.                                     5 = PV1
.                                     6 = PV2
.                                     7 = AL1
.                                     8 = DG1
.                                     9 = MRG
.                                    10 = TXA
.                                    11 = IN1
.                                    12 = ZPM (Oacis Interface)
.                                    13 = ZAT (Oacis Interface)
.                                    14 = DRG
.                                    15 = MFI
.                                    16 = MFE
.                                    17 = STF
.                                    18 = PRA
.                                    19 = SCH
.                                    20 = OBX
.                                    21 = RGS
.                                    22 = AIS
.                                    23 = AIL
.                                    24 = AIP
.                                    25 = RF1
.                                    26 = PRD
.                                    27 = PR1
.                                    28 = ZAL
.                                    29 = ZXP
.                                    30 = ZXV
.                                    31 = GT1
.                                    32 = ZSD
.                                    33 = ZCT
.                                    34 = ZLH
.                                    35 = ZLU
.                                    36 = ZCM
.                                    37 = ZLS
.                                    38 = QRD
.                                    39 = QRF
.                                    40 = ZBR
SEPRATOR  DIM       1                  * field separator character variable
UPISFLAG  FORM      1             * Search flag
.                                     0 = initial name search
.                                     1 = continue search
.                                     2 = retrieve patient
STRNGLEN  FORM      4
S12FAIL   FORM      8
S12SENT   FORM      8
S14FAIL   FORM      8
S14SENT   FORM      8
S15FAIL   FORM      8
S15SENT   FORM      8
.
TIMEOVAR  DIM       6
TMPSTRNG  DIM       4000               * buffer for reading in message
.
T01FAIL   FORM      8
T01SENT   FORM      8
T03FAIL   FORM      8
T03SENT   FORM      8
T11FAIL   FORM      8
T11SENT   FORM      8
.
VISNUMBR  DIM       8
.
XCONTACT  FORM      1
.
ZAT001    DIM       1
ZAT002    DIM       30
ZAT003    DIM       1
ZAT004    DIM       1
ZAT005    DIM       1
ZAT006    DIM       1
ZAT007    DIM       1
ZAT008    DIM       1
.
ZPM001    DIM       30
ZPM002    DIM       1
ZPM003    DIM       60
ZPM004    DIM       1
ZPM005    DIM       1
ZPM006    DIM       1
ZPM007    DIM       1
.
ZXP00101  DIM       8
ZXP00201  DIM       8
.
.
. PROGRAM CONSTANTS
. -----------------
AILSEGMT  INIT      "AIL"
AIPSEGMT  INIT      "AIP"
AISSEGMT  INIT      "AIS"
AL1SEGMT  INIT      "AL1"
.
CARET     INIT      "^"
CRETURN   INIT      015                * Carriage Return
.
DG1SEGMT  INIT      "DG1"
DRGSEGMT  INIT      "DRG"
.
ENDBLOCK  INIT      034                * End of Block
EVNSEGMT  INIT      "EVN"
.
GT1SEGMT  INIT      "GT1"
.
IN1SEGMT  INIT      "IN1"
.
MFESEGMT  INIT      "MFE"
MFISEGMT  INIT      "MFI"
MRGSEGMT  INIT      "MRG"
MSHSEGMT  INIT      "MSH"
MTYPEA27  INIT      "ADT^A27^ADT_A02"
.
NK1SEGMT  INIT      "NK1"
.
OBXSEGMT  INIT      "OBX"
.
PIPE      INIT      "|"
PIDSEGMT  INIT      "PID"
PRASEGMT  INIT      "PRA"
PRDSEGMT  INIT      "PRD"
PR1SEGMT  INIT      "PR1"
PV1SEGMT  INIT      "PV1"
PV2SEGMT  INIT      "PV2"
.
QRDSEGMT  INIT      "QRD"
QRFSEGMT  INIT      "QRF"
.
RF1SEGMT  INIT      "RF1"
RGSSEGMT  INIT      "RGS"
.
SCHSEGMT  INIT      "SCH"
SP100     INIT      "                                                  ":
                    "                                                  "
STFSEGMT  INIT      "STF"
STRTBLOK  INIT      013                * Start of Block
.
TXASEGMT  INIT      "TXA"
.
ZALSEGMT  INIT      "ZAL"
ZATSEGMT  INIT      "ZAT"
ZBRSEGMT  INIT      "ZBR"
ZCMSEGMT  INIT      "ZCM"
ZCTSEGMT  INIT      "ZCT"
ZLHSEGMT  INIT      "ZLH"
ZLSSEGMT  INIT      "ZLS"
ZLUSEGMT  INIT      "ZLU"
ZPMSEGMT  INIT      "ZPM"
ZSDSEGMT  INIT      "ZSD"
ZXPSEGMT  INIT      "ZXP"
ZXVSEGMT  INIT      "ZXV"
.
.
.-----------------------------------------------------------------------
PRGID     INIT      "HL7CISRC"
PRGNAM    INIT      "Test HL7 Message Receiving Server"
VERSION   INIT      "V12.00.00"
.-----------------------------------------------------------------------
+
.*************************************************************************
.*                             MAIN0000                                  *
.*                  Main processing routine                              *
.*************************************************************************
.
MAIN0000  CALL      SETX0000                     * set up common
.
          CALL      INIT0000                     * initialisation routine
.
          CALL      PROC0000                     * listen for & process message
.
MAIN9999  STOP
+
.*****************************************************************************
.*                         INIT0000                Called by:                *
.*               Initialisation routine                                      *
.*****************************************************************************
.
INIT0000  CALL      DISPHEAD                     * display screen header
.
          DISPLAY   *P1:24,*EL,*P54:24,"Opening":
                    *P64:24,"controlf"
          OPEN      CONTROLF,"controlf"
          READ      CONTROLF,TWENTY1;*138,PTCNNHII
.
          DISPLAY   *P64:24,"patgsrnf"
          OPEN      PATGSRN1,"patgsrnf"
          OPEN      PATGSRN2,"patgsrnf"
.
          DISPLAY   *P64:24,"patma1af"
          OPEN      PATMA1A1,"patma1af"
          OPEN      PATMX1A1,"patmx1af"
.
          DISPLAY   *P64:24,"pmspx2af"
          OPEN      PMSPX2A1,"pmspx2af"
.
          DISPLAY   *P64:24,"patmi1af"
          OPEN      PATMI1A1,"patmi1af"
.
          DISPLAY   *P64:24,"pmsvx1af"
          OPEN      PMSVX1A1,"pmsvx1af"
.
          MOVE      ZERO,XCONTACT
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      PMSCEXA1,"pmscexaf"
          TRAPCLR   IO
          IF        OVRCD=1
            MOVE      ONE,XCONTACT
          ENDIF
.
.         Load up the message array with the valid messages which can
.         be accepted
.
          MOVE      "A01",MTYPARRY[1]         * set up message type array
          MOVE      "A02",MTYPARRY[2]
          MOVE      "A03",MTYPARRY[3]
          MOVE      "A04",MTYPARRY[4]
          MOVE      "A05",MTYPARRY[5]
          MOVE      "A08",MTYPARRY[6]
          MOVE      "A11",MTYPARRY[7]
          MOVE      "A12",MTYPARRY[8]
          MOVE      "A13",MTYPARRY[9]
          MOVE      "A14",MTYPARRY[10]
          MOVE      "A21",MTYPARRY[11]
          MOVE      "A22",MTYPARRY[12]
          MOVE      "A27",MTYPARRY[13]
          MOVE      "A28",MTYPARRY[14]
          MOVE      "A31",MTYPARRY[15]
          MOVE      "A34",MTYPARRY[16]
          MOVE      "A38",MTYPARRY[17]
          MOVE      "A44",MTYPARRY[18]
          MOVE      "M02",MTYPARRY[19]
          MOVE      "S12",MTYPARRY[20]
          MOVE      "S14",MTYPARRY[21]
          MOVE      "S15",MTYPARRY[22]
          MOVE      "I12",MTYPARRY[23]
          MOVE      "I13",MTYPARRY[24]
          MOVE      "I14",MTYPARRY[25]
          MOVE      "M01",MTYPARRY[26]
          MOVE      "A19",MTYPARRY[27]
.
INIT1000  KEYIN     *P1:4,*EF,"Display messages to the screen (",*V2LON,*DV:
                    ANSY,*HOFF,*DV,SLASH,*V2LON,*DV,ANSN,*HOFF,") :":
                    *P40:4,*V2LON,ANS
.
          PACK      ANS,ANS,SP1
          REP       UPPLOW,ANS
.
          MATCH     ANSY,ANS
          IF        @EQUAL
            MOVE      ONE,DISPFLAG
            GOTO      INIT9999
          ENDIF
.
          MATCH     ANSN,ANS
          IF        @EQUAL
            MOVE      ZERO,DISPFLAG
            GOTO      INIT9000
          ENDIF
.
          BEEP
          GOTO      INIT1000
.
INIT9000  CALL      BACK0000
.
INIT9999  RETURN
+
.*****************************************************************************
.*                              PROC0000             Called by: MAIN0000     *
.*           Listen for and process an incoming message                      *
.*****************************************************************************
.
.         Get the solicited socket on which we will be listening.
.
PROC0000  KEYIN     *P1:5,"TCP/IP Port:":
                    *P14:5,*V2LON,CISTCPIP
.
          PACK      CISTCPIP,CISTCPIP,SP5
          MATCH     SP5,CISTCPIP                  * anything entered ?
          GOTO      PROC9100 IF EQUAL             * no - finished
.
.         Listen on the port for a connection
.
          IF        DISPFLAG = 1
            DISPLAY   "Listening on port: ",*V2LON,CISTCPIP,*R,*N;
          ENDIF
PROC0100  LISTEN    LISSOCKT,CISTCPIP,REUSEADDR
.
          IF        DISPFLAG = 1
            DISPLAY   "Accepting connections on port: ",*V2LON,CISTCPIP,*R,*N;
          ENDIF
          ACCEPT    COMSOCKT,LISSOCKT
          IF        DISPFLAG = 1
            DISPLAY   "Accepted connection on port: ",*V2LON,CISTCPIP,*R,*N;
          ENDIF
.
.         Wait for a new message to come through
.
PROC0500  IF        DISPFLAG = 1
            DISPLAY   "Waiting for next message....",*R,*N;
          ENDIF
          MOVE      ZERO,ERORFLAG                * initialise error flag
          MOVE      ZERO,ERRORCNT                * initialise error count
          MOVE      SP20,SAVMESID                * initialise message id
          CALL      GTSTR000                     * get next 4000 chars (or less)
          BRANCH    EXIT,PROC9500:               * timeout
                         PROC9000                * connection lost
.
.         Search the string for a start of block (ASCII 11) character
.
          SCAN      STRTBLOK,TMPSTRNG            * sob found ?
          GOTO      PROC0500 IF NOT EQUAL        * no - ignore message
.
          IF        DISPFLAG = 1
            DISPLAY   "Start of Block found",*R,*N
          ENDIF
.
.         The next segment needs to be processed, so read in the next segment id
.
PROC4000  PACK      SEGSTRNG,SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100
          CLEAR     SEGSTRNG                     * clear segment string
.
          CALL      GSEG0000                     * validate segment code
          BRANCH    EXIT,PROC9500:               * connection timeout
                         PROC9000:               * connection lost
                         PROC4000:               * start of block
                         PROC6000:               * end of block
                         PROC4000                * end of segment
.
          IF        DISPFLAG = 1
            DISPLAY   "Processing segment: [",SEGMENT,"]",*R,*N;
          ENDIF
.
.         We need to validate the segment for the message type, and
.         make sure that the segment is in the correct sequence for the
.         message
.
          CALL      VSEG0000                     * validate segment
.
.         If a valid segment id has been found, clear the segment fields
.
          PERFORM   SEGNUMBR,CMSH0000:           * MSH
                             CEVN0000:           * EVN
                             CPID0000:           * PID
                             CNK10000:           * NK1
                             CPV10000:           * PV1
                             CPV20000:           * PV2
                             CAL10000:           * AL1
                             CDG10000:           * DG1
                             CMRG0000:           * MRG
                             CTXA0000:           * TXA
                             CIN10000:           * IN1
                             CZPM0000:           * ZPM
                             CZAT0000:           * ZAT
                             CDRG0000:           * DRG
                             CMFI0000:           * MFI
                             CMFE0000:           * MFE
                             CSTF0000:           * STF
                             CPRA0000:           * PRA
                             CSCH0000:           * SCH
                             COBX0000:           * OBX
                             CRGS0000:           * RGS
                             CAIS0000:           * AIS
                             CAIL0000:           * AIL
                             CAIP0000:           * AIP
                             CRF10000:           * RF1
                             CPRD0000:           * PRD
                             CPR10000:           * PR1
                             CZAL0000:           * ZAL
                             CZXP0000:           * ZXP
                             CZXV0000:           * ZXV
                             CGT10000:           * GT1
                             CZSD0000:           * ZSD
                             CZCT0000:           * ZCT
                             CZLH0000:           * ZLH
                             CZLU0000:           * ZLU
                             CZCM0000:           * ZCM
                             CZLS0000:           * ZLS
                             CQRD0000:           * QRD
                             CQRF0000:           * QRF
                             CZBR0000            * ZBR
.
          MOVE      ZERO,FIELDNO                 * initialise seg. field count
.
.         Read in the rest of the segment until an end of segment character
.         (ASCII 13 - Carriage return) is found.
.
PROC5000  CALL      GCHR0000                     * get next character in message
          BRANCH    EXIT,PROC9500:               * connection timeout
                         PROC9000:               * connection lost
                         PROC4000:               * start of block
                         PROC6000:               * end of block
                         PROC5500:               * end of segment
                         PROC0500                * no field separator
.
.         A valid character has been found so load it into the relevant
.         segment field (according to FIELDNO).
.
          PERFORM   SEGNUMBR,LMSH0000:           * MSH
                             LEVN0000:           * EVN
                             LPID0000:           * PID
                             LNK10000:           * NK1
                             LPV10000:           * PV1
                             LPV20000:           * PV2
                             LAL10000:           * AL1
                             LDG10000:           * DG1
                             LMRG0000:           * MRG
                             LTXA0000:           * TXA
                             LIN10000:           * IN1
                             LZPM0000:           * ZPM
                             LZAT0000:           * ZAT
                             LDRG0000:           * DRG
                             LMFI0000:           * MFI
                             LMFE0000:           * MFE
                             LSTF0000:           * STF
                             LPRA0000:           * PRA
                             LSCH0000:           * SCH
                             LOBX0000:           * OBX
                             LRGS0000:           * RGS
                             LAIS0000:           * AIS
                             LAIL0000:           * AIL
                             LAIP0000:           * AIP
                             LRF10000:           * RF1
                             LPRD0000:           * PRD
                             LPR10000:           * PR1
                             LZAL0000:           * ZAL
                             LZXP0000:           * ZXP
                             LZXV0000:           * ZXV
                             LGT10000:           * GT1
                             LZSD0000:           * ZSD
                             LZCT0000:           * ZCT
                             LZLH0000:           * ZLH
                             LZLU0000:           * ZLU
                             LZCM0000:           * ZCM
                             LZLS0000:           * ZLS
                             LQRD0000:           * QRD
                             LQRF0000:           * QRF
                             LZBR0000            * ZBR
.
          GOTO      PROC5000
.
.         The end of segment has been found, so reset all the segment fields.
.
PROC5500  PERFORM   SEGNUMBR,RMSH0000:           * MSH
                             REVN0000:           * EVN
                             RPID0000:           * PID
                             RNK10000:           * NK1
                             RPV10000:           * PV1
                             RPV20000:           * PV2
                             RAL10000:           * AL1
                             RDG10000:           * DG1
                             RMRG0000:           * TXA
                             RTXA0000:           * MRG
                             RIN10000:           * IN1
                             RZPM0000:           * ZPM
                             RZAT0000:           * ZAT
                             RDRG0000:           * DRG
                             RMFI0000:           * MFI
                             RMFE0000:           * MFE
                             RSTF0000:           * STF
                             RPRA0000:           * PRA
                             RSCH0000:           * SCH
                             ROBX0000:           * OBX
                             RRGS0000:           * RGS
                             RAIS0000:           * AIS
                             RAIL0000:           * AIL
                             RAIP0000:           * AIP
                             RRF10000:           * RF1
                             RPRD0000:           * PRD
                             RPR10000:           * PR1
                             RZAL0000:           * ZAL
                             RZXP0000:           * ZXP
                             RZXV0000:           * ZXV
                             RGT10000:           * GT1
                             RZSD0000:           * ZSD
                             RZCT0000:           * ZCT
                             RZLH0000:           * ZLH
                             RZLU0000:           * ZLU
                             RZCM0000:           * ZCM
                             RZLS0000:           * ZLS
                             RQRD0000:           * QRD
                             RQRF0000:           * QRF
                             RZBR0000            * ZBR
.
          IF        DISPFLAG = 1
            DISPLAY   "Validating segment: [",SEGMENT,"]",*R,*N;
          ENDIF
.
          PERFORM   SEGNUMBR,VMSH0000:           * MSH
                             VEVN0000:           * EVN
                             VPID0000:           * PID
                             VNK10000:           * NK1
                             VPV10000:           * PV1
                             VPV20000:           * PV2
                             VAL10000:           * AL1
                             VDG10000:           * DG1
                             VMRG0000:           * MRG
                             VTXA0000:           * TXA
                             VIN10000:           * IN1
                             VZPM0000:           * ZPM
                             VZAT0000:           * ZAT
                             VDRG0000:           * DRG
                             VMFI0000:           * MFI
                             VMFE0000:           * MFE
                             VSTF0000:           * STF
                             VPRA0000:           * PRA
                             VSCH0000:           * SCH
                             VOBX0000:           * OBX
                             VRGS0000:           * RGS
                             VAIS0000:           * AIS
                             VAIL0000:           * AIL
                             VAIP0000:           * AIP
                             VRF10000:           * RF1
                             VPRD0000:           * PRD
                             VPR10000:           * PR1
                             VZAL0000:           * ZAL
                             VZXP0000:           * ZXP
                             VZXV0000:           * ZXV
                             VGT10000:           * GT1
                             VZSD0000:           * ZSD
                             VZCT0000:           * ZCT
                             VZLH0000:           * ZLH
                             VZLU0000:           * ZLU
                             VZCM0000:           * ZCM
                             VZLS0000:           * ZLS
                             VQRD0000:           * QRD
                             VQRF0000:           * QRF
                             VZBR0000            * ZBR
.
PROC5999  IF        DISPFLAG = 1
            DISPLAY   "[",SEGMENT,"] segment validated",*R,*N,*R,*N;
          ENDIF
.
          MATCH     ANS,ENDBLOCK                 * end of message received ?
          GOTO      PROC4000 IF NOT EQUAL        * no - get next segment
.
.         The end of message (EOB) has been found
.
PROC6000  IF        DISPFLAG = 1
            DISPLAY   "End of Block received",*R,*N;  * display full message
          ENDIF
.
.         All HL7 validations have been performed, so now we need to
.         validate message specific fields before writing the data to the
.         database
.
          IF        DISPFLAG = 1
            DISPLAY   "Validating message specific fields",*R,*N;
          ENDIF
          CALL      VMES0000                     * validate message
.
.         Send the reply acknowledgement message
.
          IF        DISPFLAG = 1
            DISPLAY   *R,*N:
                      "----------------------------------------":
                      "----------------------------------------":
                      *R,*N:
                      "Sending Acknowledgement",*R,*N,*R,*N;
          ENDIF
          CALL      WRMSH000                     * format MSH segment
          BRANCH    EXIT,PROC9000:               * connection lost
                         PROC9600                * timeout
.
          CALL      WRMSA000                     * format MSA segment
          BRANCH    EXIT,PROC9000:               * connection lost
                         PROC9600                * timeout
.
.         If this is an A19 message, then send the rest of the segments
.         for the response
.
          IF        CISMNUMB = 27
            CALL      RESP0000
            BRANCH    EXIT,PROC9000:             * connection lost
                           PROC9600              * timeout
          ENDIF
.
          IF        ERORFLAG = 1
            CALL      WRERR000                   * format ERR segment
            BRANCH    EXIT,PROC9000:             * connection lost
                           PROC9600              * timeout
          ENDIF
.
.         Finish sending message with an end of block character and carriage
.         return
.
          IF        DISPFLAG = 1
            DISPLAY   "Sending end of message [",*HON,ENDBLOCK,ASK:
                      *HOFF,"]:  (* = carriage return)",*R,*N;
          ENDIF
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF SIGPIPE
          WRITE     COMSOCKT,2,1000;ENDBLOCK,CRETURN
          TRAPCLR   SIGPIPE
          GOTO      PROC9600 IF TIMEOUT          * timeout expired
          BRANCH    OVRCD,PROC9000               * connection lost
.
          IF        DISPFLAG = 1
            DISPLAY   *R,*N:
                      "----------------------------------------":
                      "----------------------------------------":
                      *R,*N
          ENDIF
.
          GOTO      PROC0500                     * get next message
.
PROC9000  IF        DISPFLAG = 1
            DISPLAY   "Connection lost",*R,*N;
          ENDIF
          GOTO      PROC9900
.
PROC9100  IF        DISPFLAG = 1
            DISPLAY   "Solicited Socket not set up",*R,*N;
          ENDIF
          GOTO      PROC9900
.
PROC9500  IF        DISPFLAG = 1
            DISPLAY   "Timeout waiting for incoming message",*R,*N;
          ENDIF
          GOTO      PROC0500
.
PROC9600  IF        DISPFLAG = 1
            DISPLAY   "Timeout waiting for outgoing message",*R,*N;
          ENDIF
          GOTO      PROC9900
.
.         Close the sockets and start again
.
PROC9900  CLOSE     COMSOCKT
          CLOSE     LISSOCKT
          GOTO      PROC0100
.
PROC9999  RETURN
+
.*****************************************************************************
.*                          GTSTR000               Called by: PROC0000       *
.*        Read the next 4000 characters (or less) from the socket            *
.* Returns:   TMPSTRNG - buffer containing character string read in          *
.*            EXIT      0 = read ok                                          *
.*                      1 = timeout expired                                  *
.*                      2 = connection lost                                  *
.*****************************************************************************
.
GTSTR000  RECV      COMSOCKT,4000,30000;TMPSTRNG; * read first 4000 characters
          GOTO      GTSTR910 IF TIMEOUT          * timeout expired
          GOTO      GTSTR920 IF OVER             * connection lost
          IF        @LESS
.>>>>>>                                          * there are no more chars
.                                                  to be read
          ENDIF
.
.         Data received
.
          IF        DISPFLAG = 1
            STRIP     TMPSTRNG
            MOVE      ZERO,COUNTR
            MOVELPTR  TMPSTRNG,FORM4
            DISPLAY   "Data Received ",FORM4:
                      " bytes:  (* = carriage return)",*R,*N;
            WHILE     FORM4 > 0
              ADD       ONE,COUNTR
              MATCH     CRETURN,TMPSTRNG
              IF        @EQUAL
                MOVE      ASK,ANS
              ELSE
                MOVE      TMPSTRNG,ANS
              ENDIF
              IF        COUNTR = 1
                DISPLAY   "[";
              ENDIF
              DISPLAY   *HON,ANS,*HOFF;
              IF        COUNTR = 70
                DISPLAY   "]",*R,*N;
                MOVE      ZERO,COUNTR
              ENDIF
              SUB       ONE,FORM4
              BUMP      TMPSTRNG
            DO
            DISPLAY     "]",*R,*N,*R,*N;
            RESET       TMPSTRNG
          ENDIF
.
          MOVE      ZERO,EXIT
          GOTO      GTSTR999
.
GTSTR910  MOVE      ONE,EXIT                     * timeout
          GOTO      GTSTR999
.
GTSTR920  MOVE      TWO,EXIT                     * connection lost
          GOTO      GTSTR999
.
GTSTR999  RETURN
+
.*****************************************************************************
.*                              GDTM0000           Called by: WRMSH000       *
.*        Get the datetime the message is being sent                         *
.* Returns: DATETIME (ccyymmddhhmmss) - current date & time                  *
.*****************************************************************************
.
GDTM0000  OPEN      CONTROLF,"controlf"
          CALL      IBACLOCK
          UNPACK    CTIMEIS,HOURTM,ANS,MINTIME,ANS,SECTIME
          PACK      DATETIME,CCC,CYY,CMM,CDD,HOURTM,MINTIME,SECTIME
          REP       " 0",DATETIME
.
GDTM9999  RETURN
+
.*****************************************************************************
.*                                 LMSH0000        Called by:                *
.*                          Load the MSH fields                              *
.*****************************************************************************
.
LMSH0000  BRANCH    FIELDNO,LMSH9999:            * Field Separator
                            LMSH0002:            * Encoding Characters
                            LMSH0003:            * Sending Application
                            LMSH0004:            * Sending Facility
                            LMSH0005:            * Receiving Application
                            LMSH0006:            * Receiving Facility
                            LMSH0007:            * Date/Time of Message
                            LMSH0008:            * Security
                            LMSH0009:            * Message Type
                            LMSH0010:            * Message Control ID
                            LMSH0011:            * Processing ID
                            LMSH0012:            * Version ID
                            LMSH0013:            * Sequence Number
                            LMSH0014:            * Continuation Pointer
                            LMSH0015:            * Accept Acknowledgement Type
                            LMSH0016:            * Appl. Acknowledgement Type
                            LMSH0017:            * Country Code
                            LMSH0018:            * Character Set
                            LMSH0019             * Principal Language of Message
.
.         Invalid MSH field received, so ignore it
.
          GOTO      LMSH9000
.
. Note: MSH001 is set in GCHR0000
.
.
LMSH0002  APPEND    ANS,MSH002                   * load encoding characters
          GOTO      LMSH9000
.
LMSH0003  APPEND    ANS,MSH003                   * load sending application
          GOTO      LMSH9000
.
LMSH0004  APPEND    ANS,MSH004                   * load sending facility
          GOTO      LMSH9000
.
LMSH0005  APPEND    ANS,MSH005                   * load receiving application
          GOTO      LMSH9000
.
LMSH0006  APPEND    ANS,MSH006                   * load receiving facility
          GOTO      LMSH9000
.
LMSH0007  APPEND    ANS,MSH007                   * load date/time of facility
          GOTO      LMSH9000
.
LMSH0008  APPEND    ANS,MSH008                   * load security
          GOTO      LMSH9000
.
LMSH0009  APPEND    ANS,MSH009                   * load message type
          GOTO      LMSH9000
.
LMSH0010  APPEND    ANS,MSH010                   * load control id
          GOTO      LMSH9000
.
LMSH0011  APPEND    ANS,MSH011                   * load processing id
          GOTO      LMSH9000
.
LMSH0012  APPEND    ANS,MSH012                   * load version id
          GOTO      LMSH9000
.
LMSH0013  APPEND    ANS,MSH013                   * load sequence number
          GOTO      LMSH9000
.
LMSH0014  APPEND    ANS,MSH014                   * load continuation pointer
          GOTO      LMSH9000
.
LMSH0015  APPEND    ANS,MSH015                   * load accept ackn. type
          GOTO      LMSH9000
.
LMSH0016  APPEND    ANS,MSH016                   * load applic. ackn. type
          GOTO      LMSH9000
.
LMSH0017  APPEND    ANS,MSH017                   * load country code
          GOTO      LMSH9000
.
LMSH0018  APPEND    ANS,MSH018                   * load character set
          GOTO      LMSH9000
.
LMSH0019  APPEND    ANS,MSH019                   * load princ. language of mess.
          GOTO      LMSH9000
.
LMSH9000  APPEND    ANS,SEGSTRNG                 * add char. to message buffer
.
LMSH9999  RETURN
+
.*****************************************************************************
.*                                 LEVN0000        Called by:                *
.*                          Load the EVN fields                              *
.*****************************************************************************
.
LEVN0000  BRANCH    FIELDNO,LEVN0001:            * Event Type Code
                            LEVN0002:            * Recorded Date/Time
                            LEVN0003:            * Date/Time Planned Event
                            LEVN0004:            * Event Reason Code
                            LEVN0005:            * Operator Id
                            LEVN0006             * Event Occurred
.
.         Invalid EVN field received, so ignore it
.
          GOTO      LEVN9000
.
LEVN0001  APPEND    ANS,EVN001                   * load event type code
          GOTO      LEVN9000
.
LEVN0002  APPEND    ANS,EVN002                   * load recorded date/time
          GOTO      LEVN9000
.
LEVN0003  APPEND    ANS,EVN003                   * load date/time planned event
          GOTO      LEVN9000
.
LEVN0004  APPEND    ANS,EVN004                   * load event reason code
          GOTO      LEVN9000
.
LEVN0005  APPEND    ANS,EVN005                   * load operator id
          GOTO      LEVN9000
.
LEVN0006  APPEND    ANS,EVN006                   * load event occurred
          GOTO      LEVN9000
.
LEVN9000  APPEND    ANS,SEGSTRNG                 * add char. to message buffer
.
LEVN9999  RETURN
+
.*****************************************************************************
.*                                 LPID0000        Called by:                *
.*                          Load the PID fields                              *
.*****************************************************************************
.
LPID0000  BRANCH    FIELDNO,LPID0001:            * Set ID - Patient ID
                            LPID0002:            * Patient ID (External)
                            LPID0003:            * Patient ID (Internal)
                            LPID0004:            * Alternate Patient ID
                            LPID0005:            * Patient Name
                            LPID0006:            * Mother's Maiden name
                            LPID0007:            * Date/Time of Birth
                            LPID0008:            * Gender
                            LPID0009:            * Patient Alias
                            LPID0010:            * Race
                            LPID0011:            * Patient Address Information
                            LPID0012:            * County Code
                            LPID0013:            * Contact Information
                            LPID0014:            * Contact Information
                            LPID0015:            * Language Spoken
                            LPID0016:            * Marital Status
                            LPID0017:            * Religion
                            LPID0018:            * Patient Account Number
                            LPID0019:            * SSN Number - Patient
                            LPID0020:            * Driver's License No - Patient
                            LPID0021:            * Mother's Identifier
                            LPID0022:            * Ethnic Group
                            LPID0023:            * Place of Birth
                            LPID0024:            * Multiple Birth Indicator
                            LPID0025:            * Birth Order
                            LPID0026:            * Citizenship
                            LPID0027:            * Veterans Military Status
                            LPID0028:            * Nationality
                            LPID0029:            * Patient Death Date/Time
                            LPID0030:            * Patient Death Indicator
                            LPID0031:            * id unknown indicator
                            LPID0032:            * id reliability code
                            LPID0033             * last update date/time
.
.         Invalid PID field received, so ignore it
.
          GOTO      LPID9000
.
LPID0001  APPEND    ANS,PID001                   * load set id - patient id
          GOTO      LPID9000
.
LPID0002  APPEND    ANS,PID002                   * load patient id (external)
          GOTO      LPID9000
.
LPID0003  APPEND    ANS,PID003                   * load patient id (internal)
          GOTO      LPID9000
.
LPID0004  APPEND    ANS,PID004                   * load alternate patient id
          GOTO      LPID9000
.
LPID0005  APPEND    ANS,PID005                   * load patient name
          GOTO      LPID9000
.
LPID0006  APPEND    ANS,PID006                   * load mother's maiden name
          GOTO      LPID9000
.
LPID0007  APPEND    ANS,PID007                   * load date/time of birth
          GOTO      LPID9000
.
LPID0008  APPEND    ANS,PID008                   * load gender
          GOTO      LPID9000
.
LPID0009  APPEND    ANS,PID009                   * load patient alias
          GOTO      LPID9000
.
LPID0010  APPEND    ANS,PID010                   * load race
          GOTO      LPID9000
.
LPID0011  APPEND    ANS,PID011                   * load patient address info.
          GOTO      LPID9000
.
LPID0012  APPEND    ANS,PID012                   * load county code
          GOTO      LPID9000
.
LPID0013  APPEND    ANS,PID013                   * load contact information
          GOTO      LPID9000
.
LPID0014  APPEND    ANS,PID014                   * load contact information
          GOTO      LPID9000
.
LPID0015  APPEND    ANS,PID015                   * load language spoken
          GOTO      LPID9000
.
LPID0016  APPEND    ANS,PID016                   * load marital status
          GOTO      LPID9000
.
LPID0017  APPEND    ANS,PID017                   * load religion
          GOTO      LPID9000
.
LPID0018  APPEND    ANS,PID018                   * load patient account no.
          GOTO      LPID9000
.
LPID0019  APPEND    ANS,PID019                   * load SSN number - patient
          GOTO      LPID9000
.
LPID0020  APPEND    ANS,PID020                   * load driver's license no.
          GOTO      LPID9000
.
LPID0021  APPEND    ANS,PID021                   * load mother's identifier
          GOTO      LPID9000
.
LPID0022  APPEND    ANS,PID022                   * load ethnic group
          GOTO      LPID9000
.
LPID0023  APPEND    ANS,PID023                   * load place of birth
          GOTO      LPID9000
.
LPID0024  APPEND    ANS,PID024                   * load multiple birth indicator
          GOTO      LPID9000
.
LPID0025  APPEND    ANS,PID025                   * load birth order
          GOTO      LPID9000
.
LPID0026  APPEND    ANS,PID026                   * load citizenship
          GOTO      LPID9000
.
LPID0027  APPEND    ANS,PID027                   * load veterans military status
          GOTO      LPID9000
.
LPID0028  APPEND    ANS,PID028                   * load nationality
          GOTO      LPID9000
.
LPID0029  APPEND    ANS,PID029                   * load patient death date/time
          GOTO      LPID9000
.
LPID0030  APPEND    ANS,PID030                   * load patient death indicator
          GOTO      LPID9000
.
LPID0031  APPEND    ANS,PID031                   * load id unknown indicator
          GOTO      LPID9000
.
LPID0032  APPEND    ANS,PID032                   * load id reliability code
          GOTO      LPID9000
.
LPID0033  APPEND    ANS,PID033                   * load last update date/time
          GOTO      LPID9000
.
LPID9000  APPEND    ANS,SEGSTRNG                 * add char. to message buffer
.
LPID9999  RETURN
+
.*****************************************************************************
.*                                 LNK10000        Called by:                *
.*                          Load the NK1 fields                              *
.*****************************************************************************
.
LNK10000  BRANCH    FIELDNO,LNK10001:            * Set ID
                            LNK10002:            * Name
                            LNK10003:            * Relationship
                            LNK10004:            * Address
                            LNK10005:            * Phone Number
                            LNK10006:            * Business Phone Number
                            LNK10007:            * Contact Role
                            LNK10008:            * Start Date
                            LNK10009:            * End Date
                            LNK10010:            * Job Title
                            LNK10011:            * Job Code/Class
                            LNK10012:            * Employee Number
                            LNK10013:            * Organisation Name
                            LNK10014:            * Marital Status
                            LNK10015:            * Sex
                            LNK10016:            * Date/Time of Birth
                            LNK10017:            * Living Dpendency
                            LNK10018:            * Ambulatory Status
                            LNK10019:            * Citizenship
                            LNK10020:            * Primary Language
                            LNK10021:            * Living Arrangement
                            LNK10022:            * Publicity Indicator
                            LNK10023:            * Protection Indicator
                            LNK10024:            * Student Indicator
                            LNK10025:            * Religion
                            LNK10026:            * Mother's Maiden Name
                            LNK10027:            * Nationality
                            LNK10028:            * Ethnic Group
                            LNK10029:            * Contact Reason
                            LNK10030:            * Contact Person's Name
                            LNK10031:            * Contact Person's Phone No.
                            LNK10032:            * Contact Person's Address
                            LNK10033:            * Identifiers
                            LNK10034:            * Job Status
                            LNK10035:            * Race
                            LNK10036:            * Handicap
                            LNK10037             * Social Security Number
.
.         Invalid NK1 field received, so ignore it
.
          GOTO      LNK19000
.
LNK10001  APPEND    ANS,NK1001                   * load set id
          GOTO      LNK19000
.
LNK10002  APPEND    ANS,NK1002                   * load name
          GOTO      LNK19000
.
LNK10003  APPEND    ANS,NK1003                   * load relationship
          GOTO      LNK19000
.
LNK10004  APPEND    ANS,NK1004                   * load address
          GOTO      LNK19000
.
LNK10005  APPEND    ANS,NK1005                   * load phone number
          GOTO      LNK19000
.
LNK10006  APPEND    ANS,NK1006                   * load business phone no.
          GOTO      LNK19000
.
LNK10007  APPEND    ANS,NK1007                   * load contact role
          GOTO      LNK19000
.
LNK10008  APPEND    ANS,NK1008                   * load start date
          GOTO      LNK19000
.
LNK10009  APPEND    ANS,NK1009                   * load end date
          GOTO      LNK19000
.
LNK10010  APPEND    ANS,NK1010                   * load job title
          GOTO      LNK19000
.
LNK10011  APPEND    ANS,NK1011                   * load job code/class
          GOTO      LNK19000
.
LNK10012  APPEND    ANS,NK1012                   * load employee number
          GOTO      LNK19000
.
LNK10013  APPEND    ANS,NK1013                   * load organisation name
          GOTO      LNK19000
.
LNK10014  APPEND    ANS,NK1014                   * load marital status
          GOTO      LNK19000
.
LNK10015  APPEND    ANS,NK1015                   * load sex
          GOTO      LNK19000
.
LNK10016  APPEND    ANS,NK1016                   * load date/time of birth
          GOTO      LNK19000
.
LNK10017  APPEND    ANS,NK1017                   * load living dependency
          GOTO      LNK19000
.
LNK10018  APPEND    ANS,NK1018                   * load ambulatory status
          GOTO      LNK19000
.
LNK10019  APPEND    ANS,NK1019                   * load citizenship
          GOTO      LNK19000
.
LNK10020  APPEND    ANS,NK1020                   * load primary language
          GOTO      LNK19000
.
LNK10021  APPEND    ANS,NK1021                   * load living arrangement
          GOTO      LNK19000
.
LNK10022  APPEND    ANS,NK1022                   * load publicity indicator
          GOTO      LNK19000
.
LNK10023  APPEND    ANS,NK1023                   * load protection indicator
          GOTO      LNK19000
.
LNK10024  APPEND    ANS,NK1024                   * load student indicator
          GOTO      LNK19000
.
LNK10025  APPEND    ANS,NK1025                   * load religion
          GOTO      LNK19000
.
LNK10026  APPEND    ANS,NK1026                   * load mother's maiden name
          GOTO      LNK19000
.
LNK10027  APPEND    ANS,NK1027                   * load nationality
          GOTO      LNK19000
.
LNK10028  APPEND    ANS,NK1028                   * load ethnic group
          GOTO      LNK19000
.
LNK10029  APPEND    ANS,NK1029                   * load contact reason
          GOTO      LNK19000
.
LNK10030  APPEND    ANS,NK1030                   * load contact person's name
          GOTO      LNK19000
.
LNK10031  APPEND    ANS,NK1031                   * load contact person's phone
          GOTO      LNK19000
.
LNK10032  APPEND    ANS,NK1032                   * load contact person's address
          GOTO      LNK19000
.
LNK10033  APPEND    ANS,NK1033                   * load identifiers
          GOTO      LNK19000
.
LNK10034  APPEND    ANS,NK1034                   * load job status
          GOTO      LNK19000
.
LNK10035  APPEND    ANS,NK1035                   * load race
          GOTO      LNK19000
.
LNK10036  APPEND    ANS,NK1036                   * load handicap
          GOTO      LNK19000
.
LNK10037  APPEND    ANS,NK1037                   * load social security no.
          GOTO      LNK19000
.
LNK19000  APPEND    ANS,SEGSTRNG                 * add char. to message buffer
.
LNK19999  RETURN
+
.*****************************************************************************
.*                                 LPV10000        Called by:                *
.*                          Load the PV1 fields                              *
.*****************************************************************************
.
LPV10000  BRANCH    FIELDNO,LPV10001:            * Set ID
                            LPV10002:            * Patient Class
                            LPV10003:            * Assigned Pt. Location
                            LPV10004:            * Admission Type
                            LPV10005:            * Preadmit No.
                            LPV10006:            * Prior Pt. Location
                            LPV10007:            * Attending Doctor
                            LPV10008:            * Referring Doctor
                            LPV10009:            * Consulting Doctor
                            LPV10010:            * Hospital Service
                            LPV10011:            * Temporary Location
                            LPV10012:            * Preadmit Test Indicator
                            LPV10013:            * Readmission Indicator
                            LPV10014:            * Admit Source
                            LPV10015:            * Ambulatory Status
                            LPV10016:            * VIP Indicator
                            LPV10017:            * Admitting Doctor
                            LPV10018:            * Patient Type
                            LPV10019:            * Visit Number
                            LPV10020:            * Financial Class
                            LPV10021:            * Charge Price Indicator
                            LPV10022:            * Courtesy Code
                            LPV10023:            * Credit Rating
                            LPV10024:            * Contract Code
                            LPV10025:            * Contract Effective Date
                            LPV10026:            * Contract Amount
                            LPV10027:            * Contract Period
                            LPV10028:            * Interest Code
                            LPV10029:            * Transfer to Bad Debt Code
                            LPV10030:            * Transfer to Bad Debt Date
                            LPV10031:            * Bad Debt Agency Code
                            LPV10032:            * Bad Debt Transfer Amount
                            LPV10033:            * Bad Debt recovery Amount
                            LPV10034:            * Delete Account Indicator
                            LPV10035:            * Delete Account Date
                            LPV10036:            * Discharge Disposition
                            LPV10037:            * Discharged to Location
                            LPV10038:            * Diet Type
                            LPV10039:            * Servicing Facility
                            LPV10040:            * Bed Status
                            LPV10041:            * Account Status
                            LPV10042:            * Pending Location
                            LPV10043:            * Prior Temporary Location
                            LPV10044:            * Admit Date/Time
                            LPV10045:            * Discharge Date/Time
                            LPV10046:            * Current Patient Balance
                            LPV10047:            * Total Charges
                            LPV10048:            * Total Adjustments
                            LPV10049:            * Total Payments
                            LPV10050:            * Alternate Visit Id
                            LPV10051:            * Visit Indicator
                            LPV10052             * Other Healthcare Provider
.
.         Invalid PV1 field received, so ignore it
.
          GOTO      LPV19000
.
LPV10001  APPEND    ANS,PV1001                   * load set id
          GOTO      LPV19000
.
LPV10002  APPEND    ANS,PV1002                   * load patient class
          GOTO      LPV19000
.
LPV10003  APPEND    ANS,PV1003                   * load assigned pt. location
          GOTO      LPV19000
.
LPV10004  APPEND    ANS,PV1004                   * load admission type
          GOTO      LPV19000
.
LPV10005  APPEND    ANS,PV1005                   * load preadmit no.
          GOTO      LPV19000
.
LPV10006  APPEND    ANS,PV1006                   * load prior pt. location
          GOTO      LPV19000
.
LPV10007  APPEND    ANS,PV1007                   * load attending doctor
          GOTO      LPV19000
.
LPV10008  APPEND    ANS,PV1008                   * load referring doctor
          GOTO      LPV19000
.
LPV10009  APPEND    ANS,PV1009                   * load consulting doctor
          GOTO      LPV19000
.
LPV10010  APPEND    ANS,PV1010                   * load hospital service
          GOTO      LPV19000
.
LPV10011  APPEND    ANS,PV1011                   * load temporary location
          GOTO      LPV19000
.
LPV10012  APPEND    ANS,PV1012                   * load preadmit test indicator
          GOTO      LPV19000
.
LPV10013  APPEND    ANS,PV1013                   * load readmission indicator
          GOTO      LPV19000
.
LPV10014  APPEND    ANS,PV1014                   * load admit source
          GOTO      LPV19000
.
LPV10015  APPEND    ANS,PV1015                   * load ambulatory status
          GOTO      LPV19000
.
LPV10016  APPEND    ANS,PV1016                   * load vip indicator
          GOTO      LPV19000
.
LPV10017  APPEND    ANS,PV1017                   * load admitting doctor
          GOTO      LPV19000
.
LPV10018  APPEND    ANS,PV1018                   * load patient type
          GOTO      LPV19000
.
LPV10019  APPEND    ANS,PV1019                   * load visit number
          GOTO      LPV19000
.
LPV10020  APPEND    ANS,PV1020                   * load financial class
          GOTO      LPV19000
.
LPV10021  APPEND    ANS,PV1021                   * load charge price indicator
          GOTO      LPV19000
.
LPV10022  APPEND    ANS,PV1022                   * load courtesy code
          GOTO      LPV19000
.
LPV10023  APPEND    ANS,PV1023                   * load credit rating
          GOTO      LPV19000
.
LPV10024  APPEND    ANS,PV1024                   * load contract code
          GOTO      LPV19000
.
LPV10025  APPEND    ANS,PV1025                   * load contract eff. date
          GOTO      LPV19000
.
LPV10026  APPEND    ANS,PV1026                   * load contract amount
          GOTO      LPV19000
.
LPV10027  APPEND    ANS,PV1027                   * load contract period
          GOTO      LPV19000
.
LPV10028  APPEND    ANS,PV1028                   * load interest code
          GOTO      LPV19000
.
LPV10029  APPEND    ANS,PV1029                   * load transf. to bad debt code
          GOTO      LPV19000
.
LPV10030  APPEND    ANS,PV1030                   * load transf. to bad debt date
          GOTO      LPV19000
.
LPV10031  APPEND    ANS,PV1031                   * load bad debt agency code
          GOTO      LPV19000
.
LPV10032  APPEND    ANS,PV1032                   * load bad debt transfer amt.
          GOTO      LPV19000
.
LPV10033  APPEND    ANS,PV1033                   * load bad debt recovery amt.
          GOTO      LPV19000
.
LPV10034  APPEND    ANS,PV1034                   * load delete account indicator
          GOTO      LPV19000
.
LPV10035  APPEND    ANS,PV1035                   * load delete account date
          GOTO      LPV19000
.
LPV10036  APPEND    ANS,PV1036                   * load discharge disposition
          GOTO      LPV19000
.
LPV10037  APPEND    ANS,PV1037                   * load discharged to location
          GOTO      LPV19000
.
LPV10038  APPEND    ANS,PV1038                   * load diet type
          GOTO      LPV19000
.
LPV10039  APPEND    ANS,PV1039                   * load servicing facility
          GOTO      LPV19000
.
LPV10040  APPEND    ANS,PV1040                   * load bed status
          GOTO      LPV19000
.
LPV10041  APPEND    ANS,PV1041                   * load account status
          GOTO      LPV19000
.
LPV10042  APPEND    ANS,PV1042                   * load pending location
          GOTO      LPV19000
.
LPV10043  APPEND    ANS,PV1043                   * load prior temp. location
          GOTO      LPV19000
.
LPV10044  APPEND    ANS,PV1044                   * load admit date/time
          GOTO      LPV19000
.
LPV10045  APPEND    ANS,PV1045                   * load discharge date/time
          GOTO      LPV19000
.
LPV10046  APPEND    ANS,PV1046                   * load current pt. balance
          GOTO      LPV19000
.
LPV10047  APPEND    ANS,PV1047                   * load total charges
          GOTO      LPV19000
.
LPV10048  APPEND    ANS,PV1048                   * load total adjustments
          GOTO      LPV19000
.
LPV10049  APPEND    ANS,PV1049                   * load payments
          GOTO      LPV19000
.
LPV10050  APPEND    ANS,PV1050                   * load alternate visit id
          GOTO      LPV19000
.
LPV10051  APPEND    ANS,PV1051                   * load visit indicator
          GOTO      LPV19000
.
LPV10052  APPEND    ANS,PV1052                   * load other healthcare prov.
          GOTO      LPV19000
.
LPV19000  APPEND    ANS,SEGSTRNG                 * add char. to message buffer
.
LPV19999  RETURN
+
.*****************************************************************************
.*                                 LPV20000        Called by:                *
.*                          Load the PV2 fields                              *
.*****************************************************************************
.
LPV20000  BRANCH    FIELDNO,LPV20001:            * Prior Pending Location
                            LPV20002:            * Accommodation Code
                            LPV20003:            * Admit Reason
                            LPV20004:            * Transfer Reason
                            LPV20005:            * Patient Valuables
                            LPV20006:            * Patient Valuables Location
                            LPV20007:            * Visit User Code
                            LPV20008:            * Expected Admit Date/Time
                            LPV20009:            * Expected Discharge Date/Time
                            LPV20010:            * Estimated LOS
                            LPV20011:            * Actual LOS
                            LPV20012:            * Visit Description
                            LPV20013:            * Referral Source Code
                            LPV20014:            * Previous Service Date
                            LPV20015:            * Employ. Illness Related Ind.
                            LPV20016:            * Purge Status Code
                            LPV20017:            * Purge Status Date
                            LPV20018:            * Special Program Code
                            LPV20019:            * Retention Indicator
                            LPV20020:            * Expected No. of Ins. Plans
                            LPV20021:            * Visit Publicity Code
                            LPV20022:            * Visit Protection Indicator
                            LPV20023:            * Clinic Organisation Name
                            LPV20024:            * Patient Status Code
                            LPV20025:            * Visit Priority Code
                            LPV20026:            * Prev. Treatment Date
                            LPV20027:            * Expected Discharge Disp.
                            LPV20028:            * Signature on File Date
                            LPV20029:            * First Similar Illness Date
                            LPV20030:            * Pt. Charge Adjustment Code
                            LPV20031:            * Recurring Service Code
                            LPV20032:            * Billing Media Code
                            LPV20033:            * Expected Surgery Date/Time
                            LPV20034:            * Military Partnership Code
                            LPV20035:            * Military NonAvailability Code
                            LPV20036:            * Newborn Baby Indicator
                            LPV20037             * Baby Detained Indicator
.
.         Invalid PV2 field received, so ignore it
.
          GOTO      LPV29000
.
LPV20001  APPEND    ANS,PV2001                   * load prior pending location
          GOTO      LPV29000
.
LPV20002  APPEND    ANS,PV2002                   * load accommodation code
          GOTO      LPV29000
.
LPV20003  APPEND    ANS,PV2003                   * load admit reason
          GOTO      LPV29000
.
LPV20004  APPEND    ANS,PV2004                   * load transfer reason
          GOTO      LPV29000
.
LPV20005  APPEND    ANS,PV2005                   * load patient valuables
          GOTO      LPV29000
.
LPV20006  APPEND    ANS,PV2006                   * load pt. valuables location
          GOTO      LPV29000
.
LPV20007  APPEND    ANS,PV2007                   * load visit user code
          GOTO      LPV29000
.
LPV20008  APPEND    ANS,PV2008                   * load expected admit date/time
          GOTO      LPV29000
.
LPV20009  APPEND    ANS,PV2009                   * load expected disch date/time
          GOTO      LPV29000
.
LPV20010  APPEND    ANS,PV2010                   * load estimated LOS
          GOTO      LPV29000
.
LPV20011  APPEND    ANS,PV2011                   * load actual LOS
          GOTO      LPV29000
.
LPV20012  APPEND    ANS,PV2012                   * load visit description
          GOTO      LPV29000
.
LPV20013  APPEND    ANS,PV2013                   * load referral source code
          GOTO      LPV29000
.
LPV20014  APPEND    ANS,PV2014                   * load previous service date
          GOTO      LPV29000
.
LPV20015  APPEND    ANS,PV2015                   * load empl. illness related in
          GOTO      LPV29000
.
LPV20016  APPEND    ANS,PV2016                   * load purge status code
          GOTO      LPV29000
.
LPV20017  APPEND    ANS,PV2017                   * load purge status date
          GOTO      LPV29000
.
LPV20018  APPEND    ANS,PV2018                   * load special program code
          GOTO      LPV29000
.
LPV20019  APPEND    ANS,PV2019                   * load retention indicator
          GOTO      LPV29000
.
LPV20020  APPEND    ANS,PV2020                   * load expected no of ins. plan
          GOTO      LPV29000
.
LPV20021  APPEND    ANS,PV2021                   * load visit publicity code
          GOTO      LPV29000
.
LPV20022  APPEND    ANS,PV2022                   * load visit protection ind.
          GOTO      LPV29000
.
LPV20023  APPEND    ANS,PV2023                   * load clinic org. name
          GOTO      LPV29000
.
LPV20024  APPEND    ANS,PV2024                   * load patient status code
          GOTO      LPV29000
.
LPV20025  APPEND    ANS,PV2025                   * load visit priority code
          GOTO      LPV29000
.
LPV20026  APPEND    ANS,PV2026                   * load previous treatment date
          GOTO      LPV29000
.
LPV20027  APPEND    ANS,PV2027                   * load exp. disch. disposition
          GOTO      LPV29000
.
LPV20028  APPEND    ANS,PV2028                   * load signature on file date
          GOTO      LPV29000
.
LPV20029  APPEND    ANS,PV2029                   * load 1st similar illness date
          GOTO      LPV29000
.
LPV20030  APPEND    ANS,PV2030                   * load pt. charge adj. code
          GOTO      LPV29000
.
LPV20031  APPEND    ANS,PV2031                   * load recurring srevice code
          GOTO      LPV29000
.
LPV20032  APPEND    ANS,PV2032                   * load billing media code
          GOTO      LPV29000
.
LPV20033  APPEND    ANS,PV2033                   * load exp. surgery date/time
          GOTO      LPV29000
.
LPV20034  APPEND    ANS,PV2034                   * load military part. code
          GOTO      LPV29000
.
LPV20035  APPEND    ANS,PV2035                   * load military non-avail. code
          GOTO      LPV29000
.
LPV20036  APPEND    ANS,PV2036                   * load newborn baby indicator
          GOTO      LPV29000
.
LPV20037  APPEND    ANS,PV2037                   * load baby detained indicator
          GOTO      LPV29000
.
LPV29000  APPEND    ANS,SEGSTRNG                 * add char. to message buffer
.
LPV29999  RETURN
+
.*****************************************************************************
.*                                 LDG10000        Called by:                *
.*                          Load the DG1 fields                              *
.*****************************************************************************
.
LDG10000  BRANCH    FIELDNO,LDG10001:            * Set ID
                            LDG10002:            * Diagnosis Coding Method
                            LDG10003:            * Diagnosis Code
                            LDG10004:            * Diagnosis Description
                            LDG10005:            * Diagnosis Date/Time
                            LDG10006:            * Diagnosis Type
                            LDG10007:            * Major Diagnostic Category
                            LDG10008:            * Diagnostic Related Group
                            LDG10009:            * DRG Approval Indicator
                            LDG10010:            * DRG Grouper Review Code
                            LDG10011:            * Outlier Type
                            LDG10012:            * Outlier Days
                            LDG10013:            * Outlier Cost
                            LDG10014:            * Grouper Version and Type
                            LDG10015:            * Diagnosis Priority
                            LDG10016:            * Diagnosing Clinician
                            LDG10017:            * Diagnosis Classification
                            LDG10018:            * Confidential Indicator
                            LDG10019             * Attestation Date/Time
.
.         Invalid DG1 field received, so ignore it
.
          GOTO      LDG19000
.
LDG10001  APPEND    ANS,DG1001                   * load set id
          GOTO      LDG19000
.
LDG10002  APPEND    ANS,DG1002                   * load diagnosis coding method
          GOTO      LDG19000
.
LDG10003  APPEND    ANS,DG1003                   * load diagnosis code
          GOTO      LDG19000
.
LDG10004  APPEND    ANS,DG1004                   * load diagnosis description
          GOTO      LDG19000
.
LDG10005  APPEND    ANS,DG1005                   * load diagnosis date/time
          GOTO      LDG19000
.
LDG10006  APPEND    ANS,DG1006                   * load diagnosis type
          GOTO      LDG19000
.
LDG10007  APPEND    ANS,DG1007                   * load major diagnostic cat.
          GOTO      LDG19000
.
LDG10008  APPEND    ANS,DG1008                   * load DRG approval indicator
          GOTO      LDG19000
.
LDG10009  APPEND    ANS,DG1009                   * load DRG grouper review code
          GOTO      LDG19000
.
LDG10010  APPEND    ANS,DG1010                   * load outlier type
          GOTO      LDG19000
.
LDG10011  APPEND    ANS,DG1011                   * load outlier days
          GOTO      LDG19000
.
LDG10012  APPEND    ANS,DG1012                   * load outlier cost
          GOTO      LDG19000
.
LDG10013  APPEND    ANS,DG1013                   * load grouper version & type
          GOTO      LDG19000
.
LDG10014  APPEND    ANS,DG1014                   * load diagnosis priority
          GOTO      LDG19000
.
LDG10015  APPEND    ANS,DG1015                   * load diagnosing clinician
          GOTO      LDG19000
.
LDG10016  APPEND    ANS,DG1016                   * load diagnosis classification
          GOTO      LDG19000
.
LDG10017  APPEND    ANS,DG1017                   * load confidential indicator
          GOTO      LDG19000
.
LDG10018  APPEND    ANS,DG1018                   * load attestation date/time
          GOTO      LDG19000
.
LDG10019  APPEND    ANS,DG1019                   * load 
          GOTO      LDG19000
.
LDG19000  APPEND    ANS,SEGSTRNG                 * add char. to message buffer
.
LDG19999  RETURN
+
.*****************************************************************************
.*                                 LAL10000        Called by:                *
.*                          Load the AL1 fields                              *
.*****************************************************************************
.
LAL10000  BRANCH    FIELDNO,LAL10001:            * Set ID
                            LAL10002:            * Allergy Type
                            LAL10003:            * Allergy Code
                            LAL10004:            * Allergy Severity
                            LAL10005:            * Allergy Reaction
                            LAL10006             * Identification Date
.
.         Invalid AL1 field received, so ignore it
.
          GOTO      LAL19000
.
LAL10001  APPEND    ANS,AL1001                   * load set id
          GOTO      LAL19000
.
LAL10002  APPEND    ANS,AL1002                   * load allergy type
          GOTO      LAL19000
.
LAL10003  APPEND    ANS,AL1003                   * load allergy code
          GOTO      LAL19000
.
LAL10004  APPEND    ANS,AL1004                   * load allergy severity
          GOTO      LAL19000
.
LAL10005  APPEND    ANS,AL1005                   * load allergy reaction
          GOTO      LAL19000
.
LAL10006  APPEND    ANS,AL1006                   * load identification date
          GOTO      LAL19000
.
LAL19000  APPEND    ANS,SEGSTRNG                 * add char. to message buffer
.
LAL19999  RETURN
+
.*****************************************************************************
.*                                 LMRG0000        Called by:                *
.*                          Load the MRG fields                              *
.*****************************************************************************
.
LMRG0000  BRANCH    FIELDNO,LMRG0001:            * Prior Patient ID - Internal
                            LMRG0002:            * Prior Alternate Patient Id
                            LMRG0003:            * Prior Patient Account No.
                            LMRG0004:            * Prior Patient Id - External
                            LMRG0005:            * Prior Visit Number
                            LMRG0006:            * Prior Alternate Visit Id
                            LMRG0007             * Prior Patient Name
.
.         Invalid MRG field received, so ignore it
.
          GOTO      LMRG9000
.
LMRG0001  APPEND    ANS,MRG001                   * load prior pt. id - internal
          GOTO      LMRG9000
.
LMRG0002  APPEND    ANS,MRG002                   * load prior alternate pt. id
          GOTO      LMRG9000
.
LMRG0003  APPEND    ANS,MRG003                   * load prior pt. account no.
          GOTO      LMRG9000
.
LMRG0004  APPEND    ANS,MRG004                   * load prior pt. id - external
          GOTO      LMRG9000
.
LMRG0005  APPEND    ANS,MRG005                   * load prior visit number
          GOTO      LMRG9000
.
LMRG0006  APPEND    ANS,MRG006                   * load prior alternate visit id
          GOTO      LMRG9000
.
LMRG0007  APPEND    ANS,MRG007                   * load prior patient name
          GOTO      LMRG9000
.
LMRG9000  APPEND    ANS,SEGSTRNG                 * add char. to message buffer
.
LMRG9999  RETURN
+
.*****************************************************************************
.*                                 LDRG0000        Called by:                *
.*                          Load the DRG fields                              *
.*****************************************************************************
.
LDRG0000  BRANCH    FIELDNO,LDRG0001:            * Diagnostic Related Group
                            LDRG0002:            * DRG Assigned Date/Time
                            LDRG0003:            * DRG Approval Indicator
                            LDRG0004:            * DRG Grouper Review Code
                            LDRG0005:            * Outlier Type
                            LDRG0006:            * Outlier Days
                            LDRG0007:            * Outlier Cost
                            LDRG0008:            * DRG Payor
                            LDRG0009:            * Outlier Reinbursement
                            LDRG0010             * Confidential Indicator
.
.         Invalid DRG field received, so ignore it
.
          GOTO      LDRG9000
.
LDRG0001  APPEND    ANS,DRG001                   * diagnostic related group
          GOTO      LDRG9000
.
LDRG0002  APPEND    ANS,DRG002                   * drg assigned date/time
          GOTO      LDRG9000
.
LDRG0003  APPEND    ANS,DRG003                   * drg approval indicator
          GOTO      LDRG9000
.
LDRG0004  APPEND    ANS,DRG004                   * drg grouper review code
          GOTO      LDRG9000
.
LDRG0005  APPEND    ANS,DRG005                   * outlier type
          GOTO      LDRG9000
.
LDRG0006  APPEND    ANS,DRG006                   * outlier days
          GOTO      LDRG9000
.
LDRG0007  APPEND    ANS,DRG007                   * outlier cost
          GOTO      LDRG9000
.
LDRG0008  APPEND    ANS,DRG008                   * drg payor
          GOTO      LDRG9000
.
LDRG0009  APPEND    ANS,DRG009                   * outlier reinbursement
          GOTO      LDRG9000
.
LDRG0010  APPEND    ANS,DRG010                   * confidential indicator
          GOTO      LDRG9000
.
LDRG9000  APPEND    ANS,SEGSTRNG                 * add char. to message buffer
.
LDRG9999  RETURN
+
.*****************************************************************************
.*                                 LMFI0000        Called by:                *
.*                          Load the MFI fields                              *
.*****************************************************************************
.
LMFI0000  BRANCH    FIELDNO,LMFI0001:            * Master File Identifier
                            LMFI0002:            * Master File App. Identifier
                            LMFI0003:            * File Level Event Code
                            LMFI0004:            * Entered Date/Time
                            LMFI0005:            * Effective Date/Time
                            LMFI0006             * Response Level Code
.
.         Invalid MFI field received, so ignore it
.
          GOTO      LMFI9000
.
LMFI0001  APPEND    ANS,MFI001                   * Master File Identifier
          GOTO      LMFI9000
.
LMFI0002  APPEND    ANS,MFI002                   * Master File App. Identifier
          GOTO      LMFI9000
.
LMFI0003  APPEND    ANS,MFI003                   * File Level Event Code
          GOTO      LMFI9000
.
LMFI0004  APPEND    ANS,MFI004                   * Entered Date/Time
          GOTO      LMFI9000
.
LMFI0005  APPEND    ANS,MFI005                   * Effective Date/Time
          GOTO      LMFI9000
.
LMFI0006  APPEND    ANS,MFI006                   * Response Level Code
          GOTO      LMFI9000
.
LMFI9000  APPEND    ANS,SEGSTRNG                 * add char. to message buffer
.
LMFI9999  RETURN
+
.*****************************************************************************
.*                                 LMFE0000        Called by:                *
.*                          Load the MFE fields                              *
.*****************************************************************************
.
LMFE0000  BRANCH    FIELDNO,LMFE0001:            * Record Level Event Code
                            LMFE0002:            * MFN Control ID
                            LMFE0003:            * Effective Date/Time
                            LMFE0004:            * Primary Key Value - MFE
                            LMFE0005             * Primary Key Value Type
.
.         Invalid MFE field received, so ignore it
.
          GOTO      LMFE9000
.
LMFE0001  APPEND    ANS,MFE001                   * Record Level Event Code
          GOTO      LMFE9000
.
LMFE0002  APPEND    ANS,MFE002                   * MFN Control ID
          GOTO      LMFE9000
.
LMFE0003  APPEND    ANS,MFE003                   * Effective Date/Time
          GOTO      LMFE9000
.
LMFE0004  APPEND    ANS,MFE004                   * Primary Key Value - MFE
          GOTO      LMFE9000
.
LMFE0005  APPEND    ANS,MFE005                   * Primary Key Value Type
          GOTO      LMFE9000
.
LMFE9000  APPEND    ANS,SEGSTRNG                 * add char. to message buffer
.
LMFE9999  RETURN
+
.*****************************************************************************
.*                                 LSTF0000        Called by:                *
.*                          Load the STF fields                              *
.*****************************************************************************
.
LSTF0000  BRANCH    FIELDNO,LSTF0001:            * Primary Key Value - STF
                            LSTF0002:            * Staff ID Code
                            LSTF0003:            * Staff Name
                            LSTF0004:            * Staff Type
                            LSTF0005:            * Sex
                            LSTF0006:            * Date/Time of Birth
                            LSTF0007:            * Active/Inactive Flag
                            LSTF0008:            * Department
                            LSTF0009:            * Hospital Service
                            LSTF0010:            * Phone
                            LSTF0011:            * Office/Home Address
                            LSTF0012:            * Instituation Activation Date
                            LSTF0013:            * Instituation Inactiv. Date
                            LSTF0014:            * Backup Person ID
                            LSTF0015:            * E-mail Address
                            LSTF0016:            * Preferred Method of Contact
                            LSTF0017:            * Marital Status
                            LSTF0018:            * Job Title
                            LSTF0019:            * Job Code/Class
                            LSTF0020:            * Employment Status
                            LSTF0021:            * Additional Insured on Auto
                            LSTF0022:            * Driver's License Number-Staff
                            LSTF0023:            * Copy Auto Ins
                            LSTF0024:            * Auto Ins. Expires
                            LSTF0025:            * Date Last DMV Review
                            LSTF0026             * Date Next DMV Review
.
.         Invalid STF field received, so ignore it
.
          GOTO      LSTF9000
.
LSTF0001  APPEND    ANS,STF001                   * Primary Key Value - STF
          GOTO      LSTF9000
.
LSTF0002  APPEND    ANS,STF002                   * Staff ID Code
          GOTO      LSTF9000
.
LSTF0003  APPEND    ANS,STF003                   * Staff Name
          GOTO      LSTF9000
.
LSTF0004  APPEND    ANS,STF004                   * Staff Type
          GOTO      LSTF9000
.
LSTF0005  APPEND    ANS,STF005                   * Sex
          GOTO      LSTF9000
.
LSTF0006  APPEND    ANS,STF006                   * Date/Time of Birth
          GOTO      LSTF9000
.
LSTF0007  APPEND    ANS,STF007                   * Active/Inactive Flag
          GOTO      LSTF9000
.
LSTF0008  APPEND    ANS,STF008                   * Department
          GOTO      LSTF9000
.
LSTF0009  APPEND    ANS,STF009                   * Hospital Service
          GOTO      LSTF9000
.
LSTF0010  APPEND    ANS,STF010                   * Phone
          GOTO      LSTF9000
.
LSTF0011  APPEND    ANS,STF011                   * Office/Home Address
          GOTO      LSTF9000
.
LSTF0012  APPEND    ANS,STF012                   * Instituation Activation Date
          GOTO      LSTF9000
.
LSTF0013  APPEND    ANS,STF013                   * Instituation Inactiv. Date
          GOTO      LSTF9000
.
LSTF0014  APPEND    ANS,STF014                   * Backup Person ID
          GOTO      LSTF9000
.
LSTF0015  APPEND    ANS,STF015                   * E-mail Address
          GOTO      LSTF9000
.
LSTF0016  APPEND    ANS,STF016                   * Preferred Method of Contact
          GOTO      LSTF9000
.
LSTF0017  APPEND    ANS,STF017                   * Marital Status
          GOTO      LSTF9000
.
LSTF0018  APPEND    ANS,STF018                   * Job Title
          GOTO      LSTF9000
.
LSTF0019  APPEND    ANS,STF019                   * Job Code/Class
          GOTO      LSTF9000
.
LSTF0020  APPEND    ANS,STF020                   * Employment Status
          GOTO      LSTF9000
.
LSTF0021  APPEND    ANS,STF021                   * Additional Insured on Auto
          GOTO      LSTF9000
.
LSTF0022  APPEND    ANS,STF022                   * Driver's License Number-Staff
          GOTO      LSTF9000
.
LSTF0023  APPEND    ANS,STF023                   * Copy Auto Ins
          GOTO      LSTF9000
.
LSTF0024  APPEND    ANS,STF024                   * Auto Ins. Expires
          GOTO      LSTF9000
.
LSTF0025  APPEND    ANS,STF025                   * Date Last DMV Review
          GOTO      LSTF9000
.
LSTF0026  APPEND    ANS,STF026                   * Date Next DMV Review
          GOTO      LSTF9000
.
LSTF9000  APPEND    ANS,SEGSTRNG                 * add char. to message buffer
.
LSTF9999  RETURN
+
.*****************************************************************************
.*                                 LPRA0000        Called by:                *
.*                          Load the PRA fields                              *
.*****************************************************************************
.
LPRA0000  BRANCH    FIELDNO,LPRA0001:            * Primary Key Value - PRA
                            LPRA0002:            * Practitioner Group
                            LPRA0003:            * Practitioner Category
                            LPRA0004:            * Provider Billing
                            LPRA0005:            * Specialty
                            LPRA0006:            * Practitioner ID Numbers
                            LPRA0007:            * Privileges
                            LPRA0008             * Date Entered Practice
.
.         Invalid PRA field received, so ignore it
.
          GOTO      LPRA9000
.
LPRA0001  APPEND    ANS,PRA001                   * Primary Key Value - PRA
          GOTO      LPRA9000
.
LPRA0002  APPEND    ANS,PRA002                   * Practitioner Group
          GOTO      LPRA9000
.
LPRA0003  APPEND    ANS,PRA003                   * Practitioner Category
          GOTO      LPRA9000
.
LPRA0004  APPEND    ANS,PRA004                   * Provider Billing
          GOTO      LPRA9000
.
LPRA0005  APPEND    ANS,PRA005                   * Specialty
          GOTO      LPRA9000
.
LPRA0006  APPEND    ANS,PRA006                   * Practitioner ID Numbers
          GOTO      LPRA9000
.
LPRA0007  APPEND    ANS,PRA007                   * Privileges
          GOTO      LPRA9000
.
LPRA0008  APPEND    ANS,PRA008                   * Date Entered Practice
          GOTO      LPRA9000
.
LPRA9000  APPEND    ANS,SEGSTRNG                 * add char. to message buffer
.
LPRA9999  RETURN
+
.*****************************************************************************
.*                                 LTXA0000        Called by:                *
.*                          Load the TXA fields                              *
.*****************************************************************************
.
LTXA0000  BRANCH    FIELDNO,LTXA0001:            * Set ID
                            LTXA0002:            * Document Type
                            LTXA0003:            * Document Content Presentation
                            LTXA0004:            * Activity Date/Time
                            LTXA0005:            * Prim. Activity Prov. Code/Nam
                            LTXA0006:            * Origination Date/Time
                            LTXA0007:            * Transcription Date/Time
                            LTXA0008:            * Edit Date/Time
                            LTXA0009:            * Originator Date/Time
                            LTXA0010:            * Assigned Document Authent.
                            LTXA0011:            * Transcriptionist Code/Name
                            LTXA0012:            * Unique Document Number
                            LTXA0013:            * Parent Document Number
                            LTXA0014:            * Placer Order Number
                            LTXA0015:            * Filler Order Number
                            LTXA0016:            * Unique Document File Name
                            LTXA0017:            * Document Completion Status
                            LTXA0018:            * Document Confid. Status
                            LTXA0019:            * Document Availability Status
                            LTXA0020:            * Document Storage Status
                            LTXA0021:            * Document Change Reason
                            LTXA0022:            * Auth. Person, Time Stamp
                            LTXA0023             * Distributed Copies
.
.         Invalid TXA field received, so ignore it
.
          GOTO      LTXA9000
.
LTXA0001  APPEND    ANS,TXA001                   * load set id
          GOTO      LTXA9000
.
LTXA0002  APPEND    ANS,TXA002                   * load document type
          GOTO      LTXA9000
.
LTXA0003  APPEND    ANS,TXA003                   * load doc. content presentat'n
          GOTO      LTXA9000
.
LTXA0004  APPEND    ANS,TXA004                   * load activity date/time
          GOTO      LTXA9000
.
LTXA0005  APPEND    ANS,TXA005                   * load prim. act. prov. code
          GOTO      LTXA9000
.
LTXA0006  APPEND    ANS,TXA006                   * load origination date/time
          GOTO      LTXA9000
.
LTXA0007  APPEND    ANS,TXA007                   * load transcription date/time
          GOTO      LTXA9000
.
LTXA0008  APPEND    ANS,TXA008                   * load edit date/time
          GOTO      LTXA9000
.
LTXA0009  APPEND    ANS,TXA009                   * load originator date/time
          GOTO      LTXA9000
.
LTXA0010  APPEND    ANS,TXA010                   * load assig. doc. authentic'r
          GOTO      LTXA9000
.
LTXA0011  APPEND    ANS,TXA011                   * load transcript'st code/name
          GOTO      LTXA9000
.
LTXA0012  APPEND    ANS,TXA012                   * load unique document no.
          GOTO      LTXA9000
.
LTXA0013  APPEND    ANS,TXA013                   * load parent document no.
          GOTO      LTXA9000
.
LTXA0014  APPEND    ANS,TXA014                   * load placer order no.
          GOTO      LTXA9000
.
LTXA0015  APPEND    ANS,TXA015                   * load filler order no.
          GOTO      LTXA9000
.
LTXA0016  APPEND    ANS,TXA016                   * load unique doc. filename
          GOTO      LTXA9000
.
LTXA0017  APPEND    ANS,TXA017                   * load doc. completion status
          GOTO      LTXA9000
.
LTXA0018  APPEND    ANS,TXA018                   * load doc. confident'y status
          GOTO      LTXA9000
.
LTXA0019  APPEND    ANS,TXA019                   * load doc. availability status
          GOTO      LTXA9000
.
LTXA0020  APPEND    ANS,TXA020                   * load doc. storage status
          GOTO      LTXA9000
.
LTXA0021  APPEND    ANS,TXA021                   * load doc. change reason
          GOTO      LTXA9000
.
LTXA0022  APPEND    ANS,TXA022                   * load auth. person time stamp
          GOTO      LTXA9000
.
LTXA0023  APPEND    ANS,TXA023                   * load distributed copies
          GOTO      LTXA9000
.
LTXA9000  APPEND    ANS,SEGSTRNG                 * add char. to message buffer
.
LTXA9999  RETURN
+
.*****************************************************************************
.*                                 LIN10000        Called by:                *
.*                          Load the IN1 fields                              *
.*****************************************************************************
.
LIN10000  BRANCH    FIELDNO,LIN10001:            * Set Id
                            LIN10002:            * Insurance Plan Id
                            LIN10003:            * Insurance Company Id
                            LIN10004:            * Insurance Company Name
                            LIN10005:            * Insurance Co. Address
                            LIN10006:            * Insurance Co. Contact
                            LIN10007:            * Insurance Co. Phone No.
                            LIN10008:            * Group Number
                            LIN10009:            * Group Name
                            LIN10010:            * Insured's Group Emp Id
                            LIN10011:            * Insured's Group Emp Name
                            LIN10012:            * Plan Effective Date
                            LIN10013:            * Plan Expiration Date
                            LIN10014:            * Authorisation Info.
                            LIN10015:            * Plan Type
                            LIN10016:            * Name of Insured
                            LIN10017:            * Insured's Rel'ship to Pt.
                            LIN10018:            * Insured's DOB
                            LIN10019:            * Insured's Address
                            LIN10020:            * Assignment of Benefits
                            LIN10021:            * Coordination of Benefits
                            LIN10022:            * Coord. of Benefit Priority
                            LIN10023:            * Notice of Admiss. Flag
                            LIN10024:            * Notice of Admiss. Date
                            LIN10025:            * Report of Elig. Flag
                            LIN10026:            * Report of Elig. Date
                            LIN10027:            * Release Info. Code
                            LIN10028:            * Pre-admit Cert.
                            LIN10029:            * Verifcation Date/Time
                            LIN10030:            * ication By
                            LIN10031:            * Type of Agreement Code
                            LIN10032:            * Billing Status
                            LIN10033:            * Lifetime Reserve Days
                            LIN10034:            * Delay Before L.R. Day
                            LIN10035:            * Company Plan Code
                            LIN10036:            * Policy Number
                            LIN10037:            * Policy Deductible
                            LIN10038:            * Policy Limit - Amount
                            LIN10039:            * Policy Limit - Days
                            LIN10040:            * Room Rate - Semi Private
                            LIN10041:            * Room Rate - Private
                            LIN10042:            * Insured's Emplyment Status
                            LIN10043:            * Insured's Sex
                            LIN10044:            * Insured's Employer Address
                            LIN10045:            * Verification Status
                            LIN10046:            * Prior Insurance Plan Id
                            LIN10047:            * Coverage Type
                            LIN10048:            * Handicap
                            LIN10049             * Insured's Id Number
.
.         Invalid IN1 field received, so ignore it
.
          GOTO      LIN19000
.
LIN10001  APPEND    ANS,IN1001                   * load set id
          GOTO      LIN19000
.
LIN10002  APPEND    ANS,IN1002                   * load insurance plan id
          GOTO      LIN19000
.
LIN10003  APPEND    ANS,IN1003                   * load insurance company id
          GOTO      LIN19000
.
LIN10004  APPEND    ANS,IN1004                   * load insurance company name
          GOTO      LIN19000
.
LIN10005  APPEND    ANS,IN1005                   * load insurance co. address
          GOTO      LIN19000
.
LIN10006  APPEND    ANS,IN1006                   * load insurance co. contact
          GOTO      LIN19000
.
LIN10007  APPEND    ANS,IN1007                   * load insurance co. phone no.
          GOTO      LIN19000
.
LIN10008  APPEND    ANS,IN1008                   * load group number
          GOTO      LIN19000
.
LIN10009  APPEND    ANS,IN1009                   * load group name
          GOTO      LIN19000
.
LIN10010  APPEND    ANS,IN1010                   * load insured's group empl. id
          GOTO      LIN19000
.
LIN10011  APPEND    ANS,IN1011                   * load insured's group empl nm
          GOTO      LIN19000
.
LIN10012  APPEND    ANS,IN1012                   * load plan effective date
          GOTO      LIN19000
.
LIN10013  APPEND    ANS,IN1013                   * load plan expiration date
          GOTO      LIN19000
.
LIN10014  APPEND    ANS,IN1014                   * load authorisation info.
          GOTO      LIN19000
.
LIN10015  APPEND    ANS,IN1015                   * load plan type
          GOTO      LIN19000
.
LIN10016  APPEND    ANS,IN1016                   * load name of insured
          GOTO      LIN19000
.
LIN10017  APPEND    ANS,IN1017                   * load insured's rel'ship to pt
          GOTO      LIN19000
.
LIN10018  APPEND    ANS,IN1018                   * load insured's dob
          GOTO      LIN19000
.
LIN10019  APPEND    ANS,IN1019                   * load insured's address
          GOTO      LIN19000
.
LIN10020  APPEND    ANS,IN1020                   * load assignment of benefits
          GOTO      LIN19000
.
LIN10021  APPEND    ANS,IN1021                   * load coord. of benefits
          GOTO      LIN19000
.
LIN10022  APPEND    ANS,IN1022                   * load coord. of benefit pri.
          GOTO      LIN19000
.
LIN10023  APPEND    ANS,IN1023                   * load notice of admiss. flag
          GOTO      LIN19000
.
LIN10024  APPEND    ANS,IN1024                   * load notice of admiss. date
          GOTO      LIN19000
.
LIN10025  APPEND    ANS,IN1025                   * load report of elig. flag
          GOTO      LIN19000
.
LIN10026  APPEND    ANS,IN1026                   * load report of elig. date
          GOTO      LIN19000
.
LIN10027  APPEND    ANS,IN1027                   * load release info. code
          GOTO      LIN19000
.
LIN10028  APPEND    ANS,IN1028                   * load Pre-admit Cert.
          GOTO      LIN19000
.
LIN10029  APPEND    ANS,IN1029                   * load verification date/time
          GOTO      LIN19000
.
LIN10030  APPEND    ANS,IN1030                   * load verification by
          GOTO      LIN19000
.
LIN10031  APPEND    ANS,IN1031                   * load type of agreement code
          GOTO      LIN19000
.
LIN10032  APPEND    ANS,IN1032                   * load billing status
          GOTO      LIN19000
.
LIN10033  APPEND    ANS,IN1033                   * load lifetime reserve days
          GOTO      LIN19000
.
LIN10034  APPEND    ANS,IN1034                   * load delay before lr day
          GOTO      LIN19000
.
LIN10035  APPEND    ANS,IN1035                   * load company plan code
          GOTO      LIN19000
.
LIN10036  APPEND    ANS,IN1036                   * load policy number
          GOTO      LIN19000
.
LIN10037  APPEND    ANS,IN1037                   * load policy deductible
          GOTO      LIN19000
.
LIN10038  APPEND    ANS,IN1038                   * load policy limit - amount
          GOTO      LIN19000
.
LIN10039  APPEND    ANS,IN1039                   * load policy limit - days
          GOTO      LIN19000
.
LIN10040  APPEND    ANS,IN1040                   * load room rate - semi private
          GOTO      LIN19000
.
LIN10041  APPEND    ANS,IN1041                   * load room rate - private
          GOTO      LIN19000
.
LIN10042  APPEND    ANS,IN1042                   * load insured's empl. status
          GOTO      LIN19000
.
LIN10043  APPEND    ANS,IN1043                   * load insured's sex
          GOTO      LIN19000
.
LIN10044  APPEND    ANS,IN1044                   * load insured's empl. address
          GOTO      LIN19000
.
LIN10045  APPEND    ANS,IN1045                   * load verification status
          GOTO      LIN19000
.
LIN10046  APPEND    ANS,IN1046                   * load prior insurance plan id
          GOTO      LIN19000
.
LIN10047  APPEND    ANS,IN1047                   * load coverage type
          GOTO      LIN19000
.
LIN10048  APPEND    ANS,IN1048                   * load handicap
          GOTO      LIN19000
.
LIN10049  APPEND    ANS,IN1049                   * load insured's id number
          GOTO      LIN19000
.
LIN19000  APPEND    ANS,SEGSTRNG                 * add char. to message buffer
.
LIN19999  RETURN
+
.*****************************************************************************
.*                                 LZPM0000        Called by:                *
.*                          Load the ZPM fields                              *
.*****************************************************************************
.
LZPM0000  BRANCH    FIELDNO,LZPM0001:            * Patient Occupation
                            LZPM0002:            * Date of Death
                            LZPM0003:            * Local Medical Officer
                            LZPM0004:            * Alerts
                            LZPM0005:            * Patient Dead Indicator
                            LZPM0006:            * External Hospital Identifier
                            LZPM0007             * Reserved For Future Use
.
.         Invalid ZPM field received, so ignore it
.
          GOTO      LZPM9000
.
LZPM0001  APPEND    ANS,ZPM001                   * patient occupation
          GOTO      LZPM9000
.
LZPM0002  APPEND    ANS,ZPM002                   * date of death
          GOTO      LZPM9000
.
LZPM0003  APPEND    ANS,ZPM003                   * local medical officer
          GOTO      LZPM9000
.
LZPM0004  APPEND    ANS,ZPM004                   * alerts
          GOTO      LZPM9000
.
LZPM0005  APPEND    ANS,ZPM005                   * patient dead indicator
          GOTO      LZPM9000
.
LZPM0006  APPEND    ANS,ZPM006                   * external hospital identifier
          GOTO      LZPM9000
.
LZPM0007  APPEND    ANS,ZPM007                   * reserved for future use
          GOTO      LZPM9000
.
LZPM9000  APPEND    ANS,SEGSTRNG                 * add char. to message buffer
.
LZPM9999  RETURN
+
.*****************************************************************************
.*                                 LZAT0000        Called by:                *
.*                          Load the ZAT fields                              *
.*****************************************************************************
.
LZAT0000  BRANCH    FIELDNO,LZAT0001:            * Discharge Note
                            LZAT0002:            * Discharge Legal Status
                            LZAT0003:            * Discharge Referral
                            LZAT0004:            * Leave Time
                            LZAT0005:            * Assigned
                            LZAT0006:            * Day Carried Forward
                            LZAT0007:            * Admission Comment
                            LZAT0008             * Confidentiality Flag
.
.         Invalid ZAT field received, so ignore it
.
          GOTO      LZAT9000
.
LZAT0001  APPEND    ANS,ZAT001                   * discharge note
          GOTO      LZAT9000
.
LZAT0002  APPEND    ANS,ZAT002                   * discharge legal status
          GOTO      LZAT9000
.
LZAT0003  APPEND    ANS,ZAT003                   * discharge referral
          GOTO      LZAT9000
.
LZAT0004  APPEND    ANS,ZAT004                   * leave time
          GOTO      LZAT9000
.
LZAT0005  APPEND    ANS,ZAT005                   * assigned
          GOTO      LZAT9000
.
LZAT0006  APPEND    ANS,ZAT006                   * day carried forward
          GOTO      LZAT9000
.
LZAT0007  APPEND    ANS,ZAT007                   * admission comment
          GOTO      LZAT9000
.
LZAT0008  APPEND    ANS,ZAT008                   * confidentiality flag
          GOTO      LZAT9000
.
LZAT9000  APPEND    ANS,SEGSTRNG                 * add char. to message buffer
.
LZAT9999  RETURN
+
.*****************************************************************************
.*                                 LSCH0000        Called by:                *
.*                          Load the SCH fields                              *
.*****************************************************************************
.
LSCH0000  BRANCH    FIELDNO,LSCH0001:            * Placer Appointment ID
                            LSCH0002:            * Filler Appointment ID
                            LSCH0003:            * Occurrence Number
                            LSCH0004:            * Placer Group Number
                            LSCH0005:            * Schedule ID
                            LSCH0006:            * Event Reason
                            LSCH0007:            * Appointment Reason
                            LSCH0008:            * Appointment Type
                            LSCH0009:            * Appointment Duration
                            LSCH0010:            * Appointment Duration Units
                            LSCH0011:            * Appointment Timing Quantity
                            LSCH0012:            * Placer Contact Person
                            LSCH0013:            * Placer Contact Phone Number
                            LSCH0014:            * Placer Contact Address
                            LSCH0015:            * Placer Contact Location
                            LSCH0016:            * Filler Contact Person
                            LSCH0017:            * Filler Contact Phone Number
                            LSCH0018:            * Filler Contact Address
                            LSCH0019:            * Filler Contact Location
                            LSCH0020:            * Entered by Person
                            LSCH0021:            * Entered by Phone Number
                            LSCH0022:            * Entered by Location
                            LSCH0023:            * Parent Placer Appointment ID
                            LSCH0024:            * Parent Filler Appointment ID
                            LSCH0025             * Filler Status Code
.
.         Invalid SCH field received, so ignore it
.
          GOTO      LSCH9000
.
LSCH0001  APPEND    ANS,SCH001                   * Placer Appointment ID
          GOTO      LSCH9000
.
LSCH0002  APPEND    ANS,SCH002                   * Filler Appointment ID
          GOTO      LSCH9000
.
LSCH0003  APPEND    ANS,SCH003                   * Occurrence Number
          GOTO      LSCH9000
.
LSCH0004  APPEND    ANS,SCH004                   * Placer Group Number
          GOTO      LSCH9000
.
LSCH0005  APPEND    ANS,SCH005                   * Schedule ID
          GOTO      LSCH9000
.
LSCH0006  APPEND    ANS,SCH006                   * Event Reason
          GOTO      LSCH9000
.
LSCH0007  APPEND    ANS,SCH007                   * Appointment Reason
          GOTO      LSCH9000
.
LSCH0008  APPEND    ANS,SCH008                   * Appointment Type
          GOTO      LSCH9000
.
LSCH0009  APPEND    ANS,SCH009                   * Appointment Duration
          GOTO      LSCH9000
.
LSCH0010  APPEND    ANS,SCH010                   * Appointment Duration Units
          GOTO      LSCH9000
.
LSCH0011  APPEND    ANS,SCH011                   * Appointment Timing Quantity
          GOTO      LSCH9000
.
LSCH0012  APPEND    ANS,SCH012                   * Placer Contact Person
          GOTO      LSCH9000
.
LSCH0013  APPEND    ANS,SCH013                   * Placer Contact Phone Number
          GOTO      LSCH9000
.
LSCH0014  APPEND    ANS,SCH014                   * Placer Contact Address
          GOTO      LSCH9000
.
LSCH0015  APPEND    ANS,SCH015                   * Placer Contact Location
          GOTO      LSCH9000
.
LSCH0016  APPEND    ANS,SCH016                   * Filler Contact Person
          GOTO      LSCH9000
.
LSCH0017  APPEND    ANS,SCH017                   * Filler Contact Phone Number
          GOTO      LSCH9000
.
LSCH0018  APPEND    ANS,SCH018                   * Filler Contact Address
          GOTO      LSCH9000
.
LSCH0019  APPEND    ANS,SCH019                   * Filler Contact Location
          GOTO      LSCH9000
.
LSCH0020  APPEND    ANS,SCH020                   * Entered by Person
          GOTO      LSCH9000
.
LSCH0021  APPEND    ANS,SCH021                   * Entered by Phone Number
          GOTO      LSCH9000
.
LSCH0022  APPEND    ANS,SCH022                   * Entered by Location
          GOTO      LSCH9000
.
LSCH0023  APPEND    ANS,SCH023                   * Parent Placer Appointment ID
          GOTO      LSCH9000
.
LSCH0024  APPEND    ANS,SCH024                   * Parent Filler Appointment ID
          GOTO      LSCH9000
.
LSCH0025  APPEND    ANS,SCH025                   * Filler Status Code
          GOTO      LSCH9000
.
LSCH9000  APPEND    ANS,SEGSTRNG                 * add char. to message buffer
.
LSCH9999  RETURN
+
.*****************************************************************************
.*                                 LOBX0000        Called by:                *
.*                          Load the OBX fields                              *
.*****************************************************************************
.
LOBX0000  BRANCH    FIELDNO,LOBX0001:            * Set ID - OBX
                            LOBX0002:            * Value Type
                            LOBX0003:            * Observation Identifier
                            LOBX0004:            * Observation Sub-ID
                            LOBX0005:            * Observation Value
                            LOBX0006:            * Units
                            LOBX0007:            * References Range
                            LOBX0008:            * Abnormal Flags
                            LOBX0009:            * Probability
                            LOBX0010:            * Nature of Abnormal Test
                            LOBX0011:            * Observation Result Status
                            LOBX0012:            * Date Last Obs Normal Values
                            LOBX0013:            * User Defined Access Checks
                            LOBX0014:            * Date/Time of the Observation
                            LOBX0015:            * Producer's ID
                            LOBX0016:            * Responsible Observer
                            LOBX0017             * Observation Method
.
.         Invalid OBX field received, so ignore it
.
          GOTO      LOBX9000
.
LOBX0001  APPEND    ANS,OBX001                   * Set ID - OBX
          GOTO      LOBX9000
.
LOBX0002  APPEND    ANS,OBX002                   * Value Type
          GOTO      LOBX9000
.
LOBX0003  APPEND    ANS,OBX003                   * Observation Identifier
          GOTO      LOBX9000
.
LOBX0004  APPEND    ANS,OBX004                   * Observation Sub-ID
          GOTO      LOBX9000
.
LOBX0005  APPEND    ANS,OBX005                   * Observation Value
          GOTO      LOBX9000
.
LOBX0006  APPEND    ANS,OBX006                   * Units
          GOTO      LOBX9000
.
LOBX0007  APPEND    ANS,OBX007                   * References Range
          GOTO      LOBX9000
.
LOBX0008  APPEND    ANS,OBX008                   * Abnormal Flags
          GOTO      LOBX9000
.
LOBX0009  APPEND    ANS,OBX009                   * Probability
          GOTO      LOBX9000
.
LOBX0010  APPEND    ANS,OBX010                   * Nature of Abnormal Test
          GOTO      LOBX9000
.
LOBX0011  APPEND    ANS,OBX011                   * Observation Result Status
          GOTO      LOBX9000
.
LOBX0012  APPEND    ANS,OBX012                   * Date Last Obs Normal Values
          GOTO      LOBX9000
.
LOBX0013  APPEND    ANS,OBX013                   * User Defined Access Checks
          GOTO      LOBX9000
.
LOBX0014  APPEND    ANS,OBX014                   * Date/Time of the Observation
          GOTO      LOBX9000
.
LOBX0015  APPEND    ANS,OBX015                   * Producer's ID
          GOTO      LOBX9000
.
LOBX0016  APPEND    ANS,OBX016                   * Responsible Observer
          GOTO      LOBX9000
.
LOBX0017  APPEND    ANS,OBX017                   * Observation Method
          GOTO      LOBX9000
.
LOBX9000  APPEND    ANS,SEGSTRNG                 * add char. to message buffer
.
LOBX9999  RETURN
+
.*****************************************************************************
.*                                 LRGS0000        Called by:                *
.*                          Load the RGS fields                              *
.*****************************************************************************
.
LRGS0000  BRANCH    FIELDNO,LRGS0001:            * Set ID - RGS
                            LRGS0002:            * Segment Action Code
                            LRGS0003             * Resource Group ID
.
.         Invalid RGS field received, so ignore it
.
          GOTO      LRGS9000
.
LRGS0001  APPEND    ANS,RGS001                   * Set ID - RGS
          GOTO      LRGS9000
.
LRGS0002  APPEND    ANS,RGS002                   * Segment Action Code
          GOTO      LRGS9000
.
LRGS0003  APPEND    ANS,RGS003                   * Resource Group ID
          GOTO      LRGS9000
.
LRGS9000  APPEND    ANS,SEGSTRNG                 * add char. to message buffer
.
LRGS9999  RETURN
+
.*****************************************************************************
.*                                 LAIS0000        Called by:                *
.*                          Load the AIS fields                              *
.*****************************************************************************
.
LAIS0000  BRANCH    FIELDNO,LAIS0001:            * Set ID - AIS
                            LAIS0002:            * Segment Action Code
                            LAIS0003:            * Universal Service ID
                            LAIS0004:            * Start Date/Time
                            LAIS0005:            * Start Date/Time Offset
                            LAIS0006:            * Start Date/Time Offset Units
                            LAIS0007:            * Duration
                            LAIS0008:            * Duration Units
                            LAIS0009:            * Allow Substitution Code
                            LAIS0010             * Filler Status Code
.
.         Invalid AIS field received, so ignore it
.
          GOTO      LAIS9000
.
LAIS0001  APPEND    ANS,AIS001                   * Set ID - AIS
          GOTO      LAIS9000
.
LAIS0002  APPEND    ANS,AIS002                   * Segment Action Code
          GOTO      LAIS9000
.
LAIS0003  APPEND    ANS,AIS003                   * Universal Service ID
          GOTO      LAIS9000
.
LAIS0004  APPEND    ANS,AIS004                   * Start Date/Time
          GOTO      LAIS9000
.
LAIS0005  APPEND    ANS,AIS005                   * Start Date/Time Offset
          GOTO      LAIS9000
.
LAIS0006  APPEND    ANS,AIS006                   * Start Date/Time Offset Units
          GOTO      LAIS9000
.
LAIS0007  APPEND    ANS,AIS007                   * Duration
          GOTO      LAIS9000
.
LAIS0008  APPEND    ANS,AIS008                   * Duration Units
          GOTO      LAIS9000
.
LAIS0009  APPEND    ANS,AIS009                   * Allow Substitution Code
          GOTO      LAIS9000
.
LAIS0010  APPEND    ANS,AIS010                   * Filler Status Code
          GOTO      LAIS9000
.
LAIS9000  APPEND    ANS,SEGSTRNG                 * add char. to message buffer
.
LAIS9999  RETURN
+
.*****************************************************************************
.*                                 LAIL0000        Called by:                *
.*                          Load the AIL fields                              *
.*****************************************************************************
.
LAIL0000  BRANCH    FIELDNO,LAIL0001:            * Set ID - AIL
                            LAIL0002:            * Segment Action Code
                            LAIL0003:            * Location Resource ID
                            LAIL0004:            * Location Type-AIL
                            LAIL0005:            * Location Group
                            LAIL0006:            * Start Date/Time
                            LAIL0007:            * Start Date/Time Offset
                            LAIL0008:            * Start Date/Time Offset Units
                            LAIL0009:            * Duration
                            LAIL0010:            * Duration Units
                            LAIL0011:            * Allow Substitution Code
                            LAIL0012             * Filler Status Code
.
.         Invalid AIL field received, so ignore it
.
          GOTO      LAIL9000
.
LAIL0001  APPEND    ANS,AIL001                   * Set ID - AIL
          GOTO      LAIL9000
.
LAIL0002  APPEND    ANS,AIL002                   * Segment Action Code
          GOTO      LAIL9000
.
LAIL0003  APPEND    ANS,AIL003                   * Location Resource ID
          GOTO      LAIL9000
.
LAIL0004  APPEND    ANS,AIL004                   * Location Type-AIL
          GOTO      LAIL9000
.
LAIL0005  APPEND    ANS,AIL005                   * Location Group
          GOTO      LAIL9000
.
LAIL0006  APPEND    ANS,AIL006                   * Start Date/Time
          GOTO      LAIL9000
.
LAIL0007  APPEND    ANS,AIL007                   * Start Date/Time Offset
          GOTO      LAIL9000
.
LAIL0008  APPEND    ANS,AIL008                   * Start Date/Time Offset Units
          GOTO      LAIL9000
.
LAIL0009  APPEND    ANS,AIL009                   * Duration
          GOTO      LAIL9000
.
LAIL0010  APPEND    ANS,AIL010                   * Duration Units
          GOTO      LAIL9000
.
LAIL0011  APPEND    ANS,AIL011                   * Allow Substitution Code
          GOTO      LAIL9000
.
LAIL0012  APPEND    ANS,AIL012                   * Filler Status Code
          GOTO      LAIL9000
.
LAIL9000  APPEND    ANS,SEGSTRNG                 * add char. to message buffer
.
LAIL9999  RETURN
+
.*****************************************************************************
.*                                 LAIP0000        Called by:                *
.*                          Load the AIP fields                              *
.*****************************************************************************
.
LAIP0000  BRANCH    FIELDNO,LAIP0001:            * Set ID - AIP
                            LAIP0002:            * Segment Action code
                            LAIP0003:            * Personnel Resource ID
                            LAIP0004:            * Resource Role
                            LAIP0005:            * Resource Group
                            LAIP0006:            * Start Date/Time
                            LAIP0007:            * Start Date/Time Offset
                            LAIP0008:            * Start Date/Time Offset Units
                            LAIP0009:            * Duration
                            LAIP0010:            * Duration Units
                            LAIP0011:            * Allow Substitution Code
                            LAIP0012             * Filler Status Code
.
.         Invalid AIP field received, so ignore it
.
          GOTO      LAIP9000
.
LAIP0001  APPEND    ANS,AIP001                   * Set ID - AIP
          GOTO      LAIP9000
.
LAIP0002  APPEND    ANS,AIP002                   * Segment Action code
          GOTO      LAIP9000
.
LAIP0003  APPEND    ANS,AIP003                   * Personnel Resource ID
          GOTO      LAIP9000
.
LAIP0004  APPEND    ANS,AIP004                   * Resource Role
          GOTO      LAIP9000
.
LAIP0005  APPEND    ANS,AIP005                   * Resource Group
          GOTO      LAIP9000
.
LAIP0006  APPEND    ANS,AIP006                   * Start Date/Time
          GOTO      LAIP9000
.
LAIP0007  APPEND    ANS,AIP007                   * Start Date/Time Offset
          GOTO      LAIP9000
.
LAIP0008  APPEND    ANS,AIP008                   * Start Date/Time Offset Units
          GOTO      LAIP9000
.
LAIP0009  APPEND    ANS,AIP009                   * Duration
          GOTO      LAIP9000
.
LAIP0010  APPEND    ANS,AIP010                   * Duration Units
          GOTO      LAIP9000
.
LAIP0011  APPEND    ANS,AIP011                   * Allow Substitution Code
          GOTO      LAIP9000
.
LAIP0012  APPEND    ANS,AIP012                   * Filler Status Code
          GOTO      LAIP9000
.
LAIP9000  APPEND    ANS,SEGSTRNG                 * add char. to message buffer
.
LAIP9999  RETURN
+
.*****************************************************************************
.*                                 LRF10000        Called by:                *
.*                          Load the RF1 fields                              *
.*****************************************************************************
.
LRF10000  BRANCH    FIELDNO,LRF10001:            * Referral Status
                            LRF10002:            * Referral Priority
                            LRF10003:            * Referral Type
                            LRF10004:            * Referral Disposition
                            LRF10005:            * Referral Category
                            LRF10006:            * Originating Ref'l Identifier
                            LRF10007:            * Effective Date
                            LRF10008:            * Expiration Date
                            LRF10009:            * Process Date
                            LRF10010:            * Referral Reason
                            LRF10011             * External Referral Identifier
.
.         Invalid RF1 field received, so ignore it
.
          GOTO      LRF19000
.
LRF10001  APPEND    ANS,RF1001                   * Referral Status
          GOTO      LRF19000
.
LRF10002  APPEND    ANS,RF1002                   * Referral Priority
          GOTO      LRF19000
.
LRF10003  APPEND    ANS,RF1003                   * Referral Type
          GOTO      LRF19000
.
LRF10004  APPEND    ANS,RF1004                   * Referral Disposition
          GOTO      LRF19000
.
LRF10005  APPEND    ANS,RF1005                   * Referral Category
          GOTO      LRF19000
.
LRF10006  APPEND    ANS,RF1006                   * Originating Ref'l Identifier
          GOTO      LRF19000
.
LRF10007  APPEND    ANS,RF1007                   * Effective Date
          GOTO      LRF19000
.
LRF10008  APPEND    ANS,RF1008                   * Expiration Date
          GOTO      LRF19000
.
LRF10009  APPEND    ANS,RF1009                   * Process Date
          GOTO      LRF19000
.
LRF10010  APPEND    ANS,RF1010                   * Referral Reason
          GOTO      LRF19000
.
LRF10011  APPEND    ANS,RF1011                   * External Referral Identifier
          GOTO      LRF19000
.
LRF19000  APPEND    ANS,SEGSTRNG                 * add char. to message buffer
.
LRF19999  RETURN
+
.*****************************************************************************
.*                                 LPRD0000        Called by:                *
.*                          Load the PRD fields                              *
.*****************************************************************************
.
LPRD0000  BRANCH    FIELDNO,LPRD0001:            * Provider Role
                            LPRD0002:            * Provider Name
                            LPRD0003:            * Provider Address
                            LPRD0004:            * Provider Location
                            LPRD0005:            * Provider Comm. Information
                            LPRD0006:            * Pref. Methof of Contact
                            LPRD0007:            * Provider Identifiers
                            LPRD0008:            * Eff. Start Date Prov. Role
                            LPRD0009             * Eff. End Date Prov. Role
.
.         Invalid PRD field received, so ignore it
.
          GOTO      LPRD9000
.
LPRD0001  APPEND    ANS,PRD001                   * Provider Role
          GOTO      LPRD9000
.
LPRD0002  APPEND    ANS,PRD002                   * Provider Name
          GOTO      LPRD9000
.
LPRD0003  APPEND    ANS,PRD003                   * Provider Address
          GOTO      LPRD9000
.
LPRD0004  APPEND    ANS,PRD004                   * Provider Location
          GOTO      LPRD9000
.
LPRD0005  APPEND    ANS,PRD005                   * Provider Comm. Information
          GOTO      LPRD9000
.
LPRD0006  APPEND    ANS,PRD006                   * Pref. Methof of Contact
          GOTO      LPRD9000
.
LPRD0007  APPEND    ANS,PRD007                   * Provider Identifiers
          GOTO      LPRD9000
.
LPRD0008  APPEND    ANS,PRD008                   * Eff. Start Date Prov. Role
          GOTO      LPRD9000
.
LPRD0009  APPEND    ANS,PRD009                   * Eff. End Date Prov. Role
          GOTO      LPRD9000
.
LPRD9000  APPEND    ANS,SEGSTRNG                 * add char. to message buffer
.
LPRD9999  RETURN
+
.*****************************************************************************
.*                                 LPR10000        Called by:                *
.*                          Load the PR1 fields                              *
.*****************************************************************************
.
LPR10000  BRANCH    FIELDNO,LPR10001:            * Set ID
                            LPR10002:            * Procedure Coding Method
                            LPR10003:            * Procedure Code
                            LPR10004:            * Procedure Description
                            LPR10005:            * Procedure Date/Time
                            LPR10006:            * Procedure Functional Type
                            LPR10007:            * Procedure Minutes
                            LPR10008:            * Anaesthesiologist
                            LPR10009:            * Anaesthesia Code
                            LPR10010:            * Anaesthesia Minutes
                            LPR10011:            * Surgeon
                            LPR10012:            * Procedure Practitioner
                            LPR10013:            * Consent Code
                            LPR10014:            * Procedure Priority
                            LPR10015:            * Associated Diagnosis Code
                            LPR10016             * Procedure Code Modifier
.
.         Invalid PR1 field received, so ignore it
.
          GOTO      LPR19000
.
LPR10001  APPEND    ANS,PR1001                   * Set ID
          GOTO      LPR19000
.
LPR10002  APPEND    ANS,PR1002                   * Procedure Coding Method
          GOTO      LPR19000
.
LPR10003  APPEND    ANS,PR1003                   * Procedure Code
          GOTO      LPR19000
.
LPR10004  APPEND    ANS,PR1004                   * Procedure Description
          GOTO      LPR19000
.
LPR10005  APPEND    ANS,PR1005                   * Procedure Date/Time
          GOTO      LPR19000
.
LPR10006  APPEND    ANS,PR1006                   * Procedure Functional Type
          GOTO      LPR19000
.
LPR10007  APPEND    ANS,PR1007                   * Procedure Minutes
          GOTO      LPR19000
.
LPR10008  APPEND    ANS,PR1008                   * Anaesthesiologist
          GOTO      LPR19000
.
LPR10009  APPEND    ANS,PR1009                   * Anaesthesia Code
          GOTO      LPR19000
.
LPR10010  APPEND    ANS,PR1010                   * Anaesthesia Minutes
          GOTO      LPR19000
.
LPR10011  APPEND    ANS,PR1011                   * Surgeon
          GOTO      LPR19000
.
LPR10012  APPEND    ANS,PR1012                   * Procedure Practitioner
          GOTO      LPR19000
.
LPR10013  APPEND    ANS,PR1013                   * Consent Code
          GOTO      LPR19000
.
LPR10014  APPEND    ANS,PR1014                   * Procedure Priority
          GOTO      LPR19000
.
LPR10015  APPEND    ANS,PR1015                   * Associated Diagnosis Code
          GOTO      LPR19000
.
LPR10016  APPEND    ANS,PR1016                   * Procedure Code Modifier
          GOTO      LPR19000
.
LPR19000  APPEND    ANS,SEGSTRNG                 * add char. to message buffer
.
LPR19999  RETURN
+
.*****************************************************************************
.*                                 LZAL0000        Called by:                *
.*                          Load the ZAL fields                              *
.*****************************************************************************
.
LZAL0000  BRANCH    FIELDNO,LZAL0001:            * Set ID
                            LZAL0002:            * Alert Category
                            LZAL0003:            * Alert Code
                            LZAL0004:            * Reaction Code
                            LZAL0005:            * Alert Date
                            LZAL0006:            * Severity Level
                            LZAL0007:            * Review Date
                            LZAL0008:            * Date Inactive
                            LZAL0009:            * End Date
                            LZAL0010:            * Authorising HCP
                            LZAL0011:            * Update Date/Time
                            LZAL0012:            * User Who Updated
                            LZAL0013:            * Hospital
                            LZAL0014:            * Comments
                            LZAL0015             * Third Party Identifier
.
.         Invalid ZAL field received, so ignore it
.
          GOTO      LZAL9000
.
LZAL0001  APPEND    ANS,ZAL001                   * Set ID
          GOTO      LZAL9000
.
LZAL0002  APPEND    ANS,ZAL002                   * Alert Category
          GOTO      LZAL9000
.
LZAL0003  APPEND    ANS,ZAL003                   * Alert Code
          GOTO      LZAL9000
.
LZAL0004  APPEND    ANS,ZAL004                   * Reaction Code
          GOTO      LZAL9000
.
LZAL0005  APPEND    ANS,ZAL005                   * Alert Date
          GOTO      LZAL9000
.
LZAL0006  APPEND    ANS,ZAL006                   * Severity level
          GOTO      LZAL9000
.
LZAL0007  APPEND    ANS,ZAL007                   * Review Date
          GOTO      LZAL9000
.
LZAL0008  APPEND    ANS,ZAL008                   * Date Inactive
          GOTO      LZAL9000
.
LZAL0009  APPEND    ANS,ZAL009                   * End Date
          GOTO      LZAL9000
.
LZAL0010  APPEND    ANS,ZAL010                   * Authorising HCP
          GOTO      LZAL9000
.
LZAL0011  APPEND    ANS,ZAL011                   * Update Date/Time
          GOTO      LZAL9000
.
LZAL0012  APPEND    ANS,ZAL012                   * User Who Updated
          GOTO      LZAL9000
.
LZAL0013  APPEND    ANS,ZAL013                   * Hospital
          GOTO      LZAL9000
.
LZAL0014  APPEND    ANS,ZAL014                   * Comments
          GOTO      LZAL9000
.
LZAL0015  APPEND    ANS,ZAL015                   * Third Party Identifier
          GOTO      LZAL9000
.
LZAL9000  APPEND    ANS,SEGSTRNG                 * add char. to message buffer
.
LZAL9999  RETURN
+
.*****************************************************************************
.*                                 LZXP0000        Called by:                *
.*                          Load the ZXP fields                              *
.*****************************************************************************
.
LZXP0000  BRANCH    FIELDNO,LZXP0001:            * Pension Number Expiry Date
                            LZXP0002:            * Medicare Card Expiry Date
                            LZXP0003:            * Death Notification
                            LZXP0004:            * Privacy Indicator
                            LZXP0005:            * DVA Expiry Date
                            LZXP0006:            * Safety Net Expiry Date
                            LZXP0007:            * Local GP
                            LZXP0008:            * Local GP Surgery Address
                            LZXP0009:            * Local GP Provider Number
                            LZXP0010:            * Local GP Surgery Email
                            LZXP0011:            * Local GP Mobile Phone
                            LZXP0012:            * Local GP Home Phone
                            LZXP0013:            * Local GP Surgery Fax
                            LZXP0014:            * Local GP Surgery Phone
                            LZXP0015:            * Local GP Pager Phone
                            LZXP0016:            * Local GP Practice
                            LZXP0017:            * Local GP Practice Count
                            LZXP0018:            * GP Practice Surgery Address
                            LZXP0019:            * Local GP Practice Phone No.
                            LZXP0020:            * Local GP Practice Fax No.
                            LZXP0021             * Local GP Practice Email
.
.         Invalid ZXP field received, so ignore it
.
          GOTO      LZXP9000
.
LZXP0001  APPEND    ANS,ZXP001                   * Pension Number Expiry Date
          GOTO      LZXP9000
.
LZXP0002  APPEND    ANS,ZXP002                   * Medicare Card Expiry Date
          GOTO      LZXP9000
.
LZXP0003  APPEND    ANS,ZXP003                   * Death Notification
          GOTO      LZXP9000
.
LZXP0004  APPEND    ANS,ZXP004                   * Privacy Indicator
          GOTO      LZXP9000
.
LZXP0005  APPEND    ANS,ZXP005                   * DVA Expiry Date
          GOTO      LZXP9000
.
LZXP0006  APPEND    ANS,ZXP006                   * Safety Net Expiry Date
          GOTO      LZXP9000
.
LZXP0007  APPEND    ANS,ZXP007                   * Local GP
          GOTO      LZXP9000
.
LZXP0008  APPEND    ANS,ZXP008                   * Local GP Suregry Address
          GOTO      LZXP9000
.
LZXP0009  APPEND    ANS,ZXP009                   * Local GP Provider #
          GOTO      LZXP9000
.
LZXP0010  APPEND    ANS,ZXP010                   * Local GP Surgery Email
          GOTO      LZXP9000
.
LZXP0011  APPEND    ANS,ZXP011                   * Local GP Mobile Phone #
          GOTO      LZXP9000
.
LZXP0012  APPEND    ANS,ZXP012                   * Local GP Home Phone #
          GOTO      LZXP9000
.
LZXP0013  APPEND    ANS,ZXP013                   * Local GP Surgery Fax #
          GOTO      LZXP9000
.
LZXP0014  APPEND    ANS,ZXP014                   * Local GP Surgery Phone #
          GOTO      LZXP9000
.
LZXP0015  APPEND    ANS,ZXP015                   * Local GP Pager Phone #
          GOTO      LZXP9000
.
LZXP0016  APPEND    ANS,ZXP016                   * Local GP Practice
          GOTO      LZXP9000
.
LZXP0017  APPEND    ANS,ZXP017                   * Local GP Practice Count
          GOTO      LZXP9000
.
LZXP0018  APPEND    ANS,ZXP018                   * GP Practice Surgery Address
          GOTO      LZXP9000
.
LZXP0019  APPEND    ANS,ZXP019                   * Local GP Practice Phone No.
          GOTO      LZXP9000
.
LZXP0020  APPEND    ANS,ZXP020                   * Local GP Practice Fax No.
          GOTO      LZXP9000
.
LZXP0021  APPEND    ANS,ZXP021                   * Local GP Practice Email
          GOTO      LZXP9000
.
LZXP9000  APPEND    ANS,SEGSTRNG
.
LZXP9999  RETURN
+
.*****************************************************************************
.*                                 LZSD0000        Called by:                *
.*                          Load the ZSD fields                              *
.*****************************************************************************
.
LZSD0000  BRANCH    FIELDNO,LZSD0001:            * webPAS User
                            LZSD0002:            * Hospital
                            LZSD0003             * Medical Record Locations
.
.         Invalid ZSD field received, so ignore it
.
          GOTO      LZSD9000
.
LZSD0001  APPEND    ANS,ZSD001                   * webPAS User
          GOTO      LZSD9000
.
LZSD0002  APPEND    ANS,ZSD002                   * Hospital
          GOTO      LZSD9000
.
LZSD0003  APPEND    ANS,ZSD003                   * Medical Record Locations
          GOTO      LZSD9000
.
LZSD9000  APPEND    ANS,SEGSTRNG
.
LZSD9999  RETURN
+
.*****************************************************************************
.*                                 LZCT0000        Called by:                *
.*                          Load the ZCT fields                              *
.*****************************************************************************
.
LZCT0000  BRANCH    FIELDNO,LZCT0001             * Clinic Type Status
.
.         Invalid ZCT field received, so ignore it
.
          GOTO      LZCT9000
.
LZCT0001  APPEND    ANS,ZCT001                   * Clinic Type Status
          GOTO      LZCT9000
.
LZCT9000  APPEND    ANS,SEGSTRNG
.
LZCT9999  RETURN
+
.*****************************************************************************
.*                                 LZLH0000        Called by:                *
.*                          Load the ZLH fields                              *
.*****************************************************************************
.
LZLH0000  BRANCH    FIELDNO,LZLH0001:            * Hospital
                            LZLH0002:            * Supervision Level
                            LZLH0003:            * Hospital Start Date
                            LZLH0004             * Hospital End Date
.
.         Invalid ZLH field received, so ignore it
.
          GOTO      LZLH9000
.
LZLH0001  APPEND    ANS,ZLH001                   * Hospital
          GOTO      LZLH9000
.
LZLH0002  APPEND    ANS,ZLH002                   * Supervision Level
          GOTO      LZLH9000
.
LZLH0003  APPEND    ANS,ZLH003                   * Hospital Start Date
          GOTO      LZLH9000
.
LZLH0004  APPEND    ANS,ZLH004                   * Hospital End Date
          GOTO      LZLH9000
.
LZLH9000  APPEND    ANS,SEGSTRNG
.
LZLH9999  RETURN
+
.*****************************************************************************
.*                                 LZLU0000        Called by:                *
.*                          Load the ZLU fields                              *
.*****************************************************************************
.
LZLU0000  BRANCH    FIELDNO,LZLU0001:            * Unit
                            LZLU0002             * Doctor/Unit Provider Number
.
.         Invalid ZLU field received, so ignore it
.
          GOTO      LZLU9000
.
LZLU0001  APPEND    ANS,ZLU001                   * Unit
          GOTO      LZLU9000
.
LZLU0002  APPEND    ANS,ZLU002                   * Doctor/Unit Provider Number
          GOTO      LZLU9000
.
LZLU9000  APPEND    ANS,SEGSTRNG
.
LZLU9999  RETURN
+
.*****************************************************************************
.*                                 LZCM0000        Called by:                *
.*                          Load the ZCM fields                              *
.*****************************************************************************
.
LZCM0000  BRANCH    FIELDNO,LZCM0001:            * Clinic Master Status
                            LZCM0002:            * Date Closed
                            LZCM0003:            * Hospital
                            LZCM0004:            * Clinic Type
                            LZCM0005:            * Day of Week
                            LZCM0006:            * NMDS Code
                            LZCM0007             * Clinic Master Start Time
.
.         Invalid ZCM field received, so ignore it
.
          GOTO      LZCM9000
.
LZCM0001  APPEND    ANS,ZCM001                   * Clinic Master Status
          GOTO      LZCM9000
.
LZCM0002  APPEND    ANS,ZCM002                   * Date Closed
          GOTO      LZCM9000
.
LZCM0003  APPEND    ANS,ZCM003                   * Hospital
          GOTO      LZCM9000
.
LZCM0004  APPEND    ANS,ZCM004                   * Clinic Type
          GOTO      LZCM9000
.
LZCM0005  APPEND    ANS,ZCM005                   * Day of Week
          GOTO      LZCM9000
.
LZCM0006  APPEND    ANS,ZCM006                   * NMDS Code
          GOTO      LZCM9000
.
LZCM0007  APPEND    ANS,ZCM007                   * Clinic Master Start Time
          GOTO      LZCM9000
.
LZCM9000  APPEND    ANS,SEGSTRNG
.
LZCM9999  RETURN
+
.*****************************************************************************
.*                                 LZXV0000        Called by:                *
.*                          Load the ZXV fields                              *
.*****************************************************************************
.
LZXV0000  BRANCH    FIELDNO,LZXV0001:            * Visitors Allowed Indicator
                            LZXV0002:            * Employment Status Indicator
                            LZXV0003:            * Non WA Hospital Contact
                            LZXV0004:            * Waitlist Urgency
                            LZXV0005:            * Mental Health Referral Source
                            LZXV0006:            * O/P Referral Priority
                            LZXV0007:            * O/P Referral Reason
                            LZXV0008:            * O/P Referral Date
                            LZXV0009:            * O/P Referral Recorded Date
                            LZXV0010:            * O/P Appointment Type
                            LZXV0011:            * Mode of Arrival
                            LZXV0012:            * Triage Severity
                            LZXV0013:            * Comments
                            LZXV0014:            * Transfer From Source
                            LZXV0015:            * Source of Referral
                            LZXV0016:            * Care Class
                            LZXV0017:            * Linked O/P Referral Number
                            LZXV0018:            * MH Discharge Status
                            LZXV0019:            * Inform GP Flag
                            LZXV0020:            * Leave Type
                            LZXV0021:            * Leave Start Date/Time
                            LZXV0022:            * Leave Exp. Return Date/Time
                            LZXV0023:            * Division
                            LZXV0024:            * Unit
                            LZXV0025:            * Team
                            LZXV0026:            * Claim Type
                            LZXV0027:            * Admission Type
                            LZXV0028:            * Discharge Destination
                            LZXV0029:            * Transfer to Destination
                            LZXV0030:            * Leave Return Date/Time
                            LZXV0031:            * Diet Codes
                            LZXV0032             * Visit Interpreter Flag
.
.         Invalid ZXV field received, so ignore it
.
          GOTO      LZXV9000
.
LZXV0001  APPEND    ANS,ZXV001                   * Visitors Allowed Indicator
          GOTO      LZXV9000
.
LZXV0002  APPEND    ANS,ZXV002                   * Employment Status Indicator
          GOTO      LZXV9000
.
LZXV0003  APPEND    ANS,ZXV003                   * Non WA Hospital Contact
          GOTO      LZXV9000
.
LZXV0004  APPEND    ANS,ZXV004                   * Waitlist Urgency
          GOTO      LZXV9000
.
LZXV0005  APPEND    ANS,ZXV005                   * Mental Health Referral Source
          GOTO      LZXV9000
.
LZXV0006  APPEND    ANS,ZXV006                   * O/P Referral Priority
          GOTO      LZXV9000
.
LZXV0007  APPEND    ANS,ZXV007                   * O/P Referral Reason
          GOTO      LZXV9000
.
LZXV0008  APPEND    ANS,ZXV008                   * O/P Referral Date
          GOTO      LZXV9000
.
LZXV0009  APPEND    ANS,ZXV009                   * O/P Referral Recorded Date
          GOTO      LZXV9000
.
LZXV0010  APPEND    ANS,ZXV010                   * O/P Appointment Type
          GOTO      LZXV9000
.
LZXV0011  APPEND    ANS,ZXV011                   * Mode of Arrival
          GOTO      LZXV9000
.
LZXV0012  APPEND    ANS,ZXV012                   * Triage Severity
          GOTO      LZXV9000
.
LZXV0013  APPEND    ANS,ZXV013                   * Comments
          GOTO      LZXV9000
.
LZXV0014  APPEND    ANS,ZXV014                   * Transfer From Source
          GOTO      LZXV9000
.
LZXV0015  APPEND    ANS,ZXV015                   * Source of Referral
          GOTO      LZXV9000
.
LZXV0016  APPEND    ANS,ZXV016                   * Care Class
          GOTO      LZXV9000
.
LZXV0017  APPEND    ANS,ZXV017                   * Linked O/P Referral Number
          GOTO      LZXV9000
.
LZXV0018  APPEND    ANS,ZXV018                   * MH Discharge Status
          GOTO      LZXV9000
.
LZXV0019  APPEND    ANS,ZXV019                   * Inform GP Flag
          GOTO      LZXV9000
.
LZXV0020  APPEND    ANS,ZXV020                   * Leave Type
          GOTO      LZXV9000
.
LZXV0021  APPEND    ANS,ZXV021                   * Leave Start Date/Time
          GOTO      LZXV9000
.
LZXV0022  APPEND    ANS,ZXV022                   * Leave Exp. Return Date/Time
          GOTO      LZXV9000
.
LZXV0023  APPEND    ANS,ZXV023                   * Division
          GOTO      LZXV9000
.
LZXV0024  APPEND    ANS,ZXV024                   * Unit
          GOTO      LZXV9000
.
LZXV0025  APPEND    ANS,ZXV025                   * Team
          GOTO      LZXV9000
.
LZXV0026  APPEND    ANS,ZXV026                   * Claim Type
          GOTO      LZXV9000
.
LZXV0027  APPEND    ANS,ZXV027                   * Admission Type
          GOTO      LZXV9000
.
LZXV0028  APPEND    ANS,ZXV028                   * Discharge Destination
          GOTO      LZXV9000
.
LZXV0029  APPEND    ANS,ZXV029                   * Transfer to Destination
          GOTO      LZXV9000
.
LZXV0030  APPEND    ANS,ZXV030                   * Leave Return Date/Time
          GOTO      LZXV9000
.
LZXV0031  APPEND    ANS,ZXV031                   * Diet Codes
          GOTO      LZXV9000
.
LZXV0032  APPEND    ANS,ZXV032                   * Visit Interpreter Flag
          GOTO      LZXV9000
.
LZXV9000  APPEND    ANS,SEGSTRNG
.
LZXV9999  RETURN
+
.*****************************************************************************
.*                                 LGT10000        Called by:                *
.*                          Load the GT1 fields                              *
.*****************************************************************************
.
LGT10000  BRANCH    FIELDNO,LGT10001:            * Set ID
                            LGT10002:            * Guarantor Number
                            LGT10003:            * Guarantor Name
                            LGT10004:            * Guarantor Spouse Name
                            LGT10005:            * Guarantor Address
                            LGT10006:            * Guarantor Ph Num-Home
                            LGT10007:            * Guarantor Ph Num-Business
                            LGT10008:            * Guarantor Date of Birth
                            LGT10009:            * Guarantor Sex
                            LGT10010:            * Guarantor Type
                            LGT10011:            * Guarantor Relationship
                            LGT10012:            * Guarantor SSN
                            LGT10013:            * Guarantor Date - Begin
                            LGT10014:            * Guarantor Date - End
                            LGT10015:            * Guarantor Priority
                            LGT10016:            * Guarantor Employer Name
                            LGT10017:            * Guarantor Employer Address
                            LGT10018:            * Guarantor Employer Phone No.
                            LGT10019:            * Guarantor Employee ID Number
                            LGT10020:            * Guarantor Employment Status
                            LGT10021:            * Guarantor Organization Name
                            LGT10022:            * Guarantor Billing Hold Flag
                            LGT10023:            * Guarantor Credit Rating Code
                            LGT10024:            * Guarantor Death Date And Time
                            LGT10025:            * Guarantor Death Flag
                            LGT10026:            * Guarantor Charge Adj. Code
                            LGT10027:            * Guarantor House Annual Income
                            LGT10028:            * Guarantor Household Size
                            LGT10029:            * Guarantor Employer ID Number
                            LGT10030:            * Guarantor Marital Status Code
                            LGT10031:            * Guarantor Hire Effective Date
                            LGT10032:            * Employment Stop Date
                            LGT10033:            * Living Dependency
                            LGT10034:            * Ambulatory Status
                            LGT10035:            * Citizenship
                            LGT10036:            * Primary Language
                            LGT10037:            * Living Arrangement
                            LGT10038:            * Publicity Code
                            LGT10039:            * Protection Indicator
                            LGT10040:            * Student Indicator
                            LGT10041:            * Religion
                            LGT10042:            * Mother's Maiden Name
                            LGT10043:            * Nationality
                            LGT10044:            * Ethnic Group
                            LGT10045:            * Contact Person's Name
                            LGT10046:            * Contact Person's Telephone No
                            LGT10047:            * Contact Reason
                            LGT10048:            * Contact Relationship
                            LGT10049:            * Job Title
                            LGT10050:            * Job Code/Class
                            LGT10051:            * Guarantor Empl. Org. Name
                            LGT10052:            * Handicap
                            LGT10053:            * Job Status
                            LGT10054:            * Guarantor Financial Class
                            LGT10055             * Guarantor Race
.
.         Invalid GT1 field received, so ignore it
.
          GOTO      LGT19000
.
LGT10001  APPEND    ANS,GT1001                   * Set ID
          GOTO      LGT19000
.
LGT10002  APPEND    ANS,GT1002                   * Guarantor Number
          GOTO      LGT19000
.
LGT10003  APPEND    ANS,GT1003                   * Guarantor Name
          GOTO      LGT19000
.
LGT10004  APPEND    ANS,GT1004                   * Guarantor Spouse Name
          GOTO      LGT19000
.
LGT10005  APPEND    ANS,GT1005                   * Guarantor Address
          GOTO      LGT19000
.
LGT10006  APPEND    ANS,GT1006                   * Guarantor Ph Num-Home
          GOTO      LGT19000
.
LGT10007  APPEND    ANS,GT1007                   * Guarantor Ph Num-Business
          GOTO      LGT19000
.
LGT10008  APPEND    ANS,GT1008                   * Guarantor Date of Birth
          GOTO      LGT19000
.
LGT10009  APPEND    ANS,GT1009                   * Guarantor Sex
          GOTO      LGT19000
.
LGT10010  APPEND    ANS,GT1010                   * Guarantor Type
          GOTO      LGT19000
.
LGT10011  APPEND    ANS,GT1011                   * Guarantor Relationship
          GOTO      LGT19000
.
LGT10012  APPEND    ANS,GT1012                   * Guarantor SSN
          GOTO      LGT19000
.
LGT10013  APPEND    ANS,GT1013                   * Guarantor Date - Begin
          GOTO      LGT19000
.
LGT10014  APPEND    ANS,GT1014                   * Guarantor Date - End
          GOTO      LGT19000
.
LGT10015  APPEND    ANS,GT1015                   * Guarantor Priority
          GOTO      LGT19000
.
LGT10016  APPEND    ANS,GT1016                   * Guarantor Employer Name
          GOTO      LGT19000
.
LGT10017  APPEND    ANS,GT1017                   * Guarantor Employer Address
          GOTO      LGT19000
.
LGT10018  APPEND    ANS,GT1018                   * Guarantor Employer Phone No.
          GOTO      LGT19000
.
LGT10019  APPEND    ANS,GT1019                   * Guarantor Employee ID Number
          GOTO      LGT19000
.
LGT10020  APPEND    ANS,GT1020                   * Guarantor Employment Status
          GOTO      LGT19000
.
LGT10021  APPEND    ANS,GT1021                   * Guarantor Organization Name
          GOTO      LGT19000
.
LGT10022  APPEND    ANS,GT1022                   * Guarantor Billing Hold Flag
          GOTO      LGT19000
.
LGT10023  APPEND    ANS,GT1023                   * Guarantor Credit Rating Code
          GOTO      LGT19000
.
LGT10024  APPEND    ANS,GT1024                   * Guarantor Death Date And Time
          GOTO      LGT19000
.
LGT10025  APPEND    ANS,GT1025                   * Guarantor Death Flag
          GOTO      LGT19000
.
LGT10026  APPEND    ANS,GT1026                   * Guarantor Charge Adj. Code
          GOTO      LGT19000
.
LGT10027  APPEND    ANS,GT1027                   * Guarantor House Annual Income
          GOTO      LGT19000
.
LGT10028  APPEND    ANS,GT1028                   * Guarantor Household Size
          GOTO      LGT19000
.
LGT10029  APPEND    ANS,GT1029                   * Guarantor Employer ID Number
          GOTO      LGT19000
.
LGT10030  APPEND    ANS,GT1030                   * Guarantor Marital Status Code
          GOTO      LGT19000
.
LGT10031  APPEND    ANS,GT1031                   * Guarantor Hire Effective Date
          GOTO      LGT19000
.
LGT10032  APPEND    ANS,GT1032                   * Employment Stop Date
          GOTO      LGT19000
.
LGT10033  APPEND    ANS,GT1033                   * Living Dependency
          GOTO      LGT19000
.
LGT10034  APPEND    ANS,GT1034                   * Ambulatory Status
          GOTO      LGT19000
.
LGT10035  APPEND    ANS,GT1035                   * Citizenship
          GOTO      LGT19000
.
LGT10036  APPEND    ANS,GT1036                   * Primary Language
          GOTO      LGT19000
.
LGT10037  APPEND    ANS,GT1037                   * Living Arrangement
          GOTO      LGT19000
.
LGT10038  APPEND    ANS,GT1038                   * Publicity Code
          GOTO      LGT19000
.
LGT10039  APPEND    ANS,GT1039                   * Protection Indicator
          GOTO      LGT19000
.
LGT10040  APPEND    ANS,GT1040                   * Student Indicator
          GOTO      LGT19000
.
LGT10041  APPEND    ANS,GT1041                   * Religion
          GOTO      LGT19000
.
LGT10042  APPEND    ANS,GT1042                   * Mother's Maiden Name
          GOTO      LGT19000
.
LGT10043  APPEND    ANS,GT1043                   * Nationality
          GOTO      LGT19000
.
LGT10044  APPEND    ANS,GT1044                   * Ethnic Group
          GOTO      LGT19000
.
LGT10045  APPEND    ANS,GT1045                   * Contact Person's Name
          GOTO      LGT19000
.
LGT10046  APPEND    ANS,GT1046                   * Contact Person's Telephone No
          GOTO      LGT19000
.
LGT10047  APPEND    ANS,GT1047                   * Contact Reason
          GOTO      LGT19000
.
LGT10048  APPEND    ANS,GT1048                   * Contact Relationship
          GOTO      LGT19000
.
LGT10049  APPEND    ANS,GT1049                   * Job Title
          GOTO      LGT19000
.
LGT10050  APPEND    ANS,GT1050                   * Job Code/Class
          GOTO      LGT19000
.
LGT10051  APPEND    ANS,GT1051                   * Guarantor Empl. Org. Name
          GOTO      LGT19000
.
LGT10052  APPEND    ANS,GT1052                   * Handicap
          GOTO      LGT19000
.
LGT10053  APPEND    ANS,GT1053                   * Job Status
          GOTO      LGT19000
.
LGT10054  APPEND    ANS,GT1054                   * Guarantor Financial Class
          GOTO      LGT19000
.
LGT10055  APPEND    ANS,GT1055                   * Guarantor Race
          GOTO      LGT19000
.
LGT19000  APPEND    ANS,SEGSTRNG
.
LGT19999  RETURN
+
.*****************************************************************************
.*                                 LZLS0000        Called by:                *
.*                          Load the ZLS fields                              *
.*****************************************************************************
.
LZLS0000  BRANCH    FIELDNO,LZLS0001:            * Set ID
                            LZLS0002:            * Legal Status Code
                            LZLS0003:            * Start Date/Time
                            LZLS0004:            * End Date/Time
                            LZLS0005:            * Review Status
                            LZLS0006:            * Review HCP
                            LZLS0007:            * Review Location
                            LZLS0008:            * Review Date/Time
                            LZLS0009:            * Reminder Date
                            LZLS0010:            * Comments
                            LZLS0011:            * User ID Who Created Record
                            LZLS0012:            * Date/Time Record Created
                            LZLS0013:            * User ID Who Last Updated Rec.
                            LZLS0014:            * Date/Time Record Updated
                            LZLS0015:            * Supplementary Legal Status
                            LZLS0016:            * Supp. Legal Status Date
                            LZLS0017:            * Date Review Performed
                            LZLS0018:            * Court Notices Sent Date
                            LZLS0019:            * Tribunal Date
                            LZLS0020:            * Lodged With Court Date
                            LZLS0021             * Court Type Code
.
.         Invalid ZLS field received, so ignore it
.
          GOTO      LZLS9000
.
LZLS0001  APPEND    ANS,ZLS001                   * Set ID
          GOTO      LZLS9000
.
LZLS0002  APPEND    ANS,ZLS002                   * Legal Status Code
          GOTO      LZLS9000
.
LZLS0003  APPEND    ANS,ZLS003                   * Start Date/Time
          GOTO      LZLS9000
.
LZLS0004  APPEND    ANS,ZLS004                   * End Date/Time
          GOTO      LZLS9000
.
LZLS0005  APPEND    ANS,ZLS005                   * Review Status
          GOTO      LZLS9000
.
LZLS0006  APPEND    ANS,ZLS006                   * Review HCP
          GOTO      LZLS9000
.
LZLS0007  APPEND    ANS,ZLS007                   * Review Location
          GOTO      LZLS9000
.
LZLS0008  APPEND    ANS,ZLS008                   * Review Date/Time
          GOTO      LZLS9000
.
LZLS0009  APPEND    ANS,ZLS009                   * Reminder Date
          GOTO      LZLS9000
.
LZLS0010  APPEND    ANS,ZLS010                   * Comments
          GOTO      LZLS9000
.
LZLS0011  APPEND    ANS,ZLS011                   * User ID Who Created Record
          GOTO      LZLS9000
.
LZLS0012  APPEND    ANS,ZLS012                   * Date/Time Record Created
          GOTO      LZLS9000
.
LZLS0013  APPEND    ANS,ZLS013                   * User ID Who Last Updated Rec.
          GOTO      LZLS9000
.
LZLS0014  APPEND    ANS,ZLS014                   * Date/Time Record Updated
          GOTO      LZLS9000
.
LZLS0015  APPEND    ANS,ZLS015                   * Supplementary Legal Status
          GOTO      LZLS9000
.
LZLS0016  APPEND    ANS,ZLS016                   * Supp. Legal Status Date
          GOTO      LZLS9000
.
LZLS0017  APPEND    ANS,ZLS017                   * Date Review Performed
          GOTO      LZLS9000
.
LZLS0018  APPEND    ANS,ZLS018                   * Court Notices Sent Date
          GOTO      LZLS9000
.
LZLS0019  APPEND    ANS,ZLS019                   * Tribunal Date
          GOTO      LZLS9000
.
LZLS0020  APPEND    ANS,ZLS020                   * Lodged With Court Date
          GOTO      LZLS9000
.
LZLS0021  APPEND    ANS,ZLS021                   * Court Type Code
          GOTO      LZLS9000
.
LZLS9000  APPEND    ANS,SEGSTRNG
.
LZLS9999  RETURN
+
.*****************************************************************************
.*                                 LQRD0000        Called by:                *
.*                          Load the QRD fields                              *
.*****************************************************************************
.
LQRD0000  BRANCH    FIELDNO,LQRD0001:            * Query Date/Time
                            LQRD0002:            * Query Format Code
                            LQRD0003:            * Query Priority
                            LQRD0004:            * Query ID
                            LQRD0005:            * Deferred Response Type
                            LQRD0006:            * Deferred Response Date/Time
                            LQRD0007:            * Quantity Limited Request
                            LQRD0008:            * Who Subject Filter
                            LQRD0009:            * What Subject Filter
                            LQRD0010:            * What Department Data Code
                            LQRD0011:            * What Data Code Value Qual.
                            LQRD0012             * Query Results Level
.
.         Invalid QRD field received, so ignore it
.
          GOTO      LQRD9000
.
LQRD0001  APPEND    ANS,QRD001                   * Query Date/Time
          GOTO      LQRD9000
.
LQRD0002  APPEND    ANS,QRD002                   * Query Format Code
          GOTO      LQRD9000
.
LQRD0003  APPEND    ANS,QRD003                   * Query Priority
          GOTO      LQRD9000
.
LQRD0004  APPEND    ANS,QRD004                   * Query ID
          GOTO      LQRD9000
.
LQRD0005  APPEND    ANS,QRD005                   * Deferred Response Type
          GOTO      LQRD9000
.
LQRD0006  APPEND    ANS,QRD006                   * Deferred Response Date/Time
          GOTO      LQRD9000
.
LQRD0007  APPEND    ANS,QRD007                   * Quantity Limited Request
          GOTO      LQRD9000
.
LQRD0008  APPEND    ANS,QRD008                   * Who Subject Filter
          GOTO      LQRD9000
.
LQRD0009  APPEND    ANS,QRD009                   * What Subject Filter
          GOTO      LQRD9000
.
LQRD0010  APPEND    ANS,QRD010                   * What Department Data Code
          GOTO      LQRD9000
.
LQRD0011  APPEND    ANS,QRD011                   * What Data Code Value Qual.
          GOTO      LQRD9000
.
LQRD0012  APPEND    ANS,QRD012                   * Query Results Level
          GOTO      LQRD9000
.
LQRD9000  APPEND    ANS,SEGSTRNG
.
LQRD9999  RETURN
+
.*****************************************************************************
.*                                 LQRF0000        Called by:                *
.*                          Load the QRF fields                              *
.*****************************************************************************
.
LQRF0000  BRANCH    FIELDNO,LQRF0001:            * Where Subject Filter
                            LQRF0002:            * When Data Start Date/Time
                            LQRF0003:            * When Data End Date/Time
                            LQRF0004:            * What User Qualifier
                            LQRF0005:            * Other QRY Subject Filter
                            LQRF0006:            * Which Date/Time Qualifier
                            LQRF0007:            * Which Date/Time Status Qual.
                            LQRF0008:            * Date/Time Selection Qualifier
                            LQRF0009             * When Quantity/Timing Qual.
.
.         Invalid QRF field received, so ignore it
.
          GOTO      LQRF9000
.
LQRF0001  APPEND    ANS,QRF001                   * Where Subject Filter
          GOTO      LQRF9000
.
LQRF0002  APPEND    ANS,QRF002                   * When Data Start Date/Time
          GOTO      LQRF9000
.
LQRF0003  APPEND    ANS,QRF003                   * When Data End Date/Time
          GOTO      LQRF9000
.
LQRF0004  APPEND    ANS,QRF004                   * What User Qualifier
          GOTO      LQRF9000
.
LQRF0005  APPEND    ANS,QRF005                   * Other QRY Subject Filter
          GOTO      LQRF9000
.
LQRF0006  APPEND    ANS,QRF006                   * Which Date/Time Qualifier
          GOTO      LQRF9000
.
LQRF0007  APPEND    ANS,QRF007                   * Which Date/Time Status Qual.
          GOTO      LQRF9000
.
LQRF0008  APPEND    ANS,QRF008                   * Date/Time Selection Qualifier
          GOTO      LQRF9000
.
LQRF0009  APPEND    ANS,QRF009                   * When Quantity/Timing Qual.
          GOTO      LQRF9000
.
LQRF9000  APPEND    ANS,SEGSTRNG
.
LQRF9999  RETURN
+
.*****************************************************************************
.*                                 LZBR0000        Called by:                *
.*                          Load the ZBR fields                              *
.*****************************************************************************
.
LZBR0000  BRANCH    FIELDNO,LZBR0001:            * Request Date/Time
                            LZBR0002:            * Requesting Department
                            LZBR0003:            * Requesting Ward
                            LZBR0004:            * Admitting Consultant
                            LZBR0005:            * Type of Bed Required
                            LZBR0006:            * Specialty Bed Required
                            LZBR0007:            * Diagnosis
                            LZBR0008:            * Diagnosis Free Format
                            LZBR0009:            * Notes
                            LZBR0010:            * Expected Ward/Bed
                            LZBR0011:            * Ward/Bed Ready Date/Time
                            LZBR0012:            * Request Status
                            LZBR0013:            * Ward/Bed Allocated Date/Time
                            LZBR0014:            * Cancellation Reason
                            LZBR0015             * Cancelled Date/Time
.
.         Invalid ZBR field received, so ignore it
.
          GOTO      LZBR9000
.
LZBR0001  APPEND    ANS,ZBR001                   * Request Date/Time
          GOTO      LZBR9000
.
LZBR0002  APPEND    ANS,ZBR002                   * Requesting Department
          GOTO      LZBR9000
.
LZBR0003  APPEND    ANS,ZBR003                   * Request Ward
          GOTO      LZBR9000
.
LZBR0004  APPEND    ANS,ZBR004                   * Admitting Consultant
          GOTO      LZBR9000
.
LZBR0005  APPEND    ANS,ZBR005                   * Type of Bed Required
          GOTO      LZBR9000
.
LZBR0006  APPEND    ANS,ZBR006                   * Specialty Bed Required
          GOTO      LZBR9000
.
LZBR0007  APPEND    ANS,ZBR007                   * Diagnosis
          GOTO      LZBR9000
.
LZBR0008  APPEND    ANS,ZBR008                   * Diagnosis Free Format
          GOTO      LZBR9000
.
LZBR0009  APPEND    ANS,ZBR009                   * Notes
          GOTO      LZBR9000
.
LZBR0010  APPEND    ANS,ZBR010                   * Expected Ward/Bed
          GOTO      LZBR9000
.
LZBR0011  APPEND    ANS,ZBR011                   * Ward/Bed Ready Date/Time
          GOTO      LZBR9000
.
LZBR0012  APPEND    ANS,ZBR012                   * Request Status
          GOTO      LZBR9000
.
LZBR0013  APPEND    ANS,ZBR013                   * Ward/Bed Allocated Date/Time
          GOTO      LZBR9000
.
LZBR0014  APPEND    ANS,ZBR014                   * Cancellation Reason
          GOTO      LZBR9000
.
LZBR0015  APPEND    ANS,ZBR015                   * Cancellation Date/Time
          GOTO      LZBR9000
.
LZBR9000  APPEND    ANS,SEGSTRNG
.
LZBR9999  RETURN
+
.*****************************************************************************
.*                               CMSH0000          Called by:                *
.*                     Clear all MSH variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CMSH0000  MOVE      SP100,MSH002
          PACK      MSH003,SP100,SP100
          PACK      MSH004,SP100,SP100
          PACK      MSH005,SP100,SP100
          PACK      MSH006,SP100,SP100
          MOVE      SP100,MSH007
          MOVE      SP100,MSH008
          MOVE      SP100,MSH009
          MOVE      SP100,MSH010
          MOVE      SP100,MSH011
          MOVE      SP100,MSH012
          MOVE      SP100,MSH013
          PACK      MSH014,SP100,SP100
          MOVE      SP100,MSH015
          MOVE      SP100,MSH016
          MOVE      SP100,MSH017
          MOVE      SP100,MSH018
          MOVE      SP100,MSH019
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     MSH002
          CLEAR     MSH003
          CLEAR     MSH004
          CLEAR     MSH005
          CLEAR     MSH006
          CLEAR     MSH007
          CLEAR     MSH008
          CLEAR     MSH009
          CLEAR     MSH010
          CLEAR     MSH011
          CLEAR     MSH012
          CLEAR     MSH013
          CLEAR     MSH014
          CLEAR     MSH015
          CLEAR     MSH016
          CLEAR     MSH017
          CLEAR     MSH018
          CLEAR     MSH019
.
CMSH9999  RETURN
+
.*****************************************************************************
.*                               CEVN0000          Called by:                *
.*                     Clear all EVN variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CEVN0000  MOVE      SP100,EVN001
          MOVE      SP100,EVN002
          MOVE      SP100,EVN003
          MOVE      SP100,EVN004
          MOVE      SP100,EVN005
          MOVE      SP100,EVN006
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     EVN001
          CLEAR     EVN002
          CLEAR     EVN003
          CLEAR     EVN004
          CLEAR     EVN005
          CLEAR     EVN006
.
CEVN9999  RETURN
+
.*****************************************************************************
.*                               CPID0000          Called by:                *
.*                     Clear all PID variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CPID0000  MOVE      SP100,PID001
          MOVE      SP100,PID002
          MOVE      SP100,PID003
          MOVE      SP100,PID004
          MOVE      SP100,PID005
          MOVE      SP100,PID006
          MOVE      SP100,PID007
          MOVE      SP100,PID008
          MOVE      SP100,PID009
          MOVE      SP100,PID010
          PACK      PID011,SP100,SP100
          MOVE      SP100,PID012
          MOVE      SP100,PID013
          MOVE      SP100,PID014
          MOVE      SP100,PID015
          MOVE      SP100,PID016
          MOVE      SP100,PID017
          MOVE      SP100,PID018
          MOVE      SP100,PID019
          MOVE      SP100,PID020
          MOVE      SP100,PID021
          MOVE      SP100,PID022
          MOVE      SP100,PID023
          MOVE      SP100,PID024
          MOVE      SP100,PID025
          MOVE      SP100,PID026
          MOVE      SP100,PID027
          MOVE      SP100,PID028
          MOVE      SP100,PID029
          MOVE      SP100,PID030
          MOVE      SP100,PID031
          MOVE      SP100,PID032
          MOVE      SP100,PID033
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     PID001
          CLEAR     PID002
          CLEAR     PID003
          CLEAR     PID004
          CLEAR     PID005
          CLEAR     PID006
          CLEAR     PID007
          CLEAR     PID008
          CLEAR     PID009
          CLEAR     PID010
          CLEAR     PID011
          CLEAR     PID012
          CLEAR     PID013
          CLEAR     PID014
          CLEAR     PID015
          CLEAR     PID016
          CLEAR     PID017
          CLEAR     PID018
          CLEAR     PID019
          CLEAR     PID020
          CLEAR     PID021
          CLEAR     PID022
          CLEAR     PID023
          CLEAR     PID024
          CLEAR     PID025
          CLEAR     PID026
          CLEAR     PID027
          CLEAR     PID028
          CLEAR     PID029
          CLEAR     PID030
          CLEAR     PID031
          CLEAR     PID032
          CLEAR     PID033
.
CPID9999  RETURN
+
.*****************************************************************************
.*                               CNK10000          Called by:                *
.*                     Clear all NK1 variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CNK10000  MOVE      SP100,NK1001
          MOVE      SP100,NK1002
          MOVE      SP100,NK1003
          PACK      NK1004,SP100,SP100
          MOVE      SP100,NK1005
          MOVE      SP100,NK1006
          MOVE      SP100,NK1007
          MOVE      SP100,NK1008
          MOVE      SP100,NK1009
          MOVE      SP100,NK1010
          MOVE      SP100,NK1011
          MOVE      SP100,NK1012
          MOVE      SP100,NK1013
          MOVE      SP100,NK1014
          MOVE      SP100,NK1015
          MOVE      SP100,NK1016
          MOVE      SP100,NK1017
          MOVE      SP100,NK1018
          MOVE      SP100,NK1019
          MOVE      SP100,NK1020
          MOVE      SP100,NK1021
          MOVE      SP100,NK1022
          MOVE      SP100,NK1023
          MOVE      SP100,NK1024
          MOVE      SP100,NK1025
          MOVE      SP100,NK1026
          MOVE      SP100,NK1027
          MOVE      SP100,NK1028
          MOVE      SP100,NK1029
          MOVE      SP100,NK1030
          MOVE      SP100,NK1031
          PACK      NK1032,SP100,SP100
          MOVE      SP100,NK1033
          MOVE      SP100,NK1034
          MOVE      SP100,NK1035
          MOVE      SP100,NK1036
          MOVE      SP100,NK1037
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     NK1001
          CLEAR     NK1002
          CLEAR     NK1003
          CLEAR     NK1004
          CLEAR     NK1005
          CLEAR     NK1006
          CLEAR     NK1007
          CLEAR     NK1008
          CLEAR     NK1009
          CLEAR     NK1010
          CLEAR     NK1011
          CLEAR     NK1012
          CLEAR     NK1013
          CLEAR     NK1014
          CLEAR     NK1015
          CLEAR     NK1016
          CLEAR     NK1017
          CLEAR     NK1018
          CLEAR     NK1019
          CLEAR     NK1020
          CLEAR     NK1021
          CLEAR     NK1022
          CLEAR     NK1023
          CLEAR     NK1024
          CLEAR     NK1025
          CLEAR     NK1026
          CLEAR     NK1027
          CLEAR     NK1028
          CLEAR     NK1029
          CLEAR     NK1030
          CLEAR     NK1031
          CLEAR     NK1032
          CLEAR     NK1033
          CLEAR     NK1034
          CLEAR     NK1035
          CLEAR     NK1036
          CLEAR     NK1037
.
CNK19999  RETURN
+
.*****************************************************************************
.*                               CPV10000          Called by:                *
.*                     Clear all PV1 variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CPV10000  MOVE      SP100,PV1001
          MOVE      SP100,PV1002
          MOVE      SP100,PV1003
          MOVE      SP100,PV1004
          MOVE      SP100,PV1005
          MOVE      SP100,PV1006
          MOVE      SP100,PV1007
          MOVE      SP100,PV1008
          MOVE      SP100,PV1009
          MOVE      SP100,PV1010
          MOVE      SP100,PV1011
          MOVE      SP100,PV1012
          MOVE      SP100,PV1013
          MOVE      SP100,PV1014
          MOVE      SP100,PV1015
          MOVE      SP100,PV1016
          MOVE      SP100,PV1017
          MOVE      SP100,PV1018
          MOVE      SP100,PV1019
          MOVE      SP100,PV1020
          MOVE      SP100,PV1021
          MOVE      SP100,PV1022
          MOVE      SP100,PV1023
          MOVE      SP100,PV1024
          MOVE      SP100,PV1025
          MOVE      SP100,PV1026
          MOVE      SP100,PV1027
          MOVE      SP100,PV1028
          MOVE      SP100,PV1029
          MOVE      SP100,PV1030
          MOVE      SP100,PV1031
          MOVE      SP100,PV1032
          MOVE      SP100,PV1033
          MOVE      SP100,PV1034
          MOVE      SP100,PV1035
          MOVE      SP100,PV1036
          MOVE      SP100,PV1037
          MOVE      SP100,PV1038
          MOVE      SP100,PV1039
          MOVE      SP100,PV1040
          MOVE      SP100,PV1041
          MOVE      SP100,PV1042
          MOVE      SP100,PV1043
          MOVE      SP100,PV1044
          MOVE      SP100,PV1045
          MOVE      SP100,PV1046
          MOVE      SP100,PV1047
          MOVE      SP100,PV1048
          MOVE      SP100,PV1049
          MOVE      SP100,PV1050
          MOVE      SP100,PV1051
          MOVE      SP100,PV1052
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     PV1001
          CLEAR     PV1002
          CLEAR     PV1003
          CLEAR     PV1004
          CLEAR     PV1005
          CLEAR     PV1006
          CLEAR     PV1007
          CLEAR     PV1008
          CLEAR     PV1009
          CLEAR     PV1010
          CLEAR     PV1011
          CLEAR     PV1012
          CLEAR     PV1013
          CLEAR     PV1014
          CLEAR     PV1015
          CLEAR     PV1016
          CLEAR     PV1017
          CLEAR     PV1018
          CLEAR     PV1019
          CLEAR     PV1020
          CLEAR     PV1021
          CLEAR     PV1022
          CLEAR     PV1023
          CLEAR     PV1024
          CLEAR     PV1025
          CLEAR     PV1026
          CLEAR     PV1027
          CLEAR     PV1028
          CLEAR     PV1029
          CLEAR     PV1030
          CLEAR     PV1031
          CLEAR     PV1032
          CLEAR     PV1033
          CLEAR     PV1034
          CLEAR     PV1035
          CLEAR     PV1036
          CLEAR     PV1037
          CLEAR     PV1038
          CLEAR     PV1039
          CLEAR     PV1040
          CLEAR     PV1041
          CLEAR     PV1042
          CLEAR     PV1043
          CLEAR     PV1044
          CLEAR     PV1045
          CLEAR     PV1046
          CLEAR     PV1047
          CLEAR     PV1048
          CLEAR     PV1049
          CLEAR     PV1050
          CLEAR     PV1051
          CLEAR     PV1052
.
CPV19999  RETURN
+
.*****************************************************************************
.*                               CPV20000          Called by:                *
.*                     Clear all PV2 variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CPV20000  MOVE      SP100,PV2001
          MOVE      SP100,PV2002
          MOVE      SP100,PV2003
          MOVE      SP100,PV2004
          MOVE      SP100,PV2005
          MOVE      SP100,PV2006
          MOVE      SP100,PV2007
          MOVE      SP100,PV2008
          MOVE      SP100,PV2009
          MOVE      SP100,PV2010
          MOVE      SP100,PV2011
          MOVE      SP100,PV2012
          MOVE      SP100,PV2013
          MOVE      SP100,PV2014
          MOVE      SP100,PV2015
          MOVE      SP100,PV2016
          MOVE      SP100,PV2017
          MOVE      SP100,PV2018
          MOVE      SP100,PV2019
          MOVE      SP100,PV2020
          MOVE      SP100,PV2021
          MOVE      SP100,PV2022
          MOVE      SP100,PV2023
          MOVE      SP100,PV2024
          MOVE      SP100,PV2025
          MOVE      SP100,PV2026
          MOVE      SP100,PV2027
          MOVE      SP100,PV2028
          MOVE      SP100,PV2029
          MOVE      SP100,PV2030
          MOVE      SP100,PV2031
          MOVE      SP100,PV2032
          MOVE      SP100,PV2033
          MOVE      SP100,PV2034
          MOVE      SP100,PV2035
          MOVE      SP100,PV2036
          MOVE      SP100,PV2037
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     PV2001
          CLEAR     PV2002
          CLEAR     PV2003
          CLEAR     PV2004
          CLEAR     PV2005
          CLEAR     PV2006
          CLEAR     PV2007
          CLEAR     PV2008
          CLEAR     PV2009
          CLEAR     PV2010
          CLEAR     PV2011
          CLEAR     PV2012
          CLEAR     PV2013
          CLEAR     PV2014
          CLEAR     PV2015
          CLEAR     PV2016
          CLEAR     PV2017
          CLEAR     PV2018
          CLEAR     PV2019
          CLEAR     PV2020
          CLEAR     PV2021
          CLEAR     PV2022
          CLEAR     PV2023
          CLEAR     PV2024
          CLEAR     PV2025
          CLEAR     PV2026
          CLEAR     PV2027
          CLEAR     PV2028
          CLEAR     PV2029
          CLEAR     PV2030
          CLEAR     PV2031
          CLEAR     PV2032
          CLEAR     PV2033
          CLEAR     PV2034
          CLEAR     PV2035
          CLEAR     PV2036
          CLEAR     PV2037
.
CPV29999  RETURN
+
.*****************************************************************************
.*                               CDG10000          Called by:                *
.*                     Clear all DG1 variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CDG10000  MOVE      SP100,DG1001
          MOVE      SP100,DG1002
          MOVE      SP100,DG1003
          MOVE      SP100,DG1004
          MOVE      SP100,DG1005
          MOVE      SP100,DG1006
          MOVE      SP100,DG1007
          MOVE      SP100,DG1008
          MOVE      SP100,DG1009
          MOVE      SP100,DG1010
          MOVE      SP100,DG1011
          MOVE      SP100,DG1012
          MOVE      SP100,DG1013
          MOVE      SP100,DG1014
          MOVE      SP100,DG1015
          MOVE      SP100,DG1016
          MOVE      SP100,DG1017
          MOVE      SP100,DG1018
          MOVE      SP100,DG1019
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     DG1001
          CLEAR     DG1002
          CLEAR     DG1003
          CLEAR     DG1004
          CLEAR     DG1005
          CLEAR     DG1006
          CLEAR     DG1007
          CLEAR     DG1008
          CLEAR     DG1009
          CLEAR     DG1010
          CLEAR     DG1011
          CLEAR     DG1012
          CLEAR     DG1013
          CLEAR     DG1014
          CLEAR     DG1015
          CLEAR     DG1016
          CLEAR     DG1017
          CLEAR     DG1018
          CLEAR     DG1019
.
CDG19999  RETURN
+
.*****************************************************************************
.*                               CAL10000          Called by:                *
.*                     Clear all AL1 variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CAL10000  MOVE      SP100,AL1001
          MOVE      SP100,AL1002
          MOVE      SP100,AL1003
          MOVE      SP100,AL1004
          MOVE      SP100,AL1005
          MOVE      SP100,AL1006
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     AL1001
          CLEAR     AL1002
          CLEAR     AL1003
          CLEAR     AL1004
          CLEAR     AL1005
          CLEAR     AL1006
.
CAL19999  RETURN
+
.*****************************************************************************
.*                               CMRG0000          Called by:                *
.*                     Clear all MRG variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CMRG0000  MOVE      SP100,MRG001
          MOVE      SP100,MRG002
          MOVE      SP100,MRG003
          MOVE      SP100,MRG004
          MOVE      SP100,MRG005
          MOVE      SP100,MRG006
          MOVE      SP100,MRG007
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     MRG001
          CLEAR     MRG002
          CLEAR     MRG003
          CLEAR     MRG004
          CLEAR     MRG005
          CLEAR     MRG006
          CLEAR     MRG007
.
CMRG9999  RETURN
+
.*****************************************************************************
.*                               CDRG0000          Called by:                *
.*                     Clear all DRG variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CDRG0000  MOVE      SP100,DRG001
          MOVE      SP100,DRG002
          MOVE      SP100,DRG003
          MOVE      SP100,DRG004
          MOVE      SP100,DRG005
          MOVE      SP100,DRG006
          MOVE      SP100,DRG007
          MOVE      SP100,DRG008
          MOVE      SP100,DRG009
          MOVE      SP100,DRG010
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     DRG001
          CLEAR     DRG002
          CLEAR     DRG003
          CLEAR     DRG004
          CLEAR     DRG005
          CLEAR     DRG006
          CLEAR     DRG007
          CLEAR     DRG008
          CLEAR     DRG009
          CLEAR     DRG010
.
CDRG9999  RETURN
+
.*****************************************************************************
.*                               CTXA0000          Called by:                *
.*                     Clear all TXA variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CTXA0000  MOVE      SP100,TXA001
          MOVE      SP100,TXA002
          MOVE      SP100,TXA003
          MOVE      SP100,TXA004
          MOVE      SP100,TXA005
          MOVE      SP100,TXA006
          MOVE      SP100,TXA007
          MOVE      SP100,TXA008
          MOVE      SP100,TXA009
          MOVE      SP100,TXA010
          MOVE      SP100,TXA011
          MOVE      SP100,TXA012
          MOVE      SP100,TXA013
          MOVE      SP100,TXA014
          MOVE      SP100,TXA015
          MOVE      SP100,TXA016
          MOVE      SP100,TXA017
          MOVE      SP100,TXA018
          MOVE      SP100,TXA019
          MOVE      SP100,TXA020
          MOVE      SP100,TXA021
          MOVE      SP100,TXA022
          MOVE      SP100,TXA023
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     TXA001
          CLEAR     TXA002
          CLEAR     TXA003
          CLEAR     TXA004
          CLEAR     TXA005
          CLEAR     TXA006
          CLEAR     TXA007
          CLEAR     TXA008
          CLEAR     TXA009
          CLEAR     TXA010
          CLEAR     TXA011
          CLEAR     TXA012
          CLEAR     TXA013
          CLEAR     TXA014
          CLEAR     TXA015
          CLEAR     TXA016
          CLEAR     TXA017
          CLEAR     TXA018
          CLEAR     TXA019
          CLEAR     TXA020
          CLEAR     TXA021
          CLEAR     TXA022
          CLEAR     TXA023
.
CTXA9999  RETURN
+
.*****************************************************************************
.*                               CIN10000          Called by:                *
.*                     Clear all IN1 variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CIN10000  MOVE      SP100,IN1001
          MOVE      SP100,IN1002
          MOVE      SP100,IN1003
          PACK      IN1004,SP100,SP100
          PACK      IN1005,SP100,SP100
          MOVE      SP100,IN1006
          MOVE      SP100,IN1007
          MOVE      SP100,IN1008
          PACK      IN1009,SP100,SP100
          MOVE      SP100,IN1010
          PACK      IN1011,SP100,SP100
          MOVE      SP100,IN1012
          MOVE      SP100,IN1013
          MOVE      SP100,IN1014
          MOVE      SP100,IN1015
          MOVE      SP100,IN1016
          MOVE      SP100,IN1017
          MOVE      SP100,IN1018
          PACK      IN1019,SP100,SP100
          MOVE      SP100,IN1020
          MOVE      SP100,IN1021
          MOVE      SP100,IN1022
          MOVE      SP100,IN1023
          MOVE      SP100,IN1024
          MOVE      SP100,IN1025
          MOVE      SP100,IN1026
          MOVE      SP100,IN1027
          MOVE      SP100,IN1028
          MOVE      SP100,IN1029
          MOVE      SP100,IN1030
          MOVE      SP100,IN1031
          MOVE      SP100,IN1032
          MOVE      SP100,IN1033
          MOVE      SP100,IN1034
          MOVE      SP100,IN1035
          MOVE      SP100,IN1036
          MOVE      SP100,IN1037
          MOVE      SP100,IN1038
          MOVE      SP100,IN1039
          MOVE      SP100,IN1040
          MOVE      SP100,IN1041
          MOVE      SP100,IN1042
          MOVE      SP100,IN1043
          PACK      IN1044,SP100,SP100
          MOVE      SP100,IN1045
          MOVE      SP100,IN1046
          MOVE      SP100,IN1047
          MOVE      SP100,IN1048
          MOVE      SP100,IN1049
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     IN1001
          CLEAR     IN1002
          CLEAR     IN1003
          CLEAR     IN1004
          CLEAR     IN1005
          CLEAR     IN1006
          CLEAR     IN1007
          CLEAR     IN1008
          CLEAR     IN1009
          CLEAR     IN1010
          CLEAR     IN1011
          CLEAR     IN1012
          CLEAR     IN1013
          CLEAR     IN1014
          CLEAR     IN1015
          CLEAR     IN1016
          CLEAR     IN1017
          CLEAR     IN1018
          CLEAR     IN1019
          CLEAR     IN1020
          CLEAR     IN1021
          CLEAR     IN1022
          CLEAR     IN1023
          CLEAR     IN1024
          CLEAR     IN1025
          CLEAR     IN1026
          CLEAR     IN1027
          CLEAR     IN1028
          CLEAR     IN1029
          CLEAR     IN1030
          CLEAR     IN1031
          CLEAR     IN1032
          CLEAR     IN1033
          CLEAR     IN1034
          CLEAR     IN1035
          CLEAR     IN1036
          CLEAR     IN1037
          CLEAR     IN1038
          CLEAR     IN1039
          CLEAR     IN1040
          CLEAR     IN1041
          CLEAR     IN1042
          CLEAR     IN1043
          CLEAR     IN1044
          CLEAR     IN1045
          CLEAR     IN1046
          CLEAR     IN1047
          CLEAR     IN1048
          CLEAR     IN1049
.
CIN19999  RETURN
+
.*****************************************************************************
.*                               CZPM0000          Called by:                *
.*                     Clear all ZPM variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CZPM0000  MOVE      SP100,ZPM001
          MOVE      SP100,ZPM002
          MOVE      SP100,ZPM003
          MOVE      SP100,ZPM004
          MOVE      SP100,ZPM005
          MOVE      SP100,ZPM006
          MOVE      SP100,ZPM007
.
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     ZPM001
          CLEAR     ZPM002
          CLEAR     ZPM003
          CLEAR     ZPM004
          CLEAR     ZPM005
          CLEAR     ZPM006
          CLEAR     ZPM007
.
CZPM9999  RETURN
+
.*****************************************************************************
.*                               CZAT0000          Called by:                *
.*                     Clear all ZAT variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CZAT0000  MOVE      SP100,ZAT001
          MOVE      SP100,ZAT002
          MOVE      SP100,ZAT003
          MOVE      SP100,ZAT004
          MOVE      SP100,ZAT005
          MOVE      SP100,ZAT006
          MOVE      SP100,ZAT007
          MOVE      SP100,ZAT008
.
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     ZAT001
          CLEAR     ZAT002
          CLEAR     ZAT003
          CLEAR     ZAT004
          CLEAR     ZAT005
          CLEAR     ZAT006
          CLEAR     ZAT007
          CLEAR     ZAT008
.
CZAT9999  RETURN
+
.*****************************************************************************
.*                               CMFI0000          Called by:                *
.*                     Clear all MFI variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CMFI0000  MOVE      SP100,MFI001
          PACK      MFI002,SP100,SP100
          MOVE      SP100,MFI003
          MOVE      SP100,MFI004
          MOVE      SP100,MFI005
          MOVE      SP100,MFI006
.
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     MFI001
          CLEAR     MFI002
          CLEAR     MFI003
          CLEAR     MFI004
          CLEAR     MFI005
          CLEAR     MFI006
.
CMFI9999  RETURN
+
.*****************************************************************************
.*                               CMFE0000          Called by:                *
.*                     Clear all MFE variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CMFE0000  MOVE      SP100,MFE001
          MOVE      SP100,MFE002
          MOVE      SP100,MFE003
          PACK      MFE004,SP100,SP100
          MOVE      SP100,MFE005
.
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     MFE001
          CLEAR     MFE002
          CLEAR     MFE003
          CLEAR     MFE004
          CLEAR     MFE005
.
CMFE9999  RETURN
+
.*****************************************************************************
.*                               CSTF0000          Called by:                *
.*                     Clear all STF variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CSTF0000  MOVE      SP100,STF001
          MOVE      SP100,STF002
          MOVE      SP100,STF003
          MOVE      SP100,STF004
          MOVE      SP100,STF005
          MOVE      SP100,STF006
          MOVE      SP100,STF007
          PACK      STF008,SP100,SP100
          PACK      STF009,SP100,SP100
          PACK      STF010,SP100,SP100,SP100,SP100
          PACK      STF011,SP100,SP100,SP100,SP100,SP100
          MOVE      SP100,STF012
          MOVE      SP100,STF013
          MOVE      SP100,STF014
          MOVE      SP100,STF015
          PACK      STF016,SP100,SP100
          MOVE      SP100,STF017
          MOVE      SP100,STF018
          MOVE      SP100,STF019
          MOVE      SP100,STF020
          MOVE      SP100,STF021
          MOVE      SP100,STF022
          MOVE      SP100,STF023
          MOVE      SP100,STF024
          MOVE      SP100,STF025
          MOVE      SP100,STF026
.
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     STF001
          CLEAR     STF002
          CLEAR     STF003
          CLEAR     STF004
          CLEAR     STF005
          CLEAR     STF006
          CLEAR     STF007
          CLEAR     STF008
          CLEAR     STF009
          CLEAR     STF010
          CLEAR     STF011
          CLEAR     STF012
          CLEAR     STF013
          CLEAR     STF014
          CLEAR     STF015
          CLEAR     STF016
          CLEAR     STF017
          CLEAR     STF018
          CLEAR     STF019
          CLEAR     STF020
          CLEAR     STF021
          CLEAR     STF022
          CLEAR     STF023
          CLEAR     STF024
          CLEAR     STF025
          CLEAR     STF026
.
CSTF9999  RETURN
+
.*****************************************************************************
.*                               CPRA0000          Called by:                *
.*                     Clear all PRA variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CPRA0000  MOVE      SP100,PRA001
          MOVE      SP100,PRA002
          MOVE      SP100,PRA003
          MOVE      SP100,PRA004
          PACK      PRA005,SP100,SP100
          MOVE      SP100,PRA006
          PACK      PRA007,SP100,SP100
          MOVE      SP100,PRA008
.
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     PRA001
          CLEAR     PRA002
          CLEAR     PRA003
          CLEAR     PRA004
          CLEAR     PRA005
          CLEAR     PRA006
          CLEAR     PRA007
          CLEAR     PRA008
.
CPRA9999  RETURN
+
.*****************************************************************************
.*                               CSCH0000          Called by:                *
.*                     Clear all SCH variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CSCH0000  MOVE      SP100,SCH001
          MOVE      SP100,SCH002
          MOVE      SP100,SCH003
          MOVE      SP100,SCH004
          PACK      SCH005,SP100,SP100
          PACK      SCH006,SP100,SP100
          PACK      SCH007,SP100,SP100
          PACK      SCH008,SP100,SP100
          MOVE      SP100,SCH009
          PACK      SCH010,SP100,SP100
          PACK      SCH011,SP100,SP100
          MOVE      SP100,SCH012
          MOVE      SP100,SCH013
          PACK      SCH014,SP100,SP100
          MOVE      SP100,SCH015
          MOVE      SP100,SCH016
          MOVE      SP100,SCH017
          PACK      SCH018,SP100,SP100
          MOVE      SP100,SCH019
          MOVE      SP100,SCH020
          MOVE      SP100,SCH021
          MOVE      SP100,SCH022
          MOVE      SP100,SCH023
          MOVE      SP100,SCH024
          PACK      SCH025,SP100,SP100
.
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     SCH001
          CLEAR     SCH002
          CLEAR     SCH003
          CLEAR     SCH004
          CLEAR     SCH005
          CLEAR     SCH006
          CLEAR     SCH007
          CLEAR     SCH008
          CLEAR     SCH009
          CLEAR     SCH010
          CLEAR     SCH011
          CLEAR     SCH012
          CLEAR     SCH013
          CLEAR     SCH014
          CLEAR     SCH015
          CLEAR     SCH016
          CLEAR     SCH017
          CLEAR     SCH018
          CLEAR     SCH019
          CLEAR     SCH020
          CLEAR     SCH021
          CLEAR     SCH022
          CLEAR     SCH023
          CLEAR     SCH024
          CLEAR     SCH025
.
CSCH9999  RETURN
+
.*****************************************************************************
.*                               COBX0000          Called by:                *
.*                     Clear all OBX variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
COBX0000  MOVE      SP100,OBX001
          MOVE      SP100,OBX002
          MOVE      SP100,OBX003
          MOVE      SP100,OBX004
          MOVE      SP100,OBX005
          MOVE      SP100,OBX006
          MOVE      SP100,OBX007
          MOVE      SP100,OBX008
          MOVE      SP100,OBX009
          MOVE      SP100,OBX010
          MOVE      SP100,OBX011
          MOVE      SP100,OBX012
          MOVE      SP100,OBX013
          MOVE      SP100,OBX014
          MOVE      SP100,OBX015
          MOVE      SP100,OBX016
          MOVE      SP100,OBX017
.
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     OBX001
          CLEAR     OBX002
          CLEAR     OBX003
          CLEAR     OBX004
          CLEAR     OBX005
          CLEAR     OBX006
          CLEAR     OBX007
          CLEAR     OBX008
          CLEAR     OBX009
          CLEAR     OBX010
          CLEAR     OBX011
          CLEAR     OBX012
          CLEAR     OBX013
          CLEAR     OBX014
          CLEAR     OBX015
          CLEAR     OBX016
          CLEAR     OBX017
.
COBX9999  RETURN
+
.*****************************************************************************
.*                               CRGS0000          Called by:                *
.*                     Clear all RGS variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CRGS0000  MOVE      SP100,RGS001
          MOVE      SP100,RGS002
          PACK      RGS003,SP100,SP100
.
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     RGS001
          CLEAR     RGS002
          CLEAR     RGS003
.
CRGS9999  RETURN
+
.*****************************************************************************
.*                               CAIS0000          Called by:                *
.*                     Clear all AIS variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CAIS0000  MOVE      SP100,AIS001
          MOVE      SP100,AIS002
          PACK      AIS003,SP100,SP100
          MOVE      SP100,AIS004
          MOVE      SP100,AIS005
          PACK      AIS006,SP100,SP100
          MOVE      SP100,AIS007
          PACK      AIS008,SP100,SP100
          MOVE      SP100,AIS009
          PACK      AIS010,SP100,SP100
.
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     AIS001
          CLEAR     AIS002
          CLEAR     AIS003
          CLEAR     AIS004
          CLEAR     AIS005
          CLEAR     AIS006
          CLEAR     AIS007
          CLEAR     AIS008
          CLEAR     AIS009
          CLEAR     AIS010
.
CAIS9999  RETURN
+
.*****************************************************************************
.*                               CAIL0000          Called by:                *
.*                     Clear all AIL variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CAIL0000  MOVE      SP100,AIL001
          MOVE      SP100,AIL002
          MOVE      SP100,AIL003
          PACK      AIL004,SP100,SP100
          PACK      AIL005,SP100,SP100
          MOVE      SP100,AIL006
          MOVE      SP100,AIL007
          PACK      AIL008,SP100,SP100
          MOVE      SP100,AIL009
          PACK      AIL010,SP100,SP100
          MOVE      SP100,AIL011
          PACK      AIL012,SP100,SP100
.
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     AIL001
          CLEAR     AIL002
          CLEAR     AIL003
          CLEAR     AIL004
          CLEAR     AIL005
          CLEAR     AIL006
          CLEAR     AIL007
          CLEAR     AIL008
          CLEAR     AIL009
          CLEAR     AIL010
          CLEAR     AIL011
          CLEAR     AIL012
.
CAIL9999  RETURN
+
.*****************************************************************************
.*                               CAIP0000          Called by:                *
.*                     Clear all AIP variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CAIP0000  MOVE      SP100,AIP001
          MOVE      SP100,AIP002
          MOVE      SP100,AIP003
          PACK      AIP004,SP100,SP100
          PACK      AIP005,SP100,SP100
          MOVE      SP100,AIP006
          MOVE      SP100,AIP007
          PACK      AIP008,SP100,SP100
          MOVE      SP100,AIP009
          PACK      AIP010,SP100,SP100
          MOVE      SP100,AIP011
          PACK      AIP012,SP100,SP100
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     AIP001
          CLEAR     AIP002
          CLEAR     AIP003
          CLEAR     AIP004
          CLEAR     AIP005
          CLEAR     AIP006
          CLEAR     AIP007
          CLEAR     AIP008
          CLEAR     AIP009
          CLEAR     AIP010
          CLEAR     AIP011
          CLEAR     AIP012
.
CAIP9999  RETURN
+
.*****************************************************************************
.*                               CRF10000          Called by:                *
.*                     Clear all RF1 variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CRF10000  PACK      RF1001,SP100,SP100
          PACK      RF1002,SP100,SP100
          PACK      RF1003,SP100,SP100
          PACK      RF1004,SP100,SP100
          PACK      RF1005,SP100,SP100
          MOVE      SP100,RF1006
          MOVE      SP100,RF1007
          MOVE      SP100,RF1008
          MOVE      SP100,RF1009
          PACK      RF1010,SP100,SP100
          MOVE      SP100,RF1011
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     RF1001
          CLEAR     RF1002
          CLEAR     RF1003
          CLEAR     RF1004
          CLEAR     RF1005
          CLEAR     RF1006
          CLEAR     RF1007
          CLEAR     RF1008
          CLEAR     RF1009
          CLEAR     RF1010
          CLEAR     RF1011
.
CRF19999  RETURN
+
.*****************************************************************************
.*                               CPRD0000          Called by:                *
.*                     Clear all PRD variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CPRD0000  PACK      PRD001,SP100,SP100
          PACK      PRD002,SP100,SP100
          MOVE      SP100,PRD003
          MOVE      SP100,PRD004
          MOVE      SP100,PRD005
          PACK      PRD006,SP100,SP100
          MOVE      SP100,PRD007
          MOVE      SP100,PRD008
          MOVE      SP100,PRD009
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     PRD001
          CLEAR     PRD002
          CLEAR     PRD003
          CLEAR     PRD004
          CLEAR     PRD005
          CLEAR     PRD006
          CLEAR     PRD007
          CLEAR     PRD008
          CLEAR     PRD009
.
CPRD9999  RETURN
+
.*****************************************************************************
.*                               CPR10000          Called by:                *
.*                     Clear all PR1 variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CPR10000  MOVE      SP100,PR1001
          MOVE      SP100,PR1002
          MOVE      SP100,PR1003
          MOVE      SP100,PR1004
          MOVE      SP100,PR1005
          MOVE      SP100,PR1006
          MOVE      SP100,PR1007
          PACK      PR1008,SP100,SP100
          MOVE      SP100,PR1009
          MOVE      SP100,PR1010
          PACK      PR1011,SP100,SP100
          PACK      PR1012,SP100,SP100
          MOVE      SP100,PR1013
          MOVE      SP100,PR1014
          MOVE      SP100,PR1015
          MOVE      SP100,PR1016
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     PR1001
          CLEAR     PR1002
          CLEAR     PR1003
          CLEAR     PR1004
          CLEAR     PR1005
          CLEAR     PR1006
          CLEAR     PR1007
          CLEAR     PR1008
          CLEAR     PR1009
          CLEAR     PR1010
          CLEAR     PR1011
          CLEAR     PR1012
          CLEAR     PR1013
          CLEAR     PR1014
          CLEAR     PR1015
          CLEAR     PR1016
.
CPR19999  RETURN
+
.*****************************************************************************
.*                               CZAL0000          Called by:                *
.*                     Clear all ZAL variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CZAL0000  MOVE      SP100,ZAL001
          MOVE      SP100,ZAL002
          MOVE      SP100,ZAL003
          MOVE      SP100,ZAL004
          MOVE      SP100,ZAL005
          MOVE      SP100,ZAL006
          MOVE      SP100,ZAL007
          MOVE      SP100,ZAL008
          MOVE      SP100,ZAL009
          MOVE      SP100,ZAL010
          MOVE      SP100,ZAL011
          MOVE      SP100,ZAL012
          MOVE      SP100,ZAL013
          PACK      ZAL014,SP100,SP100,SP100
          MOVE      SP100,ZAL015
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     ZAL001
          CLEAR     ZAL002
          CLEAR     ZAL003
          CLEAR     ZAL004
          CLEAR     ZAL005
          CLEAR     ZAL006
          CLEAR     ZAL007
          CLEAR     ZAL008
          CLEAR     ZAL009
          CLEAR     ZAL010
          CLEAR     ZAL011
          CLEAR     ZAL012
          CLEAR     ZAL013
          CLEAR     ZAL014
          CLEAR     ZAL015
.
CZAL9999  RETURN
+
.*****************************************************************************
.*                               CZXP0000          Called by:                *
.*                     Clear all ZXP variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CZXP0000  MOVE      SP100,ZXP001
          MOVE      SP100,ZXP002
          MOVE      SP100,ZXP003
          MOVE      SP100,ZXP004
          MOVE      SP100,ZXP005
          MOVE      SP100,ZXP006
          PACK      ZXP007,SP100,SP100
          PACK      ZXP008,SP100,SP100,SP100
          MOVE      SP100,ZXP009
          MOVE      SP100,ZXP010
          MOVE      SP100,ZXP011
          MOVE      SP100,ZXP012
          MOVE      SP100,ZXP013
          MOVE      SP100,ZXP014
          MOVE      SP100,ZXP015
          MOVE      SP100,ZXP016
          MOVE      SP100,ZXP017
          PACK      ZXP018,SP100,SP100,SP100
          MOVE      SP100,ZXP019
          MOVE      SP100,ZXP020
          MOVE      SP100,ZXP021
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     ZXP001
          CLEAR     ZXP002
          CLEAR     ZXP003
          CLEAR     ZXP004
          CLEAR     ZXP005
          CLEAR     ZXP006
          CLEAR     ZXP007
          CLEAR     ZXP008
          CLEAR     ZXP009
          CLEAR     ZXP010
          CLEAR     ZXP011
          CLEAR     ZXP012
          CLEAR     ZXP013
          CLEAR     ZXP014
          CLEAR     ZXP015
          CLEAR     ZXP016
          CLEAR     ZXP017
          CLEAR     ZXP018
          CLEAR     ZXP019
          CLEAR     ZXP020
          CLEAR     ZXP021
.
CZXP9999  RETURN
+
.*****************************************************************************
.*                               CZSD0000          Called by:                *
.*                     Clear all ZSD variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CZSD0000  MOVE      SP100,ZSD001
          MOVE      SP100,ZSD002
          MOVE      SP100,ZSD003
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     ZSD001
          CLEAR     ZSD002
          CLEAR     ZSD003
.
CZSD9999  RETURN
+
.*****************************************************************************
.*                               CZCT0000          Called by:                *
.*                     Clear all ZCT variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CZCT0000  MOVE      SP100,ZCT001
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     ZCT001
.
CZCT9999  RETURN
+
.*****************************************************************************
.*                               CZLH0000          Called by:                *
.*                     Clear all ZLH variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CZLH0000  MOVE      SP100,ZLH001
          MOVE      SP100,ZLH002
          MOVE      SP100,ZLH003
          MOVE      SP100,ZLH004
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     ZLH001
          CLEAR     ZLH002
          CLEAR     ZLH003
          CLEAR     ZLH004
.
CZLH9999  RETURN
+
.*****************************************************************************
.*                               CZLU0000          Called by:                *
.*                     Clear all ZLU variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CZLU0000  MOVE      SP100,ZLU001
          MOVE      SP100,ZLU002
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     ZLU001
          CLEAR     ZLU002
.
CZLU9999  RETURN
+
.*****************************************************************************
.*                               CZCM0000          Called by:                *
.*                     Clear all ZCM variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CZCM0000  MOVE      SP100,ZCM001
          MOVE      SP100,ZCM002
          MOVE      SP100,ZCM003
          MOVE      SP100,ZCM004
          MOVE      SP100,ZCM005
          MOVE      SP100,ZCM006
          MOVE      SP100,ZCM007
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     ZCM001
          CLEAR     ZCM002
          CLEAR     ZCM003
          CLEAR     ZCM004
          CLEAR     ZCM005
          CLEAR     ZCM006
          CLEAR     ZCM007
.
CZCM9999  RETURN
+
.*****************************************************************************
.*                               CZXV0000          Called by:                *
.*                     Clear all ZXV variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CZXV0000  MOVE      SP100,ZXV001
          MOVE      SP100,ZXV002
          MOVE      SP100,ZXV003
          MOVE      SP100,ZXV004
          MOVE      SP100,ZXV005
          MOVE      SP100,ZXV006
          MOVE      SP100,ZXV007
          MOVE      SP100,ZXV008
          MOVE      SP100,ZXV009
          MOVE      SP100,ZXV010
          MOVE      SP100,ZXV011
          MOVE      SP100,ZXV012
          PACK      ZXV013,SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                           SP100,SP100
          MOVE      SP100,ZXV014
          MOVE      SP100,ZXV015
          MOVE      SP100,ZXV016
          MOVE      SP100,ZXV017
          MOVE      SP100,ZXV018
          MOVE      SP100,ZXV019
          MOVE      SP100,ZXV020
          MOVE      SP100,ZXV021
          MOVE      SP100,ZXV022
          MOVE      SP100,ZXV023
          MOVE      SP100,ZXV024
          MOVE      SP100,ZXV025
          MOVE      SP100,ZXV026
          MOVE      SP100,ZXV027
          MOVE      SP100,ZXV028
          MOVE      SP100,ZXV029
          MOVE      SP100,ZXV030
          PACK      ZXV031,SP100,SP100,SP100
          MOVE      SP100,ZXV032
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     ZXV001
          CLEAR     ZXV002
          CLEAR     ZXV003
          CLEAR     ZXV004
          CLEAR     ZXV005
          CLEAR     ZXV006
          CLEAR     ZXV007
          CLEAR     ZXV008
          CLEAR     ZXV009
          CLEAR     ZXV010
          CLEAR     ZXV011
          CLEAR     ZXV012
          CLEAR     ZXV013
          CLEAR     ZXV014
          CLEAR     ZXV015
          CLEAR     ZXV016
          CLEAR     ZXV017
          CLEAR     ZXV018
          CLEAR     ZXV019
          CLEAR     ZXV020
          CLEAR     ZXV021
          CLEAR     ZXV022
          CLEAR     ZXV023
          CLEAR     ZXV024
          CLEAR     ZXV025
          CLEAR     ZXV026
          CLEAR     ZXV027
          CLEAR     ZXV028
          CLEAR     ZXV029
          CLEAR     ZXV030
          CLEAR     ZXV031
          CLEAR     ZXV032
.
CZXV9999  RETURN
+
.*****************************************************************************
.*                               CGT10000          Called by:                *
.*                     Clear all GT1 variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CGT10000  MOVE      SP100,GT1001
          MOVE      SP100,GT1002
          MOVE      SP100,GT1003
          MOVE      SP100,GT1004
          PACK      GT1005,SP100,SP100
          MOVE      SP100,GT1006
          MOVE      SP100,GT1007
          MOVE      SP100,GT1008
          MOVE      SP100,GT1009
          MOVE      SP100,GT1010
          MOVE      SP100,GT1011
          MOVE      SP100,GT1012
          MOVE      SP100,GT1013
          MOVE      SP100,GT1014
          MOVE      SP100,GT1015
          PACK      GT1016,SP100,SP100
          PACK      GT1017,SP100,SP100
          MOVE      SP100,GT1018
          MOVE      SP100,GT1019
          MOVE      SP100,GT1020
          PACK      GT1021,SP100,SP100
          MOVE      SP100,GT1022
          MOVE      SP100,GT1023
          MOVE      SP100,GT1024
          MOVE      SP100,GT1025
          MOVE      SP100,GT1026
          MOVE      SP100,GT1027
          MOVE      SP100,GT1028
          MOVE      SP100,GT1029
          MOVE      SP100,GT1030
          MOVE      SP100,GT1031
          MOVE      SP100,GT1032
          MOVE      SP100,GT1033
          MOVE      SP100,GT1034
          MOVE      SP100,GT1035
          MOVE      SP100,GT1036
          MOVE      SP100,GT1037
          MOVE      SP100,GT1038
          MOVE      SP100,GT1039
          MOVE      SP100,GT1040
          MOVE      SP100,GT1041
          MOVE      SP100,GT1042
          MOVE      SP100,GT1043
          MOVE      SP100,GT1044
          MOVE      SP100,GT1045
          MOVE      SP100,GT1046
          MOVE      SP100,GT1047
          MOVE      SP100,GT1048
          MOVE      SP100,GT1049
          MOVE      SP100,GT1050
          PACK      GT1051,SP100,SP100
          MOVE      SP100,GT1052
          MOVE      SP100,GT1053
          MOVE      SP100,GT1054
          MOVE      SP100,GT1055
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     GT1001
          CLEAR     GT1002
          CLEAR     GT1003
          CLEAR     GT1004
          CLEAR     GT1005
          CLEAR     GT1006
          CLEAR     GT1007
          CLEAR     GT1008
          CLEAR     GT1009
          CLEAR     GT1010
          CLEAR     GT1011
          CLEAR     GT1012
          CLEAR     GT1013
          CLEAR     GT1014
          CLEAR     GT1015
          CLEAR     GT1016
          CLEAR     GT1017
          CLEAR     GT1018
          CLEAR     GT1019
          CLEAR     GT1020
          CLEAR     GT1021
          CLEAR     GT1022
          CLEAR     GT1023
          CLEAR     GT1024
          CLEAR     GT1025
          CLEAR     GT1026
          CLEAR     GT1027
          CLEAR     GT1028
          CLEAR     GT1029
          CLEAR     GT1030
          CLEAR     GT1031
          CLEAR     GT1032
          CLEAR     GT1033
          CLEAR     GT1034
          CLEAR     GT1035
          CLEAR     GT1036
          CLEAR     GT1037
          CLEAR     GT1038
          CLEAR     GT1039
          CLEAR     GT1040
          CLEAR     GT1041
          CLEAR     GT1042
          CLEAR     GT1043
          CLEAR     GT1044
          CLEAR     GT1045
          CLEAR     GT1046
          CLEAR     GT1047
          CLEAR     GT1048
          CLEAR     GT1049
          CLEAR     GT1050
          CLEAR     GT1051
          CLEAR     GT1052
          CLEAR     GT1053
          CLEAR     GT1054
          CLEAR     GT1055
.
CGT19999  RETURN
+
.*****************************************************************************
.*                               CZLS0000          Called by:                *
.*                     Clear all ZLS variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CZLS0000  MOVE      SP100,ZLS001
          MOVE      SP100,ZLS002
          MOVE      SP100,ZLS003
          MOVE      SP100,ZLS004
          MOVE      SP100,ZLS005
          MOVE      SP100,ZLS006
          MOVE      SP100,ZLS007
          MOVE      SP100,ZLS008
          MOVE      SP100,ZLS009
          MOVE      SP100,ZLS010
          MOVE      SP100,ZLS011
          MOVE      SP100,ZLS012
          MOVE      SP100,ZLS013
          MOVE      SP100,ZLS014
          MOVE      SP100,ZLS015
          MOVE      SP100,ZLS016
          MOVE      SP100,ZLS017
          MOVE      SP100,ZLS018
          MOVE      SP100,ZLS019
          MOVE      SP100,ZLS020
          MOVE      SP100,ZLS021
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     ZLS001
          CLEAR     ZLS002
          CLEAR     ZLS003
          CLEAR     ZLS004
          CLEAR     ZLS005
          CLEAR     ZLS006
          CLEAR     ZLS007
          CLEAR     ZLS008
          CLEAR     ZLS009
          CLEAR     ZLS010
          CLEAR     ZLS011
          CLEAR     ZLS012
          CLEAR     ZLS013
          CLEAR     ZLS014
          CLEAR     ZLS015
          CLEAR     ZLS016
          CLEAR     ZLS017
          CLEAR     ZLS018
          CLEAR     ZLS019
          CLEAR     ZLS020
          CLEAR     ZLS021
.
CZLS9999  RETURN
+
.*****************************************************************************
.*                               CQRD0000          Called by:                *
.*                     Clear all QRD variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CQRD0000  MOVE      SP100,QRD001
          MOVE      SP100,QRD002
          MOVE      SP100,QRD003
          MOVE      SP100,QRD004
          MOVE      SP100,QRD005
          MOVE      SP100,QRD006
          MOVE      SP100,QRD007
          MOVE      SP100,QRD008
          MOVE      SP100,QRD00801
          MOVE      SP100,QRD00802
          MOVE      SP100,QRD00803
          MOVE      SP100,QRD00804
          MOVE      SP100,QRD009
          MOVE      SP100,QRD010
          MOVE      SP100,QRD011
          MOVE      SP100,QRD012
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     QRD001
          CLEAR     QRD002
          CLEAR     QRD003
          CLEAR     QRD004
          CLEAR     QRD005
          CLEAR     QRD006
          CLEAR     QRD007
          CLEAR     QRD008
          CLEAR     QRD00801
          CLEAR     QRD00802
          CLEAR     QRD00803
          CLEAR     QRD00804
          CLEAR     QRD009
          CLEAR     QRD010
          CLEAR     QRD011
          CLEAR     QRD012
.
CQRD9999  RETURN
+
.*****************************************************************************
.*                               CQRF0000          Called by:                *
.*                     Clear all QRF variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CQRF0000  MOVE      SP100,QRF001
          MOVE      SP100,QRF002
          MOVE      SP100,QRF003
          MOVE      SP100,QRF004
          MOVE      SP100,QRF005
          MOVE      SP100,QRF006
          MOVE      SP100,QRF007
          MOVE      SP100,QRF008
          MOVE      SP100,QRF009
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     QRF001
          CLEAR     QRF002
          CLEAR     QRF003
          CLEAR     QRF004
          CLEAR     QRF005
          CLEAR     QRF006
          CLEAR     QRF007
          CLEAR     QRF008
          CLEAR     QRF009
.
CQRF9999  RETURN
+
.*****************************************************************************
.*                                 CZBR0000        Called by:                *
.*                          Load the ZBR fields                              *
.*****************************************************************************
.
CZBR0000  MOVE      SP100,ZBR001                 * Request Date/Time
          MOVE      SP100,ZBR002                 * Requesting Department
          MOVE      SP100,ZBR003                 * Request Ward
          MOVE      SP100,ZBR004                 * Admitting Consultant
          MOVE      SP100,ZBR005                 * Type of Bed Required
          MOVE      SP100,ZBR006                 * Specialty Bed Required
          MOVE      SP100,ZBR007                 * Diagnosis
          MOVE      SP100,ZBR008                 * Diagnosis Free Format
          MOVE      SP100,ZBR009                 * Notes
          MOVE      SP100,ZBR010                 * Expected Ward/Bed
          MOVE      SP100,ZBR011                 * Ward/Bed Ready Date/Time
          MOVE      SP100,ZBR012                 * Request Status
          MOVE      SP100,ZBR013                 * Ward/Bed Allocated Date/Time
          MOVE      SP100,ZBR014                 * Cancellation Reason
          MOVE      SP100,ZBR015                 * Cancellation Date/Time
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     ZBR001                       * Request Date/Time
          CLEAR     ZBR002                       * Requesting Department
          CLEAR     ZBR003                       * Request Ward
          CLEAR     ZBR004                       * Admitting Consultant
          CLEAR     ZBR005                       * Type of Bed Required
          CLEAR     ZBR006                       * Specialty Bed Required
          CLEAR     ZBR007                       * Diagnosis
          CLEAR     ZBR008                       * Diagnosis Free Format
          CLEAR     ZBR009                       * Notes
          CLEAR     ZBR010                       * Expected Ward/Bed
          CLEAR     ZBR011                       * Ward/Bed Ready Date/Time
          CLEAR     ZBR012                       * Request Status
          CLEAR     ZBR013                       * Ward/Bed Allocated Date/Time
          CLEAR     ZBR014                       * Cancellation Reason
          CLEAR     ZBR015                       * Cancellation Date/Time
.
CZBR9999  RETURN
+
.*****************************************************************************
.*                              RMSH0000           Called by:                *
.*                      Reset all MSH variables                              *
.*    Also need to save some variables to send back in the acknowledgement   *
.*    message.                                                               *
.*****************************************************************************
.
RMSH0000  RESET     MSH001
          RESET     MSH002
          RESET     MSH003
          MOVE      MSH003,SAVAPPLI
          RESET     MSH004
          MOVE      MSH004,SAVFACIL
          RESET     MSH005
          RESET     MSH006
          RESET     MSH007
          RESET     MSH008
          RESET     MSH009
          RESET     MSH010
          MOVE      MSH010,SAVMESID
          RESET     MSH011
          RESET     MSH012
          RESET     MSH013
          RESET     MSH014
          RESET     MSH015
          RESET     MSH016
          RESET     MSH017
          RESET     MSH018
          RESET     MSH019
.
RMSH9999  RETURN
+
.*****************************************************************************
.*                              REVN0000           Called by:                *
.*                         Reset all EVN variables                           *
.*****************************************************************************
.
REVN0000  RESET     EVN001
          RESET     EVN002
          RESET     EVN003
          RESET     EVN004
          RESET     EVN005
          RESET     EVN006
.
REVN9999  RETURN
+
.*****************************************************************************
.*                              RPID0000           Called by:                *
.*                         Reset all PID variables                           *
.*****************************************************************************
.
RPID0000  RESET     PID001
          RESET     PID002
          RESET     PID003
          RESET     PID004
          RESET     PID005
          RESET     PID006
          RESET     PID007
          RESET     PID008
          RESET     PID009
          RESET     PID010
          RESET     PID011
          RESET     PID012
          RESET     PID013
          RESET     PID014
          RESET     PID015
          RESET     PID016
          RESET     PID017
          RESET     PID018
          RESET     PID019
          RESET     PID020
          RESET     PID021
          RESET     PID022
          RESET     PID023
          RESET     PID024
          RESET     PID025
          RESET     PID026
          RESET     PID027
          RESET     PID028
          RESET     PID029
          RESET     PID030
          RESET     PID031
          RESET     PID032
          RESET     PID033
.
RPID9999  RETURN
+
.*****************************************************************************
.*                              RNK10000           Called by:                *
.*                         Reset all NK1 variables                           *
.*****************************************************************************
.
RNK10000  RESET     NK1001
          RESET     NK1002
          RESET     NK1003
          RESET     NK1004
          RESET     NK1005
          RESET     NK1006
          RESET     NK1007
          RESET     NK1008
          RESET     NK1009
          RESET     NK1010
          RESET     NK1011
          RESET     NK1012
          RESET     NK1013
          RESET     NK1014
          RESET     NK1015
          RESET     NK1016
          RESET     NK1017
          RESET     NK1018
          RESET     NK1019
          RESET     NK1020
          RESET     NK1021
          RESET     NK1022
          RESET     NK1023
          RESET     NK1024
          RESET     NK1025
          RESET     NK1026
          RESET     NK1027
          RESET     NK1028
          RESET     NK1029
          RESET     NK1030
          RESET     NK1031
          RESET     NK1032
          RESET     NK1033
          RESET     NK1034
          RESET     NK1035
          RESET     NK1036
          RESET     NK1037
.
RNK19999  RETURN
+
.*****************************************************************************
.*                              RPV10000           Called by:                *
.*                         Reset all PV1 variables                           *
.*****************************************************************************
.
RPV10000  RESET     PV1001
          RESET     PV1002
          RESET     PV1003
          RESET     PV1004
          RESET     PV1005
          RESET     PV1006
          RESET     PV1007
          RESET     PV1008
          RESET     PV1009
          RESET     PV1010
          RESET     PV1011
          RESET     PV1012
          RESET     PV1013
          RESET     PV1014
          RESET     PV1015
          RESET     PV1016
          RESET     PV1017
          RESET     PV1018
          RESET     PV1019
          RESET     PV1020
          RESET     PV1021
          RESET     PV1022
          RESET     PV1023
          RESET     PV1024
          RESET     PV1025
          RESET     PV1026
          RESET     PV1027
          RESET     PV1028
          RESET     PV1029
          RESET     PV1030
          RESET     PV1031
          RESET     PV1032
          RESET     PV1033
          RESET     PV1034
          RESET     PV1035
          RESET     PV1036
          RESET     PV1037
          RESET     PV1038
          RESET     PV1039
          RESET     PV1040
          RESET     PV1041
          RESET     PV1042
          RESET     PV1043
          RESET     PV1044
          RESET     PV1045
          RESET     PV1046
          RESET     PV1047
          RESET     PV1048
          RESET     PV1049
          RESET     PV1050
          RESET     PV1051
          RESET     PV1052
.
RPV19999  RETURN
+
.*****************************************************************************
.*                              RPV20000           Called by:                *
.*                         Reset all PV2 variables                           *
.*****************************************************************************
.
RPV20000  RESET     PV2001
          RESET     PV2002
          RESET     PV2003
          RESET     PV2004
          RESET     PV2005
          RESET     PV2006
          RESET     PV2007
          RESET     PV2008
          RESET     PV2009
          RESET     PV2010
          RESET     PV2011
          RESET     PV2012
          RESET     PV2013
          RESET     PV2014
          RESET     PV2015
          RESET     PV2016
          RESET     PV2017
          RESET     PV2018
          RESET     PV2019
          RESET     PV2020
          RESET     PV2021
          RESET     PV2022
          RESET     PV2023
          RESET     PV2024
          RESET     PV2025
          RESET     PV2026
          RESET     PV2027
          RESET     PV2028
          RESET     PV2029
          RESET     PV2030
          RESET     PV2031
          RESET     PV2032
          RESET     PV2033
          RESET     PV2034
          RESET     PV2035
          RESET     PV2036
          RESET     PV2037
.
RPV29999  RETURN
+
.*****************************************************************************
.*                              RDG10000           Called by:                *
.*                         Reset all DG1 variables                           *
.*****************************************************************************
.
RDG10000  RESET     DG1001
          RESET     DG1002
          RESET     DG1003
          RESET     DG1004
          RESET     DG1005
          RESET     DG1006
          RESET     DG1007
          RESET     DG1008
          RESET     DG1009
          RESET     DG1010
          RESET     DG1011
          RESET     DG1012
          RESET     DG1013
          RESET     DG1014
          RESET     DG1015
          RESET     DG1016
          RESET     DG1017
          RESET     DG1018
          RESET     DG1019
.
RDG19999  RETURN
+
.*****************************************************************************
.*                              RAL10000           Called by:                *
.*                         Reset all AL1 variables                           *
.*****************************************************************************
.
RAL10000  RESET     AL1001
          RESET     AL1002
          RESET     AL1003
          RESET     AL1004
          RESET     AL1005
          RESET     AL1006
.
RAL19999  RETURN
+
.*****************************************************************************
.*                              RMRG0000           Called by:                *
.*                         Reset all MRG variables                           *
.*****************************************************************************
.
RMRG0000  RESET     MRG001
          RESET     MRG002
          RESET     MRG003
          RESET     MRG004
          RESET     MRG005
          RESET     MRG006
          RESET     MRG007
.
RMRG9999  RETURN
+
.*****************************************************************************
.*                              RDRG0000           Called by:                *
.*                         Reset all DRG variables                           *
.*****************************************************************************
.
RDRG0000  RESET     DRG001
          RESET     DRG002
          RESET     DRG003
          RESET     DRG004
          RESET     DRG005
          RESET     DRG006
          RESET     DRG007
          RESET     DRG008
          RESET     DRG009
          RESET     DRG010
.
RDRG9999  RETURN
+
.*****************************************************************************
.*                              RTXA0000           Called by:                *
.*                         Reset all TXA variables                           *
.*****************************************************************************
.
RTXA0000  RESET     TXA001
          RESET     TXA002
          RESET     TXA003
          RESET     TXA004
          RESET     TXA005
          RESET     TXA006
          RESET     TXA007
          RESET     TXA008
          RESET     TXA009
          RESET     TXA010
          RESET     TXA011
          RESET     TXA012
          RESET     TXA013
          RESET     TXA014
          RESET     TXA015
          RESET     TXA016
          RESET     TXA017
          RESET     TXA018
          RESET     TXA019
          RESET     TXA020
          RESET     TXA021
          RESET     TXA022
          RESET     TXA023
.
RTXA9999  RETURN
+
.*****************************************************************************
.*                              RIN10000           Called by:                *
.*                         Reset all IN1 variables                           *
.*****************************************************************************
.
RIN10000  RESET     IN1001
          RESET     IN1002
          RESET     IN1003
          RESET     IN1004
          RESET     IN1005
          RESET     IN1006
          RESET     IN1007
          RESET     IN1008
          RESET     IN1009
          RESET     IN1010
          RESET     IN1011
          RESET     IN1012
          RESET     IN1013
          RESET     IN1014
          RESET     IN1015
          RESET     IN1016
          RESET     IN1017
          RESET     IN1018
          RESET     IN1019
          RESET     IN1020
          RESET     IN1021
          RESET     IN1022
          RESET     IN1023
          RESET     IN1024
          RESET     IN1025
          RESET     IN1026
          RESET     IN1027
          RESET     IN1028
          RESET     IN1029
          RESET     IN1030
          RESET     IN1031
          RESET     IN1032
          RESET     IN1033
          RESET     IN1034
          RESET     IN1035
          RESET     IN1036
          RESET     IN1037
          RESET     IN1038
          RESET     IN1039
          RESET     IN1040
          RESET     IN1041
          RESET     IN1042
          RESET     IN1043
          RESET     IN1044
          RESET     IN1045
          RESET     IN1046
          RESET     IN1047
          RESET     IN1048
          RESET     IN1049
.
RIN19999  RETURN
+
.*****************************************************************************
.*                              RZPM0000           Called by:                *
.*                         Reset all ZPM variables                           *
.*****************************************************************************
.
RZPM0000  RESET     ZPM001
          RESET     ZPM002
          RESET     ZPM003
          RESET     ZPM004
          RESET     ZPM005
          RESET     ZPM006
          RESET     ZPM007
.
RZPM9999  RETURN
+
.*****************************************************************************
.*                              RZAT0000           Called by:                *
.*                         Reset all ZAT variables                           *
.*****************************************************************************
.
RZAT0000  RESET     ZAT001
          RESET     ZAT002
          RESET     ZAT003
          RESET     ZAT004
          RESET     ZAT005
          RESET     ZAT006
          RESET     ZAT007
          RESET     ZAT008
.
RZAT9999  RETURN
+
.*****************************************************************************
.*                              RMFI0000           Called by:                *
.*                         Reset all MFI variables                           *
.*****************************************************************************
.
RMFI0000  RESET     MFI001
          RESET     MFI002
          RESET     MFI003
          RESET     MFI004
          RESET     MFI005
          RESET     MFI006
.
RMFI9999  RETURN
+
.*****************************************************************************
.*                              RMFE0000           Called by:                *
.*                         Reset all MFE variables                           *
.*****************************************************************************
.
RMFE0000  RESET     MFE001
          RESET     MFE002
          RESET     MFE003
          RESET     MFE004
          RESET     MFE005
.
RMFE9999  RETURN
+
.*****************************************************************************
.*                              RSTF0000           Called by:                *
.*                         Reset all STF variables                           *
.*****************************************************************************
.
RSTF0000  RESET     STF001
          RESET     STF002
          RESET     STF003
          RESET     STF004
          RESET     STF005
          RESET     STF006
          RESET     STF007
          RESET     STF008
          RESET     STF009
          RESET     STF010
          RESET     STF011
          RESET     STF012
          RESET     STF013
          RESET     STF014
          RESET     STF015
          RESET     STF016
          RESET     STF017
          RESET     STF018
          RESET     STF019
          RESET     STF020
          RESET     STF021
          RESET     STF022
          RESET     STF023
          RESET     STF024
          RESET     STF025
          RESET     STF026
.
RSTF9999  RETURN
+
.*****************************************************************************
.*                              RPRA0000           Called by:                *
.*                         Reset all PRA variables                           *
.*****************************************************************************
.
RPRA0000  RESET     PRA001
          RESET     PRA002
          RESET     PRA003
          RESET     PRA004
          RESET     PRA005
          RESET     PRA006
          RESET     PRA007
          RESET     PRA008
.
RPRA9999  RETURN
+
.*****************************************************************************
.*                              RSCH0000           Called by:                *
.*                         Reset all SCH variables                           *
.*****************************************************************************
.
RSCH0000  RESET     SCH001
          RESET     SCH002
          RESET     SCH003
          RESET     SCH004
          RESET     SCH005
          RESET     SCH006
          RESET     SCH007
          RESET     SCH008
          RESET     SCH009
          RESET     SCH010
          RESET     SCH011
          RESET     SCH012
          RESET     SCH013
          RESET     SCH014
          RESET     SCH015
          RESET     SCH016
          RESET     SCH017
          RESET     SCH018
          RESET     SCH019
          RESET     SCH020
          RESET     SCH021
          RESET     SCH022
          RESET     SCH023
          RESET     SCH024
          RESET     SCH025
.
RSCH9999  RETURN
+
.*****************************************************************************
.*                              ROBX0000           Called by:                *
.*                         Reset all OBX variables                           *
.*****************************************************************************
.
ROBX0000  RESET     OBX001
          RESET     OBX002
          RESET     OBX003
          RESET     OBX004
          RESET     OBX005
          RESET     OBX006
          RESET     OBX007
          RESET     OBX008
          RESET     OBX009
          RESET     OBX010
          RESET     OBX011
          RESET     OBX012
          RESET     OBX013
          RESET     OBX014
          RESET     OBX015
          RESET     OBX016
          RESET     OBX017
.
ROBX9999  RETURN
+
.*****************************************************************************
.*                              RRGS0000           Called by:                *
.*                         Reset all RGS variables                           *
.*****************************************************************************
.
RRGS0000  RESET     RGS001
          RESET     RGS002
          RESET     RGS003
.
RRGS9999  RETURN
+
.*****************************************************************************
.*                              RAIS0000           Called by:                *
.*                         Reset all AIS variables                           *
.*****************************************************************************
.
RAIS0000  RESET     AIS001
          RESET     AIS002
          RESET     AIS003
          RESET     AIS004
          RESET     AIS005
          RESET     AIS006
          RESET     AIS007
          RESET     AIS008
          RESET     AIS009
          RESET     AIS010
.
RAIS9999  RETURN
+
.*****************************************************************************
.*                              RAIL0000           Called by:                *
.*                         Reset all AIL variables                           *
.*****************************************************************************
.
RAIL0000  RESET     AIL001
          RESET     AIL002
          RESET     AIL003
          RESET     AIL004
          RESET     AIL005
          RESET     AIL006
          RESET     AIL007
          RESET     AIL008
          RESET     AIL009
          RESET     AIL010
          RESET     AIL011
          RESET     AIL012
.
RAIL9999  RETURN
+
.*****************************************************************************
.*                              RAIP0000           Called by:                *
.*                         Reset all AIP variables                           *
.*****************************************************************************
.
RAIP0000  RESET     AIP001
          RESET     AIP002
          RESET     AIP003
          RESET     AIP004
          RESET     AIP005
          RESET     AIP006
          RESET     AIP007
          RESET     AIP008
          RESET     AIP009
          RESET     AIP010
          RESET     AIP011
          RESET     AIP012
.
RAIP9999  RETURN
+
.*****************************************************************************
.*                              RRF10000           Called by:                *
.*                         Reset all RF1 variables                           *
.*****************************************************************************
.
RRF10000  RESET     RF1001
          RESET     RF1002
          RESET     RF1003
          RESET     RF1004
          RESET     RF1005
          RESET     RF1006
          RESET     RF1007
          RESET     RF1008
          RESET     RF1009
          RESET     RF1010
          RESET     RF1011
.
RRF19999  RETURN
+
.*****************************************************************************
.*                              RPRD0000           Called by:                *
.*                         Reset all PRD variables                           *
.*****************************************************************************
.
RPRD0000  RESET     PRD001
          RESET     PRD002
          RESET     PRD003
          RESET     PRD004
          RESET     PRD005
          RESET     PRD006
          RESET     PRD007
          RESET     PRD008
          RESET     PRD009
.
RPRD9999  RETURN
+
.*****************************************************************************
.*                              RPR10000           Called by:                *
.*                         Reset all PR1 variables                           *
.*****************************************************************************
.
RPR10000  RESET     PR1001
          RESET     PR1002
          RESET     PR1003
          RESET     PR1004
          RESET     PR1005
          RESET     PR1006
          RESET     PR1007
          RESET     PR1008
          RESET     PR1009
          RESET     PR1010
          RESET     PR1011
          RESET     PR1012
          RESET     PR1013
          RESET     PR1014
          RESET     PR1015
          RESET     PR1016
.
RPR19999  RETURN
+
.*****************************************************************************
.*                              RZAL0000           Called by:                *
.*                         Reset all ZAL variables                           *
.*****************************************************************************
.
RZAL0000  RESET     ZAL001
          RESET     ZAL002
          RESET     ZAL003
          RESET     ZAL004
          RESET     ZAL005
          RESET     ZAL006
          RESET     ZAL007
          RESET     ZAL008
          RESET     ZAL009
          RESET     ZAL010
          RESET     ZAL011
          RESET     ZAL012
          RESET     ZAL013
          RESET     ZAL014
          RESET     ZAL015
.
RZAL9999  RETURN
+
.*****************************************************************************
.*                              RZXP0000           Called by:                *
.*                         Reset all ZXP variables                           *
.*****************************************************************************
.
RZXP0000  RESET     ZXP001
          RESET     ZXP002
          RESET     ZXP003
          RESET     ZXP004
          RESET     ZXP005
          RESET     ZXP006
          RESET     ZXP007
          RESET     ZXP008
          RESET     ZXP009
          RESET     ZXP010
          RESET     ZXP011
          RESET     ZXP012
          RESET     ZXP013
          RESET     ZXP014
          RESET     ZXP015
          RESET     ZXP016
          RESET     ZXP017
          RESET     ZXP018
          RESET     ZXP019
          RESET     ZXP020
          RESET     ZXP021
.
RZXP9999  RETURN
+
.*****************************************************************************
.*                              RZSD0000           Called by:                *
.*                         Reset all ZSD variables                           *
.*****************************************************************************
.
RZSD0000  RESET     ZSD001
          RESET     ZSD002
          RESET     ZSD003
.
RZSD9999  RETURN
+
.*****************************************************************************
.*                              RZCT0000           Called by:                *
.*                         Reset all ZCT variables                           *
.*****************************************************************************
.
RZCT0000  RESET     ZCT001
.
RZCT9999  RETURN
+
.*****************************************************************************
.*                              RZLH0000           Called by:                *
.*                         Reset all ZLH variables                           *
.*****************************************************************************
.
RZLH0000  RESET     ZLH001
          RESET     ZLH002
          RESET     ZLH003
          RESET     ZLH004
.
RZLH9999  RETURN
+
.*****************************************************************************
.*                              RZLU0000           Called by:                *
.*                         Reset all ZLU variables                           *
.*****************************************************************************
.
RZLU0000  RESET     ZLU001
          RESET     ZLU002
.
RZLU9999  RETURN
+
.*****************************************************************************
.*                              RZCM0000           Called by:                *
.*                         Reset all ZCM variables                           *
.*****************************************************************************
.
RZCM0000  RESET     ZCM001
          RESET     ZCM002
          RESET     ZCM003
          RESET     ZCM004
          RESET     ZCM005
          RESET     ZCM006
          RESET     ZCM007
.
RZCM9999  RETURN
+
.*****************************************************************************
.*                              RZXV0000           Called by:                *
.*                         Reset all ZXV variables                           *
.*****************************************************************************
.
RZXV0000  RESET     ZXV001
          RESET     ZXV002
          RESET     ZXV003
          RESET     ZXV004
          RESET     ZXV005
          RESET     ZXV006
          RESET     ZXV007
          RESET     ZXV008
          RESET     ZXV009
          RESET     ZXV010
          RESET     ZXV011
          RESET     ZXV012
          RESET     ZXV013
          RESET     ZXV014
          RESET     ZXV015
          RESET     ZXV016
          RESET     ZXV017
          RESET     ZXV018
          RESET     ZXV019
          RESET     ZXV020
          RESET     ZXV021
          RESET     ZXV022
          RESET     ZXV023
          RESET     ZXV024
          RESET     ZXV025
          RESET     ZXV026
          RESET     ZXV027
          RESET     ZXV028
          RESET     ZXV029
          RESET     ZXV030
          RESET     ZXV031
          RESET     ZXV032
.
RZXV9999  RETURN
+
.*****************************************************************************
.*                              RGT10000           Called by:                *
.*                         Reset all GT1 variables                           *
.*****************************************************************************
.
RGT10000  RESET     GT1001
          RESET     GT1001
          RESET     GT1002
          RESET     GT1003
          RESET     GT1004
          RESET     GT1005
          RESET     GT1006
          RESET     GT1007
          RESET     GT1008
          RESET     GT1010
          RESET     GT1011
          RESET     GT1012
          RESET     GT1013
          RESET     GT1014
          RESET     GT1015
          RESET     GT1016
          RESET     GT1017
          RESET     GT1018
          RESET     GT1019
          RESET     GT1020
          RESET     GT1021
          RESET     GT1022
          RESET     GT1023
          RESET     GT1024
          RESET     GT1025
          RESET     GT1026
          RESET     GT1027
          RESET     GT1028
          RESET     GT1029
          RESET     GT1030
          RESET     GT1031
          RESET     GT1032
          RESET     GT1033
          RESET     GT1034
          RESET     GT1035
          RESET     GT1036
          RESET     GT1037
          RESET     GT1038
          RESET     GT1039
          RESET     GT1040
          RESET     GT1041
          RESET     GT1042
          RESET     GT1043
          RESET     GT1044
          RESET     GT1045
          RESET     GT1046
          RESET     GT1047
          RESET     GT1048
          RESET     GT1049
          RESET     GT1050
          RESET     GT1051
          RESET     GT1052
          RESET     GT1053
          RESET     GT1054
          RESET     GT1055
.
RGT19999  RETURN
+
.*****************************************************************************
.*                              RZLS0000           Called by:                *
.*                         Reset all ZLS variables                           *
.*****************************************************************************
.
RZLS0000  RESET     ZLS001
          RESET     ZLS002
          RESET     ZLS003
          RESET     ZLS004
          RESET     ZLS005
          RESET     ZLS006
          RESET     ZLS007
          RESET     ZLS008
          RESET     ZLS009
          RESET     ZLS010
          RESET     ZLS011
          RESET     ZLS012
          RESET     ZLS013
          RESET     ZLS014
          RESET     ZLS015
          RESET     ZLS016
          RESET     ZLS017
          RESET     ZLS018
          RESET     ZLS019
          RESET     ZLS020
          RESET     ZLS021
.
RZLS9999  RETURN
+
.*****************************************************************************
.*                              RQRD0000           Called by:                *
.*                         Reset all QRD variables                           *
.*****************************************************************************
.
RQRD0000  RESET     QRD001
          RESET     QRD002
          RESET     QRD003
          RESET     QRD004
          RESET     QRD005
          RESET     QRD006
          RESET     QRD007
          RESET     QRD008
          RESET     QRD009
          RESET     QRD010
          RESET     QRD011
          RESET     QRD012
.
RQRD9999  RETURN
+
.*****************************************************************************
.*                              RQRF0000           Called by:                *
.*                         Reset all QRF variables                           *
.*****************************************************************************
.
RQRF0000  RESET     QRF001
          RESET     QRF002
          RESET     QRF003
          RESET     QRF004
          RESET     QRF005
          RESET     QRF006
          RESET     QRF007
          RESET     QRF008
          RESET     QRF009
.
RQRF9999  RETURN
+
.*****************************************************************************
.*                                 RZBR0000        Called by:                *
.*                          Load the ZBR fields                              *
.*****************************************************************************
.
RZBR0000  RESET     ZBR001                       * Request Date/Time
          RESET     ZBR002                       * Requesting Department
          RESET     ZBR003                       * Request Ward
          RESET     ZBR004                       * Admitting Consultant
          RESET     ZBR005                       * Type of Bed Required
          RESET     ZBR006                       * Specialty Bed Required
          RESET     ZBR007                       * Diagnosis
          RESET     ZBR008                       * Diagnosis Free Format
          RESET     ZBR009                       * Notes
          RESET     ZBR010                       * Expected Ward/Bed
          RESET     ZBR011                       * Ward/Bed Ready Date/Time
          RESET     ZBR012                       * Request Status
          RESET     ZBR013                       * Ward/Bed Allocated Date/Time
          RESET     ZBR014                       * Cancellation Reason
          RESET     ZBR015                       * Cancellation Date/Time
.
RZBR9999  RETURN
+
.*****************************************************************************
.*                            VMSH0000             Called by:                *
.*      Validate that the mandatory MSH fields are not null or spaces        *
.*****************************************************************************
.
.         Encoding Characters
.
VMSH0000  MOVELPTR  MSH002,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VMSH0500                   * yes - error
          ENDIF
          MATCH     MSH002,SP100                 * no, is it blank ?
          GOTO      VMSH1000 IF NOT EQUAL        * no
.
VMSH0500  IF        DISPFLAG = 1
            DISPLAY   "MSH.2 - Encoding characters not present",*R,*N;
          ENDIF
          MOVE      MSHSEGMT,ERRORSEG
          MOVE      "2",ERRORFLD
          MOVE      "Encoding characters not present",ERRORTXT
          CALL      EROR0000
.
.         Message Type
.
VMSH1000  MOVELPTR  MSH009,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VMSH1500                   * yes - error
          ENDIF
          MATCH     MSH009,SP100                 * no, is it blank ?
          GOTO      VMSH1500 IF EQUAL            * yes - error
          UNPACK    MSH009,ANS,ANS,ANS,ANS,MESSTYPE
.
          CALL      VTYP0000                     * valid message type ?
          GOTO      VMSH2000
.
VMSH1500  IF        DISPFLAG = 1
            DISPLAY   "MSH.9 - Message Type not present",*R,*N;
          ENDIF
          MOVE      MSHSEGMT,ERRORSEG
          MOVE      "9",ERRORFLD
          MOVE      "Message Type not present",ERRORTXT
          CALL      EROR0000
.
.         Message Control ID
.
VMSH2000  MOVELPTR  MSH010,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VMSH2500                   * yes - error
          ENDIF
          MATCH     MSH010,SP100                 * no, is it blank ?
          GOTO      VMSH3000 IF NOT EQUAL        * no
.
VMSH2500  IF        DISPFLAG = 1
            DISPLAY   "MSH.10 - Message Control ID not present",*R,*N;
          ENDIF
          MOVE      MSHSEGMT,ERRORSEG
          MOVE      "10",ERRORFLD
          MOVE      "Message Control ID not present",ERRORTXT
          CALL      EROR0000
.
.         Processing Id
.
VMSH3000  MOVELPTR  MSH011,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VMSH3500                   * yes
          ENDIF
          MATCH     MSH011,SP100                 * no, is it blank ?
          GOTO      VMSH4000 IF NOT EQUAL        * no
.
VMSH3500  IF        DISPFLAG = 1
            DISPLAY   "MSH.11 - Processing ID not present",*R,*N;
          ENDIF
          MOVE      MSHSEGMT,ERRORSEG
          MOVE      "11",ERRORFLD
          MOVE      "Processing ID not present",ERRORTXT
          CALL      EROR0000
.
.         Version Id
.
VMSH4000  MOVELPTR  MSH012,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VMSH4500                   * yes
          ENDIF
          MATCH     MSH012,SP100                 * no, is it blank ?
          GOTO      VMSH9999 IF NOT EQUAL        * no
.
VMSH4500  IF        DISPFLAG = 1
            DISPLAY   "MSH.12 - Version ID not present",*R,*N;
          ENDIF
          MOVE      MSHSEGMT,ERRORSEG
          MOVE      "12",ERRORFLD
          MOVE      "Version ID not present",ERRORTXT
          CALL      EROR0000
.
VMSH9999  RETURN
+
.*****************************************************************************
.*                            VEVN0000             Called by:                *
.*      Validate that the mandatory EVN fields are not null or spaces        *
.*****************************************************************************
.
.         Recorded Date/Time
.
VEVN0000  MOVELPTR  EVN002,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VEVN0500                   * yes - error
          ENDIF
          MATCH     EVN002,SP100                 * no, is it blank ?
          GOTO      VEVN9999 IF NOT EQUAL        * no
.
VEVN0500  IF        DISPFLAG = 1
            DISPLAY   "EVN.2 - Recorded date/time not present",*R,*N;
          ENDIF
          MOVE      EVNSEGMT,ERRORSEG
          MOVE      "2",ERRORFLD
          MOVE      "Recorded date/time not present",ERRORTXT
          CALL      EROR0000
.
VEVN9999  RETURN
+
.*****************************************************************************
.*                            VPID0000             Called by:                *
.*      Validate that the mandatory PID fields are not null or spaces        *
.*****************************************************************************
.
.         Patient ID (Internal ID)
.
VPID0000  MOVELPTR  PID003,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VPID0500                   * yes - error
          ENDIF
          MATCH     PID003,SP100                 * no, is it blank ?
          GOTO      VPID1000 IF NOT EQUAL        * no
.
VPID0500  IF        DISPFLAG = 1
            DISPLAY   "PID.3 - Patient (Internal) ID not present",*R,*N;
          ENDIF
          MOVE      PIDSEGMT,ERRORSEG
          MOVE      "3",ERRORFLD
          MOVE      "Patient (Internal) ID not present",ERRORTXT
          CALL      EROR0000
.
.         Patient Name
.
VPID1000  MOVELPTR  PID005,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VPID1500                   * yes - error
          ENDIF
          MATCH     PID005,SP100                 * no, is it blank ?
          GOTO      VPID9999 IF NOT EQUAL        * no
.
VPID1500  IF        DISPFLAG = 1
            DISPLAY   "PID.5 - Patient Name not present",*R,*N;
          ENDIF
          MOVE      PIDSEGMT,ERRORSEG
          MOVE      "5",ERRORFLD
          MOVE      "Patient Name not present",ERRORTXT
          CALL      EROR0000
.
VPID9999  RETURN
+
.*****************************************************************************
.*                            VNK10000             Called by:                *
.*      Validate that the mandatory NK1 fields are not null or spaces        *
.*****************************************************************************
.
.         Set ID
.
VNK10000  MOVELPTR  NK1001,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VNK10500                   * yes - error
          ENDIF
          MATCH     NK1001,SP100                 * no, is it blank ?
          GOTO      VNK19999 IF NOT EQUAL        * no

VNK10500  IF        DISPFLAG = 1
            DISPLAY   "NK1.1 - Set ID not present",*R,*N;
          ENDIF
          MOVE      NK1SEGMT,ERRORSEG
          MOVE      "1",ERRORFLD
          MOVE      "Set ID not present",ERRORTXT
          CALL      EROR0000
.
VNK19999  RETURN
+
.*****************************************************************************
.*                            VPV10000             Called by:                *
.*      Validate that the mandatory PV1 fields are not null or spaces        *
.*****************************************************************************
.
.         Patient Class
.
VPV10000  MOVELPTR  PV1002,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VPV10500                   * yes - error
          ENDIF
          MATCH     PV1002,SP100                 * no, is it blank ?
          GOTO      VPV19999 IF NOT EQUAL        * no
.
VPV10500  IF        DISPFLAG = 1
            DISPLAY   "PV1.2 - Patient Class not present",*R,*N;
          ENDIF
          MOVE      PV1SEGMT,ERRORSEG
          MOVE      "2",ERRORFLD
          MOVE      "Patient Class not present",ERRORTXT
          CALL      EROR0000
.
VPV19999  RETURN
+
.*****************************************************************************
.*                            VPV20000             Called by:                *
.*      Validate that the mandatory PV2 fields are not null or spaces        *
.*****************************************************************************
.
.         Prior Pending Location (only mandatory for A27)
.
VPV20000  MATCH     MTYPEA27,MESSTYPE            * A27 message ?
          GOTO      VPV29999 IF NOT EQUAL        * no - ignore validation
.
          MOVELPTR  PV2001,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VPV20500                   * yes - error
          ENDIF
          MATCH     PV2001,SP100                 * no, is it blank ?
          GOTO      VPV29999 IF NOT EQUAL        * no
.
VPV20500  IF        DISPFLAG = 1
            DISPLAY   "PV2.1 - Prior Pending Location not present",*R,*N;
          ENDIF
          MOVE      PV2SEGMT,ERRORSEG
          MOVE      "1",ERRORFLD
          MOVE      "Prior Pending Location not present",ERRORTXT
          CALL      EROR0000
.
VPV29999  RETURN
+
.*****************************************************************************
.*                            VAL10000             Called by:                *
.*      Validate that the mandatory AL1 fields are not null or spaces        *
.*****************************************************************************
.
.         Set ID
.
VAL10000  MOVELPTR  AL1001,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VAL10100                   * yes - error
          ENDIF
          MATCH     AL1001,SP100                 * no, is it blank ?
          GOTO      VAL10200 IF NOT EQUAL        * no
.
VAL10100  IF        DISPFLAG = 1
            DISPLAY   "AL1.1 - Set ID not present",*R,*N;
          ENDIF
          MOVE      AL1SEGMT,ERRORSEG
          MOVE      "1",ERRORFLD
          MOVE      "Set ID not present",ERRORTXT
          CALL      EROR0000
.
.         Allergy Code/Description
.
VAL10200  MOVELPTR  AL1003,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VAL10250                   * yes - error
          ENDIF
          MATCH     AL1003,SP100                 * no, is it blank ?
          GOTO      VAL19999 IF NOT EQUAL        * no
.
VAL10250  IF        DISPFLAG = 1
            DISPLAY   "AL1.3 - Allergy Code not present",*R,*N;
          ENDIF
          MOVE      AL1SEGMT,ERRORSEG
          MOVE      "3",ERRORFLD
          MOVE      "Allergy Code not present",ERRORTXT
          CALL      EROR0000
.
VAL19999  RETURN
+
.*****************************************************************************
.*                            VDG10000             Called by:                *
.*      Validate that the mandatory DG1 fields are not null or spaces        *
.*****************************************************************************
.
.         Set ID
.
VDG10000  MOVELPTR  DG1001,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VDG10500                   * yes - error
          ENDIF
          MATCH     DG1001,SP100                 * no, is it blank ?
          GOTO      VDG11000 IF NOT EQUAL        * no
.
VDG10500  IF        DISPFLAG = 1
            DISPLAY   "DG1.1 - Set Id not present",*R,*N;
          ENDIF
          MOVE      DG1SEGMT,ERRORSEG
          MOVE      "1",ERRORFLD
          MOVE      "Set Id not present",ERRORTXT
          CALL      EROR0000
.
.         Diagnosis Type
.
VDG11000  MOVELPTR  DG1006,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VDG11500                   * yes - error
          ENDIF
          MATCH     DG1006,SP100                 * no, is it blank ?
          GOTO      VDG19999 IF NOT EQUAL        * no
.
VDG11500  IF        DISPFLAG = 1
            DISPLAY   "DG1.6 - Diagnosis Type not present",*R,*N;
          ENDIF
          MOVE      DG1SEGMT,ERRORSEG
          MOVE      "6",ERRORFLD
          MOVE      "Diagnosis Type not present",ERRORTXT
          CALL      EROR0000
.
VDG19999  RETURN
+
.*****************************************************************************
.*                            VMRG0000             Called by:                *
.*      Validate that the mandatory MRG fields are not null or spaces        *
.*****************************************************************************
.
.         Prior Patient ID - Internal
.
VMRG0000  MOVELPTR  MRG001,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VMRG0500                   * yes - error
          ENDIF
          MATCH     MRG001,SP100                 * no, is it blank ?
          GOTO      VMRG9999 IF NOT EQUAL        * no
.
VMRG0500  IF        DISPFLAG = 1
            DISPLAY   "MRG.1 - Prior Patient ID (Internal) not present",*R,*N;
          ENDIF
          MOVE      MRGSEGMT,ERRORSEG
          MOVE      "1",ERRORFLD
          MOVE      "Prior Patient ID (Internal) not present",ERRORTXT
          CALL      EROR0000
.
VMRG9999  RETURN
+
.*****************************************************************************
.*                            VDRG0000             Called by:                *
.*      Validate that the mandatory DRG fields are not null or spaces        *
.*****************************************************************************
.
VDRG0000
.
VDRG9999  RETURN
+
.*****************************************************************************
.*                            VTXA0000             Called by:                *
.*      Validate that the mandatory TXA fields are not null or spaces        *
.*****************************************************************************
.
.         Set Id
.
VTXA0000  MOVELPTR  TXA001,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VTXA0500                   * yes - error
          ENDIF
          MATCH     TXA001,SP100                 * no, is it blank ?
          GOTO      VTXA1000 IF NOT EQUAL        * no
.
VTXA0500  IF        DISPFLAG = 1
            DISPLAY   "TXA.1 - Set ID not present",*R,*N;
          ENDIF
          MOVE      TXASEGMT,ERRORSEG
          MOVE      "1",ERRORFLD
          MOVE      "Set ID not present",ERRORTXT
          CALL      EROR0000
.
.         Document Type
.
VTXA1000  MOVELPTR  TXA002,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VTXA1500                   * yes - error
          ENDIF
          MATCH     TXA002,SP100                 * no, is it blank ?
          GOTO      VTXA2000 IF NOT EQUAL        * no
.
VTXA1500  IF        DISPFLAG = 1
            DISPLAY   "TXA.2 - Document Type not present",*R,*N;
          ENDIF
          MOVE      TXASEGMT,ERRORSEG
          MOVE      "2",ERRORFLD
          MOVE      "Document Type not present",ERRORTXT
          CALL      EROR0000
.
.         Unique Document Number
.
VTXA2000  MOVELPTR  TXA012,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VTXA2500                   * yes - error
          ENDIF
          MATCH     TXA012,SP100                 * no, is it blank ?
          GOTO      VTXA3000 IF NOT EQUAL        * no
.
VTXA2500  IF        DISPFLAG = 1
            DISPLAY   "TXA.12 - Unique Document Number not present",*R,*N;
          ENDIF
          MOVE      TXASEGMT,ERRORSEG
          MOVE      "12",ERRORFLD
          MOVE      "Unique Document Number not present",ERRORTXT
          CALL      EROR0000
.
.         Document Completion Status
.
VTXA3000  MOVELPTR  TXA017,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VTXA3500                   * yes - error
          ENDIF
          MATCH     TXA017,SP100                 * no, is it blank ?
          GOTO      VTXA9999 IF NOT EQUAL        * no
.
VTXA3500  IF        DISPFLAG = 1
            DISPLAY   "TXA.17 - Document Completion Status not present",*R,*N;
          ENDIF
          MOVE      TXASEGMT,ERRORSEG
          MOVE      "17",ERRORFLD
          MOVE      "Document Completion Status not present",ERRORTXT
          CALL      EROR0000
.
VTXA9999  RETURN
+
.*****************************************************************************
.*                            VIN10000             Called by:                *
.*      Validate that the mandatory IN1 fields are not null or spaces        *
.*****************************************************************************
.
.         Set Id
.
VIN10000  MOVELPTR  IN1001,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VIN10500                   * yes - error
          ENDIF
          MATCH     IN1001,SP100                 * no, is it blank ?
          GOTO      VIN11000 IF NOT EQUAL        * no
.
VIN10500  IF        DISPFLAG = 1
            DISPLAY   "IN1.1 - Set ID not present",*R,*N;
          ENDIF
          MOVE      IN1SEGMT,ERRORSEG
          MOVE      "1",ERRORFLD
          MOVE      "Set ID not present",ERRORTXT
          CALL      EROR0000
.
.         Insurance Plan Id
.
VIN11000  MOVELPTR  IN1002,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VIN11500                   * yes - error
          ENDIF
          MATCH     IN1002,SP100                 * no, is it blank ?
          GOTO      VIN12000 IF NOT EQUAL        * no
.
VIN11500  IF        DISPFLAG = 1
            DISPLAY   "IN1.2 - Insurance Plan ID not present",*R,*N;
          ENDIF
          MOVE      IN1SEGMT,ERRORSEG
          MOVE      "2",ERRORFLD
          MOVE      "Insurance Plan ID not present",ERRORTXT
          CALL      EROR0000
.
.         Insurance Company Id
.
VIN12000  MOVELPTR  IN1003,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VIN12500                   * yes - error
          ENDIF
          MATCH     IN1003,SP100                 * no, is it blank ?
          GOTO      VIN19999 IF NOT EQUAL        * no
.
VIN12500  IF        DISPFLAG = 1
            DISPLAY   "IN1.3 - Insurance Company ID not present",*R,*N;
          ENDIF
          MOVE      IN1SEGMT,ERRORSEG
          MOVE      "3",ERRORFLD
          MOVE      "Insurance Company ID not present",ERRORTXT
          CALL      EROR0000
.
VIN19999  RETURN
+
.*****************************************************************************
.*                            VZPM0000             Called by:                *
.*      Validate that the mandatory ZPM fields are not null or spaces        *
.*****************************************************************************
.
VZPM0000  
.
VZPM9999  RETURN
+
.*****************************************************************************
.*                            VZAT0000             Called by:                *
.*      Validate that the mandatory ZAT fields are not null or spaces        *
.*****************************************************************************
.
VZAT0000  
.
VZAT9999  RETURN
+
.*****************************************************************************
.*                            VMFI0000             Called by:                *
.*      Validate that the mandatory MFI fields are not null or spaces        *
.*****************************************************************************
.
.         Master File Identifier
.
VMFI0000  MOVELPTR  MFI001,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VMFI0500                   * yes - error
          ENDIF
          MATCH     MFI001,SP100                 * no, is it blank ?
          GOTO      VMFI1000 IF NOT EQUAL        * no
.
VMFI0500  IF        DISPFLAG = 1
            DISPLAY   "MFI.1 - Master File Identifier not present",*R,*N;
          ENDIF
          MOVE      MFISEGMT,ERRORSEG
          MOVE      "1",ERRORFLD
          MOVE      "Master File Identifier not present",ERRORTXT
          CALL      EROR0000
.
.         File-Level Event Code
.
VMFI1000  MOVELPTR  MFI003,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VMFI1500                   * yes - error
          ENDIF
          MATCH     MFI003,SP100                 * no, is it blank ?
          GOTO      VMFI2000 IF NOT EQUAL        * no
.
VMFI1500  IF        DISPFLAG = 1
            DISPLAY   "MFI.3 - File-Level Event Code not present",*R,*N;
          ENDIF
          MOVE      MFISEGMT,ERRORSEG
          MOVE      "3",ERRORFLD
          MOVE      "File-Level Event Code not present",ERRORTXT
          CALL      EROR0000
.
.         Response Level Code
.
VMFI2000  MOVELPTR  MFI006,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VMFI2500                   * yes - error
          ENDIF
          MATCH     MFI006,SP100                 * no, is it blank ?
          GOTO      VMFI9999 IF NOT EQUAL        * no
.
VMFI2500  IF        DISPFLAG = 1
            DISPLAY   "MFI.6 - Response Level Code not present",*R,*N;
          ENDIF
          MOVE      MFISEGMT,ERRORSEG
          MOVE      "6",ERRORFLD
          MOVE      "Response Level Code not present",ERRORTXT
          CALL      EROR0000
.
VMFI9999  RETURN
+
.*****************************************************************************
.*                            VMFE0000             Called by:                *
.*      Validate that the mandatory MFE fields are not null or spaces        *
.*****************************************************************************
.
.         Record-Level Event Code
.
VMFE0000  MOVELPTR  MFE001,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VMFE0500                   * yes - error
          ENDIF
          MATCH     MFE001,SP100                 * no, is it blank ?
          GOTO      VMFE1000 IF NOT EQUAL        * no
.
VMFE0500  IF        DISPFLAG = 1
            DISPLAY   "MFE.1 - Record-Level Event Code not present",*R,*N;
          ENDIF
          MOVE      MFESEGMT,ERRORSEG
          MOVE      "1",ERRORFLD
          MOVE      "Record-Level Event Code not present",ERRORTXT
          CALL      EROR0000
.
.         Primary Key Value - MFE
.
VMFE1000  MOVELPTR  MFE004,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VMFE1500                   * yes - error
          ENDIF
          MATCH     MFE004,SP100                 * no, is it blank ?
          GOTO      VMFE2000 IF NOT EQUAL        * no
.
VMFE1500  IF        DISPFLAG = 1
            DISPLAY   "MFE.4 - Primary Key Value - MFE not present",*R,*N;
          ENDIF
          MOVE      MFESEGMT,ERRORSEG
          MOVE      "4",ERRORFLD
          MOVE      "Primary Key Value - MFE not present",ERRORTXT
          CALL      EROR0000
.
.         Primary Key Value Type
.
VMFE2000  MOVELPTR  MFE005,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VMFE2500                   * yes - error
          ENDIF
          MATCH     MFE005,SP100                 * no, is it blank ?
          GOTO      VMFE9999 IF NOT EQUAL        * no
.
VMFE2500  IF        DISPFLAG = 1
            DISPLAY   "MFE.5 - Primary Key Value Type not present",*R,*N;
          ENDIF
          MOVE      MFESEGMT,ERRORSEG
          MOVE      "5",ERRORFLD
          MOVE      "Primary Key Value Type not present",ERRORTXT
          CALL      EROR0000
.
VMFE9999  RETURN
+
.*****************************************************************************
.*                            VSTF0000             Called by:                *
.*      Validate that the mandatory STF fields are not null or spaces        *
.*****************************************************************************
.
.         Primary Key Value - STF
.
VSTF0000  MOVELPTR  STF001,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VSTF0500                   * yes - error
          ENDIF
          MATCH     STF001,SP100                 * no, is it blank ?
          GOTO      VSTF9999 IF NOT EQUAL        * no
.
VSTF0500  IF        DISPFLAG = 1
            DISPLAY   "STF.1 - Primary Key Value - STF not present",*R,*N;
          ENDIF
          MOVE      STFSEGMT,ERRORSEG
          MOVE      "1",ERRORFLD
          MOVE      "Primary Key Value - STF not present",ERRORTXT
          CALL      EROR0000
.
VSTF9999  RETURN
+
.*****************************************************************************
.*                            VPRA0000             Called by:                *
.*      Validate that the mandatory PRA fields are not null or spaces        *
.*****************************************************************************
.
.         Primary Key Value - PRA
.
VPRA0000  MOVELPTR  PRA001,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VPRA0500                   * yes - error
          ENDIF
          MATCH     PRA001,SP100                 * no, is it blank ?
          GOTO      VPRA9999 IF NOT EQUAL        * no
.
VPRA0500  IF        DISPFLAG = 1
            DISPLAY   "PRA.1 - Primary Key Value - PRA not present",*R,*N;
          ENDIF
          MOVE      PRASEGMT,ERRORSEG
          MOVE      "1",ERRORFLD
          MOVE      "Primary Key Value - PRA not present",ERRORTXT
          CALL      EROR0000
.
VPRA9999  RETURN
+
.*****************************************************************************
.*                            VSCH0000             Called by:                *
.*      Validate that the mandatory SCH fields are not null or spaces        *
.*****************************************************************************
.
.         Event Reason
.
VSCH0000  MOVELPTR  SCH006,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VSCH0500                   * yes - error
          ENDIF
          MATCH     SCH006,SP100                 * no, is it blank ?
          GOTO      VSCH1000 IF NOT EQUAL        * no
.
VSCH0500  IF        DISPFLAG = 1
            DISPLAY   "SCH.6 - Event Reason not present",*R,*N;
          ENDIF
          MOVE      SCHSEGMT,ERRORSEG
          MOVE      "1",ERRORFLD
          MOVE      "Event Reason not present",ERRORTXT
          CALL      EROR0000
.
.         Appointment Timing Quantity
.
VSCH1000  MOVELPTR  SCH011,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VSCH1500                   * yes - error
          ENDIF
          MATCH     SCH011,SP100                 * no, is it blank ?
          GOTO      VSCH2000 IF NOT EQUAL        * no
.
VSCH1500  IF        DISPFLAG = 1
            DISPLAY   "SCH.11 - Appointment Timing Quantity not present",*R,*N;
          ENDIF
          MOVE      SCHSEGMT,ERRORSEG
          MOVE      "2",ERRORFLD
          MOVE      "Appointment Timing Quantity not present",ERRORTXT
          CALL      EROR0000
.
.         Filler Contact Person
.
VSCH2000  MOVELPTR  SCH016,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VSCH2500                   * yes - error
          ENDIF
          MATCH     SCH016,SP100                 * no, is it blank ?
          GOTO      VSCH3000 IF NOT EQUAL        * no
.
VSCH2500  IF        DISPFLAG = 1
            DISPLAY   "SCH0.6 - Filler Contact Person not present",*R,*N;
          ENDIF
          MOVE      SCHSEGMT,ERRORSEG
          MOVE      "3",ERRORFLD
          MOVE      "Filler Contact Person not present",ERRORTXT
          CALL      EROR0000
.
.         Entered By Person
.
VSCH3000  MOVELPTR  SCH020,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VSCH3500                   * yes - error
          ENDIF
          MATCH     SCH020,SP100                 * no, is it blank ?
          GOTO      VSCH9999 IF NOT EQUAL        * no
.
VSCH3500  IF        DISPFLAG = 1
            DISPLAY   "SCH.20 - Entered By Person not present",*R,*N;
          ENDIF
          MOVE      SCHSEGMT,ERRORSEG
          MOVE      "4",ERRORFLD
          MOVE      "Entered By Person not present",ERRORTXT
          CALL      EROR0000
.
VSCH9999  RETURN
+
.*****************************************************************************
.*                            VOBX0000             Called by:                *
.*      Validate that the mandatory OBX fields are not null or spaces        *
.*****************************************************************************
.
.         Set-ID
.
VOBX0000  MOVELPTR  OBX001,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VOBX0500                   * yes - error
          ENDIF
          MATCH     OBX001,SP100                 * no, is it blank ?
          GOTO      VOBX1000 IF NOT EQUAL        * no
.
VOBX0500  IF        DISPFLAG = 1
            DISPLAY   "OBX.1 - Set ID not present",*R,*N;
          ENDIF
          MOVE      OBXSEGMT,ERRORSEG
          MOVE      "1",ERRORFLD
          MOVE      "Set ID not present",ERRORTXT
          CALL      EROR0000
          GOTO      VOBX2000
.
VOBX1000  TYPE      OBX001
          GOTO      VOBX2000 IF EQUAL
.
          IF        DISPFLAG = 1
            DISPLAY   "OBX.1 - Set ID not numeric",*R,*N;
          ENDIF
          MOVE      OBXSEGMT,ERRORSEG
          MOVE      "2",ERRORFLD
          MOVE      "Set ID not numeric",ERRORTXT
          CALL      EROR0000
.
.         Value Type
.
VOBX2000  MOVELPTR  OBX002,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VOBX2500                   * yes - error
          ENDIF
          MATCH     OBX002,SP100                 * no, is it blank ?
          GOTO      VOBX3000 IF NOT EQUAL        * no
.
VOBX2500  IF        DISPFLAG = 1
            DISPLAY   "OBX.2 - Value Type not present",*R,*N;
          ENDIF
          MOVE      OBXSEGMT,ERRORSEG
          MOVE      "3",ERRORFLD
          MOVE      "Value Type not present",ERRORTXT
          CALL      EROR0000
.
.         Observation Identifier
.
VOBX3000  MOVELPTR  OBX003,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VOBX3500                   * yes - error
          ENDIF
          MATCH     OBX003,SP100                 * no, is it blank ?
          GOTO      VOBX4000 IF NOT EQUAL        * no
.
VOBX3500  IF        DISPFLAG = 1
            DISPLAY   "OBX.3 - Observation Identifier not present",*R,*N;
          ENDIF
          MOVE      OBXSEGMT,ERRORSEG
          MOVE      "4",ERRORFLD
          MOVE      "Observation Identifier not present",ERRORTXT
          CALL      EROR0000
.
.         Observation Value
.
VOBX4000  MOVELPTR  OBX005,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VOBX4500                   * yes - error
          ENDIF
          MATCH     OBX005,SP100                 * no, is it blank ?
          GOTO      VOBX5000 IF NOT EQUAL        * no
.
VOBX4500  IF        DISPFLAG = 1
            DISPLAY   "OBX.5 - Observation Value not present",*R,*N;
          ENDIF
          MOVE      OBXSEGMT,ERRORSEG
          MOVE      "5",ERRORFLD
          MOVE      "Observation Value not present",ERRORTXT
          CALL      EROR0000
.
.         Observation Result Status
.
VOBX5000  MOVELPTR  OBX011,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VOBX5500                   * yes - error
          ENDIF
          MATCH     OBX011,SP100                 * no, is it blank ?
          GOTO      VOBX6000 IF NOT EQUAL        * no
.
VOBX5500  IF        DISPFLAG = 1
            DISPLAY   "OBX.11 - Observation Result Status not present",*R,*N;
          ENDIF
          MOVE      OBXSEGMT,ERRORSEG
          MOVE      "6",ERRORFLD
          MOVE      "Observation Result Status not present",ERRORTXT
          CALL      EROR0000
.
.         Observation Date/Time
.
VOBX6000  MOVELPTR  OBX014,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VOBX6500                   * yes - error
          ENDIF
          MATCH     OBX014,SP100                 * no, is it blank ?
          GOTO      VOBX9999 IF NOT EQUAL        * no
.
VOBX6500  IF        DISPFLAG = 1
            DISPLAY   "OBX.14 - Observation Date/Time not present",*R,*N;
          ENDIF
          MOVE      OBXSEGMT,ERRORSEG
          MOVE      "7",ERRORFLD
          MOVE      "Observation Date/Time not present",ERRORTXT
          CALL      EROR0000
.
VOBX9999  RETURN
+
.*****************************************************************************
.*                            VRGS0000             Called by:                *
.*      Validate that the mandatory RGS fields are not null or spaces        *
.*****************************************************************************
.
.         Set-ID
.
VRGS0000  MOVELPTR  RGS001,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VRGS0500                   * yes - error
          ENDIF
          MATCH     RGS001,SP100                 * no, is it blank ?
          GOTO      VRGS1000 IF NOT EQUAL        * no
.
VRGS0500  IF        DISPFLAG = 1
            DISPLAY   "RGS.1 - Set ID not present",*R,*N;
          ENDIF
          MOVE      RGSSEGMT,ERRORSEG
          MOVE      "1",ERRORFLD
          MOVE      "Set ID not present",ERRORTXT
          CALL      EROR0000
          GOTO      VRGS9999
.
VRGS1000  TYPE      RGS001
          GOTO      VRGS9999 IF EQUAL
.
          IF        DISPFLAG = 1
            DISPLAY   "RGS.1 - Set ID not numeric",*R,*N;
          ENDIF
          MOVE      RGSSEGMT,ERRORSEG
          MOVE      "2",ERRORFLD
          MOVE      "Set ID not numeric",ERRORTXT
          CALL      EROR0000
.
VRGS9999  RETURN
+
.*****************************************************************************
.*                            VAIS0000             Called by:                *
.*      Validate that the mandatory AIS fields are not null or spaces        *
.*****************************************************************************
.
.         Set-ID
.
VAIS0000  MOVELPTR  AIS001,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VAIS0500                   * yes - error
          ENDIF
          MATCH     AIS001,SP100                 * no, is it blank ?
          GOTO      VAIS1000 IF NOT EQUAL        * no
.
VAIS0500  IF        DISPFLAG = 1
            DISPLAY   "AIS.1 - Set ID not present",*R,*N;
          ENDIF
          MOVE      AISSEGMT,ERRORSEG
          MOVE      "1",ERRORFLD
          MOVE      "Set ID not present",ERRORTXT
          CALL      EROR0000
          GOTO      VAIS2000
.
VAIS1000  TYPE      AIS001
          GOTO      VAIS2000 IF EQUAL
.
          IF        DISPFLAG = 1
            DISPLAY   "AIS.1 - Set ID not numeric",*R,*N;
          ENDIF
          MOVE      AISSEGMT,ERRORSEG
          MOVE      "2",ERRORFLD
          MOVE      "Set ID not numeric",ERRORTXT
          CALL      EROR0000
.
.         Universal Service ID
.
VAIS2000  MOVELPTR  AIS003,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VAIS2500                   * yes - error
          ENDIF
          MATCH     AIS003,SP100                 * no, is it blank ?
          GOTO      VAIS3000 IF NOT EQUAL        * no
.
VAIS2500  IF        DISPFLAG = 1
            DISPLAY   "AIS.3 - Universal Service ID not present",*R,*N;
          ENDIF
          MOVE      AISSEGMT,ERRORSEG
          MOVE      "3",ERRORFLD
          MOVE      "Universal Service ID not present",ERRORTXT
          CALL      EROR0000
.
.         Start Date/Time
.
VAIS3000  MOVELPTR  AIS004,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VAIS3500                   * yes - error
          ENDIF
          MATCH     AIS004,SP100                 * no, is it blank ?
          GOTO      VAIS9999 IF NOT EQUAL        * no
.
VAIS3500  IF        DISPFLAG = 1
            DISPLAY   "AIS.4 - Start Date/Time not present",*R,*N;
          ENDIF
          MOVE      AISSEGMT,ERRORSEG
          MOVE      "4",ERRORFLD
          MOVE      "Start Date/Time not present",ERRORTXT
          CALL      EROR0000
.
VAIS9999  RETURN
+
.*****************************************************************************
.*                            VAIL0000             Called by:                *
.*      Validate that the mandatory AIL fields are not null or spaces        *
.*****************************************************************************
.
.         Set-ID
.
VAIL0000  MOVELPTR  AIL001,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VAIL0500                   * yes - error
          ENDIF
          MATCH     AIL001,SP100                 * no, is it blank ?
          GOTO      VAIL1000 IF NOT EQUAL        * no
.
VAIL0500  IF        DISPFLAG = 1
            DISPLAY   "AIL.1 - Set ID not present",*R,*N;
          ENDIF
          MOVE      AILSEGMT,ERRORSEG
          MOVE      "1",ERRORFLD
          MOVE      "Set ID not present",ERRORTXT
          CALL      EROR0000
          GOTO      VAIL2000
.
VAIL1000  TYPE      AIL001
          GOTO      VAIL2000 IF EQUAL
.
          IF        DISPFLAG = 1
            DISPLAY   "AIL.1 - Set ID not numeric",*R,*N;
          ENDIF
          MOVE      AILSEGMT,ERRORSEG
          MOVE      "2",ERRORFLD
          MOVE      "Set ID not numeric",ERRORTXT
          CALL      EROR0000
.
.         Location Resource ID
.
VAIL2000  MOVELPTR  AIL003,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VAIL2500                   * yes - error
          ENDIF
          MATCH     AIL003,SP100                 * no, is it blank ?
          GOTO      VAIL3000 IF NOT EQUAL        * no
.
VAIL2500  IF        DISPFLAG = 1
            DISPLAY   "AIL.3 - Location Resource ID not present",*R,*N;
          ENDIF
          MOVE      AILSEGMT,ERRORSEG
          MOVE      "3",ERRORFLD
          MOVE      "Location Resource ID not present",ERRORTXT
          CALL      EROR0000
.
.         Location Type
.
VAIL3000  MOVELPTR  AIL004,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VAIL3500                   * yes - error
          ENDIF
          MATCH     AIL004,SP100                 * no, is it blank ?
          GOTO      VAIL9999 IF NOT EQUAL        * no
.
VAIL3500  IF        DISPFLAG = 1
            DISPLAY   "AIL.4 - Location Type not present",*R,*N;
          ENDIF
          MOVE      AILSEGMT,ERRORSEG
          MOVE      "4",ERRORFLD
          MOVE      "Location Type not present",ERRORTXT
          CALL      EROR0000
.
VAIL9999  RETURN
+
.*****************************************************************************
.*                            VAIP0000             Called by:                *
.*      Validate that the mandatory AIP fields are not null or spaces        *
.*****************************************************************************
.
.         Set-ID
.
VAIP0000  MOVELPTR  AIP001,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VAIP0500                   * yes - error
          ENDIF
          MATCH     AIP001,SP100                 * no, is it blank ?
          GOTO      VAIP1000 IF NOT EQUAL        * no
.
VAIP0500  IF        DISPFLAG = 1
            DISPLAY   "AIP.1 - Set ID not present",*R,*N;
          ENDIF
          MOVE      AIPSEGMT,ERRORSEG
          MOVE      "1",ERRORFLD
          MOVE      "Set ID not present",ERRORTXT
          CALL      EROR0000
          GOTO      VAIP2000
.
VAIP1000  TYPE      AIP001
          GOTO      VAIP2000 IF EQUAL
.
          IF        DISPFLAG = 1
            DISPLAY   "AIP.1 - Set ID not numeric",*R,*N;
          ENDIF
          MOVE      AIPSEGMT,ERRORSEG
          MOVE      "2",ERRORFLD
          MOVE      "Set ID not numeric",ERRORTXT
          CALL      EROR0000
.
.         Personnel Resource ID
.
VAIP2000  MOVELPTR  AIP003,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VAIP2500                   * yes - error
          ENDIF
          MATCH     AIP003,SP100                 * no, is it blank ?
          GOTO      VAIP3000 IF NOT EQUAL        * no
.
VAIP2500  IF        DISPFLAG = 1
            DISPLAY   "AIP.3 - Personnel Resource ID not present",*R,*N;
          ENDIF
          MOVE      AIPSEGMT,ERRORSEG
          MOVE      "3",ERRORFLD
          MOVE      "Personnel Resource ID not present",ERRORTXT
          CALL      EROR0000
.
.         Resource Role
.
VAIP3000  MOVELPTR  AIP004,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VAIP3500                   * yes - error
          ENDIF
          MATCH     AIP004,SP100                 * no, is it blank ?
          GOTO      VAIP9999 IF NOT EQUAL        * no
.
VAIP3500  IF        DISPFLAG = 1
            DISPLAY   "AIP.4 - Resource Role not present",*R,*N;
          ENDIF
          MOVE      AIPSEGMT,ERRORSEG
          MOVE      "4",ERRORFLD
          MOVE      "Resource Role not present",ERRORTXT
          CALL      EROR0000
.
VAIP9999  RETURN
+
.*****************************************************************************
.*                            VRF10000             Called by:                *
.*      Validate that the mandatory RF1 fields are not null or spaces        *
.*****************************************************************************
.
.         Referral Category
.         Valid values are "R" (for A/H Referrals) and "W" (Waiting List).
.
VRF10000  MOVELPTR  RF1005,FORM3                 * Referral category populated ?
          IF        FORM3 = 0
            GOTO      VRF10500                   * no - error
          ENDIF
.
          MATCH     RF1005,SP100                 * Referral category populated ?
          GOTO      VRF10500 IF EQUAL            * no - error
.
          MATCH     ANSW,RF1005                  * W/L referral ?
          IF        !@EQUAL
            MATCH     ANSR,RF1005                * no - A/H referral ?
            IF        !@EQUAL
              IF        DISPFLAG = 1
                DISPLAY   "RF1.5 - Referral Catgeory not valid":
                          *R,*N;
              ENDIF
              MOVE      RF1SEGMT,ERRORSEG
              MOVE      "5",ERRORFLD
              MOVE      "Referral Category not valid",ERRORTXT
              CALL      EROR0000
              GOTO      VRF19999
            ENDIF
          ENDIF
.
          GOTO      VRF10600
.
VRF10500  IF        DISPFLAG = 1
            DISPLAY   "RF1.5 - Referral Catgeory not present":
                      *R,*N;
          ENDIF
          MOVE      RF1SEGMT,ERRORSEG
          MOVE      "5",ERRORFLD
          MOVE      "Referral Category not present",ERRORTXT
          CALL      EROR0000
          GOTO      VRF19999
.
.         Originating Referral Identifier
.         Validation only required for referral category = R (A/H)
.
VRF10600  MATCH     ANSW,RF1005                  * W/L message ?
          GOTO      VRF19999 IF EQUAL            * yes - finished
.
          MOVELPTR  RF1006,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VRF11000                   * yes - error
          ENDIF
.
          MATCH     RF1006,SP100                 * no, is it blank ?
          GOTO      VRF19999 IF NOT EQUAL        * no
.
VRF11000  IF        DISPFLAG = 1
            DISPLAY   "RF1.6 - Originating Referral Identifier not present":
                      *R,*N;
          ENDIF
          MOVE      RF1SEGMT,ERRORSEG
          MOVE      "6",ERRORFLD
          MOVE      "Originating Referral Identifier not present",ERRORTXT
          CALL      EROR0000
.
VRF19999  RETURN
+
.*****************************************************************************
.*                            VPRD0000             Called by:                *
.*      Validate that the mandatory PRD fields are not null or spaces        *
.*****************************************************************************
.
.         Provider Role
.
VPRD0000  MOVELPTR  PRD001,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VPRD0500                   * yes - error
          ENDIF
          MATCH     PRD001,SP100                 * no, is it blank ?
          GOTO      VPRD9999 IF NOT EQUAL        * no
.
VPRD0500  IF        DISPFLAG = 1
            DISPLAY   "PRD.1 - Provider Role not present":
                      *R,*N;
          ENDIF
          MOVE      PRDSEGMT,ERRORSEG
          MOVE      "1",ERRORFLD
          MOVE      "Originating Referral Identifier not present",ERRORTXT
          CALL      EROR0000
.
VPRD9999  RETURN
+
.*****************************************************************************
.*                            VPR10000             Called by:                *
.*      Validate that the mandatory PR1 fields are not null or spaces        *
.*****************************************************************************
.
.         Set ID
.
VPR10000  MOVELPTR  PR1001,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VPR10500                   * yes - error
          ENDIF
          MATCH     PR1001,SP100                 * no, is it blank ?
          GOTO      VPR11000 IF NOT EQUAL        * no
.
VPR10500  IF        DISPFLAG = 1
            DISPLAY   "PR1.1 - Set ID not present":
                      *R,*N;
          ENDIF
          MOVE      PR1SEGMT,ERRORSEG
          MOVE      "1",ERRORFLD
          MOVE      "Set ID not present",ERRORTXT
          CALL      EROR0000
.
.         Procedure Code
.
VPR11000  MOVELPTR  PR1003,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VPR11500                   * yes - error
          ENDIF
          MATCH     PR1003,SP100                 * no, is it blank ?
          GOTO      VPR12000 IF NOT EQUAL        * no
.
VPR11500  IF        DISPFLAG = 1
            DISPLAY   "PR1.3 - Procedure Code not present":
                      *R,*N;
          ENDIF
          MOVE      PR1SEGMT,ERRORSEG
          MOVE      "3",ERRORFLD
          MOVE      "Procedure Code not present",ERRORTXT
          CALL      EROR0000
.
.         Procedure Date/Time
.
VPR12000  MOVELPTR  PR1005,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VPR12500                   * yes - error
          ENDIF
          MATCH     PR1005,SP100                 * no, is it blank ?
          GOTO      VPR13000 IF NOT EQUAL        * no
.
VPR12500  IF        DISPFLAG = 1
            DISPLAY   "PR1.5 - Procedure Date/Time not present":
                      *R,*N;
          ENDIF
          MOVE      PR1SEGMT,ERRORSEG
          MOVE      "5",ERRORFLD
          MOVE      "Procedure Date/Time not present",ERRORTXT
          CALL      EROR0000
.
.         Procedure Date/Time
.
VPR13000  MOVELPTR  PR1006,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VPR13500                   * yes - error
          ENDIF
          MATCH     PR1006,SP100                 * no, is it blank ?
          GOTO      VPR19999 IF NOT EQUAL        * no
.
VPR13500  IF        DISPFLAG = 1
            DISPLAY   "PR1.6 - Procedure Functional Type not present":
                      *R,*N;
          ENDIF
          MOVE      PR1SEGMT,ERRORSEG
          MOVE      "6",ERRORFLD
          MOVE      "Procedure Functional Type not present",ERRORTXT
          CALL      EROR0000
.
VPR19999  RETURN
+
.*****************************************************************************
.*                            VZAL0000             Called by:                *
.*      Validate that the mandatory ZAL fields are not null or spaces        *
.*****************************************************************************
.
.         Set ID
.
VZAL0000  MOVELPTR  ZAL001,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VZAL0500                   * yes - error
          ENDIF
          MATCH     ZAL001,SP100                 * no, is it blank ?
          GOTO      VZAL1000 IF NOT EQUAL        * no
.
VZAL0500  IF        DISPFLAG = 1
            DISPLAY   "ZAL.1 - Set ID not present":
                      *R,*N;
          ENDIF
          MOVE      ZALSEGMT,ERRORSEG
          MOVE      "1",ERRORFLD
          MOVE      "Set ID not present",ERRORTXT
          CALL      EROR0000
.
.         Alert Category
.
VZAL1000  MOVELPTR  ZAL002,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VZAL1500                   * yes - error
          ENDIF
          MATCH     ZAL002,SP100                 * no, is it blank ?
          GOTO      VZAL2000 IF NOT EQUAL        * no
.
VZAL1500  IF        DISPFLAG = 1
            DISPLAY   "ZAL.2 - Alert category not present":
                      *R,*N;
          ENDIF
          MOVE      ZALSEGMT,ERRORSEG
          MOVE      "2",ERRORFLD
          MOVE      "Alert Category not present",ERRORTXT
          CALL      EROR0000
.
.         Alert Code
.
VZAL2000  MOVELPTR  ZAL003,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VZAL2500                   * yes - error
          ENDIF
          MATCH     ZAL003,SP100                 * no, is it blank ?
          GOTO      VZAL3000 IF NOT EQUAL        * no
.
VZAL2500  IF        DISPFLAG = 1
            DISPLAY   "ZAL.3 - Alert code not present":
                      *R,*N;
          ENDIF
          MOVE      ZALSEGMT,ERRORSEG
          MOVE      "3",ERRORFLD
          MOVE      "Alert Code not present",ERRORTXT
          CALL      EROR0000
.
.         Alert Date
.
VZAL3000  MOVELPTR  ZAL005,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VZAL3500                   * yes - error
          ENDIF
          MATCH     ZAL005,SP100                 * no, is it blank ?
          GOTO      VZAL4000 IF NOT EQUAL        * no
.
VZAL3500  IF        DISPFLAG = 1
            DISPLAY   "ZAL.5 - Alert Date not present":
                      *R,*N;
          ENDIF
          MOVE      ZALSEGMT,ERRORSEG
          MOVE      "5",ERRORFLD
          MOVE      "Alert Date not present",ERRORTXT
          CALL      EROR0000
.
.         Last Update Date/Time
.
VZAL4000  BRANCH    PTCNNHII,VZAL5000            * using NHI interface
.
          MOVELPTR  ZAL011,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VZAL4500                   * yes - error
          ENDIF
          MATCH     ZAL011,SP100                 * no, is it blank ?
          GOTO      VZAL5000 IF NOT EQUAL        * no
.
VZAL4500  IF        DISPFLAG = 1
            DISPLAY   "ZAL.11 - Last Update Date/Time not present",*R,*N;
          ENDIF
          MOVE      ZALSEGMT,ERRORSEG
          MOVE      "11",ERRORFLD
          MOVE      "Last Update Date/Time not present",ERRORTXT
          CALL      EROR0000
.
.         Last Update user ID
.
VZAL5000  BRANCH    PTCNNHII,VZAL6000            * using NHI interface
.
          MOVELPTR  ZAL012,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VZAL5500                   * yes - error
          ENDIF
          MATCH     ZAL012,SP100                 * no, is it blank ?
          GOTO      VZAL6000 IF NOT EQUAL        * no
.
VZAL5500  IF        DISPFLAG = 1
            DISPLAY   "ZAL.12 - Last Update User not present",*R,*N;
          ENDIF
          MOVE      ZALSEGMT,ERRORSEG
          MOVE      "12",ERRORFLD
          MOVE      "Last Update User not present",ERRORTXT
          CALL      EROR0000
.
.         Hospital Id
.
VZAL6000  MOVELPTR  ZAL013,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VZAL6500                   * yes - error
          ENDIF
          MATCH     ZAL013,SP100                 * no, is it blank ?
          GOTO      VZAL9999 IF NOT EQUAL        * no
.
VZAL6500  IF        DISPFLAG = 1
            DISPLAY   "ZAL.13 - Hospital not present",*R,*N;
          ENDIF
          MOVE      ZALSEGMT,ERRORSEG
          MOVE      "13",ERRORFLD
          MOVE      "Hospital not present",ERRORTXT
          CALL      EROR0000
.
VZAL9999  RETURN
+
.*****************************************************************************
.*                            VZXP0000             Called by:                *
.*      Validate that the mandatory ZXP fields are not null or spaces        *
.*****************************************************************************
.
.         There are no mandatory fields in the ZXP segment
.
VZXP0000  
.
VZXP9999  RETURN
+
.*****************************************************************************
.*                            VZSD0000             Called by:                *
.*      Validate that the mandatory ZSD fields are not null or spaces        *
.*****************************************************************************
.
.         There are no mandatory fields in the ZSD segment
.
VZSD0000  
.
VZSD9999  RETURN
+
.*****************************************************************************
.*                            VZCT0000             Called by:                *
.*      Validate that the mandatory ZCT fields are not null or spaces        *
.*****************************************************************************
.
.         There are no mandatory fields in the ZCT segment
.
VZCT0000  
.
VZCT9999  RETURN
+
.*****************************************************************************
.*                            VZLH0000             Called by:                *
.*      Validate that the mandatory ZLH fields are not null or spaces        *
.*****************************************************************************
.
.         There are no mandatory fields in the ZLH segment
.
VZLH0000  
.
VZLH9999  RETURN
+
.*****************************************************************************
.*                            VZLU0000             Called by:                *
.*      Validate that the mandatory ZLU fields are not null or spaces        *
.*****************************************************************************
.
.         There are no mandatory fields in the ZLU segment
.
VZLU0000  
.
VZLU9999  RETURN
+
.*****************************************************************************
.*                            VZCM0000             Called by:                *
.*      Validate that the mandatory ZCM fields are not null or spaces        *
.*****************************************************************************
.
.         There are no mandatory fields in the ZCM segment
.
VZCM0000  
.
VZCM9999  RETURN
+
.*****************************************************************************
.*                            VZXV0000             Called by:                *
.*      Validate that the mandatory ZXV fields are not null or spaces        *
.*****************************************************************************
.
.         There are no mandatory fields in the ZXV segment
.
VZXV0000  
.
VZXV9999  RETURN
+
.*****************************************************************************
.*                            VGT10000             Called by:                *
.*      Validate that the mandatory GT1 fields are not null or spaces        *
.*****************************************************************************
.
.         There are no mandatory fields in the GT1 segment
.
VGT10000  
.
VGT19999  RETURN
+
.*****************************************************************************
.*                            VZLS0000             Called by:                *
.*      Validate that the mandatory ZLS fields are not null or spaces        *
.*****************************************************************************
.
.         There are no mandatory fields in the ZLS segment
.
VZLS0000  
.
VZLS9999  RETURN
+
.*****************************************************************************
.*                            VZBR0000             Called by:                *
.*      Validate that the mandatory ZBR fields are not null or spaces        *
.*****************************************************************************
.
.         There are no mandatory fields in the ZBR segment
.
VZBR0000  
.
VZBR9999  RETURN
+
.*****************************************************************************
.*                            VQRD0000             Called by:                *
.*      Validate that the mandatory QRD fields are not null or spaces        *
.*****************************************************************************
.
.         QRD.1 (Query Date/Time)
.
VQRD0000  MOVELPTR  QRD001,FORM3                 * populated ?
          IF        FORM3 = 0
            GOTO      VQRD0500                   * no - error
          ENDIF
          MATCH     QRD001,SP100                 * yes, is it blank ?
          GOTO      VQRD1000 IF NOT EQUAL        * no
.
VQRD0500  IF        DISPFLAG = 1
            DISPLAY   "QRD.1 - Query Date/Time not present",*R,*N;
          ENDIF
          MOVE      QRDSEGMT,ERRORSEG
          MOVE      "1",ERRORFLD
          MOVE      "Query Date/Time not present",ERRORTXT
          CALL      EROR0000
.
.         QRD.2 (Query Format Code)
.
VQRD1000  MOVELPTR  QRD002,FORM3                 * populated ?
          IF        FORM3 = 0
            GOTO      VQRD1500                   * no - error
          ENDIF
          MATCH     QRD002,SP100                 * yes, is it blank ?
          GOTO      VQRD1700 IF NOT EQUAL        * no
.
VQRD1500  IF        DISPFLAG = 1
            DISPLAY   "QRD.2 - Query Format Code not present",*R,*N;
          ENDIF
          MOVE      QRDSEGMT,ERRORSEG
          MOVE      "2",ERRORFLD
          MOVE      "Query Fornmat Code not present",ERRORTXT
          CALL      EROR0000
.
VQRD1700  IF        FORM3 > 1
            IF        DISPFLAG = 1
              DISPLAY   "QRD.2 - Query Format Code has too many characters":
                        *R,*N;
            ENDIF
.
            MOVE      QRDSEGMT,ERRORSEG
            MOVE      "2",ERRORFLD
            MOVE      "Query Format Code has too many characters",ERRORTXT
            CALL      EROR0000
          ENDIF
.
          MATCH     ANSR,QRD002
          IF        !@EQUAL
            IF        DISPFLAG = 1
              DISPLAY   "QRD.2 - Query Format Code must be R",*R,*N;
            ENDIF
.
            MOVE      QRDSEGMT,ERRORSEG
            MOVE      "2",ERRORFLD
            MOVE      "Query Format Code must be R",ERRORTXT
            CALL      EROR0000
          ENDIF
.
.         QRD.3 (Query Priority)
.
VQRD2000  MOVELPTR  QRD003,FORM3                 * populated ?
          IF        FORM3 = 0
            GOTO      VQRD2500                   * no - error
          ENDIF
          MATCH     QRD003,SP100                 * yes, is it blank ?
          GOTO      VQRD2700 IF NOT EQUAL        * no
.
VQRD2500  IF        DISPFLAG = 1
            DISPLAY   "QRD.3 - Query Priority not present",*R,*N;
          ENDIF
.
          MOVE      QRDSEGMT,ERRORSEG
          MOVE      "3",ERRORFLD
          MOVE      "Query Priority not present",ERRORTXT
          CALL      EROR0000
.
VQRD2700  IF        FORM3 > 1
            IF        DISPFLAG = 1
              DISPLAY   "QRD.3 - Query Priority has too many characters",*R,*N;
            ENDIF
.
            MOVE      QRDSEGMT,ERRORSEG
            MOVE      "3",ERRORFLD
            MOVE      "Query Priority has too many characters",ERRORTXT
            CALL      EROR0000
          ENDIF
.
          MATCH     ANSI,QRD003
          IF        !@EQUAL
            IF        DISPFLAG = 1
              DISPLAY   "QRD.3 - Query Priority Code must be I",*R,*N;
            ENDIF
.
            MOVE      QRDSEGMT,ERRORSEG
            MOVE      "3",ERRORFLD
            MOVE      "Query Priority Code must be I",ERRORTXT
            CALL      EROR0000
          ENDIF
.
.         QRD.4 (Query ID)
.
VQRD3000  MOVELPTR  QRD004,FORM3                 * populated ?
          IF        FORM3 = 0
            GOTO      VQRD3500                   * no - error
          ENDIF
          MATCH     QRD004,SP100                 * yes, is it blank ?
          GOTO      VQRD4000 IF NOT EQUAL        * no
.
VQRD3500  IF        DISPFLAG = 1
            DISPLAY   "QRD.4 - Query ID not present",*R,*N;
          ENDIF
.
          MOVE      QRDSEGMT,ERRORSEG
          MOVE      "4",ERRORFLD
          MOVE      "Query ID not present",ERRORTXT
          CALL      EROR0000
.
.         QRD.7 (Quantity Limited Request)
.
VQRD4000  MOVELPTR  QRD007,FORM3                 * populated ?
          IF        FORM3 = 0
            GOTO      VQRD4500                   * no - error
          ENDIF
          MATCH     QRD007,SP100                 * yes, is it blank ?
          GOTO      VQRD4700 IF NOT EQUAL        * no
.
VQRD4500  IF        DISPFLAG = 1
            DISPLAY   "QRD.7 - Quantity Limited Request not present",*R,*N;
          ENDIF
.
          MOVE      QRDSEGMT,ERRORSEG
          MOVE      "7",ERRORFLD
          MOVE      "Quantity Limited Request not present",ERRORTXT
          CALL      EROR0000
.
.         There should be two components in this field:
.          - a numeric value for the number of records
.          - a string value with "RD" (Records)
.
VQRD4700  SCAN      CARET,QRD007
          IF        !@EQUAL
            IF        DISPFLAG = 1
              DISPLAY   "QRD.7 - Query Limited Request must have two populated components",*R,*N;
            ENDIF
.
            MOVE      QRDSEGMT,ERRORSEG
            MOVE      "7",ERRORFLD
            MOVE      "Query Limited Request must have two populated components",ERRORTXT
            CALL      EROR0000
            GOTO      VQRD5000
          ENDIF
.
          UNPACK    QRD007,ANS,QRD00702
          BUMP      QRD007,-1
          LENSET    QRD007
          RESET     QRD007
          MOVELPTR  QRD007,FORM3
          IF        FORM3 > 3
            IF        DISPFLAG = 1
              DISPLAY   "QRD.7 - Quantity Limited Request component 1 has too many records",*R,*N;
            ENDIF
.
            MOVE      QRDSEGMT,ERRORSEG
            MOVE      "7",ERRORFLD
            MOVE      "Quantity Limited Request component 1 has too many records",ERRORTXT
            CALL      EROR0000
            GOTO      VQRD5000
          ENDIF
.
          MOVE      QRD007,QRD00701
          RJUSTIFY  QRD00701
          TYPE      QRD00701
          IF        !@EQUAL
            IF        DISPFLAG = 1
              DISPLAY   "QRD.7 - Quantity Limited Request component 1 is not numeric",*R,*N;
            ENDIF
.
            MOVE      QRDSEGMT,ERRORSEG
            MOVE      "7",ERRORFLD
            MOVE      "Quantity Limited Request component 1 is not numeric",ERRORTXT
            CALL      EROR0000
            GOTO      VQRD5000
          ENDIF
.
          SQUEEZE   QRD00702
          MOVELPTR  QRD00702,FORM3
          IF        FORM3 <> 2
            IF        DISPFLAG = 1
              DISPLAY   "QRD.7 - Quantity Limited Request component 2 must be two characters",*R,*N;
            ENDIF
.
            MOVE      QRDSEGMT,ERRORSEG
            MOVE      "7",ERRORFLD
            MOVE      "Quantity Limited Request component 2 must be two characters",ERRORTXT
            CALL      EROR0000
            GOTO      VQRD5000
          ENDIF
.
          MATCH     "RD",QRD00702
          IF        !@EQUAL
            IF        DISPFLAG = 1
              DISPLAY   "QRD.7 - Query Limited Request component 2 must be RD":
                      *R,*N;
            ENDIF
.
            MOVE      QRDSEGMT,ERRORSEG
            MOVE      "7",ERRORFLD
            MOVE      "Quantity Limited Request component 2 must be RD",ERRORTXT
            CALL      EROR0000
          ENDIF
.
.         QRD.8 (Who Subject Filter)
.
VQRD5000  MOVELPTR  QRD008,FORM3                 * populated ?
          IF        FORM3 = 0
            GOTO      VQRD5500                   * no - error
          ENDIF
          MATCH     QRD008,SP100                 * yes, is it blank ?
          GOTO      VQRD5700 IF NOT EQUAL        * no
.
VQRD5500  IF        DISPFLAG = 1
            DISPLAY   "QRD.8 - Who Subject Filter not present":
                      *R,*N;
          ENDIF
.
          MOVE      QRDSEGMT,ERRORSEG
          MOVE      "8",ERRORFLD
          MOVE      "Who Subject Filter not present",ERRORTXT
          CALL      EROR0000
          GOTO      VQRD5800
.
.         There can be four components in this field:
.          - an Id number (UPI) in component 1
.          - a family name in component 2
.          - a first given name in component 3
.          - a second given name in component 4
.
.         If there is an Id number, then we will be retrieving a single patient
.         record (demographics) for return to the sender.
.         If the Id number is blank, then we should expect search criteria
.         (i.e. name, dob, sex).
.         Load all the data first, then see what fields we have received.
.
VQRD5700  CLEAR     DIM40                        * clear temp variable
          CLEAR     QRD00801                     * clear component variables
          CLEAR     QRD00802
          CLEAR     QRD00803
          CLEAR     QRD00804
.
          MOVELPTR  QRD008,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VQRD5800 IF EQUAL            * no
.
          MOVE      ONE,COUNTER                  * initialise counter
          MOVE      ZERO,EOSFLAG                 * set for not end of string
.
VQRD5750  MOVE      QRD008,ANS                   * load next character
          MATCH     CARET,ANS                    * end of component ?
          IF        !@EQUAL
            APPEND    ANS,DIM40                  * no - load character
            GOTO      VQRD5770
          ENDIF
.
.         The end of component marker has been found, so load the string.
.         If the string is already null, then don't reset as this results
.         in a space being added to the string
.
VQRD5760  MOVELPTR  DIM40,FORM3
          IF        FORM3 <> 0
            RESET     DIM40
          ENDIF
          STORE     DIM40,COUNTER,QRD00801:      * Patient Identifier (UPI)
                                  QRD00802:      * Surname
                                  QRD00803:      * First Given Name
                                  QRD00804       * Second Given Name
.
          COMPARE   FOUR,COUNTER                 * last component loaded ?
          GOTO      VQRD5800 IF EQUAL            * yes - finished
.
          BRANCH    EOSFLAG,VQRD5800             * finished
.
          ADD       ONE,COUNTER                  * increment counter
          CLEAR     DIM40                        * clear temp variable
.
VQRD5770  BUMP      QRD008
          IF        @EOS
            MOVE      ONE,EOSFLAG
            GOTO      VQRD5760
          ENDIF
          GOTO      VQRD5750
.
.         We have loaded all the QRD.8 component fields, so check what was
.         populated.
.         First check if we have a patient identifier (UPI) in component 1
.         and if so, then we dont need to worry about the other components.
.
VQRD5800  MOVELPTR  QRD00801,FORM3
          COMPARE   ZERO,FORM3                   * UPI populated ?
          GOTO      VQRD6000 IF EQUAL            * no
.
          MATCH     SP100,QRD00801               * yes, is it blank ?
          GOTO      VQRD6000 IF EQUAL            * yes
.
          PACK      HL7CONTP,SP100,SP100
          MOVE      TWO,UPISFLAG                 * yes - set flag for retrieve
          MATCH     "APN",QRD009
          IF        @EQUAL
            GOTO      VQRD6000                   * medicare search
          ELSE
            GOTO      VQRD6100                   * UPI retrieve
          ENDIF
.
VQRD6000  MOVE      ZERO,UPISFLAG                * set flag for initial search
.
.         Check if a continuation pointer has been returned and if so,
.         then this is requesting the next page of the same search, so
.         set the search flag accordingly
.
          PACK      HL7CONTP,SP100,SP100
          MOVELPTR  MSH014,FORM3
          COMPARE   ZERO,FORM3                   * populated ?
          GOTO      VQRD6100 IF EQUAL            * no
.
          MATCH     SP100,MSH014                 * yes, is it blank ?
          GOTO      VQRD6100 IF EQUAL            * no
.
          MOVE      ONE,UPISFLAG            * set flag for continuation search
          PACK      HL7CONTP,MSH014,SP100,SP100
.
.         QRD.9 (What Subject Filter)
.         This should be either "APN" (when searching) or "DEM" (when retrieving
.         data for a specific UPI).
.
VQRD6100  MOVELPTR  QRD009,FORM3                 * not populated ?
          IF        FORM3 = 0
            GOTO      VQRD6500                   * yes - error
          ENDIF
          MATCH     QRD009,SP100                 * no, is it blank ?
          GOTO      VQRD6700 IF NOT EQUAL        * no
.
VQRD6500  IF        DISPFLAG = 1
            DISPLAY   "QRD.9 - What Subject Filter not present",*R,*N;
          ENDIF
.
          MOVE      QRDSEGMT,ERRORSEG
          MOVE      "9",ERRORFLD
          MOVE      "What Subject Filter not present",ERRORTXT
          CALL      EROR0000
.
.         There can be three components in this field, the first and third
.         of which need to be populated:
.          - Search type code in component 1
.          - Search type code coding system in component 3
.
VQRD6700  CLEAR     DIM40                        * clear temp variable
          CLEAR     QRD00901                     * clear component variables
          CLEAR     QRD00902
          CLEAR     QRD00903
.
          MOVELPTR  QRD009,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VQRD7000 IF EQUAL            * no
.
          MOVE      ONE,COUNTER                  * initialise counter
          MOVE      ZERO,EOSFLAG                 * set for not end of string
.
VQRD6800  MOVE      QRD009,ANS                   * load next character
          MATCH     CARET,ANS                    * end of component ?
          IF        !@EQUAL
            APPEND    ANS,DIM40                  * no - load character
            GOTO      VQRD6850
          ENDIF
.
.         The end of component marker has been found, so load the string.
.         If the string is already null, then don't reset as this results
.         in a space being added to the string
.
VQRD6820  MOVELPTR  DIM40,FORM3
          IF        FORM3 <> 0
            RESET     DIM40
          ENDIF
          STORE     DIM40,COUNTER,QRD00901:      * Search Type code
                                  QRD00902:      * Description
                                  QRD00903       * Coding System
.
          COMPARE   THREE,COUNTER                * last component loaded ?
          GOTO      VQRD7000 IF EQUAL            * yes - finished
.
          BRANCH    EOSFLAG,VQRD7000             * finished
.
          CLEAR     DIM40
          ADD       ONE,COUNTER
.
VQRD6850  BUMP      QRD009
          IF        @EOS
            MOVE      ONE,EOSFLAG
            GOTO      VQRD6820
          ENDIF
          GOTO      VQRD6800
.
.         We have loaded all the QRD.9 component fields, so check what was
.         populated.
.         First check if we have a search type code in component 1 (APN or
.         DEM).
.
VQRD7000  MOVELPTR  QRD00901,FORM3
          COMPARE   ZERO,FORM3                   * Search type present ?
          GOTO      VQRD7810 IF EQUAL            * no
.
          MATCH     QRD00901,SP100               * yes, is it blank ?
          GOTO      VQRD7820 IF NOT EQUAL        * no
.
VQRD7810  IF        DISPFLAG = 1
            DISPLAY   "QRD.9 - What Subject Filter component 1 not present":
                      *R,*N;
          ENDIF
.
          MOVE      QRDSEGMT,ERRORSEG
          MOVE      "9",ERRORFLD
          MOVE      "What Subject Filter component 1 not present",ERRORTXT
          CALL      EROR0000
.
.         Make sure the type of search (UPISFLAG) matches the search type
.         code
.
VQRD7820  MATCH     "APN",QRD00901               * surname search ?
          IF        @EQUAL
            COMPARE   TWO,UPISFLAG               * are we searching ?
            GOTO      VQRD7900 IF LESS           * yes - valid
            GOTO      VQRD7830                   * no - error
          ENDIF
.
          MATCH     "DEM",QRD00901               * demographic retrieve ?
          IF         @EQUAL
            COMPARE   TWO,UPISFLAG               * are we retrieving ?
            GOTO      VQRD7900 IF EQUAL          * yes - valid
            GOTO      VQRD7830                   * no - error
          ENDIF
.
VQRD7830  IF        DISPFLAG = 1
            DISPLAY   "QRD.9 - What Subject Filter component 1 not consistent":
                      *R,*N;
          ENDIF
.
          MOVE      QRDSEGMT,ERRORSEG
          MOVE      "9",ERRORFLD
          MOVE      "What Subject Filter component 1 not consistent",ERRORTXT
          CALL      EROR0000
.
.         Make sure that component 3 is populated
.
VQRD7900  MOVELPTR  QRD00903,FORM3
          COMPARE   ZERO,FORM3                   * Coding system present ?
          GOTO      VQRD7910 IF EQUAL            * no
          MATCH     QRD00903,SP100               * yes, is it blank ?
          GOTO      VQRD8000 IF NOT EQUAL        * no
.
VQRD7910  IF        DISPFLAG = 1
            DISPLAY   "QRD.9 - What Subject Filter component 3 not present":
                      *R,*N;
          ENDIF
.
          MOVE      QRDSEGMT,ERRORSEG
          MOVE      "9",ERRORFLD
          MOVE      "What Subject Filter component 3 not present",ERRORTXT
          CALL      EROR0000
.
.         QRD.10 (What Department Data Code)
.         This is a mandatory field for HL7, but we will ignore the content
.
VQRD8000  MOVELPTR  QRD010,FORM3                 * not populated ?
          IF        FORM3 = 0
            GOTO      VQRD8500                   * yes - error
          ENDIF
          MATCH     QRD010,SP100                 * no, is it blank ?
          GOTO      VQRD8700 IF NOT EQUAL        * no
.
VQRD8500  IF        DISPFLAG = 1
            DISPLAY   "QRD.10 - What Department Data Code not present":
                      *R,*N;
          ENDIF
.
          MOVE      QRDSEGMT,ERRORSEG
          MOVE      "10",ERRORFLD
          MOVE      "What Department Data Code not present",ERRORTXT
          CALL      EROR0000
.
.         There can be three components in this field, the first and third
.         of which need to be populated:
.          - Department data code in component 1
.          - Department data code coding system in component 3
.
VQRD8700  CLEAR     DIM40                        * clear temp variable
          CLEAR     QRD01001                     * clear component variables
          CLEAR     QRD01002
          CLEAR     QRD01003
.
          MOVELPTR  QRD010,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VQRD9000 IF EQUAL            * no
.
          MOVE      ONE,COUNTER                  * initialise counter
          MOVE      ZERO,EOSFLAG                 * set for not end of string
.
VQRD8800  MOVE      QRD010,ANS                   * load next character
          MATCH     CARET,ANS                    * end of component ?
          IF        !@EQUAL
            APPEND    ANS,DIM40                  * no - load character
            GOTO      VQRD8850
          ENDIF
.
.         The end of component marker has been found, so load the string.
.         If the string is already null, then don't reset as this results
.         in a space being added to the string
.
VQRD8820  MOVELPTR  DIM40,FORM3
          IF        FORM3 <> 0
            RESET     DIM40
          ENDIF
          STORE     DIM40,COUNTER,QRD01001:      * Search Type code
                                  QRD01002:      * Description
                                  QRD01003       * Coding System
.
          COMPARE   THREE,COUNTER                * last component loaded ?
          GOTO      VQRD9000 IF EQUAL            * yes - finished
.
          BRANCH    EOSFLAG,VQRD9000             * finished
.
          CLEAR     DIM40
          ADD       ONE,COUNTER
.
VQRD8850  BUMP      QRD010
          IF        @EOS
            MOVE      ONE,EOSFLAG
            GOTO      VQRD8820
          ENDIF
          GOTO      VQRD8800
.
.         We have loaded all the QRD.10 component fields, so check what was
.         populated.
.         First check if we have a department data code in component 1
.
VQRD9000  MOVELPTR  QRD01001,FORM3
          COMPARE   ZERO,FORM3                   * dept. data code present ?
          GOTO      VQRD9010 IF EQUAL            * no
.
          MATCH     QRD01001,SP100               * yes, is it blank ?
          GOTO      VQRD9020 IF NOT EQUAL        * no
.
VQRD9010  IF        DISPFLAG = 1
            DISPLAY   "QRD.10 - What Department Data Code component 1 not present",*R,*N;
          ENDIF
.
          MOVE      QRDSEGMT,ERRORSEG
          MOVE      "10",ERRORFLD
          MOVE      "What Department Data Code component 1 not present",ERRORTXT
          CALL      EROR0000
.
.         Make sure that component 3 is populated
.
VQRD9020  MOVELPTR  QRD01003,FORM3
          COMPARE   ZERO,FORM3                   * Coding system present ?
          GOTO      VQRD9030 IF EQUAL            * no
.
          MATCH     QRD01003,SP100               * yes, is it blank ?
          GOTO      VQRD9999 IF NOT EQUAL        * no
.
VQRD9030  IF        DISPFLAG = 1
            DISPLAY   "QRD.10 - What Department Data Code component 3 not present",*R,*N;
          ENDIF
.
          MOVE      QRDSEGMT,ERRORSEG
          MOVE      "10",ERRORFLD
          MOVE      "What Department Data Code component 3 not present",ERRORTXT
          CALL      EROR0000
.
VQRD9999  RETURN
+
.*****************************************************************************
.*                            VQRF0000             Called by:                *
.*             Validate the QRF fields (if populated)                        *
.*****************************************************************************
.
.         QRF.1 (Where Subject Filter)
.               HL7 mandatory field not used by NSLHD
.
VQRF0000  MOVELPTR  QRF001,FORM3                 * populated ?
          IF        FORM3 = 0
            GOTO      VQRF0500                   * no - error
          ENDIF
          MATCH     QRF001,SP100                 * yes, is it blank ?
          GOTO      VQRF1000 IF NOT EQUAL        * no
.
VQRF0500  IF        DISPFLAG = 1
            DISPLAY   "QRF.1 - Where Subject Filter not present",*R,*N;
          ENDIF
          MOVE      QRFSEGMT,ERRORSEG
          MOVE      "1",ERRORFLD
          MOVE      "Where Subject Filter not present",ERRORTXT
          CALL      EROR0000
.
.         QRF.4 (What User Qualifier)
.               Optional field for NSLHD
.               This is a repeating field and for NSLHD, the following applies:
.                - first field occurrence is Sex
.                - second field occurence is Date of Birth
.
VQRF1000  CLEAR     DIM40                        * clear temp variable
          CLEAR     QRF00401                     * clear repeating variables
          CLEAR     QRF00402
.
          MOVELPTR  QRF004,FORM3
          COMPARE   ZERO,FORM3                   * field populated ?
          GOTO      VQRF9000 IF EQUAL            * no
.
          MOVE      ONE,COUNTER                  * initialise counter
          MOVE      ZERO,EOSFLAG                 * set for not end of string
.
VQRF2000  MOVE      QRF004,ANS                   * load next character
          MATCH     TILDA,ANS                    * end of repeat ?
          IF        !@EQUAL
            APPEND    ANS,DIM40                  * no - load character
            GOTO      VQRF2050
          ENDIF
.
.         The end of repeat marker has been found, so load the string.
.         If the string is already null, then don't reset as this results
.         in a space being added to the string
.
VQRF2020  MOVELPTR  DIM40,FORM3
          IF        FORM3 <> 0
            RESET     DIM40
          ENDIF
          STORE     DIM40,COUNTER,QRF00401:      * sex
                                  QRF00402       * dob
.
          COMPARE   TWO,COUNTER                  * last repeat loaded ?
          GOTO      VQRF5000 IF EQUAL            * yes - finished
.
          BRANCH    EOSFLAG,VQRF5000             * finished
.
          CLEAR     DIM40
          ADD       ONE,COUNTER
.
VQRF2050  BUMP      QRF004
          IF        @EOS
            MOVE      ONE,EOSFLAG
            GOTO      VQRF2020
          ENDIF
          GOTO      VQRF2000
.
.         We have loaded all the QRF.4 component fields, so check what
.         (if anything) was populated.
.
VQRF5000  MOVELPTR  QRF00401,FORM3
          COMPARE   ZERO,FORM3                   * sex present ?
          GOTO      VQRF6000 IF EQUAL            * no
.
          MATCH     QRF00401,SP100               * yes, is it blank ?
          GOTO      VQRF6000 IF EQUAL            * yes
.
.         We have a sex value, so validate it against HL7 values
.           - M = Male
.           - F = Female
.           - A = Amiguous
.           - O = Other
.           - U = Unknown
.
          IF        FORM3 > 1
            IF        DISPFLAG = 1
              DISPLAY   "QRF.4 - Sex has too many characters",*R,*N;
            ENDIF
.
            MOVE      QRFSEGMT,ERRORSEG
            MOVE      "4",ERRORFLD
            MOVE      "Sex has too many characters",ERRORTXT
            CALL      EROR0000
            GOTO      VQRF5000
          ENDIF
.
          REP       UPPLOW,QRF00401              * convert to uppercase
          MATCH     ANSM,QRF00401                * male ?
          GOTO      VQRF6000 IF EQUAL            * yes - valid
.
          MATCH     ANSF,QRF00401                * female ?
          GOTO      VQRF6000 IF EQUAL            * yes - valid
.
          MATCH     ANSA,QRF00401                * ambiguous ?
          GOTO      VQRF6000 IF EQUAL            * yes - valid
.
          MATCH     ANSO,QRF00401                * other ?
          GOTO      VQRF6000 IF EQUAL            * yes - valid
.
          MATCH     ANSU,QRF00401                * unknown ?
          GOTO      VQRF6000 IF EQUAL            * yes - valid
.
          IF        DISPFLAG = 1
            DISPLAY   "QRF.4 - Sex has too many characters",*R,*N;
          ENDIF
.
          MOVE      QRFSEGMT,ERRORSEG
          MOVE      "4",ERRORFLD
          MOVE      "Sex has too many characters",ERRORTXT
          CALL      EROR0000
.
VQRF6000  MOVELPTR  QRF00402,FORM3
          COMPARE   ZERO,FORM3                   * sex present ?
          GOTO      VQRF9000 IF EQUAL            * no
.
          MATCH     QRF00402,SP100               * yes, is it blank ?
          GOTO      VQRF9000 IF EQUAL            * yes
.
.         We have a date of birth value, so validate it
.
          IF        FORM3 <> 8
            IF        DISPFLAG = 1
              DISPLAY   "QRF.4 - DoB has incorrect number of characters",*R,*N;
            ENDIF
.
            MOVE      QRFSEGMT,ERRORSEG
            MOVE      "4",ERRORFLD
            MOVE      "DoB has incorrect number of characters",ERRORTXT
            CALL      EROR0000
            GOTO      VQRF9999
          ENDIF
.
          TYPE      QRF00402
          IF        !@EQUAL
            IF        DISPFLAG = 1
              DISPLAY   "QRF.4 - DoB is not numeric",*R,*N;
            ENDIF
.
            MOVE      QRFSEGMT,ERRORSEG
            MOVE      "4",ERRORFLD
            MOVE      "DoB is not numeric",ERRORTXT
            CALL      EROR0000
            GOTO      VQRF9999
          ENDIF
.
          UNPACK    QRF00402,DIM2C,DIM2Y,DIM2M,DIM2D
.
.         Validate the century is >= 18 for the patient date of birth field,
.         otherwise, for all other fields, the century should be >= 19.
.
          MOVE      DIM2C,FORM2
          IF        FORM2 < 18
            IF        DISPFLAG = 1
              DISPLAY   "QRF.4 - DoB century is not valid",*R,*N;
            ENDIF
.
            MOVE      QRFSEGMT,ERRORSEG
            MOVE      "4",ERRORFLD
            MOVE      "DoB century is not valid",ERRORTXT
            CALL      EROR0000
          ENDIF
.
.         Validate the month
.
          MOVE      DIM2M,FORM2
          IF        FORM2 < 1 | FORM2 > 12
            IF        DISPFLAG = 1
              DISPLAY   "QRF.4 - DoB month is not valid",*R,*N;
            ENDIF
.
            MOVE      QRFSEGMT,ERRORSEG
            MOVE      "4",ERRORFLD
            MOVE      "DoB month is not valid",ERRORTXT
            CALL      EROR0000
          ENDIF
.
.         Validate the day is:
.              < 32 for January, March, May, July, August, October & December
.              < 31 for April, June, September & November
.              < 29 for February, except in a leap year where it is < 30
.
          BRANCH    FORM2,VQRF6100:              * Jan
                          VQRF6300:              * Feb
                          VQRF6100:              * Mar
                          VQRF6200:              * Apr
                          VQRF6100:              * May
                          VQRF6200:              * Jun
                          VQRF6100:              * Jul
                          VQRF6100:              * Aug
                          VQRF6200:              * Sep
                          VQRF6100:              * Oct
                          VQRF6200:              * Nov
                          VQRF6100               * Dec
.
.         Validate days for month of 31 days
.
VQRF6100  MOVE      DIM2D,FORM2
          IF        FORM2 < 1 | FORM2 > 31
            GOTO      VQRF6900
          ENDIF
          GOTO      VQRF7000
.
.         Validate days for month of 30 days
.
VQRF6200  MOVE      DIM2D,FORM2
          IF        FORM2 < 1 | FORM2 > 30
            GOTO      VQRF6900
          ENDIF
          GOTO      VQRF7000
.
.         Validate days for February
.         A leap year is one where:
.           1. Every year divisible by 4 is a leap year.
.           2. But every year divisible by 100 is NOT a leap year
.           3. Unless the year is also divisible by 400, then it is still a
.              leap year.
.
VQRF6300  PACK      DIM4,DIM2C,DIM2Y
          MOVE      DIM4,FORM4
          IF        (FORM4%4) = 0
            IF        (FORM4%100) = 0
              IF        (FORM4%400) = 0
                GOTO      VQRF6310
              ENDIF
            ELSE
              GOTO      VQRF6310
            ENDIF
          ENDIF
.
.         Check for normal Feb days
.
          MOVE      DIM2D,FORM2
          IF        FORM2 < 1 | FORM2 > 28
            GOTO      VQRF6900
          ENDIF
          GOTO      VQRF7000
.
.         Check for leap year Feb days
.
VQRF6310  MOVE      DIM2D,FORM2
          IF        FORM2 < 1 | FORM2 > 29
            GOTO      VQRF6900
          ENDIF
          GOTO      VQRF7000
.
VQRF6900  IF        DISPFLAG = 1
            DISPLAY   "QRF.4 - DoB day is not valid for month",*R,*N;
          ENDIF
.
          MOVE      QRFSEGMT,ERRORSEG
          MOVE      "4",ERRORFLD
          MOVE      "DoB day is not valid for month",ERRORTXT
          CALL      EROR0000
          GOTO      VQRF9999
.
VQRF7000  CALL      IBACLOCK
          PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
          MATCH     QRF00402,CURRDATE
          IF        @LESS
            IF        DISPFLAG = 1
              DISPLAY   "QRF.4 - DoB cannot be in the future",*R,*N;
            ENDIF
.
            MOVE      QRFSEGMT,ERRORSEG
            MOVE      "4",ERRORFLD
            MOVE      "DoB cannot be in the future",ERRORTXT
            CALL      EROR0000
            GOTO      VQRF9999
          ENDIF
.
.         Make sure at least one search field from surname, first given
.         name and date of birth has been sent
.
VQRF9000  IF        UPISFLAG = 2
            GOTO      VQRF9999                   * not required for UPI retrieve
          ENDIF
          MOVELPTR  QRD00802,FORM3
          COMPARE   ZERO,FORM3                   * surname present ?
          GOTO      VQRF9999 IF NOT EQUAL        * yes
.
          MOVELPTR  QRD00803,FORM3
          COMPARE   ZERO,FORM3                   * first given name present ?
          GOTO      VQRF9999 IF NOT EQUAL        * yes
.
          MOVELPTR  QRF00402,FORM3
          COMPARE   ZERO,FORM3                   * DoB present ?
          GOTO      VQRF9999 IF NOT EQUAL        * yes
.
          IF        DISPFLAG = 1
            DISPLAY   "QRF.4 - Either Surname, First Given Name or DoB must be populated",*R,*N;
          ENDIF
.
          MOVE      QRFSEGMT,ERRORSEG
          MOVE      "4",ERRORFLD
          MOVE      "Either Surname, First Given Name or DoB must be populated",ERRORTXT
          CALL      EROR0000
          GOTO      VQRF9999
.
VQRF9999  RETURN
+
.*****************************************************************************
.*                       VTYP0000                  Called by:                *
.*    Check if the message type (from MSH009) is one we are able to process  *
.* Requires:  MESSTYPE - 3 character message type (eg A01)                   *
.*****************************************************************************
.
VTYP0000  MOVE      ZERO,COUNTER                 * initialise counter
          MOVE      ZERO,CISMNUMB                * initialse message no.
          WHILE     COUNTER < 27
            ADD       ONE,COUNTER                * increment counter
            MATCH     MESSTYPE,MTYPARRY[COUNTER]A
            IF        @EQUAL
              MOVE      COUNTER,CISMNUMB
              GOTO      VTYP9999
            ENDIF
          DO
.
          IF        DISPFLAG = 1
            DISPLAY   "MSH.9 - Message Type not available",*R,*N;
          ENDIF
          MOVE      MSHSEGMT,ERRORSEG
          MOVE      "9",ERRORFLD
          MOVE      "Message Type not available",ERRORTXT
          CALL      EROR0000
.
VTYP9999  RETURN
+
.*****************************************************************************
.*                            EROR0000                                       *
.*                       Process an error                                    *
.* Requires:  ERRORSEG - error segment                                       *
.*            ERRORFLD - error field sequence number                         *
.* Returns:   ERORFLAG  1 = error occurred                                   *
.*****************************************************************************
.
EROR0000  ADD       ONE,ERRORCNT                 * increment error count
.
.         If this is the first error, save the error segment/field to 
.         send back in the ERR segment of the acknowledgment
.
          IF        ERRORCNT = 1
            MOVE      ERRORSEG,SAVSEGMT          * save segment
            MOVE      ERRORFLD,SAVFIELD          * save field
            MOVE      ERRORTXT,SAVERTXT          * save field
          ENDIF
.
          MOVE      ONE,ERORFLAG                 * set error flag
.
EROR9999  RETURN
+
.*****************************************************************************
.*                                  GSEG0000       Called by:                *
.*                        Get the next segment code                          *
.* This routine is called when we are expecting the next segment.  It will   *
.* get the next 3 characters in the message and use this as the segment id.  *
.*                                                                           *
.* Returns: EXIT   0 = segment id read                                       *
.*                 1 = connection timed out                                  *
.*                 2 = connection lost                                       *
.*                 3 = start of block found                                  *
.*                 4 = end of block found                                    *
.*                 5 = end of segment found (CR)                             *
.*          SEGMENT = 3 character HL7 segment id (eg MSH)                    *
.*****************************************************************************
.
GSEG0000  CLEAR     SEGMENT
          MOVE      ZERO,COUNTER                 * initialise character counter
          WHILE     COUNTER < 3
            BUMP      TMPSTRNG                   * move to next character
            IF        @EOS
              CALL      GTSTR000                 * get next 4000 chars (or less)
              BRANCH    EXIT,GSEG9100:           * timeout
                             GSEG9200            * connection lost
            ENDIF
            MOVE      TMPSTRNG,ANS               * save character
.
            MATCH     CRETURN,ANS                * carriage return found ?
            GOTO      GSEG9500 IF EQUAL          * yes - ignore message
.
            MATCH     ENDBLOCK,ANS               * end of block found ?
            GOTO      GSEG9400 IF EQUAL          * yes - ignore message
.
            MATCH     STRTBLOK,ANS               * start of block found ?
            GOTO      GSEG9300 IF EQUAL          * yes - ignore message
.
            APPEND    ANS,SEGMENT                * load segment id
            ADD       ONE,COUNTER                * increment counter
          DO
.
          RESET     SEGMENT
          APPEND    SEGMENT,SEGSTRNG
.
          MOVE      ZERO,EXIT
          GOTO      GSEG9999
.
GSEG9100  MOVE      ONE,EXIT
          GOTO      GSEG9999
.
GSEG9200  MOVE      TWO,EXIT
          GOTO      GSEG9999
.
GSEG9300  MOVE      THREE,EXIT
          GOTO      GSEG9999
.
GSEG9400  MOVE      FOUR,EXIT
          GOTO      GSEG9999
.
GSEG9500  MOVE      FIVE,EXIT
.
GSEG9999  RETURN
+
.*****************************************************************************
.*                          GCHR0000               Called by:                *
.*                 Get the next character in the message string              *
.* Returns:  EXIT  0 = ok to continue                                        *
.*                 1 = connection timeout                                    *
.*                 2 = connection lost                                       *
.*                 3 = start of block                                        *
.*                 4 = end of block                                          *
.*                 5 = end of segment (CR)                                   *
.*                 6 = field separator blank (MSH-MS001 only)                *
.*           ANS  - character just read in                                   *
.*****************************************************************************
.
GCHR0000  BUMP      TMPSTRNG                     * move to next field
          IF        @EOS
            CALL      GTSTR000                   * get next 4000 chars (or less)
            BRANCH    EXIT,GCHR9100:             * timeout
                           GCHR9200              * connection lost
          ENDIF
.
          MOVE      TMPSTRNG,ANS                 * save character
.
.         If this is the first field of the MSH segment, then we need to
.         load the field separator.
.
          MATCH     MSHSEGMT,SEGMENT             * MSH segment & first field?
          IF        @EQUAL
            IF        FIELDNO = 0
              MATCH     SP1,ANS                  * yes - blank separator ?
              GOTO      GCHR9600 IF EQUAL        * yes - error
.
              ADD       ONE,FIELDNO              * increment seg. field number
              MOVE      ANS,MSH001               * no - load field separator
            ENDIF
          ENDIF
.
.         Check if this is a field separator and if so, save to the segment
.         string (for message display later), increment the segment
.         field number, then get the next character.
.
          MATCH     MSH001,ANS                   * field separator found ?
          IF        @EQUAL
            ADD       ONE,FIELDNO                * increment seg. field number
            APPEND    ANS,SEGSTRNG               * add to segment string
            GOTO      GCHR0000                   * get next field
          ENDIF
.
.         Check if end of segment found
.
          MATCH     CRETURN,ANS                  * carriage return found ?
          IF        @EQUAL
            APPEND    ANS,SEGSTRNG               * add to segment string
            RESET     SEGSTRNG                   * reset segment string
.
            IF        DISPFLAG = 1
              MOVELPTR  SEGSTRNG,STRNGLEN        * get string length
              DISPLAY   "Segment [",SEGMENT,"] received",*R,*N;
              MOVE      ZERO,COUNTR
              MOVE      STRNGLEN,FORM4
              WHILE     FORM4 > 0
                ADD       ONE,COUNTR
                MATCH     CRETURN,SEGSTRNG
                IF        @EQUAL
                  MOVE      ASK,ANS
                ELSE
                  MOVE      SEGSTRNG,ANS
                ENDIF
                IF        COUNTR = 1
                  DISPLAY   "[";
                ENDIF
                DISPLAY   *HON,ANS,*HOFF;
                IF        COUNTR = 70
                  DISPLAY   "]",*R,*N;
                  MOVE      ZERO,COUNTR
                ENDIF
                SUB       ONE,FORM4
                BUMP      SEGSTRNG
              DO
              DISPLAY     "]",*R,*N;
              RESET       SEGSTRNG
            ENDIF
            GOTO      GCHR9500
          ENDIF
.
.         Check if end of block (message) found
.
          MATCH     ENDBLOCK,ANS                 * end of block found ?
          GOTO      GCHR9400 IF EQUAL            * yes
.
.         Check if start of block found
.
          MATCH     STRTBLOK,ANS                 * start of block found ?
          GOTO      GCHR9300 IF EQUAL            * yes - ignore message
.
          MOVE      ZERO,EXIT
          GOTO      GCHR9999
.
GCHR9100  MOVE      ONE,EXIT
          GOTO      GCHR9999
.
GCHR9200  MOVE      TWO,EXIT
          GOTO      GCHR9999
.
GCHR9300  MOVE      THREE,EXIT
          GOTO      GCHR9999
.
GCHR9400  MOVE      FOUR,EXIT
          GOTO      GCHR9999
.
GCHR9500  MOVE      FIVE,EXIT
          GOTO      GCHR9999
.
GCHR9600  IF        DISPFLAG = 1
            DISPLAY   "MSH.1 - Field Separator not set",*R,*N;
          ENDIF
          MOVE      SIX,EXIT
.
GCHR9999  RETURN
+
.*****************************************************************************
.*                              VSEG0000           Called by:                *
.*   Validate that the segment found is relevant, and in the correct         *
.*   sequence, for the message type.                                         *
.* Requires:  SEGMENT - 3 character segment id                               *
.* Returns:   EXIT    0 = Valid segment                                      *
.*                    1 = Invalid segment                                    *
.*            SEGNUMBR - Segment number                                      *
.*                    0 = unknown segment                                    *
.*                    1 = MSH                                                *
.*                    2 = EVN                                                *
.*                    3 = PID                                                *
.*                    4 = NK1                                                *
.*                    5 = PV1                                                *
.*                    6 = PV2                                                *
.*                    7 = AL1                                                *
.*                    8 = DG1                                                *
.*                    9 = MRG                                                *
.*                   10 = TXA                                                *
.*                   11 = IN1                                                *
.*                   12 = ZPM                                                *
.*                   13 = ZAT                                                *
.*                   14 = DRG                                                *
.*                   15 = MFI                                                *
.*                   16 = MFE                                                *
.*                   17 = STF                                                *
.*                   18 = PRA                                                *
.*                   19 = SCH                                                *
.*                   20 = OBX                                                *
.*                   21 = RGS                                                *
.*                   22 = AIS                                                *
.*                   23 = AIL                                                *
.*                   24 = AIP                                                *
.*                   25 = RF1                                                *
.*                   26 = PRD                                                *
.*                   27 = PR1                                                *
.*                   28 = ZAL                                                *
.*                   29 = ZXP                                                *
.*                   30 = ZXV                                                *
.*                   31 = GT1                                                *
.*                   32 = ZSD                                                *
.*                   33 = ZCT                                                *
.*                   34 = ZLH                                                *
.*                   35 = ZLU                                                *
.*                   36 = ZCM                                                *
.*                   37 = ZLS                                                *
.*                   38 = QRD                                                *
.*                   39 = QRF                                                *
.*                   40 = ZBR                                                *
.*****************************************************************************
.
VSEG0000  MATCH     MSHSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      ONE,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     EVNSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TWO,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     PIDSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      THREE,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     NK1SEGMT,SEGMENT
          IF        @EQUAL
            MOVE      FOUR,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     PV1SEGMT,SEGMENT
          IF        @EQUAL
            MOVE      FIVE,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     PV2SEGMT,SEGMENT
          IF        @EQUAL
            MOVE      SIX,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     AL1SEGMT,SEGMENT
          IF        @EQUAL
            MOVE      SEVEN,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     DG1SEGMT,SEGMENT
          IF        @EQUAL
            MOVE      EIGHT,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     MRGSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      NINE,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     TXASEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TEN,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     IN1SEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TEN1,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     ZPMSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TEN2,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     ZATSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TEN3,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     DRGSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TEN4,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     MFISEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TEN5,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     MFESEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TEN6,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     STFSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TEN7,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     PRASEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TEN8,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     SCHSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TEN9,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     OBXSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TWENTY,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     RGSSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TWENTY1,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     AISSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TWENTY2,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     AILSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TWENTY3,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     AIPSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TWENTY4,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     RF1SEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TWENTY5,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     PRDSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TWENTY6,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     PR1SEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TWENTY7,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     ZALSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TWENTY8,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     ZXPSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TWENTY9,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     ZXVSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      THIRTY,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     GT1SEGMT,SEGMENT
          IF        @EQUAL
            MOVE      THIRTY1,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     ZSDSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      THIRTY2,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     ZCTSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      THIRTY3,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     ZLHSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      THIRTY4,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     ZLUSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      THIRTY5,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     ZCMSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      THIRTY6,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     ZLSSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      THIRTY7,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     QRDSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      THIRTY8,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     QRFSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      THIRTY9,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     ZBRSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      FORTY,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MOVE      ZERO,SEGNUMBR
          MOVE      ONE,EXIT
          GOTO      VSEG9999
.
VSEG9000  MOVE      ZERO,EXIT
.
VSEG9999  RETURN
+
.******************************************************************************
.*                                  BACK0000              Called by: ML0000   *
.*                          Display Background Screen                         *
.******************************************************************************
.
BACK0000  DISPLAY   *P1:4,*EF
          BOX       16,2,2,79,24
          HLINE     *G33,5,2,2
          HLINE     *G37,5,3,39
          HLINE     *G31,5,40,40
          HLINE     *G37,5,41,78
          HLINE     *G34,5,79,79
          HLINE     *G30,24,40,40
          VLINE     *G39,40,6,23
          DISPLAY   *P30:3,*HON,*V2LON," MESSAGE STATISTICS ";
.
          CALL      IBACLOCK
          PACK      KEY8,CCC,CYY,CMM,CDD
          UNPACK    KEY8,CCENT,CYEAR,CMON,CDAY
          CALL      PACDATE
          REP       " 0",CPCDATE
          CLOCK     TIME,CTIMEIS
.
          DISPLAY   *P4:4,"Activated on ",*V2LON,CPCDATE,*HOFF:
                    "  @  ",*V2LON,CTIMEIS,*HOFF:
                    *P41:4,"Current status... ",*V2LON,*HON,"Waiting";
.
          DISPLAY   *P4:6,*V2LON,*ULON,"Message":
                    *P12:6,"Received",*P21:6,"Rejected":
                    *P42:6,*V2LON,*ULON,"Message":
                    *P50:6,"Received",*P59:6,"Rejected",*HOFF:
                    *P6:7,"A01":
                    *P6:8,"A02":
                    *P6:9,"A03":
                    *P6:10,"A04":
                    *P6:11,"A05":
                    *P6:12,"A08":
                    *P6:13,"A11":
                    *P6:14,"A12":
                    *P6:15,"A13":
                    *P6:16,"A14":
                    *P6:17,"A21":
                    *P6:18,"A22":
                    *P6:19,"A27":
                    *P6:20,"A28":
                    *P6:21,"A31":
                    *P44:7,"A34":
                    *P44:8,"A38":
                    *P44:9,"A44":
                    *P44:10,"M01":
                    *P44:11,"M02":
                    *P44:12,"S12":
                    *P44:13,"S14":
                    *P44:14,"S15":
                    *P44:15,"I12":
                    *P44:16,"I13":
                    *P44:17,"I14"
.
.         Initialise counters
.
          MOVE      ONE,FORM2
          REPEAT
            STORE     ZERO,FORM2,A01SENT,A02SENT,A03SENT,A04SENT,A08SENT:
                                 A11SENT,A12SENT,A13SENT,A14SENT,A21SENT:
                                 A22SENT,A27SENT,A28SENT,A31SENT,A34SENT:
                                 T01SENT,T03SENT,T11SENT,A44SENT,M02SENT:
                                 S12SENT,S14SENT,S15SENT,I12SENT,I13SENT:
                                 I14SENT,M01SENT,A19SENT:
                                 A01FAIL,A02FAIL,A03FAIL,A04FAIL,A08FAIL:
                                 A11FAIL,A12FAIL,A13FAIL,A14FAIL,A21FAIL:
                                 A22FAIL,A27FAIL,A28FAIL,A31FAIL,A34FAIL:
                                 T01FAIL,T03FAIL,T11FAIL,A44FAIL,M02FAIL:
                                 S12FAIL,S14FAIL,S15FAIL,I12FAIL,I13FAIL:
                                 I14FAIL,M01FAIL,A19FAIL
            ADD       ONE,FORM2
          UNTIL     FORM2>56
.
BACK9999  RETURN
+
.*****************************************************************************
.*                          WRMSH000               Called by: PROC0000       *
.*        Format and write the message header segment                        *
.* Returns:  EXIT   0 = message sent ok                                      *
.*                  1 = connection lost, message not sent                    *
.*                  2 = timeout, message not sent                            *
.*****************************************************************************
.
WRMSH000  CALL      GDTM0000                     * get message date/time
.
.         If displaying messages, prepare the reply message variable
.
          IF        DISPFLAG = 1
            PACK      RPLYMESS,SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                               SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                               SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                               SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                               SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100
            CLEAR     RPLYMESS                     * clear reply message
            APPEND    STRTBLOK,RPLYMESS            * set up reply message
            APPEND    ANSM,RPLYMESS
            APPEND    ANSS,RPLYMESS
            APPEND    ANSH,RPLYMESS
          ENDIF
.
          MOVE      PIPE,MSH001                  * set field delimiter
          STRIP     MSH001
          IF        DISPFLAG = 1
            APPEND    MSH001,RPLYMESS
          ENDIF
.
          MOVE      "^~\&",MSH002                * set encoding chars.
          STRIP     MSH002
          IF        DISPFLAG = 1
            APPEND    MSH002,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          MOVE      "ibaPAS",MSH003              * set sending application
          STRIP     MSH003
          IF        DISPFLAG = 1
            APPEND    MSH003,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          CLEAR     MSH004                       * set sending facility
          IF        DISPFLAG = 1
            APPEND    MSH004,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          MOVE      SAVAPPLI,MSH005              * set receiving application
          STRIP     MSH005
          IF        DISPFLAG = 1
            APPEND    MSH005,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          MOVE      SAVFACIL,MSH006              * set receiving facility
          IF        DISPFLAG = 1
            APPEND    MSH006,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          MOVE      DATETIME,MSH007              * set message date/time
          STRIP     MSH007
          IF        DISPFLAG = 1
            APPEND    MSH007,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          CLEAR     MSH008                       * set security
          IF        DISPFLAG = 1
            APPEND    MSH008,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
.         Set message type
.
          IF        CISMNUMB = 27
            PACK      MSH009,ANSA,ANSD,ANSR,CARET,MESSTYPE      * A19
          ELSE
            PACK      MSH009,ANSA,ANSC,ANSK,CARET,MESSTYPE
          ENDIF
          IF        DISPFLAG = 1
            APPEND    MSH009,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
.         Generate and set message id
.
          MOVE      "  0",PRXCODE                * System Lock Sector 0
          CALL      GETSLK00                     * Get System Lock-Sector 0
          READ      CONTROLF,ZERO;*87,IBCNMESI   * read next message id
          MOVE      IBCNMESI,MSH010              * set message id
          ADD       ONE,IBCNMESI
          WRITAB    CONTROLF,ZERO;*87,IBCNMESI
          CALL      RELSLK00                     * Release System Lock-Sector 0
          SQUEEZE   MSH010
          IF        DISPFLAG = 1
            APPEND    MSH010,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          READ      CONTROLF,ZERO;*249,IBCNMHPI
          MOVE      ZERO,F1
          MOVE      IBCNMHPI,F1
          ADD       ONE,F1
          LOAD      IBCNMHPI,F1,ANSP,ANSD,ANST
          MOVE      IBCNMHPI,MSH011                  * set processing id
          STRIP     MSH011
          IF        DISPFLAG = 1
            APPEND    MSH011,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          IF        CISMNUMB = 27
            MOVE      "2.4",MSH012                   * set version id for A19
          ELSE
            MOVE      "2.3.1",MSH012                 * set version id
          ENDIF
          STRIP     MSH012
          IF        DISPFLAG = 1
            APPEND    MSH012,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          CLEAR     MSH013                       * set sequence number
          IF        DISPFLAG = 1
            APPEND    MSH013,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          CLEAR     MSH014                       * set continuation pointer
          IF        DISPFLAG = 1
            APPEND    MSH014,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          CLEAR     MSH015                       * set accept ackn. type
          IF        DISPFLAG = 1
            APPEND    MSH015,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          CLEAR     MSH016                       * set applic. ackn. type
          IF        DISPFLAG = 1
            APPEND    MSH016,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          CLEAR     MSH017                       * set country code
          IF        DISPFLAG = 1
            APPEND    MSH017,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          CLEAR     MSH018                       * set character set
          IF        DISPFLAG = 1
            APPEND    MSH018,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          MOVE      "en",MSH019                  * set prinicpal language
          STRIP     MSH019
          IF        DISPFLAG = 1
            APPEND    MSH019,RPLYMESS
            APPEND    CRETURN,RPLYMESS
            RESET     RPLYMESS
            STRIP     RPLYMESS
.davvy      DISPLAY   *R,*N;
            CALL      FREP0000
          ENDIF
.
          PACK      MESSTRNG,STRTBLOK,ANSM,ANSS,ANSH:
                             MSH001,MSH002,PIPE,MSH003,PIPE,MSH004,PIPE:
                             MSH005,PIPE,MSH006,PIPE,MSH007,PIPE,MSH008,PIPE:
                             MSH009,PIPE,MSH010,PIPE,MSH011,PIPE,MSH012,PIPE:
                             MSH013,PIPE,MSH014,PIPE,MSH015,PIPE,MSH016,PIPE:
                             MSH017,PIPE,MSH018,PIPE,MSH019,CRETURN
.
          CALL      SENDM000                     * send message
          BRANCH    EXIT,WRMSH910:               * connection lost
                         WRMSH920                * timeout
.
          MOVE      ZERO,EXIT                    * sent ok
          GOTO      WRMSH999
.
WRMSH910  MOVE      ONE,EXIT
          GOTO      WRMSH999
.
WRMSH920  MOVE      TWO,EXIT
          GOTO      WRMSH999
.
WRMSH999  RETURN
+
.*****************************************************************************
.*                          WRMSA000               Called by: PROC0000       *
.*        Format and write the message acknowledgement segment               *
.* Returns:  EXIT   0 = message sent ok                                      *
.*                  1 = connection lost, message not sent                    *
.*                  2 = timeout, message not sent                            *
.*****************************************************************************
.
WRMSA000  IF        DISPFLAG = 1
            PACK      RPLYMESS,SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100
            CLEAR     RPLYMESS                     * clear reply message
            APPEND    ANSM,RPLYMESS
            APPEND    ANSS,RPLYMESS
            APPEND    ANSA,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          IF        ERORFLAG = 0
            MOVE      "AA",MSA001                * set acknowledgement code
            CALL      USST0000                   * update sent stats
          ELSE
            MOVE      "AE",MSA001                * set acknowledgement code
            CALL      USRJ0000                   * update rejected stats
          ENDIF
          STRIP     MSA001
          IF        DISPFLAG = 1
            APPEND    MSA001,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          MOVE      SAVMESID,MSA002              * set message control id
          IF        DISPFLAG = 1
            APPEND    MSA002,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          CLEAR     MSA003                       * set text message
          MATCH     "AE",MSA001
          IF        @EQUAL
            MOVE      SAVERTXT,MSA003
          ENDIF
          IF        DISPFLAG = 1
            APPEND    MSA003,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          CLEAR     MSA004                       * set expected sequence number
          IF        DISPFLAG = 1
            APPEND    MSA004,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          CLEAR     MSA005                       * set delayed ack. type
          IF        DISPFLAG = 1
            APPEND    MSA005,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          CLEAR     MSA006                       * set error condition
          IF        ERORFLAG = 1
            MOVE      ERORLINE,MSA006
            STRIP     MSA006
          ENDIF
          IF        DISPFLAG = 1
            APPEND    MSA006,RPLYMESS
            APPEND    CRETURN,RPLYMESS
            RESET     RPLYMESS
            STRIP     RPLYMESS
.davvy      DISPLAY   *R,*N;
            CALL      FREP0000
          ENDIF
.
          PACK      MESSTRNG,ANSM,ANSS,ANSA,PIPE:
                             MSA001,PIPE,MSA002:
                             PIPE,MSA003,PIPE,MSA004,PIPE,MSA005,PIPE,MSA006:
                             CRETURN
.
          CALL      SENDM000                     * send message
          BRANCH    EXIT,WRMSA910:               * connection lost
                         WRMSA910                * timeout
.
          MOVE      ZERO,EXIT                    * sent ok
          GOTO      WRMSA999
.
WRMSA910  MOVE      ONE,EXIT
          GOTO      WRMSA999
.
WRMSA920  MOVE      TWO,EXIT
          GOTO      WRMSA999
.
WRMSA999  RETURN
+
.*****************************************************************************
.*                          WRERR000               Called by: PROC0000       *
.*        Format and write the error segment                                 *
.* Returns:  EXIT   0 = message sent ok                                      *
.*                  1 = connection lost, message not sent                    *
.*                  2 = timeout, message not sent                            *
.*****************************************************************************
.
WRERR000  IF        DISPFLAG = 1
            PACK      RPLYMESS,SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100
            CLEAR     RPLYMESS                     * clear reply message
            APPEND    ANSE,RPLYMESS
            APPEND    ANSR,RPLYMESS
            APPEND    ANSR,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          IF        ERORFLAG = 1
            MOVE      SAVSEGMT,ERR001            * set segment id
            ENDSET    ERR001
            APPEND    CARET,ERR001
            APPEND    SAVFIELD,ERR001            * set field seq. number
            RESET     ERR001
          ENDIF
          IF        DISPFLAG = 1
            APPEND    ERR001,RPLYMESS
            APPEND    CRETURN,RPLYMESS
            RESET     RPLYMESS
            STRIP     RPLYMESS
.davvy      DISPLAY   *R,*N;
            CALL      FREP0000
          ENDIF
.
          PACK      MESSTRNG,ANSE,ANSR,ANSR,PIPE:
                             ERR001,CRETURN
.
          CALL      SENDM000                     * send message
          BRANCH    EXIT,WRERR910:               * connection lost
                         WRERR910                * timeout
.
          MOVE      ZERO,EXIT                    * sent ok
          GOTO      WRERR999
.
WRERR910  MOVE      ONE,EXIT
          GOTO      WRERR999
.
WRERR920  MOVE      TWO,EXIT
          GOTO      WRERR999
.
WRERR999  RETURN
+
.*****************************************************************************
.*                              SENDM000           Called by: WRMSH000       *
.*              Send the acknowledgement message              WRMSA000       *
.* Requires:  MESSTRNG - the segment string to be sent                       *
.* Returns:   EXIT    0 = message sent ok                                    *
.*                    1 = connection lost, message not sent                  *
.*                    2 = timeout, message not sent                          *
.*****************************************************************************
.
SENDM000  MOVELPTR  MESSTRNG,STRNGLEN            * get string length
.
.         Set TRAP for loss of connection then send segment
.
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF SIGPIPE                  * set trap
          WRITE     COMSOCKT,STRNGLEN,1000;MESSTRNG;     * send segment
          TRAPCLR   SIGPIPE                              * clear trap
          GOTO      SENDM920 IF TIMEOUT                  * timeout expired
          BRANCH    OVRCD,SENDM910                       * connection lost
.
          MOVE      ZERO,EXIT                            * sent ok
          GOTO      SENDM999
.
SENDM910  MOVE      ONE,EXIT                             * connection lost
          GOTO      SENDM999
.
SENDM920  MOVE      TWO,EXIT                             * timeout
          GOTO      SENDM999
.
SENDM999  RETURN
+
.*****************************************************************************
.*                         VMES0000                Called by:                *
.*          Validate message specific fields                                 *
.*   Previously, we have performed all the general HL7 validations.  Now we  *
.*   need to validate fields which are specific to the IBA database for      *
.*   the relevant messages.                                                  *
.*   Currently, the following messages are processed:                        *
.*        T01 - Original Document Notification                               *
.*        T03 - Document Change Status Notification                          *
.*        T11 - Document Cancel Notification                                 *
.*****************************************************************************
.
VMES0000  BRANCH    CISMNUMB,VMES9999:           *  admission (A01)
                             VMES9999:           *  transfer (A02)
                             VMES9999:           *  discharge (A03)
                             VMES9999:           *  register patient (A04)
                             VMES9999:           *  new O/P booking (A05)
                             VMES9999:           *  update (A08)
                             VMES9999:           *  cancel admit (A11)
                             VMES9999:           *  cancel transfer (A12) 
                             VMES9999:           *  cancel discharge (A13)
                             VMES9999:           *  cancel preadmit (A14)
                             VMES9999:           *  on-leave (A21)
                             VMES9999:           *  return from leave (A22)
                             VMES9999:           *  cancel preadmit (A27)
                             VMES9999:           *  register pmi (A28)
                             VMES9999:           *  update pmi (A31)
                             VMES9999:           *  merge patient (A34)
                             VMES9999:           *  cancel O/P booking (A38)
                             VMES9999:           *  change U/R for visit (A44)
                             VMES9999:           *  staff master (M02)
                             VMES9999:           *  new appointment (S12)
                             VMES9999:           *  modify appointment (S14)
                             VMES9999:           *  cancel appointment (S15)
                             VMES9999:           *  patient referral (I12)
                             VMES9999:           *  modify pt referral (I13)
                             VMES9999:           *  cancel pt referral (I14)
                             VMES9999:           *  O/P Clinic Maint (M01)
                             VMES9999            *  Query (A19)
.                            
VMES9999  RETURN
+
.*****************************************************************************
.*                            VURN0000             Called by:                *
.*     Right justify the U/R number and validate that it exists on file      *
.* Requires: PID-03 (Patient Id - Internal)                                  *
.*****************************************************************************
.
.         Check if U/R number field is populated
.
VURN0000  MOVE      PV1019,DIM8                  * get length of U/R number
          SQUEEZE   DIM8
          MOVELPTR  DIM8,FORM3
          IF        FORM3 = 0
            IF        DISPFLAG = 1
              DISPLAY   "PID.3 - U/R number not present"
            ENDIF
            MOVE      PIDSEGMT,ERRORSEG
            MOVE      "3",ERRORFLD
            MOVE      "U/R number not present",SAVERTXT
            CALL      EROR0000
            GOTO      VURN9999
          ENDIF
.
.         Right justify the U/R number and pad out to 8 characters
.         using spaces
.
          ASSIGN    (EIGHT-FORM3),FORM3            
          CLEAR     KEY8 
          WHILE     FORM3 > 0
            APPEND    SP1,KEY8
            SUB       ONE,FORM3
          DO
          APPEND    DIM8,KEY8
.
.         Check if U/R number is on file
.         
          RESET     KEY8
          CALL      RDMAST1
          IF        OVRCD = 1
            IF        DISPFLAG = 1
              DISPLAY   "PID.3 - U/R number not on file"
            ENDIF     
            MOVE      PIDSEGMT,ERRORSEG
            MOVE      "2",ERRORFLD
            MOVE      "U/R number not on file",SAVERTXT
            CALL      EROR0000
          ENDIF
.         
VURN9999  RETURN
+
.*****************************************************************************
.*                            VVIS0000             Called by:                *
.*     Right justify the visit number and validate that it exists on file    *
.* Requires: PV1-19 (Visiting Number)                                        *
.*****************************************************************************
.
.         Check if visit number field is populated
.
VVIS0000  MOVE      PV1019,DIM8                  * get length of visit number
          SQUEEZE   DIM8
          MOVELPTR  DIM8,FORM3
          IF        FORM3 = 0
            IF        DISPFLAG = 1
              DISPLAY   "PV1.19 - Visit number not present"
            ENDIF
            MOVE      PV1SEGMT,ERRORSEG
            MOVE      "19",ERRORFLD
            MOVE      "Visit number not present",SAVERTXT
            CALL      EROR0000
            GOTO      VVIS9999
          ENDIF
.
.         Check if field is numeric
.
          TYPE      PV1019
          IF        !@EQUAL   
            IF        DISPFLAG = 1
              DISPLAY   "PV1.19 - Visit number not numeric"        
            ENDIF
            MOVE      PV1SEGMT,ERRORSEG
            MOVE      "19",ERRORFLD
            MOVE      "Visit number not numeric",SAVERTXT
            CALL      EROR0000
            GOTO      VVIS9999
          ENDIF
.
.         Right justify the visit number and pad out to 8 characters
.         using spaces
.         
          ASSIGN    (EIGHT-FORM3),FORM3
          CLEAR     KEY8
          WHILE     FORM3 > 0
            APPEND    SP1,KEY8
            SUB       ONE,FORM3
          DO
          APPEND    DIM8,KEY8
.         
.         Check if visit number is on file
.
          RESET     KEY8
          CALL      RDMISS1
          IF        OVRCD = 1
            IF        DISPFLAG = 1
              DISPLAY   "PV1.19 - Visit number not on file"
            ENDIF
            MOVE      PV1SEGMT,ERRORSEG
            MOVE      "19",ERRORFLD
            MOVE      "Visit number not on file",ERRORTXT
            CALL      EROR0000
          ENDIF
.
VVIS9999  RETURN
+
.*****************************************************************************
.*                           FREP0000              Called by:                *
.*         Format reply for screen display                                   *
.*****************************************************************************
.
FREP0000  STRIP     RPLYMESS
          MOVE      ZERO,COUNTR
          MOVELPTR  RPLYMESS,FORM4
          WHILE     FORM4 > 0
            ADD       ONE,COUNTR
            MATCH     CRETURN,RPLYMESS
            IF        @EQUAL
              DISPLAY   *R,*N;
              MOVE      ZERO,COUNTR
            ELSE
              MOVE      RPLYMESS,ANS
              DISPLAY   *HON,ANS,*HOFF;
              IF        COUNTR = 80
                DISPLAY   *R,*N;
                MOVE      ZERO,COUNTR
              ENDIF
            ENDIF
            SUB       ONE,FORM4
            BUMP      RPLYMESS
          DO
          RESET       RPLYMESS
.
FREP9999  RETURN
+
.*****************************************************************************
.*                             USST0000            Called by: RDIN0000       *
.*        Update sent stats on screen                                        *
.*****************************************************************************
.
USST0000  BRANCH    DISPFLAG,USST9999
.
          BRANCH    CISMNUMB,USST0100:           *  admission (A01)
                             USST0200:           *  transfer (A02)
                             USST0300:           *  discharge (A03)
                             USST0400:           *  register patient (A04)
                             USST0500:           *  new O/P booking (A05)
                             USST0600:           *  update (A08)
                             USST0700:           *  cancel admit (A11)
                             USST0800:           *  cancel transfer (A12)
                             USST0900:           *  cancel discharge (A13)
                             USST1000:           *  pre-admission (A14)
                             USST1100:           *  on-leave (A21)
                             USST1200:           *  return from leave (A22)
                             USST1300:           *  cancel preadmit (A27)
                             USST1400:           *  register pmi (A28)
                             USST1500:           *  update pmi (A31)
                             USST1600:           *  merge patient (A34)
                             USST1700:           *  cancel O/P visit (A38)
                             USST1800:           *  update U/R for visit (A44)
                             USST1900:           *  doct. staff messages (M02)
                             USST2000:           *  new theatre booking (S12)
                             USST2100:           *  mod theatre booking (S14)
                             USST2200:           *  canc theatre booking (S15)
                             USST2300:           *  add patient referral (I12)
                             USST2400:           *  modify pt referral (I13)
                             USST2500:           *  cancel pt referral (I14)
                             USST2600            *  O/P Clinic Maint. (M01)
.
.         GOTO      USST9999                     * invalid message type
.
USST0100  ADD       ONE,A01SENT
          DISPLAY   *P12:7,A01SENT;
          GOTO      USST9999
.
USST0200  ADD       ONE,A02SENT
          DISPLAY   *P12:8,A02SENT;
          GOTO      USST9999
.
USST0300  ADD       ONE,A03SENT
          DISPLAY   *P12:9,A03SENT;
          GOTO      USST9999
.
USST0400  ADD       ONE,A04SENT
          DISPLAY   *P12:10,A03SENT;
          GOTO      USST9999
.
USST0500  ADD       ONE,A05SENT
          DISPLAY   *P12:11,A05SENT;
          GOTO      USST9999
.
USST0600  ADD       ONE,A08SENT
          DISPLAY   *P12:12,A08SENT;
          GOTO      USST9999
.
USST0700  ADD       ONE,A11SENT
          DISPLAY   *P12:13,A11SENT;
          GOTO      USST9999
.
USST0800  ADD       ONE,A12SENT
          DISPLAY   *P12:14,A12SENT;
          GOTO      USST9999
.
USST0900  ADD       ONE,A13SENT
          DISPLAY   *P12:15,A13SENT;
          GOTO      USST9999
.
USST1000  ADD       ONE,A14SENT
          DISPLAY   *P12:16,A14SENT;
          GOTO      USST9999
.
USST1100  ADD       ONE,A21SENT
          DISPLAY   *P12:17,A21SENT;
          GOTO      USST9999
.
USST1200  ADD       ONE,A22SENT
          DISPLAY   *P12:18,A22SENT;
          GOTO      USST9999
.
USST1300  ADD       ONE,A27SENT
          DISPLAY   *P12:19,A27SENT;
          GOTO      USST9999
.
USST1400  ADD       ONE,A28SENT
          DISPLAY   *P12:20,A28SENT;
          GOTO      USST9999
.
USST1500  ADD       ONE,A31SENT
          DISPLAY   *P12:21,A31SENT;
          GOTO      USST9999
.
USST1600  ADD       ONE,A34SENT
          DISPLAY   *P50:7,A34SENT;
          GOTO      USST9999
.
USST1700  ADD       ONE,A38SENT
          DISPLAY   *P50:8,A38SENT;
          GOTO      USST9999
.
USST1800  ADD       ONE,A44SENT
          DISPLAY   *P50:9,A44SENT;
          GOTO      USST9999
.
USST1900  ADD       ONE,M02SENT
          DISPLAY   *P50:11,M02SENT;
          GOTO      USST9999
.
USST2000  ADD       ONE,S12SENT
          DISPLAY   *P50:12,S12SENT;
          GOTO      USST9999
.
USST2100  ADD       ONE,S14SENT
          DISPLAY   *P50:13,S14SENT;
          GOTO      USST9999
.
USST2200  ADD       ONE,S15SENT
          DISPLAY   *P50:14,S15SENT;
          GOTO      USST9999
.
USST2300  ADD       ONE,I12SENT
          DISPLAY   *P50:15,I12SENT;
          GOTO      USST9999
.
USST2400  ADD       ONE,I13SENT
          DISPLAY   *P50:16,I13SENT;
          GOTO      USST9999
.
USST2500  ADD       ONE,I14SENT
          DISPLAY   *P50:17,I14SENT;
          GOTO      USST9999
.
USST2600  ADD       ONE,M01SENT
          DISPLAY   *P50:10,M01SENT;
          GOTO      USST9999
.
USST9999  RETURN
+
.*****************************************************************************
.*                             USRJ0000            Called by: RDIN0000       *
.*        Update rejected stats on screen                                    *
.*****************************************************************************
.
USRJ0000  BRANCH    DISPFLAG,USRJ9999
.
          BRANCH    CISMNUMB,USRJ0100:           *  admission (A01)
                             USRJ0200:           *  transfer (A02)
                             USRJ0300:           *  discharge (A03)
                             USRJ0400:           *  register patient (A04)
                             USRJ0500:           *  new O/P booking (A05)
                             USRJ0600:           *  update (A08)
                             USRJ0700:           *  cancel admit (A11)
                             USRJ0800:           *  cancel transfer (A12)
                             USRJ0900:           *  cancel discharge (A13)
                             USRJ1000:           *  pre-admission (A14)
                             USRJ1100:           *  on-leave (A21)
                             USRJ1200:           *  return from leave (A22)
                             USRJ1300:           *  cancel preadmit (A27)
                             USRJ1400:           *  register pmi (A28)
                             USRJ1500:           *  update pmi (A31)
                             USRJ1600:           *  merge patient (A34)
                             USRJ1700:           *  cancel O/P visit (A38)
                             USRJ1800:           *  update U/R for visit (A44)
                             USRJ1900:           *  doct. staff messages (M02)
                             USRJ2000:           *  new theatre booking (S12)
                             USRJ2100:           *  mod theatre booking (S14)
                             USRJ2200:           *  canc theatre booking (S15)
                             USRJ2300:           *  add patient referral (I12)
                             USRJ2400:           *  modify pt referral (I13)
                             USRJ2500:           *  cancel pt referral (I14)
                             USRJ2600            *  O/P Clinic Maint. (M01)
.
.         GOTO      USRJ9999                     * invalid message type
.
USRJ0100  ADD       ONE,A01FAIL
          DISPLAY   *P21:7,A01FAIL;
          GOTO      USRJ9999
.
USRJ0200  ADD       ONE,A02FAIL
          DISPLAY   *P21:8,A02FAIL;
          GOTO      USRJ9999
.
USRJ0300  ADD       ONE,A03FAIL
          DISPLAY   *P21:9,A03FAIL;
          GOTO      USRJ9999
.
USRJ0400  ADD       ONE,A04FAIL
          DISPLAY   *P21:10,A03FAIL;
          GOTO      USRJ9999
.
USRJ0500  ADD       ONE,A05FAIL
          DISPLAY   *P21:11,A05FAIL;
          GOTO      USRJ9999
.
USRJ0600  ADD       ONE,A08FAIL
          DISPLAY   *P21:12,A08FAIL;
          GOTO      USRJ9999
.
USRJ0700  ADD       ONE,A11FAIL
          DISPLAY   *P21:13,A11FAIL;
          GOTO      USRJ9999
.
USRJ0800  ADD       ONE,A12FAIL
          DISPLAY   *P21:14,A12FAIL;
          GOTO      USRJ9999
.
USRJ0900  ADD       ONE,A13FAIL
          DISPLAY   *P21:15,A13FAIL;
          GOTO      USRJ9999
.
USRJ1000  ADD       ONE,A14FAIL
          DISPLAY   *P21:16,A14FAIL;
          GOTO      USRJ9999
.
USRJ1100  ADD       ONE,A21FAIL
          DISPLAY   *P21:17,A21FAIL;
          GOTO      USRJ9999
.
USRJ1200  ADD       ONE,A22FAIL
          DISPLAY   *P21:18,A22FAIL;
          GOTO      USRJ9999
.
USRJ1300  ADD       ONE,A27FAIL
          DISPLAY   *P21:19,A27FAIL;
          GOTO      USRJ9999
.
USRJ1400  ADD       ONE,A28FAIL
          DISPLAY   *P21:20,A28FAIL;
          GOTO      USRJ9999
.
USRJ1500  ADD       ONE,A31FAIL
          DISPLAY   *P21:21,A31FAIL;
          GOTO      USRJ9999
.
USRJ1600  ADD       ONE,A34FAIL
          DISPLAY   *P59:7,A34FAIL;
          GOTO      USRJ9999
.
USRJ1700  ADD       ONE,A38FAIL
          DISPLAY   *P59:8,A38FAIL;
          GOTO      USRJ9999
.
USRJ1800  ADD       ONE,A44FAIL
          DISPLAY   *P59:9,A44FAIL;
          GOTO      USRJ9999
.
USRJ1900  ADD       ONE,M02FAIL
          DISPLAY   *P59:11,M02FAIL;
          GOTO      USRJ9999
.
USRJ2000  ADD       ONE,S12FAIL
          DISPLAY   *P59:12,S12FAIL;
          GOTO      USRJ9999
.
USRJ2100  ADD       ONE,S14FAIL
          DISPLAY   *P59:13,S14FAIL;
          GOTO      USRJ9999
.
USRJ2200  ADD       ONE,S15FAIL
          DISPLAY   *P59:14,S15FAIL;
          GOTO      USRJ9999
.
USRJ2300  ADD       ONE,I12FAIL
          DISPLAY   *P59:15,I12FAIL;
          GOTO      USRJ9999
.
USRJ2400  ADD       ONE,I13FAIL
          DISPLAY   *P59:16,I13FAIL;
          GOTO      USRJ9999
.
USRJ2500  ADD       ONE,I14FAIL
          DISPLAY   *P59:17,I14FAIL;
          GOTO      USRJ9999
.
USRJ2600  ADD       ONE,M01FAIL
          DISPLAY   *P59:10,M01FAIL;
          GOTO      USRJ9999
.
USRJ9999  RETURN
+
.*****************************************************************************
.*                             RESP0000            Called by: PROC0000       *
.*                   Send the remainder of the A19 response                  *
.*****************************************************************************
.
RESP0000  PACK      HL7SURNM,QRD00802,SP100      * query parameters
          PACK      HL7FGNAM,QRD00803,SP100
          PACK      HL7SGNAM,QRD00804,SP100
          PACK      HL7GENDR,QRF00401,SP100
          PACK      HL7BTHDT,QRF00402,SP100
.
          CALL      WRQAK000                     * format QAK segment
          BRANCH    EXIT,RESP9100:               * connection lost
                         RESP9200                * timeout
.
          CALL      WRQRD000                     * format QRD segment
          BRANCH    EXIT,RESP9100:               * connection lost
                         RESP9200                * timeout
.
          CALL      WRQRF000                     * format QRF segment
          BRANCH    EXIT,RESP9100:               * connection lost
                         RESP9200                * timeout
.
          COMPARE   ZERO,ERRORCNT                * any errors ?
          GOTO      RESP9000 IF NOT EQUAL        * yes - finished
.
          CALL      WRPID000                     * format PID segment
          BRANCH    EXIT,RESP9100:               * connection lost
                         RESP9200                * timeout
.
          CALL      WRDSC000                     * format DSC segment
          BRANCH    EXIT,RESP9100:               * connection lost
                         RESP9200                * timeout
.
RESP9000  MOVE      ZERO,EXIT
          GOTO      RESP9999
.
RESP9100  MOVE      ONE,EXIT
          GOTO      RESP9999
.
RESP9200  MOVE      TWO,EXIT
.
RESP9999  RETURN
+
.*****************************************************************************
.*                             WRQRF000            Called by: RESP0000       *
.*                      Write the QRF segment                                *
.*****************************************************************************
WRQRF000  IF        DISPFLAG = 1
            PACK      RPLYMESS,SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100
            CLEAR     RPLYMESS                   * clear reply message
            APPEND    ANSQ,RPLYMESS
            APPEND    ANSR,RPLYMESS
            APPEND    ANSF,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          MOVE      "webPAS",D6
.
          IF        DISPFLAG = 1
            APPEND    "webPAS",RPLYMESS
            APPEND    CRETURN,RPLYMESS
            RESET     RPLYMESS
            STRIP     RPLYMESS
.davvy      DISPLAY   *R,*N;
            CALL      FREP0000
          ENDIF
.
          PACK      MESSTRNG,ANSQ,ANSR,ANSF,PIPE,D6,CRETURN
.
          CALL      SENDM000                     * send message
          BRANCH    EXIT,WRQRF910:               * connection lost
                         WRQRF920                * timeout

          MOVE      ZERO,EXIT
          GOTO      WRQRF999
.
WRQRF910  MOVE      ONE,EXIT
          GOTO      WRQRF999
.
WRQRF920  MOVE      TWO,EXIT
.
WRQRF999  RETURN
+
.*****************************************************************************
.*                             WRQAK000            Called by: RESP0000       *
.*                      Write the QAK segment                                *
.*****************************************************************************
WRQAK000  IF        DISPFLAG = 1
            PACK      RPLYMESS,SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100
            CLEAR     RPLYMESS                   * clear reply message
            APPEND    ANSQ,RPLYMESS
            APPEND    ANSA,RPLYMESS
            APPEND    ANSK,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
.
          IF        DISPFLAG = 1
            APPEND    "|OK|||1",RPLYMESS
            APPEND    CRETURN,RPLYMESS
            RESET     RPLYMESS
            STRIP     RPLYMESS
.davvy      DISPLAY   *R,*N;
            CALL      FREP0000
          ENDIF
.
          PACK      MESSTRNG,ANSQ,ANSA,ANSK,PIPE,PIPE,ANSO,ANSK,PIPE,PIPE,PIPE:
                             ONE,CRETURN
.
          CALL      SENDM000                     * send message
          BRANCH    EXIT,WRQAK910:               * connection lost
                         WRQAK920                * timeout

          MOVE      ZERO,EXIT
          GOTO      WRQAK999
.
WRQAK910  MOVE      ONE,EXIT
          GOTO      WRQAK999
.
WRQAK920  MOVE      TWO,EXIT
.
WRQAK999  RETURN
+
.*****************************************************************************
.*                             WRDSC000            Called by: RESP0000       *
.*             Write the DSC segment if A19 continuation pointer is set      *
.*****************************************************************************
.
WRDSC000  MATCH     SP70,HL7CONTP                * continuation pointer?
          GOTO      WRDSC999 IF EQUAL
.
          IF        DISPFLAG = 1
            PACK      RPLYMESS,SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100
            CLEAR     RPLYMESS                   * clear reply message
            APPEND    ANSD,RPLYMESS
            APPEND    ANSS,RPLYMESS
            APPEND    ANSC,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          MOVE      HL7CONTP,DSC00101
          STRIP     DSC00101
.
          RESET     DSC00101
          IF        DISPFLAG = 1
            APPEND    DSC00101,RPLYMESS
            APPEND    CRETURN,RPLYMESS
            RESET     RPLYMESS
            STRIP     RPLYMESS
.davvy      DISPLAY   *R,*N;
            CALL      FREP0000
          ENDIF
.
          PACK      MESSTRNG,ANSD,ANSS,ANSC,PIPE:
                             DSC00101,CRETURN
.
          CALL      SENDM000                     * send message
          BRANCH    EXIT,WRDSC910:               * connection lost
                         WRDSC920                * timeout

          MOVE      ZERO,EXIT
          GOTO      WRDSC999
.
WRDSC910  MOVE      ONE,EXIT
          GOTO      WRDSC999
.
WRDSC920  MOVE      TWO,EXIT
.
WRDSC999  RETURN
+
.*****************************************************************************
.*                             WRQRD000            Called by: RESP0000       *
.*             Write the QRD segment with the same data that was received    *
.*****************************************************************************
.
WRQRD000  IF        DISPFLAG = 1
            PACK      RPLYMESS,SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100
            CLEAR     RPLYMESS                     * clear reply message
            APPEND    ANSQ,RPLYMESS
            APPEND    ANSR,RPLYMESS
            APPEND    ANSD,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
.davvy    MOVE      DATETIME,QRD001              * set query date/time
          RESET     QRD001
          IF        DISPFLAG = 1
            APPEND    QRD001,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
.davvy    MOVE      ANSR,QRD002                  * set to record query type
          RESET     QRD002
          IF        DISPFLAG = 1
            APPEND    QRD002,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
.davvy    MOVE      ANSI,QRD003                  * set to immediate response
          RESET     QRD003
          IF        DISPFLAG = 1
            APPEND    QRD003,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
.davvy    MOVE      MESSAGID,QRD004              * set unique id for query
          RESET     QRD004
          IF        DISPFLAG = 1
            APPEND    QRD004,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
.         Currently not populating QRD.5 & QRD.6
          CLEAR     QRD005
          CLEAR     QRD006
          IF        DISPFLAG = 1
            APPEND    PIPE,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
.>>>>>>    change length of QRD007 if this number changes
.davvy    MOVE      "5^RD",QRD007                * set no. of records
          SQUEEZE   QRD00701
          SQUEEZE   QRD00702
          PACK      QRD007,QRD00701,CARET,QRD00702
          IF        DISPFLAG = 1
            APPEND    QRD007,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
.davvy    MOVE      CARET,QRD008
.davvy    ENDSET    QRD008
.davvy    MATCH     SP70,HL7SURNM                * load surname
.davvy    IF        !@EQUAL
.davvy      STRIP     HL7SURNM
.davvy      APPEND    HL7SURNM,QRD008
.davvy    ENDIF
          RESET     QRD008
          IF        DISPFLAG = 1
            APPEND    QRD008,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
.davvy    MATCH     SP70,HL7FGNAM                * load first given name
.davvy    IF        !@EQUAL
.davvy      APPEND    CARET,QRD008
.davvy      STRIP     HL7FGNAM
.davvy      APPEND    HL7FGNAM,QRD008
.davvy    ENDIF
.
.davvy    MATCH     SP70,HL7SGNAM                * load second given name
.davvy    IF        !@EQUAL
.davvy      MATCH     SP70,HL7FGNAM
.davvy      IF        @EQUAL
.davvy        APPEND    CARET,QRD008
.davvy      ENDIF
.davvy      APPEND    CARET,QRD008
.davvy      STRIP     HL7SGNAM
.davvy      APPEND    HL7SGNAM,QRD008
.davvy    ENDIF
.davvy    RESET     QRD008
                                                 * set subject of query
.
.         Set Type of Query
.
.davvy    IF        HL7SMODE = 2
.davvy      MOVE      "DEM",QRD009               * retrieve patient demographics
.davvy    ELSE
.davvy      MOVE      "APN",QRD009               * patient search
.davvy    ENDIF
          RESET     QRD009
          IF        DISPFLAG = 1
            APPEND    QRD009,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
.davvy    MOVE      "X",QRD010                   * set department data code
          RESET     QRD010
          IF        DISPFLAG = 1
            APPEND    QRD010,RPLYMESS
            APPEND    CRETURN,RPLYMESS
            RESET     RPLYMESS
            STRIP     RPLYMESS
.davvy      DISPLAY   *R,*N;
            CALL      FREP0000
          ENDIF
.
          PACK      MESSTRNG,ANSQ,ANSR,ANSD,PIPE:
                             QRD001,PIPE,QRD002,PIPE,QRD003,PIPE,QRD004,PIPE:
                             QRD005,PIPE,QRD006,PIPE,QRD007,PIPE,QRD008,PIPE:
                             QRD009,PIPE,QRD010,CRETURN
.
          CALL      SENDM000                     * send message
          BRANCH    EXIT,WRQRD910:               * connection lost
                         WRQRD920                * timeout

          MOVE      ZERO,EXIT
          GOTO      WRQRD999
.
WRQRD910  MOVE      ONE,EXIT
          GOTO      WRQRD999
.
WRQRD920  MOVE      TWO,EXIT
.
WRQRD999  RETURN
+
.*****************************************************************************
.*                             WRPID000            Called by: RESP0000       *
.*             Write the PID segment(s) for the A19 query results            *
.*****************************************************************************
WRPID000  MOVE      ZERO,COUNTER                 * initialise record counter
          MOVE      QRD00701,D7
          RJUSTIFY  D7
          MOVE      D7,F7                        * no of records to retrieve
.
          IF        UPISFLAG = 1
            MOVE      HL7CONTP,KEY98
            PACK      HL7CONTP,SP100,SP100
            GOTO      WRPID050                   * continuation search
          ENDIF
.
          IF        UPISFLAG = 2
            MOVE      SP8,D8
            MOVE      QRD00801,D8                * 8 chars for test UR
            RJUSTIFY  D8
            MOVE      D8,GSRURNO
            PACK      KEY8,GSRURNO,SP70
            CALL      RDMAST1
            BRANCH    OVRCD,WRPID900
.
            PACK      KEY8,GSRURNO,SP70
            CALL      RDPMPX21
            BRANCH    OVRCD,WRPID900
.
            MOVE      PTMASNAM,GSRSNAM
            MOVE      PMPXFNAM,GSRGNAM
            MOVE      PMPXSNAM,PTGSGNM2
            MOVE      PBDATE,GSRDOB
            MOVE      PSEX,GSRSEX
.
            GOTO      WRPID250                   * retrieve patient details
          ENDIF
.
          PACK      KEY98,HL7SURNM,HL7FGNAM,HL7SGNAM,HL7BTHDT,SP100
          CALL      RDPTGSR2
          COMPARE   ZERO,OVRCD
          GOTO      WRPID200 IF EQUAL
.
          PACK      KEY98,HL7SURNM,HL7FGNAM,HL7SGNAM,HL7BTHDT,SP100
WRPID050  CALL      RSPTGSR2
WRPID100  CALL      RKPTGSR2
          BRANCH    OVRCD,WRPID900
.
          PACK      HL7CONTP,GSRSNAM,GSRGNAM,PTGSGNM2,GSRDOB,SP100
.
          MATCH     HL7SURNM,GSRSNAM
          GOTO      WRPID900 IF NOT EQUAL
.
          MATCH     SP70,HL7FGNAM
          IF        !@EQUAL
            MATCH     HL7FGNAM,GSRGNAM
            GOTO      WRPID900 IF NOT EQUAL
          ENDIF
.
          MATCH     SP70,HL7SGNAM
          IF        !@EQUAL
            MATCH     HL7SGNAM,PTGSGNM2
            GOTO      WRPID900 IF NOT EQUAL
          ENDIF
.
          MATCH     SP70,HL7GENDR
          IF        !@EQUAL
            MATCH     HL7GENDR,GSRSEX
            GOTO      WRPID900 IF NOT EQUAL
          ENDIF
.
          MATCH     SP70,HL7BTHDT
          IF        !@EQUAL
            MATCH     HL7BTHDT,GSRDOB
            GOTO      WRPID900 IF NOT EQUAL
          ENDIF
.
.         We have a valid record to send, so format the data
.
WRPID200  PACK      KEY8,GSRURNO,SP70
          CALL      RDMAST1
          BRANCH    OVRCD,WRPID900
.
          PACK      KEY8,GSRURNO,SP70
          CALL      RDPMPX21
          BRANCH    OVRCD,WRPID900
.
WRPID250  CALL      CPID0000                     * clear PID fields
.
          IF        DISPFLAG = 1
            PACK      RPLYMESS,SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100
            CLEAR     RPLYMESS                     * clear reply message
            APPEND    ANSP,RPLYMESS
            APPEND    ANSI,RPLYMESS
            APPEND    ANSD,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          ADD       ONE,COUNTER                  * increment counter
          MOVE      COUNTER,PID001               * load set id
          SQUEEZE   PID001
.
          IF        DISPFLAG = 1
            APPEND    PID001,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          IF        DISPFLAG = 1
            APPEND    PID002,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
WRPID300  SQUEEZE   GSRURNO
.davupi   MOVE      GSRURNO,PID003               * set patient id (internal ID)
          ENDSET    PID003
.davupi   APPEND    CARET,PID003
.davupi   APPEND    CARET,PID003
.davupi   APPEND    CARET,PID003
.davupi   APPEND    CARET,PID003
.davupi   APPEND    "016",PID003
.davupi   APPEND    CARET,PID003
.davvy    MOVE      MSH004,FIELDSTR              * set sending facility
.davvy    CALL      SPCHR000                     * convert special characters
.davvy    APPEND    FIELDSTR,PID003
.davupi   APPEND    "CMRN",PID003                * set sending facility NSWLHD
.
.davupi   APPEND    TILDA,PID003
          MATCH     SP10,PMEDI                   * set Medicare number
          IF        !@EQUAL
            APPEND    PMEDI,PID003
            MATCH     SP2,PTMXMCCD
            IF        !@EQUAL
              SQUEEZE   PTMXMCCD
              APPEND    PTMXMCCD,PID003
            ENDIF
          ELSE
            APPEND    BLANKSTR,PID003
          ENDIF
          APPEND    CARET,PID003
          APPEND    CARET,PID003
          APPEND    CARET,PID003
          APPEND    "3003357",PID003             * 4
          APPEND    CARET,PID003
          APPEND    "018",PID003                 * 5
          APPEND    CARET,PID003
.davupi   APPEND    "NEO",PID003
          APPEND    CARET,PID003
          APPEND    "20071210",PID003            * 7
          APPEND    CARET,PID003
          APPEND    "21001231",PID003            * 8
.
          APPEND    TILDA,PID003
          APPEND    "U123456",PID003             * set UPI number (external ID)
          APPEND    CARET,PID003
          APPEND    CARET,PID003
          APPEND    CARET,PID003
          APPEND    "3003357",PID003             * 4
          APPEND    CARET,PID003
          APPEND    "004",PID003                 * 5
          APPEND    CARET,PID003
.davupi   APPEND    "NSUPI",PID003
          APPEND    CARET,PID003
          APPEND    "20071210",PID003            * 7
          APPEND    CARET,PID003
          APPEND    "21001231",PID003            * 8
.
          APPEND    TILDA,PID003
          APPEND    "P123456",PID003             * set PersonID (external ID)
          APPEND    CARET,PID003
          APPEND    CARET,PID003
          APPEND    CARET,PID003
          APPEND    CARET,PID003
          APPEND    "035",PID003
          APPEND    CARET,PID003
          APPEND    "NSLHD",PID003
.
          RESET     PID003
.
          IF        DISPFLAG = 1
            APPEND    PID003,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          IF        DISPFLAG = 1
            APPEND    PID004,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
WRPID400  STRIP     GSRSNAM
          MOVE      GSRSNAM,FIELDSTR
          CALL      SPCHR000                     * convert special characters
          MOVE      FIELDSTR,PID005
          ENDSET    PID005
          APPEND    CARET,PID005
          STRIP     GSRGNAM
          MOVE      GSRGNAM,FIELDSTR
          CALL      SPCHR000                     * convert special characters
          APPEND    FIELDSTR,PID005
          APPEND    CARET,PID005
          STRIP     PTGSGNM2
          MOVE      PTGSGNM2,FIELDSTR
          CALL      SPCHR000                     * convert special characters
          APPEND    FIELDSTR,PID005
          APPEND    CARET,PID005
          APPEND    CARET,PID005
          SQUEEZE   PTITL
          APPEND    PTITL,PID005
          APPEND    CARET,PID005
          APPEND    CARET,PID005
          APPEND    "L",PID005
          RESET     PID005                       * set patient name
.
          IF        DISPFLAG = 1
            APPEND    PID005,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          IF        DISPFLAG = 1
            APPEND    PID006,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          MOVE      PBDATE,PID007                * set dob
          IF        DISPFLAG = 1
            APPEND    PID007,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          MOVE      PSEX,PID008                  * set patient sex
          IF        DISPFLAG = 1
            APPEND    PID008,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
WRPID450  CALL      PALIT000                     * get aliases from patgsrnf
.
          RESET     PID009                       * set patient alias
.
          IF        DISPFLAG = 1
            APPEND    PID009,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          MOVE      "4",PID010                   * Cat VA (thcscod=4 not indig)
          IF        DISPFLAG = 1
            APPEND    PID010,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
WRPID500  MATCH     SP25,PADD1                   * address line 1 blank ?
          IF        @EQUAL
            PACK      PID011,TILDA,BLANKSTR      * yes
          ELSE
            MOVE      PADD1,FIELDSTR             * load address line 1
            CALL      SPCHR000                   * convert special characters
            PACK      PID011,TILDA,FIELDSTR
          ENDIF
.
          ENDSET    PID011
          APPEND    CARET,PID011
.
          MATCH     SP25,PADD2                   * address line 2 blank ?
          IF        @EQUAL
            APPEND    BLANKSTR,PID011            * yes
          ELSE
            MOVE      PADD2,FIELDSTR             * load address line 2
            CALL      SPCHR000                   * convert special characters
            APPEND    FIELDSTR,PID011
          ENDIF
          APPEND    CARET,PID011
.
          MATCH     SP25,PSUBRB                  * address line 3 blank ?
          IF        @EQUAL
            APPEND    BLANKSTR,PID011            * yes
          ELSE
            MOVE      PSUBRB,FIELDSTR            * load address line 3
            CALL      SPCHR000                   * convert special characters
            APPEND    FIELDSTR,PID011
          ENDIF
          APPEND    CARET,PID011
.
          MATCH     SP25,PADD4                   * address line 4 blank ?
          IF        @EQUAL
            APPEND    BLANKSTR,PID011            * yes
          ELSE
            MOVE      PADD4,FIELDSTR             * load address line 4
            CALL      SPCHR000                   * convert special characters
            APPEND    FIELDSTR,PID011
          ENDIF
          APPEND    CARET,PID011
.
          MATCH     SP25,PPOST                   * post code blank ?
          IF        @EQUAL
            APPEND    BLANKSTR,PID011            * yes
          ELSE
            MOVE      PPOST,FIELDSTR             * load post code
            CALL      SPCHR000                   * convert special characters
            APPEND    FIELDSTR,PID011
          ENDIF
          APPEND    CARET,PID011
.
          APPEND    "COUNTRY",PID011             * country
.
          APPEND    CARET,PID011
          APPEND    ANSC,PID011                  * address type=C (home)
          RESET     PID011
.
          IF        DISPFLAG = 1
            APPEND    PID011,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          IF        DISPFLAG = 1
            APPEND    PID012,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          MOVE      "99734367^01^02~0431123456^01^04",PID013   * home/mobile ph
          IF        DISPFLAG = 1
            APPEND    PID013,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          MOVE      "96541234^02^02",PID014      * work phone
          IF        DISPFLAG = 1
            APPEND    PID014,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          MOVE      "19^^^N",PID015              * Cat LA (thcscod=19 English)
          IF        DISPFLAG = 1
            APPEND    PID015,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          MOVE      "1100",PID023                * Cat C (thcscod=1100 Aust.)
          IF        DISPFLAG = 1
            APPEND    PID023,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          MOVE      "1",PID026                   * Cat T (tcindc1=1 Resident)
          IF        DISPFLAG = 1
            APPEND    PID026,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          MOVE      PCHGDTE,PID033               * set last update date
          IF        DISPFLAG = 1
            APPEND    PID033,RPLYMESS
            APPEND    CRETURN,RPLYMESS
            RESET     RPLYMESS
            STRIP     RPLYMESS
.davvy      DISPLAY   *R,*N;
            CALL      FREP0000
          ENDIF
.
.dav1     STRIP     HL7CONTP
.
WRPID800  PACK      MESSTRNG,ANSP,ANSI,ANSD,PIPE:
                             PID001,PIPE,PID002,PIPE,PID003,PIPE,PID004,PIPE:
                             PID005,PIPE,PID006,PIPE,PID007,PIPE,PID008,PIPE:
                             PID009,PIPE,PID010,PIPE,PID011,PIPE,PID012,PIPE:
                             PID013,PIPE,PID014,PIPE,PID015,PIPE,PID016,PIPE:
                             PID017,PIPE,PID018,PIPE,PID019,PIPE,PID020,PIPE:
                             PID021,PIPE,PID022,PIPE,PID023,PIPE,PID024,PIPE:
                             PID025,PIPE,PID026,PIPE,PID027,PIPE,PID028,PIPE:
                             PID029,PIPE,PID030,PIPE,PID031,PIPE,PID032,PIPE:
                             PID033,CRETURN
.
          CALL      SENDM000                     * send message
          BRANCH    EXIT,WRPID910:               * connection lost
                         WRPID920                * timeout
.
          CALL      WRZXP000                     * Write the ZXP segment
          BRANCH    EXIT,WRPID910:               * connection lost
                         WRPID920                * timeout
.
          CALL      WRNK1000                     * Write the NK1 segment
          BRANCH    EXIT,WRPID910:               * connection lost
                         WRPID920                * timeout
.
          CALL      WRPV1000                     * Write the PV1 segment
          BRANCH    EXIT,WRPID910:               * connection lost
                         WRPID920                * timeout
.
          CALL      WROBX000                     * Write the OBX segment
          BRANCH    EXIT,WRPID910:               * connection lost
                         WRPID920                * timeout
.
          CALL      WROBX200                     * Write the OBX2 segment
          BRANCH    EXIT,WRPID910:               * connection lost
                         WRPID920                * timeout
.
          COMPARE   F7,COUNTER
          IF        @LESS
            GOTO      WRPID100                   * get next PID record
          ENDIF
.
WRPID900  COMPARE   F7,COUNTER
          IF        !@EQUAL
            PACK      HL7CONTP,SP100,SP100
          ENDIF
          MOVE      ZERO,EXIT
          GOTO      WRPID999
.
WRPID910  MOVE      ONE,EXIT
          GOTO      WRPID999
.
WRPID920  MOVE      TWO,EXIT
.
WRPID999  RETURN
+
.*****************************************************************************
.*                             WROBX200            Called by: WRPID000       *
.*                      Write the OBX2 segment                               *
.*****************************************************************************
WROBX200  IF        DISPFLAG = 1
            PACK      RPLYMESS,SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100
            CLEAR     RPLYMESS                   * clear reply message
            APPEND    ANSO,RPLYMESS
            APPEND    ANSB,RPLYMESS
            APPEND    ANSX,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          MOVE      "1|ST|MCAREDT||2020-10-31T00:00:00.000+11:00||||||",KEY49
.
          IF        DISPFLAG = 1
            APPEND    "1|ST|MCAREDT||2020-10-31T00:00:00.000+11:00||||||",RPLYMESS
            APPEND    CRETURN,RPLYMESS
            RESET     RPLYMESS
            STRIP     RPLYMESS
.davvy      DISPLAY   *R,*N;
            CALL      FREP0000
          ENDIF
.
WROBX280  PACK      MESSTRNG,ANSO,ANSB,ANSX,PIPE,KEY49,CRETURN
.
          CALL      SENDM000                     * send message
          BRANCH    EXIT,WROBX291:               * connection lost
                         WROBX292                * timeout
.
          MOVE      ZERO,EXIT
          GOTO      WROBX299
.
WROBX291  MOVE      ONE,EXIT
          GOTO      WROBX299
.
WROBX292  MOVE      TWO,EXIT
.
WROBX299  RETURN
+
.*****************************************************************************
.*                             WROBX000            Called by: WRPID000       *
.*                      Write the OBX segment                                *
.*****************************************************************************
WROBX000  IF        DISPFLAG = 1
            PACK      RPLYMESS,SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100
            CLEAR     RPLYMESS                   * clear reply message
            APPEND    ANSO,RPLYMESS
            APPEND    ANSB,RPLYMESS
            APPEND    ANSX,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          MOVE      "0|ST|Interpreter Required||N||||||",KEY34
.
          IF        DISPFLAG = 1
            APPEND    "0|ST|Interpreter Required||N||||||",RPLYMESS
            APPEND    CRETURN,RPLYMESS
            RESET     RPLYMESS
            STRIP     RPLYMESS
.davvy      DISPLAY   *R,*N;
            CALL      FREP0000
          ENDIF
.
WROBX800  PACK      MESSTRNG,ANSO,ANSB,ANSX,PIPE,KEY34,CRETURN
.
          CALL      SENDM000                     * send message
          BRANCH    EXIT,WROBX910:               * connection lost
                         WROBX920                * timeout
.
          MOVE      ZERO,EXIT
          GOTO      WROBX999
.
WROBX910  MOVE      ONE,EXIT
          GOTO      WROBX999
.
WROBX920  MOVE      TWO,EXIT
.
WROBX999  RETURN
+
.*****************************************************************************
.*                             WRNK1000            Called by: WRPID000       *
.*                      Write the NK1 segment                                *
.*****************************************************************************
WRNK1000  MOVE      ZERO,NK1COUNT                * initialise record counter
          COMPARE   ONE,XCONTACT
          GOTO      WRNK1999 IF EQUAL
.
          PACK      KEY14,PURNO,SP70
          CALL      RSPMCEX1
WRNK1100  CALL      RKPMCEX1
          BRANCH    OVRCD,WRNK1999
.
          MATCH     PMCEURNO,PURNO
          GOTO      WRNK1999 iF NOT EQUAL
.
          CALL      CNK10000                     * clear NK1 fields
.
          IF        DISPFLAG = 1
            PACK      RPLYMESS,SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100
            CLEAR     RPLYMESS                   * clear reply message
            APPEND    ANSN,RPLYMESS
            APPEND    ANSK,RPLYMESS
            APPEND    ONE,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
.davvy    MOVE      "1|UPIPTHREEA^Antoinette^^^^^766||13 Hershon St^^ST MARYS^NSW^2760^1101^1|0296236671^01^02||N",KEY89
.
          ADD       ONE,NK1COUNT                  * increment counter
          MOVE      NK1COUNT,NK1001               * load set id
          SQUEEZE   NK1001
.
          IF        DISPFLAG = 1
            APPEND    NK1001,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          STRIP     PMCESNAM
          MOVE      PMCESNAM,FIELDSTR
          CALL      SPCHR000                     * convert special characters
          MOVE      FIELDSTR,NK1002
          ENDSET    NK1002
          APPEND    CARET,NK1002
          STRIP     PMCEGNAM
          MOVE      PMCEGNAM,FIELDSTR
          CALL      SPCHR000                     * convert special characters
          APPEND    FIELDSTR,NK1002
          APPEND    CARET,NK1002
          STRIP     PMCEGNM2
          MOVE      PMCEGNM2,FIELDSTR
          CALL      SPCHR000                     * convert special characters
          APPEND    FIELDSTR,NK1002
          APPEND    CARET,NK1002
          APPEND    CARET,NK1002
          STRIP     PMCETITL
          APPEND    PMCETITL,NK1002
          APPEND    CARET,NK1002
          APPEND    CARET,NK1002
          APPEND    "L",NK1002
          RESET     NK1002                       * set contact name
.
          IF        DISPFLAG = 1
            APPEND    NK1002,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          MOVE      PMCERELP,NK1003
          STRIP     NK1003                       * relationship
.
          IF        DISPFLAG = 1
            APPEND    NK1003,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
WRNK1500  MATCH     SP35,PMCEADD1                * address line 1 blank ?
          IF        @EQUAL
            PACK      NK1004,TILDA,BLANKSTR      * yes
          ELSE
            MOVE      PMCEADD1,FIELDSTR          * load address line 1
            CALL      SPCHR000                   * convert special characters
            PACK      NK1004,TILDA,FIELDSTR
          ENDIF
.
          ENDSET    NK1004
          APPEND    CARET,NK1004
.
          MATCH     SP35,PMCEADD2                * address line 2 blank ?
          IF        @EQUAL
            APPEND    BLANKSTR,NK1004            * yes
          ELSE
            MOVE      PMCEADD2,FIELDSTR          * load address line 2
            CALL      SPCHR000                   * convert special characters
            APPEND    FIELDSTR,NK1004
          ENDIF
          APPEND    CARET,NK1004
.
          MATCH     SP35,PMCEADD3                * address line 3 blank ?
          IF        @EQUAL
            APPEND    BLANKSTR,NK1004            * yes
          ELSE
            MOVE      PMCEADD3,FIELDSTR          * load address line 3
            CALL      SPCHR000                   * convert special characters
            APPEND    FIELDSTR,NK1004
          ENDIF
          APPEND    CARET,NK1004
.
          MATCH     SP35,PMCEADD4                * address line 4 blank ?
          IF        @EQUAL
            APPEND    BLANKSTR,NK1004            * yes
          ELSE
            MOVE      PMCEADD4,FIELDSTR          * load address line 4
            CALL      SPCHR000                   * convert special characters
            APPEND    FIELDSTR,NK1004
          ENDIF
          APPEND    CARET,NK1004
.
          MATCH     SP35,PMCEPOST                * post code blank ?
          IF        @EQUAL
            APPEND    BLANKSTR,NK1004            * yes
          ELSE
            MOVE      PMCEPOST,FIELDSTR          * load post code
            CALL      SPCHR000                   * convert special characters
            APPEND    FIELDSTR,NK1004
          ENDIF
          APPEND    CARET,NK1004
.
          APPEND    "COUNTRY",NK1004             * country
.
          APPEND    CARET,NK1004
          APPEND    ANSC,NK1004                  * address type=C (home)
          RESET     NK1004
.
          IF        DISPFLAG = 1
            APPEND    NK1004,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          MATCH     SP70,PMCETELP
          IF        @EQUAL
            MOVE      BLANKSTR,NK1005
          ELSE
            STRIP     PMCETELP
            MOVE      PMCETELP,NK1005
          ENDIF
          ENDSET    NK1005
          APPEND    CARET,NK1005
          APPEND    "01^02",NK1005
          APPEND    TILDA,NK1005
          MATCH     SP70,PMCETELP
          IF        @EQUAL
            APPEND    BLANKSTR,NK1005
          ELSE
            STRIP     PMCETELM
            APPEND    PMCETELM,NK1005
          ENDIF
          ENDSET    NK1005
          APPEND    CARET,NK1005
          APPEND    "01^04",NK1005
          RESET     NK1005                       * home/mobile ph
.
          IF        DISPFLAG = 1
            APPEND    NK1005,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          MATCH     SP70,PMCETELB
          IF        @EQUAL
            MOVE      BLANKSTR,NK1006
          ELSE
            STRIP     PMCETELB
            MOVE      PMCETELB,NK1006
          ENDIF
          ENDSET    NK1006
          APPEND    CARET,NK1006
          APPEND    "02^02",NK1006
          RESET     NK1006                       * work phone
.
          IF        DISPFLAG = 1
            APPEND    NK1006,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          STRIP     PMCETYPE
          MOVE      PMCETYPE,NK1007              * contact type (Cat tc)
.
          IF        DISPFLAG = 1
            APPEND    NK1007,RPLYMESS
            APPEND    CRETURN,RPLYMESS
            RESET     RPLYMESS
            STRIP     RPLYMESS
.davvy      DISPLAY   *R,*N;
            CALL      FREP0000
          ENDIF
.
WRNK1800  PACK      MESSTRNG,ANSN,ANSK,ONE,PIPE:
                             NK1001,PIPE,NK1002,PIPE,NK1003,PIPE,NK1004,PIPE:
                             NK1005,PIPE,NK1006,PIPE,NK1007,CRETURN
.
          CALL      SENDM000                     * send message
          BRANCH    EXIT,WRNK1910:               * connection lost
                         WRNK1920                * timeout
.
          MOVE      ZERO,EXIT
          GOTO      WRNK1100
.
WRNK1910  MOVE      ONE,EXIT
          GOTO      WRNK1999
.
WRNK1920  MOVE      TWO,EXIT
.
WRNK1999  RETURN
+
.*****************************************************************************
.*                             WRPV1000            Called by: WRPID000       *
.*                      Write the PV1 segment                                *
.*****************************************************************************
WRPV1000  IF        DISPFLAG = 1
            PACK      RPLYMESS,SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100
            CLEAR     RPLYMESS                   * clear reply message
            APPEND    ANSP,RPLYMESS
            APPEND    ANSV,RPLYMESS
            APPEND    ONE,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          IF        DISPFLAG = 1
            APPEND    "|N",RPLYMESS
            APPEND    CRETURN,RPLYMESS
            RESET     RPLYMESS
            STRIP     RPLYMESS
.davvy      DISPLAY   *R,*N;
            CALL      FREP0000
          ENDIF
.
WRPV1800  PACK      MESSTRNG,ANSP,ANSV,ONE,PIPE,PIPE,ANSN,CRETURN
.
          CALL      SENDM000                     * send message
          BRANCH    EXIT,WRPV1910:               * connection lost
                         WRPV1920                * timeout
.
          MOVE      ZERO,EXIT
          GOTO      WRPV1999
.
WRPV1910  MOVE      ONE,EXIT
          GOTO      WRPV1999
.
WRPV1920  MOVE      TWO,EXIT
.
WRPV1999  RETURN
+
.*****************************************************************************
.*                             WRZXP000            Called by: WRPID000       *
.*                      Write the ZXP segment                                *
.*****************************************************************************
WRZXP000  IF        DISPFLAG = 1
            PACK      RPLYMESS,SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100
            CLEAR     RPLYMESS                   * clear reply message
            APPEND    ANSZ,RPLYMESS
            APPEND    ANSX,RPLYMESS
            APPEND    ANSP,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          MOVE      SP10,ZXP00101                * Pension expiry date
          STRIP     ZXP00101
          IF        DISPFLAG = 1
            APPEND    ZXP00101,RPLYMESS
            APPEND    PIPE,RPLYMESS
          ENDIF
.
          MATCH     SP70,PMPXMEDC
          IF        @EQUAL
            MOVE      BLANKSTR,ZXP00201
          ELSE
            MOVE      PMPXMEDC,ZXP00201          * medicare expiry date
          ENDIF
          STRIP     ZXP00201
          IF        DISPFLAG = 1
            APPEND    ZXP00201,RPLYMESS
            APPEND    CRETURN,RPLYMESS
            RESET     RPLYMESS
            STRIP     RPLYMESS
.davvy      DISPLAY   *R,*N;
            CALL      FREP0000
          ENDIF
.
WRZXP800  PACK      MESSTRNG,ANSZ,ANSX,ANSP,PIPE:
                             ZXP00101,PIPE,ZXP00201,CRETURN
.
          CALL      SENDM000                     * send message
          BRANCH    EXIT,WRZXP910:               * connection lost
                         WRZXP920                * timeout
.
          MOVE      ZERO,EXIT
          GOTO      WRZXP999
.
WRZXP910  MOVE      ONE,EXIT
          GOTO      WRZXP999
.
WRZXP920  MOVE      TWO,EXIT
.
WRZXP999  RETURN
+
.*****************************************************************************
.*                              PALIT000                                     *
.*                 Process aliases into PID.9 from patgsrnf                  *
.*****************************************************************************
PALIT000  MOVE      GSRURNO,D8
          RJUSTIFY  D8
          PACK      KEY115,D8,SP70,SP70
          CALL      RSPTGSR1
PALIT010  CALL      RKPTGSR1
          BRANCH    OVRCD,PALIT999
.
          MATCH     GSRURNO,PURNO
          GOTO      PALIT999 IF NOT EQUAL
.
          MATCH     GSRSNAM,PTMASNAM
          GOTO      PALIT020 IF NOT EQUAL
.
          MATCH     GSRGNAM,PMPXFNAM
          GOTO      PALIT020 IF NOT EQUAL
.
          MATCH     PTGSGNM2,PMPXSNAM
          GOTO      PALIT020 IF NOT EQUAL
.
          MATCH     GSRDOB,PBDATE
          GOTO      PALIT020 IF NOT EQUAL
.
          MATCH     GSRSEX,PSEX
          GOTO      PALIT010 IF EQUAL
.
PALIT020  STRIP     GSRSNAM
          MOVE      GSRSNAM,FIELDSTR
          CALL      SPCHR000                     * convert special characters
          APPEND    FIELDSTR,PID009
          ENDSET    PID009
          APPEND    CARET,PID009
          STRIP     GSRGNAM
          MOVE      GSRGNAM,FIELDSTR
          CALL      SPCHR000                     * convert special characters
          APPEND    FIELDSTR,PID009
          APPEND    CARET,PID009
          STRIP     PTGSGNM2
          MOVE      PTGSGNM2,FIELDSTR
          CALL      SPCHR000                     * convert special characters
          APPEND    FIELDSTR,PID009
          APPEND    CARET,PID009
          APPEND    CARET,PID009
          STRIP     PTITL
          APPEND    PTITL,PID009
          APPEND    CARET,PID009
          APPEND    CARET,PID009
          APPEND    "A",PID009                   * set patient alias
.
          APPEND    TILDA,PID009                 * set for next alias
          GOTO      PALIT010
.
PALIT999  RETURN
+
.*****************************************************************************
.*                           SPCHR000              Called by: Lots           *
.*        Check for special HL7 characters, and if found, convert to         *
.*        the corresponding escape sequence:                                 *
.*        Field Separator         "|" becomes "\F\"                          *
.*        Component separator     "^" becomes "\S\"                          *
.*        Sub-component separator "&" becomes "\T\"                          *
.*        Repetition separator    "~" becomes "\R\"                          *
.*        Escape character        "\" becomes "\E\"                          *
.* Requires: FIELDSTR - raw field string                                     *
.* Returns : FIELDSTR - field string with converted HL7 special characters   *
.*                      and stripped of trailing blanks                      *
.*****************************************************************************
.
SPCHR000  STRIP     FIELDSTR                     * remove trailing spaces
          MOVELPTR  FIELDSTR,FORM3               * get string length
          COMPARE   ZERO,FORM3                   * string length zero ?
          GOTO      SPCHR999 IF EQUAL            * yes - ignore
.
          MOVE      SP30,STRBUFFR                * clear the temporary string
          CLEAR     STRBUFFR
.
.         Loop through the field string checking each character to see
.         if it is a HL7 special character
.
SCHR0500  MOVE      FIELDSTR,ANS                 * load the next character
.
.         Check if character is a pipe
.
          MATCH     PIPE,ANS                     * is character "|" ?
          IF        @EQUAL
            APPEND    PIPESEQN,STRBUFFR          * yes - load "\F\"
            GOTO      SPCHR100                   * get next character
          ENDIF
.
.         Check if character is a caret
.
          MATCH     CARET,ANS                    * is character "^" ?
          IF        @EQUAL
            APPEND    CARTSEQN,STRBUFFR          * yes - load "\S\"
            GOTO      SPCHR100                   * get next character
          ENDIF
.
.         Check if character is an ampersand
.
          MATCH     AMPRSAND,ANS                 * is character "&" ?
          IF        @EQUAL
            APPEND    AMPRSEQN,STRBUFFR          * yes - load "\T\"
            GOTO      SPCHR100                   * get next character
          ENDIF
.
.         Check if character is a tilda
.
          MATCH     TILDA,ANS                    * is character "~" ?
          IF        @EQUAL
            APPEND    TILDSEQN,STRBUFFR          * yes - load "\R\"
            GOTO      SPCHR100                   * get next character
          ENDIF
.
.         Check if character is a backslash
.
          MATCH     "\",ANS                      * is character "\" ?
          IF        @EQUAL
            APPEND    BSLASEQN,STRBUFFR          * yes - load "\E\"
            GOTO      SPCHR100                   * get next character
          ENDIF
.
.         No HL7 special characters were found, so load this character
.         into the temporary string
.
          APPEND    ANS,STRBUFFR
.
SPCHR100  BUMP      FIELDSTR                     * position on next character
          GOTO      SPCHR900 IF EOS              * eos - finished
          GOTO      SCHR0500
.
SPCHR900  RESET     STRBUFFR
          MOVE      STRBUFFR,FIELDSTR
.
SPCHR999  RETURN
+
.*****************************************************************************
.         I/O Includes
.*****************************************************************************
.
          INC       STD002IO
.
          INC       PATGSRIO/INC
          INC       PATMA1IO/INC
          INC       PMSCEXIO/INC
          INC       PMSPX2IO/INC
          INC       PATMI1IO/INC
          INC       PMSVX1IO/INC
