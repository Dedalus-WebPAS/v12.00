.******************************************************************************
.*                           NCGSEGMT.PBL                                     *
.*              This include contains all the subroutines that format         *
.*              an NCG message.                                               *
.*  Used by   : IBAADT10.PBL (Electronic Health Fund Claiming)                *
.*              IBAADT33.PBL (NCG File Format Extraction)                     *
.*                                                                            *
.* Note:   ADT10 uses PATEDSFD to process claims.  (EXTRFLAG = 0)             *
.*         ADT33 uses PATINVFD to process claims.  (EXTRFLAG = 1)             *
.*                                                                            *
.* Mods:                                                                      *
.*        V12.00.01 19/05/2025  J.Tan          TSK 0955096                    *
.*                  Added Alphanumeric visit number changes                   *
.*        V11.01.01 22/02/2021  J.Tan          TSK 0888639                    *
.*                  Changed patmmbs counter record to DIM3                    *
.*        V11.00.01 10/03/2020  J.Tan          TSK 0838262                    *
.*                  Added Effective from and to date to MBS Item file         *
.*        V10.03.02 07/09/2012  J.Tan          CAR 267784                     *
.*                  Mods Check for TCINDC19 Claim Contract Eff.'Disc.From'    *
.*        V10.03.01 09/01/2012  Mike Laming    CAR 242229                     *
.*                  Added test for "Source of Referral" at SADMN910 &         *
.*                  SDSCH910 to bypass error message if not "from another Hos"*
.*        V10.02.02 31/10/2011  Mike Laming    CAR 250267                     *
.*                  Mods for PTICUMEC & PTICUINT (form 5 to form 4)           *
.*        V10.02.01 24/03/2011  Mike Laming   CAR 240107                      *
.*                  Change Indexes and Keys for PATECDaf and PATECOaf         *
.*        ..........................................................          *
.*        28/01/2011  J.Tan         CAR 233050                                *
.*                    Mods for Casemix funding                                *
.*        08/12/2010  Mike Laming   CAR 233046                                *
.*                    Mods for PATMCHFD with H/F Table Type (replaces H/F Table)
.*        30/04/2010  J.Tan     CAR 220887                                    *
.*                    Mods checking for Active/Inactive of Misc.charge        *
.*        12/03/2010  Steve Armstrong   CAR 217787                            *
.*                    Mods for Category CC to change Eclipse value of 11 to   *
.*                    HosClaim value of 1 (Type of Episode of Care Code -     *
.*                    ED060005).                                              *
.*        25/01/2010  Steve Armstrong   CAR 201308                            *
.*                    Fixed KEY for pathdfaf changes in V9.12.                *
.*                    Also fixed call to DCLM0000 and setting of default      *
.*                    claim code.                                             *
.*        22/12/2009  Steve Armstrong   CAR 212980                            *
.*                    Fixed matching of default claim code after call to      *
.*                    DCLM0000.                                               *
.*        14/12/2009  Steve Armstrong   CAR 201308                            *
.*                    Mods to SVB segment for population of ToDate.  Where    *
.*                    the number of days in hospital is less than the maximum *
.*                    inlier days, the number of days should still be used,   *
.*                    but the ToDate should remain as the discharge date (or  *
.*                    the current date if the patient is still admitted),     *
.*                    rather than recalculating it based on the number of     *
.*                    days (which excludes leave days).                       *
.*        18/06/2008  Mike Laming       CAR 164567                            *
.*                    Change Service Type default to "O" and add test for MBS *
.*                    Items at WRSVB100                                       *
.*        23/01/2008  Steve Armstrong   CAR 159875                            *
.*                    Mods to use standard routine (DCLM0000) to get default  *
.*                    claim code in WRSVB000.                                 *
.*        26/10/2007  Steve Armstrong   CAR 147461 & 147455                   *
.*                    Mods to check for zero amount for deposit (040012)      *
.*                    before setting deposit flag (040011).                   *
.*                    Mods to print warning if non-3B certificate comments    *
.*                    are blank (200006).                                     *
.*        19/10/2007  Steve Armstrong   CAR 151231                            *
.*                    Added code in WRACD000 & WRCCG000 so that where a       *
.*                    patient has both medical & surgical accommodation       *
.*                    records for an admission, the medical service type      *
.*                    (110007/8) for the medical accommodation record must be *
.*                    ICD instead of CMBS - Mildura Health Fund only.         *
.*        18/10/2007  Steve Armstrong   CAR 151231                            *
.*                    In the loop through patdtraf in WRSVB000, the check on  *
.*                    TTYPE = "PY" has been removed as it is irrelevant for   *
.*                    accommodation records (which should all be              *
.*                    TTYPE = "DB" anyway).                                   *
.*        27/09/2007  Steve Armstrong   CAR 151231                            *
.*                    Fixed check on PTDTCRST to treat blank same as "0".     *
.*        15/08/2007  Mike Laming       CAR 146815                            *
.*                    Mods for Fld 170010 (Credit Charge Ind.) in WRMIG000    *
.*        ..........  Mike Laming       CAR 146742                            *
.*                    Add "Credited Items" calc to Invoice total at WRCID500  *
.*                    Change all logic to bypass credited invoices/items      *
.*        ..........  Mike Laming       CAR 146686                            *
.*                    Mod for "Mildura Health Fund" (HCP Equiv "MDH") - don't *
.*                    use Default Service Code, use ICD10 Disease at WRACD840 *
.*        08/05/2007  Mike Laming  CAR 137125 HDP 2007 DRG 5.2                *
.*                    Mods to PATDGWFD - Add field PTDWDRGV (add to Keys)     *
.*        15/03/2007  J.Tan             CAR 136149                            *
.*                    Mods to use default claim code from system parameter    *
.*        12/12/2006  Steve Armstrong   CAR 127885                            *
.*                    Mods to cater for values 70, 80, 90 and 00 for field    *
.*                    060005.                                                 *
.*        08/12/2006  Steve Armstrong   CAR 123343                            *
.*                    Mods for miscellaneous charges to only send rebate      *
.*                    portion for split invoices.                             *
.*        07/09/2006  Steve Armstrong   CAR 112793                            *
.*                    Changed so that when warning message for "Inlier record *
.*                    not found" at WRSVB550 occurs, the segment record is    *
.*                    still processed instead of ignored.                     *
.*        17/08/2006  Davin S           CAR 117071                            *
.*                    Added check to allow zero invoices in ADT10 (based on   *
.*                    flag set in patfx1af)                                   *
.*        17/07/2006  Steve Armstrong   CAR 112793                            *
.*                    Added warning message for "Inlier record not found" at  *
.*                    WRSVB550.                                               *
.*        12/07/2006  Steve Armstrong   CAR 112415                            *
.*                    Fixed TPATAMTI (F12.2) to be moved to FORM6P2 before    *
.*                    loading ED110013 & ED120011.                            *
.*        09/05/2006  Peter Vela        CAR 104252                            *
.*                    Changed DPTCEURN to PTCEURNO                            *
.*        22/02/2006  Mike Laming       CAR 95392                             *
.*                    Add warning message for "No provider no." at WRCER200   *
.*        03/02/2006  J.Tan             CAR 93540                             *
.*                    Mods for TFR - Transfer segments                        *
.*        20/01/2006  Steve Armstrong     CAR 92453                           *
.*                    Added setting of KEY8 prior to calling PBAT0000.        *
.*                    Mods to WRCID000 when checking for previous invoices    *
.*                    (for series flag) to only check for invoices raised     *
.*                    electronically.                                         *
.*        09/01/2006  Steve Armstrong     CAR 89871                           *
.*                    Mods to 110007, 110008, 120006, 120007 to default       *
.*                    for Advanced Medical as well as Medical.                *
.*        09/01/2006  Steve Armstrong     CAR 88319                           *
.*                    Mods to use patinvrf.ptincmix instead of                *
.*                    patmi1af.ptmicmxp to determine if invoice is            *
.*                    casepayment or not.                                     *
.*        28/12/2005  Steve Armstrong     CAR 89871                           *
.*                    Mods to 110007, 110008, 120006, 120007 for new industry *
.*                    standard default settings.                              *
.*        29/11/2005  Mike Laming         CAR 86464                           *
.*                    Change Doctor Name & Provider No logic at WRCER200      *
.*        28/11/2005  Mike Laming         CAR 86040                           *
.*                    Add routine WRCER00 for Certificates processing         *
.*        22/11/2005  Steve Armstrong     CAR 85944                           *
.*                    Mods to ANB (Newborn segment) to send data when newborn *
.*                    is admitted as a qualified patient                      *
.*        02/11/2005  Mike Laming         CAR 82516                           *
.*                    Add test to bypass Patient Portion Invoice at WRCID050  *
.*        26/09/2005  Mike Laming         CAR 65745                           *
.*                    Add test for current PINVNO in routines WRACD000 &      *
.*                    WRCCG000                                                *
.*        31/08/2005  Steve Armstrong     CAR 74220                           *
.*                    Fixed sameday patient "Date To (070008) to be set to    *
.*                    the same date as the "Date From" (070007).              *
.*        30/08/2005  Steve Armstrong     CAR 74043                           *
.*                    Fixed setting of MAXMDAYS (for 070009) in SVB segment   *
.*                    so that all type 1 and type 2 records from pathdfaf are *
.*                    read to get the highest end day for type 1 records.     *
.*                    Also added code for CID segment to ignore zero amount   *
.*                    invoices when checking for contiguous claims.           *
.*        11/08/2005  Steve Armstrong     CAR 71776                           *
.*                    Fixed check on U/R link for newborns (ANB - SAVPURNO)   *
.*        05/08/2005  Steve Armstrong     CAR 70776                           *
.*                    Fixed setting of "Date to" (070008) for same day patient*
.*        18/07/2005  Steve Armstrong     CAR 67928                           *
.*                    Fixed format of "Date to" (070008) to be ddmmccyy       *
.*                    instead of ccyymmdd.                                    *
.*        28/06/2005  Steve Armstrong     CAR 65071                           *
.*                    Mods to use PTCNMBRL to determine mother/baby link.     *
.*        07/07/2005  Steve Armstrong     CAR 66447                           *
.*                    Mods to ignore check on patmmbsf for theatre items in   *
.*                    WRPSG000.                                               *
.*        06/07/2005  Steve Armstrong     CAR 66286                           *
.*                    Mods to set "Date to" (070008) to equal admission date  *
.*                    + maximum inlier days (instead of discharge date).      *
.*        20/06/2005  Steve Armstrong     CAR 62812                           *
.*                    Fix field 70009 to use LOS unless LOS is more than the  *
.*                    maximum inlier length of stay, in which case the latter *
.*                    is used.                                                *
.*        10/06/2005  Steve Armstrong     CAR 62812                           *
.*                    Mods to record maximum inlier length of stay for SVB.   *
.*        19/05/2005  Steve Armstrong     CAR 62085                           *
.*                    Fixed population of 170008 so that TPATAMTT is          *
.*                    divided by the no. of services and 170009 is set to     *
.*                    TPATAMTT.  Previously, 170008 was set to TPATAMTT and   *
.*                    170009 was set to 170008 multiplied by no. of services. *
.*        02/02/2005  Steve Armstrong     CAR 57600                           *
.*                    Mods to determine if miscellaneous charge code is for   *
.*                    a prosthetic, so that 170004 can be prefixed with PX00  *
.*        18/01/2005  Steve Armstrong     CAR 56917                           *
.*                    Fixed validation of disease and operation codes to CALL *
.*                    RDPTICD1 & RDPTICO1 instead of RDPT10D1 & RDPT10O1.     *
.*        15/12/2004  Steve Armstrong     CAR 55922                           *
.*                    Mods to WRANB000 so that when there are no ANB records  *
.*                    and the validation phase is executing, the WRITE is     *
.*                    bypassed.                                               *
.*        21/10/2004  Steve Armstrong     CAR 54520                           *
.*                    Mods to populate the ANB (Newborns) segment with data.  *
.*                    Mods to populate ED020008 (provider type).              *
.*        19/10/2004  Steve Armstrong     CAR 54427                           *
.*                    Ignore claims where 40011 = "N", and 40012 & 40018 are  *
.*                    zero amounts (delete patedsaf record)                   *
.*        13/10/2004  Steve Armstrong     CAR 54283                           *
.*                    Updated all Numeric fields to be initialised with zeroes*
.*        11/10/2004  Steve Armstrong     CAR 54208                           *
.*                    Mods to use TITEMNO to load 120007 instead of MMCODE    *
.*        11/10/2004  Steve Armstrong     CAR 54180                           *
.*                    Mods to clear FORM8P2 for each PSG segment              *
.*        07/10/2004  Jill Habasque       CAR 53798                           *
.*                    Mods to check for IBCNMHOS                              *
.*        23/09/2004  Steve Armstrong     CAR 53737                           *
.*                    Mods for FORM 6.2 instead of FORM 8.2 for daily         *
.*                    rate (120011).                                          *
.*                    Mods to default 180007 to "0000" instead of blanks.     *
.*                    Mods to return accommodation days as "1" for same day   *
.*                    stay instead of "0" (60012).                            *
.*        16/09/2004  Steve Armstrong     CAR 53557                           *
.*                    Mods to provide remaining NCG segments as blanks (for   *
.*                    ADT33)                                                  *
.*                    Steve Armstrong     CAR 53569                           *
.*                    Fixed check on patchcaf date for ACARE (60005)          *
.*        10/09/2004  Steve Armstrong     CAR 53402                           *
.*                    Changed to use DTR index 4 instead of 3 (due to changes *
.*                    between release 6 and 9).                               *
.*                    Also changed read on patmchgf to use effective date     *
.*                    (change between release 6 and 9).                       *
.*                    Also mods for FORM 6.2 instead of FORM 8.2 for daily    *
.*                    rate (110013).                                          *
.*                    Also fixed default marital status to "not stated" (6)   *
.*                    for 50018.                                              *
.*        21/08/2004  Steve Armstrong     CAR 52899                           *
.*                    Mods for ACD to get CMBS items from patdtraf instead of *
.*                    patmmbsf.                                               *
.*                    Mods for PSG to only include theatre items where the    *
.*                    admission type is not "medical".                        *
.*                    Mods for sameday/intended sameday patients where        *
.*                    there is no time in theatre relating to an MBS item on  *
.*                    patmmbsf.  Instead of sending anaesthetic type code     *
.*                    (140012) as blank, changed to send as "N".              *
.*                    Also removed BRANCH on EXIT after call to G1ICD000 as   *
.*                    exit does not appear to be set.                         *
.*        13/08/2004  Steve Armstrong     CAR 52656                           *
.*                    Fixed population of 10006 for re-extraction             *
.*        03/08/2004  Steve Armstrong     CAR 52322                           *
.*                    Mods to remove characters from procedure codes          *
.*                    (140005 & 150005). Also added code for 140011 & 140012  *
.*                    which had been left out in re-write of PSG/MSG.         *
.*        28/07/2004  Steve Armstrong     CAR 51477                           *
.*                    Mods to separate out theatre procedures for different   *
.*                    days - multiple PSG/MSG combinations                    *
.*        26/07/2004  Steve Armstrong     CAR 52064                           *
.*                    Removed reference to "OPTION".  Also changed PERFORM to *
.*                    CALL when getting ICD10 codes in WRDMG000.              *
.*                    Steve Armstrong     CAR 50708                           *
.*                    Mods to change fields 110007/110008 and 120006/120007   *
.*                    to use "O"ther/"MED" instead of populating with ICD     *
.*                    codes where Cat A, Assoc # = 6.                         *
.******************************************************************************
.
.******************************************************************************
.*                                  WRHDR000              Called by: VALD0000 *
.*                            Write Header Details                 & WRIT0000 *
.******************************************************************************
.
WRHDR000  BRANCH    VALDFLG,WRHDR999        * Only validating data, exit
.
          UNPACK    SP70,ED010005,ED010006,ED010007
          UNPACK    SP70,ED010008,ED010009,ED010010,ED010011,ED010012
          REP       " 0",ED010006
          REP       " 0",ED010008
          REP       " 0",ED010011
.
          UNPACK    VERSION,ANS,KEY1,ANS,ANS,KEY1A,ANS,DIM2
          PACK      ED010005,KEY1,KEY1A,DIM2,SP10
.
          MOVE      BATCHNO,ED010007
          REP       " 0",ED010007           * Providers batch no
.
          MOVE      PTFXTFLG,ED010010
.
.>>>>>>>  The following code has been commented out as we are unsure of why
.         you would require the segments on a single line.
.
.         MATCH     ANST,ED010010
.         IF        @EQUAL
.           MOVE      ONE,TESTFLG
.         ENDIF
.
.         MATCH     ANSP,ED010010
.         IF        @EQUAL
.           MOVE      ZERO,TESTFLG
.         ENDIF
.
          CLOCK     TIME,KEY5
          UNPACK    KEY5,CHOUR,KEY1,CMIN    * Current time
          PACK      ED010011,CHOUR,CMIN
.
          PACK      ED010012,CDD,CMM,CCC,CYY    * Current date
          REP       " 0",ED010012
.
          BRANCH    EXTRFLAG,WRHDR100            * ADT33
.
          IF        EXTRFLAG=0 & (OPTION=1|OPTION=2 & RESUBMN=0)
            IF        OPTION = 2
              MOVE      TMPCNT,ED010006
            ELSE
              MOVE      RECARRY[COUNT],ED010006
            ENDIF
            REP       " 0",ED010006
            REP       " 0",ED010008
          ELSE
            MOVE      TMPCNT,ED010006
            REP       " 0",ED010006
            UNPACK    PTEHTMBC,DIM2,KEY1,DIM2A,DIM3
            PACK      ED010008,DIM2,DIM2A
            REP       " 0",ED010008
            UNPACK    PTEHDTBC,DIM4,DIM2,DIM2A
            PACK      ED010009,DIM2A,DIM2,DIM4
            REP       " 0",ED010009
          ENDIF
.
WRHDR100  IF        TESTFLG = 1
            WRITE     EXTFILE1,SEQ;ED010001,ED010002,ED010003,ED010004,ED010005:
                                   ED010006,ED010007,ED010008:
                                   ED010009,ED010010,ED010011,ED010012
          ELSE
            WRITE     EXTFILE1,SEQ;ED010001,ED010002,ED010003,ED010004,ED010005:
                                   ED010006,ED010007,ED010008:
                                   ED010009,ED010010,ED010011,ED010012;
          ENDIF
.
WRHDR999  RETURN
+
.******************************************************************************
.*                                  WRPRO000              Called by: VALD0000 *
.*                           Write Provider Details                & WRIT0000 *
.******************************************************************************
.
WRPRO000  UNPACK    SP70,ED020003,ED020004,ED020006,ED020007,ED020008
          PACK      ED020005,SP70,SP70
          REP       " 0",ED020006
          REP       " 0",ED020007
          REP       " 0",ED020008
.
          BRANCH    IBCNMHOS,WRPRO100
.
          MATCH     SP10,CAPPRVNO
          IF        @EQUAL
            MOVE      "Blank hospital approval number",ERRMSG
            CALL      ERMSG000              * Print an error message
          ENDIF
          BRANCH    VALDFLG,WRPRO999        * Only validating data, exit
.
          MOVE      CAPPRVNO,ED020003       * Hospital no
          PACK      ED020004,CNAME,SP30     * Hospital name
          GOTO      WRPRO200
.
WRPRO100  MATCH     SP10,PTHSAPPR
          IF        @EQUAL
            MOVE      "Blank hospital approval number",ERRMSG
            CALL      ERMSG000              * Print an error message
          ENDIF
          BRANCH    VALDFLG,WRPRO999        * Only validating data, exit
.
          MOVE      PTHSAPPR,ED020003       * Hospital no
          PACK      ED020004,PTHSNAME,SP30  * Hospital name
.
.         Check if this is a private or public provider and whether or not
.         it is a day facility
.
WRPRO200  IF        PTCNDFIN = 0
            IF        CHOSTYP = 0
              MOVE      TWO,ED020008        * private - not day facility
            ELSE
              IF        CHOSTYP = 1
                MOVE      ONE,ED020008      * public - not day facility
              ENDIF
            ENDIF
          ELSE
            IF        CHOSTYP = 0
              MOVE      THREE,ED020008      * private day facility
            ELSE
              IF        CHOSTYP = 1
                MOVE      FOUR,ED020008     * public day facility
              ENDIF
            ENDIF
          ENDIF
.
          IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;ED020001,ED020002,ED020003,ED020004,ED020005:
                                   ED020006,ED020007,ED020008
          ELSE
            WRITE     EXTFILE1,SEQ;ED020001,ED020002,ED020003,ED020004,ED020005:
                                   ED020006,ED020007,ED020008;
          ENDIF
.
WRPRO999  RETURN
+
.******************************************************************************
.*                                  WRINS000              Called by: VALD0000 *
.*                            Write Insurer Details                & WRIT0000 *
.******************************************************************************
.
WRINS000  BRANCH    VALDFLG,WRINS999        * Only validating data, exit
.
          UNPACK    SP70,ED030003,ED030004
          PACK      ED030005,SP70,SP70
.
.         If ADT10, then get the health fund using the health fund code on 
.         patedsaf.  If ADT33, then the Health Fund record will already have
.         been read.
.
          IF        EXTRFLAG = 0
            PACK      KEY14,PTESHFND,ZERO4,SP20
            CALL      RDFUND1  
            BRANCH    OVRCD,WRINS200          * health fund missing
          ENDIF
.
          MOVE      HCODE,ED030003          *** CAR 20135
          MOVE      HFNAME,ED030004
.
WRINS200  IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;ED030001,ED030002,ED030003,ED030004:
                                   ED030005 
          ELSE
            WRITE     EXTFILE1,SEQ;ED030001,ED030002,ED030003,ED030004:
                                   ED030005;
          ENDIF
.
WRINS999  RETURN
+
.******************************************************************************
.*                                  WRDPS000              Called by: VALD0000 *
.*                           Write Encryption Data                 & WRIT0000 *
.******************************************************************************
.
WRDPS000  BRANCH    VALDFLG,WRDPS999        * Only validating data
.
          UNPACK    SP70,ED031003
.
          IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;ED031001,ED031002,ED031003
          ELSE
            WRITE     EXTFILE1,SEQ;ED031001,ED031002,ED031003;
          ENDIF
.
WRDPS999  RETURN
+
.******************************************************************************
.*                                  WRCID000              Called by: VALD0000 *
.*                           Write Claim Id Details                & WRIT0000 *
.******************************************************************************
.
WRCID000  UNPACK    SP70,ED040003,ED040004,ED040005,ED040006,ED040007,ED040008 
          UNPACK    SP70,ED040009,ED040010,ED040011,ED040012,ED040013,ED040014 
          UNPACK    SP70,ED040015,ED040016,ED040017,ED040018 
          REP       " 0",ED040003
          REP       " 0",ED040007
          REP       " 0",ED040010
          REP       " 0",ED040012
          REP       " 0",ED040016
          REP       " 0",ED040017
          REP       " 0",ED040018
.
          BRANCH    VALDFLG,WRCID230             * Only validating data
.
.         Load the rest of WCID fields
.
          MOVE      TOTRECCT,ED040003            * load claim sequential no.
          REP       " 0",ED040003
          PACK      ED040004,INVNO,SP20          * load invoice number
          SQUEEZE   ED040004
          PACK      ED040004,ED040004,SP20
.
.         Ignore setting fields 40005 through 40010 for ADT33
.
          BRANCH    EXTRFLAG,WRCID220            * ADT33
.
.         Loop through the invoice file for invoices for this admission no. to
.         determine whether this is a contiguous claim or not.
.
.         The following logic applies:
.         One invoice (discharged), set to "N"
.         One invoice (not discharged), set to "F"
.         First of two or more invoices, set to "F"
.         Last of two or more invoices (discharged), set to "L"
.         Last of two or more invoices (not discharged), set to "M"
.         Not first or last of more than two invoices, set to "M"
.
          MOVE      SP8,PREVINVN            * initialise previous invoice no.
          MOVE      SP8,SAVINVNO            * initialise saved invoice no.
          MOVE      ZERO,CURNTINV           * initialise current inv. for admiss
          MOVE      ZERO,INVCOUNT           * initialise inv. count for admiss.
          MOVE      ANSN,ED040005           * Default invoice to not in series
.
.         Save key for current patedsaf (index 1) record so we can
.         reposition later
.
          PACK      SAVKEY32,PTESFLAG,PTESHFND,PTESADMN,PTESINVN,PTESBATN
.
          PACK      KEY16,ADMINO,SP20
          CALL      RDSINV3                      * position on admission no.
WRCID050  CALL      RDKINV3                      * read next record
          BRANCH    OVRCD,WRCID100               * eof - finished looping
.
          MATCH     ADMINO,PINVADM               * same admission still ?
          GOTO      WRCID100 IF NOT EQUAL        * no - finished looping
.
.         Make sure the Invoice in not a Patient Portion Invoice       *I-82516
.
          COMPARE   TWO,PINVTYP                                        *I-82516
          GOTO      WRCID050 IF EQUAL            * bypass it if it is. *I-82516
.
.         Make sure the Invoice in not "fully credited"               *I-146742
.
          MATCH     "1",PTINCRST                                      *I-146742
          GOTO      WRCID050 IF EQUAL            * bypass it if it is.*I-146742
.
.         Make sure that this is not a zero amount invoice
.
          COMPARE   ZERO,PINVAMT                 * zero invoice ?
          GOTO      WRCID050 IF EQUAL            * yes - ignore
.
.         Make sure that the invoice was raised electronically (exists on
.         patedsaf)
.
          PACK      KEY16,PINVNO,SP20
          CALL      RSPTEDS2                     * position on invoice
          CALL      RKPTEDS2                     * read next record
          BRANCH    OVRCD,WRCID050               * eof - not electronic invoice
.
          MATCH     PINVNO,PTESINVN              * same invoice still ?
          GOTO      WRCID050 IF NOT EQUAL        * no - not electronic invoice
.
.         An invoice for the admission has been found.
.         Check if this is the same invoice that we are currently processing.
.         If so, save the counter for the invoice position. We also need to
.         save the previous invoice number in case this is a contiguous claim
.         which is either "M"iddle or "L"ast.
.
          CALL      REPOS000                     * reposition on patedsaf record
.
          ADD       ONE,INVCOUNT                 * increment invoice counter
          MATCH     PTESINVN,PINVNO              * same invoice number ?
          IF        @EQUAL
            MOVE      INVCOUNT,CURNTINV          * yes
            MOVE      SAVINVNO,PREVINVN          * save the previous invoice no.
          ENDIF
          MOVE      PINVNO,SAVINVNO              * save invoice number
.
          GOTO      WRCID050                     * get next invoice record
.
.         All the invoice records for the admission have been read, so now
.         determine where the current invoice lies relative to any other
.         invoices for the admission.
.
WRCID100  CALL      REPOS000                     * reposition on patedsaf record
.
          IF        INVCOUNT = 1 & CURNTINV = 1
            IF        ASTAT = 3
              MOVE      ANSN,ED040005            * one invoice, discharged
            ELSE
              MOVE      ANSF,ED040005            * one invoice, not discharged
            ENDIF
            GOTO      WRCID200
          ENDIF
.
.         If there is more than one invoice for the admission, and the current
.         invoice is the first, then set as "F"irst
.
          IF        (CURNTINV = 1) & (INVCOUNT >= 2)
            MOVE      ANSF,ED040005
            GOTO      WRCID200
          ENDIF
.
.         If there is more than one invoice for the admission, and the current
.         invoice is the last, then set as "M"iddle or ""L"ast according
.         to discharge status
.
          IF        (INVCOUNT >= 2) & (CURNTINV = INVCOUNT)
            IF        ASTAT = 3
              MOVE      ANSL,ED040005            * last invoice, discharged
            ELSE
              MOVE      ANSM,ED040005            * last invoice, not discharged
            ENDIF
            GOTO      WRCID200
          ENDIF
.
.         If the current invoice is not the first or the last invoice for the
.         admission, then set to "M"iddle
.
          IF      (CURNTINV > 1) & (CURNTINV < INVCOUNT)
            MOVE      ANSM,ED040005              * middle invoice
            GOTO      WRCID200
          ENDIF
.
.         Now reposition on the invoice record that we are currently processing,
.         to restore the invoice fields.
.
WRCID200  MOVE      PTESINVN,KEY8
          CALL      RDINV1
.
.         Check if this is a resubmission record (previous batch number is
.         not blank) - only for ADT10
.
          MATCH     SP8,PTESPBAT
          IF        !@EQUAL
            MOVE      ANSR,ED040006              * set for resubmission
.
.           Set fields 040007, 040008, 040009 & 040010
.
            MOVE      PTESPBAT,KEY8
            CALL      PBAT0000                   * get previous batch details
            GOTO      WRCID220
          ENDIF
.
.         Not a resubmission, so check if 040005 is "M"iddle or "L"ast invoice
.         in a contiguous claim
.
          MATCH     ANSM,ED040005
          IF        !@EQUAL
            MATCH     ANSL,ED040005
            IF        !@EQUAL
              GOTO      WRCID220
            ENDIF
          ENDIF
.
.         We are processing a "M"iddle or "L"ast invoice, so we need to set the
.         previous invoice's claim details
.
          MATCH      SP8,PREVINVN                * previous invoice blank ?
          GOTO       WRCID220 IF EQUAL           * yes
.
          PACK       KEY24,ADMINO,PREVINVN,TILDA30
          CALL       RSPTEDS4                    * position in file
WRCID205  CALL       RPPTEDS4                    * read previous record
          BRANCH     OVRCD,WRCID210              * eof - shouldn't happen
.
          MOVE       ADMINO,DIM8
          MATCH      DIM8,PTESADMN               * same admission still ?
          GOTO       WRCID210 IF NOT EQUAL       * no
.
          MATCH      PREVINVN,PTESINVN           * same invoice still ?
          GOTO       WRCID210 IF NOT EQUAL       * no
.
          COMPARE    TWO,PTESFLAG                * record sent ?
          GOTO       WRCID205 IF LESS            * no
.
.         We have the last claim sent for this admission, so use the batch
.         number to get the claim date/time (and set 040007, 040008, 040009
.         & 040010).
.
          MOVE       PTESBATN,KEY8               * set patebhaf key
          CALL       PBAT0000                    * get previous batch details
.
.         Check if the previous claim was "N" (not in a series) or "L" (last
.         in a series).  If this is the case, then the current claim we are
.         processing is an additional unexpected claim, so set the extract
.         field.
.
          MATCH      ANSN,PTESCCFL
          IF         !@EQUAL
            MATCH      ANSL,PTESCCFL
            GOTO       WRCID210 IF NOT EQUAL
          ENDIF
          MOVE       ANSA,ED040006               * set previous claim proc.
.
WRCID210  CALL      REPOS000                     * reposition on patedsaf record
.
WRCID220  WRITE     EXTFILE1,SEQ;ED040001,ED040002,ED040003,ED040004:
                                 ED040005,ED040006,ED040007,ED040008:
                                 ED040009,ED040010;
.
WRCID230  MOVE      ANSN,ED040011           * Default deposit flag to no
          MOVE      ZERO,FORM8P2            * Clear the deposit amount
          PACK      KEY23,ADMINO,INVNO,FIVE,SP30
          CALL      RDSDTRN4                * Position on & read a DTR file
WRCID250  CALL      RDKDTRN4                  record
          BRANCH    OVRCD,WRCID300
.
          MATCH     ADMINO,TADMNO
          GOTO      WRCID300 IF NOT EQUAL   * Different admin no
.
          MATCH     INVNO,TREF
          GOTO      WRCID300 IF NOT EQUAL   * Different invoice no
.
          COMPARE   FIVE,TRECTYPE
          GOTO      WRCID300 IF NOT EQUAL   * Not a cash receipt record
.
          MATCH     SP3,TDEPTYP             * blank deposit type ?
          GOTO      WRCID250 IF NOT EQUAL   * Not a deposit, get next
.
          ADD       TPATAMTT,FORM8P2        * Increment the deposit amount
          GOTO      WRCID250
.
WRCID300  COMPARE   ZERO,FORM8P2            * deposit zero ?
          IF        !@EQUAL
            MOVE      ANSY,ED040011         * no - set for Deposit payment
          ENDIF
          MULT      "-1",FORM8P2
          CALL      FRNTL000                * Format numeric totals
.
          MOVE      KEY9,ED040012
          MOVE      ANSN,ED040013
.
          BRANCH    VALDFLG,WRCID350
.
          WRITE     EXTFILE1,SEQ;ED040011,ED040012,ED040013;
.
WRCID350  MOVE      ANSN,ED040014           * Default WCO flag to no
          MOVE      ANSN,ED040015           * Default VET flag to no
          PACK      KEY5,ANSC,ANSL,ACLAIM
          CALL      RDCODE1                 * Read the codes file
          IF        OVRCD=1
            MOVE      "Claim type not set up for admission",ERRMSG
            CALL      ERMSG000              * Print an error message
          ENDIF
.
          BRANCH    VALDFLG,WRCID500        * Only validating data
.
          MOVE      ONE,FORM1
WRCID400  COMPARE   FORM1,FIVE
          GOTO      WRCID450 IF LESS        * 5 < counter
.
          MOVE      SP1,DIM1
          LOAD      DIM1,FORM1,TCINDC1,TCINDC2,TCINDC3,TCINDC4,TCINDC5
          MATCH     ANSV,DIM1
          IF        @EQUAL
            MOVE      "Y",ED040015          * Veterian affairs patient
            GOTO      WRCID450
          ENDIF
.
          MATCH     ANSW,DIM1
          IF        @EQUAL
            MOVE      "Y",ED040014          * Workers comp patient
            GOTO      WRCID450
          ENDIF
.
          ADD       ONE,FORM1
          GOTO      WRCID400
.
WRCID450  WRITE     EXTFILE1,SEQ;ED040014,ED040015;
.
WRCID500  MOVE      SP1,ANS
.                                             * Total hospital charge *C-146742
          ASSIGN    PINVAMT+PINVJOUR+PTINCRTT,INVAMTCT
          MOVE      INVAMTCT,KEY10
          UNPACK    KEY10,KEY7,KEY1,KEY2
          PACK      KEY9,KEY7,KEY2
          REP       " 0",KEY9
.
          MOVE      KEY9,ED040016
          REP       " 0",ED040017
          MOVE      KEY9,ED040018
.
.         If there is no deposit (40011 = "N") and the values for
.         Deposit amount (40012) and Total Charge this Claim (40018)
.         are both zero, then this claim should not be sent (ADT10 validation
.         only).
.         CAR 54427
.
          IF        EXTRFLAG = 0 & VALDFLG = 1
            MOVE      ZERO,EXIT
            PACK      KEY6,PTESHFND
            CALL      RDPTFX11
            BRANCH    OVRCD,WRCID550             * read health fund extn record
.
            MATCH     "1",PTFXZINV
            GOTO      WRCID600 IF EQUAL          * don't remove zero invoices
.
WRCID550    MATCH     ANSN,ED040011              * any deposit ?
            IF        @EQUAL
              MATCH     "000000000",ED040012     * no - zero deposit amount ?
              IF        @EQUAL
                MATCH     "000000000",ED040018   * yes - zero total claim ?
                IF        @EQUAL
                  MOVE      SAVKEY32,KEY32       * yes - delete claim
                  CALL      DEPTEDS1
                  MOVE      ONE,EXIT
                ENDIF
              ENDIF
            ENDIF
          ENDIF
.
WRCID600  BRANCH    VALDFLG,WRCID999        * Only validating data - exit
.
          IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;ED040016,ED040017,ED040018
          ELSE
            WRITE     EXTFILE1,SEQ;ED040016,ED040017,ED040018;
          ENDIF
.
WRCID999  RETURN
+
.******************************************************************************
.*                                  WRPAT000              Called by: VALD0000 *
.*                            Write Patient Details                & WRIT0000 *
.******************************************************************************
.
WRPAT000  UNPACK    SP70,ED050003,ED050004,ED050009,ED050010,ED050011
          UNPACK    SP70,ED050012,ED050013,ED050015,ED050016,ED050017,ED050018
          REP       " 0",ED050017
          REP       " 0",ED050018
.
          MATCH     SP10,AFNDMM
          IF        @EQUAL
            MOVE      "Blank health fund membership number",ERRMSG
            CALL      ERMSG000              * Print an error message
          ENDIF
          PACK      ED050003,AFNDMM,SP20    * Health fund membership no
.
          MOVE      PMEDI,ED050004          * medicare card number
.
          MOVE      PPOST,ED050009             * post code
.
.         Extract the patient's first given name and second initial from PGNAME
.
          SCAN      SP1,PGNAME
          IF        @EQUAL
            MOVEFPTR  PGNAME,CHARPOSN
            SUB       ONE,CHARPOSN
.
.           Get the first character of the second name (if present)
.
WRPAT100    BUMP      PGNAME                     * move to next character
            GOTO      WRPAT200 IF EOS            * end of string
.
.           Check that the character is A-Z, otherwise get next character
.
            MOVE      PGNAME,ANS
            MATCH     CHARACTA,ANS
            GOTO      WRPAT100 IF LESS
.
            MATCH     ANS,CHARACTZ
            GOTO      WRPAT100 IF LESS
.
.           Valid second initial found
.
            MOVE      PGNAME,ED050011          * second initial
.
WRPAT200    RESET     PGNAME
            MOVE      PGNAME,DIM30
            SETLPTR   DIM30,CHARPOSN
            PACK      ED050010,DIM30,SP30        * first given name
          ELSE
            RESET     PGNAME
            MATCH     SP25,PGNAME
            IF        !@EQUAL
              PACK      ED050010,PGNAME,SP30     * first given name
            ENDIF
          ENDIF
.
          PACK      ED050012,PSNAME,SP30       * Surname
.
          UNPACK    PTMIDFAS,DIM4,DIM2,DIM2A
          PACK      ED050013,DIM2A,DIM2,DIM4
.
          MOVE      PSEX,KEY1
          REP       "M1F2U0",KEY1              * Patient sex
.
          MATCH     "1",KEY1
          IF        !@EQUAL
            MATCH     "2",KEY1
            IF        !@EQUAL
              MATCH     "0",KEY1
              IF        !@EQUAL
                MOVE      "Invalid sex type",ERRMSG
                CALL      ERMSG000            * Print an error message
              ENDIF
            ENDIF
          ENDIF
.
          MOVE      KEY1,ED050015
.
          UNPACK    PBDATE,CCENT,CYEAR,CMON,CDAY * DOB
          PACK      ED050016,CDAY,CMON,CCENT,CYEAR
.
          BRANCH    VALDFLG,WRPAT500        * Only validating data
.
          WRITE     EXTFILE1,SEQ;ED050001,ED050002,ED050003,ED050004,SP30,SP1:
                                 SP20,SP8,SP4,ED050009,ED050010:
                                 ED050011,ED050012,ED050013,ED050015,ED050016;
.
          MOVE      SP4,KEY4
WRPAT500  PACK      AGEDATE,ADATE
          CALL      CALCAGE                 * Calculate age
          IF        PSAGEDAY<29
            MOVE      ZERO,FORM4
            UNPACK    ABWGHT,DIM2,KEY4
            MOVE      KEY4,FORM4
            IF        FORM4=0
              MOVE      "Missing an admission weight",ERRMSG
              CALL      ERMSG000            * Print an error message
            ENDIF
          ENDIF
          BRANCH    VALDFLG,WRPAT999        * Only validating data, exit
.
          REP       " 0",KEY4
          MOVE      KEY4,ED050017
          WRITE     EXTFILE1,SEQ;ED050017;
.
          MATCH     SP3,PMSTAT
          IF        !@EQUAL
            PACK      KEY5,ANSM,SP1,PMSTAT
            CALL      RDCODE1
            IF        OVRCD = 0
              MOVE      TCINDC2,ED050018
            ENDIF
          ENDIF
          REP       " 606",ED050018         * set to "not stated" if blank/zero
          IF        TESTFLG = 1
            WRITE     EXTFILE1,SEQ;ED050018
          ELSE
            WRITE     EXTFILE1,SEQ;ED050018;
          ENDIF
.
WRPAT999  RETURN
+
.******************************************************************************
.*                                  WREPD000              Called by: VALD0000 *
.*                            Write Episode Details                & WRIT0000 *
.******************************************************************************
.
WREPD000  BRANCH    VALDFLG,WREPD100        * Only validating data
.
          UNPACK    SP70,ED060003,ED060004,ED060005,ED060006,ED060007
          UNPACK    SP70,ED060009,ED060010,ED060011,ED060012,ED060013
          UNPACK    SP70,ED060014,ED060015
          REP       " 0",ED060007
          REP       " 0",ED060012
          REP       " 0",ED060013
          REP       " 0",ED060014
          REP       " 0",ED060015
.
          PACK      ED060003,ADMINO,SP20
          SQUEEZE   ED060003
          PACK      ED060003,ED060003,SP20
          WRITE     EXTFILE1,SEQ;ED060001,ED060002,ED060003;
.
          MOVE      SP2,KEY2
WREPD100  MATCH     SP3,ATYPE
          IF        @EQUAL
            MOVE      "Blank admission type",ERRMSG
            CALL      ERMSG000              * Print an error message
            GOTO      WREPD200
          ENDIF
.
          PACK      KEY5,ANSA,SP1,ATYPE
          CALL      RDCODE1                 * Read a codes file record
          IF        OVRCD=1
            MOVE      "Missing admission type",ERRMSG
            CALL      ERMSG000              * Print an error message
            GOTO      WREPD200
          ENDIF
.
          IF        TCFORM6<1 | TCFORM6>14
            MOVE  "Invalid PCS episode type code (Category A, assoc no)",ERRMSG
            CALL      ERMSG000              * Print an error message
            GOTO      WREPD200
          ENDIF
.
          LOAD      ED060004,TCFORM6,CATD1,CATD2,CATD3,CATD4,CATAM:
                                 CATME,CATSU,CATAS,CATOB,CATPS:
                                 CATRE,CATNH,CATEC,CATOT * PCS episode type
.
WREPD200  IF        VALDFLG<>1
            WRITE     EXTFILE1,SEQ;ED060004;
          ENDIF
.
          MOVE      ACARE,ACODE             * Admin file care class
          PACK      KEY24,ADMINO,TILDA30
          CALL      RDSCHCO1                * Position on & read a code changes
WREPD300  CALL      RDPCHCO1                  file record
          BRANCH    OVRCD,WREPD400
.
          MATCH     ADMINO,CHADMN
          GOTO      WREPD400 IF NOT EQUAL   * Different admin no
.
          MATCH     CHDATE,PINVDTE
          GOTO      WREPD400 IF NOT LESS    * Invoice date => code change date
.
          MATCH     "CC",CHCATG
          GOTO      WREPD300 IF NOT EQUAL   * Not the care class category
.
          MOVE      CHCODE,ACODE            * Code changes file care class
.
WREPD400  MATCH     SP3,ACODE
          IF        @EQUAL
            MOVE      "Blank care class code",ERRMSG
            CALL      ERMSG000              * Print an error message
            GOTO      WREPD500
          ENDIF
.
          PACK      KEY5,ANSC,ANSC,ACODE
          CALL      RDCODE1                 * Read a codes file record
          IF        OVRCD=1
            MOVE      "Missing care class code",ERRMSG
            CALL      ERMSG000              * Print an error message
            GOTO      WREPD500
          ENDIF
.
          IF        TCFORM6<1 | TCFORM6>11
     MOVE "Invalid type of episode of care code (Category CC, assoc no)",ERRMSG
            CALL      ERMSG000              * Print an error message
            GOTO      WREPD500
          ENDIF
.
          LOAD      ED060005,TCFORM6,TEN,TWENTY1,TWENTY2,TWENTY3,THIRTY1:
                                 THIRTY2,THIRTY3,FORTY,FIFTY,SIXTY,TEN
.
WREPD500  BRANCH    VALDFLG,WREPD600        * Only validating data
.
          MOVE      ANSA,ED060006           * Default accom status to admitted
          WRITE     EXTFILE1,SEQ;ED060005,ED060006;
.
          CALL      PATGILOS                * Get intended LOS
          MOVE      KEY1,ED060007
          UNPACK    ADATE,CCENT,CYEAR,CMON,CDAY * Admin date
          PACK      ED060009,CDAY,CMON,CCENT,CYEAR 
          WRITE     EXTFILE1,SEQ;ED060007,ZERO4,ED060009;
.
          MOVE      SP2,KEY2
WREPD600  MATCH     SP8,DDATE
          GOTO      WREPD700 IF EQUAL       * Patient not discharged
.
          MOVE      "09",KEY2               * Default separation mode to other
          MOVE      CATDD,TCODE
          LOAD      TCODE,PTCNDRSM,CATD,CATDD
          MOVE      DDEST,ACODE
          LOAD      ACODE,PTCNDRSM,DSTAT,DDEST
          MATCH     SP3,ACODE
          GOTO      WREPD700 IF EQUAL       * Blank separation mode
.
          PACK      KEY5,TCODE,ACODE
          CALL      RDCODE1                 * Read a codes file record
          BRANCH    OVRCD,WREPD700
.
          TYPE      TCINDC5
          IF        !@EQUAL
            MOVE      "Invalid type of separation mode",ERRMSG
            CALL      ERMSG000              * Print an error message
            GOTO      WREPD700
          ENDIF
.
          MOVE      ZERO,FORM1
          MOVE      TCINDC5,FORM1
          IF        FORM1<1 | FORM1>9
            MOVE      "Invalid type of separation mode",ERRMSG
            CALL      ERMSG000              * Print an error message
            GOTO      WREPD700
          ENDIF
.
          PACK      KEY2,ZERO,TCINDC5       * Separation mode
WREPD700  BRANCH    VALDFLG,WREPD800        * Only validating data
.
          UNPACK    DDATE,CCENT,CYEAR,CMON,CDAY * Disch date
          PACK      ED060010,CDAY,CMON,CCENT,CYEAR
          MOVE      KEY2,ED060011
          WRITE     EXTFILE1,SEQ;ED060010,ED060011;
.
          MOVE      ADATE,FROMDATE          * From date is the admin date
          UNPACK    CURDTE8,TODATE          * Default to date to current date
          MATCH     SP8,DDATE
          IF        !@EQUAL
            MOVE      DDATE,TODATE          * To date is the disch date
          ENDIF
          MOVE      ONE,NHOSDAYC            * set sameday to return LOS = 1
          CALL      NHOSPDAY                * Calculate no of days in hospital
          MOVE      NBRDAYS,KEY4
          REP       " 0",KEY4
          MOVE      KEY4,ED060012
.
          UNPACK    ATIME,CHOUR,KEY1,CMIN,KEY3 * Admin time
          PACK      ED060013,CHOUR,CMIN
          REP       " 0",ED060013
.
          WRITE     EXTFILE1,SEQ;ED060012,ED060013;
.
          MOVE      SP4,KEY4
          MATCH     SP8,DTIME
          IF        !@EQUAL
            UNPACK    DTIME,CHOUR,KEY1,CMIN,KEY3 * Disch time
            PACK      KEY4,CHOUR,CMIN
            REP       " 0",KEY4
          ENDIF
.
          MOVE      KEY4,ED060014
.
          WRITE     EXTFILE1,SEQ;ED060014;
.
WREPD800  MOVE      NINE,KEY1               * Default source of referral
          PACK      KEY5,ANSS,SP1,ASRCE
          CALL      RDCODE1                 * Read a codes file record
          IF        OVRCD=1
            MOVE      "Missing source of referral data",ERRMSG
            CALL      ERMSG000              * Print an error message
            GOTO      WREPD850
          ENDIF
.
          TYPE      TCINDC3                 * Is numeric ?
          IF        @EQUAL
            MOVE      TCINDC3,FORM1
            IF        FORM1<0 | FORM1>9 | FORM1=3
              MOVE      "Invalid source of referral",ERRMSG
              CALL      ERMSG000              * Print an error message
              GOTO      WREPD850
            ELSE
              MOVE      TCINDC3,KEY1
            ENDIF
          ELSE
            MOVE      "Invalid source of referral",ERRMSG
            CALL      ERMSG000              * Print an error message
            GOTO      WREPD850
          ENDIF
.
WREPD850  BRANCH    VALDFLG,WREPD999        * Only validating data, exit
.
          MOVE      KEY1,ED060015
          IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;ED060015,ZERO2,SP1,ZERO2,SP1,ZERO
          ELSE
            WRITE     EXTFILE1,SEQ;ED060015,ZERO2,SP1,ZERO2,SP1,ZERO;
          ENDIF
.
WREPD999  RETURN
+
.******************************************************************************
.*                                  WRSVB000              Called by: VALD0000 *
.*                      Write Bundle/Single Value Details          & WRIT0000 *
.******************************************************************************
.
WRSVB000  BRANCH    VALDFLG,WRSVB999        * Only validating data, exit
.
          UNPACK    SP70,ED070003,ED070004,ED070005,ED070006,ED070007
          UNPACK    SP70,ED070008,ED070009
          REP       " 0",ED070005
          REP       " 0",ED070009
.
          COMPARE   ONE,INVRECCT
          GOTO      WRSVB999 IF NOT EQUAL   * Not the 1st invoice for admin
.
          COMPARE   ONE,PTINCMIX
          GOTO      WRSVB999 IF NOT EQUAL   * No casemix accom charge on invoice
.
          PACK      KEY9,PTMIPDRG,SP9       * Default casemix code to prov DRG
          MATCH     SP8,DDATE
          GOTO      WRSVB100 IF EQUAL       * Patient not discharged
.
          MATCH     DDATE,PINVDTE
          GOTO      WRSVB100 IF LESS        * Invoice date < disch date
.
          PACK      KEY9,PTDSDDRG,SP9       * Default casemix code to disch DRG
          MATCH     SP9,PTINCMCD
          IF        !@EQUAL
            MOVE      PTINCMCD,KEY9         * Default casemix code to invoice
          ENDIF
.
WRSVB100  PACK      KEY11,KEY9,SP20
          MATCH     SP20,KEY11
          GOTO      WRSVB999 IF EQUAL       * No casemix code
.
          PACK      CMCODE,KEY9,SP70
          PACK      KEY9,ACLAIM,AFUNDH
          CALL      GETCNEFF               * Get Contract Effective From
          BRANCH    EXIT,WRSVB999
.
          PACK      PTMIPCMX,CMCODE,SP70
          PACK      KEY18,ACLAIM,AFUNDH,CMCODE,SP70
          MOVE      ADATE,CEFFDATE
          LOAD      CEFFDATE,CNTRCEFR,ADATE,DDATE
.
.         If Contract Effective From is 'For Discharges From', Discharged date
.         is blank and TCINDC19=D, default Effective date to Current date
.
          IF        CNTRCEFR=2
            PACK      DDATE,DDATE,SP70
            MATCH     SP70,DDATE
            IF        @EQUAL
              PACK      KEY5,ANSC,ANSL,ACLAIM
              CALL      RDCODE1
              IF        OVRCD=0
                MATCH     "D",TCINDC19
                IF        @EQUAL
                  PACK      CEFFDATE,CCC,CYY,CMM,CDD,SP70
                  REP       " 0",CEFFDATE
                ENDIF
              ENDIF
            ENDIF
          ENDIF
.
          CALL      VALCMXFN              * get the contract ID (CONTRCID)
          BRANCH    EXIT,WRSVB999
.                                                                     *C-164567
          MOVE      ANSO,KEY1A              * default Code type - "Other"
          PACK      KEY4,KEY11
          PACK      KEY7,KEY4,SP10
          CALL      RSPTDGW1
          CALL      RKPTDGW1                * Read a DRG file record
          IF        OVRCD = 0
            MATCH     PTDWDRGC,KEY4
            IF        @EQUAL
              MOVE      ANSD,KEY1A          * Code type - DRG
              GOTO      WRSVB200
            ENDIF
          ENDIF
.                                           * read MSB items
....      PACK      KEY9,KEY8,SP20
          PACK      KEY17,KEY9,ADATE,SP70
          CALL      PATITMRD
          IF        OVRCD = 0
            MOVE      ANSC,KEY1A            * Code type - MBS
          ENDIF
.
WRSVB200  MOVE      ZERO,FORM8P2            * Reset fixed charge amount
          PACK      KEY23,ADMINO,INVNO,ONE,SP30
          CALL      RDSDTRN4                * Position on & read a DTR file
WRSVB300  CALL      RDKDTRN4                  record
          BRANCH    OVRCD,WRSVB400
.
          MATCH     ADMINO,TADMNO
          GOTO      WRSVB400 IF NOT EQUAL   * Different admin no
.
          MATCH     INVNO,TREF
          GOTO      WRSVB400 IF NOT EQUAL   * Different invoice no
.
          COMPARE   ONE,TRECTYPE
          GOTO      WRSVB400 IF NOT EQUAL   * Not an accom record
.
.         Increment the fixed charge amnt
.
          ASSIGN    FORM8P2+PTDTLSPT+PTDTLSRB,FORM8P2
          GOTO      WRSVB300
.
WRSVB400  COMPARE   ZERO,FORM8P2
          GOTO      WRSVB999 IF EQUAL       * No casemix accom charge on invoice
.
          CALL      FRNTL000                * Format numeric totals
          MOVE      KEY1A,ED070003
          MOVE      KEY11,ED070004
          MOVE      KEY9,ED070005
          MOVE      KEY1,ED070006
.
          UNPACK    INVFRDTE,CCENT,CYEAR,CMON,CDAY
          PACK      ED070007,CDAY,CMON,CCENT,CYEAR
.
          MOVE      CCENT,CC               * convert fromdate to julian day
          MOVE      CYEAR,YY
          MOVE      CMON,MM
          MOVE      CDAY,DD
          CALL      DMYCON
.
.         Loop through the "daily fee for inliers/high outliers" file (pathdfaf)
.         and get the maximum day for an inlier for the casemix code
.
          MOVE      KEY11,KEY9                   * reload casemix code
.
          PACK      KEY14,AFUNDH,AFNDTB
          CALL      RDFUND1                      * fund-table record found ?
          BRANCH    OVRCD,WRSVB999               * no - finish
.
          MOVE      ZERO,MAXMDAYS                * initialise max. days
.         
.         First check for inlier records using claim code, health fund,
.         health fund table type and casemix code.
.
          PACK      KEY31,CONTRCID,ACLAIM,AFUNDH,PTHFBCAT,KEY9,SP30
          CALL      RSPTHDF1                     * position in file
WRSVB500  CALL      RKPTHDF1                     * read next record
          BRANCH    OVRCD,WRSVB510               * eof - finished
.
          MATCH     CONTRCID,PTHDCNID            * same Contract ID ?
          GOTO      WRSVB510 IF NOT EQUAL        * no - finished
.
          MATCH     ACLAIM,PTHDCLMN              * same claim still ?
          GOTO      WRSVB510 IF NOT EQUAL        * no - finished
.
          MATCH     AFUNDH,PTHDHFND              * same fund still ?
          GOTO      WRSVB510 IF NOT EQUAL        * no - finished
.
          MATCH     PTHFBCAT,PTHDTABT            * same table type still ?
          GOTO      WRSVB510 IF NOT EQUAL        * no - finished
.
          MATCH     KEY9,PTHDCASM                * same casemix code still ?
          GOTO      WRSVB510 IF NOT EQUAL        * no - finished
.
          COMPARE   ONE,PTHDDTYP                 * inlier ?
          IF        @EQUAL
            COMPARE   PTHDEDAY,MAXMDAYS          * yes - greater end day ?
            IF        @LESS
              MOVE      PTHDEDAY,MAXMDAYS        * yes - save ending day
            ENDIF
          ENDIF
          GOTO      WRSVB500                     * get next record
.
WRSVB510  COMPARE   ZERO,MAXMDAYS                * inlier record found ?
          GOTO      WRSVB600 IF NOT EQUAL        * yes
.
.         Inlier record not found, so check using blank health fund, health
.         fund table type and casemix code       
.
          PACK      KEY31,CONTRCID,ACLAIM,SP6,SP3,KEY9,SP30 
          CALL      RSPTHDF1                     * position in file
WRSVB520  CALL      RKPTHDF1                     * read next record
          BRANCH    OVRCD,WRSVB530               * eof - finished
.
          MATCH     CONTRCID,PTHDCNID            * same Contract ID ?
          GOTO      WRSVB530 IF NOT EQUAL        * no - finished
.         
          MATCH     ACLAIM,PTHDCLMN              * same claim still ?
          GOTO      WRSVB530 IF NOT EQUAL        * no - finished
.         
          MATCH     SP6,PTHDHFND                 * blank fund still ?
          GOTO      WRSVB530 IF NOT EQUAL        * no - finished
.             
          MATCH     SP3,PTHDTABT                 * blank table type still ?
          GOTO      WRSVB530 IF NOT EQUAL        * no - finished
.         
          MATCH     KEY9,PTHDCASM                * same casemix code still ?
          GOTO      WRSVB530 IF NOT EQUAL        * no - finished
.
          COMPARE   ONE,PTHDDTYP                 * inlier ?
          IF        @EQUAL
            COMPARE   PTHDEDAY,MAXMDAYS          * yes - greater end day ?
            IF        @LESS
              MOVE      PTHDEDAY,MAXMDAYS        * yes - save ending day
            ENDIF
          ENDIF
          GOTO      WRSVB520                     * get next record
.
WRSVB530  COMPARE   ZERO,MAXMDAYS                * inlier record found ?
          GOTO      WRSVB600 IF NOT EQUAL        * yes
.
.         Inlier record not found, so check using default claim code, blank
.         health fund, health fund table type and casemix code
.
          PACK      KEY31,CONTRCID,PTCNDCLM,SP6,SP3,KEY9,SP30
          CALL      RSPTHDF1                     * position in file
WRSVB540  CALL      RKPTHDF1                     * read next record
          BRANCH    OVRCD,WRSVB550               * eof - finished
.         
          MATCH     CONTRCID,PTHDCNID            * same Contract ID ?
          GOTO      WRSVB550 IF NOT EQUAL        * no - finished
.         
          MATCH     PTCNDCLM,PTHDCLMN            * default claim still ?
          GOTO      WRSVB550 IF NOT EQUAL        * no - finished
.         
          MATCH     SP6,PTHDHFND                 * blank fund still ?
          GOTO      WRSVB550 IF NOT EQUAL        * no - finished
.             
          MATCH     SP3,PTHDTABT                 * blank table type still ?
          GOTO      WRSVB550 IF NOT EQUAL        * no - finished
.         
          MATCH     KEY9,PTHDCASM                * same casemix code still ?
          GOTO      WRSVB550 IF NOT EQUAL        * no - finished 
.         
          COMPARE   ONE,PTHDDTYP                 * inlier ?
          IF        @EQUAL
            COMPARE   PTHDEDAY,MAXMDAYS          * yes - greater end day ?
            IF        @LESS
              MOVE      PTHDEDAY,MAXMDAYS        * yes - save ending day
            ENDIF   
          ENDIF     
          GOTO      WRSVB540                     * get next record
.
.         See if a valid inlier record has been found, and if not, write
.         a warning for this invoice.
.
WRSVB550  COMPARE   ZERO,MAXMDAYS                * inlier record found ?
          IF        @EQUAL
            MOVE      "Inlier record not found",ERRMSG
            CALL      PRMSG000                   * print a warning message
          ENDIF
.
.         If the LOS is less than the maximum inlier days, then load LOS,
.         otherwise, load maximum inlier days.
.
WRSVB600  UNPACK    DDATE,CCENT,CYEAR,CMON,CDAY * Disch date
          MOVE      ADATE,FROMDATE          * From date is the admin date
          UNPACK    CURDTE8,TODATE          * Default to date to current date
          MATCH     SP8,DDATE
          IF        !@EQUAL
            MOVE      DDATE,TODATE          * To date is the disch date
          ENDIF
.
          CALL      NHOSPDAY                * Calculate no of days in hospital
.
.         If this is a same day patient, then NBRDAYS should be set to "1"
.         by NHOSPDAY.  In this case, there is no need to change JULDAY as
.         the "date to" (070008) should be set to the same date as the
.         "date from" (070007), even though the "No. of days" (070009) is
.         set to "1".
.
          MATCH     FROMDATE,TODATE         * same day patient ?
          IF        @EQUAL
            IF        NBRDAYS = 1 | NBRDAYS = 0
              MOVE      ONE,NBRDAYS
              MOVE      NBRDAYS,ED070009    * load LOS
              GOTO      WRSVB800
            ENDIF
          ENDIF
.
.         Not a same day patient
.         Where the number of days in hospital is less than the maximum
.         inlier days, the number of days should still be used, but
.         the ToDate should remain as the discharge date (or the
.         current date if the patient is still admitted), rather
.         than recalculating it based on the number of days (which
.         excludes leave days).
.
          IF        NBRDAYS < MAXMDAYS
            UNPACK    TODATE,CCENT,CYEAR,CMON,CDAY
            PACK      ED070008,CDAY,CMON,CCENT,CYEAR
            REP       " 0",ED070008
            MOVE      NBRDAYS,ED070009      * load LOS
            REP       " 0",ED070009
            GOTO      WRSVB900
          ENDIF
.
          ADD       MAXMDAYS,JULDAY        * increment julian day
          MOVE      MAXMDAYS,ED070009      * load max inlier LOS.
.
WRSVB800  REP       " 0",ED070009
.
          MOVE      JULDAY,JWKDAY         * convert julian day to gregorian date
          MOVE      JULYR,JWKYER
          MOVE      JULCC,JWKCC
          CALL      JULCON
          PACK      ED070008,DD,MM,CC,YY
          REP       " 0",ED070008
.
WRSVB900  IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;ED070001,ED070002,ED070003,ED070004:
                                   ED070005,ED070006,ED070007,ED070008:
                                   ED070009
          ELSE
            WRITE     EXTFILE1,SEQ;ED070001,ED070002,ED070003,ED070004:
                                   ED070005,ED070006,ED070007,ED070008:
                                   ED070009;
          ENDIF
.
WRSVB999  RETURN
+
.******************************************************************************
.*                                  WRANB000              Called by: VALD0000 *
.*                           Write Newborn Baby details            & WRIT0000 *
.******************************************************************************
.
WRANB000  UNPACK    SP70,ED080003,ED080004,ED080005,ED080006,ED080007
          UNPACK    SP70,ED080008,ED080009
          REP       " 0",ED080004
          REP       " 0",ED080008
.
          MOVE      ZERO,COUNTER                 * initialse newborn counter
          MOVE      ONE,FOUNDLNK                 * initialise flag for no link
.
.         First check if the patient that we are claiming for is a newborn.
.         The patient must be < 29 days old at admission date (from ED050017)
.
          COMPARE   TWENTY9,PSAGEDAY             * valid new born ?
          IF        @LESS
            MOVE      TWO,FOUNDLNK               * set flag (sending qual. baby)
            GOTO      WRANB170
          ENDIF
.
.         The patient is not a newborn, so check if we are processing
.         a claim for a female patient
.
          MATCH     "2",ED050015                 * female patient ?
          GOTO      WRANB900 IF NOT EQUAL        * no - finished
.
.         The patient is female, so check if there are any linked U/R's
.
          MOVE      PURNO,SAVPURNO               * save mother's U/R
          PACK      KEY16,PURNO,SP20
          CALL      RDSLINK1                     * position in link file for U/R
WRANB050  CALL      RDKLINK1                     * read next record
          BRANCH    OVRCD,WRANB800               * eof - finished
.
          MATCH     SAVPURNO,LINKFUR             * same U/R still ?
          GOTO      WRANB800 IF NOT EQUAL        * no - finished
.
.         A linked U/R has been found for this patient, so check if
.         the link reason code is the same as the default link reason (PTCNDLKR)
.
          MATCH     SP3,LINKREA                  * link reason blank ?
          GOTO      WRANB050 IF EQUAL            * yes - ignore
.
          MATCH     PTCNDLKR,LINKREA             * reason same as default ?
          GOTO      WRANB050 IF NOT EQUAL        * no - ignore
.
.         Check if we are using unquailified status or date of birth to
.         validate a mother/baby link.
.
          MOVE      ZERO,FOUNDLNK                * set flag for link found
          COMPARE   ONE,PTCNMBRL                 * using DOB validation ?
          GOTO      WRANB150 IF EQUAL            * yes
.
.         Using unqualified status to validate mother/baby link.
.         The link reason is a valid mother/baby link, so check if this
.         patient was admitted during the mother's inpatient stay
.
          PACK      KEY17,LINKTUR,TWO,SP20
          CALL      RSPTMI18                     * position in admission file
WRANB100  CALL      RKPTMI18                     * read next record
          BRANCH    OVRCD,WRANB050               * eof - get next linked U/R
.
          MATCH     LINKTUR,AURNO                * same U/R still ?
          GOTO      WRANB050 IF NOT EQUAL        * no - get next linked U/R
.
          MATCH     INVFRDTE,ADATE               * admitted prior to Mother ?
          GOTO      WRANB100 IF LESS             * yes - ignore
.
          MATCH     ADATE,INVTODTE               * admitted after Mother disch ?
          GOTO      WRANB100 IF LESS             * yes - ignore
.
.         This linked U/R was admitted while the patient was admitted, so
.         check if it was an unqualified baby (Category A, Indicator 2 = "U")
.
          MATCH     SP3,ATYPE                    * blank admission type ?
          GOTO      WRANB100 IF EQUAL            * yes - ignore admission
.
          PACK      KEY5,ANSA,SP1,ATYPE
          CALL      RDCODE1                      * admission type found ?
          BRANCH    OVRCD,WRANB100               * no - ignore admission
.
          MATCH     ANSU,TCINDC2                 * unqualified baby ?
          GOTO      WRANB100 IF NOT EQUAL        * no - ignore admission
.
.         The linked U/R is a valid unqualifed newborn, or we are using
.         DOB to validate the mother/baby link, so get the baby's PMI details
.
WRANB150  MOVE      LINKTUR,KEY8
          CALL      RDMAST1                      * PMI record found ?
          BRANCH    OVRCD,WRANB100               * no - ignore admission
.
          COMPARE   ONE,PTCNMBRL                 * using DOB validation ?
          IF        @EQUAL
            MATCH     ADATE,PBDATE               * dob < admit date ?
            GOTO      WRANB050 IF LESS           * yes - no match
.
            IF        ASTAT = 3
              MOVE      DDATE,ENDDATE            * discharge date is end date
            ELSE
              CALL      IBACLOCK                 * use current date as end date
              MOVE      CCC,CCENT
              MOVE      CYY,CYEAR
              MOVE      CMM,CMON
              MOVE      CDD,CDAY
              PACK      ENDDATE,CCENT,CYEAR,CMON,CDAY
              REP       " 0",ENDDATE
            ENDIF
            MATCH       PBDATE,ENDDATE           * DOB > discharge/end date ?
            GOTO        WRANB050 IF LESS         * yes - no match
          ENDIF
.
.         Load the ANB segment fields
.
WRANB170  ADD       ONE,COUNTER                  * increment newborn counter
          MOVE      ANSN,ED080003                * set cancel flag to "No"
          PACK      ED080004,SP2,COUNTER         * set newborn seq. counter
          REP       " 0",ED080004
.
.         Extract the patient's first given name and second initial from PGNAME
.
          SCAN      SP1,PGNAME
          IF        @EQUAL
            MOVEFPTR  PGNAME,CHARPOSN
            SUB       ONE,CHARPOSN
.
.           Get the first character of the second name (if present)
.
WRANB200    BUMP      PGNAME                     * move to next character
            GOTO      WRANB300 IF EOS            * end of string
.
.           Check that the character is A-Z, otherwise get next character
.
            MOVE      PGNAME,ANS
            MATCH     CHARACTA,ANS
            GOTO      WRANB200 IF LESS
.
            MATCH     ANS,CHARACTZ
            GOTO      WRANB200 IF LESS
.
.           Valid second initial found
.
            MOVE      PGNAME,ED080006            * load second initial
.
WRANB300    RESET     PGNAME
            MOVE      PGNAME,DIM30
            SETLPTR   DIM30,CHARPOSN
            PACK      ED080005,DIM30,SP30        * load first given name
          ELSE
            RESET     PGNAME
            MATCH     SP25,PGNAME
            IF        !@EQUAL
              PACK      ED080005,PGNAME,SP30     * load first given name
            ENDIF
          ENDIF
.
          PACK      ED080007,PSNAME,SP30         * load surname
.
          UNPACK    PBDATE,CCENT,CYEAR,CMON,CDAY * load DOB
          PACK      ED080009,CDAY,CMON,CCENT,CYEAR
.
          MOVE      PSEX,KEY1
          REP       "M1F2U0",KEY1                * load patient sex
.
          MATCH     "1",KEY1
          IF        !@EQUAL
            MATCH     "2",KEY1
            IF        !@EQUAL
              MATCH     "0",KEY1
              IF        !@EQUAL
                MOVE      "Invalid newborn sex type",ERRMSG
                CALL      ERMSG000               * Print an error message
              ENDIF
            ENDIF
          ENDIF
.
          MOVE      KEY1,ED080008
.
.         If we are sending a qualified baby, only one ANB record is sent
.
          IF        VALDFLG = 1
            IF      FOUNDLNK = 2
              GOTO    WRANB900                   * validation only & qual. baby
            ELSE
              GOTO    WRANB050                   * validation only & unqual baby
            ENDIF
          ENDIF
.
.         Write ANB record
.
          IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;ED080001,ED080002,ED080003,ED080004:
                                   ED080005,ED080006,ED080007,ED080008:
                                   ED080009
          ELSE
            WRITE     EXTFILE1,SEQ;ED080001,ED080002,ED080003,ED080004:
                                   ED080005,ED080006,ED080007,ED080008:
                                   ED080009;
          ENDIF
.
          COMPARE   TWO,FOUNDLNK                 * sending qual. baby ?
          GOTO      WRANB900 IF EQUAL            * yes - finished
.
          GOTO      WRANB050                     * get next linked U/R
.
.         If there were linked U/R's found, re-read the Mother's PMI &
.         admission records before proceeding
.
WRANB800  BRANCH    FOUNDLNK,WRANB900            * no linked U/R's found
.
          MOVE      ADMINO,KEY8
          CALL      RDMISS1
          MOVE      AURNO,KEY8
          CALL      RDMAST1
.
.         If no ANB segments were written and this is an ADT33 extract,
.         then we need to write a blank segment
.
WRANB900  BRANCH    VALDFLG,WRANB999             * validation only
.
          IF        COUNTER = 0 & EXTRFLAG = 1
            MOVE      "    1",ED080004
.
            IF        TESTFLG=1
              WRITE     EXTFILE1,SEQ;ED080001,ED080002,ED080003,ED080004:
                                     ED080005,ED080006,ED080007,ED080008:
                                     ED080009
            ELSE
              WRITE     EXTFILE1,SEQ;ED080001,ED080002,ED080003,ED080004:
                                     ED080005,ED080006,ED080007,ED080008:
                                     ED080009;
            ENDIF
          ENDIF
.
WRANB999  RETURN
+
.******************************************************************************
.*                                  WRTFR000              Called by: VALD0000 *
.*                           Write Transfer Details                & WRIT0000 *
.******************************************************************************
.
.         Loop through the patient Transfer destination file
.
WRTFR000  MOVE      ZERO,COUNTER                 * initialise certificate count
.
  	  PACK      KEY8,ADMINO,SP70
          CALL      RDPTDAD1
          BRANCH    OVRCD,WRTFR900          * finished
.
          MOVE      SP70,DDATE
          IF        ASTAT=3
            MOVE      ADMINO,KEY8
            CALL      RDDSCH1
            BRANCH    OVRCD,WRTFR900        * missing discharge record
          ENDIF
.
          MOVE      ADYHOSP,FORM4
          MOVE      FORM4,ED090010          * Days of hospitalisation
          REP       " 0",ED090010
          MOVE      "X",ED090009            * X for Unknown
.
.         Check admission transfer record
.
          MATCH     SP70,PTDAADTS           * Check admission Transfer source
          GOTO      WRTFR400 IF EQUAL       * blank
.
          CALL      SADMN000                * set admission transfer record
          CALL      WREC0000                * Write record
.
WRTFR400  MATCH     SP70,PTDADCTS           * Check Discharge Transfer source
          GOTO      WRTFR900 IF EQUAL       * blank
.
          CALL      SDSCH000                * Set discharge transfer record
          CALL      WREC0000                * Write record
.
WRTFR900  BRANCH    VALDFLG,WRTFR999        * Only validating data
.
          IF        COUNTER = 0 & EXTRFLAG = 1
            UNPACK    SP70,ED090004,ED090005:
                           ED090006,ED090007,ED090008:
                           ED090009,ED090010,ED090011
            REP       " 0",ED090010
            REP       " 0",ED090011
            CALL      WREC0000            * Write record
          ENDIF
.
WRTFR999  RETURN
+
.******************************************************************************
.         Set admission transfer record
.******************************************************************************
SADMN000  UNPACK    SP70,ED090003,ED090004,ED090005:
                         ED090006,ED090007,ED090008:
                         ED090011
          REP       " 0",ED090003
          REP       " 0",ED090011
.
          MOVE      "A",ED090004            * Admission
          UNPACK    ADATE,CCENT,CYEAR,CMON,CDAY * load admission date
          PACK      ED090005,CDAY,CMON,CCENT,CYEAR
.
          PACK      KEY5,PTDAADTS,SP70
          CALL      RDPTVAD1
          BRANCH    OVRCD,SADMN900
.
          MATCH     SP70,PTVAPROV
          GOTO      SADMN200 IF NOT EQUAL
          MATCH     SP70,PTVAPPCD
          GOTO      SADMN200 IF NOT EQUAL
          MATCH     SP70,PTVAPNAM
          GOTO      SADMN910 IF EQUAL      * Blank hospital provider number
.
SADMN200  MATCH     SP70,PTVAPROV
          IF        !@EQUAL
            PACK      ED090006,PTVAPROV,SP70  * Hospital provider number
          ELSE
            PACK      ED090007,PTVAPPCD,SP70  * Provider Postcode
            PACK      ED090008,PTVAPNAM,SP70  * Provider Name
          ENDIF
          GOTO      SADMN999
.
SADMN900  MOVE      "Invalid Admission Transfer Source Code",ERRMSG
          CALL      ERMSG000               * Print an error message
          GOTO      SADMN999
.
SADMN910  MATCH     "1",ED060015           * check Source of Referral *I-242229
          GOTO      SADMN999 IF NOT EQUAL  * bypass error message if not "1"
SADMN911  MOVE      "Hospital Provider No for Admn.Source is blank",ERRMSG
          CALL      ERMSG000               * Print an error message
          GOTO      SADMN999
.
SADMN999  RETURN
+
.******************************************************************************
.         Set discharge transfer record
.******************************************************************************
SDSCH000  UNPACK    SP70,ED090003,ED090004,ED090005:
                         ED090006,ED090007,ED090008:
                         ED090011
          REP       " 0",ED090003
          REP       " 0",ED090011
.
          MOVE      "S",ED090004            * Discharge
          UNPACK    DDATE,CCENT,CYEAR,CMON,CDAY * load discharge date
          PACK      ED090005,CDAY,CMON,CCENT,CYEAR
.
          PACK      KEY5,PTDADCTS,SP70
          CALL      RDPTVAD1
          BRANCH    OVRCD,SDSCH900          * invalid transfer code
.
          MATCH     SP70,PTVAPROV
          GOTO      SDSCH200 IF NOT EQUAL
          MATCH     SP70,PTVAPPCD
          GOTO      SDSCH200 IF NOT EQUAL
          MATCH     SP70,PTVAPNAM
          GOTO      SDSCH910 IF EQUAL      * Blank hospital provider number
.
SDSCH200  MATCH     SP70,PTVAPROV
          IF        !@EQUAL
            PACK      ED090006,PTVAPROV,SP70  * Hospital provider number
          ELSE
            PACK      ED090007,PTVAPPCD,SP70  * Provider Postcode
            PACK      ED090008,PTVAPNAM,SP70  * Provider Name
          ENDIF
          GOTO      SDSCH999
.
SDSCH900  MOVE      "Invalid Discharge Transfer Source Code",ERRMSG
          CALL      ERMSG000               * Print an error message
          GOTO      SDSCH999
.
SDSCH910  MATCH     "1",ED060015           * check Source of Referral *I-242229
          GOTO      SDSCH999 IF NOT EQUAL  * bypass error message if not "1"
SDSCH911  MOVE      "Hospital Provider No for Disc.Destination is blank",ERRMSG
          CALL      ERMSG000               * Print an error message
          GOTO      SDSCH999
.
SDSCH999  RETURN
+
.******************************************************************************
.         Write transfer record
.******************************************************************************
.
WREC0000  BRANCH    VALDFLG,WREC9999        * Only validating data
.
          ADD       ONE,COUNTER                  * increment counter
          PACK      ED090003,SP2,COUNTER         * set sequence number
          REP       " 0",ED090003
.
          IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;ED090001,ED090002,ED090003,ED090004:
                                   ED090005,ED090006,ED090007,ED090008:
                                   ED090009,ED090010,ED090011
          ELSE
            WRITE     EXTFILE1,SEQ;ED090001,ED090002,ED090003,ED090004:
                                   ED090005,ED090006,ED090007,ED090008:
                                   ED090009,ED090010,ED090011;
          ENDIF
WREC9999  RETURN
+
.******************************************************************************
.*                                  WRACS000              Called by: VALD0000 *
.*                     Write Accommodation Summary Details         & WRIT0000 *
.******************************************************************************
.
WRACS000  BRANCH    VALDFLG,WRACS999        * Only validating data, exit
.
          UNPACK    SP70,ED100003,ED100004,ED100005,ED100006,ED100007:
                         ED100008,ED100009
          REP       " 0",ED100005
          REP       " 0",ED100006
          REP       " 0",ED100007
          REP       " 0",ED100008
.
          MOVE      ZERO,LEAVDAY
.
          PACK      KEY30,ADMINO,SP30
          CALL      RDSTRAN2
WRACS050  CALL      RDKTRAN2
          BRANCH    OVRCD,WRACS100
.
          MATCH     TADMN,ADMINO        
          GOTO      WRACS100 IF NOT EQUAL
.
          MATCH     ANSD,TMOVE
          GOTO      WRACS100 IF EQUAL
.
          MATCH     ANSL,TMOVE
          GOTO      WRACS050 IF NOT EQUAL
.
          MATCH     TDATE,INVFRDTE      * invoice start date < on leave date?
          IF        @LESS
            MOVE      TDATE,LEAVDATE    * yes, use TDATE to calc. leavedays
          ELSE
            MOVE      INVFRDTE,LEAVDATE * no, use invoice start date
          ENDIF
.
          CALL      RDKTRAN2 
          BRANCH    OVRCD,WRACS075
.
          MATCH     TADMN,ADMINO
          GOTO      WRACS075 IF NOT EQUAL
.
          MATCH     ANSR,TMOVE           * missing return date, use INVTODTE
          GOTO      WRACS075 IF NOT EQUAL
.
          MATCH     TDATE,INVFRDTE       * return date <= invoice start date?
          GOTO      WRACS050 IF NOT LESS * yes, ignore record
.
          MATCH     INVTODTE,TDATE       * Is return date < invoice to date
          GOTO      WRACS075 IF NOT LESS
.
          MOVE      TDATE,RETNDATE 
          GOTO      WRACS080
.
WRACS075  MOVE      INVTODTE,RETNDATE
.
WRACS080  REP       " 0",LEAVDATE
          REP       " 0",RETNDATE
          CALL      LEAVE000
          GOTO      WRACS050
.
WRACS100  UNPACK    INVFRDTE,CCENT,CYEAR,CMON,CDAY
          PACK      ED100003,CDAY,CMON,CCENT,CYEAR
.
          UNPACK    INVTODTE,CCENT,CYEAR,CMON,CDAY
          PACK      ED100004,CDAY,CMON,CCENT,CYEAR
.
          MOVE      NOINVDYS,ED100005
.
          MOVE      LEAVDAY,ED100006
          REP       " 0",ED100006
.
          MOVE      NOINVDYS,ED100007
.
          WRITE     EXTFILE1,SEQ;ED100001,ED100002,ED100003,ED100004,ED100005:
                                 ED100006,ED100007;
.
          MOVE      ZERO,FORM8P2            * Reset accom charge amount
          PACK      KEY23,ADMINO,INVNO,ONE,SP30
          CALL      RDSDTRN4                * Position on & read a DTR file
WRACS200  CALL      RDKDTRN4                  record
          BRANCH    OVRCD,WRACS300
.
          MATCH     ADMINO,TADMNO
          GOTO      WRACS300 IF NOT EQUAL   * Different admin no
.
          MATCH     INVNO,TREF
          GOTO      WRACS300 IF NOT EQUAL   * Different invoice no
.
          COMPARE   ONE,TRECTYPE
          GOTO      WRACS300 IF NOT EQUAL   * Not an accom record
.
          MATCH     "PY",TTYPE
          GOTO      WRACS200 IF EQUAL       * Ignore accom payments
.
          ADD       TPATAMTT,FORM8P2        * Increment the accom charge amount
          ADD       PTDTGSTM,FORM8P2        * Increment the accom charge amount
          GOTO      WRACS200
.
WRACS300  CALL      FRNTL000                * Format numeric totals
          MOVE      KEY9,ED100008
          MOVE      KEY1,ED100009
          IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;ED100008,ED100009
          ELSE
            WRITE     EXTFILE1,SEQ;ED100008,ED100009;
          ENDIF
.
WRACS999  RETURN
+
.******************************************************************************
.*                                  WRACD000              Called by: VALD0000 *
.*                         Write Accommodation Details             & WRIT0000 *
.******************************************************************************
.
WRACD000  MOVE      ZERO,ACCSQCNT                * initialise sequence count
.
          PACK      KEY22,ADMINO,PINVNO,SP30
          CALL      RDSDTRN1                     * position for admiss/invoice
WRACD010  CALL      RDKDTRN1                     * read next record
          BRANCH    OVRCD,WRACD999               * eof - finished
.
          MATCH     TADMNO,ADMINO                * same admission still ?
          GOTO      WRACD999 IF NOT EQUAL        * no - finished
.
          MATCH     TREF,PINVNO                  * same invoice still?
          GOTO      WRACD999 IF NOT EQUAL        * no - finished
.
.         We only need accommodation records
.
          COMPARE   ONE,TRECTYPE                 * accommodation record ?
          GOTO      WRACD010 IF NOT EQUAL        * no - ignore record
.
.         Initialise ACD fields
.
          UNPACK    SP70,ED110003,ED110004,ED110005,ED110006,ED110007,ED110008
          UNPACK    SP70,ED110009,ED110010,ED110011,ED110012,ED110013,ED110014:
                         ED110015
          REP       " 0",ED110003                * set default
          REP       " 0",ED110012                * set default
          REP       " 0",ED110013                * set default
          REP       " 0",ED110014                * set default
.
.         We have a valid accommodation record.
.
          MOVE      SP2,ED110004                 * set def. ACD PCS Episode type
          MOVE      ZERO,ASSOCNUM                * set def. assoc # for Cat A.
.
.         Set the accommodation "from" and "to" dates for the accommodation
.         record
.
          PACK      CDYSFDTE,DTFCENT,DTFYEAR,DTFMONTH,DTFDAY    * from date
          REP       " 0",CDYSFDTE
          PACK      CDYSTDTE,TTCENT,TTYEAR,TTMONTH,TTDAY        * to date
          REP       " 0",CDYSTDTE
.
.         Get the number of days in hospital for accommodation record
.
          MOVE      ONE,NBRDAYS                  * initialise for same day
          MATCH     CDYSFDTE,CDYSTDTE            * same day ?
          IF        !@EQUAL
            CALL      CALCDAYS                   * no - calc no. of days leave
            SUB       ONE,CDYSDAYS
            MOVE      CDYSDAYS,NBRDAYS
          ENDIF
          MOVE      NBRDAYS,ED110012
          REP       " 0",ED110012
.
          PACK      ED110010,DTFDAY,DTFMONTH,DTFCENT,DTFYEAR    * ACD
          REP       " 0",ED110010
          PACK      ED110011,TTDAY,TTMONTH,TTCENT,TTYEAR
          REP       " 0",ED110011
.
.         Get the admission type.  To do this, get the corresponding transfer 
.         record for this accommodation record using the accommodation "from"
.         date and reading the last transfer record for this date.
.
          PACK      KEY30,TADMNO,CDYSFDTE,TILDA30
          CALL      RDSTRAN2                     * position in file
          CALL      RDPTRAN2                     * read next record
          IF        OVRCD = 1
            MOVE      "Transfer record missing",ERRMSG
            CALL      ERMSG000                   * print an error message
            GOTO      WRACD800
          ENDIF
.
          MATCH     TADMNO,ADMINO                * same admission still ?
          IF        !@EQUAL
            MOVE      "Transfer record missing",ERRMSG
            CALL      ERMSG000                   * print an error message
            GOTO      WRACD800
          ENDIF
.
.         The corresponding transfer record has been found, so check the 
.         admission type.
.         Check if admission type is blank.
.
          MATCH     SP3,TATYPE                   * admission type blank ?
          IF        @EQUAL
            MOVE      "Blank transfer admission type",ERRMSG
            CALL      ERMSG000                   * print an error message
            GOTO      WRACD250
          ENDIF
.
.         Admission Type is not blank.
.         Get category/codes record for admission type code
.
          PACK      KEY5,ANSA,SP1,TATYPE
          CALL      RDCODE1                      * code on file ?
          IF        OVRCD=1
            MOVE      "Missing transfer admission type",ERRMSG
            CALL      ERMSG000                   * print an error message
            GOTO      WRACD250
          ENDIF
.
.         Check if Critical Care patient using admission type
.
          IF        PTCNHCCC = 0
            CALL      CHICU000
            BRANCH    EXIT,WRACD010
          ENDIF
.
.         Category/Code record found for admission type, so check value of
.         TCFORM6.
.
          MOVE      TCFORM6,ASSOCNUM             * save associated number
          IF        TCFORM6<1 | TCFORM6>14
            MOVE   "Invalid PCS episode type code (Category A, assoc no)",ERRMSG
            CALL      ERMSG000                   * print an error message
            GOTO      WRACD250
          ENDIF
.
.         Load PCS Episode Type using TCFORM6
.
          LOAD      ED110004,TCFORM6,CATD1,CATD2,CATD3,CATD4,CATAM:
                                 CATME,CATSU,CATAS,CATOB,CATPS:
                                 CATRE,CATNH,CATEC,CATOT
.
.         If this is a Psychiatric or Rehabilitation patient, then load
.         the program code into field 110009
.
WRACD240  IF        TCFORM6 = 10|TCFORM6 = 11
            MOVE      ADMINO,KEY8
            CALL      RDPMVX11
            IF        OVRCD = 0
              MATCH     SP8,PMVXPRGM             * program code blank ?
              IF        !@EQUAL
                UNPACK    PMVXPRGM,ANS,ANS,ANS,ANS,ED110009  * no
                PACK      ED110009,ED110009,SP4
                GOTO      WRACD250
              ENDIF
            ENDIF
            MOVE      "Program Code not found",ERRMSG
            CALL      PRMSG000                   * print a warning message
          ENDIF
.
.         Check if blank bed type
.
WRACD250  MOVE      SP2,ED110005                 * set default bed level code
          MATCH     SP3,TRBTYP                   * blank bed type ?
          IF        @EQUAL
            MOVE      "Blank bed type",ERRMSG
            CALL      ERMSG000                   * print an error message
            GOTO      WRACD350
          ENDIF
.
.         Bed Type is not blank.
.         Get category/codes record for bed type code
.
          PACK      KEY5,ANSB,ANST,TRBTYP
          CALL      RDCODE1                      * code on file ?
          IF        OVRCD=1
            MOVE      "Missing bed type",ERRMSG
            CALL      ERMSG000                   * print an error message
            GOTO      WRACD350
          ENDIF
.
.         Check if Critical Care patient using bed type
.
          IF        PTCNHCCC = 1
            CALL      CHICU000
            BRANCH    EXIT,WRACD010
          ENDIF
.
.         Check if indicator 4 is blank
.
          MATCH     SP1,TCINDC4                  * indicator 4 blank ?
          GOTO      WRACD300 IF EQUAL            * yes
.
          TYPE      TCINDC4                      * indicator 4 numeric ?
          GOTO      WRACD300 IF EQUAL            * yes - error
.
.         Set Bed Level Code (ie Shared, Private, etc)
.
          PACK      ED110005,TCINDC4,SP2
          MOVE      TCINDC4,KEY1
          REP       "F1L2P3S4",KEY1
          MOVE      ZERO,FORM1
          MOVE      KEY1,FORM1
          BRANCH    FORM1,WRACD350:              * fund specified
                          WRACD350:              * luxury room
                          WRACD350:              * private room
                          WRACD350               * shared room
.
WRACD300  MOVE      "Invalid bed level code (Category BT, 4th Ind)",ERRMSG
          CALL      ERMSG000                     * print an error message
.
.         Get the daily rate for the accommodation record
.
WRACD350  UNPACK    SP70,KEY9,KEY6,KEY2,KEY1
          MOVE      TPATAMTI,FORM6P2
          MOVE      FORM6P2,KEY9
          UNPACK    KEY9,KEY6,KEY1,KEY2
          PACK      ED110013,ZERO,KEY6,KEY2
.
          ASSIGN    (NBRDAYS*TPATAMTI),FORM8P2
          CALL      FRNTL000                     * Format numeric totals
.
          REP       " 0",ED110013
          MOVE      KEY9,ED110014
          MOVE      KEY1,ED110015
.
.         If this is Mildura Health Fund and the PCS Episode Type Code is
.         medical, then service type/code needs to be ICD.
.
WRACD800  MATCH     "MDH",PTHFHCPE               * Mildura Health Fund ?
          GOTO      WRACD802 IF NOT EQUAL        * no
.
          IF        (ASSOCNUM = 5|ASSOCNUM=6) & EXTRFLAG = 0
            GOTO      WRACD820 IF EQUAL          * yes - get ICD code
          ENDIF
.
.         Get the service type & code (CMBS or ICD)
.         Try to get the first patdtraf CMBS theatre item that is not on
.         patmmbsf
.
WRACD802  MOVE      SP9,SAVEITEM
          PACK      KEY23,ADMINO,INVNO,TWO,SP30
          CALL      RDSDTRN4                     * position in dtr for admission
WRACD805  CALL      RDKDTRN4                     * read next record
          BRANCH    OVRCD,WRACD810
.
          MATCH     ADMINO,TADMNO                * same admission still ?
          GOTO      WRACD810 IF NOT EQUAL        * no - finished
.
          MATCH     INVNO,TREF                   * same invoice still ?
          GOTO      WRACD810 IF NOT EQUAL        * no - finished
.
          COMPARE   TWO,TRECTYPE                 * theatre item ?
          GOTO      WRACD810 IF NOT EQUAL        * no - finished
.
          REP       " 0",PTDTCRST                * treat blank and "0" the same
          MATCH     "0",PTDTCRST                 * item credited ?    *I-146742
          GOTO      WRACD805 IF NOT EQUAL        * has been credited - get next
.
.         Save the first theatre item found in case there is no item
.         which is only on patdtraf and not on patmmbsf.
.
          MATCH     SP9,SAVEITEM                 * blank saved item ?
          IF        @EQUAL
            MOVE      TITEMNO,SAVEITEM           * yes - save the first MBS item
          ENDIF
.
.         Theatre record found, now make sure it doesn't exist on patmmbsf
.
          PACK      KEY20,TITEMNO,ADMINO,SP20
          CALL      RDSMMBS2                     * position in patmmbsf
WRACD807  CALL      RDKMMBS2                     * read next record
          BRANCH    OVRCD,WRACD808               * eof - item doesn't exist
.
          MATCH     TITEMNO,MMCODE               * same item code still ?
          GOTO      WRACD808 IF NOT EQUAL        * no - item doesn't exist
.
          MATCH     ADMINO,MMADMN                * same admission no. still ?
          GOTO      WRACD808 IF NOT EQUAL        * no - item doesn't exist
.
.         Item on patmmbsf - ignore
.
          GOTO      WRACD805                     * get next patdtraf thetr item
.
WRACD808  PACK      ED110007,ANSC,SP10           * yes - load service type
          PACK      ED110008,TITEMNO,SP10        * load service code
          REP    "A B C D E F G H I J K L M N O P Q R S T U V W X Y Z ",ED110008
          SQUEEZE   ED110008
          PACK      ED110008,ED110008,SP20       * load service code
          GOTO      WRACD850
.
.         Check if primary ICD10 code is on file
.
WRACD810  MATCH     SP9,SAVEITEM
          IF        !@EQUAL
            PACK      ED110007,ANSC,SP10         * yes - load service type
            PACK      ED110008,SAVEITEM,SP10     * load service code
            REP  "A B C D E F G H I J K L M N O P Q R S T U V W X Y Z ",ED110008
            SQUEEZE   ED110008
            PACK      ED110008,ED110008,SP20       * load service code
            GOTO      WRACD850
          ENDIF
.
WRACD820  MOVE      " 1",KEY2
          MOVE      "  1",KEY3
          PACK      KEY13,ADMINO,KEY2,KEY3,SP20
          CALL      RDPTECD1                     * icd code on file ?
          BRANCH    OVRCD,WRACD850               * no
.
.         Where patient is Medical or Advanced Medical (Cat A, Associated #
.         = 5 or 6), set to default service code.
.
.         - Do not default service code if H/F is Mildura Health Fund *I-146686
          MATCH     "MDH",PTHFHCPE          * Mildura HF HCP Equiv. = "MDH"
          GOTO      WRACD840 IF EQUAL       * - use ICD10 Disease code
.
          IF        (ASSOCNUM = 5|ASSOCNUM=6) & EXTRFLAG = 0
            PACK      ED110007,ANSC,SP10         * yes - load service type
            MOVE      "00110",ED110008           * load service code
            PACK      ED110008,ED110008,SP20
            GOTO      WRACD850
          ENDIF
.
WRACD840  PACK      ED110007,ANSI,SP10           * load service type
          MOVE      PTEDCODE,DIM9
          REP       ". ",DIM9
          SQUEEZE   DIM9
          PACK      ED110008,DIM9,SP10
.
WRACD850  ADD       ONE,ACCSQCNT                 * increment accom sequence no
          MOVE      ACCSQCNT,ED110003
          REP       " 0",ED110003
.
          IF        VALDFLG<>1
            IF        TESTFLG=1
              WRITE     EXTFILE1,SEQ;ED110001,ED110002,ED110003,ED110004:
                                     ED110005,ED110006,ED110007,ED110008:
                                     ED110009,ED110010,ED110011,ED110012:
                                     ED110013,ED110014,ED110015 
            ELSE
              WRITE     EXTFILE1,SEQ;ED110001,ED110002,ED110003,ED110004:
                                     ED110005,ED110006,ED110007,ED110008:
                                     ED110009,ED110010,ED110011,ED110012:
                                     ED110013,ED110014,ED110015;
            ENDIF
          ENDIF
.
          GOTO      WRACD010                     * get next patdtraf record
.
WRACD999  RETURN
+
.******************************************************************************
.*                                  WRCCG000              Called by: VALD0000 *
.*                         Write Critical Care Details             & WRIT0000 *
.******************************************************************************
.
WRCCG000  MOVE      ZERO,ACCSQCNT                * initialise sequence count
.
          PACK      KEY22,ADMINO,PINVNO,SP30
          CALL      RDSDTRN1                     * position for admiss/invoice
WRCCG010  CALL      RDKDTRN1                     * read next record
          BRANCH    OVRCD,WRCCG999               * eof - finished
.
          MATCH     TADMNO,ADMINO                * same admission still ?
          GOTO      WRCCG999 IF NOT EQUAL        * no - finished
.
          MATCH     TREF,PINVNO                  * same invoice still?
          GOTO      WRCCG999 IF NOT EQUAL        * no - finished
.
.         We only need accommodation records
.
          COMPARE   ONE,TRECTYPE                 * accommodation record ?
          GOTO      WRCCG010 IF NOT EQUAL        * no - ignore record
.
.         Initialise CCG fields
.
          UNPACK    SP70,ED120003,ED120004,ED120005,ED120006,ED120007,ED120008
          UNPACK    SP70,ED120009,ED120010,ED120011,ED120012,ED120013,ED120014
          REP       " 0",ED120003           * set default
          REP       " 0",ED120005           * set default
          REP       " 0",ED120010           * set default
          REP       " 0",ED120011           * set default
          REP       " 0",ED120012           * set default
          REP       " 0",ED120014           * set default
.
.         We have a valid accommodation record.
.
          MOVE      SP3,ED120004                 * set default CC Type code
          MOVE      ZERO,ASSOCNUM                * set def. assoc # for Cat A.
.
.         Set the accommodation "from" and "to" dates for the accommodation
.         record
.
          PACK      CDYSFDTE,DTFCENT,DTFYEAR,DTFMONTH,DTFDAY
          REP       " 0",CDYSFDTE
          PACK      CDYSTDTE,TTCENT,TTYEAR,TTMONTH,TTDAY
          REP       " 0",CDYSTDTE
.
.         Get the number of days in hospital for accommodation record
.
          MOVE      ONE,NBRDAYS                  * initialise for same day
          MATCH     CDYSFDTE,CDYSTDTE            * same day ?
          IF        !@EQUAL
            CALL      CALCDAYS                   * no - calc no. of days leave
            SUB       ONE,CDYSDAYS
            MOVE      CDYSDAYS,NBRDAYS
          ENDIF
          MOVE      NBRDAYS,ED120010
          REP       " 0",ED120010
.
          PACK      ED120008,DTFDAY,DTFMONTH,DTFCENT,DTFYEAR
          REP       " 0",ED120008
          PACK      ED120009,TTDAY,TTMONTH,TTCENT,TTYEAR
          REP       " 0",ED120009
.
.         Get the admission type.  To do this, get the corresponding transfer 
.         record for this accommodation record using the accommodation "from"
.         date and reading the last transfer record for this date.
.
          PACK      KEY30,TADMNO,CDYSFDTE,TILDA30
          CALL      RDSTRAN2                     * position in file
          CALL      RDPTRAN2                     * read next record
          IF        OVRCD = 1
            MOVE      "Transfer record missing",ERRMSG
            CALL      ERMSG000                   * print an error message
            GOTO      WRCCG800
          ENDIF
.
          MATCH     TADMNO,ADMINO                * same admission still ?
          IF        !@EQUAL
            MOVE      "Transfer record missing",ERRMSG
            CALL      ERMSG000                   * print an error message
            GOTO      WRCCG800
          ENDIF
.
.         The corresponding transfer record has been found, so check the 
.         admission type.
.         Check if admission type is blank.
.
          MATCH     SP3,TATYPE                   * admission type blank ?
          GOTO      WRCCG010 IF EQUAL            * yes - treated as non-icu
.
.         Admission Type is not blank.
.         Get category/codes record for admission type code
.
          PACK      KEY5,ANSA,SP1,TATYPE
          CALL      RDCODE1                      * code on file ?
          BRANCH    OVRCD,WRCCG010               * no - treated as non-icu
.
          MOVE      TCFORM6,ASSOCNUM             * save associated number
.
.         Check for Critical Care patient.
.         If not critical care, then ignore this accommodation record as it 
.         will have already been processed as an ACD record.
.         Critical care is determined from either Admission Type (Cat A) or
.         Bed Type (Cat BT) depending on the parameter PTCNHCCC.
.
          IF        PTCNHCCC = 0
            MOVE      TCINDC6,ED120005      * ICU level from indicator 6 (Cat A)
          ELSE
            PACK      KEY5,ANSB,ANST,TRBTYP
            CALL      RDCODE1                    * code on file ?
            BRANCH    OVRCD,WRCCG010             * no - treated as non-icu
.
            MOVE      TCINDC2,ED120005     * ICU level from indicator 2 (Cat BT)
          ENDIF
.
          TYPE      TCINDC9                 * numeric indicator 9 ?
          GOTO      WRCCG010 IF NOT EQUAL   * no - treated as non-icu
.
          MOVE      TCINDC9,FORM1
          BRANCH    FORM1,WRCCG400,WRCCG400,WRCCG400,WRCCG400,WRCCG400:
                            WRCCG400,WRCCG400
.
          GOTO      WRCCG010                * treated as non-icu
.
WRCCG400  LOAD      ED120004,FORM1,CATICU,CATHDU,CATCCU,CATSCN,CATPCU:
                                   CATNCU,CATADN * CC type code
.
.         Get the daily rate for the accommodation record
.
          UNPACK    SP70,KEY9,KEY6,KEY2,KEY1
          MOVE      TPATAMTI,FORM6P2
          MOVE      FORM6P2,KEY9
          UNPACK    KEY9,KEY6,KEY1,KEY2
          PACK      ED120011,ZERO,KEY6,KEY2
.
          ASSIGN    (NBRDAYS*TPATAMTI),FORM8P2
          CALL      FRNTL000                     * Format numeric totals
.
          REP       " 0",ED120011
          MOVE      KEY9,ED120012
          MOVE      KEY1,ED120013
.
.         If this is Mildura Health Fund and the PCS Episode Type Code is
.         medical, then service type/code needs to be ICD.
.         
WRCCG800  MATCH     "MDH",PTHFHCPE               * Mildura Health Fund ?
          GOTO      WRCCG802 IF NOT EQUAL        * no
.         
          IF        (ASSOCNUM = 5|ASSOCNUM=6) & EXTRFLAG = 0
            GOTO      WRCCG820 IF EQUAL          * yes - get ICD code
          ENDIF     
.
.         Get the service type & code (ICD or CMBS)
.         Try to get the first patdtraf CMBS theatre item that is not on
.         patmmbsf
.
WRCCG802  MOVE      SP9,SAVEITEM
          PACK      KEY23,ADMINO,INVNO,TWO,SP30
          CALL      RDSDTRN4                     * position in dtr for admission
WRCCG805  CALL      RDKDTRN4                     * read next record
          BRANCH    OVRCD,WRCCG810
.
          MATCH     ADMINO,TADMNO                * same admission still ?
          GOTO      WRCCG810 IF NOT EQUAL        * no - finished
.
          MATCH     INVNO,TREF                   * same invoice still ?
          GOTO      WRCCG810 IF NOT EQUAL        * no - finished
.
          COMPARE   TWO,TRECTYPE                 * theatre item ?
          GOTO      WRCCG810 IF NOT EQUAL        * no - finished
.         
          REP       " 0",PTDTCRST                * treat blank and "0" the same
          MATCH     "0",PTDTCRST                 * item credited ?    *I-146742
          GOTO      WRCCG805 IF NOT EQUAL        * has been credited - get next
.
.         Save the first theatre item found in case there is no item
.         which is only on patdtraf and not on patmmbsf.
.
          MATCH     SP9,SAVEITEM                 * blank saved item ?
          IF        @EQUAL
            MOVE      TITEMNO,SAVEITEM           * yes - save the first MBS item
          ENDIF
.
.         Theatre record found, now make sure it doesn't exist on patmmbsf
.
          PACK      KEY20,TITEMNO,ADMINO,SP20
          CALL      RDSMMBS2                     * position in patmmbsf
WRCCG807  CALL      RDKMMBS2                     * read next record
          BRANCH    OVRCD,WRCCG808               * eof - item doesn't exist
.
          MATCH     TITEMNO,MMCODE               * same item code still ?
          GOTO      WRCCG808 IF NOT EQUAL        * no - item doesn't exist
.
          MATCH     ADMINO,MMADMN                * same admission no. still ?
          GOTO      WRCCG808 IF NOT EQUAL        * no - item doesn't exist
.
.         Item on patmmbsf - ignore
.
          GOTO      WRCCG805                     * get next patdtraf thetr item
.
WRCCG808  PACK      ED120006,ANSC,SP10           * yes - load service type
          PACK      ED120007,TITEMNO,SP10        * load service code
          REP    "A B C D E F G H I J K L M N O P Q R S T U V W X Y Z ",ED120007
          SQUEEZE   ED120007
          PACK      ED120007,ED120007,SP20       * load service code
          GOTO      WRCCG850
.
.         Check if primary ICD10 code is on file
.
WRCCG810  MATCH     SP9,SAVEITEM
          IF        !@EQUAL
            PACK      ED120006,ANSC,SP10         * yes - load service type
            PACK      ED120007,SAVEITEM,SP10     * load service code
            REP  "A B C D E F G H I J K L M N O P Q R S T U V W X Y Z ",ED120007
            SQUEEZE   ED120007
            PACK      ED120007,ED120007,SP20       * load service code
            GOTO      WRCCG850
          ENDIF
.
WRCCG820  MOVE      " 1",KEY2
          MOVE      "  1",KEY3
          PACK      KEY13,ADMINO,KEY2,KEY3,SP20
          CALL      RDPTECD1                     * icd code on file ?
          BRANCH    OVRCD,WRCCG850               * no
.
.         Where patient is Medical or Advanced Medical (Cat A, Associated #
.         = 5 or 6), set to default service code.
.
.         - Do not default service code if H/F is Mildura Health Fund *I-146686
          MATCH     "MDH",PTHFHCPE          * Mildura HF HCP Equiv. = "MDH"
          GOTO      WRCCG840 IF EQUAL       * - use ICD10 Disease code
.
          IF        (ASSOCNUM = 5|ASSOCNUM=6) & EXTRFLAG = 0
            PACK      ED120006,ANSC,SP10         * yes - load service type
            MOVE      "00110",ED120007           * load service code
            PACK      ED120007,ED120007,SP20
            GOTO      WRCCG850
          ENDIF
.
WRCCG840  PACK      ED120006,ANSI,SP10           * load service type
          MOVE      PTEDCODE,DIM9
          REP       ". ",DIM9
          SQUEEZE   DIM9
          PACK      ED120007,DIM9,SP10
.
WRCCG850  PACK      KEY8,ADMINO
          CALL      RDPTICU1
          IF        OVRCD = 0
            MOVE      PTICUINT,FORM4        * (form 5 to form 4)      *C-250267
            MOVE      FORM4,ED120014                                  *C-250267
            REP       " 0",ED120014
          ENDIF
.
          ADD       ONE,ACCSQCNT                 * increment accom sequence no
          MOVE      ACCSQCNT,ED120003
          REP       " 0",ED120003
.
          IF        VALDFLG<>1
            IF        TESTFLG=1
              WRITE     EXTFILE1,SEQ;ED120001,ED120002,ED120003,ED120004:
                                     ED120005,ED120006,ED120007,ED120008:
                                     ED120009,ED120010,ED120011,ED120012:
                                     ED120013,ED120014
            ELSE
              WRITE     EXTFILE1,SEQ;ED120001,ED120002,ED120003,ED120004:
                                     ED120005,ED120006,ED120007,ED120008:
                                     ED120009,ED120010,ED120011,ED120012:
                                     ED120013,ED120014;
            ENDIF
          ENDIF
.
          GOTO      WRCCG010                     * get next patdtraf record
.
WRCCG999  RETURN
+
.******************************************************************************
.*                                  WRLPD000              Called by: VALD0000 *
.*                      Write Leave Period Details                 & WRIT0000 *
.******************************************************************************
.
WRLPD000  BRANCH    VALDFLG,WRLPD999             * only validating
.
          UNPACK    SP70,ED130003,ED130004,ED130005,ED130006
          REP       " 0",ED130003
          REP       " 0",ED130006
          MOVE      ZERO,LEAVEPD
          MOVE      ZERO,LEAVDAY
.
          PACK      KEY30,ADMINO,SP30       * Loop through pattranf for visit
          CALL      RDSTRAN2
WRLPD100  CALL      RDKTRAN2
          BRANCH    OVRCD,WRLPD999
.
          MATCH     TADMN,ADMINO            * Different visit, exit
          GOTO      WRLPD999 IF NOT EQUAL
.
          MATCH     ANSD,TMOVE              * Not "leave" record, ignore
          GOTO      WRLPD999 IF EQUAL
.
          MATCH     ANSL,TMOVE              * Not "leave" record, ignore
          GOTO      WRLPD100 IF NOT EQUAL
.
          MATCH     TDATE,INVFRDTE      * invoice start date < on leave date?
          IF        @LESS
            MOVE      TDATE,LEAVDATE    * yes, use TDATE to calc. leavedays
          ELSE
            MOVE      INVFRDTE,LEAVDATE * no, use invoice start date
          ENDIF
.
          CALL      RDKTRAN2
          BRANCH    OVRCD,WRLPD200
.
          MATCH     TADMN,ADMINO            * Different visit, no return rec
          GOTO      WRLPD200 IF NOT EQUAL   * use invoice end date
.
          MATCH     ANSR,TMOVE
          GOTO      WRLPD200 IF NOT EQUAL
.
          MATCH     TDATE,INVFRDTE
          GOTO      WRLPD100 IF NOT LESS
.
          ADD       ONE,LEAVEPD             * valid read, increment count
.
          MATCH     INVTODTE,TDATE
          GOTO      WRLPD200 IF NOT LESS
.
          MOVE      TDATE,RETNDATE
          GOTO      WRLPD300
.
WRLPD200  MOVE      INVTODTE,RETNDATE
.
WRLPD300  MOVE      LEAVEPD,ED130003
          REP       " 0",ED130003
.
          UNPACK    LEAVDATE,DIM4,DIM2,DIM2A
          PACK      ED130004,DIM2A,DIM2,DIM4
          REP       " 0",ED130004
.
          UNPACK    RETNDATE,DIM4,DIM2,DIM2A
          PACK      ED130005,DIM2A,DIM2,DIM4
          REP       " 0",ED130005
.
          CALL      LEAVE000
.
          MOVE      LEAVDAY,ED130006
          REP       " 0",ED130006
.
          IF        TESTFLG = 1
            WRITE     EXTFILE1,SEQ;ED130001,ED130002,ED130003,ED130004,ED130005:
                                   ED130006
          ELSE  
            WRITE     EXTFILE1,SEQ;ED130001,ED130002,ED130003,ED130004,ED130005:
                                   ED130006;
          ENDIF
          GOTO      WRLPD100
.
WRLPD999  RETURN
+
.*****************************************************************************
.*                                 WRPSG000              Called by: VALD0000 *
.*                     Write Principal Services Details           & WRIT0000 *
.*    For each theatre date, we need to collate the principle procedure and  *
.*    any related secondary procedures for this admission.  Therefore, for   *
.*    each theatre date, where there are CMBS items on file, there will be   *
.*    at least a principle procedure (the details of which will be written   *
.*    as a PSG segment), and possibly one or more secondary procedures (the  *
.*    details of which will be written as an MSG segment for each procedure).*
.*    Where there are multiple theatre dates and procedures, there may be    *
.*    multiple PSG and MSG segments written in the following sequence:       *
.*    PSG (Date1)                                                            *
.*    MSG (Date1)                                                            *
.*    MSG (Date1)                                                            *
.*    PSG (Date2)                                                            *
.*    MSG (Date2)                                                            *
.*****************************************************************************
.
WRPSG000  MOVE      SP8,SAVEDATE                 * initialise saved theatre date
          MOVE      ZERO,PSGCOUNT                * initialise PSG count
.
          PACK      KEY23,ADMINO,INVNO,TWO,SP30
          CALL      RDSDTRN4                     * position in dtr for admission
WRPSG050  CALL      RDKDTRN4                     * read next record
          BRANCH    OVRCD,WRPSG900
.
          MATCH     ADMINO,TADMNO                * same admission still ?
          GOTO      WRPSG900 IF NOT EQUAL        * no - finished
.
          MATCH     INVNO,TREF                   * same invoice still ?
          GOTO      WRPSG900 IF NOT EQUAL        * no - finished
.
          COMPARE   TWO,TRECTYPE                 * theatre item ?
          GOTO      WRPSG900 IF NOT EQUAL        * no - finished
.
          REP       " 0",PTDTCRST                * treat blank and "0" the same
          MATCH     "0",PTDTCRST                 * item credited ?    *I-146742
          GOTO      WRPSG050 IF NOT EQUAL        * has been credited - get next
.
.         Get the corresponding pattranf record for the item date, then
.         check that the admission type is not medical (Cat A, Assoc # = 6)
.
.         PACK      ITEMDATE,DTFCENT,DTFYEAR,DTFMONTH,DTFDAY
.         REP       " 0",ITEMDATE
.         PACK      KEY30,ADMINO,ITEMDATE,TILDA30
.         CALL      RDSTRAN2                     * position on last visit record
.         CALL      RDPTRAN2                     * read previous record
.         BRANCH    OVRCD,WRPSG070               * eof - finished
.
.         MATCH     TADMN,ADMINO                 * same admission still ?
.         GOTO      WRPSG070 IF NOT EQUAL        * no - finished
.
.         PACK      KEY5,ANSA,SP1,TATYPE
.         CALL      RDCODE1
.         IF        OVRCD = 0
.           COMPARE   SIX,TCFORM6                * medical admission ?
.           GOTO      WRPSG050 IF EQUAL          * yes - ignore
.         ENDIF
.
.         A valid theatre item has been found, so check if this item is for
.         the same date.  If so, it must be a non-primary procedure which will
.         become an MSG record.  We have to write the PSG segment before we
.         can write any associated MSG segments, however, we need to read all
.         the MSG records to get the total amount (140009) for PSG.  Therefore,
.         write any MSG data to the temp file so that it can be processed
.         after the PSG has been written.
.
WRPSG070  PACK      CMBSDATE,TFCENT,TFYEAR,TFMONTH,TFDAY
          REP       " 0",CMBSDATE                * save opr. date as ccyymmdd
          PACK      THTRDATE,TFDAY,TFMONTH,TFCENT,TFYEAR
          REP       " 0",THTRDATE                * save opr. date as ddmmccyy
          MATCH     THTRDATE,SAVEDATE            * same theatre date still ?
          IF        @EQUAL
            CALL      GTMSG000                   * yes - get the MSG data
            GOTO      WRPSG050                   * get the next dtr record
          ENDIF
.
.         This is a new theatre date, so check if we need to complete writing
.         the previous PSG segment and all the associated MSG records
.
          COMPARE   ZERO,PSGCOUNT                * first procedure ?
          IF        !@EQUAL
            CALL      EXPSG000                   * no - write remaining data
          ENDIF
.
          BRANCH    VALDFLG,WRPSG050
.
.         As this is a new theatre date, this item will be the principle
.         procedure for that date.  We therefore need to write a new
.         PSG segment.
.
          UNPACK    SP70,ED140003,ED140004,ED140005,ED140006,ED140007,ED140008
          UNPACK    SP70,ED140009,ED140010,ED140011,ED140012,ED140013
          REP       " 0",ED140003
          REP       " 0",ED140008
          REP       " 0",ED140009
          REP       " 0",ED140010
          REP       " 0",ED140011
          MOVE      ZERO,MSGCOUNT                * initialise MSG count
          CALL      CLMSG000                     * clear MSG temp file
          MOVE      ZERO,FORM8P2                 * initialise amount
.
.         Load the PSG fields
.
          ADD       ONE,PSGCOUNT                 * increment PSG count
          MOVE      PSGCOUNT,ED140003            * load sequence number
          REP       " 0",ED140003
          MOVE      ANSC,ED140004           * Ser code type ind - always C (MBS)
          MOVE      TITEMNO,ED140005             * load service code (item)
.
.         Remove any characters from the item number
.
          REP    "A B C D E F G H I J K L M N O P Q R S T U V W X Y Z ",ED140005
          SQUEEZE   ED140005
          PACK      ED140005,ED140005,SP20       * load service code
          MOVE      THTRDATE,ED140006            * load service date
          MOVE      ED140006,SAVEDATE            * save the theatre date
.
.         If ADT10, then get the health fund using the health fund code on
.         patedsaf.  If ADT33, then the Health Fund record will already have
.         been read.
.
          IF        EXTRFLAG = 0
            PACK      KEY14,PTESHFND,ZERO4,SP10
            CALL      RDFUND1
            BRANCH    OVRCD,WRPSG050
          ENDIF
.
.         We need to get the MBS record for the principle item to get the
.         theatre band
.
.         PACK      KEY11,ADMINO,SP10
.         CALL      RDSMMBS1                     * position on admission
.RPSG100  CALL      RDKMMBS1                     * read next record
.         BRANCH    OVRCD,WRPSG150               * eof - finished
.
.         MATCH     ADMINO,MMADMN                * same admission still ?
.         GOTO      WRPSG150 IF NOT EQUAL        * no - finished
.
.         MATCH     TITEMNO,MMCODE               * same item ?
.         GOTO      WRPSG100 IF NOT EQUAL        * no - get next record
.
.         MATCH     CMBSDATE,MMDATE              * same theatre date ?
.         GOTO      WRPSG100 IF NOT EQUAL        * no - get next record
.
.         We have found an MBS record for the principle item,
.         so get the theatre banding for the item
.
          PACK      KEY9,TITEMNO,SP10
          PACK      KEY17,KEY9,SAVEDATE,SP70
          CALL      PATITMRD
          BRANCH    OVRCD,WRPSG150
.
          LOAD      DIM3,HFBAND,IBAND1,IBAND2,IBAND3,IBAND4,IBAND5,IBAND6:
                                IBAND7,IBAND8,IBAND9,IBAND10,IBAND11,IBAND12:
                                IBAND13,IBAND14,IBAND15,IBAND16
.
          PACK      KEY5,ANST,ANSB,DIM3
          CALL      RDCODE1
          BRANCH    OVRCD,WRPSG150
.
          MOVE      TCFORM6,ED140007
.
          MOVE      TPATAMTT,FORM8P2
          CALL      FRNTL000                * Format numeric totals
.
          MOVE      KEY9,ED140008
.
WRPSG150  WRITE     EXTFILE1,SEQ;ED140001,ED140002,ED140003,ED140004,ED140005:
                                 ED140006,ED140007,ED140008;
          GOTO      WRPSG050                     * get next dtr record
.
.         All theatre DTR records have been processed for this admission,
.         so check if any procedures were found, and if so, complete writing
.         the PSG sgement, then any related MSG records in the temp file.
.
WRPSG900  COMPARE   ZERO,PSGCOUNT                * any procedures found ?
          GOTO      WRPSG999 IF EQUAL            * no - finished
.
          CALL      EXPSG000                     * yes - write remaining data
.
WRPSG999  RETURN
+
.******************************************************************************
.*                                  WRMSG000              Called by: WRPSG000 *
.*   Write all the procedures from the temporary file to the extract file     *
.*   as MSG segments                                                          *
.******************************************************************************
.
WRMSG000  BRANCH    VALDFLG,WRMSG999             * validation only
.
          MOVE      SP5,KEY5
          CALL      RSSGMSG1                     * position at start of file
WRMSG050  CALL      RKSGMSG1                     * read next record
          BRANCH    OVRCD,WRMSG999               * eof - finished
.
          UNPACK    SP70,ED150003,ED150004,ED150005,ED150006,ED150007
          REP       " 0",ED150003
          REP       " 0",ED150006
.
          MOVE      TMPSEQNO,ED150003
          REP       " 0",ED150003
.
          MOVE      ANSC,ED150004
          MOVE      TMPITEMN,ED150005            * load service code
          REP    "A B C D E F G H I J K L M N O P Q R S T U V W X Y Z ",ED150005
          SQUEEZE   ED150005
          PACK      ED150005,ED150005,SP20
          MOVE      TMPAMNT,FORM8P2
          CALL      FRNTL000                     * format numeric totals
          MOVE      KEY9,ED150006
          MOVE      KEY1,ED150007
.
.         Write MSG record
.
          IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;ED150001,ED150002,ED150003,ED150004:
                                   ED150005,ED150006,ED150007
          ELSE
            WRITE     EXTFILE1,SEQ;ED150001,ED150002,ED150003,ED150004:
                                   ED150005,ED150006,ED150007;
          ENDIF
.
          GOTO      WRMSG050                     * get next record
.
WRMSG999  RETURN
+
.******************************************************************************
.*                                  WRTRG000              Called by: VALD0000 *
.*                           Write Transport Group Details         & WRIT0000 *
.******************************************************************************
.
WRTRG000  BRANCH    VALDFLG,WRTRG999        * Only validating data
.
          UNPACK    SP70,ED160003,ED160004,ED160005,ED160006,ED160007
          UNPACK    SP70,ED160008,ED160009,ED160010,ED160011,ED160012,ED160013
          REP       " 0",ED160003
          REP       " 0",ED160009
          REP       " 0",ED160010
          REP       " 0",ED160011
          REP       " 0",ED160012
.
          MOVE      "    1",ED160003
.
          IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;ED160001,ED160002,ED160003,ED160004:
                                   ED160005,ED160006,ED160007,ED160008:
                                   ED160009,ED160010,ED160011,ED160012:
                                   ED160013
          ELSE
            WRITE     EXTFILE1,SEQ;ED160001,ED160002,ED160003,ED160004:
                                   ED160005,ED160006,ED160007,ED160008:
                                   ED160009,ED160010,ED160011,ED160012:
                                   ED160013;
          ENDIF
.
WRTRG999  RETURN
+
.******************************************************************************
.*                                  WRMIG000              Called by: VALD0000 *
.*                    Write Miscellaneous Services Details         & WRIT0000 *
.******************************************************************************
.
WRMIG000  BRANCH    VALDFLG,WRMIG999        * Only validating data, exit
.
          UNPACK    SP70,ED170003,ED170004,ED170005,ED170006,ED170007
          UNPACK    SP70,ED170008,ED170009
          REP       " 0",ED170003
          REP       " 0",ED170007
          REP       " 0",ED170008
          REP       " 0",ED170009
.
          MOVE      ZERO,FORM5
          MOVE      SP1,KEY1                * Ser code type ind -set in FRNTL000
          PACK      KEY23,ADMINO,INVNO,THREE,SP30
          CALL      RDSDTRN4                * Position on & read a DTR file
WRMIG100  CALL      RDKDTRN4                  record
          BRANCH    OVRCD,WRMIG999
.
          MATCH     ADMINO,TADMNO
          GOTO      WRMIG999 IF NOT EQUAL   * Different admin no
.
          MATCH     INVNO,TREF
          GOTO      WRMIG999 IF NOT EQUAL   * Different invoice no
.
          COMPARE   THREE,TRECTYPE
          GOTO      WRMIG999 IF NOT EQUAL   * Not a miscell charge record
.
          REP       " 0",PTDTCRST                * treat blank and "0" the same
          MATCH     "0",PTDTCRST                 * item credited ?    *I-146742
          GOTO      WRMIG100 IF NOT EQUAL        * has been credited - get next
.
          CALL      GTEEC000                * Get EDI equivalent code
          BRANCH    EXIT,WRMIG100
.
          ADD       ONE,FORM5               * Increment multi ser sequence no
          MOVE      FORM5,ED170003
          REP       " 0",ED170003
          PACK      ED170005,MDESC,SP30
          PACK      ED170006,TFDAY,TFMONTH,TFCENT,TFYEAR
          REP       " 0",ED170006
.
          MOVE      TSERVS,FORM2
          MOVE      FORM2,KEY2A
          REP       " 0",KEY2A
          MATCH     "00",KEY2A
          IF        @EQUAL
            MOVE      "01",KEY2A
            MOVE      KEY2A,FORM2
          ENDIF
          MOVE      KEY2A,ED170007
.
          IF        PINVTYP = 1
            ASSIGN    (TREBATE/FORM2),FORM8P2
          ELSE
            ASSIGN    (TPATAMTT/FORM2),FORM8P2
          ENDIF     
          CALL      FRNTL000                * Format numeric totals
          MOVE      KEY9,ED170008
.
          IF        PINVTYP = 1
            MOVE      TREBATE,FORM8P2
          ELSE
            MOVE      TPATAMTT,FORM8P2
          ENDIF
          CALL      FRNTL000                * Format numeric totals (sets KEY1)
.
          IF        PINVTYP <> 1  &  TREBATE = 0
            MOVE      "I",KEY1              * reset Ind if H/F amount is zero
          ENDIF
.
          MOVE      KEY9,ED170009
          MOVE      KEY1,ED170010
.
          IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;ED170001,ED170002,ED170003,ED170004:
                                   ED170005,ED170006,ED170007,ED170008:
                                   ED170009,ED170010
          ELSE
            WRITE     EXTFILE1,SEQ;ED170001,ED170002,ED170003,ED170004:
                                   ED170005,ED170006,ED170007,ED170008:
                                   ED170009,ED170010;
          ENDIF
          GOTO      WRMIG100
.
WRMIG999  RETURN
+
.******************************************************************************
.*                                  WRDMG000              Called by: VALD0000 *
.*                         Write DRG Morbidity Details             & WRIT0000 *
.******************************************************************************
.
WRDMG000  BRANCH    VALDFLG,WRDMG100        * Only validating data, exit
.
          UNPACK    SP70,ED180007,ED180008,ED180009 
          REP       " 0",ED180007
.
          MOVE      ZERO,CODCNT
          MOVE      MAXARRY,FORM3
          REPEAT
            ADD       ONE,CODCNT
            MOVE      SP5,DISARY[CODCNT]
            MOVE      SP7,OPRARY[CODCNT]
          UNTIL     CODCNT >= FORM3   
          MOVE      ZERO,CODCNT
.
          CALL      GI1CD000                  * Get ICD10 codes
.
          WRITE     EXTFILE1,SEQ;ED180001,ED180002;
.
          CALL      WRV2C000                  * Write ICD10 codes
.
          PACK      KEY8,ADMINO
          CALL      RDPTICU1                  * Read an ICU file record
          IF        OVRCD<>1
            MOVE      PTICUMEC,FORM4        * (form 5 to form 4)      *C-250267
            MOVE      FORM4,ED180007                                  *C-250267
            REP       " 0",ED180007
          ENDIF
.
WRDMG100  CALL      GETDRG                  * Get DRG & MDC codes
          MATCH     SP3,DRGVER
          IF        @EQUAL
            MOVE      "Blank DRG version number",ERRMSG
            CALL      ERMSG000              * Print an error message
          ENDIF
          BRANCH    VALDFLG,WRDMG999        * Only validating data, exit
.
          PACK      ED180008,DDRGCODE,SP4
          UNPACK    DRGVER,KEY1,ED180009
.
          IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;ED180007,ED180008,ED180009
          ELSE
            WRITE     EXTFILE1,SEQ;ED180007,ED180008,ED180009;
          ENDIF
.
WRDMG999  RETURN
+
.******************************************************************************
.*                                  WRMOR000              Called by: VALD0000 *
.*                           Write Non-DRG Morbidity               & WRIT0000 *
.******************************************************************************
.
WRMOR000  BRANCH    VALDFLG,WRMOR999        * Only validating data
.
          UNPACK    SP70,ED190003,ED190004,ED190005
          REP       " 0",ED190003
.
          MOVE      "    1",ED160003
.
          IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;ED190001,ED190002,ED190003,ED190004:
                                   ED190005
          ELSE
            WRITE     EXTFILE1,SEQ;ED190001,ED190002,ED190003,ED190004:
                                   ED190005;
          ENDIF
.
WRMOR999  RETURN
+
.******************************************************************************
.*                                  WRCER000              Called by: VALD0000 *
.*                           Write Certificates                    & WRIT0000 *
.******************************************************************************
.
.         Loop through the certifcates for this U/R
.
WRCER000  MOVE      ZERO,COUNTER                 * initialise certificate count
.
          PACK      KEY19,AURNO,SP20
          CALL      RSPTCER1                     * position on U/R
WRCER100  CALL      RKPTCER1                     * read next record
          BRANCH    OVRCD,WRCER900               * eof - finished
.
          MATCH     AURNO,PTCEURNO               * same U/R still ?
          GOTO      WRCER900 IF NOT EQUAL        * no - finished
.
.         A valid certificate record has been found, so check if the
.         date range for the certificate overlaps the visit date range
.
          IF        ASTAT = 3
            MOVE      DDATE,ENDDATE              * discharge date is end date
          ELSE
            CALL      IBACLOCK                   * use current date as end date
            MOVE      CCC,CCENT
            MOVE      CYY,CYEAR
            MOVE      CMM,CMON
            MOVE      CDD,CDAY
            PACK      ENDDATE,CCENT,CYEAR,CMON,CDAY
            REP       " 0",ENDDATE
          ENDIF
.
WRCER105  MATCH     PTCEFDAT,ADATE
          IF        @LESS
            MATCH     PTCEFDAT,ENDDATE
            GOTO      WRCER100 IF LESS
          ENDIF
.
          MATCH     ENDDATE,PTCETDAT
          IF        @LESS
            MATCH     ADATE,PTCETDAT
            GOTO      WRCER100 IF LESS
          ENDIF
.
.         The certificate applies to this visit, so load the data fields
.
          UNPACK    SP70,ED200003,ED200004,ED200005,ED200006,ED200007
          UNPACK    SP70,ED200008,ED200009,ED200010,ED200011,ED200012
          REP       " 0",ED200012
.
          ADD       ONE,COUNTER                  * increment counter
          PACK      ED200003,SP2,COUNTER         * set sequence number
          REP       " 0",ED200003
.
          PACK      KEY5,CATCR,PTCETYPE
          CALL      RDCODE1                      * certificate type code found ?
          IF        OVRCD = 0
            IF        TCFORM6 > 0 & TCFORM6 < 12
              LOAD      ED200005,TCFORM6,CERTTYPB,CERTTYPC,CERTYP3B,CERTYPPS:
                                         CERTYPRE,CERTYPNE,CERTYPCC,CERTYPEM:
                                         CERTYPED,CERTYPNA,CERTYPAC
              GOTO      WRCER200
            ENDIF
          ENDIF
.
.         Associated # not set for Certificate Type (Cat cr)
.
          MOVE      "Invalid certificate type",ERRMSG
          CALL      ERMSG000                     * Print an error message
.
.         Get the certifying doctor's provider number for 3B only
.
WRCER200  PACK      KEY10,PTCEDCOD,SP20
          CALL      RDPMHCP1
          IF        OVRCD = 0
            MOVE      PMHCSNAM,PACSNAME          * yes - format name
            MOVE      PMHCGNAM,PACGNAME
            MOVE      PMHCTITL,PACTITLE
            MOVE      ONE,PACFRMT
            CALL      PACNAME
            MOVE      PACFNAME,ED200008
.
            MATCH     SP10,PMHCPRV1              * provider no. blank ?
            IF        !@EQUAL
              MOVE      PMHCPRV1,ED200007        * load provider no.
            ELSE
              COMPARE   THREE,TCFORM6            * 3B certificate ?
              IF        @EQUAL
                MOVE      "No provider no. for certifying doctor",ERRMSG
                CALL      ERMSG000               * Print an error message
              ELSE
                MOVE      "Warning - No provider no. for certifying doc",ERRMSG
                CALL      PRMSG000               * Print a warning message
              ENDIF
            ENDIF
          ELSE
            MOVE      "Certifying doctor not on file",ERRMSG
            CALL      ERMSG000                   * Print an error message
          ENDIF
.
.
WRCER300  UNPACK    PTCESDAT,CCENT,CYEAR,CMON,CDAY   * load date signed
          PACK      ED200009,CDAY,CMON,CCENT,CYEAR
          REP       " 0",ED200009
.
          UNPACK    PTCEFDAT,CCENT,CYEAR,CMON,CDAY   * load date from
          PACK      ED200010,CDAY,CMON,CCENT,CYEAR
          REP       " 0",ED200010
.
          UNPACK    PTCETDAT,CCENT,CYEAR,CMON,CDAY   * load date to
          PACK      ED200011,CDAY,CMON,CCENT,CYEAR
          REP       " 0",ED200011
.
          DAYSEP    PTCEFDAT,PTCETDAT,NUMBDAYS   * load no. of days
          IF        NUMBDAYS = 0
            MOVE      ONE,NUMBDAYS               * set to "1" for sameday visit
          ENDIF
          MOVE      NUMBDAYS,ED200012
          REP       " 0",ED200012
.
.         See if there are any comments associated with this certificate.
.         We are using the first 40 characters of the first comment line
.         to populate "nature of illness".
.
          PACK      KEY22,PTCEURNO,PTCETYPE,PTCEFDAT,SP30
          CALL      RSPTCLC1                     * position in file
          CALL      RKPTCLC1                     * read next record
          BRANCH    OVRCD,WRCER400               * eof - no comments
.
          MATCH     PTCEURNO,PTCLURNO            * same U/R still ?
          GOTO      WRCER400 IF NOT EQUAL        * no - no comments
.
          MATCH     PTCETYPE,PTCLTYPE            * same type still ?
          GOTO      WRCER400 IF NOT EQUAL        * no - no comments
.
          MATCH     PTCEFDAT,PTCLFDAT            * same from date still ?
          GOTO      WRCER400 IF NOT EQUAL        * no - no comments
.
.         A comment line has been found for this ur/type/from date, so
.         check if it is blank.
.
          MATCH     SP70,PTCLTEXT                * blank comment line ?
          IF        !@EQUAL
            MOVE      PTCLTEXT,ED200006          * no - load nature of illness
            GOTO      WRCER500
          ENDIF
.
.         Either the comment line was blank, or no comments were found.  We
.         need to check if this is a 3B certificate as the "Nature of Illness"
.         is a mandatory field for this certificate
.
WRCER400  IF        TCFORM6 = 3
            MOVE      "Nature of illness blank",ERRMSG
            CALL      ERMSG000                   * Print an error message
          ELSE
            MOVE      "Warning - Nature of illness blank",ERRMSG
            CALL      PRMSG000                   * Print a warning message
          ENDIF
.
WRCER500  BRANCH    VALDFLG,WRCER100             * Only validating data
.
          IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;ED200001,ED200002,ED200003,ED200004:
                                   ED200005,ED200006,ED200007,ED200008:
                                   ED200009,ED200010,ED200011,ED200012
          ELSE
            WRITE     EXTFILE1,SEQ;ED200001,ED200002,ED200003,ED200004:
                                   ED200005,ED200006,ED200007,ED200008:
                                   ED200009,ED200010,ED200011,ED200012;
          ENDIF
.
          GOTO      WRCER100                     * get next certificate record
.
WRCER900  BRANCH    VALDFLG,WRCER999             * only validating
.
          IF        COUNTER = 0 & EXTRFLAG = 1
            UNPACK    SP70,ED200003,ED200004,ED200005,ED200006,ED200007
            UNPACK    SP70,ED200008,ED200009,ED200010,ED200011,ED200012
            REP       " 0",ED200012
            MOVE      "    1",ED200003
.
            IF        TESTFLG=1
              WRITE     EXTFILE1,SEQ;ED200001,ED200002,ED200003,ED200004:
                                     ED200005,ED200006,ED200007,ED200008:
                                     ED200009,ED200010,ED200011,ED200012
            ELSE
              WRITE     EXTFILE1,SEQ;ED200001,ED200002,ED200003,ED200004:
                                     ED200005,ED200006,ED200007,ED200008:
                                     ED200009,ED200010,ED200011,ED200012;
            ENDIF
          ENDIF
.
WRCER999  RETURN
+
.******************************************************************************
.*                                  WRMED000              Called by: VALD0000 *
.*                           Write Medical Services                & WRIT0000 *
.******************************************************************************
.
WRMED000  BRANCH    VALDFLG,WRMED999        * Only validating data
.
          UNPACK    SP70,ED210003,ED210004,ED210005,ED210006,ED210007,ED210008
          UNPACK    SP70,ED210009,ED210010,ED210011
          REP       " 0",ED210003
          REP       " 0",ED210010
.
          MOVE      "    1",ED210003
.
          IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;ED210001,ED210002,ED210003,ED210004:
                                   ED210005,ED210006,ED210007,ED210008:
                                   ED210009,ED210010,ED210011
          ELSE
            WRITE     EXTFILE1,SEQ;ED210001,ED210002,ED210003,ED210004:
                                   ED210005,ED210006,ED210007,ED210008:
                                   ED210009,ED210010,ED210011;
          ENDIF
.
WRMED999  RETURN
+
.******************************************************************************
.*                                  WRREM000              Called by: VALD0000 *
.*                           Write Transport Group Details         & WRIT0000 *
.******************************************************************************
.
WRREM000  BRANCH    VALDFLG,WRREM999        * Only validating data
.
          UNPACK    SP70,ED900003
          UNPACK    SP70,ED900004
          REP       " 0",ED900003
.
          MOVE      "    1",ED900003
.
          IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;ED900001,ED900002,ED900003,ED900004
          ELSE
            WRITE     EXTFILE1,SEQ;ED900001,ED900002,ED900003,ED900004;
          ENDIF
.
WRREM999  RETURN
+
.******************************************************************************
.*                                  WRTLR000              Called by: VALD0000 *
.*                            Write Trailer Details                & WRIT0000 *
.******************************************************************************
.
WRTLR000  BRANCH    VALDFLG,WRTLR999        * Only validating data, exit
.    
          UNPACK    SP70,ED910003,ED910004
          REP       " 0",ED910003
          REP       " 0",ED910004
.
          MOVE      TOTRECCT,ED910003
          REP       " 0",ED910003
.
          MOVE      TOTAMTCT,KEY10
          UNPACK    KEY10,KEY7,KEY1,KEY2
          PACK      ED910004,KEY7,KEY2          * Total claim amount
          REP       " 0",ED910004
.
          WRITE     EXTFILE1,SEQ;ED910001,ED910002,ED910003,ED910004
.
WRTLR999  RETURN
+
.******************************************************************************
.*                                  ERMSG000              Called by: Lots     *
.*                             Print Error Message                            *
.******************************************************************************
.
ERMSG000  COMPARE   ONE,VALDFLG
          GOTO      ERMSG999 IF NOT EQUAL   * Not validating, writing details
.
          COMPARE   "55",CLNO
          CALL      HEAD0000 IF NOT LESS    * Line counter >= 55 lines
.
          PACK      ERRMSG,ERRMSG,SP30,SP30
          PRINT     *1,"|",INVNO,"|",ADMINO,"|",ERRMSG,"|"
          ADD       ONE,CLNO
.
          MOVE      ONE,ERRFLG              * Error flag - yes
          ADD       ONE,ERRCT             * Increment the error counter
.
ERMSG999  RETURN
+
.******************************************************************************
.*                                  PRMSG000              Called by: Lots     *
.*                            Print Warning Message                           *
.******************************************************************************
.
PRMSG000  COMPARE   ONE,VALDFLG
          GOTO      PRMSG999 IF NOT EQUAL   * Not validating, writing details
.
          COMPARE   "55",CLNO
          CALL      HEAD0000 IF NOT LESS    * Line counter >= 55 lines
.
          PACK      ERRMSG,ERRMSG,SP30,SP30
          PRINT     *1,"|",INVNO,"|",ADMINO,"|",ERRMSG,"|"
          ADD       ONE,CLNO
.
          MATCH     SAVINVN2,INVNO
          IF        !@EQUAL
            ADD       ONE,WARCT             * Increment the warning counter
            MOVE      INVNO,SAVINVN2
          ENDIF
.
PRMSG999  RETURN
+
.******************************************************************************
.*                                  FRNTL000              Called by: Lots     *
.*                            Format Numeric Totals                           *
.******************************************************************************
.
FRNTL000  PACK      KEY11A,SP10,SP1
          MOVE      FORM8P2,KEY11A
          UNPACK    KEY11A,KEY1,KEY7,KEY1,KEY2
          PACK      KEY9,KEY7,KEY2
.
          MOVE      SP1,KEY1
          IF        FORM8P2=0
            MOVE      "I",KEY1              * Credit charge indic - info only
          ENDIF
.
          SCAN      "-",KEY9
          IF        @EQUAL
            RESET     KEY9
            REP       "- ",KEY9
            MOVE      "C",KEY1              * Credit charge indic - credit
          ENDIF
          REP       " 0",KEY9
.
FRNTL999  RETURN
+
.******************************************************************************
.*                                  CTIME000              Called by: WPSG0000 *
.*                               Calculate Time                               *
.* Returns:   EXIT  0 = Valid time                                            *
.*                  1 = Invalid time                                          *
.*            FORM4 - Theatre Time in minutes                                 *
.******************************************************************************
.
CTIME000  MOVE      ZERO,FORM4
          UNPACK    STRTTME,CHOUR,KEY1,CMIN
          MATCH     SP2,CHOUR
          GOTO      CTIME950 IF EQUAL       * Invalid time
.
          MOVE      CHOUR,IHOUR
          MOVE      CMIN,IMIN
          ASSIGN    (IHOUR*60)+IMIN,FORM9
.
          UNPACK    ENDTME,CHOUR,KEY1,CMIN
          MATCH     SP2,CHOUR
          GOTO      CTIME950 IF EQUAL       * Invalid time
.
          MOVE      CHOUR,IHOUR
          MOVE      CMIN,IMIN
          ASSIGN    (IHOUR*60)+IMIN-FORM9,FORM9
.
          IF        FORM9>=0
            MOVE      FORM9,FORM4
          ELSE
            ASSIGN    (FORM9+1440),FORM4    * 1440 = minutes in a day
          ENDIF
.
          COMPARE   ZERO,FORM4
          GOTO      CTIME950 IF EQUAL       * Invalid time
.
          MOVE      ZERO,EXIT
          GOTO      CTIME999
.
CTIME950  MOVE      ONE,EXIT
.
CTIME999  RETURN
+
.******************************************************************************
.*                                  GTEEC000              Called by: WMIG0000 *
.*                         Get The EDI Equivalent Code                        *
.* Returns:    EXIT  0 = EDI Equivalent code found                            *
.*                   1 = EDI Equivalent code not found                        *
.*             ED170004 - Service code                                        *
.******************************************************************************
.
GTEEC000  PACK      DIM8,DTFCENT,DTFYEAR,DTFMONTH,DTFDAY    * from date
          REP       " 0",DIM8
.
          UNPACK    SP20,PTHFBCAT           * convert "H/F Table" to "Table Type
          PACK      KEY14,AFUNDH,AFNDTB,SP20
          CALL      RDFUND1                 * "Table Type code" now in PTHFBCAT
.                                
          PACK      KEY29,ACLAIM,AFUNDH,PTHFBCAT,TITEMNO,DIM8,SP10
          CALL      PATMCHRD                * read Misc.Charges file 
          BRANCH    EXIT,GTEEC100           * 1=Not Found
.
.         Check if this is a prosthetic item, and if so, send code prefixed
.         with "PX00".
.
GTEEC080  IF        EXTRFLAG = 0
            MATCH     SP3,MMSCGRP           * misc. charge group blank ?
            IF        !@EQUAL
              PACK      KEY5,ANSF,ANSI,MMSCGRP  * no
              CALL      RDCODE1             * code on file ?
              IF        OVRCD = 0
                MATCH     ANSP,TCINDC2      * yes - prosthetic ?
                IF        @EQUAL
                  PACK      ED170004,ANSP,ANSX,ZERO,ZERO,MCHARGE,SP10
                  GOTO      GTEEC900
                ENDIF
              ENDIF
            ENDIF
          ENDIF
.
          MATCH     SP10,PTMCEDIE
          GOTO      GTEEC100 IF EOS         * No EDI equivalent code found
          GOTO      GTEEC800 IF NOT EQUAL   * EDI equivalent code found
.
GTEEC100  PACK      KEY29,ACLAIM,SP6,SP3,TITEMNO,DIM8,SP10
          CALL      PATMCHRD                * read Misc.Charges file 
          BRANCH    EXIT,GTEEC200           * 1=Invalid
.
GTEEC180  IF        EXTRFLAG = 0
            MATCH     SP3,MMSCGRP           * misc. charge group blank ?
            IF        !@EQUAL
              PACK      KEY5,ANSF,ANSI,MMSCGRP  * no
              CALL      RDCODE1             * code on file ?
              IF        OVRCD = 0
                MATCH     ANSP,TCINDC2      * yes - prosthetic ?
                IF        @EQUAL
                  PACK      ED170004,ANSP,ANSX,ZERO,ZERO,MCHARGE,SP10
                  GOTO      GTEEC900
                ENDIF
              ENDIF
            ENDIF
          ENDIF
.
          MATCH     SP10,PTMCEDIE
          GOTO      GTEEC200 IF EOS         * No EDI equivalent code found
          GOTO      GTEEC800 IF NOT EQUAL   * EDI equivalent code found
.
GTEEC200  PACK      KEY29,PTCNDCLM,SP6,SP3,TITEMNO,DIM8,SP10
          CALL      PATMCHRD                * read Misc.Charges file
          BRANCH    EXIT,GTEEC950           * 1=Invalid
.
GTEEC280  IF        EXTRFLAG = 0
            MATCH     SP3,MMSCGRP           * misc. charge group blank ?
            IF        !@EQUAL
              PACK      KEY5,ANSF,ANSI,MMSCGRP  * no
              CALL      RDCODE1             * code on file ?
              IF        OVRCD = 0
                MATCH     ANSP,TCINDC2      * yes - prosthetic ?
                IF        @EQUAL
                  PACK      ED170004,ANSP,ANSX,ZERO,ZERO,MCHARGE,SP10
                  GOTO      GTEEC900
                ENDIF
              ENDIF
            ENDIF
          ENDIF
.
          MATCH     SP10,PTMCEDIE
          GOTO      GTEEC950 IF EOS         * No EDI equivalent code found
          GOTO      GTEEC950 IF EQUAL       * Blank EDI equivalent code
.
GTEEC800  PACK      ED170004,PTMCEDIE,SP10  * load EDI Equivalent
GTEEC900  MOVE      ZERO,EXIT
          GOTO      GTEEC999
.
GTEEC950  MOVE      ONE,EXIT
.
GTEEC999  RETURN
+
.******************************************************************************
.*                                  GI1CD000              Called by: WDMG0000 *
.*                               Get ICD10 Codes                              *
.******************************************************************************
.
GI1CD000  MOVE      ZERO,CODCNT
          PACK      KEY16,ADMINO,SP20
          CALL      RSPTECD2                * Position on & read a patient
GI1CD100  CALL      RKPTECD2                  epsiode disease file record
          BRANCH    OVRCD,GI1CD200
.
          MATCH     ADMINO,PTEDADMN
          GOTO      GI1CD200 IF NOT EQUAL   * Different admin no
.
          MATCH     PTCNI10D,PTEDDTCD
          IF        @LESS
            PACK      KEY9,PTEDCODE
            CALL      RD10T9D1              * Read an ICD9 disease file record
            BRANCH    OVRCD,GI1CD100
.
            MOVE      DICD10CD,PTEDCODE     * Mapped ICD10 disease code
          ELSE
            MOVE      SP8,ICDRDDTE
            MATCH     SP8,DDATE             * discharge date blank ?
            IF        !@EQUAL
              MOVE      DDATE,ICDRDDTE      * no - load discharge date
            ENDIF
            MOVE      PTEDCODE,KEY9
            CALL      RDPTICD1              * Read an ICD10 disease file record
            BRANCH    OVRCD,GI1CD100
          ENDIF
.
.         Removed this check for morphology code as MBF require all codes
.         to be sent
.
.>>>>     MATCH     "4",PT0DACRQ
.>>>>     GOTO      GI1CD100 IF EQUAL       * Morphology code
.
          ADD       ONE,CODCNT
          REP       ". - / ",PTEDCODE
          SQUEEZE   PTEDCODE
          PACK      PTEDCODE,PTEDCODE,SP10
          MOVE      PTEDCODE,DISARY[CODCNT]
.
          MOVE      MAXARRY,FORM3                                     *I-240107
          COMPARE   FORM3,CODCNT                                      *I-240107
          GOTO      GI1CD100 IF LESS        * Code counter < 99
.
GI1CD200  MOVE      ZERO,CODCNT
          PACK      KEY16,ADMINO,SP20
          CALL      RSPTECO2                * Position on & read a patient
GI1CD300  CALL      RKPTECO2                  episode operation file record
          BRANCH    OVRCD,GI1CD999
.
          MATCH     ADMINO,PTEOADMN
          GOTO      GI1CD999 IF NOT EQUAL   * Different admin no
.
          MATCH     ANSX,PTEOTYPE
          GOTO      GI1CD300 IF EQUAL       * Ignore this operation code
.
          MATCH     PTCNI10D,PTEODTCD
          IF        @LESS
            PACK      KEY9,PTEOCODE
            CALL      RD10T9O1              * Read an ICD9 operation file record
            BRANCH    OVRCD,GI1CD300
.
            MOVE      OICD10CD,PTEOCODE     * Mapped ICD10 operation code
          ELSE
            MOVE      SP8,ICDRDDTE
            MATCH     SP8,DDATE             * discharge date blank ?
            IF        !@EQUAL
              MOVE      DDATE,ICDRDDTE      * no - load discharge date
            ENDIF
            MOVE      PTEOCODE,KEY9
            CALL      RDPTICO1              * Read an ICD10 operation file rec
            BRANCH    OVRCD,GI1CD300
          ENDIF
.
          MATCH     PTCNEDRG,PTEOCODE
          GOTO      GI1CD300 IF EQUAL       * Exclude dummy code
.
          ADD       ONE,CODCNT
          REP       ". - / ",PTEOCODE
          SQUEEZE   PTEOCODE
          PACK      PTEOCODE,PTEOCODE,SP10
          MOVE      PTEOCODE,OPRARY[CODCNT]
.
          MOVE      MAXARRY,FORM3                                     *I-240107
          COMPARE   FORM3,CODCNT                                      *I-240107
          GOTO      GI1CD300 IF LESS        * Code counter < 100
.
GI1CD999  RETURN
+
.******************************************************************************
.*                                  WRV2C000              Called by: WDMG0000 *
.*                           Write Version 2.2 Codes                          *
.******************************************************************************
.
WRV2C000  MOVE      ONE,CODCNT
          REPEAT
            MOVE      DISARY[CODCNT],KEY5
            WRITE     EXTFILE1,SEQ;KEY5;
            ADD       ONE,CODCNT
          UNTIL     CODCNT>20
.
          MOVE      ONE,CODCNT
          REPEAT
            MOVE      OPRARY[CODCNT],KEY7
            WRITE     EXTFILE1,SEQ;KEY7;
            ADD       ONE,CODCNT
          UNTIL     CODCNT>20
.
WRV2C999  RETURN
+           
.******************************************************************************
.*                                  LEAVE000              Called by: WRIT0000 *
.*          Calculate the bed days for leave                                  *
.******************************************************************************
.
LEAVE000  MOVE      LEAVDATE,CDYSFDTE            * From Date
          MOVE      RETNDATE,CDYSTDTE            * To Date
          CALL      CALCDAYS                     * calc no. of days leave
          SUB       ONE,CDYSDAYS
.               
          COMPARE   ZERO,CDYSDAYS                 * +ve?
          IF        @LESS | @EQUAL
            MOVE      ZERO,CDYSDAYS         
          ELSE
.
. --------- If the patient goes on leave on the admission date don't count
.           the day as a leave day
.
            PACK      KEY8,ADATE,SP10
            MATCH     KEY8,LEAVDATE
            IF        @EQUAL
              SUB       ONE,CDYSDAYS
            ENDIF
          ENDIF
          ADD       CDYSDAYS,LEAVDAY              * leave days
          MOVE      SP8,LEAVDATE
          MOVE      SP8,RETNDATE
.
LEAVE999  RETURN
+
.*****************************************************************************
.*                              CHICU000               Called by: WRACD000   *
.*               Check if ICU (Critical Care) stay                WRCCG000   *
.* Requires: Successful READ on patcodes using TATYPE (Cat A) or TRBTYP      *
.*           Cat BT                                                          *
.* Returns : EXIT    0 = Non-ICU stay                                        *
.*                   1 = ICU stay                                            *
.*****************************************************************************
.
CHICU000  TYPE      TCINDC9
          IF        @EQUAL
            MOVE      TCINDC9,FORM1
            IF        FORM1 >= 1 & FORM1 <= 7 
              GOTO      CHICU910
            ENDIF
          ENDIF
.
          MOVE      ZERO,EXIT                    * set for non-icu stay
          GOTO      CHICU999
.
CHICU910  MOVE      ONE,EXIT                     * set for icu stay
.
CHICU999  RETURN
+
.*****************************************************************************
.*                       EXPSG000                  Called by: WRPSG000       *
.*              Write the remaining PSG segment details and the associated   *
.*              MSG segments                                                 *
.*****************************************************************************
.
EXPSG000  BRANCH    VALDFLG,EXPSG300        * validation only
.
          CALL      FRNTL000                * Format numeric totals
          MOVE      KEY9,ED140009
          WRITE     EXTFILE1,SEQ;ED140009;
.
EXPSG300  MOVE      KEY1,ED140013
          CALL      PATGILOS                * Get intended LOS
          MOVE      KEY1,FORM1
          MOVE      FORM1,LOFSTAY           * Save intended LOS
          COMPARE   TWO,FORM1
          GOTO      EXPSG400 IF NOT EQUAL   * Sameday patient
.
          BRANCH    VALDFLG,EXPSG900
.
          IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;ZERO2,ZERO4,SP1,ED140013
          ELSE
            WRITE     EXTFILE1,SEQ;ZERO2,ZERO4,SP1,ED140013;
          ENDIF
          GOTO      EXPSG900
.
EXPSG400  PACK      KEY11,ADMINO,SP10
          CALL      RDSMMBS1                * Position on & read a patient MBS
          CALL      RDKMMBS1                  file record
          BRANCH    OVRCD,EXPSG500
.
          MATCH     ADMINO,MMADMN
          GOTO      EXPSG500 IF NOT EQUAL   * Different admin no
.
          MOVE      MMSTIM,STRTTME
          MOVE      MMETIM,ENDTME
          MATCH     SP5,MMSTIM
          IF        !@EQUAL
            MOVE      MMSTIM,ED140010
          ENDIF
          CALL      CTIME000                * Calculate time
          COMPARE   ONE,EXIT
          GOTO      EXPSG600 IF NOT EQUAL   * Valid theatre time
.
EXPSG500  PACK      KEY16,ADMINO,SP20
          CALL      RSPTECO2                * Position on & read a patient
          CALL      RKPTECO2                  episode operation file record
          BRANCH    OVRCD,EXPSG600
.
          MATCH     ADMINO,PTEOADMN
          GOTO      EXPSG600 IF NOT EQUAL   * Different admin no
.
          MOVE      PTEOSTTM,STRTTME
          MOVE      PTEOEDTM,ENDTME
.
          MATCH     SP5,PTEOSTTM
          IF        !@EQUAL
            MOVE      PTEOSTTM,ED140010
          ENDIF
          CALL      CTIME000                * Calculate time
.
EXPSG600  REP       " 0",ED140010
          IF        FORM4=0
            MOVE      "Warning ADM type: ",ERRMSG
            PACK      ERRMSG,ERRMSG,ATYPE
            ENDSET    ERRMSG
            APPEND    " : No time in theatre or procedure room",ERRMSG
            RESET     ERRMSG
            CALL      PRMSG000              * Print warning message
          ENDIF
.
          MOVE      SP1,KEY1B
          MOVE      SP1,TCINDC1
          BRANCH    OPRFLG,EXPSG800         * Not using OPR, error
.
          PACK      KEY31,ADMINO,SP30
          CALL      RSOPDEA2                * Position on & operation detail
          CALL      RKOPDEA2                  file record
          BRANCH    OVRCD,EXPSG800
.
          MOVE      ADMINO,CKYIDEF8
          MATCH     CKYIDEF8,OPDAADMN
          GOTO      EXPSG800 IF NOT EQUAL   * Different admin no
.
          MATCH     SP3,OPDAANAE
          GOTO      EXPSG700 IF EQUAL       * Blank anaesthetic code
.
          PACK      KEY5,ANSO,ANSA,OPDAANAE
          CALL      RDCODE1                 * Read a codes file record
          BRANCH    OVRCD,EXPSG700
.
          TYPE      TCINDC1
          GOTO      EXPSG700 IF NOT EQUAL   * Non numeric anaesthetic type
.
          MOVE      ZERO,FORM1
          MOVE      TCINDC1,FORM1
          BRANCH    FORM1,EXPSG800,EXPSG800,EXPSG800,EXPSG800,EXPSG800
.
EXPSG700  MOVE      "Invalid anaesthetic type code",ERRMSG
          COMPARE   TWO,LOFSTAY
          IF        @EQUAL
            CALL      ERMSG000              * Print an error message
          ELSE
            CALL      PRMSG000              * Print a warning message
          ENDIF
.
EXPSG800  BRANCH    VALDFLG,EXPSG900        * Only validating data, exit
.
          MOVE      FORM4,ED140011
          REP       " 0",ED140011
          MOVE      TCINDC1,ED140012
          REP       "1L2G3R4I5N N",ED140012
.
          IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;ED140010,ED140011,ED140012,ED140013
          ELSE
            WRITE     EXTFILE1,SEQ;ED140010,ED140011,ED140012,ED140013;
          ENDIF
.
.         We have completed writing the PSG segment, so now write all the
.         MSG records in the temporary file (as all are related to this PSG).
.
EXPSG900  CALL      WRMSG000                     * write secondary procedures
.
EXPSG999  RETURN
+
.******************************************************************************
.*                                  GTMSG000              Called by: WRPSG000 *
.*            Get the MSG data relating to the current theatre date           *
.*            and write it to the temp file                                   *
.******************************************************************************
.
GTMSG000  BRANCH    VALDFLG,GTMSG999             * validation only
.
          ADD       TPATAMTT,FORM8P2             * increment total for 140009
.
          ADD       ONE,MSGCOUNT                 * increment MSG count
          MOVE      MSGCOUNT,TMPSEQNO            * load sequence number
          MOVE      TITEMNO,TMPITEMN             * load item number
          MOVE      TPATAMTT,TMPAMNT             * load item amount
.
          CALL      WRSGMSG1                     * write MSG tempfile record
.
GTMSG999  RETURN
+
.******************************************************************************
.*                                  CLMSG000              Called by: WRPSG000 *
.*           Clear all MSG items from the temporary file                      *
.******************************************************************************
.
CLMSG000  MOVE      SP5,KEY5
          CALL      RSSGMSG1                     * position at start of file
          CALL      RKSGMSG1                     * read next record
          BRANCH    OVRCD,CLMSG999               * eof - finished
.
          PACK      KEY5,TMPSEQNO
          CALL      DESGMSG1                     * delete record
          GOTO      CLMSG000                     * get next record
.
CLMSG999  RETURN
+
.**************************************************************************
.*                              CREAT000               Called by: ML0000  *
.*             create a new temporary file for MSG data                   *
.**************************************************************************
.
CREAT000  CALL      KILLM000                     * remove existing file
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ISBUILD,TEMPMSGF,UKEYMSG
          EXECUTE   CMDLINE,TASKID               * create temporary index file
.
          OPEN      MSGTEMP1,TEMPMSGF            * open temp index file
.
CREAT999  RETURN
+
.****************************************************************************
.*                              KILLM000               Called by: ML0000    *
.*               close and erase the temporary file                         *
.****************************************************************************
.
KILLM000  CLOSE     MSGTEMP1                     * close file
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ERASE,TEMPMSGF       * set file erase command
          EXECUTE   CMDLINE,TASKID               * erase temp file
.
KILLM999 RETURN
+
.*****************************************************************************
.*                          REPOS000               Called by: WRCID000       *
.*        Reposition on original patedsaf record to restore the fields       *
.*****************************************************************************
.
REPOS000  MOVE      SAVKEY32,KEY32
          CALL      RDPTEDS1
.
REPOS999  RETURN
+
.****************************************************************************
.*        IO ROUTINES FOR TEMPORARY FILE  (MSG segment data)                *
.****************************************************************************
.
RSSGMSG1  READ      MSGTEMP1,KEY5;;
          RETURN
.
RKSGMSG1  MOVE      ZERO,OVRCD
          READKS    MSGTEMP1;TMPSEQNO,TMPITEMN,TMPAMNT
          GOTO      OVERCOND IF OVER
          RETURN
.
WRSGMSG1  WRITE     MSGTEMP1,KEY5;TMPSEQNO,TMPITEMN,TMPAMNT
          RETURN
.
DESGMSG1  DELETE    MSGTEMP1,KEY5
          RETURN
+
