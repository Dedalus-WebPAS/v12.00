. *****************************************************************************
. * Filename      : PATVKCRD.PBL                                              *
. * System        : Patient management, Outpatients, Accident & Emergency     *
. *****************************************************************************
. * Parameters    : PTVKCARD      card number                                 *
. * Subroutines   :                                                           *
. * Procedures    : VALKCARD  - Valid kiwicard format                         *
. * Modifications : 12/06/1992    Justin Coates  Quote 7289  SRF 113410       *
. *                 added use of PTCNCSCP for default prefix for card number  *
. *                 27/07/1992    Justin Coates  Quote 7289  SRF 113410       *
. *                 made above only work for Community Service Cards          *
. *                 05/10/1995    MATT                                        *
. *                 Changed CONTROLF Def to SFILE                             *
. *****************************************************************************
.
. *****************************************************************************
. * VALKCARD      : Validate the format of a kiwicard number                  *
. * Parameters    : PTVKCARD - Card number to be validated                    *
. * Returns       : EXIT     - 0 means valid format                           *
. *                          - 1 means invalid format                         *
. *****************************************************************************
          DEFPROC   VALKCARD
.
CARDTYPE  DIM       1
CARDNUMB  DIM       19
CHECKDIG  DIM       1
.
DIGIT     FORM      1
DIGIT1    DIM       1
DIGIT2    DIM       1
DOUBLE    FORM      1
.
SUM       FORM      3
.
WORK      FORM      2
WORKDIM   DIM       2
PTCNCSCP  DIM       6         * community service card prefix
 IFGE     $$VER,7
CONTROLF  SFILE    ASCII, FIXED=256
 XIF
 IFEQ     $$VER,6
CONTROLF  FILE     ASCII, FIXED=256
 XIF
.
VCARD000  CALL      CKLEN000                * check the card length
          UNPACK    PTVKCARD,CARDTYPE,CARDNUMB
.
          CMATCH    ANSC,CARDTYPE            * community service card ?
          GOTO      VCARD100 IF EQUAL        * yes
.
          CMATCH    ANSH,CARDTYPE            * high use card ?
          GOTO      VCARD400 IF EQUAL        * yes 
.
          CMATCH    ANSG,CARDTYPE            * GRI entitlement ?
          GOTO      VCARD700 IF EQUAL        * yes 
.
          GOTO      VCARD990                 * invalid card format
.
.         Validate community service card format
.
VCARD100  CALL      LUNN0000                 * use Lunn formula validation
          BRANCH    EXIT,VCARD990            * invalid format
          GOTO      VCARD980
.
.         Validate high use card format
.
VCARD400  GOTO      VCARD980
.
.         Validate GRI entitlement format
.
VCARD700  GOTO      VCARD980
.
.         Valid card
.
VCARD980  MOVE      ZERO,EXIT
          GOTO      VCARD999
.
.         Invalid format
.
VCARD990  MOVE      ONE,EXIT
.
VCARD999  GOTO      ENDVCARD
.
. *****************************************************************************
. * LUNN0000 : Lunn formula for modulus 10 for check digit                    *
. *****************************************************************************
.
LUNN0000  RESET     CARDNUMB,16              * check digit position
          MOVE      CARDNUMB,CHECKDIG        * save checkdigit
          CMOVE     SP1,CARDNUMB             * blank out check digit on number
.
          MATCH     SP4,CARDNUMB             * check for trailing blanks
          GOTO      LUNN9000 IF NOT EQUAL    * found some -> invalid format
.
.         Now loop through the digits, and process each one
.
          RESET     CARDNUMB                 * start at beginning of number
          MOVE      ONE,DOUBLE               * double first digit
          MOVE      ZERO,SUM                 * initialise checksum
.
LUNN1000  CMATCH    SP1,CARDNUMB             * finished ?
          GOTO      LUNN8000 IF EQUAL        * yes.
.
.         Get this digit, and determine if we need to double it
.
          MOVE      CARDNUMB,ANS             * get the digit
          MOVE      ANS,DIGIT                * make a numeric
          MOVE      DIGIT,WORK               * move to a work variable
.
          IF        DOUBLE = 1
            MULT      TWO,WORK               * double digit
            MOVE      ZERO,DOUBLE            * don't double next digit
          ELSE
            MOVE      ONE,DOUBLE            * double next digit
          ENDIF
.
.         Add up the digits of the work variable
.
          MOVE      WORK,WORKDIM             * make a dim field
          REP       " 0",WORKDIM             * blanks to be treated as zero
.
          UNPACK    WORKDIM,DIGIT1,DIGIT2
.
          MOVE      DIGIT1,DIGIT
          ADD       DIGIT,SUM                * add this digit to the sum
.
          MOVE      DIGIT2,DIGIT
          ADD       DIGIT,SUM                * add this digit to the sum
.
.         Get the next digit to be processed
.
          BUMP      CARDNUMB
          GOTO      LUNN1000 IF NOT EOS
.
.         Finished processing number. Now get the 10's complement of the last
.         digit of the sum.
.
LUNN8000  MOVE      SUM,WORK
          MOVE      WORK,WORKDIM
          UNPACK    WORKDIM,DIGIT1,DIGIT2    * get the last digit of the sum
.
          MOVE      DIGIT2,DIGIT             * make last number a form field
.
          MOVE      TEN,WORK
          SUB       DIGIT,WORK               * takes tens complement
.
          MOVE      WORK,WORKDIM
          UNPACK    WORKDIM,DIGIT1,DIGIT2    * get the last digit
.
.         Validate the check digit
.
          CMATCH    DIGIT2,CHECKDIG          * correct check digit ?
          GOTO      LUNN9000 IF NOT EQUAL    * incorrect check digit
.
          MOVE      ZERO,EXIT                * valid card number
          GOTO      LUNN9999
.
LUNN9000  MOVE      ONE,EXIT
.
LUNN9999  RETURN
.
.*********************************************************************
.                   CKLEN000
.         see if 10 or 16 characters were entered
.         if ten entered, prepend PTCNCSCP to the entered value
.         NOTE : only do for Community Service Cards
.*********************************************************************
CKLEN000  OPEN      CONTROLF,"controlf"
          READ      CONTROLF,TWENTY;*216,PTCNCSCP
          CLOSE     CONTROLF
.
          MATCH     SP6,PTCNCSCP
          GOTO      CKLEN999 IF EQUAL       * dont do if para. blank
          MOVE      PTVKCARD,ANS
          MATCH     ANSC,ANS
          GOTO      CKLEN999 IF NOT EQUAL   * only do for community cards
.
          STRIP     PTVKCARD
          MOVELPTR  PTVKCARD,FORM2
          PACK      PTVKCARD,PTVKCARD,SP20
          IF        FORM2 = TEN1
            UNPACK    PTVKCARD,CARDTYPE,CARDNUMB
            PACK      KEY20,CARDTYPE,PTCNCSCP,CARDNUMB,SP20
            MOVE      KEY20,PTVKCARD          * reset the card
            DISPLAY   *PCCOL:CVERT,*V2LON,PTVKCARD
          ENDIF
          RESET     PTVKCARD
          PACK      PTVKCARD,PTVKCARD,SP20
.
CKLEN999  RETURN
+
ENDVCARD  ENDPROC
+
