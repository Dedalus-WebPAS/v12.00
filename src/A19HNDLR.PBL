.*****************************************************************************
.*                           A19HNDLR                                        *
.*      This routine operates in three modes:                                *
.*           - Search Mode (Initial search - get first batch of records)     *
.*           - Search Mode (Get next batch of records for the same search)   *
.*           - Retrieve Patient Mode                                         * 
.*                                                                           *
.*      In Initial search mode, this routine accepts patient search criteria *
.*      to send to the NSLHD interface to retrieve a pre-defined maximum     *
.*      number of matching records (a batch).                                *
.*      The search criteria are sent in a QRY^A19 message via a TCP/IP       *
.*      socket connection following which the program waits for a response.  *
.*      The outcomes here may be:                                            *
.*           - no matches found                                              *
.*           - 1 batch or less matches found                                 *
.*           - more than 1 batch of matches found                            *
.*           - error occurred either connecting, sending the message or      *
.*             retrieving the response                                       *
.*      Where one or more matching records are found, the data is collated   *
.*      and returned to the calling program.                                 *
.*                                                                           *
.*      In search mode to retrieve the next batch of records, the            *
.*      continuation pointer is sent back to the NSLHD interface in another  *
.*      QRY^A19 message.  Functionaility is as per initial search from this  *
.*      point.                                                               *
.*                                                                           *
.*      In Retrieve Patient mode, a QRY^A19 message is sent with the         *
.*      selected UPI following which the program waits for a response        *
.*      from the NSLHD to see if the patient exists and if so, it collates   *
.*      the patient demographics that are returned in the response message.  *
.*      The outcomes here may be:                                            *
.*           - record not found (although this shouldn't happen)             *
.*           - record data successfully retrieved                            *
.*           - error occurred either connecting, sending the message or      *
.*             retrieving the response                                       *
.*      Where the patient record is found, the patient demographic data is   *
.*      collated and returned to the calling program.                        *
.*                                                                           *
.* Requires: HL7SMODE - Search Mode Flag (all modes)                         *
.*                        0 = Initial Search                                 *
.*                        1 = Search for next batch of records               *
.*                        2 = Retrieve selected UPI                          *
.*                        3 = Test Connection Only                           *
.*           HL7SURNM - Surname to search for (Search mode only)             *
.*           HL7FGNAM - First Given Name to search for  (Search mode only)   *
.*           HL7SGNAM - Second Given Name to search for (Search mode only)   *
.*           HL7GENDR - Gender to search for (Search mode only)              *
.*           HL7PTDOB - Date of Birth to search for (Search mode only)       *
.*           HL7PTMED - Medicare Number to search for (Search mode only)     *
.*           HL7CONTP - Continuation Pointer value (Search mode only)        *
.*                      (Space filled for initial search)                    *
.*           HL7UPIVL - UPI number (Retrieve patient mode only)              *
.*           HL7NSPID - NSLHD PersonID (Retrieve patient mode only)          *
.*           HL7MXREC - Maximum number of serach records to be returned from *
.*                      NSLHD interface.                                     *
.*>>>>>>     Data variables to return to calling program - array of data???? *
.*           OPEN on controlf                                                *
.* Returns:  EXIT   0 - A19 successful                                       *
.*                  1 - Connection lost                                      *
.*                  2 - Timeout on response                                  *
.*                  3 - Insufficient data supplied for mode                  *
.*                  4 - Destination details incomplete                       *
.*                  5 - Socket connection failed                             *
.*                  6 - A19 Response Format Error                            *
.*****************************************************************************
.*                                                                           *
.* Mods      :                                                               *
.*****************************************************************************
.*        V10.14.01 13/03/2019  Steve Armstrong  TSK 0871671                 *
.*                  Fixed processing of address (PID.11) to check for        *
.*                  address type "1" in component 7.                         *
.*****************************************************************************
.*        V10.13.05 22/10/2018  Steve Armstrong  TSK 0865126                 *
.*                  Mods to reset TRAP on SIGPIPE for web server             *
.*        V10.13.04 03/10/2018  Davin            TSK 0857734                 *
.*                  Remove "" from medicare expiry date (VZXP0000)           *
.*        V10.13.03 10/09/2018  Davin            TSK 0863288                 *
.*                  Check DATARCNT and LOOPCNT1 in VZXP0000 to stop U*R      *
.*        V10.13.02 07/09/2018  Davin            TSK 0863288                 *
.*                  Check for max patient limit (DATARCNT>=100 & HNDLR770)   *
.*        V10.13.01 28/08/2018  Davin            TSK 0857732                 *
.*                  Added data array field 25 to capture PID.26 (LDDATA00)   *
.*                  Mods to handle NK1 segment and write to tempfile for     *
.*                  populating extra contacts table (LNK10000/PNOK1000)      *
.*****************************************************************************
.*        V10.12.07 17/05/2018  Davin            TSK 0856298                 *
.*                  Log data received in smaller sections (TMPSTRNG/GTSTR000)*
.*        V10.12.06 08/05/2018  Davin            TSK 0844685                 *
.*                  Added strip blanks from array fields (LDDATA50)          *
.*        V10.12.05 01/05/2018  Davin            TSK 0844685                 *
.*                  Added fields 17-24 to data array (LDDATA00)              *
.*                  Added ZXP00201 - medicare validto date (VZXP0000)        *
.*        V10.12.04 20/04/2018  Davin            TSK 0844685                 *
.*                  Added NSLHD PersonID to QRD.8 (HL7NSPID)                 *
.*                  Changed to cater for the NK1 segment                     *
.*                  Added medicare number search parameter (HL7PTMED)        *
.*        V10.12.03 20/04/2018  Davin            TSK 0844685                 *
.*                  Changed to cater for the QAK/PV1/OBX and QRF segments    *
.*        V10.12.02 18/04/2018  Davin            TSK 0844685                 *
.*                  Changed to open and close socket for each transaction    *
.*                  Added alias tempfile for PID.9                           *
.*        V10.12.01 09/03/2018  Davin            TSK 0844685                 *
.*                  Use DSC segment for A19 continuation pointer (DSC00101)  *
.*****************************************************************************
.
A19HNDLR  CALL      CTMPT000                     * clear temporary table
.
          CALL      SNECT000                     * setup machine and socket vars
          BRANCH    EXIT,HNDLR940                * blank destination
.
.         Connect to the TCP/IP port
.
HNDLR050 
.davupi   COMPARE   THREE,HL7SMODE               * connection test only ?
.davupi   IF        @EQUAL
            CALL      CNECT000
            BRANCH    EXIT,HNDLR950                * socket connection failed
.davupi   ENDIF
.
.         First check if any search values have been entered
.
HNDLR070  BRANCH    HL7SMODE,HNDLR100:           * continuation search
                             HNDLR300:           * retrieve patient
                             HNDLR500            * test connection only
.
.         Initial or continuation search, so make sure we have at least
.         one of the following search criteria:
.           - Surname
.           - First Given Name
.           - Date of Birth
.
.>>>>> Note: I'm assuming that the continuation search still has to have
.            the search fields sent again as well as the continuation
.            pointer
.
          MATCH     SP70,HL7SURNM
          GOTO      HNDLR100 IF NOT EQUAL
.
          MATCH     SP70,HL7FGNAM
          GOTO      HNDLR100 IF NOT EQUAL
.
          MATCH     SP70,HL7PTMED
          GOTO      HNDLR100 IF NOT EQUAL
.
          MATCH     SP70,HL7PTDOB
          GOTO      HNDLR930 IF EQUAL
.
HNDLR100  REP       UPPLOW,HL7SURNM              * uppercase search variables
          REP       UPPLOW,HL7FGNAM
          REP       UPPLOW,HL7SGNAM
          REP       UPPLOW,HL7GENDR
          REP       UPPLOW,HL7PTDOB
          REP       UPPLOW,HL7PTMED
          GOTO      HNDLR500
.
.         We're retrieving a specific patient using the NSLHD PersonID, so
.         make sure it's populated
.
HNDLR300  MATCH     SP70,HL7NSPID
          GOTO      HNDLR930 IF EQUAL
.
HNDLR500  COMPARE   THREE,HL7SMODE               * connection test only ?
          IF        @EQUAL
            MATCH     "A19SENDR",PRGID
            IF        @EQUAL
.>>>>         CLOSE     COMSOCKT                   * yes - close socket
            ENDIF
            MOVE      TWO,MLOGFLAG
            MOVE      "Test Connect to socket",ERORTEXT
            CALL      LOGM0000                     * log message if required
            GOTO      HNDLR900                     * finished
          ENDIF
.
          MOVE      ZERO,MLOGFLAG                * set flag for start of message
          MOVE      "Processing Message ",ERORTEXT
          ENDSET    ERORTEXT
.dav1     APPEND    H7CIMESI,ERORTEXT
          APPEND    " @ ",ERORTEXT
          RESET     ERORTEXT
          CALL      LOGM0000                     * log message if required
.
.         Format and send the message segments
.
          CALL      WRMSH000
          BRANCH    EXIT,HNDLR910:               * connection lost
                         HNDLR920                * timeout on response
.
          CALL      WRQRD000
          BRANCH    EXIT,HNDLR910:               * connection lost
                         HNDLR920                * timeout on response
.
          CALL      WRQRF000
          BRANCH    EXIT,HNDLR910:               * connection lost
                         HNDLR920                * timeout on response
.
HNDLR550  MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF SIGPIPE
          WRITE     COMSOCKT,2,RPLYTIME;ENDBLOCK,CRETURN
.>>>>     TRAPCLR   SIGPIPE
          GOTO      HNDLR920 IF TIMEOUT          * timeout expired
          BRANCH    OVRCD,HNDLR910               * connection lost
.
          MOVE      TWO,MLOGFLAG
          PACK      ERORTEXT,ENDBLOCK,CRETURN
          CALL      LOGM0000                     * write to log file
.
          MOVE      SP70,ERORTEXT                * blank line
          CALL      LOGM0000                     * write to log file
.
          MOVE      "Waiting for acknowledgment",ERORTEXT
          CALL      LOGM0000                     * write to log file
.davvy
.         Now wait for an acknowledgement message from Third Party.
.
HNDLR600  CALL      CLER0000                     * clear mess. buffer and flags
          CALL      CLPID000                     * clear PID fields
          CALL      CLZXP000                     * clear ZXP fields
          CALL      CLDSC000                     * clear DSC fields
          CALL      CLNK1000                     * clear NK1 fields
          CALL      CLDATA00                     * Clear response data array
.
          MOVE      ZERO,MTCHFLAG                * init. message id match flag
          MOVE      ZERO,DISPFLAG                * don't display messages
          MOVE      ZERO,ERORFLAG                * initialise error flag
          MOVE      "gtstr001  ",D10
          CALL      GTSTR000                     * get next 4000 chars (or less)
          BRANCH    EXIT,HNDLR920:               * timeout
                         HNDLR910                * connection lost
.
.         Search the string for a start of block (ASCII 11) character
.
          SCAN      STRTBLOK,TMPSTRNG            * sob found ?
          GOTO      HNDLR905 IF NOT EQUAL        * no - ignore message
.
          APPEND    STRTBLOK,RECVMESS            * yes
.
          IF        DISPFLAG = 1
            DISPLAY   "Start of Block found",*R,*N;
          ENDIF
.
.         The next segment needs to be processed, so read in the next segment id
.
HNDLR700  CALL      GSEG0000                     * validate segment code
          BRANCH    EXIT,HNDLR920:               * connection timeout
                         HNDLR910:               * connection lost
                         HNDLR700:               * start of block
                         HNDLR800:               * end of block
                         HNDLR700:               * end of segment
                         HNDLR905                * 1st segment not MSH
.
          IF        DISPFLAG = 1
            DISPLAY   "Processing segment: [",SEGMENT,"]",*R,*N;
          ENDIF
.
.         We need to validate the segment for the message type, and
.         make sure that the segment is in the correct sequence for the
.         message
.
          CALL      VSEG0000                     * validate segment
          IF        EXIT = 1
            IF        DISPFLAG = 1
              DISPLAY   "Invalid segment received: [",SEGMENT,"] - Message":
                        "unsuccessful",*R,*N;
            ENDIF
            MOVE      "Invalid segment received",ERORTEXT
            GOTO      HNDLR960
          ELSE
            ADD       ONE,SEGCOUNT               * increment segment count
            CALL      VA190000                   * validate ADR^A19 segments
          ENDIF
.
.         If a valid segment id has been found, clear the segment fields
.
          PERFORM   SEGNUMBR,CLMSH000:           * MSH
                             CLMSA000:           * MSA
                             CLERR000:           * ERR
                             CLQRD000:           * QRD
                             CLPID000:           * PID
                             CLDSC000:           * DSC
                             CLQAK000:           * QAK
                             CLPV1000:           * PV1
                             CLOBX000:           * OBX
                             CLQRF000:           * QRF
                             CLNK1000:           * NK1
                             CLZXP000            * ZXP
.
          MOVE      ZERO,FIELDNO                 * initialise seg. field count
.
.         Read in the rest of the segment until an end of segment character
.         (ASCII 13 - Carriage return) is found.
.
HNDLR750  CALL      GCHR0000                     * get next character in message
          BRANCH    EXIT,HNDLR920:               * connection timeout
                         HNDLR910:               * connection lost
                         HNDLR700:               * start of block
                         HNDLR800:               * end of block
                         HNDLR770:               * end of segment
                         HNDLR905:               * no field separator
                         HNDLR905                * missing encoding char(s)
.
.         Check if the character just read is a component separator,
.         as long as the field is not MSH.2 (which is where the component
.         separator is set).
.
          MATCH     MSHSEGMT,SEGMENT             * MSH segment & second field?
          IF        @EQUAL
            IF        FIELDNO = 2
              GOTO      HNDLR760
            ENDIF
          ENDIF
.
.         If the character just read is a component separator, then reset
.         the previous field as long as there was data in the previous
.         field (ie the previous character was not a field separator or a
.         component separator or a repeat separator).
.
          MATCH     ANS,COMSEPAR                 * check if comp. separator
          IF        @EQUAL
            MATCH     PREVCHAR,ANS
            IF        !@EQUAL
              MATCH     PREVCHAR,MSH00101
              IF        !@EQUAL
                MATCH     PREVCHAR,COMSEPAR
                IF        !@EQUAL
                  MATCH     PREVCHAR,REPSEPAR
                  IF        !@EQUAL
                    CALL      RFLD0000           * reset component just loaded
                  ENDIF
                ENDIF
              ENDIF
            ENDIF
            ADD       ONE,COMPCNT                * increment component count
            GOTO      HNDLR765                   * only load into full message
          ENDIF
.
          MATCH     ANS,REPSEPAR                 * check if repetition separator
          IF        @EQUAL
            MATCH     PREVCHAR,ANS
            IF        !@EQUAL
              MATCH     PREVCHAR,MSH00101
              IF        !@EQUAL
                MATCH     PREVCHAR,REPSEPAR
                IF        !@EQUAL
                  CALL      RFLD0000             * reset component just loaded
                ENDIF
              ENDIF
            ENDIF
            ADD       ONE,REPTNCNT               * increment repetition count
            MOVE      ONE,COMPCNT                * reset component count
            GOTO      HNDLR765                   * only load into full message
          ENDIF
.
.         A valid character has been found so load it into the relevant
.         segment field/component (according to FIELDNO/COMPCNT/REPETITION).
.
HNDLR760  PERFORM   SEGNUMBR,LMSH0000:           * MSH
                             LMSA0000:           * MSA
                             LERR0000:           * ERR
                             LQRD0000:           * QRD
                             LPID0000:           * PID
                             LDSC0000:           * DSC
                             LQAK0000:           * QAK
                             LPV10000:           * PV1
                             LOBX0000:           * OBX
                             LQRF0000:           * QRF
                             LNK10000:           * NK1
                             LZXP0000            * ZXP
.
HNDLR765  APPEND    ANS,RECVMESS                 * append char. to full message
          MOVE      ANS,PREVCHAR                 * save character
          GOTO      HNDLR750
.
HNDLR770  IF        DISPFLAG = 1
            DISPLAY   "Validating segment: [",SEGMENT,"]",*R,*N;
          ENDIF
.
          PERFORM   SEGNUMBR,VMSH0000:           * MSH
                             VMSA0000:           * MSA
                             VERR0000:           * ERR
                             VQRD0000:           * QRD
                             VPID0000:           * PID
                             VDSC0000:           * DSC
                             VQAK0000:           * QAK
                             VPV10000:           * PV1
                             VOBX0000:           * OBX
                             VQRF0000:           * QRF
                             VNK10000:           * NK1
                             VZXP0000            * ZXP
.
          IF          DATARCNT >= 100
            MOVE      TWO,MLOGFLAG
            MOVE      "Maximum number of patients reached",ERORTEXT
            CALL      LOGM0000                     * log message if required
            GOTO      HNDLR800                     * finished
          ENDIF
.
          BRANCH    MTCHFLAG,HNDLR905            * message id doesn't match
.
          IF        DISPFLAG = 1
            DISPLAY   "[",SEGMENT,"] segment validated",*R,*N;
          ENDIF
.
          MATCH     ANS,ENDBLOCK                 * end of message received ?
          GOTO      HNDLR700 IF NOT EQUAL        * no - get next segment
.
.         The end of message (EOB) has been found
.
HNDLR800  PACK      HL7CONTP,DSC00101,SP100,SP100     * continuation pointer ?
          RESET     RECVMESS
          IF        DISPFLAG = 1
            DISPLAY   "End of Block received",*R,*N;  * display full message
            STRIP     RECVMESS
            MOVE      ZERO,COUNTR
            MOVELPTR  RECVMESS,FORM4
            DISPLAY   *R,*N:
                      "----------------------------------------":
                      "----------------------------------------",*R,*N:
                      "Full Message received is ",FORM4," bytes (including ":
                      "control characters):",*R,*N,*R,*N;
            WHILE     FORM4 > 0
              ADD       ONE,COUNTR
              MATCH     CRETURN,RECVMESS
              IF        @EQUAL
                DISPLAY   *R,*N,*R,*N;
                MOVE      ZERO,COUNTR
              ELSE
                MOVE      RECVMESS,ANS
                DISPLAY   *HON,ANS,*HOFF;
                IF        COUNTR = 80
                  DISPLAY   "]",*R,*N;
                  MOVE      ZERO,COUNTR
                ENDIF
              ENDIF
              SUB       ONE,FORM4
              BUMP      RECVMESS
            DO
            DISPLAY   "----------------------------------------":
                      "----------------------------------------":
                      *R,*N,*R,*N;
            RESET     RECVMESS
          ENDIF
.
          MOVE      THREE,MLOGFLAG               * set flag for full ack.message
          CALL      LOGM0000                     * log message if required
.
.         All general HL7 validations have been performed, so now we
.         need to validate that all mandatory segments have been received
.         for the message type
.
          CALL      MANR0000                     * check for mandatory segments
.
.         Finally validate message specific fields before writing the data
.         to the database
.
          IF        DISPFLAG = 1
            DISPLAY   "Validating message specific fields",*R,*N;
          ENDIF
.dav1     WRITE     TEXTFILE,SEQ;VOTSCAPT
          CALL      VMES0000                     * validate message
.dav1     WRITE     TEXTFILE,SEQ;VOTECAPT
.
.         Check if there was an error in validation of ACK message.
.         If there was, then resend the message.
.
          BRANCH    ERORFLAG,HNDLR880            * error - retry
.
.         The ACK message has been validated.
.         Now check what the acknowledgement code (MSA001) was (accept or
.         error)
.
          MATCH     "AA",MSA001                  * Acknowledge Accept ?
          GOTO      HNDLR870 IF NOT EQUAL        * no
.
.         The message has been successfully sent, so update the stats if
.         not running interactive mode
.
          IF        DISPFLAG = 1
            DISPLAY   "Message successfully processed",*R,*N;
            DISPLAY   "Waiting for next message....",*R,*N;
          ELSE
.dav1       CALL      USST0000                   * update sent stats
.dav1       DISPLAY   *P22:5,SP20,*P22:5,*V2LON,*HON,"Waiting";
          ENDIF
          MOVE      ZERO,NUMRETRY                * re-initialise retry counter
.
          MOVE      TWO,MLOGFLAG
          MOVE      "Message successfully processed",ERORTEXT
          CALL      LOGM0000                     * log message if required
.
          GOTO      HNDLR900                     * finished
.
. ERRORS:
. =======
.         Negative Acknowledgement received
.
HNDLR870  IF        DISPFLAG = 1
            DISPLAY   "Negative Acknowledgement Received - Message ":
                      "unsuccessful",*R,*N,*WRETRYINT;
          ENDIF
          MOVE      "Negative Acknowledgement Received",ERORTEXT
          GOTO      HNDLR960
.
.         Invalid acknowledgement message received (one or more MHS and/or
.         MSA fields was invalid).
.
HNDLR880  IF        DISPFLAG = 1
            DISPLAY   "Invalid Acknowledgement Received - Message ":
                      "unsuccessful",*R,*N,*WRETRYINT;
          ENDIF
          MOVE      "Invalid Acknowledgement Received",ERORTEXT
          GOTO      HNDLR960
.
.davvy
.
HNDLR900  MOVE      ZERO,EXIT                    * message successful
          GOTO      HNDLR999
.
HNDLR905  MOVE      "Response Format Error",ERORTEXT
          GOTO      HNDLR960
.
HNDLR910  MOVE      TWO,MLOGFLAG
          MOVE      "Connection lost",ERORTEXT
          CALL      LOGM0000                     * log message if required
.
          MOVE      ONE,EXIT                     * connection lost
          GOTO      HNDLR999
.
HNDLR920  MOVE      TWO,MLOGFLAG
          MOVE      "Timeout on response",ERORTEXT
          CALL      LOGM0000                     * log message if required
.
          MOVE      TWO,EXIT                     * timeout on response
          GOTO      HNDLR999
.
HNDLR930  MOVE      TWO,MLOGFLAG
          MOVE      "Insufficient data provided for query",ERORTEXT
          CALL      LOGM0000                     * log message if required
.
          MOVE      THREE,EXIT                   * insufficient search data
          GOTO      HNDLR999
.
HNDLR940  MOVE      TWO,MLOGFLAG
          MOVE      "Destination data incomplete",ERORTEXT
          CALL      LOGM0000                     * log message if required
.
          MOVE      FOUR,EXIT                   * destination details incomplete
          GOTO      HNDLR999
.
HNDLR950  MOVE      TWO,MLOGFLAG
          MOVE      "Connection to socket failed",ERORTEXT
          CALL      LOGM0000                     * log message if required
.
          MOVE      FIVE,EXIT                    * socket connection failed
          GOTO      HNDLR999
.
HNDLR960  MOVE      TWO,MLOGFLAG
.         Response format error in ERORTEXT
          CALL      LOGM0000                     * log message if required
.
          MOVE      SIX,EXIT                     * error in acknowledgement
          GOTO      HNDLR999
.
HNDLR999  CLOSE     COMSOCKT                     * close socket then exit
.
          MOVE      TWO,MLOGFLAG
          MOVE      "Disconnecting from socket",ERORTEXT
          CALL      LOGM0000                     * log message if required
.
.         Clear and Reset SIGPIPE TRAP for web server
.
          TRAPCLR   SIGPIPE
          TRAP      WEBSIG00 IF SIGPIPE
.
          RETURN
+
.*****************************************************************************
.*                               WRMSH000                                    *
.*                  Format and write the MSH segment                         *
.*****************************************************************************
.
WRMSH000  CALL      CLMSH000                     * clear MSH variables
.
          CALL      IBACLOCK
          UNPACK    CTIMEIS,HOURTM,ANS,MINTIME,ANS,SECTIME
          PACK      DATETIME,CCC,CYY,CMM,CDD,HOURTM,MINTIME,SECTIME
          REP       " 0",DATETIME
.
          MOVE      PIPE,MSH001                  * set field delimiter
          MOVE      "^~\&",MSH002                * set encoding chars.
.
          MOVE      "webPAS",MSH003             * set sending application
          ENDSET    MSH003
          APPEND    CARET,MSH003
          APPEND    PRGID,MSH003
          APPEND    VERSION,MSH003  * the RSSC MOH issues to HSP for NBH WebPAS
          APPEND    CARET,MSH003
          MOVE      "RSSC",D4
          APPEND    D4,MSH003
          RESET     MSH003
          STRIP     MSH003
.
.         This has been written specifically for HEA Northern Beaches which
.         is a single hospital environment, so if it is required to handle
.         multi-hospital, then changes to the next field will be required.
.
          READ      CONTROLF,TEN;*79,CAPPRVNO
          MOVE      CAPPRVNO,MSH004              * set sending facility
          STRIP     MSH004
          ENDSET    MSH004
          APPEND    CARET,MSH004
          APPEND    CARET,MSH004
          MOVE      "HERO",D4
          APPEND    D4,MSH004
          RESET     MSH004
          STRIP     MSH004
.            Need to cater for HL7 special characters
.>>>>>>>     SPCHR000 currently in HL7COMN - may need to be in a separate
.            routine
.>>>>>>>  MOVE      CAPPRVNO,FIELDSTR            * set sending facility
.         CALL      SPCHR000                     * convert special characters
.         MOVE      FIELDSTR,MSH004
.
          MOVE      "Millennium",MSH005          * set receiving application
          ENDSET    MSH005
          APPEND    CARET,MSH005
          MOVE      "7760-003",D8
          APPEND    D8,MSH005
          APPEND    CARET,MSH005
          MOVE      "RSSC",D4
          APPEND    D4,MSH005
          RESET     MSH005
          STRIP     MSH005
.
          MOVE      "NSLHD",MSH006               * set receiving facility
          ENDSET    MSH006
          APPEND    CARET,MSH006
          MOVE      "1000760",D7
          APPEND    D7,MSH006
          APPEND    CARET,MSH006
          MOVE      "HERO",D4
          APPEND    D4,MSH006
          RESET     MSH006
          STRIP     MSH006
.
          MOVE      DATETIME,MSH007              * set message date/time
.
          MOVE      "QRY^A19^QRY_A19",MSH009     * load message type
.
.>>>>     May need a new message id parameter for UPI
          MOVE      "  0",PRXCODE                * System Lock Sector 0
          CALL      GETSLK00                     * Get System Lock-Sector 0
          READ      CONTROLF,ZERO;*87,IBCNMESI   * next message id
          MOVE      IBCNMESI,MESSAGID
          ADD       ONE,IBCNMESI
          WRITAB    CONTROLF,ZERO;*87,IBCNMESI
          CALL      RELSLK00                     * Release System Lock-Sector 0
.
          SQUEEZE   MESSAGID
          MOVE      MESSAGID,MSH010              * set Message ID
          MOVE      MSH010,SAVMESID
.
          MOVE      ANSP,MSH011                  * set processing id
          MOVE      "2.4",MSH012                 * set version id
.
.         Check if we're getting the next batch of records for a search,
.         and if so, make sure the continuation pointer is populated and
.         loaded into MSH.14.
.
          IF        HL7SMODE = 1
            MATCH     HL7CONTP,SP70
            IF        !@EQUAL
              STRIP   HL7CONTP
              MOVE    HL7CONTP,MSH014
            ENDIF
          ENDIF
.
          MOVE      "AUS",MSH017                 * set country code
          MOVE      "en^^ISO 639-1",MSH019       * set principal language
.
          PACK      SEGSTRNG,STRTBLOK,ANSM,ANSS,ANSH:
                             MSH001,MSH002,PIPE,MSH003,PIPE,MSH004,PIPE:
                             MSH005,PIPE,MSH006,PIPE,MSH007,PIPE,MSH008,PIPE:
                             MSH009,PIPE,MSH010,PIPE,MSH011,PIPE,MSH012,PIPE:
                             MSH013,PIPE,MSH014,PIPE,MSH015,PIPE,MSH016,PIPE:
                             MSH017,PIPE,MSH018,PIPE,MSH019,CRETURN
.
          CALL      SENDM000                     * send message
          BRANCH    EXIT,WRMSH910:               * connection lost
                         WRMSH920                * timeout
.
          MOVE      ZERO,EXIT
          GOTO      WRMSH999
.
WRMSH910  MOVE      ONE,EXIT
          GOTO      WRMSH999
.
WRMSH920  MOVE      TWO,EXIT
.
WRMSH999  RETURN
+
.*****************************************************************************
.*                               WRQRD000                                    *
.*                  Format and write the QRD segment                         *
.*****************************************************************************
.
WRQRD000  CALL      CLQRD000                     * clear QRD variables
.
          MOVE      DATETIME,QRD001              * set query date/time
.
          MOVE      ANSR,QRD002                  * set to record query type
.
          MOVE      ANSI,QRD003                  * set to immediate response
.
          MOVE      MESSAGID,QRD004              * set unique id for query
.
.         Currently not populating QRD.5 & QRD.6
.
.         Load the maximum number of records to be returned by the
.         NSLHD search
.
          IF        HL7SMODE = 0 | HL7SMODE = 1
            SQUEEZE   HL7MXREC
            PACK      QRD007,HL7MXREC,CARET,ANSR,ANSD
          ENDIF
.
          IF        HL7SMODE = 2
            SQUEEZE   HL7MXREC
            PACK      QRD007,HL7MXREC,CARET,ANSR,ANSD
            SQUEEZE   HL7NSPID
            MOVE      HL7NSPID,QRD008            * retrieve details for PersonID
            GOTO      WRQRD500
          ENDIF
.
          MATCH     SP70,HL7PTMED                * load medicare number
          IF        !@EQUAL
            STRIP     HL7PTMED
            APPEND    HL7PTMED,QRD008
          ENDIF
.
          ENDSET    QRD008
          APPEND    CARET,QRD008
.
          MATCH     SP70,HL7SURNM                * load surname
          IF        !@EQUAL
            STRIP     HL7SURNM
            APPEND    HL7SURNM,QRD008
          ENDIF
.
          MATCH     SP70,HL7FGNAM                * load first given name
          IF        !@EQUAL
            APPEND    CARET,QRD008
            STRIP     HL7FGNAM
            APPEND    HL7FGNAM,QRD008
          ENDIF
.
          MATCH     SP70,HL7SGNAM                * load second given name
          IF        !@EQUAL
            MATCH     SP70,HL7FGNAM
            IF        @EQUAL
              APPEND    CARET,QRD008
            ENDIF
            APPEND    CARET,QRD008
            STRIP     HL7SGNAM
            APPEND    HL7SGNAM,QRD008
          ENDIF
.
          MATCH     SP70,HL7PTMED                * load medicare number type
          IF        !@EQUAL
            APPEND    CARET,QRD008
            APPEND    CARET,QRD008
            APPEND    CARET,QRD008
            APPEND    CARET,QRD008
            APPEND    CARET,QRD008
            APPEND    CARET,QRD008
            APPEND    CARET,QRD008
            APPEND    CARET,QRD008
            APPEND    CARET,QRD008
            APPEND    CARET,QRD008
            APPEND    CARET,QRD008
            APPEND    "018",QRD008
          ENDIF
.
WRQRD500  RESET     QRD008
                                                 * set subject of query
.
.         Set Type of Query
.
          IF        HL7SMODE = 2
            MOVE      "DEM^^HL7",QRD009          * retrieve patient demographics
          ELSE
            MOVE      "APN^^HL7",QRD009          * patient search
          ENDIF
.
          MOVE      "X^^X",QRD010                * set department data code
.
          PACK      SEGSTRNG,ANSQ,ANSR,ANSD,PIPE:
                             QRD001,PIPE,QRD002,PIPE,QRD003,PIPE,QRD004,PIPE:
                             QRD005,PIPE,QRD006,PIPE,QRD007,PIPE,QRD008,PIPE:
                             QRD009,PIPE,QRD010,CRETURN
.
          CALL      SENDM000                     * send message
          BRANCH    EXIT,WRQRD910:               * connection lost
                         WRQRD920                * timeout
 
          MOVE      ZERO,EXIT
          GOTO      WRQRD999
.
WRQRD910  MOVE      ONE,EXIT
          GOTO      WRQRD999
.
WRQRD920  MOVE      TWO,EXIT
.
WRQRD999  RETURN
+
.*****************************************************************************
.*                               WRQRF000                                    *
.*                  Format and write the QRF segment                         *
.*****************************************************************************
.
WRQRF000  CALL      CLQRF000                     * clear QRF variables
.
          MOVE      "webPAS",QRF001              * mandatory HL7 field
.                                                  (not used by NSNB)
.
.         Currently not populating QRF.2 & QRD.3
.
.         Check if we are sending sex and/or dob
.
          MATCH     SP1,HL7GENDR
          IF        @EQUAL
            MATCH     SP8,HL7PTDOB
            GOTO      WRQRF800 IF EQUAL
          ENDIF
.
          CLEAR     QRF004
          MATCH     SP1,HL7GENDR
          IF        !@EQUAL
            APPEND    HL7GENDR,QRF004
          ENDIF
.
          MATCH     SP8,HL7PTDOB
          IF        !@EQUAL
            APPEND    TILDA,QRF004
            APPEND    HL7PTDOB,QRF004
          ENDIF
          RESET     QRF004
.
WRQRF800  PACK      SEGSTRNG,ANSQ,ANSR,ANSF,PIPE:
                             QRF001,PIPE,QRF002,PIPE,QRF003,PIPE,QRF004,CRETURN
.
          CALL      SENDM000                     * send message
          BRANCH    EXIT,WRQRF910:               * connection lost
                         WRQRF920                * timeout
 
          MOVE      ZERO,EXIT
          GOTO      WRQRF999
.
WRQRF910  MOVE      ONE,EXIT
          GOTO      WRQRF999
.
WRQRF920  MOVE      TWO,EXIT
.
WRQRF999  RETURN
+
.*****************************************************************************
.*                              CLMSH000                                     *
.*                     Clear all MSH variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CLMSH000  MOVE      SP70,MSH002
          MOVE      SP70,MSH003
          MOVE      SP70,MSH004
          MOVE      SP70,MSH005
          MOVE      SP70,MSH006
          MOVE      SP70,MSH007
          MOVE      SP70,MSH008
          MOVE      SP70,MSH009
          MOVE      SP70,MSH010
          MOVE      SP70,MSH011
          MOVE      SP70,MSH012
          MOVE      SP70,MSH013
          PACK      MSH014,SP70,SP70,SP70
          MOVE      SP70,MSH015
          MOVE      SP70,MSH016
          MOVE      SP70,MSH017
          MOVE      SP70,MSH018
          MOVE      SP70,MSH019
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     MSH002
          CLEAR     MSH003
          CLEAR     MSH004
          CLEAR     MSH005
          CLEAR     MSH006
          CLEAR     MSH007
          CLEAR     MSH008
          CLEAR     MSH009
          CLEAR     MSH010
          CLEAR     MSH011
          CLEAR     MSH012
          CLEAR     MSH013
          CLEAR     MSH014
          CLEAR     MSH015
          CLEAR     MSH016
          CLEAR     MSH017
          CLEAR     MSH018
          CLEAR     MSH019
.
          PACK      MSH00101,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00201,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00301,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00302,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00303,SP100,SP100,SP100,SP100,SP100
          PACK      SAVAPPLI,SP70,SP70,SP70
          PACK      MSH00401,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00402,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00403,SP100,SP100,SP100,SP100,SP100
          PACK      SAVFACIL,SP70,SP70,SP70
          PACK      MSH00501,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00502,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00503,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00601,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00602,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00603,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00701,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00801,SP100,SP100,SP100,SP100,SP100
          MOVE      SP100,MSH00901
          MOVE      SP100,MSH00902
          MOVE      SP100,MSH00903
          PACK      MSH01001,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01101,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01102,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01201,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01202,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01203,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01301,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01401,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01501,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01601,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01701,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01801,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01901,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01902,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01903,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01904,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01905,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01906,SP100,SP100,SP100,SP100,SP100
          PACK      MSH02001,SP100,SP100,SP100,SP100,SP100
          MOVE      SP100,MSH02101
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     MSH00101
          CLEAR     MSH00201
          CLEAR     MSH00301
          CLEAR     MSH00302
          CLEAR     MSH00303
          CLEAR     MSH00401
          CLEAR     MSH00402
          CLEAR     MSH00403
          CLEAR     MSH00501
          CLEAR     MSH00502
          CLEAR     MSH00503
          CLEAR     MSH00601
          CLEAR     MSH00602
          CLEAR     MSH00603
          CLEAR     MSH00701
          CLEAR     MSH00801
          CLEAR     MSH00901
          CLEAR     MSH00902
          CLEAR     MSH00903
          CLEAR     MSH01001
          CLEAR     MSH01101
          CLEAR     MSH01102
          CLEAR     MSH01201
          CLEAR     MSH01202
          CLEAR     MSH01203
          CLEAR     MSH01301
          CLEAR     MSH01401
          CLEAR     MSH01501
          CLEAR     MSH01601
          CLEAR     MSH01701
          CLEAR     MSH01801
          CLEAR     MSH01901
          CLEAR     MSH01902
          CLEAR     MSH01903
          CLEAR     MSH01904
          CLEAR     MSH01905
          CLEAR     MSH01906
          CLEAR     MSH02001
          CLEAR     MSH02101
.
CLMSH999  RETURN
+
.*****************************************************************************
.*                              CLQRD000                                     *
.*                     Clear all QRD variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CLQRD000  MOVE      SP70,QRD001
          MOVE      SP70,QRD002
          MOVE      SP70,QRD003
          MOVE      SP70,QRD004
          MOVE      SP70,QRD005
          MOVE      SP70,QRD006
          MOVE      SP70,QRD007
          PACK      QRD008,SP100,SP100,SP100,SP100,SP100
          MOVE      SP70,QRD009
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     QRD001
          CLEAR     QRD002
          CLEAR     QRD003
          CLEAR     QRD004
          CLEAR     QRD005
          CLEAR     QRD006
          CLEAR     QRD007
          CLEAR     QRD008
          CLEAR     QRD009
.
          PACK      QRD00101,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00201,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00301,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00401,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00501,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00601,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00701,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00702,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00801,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00802,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00803,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00804,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00805,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00806,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00807,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00808,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00809,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00810,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00811,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00812,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00813,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00814,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00815,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00901,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00902,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00903,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00904,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00905,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00906,SP100,SP100,SP100,SP100,SP100
          PACK      QRD01001,SP100,SP100,SP100,SP100,SP100
          PACK      QRD01002,SP100,SP100,SP100,SP100,SP100
          PACK      QRD01003,SP100,SP100,SP100,SP100,SP100
          PACK      QRD01004,SP100,SP100,SP100,SP100,SP100
          PACK      QRD01005,SP100,SP100,SP100,SP100,SP100
          PACK      QRD01006,SP100,SP100,SP100,SP100,SP100
          PACK      QRD01101,SP100,SP100,SP100,SP100,SP100
          PACK      QRD01102,SP100,SP100,SP100,SP100,SP100
          PACK      QRD01201,SP100,SP100,SP100,SP100,SP100
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     QRD00101
          CLEAR     QRD00201
          CLEAR     QRD00301
          CLEAR     QRD00401
          CLEAR     QRD00501
          CLEAR     QRD00601
          CLEAR     QRD00701
          CLEAR     QRD00702
          CLEAR     QRD00801
          CLEAR     QRD00802
          CLEAR     QRD00803
          CLEAR     QRD00804
          CLEAR     QRD00805
          CLEAR     QRD00806
          CLEAR     QRD00807
          CLEAR     QRD00808
          CLEAR     QRD00809
          CLEAR     QRD00810
          CLEAR     QRD00811
          CLEAR     QRD00812
          CLEAR     QRD00813
          CLEAR     QRD00814
          CLEAR     QRD00815
          CLEAR     QRD00901
          CLEAR     QRD00902
          CLEAR     QRD00903
          CLEAR     QRD00904
          CLEAR     QRD00905
          CLEAR     QRD00906
          CLEAR     QRD01001
          CLEAR     QRD01002
          CLEAR     QRD01003
          CLEAR     QRD01004
          CLEAR     QRD01005
          CLEAR     QRD01006
          CLEAR     QRD01101
          CLEAR     QRD01102
          CLEAR     QRD01201
.
CLQRD999  RETURN
.*****************************************************************************
.*                              CLQRF000                                     *
.*                     Clear all QRF variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CLQRF000  MOVE      SP70,QRF001
          MOVE      SP70,QRF002
          MOVE      SP70,QRF003
          MOVE      SP70,QRF004
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     QRF001
          CLEAR     QRF002
          CLEAR     QRF003
          CLEAR     QRF004
.
CLQRF999  RETURN
+
.*****************************************************************************
.*                               CLMSA000                                    *
.*                     Clear all MSA variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CLMSA000  MOVE      SP70,MSA001
          MOVE      SP70,MSA002
          PACK      MSA003,SP70,SP70
          MOVE      SP70,MSA004
          MOVE      SP70,MSA005
          PACK      MSA006,SP70,SP70
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     MSA001
          CLEAR     MSA002
          CLEAR     MSA003
          CLEAR     MSA004
          CLEAR     MSA005
          CLEAR     MSA006
.
CLMSA999  RETURN
+
.*****************************************************************************
.*                               CLERR000                                    *
.*                     Clear all ERR variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CLERR000  PACK      ERR001,SP70,SP70
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     ERR001
.
CLERR999  RETURN
+
.*****************************************************************************
.*                               CLDSC000                                    *
.*                     Clear all DSC variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CLDSC000  PACK      DSC00101,SP100,SP100,SP100,SP100,SP100
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     DSC00101
.
CLDSC999  RETURN
+
.*****************************************************************************
.*                               CLQAK000                                    *
.*                     Clear all QAK variables                               *
.*****************************************************************************
CLQAK000
CLQAK999  RETURN
+
.*****************************************************************************
.*                               CLPV1000                                    *
.*                     Clear all PV1 variables                               *
.*****************************************************************************
CLPV1000
CLPV1999  RETURN
+
.*****************************************************************************
.*                               CLOBX000                                    *
.*                     Clear all OBX variables                               *
.*****************************************************************************
CLOBX000
CLOBX999  RETURN
+
.*****************************************************************************
.*                               CLNK1000                                    *
.*                     Clear all NK1 variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CLNK1000  PACK      NK100101,SP100,SP100,SP100,SP100,SP100
          PACK      NK100201,SP100,SP100,SP100,SP100,SP100
          PACK      NK100202,SP100,SP100,SP100,SP100,SP100
          PACK      NK100203,SP100,SP100,SP100,SP100,SP100
          PACK      NK100204,SP100,SP100,SP100,SP100,SP100
          PACK      NK100205,SP100,SP100,SP100,SP100,SP100
          PACK      NK100206,SP100,SP100,SP100,SP100,SP100
          PACK      NK100207,SP100,SP100,SP100,SP100,SP100
          PACK      NK100208,SP100,SP100,SP100,SP100,SP100
          PACK      NK100301,SP100,SP100,SP100,SP100,SP100
          PACK      NK100302,SP100,SP100,SP100,SP100,SP100
          PACK      NK100303,SP100,SP100,SP100,SP100,SP100
          PACK      NK100304,SP100,SP100,SP100,SP100,SP100
          PACK      NK100305,SP100,SP100,SP100,SP100,SP100
          PACK      NK100306,SP100,SP100,SP100,SP100,SP100
          PACK      NK100401,SP100,SP100,SP100,SP100,SP100
          PACK      NK100402,SP100,SP100,SP100,SP100,SP100
          PACK      NK100403,SP100,SP100,SP100,SP100,SP100
          PACK      NK100404,SP100,SP100,SP100,SP100,SP100
          PACK      NK100405,SP100,SP100,SP100,SP100,SP100
          PACK      NK100406,SP100,SP100,SP100,SP100,SP100
          PACK      NK100407,SP100,SP100,SP100,SP100,SP100
          PACK      NK100408,SP100,SP100,SP100,SP100,SP100
          PACK      NK100409,SP100,SP100,SP100,SP100,SP100
          PACK      NK100410,SP100,SP100,SP100,SP100,SP100
          PACK      NK100411,SP100,SP100,SP100,SP100,SP100
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 2
            ADD       ONE,COUNTER
            PACK      NK100501[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK100502[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK100503[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK100504[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK100505[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK100506[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK100507[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK100508[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK100509[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK100601[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK100602[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK100603[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK100604[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK100605[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK100606[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK100607[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK100608[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK100609[COUNTER],SP100,SP100,SP100,SP100,SP100
          DO
.
          PACK      NK100701,SP100,SP100,SP100,SP100,SP100
          PACK      NK100702,SP100,SP100,SP100,SP100,SP100
          PACK      NK100703,SP100,SP100,SP100,SP100,SP100
          PACK      NK100704,SP100,SP100,SP100,SP100,SP100
          PACK      NK100705,SP100,SP100,SP100,SP100,SP100
          PACK      NK100706,SP100,SP100,SP100,SP100,SP100
          PACK      NK100801,SP100,SP100,SP100,SP100,SP100
          PACK      NK100901,SP100,SP100,SP100,SP100,SP100
          PACK      NK101001,SP100,SP100,SP100,SP100,SP100
          PACK      NK101101,SP100,SP100,SP100,SP100,SP100
          PACK      NK101102,SP100,SP100,SP100,SP100,SP100
          PACK      NK101201,SP100,SP100,SP100,SP100,SP100
          PACK      NK101202,SP100,SP100,SP100,SP100,SP100
          PACK      NK101203,SP100,SP100,SP100,SP100,SP100
          PACK      NK101204,SP100,SP100,SP100,SP100,SP100
          PACK      NK101205,SP100,SP100,SP100,SP100,SP100
          PACK      NK101206,SP100,SP100,SP100,SP100,SP100
          PACK      NK101301,SP100,SP100,SP100,SP100,SP100
          PACK      NK101302,SP100,SP100,SP100,SP100,SP100
          PACK      NK101303,SP100,SP100,SP100,SP100,SP100
          PACK      NK101304,SP100,SP100,SP100,SP100,SP100
          PACK      NK101305,SP100,SP100,SP100,SP100,SP100
          PACK      NK101306,SP100,SP100,SP100,SP100,SP100
          PACK      NK101307,SP100,SP100,SP100,SP100,SP100
          PACK      NK101308,SP100,SP100,SP100,SP100,SP100
          PACK      NK101309,SP100,SP100,SP100,SP100,SP100
          PACK      NK101401,SP100,SP100,SP100,SP100,SP100
          PACK      NK101402,SP100,SP100,SP100,SP100,SP100
          PACK      NK101403,SP100,SP100,SP100,SP100,SP100
          PACK      NK101404,SP100,SP100,SP100,SP100,SP100
          PACK      NK101405,SP100,SP100,SP100,SP100,SP100
          PACK      NK101406,SP100,SP100,SP100,SP100,SP100
          PACK      NK101501,SP100,SP100,SP100,SP100,SP100
          PACK      NK101601,SP100,SP100,SP100,SP100,SP100
          PACK      NK101701,SP100,SP100,SP100,SP100,SP100
          PACK      NK101801,SP100,SP100,SP100,SP100,SP100
          PACK      NK101901,SP100,SP100,SP100,SP100,SP100
          PACK      NK101902,SP100,SP100,SP100,SP100,SP100
          PACK      NK101903,SP100,SP100,SP100,SP100,SP100
          PACK      NK101904,SP100,SP100,SP100,SP100,SP100
          PACK      NK101905,SP100,SP100,SP100,SP100,SP100
          PACK      NK101906,SP100,SP100,SP100,SP100,SP100
          PACK      NK102001,SP100,SP100,SP100,SP100,SP100
          PACK      NK102002,SP100,SP100,SP100,SP100,SP100
          PACK      NK102003,SP100,SP100,SP100,SP100,SP100
          PACK      NK102004,SP100,SP100,SP100,SP100,SP100
          PACK      NK102005,SP100,SP100,SP100,SP100,SP100
          PACK      NK102006,SP100,SP100,SP100,SP100,SP100
          PACK      NK102101,SP100,SP100,SP100,SP100,SP100
          PACK      NK102201,SP100,SP100,SP100,SP100,SP100
          PACK      NK102202,SP100,SP100,SP100,SP100,SP100
          PACK      NK102203,SP100,SP100,SP100,SP100,SP100
          PACK      NK102204,SP100,SP100,SP100,SP100,SP100
          PACK      NK102205,SP100,SP100,SP100,SP100,SP100
          PACK      NK102206,SP100,SP100,SP100,SP100,SP100
          PACK      NK102301,SP100,SP100,SP100,SP100,SP100
          PACK      NK102401,SP100,SP100,SP100,SP100,SP100
          PACK      NK102501,SP100,SP100,SP100,SP100,SP100
          PACK      NK102502,SP100,SP100,SP100,SP100,SP100
          PACK      NK102503,SP100,SP100,SP100,SP100,SP100
          PACK      NK102504,SP100,SP100,SP100,SP100,SP100
          PACK      NK102505,SP100,SP100,SP100,SP100,SP100
          PACK      NK102506,SP100,SP100,SP100,SP100,SP100
          PACK      NK102601,SP100,SP100,SP100,SP100,SP100
          PACK      NK102602,SP100,SP100,SP100,SP100,SP100
          PACK      NK102603,SP100,SP100,SP100,SP100,SP100
          PACK      NK102604,SP100,SP100,SP100,SP100,SP100
          PACK      NK102605,SP100,SP100,SP100,SP100,SP100
          PACK      NK102606,SP100,SP100,SP100,SP100,SP100
          PACK      NK102607,SP100,SP100,SP100,SP100,SP100
          PACK      NK102608,SP100,SP100,SP100,SP100,SP100
          PACK      NK102701,SP100,SP100,SP100,SP100,SP100
          PACK      NK102702,SP100,SP100,SP100,SP100,SP100
          PACK      NK102703,SP100,SP100,SP100,SP100,SP100
          PACK      NK102704,SP100,SP100,SP100,SP100,SP100
          PACK      NK102705,SP100,SP100,SP100,SP100,SP100
          PACK      NK102706,SP100,SP100,SP100,SP100,SP100
          PACK      NK102801,SP100,SP100,SP100,SP100,SP100
          PACK      NK102802,SP100,SP100,SP100,SP100,SP100
          PACK      NK102803,SP100,SP100,SP100,SP100,SP100
          PACK      NK102804,SP100,SP100,SP100,SP100,SP100
          PACK      NK102805,SP100,SP100,SP100,SP100,SP100
          PACK      NK102806,SP100,SP100,SP100,SP100,SP100
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 2
            ADD       ONE,COUNTER
            PACK      NK102901[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK102902[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK102903[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK102904[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK102905[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK102906[COUNTER],SP100,SP100,SP100,SP100,SP100
          DO
.
          PACK      NK103001,SP100,SP100,SP100,SP100,SP100
          PACK      NK103002,SP100,SP100,SP100,SP100,SP100
          PACK      NK103003,SP100,SP100,SP100,SP100,SP100
          PACK      NK103004,SP100,SP100,SP100,SP100,SP100
          PACK      NK103005,SP100,SP100,SP100,SP100,SP100
          PACK      NK103006,SP100,SP100,SP100,SP100,SP100
          PACK      NK103007,SP100,SP100,SP100,SP100,SP100
          PACK      NK103008,SP100,SP100,SP100,SP100,SP100
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 3
            ADD       ONE,COUNTER
            PACK      NK103101[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK103102[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK103103[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK103104[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK103105[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK103106[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK103107[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK103108[COUNTER],SP100,SP100,SP100,SP100,SP100
            PACK      NK103109[COUNTER],SP100,SP100,SP100,SP100,SP100
          DO
.
          PACK      NK103201,SP100,SP100,SP100,SP100,SP100
          PACK      NK103202,SP100,SP100,SP100,SP100,SP100
          PACK      NK103203,SP100,SP100,SP100,SP100,SP100
          PACK      NK103204,SP100,SP100,SP100,SP100,SP100
          PACK      NK103205,SP100,SP100,SP100,SP100,SP100
          PACK      NK103206,SP100,SP100,SP100,SP100,SP100
          PACK      NK103207,SP100,SP100,SP100,SP100,SP100
          PACK      NK103208,SP100,SP100,SP100,SP100,SP100
          PACK      NK103209,SP100,SP100,SP100,SP100,SP100
          PACK      NK103210,SP100,SP100,SP100,SP100,SP100
          PACK      NK103211,SP100,SP100,SP100,SP100,SP100
          PACK      NK103301,SP100,SP100,SP100,SP100,SP100
          PACK      NK103302,SP100,SP100,SP100,SP100,SP100
          PACK      NK103303,SP100,SP100,SP100,SP100,SP100
          PACK      NK103304,SP100,SP100,SP100,SP100,SP100
          PACK      NK103305,SP100,SP100,SP100,SP100,SP100
          PACK      NK103306,SP100,SP100,SP100,SP100,SP100
          PACK      NK103401,SP100,SP100,SP100,SP100,SP100
          PACK      NK103501,SP100,SP100,SP100,SP100,SP100
          PACK      NK103502,SP100,SP100,SP100,SP100,SP100
          PACK      NK103503,SP100,SP100,SP100,SP100,SP100
          PACK      NK103504,SP100,SP100,SP100,SP100,SP100
          PACK      NK103505,SP100,SP100,SP100,SP100,SP100
          PACK      NK103506,SP100,SP100,SP100,SP100,SP100
          PACK      NK103601,SP100,SP100,SP100,SP100,SP100
          PACK      NK103701,SP100,SP100,SP100,SP100,SP100
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     NK100101
          CLEAR     NK100201
          CLEAR     NK100202
          CLEAR     NK100203
          CLEAR     NK100204
          CLEAR     NK100205
          CLEAR     NK100206
          CLEAR     NK100207
          CLEAR     NK100208
          CLEAR     NK100301
          CLEAR     NK100302
          CLEAR     NK100303
          CLEAR     NK100304
          CLEAR     NK100305
          CLEAR     NK100306
          CLEAR     NK100401
          CLEAR     NK100402
          CLEAR     NK100403
          CLEAR     NK100404
          CLEAR     NK100405
          CLEAR     NK100406
          CLEAR     NK100407
          CLEAR     NK100408
          CLEAR     NK100409
          CLEAR     NK100410
          CLEAR     NK100411
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 2
            ADD       ONE,COUNTER
            CLEAR     NK100501[COUNTER]
            CLEAR     NK100502[COUNTER]
            CLEAR     NK100503[COUNTER]
            CLEAR     NK100504[COUNTER]
            CLEAR     NK100505[COUNTER]
            CLEAR     NK100506[COUNTER]
            CLEAR     NK100507[COUNTER]
            CLEAR     NK100508[COUNTER]
            CLEAR     NK100509[COUNTER]
            CLEAR     NK100601[COUNTER]
            CLEAR     NK100602[COUNTER]
            CLEAR     NK100603[COUNTER]
            CLEAR     NK100604[COUNTER]
            CLEAR     NK100605[COUNTER]
            CLEAR     NK100606[COUNTER]
            CLEAR     NK100607[COUNTER]
            CLEAR     NK100608[COUNTER]
            CLEAR     NK100609[COUNTER]
          DO
.
          CLEAR     NK100701
          CLEAR     NK100702
          CLEAR     NK100703
          CLEAR     NK100704
          CLEAR     NK100705
          CLEAR     NK100706
          CLEAR     NK100801
          CLEAR     NK100901
          CLEAR     NK101001
          CLEAR     NK101101
          CLEAR     NK101102
          CLEAR     NK101201
          CLEAR     NK101202
          CLEAR     NK101203
          CLEAR     NK101204
          CLEAR     NK101205
          CLEAR     NK101206
          CLEAR     NK101301
          CLEAR     NK101302
          CLEAR     NK101303
          CLEAR     NK101304
          CLEAR     NK101305
          CLEAR     NK101306
          CLEAR     NK101307
          CLEAR     NK101308
          CLEAR     NK101309
          CLEAR     NK101401
          CLEAR     NK101402
          CLEAR     NK101403
          CLEAR     NK101404
          CLEAR     NK101405
          CLEAR     NK101406
          CLEAR     NK101501
          CLEAR     NK101601
          CLEAR     NK101701
          CLEAR     NK101801
          CLEAR     NK101901
          CLEAR     NK101902
          CLEAR     NK101903
          CLEAR     NK101904
          CLEAR     NK101905
          CLEAR     NK101906
          CLEAR     NK102001
          CLEAR     NK102002
          CLEAR     NK102003
          CLEAR     NK102004
          CLEAR     NK102005
          CLEAR     NK102006
          CLEAR     NK102101
          CLEAR     NK102201
          CLEAR     NK102202
          CLEAR     NK102203
          CLEAR     NK102204
          CLEAR     NK102205
          CLEAR     NK102206
          CLEAR     NK102301
          CLEAR     NK102401
          CLEAR     NK102501
          CLEAR     NK102502
          CLEAR     NK102503
          CLEAR     NK102504
          CLEAR     NK102505
          CLEAR     NK102506
          CLEAR     NK102601
          CLEAR     NK102602
          CLEAR     NK102603
          CLEAR     NK102604
          CLEAR     NK102605
          CLEAR     NK102606
          CLEAR     NK102607
          CLEAR     NK102608
          CLEAR     NK102701
          CLEAR     NK102702
          CLEAR     NK102703
          CLEAR     NK102704
          CLEAR     NK102705
          CLEAR     NK102706
          CLEAR     NK102801
          CLEAR     NK102802
          CLEAR     NK102803
          CLEAR     NK102804
          CLEAR     NK102805
          CLEAR     NK102806
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 2
            ADD       ONE,COUNTER
            CLEAR     NK102901[COUNTER]
            CLEAR     NK102902[COUNTER]
            CLEAR     NK102903[COUNTER]
            CLEAR     NK102904[COUNTER]
            CLEAR     NK102905[COUNTER]
            CLEAR     NK102906[COUNTER]
          DO
.
          CLEAR     NK103001
          CLEAR     NK103002
          CLEAR     NK103003
          CLEAR     NK103004
          CLEAR     NK103005
          CLEAR     NK103006
          CLEAR     NK103007
          CLEAR     NK103008
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 3
            ADD       ONE,COUNTER
            CLEAR     NK103101[COUNTER]
            CLEAR     NK103102[COUNTER]
            CLEAR     NK103103[COUNTER]
            CLEAR     NK103104[COUNTER]
            CLEAR     NK103105[COUNTER]
            CLEAR     NK103106[COUNTER]
            CLEAR     NK103107[COUNTER]
            CLEAR     NK103108[COUNTER]
            CLEAR     NK103109[COUNTER]
          DO
.
          CLEAR     NK103201
          CLEAR     NK103202
          CLEAR     NK103203
          CLEAR     NK103204
          CLEAR     NK103205
          CLEAR     NK103206
          CLEAR     NK103207
          CLEAR     NK103208
          CLEAR     NK103209
          CLEAR     NK103210
          CLEAR     NK103211
          CLEAR     NK103301
          CLEAR     NK103302
          CLEAR     NK103303
          CLEAR     NK103304
          CLEAR     NK103305
          CLEAR     NK103306
          CLEAR     NK103401
          CLEAR     NK103501
          CLEAR     NK103502
          CLEAR     NK103503
          CLEAR     NK103504
          CLEAR     NK103505
          CLEAR     NK103506
          CLEAR     NK103601
          CLEAR     NK103701
.
CLNK1999  RETURN
+
.*****************************************************************************
.*                               CLZXP000                                    *
.*                     Clear all ZXP variables                               *
.*****************************************************************************
CLZXP000  MOVE      SP100,ZXP00101
          MOVE      SP100,ZXP00201
.
          CLEAR     ZXP00101
          CLEAR     ZXP00201
.
CLZXP999  RETURN
+
.*****************************************************************************
.*                           CLPID000                                        *
.*                 Clear all the PID fields                                  *
.*****************************************************************************
.
CLPID000  PACK      PID001,SP70
          PACK      PID002,SP70
          PACK      PID003,SP70,SP70,SP70,SP70,SP70,SP70,SP70,SP70
          PACK      PID004,SP70
          PACK      PID005,SP70,SP70
          PACK      PID006,SP70
          PACK      PID007,SP70
          PACK      PID008,SP70
          PACK      PID009,SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                           SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                           SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                           SP100,SP100,SP100,SP100,SP100,SP100
          PACK      PID010,SP70,SP70
          PACK      PID011,SP70,SP70
          PACK      PID012,SP70
          PACK      PID013,SP70,SP70
          PACK      PID014,SP70
          PACK      PID015,SP70
          PACK      PID016,SP70,SP70
          PACK      PID017,SP70,SP70
          PACK      PID018,SP70
          PACK      PID019,SP70
          PACK      PID020,SP70
          PACK      PID021,SP70
          PACK      PID022,SP70
          PACK      PID023,SP70
          PACK      PID024,SP70
          PACK      PID025,SP70
          PACK      PID026,SP70
          PACK      PID027,SP70
          PACK      PID028,SP70
          PACK      PID029,SP70
          PACK      PID030,SP70
          PACK      PID031,SP70
          PACK      PID032,SP70
          PACK      PID033,SP70
.
          PACK      PID00101,SP100,SP100,SP100,SP100,SP100
          PACK      PID00201,SP100,SP100,SP100,SP100,SP100
          PACK      PID00202,SP100,SP100,SP100,SP100,SP100
          PACK      PID00203,SP100,SP100,SP100,SP100,SP100
          PACK      PID00204,SP100,SP100,SP100,SP100,SP100
          PACK      PID00205,SP100,SP100,SP100,SP100,SP100
          PACK      PID00206,SP100,SP100,SP100,SP100,SP100
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 5
            ADD       ONE,COUNTER
            MOVE      SP100,PID00301[COUNTER]
            MOVE      SP100,PID00302[COUNTER]
            MOVE      SP100,PID00303[COUNTER]
            MOVE      SP100,PID00304[COUNTER]
            MOVE      SP100,PID00305[COUNTER]
            MOVE      SP100,PID00306[COUNTER]
          DO
.
          PACK      PID00401,SP100,SP100,SP100,SP100,SP100
          PACK      PID00402,SP100,SP100,SP100,SP100,SP100
          PACK      PID00403,SP100,SP100,SP100,SP100,SP100
          PACK      PID00404,SP100,SP100,SP100,SP100,SP100
          PACK      PID00405,SP100,SP100,SP100,SP100,SP100
          PACK      PID00406,SP100,SP100,SP100,SP100,SP100
          PACK      PID00501,SP100,SP100,SP100,SP100,SP100
          PACK      PID00502,SP100,SP100,SP100,SP100,SP100
          PACK      PID00503,SP100,SP100,SP100,SP100,SP100
          PACK      PID00504,SP100,SP100,SP100,SP100,SP100
          PACK      PID00505,SP100,SP100,SP100,SP100,SP100
          PACK      PID00506,SP100,SP100,SP100,SP100,SP100
          PACK      PID00507,SP100,SP100,SP100,SP100,SP100
          PACK      PID00508,SP100,SP100,SP100,SP100,SP100
          PACK      PID00601,SP100,SP100,SP100,SP100,SP100
          PACK      PID00602,SP100,SP100,SP100,SP100,SP100
          PACK      PID00603,SP100,SP100,SP100,SP100,SP100
          PACK      PID00604,SP100,SP100,SP100,SP100,SP100
          PACK      PID00605,SP100,SP100,SP100,SP100,SP100
          PACK      PID00606,SP100,SP100,SP100,SP100,SP100
          PACK      PID00607,SP100,SP100,SP100,SP100,SP100
          PACK      PID00608,SP100,SP100,SP100,SP100,SP100
          PACK      PID00701,SP100,SP100,SP100,SP100,SP100
          PACK      PID00801,SP100,SP100,SP100,SP100,SP100
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 80
            ADD       ONE,COUNTER
            MOVE      SP100,PID00901[COUNTER]
            MOVE      SP100,PID00902[COUNTER]
            MOVE      SP100,PID00903[COUNTER]
            MOVE      SP100,PID00904[COUNTER]
            MOVE      SP100,PID00905[COUNTER]
            MOVE      SP100,PID00906[COUNTER]
            MOVE      SP100,PID00907[COUNTER]
            MOVE      SP100,PID00908[COUNTER]
          DO
.
          PACK      PID01001,SP100,SP100,SP100,SP100,SP100
          PACK      PID01002,SP100,SP100,SP100,SP100,SP100
          PACK      PID01003,SP100,SP100,SP100,SP100,SP100
          PACK      PID01004,SP100,SP100,SP100,SP100,SP100
          PACK      PID01005,SP100,SP100,SP100,SP100,SP100
          PACK      PID01006,SP100,SP100,SP100,SP100,SP100
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 2
            ADD       ONE,COUNTER
            MOVE      SP100,PID01101[COUNTER]
            MOVE      SP100,PID01102[COUNTER]
            MOVE      SP100,PID01103[COUNTER]
            MOVE      SP100,PID01104[COUNTER]
            MOVE      SP100,PID01105[COUNTER]
            MOVE      SP100,PID01106[COUNTER]
            MOVE      SP100,PID01107[COUNTER]
            MOVE      SP100,PID01108[COUNTER]
            MOVE      SP100,PID01109[COUNTER]
            MOVE      SP100,PID01110[COUNTER]
            MOVE      SP100,PID01111[COUNTER]
          DO
.
          PACK      PID01201,SP100,SP100,SP100,SP100,SP100
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 2
            ADD       ONE,COUNTER
            MOVE      SP100,PID01301[COUNTER]
            MOVE      SP100,PID01401[COUNTER]
            MOVE      SP100,PID01302[COUNTER]
            MOVE      SP100,PID01402[COUNTER]
            MOVE      SP100,PID01303[COUNTER]
            MOVE      SP100,PID01403[COUNTER]
            MOVE      SP100,PID01304[COUNTER]
            MOVE      SP100,PID01404[COUNTER]
            MOVE      SP100,PID01305[COUNTER]
            MOVE      SP100,PID01405[COUNTER]
            MOVE      SP100,PID01306[COUNTER]
            MOVE      SP100,PID01406[COUNTER]
            MOVE      SP100,PID01307[COUNTER]
            MOVE      SP100,PID01407[COUNTER]
            MOVE      SP100,PID01308[COUNTER]
            MOVE      SP100,PID01408[COUNTER]
            MOVE      SP100,PID01309[COUNTER]
            MOVE      SP100,PID01409[COUNTER]
          DO
.
          PACK      PID01501,SP100,SP100,SP100,SP100,SP100
          PACK      PID01502,SP100,SP100,SP100,SP100,SP100
          PACK      PID01503,SP100,SP100,SP100,SP100,SP100
          PACK      PID01504,SP100,SP100,SP100,SP100,SP100
          PACK      PID01505,SP100,SP100,SP100,SP100,SP100
          PACK      PID01506,SP100,SP100,SP100,SP100,SP100
          PACK      PID01601,SP100,SP100,SP100,SP100,SP100
          PACK      PID01602,SP100,SP100,SP100,SP100,SP100
          PACK      PID01603,SP100,SP100,SP100,SP100,SP100
          PACK      PID01604,SP100,SP100,SP100,SP100,SP100
          PACK      PID01605,SP100,SP100,SP100,SP100,SP100
          PACK      PID01606,SP100,SP100,SP100,SP100,SP100
          PACK      PID01701,SP100,SP100,SP100,SP100,SP100
          PACK      PID01702,SP100,SP100,SP100,SP100,SP100
          PACK      PID01703,SP100,SP100,SP100,SP100,SP100
          PACK      PID01704,SP100,SP100,SP100,SP100,SP100
          PACK      PID01705,SP100,SP100,SP100,SP100,SP100
          PACK      PID01706,SP100,SP100,SP100,SP100,SP100
          PACK      PID01801,SP100,SP100,SP100,SP100,SP100
          PACK      PID01802,SP100,SP100,SP100,SP100,SP100
          PACK      PID01803,SP100,SP100,SP100,SP100,SP100
          PACK      PID01804,SP100,SP100,SP100,SP100,SP100
          PACK      PID01805,SP100,SP100,SP100,SP100,SP100
          PACK      PID01806,SP100,SP100,SP100,SP100,SP100
          PACK      PID01901,SP100,SP100,SP100,SP100,SP100
          PACK      PID02001,SP100,SP100,SP100,SP100,SP100
          PACK      PID02002,SP100,SP100,SP100,SP100,SP100
          PACK      PID02003,SP100,SP100,SP100,SP100,SP100
          PACK      PID02101,SP100,SP100,SP100,SP100,SP100
          PACK      PID02102,SP100,SP100,SP100,SP100,SP100
          PACK      PID02103,SP100,SP100,SP100,SP100,SP100
          PACK      PID02104,SP100,SP100,SP100,SP100,SP100
          PACK      PID02105,SP100,SP100,SP100,SP100,SP100
          PACK      PID02106,SP100,SP100,SP100,SP100,SP100
          PACK      PID02201,SP100,SP100,SP100,SP100,SP100
          PACK      PID02202,SP100,SP100,SP100,SP100,SP100
          PACK      PID02203,SP100,SP100,SP100,SP100,SP100
          PACK      PID02204,SP100,SP100,SP100,SP100,SP100
          PACK      PID02205,SP100,SP100,SP100,SP100,SP100
          PACK      PID02206,SP100,SP100,SP100,SP100,SP100
          PACK      PID02301,SP100,SP100,SP100,SP100,SP100
          PACK      PID02401,SP100,SP100,SP100,SP100,SP100
          PACK      PID02501,SP100,SP100,SP100,SP100,SP100
          PACK      PID02601,SP100,SP100,SP100,SP100,SP100
          PACK      PID02602,SP100,SP100,SP100,SP100,SP100
          PACK      PID02603,SP100,SP100,SP100,SP100,SP100
          PACK      PID02604,SP100,SP100,SP100,SP100,SP100
          PACK      PID02605,SP100,SP100,SP100,SP100,SP100
          PACK      PID02606,SP100,SP100,SP100,SP100,SP100
          PACK      PID02701,SP100,SP100,SP100,SP100,SP100
          PACK      PID02702,SP100,SP100,SP100,SP100,SP100
          PACK      PID02703,SP100,SP100,SP100,SP100,SP100
          PACK      PID02704,SP100,SP100,SP100,SP100,SP100
          PACK      PID02705,SP100,SP100,SP100,SP100,SP100
          PACK      PID02706,SP100,SP100,SP100,SP100,SP100
          PACK      PID02801,SP100,SP100,SP100,SP100,SP100
          PACK      PID02802,SP100,SP100,SP100,SP100,SP100
          PACK      PID02803,SP100,SP100,SP100,SP100,SP100
          PACK      PID02804,SP100,SP100,SP100,SP100,SP100
          PACK      PID02805,SP100,SP100,SP100,SP100,SP100
          PACK      PID02806,SP100,SP100,SP100,SP100,SP100
          PACK      PID02901,SP100,SP100,SP100,SP100,SP100
          PACK      PID03001,SP100,SP100,SP100,SP100,SP100
          PACK      PID03101,SP100,SP100,SP100,SP100,SP100
          PACK      PID03201,SP100,SP100,SP100,SP100,SP100
          PACK      PID03301,SP100,SP100,SP100,SP100,SP100
.
          CLEAR     PID001
          CLEAR     PID002
          CLEAR     PID003
          CLEAR     PID004
          CLEAR     PID005
          CLEAR     PID006
          CLEAR     PID007
          CLEAR     PID008
          CLEAR     PID009
          CLEAR     PID010
          CLEAR     PID011
          CLEAR     PID012
          CLEAR     PID013
          CLEAR     PID014
          CLEAR     PID015
          CLEAR     PID016
          CLEAR     PID017
          CLEAR     PID018
          CLEAR     PID019
          CLEAR     PID020
          CLEAR     PID021
          CLEAR     PID022
          CLEAR     PID023
          CLEAR     PID024
          CLEAR     PID025
          CLEAR     PID026
          CLEAR     PID027
          CLEAR     PID028
          CLEAR     PID029
          CLEAR     PID030
          CLEAR     PID031
          CLEAR     PID032
          CLEAR     PID033
.
          CLEAR     PID00101
          CLEAR     PID00201
          CLEAR     PID00202
          CLEAR     PID00203
          CLEAR     PID00204
          CLEAR     PID00205
          CLEAR     PID00206
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 5
            ADD       ONE,COUNTER
            CLEAR     PID00301[COUNTER]
            CLEAR     PID00302[COUNTER]
            CLEAR     PID00303[COUNTER]
            CLEAR     PID00304[COUNTER]
            CLEAR     PID00305[COUNTER]
            CLEAR     PID00306[COUNTER]
          DO
.
          CLEAR     PID00401
          CLEAR     PID00402
          CLEAR     PID00403
          CLEAR     PID00404
          CLEAR     PID00405
          CLEAR     PID00406
          CLEAR     PID00501
          CLEAR     PID00502
          CLEAR     PID00503
          CLEAR     PID00504
          CLEAR     PID00505
          CLEAR     PID00506
          CLEAR     PID00507
          CLEAR     PID00508
          CLEAR     PID00601
          CLEAR     PID00602
          CLEAR     PID00603
          CLEAR     PID00604
          CLEAR     PID00605
          CLEAR     PID00606
          CLEAR     PID00607
          CLEAR     PID00608
          CLEAR     PID00701
          CLEAR     PID00801
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 80
            ADD       ONE,COUNTER
            CLEAR     PID00901[COUNTER]
            CLEAR     PID00902[COUNTER]
            CLEAR     PID00903[COUNTER]
            CLEAR     PID00904[COUNTER]
            CLEAR     PID00905[COUNTER]
            CLEAR     PID00906[COUNTER]
            CLEAR     PID00907[COUNTER]
            CLEAR     PID00908[COUNTER]
          DO
.
          CLEAR     PID01001
          CLEAR     PID01002
          CLEAR     PID01003
          CLEAR     PID01004
          CLEAR     PID01005
          CLEAR     PID01006
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 2
            ADD       ONE,COUNTER
            CLEAR     PID01101[COUNTER]
            CLEAR     PID01102[COUNTER]
            CLEAR     PID01103[COUNTER]
            CLEAR     PID01104[COUNTER]
            CLEAR     PID01105[COUNTER]
            CLEAR     PID01106[COUNTER]
            CLEAR     PID01107[COUNTER]
            CLEAR     PID01108[COUNTER]
            CLEAR     PID01109[COUNTER]
            CLEAR     PID01110[COUNTER]
            CLEAR     PID01111[COUNTER]
          DO
.
          CLEAR     PID01201
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 2
            ADD       ONE,COUNTER
            CLEAR     PID01301[COUNTER]
            CLEAR     PID01401[COUNTER]
            CLEAR     PID01302[COUNTER]
            CLEAR     PID01402[COUNTER]
            CLEAR     PID01303[COUNTER]
            CLEAR     PID01403[COUNTER]
            CLEAR     PID01304[COUNTER]
            CLEAR     PID01404[COUNTER]
            CLEAR     PID01305[COUNTER]
            CLEAR     PID01405[COUNTER]
            CLEAR     PID01306[COUNTER]
            CLEAR     PID01406[COUNTER]
            CLEAR     PID01307[COUNTER]
            CLEAR     PID01407[COUNTER]
            CLEAR     PID01308[COUNTER]
            CLEAR     PID01408[COUNTER]
            CLEAR     PID01309[COUNTER]
            CLEAR     PID01409[COUNTER]
          DO
.
          CLEAR     PID01501
          CLEAR     PID01502
          CLEAR     PID01503
          CLEAR     PID01504
          CLEAR     PID01505
          CLEAR     PID01506
          CLEAR     PID01601
          CLEAR     PID01602
          CLEAR     PID01603
          CLEAR     PID01604
          CLEAR     PID01605
          CLEAR     PID01606
          CLEAR     PID01701
          CLEAR     PID01702
          CLEAR     PID01703
          CLEAR     PID01704
          CLEAR     PID01705
          CLEAR     PID01706
          CLEAR     PID01801
          CLEAR     PID01802
          CLEAR     PID01803
          CLEAR     PID01804
          CLEAR     PID01805
          CLEAR     PID01806
          CLEAR     PID01901
          CLEAR     PID02001
          CLEAR     PID02002
          CLEAR     PID02003
          CLEAR     PID02101
          CLEAR     PID02102
          CLEAR     PID02103
          CLEAR     PID02104
          CLEAR     PID02105
          CLEAR     PID02106
          CLEAR     PID02201
          CLEAR     PID02202
          CLEAR     PID02203
          CLEAR     PID02204
          CLEAR     PID02205
          CLEAR     PID02206
          CLEAR     PID02301
          CLEAR     PID02401
          CLEAR     PID02501
          CLEAR     PID02601
          CLEAR     PID02602
          CLEAR     PID02603
          CLEAR     PID02604
          CLEAR     PID02605
          CLEAR     PID02606
          CLEAR     PID02701
          CLEAR     PID02702
          CLEAR     PID02703
          CLEAR     PID02704
          CLEAR     PID02705
          CLEAR     PID02706
          CLEAR     PID02801
          CLEAR     PID02802
          CLEAR     PID02803
          CLEAR     PID02804
          CLEAR     PID02805
          CLEAR     PID02806
          CLEAR     PID02901
          CLEAR     PID03001
          CLEAR     PID03101
          CLEAR     PID03201
          CLEAR     PID03301
.
CLPID999  RETURN
+
.*****************************************************************************
.*                         SNECT000                Called by: A19HNDLR       *
.*                                                                           *
.*****************************************************************************
.
.         Get the machine and socket to which the message is being sent
.
.>>>>>>>  Need new parameters for UPI HL7 interface:
.            - Machine
.            - Port
.
SNECT000  READ      CONTROLF,ZERO;*174,IBCNCRTI,*176,IBCNCRTN,*179,IBCNCRTO
          READ      CONTROLF,HUND25;*53,PTCNUPIS,*73,PTCNUPIP
.
          MOVE      IBCNCRTI,RETRYINT            * load retry interval
          MOVE      IBCNCRTN,RETRYNUM            * load number of retries
          MOVE      IBCNCRTO,RESPTOUT            * load response timeout
          MOVE      PTCNUPIS,A19SERVR            * load destination server
          MOVE      PTCNUPIP,A19SOCKT            * load port/alias
.
          MATCH     SP20,A19SERVR                * blank server ?
          GOTO      SNECT910 IF EQUAL            * yes
.
          MATCH     SP20,A19SOCKT                * blank socket ?
          GOTO      SNECT910 IF EQUAL            * yes
.
.         Set machine and port <machine:port>
.
          MOVE      A19SERVR,TCPIPORT
          STRIP     TCPIPORT
          ENDSET    TCPIPORT
          APPEND    COLON,TCPIPORT
          APPEND    A19SOCKT,TCPIPORT
          RESET     TCPIPORT
          STRIP     TCPIPORT
.
.         Set the response timeout to milliseconds
.
          ASSIGN    (RESPTOUT*1000),RPLYTIME
.
.         Get the first directory in the DPATH (cd directory) as this will
.         be where the log file will be created/updated if required
.
          GETENV    ENVVNAME,DPATHVAR            * get DPATH
          IF        @OVER
            DISPLAY   *P1:24,*EL,*B,"Problem getting DPATH (1)",*W5;
            GOTO      SNECT910
          ENDIF
.
          MOVE      SP100,CDDRCTRY               * clear cd directory variable
          CLEAR     CDDRCTRY
          SCAN      ":",DPATHVAR                 * find end of first directory
          IF        @EOS
            DISPLAY   *P1:24,*EL,*B,"Problem getting DPATH (2)",*W5;
            GOTO      SNECT910
          ENDIF
.
          IF        @EQUAL
            MOVEFPTR  DPATHVAR,FORM3
            SUB       ONE,FORM3
            RESET     DPATHVAR
            SETLPTR   DPATHVAR,FORM3
          ENDIF
.
          MOVE      DPATHVAR,CDDRCTRY
          ENDSET    CDDRCTRY
          APPEND    SLASH,CDDRCTRY
          RESET     CDDRCTRY
.
SNECT900  MOVE      ZERO,EXIT
          GOTO      SNECT9999
.
SNECT910  MOVE      ONE,EXIT
          GOTO      SNECT9999
.
SNECT999  RETURN
+
.*****************************************************************************
.*                         CNECT000                Called by: A19HNDLR       *
.*                                                                           *
.*****************************************************************************
.
.         Open connection to socket
.
CNECT000  CALL      LOGO0000                     * open log file
.
          IF        DISPFLAG = 1
            DISPLAY   "Connecting to socket....",*R,*N;
          ENDIF
.
          MOVE      FOUR,MLOGFLAG
          MOVE      "Connecting to ",ERORTEXT
          ENDSET    ERORTEXT
          APPEND    TCPIPORT,ERORTEXT
          RESET     ERORTEXT
          CALL      LOGM0000                     * log message if required
.
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO               * set TRAP for I*M
          OPEN      COMSOCKT,TCPIPORT,KEEPALIV   * open socket
          TRAPCLR   IO                           * clear trap
          BRANCH    OVRCD,CNECT910               * error occured
.
CNECT900  MOVE      ZERO,EXIT
          GOTO      CNECT9999
.
CNECT910  MOVE      ONE,EXIT
.
CNECT999  RETURN
+
.*****************************************************************************
.*                              SENDM000           Called by: Lots           *
.*             Send the message segment to Third Party receiver              *
.* Requires:  SEGSTRNG - the segment string to be sent                       *
.* Returns:   EXIT    0 = message sent ok                                    *
.*                    1 = connection lost, message not sent                  *
.*                    2 = timeout occurred                                   *
.*****************************************************************************
.
SENDM000  MOVELPTR  SEGSTRNG,STRNGLEN            * get string length
.
          MOVE      ONE,MLOGFLAG
          CALL      LOGM0000                     * write segment to log file
.
.         Set TRAP for loss of connection then send segment
.
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF SIGPIPE                  * set trap
          WRITE     COMSOCKT,STRNGLEN,RPLYTIME;SEGSTRNG; * send segment
.>>>>     TRAPCLR   SIGPIPE                              * clear trap
          GOTO      SENDM920 IF TIMEOUT                  * timeout expired
          BRANCH    OVRCD,SENDM910                       * connection lost
.
          PACK      SEGSTRNG,SP70,SP70,SP70,SP70,SP70,SP70,SP70,SP70,SP70,SP70:
                             SP70,SP70,SP70,SP70,SP70,SP70,SP70,SP70,SP70,SP70:
                             SP70,SP70,SP70,SP70,SP70,SP70,SP70,SP70,SP70
          CLEAR     SEGSTRNG                     * clear segment string
          MOVE      ZERO,EXIT                    * sent ok
          GOTO      SENDM999
.
SENDM910  MOVE      ONE,EXIT
          GOTO      SENDM999
.
SENDM920  MOVE      TWO,EXIT
          GOTO      SENDM999
.
.         Clear and Reset SIGPIPE TRAP for web server
.
SENDM999  TRAPCLR   SIGPIPE
          TRAP      WEBSIG00 IF SIGPIPE
          RETURN
+
.*****************************************************************************
.*                          GTSTR000               Called by: A19HNDLR       *
.*                                                            GSEG0000       *
.*                                                            GCHR0000       *
.*        Read the next 4000 characters (or less) from the socket            *
.* Returns:   TMPSTRNG - buffer containing character string read in          *
.*            EXIT      0 = read ok                                          *
.*                      1 = timeout expired                                  *
.*                      2 = connection lost                                  *
.*****************************************************************************
.
.davupi   DISPLAY   *P1:24,*EL,"Before RECV ",D10;
.davupi   CALL      HITENTER
.
GTSTR000  RECV      COMSOCKT,4000,RPLYTIME;TMPSTRNG;    * read 4000 characters
          GOTO      GTSTR910 IF TIMEOUT          * timeout expired
          GOTO      GTSTR920 IF OVER             * connection lost
.
.davupi   DISPLAY   *P1:24,*EL,"After RECV ",D10;
.davupi   CALL      HITENTER
.
.         Data received - display if in debug mode
.
          IF        DISPFLAG = 1
            STRIP     TMPSTRNG
            MOVE      ZERO,COUNTR
            MOVELPTR  TMPSTRNG,FORM4
            DISPLAY   "Received ",FORM4," bytes:  (* = carriage return)",*R,*N;
            WHILE     FORM4 > 0
              ADD       ONE,COUNTR
              MATCH     CRETURN,TMPSTRNG
              IF        @EQUAL
                MOVE      ASK,ANS
              ELSE
                MOVE      TMPSTRNG,ANS
              ENDIF
              IF        COUNTR = 1
                DISPLAY   "[";
              ENDIF
              DISPLAY   *HON,ANS,*HOFF;
              IF        COUNTR = 70
                DISPLAY   "]",*R,*N;
                MOVE      ZERO,COUNTR
              ENDIF
              SUB       ONE,FORM4
              BUMP      TMPSTRNG
            DO
            DISPLAY     "]",*R,*N;
            RESET       TMPSTRNG
          ENDIF
.
          CLOCK     TIME,TIMSTAMP                * get current date/time
          WRITE     TEXTFILE,SEQ;RECVCAPT,TIMSTAMP
          WRITE     TEXTFILE,SEQ;*+,TMPSTRNG
.
          MOVE      ZERO,EXIT
          GOTO      GTSTR999
.
GTSTR910  MOVE      ONE,EXIT                     * timeout
          GOTO      GTSTR999
.
GTSTR920  MOVE      TWO,EXIT                     * connection lost
          GOTO      GTSTR999
.
GTSTR999  RETURN
+
.*****************************************************************************
.*                                  GSEG0000       Called by: A19HNDLR       *
.*                        Get the next segment code                          *
.* This routine is called when we are expecting the next segment.  It will   *
.* get the next 3 characters in the message and use this as the segment id.  *
.*                                                                           *
.* Returns: EXIT   0 = segment id read                                       *
.*                 1 = connection timed out                                  *
.*                 2 = connection lost                                       *
.*                 3 = start of block found                                  *
.*                 4 = end of block found                                    *
.*                 5 = end of segment found (CR)                             *
.*                 6 = first segment is not MSH                              *
.*          SEGMENT = 3 character HL7 segment id (eg MSH)                    *
.*****************************************************************************
.
GSEG0000  CLEAR     SEGMENT
          MOVE      ZERO,COUNTER                 * initialise character counter
          WHILE     COUNTER < 3
            BUMP      TMPSTRNG                   * move to next character
            IF        @EOS
              MOVE      "gtstr002  ",D10
              CALL      GTSTR000                 * get next 4000 chars (or less)
              BRANCH    EXIT,GSEG9100:           * timeout
                             GSEG9200            * connection lost
            ENDIF
            MOVE      TMPSTRNG,ANS               * save character
.
            MATCH     CRETURN,ANS                * carriage return found ?
            GOTO      GSEG9500 IF EQUAL          * yes
.
            MATCH     ENDBLOCK,ANS               * end of block found ?
            IF        @EQUAL
              APPEND    ENDBLOCK,RECVMESS        * yes
              APPEND    CRETURN,RECVMESS
              GOTO      GSEG9400
            ENDIF
.
            MATCH     STRTBLOK,ANS               * start of block found ?
            GOTO      GSEG9300 IF EQUAL          * yes
.
            APPEND    ANS,SEGMENT                * load segment id
            ADD       ONE,COUNTER                * increment counter
          DO
.
          RESET     SEGMENT
          APPEND    SEGMENT,RECVMESS             * add seg. to full message
.
.         If this is the first segment, check to make sure it's an
.         MSH segment
.
          COMPARE   ZERO,SEGCOUNT
          GOTO      GSEG9000 IF NOT EQUAL
.
          MATCH     MSHSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      MSHSEGMT,SAVSEGMT          * save first segment
            GOTO      GSEG9000
          ENDIF
.
          IF        DISPFLAG = 1
            DISPLAY   "MSH segment missing",*R,*N;
          ENDIF
          MOVE      MSHMCAPT,ERORTEXT
          MOVE      TWO,MLOGFLAG                 * set for error logging
          CALL      LOGM0000                     * write error to log file
.dav1     WRITE     TEXTFILE,SEQ;MSHMCAPT
          GOTO      GSEG9600
.
GSEG9000  MOVE      ZERO,EXIT
          GOTO      GSEG9999
.
GSEG9100  MOVE      ONE,EXIT
          GOTO      GSEG9999
.
GSEG9200  MOVE      TWO,EXIT
          GOTO      GSEG9999
.
GSEG9300  MOVE      THREE,EXIT
          GOTO      GSEG9999
.
GSEG9400  MOVE      FOUR,EXIT
          GOTO      GSEG9999
.
GSEG9500  MOVE      FIVE,EXIT
          GOTO      GSEG9999
.
GSEG9600  MOVE      SIX,EXIT
.
GSEG9999  RETURN
+
.*****************************************************************************
.*                              VSEG0000           Called by: A19HNDLR       *
.*   Validate that the segment found is relevant, and in the correct         *
.*   sequence, for the message type.                                         *
.* Requires:  SEGMENT - 3 character segment id                               *
.* Returns:   EXIT    0 = Valid segment                                      *
.*                    1 = Invalid segment                                    *
.*            SEGNUMBR - Segment number                                      *
.*                    0 = unknown segment                                    *
.*                    1 = MSH                                                *
.*                    2 = MSA                                                *
.*                    3 = ERR                                                *
.*                    4 = QRD                                                *
.*                    5 = PID                                                *
.*                    6 = DSC                                                *
.*                    7 = QAK                                                *
.*                    8 = PV1                                                *
.*                    9 = OBX                                                *
.*                   10 = QRF                                                *
.*                   11 = NK1                                                *
.*                   12 = ZXP                                                *
.*****************************************************************************
.
VSEG0000  MATCH     "MSH",SEGMENT
          IF        @EQUAL
            MOVE      ONE,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     "MSA",SEGMENT
          IF        @EQUAL
            MOVE      TWO,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     "ERR",SEGMENT
          IF        @EQUAL
            MOVE      THREE,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     "QRD",SEGMENT
          IF        @EQUAL
            MOVE      FOUR,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     "PID",SEGMENT
          IF        @EQUAL
            MOVE      FIVE,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     "DSC",SEGMENT
          IF        @EQUAL
            MOVE      SIX,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     "QAK",SEGMENT
          IF        @EQUAL
            MOVE      SEVEN,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     "PV1",SEGMENT
          IF        @EQUAL
            MOVE      EIGHT,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     "OBX",SEGMENT
          IF        @EQUAL
            MOVE      NINE,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     "QRF",SEGMENT
          IF        @EQUAL
            MOVE      TEN,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     "NK1",SEGMENT
          IF        @EQUAL
            MOVE      TEN1,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     "ZXP",SEGMENT
          IF        @EQUAL
            MOVE      TEN2,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MOVE      ZERO,SEGNUMBR
          MOVE      ONE,EXIT
          GOTO      VSEG9999
.
VSEG9000  MOVE      ZERO,EXIT
.
VSEG9999  RETURN
+
.*****************************************************************************
.*                          GCHR0000               Called by: A19HNDLR       *
.*                 Get the next character in the message string              *
.* Returns:  EXIT  0 = ok to continue                                        *
.*                 1 = connection timeout                                    *
.*                 2 = connection lost                                       *
.*                 3 = start of block                                        *
.*                 4 = end of block                                          *
.*                 5 = end of segment (CR)                                   *
.*                 6 = field separator blank (MSH00101 only)                 *
.*                 7 = encoding character(s) missing (MSH00201 only)         *
.*           ANS  - character just read in                                   *
.*****************************************************************************
.
GCHR0000  BUMP      TMPSTRNG                     * move to next field
          IF        @EOS
            MOVE      "gtstr003  ",D10
            CALL      GTSTR000                   * get next 4000 chars (or less)
            BRANCH    EXIT,GCHR9100:             * timeout
                           GCHR9200              * connection lost
          ENDIF
.
          MOVE      TMPSTRNG,ANS                 * save character
.
.         If this is the first field of the MSH segment, then we need to
.         load the field separator.
.
          MATCH     MSHSEGMT,SEGMENT             * MSH segment & first field?
          IF        @EQUAL
            IF        FIELDNO = 0
              MATCH     SP1,ANS                  * yes - blank separator ?
              GOTO      GCHR9600 IF EQUAL        * yes - error
.
              ADD       ONE,FIELDNO              * increment seg. field number
              MOVE      ANS,MSH00101             * no - load field separator
              MOVE      ZERO,COMPFLAG            * set for no component flag
              MOVE      SP1,PREVCHAR             * initialise previous character
            ENDIF
          ENDIF
.
.         Check if this is a field separator and if so, save to the full
.         message buffer (for message display later), increment the segment
.         field number, initialse the component count, then get the next
.         character.
.
          MATCH     MSH00101,ANS                 * field separator found ?
          IF        @EQUAL
            MATCH     PREVCHAR,ANS               * yes
            IF        !@EQUAL
              MATCH     PREVCHAR,COMSEPAR        * yes
              IF        !@EQUAL
                CALL      RFLD0000               * reset component just loaded
              ENDIF
            ENDIF
            ADD       ONE,FIELDNO                * increment seg. field number
            MOVE      ONE,COMPCNT                * init. field component count
            MOVE      ONE,REPTNCNT               * init. field repetition count
            APPEND    ANS,RECVMESS               * add to full message buffer
            MOVE      ANS,PREVCHAR
            GOTO      GCHR0000                   * get next field
          ENDIF
.
.         Check that the encoding characters have been sent in MSH.2 if we
.         have just started processing MSH.3 (component 1)
.
          MATCH     MSHSEGMT,SEGMENT
          IF        @EQUAL
            IF        FIELDNO = 3 & COMPCNT = 1 & COMPFLAG = 0
              RESET     MSH00201
              MOVELPTR  MSH00201,FORM3
              IF        FORM3 <> 4
                GOTO      GCHR9700
               ELSE
                UNPACK    MSH00201,COMSEPAR,REPSEPAR,ESCSEPAR,SUBSEPAR
                MOVE      ONE,COMPFLAG           * set component flag
              ENDIF
            ENDIF
          ENDIF
.
.         Check if end of segment found
.
          MATCH     CRETURN,ANS                  * carriage return found ?
          IF        @EQUAL
            APPEND    ANS,RECVMESS
            CALL      RFLD0000                   * reset component just loaded
            GOTO      GCHR9500
          ENDIF
.
.         Check if end of block (message) found
.
          MATCH     ENDBLOCK,ANS                 * end of block found ?
          IF        @EQUAL
            CALL      RFLD0000                   * reset component just loaded
            GOTO      GCHR9400
          ENDIF
.
.         Check if start of block found
.
          MATCH     STRTBLOK,ANS                 * start of block found ?
          IF        @EQUAL
            CALL      CLER0000                   * clear mess. buffer sand flags
            GOTO      GCHR9300                   * start again
          ENDIF
.
          MOVE      ZERO,EXIT
          GOTO      GCHR9999
.
GCHR9100  MOVE      ONE,EXIT
          GOTO      GCHR9999
.
GCHR9200  MOVE      TWO,EXIT
          GOTO      GCHR9999
.
GCHR9300  MOVE      THREE,EXIT
          GOTO      GCHR9999
.
GCHR9400  MOVE      FOUR,EXIT
          GOTO      GCHR9999
.
GCHR9500  MOVE      FIVE,EXIT
          GOTO      GCHR9999
.
GCHR9600  IF        DISPFLAG = 1
            DISPLAY   "MSH.1: Field Separator not set",*R,*N;
          ENDIF
          MOVE      SIX,EXIT
          GOTO      GCHR9999
.
GCHR9700  IF        DISPFLAG = 1
            DISPLAY   "MSH.2: Missing Encoding Character(s)",*R,*N;
          ENDIF
          MOVE      SEVEN,EXIT
.
GCHR9999  RETURN
+
.*****************************************************************************
.*                                 LMSH0000                                  *
.*                          Load the MSH fields                              *
.*****************************************************************************
.
LMSH0000  BRANCH    FIELDNO,LMSH9999:            * Field Separator
                            LMSH0200:            * Encoding Characters
                            LMSH0300:            * Sending Application
                            LMSH0400:            * Sending Facility
                            LMSH0500:            * Receiving Application
                            LMSH0600:            * Receiving Facility
                            LMSH0700:            * Date/Time of Message
                            LMSH0800:            * Security
                            LMSH0900:            * Message Type
                            LMSH1000:            * Message Control ID
                            LMSH1100:            * Processing ID
                            LMSH1200:            * Version ID
                            LMSH1300:            * Sequence Number
                            LMSH1400:            * Continuation Pointer
                            LMSH1500:            * Accept Acknowledgement Type
                            LMSH1600:            * Appl. Acknowledgement Type
                            LMSH1700:            * Country Code
                            LMSH1800:            * Character Set
                            LMSH1900:            * Principal Language of Message
                            LMSH2000:            * Alt. Char Set Hand Scheme
                            LMSH2100             * Conformance Statement ID
.
.         Invalid MSH field received, so ignore it
.
          GOTO      LMSH9999
.
. Note: MSH00101 is set in GCHR0000
.
.         MSH.2 Encoding Characters (ST)
.
LMSH0200  BRANCH    COMPCNT,LMSH0201
          GOTO      LMSH9999
.
LMSH0201  APPEND    ANS,MSH00201
          GOTO      LMSH9999
.
.         MSH.3 Sending Application (HD)
.
LMSH0300  BRANCH    COMPCNT,LMSH0301:            * namespace ID
                            LMSH0302:            * universal ID
                            LMSH0303             * universal ID type
          GOTO      LMSH9999
.
LMSH0301  APPEND    ANS,MSH00301                 * load namespace id (IS)
          GOTO      LMSH9999
.
LMSH0302  APPEND    ANS,MSH00302                 * load universal id (ST)
          GOTO      LMSH9999
.
LMSH0303  APPEND    ANS,MSH00303                 * load universal id type (ID)
          GOTO      LMSH9999
.
.         MSH.4 Sending Facility
.
LMSH0400  BRANCH    COMPCNT,LMSH0401:            * namespace ID
                            LMSH0402:            * universal ID
                            LMSH0403             * universal ID type
          GOTO      LMSH9999
.
LMSH0401  APPEND    ANS,MSH00401                 * load namespace id (IS)
          GOTO      LMSH9999
.
LMSH0402  APPEND    ANS,MSH00402                 * load universal id (ST)
          GOTO      LMSH9999
.
LMSH0403  APPEND    ANS,MSH00403                 * load universal id type (ID)
          GOTO      LMSH9999
.
.         MSH.5 Receiving Application
.
LMSH0500  BRANCH    COMPCNT,LMSH0501:            * namespace ID
                            LMSH0502:            * universal ID
                            LMSH0503             * universal ID type
          GOTO      LMSH9999
.
LMSH0501  APPEND    ANS,MSH00501                 * load namespace id (IS)
          GOTO      LMSH9999
.
LMSH0502  APPEND    ANS,MSH00502                 * load universal id (ST)
          GOTO      LMSH9999
.
LMSH0503  APPEND    ANS,MSH00503                 * load universal id type (ID)
          GOTO      LMSH9999
.
.         MSH.6 Receiving Facility
.
LMSH0600  BRANCH    COMPCNT,LMSH0601:            * namespace ID
                            LMSH0602:            * universal ID
                            LMSH0603             * universal ID type
          GOTO      LMSH9999
.
LMSH0601  APPEND    ANS,MSH00601                 * load namespace id (IS)
          GOTO      LMSH9999
.
LMSH0602  APPEND    ANS,MSH00602                 * load universal id (ST)
          GOTO      LMSH9999
.
LMSH0603  APPEND    ANS,MSH00603                 * load universal id type (ID)
          GOTO      LMSH9999
.
.         MSH.7 Date/Time of Message (TS)
.
LMSH0700  BRANCH    COMPCNT,LMSH0701
          GOTO      LMSH9999
.
LMSH0701  APPEND    ANS,MSH00701
          GOTO      LMSH9999
.
.         MSH.8 Security (ST)
.
LMSH0800  BRANCH    COMPCNT,LMSH0801
          GOTO      LMSH9999
.
LMSH0801  APPEND    ANS,MSH00801
          GOTO      LMSH9999
.
.         MSH.9 Message Type (CM)
.
LMSH0900  BRANCH    COMPCNT,LMSH0901:            * message type
                            LMSH0902:            * trigger event
                            LMSH0903             * message structure
          GOTO      LMSH9999
.
LMSH0901  APPEND    ANS,MSH00901                 * load message type (ID)
          GOTO      LMSH9999
.
LMSH0902  APPEND    ANS,MSH00902                 * load trigger event (ID)
          GOTO      LMSH9999
.
LMSH0903  APPEND    ANS,MSH00903                 * load message structure (ID)
          GOTO      LMSH9999
.
.         MSH.10 Message Control ID (ST)
.
LMSH1000  BRANCH    COMPCNT,LMSH1001
          GOTO      LMSH9999
.
LMSH1001  APPEND    ANS,MSH01001
          GOTO      LMSH9999
.
.         MSH.11 Processing ID (PT)
.
LMSH1100  BRANCH    COMPCNT,LMSH1101:            * processing id
                            LMSH1102             * processing mode
          GOTO      LMSH9999
.
LMSH1101  APPEND    ANS,MSH01101                 * load processing id (ID)
          GOTO      LMSH9999
.
LMSH1102  APPEND    ANS,MSH01102                 * load processing mode (ID)
          GOTO      LMSH9999
.
.         MSH.12 Version ID (VID)
.
LMSH1200  BRANCH    COMPCNT,LMSH1201:            * version ID
                            LMSH1202:            * internationalisation code
                            LMSH1203             * internal version ID
          GOTO      LMSH9999
.
LMSH1201  APPEND    ANS,MSH01201                 * load version id (ID)
          GOTO      LMSH9999
.
LMSH1202  APPEND    ANS,MSH01202                 * load intern'ln code (CE)
          GOTO      LMSH9999
.
LMSH1203  APPEND    ANS,MSH01203                 * load internal version id (CE)
          GOTO      LMSH9999
.
.         MSH.13 Sequence Number (NM)
.
LMSH1300  BRANCH    COMPCNT,LMSH1301
          GOTO      LMSH9999
.
LMSH1301  APPEND    ANS,MSH01301
          GOTO      LMSH9999
.
.         MSH.14 Continuation Pointer (ST)
.
LMSH1400  BRANCH    COMPCNT,LMSH1401
          GOTO      LMSH9999
.
LMSH1401  APPEND    ANS,MSH01401
          GOTO      LMSH9999
.
.         MSH.15 Accept Acknowledgement Type (ID)
.
LMSH1500  BRANCH    COMPCNT,LMSH1501
          GOTO      LMSH9999
.
LMSH1501  APPEND    ANS,MSH01501
          GOTO      LMSH9999
.
.         MSH.16 Application Acknowledgement Type (ID)
.
LMSH1600  BRANCH    COMPCNT,LMSH1601
          GOTO      LMSH9999
.
LMSH1601  APPEND    ANS,MSH01601
          GOTO      LMSH9999
.
.         MSH.17 Country Code (ID)
.
LMSH1700  BRANCH    COMPCNT,LMSH1701
          GOTO      LMSH9999
.
LMSH1701  APPEND    ANS,MSH01701
          GOTO      LMSH9999
.
.         MSH.18 Character Set (ID)
.
LMSH1800  BRANCH    COMPCNT,LMSH1801
          GOTO      LMSH9999
.
LMSH1801  APPEND    ANS,MSH01801
          GOTO      LMSH9999
.
.         MSH.19 Principal Language of Message (CE)
.
LMSH1900  BRANCH    COMPCNT,LMSH1901:            * identifier
                            LMSH1902:            * text
                            LMSH1903:            * name of coding system
                            LMSH1904:            * alternate identifier
                            LMSH1905:            * alternate text
                            LMSH1906             * name of alternate coding syst
          GOTO      LMSH9999
.
LMSH1901  APPEND    ANS,MSH01901                 * load identifier (ID)
          GOTO      LMSH9999
.
LMSH1902  APPEND    ANS,MSH01902                 * load text (ST)
          GOTO      LMSH9999
.
LMSH1903  APPEND    ANS,MSH01903                 * load name of cod. system (ST)
          GOTO      LMSH9999
.
LMSH1904  APPEND    ANS,MSH01904                 * load alternate ident. (ID)
          GOTO      LMSH9999
.
LMSH1905  APPEND    ANS,MSH01905                 * load aternate text (ST)
          GOTO      LMSH9999
.
LMSH1906  APPEND    ANS,MSH01906                 * load name alt cod system (ST)
          GOTO      LMSH9999
.
.         MSH.20 Alternate Character Set Handling (ID)
.
LMSH2000  BRANCH    COMPCNT,LMSH2001
          GOTO      LMSH9999
.
LMSH2001  APPEND    ANS,MSH02001
          GOTO      LMSH9999
.
.         MSH.21 Conformance Statement ID (ID) (HL7 2.4 only)
.
LMSH2100  BRANCH    COMPCNT,LMSH2101
          GOTO      LMSH9999
.
LMSH2101  APPEND    ANS,MSH02101
          GOTO      LMSH9999
.
LMSH9999  RETURN
+
.*****************************************************************************
.*                                 LMSA0000                                  *
.*                          Load the MSA fields                              *
.*****************************************************************************
.
LMSA0000  BRANCH    FIELDNO,LMSA0001:            * Acknowledgement Code
                            LMSA0002:            * Message Control Id
                            LMSA0003:            * Text Message
                            LMSA0004:            * Expected Sequence Number
                            LMSA0005:            * Delayed Acknowledgement Type
                            LMSA0006             * Error Condition
.
LMSA0001  APPEND    ANS,MSA001                   * load ackn. code
          GOTO      LMSA9000
.
LMSA0002  APPEND    ANS,MSA002                   * load mess. control id
          GOTO      LMSA9000
.
LMSA0003  APPEND    ANS,MSA003                   * load text message
          GOTO      LMSA9000
.
LMSA0004  APPEND    ANS,MSA004                   * load exp. sequence no.
          GOTO      LMSA9000
.
LMSA0005  APPEND    ANS,MSA005                   * load delayed ackn. type
          GOTO      LMSA9000
.
LMSA0006  APPEND    ANS,MSA006                   * load error condition
          GOTO      LMSA9000
.
LMSA9000  
.
LMSA9999  RETURN
+
.*****************************************************************************
.*                                 LERR0000                                  *
.*                          Load the ERR fields                              *
.*****************************************************************************
.
LERR0000  BRANCH    FIELDNO,LERR0001             * Error code & location
.
LERR0001  APPEND    ANS,ERR001                   * error code & location
          GOTO      LERR9000
.
LERR9000  
.dav1     APPEND    ANS,RECVMESS                 * add char. to message buffer
.
LERR9999  RETURN
+
.*****************************************************************************
.*                                 LDSC0000                                  *
.*                          Load the DSC fields                              *
.*****************************************************************************
.
LDSC0000  BRANCH    FIELDNO,LDSC0001
.
LDSC0001  APPEND    ANS,DSC00101                 * continuation pointer
          GOTO      LDSC9000
.
LDSC9000
.dav1     APPEND    ANS,RECVMESS                 * add char. to message buffer
.
LDSC9999  RETURN
+
.*****************************************************************************
.*                                 LQAK0000                                  *
.*                          Load the QAK fields                              *
.*****************************************************************************
LQAK0000
LQAK9999  RETURN
+
.*****************************************************************************
.*                                 LPV10000                                  *
.*                          Load the PV1 fields                              *
.*****************************************************************************
LPV10000
LPV19999  RETURN
+
.*****************************************************************************
.*                                 LOBX0000                                  *
.*                          Load the OBX fields                              *
.*****************************************************************************
LOBX0000
LOBX9999  RETURN
+
.*****************************************************************************
.*                                 LQRF0000                                  *
.*                          Load the QRF fields                              *
.*****************************************************************************
LQRF0000
LQRF9999  RETURN
+
.*****************************************************************************
.*                                 LNK10000                                  *
.*                          Load the NK1 fields                              *
.*****************************************************************************
.
LNK10000  BRANCH    FIELDNO,LNK10100:            * Set ID
                            LNK10200:            * Name
                            LNK10300:            * Relationship
                            LNK10400:            * Address
                            LNK10500:            * Phone Number
                            LNK10600:            * Business Phone Number
                            LNK10700:            * Contact Role
                            LNK10800:            * Start Date
                            LNK10900:            * End Date
                            LNK11000:            * Job Title
                            LNK11100:            * Job Code/Class
                            LNK11200:            * Employee Number
                            LNK11300:            * Organisation Name
                            LNK11400:            * Marital Status
                            LNK11500:            * Sex
                            LNK11600:            * Date/Time of Birth
                            LNK11700:            * Living Dpendency
                            LNK11800:            * Ambulatory Status
                            LNK11900:            * Citizenship
                            LNK12000:            * Primary Language
                            LNK12100:            * Living Arrangement
                            LNK12200:            * Publicity Indicator
                            LNK12300:            * Protection Indicator
                            LNK12400:            * Student Indicator
                            LNK12500:            * Religion
                            LNK12600:            * Mother's Maiden Name
                            LNK12700:            * Nationality
                            LNK12800:            * Ethnic Group
                            LNK12900:            * Contact Reason
                            LNK13000:            * Contact Person's Name
                            LNK13100:            * Contact Person's Phone No.
                            LNK13200:            * Contact Person's Address
                            LNK13300:            * Identifiers
                            LNK13400:            * Job Status
                            LNK13500:            * Race
                            LNK13600:            * Handicap
                            LNK13700             * Social Security Number
.
.         Invalid NK1 field received, so ignore it
.
          GOTO      LNK19999
.
.         NK1.1 Set ID (SI)
.
LNK10100  BRANCH    COMPCNT,LNK10101
          GOTO      LNK19999
.
LNK10101  APPEND    ANS,NK100101
          GOTO      LNK19999
.
.         NK1.2 Name (XPN)
.
LNK10200  BRANCH    COMPCNT,LNK10201:            * family name (ST)
                            LNK10202:            * given name (ST)
                            LNK10203:            * middle name (ST)
                            LNK10204:            * suffix (ST)
                            LNK10205:            * prefix (ST)
                            LNK10206:            * degree (IS)
                            LNK10207:            * name type code (ID)
                            LNK10208             * name representation code (ID)
          GOTO      LNK19999
.
LNK10201  APPEND    ANS,NK100201                 * load family name (ST)
          GOTO      LNK19999
.
LNK10202  APPEND    ANS,NK100202                 * load given name (ST)
          GOTO      LNK19999
.
LNK10203  APPEND    ANS,NK100203                 * load middle name (ST)
          GOTO      LNK19999
.
LNK10204  APPEND    ANS,NK100204                 * load suffix (ST)
          GOTO      LNK19999
.
LNK10205  APPEND    ANS,NK100205                 * load prefix (ST)
          GOTO      LNK19999
.
LNK10206  APPEND    ANS,NK100206                 * load degree (IS)
          GOTO      LNK19999
.
LNK10207  APPEND    ANS,NK100207                 * load name type code (ID)
          GOTO      LNK19999
.
LNK10208  APPEND    ANS,NK100208                 * load name rep. code (ID)
          GOTO      LNK19999
.
.         NK1.3 Relationship (CE)
.
LNK10300  BRANCH    COMPCNT,LNK10301:            * identifier (ST)
                            LNK10302:            * text (ST)
                            LNK10303:            * name of coding system (ST)
                            LNK10304:            * alternate identifier (ST)
                            LNK10305:            * alternate text (ST)
                            LNK10306             * name of alt. cod. system (ST)
          GOTO      LNK19999
.
LNK10301  APPEND    ANS,NK100301                 * load identifier (ST)
          GOTO      LNK19999
.
LNK10302  APPEND    ANS,NK100302                 * load text (ST)
          GOTO      LNK19999
.
LNK10303  APPEND    ANS,NK100303                 * load name of cod. system (ST)
          GOTO      LNK19999
.
LNK10304  APPEND    ANS,NK100304                 * load alt. identifier (ST)
          GOTO      LNK19999
.
LNK10305  APPEND    ANS,NK100305                 * load alternate text (ST)
          GOTO      LNK19999
.
LNK10306  APPEND    ANS,NK100306                 * load alt. cod. sys. name (ST)
          GOTO      LNK19999
.
.         NK1.4 Address (XAD)
.
LNK10400  BRANCH    COMPCNT,LNK10401:            * street address (ST)
                            LNK10402:            * other designation (ST)
                            LNK10403:            * city (ST)
                            LNK10404:            * state (ST)
                            LNK10405:            * postcode (ST)
                            LNK10406:            * country (ID)
                            LNK10407:            * address type (ID)
                            LNK10408:            * other geographic desig. (ST)
                            LNK10409:            * county (IS)
                            LNK10410:            * census tract (IS)
                            LNK10411             * address rep. code (ID)
          GOTO      LNK19999
.
LNK10401  APPEND    ANS,NK100401                 * load street address (ST)
          GOTO      LNK19999
.
LNK10402  APPEND    ANS,NK100402                 * load other designation (ST)
          GOTO      LNK19999
.
LNK10403  APPEND    ANS,NK100403                 * load city (ST)
          GOTO      LNK19999
.
LNK10404  APPEND    ANS,NK100404                 * load state (ST)
          GOTO      LNK19999
.
LNK10405  APPEND    ANS,NK100405                 * load postcode (ST)
          GOTO      LNK19999
.
LNK10406  APPEND    ANS,NK100406                 * load country (ID)
          GOTO      LNK19999
.
LNK10407  APPEND    ANS,NK100407                 * load address type (ID)
          GOTO      LNK19999
.
LNK10408  APPEND    ANS,NK100408                 * load other geog. desig. (ST)
          GOTO      LNK19999
.
LNK10409  APPEND    ANS,NK100409                 * load county (IS)
          GOTO      LNK19999
.
LNK10410  APPEND    ANS,NK100410                 * load census tract (IS)
          GOTO      LNK19999
.
LNK10411  APPEND    ANS,NK100411                 * load address rep code (ID)
          GOTO      LNK19999
.
.         NK1.5 Phone Number - Home (XTN)
.               (maximum of 1 repeat - 2 phone numbers in total)
.
LNK10500  COMPARE   REPTNCNT,TWO                 * maximum repeats reached ?
          GOTO      LNK19999 IF LESS             * yes
.
          BRANCH    COMPCNT,LNK10501:            * text
                            LNK10502:            * telecomm. use code (ID)
                            LNK10503:            * telcomm. equipment type (ID)
                            LNK10504:            * email address (ST)
                            LNK10505:            * country code (NM)
                            LNK10506:            * area/city code (NM)
                            LNK10507:            * phone number (NM)
                            LNK10508:            * extension (NM)
                            LNK10509             * any text (ST)
          GOTO      LNK19999
.
LNK10501  APPEND    ANS,NK100501[REPTNCNT]       * load text
          GOTO      LNK19999
.
LNK10502  APPEND    ANS,NK100502[REPTNCNT]       * load telecomm. use code (ID)
          GOTO      LNK19999
.
LNK10503  APPEND    ANS,NK100503[REPTNCNT]       * load telcomm. equip.type (ID)
          GOTO      LNK19999
.
LNK10504  APPEND    ANS,NK100504[REPTNCNT]       * load email address (ST)
          GOTO      LNK19999
.
LNK10505  APPEND    ANS,NK100505[REPTNCNT]       * load country code (NM)
          GOTO      LNK19999
.
LNK10506  APPEND    ANS,NK100506[REPTNCNT]       * load area/city code (NM)
          GOTO      LNK19999
.
LNK10507  APPEND    ANS,NK100507[REPTNCNT]       * load phone number (NM)
          GOTO      LNK19999
.
LNK10508  APPEND    ANS,NK100508[REPTNCNT]       * load extension (NM)
          GOTO      LNK19999
.
LNK10509  APPEND    ANS,NK100509[REPTNCNT]       * load any text (ST)
          GOTO      LNK19999
.
.         NK1.6 Phone Number - Business (XTN)
.               (maximum of 1 repeat - 2 phone numbers in total)
.
LNK10600  COMPARE   REPTNCNT,TWO                 * maximum repeats reached ?
          GOTO      LNK19999 IF LESS             * yes
.
          BRANCH    COMPCNT,LNK10601:            * text
                            LNK10602:            * telecomm. use code (ID)
                            LNK10603:            * telcomm. equipment type (ID)
                            LNK10604:            * email address (ST)
                            LNK10605:            * country code (NM)
                            LNK10606:            * area/city code (NM)
                            LNK10607:            * phone number (NM)
                            LNK10608:            * extension (NM)
                            LNK10609             * any text (ST)
          GOTO      LNK19999
.
LNK10601  APPEND    ANS,NK100601[REPTNCNT]       * load text
          GOTO      LNK19999
.
LNK10602  APPEND    ANS,NK100602[REPTNCNT]       * load telecomm. use code (ID)
          GOTO      LNK19999
.
LNK10603  APPEND    ANS,NK100603[REPTNCNT]       * load telcomm. equip.type (ID)
          GOTO      LNK19999
.
LNK10604  APPEND    ANS,NK100604[REPTNCNT]       * load email address (ST)
          GOTO      LNK19999
.
LNK10605  APPEND    ANS,NK100605[REPTNCNT]       * load country code (NM)
          GOTO      LNK19999
.
LNK10606  APPEND    ANS,NK100606[REPTNCNT]       * load area/city code (NM)
          GOTO      LNK19999
.
LNK10607  APPEND    ANS,NK100607[REPTNCNT]       * load phone number (NM)
          GOTO      LNK19999
.
LNK10608  APPEND    ANS,NK100608[REPTNCNT]       * load extension (NM)
          GOTO      LNK19999
.
LNK10609  APPEND    ANS,NK100609[REPTNCNT]       * load any text (ST)
          GOTO      LNK19999
.
.         NK1.7 Contact Role (CE)
.
LNK10700  BRANCH    COMPCNT,LNK10701:            * identifier (ST)
                            LNK10702:            * text (ST)
                            LNK10703:            * name of coding system (ST)
                            LNK10704:            * alternate identifier (ST)
                            LNK10705:            * alternate text (ST)
                            LNK10706             * name of alt. cod. system (ST)
          GOTO      LNK19999
.
LNK10701  APPEND    ANS,NK100701                 * load identifier (ST)
          GOTO      LNK19999
.
LNK10702  APPEND    ANS,NK100702                 * load text (ST)
          GOTO      LNK19999
.
LNK10703  APPEND    ANS,NK100703                 * load name of cod. system (ST)
          GOTO      LNK19999
.
LNK10704  APPEND    ANS,NK100704                 * load alt. identifier (ST)
          GOTO      LNK19999
.
LNK10705  APPEND    ANS,NK100705                 * load alternate text (ST)
          GOTO      LNK19999
.
LNK10706  APPEND    ANS,NK100706                 * load alt. cod. sys. name (ST)
          GOTO      LNK19999
.
.         NK1.8 Start Date (DT)
.
LNK10800  BRANCH    COMPCNT,LNK10801
          GOTO      LNK19999
.
LNK10801  APPEND    ANS,NK100801
          GOTO      LNK19999
.
.         NK1.9 End Date (DT)
.
LNK10900  BRANCH    COMPCNT,LNK10901
          GOTO      LNK19999
.
LNK10901  APPEND    ANS,NK100901
          GOTO      LNK19999
.
.         NK1.10 Next of Kin / Associated Parties Job Title (ST)
.
LNK11000  BRANCH    COMPCNT,LNK11001
          GOTO      LNK19999
.
LNK11001  APPEND    ANS,NK101001                 * load title (ST)
          GOTO      LNK19999
.
.         NK1.11 Next of Kin / Associated Parties Job Code/Class (JCC)
.
LNK11100  BRANCH    COMPCNT,LNK11101:            * job code (ST)
                            LNK11102             * job class (IS)
          GOTO      LNK19999
.
LNK11101  APPEND    ANS,NK101101                 * job code (ST)
          GOTO      LNK19999
.
LNK11102  APPEND    ANS,NK101102                 * job class (IS)
          GOTO      LNK19999
.
.         NK1.12 Next of Kin / Associated Parties Employee Number (CX)
.
LNK11200  BRANCH    COMPCNT,LNK11201:            * id (ST)
                            LNK11202:            * check digit (ST)
                            LNK11203:            * check digit scheme code (ID)
                            LNK11204:            * assigning authority (HD)
                            LNK11205:            * identifier type code (IS)
                            LNK11206             * assigning facility (HD)
          GOTO      LNK19999
.
LNK11201  APPEND    ANS,NK101201                 * load id (ST)
          GOTO      LNK19999
.
LNK11202  APPEND    ANS,NK101202                 * load check digit (ST)
          GOTO      LNK19999
.
LNK11203  APPEND    ANS,NK101203                 * load chk dig scheme code (ID)
          GOTO      LNK19999
.
LNK11204  APPEND    ANS,NK101204                 * load assigning authority (HD)
          GOTO      LNK19999
.
LNK11205  APPEND    ANS,NK101205                 * load identifier typ code (IS)
          GOTO      LNK19999
.
LNK11206  APPEND    ANS,NK101206                 * load assigning facility (HD)
          GOTO      LNK19999
.
.         NK1.13 Organisation Name (XON)
.
LNK11300  BRANCH    COMPCNT,LNK11301:            * organisation name (ST)
                            LNK11302:            * org. name type code (IS)
                            LNK11303:            * id number (NM)
                            LNK11304:            * check digit (NM)
                            LNK11305:            * check digit scheme code (ID)
                            LNK11306:            * assigning authority (HD)
                            LNK11307:            * identifier type code (IS)
                            LNK11308:            * assigning facility (HD)
                            LNK11309             * name rep. code (ID)
          GOTO      LNK19999
.
LNK11301  APPEND    ANS,NK101301                 * organisation name (ST)
          GOTO      LNK19999
.
LNK11302  APPEND    ANS,NK101302                 * org. name type code (IS)
          GOTO      LNK19999
.
LNK11303  APPEND    ANS,NK101303                 * id number (NM)
          GOTO      LNK19999
.
LNK11304  APPEND    ANS,NK101304                 * load check digit (ST)
          GOTO      LNK19999
.
LNK11305  APPEND    ANS,NK101305                 * load chk dig scheme code (ID)
          GOTO      LNK19999
.
LNK11306  APPEND    ANS,NK101306                 * load assigning authority (HD)
          GOTO      LNK19999
.
LNK11307  APPEND    ANS,NK101307                 * load identifier typ code (IS)
          GOTO      LNK19999
.
LNK11308  APPEND    ANS,NK101308                 * load assigning facility (HD)
          GOTO      LNK19999
.
LNK11309  APPEND    ANS,NK101309                 * load name rep. code (ID)
          GOTO      LNK19999
.
.         NK1.14 Marital Status (CE)
.
LNK11400  BRANCH    COMPCNT,LNK11401:            * identifier (ST)
                            LNK11402:            * text (ST)
                            LNK11403:            * name of coding system (ST)
                            LNK11404:            * alternate identifier (ST)
                            LNK11405:            * alternate text (ST)
                            LNK11406             * name of alt. cod. system (ST)
          GOTO      LNK19999
.
LNK11401  APPEND    ANS,NK101401                 * load identifier (ST)
          GOTO      LNK19999
.
LNK11402  APPEND    ANS,NK101402                 * load text (ST)
          GOTO      LNK19999
.
LNK11403  APPEND    ANS,NK101403                 * load name of cod. system (ST)
          GOTO      LNK19999
.
LNK11404  APPEND    ANS,NK101404                 * load alt. identifier (ST)
          GOTO      LNK19999
.
LNK11405  APPEND    ANS,NK101405                 * load alternate text (ST)
          GOTO      LNK19999
.
LNK11406  APPEND    ANS,NK101406                 * load alt. cod. sys. name (ST)
          GOTO      LNK19999
.
.         NK1.15 Sex (IS)
.
LNK11500  BRANCH    COMPCNT,LNK11501
          GOTO      LNK19999
.
LNK11501  APPEND    ANS,NK101501
          GOTO      LNK19999
.
.         NK1.16 Date/Time of Birth (TS)
.
LNK11600  BRANCH    COMPCNT,LNK11601
          GOTO      LNK19999
.
LNK11601  APPEND    ANS,NK101601
          GOTO      LNK19999
.
.         NK1.17 Living Dependency (IS)
.
LNK11700  BRANCH    COMPCNT,LNK11701
          GOTO      LNK19999
.
LNK11701  APPEND    ANS,NK101701
          GOTO      LNK19999
.
.         NK1.18 Ambulatory Status (IS)
.
LNK11800  BRANCH    COMPCNT,LNK11801
          GOTO      LNK19999
.
LNK11801  APPEND    ANS,NK101801
          GOTO      LNK19999
.
.         NK1.19 Citizenship (CE)
.
LNK11900  BRANCH    COMPCNT,LNK11901:            * identifier (ST)
                            LNK11902:            * text (ST)
                            LNK11903:            * name of coding system (ST)
                            LNK11904:            * alternate identifier (ST)
                            LNK11905:            * alternate text (ST)
                            LNK11906             * name of alt. cod. system (ST)
          GOTO      LNK19999
.
LNK11901  APPEND    ANS,NK101901                 * load identifier (ST)
          GOTO      LNK19999
.
LNK11902  APPEND    ANS,NK101902                 * load text (ST)
          GOTO      LNK19999
.
LNK11903  APPEND    ANS,NK101903                 * load name of cod. system (ST)
          GOTO      LNK19999
.
LNK11904  APPEND    ANS,NK101904                 * load alt. identifier (ST)
          GOTO      LNK19999
.
LNK11905  APPEND    ANS,NK101905                 * load alternate text (ST)
          GOTO      LNK19999
.
LNK11906  APPEND    ANS,NK101906                 * load alt. cod. sys. name (ST)
          GOTO      LNK19999
.
.         NK1.20 Citizenship (CE)
.
LNK12000  BRANCH    COMPCNT,LNK12001:            * identifier (ST)
                            LNK12002:            * text (ST)
                            LNK12003:            * name of coding system (ST)
                            LNK12004:            * alternate identifier (ST)
                            LNK12005:            * alternate text (ST)
                            LNK12006             * name of alt. cod. system (ST)
          GOTO      LNK19999
.
LNK12001  APPEND    ANS,NK102001                 * load identifier (ST)
          GOTO      LNK19999
.
LNK12002  APPEND    ANS,NK102002                 * load text (ST)
          GOTO      LNK19999
.
LNK12003  APPEND    ANS,NK102003                 * load name of cod. system (ST)
          GOTO      LNK19999
.
LNK12004  APPEND    ANS,NK102004                 * load alt. identifier (ST)
          GOTO      LNK19999
.
LNK12005  APPEND    ANS,NK102005                 * load alternate text (ST)
          GOTO      LNK19999
.
LNK12006  APPEND    ANS,NK102006                 * load alt. cod. sys. name (ST)
          GOTO      LNK19999
.
.         NK1.21 Living Arrangement (IS)
.
LNK12100  BRANCH    COMPCNT,LNK12101
          GOTO      LNK19999
.
LNK12101  APPEND    ANS,NK102101
          GOTO      LNK19999
.
.         NK1.22 Publicity Code (CE)
.
LNK12200  BRANCH    COMPCNT,LNK12201:            * identifier (ST)
                            LNK12202:            * text (ST)
                            LNK12203:            * name of coding system (ST)
                            LNK12204:            * alternate identifier (ST)
                            LNK12205:            * alternate text (ST)
                            LNK12206             * name of alt. cod. system (ST)
          GOTO      LNK19999
.
LNK12201  APPEND    ANS,NK102201                 * load identifier (ST)
          GOTO      LNK19999
.
LNK12202  APPEND    ANS,NK102202                 * load text (ST)
          GOTO      LNK19999
.
LNK12203  APPEND    ANS,NK102203                 * load name of cod. system (ST)
          GOTO      LNK19999
.
LNK12204  APPEND    ANS,NK102204                 * load alt. identifier (ST)
          GOTO      LNK19999
.
LNK12205  APPEND    ANS,NK102205                 * load alternate text (ST)
          GOTO      LNK19999
.
LNK12206  APPEND    ANS,NK102206                 * load alt. cod. sys. name (ST)
          GOTO      LNK19999
.
.         NK1.23 Protection Indicator (ID)
.
LNK12300  BRANCH    COMPCNT,LNK12301
          GOTO      LNK19999
.
LNK12301  APPEND    ANS,NK102301
          GOTO      LNK19999
.
.         NK1.24 Student Indicator (IS)
.
LNK12400  BRANCH    COMPCNT,LNK12401
          GOTO      LNK19999
.
LNK12401  APPEND    ANS,NK102401
          GOTO      LNK19999
.
.         NK1.25 Religion (CE)
.
LNK12500  BRANCH    COMPCNT,LNK12501:            * identifier (ST)
                            LNK12502:            * text (ST)
                            LNK12503:            * name of coding system (ST)
                            LNK12504:            * alternate identifier (ST)
                            LNK12505:            * alternate text (ST)
                            LNK12506             * name of alt. cod. system (ST)
          GOTO      LNK19999
.
LNK12501  APPEND    ANS,NK102501                 * load identifier (ST)
          GOTO      LNK19999
.
LNK12502  APPEND    ANS,NK102502                 * load text (ST)
          GOTO      LNK19999
.
LNK12503  APPEND    ANS,NK102503                 * load name of cod. system (ST)
          GOTO      LNK19999
.
LNK12504  APPEND    ANS,NK102504                 * load alt. identifier (ST)
          GOTO      LNK19999
.
LNK12505  APPEND    ANS,NK102505                 * load alternate text (ST)
          GOTO      LNK19999
.
LNK12506  APPEND    ANS,NK102506                 * load alt. cod. sys. name (ST)
          GOTO      LNK19999
.
.         NK1.26 Mother's Maiden Name (XPN)
.
LNK12600  BRANCH    COMPCNT,LNK12601:            * family name (ST)
                            LNK12602:            * given name (ST)
                            LNK12603:            * middle name (ST)
                            LNK12604:            * suffix (ST)
                            LNK12605:            * prefix (ST)
                            LNK12606:            * degree (IS)
                            LNK12607:            * name type code (ID)
                            LNK12608             * name representation code (ID)
          GOTO      LNK19999
.
LNK12601  APPEND    ANS,NK102601                 * load family name (ST)
          GOTO      LNK19999
.
LNK12602  APPEND    ANS,NK102602                 * load given name (ST)
          GOTO      LNK19999
.
LNK12603  APPEND    ANS,NK102603                 * load middle name (ST)
          GOTO      LNK19999
.
LNK12604  APPEND    ANS,NK102604                 * load suffix (ST)
          GOTO      LNK19999
.
LNK12605  APPEND    ANS,NK102605                 * load prefix (ST)
          GOTO      LNK19999
.
LNK12606  APPEND    ANS,NK102606                 * load degree (IS)
          GOTO      LNK19999
.
LNK12607  APPEND    ANS,NK102607                 * load name type code (ID)
          GOTO      LNK19999
.
LNK12608  APPEND    ANS,NK102608                 * load name rep. code (ID)
          GOTO      LNK19999
.
.         NK1.27 Nationality (CE)
.
LNK12700  BRANCH    COMPCNT,LNK12701:            * identifier (ST)
                            LNK12702:            * text (ST)
                            LNK12703:            * name of coding system (ST)
                            LNK12704:            * alternate identifier (ST)
                            LNK12705:            * alternate text (ST)
                            LNK12706             * name of alt. cod. system (ST)
          GOTO      LNK19999
.
LNK12701  APPEND    ANS,NK102701                 * load identifier (ST)
          GOTO      LNK19999
.
LNK12702  APPEND    ANS,NK102702                 * load text (ST)
          GOTO      LNK19999
.
LNK12703  APPEND    ANS,NK102703                 * load name of cod. system (ST)
          GOTO      LNK19999
.
LNK12704  APPEND    ANS,NK102704                 * load alt. identifier (ST)
          GOTO      LNK19999
.
LNK12705  APPEND    ANS,NK102705                 * load alternate text (ST)
          GOTO      LNK19999
.
LNK12706  APPEND    ANS,NK102706                 * load alt. cod. sys. name (ST)
          GOTO      LNK19999
.
.         NK1.28 Ethnic Group (CE)
.
LNK12800  BRANCH    COMPCNT,LNK12801:            * identifier (ST)
                            LNK12802:            * text (ST)
                            LNK12803:            * name of coding system (ST)
                            LNK12804:            * alternate identifier (ST)
                            LNK12805:            * alternate text (ST)
                            LNK12806             * name of alt. cod. system (ST)
          GOTO      LNK19999
.
LNK12801  APPEND    ANS,NK102801                 * load identifier (ST)
          GOTO      LNK19999
.
LNK12802  APPEND    ANS,NK102802                 * load text (ST)
          GOTO      LNK19999
.
LNK12803  APPEND    ANS,NK102803                 * load name of cod. system (ST)
          GOTO      LNK19999
.
LNK12804  APPEND    ANS,NK102804                 * load alt. identifier (ST)
          GOTO      LNK19999
.
LNK12805  APPEND    ANS,NK102805                 * load alternate text (ST)
          GOTO      LNK19999
.
LNK12806  APPEND    ANS,NK102806                 * load alt. cod. sys. name (ST)
          GOTO      LNK19999
.
.         NK1.29 Contact Reason (CE)
.                 (maximum of 1 repeat - 2 reasons in total)
.
LNK12900  COMPARE   REPTNCNT,TWO                 * maximum repeats reached ?
          GOTO      LNK19999 IF LESS             * yes
.
          BRANCH    COMPCNT,LNK12901:            * identifier (ST)
                            LNK12902:            * text (ST)
                            LNK12903:            * name of coding system (ST)
                            LNK12904:            * alternate identifier (ST)
                            LNK12905:            * alternate text (ST)
                            LNK12906             * name of alt. cod. system (ST)
          GOTO      LNK19999
.
LNK12901  APPEND    ANS,NK102901[REPTNCNT]       * load identifier (ST)
          GOTO      LNK19999
.
LNK12902  APPEND    ANS,NK102902[REPTNCNT]       * load text (ST)
          GOTO      LNK19999
.
LNK12903  APPEND    ANS,NK102903[REPTNCNT]       * load name of cod. system (ST)
          GOTO      LNK19999
.
LNK12904  APPEND    ANS,NK102904[REPTNCNT]       * load alt. identifier (ST)
          GOTO      LNK19999
.
LNK12905  APPEND    ANS,NK102905[REPTNCNT]       * load alternate text (ST)
          GOTO      LNK19999
.
LNK12906  APPEND    ANS,NK102906[REPTNCNT]       * load alt. cod. sys. name (ST)
          GOTO      LNK19999
.
.         NK1.30 Contact Person's Name (XPN)
.
LNK13000  BRANCH    COMPCNT,LNK13001:            * family name (ST)
                            LNK13002:            * given name (ST)
                            LNK13003:            * middle name (ST)
                            LNK13004:            * suffix (ST)
                            LNK13005:            * prefix (ST)
                            LNK13006:            * degree (IS)
                            LNK13007:            * name type code (ID)
                            LNK13008             * name representation code (ID)
          GOTO      LNK19999
.
LNK13001  APPEND    ANS,NK103001                 * load family name (ST)
          GOTO      LNK19999
.
LNK13002  APPEND    ANS,NK103002                 * load given name (ST)
          GOTO      LNK19999
.
LNK13003  APPEND    ANS,NK103003                 * load middle name (ST)
          GOTO      LNK19999
.
LNK13004  APPEND    ANS,NK103004                 * load suffix (ST)
          GOTO      LNK19999
.
LNK13005  APPEND    ANS,NK103005                 * load prefix (ST)
          GOTO      LNK19999
.
LNK13006  APPEND    ANS,NK103006                 * load degree (IS)
          GOTO      LNK19999
.
LNK13007  APPEND    ANS,NK103007                 * load name type code (ID)
          GOTO      LNK19999
.
LNK13008  APPEND    ANS,NK103008                 * load name rep. code (ID)
          GOTO      LNK19999
.
.         NK1.31 Contact Person's Telephone Number (XTN)
.                 (maximum of 2 repeats - 3 phone numbers in total)
.
LNK13100  COMPARE   REPTNCNT,THREE               * maximum repeats reached ?
          GOTO      LNK19999 IF LESS             * yes
.
          BRANCH    COMPCNT,LNK13101:            * text
                            LNK13102:            * telecomm. use code (ID)
                            LNK13103:            * telcomm. equipment type (ID)
                            LNK13104:            * email address (ST)
                            LNK13105:            * country code (NM)
                            LNK13106:            * area/city code (NM)
                            LNK13107:            * phone number (NM)
                            LNK13108:            * extension (NM)
                            LNK13109             * any text (ST)
          GOTO      LNK19999
.
LNK13101  APPEND    ANS,NK103101[REPTNCNT]       * load text
          GOTO      LNK19999
.
LNK13102  APPEND    ANS,NK103102[REPTNCNT]       * load telecomm. use code (ID)
          GOTO      LNK19999
.
LNK13103  APPEND    ANS,NK103103[REPTNCNT]       * load telcomm. equip.type (ID)
          GOTO      LNK19999
.
LNK13104  APPEND    ANS,NK103104[REPTNCNT]       * load email address (ST)
          GOTO      LNK19999
.
LNK13105  APPEND    ANS,NK103105[REPTNCNT]       * load country code (NM)
          GOTO      LNK19999
.
LNK13106  APPEND    ANS,NK103106[REPTNCNT]       * load area/city code (NM)
          GOTO      LNK19999
.
LNK13107  APPEND    ANS,NK103107[REPTNCNT]       * load phone number (NM)
          GOTO      LNK19999
.
LNK13108  APPEND    ANS,NK103108[REPTNCNT]       * load extension (NM)
          GOTO      LNK19999
.
LNK13109  APPEND    ANS,NK103109[REPTNCNT]       * load any text (ST)
          GOTO      LNK19999
.
.         NK1.32 Contact Person's Address (XAD)
.
LNK13200  BRANCH    COMPCNT,LNK13201:            * street address (ST)
                            LNK13202:            * other designation (ST)
                            LNK13203:            * city (ST)
                            LNK13204:            * state (ST)
                            LNK13205:            * postcode (ST)
                            LNK13206:            * country (ID)
                            LNK13207:            * address type (ID)
                            LNK13208:            * other geographic desig. (ST)
                            LNK13209:            * county (IS)
                            LNK13210:            * census tract (IS)
                            LNK13211             * address rep. code (ID)
          GOTO      LNK19999
.
LNK13201  APPEND    ANS,NK103201                 * load street address (ST)
          GOTO      LNK19999
.
LNK13202  APPEND    ANS,NK103202                 * load other designation (ST)
          GOTO      LNK19999
.
LNK13203  APPEND    ANS,NK103203                 * load city (ST)
          GOTO      LNK19999
.
LNK13204  APPEND    ANS,NK103204                 * load state (ST)
          GOTO      LNK19999
.
LNK13205  APPEND    ANS,NK103205                 * load postcode (ST)
          GOTO      LNK19999
.
LNK13206  APPEND    ANS,NK103206                 * load country (ID)
          GOTO      LNK19999
.
LNK13207  APPEND    ANS,NK103207                 * load address type (ID)
          GOTO      LNK19999
.
LNK13208  APPEND    ANS,NK103208                 * load other geog. desig. (ST)
          GOTO      LNK19999
.
LNK13209  APPEND    ANS,NK103209                 * load county (IS)
          GOTO      LNK19999
.
LNK13210  APPEND    ANS,NK103210                 * load census tract (IS)
          GOTO      LNK19999
.
LNK13211  APPEND    ANS,NK103211                 * load address rep code (ID)
          GOTO      LNK19999
.
.         NK1.33 Next of Kin / Associated Party's Identifiers (CX)
.
LNK13300  BRANCH    COMPCNT,LNK13301:            * id (ST)
                            LNK13302:            * check digit (ST)
                            LNK13303:            * check digit scheme code (ID)
                            LNK13304:            * assigning authority (HD)
                            LNK13305:            * identifier type code (IS)
                            LNK13306             * assigning facility (HD)
          GOTO      LNK19999
.
LNK13301  APPEND    ANS,NK103301                 * load id (ST)
          GOTO      LNK19999
.
LNK13302  APPEND    ANS,NK103302                 * load check digit (ST)
          GOTO      LNK19999
.
LNK13303  APPEND    ANS,NK103303                 * load chk dig scheme code (ID)
          GOTO      LNK19999
.
LNK13304  APPEND    ANS,NK103304                 * load assigning authority (HD)
          GOTO      LNK19999
.
LNK13305  APPEND    ANS,NK103305                 * load identifier typ code (IS)
          GOTO      LNK19999
.
LNK13306  APPEND    ANS,NK103306                 * load assigning facility (HD)
          GOTO      LNK19999
.
.         NK1.34 Job Status (IS)
.
LNK13400  BRANCH    COMPCNT,LNK13401
          GOTO      LNK19999
.
LNK13401  APPEND    ANS,NK103401
          GOTO      LNK19999
.
.         NK1.35 Race (CE)
.
LNK13500  BRANCH    COMPCNT,LNK13501:            * identifier (ST)
                            LNK13502:            * text (ST)
                            LNK13503:            * name of coding system (ST)
                            LNK13504:            * alternate identifier (ST)
                            LNK13505:            * alternate text (ST)
                            LNK13506             * name of alt. cod. system (ST)
          GOTO      LNK19999
.
LNK13501  APPEND    ANS,NK103501                 * load identifier (ST)
          GOTO      LNK19999
.
LNK13502  APPEND    ANS,NK103502                 * load text (ST)
          GOTO      LNK19999
.
LNK13503  APPEND    ANS,NK103503                 * load name of cod. system (ST)
          GOTO      LNK19999
.
LNK13504  APPEND    ANS,NK103504                 * load alt. identifier (ST)
          GOTO      LNK19999
.
LNK13505  APPEND    ANS,NK103505                 * load alternate text (ST)
          GOTO      LNK19999
.
LNK13506  APPEND    ANS,NK103506                 * load alt. cod. sys. name (ST)
          GOTO      LNK19999
.
.         NK1.36 Handicap (IS)
.
LNK13600  BRANCH    COMPCNT,LNK13601
          GOTO      LNK19999
.
LNK13601  APPEND    ANS,NK103601
          GOTO      LNK19999
.
.         NK1.37 Contact Person Social Security Number (ST)
.
LNK13700  BRANCH    COMPCNT,LNK13701
          GOTO      LNK19999
.
LNK13701  APPEND    ANS,NK103701
          GOTO      LNK19999
.
LNK19999  RETURN
+
.*****************************************************************************
.*                                 LZXP0000                                  *
.*                          Load the ZXP fields                              *
.*****************************************************************************
LZXP0000  BRANCH    FIELDNO,LZXP0100:            * Pension No. Expiry Date
                            LZXP0200             * Medicare Expiry Date
.
.         Invalid ZXP field received, so ignore it
.
          GOTO      LZXP9999
.
.         ZXP.1  Pension No. Expiry Date (DT)
.
LZXP0100  BRANCH    COMPCNT,LZXP0101
          GOTO      LZXP9999
.
LZXP0101  APPEND    ANS,ZXP00101
          GOTO      LZXP9999
.
.         ZXP.2  Medicare Expiry Date (DT)
.
LZXP0200  BRANCH    COMPCNT,LZXP0201
          GOTO      LZXP9999
.
LZXP0201  APPEND    ANS,ZXP00201
          GOTO      LZXP9999
.
LZXP9999  RETURN
+
.*****************************************************************************
.*                                 LQRD0000                                  *
.*                          Load the QRD fields                              *
.*****************************************************************************
.
LQRD0000  BRANCH    FIELDNO,LQRD0100:            * Query Date/Time
                            LQRD0200:            * Query Format Code
                            LQRD0300:            * Query Priority
                            LQRD0400:            * Query ID
                            LQRD0500:            * Deferred Response Type
                            LQRD0600:            * Deferred Response Date/Time
                            LQRD0700:            * Quantity Limited Request
                            LQRD0800:            * Who Subject Filter
                            LQRD0900:            * What Subject Filter
                            LQRD1000:            * What Department Data Code
                            LQRD1100:            * What Data Code Value Qual.
                            LQRD1200             * Query Results Level
.
.         Invalid QRD field received, so ignore it
.
          GOTO      LQRD9999
.
.         QRD-01  Query Date/Time (TS)
.
LQRD0100  BRANCH    COMPCNT,LQRD0101
          GOTO      LQRD9000
.
LQRD0101  APPEND    ANS,QRD00101
          GOTO      LQRD9000
.
.         QRD-02  Query Format Code (ID)
.
LQRD0200  BRANCH    COMPCNT,LQRD0201
          GOTO      LQRD9000
.
LQRD0201  APPEND    ANS,QRD00201
          GOTO      LQRD9000
.
.         QRD-03  Query Priority (ID)
.
LQRD0300  BRANCH    COMPCNT,LQRD0301
          GOTO      LQRD9000
.
LQRD0301  APPEND    ANS,QRD00301
          GOTO      LQRD9000
.
.         QRD-04  Query ID (ST)
.
LQRD0400  BRANCH    COMPCNT,LQRD0401
          GOTO      LQRD9000
.
LQRD0401  APPEND    ANS,QRD00401
          GOTO      LQRD9000
.
.         QRD-05  Deferred Response Type (ID)
.
LQRD0500  BRANCH    COMPCNT,LQRD0501
          GOTO      LQRD9000
.
LQRD0501  APPEND    ANS,QRD00501
          GOTO      LQRD9000
.
.         QRD-06  Deferred Response Date/Time (TS)
.
LQRD0600  BRANCH    COMPCNT,LQRD0601
          GOTO      LQRD9000
.
LQRD0601  APPEND    ANS,QRD00601
          GOTO      LQRD9000
.
.         QRD-07 Quantity Limited Request (CQ)
.
LQRD0700  BRANCH    COMPCNT,LQRD0701:            * quantity (NM)
                            LQRD0702             * units (CE)
          GOTO      LQRD9000
.
LQRD0701  APPEND    ANS,QRD00701                 * quantity (NM)
          GOTO      LQRD9000
.
LQRD0702  APPEND    ANS,QRD00702                 * units (CE)
          GOTO      LQRD9000
.
.         QRD-08 Who Subject Filter (XCN)
.
LQRD0800  BRANCH    COMPCNT,LQRD0801:            * ID number (ST)
                            LQRD0802:            * family name (ST)
                            LQRD0803:            * given name (ST)
                            LQRD0804:            * middle name (ST)
                            LQRD0805:            * suffix (ST)
                            LQRD0806:            * prefix (ST)
                            LQRD0807:            * degree (IS)
                            LQRD0808:            * source table (IS)
                            LQRD0809:            * assigning authority (HD)
                            LQRD0810:            * name type code (ID)
                            LQRD0811:            * identifier check digit (ST)
                            LQRD0812:            * check digit scheme (ID)
                            LQRD0813:            * identifier type code (IS)
                            LQRD0814:            * assigning facility (HD)
                            LQRD0815             * name representation code (ID)
          GOTO      LQRD9000
.
LQRD0801  APPEND    ANS,QRD00801                 * ID number (NM)
          GOTO      LQRD9000
.
LQRD0802  APPEND    ANS,QRD00802                 * family name (ST)
          GOTO      LQRD9000
.
LQRD0803  APPEND    ANS,QRD00803                 * given name (ST)
          GOTO      LQRD9000
.
LQRD0804  APPEND    ANS,QRD00804                 * middle name (ST)
          GOTO      LQRD9000
.
LQRD0805  APPEND    ANS,QRD00805                 * suffix (ST)
          GOTO      LQRD9000
.
LQRD0806  APPEND    ANS,QRD00806                 * prefix (ST)
          GOTO      LQRD9000
.
LQRD0807  APPEND    ANS,QRD00807                 * degree (IS)
          GOTO      LQRD9000
.
LQRD0808  APPEND    ANS,QRD00808                 * source table (IS)
          GOTO      LQRD9000
.
LQRD0809  APPEND    ANS,QRD00809                 * assigning authority (HD)
          GOTO      LQRD9000
.
LQRD0810  APPEND    ANS,QRD00810                 * name type code (ID)
          GOTO      LQRD9000
.
LQRD0811  APPEND    ANS,QRD00811                 * identifier check digit (ST)
          GOTO      LQRD9000
.
LQRD0812  APPEND    ANS,QRD00812                 * check digit scheme (ID)
          GOTO      LQRD9000
.
LQRD0813  APPEND    ANS,QRD00813                 * identifier type code (IS)
          GOTO      LQRD9000
.
LQRD0814  APPEND    ANS,QRD00814                 * assigning facility (HD)
          GOTO      LQRD9000
.
LQRD0815  APPEND    ANS,QRD00815                 * name representation code (ID)
          GOTO      LQRD9000
.
.         QRD-09 What Subject Filter (CE)
.
LQRD0900  BRANCH    COMPCNT,LQRD0901:            * identifier (ID)
                            LQRD0902:            * text (ST)
                            LQRD0903:            * name of coding system (ST)
                            LQRD0904:            * alternate identifier (ID)
                            LQRD0905:            * alternate text (ST)
                            LQRD0906             * name alt. coding system (ST)
          GOTO      LQRD9000
.
LQRD0901  APPEND    ANS,QRD00901                 * identifier (ID)
          GOTO      LQRD9000
.
LQRD0902  APPEND    ANS,QRD00902                 * text (ST)
          GOTO      LQRD9000
.
LQRD0903  APPEND    ANS,QRD00903                 * name of coding system (ST)
          GOTO      LQRD9000
.
LQRD0904  APPEND    ANS,QRD00904                 * alternate identifier (ID)
          GOTO      LQRD9000
.
LQRD0905  APPEND    ANS,QRD00905                 * alternate text (ST)
          GOTO      LQRD9000
.
LQRD0906  APPEND    ANS,QRD00906                 * name alt. coding system (ST)
          GOTO      LQRD9000
.
.         QRD-10 What Department Date Code (CE)
.
LQRD1000  BRANCH    COMPCNT,LQRD1001:            * identifier (ID)
                            LQRD1002:            * text (ST)
                            LQRD1003:            * name of coding system (ST)
                            LQRD1004:            * alternate identifier (ID)
                            LQRD1005:            * alternate text (ST)
                            LQRD1006             * name alt. coding system (ST)
          GOTO      LQRD9000
.
LQRD1001  APPEND    ANS,QRD01001                 * identifier (ID)
          GOTO      LQRD9000
.
LQRD1002  APPEND    ANS,QRD01002                 * text (ST)
          GOTO      LQRD9000
.
LQRD1003  APPEND    ANS,QRD01003                 * name of coding system (ST)
          GOTO      LQRD9000
.
LQRD1004  APPEND    ANS,QRD01004                 * alternate identifier (ID)
          GOTO      LQRD9000
.
LQRD1005  APPEND    ANS,QRD01005                 * alternate text (ST)
          GOTO      LQRD9000
.
LQRD1006  APPEND    ANS,QRD01006                 * name alt. coding system (ST)
          GOTO      LQRD9000
.
.         QRD-11 What Data Code Value Qual .(CM)
.
LQRD1100  BRANCH    COMPCNT,LQRD1101:            * first data code value (ST)
                            LQRD1102             * last data code value (ST)
          GOTO      LQRD9000
.
LQRD1101  APPEND    ANS,QRD01101                 * first data code value (ST)
          GOTO      LQRD9000
.
LQRD1102  APPEND    ANS,QRD01102                 * last data code value (ST)
          GOTO      LQRD9000
.
.         QRD-12  Query Results Level (ID)
.
LQRD1200  BRANCH    COMPCNT,LQRD1201
          GOTO      LQRD9000
.
LQRD1201  APPEND    ANS,QRD01201
          GOTO      LQRD9000
.
LQRD9000  
.dav1     MOVE      FIELDNO,LASTA19F
.
LQRD9999  RETURN
+
.*****************************************************************************
.*                                 LPID0000                                  *
.*                          Load the PID fields                              *
.*****************************************************************************
.
LPID0000  BRANCH    FIELDNO,LPID0100:            * Set ID - Patient ID
                            LPID0200:            * Patient ID (External)
                            LPID0300:            * Patient ID (Internal)
                            LPID0400:            * Alternate Patient ID
                            LPID0500:            * Patient Name
                            LPID0600:            * Mother's Maiden name
                            LPID0700:            * Date/Time of Birth
                            LPID0800:            * Gender
                            LPID0900:            * Patient Alias
                            LPID1000:            * Race
                            LPID1100:            * Patient Address Information
                            LPID1200:            * County Code
                            LPID1300:            * Contact Information
                            LPID1400:            * Contact Information
                            LPID1500:            * Language Spoken
                            LPID1600:            * Marital Status
                            LPID1700:            * Religion
                            LPID1800:            * Patient Account Number
                            LPID1900:            * SSN Number - Patient
                            LPID2000:            * Driver's License No - Patient
                            LPID2100:            * Mother's Identifier
                            LPID2200:            * Ethnic Group
                            LPID2300:            * Place of Birth
                            LPID2400:            * Multiple Birth Indicator
                            LPID2500:            * Birth Order
                            LPID2600:            * Citizenship
                            LPID2700:            * Veterans Military Status
                            LPID2800:            * Nationality
                            LPID2900:            * Patient Death Date/Time
                            LPID3000:            * Patient Death Indicator
                            LPID3100:            * Identity unknown indicator
                            LPID3200:            * Identity reliability code
                            LPID3300             * Last update date/time
.
.         Invalid PID field received, so ignore it
.
          GOTO      LPID9999
.
.         PID.1 Set ID (SI)
.
LPID0100  BRANCH    COMPCNT,LPID0101
          GOTO      LPID9999
.
LPID0101  APPEND    ANS,PID00101
          GOTO      LPID9999
.
.         PID.2 Patient ID (CX)
.
LPID0200  BRANCH    COMPCNT,LPID0201:            * id (ST)
                            LPID0202:            * check digit (ST)
                            LPID0203:            * check digit code scheme (ID)
                            LPID0204:            * assigning authority (HD)
                            LPID0205:            * identifier type code (IS)
                            LPID0206             * assigning facility (HD)
          GOTO      LPID9999
.
LPID0201  APPEND    ANS,PID00201                 * load id (ST)
          GOTO      LPID9999
.
LPID0202  APPEND    ANS,PID00202                 * load check digit (ST)
          GOTO      LPID9999
.
LPID0203  APPEND    ANS,PID00203                 * load check digit scheme (ID)
          GOTO      LPID9999
.
LPID0204  APPEND    ANS,PID00204                 * load assigning authority (HD)
          GOTO      LPID9999
.
LPID0205  APPEND    ANS,PID00205                 * load ident. type code (IS)
          GOTO      LPID9999
.
LPID0206  APPEND    ANS,PID00206                 * load assigning facility (HD)
          GOTO      LPID9999
.
.         PID.3 Patient Identifier List (CX)
.                 (maximum of 4 repeats - 5 identifiers in total)
.
LPID0300  COMPARE   REPTNCNT,FIVE                * maximum repeats reached ?
          GOTO      LPID9999 IF LESS             * yes
.
          BRANCH    COMPCNT,LPID0301:            * id (ST)
                            LPID0302:            * check digit (ST)
                            LPID0303:            * check digit code scheme (ID)
                            LPID0304:            * assigning authority (HD)
                            LPID0305:            * identifier type code (IS)
                            LPID0306             * assigning facility (HD)
          GOTO      LPID9999
.
LPID0301  APPEND    ANS,PID00301[REPTNCNT]       * load id (ST)
          GOTO      LPID9999
.
LPID0302  APPEND    ANS,PID00302[REPTNCNT]       * load check digit (ST)
          GOTO      LPID9999
.
LPID0303  APPEND    ANS,PID00303[REPTNCNT]       * load check digit scheme (ID)
          GOTO      LPID9999
.
LPID0304  APPEND    ANS,PID00304[REPTNCNT]       * load assigning authority (HD)
          GOTO      LPID9999
.
LPID0305  APPEND    ANS,PID00305[REPTNCNT]       * load ident. type code (IS)
          GOTO      LPID9999
.
LPID0306  APPEND    ANS,PID00306[REPTNCNT]       * load assigning facility (HD)
          GOTO      LPID9999
.
.         PID.4 Alternate Patient ID (CX)
.
LPID0400  BRANCH    COMPCNT,LPID0401:            * id (ST)
                            LPID0402:            * check digit (ST)
                            LPID0403:            * check digit code scheme (ID)
                            LPID0404:            * assigning authority (HD)
                            LPID0405:            * identifier type code (IS)
                            LPID0406             * assigning facility (HD)
          GOTO      LPID9999
.
LPID0401  APPEND    ANS,PID00401                 * load id (ST)
          GOTO      LPID9999
.
LPID0402  APPEND    ANS,PID00402                 * load check digit (ST)
          GOTO      LPID9999
.
LPID0403  APPEND    ANS,PID00403                 * load check digit scheme (ID)
          GOTO      LPID9999
.
LPID0404  APPEND    ANS,PID00404                 * load assigning authority (HD)
          GOTO      LPID9999
.
LPID0405  APPEND    ANS,PID00405                 * load ident. type code (IS)
          GOTO      LPID9999
.
LPID0406  APPEND    ANS,PID00406                 * load assigning facility (HD)
          GOTO      LPID9999
.
.         PID.5 Patient Name (XPN)
.
LPID0500  BRANCH    COMPCNT,LPID0501:            * family name (ST)
                            LPID0502:            * given name (ST)
                            LPID0503:            * middle name (ST)
                            LPID0504:            * suffix (ST)
                            LPID0505:            * prefix (ST)
                            LPID0506:            * degree (IS)
                            LPID0507:            * name type code (ID)
                            LPID0508             * name representation code (ID)
          GOTO      LPID9999
.
LPID0501  APPEND    ANS,PID00501                 * load family name (ST)
          GOTO      LPID9999
.
LPID0502  APPEND    ANS,PID00502                 * load given name (ST)
          GOTO      LPID9999
.
LPID0503  APPEND    ANS,PID00503                 * load middle name (ST)
          GOTO      LPID9999
.
LPID0504  APPEND    ANS,PID00504                 * load suffix (ST)
          GOTO      LPID9999
.
LPID0505  APPEND    ANS,PID00505                 * load prefix (ST)
          GOTO      LPID9999
.
LPID0506  APPEND    ANS,PID00506                 * load degree (IS)
          GOTO      LPID9999
.
LPID0507  APPEND    ANS,PID00507                 * load name type code (ID)
          GOTO      LPID9999
.
LPID0508  APPEND    ANS,PID00508                 * load name rep. code (ID)
          GOTO      LPID9999
.
.         PID.6 Mother's Maiden Name (XPN)
.
LPID0600  BRANCH    COMPCNT,LPID0601:            * family name (ST)
                            LPID0602:            * given name (ST)
                            LPID0603:            * middle name (ST)
                            LPID0604:            * suffix (ST)
                            LPID0605:            * prefix (ST)
                            LPID0606:            * degree (IS)
                            LPID0607:            * name type code (ID)
                            LPID0608             * name representation code (ID)
          GOTO      LPID9999
.
LPID0601  APPEND    ANS,PID00601                 * load family name (ST)
          GOTO      LPID9999
.
LPID0602  APPEND    ANS,PID00602                 * load given name (ST)
          GOTO      LPID9999
.
LPID0603  APPEND    ANS,PID00603                 * load middle name (ST)
          GOTO      LPID9999
.
LPID0604  APPEND    ANS,PID00604                 * load suffix (ST)
          GOTO      LPID9999
.
LPID0605  APPEND    ANS,PID00605                 * load prefix (ST)
          GOTO      LPID9999
.
LPID0606  APPEND    ANS,PID00606                 * load degree (IS)
          GOTO      LPID9999
.
LPID0607  APPEND    ANS,PID00607                 * load name type code (ID)
          GOTO      LPID9999
.
LPID0608  APPEND    ANS,PID00608                 * load name rep. code (ID)
          GOTO      LPID9999
.
.         PID.7 Date/Time for Birth (TS)
.
LPID0700  BRANCH    COMPCNT,LPID0701
          GOTO      LPID9999
.
LPID0701  APPEND    ANS,PID00701
          GOTO      LPID9999
.
.         PID.8 Sex (IS)
.
LPID0800  BRANCH    COMPCNT,LPID0801
          GOTO      LPID9999
.
LPID0801  APPEND    ANS,PID00801
          GOTO      LPID9999
.
.         PID.9 Patient Alias (XPN)
.                 (maximum of 79 repeats - 80 aliases in total)
.
LPID0900  COMPARE   REPTNCNT,EIGHTY              * maximum repeats reached ?
          GOTO      LPID9999 IF LESS             * yes
.
          BRANCH    COMPCNT,LPID0901:            * family name (ST)
                            LPID0902:            * given name (ST)
                            LPID0903:            * middle name (ST)
                            LPID0904:            * suffix (ST)
                            LPID0905:            * prefix (ST)
                            LPID0906:            * degree (IS)
                            LPID0907:            * name type code (ID)
                            LPID0908             * name representation code (ID)
          GOTO      LPID9999
.
LPID0901  APPEND    ANS,PID00901[REPTNCNT]       * load family name (ST)
          GOTO      LPID9999
.
LPID0902  APPEND    ANS,PID00902[REPTNCNT]       * load given name (ST)
          GOTO      LPID9999
.
LPID0903  APPEND    ANS,PID00903[REPTNCNT]       * load middle name (ST)
          GOTO      LPID9999
.
LPID0904  APPEND    ANS,PID00904[REPTNCNT]       * load suffix (ST)
          GOTO      LPID9999
.
LPID0905  APPEND    ANS,PID00905[REPTNCNT]       * load prefix (ST)
          GOTO      LPID9999
.
LPID0906  APPEND    ANS,PID00906[REPTNCNT]       * load degree (IS)
          GOTO      LPID9999
.
LPID0907  APPEND    ANS,PID00907[REPTNCNT]       * load name type code (ID)
          GOTO      LPID9999
.
LPID0908  APPEND    ANS,PID00908[REPTNCNT]       * load name rep. code (ID)
          GOTO      LPID9999
.
.         PID.10 Race (CE)
.
LPID1000  BRANCH    COMPCNT,LPID1001:            * identifier (ST)
                            LPID1002:            * text (ST)
                            LPID1003:            * name of coding system (ST)
                            LPID1004:            * alternate identifier (ST)
                            LPID1005:            * alternate text (ST)
                            LPID1006             * name alt. coding system (ST)
          GOTO      LPID9999
.
LPID1001  APPEND    ANS,PID01001                 * load identifier (ST)
          GOTO      LPID9999
.
LPID1002  APPEND    ANS,PID01002                 * load text (ST)
          GOTO      LPID9999
.
LPID1003  APPEND    ANS,PID01003                 * load name coding system (ST)
          GOTO      LPID9999
.
LPID1004  APPEND    ANS,PID01004                 * load alt. identifier (ST)
          GOTO      LPID9999
.
LPID1005  APPEND    ANS,PID01005                 * load alternate text (ST)
          GOTO      LPID9999
.
LPID1006  APPEND    ANS,PID01006                 * load name alt. cod. sys (HD)
          GOTO      LPID9999
.
.         PID.11 Patient Address (XAD)
.                (maximum of 1 repeat - 2 addresses in total)
.
LPID1100  COMPARE   REPTNCNT,TWO                 * maximum repeats reached ?
          GOTO      LPID9999 IF LESS             * yes
.
          BRANCH    COMPCNT,LPID1101:            * street address (ST)
                            LPID1102:            * other designation (ST)
                            LPID1103:            * city (ST)
                            LPID1104:            * state (ST)
                            LPID1105:            * postcode (ST)
                            LPID1106:            * country (ID)
                            LPID1107:            * address type (ID)
                            LPID1108:            * other geographic desig. (ST)
                            LPID1109:            * county (IS)
                            LPID1110:            * census tract (IS)
                            LPID1111             * address rep. code (ID)
          GOTO      LPID9999
.
LPID1101  APPEND    ANS,PID01101[REPTNCNT]       * load street address (ST)
          GOTO      LPID9999
.
LPID1102  APPEND    ANS,PID01102[REPTNCNT]       * load other designation (ST)
          GOTO      LPID9999
.
LPID1103  APPEND    ANS,PID01103[REPTNCNT]       * load city (ST)
          GOTO      LPID9999
.
LPID1104  APPEND    ANS,PID01104[REPTNCNT]       * load state (ST)
          GOTO      LPID9999
.
LPID1105  APPEND    ANS,PID01105[REPTNCNT]       * load postcode (ST)
          GOTO      LPID9999
.
LPID1106  APPEND    ANS,PID01106[REPTNCNT]       * load country (ID)
          GOTO      LPID9999
.
LPID1107  APPEND    ANS,PID01107[REPTNCNT]       * load address type (ID)
          GOTO      LPID9999
.
LPID1108  APPEND    ANS,PID01108[REPTNCNT]       * load other geog. desig. (ST)
          GOTO      LPID9999
.
LPID1109  APPEND    ANS,PID01109[REPTNCNT]       * load county (IS)
          GOTO      LPID9999
.
LPID1110  APPEND    ANS,PID01110[REPTNCNT]       * load census tract (IS)
          GOTO      LPID9999
.
LPID1111  APPEND    ANS,PID01111[REPTNCNT]       * load address rep code (ID)
          GOTO      LPID9999
.
.         PID.12 County Code (IS)
.
LPID1200  BRANCH    COMPCNT,LPID1201
          GOTO      LPID9999
.
LPID1201  APPEND    ANS,PID01201                 * load county code
          GOTO      LPID9999
.
.         PID.13 Phone Number - Home (XTN)
.                (maximum of 1 repeat - 2 phone numbers in total)
.
LPID1300  COMPARE   REPTNCNT,TWO                 * maximum repeats reached ?
          GOTO      LPID9999 IF LESS             * yes
.
          BRANCH    COMPCNT,LPID1301:            * text
                            LPID1302:            * telecomm. use code (ID)
                            LPID1303:            * telcomm. equipment type (ID)
                            LPID1304:            * email address (ST)
                            LPID1305:            * country code (NM)
                            LPID1306:            * area/city code (NM)
                            LPID1307:            * phone number (NM)
                            LPID1308:            * extension (NM)
                            LPID1309             * any text (ST)
          GOTO      LPID9999
.
LPID1301  APPEND    ANS,PID01301[REPTNCNT]       * load text
          GOTO      LPID9999
.
LPID1302  APPEND    ANS,PID01302[REPTNCNT]       * load telecomm. use code (ID)
          GOTO      LPID9999
.
LPID1303  APPEND    ANS,PID01303[REPTNCNT]       * load telcomm. equip.type (ID)
          GOTO      LPID9999
.
LPID1304  APPEND    ANS,PID01304[REPTNCNT]       * load email address (ST)
          GOTO      LPID9999
.
LPID1305  APPEND    ANS,PID01305[REPTNCNT]       * load country code (NM)
          GOTO      LPID9999
.
LPID1306  APPEND    ANS,PID01306[REPTNCNT]       * load area/city code (NM)
          GOTO      LPID9999
.
LPID1307  APPEND    ANS,PID01307[REPTNCNT]       * load phone number (NM)
          GOTO      LPID9999
.
LPID1308  APPEND    ANS,PID01308[REPTNCNT]       * load extension (NM)
          GOTO      LPID9999
.
LPID1309  APPEND    ANS,PID01309[REPTNCNT]       * load any text (ST)
          GOTO      LPID9999
.
.         PID.14 Phone Number - Business (XTN)
.                (maximum of 1 repeat - 2 phone numbers in total)
.
LPID1400  COMPARE   REPTNCNT,TWO                 * maximum repeats reached ?
          GOTO      LPID9999 IF LESS             * yes
.
          BRANCH    COMPCNT,LPID1401:            * text
                            LPID1402:            * telecomm. use code (ID)
                            LPID1403:            * telcomm. equipment type (ID)
                            LPID1404:            * email address (ST)
                            LPID1405:            * country code (NM)
                            LPID1406:            * area/city code (NM)
                            LPID1407:            * phone number (NM)
                            LPID1408:            * extension (NM)
                            LPID1409             * any text (ST)
          GOTO      LPID9999
.
LPID1401  APPEND    ANS,PID01401[REPTNCNT]       * load text
          GOTO      LPID9999
.
LPID1402  APPEND    ANS,PID01402[REPTNCNT]       * load telecomm. use code (ID)
          GOTO      LPID9999
.
LPID1403  APPEND    ANS,PID01403[REPTNCNT]       * load telcomm. equip.type (ID)
          GOTO      LPID9999
.
LPID1404  APPEND    ANS,PID01404[REPTNCNT]       * load email address (ST)
          GOTO      LPID9999
.
LPID1405  APPEND    ANS,PID01405[REPTNCNT]       * load country code (NM)
          GOTO      LPID9999
.
LPID1406  APPEND    ANS,PID01406[REPTNCNT]       * load area/city code (NM)
          GOTO      LPID9999
.
LPID1407  APPEND    ANS,PID01407[REPTNCNT]       * load phone number (NM)
          GOTO      LPID9999
.
LPID1408  APPEND    ANS,PID01408[REPTNCNT]       * load extension (NM)
          GOTO      LPID9999
.
LPID1409  APPEND    ANS,PID01409[REPTNCNT]       * load any text (ST)
          GOTO      LPID9999
.
.         PID.15 Primary Language (CE)
.
LPID1500  BRANCH    COMPCNT,LPID1501:            * identifier (ST)
                            LPID1502:            * text (ST)
                            LPID1503:            * name of coding system (ST)
                            LPID1504:            * alternate identifier (ST)
                            LPID1505:            * alternate text (ST)
                            LPID1506             * name of alt. coding sys. (ST)
          GOTO      LPID9999
.
LPID1501  APPEND    ANS,PID01501                 * load identifier (ST)
          GOTO      LPID9999
.
LPID1502  APPEND    ANS,PID01502                 * load text (ST)
          GOTO      LPID9999
.
LPID1503  APPEND    ANS,PID01503                 * load name of coding sys. (ST)
          GOTO      LPID9999
.
LPID1504  APPEND    ANS,PID01504                 * load alt. identifier (ST)
          GOTO      LPID9999
.
LPID1505  APPEND    ANS,PID01505                 * load alternate text (ST)
          GOTO      LPID9999
.
LPID1506  APPEND    ANS,PID01506                 * load name alt. cod. sys. (ST)
          GOTO      LPID9999
.
.         PID.16 Marital Status (CE)
.
LPID1600  BRANCH    COMPCNT,LPID1601:            * identifier (ST)
                            LPID1602:            * text (ST)
                            LPID1603:            * name of coding system (ST)
                            LPID1604:            * alternate identifier (ST)
                            LPID1605:            * alternate text (ST)
                            LPID1606             * name of alt. coding sys. (ST)
          GOTO      LPID9999
.
LPID1601  APPEND    ANS,PID01601                 * load identifier (ST)
          GOTO      LPID9999
.
LPID1602  APPEND    ANS,PID01602                 * load text (ST)
          GOTO      LPID9999
.
LPID1603  APPEND    ANS,PID01603                 * load name of coding sys. (ST)
          GOTO      LPID9999
.
LPID1604  APPEND    ANS,PID01604                 * load alt. identifier (ST)
          GOTO      LPID9999
.
LPID1605  APPEND    ANS,PID01605                 * load alternate text (ST)
          GOTO      LPID9999
.
LPID1606  APPEND    ANS,PID01606                 * load name alt. cod. sys. (ST)
          GOTO      LPID9999
.
.         PID.17 Religion (CE)
.
LPID1700  BRANCH    COMPCNT,LPID1701:            * identifier (ST)
                            LPID1702:            * text (ST)
                            LPID1703:            * name of coding system (ST)
                            LPID1704:            * alternate identifier (ST)
                            LPID1705:            * alternate text (ST)
                            LPID1706             * name of alt. coding sys. (ST)
          GOTO      LPID9999
.
LPID1701  APPEND    ANS,PID01701                 * load identifier (ST)
          GOTO      LPID9999
.
LPID1702  APPEND    ANS,PID01702                 * load text (ST)
          GOTO      LPID9999
.
LPID1703  APPEND    ANS,PID01703                 * load name of coding sys. (ST)
          GOTO      LPID9999
.
LPID1704  APPEND    ANS,PID01704                 * load alt. identifier (ST)
          GOTO      LPID9999
.
LPID1705  APPEND    ANS,PID01705                 * load alternate text (ST)
          GOTO      LPID9999
.
LPID1706  APPEND    ANS,PID01706                 * load name alt. cod. sys. (ST)
          GOTO      LPID9999
.
.         PID.18 Patient Account Number (CX)
.
LPID1800  BRANCH    COMPCNT,LPID1801:            * id (ST)
                            LPID1802:            * check digit (ST)
                            LPID1803:            * code ident. chk dig, sch (ID)
                            LPID1804:            * assigning authority (HD)
                            LPID1805:            * identifier type code (IS)
                            LPID1806             * assigning facility (HD)
          GOTO      LPID9999
.
LPID1801  APPEND    ANS,PID01801                 * load id (ST)
          GOTO      LPID9999
.
LPID1802  APPEND    ANS,PID01802                 * load check digit (ST)
          GOTO      LPID9999
.
LPID1803  APPEND    ANS,PID01803                 * load code ident chk dig (ID)
          GOTO      LPID9999
.
LPID1804  APPEND    ANS,PID01804                 * load assigning authority (HD)
          GOTO      LPID9999
.
LPID1805  APPEND    ANS,PID01805                 * load ident. type code (IS)
          GOTO      LPID9999
.
LPID1806  APPEND    ANS,PID01806                 * load assigning facility (HD)
          GOTO      LPID9999
.
.         PID.19 SSN Number - Patient (ST)
.
LPID1900  BRANCH    COMPCNT,LPID1901
          GOTO      LPID9999
.
LPID1901  APPEND    ANS,PID01901                 * load SSN number - patient
          GOTO      LPID9999
.
.         PID.20 Driver's License Number - Patient (DLN)
.
LPID2000  BRANCH    COMPCNT,LPID2001:            * license number (ST)
                            LPID2002:            * issuing state (IS)
                            LPID2003             * expiration date (DT)
          GOTO      LPID9999
.
LPID2001  APPEND    ANS,PID02001                 * load license number (ST)
          GOTO      LPID9999
.
LPID2002  APPEND    ANS,PID02002                 * load issuing state (IS)
          GOTO      LPID9999
.
LPID2003  APPEND    ANS,PID02003                 * load expiration date (DT)
          GOTO      LPID9999
.
.         PID.21 Mother's Identifier (CX)
.
LPID2100  BRANCH    COMPCNT,LPID2101:            * id (ST)
                            LPID2102:            * check digit (ST)
                            LPID2103:            * code ident. chk dig, sch (ID)
                            LPID2104:            * assigning authority (HD)
                            LPID2105:            * identifier type code (IS)
                            LPID2106             * assigning facility (HD)
          GOTO      LPID9999
.
LPID2101  APPEND    ANS,PID02101                 * load id (ST)
          GOTO      LPID9999
.
LPID2102  APPEND    ANS,PID02102                 * load check digit (ST)
          GOTO      LPID9999
.
LPID2103  APPEND    ANS,PID02103                 * load code ident chk dig (ID)
          GOTO      LPID9999
.
LPID2104  APPEND    ANS,PID02104                 * load assigning authority (HD)
          GOTO      LPID9999
.
LPID2105  APPEND    ANS,PID02105                 * load ident. type code (IS)
          GOTO      LPID9999
.
LPID2106  APPEND    ANS,PID02106                 * load assigning facility (HD)
          GOTO      LPID9999
.
.         PID.22 Ethnic Group (CE)
.
LPID2200  BRANCH    COMPCNT,LPID2201:            * identifier (ST)
                            LPID2202:            * text (ST)
                            LPID2203:            * name of coding system (ST)
                            LPID2204:            * alternate identifier (ST)
                            LPID2205:            * alternate text (ST)
                            LPID2206             * name of alt. coding sys. (ST)
          GOTO      LPID9999
.
LPID2201  APPEND    ANS,PID02201                 * load identifier (ST)
          GOTO      LPID9999
.
LPID2202  APPEND    ANS,PID02202                 * load text (ST)
          GOTO      LPID9999
.
LPID2203  APPEND    ANS,PID02203                 * load name of coding sys. (ST)
          GOTO      LPID9999
.
LPID2204  APPEND    ANS,PID02204                 * load alt. identifier (ST)
          GOTO      LPID9999
.
LPID2205  APPEND    ANS,PID02205                 * load alternate text (ST)
          GOTO      LPID9999
.
LPID2206  APPEND    ANS,PID02206                 * load name alt. cod. sys. (ST)
          GOTO      LPID9999
.
.         PID.23 Birth Place (ST)
.
LPID2300  BRANCH    COMPCNT,LPID2301
          GOTO      LPID9999
.
LPID2301  APPEND    ANS,PID02301                 * load place of birth
          GOTO      LPID9999
.
.         PID.24 Multiple Birth Indicator (ID)
.
LPID2400  BRANCH    COMPCNT,LPID2401
          GOTO      LPID9999
.
LPID2401  APPEND    ANS,PID02401                 * load multiple birth indicator
          GOTO      LPID9999
.
.         PID.25 Birth Order (NM)
.
LPID2500  BRANCH    COMPCNT,LPID2501
          GOTO      LPID9999
.
LPID2501  APPEND    ANS,PID02501                 * load birth order
          GOTO      LPID9999
.
.         PID.26 Citizenship (CE)
.
LPID2600  BRANCH    COMPCNT,LPID2601:            * identifier (ST)
                            LPID2602:            * text (ST)
                            LPID2603:            * name of coding system (ST)
                            LPID2604:            * alternate identifier (ST)
                            LPID2605:            * alternate text (ST)
                            LPID2606             * name of alt. coding sys. (ST)
          GOTO      LPID9999
.
LPID2601  APPEND    ANS,PID02601                 * load identifier (ST)
          GOTO      LPID9999
.
LPID2602  APPEND    ANS,PID02602                 * load text (ST)
          GOTO      LPID9999
.
LPID2603  APPEND    ANS,PID02603                 * load name of coding sys. (ST)
          GOTO      LPID9999
.
LPID2604  APPEND    ANS,PID02604                 * load alt. identifier (ST)
          GOTO      LPID9999
.
LPID2605  APPEND    ANS,PID02605                 * load alternate text (ST)
          GOTO      LPID9999
.
LPID2606  APPEND    ANS,PID02606                 * load name alt. cod. sys. (ST)
          GOTO      LPID9999
.
.         PID.27 Veterans Military Status (CE)
.
LPID2700  BRANCH    COMPCNT,LPID2701:            * identifier (ST)
                            LPID2702:            * text (ST)
                            LPID2703:            * name of coding system (ST)
                            LPID2704:            * alternate identifier (ST)
                            LPID2705:            * alternate text (ST)
                            LPID2706             * name of alt. coding sys. (ST)
          GOTO      LPID9999
.
LPID2701  APPEND    ANS,PID02701                 * load identifier (ST)
          GOTO      LPID9999
.
LPID2702  APPEND    ANS,PID02702                 * load text (ST)
          GOTO      LPID9999
.
LPID2703  APPEND    ANS,PID02703                 * load name of coding sys. (ST)
          GOTO      LPID9999
.
LPID2704  APPEND    ANS,PID02704                 * load alt. identifier (ST)
          GOTO      LPID9999
.
LPID2705  APPEND    ANS,PID02705                 * load alternate text (ST)
          GOTO      LPID9999
.
LPID2706  APPEND    ANS,PID02706                 * load name alt. cod. sys. (ST)
          GOTO      LPID9999
.
.         PID.28 Nationality (CE)
.
LPID2800  BRANCH    COMPCNT,LPID2801:            * identifier (ST)
                            LPID2802:            * text (ST)
                            LPID2803:            * name of coding system (ST)
                            LPID2804:            * alternate identifier (ST)
                            LPID2805:            * alternate text (ST)
                            LPID2806             * name of alt. coding sys. (ST)
          GOTO      LPID9999
.
LPID2801  APPEND    ANS,PID02801                 * load identifier (ST)
          GOTO      LPID9999
.
LPID2802  APPEND    ANS,PID02802                 * load text (ST)
          GOTO      LPID9999
.
LPID2803  APPEND    ANS,PID02803                 * load name of coding sys. (ST)
          GOTO      LPID9999
.
LPID2804  APPEND    ANS,PID02804                 * load alt. identifier (ST)
          GOTO      LPID9999
.
LPID2805  APPEND    ANS,PID02805                 * load alternate text (ST)
          GOTO      LPID9999
.
LPID2806  APPEND    ANS,PID02806                 * load name alt. cod. sys. (ST)
          GOTO      LPID9999
.
.         PID.29 Patient Death Date and Time (TS)
.
LPID2900  BRANCH    COMPCNT,LPID2901
          GOTO      LPID9999
.
LPID2901  APPEND    ANS,PID02901                 * load patient death date/time
          GOTO      LPID9999
.
.         PID.30 Patient Death Indicator (ID)
.
LPID3000  BRANCH    COMPCNT,LPID3001
          GOTO      LPID9999
.
LPID3001  APPEND    ANS,PID03001                 * load patient death indicator
          GOTO      LPID9999
.
.         PID.31 Identity unknown indicator
.
LPID3100  BRANCH    COMPCNT,LPID3101
          GOTO      LPID9999
.
LPID3101  APPEND    ANS,PID03101                 * Identity unknown indicator
          GOTO      LPID9999
.
.         PID.32 Identity reliability code
.
LPID3200  BRANCH    COMPCNT,LPID3201
          GOTO      LPID9999
.
LPID3201  APPEND    ANS,PID03201                 * Identity reliability code
          GOTO      LPID9999
.
.         PID.33 Last update date/time (TS)
.
LPID3300  BRANCH    COMPCNT,LPID3301
          GOTO      LPID9999
.
LPID3301  APPEND    ANS,PID03301                 * Last update date/time
          GOTO      LPID9999
.
LPID9999  
.dav1     APPEND    ANS,RECVMESS                 * add char. to message buffer
          RETURN
+
.*****************************************************************************
.*                              RMSH0000                                     *
.*                      Reset all MSH variables                              *
.*****************************************************************************
.
RMSH0000  BRANCH    FIELDNO,RMSH0100:            * Field Separator
                            RMSH0200:            * Encoding Characters
                            RMSH0300:            * Sending Application
                            RMSH0400:            * Sending Facility
                            RMSH0500:            * Receiving Application
                            RMSH0600:            * Receiving Facility
                            RMSH0700:            * Date/Time of Message
                            RMSH0800:            * Security
                            RMSH0900:            * Message Type
                            RMSH1000:            * Message Control ID
                            RMSH1100:            * Processing ID
                            RMSH1200:            * Version ID
                            RMSH1300:            * Sequence Number
                            RMSH1400:            * Continuation Pointer
                            RMSH1500:            * Accept Acknowledgement Type
                            RMSH1600:            * Applic'n Acknowledgment Type
                            RMSH1700:            * Country Code
                            RMSH1800:            * Character Set
                            RMSH1900:            * Principal Language of Message
                            RMSH2000:            * Alt. Char. Set Hand. Scheme
                            RMSH2100             * Conformance Statement ID
          GOTO      RMSH9999
.
.         MSH.1 - Field Separator (already set)
.
RMSH0100  GOTO      RMSH9999
.
.         MSH.2 - Encoding Characters
.
RMSH0200  BRANCH    COMPCNT,RMSH0201
          GOTO      RMSH9999
.
RMSH0201  RESET     MSH00201
          GOTO      RMSH9999
.
.         MSH.3 - Sending Application
.
RMSH0300  BRANCH    COMPCNT,RMSH0301:
                            RMSH0302:
                            RMSH0303
          GOTO      RMSH9999
.
RMSH0301  RESET     MSH00301
          MOVE      MSH00301,SAVAPPLI
          GOTO      RMSH9999
.
RMSH0302  RESET     MSH00302
          STRIP     SAVAPPLI
          ENDSET    SAVAPPLI
          APPEND    CARET,SAVAPPLI
          APPEND    MSH00302,SAVAPPLI
          RESET     SAVAPPLI
          GOTO      RMSH9999
.
RMSH0303  RESET     MSH00303
          STRIP     SAVAPPLI
          ENDSET    SAVAPPLI
          APPEND    CARET,SAVAPPLI
          APPEND    MSH00303,SAVAPPLI
          RESET     SAVAPPLI
          GOTO      RMSH9999
.
.         MSH.4 - Sending Facility
.
RMSH0400  BRANCH    COMPCNT,RMSH0401:
                            RMSH0402:
                            RMSH0403
          GOTO      RMSH9999
.
RMSH0401  RESET     MSH00401
          MOVE      MSH00401,SAVFACIL
          GOTO      RMSH9999
.
RMSH0402  RESET     MSH00402
          STRIP     SAVFACIL
          ENDSET    SAVFACIL
          APPEND    CARET,SAVFACIL
          APPEND    MSH00402,SAVFACIL
          RESET     SAVFACIL
          GOTO      RMSH9999
.
RMSH0403  RESET     MSH00403
          STRIP     SAVFACIL
          ENDSET    SAVFACIL
          APPEND    CARET,SAVFACIL
          APPEND    MSH00403,SAVFACIL
          RESET     SAVFACIL
          GOTO      RMSH9999
.
.         MSH.5 - Receiving Application
.
RMSH0500  BRANCH    COMPCNT,RMSH0501:
                            RMSH0502:
                            RMSH0503
          GOTO      RMSH9999
.
RMSH0501  RESET     MSH00501
          GOTO      RMSH9999
.
RMSH0502  RESET     MSH00502
          GOTO      RMSH9999
.
RMSH0503  RESET     MSH00503
          GOTO      RMSH9999
.
.         MSH.6 - Receiving Facility
.
RMSH0600  BRANCH    COMPCNT,RMSH0601:
                            RMSH0602:
                            RMSH0603
          GOTO      RMSH9999
.
RMSH0601  RESET     MSH00601
          GOTO      RMSH9999
.
RMSH0602  RESET     MSH00602
          GOTO      RMSH9999
.
RMSH0603  RESET     MSH00603
          GOTO      RMSH9999
.
.         MSH.7 - Date/Time of Message
.
RMSH0700  BRANCH    COMPCNT,RMSH0701
          GOTO      RMSH9999
.
RMSH0701  RESET     MSH00701
          GOTO      RMSH9999
.
.         MSH.8 - Security
.
RMSH0800  BRANCH    COMPCNT,RMSH0801
          GOTO      RMSH9999
.
RMSH0801  RESET     MSH00801
          GOTO      RMSH9999
.
.         MSH.9 - Message Type
.
RMSH0900  BRANCH    COMPCNT,RMSH0901:
                            RMSH0902:
                            RMSH0903
          GOTO      RMSH9999
.
RMSH0901  RESET     MSH00901
          GOTO      RMSH9999
.
RMSH0902  RESET     MSH00902
          GOTO      RMSH9999
.
RMSH0903  RESET     MSH00903
          GOTO      RMSH9999
.
.         MSH.10 - Message Control ID
.
RMSH1000  BRANCH    COMPCNT,RMSH1001
          GOTO      RMSH9999
.
RMSH1001  RESET     MSH01001
          GOTO      RMSH9999
.
.         MSH.11 - Processing ID
.
RMSH1100  BRANCH    COMPCNT,RMSH1101:
                            RMSH1102
          GOTO      RMSH9999
.
RMSH1101  RESET     MSH01101
          GOTO      RMSH9999
.
RMSH1102  RESET     MSH01102
          GOTO      RMSH9999
.
.         MSH.12 - Version ID
.
RMSH1200  BRANCH    COMPCNT,RMSH1201:
                            RMSH1202:
                            RMSH1203
          GOTO      RMSH9999
.
RMSH1201  RESET     MSH01201
          GOTO      RMSH9999
.
RMSH1202  RESET     MSH01202
          GOTO      RMSH9999
.
RMSH1203  RESET     MSH01203
          GOTO      RMSH9999
.
.         MSH.13 - Sequence Number
.
RMSH1300  BRANCH    COMPCNT,RMSH1301
          GOTO      RMSH9999
.
RMSH1301  RESET     MSH01301
          GOTO      RMSH9999
.
.         MSH.14 - Continuation Pointer
.
RMSH1400  BRANCH    COMPCNT,RMSH1401
          GOTO      RMSH9999
.
RMSH1401  RESET     MSH01401
          GOTO      RMSH9999
.
.         MSH.15 - Accept Acknowledgement Type
.
RMSH1500  BRANCH    COMPCNT,RMSH1501
          GOTO      RMSH9999
.
RMSH1501  RESET     MSH01501
          GOTO      RMSH9999
.
.         MSH.16 - Application Acknowledgment Type
.
RMSH1600  BRANCH    COMPCNT,RMSH1601
          GOTO      RMSH9999
.
RMSH1601  RESET     MSH01601
          GOTO      RMSH9999
.
.         MSH.17 - Country Code
.
RMSH1700  BRANCH    COMPCNT,RMSH1701
          GOTO      RMSH9999
.
RMSH1701  RESET     MSH01701
          GOTO      RMSH9999
.
.         MSH.18 - Character Set
.
RMSH1800  BRANCH    COMPCNT,RMSH1801
          GOTO      RMSH9999
.
RMSH1801  RESET     MSH01801
          GOTO      RMSH9999
.
.         MSH.19 - Principal Language of Message
.
RMSH1900  BRANCH    COMPCNT,RMSH1901:
                            RMSH1902:
                            RMSH1903:
                            RMSH1904:
                            RMSH1905:
                            RMSH1906
          GOTO      RMSH9999
.
RMSH1901  RESET     MSH01901
          GOTO      RMSH9999
.
RMSH1902  RESET     MSH01902
          GOTO      RMSH9999
.
RMSH1903  RESET     MSH01903
          GOTO      RMSH9999
.
RMSH1904  RESET     MSH01904
          GOTO      RMSH9999
.
RMSH1905  RESET     MSH01905
          GOTO      RMSH9999
.
RMSH1906  RESET     MSH01906
          GOTO      RMSH9999
.
.         MSH.20 - Alternate Character Set Handling Scheme
.
RMSH2000  BRANCH    COMPCNT,RMSH2001
          GOTO      RMSH9999
.
RMSH2001  RESET     MSH02001
          GOTO      RMSH9999
.
.         MSH.21 - Conformance Statement ID (HL7 2.4 only)
.
RMSH2100  BRANCH    COMPCNT,RMSH2101
          GOTO      RMSH9999
.
RMSH2101  RESET     MSH02101
          GOTO      RMSH9999
.
RMSH9999  RETURN
+
.*****************************************************************************
.*                              RMSA0000                                     *
.*                      Reset all MSA variables                              *
.*****************************************************************************
.
RMSA0000  BRANCH    FIELDNO,RMSA0100:
                            RMSA0200:
                            RMSA0300:
                            RMSA0400:
                            RMSA0500:
                            RMSA0600
          GOTO      RMSA9999
.
RMSA0100  RESET     MSA001
          GOTO      RMSA9999
.
RMSA0200  RESET     MSA002
          GOTO      RMSA9999
.
RMSA0300  RESET     MSA003
          GOTO      RMSA9999
.
RMSA0400  RESET     MSA004
          GOTO      RMSA9999
.
RMSA0500  RESET     MSA005
          GOTO      RMSA9999
.
RMSA0600  RESET     MSA006
          GOTO      RMSA9999
.
RMSA9999  RETURN
+
.*****************************************************************************
.*                              RERR0000                                     *
.*                      Reset all ERR variables                              *
.*****************************************************************************
.
RERR0000  RESET     ERR001
.
RERR9999  RETURN
+
.*****************************************************************************
.*                              RDSC0000                                     *
.*                      Reset all DSC variables                              *
.*****************************************************************************
.
RDSC0000  MOVELPTR  DSC00101,FORM3               * field populated ?
          IF        FORM3 <> 0
            RESET     DSC00101
          ENDIF
.
RDSC9999  RETURN
+
.*****************************************************************************
.*                              RQAK0000                                     *
.*                      Reset all QAK variables                              *
.*****************************************************************************
.
RQAK0000
RQAK9999  RETURN
+
.*****************************************************************************
.*                              RPV10000                                     *
.*                      Reset all PV1 variables                              *
.*****************************************************************************
.
RPV10000
RPV19999  RETURN
+
.*****************************************************************************
.*                              ROBX0000                                     *
.*                      Reset all OBX variables                              *
.*****************************************************************************
.
ROBX0000
ROBX9999  RETURN
+
.*****************************************************************************
.*                              RQRF0000                                     *
.*                      Reset all QRF variables                              *
.*****************************************************************************
.
RQRF0000
RQRF9999  RETURN
+
.*****************************************************************************
.*                              RNK10000                                     *
.*                      Reset all NK1 variables                              *
.*****************************************************************************
.
RNK10000  BRANCH    FIELDNO,RNK10100:            * Set ID
                            RNK10200:            * Name
                            RNK10300:            * Relationship
                            RNK10400:            * Address
                            RNK10500:            * Phone Number
                            RNK10600:            * Business Phone Number
                            RNK10700:            * Contact Role
                            RNK10800:            * Start Date
                            RNK10900:            * End Date
                            RNK11000:            * Job Title
                            RNK11100:            * Job Code/Class
                            RNK11200:            * Employee Number
                            RNK11300:            * Organisation Name
                            RNK11400:            * Marital Status
                            RNK11500:            * Sex
                            RNK11600:            * Date/Time of Birth
                            RNK11700:            * Living Dpendency
                            RNK11800:            * Ambulatory Status
                            RNK11900:            * Citizenship
                            RNK12000:            * Primary Language
                            RNK12100:            * Living Arrangement
                            RNK12200:            * Publicity Indicator
                            RNK12300:            * Protection Indicator
                            RNK12400:            * Student Indicator
                            RNK12500:            * Religion
                            RNK12600:            * Mother's Maiden Name
                            RNK12700:            * Nationality
                            RNK12800:            * Ethnic Group
                            RNK12900:            * Contact Reason
                            RNK13000:            * Contact Person's Name
                            RNK13100:            * Contact Person's Phone No.
                            RNK13200:            * Contact Person's Address
                            RNK13300:            * Identifiers
                            RNK13400:            * Job Status
                            RNK13500:            * Race
                            RNK13600:            * Handicap
                            RNK13700             * Social Security Number
          GOTO      RNK19999
.
.         NK1.1 Set ID (SI)
.
RNK10100  BRANCH    COMPCNT,RNK10101
          GOTO      RNK19999
.
RNK10101  RESET     NK100101
          GOTO      RNK19999
.
.         NK1.2 Name (XPN)
.
RNK10200  BRANCH    COMPCNT,RNK10201:            * family name (ST)
                            RNK10202:            * given name (ST)
                            RNK10203:            * middle name (ST)
                            RNK10204:            * suffix (ST)
                            RNK10205:            * prefix (ST)
                            RNK10206:            * degree (IS)
                            RNK10207:            * name type code (ID)
                            RNK10208             * name representation code (ID)
          GOTO      RNK19999
.
RNK10201  RESET     NK100201                     * load family name (ST)
          MOVE      NK100201,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK100201
          GOTO      RNK19999
.
RNK10202  RESET     NK100202                     * load given name (ST)
          MOVE      NK100202,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK100202
          GOTO      RNK19999
.
RNK10203  RESET     NK100203                     * load middle name (ST)
          MOVE      NK100203,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK100203
          GOTO      RNK19999
.
RNK10204  RESET     NK100204                     * load suffix (ST)
          GOTO      RNK19999
.
RNK10205  RESET     NK100205                     * load prefix (ST)
          GOTO      RNK19999
.
RNK10206  RESET     NK100206                     * load degree (IS)
          GOTO      RNK19999
.
RNK10207  RESET     NK100207                     * load name type code (ID)
          GOTO      RNK19999
.
RNK10208  RESET     NK100208                     * load name rep. code (ID)
          GOTO      RNK19999
.
.         NK1.3 Relationship (CE)
.
RNK10300  BRANCH    COMPCNT,RNK10301:            * identifier (ST)
                            RNK10302:            * text (ST)
                            RNK10303:            * name of coding system (ST)
                            RNK10304:            * alternate identifier (ST)
                            RNK10305:            * alternate text (ST)
                            RNK10306             * name of alt. cod. system (ST)
          GOTO      RNK19999
.
RNK10301  RESET     NK100301                     * load identifier (ST)
          MOVE      NK100301,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK100301
          GOTO      RNK19999
.
RNK10302  RESET     NK100302                     * load text (ST)
          GOTO      RNK19999
.
RNK10303  RESET     NK100303                     * load name of cod. system (ST)
          GOTO      RNK19999
.
RNK10304  RESET     NK100304                     * load alt. identifier (ST)
          GOTO      RNK19999
.
RNK10305  RESET     NK100305                     * load alternate text (ST)
          GOTO      RNK19999
.
RNK10306  RESET     NK100306                     * load alt. cod. sys. name (ST)
          GOTO      RNK19999
.
.         NK1.4 Address (XAD)
.
RNK10400  BRANCH    COMPCNT,RNK10401:            * street address (ST)
                            RNK10402:            * other designation (ST)
                            RNK10403:            * city (ST)
                            RNK10404:            * state (ST)
                            RNK10405:            * postcode (ST)
                            RNK10406:            * country (ID)
                            RNK10407:            * address type (ID)
                            RNK10408:            * other geographic desig. (ST)
                            RNK10409:            * county (IS)
                            RNK10410:            * census tract (IS)
                            RNK10411             * address rep. code (ID)
          GOTO      RNK19999
.
RNK10401  RESET     NK100401                     * load street address (ST)
          MOVE      NK100401,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK100401
          REP       UPPLOW,NK100401
          MATCH     BLANKSTR,NK100401
          IF        !@EQUAL
            REP       "#"'",NK100401
          ENDIF
          GOTO      RNK19999
.
RNK10402  RESET     NK100402                     * load other designation (ST)
          MOVE      NK100402,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK100402
          REP       UPPLOW,NK100402
          MATCH     BLANKSTR,NK100402
          IF        !@EQUAL
            REP       "#"'",NK100402
          ENDIF
          GOTO      RNK19999
.
RNK10403  RESET     NK100403                     * load city (ST)
          MOVE      NK100403,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK100403
          REP       UPPLOW,NK100403
          MATCH     BLANKSTR,NK100403
          IF        !@EQUAL
            REP       "#"'",NK100403
          ENDIF
          GOTO      RNK19999
.
RNK10404  RESET     NK100404                     * load state (ST)
          MOVE      NK100404,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK100404
          REP       UPPLOW,NK100404
          MATCH     BLANKSTR,NK100404
          IF        !@EQUAL
            REP       "#"'",NK100404
          ENDIF
          GOTO      RNK19999
.
RNK10405  RESET     NK100405                     * load postcode (ST)
          MOVE      NK100405,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK100405
          GOTO      RNK19999
.
RNK10406  RESET     NK100406                     * load country (ID)
          GOTO      RNK19999
.
RNK10407  RESET     NK100407                     * load address type (ID)
          GOTO      RNK19999
.
RNK10408  RESET     NK100408                     * load other geog. desig. (ST)
          GOTO      RNK19999
.
RNK10409  RESET     NK100409                     * load county (IS)
          GOTO      RNK19999
.
RNK10410  RESET     NK100410                     * load census tract (IS)
          GOTO      RNK19999
.
RNK10411  RESET     NK100411                     * load address rep code (ID)
          GOTO      RNK19999
.
.         NK1.5 - Phone Number - Home
.                 (maximum of 1 repeat - 2 phone numbers in total)
.
RNK10500  COMPARE   REPTNCNT,TWO                 * maximum repeats reached ?
          GOTO      RNK19999 IF LESS             * yes
.
          BRANCH    COMPCNT,RNK10501:            * text
                            RNK10502:            * telecomm. use code (ID)
                            RNK10503:            * telcomm. equipment type (ID)
                            RNK10504:            * email address (ST)
                            RNK10505:            * country code (NM)
                            RNK10506:            * area/city code (NM)
                            RNK10507:            * phone number (NM)
                            RNK10508:            * extension (NM)
                            RNK10509             * any text (ST)
          GOTO      RNK19999
.
RNK10501  RESET     NK100501[REPTNCNT]           * load text
          GOTO      RNK19999
.
RNK10502  RESET     NK100502[REPTNCNT]           * load telecomm. use code (ID)
          GOTO      RNK19999
.
RNK10503  RESET     NK100503[REPTNCNT]           * load telcomm. equip.type (ID)
          GOTO      RNK19999
.
RNK10504  RESET     NK100504[REPTNCNT]           * load email address (ST)
          GOTO      RNK19999
.
RNK10505  RESET     NK100505[REPTNCNT]           * load country code (NM)
          GOTO      RNK19999
.
RNK10506  RESET     NK100506[REPTNCNT]           * load area/city code (NM)
          GOTO      RNK19999
.
RNK10507  RESET     NK100507[REPTNCNT]           * load phone number (NM)
          GOTO      RNK19999
.
RNK10508  RESET     NK100508[REPTNCNT]           * load extension (NM)
          GOTO      RNK19999
.
RNK10509  RESET     NK100509[REPTNCNT]           * load any text (ST)
          MOVE      NK100509[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK100509[REPTNCNT]
          GOTO      RNK19999
.
.         NK1.6 - Phone Number - Business
.                 (maximum of 1 repeat - 2 phone numbers in total)
.
RNK10600  COMPARE   REPTNCNT,TWO                 * maximum repeats reached ?
          GOTO      RNK19999 IF LESS             * yes
.
          BRANCH    COMPCNT,RNK10601:            * text
                            RNK10602:            * telecomm. use code (ID)
                            RNK10603:            * telcomm. equipment type (ID)
                            RNK10604:            * email address (ST)
                            RNK10605:            * country code (NM)
                            RNK10606:            * area/city code (NM)
                            RNK10607:            * phone number (NM)
                            RNK10608:            * extension (NM)
                            RNK10609             * any text (ST)
          GOTO      RNK19999
.
RNK10601  RESET     NK100601[REPTNCNT]           * load text
          GOTO      RNK19999
.
RNK10602  RESET     NK100602[REPTNCNT]           * load telecomm. use code (ID)
          GOTO      RNK19999
.
RNK10603  RESET     NK100603[REPTNCNT]           * load telcomm. equip.type (ID)
          GOTO      RNK19999
.
RNK10604  RESET     NK100604[REPTNCNT]           * load email address (ST)
          GOTO      RNK19999
.
RNK10605  RESET     NK100605[REPTNCNT]           * load country code (NM)
          GOTO      RNK19999
.
RNK10606  RESET     NK100606[REPTNCNT]           * load area/city code (NM)
          GOTO      RNK19999
.
RNK10607  RESET     NK100607[REPTNCNT]           * load phone number (NM)
          GOTO      RNK19999
.
RNK10608  RESET     NK100608[REPTNCNT]           * load extension (NM)
          GOTO      RNK19999
.
RNK10609  RESET     NK100609[REPTNCNT]           * load any text (ST)
          MOVE      NK100609[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK100609[REPTNCNT]
          GOTO      RNK19999
.
.         NK1.7 Contact Role (CE)
.
RNK10700  BRANCH    COMPCNT,RNK10701:            * identifier (ST)
                            RNK10702:            * text (ST)
                            RNK10703:            * name of coding system (ST)
                            RNK10704:            * alternate identifier (ST)
                            RNK10705:            * alternate text (ST)
                            RNK10706             * name of alt. cod. system (ST)
          GOTO      RNK19999
.
RNK10701  RESET     NK100701                     * load identifier (ST)
          MOVE      NK100701,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK100701
          GOTO      RNK19999
.
RNK10702  RESET     NK100702                     * load text (ST)
          GOTO      RNK19999
.
RNK10703  RESET     NK100703                     * load name of cod. system (ST)
          GOTO      RNK19999
.
RNK10704  RESET     NK100704                     * load alt. identifier (ST)
          GOTO      RNK19999
.
RNK10705  RESET     NK100705                     * load alternate text (ST)
          GOTO      RNK19999
.
RNK10706  RESET     NK100706                     * load alt. cod. sys. name (ST)
          GOTO      RNK19999
.
.         NK1.8 Start Date (DT)
.
RNK10800  BRANCH    COMPCNT,RNK10801
          GOTO      RNK19999
.
RNK10801  RESET     NK100801
          GOTO      RNK19999
.
.         NK1.9 End Date (DT)
.
RNK10900  BRANCH    COMPCNT,RNK10901
          GOTO      RNK19999
.
RNK10901  RESET     NK100901
          GOTO      RNK19999
.
.         NK1.10 Next of Kin / Associated Parties Job Title (ST)
.
RNK11000  BRANCH    COMPCNT,RNK11001
          GOTO      RNK19999
.
RNK11001  RESET     NK101001                     * load title (ST)
          GOTO      RNK19999
.
.         NK1.11 Next of Kin / Associated Parties Job Code/Class (JCC)
.
RNK11100  BRANCH    COMPCNT,RNK11101:            * job code (ST)
                            RNK11102             * job class (IS)
          GOTO      RNK19999
.
RNK11101  RESET     NK101101                     * job code (ST)
          GOTO      RNK19999
.
RNK11102  RESET     NK101102                     * job class (IS)
          GOTO      RNK19999
.
.         NK1.12 Next of Kin / Associated Parties Employee Number (CX)
.
RNK11200  BRANCH    COMPCNT,RNK11201:            * id (ST)
                            RNK11202:            * check digit (ST)
                            RNK11203:            * check digit scheme code (ID)
                            RNK11204:            * assigning authority (HD)
                            RNK11205:            * identifier type code (IS)
                            RNK11206             * assigning facility (HD)
          GOTO      RNK19999
.
RNK11201  RESET     NK101201                     * load id (ST)
          GOTO      RNK19999
.
RNK11202  RESET     NK101202                     * load check digit (ST)
          GOTO      RNK19999
.
RNK11203  RESET     NK101203                     * load chk dig scheme code (ID)
          GOTO      RNK19999
.
RNK11204  RESET     NK101204                     * load assigning authority (HD)
          GOTO      RNK19999
.
RNK11205  RESET     NK101205                     * load identifier typ code (IS)
          GOTO      RNK19999
.
RNK11206  RESET     NK101206                     * load assigning facility (HD)
          GOTO      RNK19999
.
.         NK1.13 Organisation Name (XON)
.
RNK11300  BRANCH    COMPCNT,RNK11301:            * organisation name (ST)
                            RNK11302:            * org. name type code (IS)
                            RNK11303:            * id number (NM)
                            RNK11304:            * check digit (NM)
                            RNK11305:            * check digit scheme code (ID)
                            RNK11306:            * assigning authority (HD)
                            RNK11307:            * identifier type code (IS)
                            RNK11308:            * assigning facility (HD)
                            RNK11309             * name rep. code (ID)
          GOTO      RNK19999
.
RNK11301  RESET     NK101301                     * organisation name (ST)
          GOTO      RNK19999
.
RNK11302  RESET     NK101302                     * org. name type code (IS)
          GOTO      RNK19999
.
RNK11303  RESET     NK101303                     * id number (NM)
          GOTO      RNK19999
.
RNK11304  RESET     NK101304                     * load check digit (ST)
          GOTO      RNK19999
.
RNK11305  RESET     NK101305                     * load chk dig scheme code (ID)
          GOTO      RNK19999
.
RNK11306  RESET     NK101306                     * load assigning authority (HD)
          GOTO      RNK19999
.
RNK11307  RESET     NK101307                     * load identifier typ code (IS)
          GOTO      RNK19999
.
RNK11308  RESET     NK101308                     * load assigning facility (HD)
          GOTO      RNK19999
.
RNK11309  RESET     NK101309                     * load name rep. code (ID)
          GOTO      RNK19999
.
.         NK1.14 Marital Status (CE)
.
RNK11400  BRANCH    COMPCNT,RNK11401:            * identifier (ST)
                            RNK11402:            * text (ST)
                            RNK11403:            * name of coding system (ST)
                            RNK11404:            * alternate identifier (ST)
                            RNK11405:            * alternate text (ST)
                            RNK11406             * name of alt. cod. system (ST)
          GOTO      RNK19999
.
RNK11401  RESET     NK101401                     * load identifier (ST)
          GOTO      RNK19999
.
RNK11402  RESET     NK101402                     * load text (ST)
          GOTO      RNK19999
.
RNK11403  RESET     NK101403                     * load name of cod. system (ST)
          GOTO      RNK19999
.
RNK11404  RESET     NK101404                     * load alt. identifier (ST)
          GOTO      RNK19999
.
RNK11405  RESET     NK101405                     * load alternate text (ST)
          GOTO      RNK19999
.
RNK11406  RESET     NK101406                     * load alt. cod. sys. name (ST)
          GOTO      RNK19999
.
.         NK1.15 Sex (IS)
.
RNK11500  BRANCH    COMPCNT,RNK11501
          GOTO      RNK19999
.
RNK11501  RESET     NK101501
          GOTO      RNK19999
.
.         NK1.16 Date/Time of Birth (TS)
.
RNK11600  BRANCH    COMPCNT,RNK11601
          GOTO      RNK19999
.
RNK11601  RESET     NK101601
          GOTO      RNK19999
.
.         NK1.17 Living Dependency (IS)
.
RNK11700  BRANCH    COMPCNT,RNK11701
          GOTO      RNK19999
.
RNK11701  RESET     NK101701
          GOTO      RNK19999
.
.         NK1.18 Ambulatory Status (IS)
.
RNK11800  BRANCH    COMPCNT,RNK11801
          GOTO      RNK19999
.
RNK11801  RESET     NK101801
          GOTO      RNK19999
.
.         NK1.19 Citizenship (CE)
.
RNK11900  BRANCH    COMPCNT,RNK11901:            * identifier (ST)
                            RNK11902:            * text (ST)
                            RNK11903:            * name of coding system (ST)
                            RNK11904:            * alternate identifier (ST)
                            RNK11905:            * alternate text (ST)
                            RNK11906             * name of alt. cod. system (ST)
          GOTO      RNK19999
.
RNK11901  RESET     NK101901                     * load identifier (ST)
          GOTO      RNK19999
.
RNK11902  RESET     NK101902                     * load text (ST)
          GOTO      RNK19999
.
RNK11903  RESET     NK101903                     * load name of cod. system (ST)
          GOTO      RNK19999
.
RNK11904  RESET     NK101904                     * load alt. identifier (ST)
          GOTO      RNK19999
.
RNK11905  RESET     NK101905                     * load alternate text (ST)
          GOTO      RNK19999
.
RNK11906  RESET     NK101906                     * load alt. cod. sys. name (ST)
          GOTO      RNK19999
.
.         NK1.20 Citizenship (CE)
.
RNK12000  BRANCH    COMPCNT,RNK12001:            * identifier (ST)
                            RNK12002:            * text (ST)
                            RNK12003:            * name of coding system (ST)
                            RNK12004:            * alternate identifier (ST)
                            RNK12005:            * alternate text (ST)
                            RNK12006             * name of alt. cod. system (ST)
          GOTO      RNK19999
.
RNK12001  RESET     NK102001                     * load identifier (ST)
          GOTO      RNK19999
.
RNK12002  RESET     NK102002                     * load text (ST)
          GOTO      RNK19999
.
RNK12003  RESET     NK102003                     * load name of cod. system (ST)
          GOTO      RNK19999
.
RNK12004  RESET     NK102004                     * load alt. identifier (ST)
          GOTO      RNK19999
.
RNK12005  RESET     NK102005                     * load alternate text (ST)
          GOTO      RNK19999
.
RNK12006  RESET     NK102006                     * load alt. cod. sys. name (ST)
          GOTO      RNK19999
.
.         NK1.21 Living Arrangement (IS)
.
RNK12100  BRANCH    COMPCNT,RNK12101
          GOTO      RNK19999
.
RNK12101  RESET     NK102101
          GOTO      RNK19999
.
.         NK1.22 Publicity Code (CE)
.
RNK12200  BRANCH    COMPCNT,RNK12201:            * identifier (ST)
                            RNK12202:            * text (ST)
                            RNK12203:            * name of coding system (ST)
                            RNK12204:            * alternate identifier (ST)
                            RNK12205:            * alternate text (ST)
                            RNK12206             * name of alt. cod. system (ST)
          GOTO      RNK19999
.
RNK12201  RESET     NK102201                     * load identifier (ST)
          GOTO      RNK19999
.
RNK12202  RESET     NK102202                     * load text (ST)
          GOTO      RNK19999
.
RNK12203  RESET     NK102203                     * load name of cod. system (ST)
          GOTO      RNK19999
.
RNK12204  RESET     NK102204                     * load alt. identifier (ST)
          GOTO      RNK19999
.
RNK12205  RESET     NK102205                     * load alternate text (ST)
          GOTO      RNK19999
.
RNK12206  RESET     NK102206                     * load alt. cod. sys. name (ST)
          GOTO      RNK19999
.
.         NK1.23 Protection Indicator (ID)
.
RNK12300  BRANCH    COMPCNT,RNK12301
          GOTO      RNK19999
.
RNK12301  RESET     NK102301
          GOTO      RNK19999
.
.         NK1.24 Student Indicator (IS)
.
RNK12400  BRANCH    COMPCNT,RNK12401
          GOTO      RNK19999
.
RNK12401  RESET     NK102401
          GOTO      RNK19999
.
.         NK1.25 Religion (CE)
.
RNK12500  BRANCH    COMPCNT,RNK12501:            * identifier (ST)
                            RNK12502:            * text (ST)
                            RNK12503:            * name of coding system (ST)
                            RNK12504:            * alternate identifier (ST)
                            RNK12505:            * alternate text (ST)
                            RNK12506             * name of alt. cod. system (ST)
          GOTO      RNK19999
.
RNK12501  RESET     NK102501                     * load identifier (ST)
          GOTO      RNK19999
.
RNK12502  RESET     NK102502                     * load text (ST)
          GOTO      RNK19999
.
RNK12503  RESET     NK102503                     * load name of cod. system (ST)
          GOTO      RNK19999
.
RNK12504  RESET     NK102504                     * load alt. identifier (ST)
          GOTO      RNK19999
.
RNK12505  RESET     NK102505                     * load alternate text (ST)
          GOTO      RNK19999
.
RNK12506  RESET     NK102506                     * load alt. cod. sys. name (ST)
          GOTO      RNK19999
.
.         NK1.26 Mother's Maiden Name (XPN)
.
RNK12600  BRANCH    COMPCNT,RNK12601:            * family name (ST)
                            RNK12602:            * given name (ST)
                            RNK12603:            * middle name (ST)
                            RNK12604:            * suffix (ST)
                            RNK12605:            * prefix (ST)
                            RNK12606:            * degree (IS)
                            RNK12607:            * name type code (ID)
                            RNK12608             * name representation code (ID)
          GOTO      RNK19999
.
RNK12601  RESET     NK102601                     * load family name (ST)
          GOTO      RNK19999
.
RNK12602  RESET     NK102602                     * load given name (ST)
          GOTO      RNK19999
.
RNK12603  RESET     NK102603                     * load middle name (ST)
          GOTO      RNK19999
.
RNK12604  RESET     NK102604                     * load suffix (ST)
          GOTO      RNK19999
.
RNK12605  RESET     NK102605                     * load prefix (ST)
          GOTO      RNK19999
.
RNK12606  RESET     NK102606                     * load degree (IS)
          GOTO      RNK19999
.
RNK12607  RESET     NK102607                     * load name type code (ID)
          GOTO      RNK19999
.
RNK12608  RESET     NK102608                     * load name rep. code (ID)
          GOTO      RNK19999
.
.         NK1.27 Nationality (CE)
.
RNK12700  BRANCH    COMPCNT,RNK12701:            * identifier (ST)
                            RNK12702:            * text (ST)
                            RNK12703:            * name of coding system (ST)
                            RNK12704:            * alternate identifier (ST)
                            RNK12705:            * alternate text (ST)
                            RNK12706             * name of alt. cod. system (ST)
          GOTO      RNK19999
.
RNK12701  RESET     NK102701                     * load identifier (ST)
          GOTO      RNK19999
.
RNK12702  RESET     NK102702                     * load text (ST)
          GOTO      RNK19999
.
RNK12703  RESET     NK102703                     * load name of cod. system (ST)
          GOTO      RNK19999
.
RNK12704  RESET     NK102704                     * load alt. identifier (ST)
          GOTO      RNK19999
.
RNK12705  RESET     NK102705                     * load alternate text (ST)
          GOTO      RNK19999
.
RNK12706  RESET     NK102706                     * load alt. cod. sys. name (ST)
          GOTO      RNK19999
.
.         NK1.28 Ethnic Group (CE)
.
RNK12800  BRANCH    COMPCNT,RNK12801:            * identifier (ST)
                            RNK12802:            * text (ST)
                            RNK12803:            * name of coding system (ST)
                            RNK12804:            * alternate identifier (ST)
                            RNK12805:            * alternate text (ST)
                            RNK12806             * name of alt. cod. system (ST)
          GOTO      RNK19999
.
RNK12801  RESET     NK102801                     * load identifier (ST)
          GOTO      RNK19999
.
RNK12802  RESET     NK102802                     * load text (ST)
          GOTO      RNK19999
.
RNK12803  RESET     NK102803                     * load name of cod. system (ST)
          GOTO      RNK19999
.
RNK12804  RESET     NK102804                     * load alt. identifier (ST)
          GOTO      RNK19999
.
RNK12805  RESET     NK102805                     * load alternate text (ST)
          GOTO      RNK19999
.
RNK12806  RESET     NK102806                     * load alt. cod. sys. name (ST)
          GOTO      RNK19999
.
.         NK1.29 Contact Reason (CE)
.                 (maximum of 1 repeat - 2 reasons in total)
.
RNK12900  COMPARE   REPTNCNT,TWO                 * maximum repeats reached ?
          GOTO      RNK19999 IF LESS             * yes
.
          BRANCH    COMPCNT,RNK12901:            * identifier (ST)
                            RNK12902:            * text (ST)
                            RNK12903:            * name of coding system (ST)
                            RNK12904:            * alternate identifier (ST)
                            RNK12905:            * alternate text (ST)
                            RNK12906             * name of alt. cod. system (ST)
          GOTO      RNK19999
.
RNK12901  RESET     NK102901[REPTNCNT]           * load identifier (ST)
          GOTO      RNK19999
.
RNK12902  RESET     NK102902[REPTNCNT]           * load text (ST)
          GOTO      RNK19999
.
RNK12903  RESET     NK102903[REPTNCNT]           * load name of cod. system (ST)
          GOTO      RNK19999
.
RNK12904  RESET     NK102904[REPTNCNT]           * load alt. identifier (ST)
          GOTO      RNK19999
.
RNK12905  RESET     NK102905[REPTNCNT]           * load alternate text (ST)
          GOTO      RNK19999
.
RNK12906  RESET     NK102906[REPTNCNT]           * load alt. cod. sys. name (ST)
          GOTO      RNK19999
.
.         NK1.30 Contact Person's Name (XPN)
.
RNK13000  BRANCH    COMPCNT,RNK13001:            * family name (ST)
                            RNK13002:            * given name (ST)
                            RNK13003:            * middle name (ST)
                            RNK13004:            * suffix (ST)
                            RNK13005:            * prefix (ST)
                            RNK13006:            * degree (IS)
                            RNK13007:            * name type code (ID)
                            RNK13008             * name representation code (ID)
          GOTO      RNK19999
.
RNK13001  RESET     NK103001                     * load family name (ST)
          MOVE      NK103001,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK103001
          GOTO      RNK19999
.
RNK13002  RESET     NK103002                     * load given name (ST)
          MOVE      NK103002,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK103002
          GOTO      RNK19999
.
RNK13003  RESET     NK103003                     * load middle name (ST)
          MOVE      NK103003,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK103003
          GOTO      RNK19999
.
RNK13004  RESET     NK103004                     * load suffix (ST)
          GOTO      RNK19999
.
RNK13005  RESET     NK103005                     * load prefix (ST)
          MOVE      NK103005,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK103005
          GOTO      RNK19999
.
RNK13006  RESET     NK103006                     * load degree (IS)
          GOTO      RNK19999
.
RNK13007  RESET     NK103007                     * load name type code (ID)
          GOTO      RNK19999
.
RNK13008  RESET     NK103008                     * load name rep. code (ID)
          GOTO      RNK19999
.
.         NK1.31 Contact Person's Telephone Number (XTN)
.                 (maximum of 2 repeats - 3 phone numbers in total)
.
RNK13100  COMPARE   REPTNCNT,THREE               * maximum repeats reached ?
          GOTO      RNK19999 IF LESS             * yes
.
          BRANCH    COMPCNT,RNK13101:            * text
                            RNK13102:            * telecomm. use code (ID)
                            RNK13103:            * telcomm. equipment type (ID)
                            RNK13104:            * email address (ST)
                            RNK13105:            * country code (NM)
                            RNK13106:            * area/city code (NM)
                            RNK13107:            * phone number (NM)
                            RNK13108:            * extension (NM)
                            RNK13109             * any text (ST)
          GOTO      RNK19999
.
RNK13101  RESET     NK103101[REPTNCNT]           * load text
          GOTO      RNK19999
.
RNK13102  RESET     NK103102[REPTNCNT]           * load telecomm. use code (ID)
          MOVE      NK103102[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK103102[REPTNCNT]
          GOTO      RNK19999
.
RNK13103  RESET     NK103103[REPTNCNT]           * load telcomm. equip.type (ID)
          MOVE      NK103103[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK103103[REPTNCNT]
          GOTO      RNK19999
.
RNK13104  RESET     NK103104[REPTNCNT]           * load email address (ST)
          MOVE      NK103104[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK103104[REPTNCNT]
          GOTO      RNK19999
.
RNK13105  RESET     NK103105[REPTNCNT]           * load country code (NM)
          GOTO      RNK19999
.
RNK13106  RESET     NK103106[REPTNCNT]           * load area/city code (NM)
          GOTO      RNK19999
.
RNK13107  RESET     NK103107[REPTNCNT]           * load phone number (NM)
          MOVE      NK103107[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK103107[REPTNCNT]
          GOTO      RNK19999
.
RNK13108  RESET     NK103108[REPTNCNT]           * load extension (NM)
          GOTO      RNK19999
.
RNK13109  RESET     NK103109[REPTNCNT]           * load any text (ST)
          MOVE      NK103109[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK103109[REPTNCNT]
          GOTO      RNK19999
.
.         NK1.32 Contact Person's Address (XAD)
.
RNK13200  BRANCH    COMPCNT,RNK13201:            * street address (ST)
                            RNK13202:            * other designation (ST)
                            RNK13203:            * city (ST)
                            RNK13204:            * state (ST)
                            RNK13205:            * postcode (ST)
                            RNK13206:            * country (ID)
                            RNK13207:            * address type (ID)
                            RNK13208:            * other geographic desig. (ST)
                            RNK13209:            * county (IS)
                            RNK13210:            * census tract (IS)
                            RNK13211             * address rep. code (ID)
          GOTO      RNK19999
.
RNK13201  RESET     NK103201                     * load street address (ST)
          MOVE      NK103201,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK103201
          REP       UPPLOW,NK103201
          MATCH     BLANKSTR,NK103201
          IF        !@EQUAL
            REP       "#"'",NK103201
          ENDIF
          GOTO      RNK19999
.
RNK13202  RESET     NK103202                     * load other designation (ST)
          MOVE      NK103202,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK103202
          REP       UPPLOW,NK103202
          MATCH     BLANKSTR,NK103202
          IF        !@EQUAL
            REP       "#"'",NK103202
          ENDIF
          GOTO      RNK19999
.
RNK13203  RESET     NK103203                     * load city (ST)
          MOVE      NK103203,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK103203
          REP       UPPLOW,NK103203
          MATCH     BLANKSTR,NK103203
          IF        !@EQUAL
            REP       "#"'",NK103203
          ENDIF
          GOTO      RNK19999
.
RNK13204  RESET     NK103204                     * load state (ST)
          MOVE      NK103204,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK103204
          REP       UPPLOW,NK103204
          MATCH     BLANKSTR,NK103204
          IF        !@EQUAL
            REP       "#"'",NK103204
          ENDIF
          GOTO      RNK19999
.
RNK13205  RESET     NK103205                     * load postcode (ST)
          MOVE      NK103205,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK103205
          GOTO      RNK19999
.
RNK13206  RESET     NK103206                     * load country (ID)
          MOVE      NK103206,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,NK103206
          GOTO      RNK19999
.
RNK13207  RESET     NK103207                     * load address type (ID)
          GOTO      RNK19999
.
RNK13208  RESET     NK103208                     * load other geog. desig. (ST)
          GOTO      RNK19999
.
RNK13209  RESET     NK103209                     * load county (IS)
          GOTO      RNK19999
.
RNK13210  RESET     NK103210                     * load census tract (IS)
          GOTO      RNK19999
.
RNK13211  RESET     NK103211                     * load address rep code (ID)
          GOTO      RNK19999
.
.         NK1.33 Next of Kin / Associated Party's Identifiers (CX)
.
RNK13300  BRANCH    COMPCNT,RNK13301:            * id (ST)
                            RNK13302:            * check digit (ST)
                            RNK13303:            * check digit scheme code (ID)
                            RNK13304:            * assigning authority (HD)
                            RNK13305:            * identifier type code (IS)
                            RNK13306             * assigning facility (HD)
          GOTO      RNK19999
.
RNK13301  RESET     NK103301                     * load id (ST)
          GOTO      RNK19999
.
RNK13302  RESET     NK103302                     * load check digit (ST)
          GOTO      RNK19999
.
RNK13303  RESET     NK103303                     * load chk dig scheme code (ID)
          GOTO      RNK19999
.
RNK13304  RESET     NK103304                     * load assigning authority (HD)
          GOTO      RNK19999
.
RNK13305  RESET     NK103305                     * load identifier typ code (IS)
          GOTO      RNK19999
.
RNK13306  RESET     NK103306                     * load assigning facility (HD)
          GOTO      RNK19999
.
.         NK1.34 Job Status (IS)
.
RNK13400  BRANCH    COMPCNT,RNK13401
          GOTO      RNK19999
.
RNK13401  RESET     NK103401
          GOTO      RNK19999
.
.         NK1.35 Race (CE)
.
RNK13500  BRANCH    COMPCNT,RNK13501:            * identifier (ST)
                            RNK13502:            * text (ST)
                            RNK13503:            * name of coding system (ST)
                            RNK13504:            * alternate identifier (ST)
                            RNK13505:            * alternate text (ST)
                            RNK13506             * name of alt. cod. system (ST)
          GOTO      RNK19999
.
RNK13501  RESET     NK103501                     * load identifier (ST)
          GOTO      RNK19999
.
RNK13502  RESET     NK103502                     * load text (ST)
          GOTO      RNK19999
.
RNK13503  RESET     NK103503                     * load name of cod. system (ST)
          GOTO      RNK19999
.
RNK13504  RESET     NK103504                     * load alt. identifier (ST)
          GOTO      RNK19999
.
RNK13505  RESET     NK103505                     * load alternate text (ST)
          GOTO      RNK19999
.
RNK13506  RESET     NK103506                     * load alt. cod. sys. name (ST)
          GOTO      RNK19999
.
.         NK1.36 Handicap (IS)
.
RNK13600  BRANCH    COMPCNT,RNK13601
          GOTO      RNK19999
.
RNK13601  RESET     NK103601
          GOTO      RNK19999
.
.         NK1.37 Contact Person Social Security Number (ST)
.
RNK13700  BRANCH    COMPCNT,RNK13701
          GOTO      RNK19999
.
RNK13701  RESET     NK103701
          GOTO      RNK19999
.
RNK19999  RETURN
+
.*****************************************************************************
.*                              RZXP0000                                     *
.*                      Reset all ZXP variables                              *
.*****************************************************************************
.
RZXP0000  BRANCH    FIELDNO,RZXP0100:            * Pension No. Expiry Date
                            RZXP0200             * Medicare Expiry Date
.
.         Invalid ZXP field received, so ignore it
.
          GOTO      RZXP9999
.
.         ZXP.1  Pension Number Expiry Date
.
RZXP0100  BRANCH    COMPCNT,RZXP0101
          GOTO      RZXP9999
.
RZXP0101  RESET     ZXP00101
          GOTO      RZXP9999
.
.         ZXP.2  Medicare Expiry Date
.
RZXP0200  BRANCH    COMPCNT,RZXP0201
          GOTO      RZXP9999
.
RZXP0201  RESET     ZXP00201
          GOTO      RZXP9999
.
RZXP9999  RETURN
+
.*****************************************************************************
.*                              RQRD0000                                     *
.*                      Reset all QRD variables                              *
.*****************************************************************************
.
RQRD0000  BRANCH    FIELDNO,RQRD0100:            * Query Date/Time
                            RQRD0200:            * Query Format Code
                            RQRD0300:            * Query Priority
                            RQRD0400:            * Query ID
                            RQRD0500:            * Deferred Response Type
                            RQRD0600:            * Deferred Response Date/Time
                            RQRD0700:            * Quantity Limited Request
                            RQRD0800:            * Who Subject Filter
                            RQRD0900:            * What Subject Filter
                            RQRD1000:            * What Department Data Code
                            RQRD1100:            * What Data Code Value Qual.
                            RQRD1200             * Query Results Level
.
.         Invalid QRD field, so ignore it
.
          GOTO      RQRD9999
.
.         QRD-01  Query Date/Time (TS)
.
RQRD0100  BRANCH    COMPCNT,RQRD0101
          GOTO      RQRD9999
.
RQRD0101  RESET     QRD00101
          GOTO      RQRD9999
.
.         QRD-02  Query Format Code (ID)
.
RQRD0200  BRANCH    COMPCNT,RQRD0201
          GOTO      RQRD9999
.
RQRD0201  RESET     QRD00201
          GOTO      RQRD9999
.
.         QRD-03  Query Priority (ID)
.
RQRD0300  BRANCH    COMPCNT,RQRD0301
          GOTO      RQRD9999
.
RQRD0301  RESET     QRD00301
          GOTO      RQRD9999
.
.         QRD-04  Query ID (ST)
.
RQRD0400  BRANCH    COMPCNT,RQRD0401
          GOTO      RQRD9999
.
RQRD0401  RESET     QRD00401
          GOTO      RQRD9999
.
.         QRD-05  Deferred Response Type (ID)
.
RQRD0500  BRANCH    COMPCNT,RQRD0501
          GOTO      RQRD9999
.
RQRD0501  RESET     QRD00501
          GOTO      RQRD9999
.
.         QRD-06  Deferred Response Date/Time (TS)
.
RQRD0600  BRANCH    COMPCNT,RQRD0601
          GOTO      RQRD9999
.
RQRD0601  RESET     QRD00601
          GOTO      RQRD9999
.
.         QRD-07 Quantity Limited Request (CQ)
.
RQRD0700  BRANCH    COMPCNT,RQRD0701:            * quantity (NM)
                            RQRD0702             * units (CE)
          GOTO      RQRD9999
.
RQRD0701  RESET     QRD00701                     * quantity (NM)
          GOTO      RQRD9999
.
RQRD0702  RESET     QRD00702                     * units (CE)
          GOTO      RQRD9999
.
.         QRD-08 Who Subject Filter (XCN)
.
RQRD0800  BRANCH    COMPCNT,RQRD0801:            * ID number (ST)
                            RQRD0802:            * family name (ST)
                            RQRD0803:            * given name (ST)
                            RQRD0804:            * middle name (ST)
                            RQRD0805:            * suffix (ST)
                            RQRD0806:            * prefix (ST)
                            RQRD0807:            * degree (IS)
                            RQRD0808:            * source table (IS)
                            RQRD0809:            * assigning authority (HD)
                            RQRD0810:            * name type code (ID)
                            RQRD0811:            * identifier check digit (ST)
                            RQRD0812:            * check digit scheme (ID)
                            RQRD0813:            * identifier type code (IS)
                            RQRD0814:            * assigning facility (HD)
                            RQRD0815             * name representation code (ID)
          GOTO      RQRD9999
.
RQRD0801  RESET     QRD00801                     * ID number (NM)
          GOTO      RQRD9999
.
RQRD0802  RESET     QRD00802                     * family name (ST)
          GOTO      RQRD9999
.
RQRD0803  RESET     QRD00803                     * given name (ST)
          GOTO      RQRD9999
.
RQRD0804  RESET     QRD00804                     * middle name (ST)
          GOTO      RQRD9999
.
RQRD0805  RESET     QRD00805                     * suffix (ST)
          GOTO      RQRD9999
.
RQRD0806  RESET     QRD00806                     * prefix (ST)
          GOTO      RQRD9999
.
RQRD0807  RESET     QRD00807                     * degree (IS)
          GOTO      RQRD9999
.
RQRD0808  RESET     QRD00808                     * source table (IS)
          GOTO      RQRD9999
.
RQRD0809  RESET     QRD00809                     * assigning authority (HD)
          GOTO      RQRD9999
.
RQRD0810  RESET     QRD00810                     * name type code (ID)
          GOTO      RQRD9999
.
RQRD0811  RESET     QRD00811                     * identifier check digit (ST)
          GOTO      RQRD9999
.
RQRD0812  RESET     QRD00812                     * check digit scheme (ID)
          GOTO      RQRD9999
.
RQRD0813  RESET     QRD00813                     * identifier type code (IS)
          GOTO      RQRD9999
.
RQRD0814  RESET     QRD00814                     * assigning facility (HD)
          GOTO      RQRD9999
.
RQRD0815  RESET     QRD00815                     * name representation code (ID)
          GOTO      RQRD9999
.
.         QRD-09 What Subject Filter (CE)
.
RQRD0900  BRANCH    COMPCNT,RQRD0901:            * identifier (ID)
                            RQRD0902:            * text (ST)
                            RQRD0903:            * name of coding system (ST)
                            RQRD0904:            * alternate identifier (ID)
                            RQRD0905:            * alternate text (ST)
                            RQRD0906             * name alt. coding system (ST)
          GOTO      RQRD9999
.
RQRD0901  RESET     QRD00901                     * identifier (ID)
          GOTO      RQRD9999
.
RQRD0902  RESET     QRD00902                     * text (ST)
          GOTO      RQRD9999
.
RQRD0903  RESET     QRD00903                     * name of coding system (ST)
          GOTO      RQRD9999
.
RQRD0904  RESET     QRD00904                     * alternate identifier (ID)
          GOTO      RQRD9999
.
RQRD0905  RESET     QRD00905                     * alternate text (ST)
          GOTO      RQRD9999
.
RQRD0906  RESET     QRD00906                     * name alt. coding system (ST)
          GOTO      RQRD9999
.
.         QRD-10 What Department Date Code (CE)
.
RQRD1000  BRANCH    COMPCNT,RQRD1001:            * identifier (ID)
                            RQRD1002:            * text (ST)
                            RQRD1003:            * name of coding system (ST)
                            RQRD1004:            * alternate identifier (ID)
                            RQRD1005:            * alternate text (ST)
                            RQRD1006             * name alt. coding system (ST)
          GOTO      RQRD9999
.
RQRD1001  RESET     QRD01001                     * identifier (ID)
          GOTO      RQRD9999
.
RQRD1002  RESET     QRD01002                     * text (ST)
          GOTO      RQRD9999
.
RQRD1003  RESET     QRD01003                     * name of coding system (ST)
          GOTO      RQRD9999
.
RQRD1004  RESET     QRD01004                     * alternate identifier (ID)
          GOTO      RQRD9999
.
RQRD1005  RESET     QRD01005                     * alternate text (ST)
          GOTO      RQRD9999
.
RQRD1006  RESET     QRD01006                     * name alt. coding system (ST)
          GOTO      RQRD9999
.
.         QRD-11 What Data Code Value Qual .(CM)
.
RQRD1100  BRANCH    COMPCNT,RQRD1101:            * first data code value (ST)
                            RQRD1102             * last data code value (ST)
          GOTO      RQRD9999
.
RQRD1101  RESET     QRD01101                     * first data code value (ST)
          GOTO      RQRD9999
.
RQRD1102  RESET     QRD01102                     * last data code value (ST)
          GOTO      RQRD9999
.
.         QRD-12  Query Results Level (ID)
.
RQRD1200  BRANCH    COMPCNT,RQRD1201
          GOTO      RQRD9999
.
RQRD1201  RESET     QRD01201
          GOTO      RQRD9999
.
RQRD9999  RETURN
+
.*****************************************************************************
.*                              RPID0000                                     *
.*                      Reset all PID variables                              *
.*****************************************************************************
.
RPID0000  BRANCH    FIELDNO,RPID0100:            * set id
                            RPID0200:            * patient id
                            RPID0300:            * patient identifier list
                            RPID0400:            * alternate patient id
                            RPID0500:            * patient name
                            RPID0600:            * mother's maiden name
                            RPID0700:            * date/time of birth
                            RPID0800:            * sex
                            RPID0900:            * patient alias
                            RPID1000:            * race
                            RPID1100:            * patient address
                            RPID1200:            * county code
                            RPID1300:            * phone number - home
                            RPID1400:            * phone number - business
                            RPID1500:            * primary language
                            RPID1600:            * marital status
                            RPID1700:            * religion
                            RPID1800:            * patient account number
                            RPID1900:            * ssn number
                            RPID2000:            * driver's license number
                            RPID2100:            * mother's identifier
                            RPID2200:            * ethnic group
                            RPID2300:            * birth place
                            RPID2400:            * multiple birth indicator
                            RPID2500:            * birth order
                            RPID2600:            * citizenship
                            RPID2700:            * veterans military status
                            RPID2800:            * nationality
                            RPID2900:            * patient death date/time
                            RPID3000:            * patient death indicator
                            RPID3100:            * Identity unknown indicator
                            RPID3200:            * Identity reliability code
                            RPID3300             * Last update date/time
          GOTO      RPID9999
.
.         PID.1 - Set Id
.
RPID0100  BRANCH    COMPCNT,RPID0101
          GOTO      RPID9999
.
RPID0101  RESET     PID00101
          GOTO      RPID9999
.
.         PID.2 - Patient Id
.
RPID0200  BRANCH    COMPCNT,RPID0201:
                            RPID0202:
                            RPID0203:
                            RPID0204:
                            RPID0205:
                            RPID0206
          GOTO      RPID9999
.
RPID0201  RESET     PID00201
          GOTO      RPID9999
.
RPID0202  RESET     PID00202
          GOTO      RPID9999
.
RPID0203  RESET     PID00203
          GOTO      RPID9999
.
RPID0204  RESET     PID00204
          GOTO      RPID9999
.
RPID0205  RESET     PID00205
          GOTO      RPID9999
.
RPID0206  RESET     PID00206
          GOTO      RPID9999
.
.         PID.3 - Patient Identifier List
.                 (maximum of 4 repeats - 5 identifiers in total)
.
RPID0300  COMPARE   REPTNCNT,FIVE                * maximum repeats reached ?
          GOTO      RPID9999 IF LESS             * yes
.
          BRANCH    COMPCNT,RPID0301:
                            RPID0302:
                            RPID0303:
                            RPID0304:
                            RPID0305:
                            RPID0306
          GOTO      RPID9999
.
RPID0301  RESET     PID00301[REPTNCNT]
          MOVE      PID00301[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID00301[REPTNCNT]
          GOTO      RPID9999
.
RPID0302  RESET     PID00302[REPTNCNT]
          GOTO      RPID9999
.
RPID0303  RESET     PID00303[REPTNCNT]
          GOTO      RPID9999
.
RPID0304  RESET     PID00304[REPTNCNT]
          GOTO      RPID9999
.
RPID0305  RESET     PID00305[REPTNCNT]
          GOTO      RPID9999
.
RPID0306  RESET     PID00306[REPTNCNT]
          GOTO      RPID9999
.
.         PID.4 - Alternate Patient Id
.
RPID0400  BRANCH    COMPCNT,RPID0401:
                            RPID0402:
                            RPID0403:
                            RPID0404:
                            RPID0405:
                            RPID0406
          GOTO      RPID9999
.
RPID0401  RESET     PID00401
          GOTO      RPID9999
.
RPID0402  RESET     PID00402
          GOTO      RPID9999
.
RPID0403  RESET     PID00403
          GOTO      RPID9999
.
RPID0404  RESET     PID00404
          GOTO      RPID9999
.
RPID0405  RESET     PID00405
          GOTO      RPID9999
.
RPID0406  RESET     PID00406
          GOTO      RPID9999
.
.         PID.5 - Patient Name
.
RPID0500  BRANCH    COMPCNT,RPID0501:
                            RPID0502:
                            RPID0503:
                            RPID0504:
                            RPID0505:
                            RPID0506:
                            RPID0507:
                            RPID0508
          GOTO      RPID9999
.
RPID0501  RESET     PID00501
          REP       UPPLOW,PID00501
          MOVE      PID00501,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID00501
          MATCH     BLANKSTR,PID00501
          IF        !@EQUAL
            REP       "#"'",PID00501
          ENDIF
          GOTO      RPID9999
.
RPID0502  RESET     PID00502
          REP       UPPLOW,PID00502
          MOVE      PID00502,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID00502
          MATCH     BLANKSTR,PID00502
          IF        !@EQUAL
            REP       "#"'",PID00502
          ENDIF
          GOTO      RPID9999
.
RPID0503  RESET     PID00503
          REP       UPPLOW,PID00503
          MOVE      PID00503,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID00503
          MATCH     BLANKSTR,PID00503
          IF        !@EQUAL
            REP       "#"'",PID00503
          ENDIF
          GOTO      RPID9999
.
RPID0504  RESET     PID00504
          GOTO      RPID9999
.
RPID0505  RESET     PID00505
          MOVE      PID00505,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID00505
          GOTO      RPID9999
.
RPID0506  RESET     PID00506
          GOTO      RPID9999
.
RPID0507  RESET     PID00507
          GOTO      RPID9999
.
RPID0508  RESET     PID00508
          GOTO      RPID9999
.
.         PID.6 - Mother's Maiden Name
.
RPID0600  BRANCH    COMPCNT,RPID0601:
                            RPID0602:
                            RPID0603:
                            RPID0604:
                            RPID0605:
                            RPID0606:
                            RPID0607:
                            RPID0608
          GOTO      RPID9999
.
RPID0601  RESET     PID00601
          GOTO      RPID9999
.
RPID0602  RESET     PID00602
          GOTO      RPID9999
.
RPID0603  RESET     PID00603
          GOTO      RPID9999
.
RPID0604  RESET     PID00604
          GOTO      RPID9999
.
RPID0605  RESET     PID00605
          GOTO      RPID9999
.
RPID0606  RESET     PID00606
          GOTO      RPID9999
.
RPID0607  RESET     PID00607
          GOTO      RPID9999
.
RPID0608  RESET     PID00608
          GOTO      RPID9999
.
.         PID.7 - Date/Time of Birth
.
RPID0700  BRANCH    COMPCNT,RPID0701
          GOTO      RPID9999
.
RPID0701  RESET     PID00701
          GOTO      RPID9999
.
.         PID.8 - Sex
.
RPID0800  BRANCH    COMPCNT,RPID0801
          GOTO      RPID9999
.
RPID0801  RESET     PID00801
          GOTO      RPID9999
.
.         PID.9 - Patient Alias
.                 (maximum of 79 repeats - 80 aliases in total)
.
RPID0900  COMPARE   REPTNCNT,EIGHTY              * maximum repeats reached ?
          GOTO      RPID9999 IF LESS             * yes
.
          BRANCH    COMPCNT,RPID0901:
                            RPID0902:
                            RPID0903:
                            RPID0904:
                            RPID0905:
                            RPID0906:
                            RPID0907:
                            RPID0908
          GOTO      RPID9999
.
RPID0901  RESET     PID00901[REPTNCNT]
          MOVE      PID00901[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID00901[REPTNCNT]
          GOTO      RPID9999
.
RPID0902  RESET     PID00902[REPTNCNT]
          MOVE      PID00902[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID00902[REPTNCNT]
          GOTO      RPID9999
.
RPID0903  RESET     PID00903[REPTNCNT]
          MOVE      PID00903[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID00903[REPTNCNT]
          GOTO      RPID9999
.
RPID0904  RESET     PID00904[REPTNCNT]
          GOTO      RPID9999
.
RPID0905  RESET     PID00905[REPTNCNT]
          GOTO      RPID9999
.
RPID0906  RESET     PID00906[REPTNCNT]
          GOTO      RPID9999
.
RPID0907  RESET     PID00907[REPTNCNT]
          GOTO      RPID9999
.
RPID0908  RESET     PID00908[REPTNCNT]
          GOTO      RPID9999
.
.         PID.10 - Race
.
RPID1000  BRANCH    COMPCNT,RPID1001:
                            RPID1002:
                            RPID1003:
                            RPID1004:
                            RPID1005:
                            RPID1006
          GOTO      RPID9999
.
RPID1001  RESET     PID01001
          GOTO      RPID9999
.
RPID1002  RESET     PID01002
          GOTO      RPID9999
.
RPID1003  RESET     PID01003
          GOTO      RPID9999
.
RPID1004  RESET     PID01004
          GOTO      RPID9999
.
RPID1005  RESET     PID01005
          GOTO      RPID9999
.
RPID1006  RESET     PID01006
          GOTO      RPID9999
.
.         PID.11 - Patient Address
.                  (maximum of 1 repeat - 2 addresses in total)
.
RPID1100  COMPARE   REPTNCNT,TWO                 * maximum repeats reached ?
          GOTO      RPID9999 IF LESS             * yes
.
          BRANCH    COMPCNT,RPID1101:
                            RPID1102:
                            RPID1103:
                            RPID1104:
                            RPID1105:
                            RPID1106:
                            RPID1107:
                            RPID1108:
                            RPID1109:
                            RPID1110:
                            RPID1111
          GOTO      RPID9999
.
RPID1101  RESET     PID01101[REPTNCNT]
          MOVE      PID01101[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID01101[REPTNCNT]
          REP       UPPLOW,PID01101[REPTNCNT]
          MATCH     BLANKSTR,PID01101[REPTNCNT]
          IF        !@EQUAL
            REP       "#"'",PID01101[REPTNCNT]
          ENDIF
          GOTO      RPID9999
.
RPID1102  RESET     PID01102[REPTNCNT]
          MOVE      PID01102[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID01102[REPTNCNT]
          REP       UPPLOW,PID01102[REPTNCNT]
          MATCH     BLANKSTR,PID01102[REPTNCNT]
          IF        !@EQUAL
            REP       "#"'",PID01102[REPTNCNT]
          ENDIF
          GOTO      RPID9999
.
RPID1103  RESET     PID01103[REPTNCNT]
          MOVE      PID01103[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID01103[REPTNCNT]
          REP       UPPLOW,PID01103[REPTNCNT]
          MATCH     BLANKSTR,PID01103[REPTNCNT]
          IF        !@EQUAL
            REP       "#"'",PID01103[REPTNCNT]
          ENDIF
          GOTO      RPID9999
.
RPID1104  RESET     PID01104[REPTNCNT]
          MOVE      PID01104[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID01104[REPTNCNT]
          REP       UPPLOW,PID01104[REPTNCNT]
          MATCH     BLANKSTR,PID01104[REPTNCNT]
          IF        !@EQUAL
            REP       "#"'",PID01104[REPTNCNT]
          ENDIF
          GOTO      RPID9999
.
RPID1105  RESET     PID01105[REPTNCNT]
          MOVE      PID01105[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID01105[REPTNCNT]
          GOTO      RPID9999
.
RPID1106  RESET     PID01106[REPTNCNT]
          MOVE      PID01106[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID01106[REPTNCNT]
          GOTO      RPID9999
.
RPID1107  RESET     PID01107[REPTNCNT]
          GOTO      RPID9999
.
RPID1108  RESET     PID01108[REPTNCNT]
          GOTO      RPID9999
.
RPID1109  RESET     PID01109[REPTNCNT]
          GOTO      RPID9999
.
RPID1110  RESET     PID01110[REPTNCNT]
          GOTO      RPID9999
.
RPID1111  RESET     PID01111[REPTNCNT]
          GOTO      RPID9999
.
.         PID.12 - County Code
.
RPID1200  BRANCH    COMPCNT,RPID1201
          GOTO      RPID9999
.
RPID1201  RESET     PID01201
          GOTO      RPID9999
.
.         PID.13 - Phone Number - Home
.                  (maximum of 1 repeat - 2 phone numbers in total)
.
RPID1300  COMPARE   REPTNCNT,TWO                 * maximum repeats reached ?
          GOTO      RPID9999 IF LESS             * yes
.
          BRANCH    COMPCNT,RPID1301:
                            RPID1302:
                            RPID1303:
                            RPID1304:
                            RPID1305:
                            RPID1306:
                            RPID1307:
                            RPID1308:
                            RPID1309
          GOTO      RPID9999
.
RPID1301  RESET     PID01301[REPTNCNT]
          GOTO      RPID9999
.
RPID1302  RESET     PID01302[REPTNCNT]
          GOTO      RPID9999
.
RPID1303  RESET     PID01303[REPTNCNT]
          GOTO      RPID9999
.
RPID1304  RESET     PID01304[REPTNCNT]
          GOTO      RPID9999
.
RPID1305  RESET     PID01305[REPTNCNT]
          GOTO      RPID9999
.
RPID1306  RESET     PID01306[REPTNCNT]
          GOTO      RPID9999
.
RPID1307  RESET     PID01307[REPTNCNT]
          MOVE      PID01307[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID01307[REPTNCNT]
          GOTO      RPID9999
.
RPID1308  RESET     PID01308[REPTNCNT]
          GOTO      RPID9999
.
RPID1309  RESET     PID01309[REPTNCNT]
          MOVE      PID01309[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID01309[REPTNCNT]
          GOTO      RPID9999
.
.         PID.14 - Phone Number - Business
.                  (maximum of 1 repeat - 2 phone numbers in total)
.
RPID1400  COMPARE   REPTNCNT,TWO                 * maximum repeats reached ?
          GOTO      RPID9999 IF LESS             * yes
.
          BRANCH    COMPCNT,RPID1401:
                            RPID1402:
                            RPID1403:
                            RPID1404:
                            RPID1405:
                            RPID1406:
                            RPID1407:
                            RPID1408:
                            RPID1409
          GOTO      RPID9999
.
RPID1401  RESET     PID01401[REPTNCNT]
          GOTO      RPID9999
.
RPID1402  RESET     PID01402[REPTNCNT]
          GOTO      RPID9999
.
RPID1403  RESET     PID01403[REPTNCNT]
          GOTO      RPID9999
.
RPID1404  RESET     PID01404[REPTNCNT]
          GOTO      RPID9999
.
RPID1405  RESET     PID01405[REPTNCNT]
          GOTO      RPID9999
.
RPID1406  RESET     PID01406[REPTNCNT]
          GOTO      RPID9999
.
RPID1407  RESET     PID01407[REPTNCNT]
          MOVE      PID01407[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID01407[REPTNCNT]
          GOTO      RPID9999
.
RPID1408  RESET     PID01408[REPTNCNT]
          GOTO      RPID9999
.
RPID1409  RESET     PID01409[REPTNCNT]
          MOVE      PID01409[REPTNCNT],OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID01409[REPTNCNT]
          GOTO      RPID9999
.
.         PID.15 - Primary Language
.
RPID1500  BRANCH    COMPCNT,RPID1501:
                            RPID1502:
                            RPID1503:
                            RPID1504:
                            RPID1505:
                            RPID1506
          GOTO      RPID9999
.
RPID1501  RESET     PID01501
          GOTO      RPID9999
.
RPID1502  RESET     PID01502
          GOTO      RPID9999
.
RPID1503  RESET     PID01503
          GOTO      RPID9999
.
RPID1504  RESET     PID01504
          GOTO      RPID9999
.
RPID1505  RESET     PID01505
          GOTO      RPID9999
.
RPID1506  RESET     PID01506
          GOTO      RPID9999
.
.         PID.16 - Marital Status
.
RPID1600  BRANCH    COMPCNT,RPID1601:
                            RPID1602:
                            RPID1603:
                            RPID1604:
                            RPID1605:
                            RPID1606
          GOTO      RPID9999
.
RPID1601  RESET     PID01601
          GOTO      RPID9999
.
RPID1602  RESET     PID01602
          GOTO      RPID9999
.
RPID1603  RESET     PID01603
          GOTO      RPID9999
.
RPID1604  RESET     PID01604
          GOTO      RPID9999
.
RPID1605  RESET     PID01605
          GOTO      RPID9999
.
RPID1606  RESET     PID01606
          GOTO      RPID9999
.
.         PID.17 - Religion
.
RPID1700  BRANCH    COMPCNT,RPID1701:
                            RPID1702:
                            RPID1703:
                            RPID1704:
                            RPID1705:
                            RPID1706
          GOTO      RPID9999
.
RPID1701  RESET     PID01701
          MOVE      PID01701,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID01701
          GOTO      RPID9999
.
RPID1702  RESET     PID01702
          GOTO      RPID9999
.
RPID1703  RESET     PID01703
          GOTO      RPID9999
.
RPID1704  RESET     PID01704
          GOTO      RPID9999
.
RPID1705  RESET     PID01705
          GOTO      RPID9999
.
RPID1706  RESET     PID01706
          GOTO      RPID9999
.
.         PID.18 - Patient Account Number
.
RPID1800  BRANCH    COMPCNT,RPID1801:
                            RPID1802:
                            RPID1803:
                            RPID1804:
                            RPID1805:
                            RPID1806
          GOTO      RPID9999
.
RPID1801  RESET     PID01801
          GOTO      RPID9999
.
RPID1802  RESET     PID01802
          GOTO      RPID9999
.
RPID1803  RESET     PID01803
          GOTO      RPID9999
.
RPID1804  RESET     PID01804
          GOTO      RPID9999
.
RPID1805  RESET     PID01805
          GOTO      RPID9999
.
RPID1806  RESET     PID01806
          GOTO      RPID9999
.
.         PID.19 - SSN Number
.
RPID1900  BRANCH    COMPCNT,RPID1901
          GOTO      RPID9999
.
RPID1901  RESET     PID01901
          GOTO      RPID9999
.
.         PID.20 - Driver's License Number
.
RPID2000  BRANCH    COMPCNT,RPID2001:
                            RPID2002:
                            RPID2003
          GOTO      RPID9999
.
RPID2001  RESET     PID02001
          GOTO      RPID9999
.
RPID2002  RESET     PID02002
          GOTO      RPID9999
.
RPID2003  RESET     PID02003
          GOTO      RPID9999
.
.         PID.21 - Mother's Identifier
.
RPID2100  BRANCH    COMPCNT,RPID2101:
                            RPID2102:
                            RPID2103:
                            RPID2104:
                            RPID2105:
                            RPID2106
          GOTO      RPID9999
.
RPID2101  RESET     PID02101
          GOTO      RPID9999
.
RPID2102  RESET     PID02102
          GOTO      RPID9999
.
RPID2103  RESET     PID02103
          GOTO      RPID9999
.
RPID2104  RESET     PID02104
          GOTO      RPID9999
.
RPID2105  RESET     PID02105
          GOTO      RPID9999
.
RPID2106  RESET     PID02106
          GOTO      RPID9999
.
.         PID.22 - Ethnic Group
.
RPID2200  BRANCH    COMPCNT,RPID2201:
                            RPID2202:
                            RPID2203:
                            RPID2204:
                            RPID2205:
                            RPID2206
          GOTO      RPID9999
.
RPID2201  RESET     PID02201
          GOTO      RPID9999
.
RPID2202  RESET     PID02202
          GOTO      RPID9999
.
RPID2203  RESET     PID02203
          GOTO      RPID9999
.
RPID2204  RESET     PID02204
          GOTO      RPID9999
.
RPID2205  RESET     PID02205
          GOTO      RPID9999
.
RPID2206  RESET     PID02206
          GOTO      RPID9999
.
.         PID.23 - Birth Place
.
RPID2300  BRANCH    COMPCNT,RPID2301
          GOTO      RPID9999
.
RPID2301  RESET     PID02301
          GOTO      RPID9999
.
.         PID.24 - Multiple Birth Indicator
.
RPID2400  BRANCH    COMPCNT,RPID2401
          GOTO      RPID9999
.
RPID2401  RESET     PID02401
          GOTO      RPID9999
.
.         PID.25 - Birth Order
.
RPID2500  BRANCH    COMPCNT,RPID2501
          GOTO      RPID9999
.
RPID2501  RESET     PID02501
          GOTO      RPID9999
.
.         PID.26 - Citizenship
.
RPID2600  BRANCH    COMPCNT,RPID2601:
                            RPID2602:
                            RPID2603:
                            RPID2604:
                            RPID2605:
                            RPID2606
          GOTO      RPID9999
.
RPID2601  RESET     PID02601
          GOTO      RPID9999
.
RPID2602  RESET     PID02602
          GOTO      RPID9999
.
RPID2603  RESET     PID02603
          GOTO      RPID9999
.
RPID2604  RESET     PID02604
          GOTO      RPID9999
.
RPID2605  RESET     PID02605
          GOTO      RPID9999
.
RPID2606  RESET     PID02606
          GOTO      RPID9999
.
.         PID.27 - Veteran's Military Status
.
RPID2700  BRANCH    COMPCNT,RPID2701:
                            RPID2702:
                            RPID2703:
                            RPID2704:
                            RPID2705:
                            RPID2706
          GOTO      RPID9999
.
RPID2701  RESET     PID02701
          GOTO      RPID9999
.
RPID2702  RESET     PID02702
          GOTO      RPID9999
.
RPID2703  RESET     PID02703
          GOTO      RPID9999
.
RPID2704  RESET     PID02704
          GOTO      RPID9999
.
RPID2705  RESET     PID02705
          GOTO      RPID9999
.
RPID2706  RESET     PID02706
          GOTO      RPID9999
.
.         PID.28 - Nationality
.
RPID2800  BRANCH    COMPCNT,RPID2801:
                            RPID2802:
                            RPID2803:
                            RPID2804:
                            RPID2805:
                            RPID2806
          GOTO      RPID9999
.
RPID2801  RESET     PID02801
          MOVE      PID02801,OLDSTRNG
          CALL      CONV0000                     * convert any escape sequences
          MOVE      NEWSTRNG,PID02801
          GOTO      RPID9999
.
RPID2802  RESET     PID02802
          GOTO      RPID9999
.
RPID2803  RESET     PID02803
          GOTO      RPID9999
.
RPID2804  RESET     PID02804
          GOTO      RPID9999
.
RPID2805  RESET     PID02805
          GOTO      RPID9999
.
RPID2806  RESET     PID02806
          GOTO      RPID9999
.
.         PID.29 - Patient Death Date/Time
.
RPID2900  BRANCH    COMPCNT,RPID2901
          GOTO      RPID9999
.
RPID2901  RESET     PID02901
          GOTO      RPID9999
.
.         PID.30 - Patient Death Indicator
.
RPID3000  BRANCH    COMPCNT,RPID3001
          GOTO      RPID9999
.
RPID3001  RESET     PID03001
          GOTO      RPID9999
.
.         PID.31 Identity unknown indicator
.
RPID3100  BRANCH    COMPCNT,RPID3101
          GOTO      RPID9999
.
RPID3101  RESET     PID03101
          GOTO      RPID9999
.
.         PID.32 Identity reliability code
.
RPID3200  BRANCH    COMPCNT,RPID3201
          GOTO      RPID9999
.
RPID3201  RESET     PID03201
          GOTO      RPID9999
.
.         PID.33 Last update date/time (TS)
.
RPID3300  BRANCH    COMPCNT,RPID3301
          GOTO      RPID9999
.
RPID3301  RESET     PID03301
          GOTO      RPID9999
.
RPID9999  RETURN
+
.*****************************************************************************
.*                            VMSH0000             Called by: A19HNDLR       *
.*      Validate that the mandatory MSH fields are populated or null.        *
.*****************************************************************************
.
.         Encoding Characters
.
VMSH0000  MOVELPTR  MSH00201,FORM3               * field populated ?
          COMPARE   FOUR,FORM3                   * all encoding chars present ?
          GOTO      VMSH2000 IF NOT LESS         * yes
.
          MOVE      "MSH.2: Encoding characters incomplete",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         Message Type - Component 1
.
VMSH2000  STRIP     MSH00901
          MOVELPTR  MSH00901,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "MSH.9: Message Type not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Message Type - Component 2
.
          STRIP     MSH00902
          MOVELPTR  MSH00902,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "MSH.9: Trigger Event not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VMSH5000
          ENDIF
          MOVE      MSH00902,MESSTYPE
.
          MATCH     "A19",MESSTYPE
          IF        !@EQUAL
            MOVE      "MSH.9: Message Type not available",ERRORDSC
            MOVE      "200",ERRORNUM
            CALL      EROR0000
          ENDIF

.         Message Control ID
.
VMSH5000  STRIP     MSH01001
          MOVELPTR  MSH01001,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "MSH.10: Message Control ID not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.         Processing Id
.
VMSH6000  STRIP     MSH01101
          MOVELPTR  MSH01101,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "MSH.11: Processing ID not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VMSH7000
          ENDIF
.
          MATCH     ANSP,MSH01101                * Production ?
          GOTO      VMSH7000 IF EQUAL            * yes - ok
.
          MATCH     ANSD,MSH01101                * Debugging ?
          GOTO      VMSH7000 IF EQUAL            * yes - ok
.
          MATCH     ANST,MSH01101                * Training ?
          GOTO      VMSH7000 IF EQUAL            * yes - ok
.
          MOVE      "MSH.11: Processing ID not valid",ERRORDSC
          MOVE      "202",ERRORNUM
          CALL      EROR0000
.
.         Version Id
.
VMSH7000  STRIP     MSH01201
          MOVELPTR  MSH01201,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "MSH.12: Version ID not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VMSH9999
          ENDIF
.
          IF        FORM3 <> 3
            MOVE      "MSH.12: Version ID incorrect length",ERRORDSC
            MOVE      "203",ERRORNUM
            CALL      EROR0000
            GOTO      VMSH9999
          ENDIF
.
          MATCH     "2.4",MSH01201
          IF        !@EQUAL
            MOVE      "MSH.12: Version ID not valid",ERRORDSC
            MOVE      "203",ERRORNUM
            CALL      EROR0000
            GOTO      VMSH9999
          ENDIF
.
.         Message Date/Time (mandatory for HL7 2.4 only)
.
          STRIP     MSH00701
          MOVELPTR  MSH00701,FORM3               * field populated ?
          IF        FORM3 = 0
            MOVE      "MSH.7: Message DateTime not populated",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
            GOTO      VMSH9999
          ENDIF
.
          MATCH     BLANKSTR,MSH00701            * field null ?
          IF        @EQUAL
            MOVE      "MSH.7: Message DateTime mandatory",ERRORDSC
            MOVE      "101",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          GOTO      VMSH9999
.
VMSH9999  RETURN
+
.*****************************************************************************
.*                            VMSA0000             Called by: A19HNDLR       *
.*      Validate that the mandatory MSA fields are not null or spaces        *
.* Returns: ERORFLAG 0 = no errors                                           *
.*                   1 = error found                                         *
.*          MTCHFLAG - message id match flag                                 *
.*                   0 = match                                               *
.*                   1 = no match                                            *
.*****************************************************************************
.
.         Acknowledgement Code
.
VMSA0000  MOVELPTR  MSA001,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VMSA0500                   * yes - error
          ENDIF
          MATCH     MSA001,SP100                 * no, is it blank ?
          GOTO      VMSA1000 IF NOT EQUAL        * no
.
VMSA0500  MOVE      "MSA-01 - Acknowledgement code not present",ERORTEXT
          MOVE      TWO,MLOGFLAG                 * set for error logging
          CALL      LOGM0000                     * write error to log file
          IF        DISPFLAG = 1
            DISPLAY   ERORTEXT,*R,*N;
          ENDIF
          MOVE      ONE,ERORFLAG
.
.         Message Control Id
.
VMSA1000  MOVELPTR  MSA002,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VMSA1500                   * yes - error
          ENDIF
          MATCH     MSA002,SP100                 * no, is it blank ?
          GOTO      VMSA1500 IF EQUAL            * yes - error
.
          MATCH     SAVMESID,MSA002              * same returned message id ?
          GOTO      VMSA9999 IF EQUAL            * yes
.
          MOVE      "MSA-02 - Message Control ID does not match",ERORTEXT
          MOVE      TWO,MLOGFLAG                 * set for error logging
          CALL      LOGM0000                     * write error to log file
          IF        DISPFLAG = 1
            DISPLAY   ERORTEXT,*R,*N;
          ENDIF
          MOVE      ONE,MTCHFLAG                 * set message id match flag
          GOTO      VMSA1600
.
VMSA1500  MOVE      "MSA-02 - Message Control ID not present",ERORTEXT
          MOVE      TWO,MLOGFLAG                 * set for error logging
          CALL      LOGM0000                     * write error to log file
          IF        DISPFLAG = 1
            DISPLAY   ERORTEXT,*R,*N;
          ENDIF
VMSA1600  MOVE      ONE,ERORFLAG
.
VMSA9999  RETURN
+
.*****************************************************************************
.*                            VERR0000             Called by: A19HNDLR       *
.*      Validate that the mandatory ERR fields are not null or spaces        *
.* Returns: ERORFLAG 0 = no errors                                           *
.*                   1 = error found                                         *
.*****************************************************************************
.
.         Error code & location
.
VERR0000  MOVELPTR  ERR001,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VERR0500                   * yes - error
          ENDIF
          MATCH     ERR001,SP100                 * no, is it blank ?
          GOTO      VERR9999 IF NOT EQUAL        * no
.
.         If this message has be accepted (AA- Acknowledge accept), then
.         ignore validation errors (CAR 203594)
.
VERR0500  MATCH     "AA",MSA001                  * Acknowledge Accept ?
          GOTO      VERR9999 IF EQUAL            * yes - ignore ERR validation
.
          IF        DISPFLAG = 1
            DISPLAY   "ERR-01 - Error code code & location not present",*R,*N;
          ENDIF
          MOVE      ONE,ERORFLAG
.
VERR9999  RETURN
+
.*****************************************************************************
.*                            VQRD0000             Called by: A19HNDLR       *
.*      Validate that the mandatory QRD fields are not null or spaces        *
.*****************************************************************************
.
.         Query Date/Time
.
VQRD0000  MOVELPTR  QRD00101,FORM3               * null ?
          IF        FORM3 = 0
            GOTO      VQRD0500                   * yes - error
          ENDIF
          MATCH     SP8,QRD00101                 * no, is it blank ?
          GOTO      VQRD0500 IF EQUAL            * yes
.
          MOVE      QRD00101,DIM14
          CALL      VDTM0000                     * date/time validation
          GOTO      VQRD1000
.
.         QRD-01 Error handling
.
VQRD0500  MOVE      "QRD-01: Query Date not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         Query Format Code
.
VQRD1000  MOVELPTR  QRD00201,FORM3               * null ?
          IF        FORM3 = 0
            GOTO      VQRD1500                   * yes - error
          ENDIF
          MATCH     SP1,QRD00201                 * no, is it blank ?
          GOTO      VQRD1500 IF EQUAL            * yes
.
.         Check that the type is "D" (Response is in display format),
.         "R" (Response is in record-oriented format) or "T" (Response is in
.         tabular format)
.
          MATCH     "D",QRD00201
          GOTO      VQRD1400 IF EQUAL
.
          MATCH     "R",QRD00201
          GOTO      VQRD2000 IF EQUAL
.
          MATCH     "T",QRD00201
          GOTO      VQRD1400 IF EQUAL
.
.         QRD-02 Error handling
.
          MOVE      "QRD-02: Query Format Code not valid",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
          GOTO      VQRD2000
.
VQRD1400  MOVE      "QRD-02: Query Format Code not available",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VQRD2000
.
VQRD1500  MOVE      "QRD-02: Query Format Code not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         Query Priority
.
VQRD2000  MOVELPTR  QRD00301,FORM3               * null ?
          IF        FORM3 = 0
            GOTO      VQRD2500                   * yes - error
          ENDIF
          MATCH     SP1,QRD00301                 * no, is it blank ?
          GOTO      VQRD2500 IF EQUAL            * yes
.
.         Validate for "D" (Deferred) or "I" (Immediate)
.
          MATCH     "D",QRD00301
          GOTO      VQRD2400 IF EQUAL
.
          MATCH     "I",QRD00301
          GOTO      VQRD3000 IF EQUAL
.
.         QRD-03 Error handling
.
          MOVE      "QRD-03: Query Priority not valid",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
          GOTO      VQRD3000
.
VQRD2400  MOVE      "QRD-03: Query Priority not available",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VQRD3000
.
VQRD2500  MOVE      "QRD-03: Query Priority not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         Query ID
.
VQRD3000  MOVELPTR  QRD00401,FORM3               * null ?
          IF        FORM3 = 0
            GOTO      VQRD3500                   * yes - error
          ENDIF
          MATCH     QRD00401,SP100               * no, is it blank ?
          GOTO      VQRD3500 IF EQUAL            * yes
          GOTO      VQRD5000
.
.         QRD-04 Error handling
.
VQRD3500  MOVE      "QRD-04: Query ID not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         Quantity Limited Request - Quantity (NM) component
.
VQRD5000  MOVELPTR  QRD00701,FORM3               * null ?
          IF        FORM3 = 0
            GOTO      VQRD5500                   * yes - error
          ENDIF
          MATCH     QRD00701,SP100               * no, is it blank ?
          GOTO      VQRD5500 IF EQUAL            * yes
.
.         Check that the field is numeric
.
          TYPE      QRD00701
          IF        !@EQUAL
            MOVE      "QRD-07: Quantity not numeric",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VQRD6000
          ENDIF
.
.         Check that the field has no decimal place
.
          SCAN      DOT,QRD00701
          IF        @EQUAL
            MOVE      "QRD-07: Quantity not an integer",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
          RESET     QRD00701
.
.dav1     Check that the field is "1"
.
.dav1     IF        FORM3 > 1
.dav1       MOVE      "QRD-07: Quantity too large",ERRORDSC
.dav1       MOVE      "207",ERRORNUM
.dav1       CALL      EROR0000
.dav1     ENDIF
.
.dav1     MOVE      QRD00701,FORM1
.dav1     COMPARE   ONE,FORM1
.dav1     IF        !@EQUAL
.dav1       MOVE      "QRD-07: Quantity not 1",ERRORDSC
.dav1       MOVE      "207",ERRORNUM
.dav1       CALL      EROR0000
.dav1     ENDIF
          GOTO      VQRD6000
.
VQRD5500  MOVE      "QRD-07: Quantity not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         Quantity Limited Request - Units (CE) component
.
VQRD6000  MOVELPTR  QRD00702,FORM3               * null ?
          COMPARE   ZERO,FORM3
          GOTO      VQRD6500 IF EQUAL            * yes
.
          MATCH     SP2,QRD00702                 * no, is it blank ?
          GOTO      VQRD6500 IF EQUAL            * yes
.
.         Check that the field has a valid value
.
          MATCH     "CH",QRD00702                * characters ?
          GOTO      VQRD6100 IF EQUAL            * yes
.
          MATCH     "LI",QRD00702                * lines ?
          GOTO      VQRD6100 IF EQUAL            * yes
.
          MATCH     "PG",QRD00702                * pages ?
          GOTO      VQRD6100 IF EQUAL            * yes
.
          MATCH     "RD",QRD00702                * records ?
          GOTO      VQRD7000 IF EQUAL            * yes
.
          MATCH     "ZO",QRD00702                * locally defined ?
          GOTO      VQRD6100 IF EQUAL            * yes
.
          MOVE      "QRD-07: Quantity Limited Amount units not valid",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
          GOTO      VQRD7000
.
VQRD6100  MOVE      "QRD-07: Quantity Limited Amount units not available",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VQRD7000
.
VQRD6500  MOVE      "QRD-07: Quantity Limited Amount units not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         Who Subject Filter (U/R Number) - ID Number (ST) component
.
VQRD7000  MOVE      QRD00801,DIM500
          SQUEEZE   DIM500                       * remove spaces
          MOVELPTR  DIM500,FORM3                 * null ?
.dav1     IF        FORM3 = 0
.dav1       GOTO      VQRD7100                   * yes - error
.dav1     ENDIF
.dav1     MATCH     DIM500,SP100                 * no, is it blank ?
.dav1     GOTO      VQRD7100 IF EQUAL            * yes
.
          IF        FORM3 > 8
            MOVE      "QRD-08: Who Subject Filter id number too large",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VQRD7200
          ENDIF
.
.dav1     Need to right justify U/R number
.
.dav1     PACK      KEY8,DIM500,SP8
.dav1     RJUSTIFY  KEY8
.dav1     MOVE      KEY8,DIM500
.dav1     CALL      RDMAST1                      * U/R on file ?
.dav1     IF        OVRCD = 1
.dav1       MOVE      "QRD-08: Who Subject Filter id number not valid",ERRORDSC
.dav1       MOVE      "204",ERRORNUM
.dav1       CALL      EROR0000
.dav1     ENDIF
          GOTO      VQRD7200
.
VQRD7100  MOVE      "QRD-08: Who Subject Filter id number not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         Who Subject Filter (U/R Number) - Source Table (IS) component
.
VQRD7200  MOVELPTR  QRD00808,FORM3               * null ?
.dav1     IF        FORM3 = 0
.dav1       GOTO      VQRD7300                   * yes - error
.dav1     ENDIF
.dav1     MATCH     QRD00808,SP100               * no, is it blank ?
.dav1     GOTO      VQRD7300 IF EQUAL            * yes
          GOTO      VQRD7400
.
VQRD7300  MOVE      "QRD-08: Who Subject Filter source table not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         Who Subject Filter (U/R Number) - Assigning Authority (HD) component
.
VQRD7400  MOVELPTR  QRD00809,FORM3               * null ?
.dav1     IF        FORM3 = 0
.dav1       GOTO      VQRD7500                   * yes - error
.dav1     ENDIF
.dav1     MATCH     QRD00809,SP100               * no, is it blank ?
.dav1     GOTO      VQRD7500 IF EQUAL            * yes
          GOTO      VQRD8000
.
VQRD7500  MOVE      "QRD-08: Who Subject Filter assigning authority not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         What Subject Filter - Identifier (ID) component
.
VQRD8000  MOVELPTR  QRD00901,FORM3               * null ?
          IF        FORM3 = 0
            GOTO      VQRD8100                   * yes - error
          ENDIF
          MATCH     QRD00901,SP100               * no, is it blank ?
          GOTO      VQRD8100 IF EQUAL            * yes
.
.         Check that the request is for most recent inpatient visit (single
.         record)
.
.dav1     MATCH     "MRI",QRD00901
.dav1     IF        !@EQUAL
.dav1       MOVE      "QRD-09: What Subject Filter identifier not available",ERRORDSC
.dav1       MOVE      "207",ERRORNUM
.dav1       CALL      EROR0000
.dav1     ENDIF
          GOTO      VQRD8200
.
VQRD8100  MOVE     "QRD-09: What Subject Filter identifier not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         What Subject Filter - Name of Coding System (ST) component
.
VQRD8200  MOVELPTR  QRD00903,FORM3               * null ?
          IF        FORM3 = 0
            GOTO      VQRD8300                   * yes - error
          ENDIF
          MATCH     QRD00903,SP100               * no, is it blank ?
          GOTO      VQRD8300 IF EQUAL            * yes
          GOTO      VQRD9000
.
VQRD8300  MOVE     "QRD-09: What Subject Filter name of coding system not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         What Department Data Code - Identifier (ID) component
.
VQRD9000  MOVELPTR  QRD01001,FORM3               * null ?
          IF        FORM3 = 0
            GOTO      VQRD9100                   * yes - error
          ENDIF
          MATCH     QRD01001,SP100               * no, is it blank ?
          GOTO      VQRD9100 IF EQUAL            * yes
          GOTO      VQRD9200
.
VQRD9100  MOVE     "QRD-10: What Department Data Code not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         What Department Data Code - Name of Coding System (ST) component
.
VQRD9200  MOVELPTR  QRD01003,FORM3               * null ?
          IF        FORM3 = 0
            GOTO      VQRD9300                   * yes - error
          ENDIF
          MATCH     QRD01003,SP100               * no, is it blank ?
          GOTO      VQRD9300 IF EQUAL            * yes
          GOTO      VQRD9999
.
VQRD9300  MOVE     "QRD-10: What Department Data Code name of coding system not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
VQRD9999  RETURN
+
.*****************************************************************************
.*                              VDTM0000           Called by: VQRD0000       *
.*                  Validate a date/time field                               *
.* Requires:  DIM14 - Date in format ccyymmddhhmmss                          *
.*            FORM3 - Length of QRD00101                                     *
.* Returns:   ERRORCNT - error count                                         *
.*****************************************************************************
.
VDTM0000  COMPARE   EIGHT,FORM3                * QRD-01 requires date only
          GOTO      VDTM0100 IF NOT LESS
.
          MOVE      "QRD-01: Transaction Date is incomplete",ERRORDSC
          MOVE      "102",ERRORNUM
          CALL      EROR0000
          GOTO      VDTM9999
.
.         Validate that the date/time is numeric
.
VDTM0100  TYPE      DIM14
          IF        !@EQUAL
            MOVE      "QRD-01: Transaction Date is not numeric",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VDTM9999
          ENDIF
.
          UNPACK    DIM14,DIM2C,DIM2Y,DIM2M,DIM2D,DIM2H,DIM2N,DIM2S
.
.         Validate the century is >= 20
.
          MOVE      DIM2C,FORM2
          IF        FORM2 < 20
            MOVE      "QRD-01: Transaction Century is not valid",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VDTM9999
          ENDIF
.
.         Validate the month
.
          MOVE      DIM2M,FORM2
          IF        FORM2 < 1 | FORM2 > 12
            MOVE      "QRD-01: Transaction Month is not valid",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VDTM9999
          ENDIF
.
.         Validate the day is:
.              < 32 for January, March, May, July, August, October & December
.              < 31 for April, June, September & November
.              < 29 for February, except in a leap year where it is < 30
.
          BRANCH    FORM2,VDTM1000:              * Jan
                          VDTM3000:              * Feb
                          VDTM1000:              * Mar
                          VDTM2000:              * Apr
                          VDTM1000:              * May
                          VDTM2000:              * Jun
                          VDTM1000:              * Jul
                          VDTM1000:              * Aug
                          VDTM2000:              * Sep
                          VDTM1000:              * Oct
                          VDTM2000:              * Nov
                          VDTM1000               * Dec
.
.         Validate days for month of 31 days
.
VDTM1000  MOVE      DIM2D,FORM2
          IF        FORM2 < 1 | FORM2 > 31
            GOTO      VDTM3900
          ENDIF
          GOTO      VDTM4000
.
.         Validate days for month of 30 days
.
VDTM2000  MOVE      DIM2D,FORM2
          IF        FORM2 < 1 | FORM2 > 30
            GOTO      VDTM3900
          ENDIF
          GOTO      VDTM4000
.
.         Validate days for February
.         A leap year is one where:
.           1. Every year divisible by 4 is a leap year.
.           2. But every year divisible by 100 is NOT a leap year
.           3. Unless the year is also divisible by 400, then it is still a
.              leap year.
.
VDTM3000  MOVE      DIM2D,FORM2
          PACK      D4,DIM2C,DIM2Y
          MOVE      D4,FORM4
          IF        (FORM4%4) = 0
            IF        (FORM4%100) = 0
              IF        (FORM4%400) = 0
                GOTO      VDTM3200
              ENDIF
            ELSE
              GOTO      VDTM3200
            ENDIF
          ENDIF
.
.         Check for normal Feb days
.
VDTM3100  IF        FORM2 < 1 | FORM2 > 28
            GOTO      VDTM3900
          ENDIF
          GOTO      VDTM4000
.
.         Check for leap year Feb days
.
VDTM3200  IF        FORM2 < 1 | FORM2 > 29
            GOTO      VDTM3900
          ENDIF
          GOTO      VDTM4000
.
VDTM3900  MOVE      "QRD-01: Transaction Day is not valid",ERRORDSC
          MOVE      "102",ERRORNUM
          CALL      EROR0000
          GOTO      VDTM9999
.
.         Make sure that the transaction date is not in the future
.
VDTM4000  COMPARE   TEN4,FORM3                   * time present ?
          GOTO      VDTM9999 IF LESS             * no - finished
.
          MOVE      DIM14,SAVEDATE               * save transaction date
          CALL      IBACLOCK
          PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
.
          MOVE      DIM14,D8
          MATCH     D8,CURRDATE
          IF        @LESS
            MOVE      "QRD-01: Transaction Date in the future",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VDTM9999
          ENDIF
.
.         Validate the hour
.
          MOVE      DIM2H,FORM2
          IF        FORM2 < 0 | FORM2 > 23
            MOVE      "QRD-01: Transaction Hour not valid",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VDTM9999
          ENDIF
.
.         Validate the minute
.
          MOVE      DIM2N,FORM2
          IF        FORM2 < 0 | FORM2 > 59
            MOVE      "QRD-01: Transaction Minutes not valid",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VDTM9999
          ENDIF
.
.         Validate the second
.
          MOVE      DIM2S,FORM2
          IF        FORM2 < 0 | FORM2 > 59
            MOVE      "QRD-01: Transaction Seconds not valid",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VDTM9999
          ENDIF
.
.         Make sure that the transaction time is not in the future
.
          MATCH     D8,CURRDATE
          IF        @EQUAL
            PACK      D8,DIM2H,COLON,DIM2N,COLON,DIM2S
            MATCH     D8,CTIMEIS
            IF        @LESS
              MOVE      "QRD-01: Transaction Time in the future",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VDTM9999
          ENDIF
.
VDTM9999  RETURN
+
.-----------------------------------------------------------------------------
.         Validate PID segment
.-----------------------------------------------------------------------------
VPID0000  ADD       ONE,PIDCOUNT                 * increment PID segment count
          MOVE      PID00101,LOOPCNT1
          CALL      LDDATA00                     * load PID data
.
VPID9999  RETURN
+
.-----------------------------------------------------------------------------
.         Validate DSC segment
.-----------------------------------------------------------------------------
VDSC0000
VDSC9999  RETURN
+
.-----------------------------------------------------------------------------
.         Validate QAK segment
.-----------------------------------------------------------------------------
VQAK0000
VQAK9999  RETURN
+
.-----------------------------------------------------------------------------
.         Validate PV1 segment
.-----------------------------------------------------------------------------
VPV10000
VPV19999  RETURN
+
.-----------------------------------------------------------------------------
.         Validate OBX segment
.-----------------------------------------------------------------------------
VOBX0000
VOBX9999  RETURN
+
.-----------------------------------------------------------------------------
.         Validate QRF segment
.-----------------------------------------------------------------------------
VQRF0000
VQRF9999  RETURN
+
.-----------------------------------------------------------------------------
.         Validate NK1 segment
.-----------------------------------------------------------------------------
VNK10000  MOVE      DATARRAY[LOOPCNT1][15],D10             * UPI
          RJUSTIFY  D10
          CALL      PNOK1000                               * Next-Of-Kin
.
VNK19999  RETURN
+
.-----------------------------------------------------------------------------
.         Validate ZXP segment
.-----------------------------------------------------------------------------
VZXP0000  IF        (DATARCNT >= 1) & (LOOPCNT1 <= MAXPRECS)
            MOVE      ZXP00201,DATARRAY[LOOPCNT1][24]      * MedicareValidToDate
            STRIP     DATARRAY[LOOPCNT1][24]
            MATCH     BLANKSTR,DATARRAY[LOOPCNT1][24]
            IF        @EQUAL
              MOVE      SP70,DATARRAY[LOOPCNT1][24]
              CLEAR     DATARRAY[LOOPCNT1][24]
            ENDIF
          ENDIF
VZXP9999  RETURN
+
.-------------------------------------------------------------------------------
.         Clear our Data Array
.-------------------------------------------------------------------------------
CLDATA00  MOVE      ZERO,DATARCNT
          MOVE      ONE,LOOPCNT1
          WHILE     LOOPCNT1 <= MAXPRECS
            MOVE      ONE,LOOPCNT2
            WHILE     LOOPCNT2 <= MAXPFLDS
              PACK      DATARRAY[LOOPCNT1][LOOPCNT2],SP100,SP100
              ADD       ONE,LOOPCNT2
            DO
            ADD       ONE,LOOPCNT1
          DO
          MOVE      ONE,LOOPCNT1
.
CLDATA99  RETURN
+
.-----------------------------------------------------------------------------
.         Load our Data Array
.-----------------------------------------------------------------------------
LDDATA00  MOVE      PID00505,DATARRAY[LOOPCNT1][1]         * Title
          MOVE      PID00501,DATARRAY[LOOPCNT1][2]         * Surname
          MOVE      PID00502,DATARRAY[LOOPCNT1][3]         * First Given Name
          MOVE      PID00503,DATARRAY[LOOPCNT1][4]         * Second Given Name
          MOVE      PID00801,DATARRAY[LOOPCNT1][5]         * Gender
          MOVE      PID00701,DATARRAY[LOOPCNT1][6]         * Date of Birth
.
.         Find which address is type "1" (usual residential address) as per
.         component 7 of PID.11   - Task: 0871671
.
          MATCH     "1",PID01107[1]
          IF        @EQUAL
            MOVE      ONE,ELEMENT
          ELSE
            MATCH     "1",PID01107[2]
            IF        @EQUAL
              MOVE      TWO,ELEMENT
            ELSE
              GOTO      LDDATA05
            ENDIF
          ENDIF
          MOVE      PID01101[ELEMENT],DATARRAY[LOOPCNT1][7]   * Street Address 1
          MOVE      PID01102[ELEMENT],DATARRAY[LOOPCNT1][8]   * Street Address 2
          MOVE      PID01103[ELEMENT],DATARRAY[LOOPCNT1][9]   * Suburb
          MOVE      PID01104[ELEMENT],DATARRAY[LOOPCNT1][10]  * State
          MOVE      PID01105[ELEMENT],DATARRAY[LOOPCNT1][11]  * Post code
.
LDDATA05  MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 5
            MOVELPTR  PID00301[COUNTER],FORM3    * identifier populated ?
            IF        FORM3 = 0
              GOTO      LDDATA10                 * no - finished
            ENDIF
            MATCH     "035",PID00305[COUNTER]    * identifier type PersonID ?
            IF        @EQUAL
              MOVE      PID00301[COUNTER],DATARRAY[LOOPCNT1][12]   * PersonID
            ENDIF
            MATCH     "018",PID00305[COUNTER]    * identifier type Medicare ?
            IF        @EQUAL
              MOVE      PID00301[COUNTER],DATARRAY[LOOPCNT1][13]   * Medicare no
            ENDIF
            MATCH     "016",PID00305[COUNTER]    * identifier type U/R ?
            IF        @EQUAL
              MOVE      PID00301[COUNTER],DATARRAY[LOOPCNT1][14]   * U/R Number
            ENDIF
            MATCH     "004",PID00305[COUNTER]    * identifier type UPI ?
            IF        @EQUAL
              MOVE      PID00301[COUNTER],DATARRAY[LOOPCNT1][15]   * UPI number
            ENDIF
LDDATA10    ADD       ONE,COUNTER                * increment counter
          DO
.
          MOVE      MESSAGID,ALIAMSID
          RJUSTIFY  ALIAMSID
          MOVE      DATARRAY[LOOPCNT1][15],ALIAUPIN
          RJUSTIFY  ALIAUPIN
          CALL      PALIT000                               * Aliases
.
          PACK      D8,PID03301,SP70
          MATCH     SP70,D8
          IF        @EQUAL
            MOVE      DATETIME,D8
          ENDIF
          MOVE      D8,DATARRAY[LOOPCNT1][16]              * Date Last Updated
.>>>>>>>>
.
          MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 3
            MOVELPTR  PID01301[COUNTER],FORM3    * identifier populated ?
            IF        FORM3 = 0
              GOTO      LDDATA20                 * no - finished
            ENDIF
            MATCH     "02",PID01303[COUNTER]     * communication type
            IF        @EQUAL
              MOVE      PID01301[COUNTER],DATARRAY[LOOPCNT1][17]   * Home Phone
            ENDIF
            MATCH     "04",PID01303[COUNTER]     * communication type
            IF        @EQUAL
              MOVE      PID01301[COUNTER],DATARRAY[LOOPCNT1][18]   * Mobile
            ENDIF
LDDATA20    ADD       ONE,COUNTER                * increment counter
          DO
.
          MOVE      PID01401[1],DATARRAY[LOOPCNT1][19]   * Work Phone
          MOVE      PID02301,DATARRAY[LOOPCNT1][20]      * COB (Cat C thcscod)
          MOVE      PID01501,DATARRAY[LOOPCNT1][21]      * Lang (Cat LA thcscod)
          MOVE      PID01504,DATARRAY[LOOPCNT1][22]      * Interpreter Req (Y/N)
          MOVE      PID01001,DATARRAY[LOOPCNT1][23]      * Race (Cat VA thcscod)
.davupi   MOVE      ZXP00201,DATARRAY[LOOPCNT1][24]      * loaded in vzxp0000
          MOVE      PID02601,DATARRAY[LOOPCNT1][25]      * Citiz (Cat T tcindc1)
.
.>>>>>>>>
          ADD       ONE,DATARCNT                           * PID array count
.
.         Remove "" (blankstr) from all fields and strip blanks
LDDATA50  MOVE      ONE,COUNTER
          WHILE     COUNTER <= 25
            STRIP     DATARRAY[LOOPCNT1][COUNTER]
            MATCH     BLANKSTR,DATARRAY[LOOPCNT1][COUNTER]
            IF        @EQUAL
              MOVE      SP70,DATARRAY[LOOPCNT1][COUNTER]
              CLEAR     DATARRAY[LOOPCNT1][COUNTER]
            ENDIF
            ADD       ONE,COUNTER
          DO
LDDATA99  RETURN
+
.*****************************************************************************
.*                            CLER0000             Called by: GCHR0000       *
.*              Clear message buffers and flags                              *
.*****************************************************************************
.
CLER0000  PACK      RECVMESS,SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100
          CLEAR     RECVMESS                     * clear full message buffer
          MOVE      ZERO,SEGCOUNT                * initialise segment seq. count
.
          PACK      SEGSTRNG,SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100
          CLEAR     SEGSTRNG                     * clear segment string
.
          MOVE      "Message accepted",ERORTEXT  * default for no error
.
.         Initialise counts for repeating segments
.
          PACK      HL7CONTP,SP100,SP100
          MOVE      ZERO,PIDCOUNT
          MOVE      ONE,PIDFOUND                 * init. for no PID segments
          MOVE      ZERO,NK1COUNT
          MOVE      ONE,NK1FOUND                 * init. for no NK1 segments
.
.         Initialise the A19 mandatory segment array
.
          MOVE      ANSN,A19ARRAY[1]
          MOVE      ANSN,A19ARRAY[2]
          MOVE      ANSN,A19ARRAY[3]
.
CLER9999  RETURN
+
.*****************************************************************************
.*                           RFLD0000                                        *
.*           Reset the HL7 component field just loaded                       *
.*****************************************************************************
.
RFLD0000  PERFORM   SEGNUMBR,RMSH0000:           * MSH
                             RMSA0000:           * MSA
                             RERR0000:           * ERR
                             RQRD0000:           * QRD
                             RPID0000:           * PID
                             RDSC0000:           * DSC
                             RQAK0000:           * QAK
                             RPV10000:           * PV1
                             ROBX0000:           * OBX
                             RQRF0000:           * QRF
                             RNK10000:           * NK1
                             RZXP0000            * ZXP
.
RFLD9999  RETURN
+
.*****************************************************************************
.*                              VA190000                                     *
.*              Validate the ADR^A19 message segments                        *
.*     MSH (mandatory - 1 only)                                              *
.*     MSA (mandatory - 1 only)                                              *
.*     QRD (mandatory - 1 only)                                              *
.*     PID (optional - 0 or more)                                            *
.* Requires:  SAVSEGMT - saved previous segment id.                          *
.* Returns :  SAVSEGMT - updated current segment id.                         *
.*****************************************************************************
.
.         Check if this is a MSA segment.
.
VA190000  MATCH     MSASEGMT,SEGMENT             * MSA segment ?
          GOTO      VA191000 IF NOT EQUAL        * no
.
.         Check the MSA segment was preceeded by an MSH segment
.
          MATCH     MSHSEGMT,SAVSEGMT
          GOTO      VA199100 IF NOT EQUAL
.
          MOVE      ANSY,A19ARRAY[1]             * MSH mandatory
          MOVE      ANSY,A19ARRAY[2]             * MSA mandatory
          MOVE      MSASEGMT,SAVSEGMT            * save segment id
          GOTO      VA199999
.
.         Check if this is a QRD segment
.
VA191000  MATCH     QRDSEGMT,SEGMENT
          GOTO      VA191500 IF NOT EQUAL
.
.         Check the QRD segment was preceeded by an MSA segment
.
          MATCH     MSASEGMT,SAVSEGMT
          GOTO      VA199100 IF NOT EQUAL
.
          MOVE      ANSY,A19ARRAY[3]             * QRD mandatory
          MOVE      QRDSEGMT,SAVSEGMT            * save segment id
          GOTO      VA199999
.
.         Check if this is an PID segment
.
VA191500  MATCH     PIDSEGMT,SEGMENT
          GOTO      VA199999 IF NOT EQUAL
.
.         Check the QRD segment was preceeded by an MSA segment if this is
.         the first PID segment, or another PID segment if it's
.         not the first PID segment
.
          IF        PIDCOUNT = 0
            MATCH     QRDSEGMT,SAVSEGMT
            GOTO      VA199100 IF NOT EQUAL
          ELSE
            MATCH     PIDSEGMT,SAVSEGMT
            GOTO      VA199100 IF NOT EQUAL
          ENDIF
.
          MOVE      PIDSEGMT,SAVSEGMT            * save segment id
          GOTO      VA199999
.
VA199100  MOVE      MSEQCAPT,ERRORDSC
          MOVE      "100",ERRORNUM
          CALL      EROR0000
.
VA199999  RETURN
+
.****************************************************************************
.*                              MANR0000                                    *
.*    Validate that mandatory segments have been received for the message   *
.****************************************************************************
.
.         Check that all A19 mandatory segments have been received
.
MANR0000  MATCH     ANSY,A19ARRAY[1]
          IF        !@EQUAL
            MOVE      MSHSEGMT,D3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A19ARRAY[2]
          IF        !@EQUAL
            MOVE      MSASEGMT,D3
            GOTO      MANR9100
          ENDIF
.
          MATCH     ANSY,A19ARRAY[3]
          IF        !@EQUAL
            MOVE      QRDSEGMT,D3
            GOTO      MANR9100
          ENDIF
.
          GOTO      MANR9999
.
MANR9100  MOVE      "Mandatory segment ",ERRORDSC
          ENDSET    ERRORDSC
          APPEND    D3,ERRORDSC
          APPEND    " missing",ERRORDSC
          RESET     ERRORDSC
          MOVE      "100",ERRORNUM
          CALL      EROR0000
.
MANR9999  RETURN
+
.*****************************************************************************
.*                          LOGM0000               Called by: A19HNDLR       *
.*                Create/Open Day log file                                   *
.* Requires: MLOGFLAG - Message log flag                                     *
.*                       0 = logging start of message processing             *
.*                       1 = logging sent message                            *
.*                       2 = logging errors                                  *
.*                       3 = logging full received acknowledgement message   *
.*                       4 = logging connection to socket                    *
.*           ERORTEXT - Acknowledgement validation error description         *
.*****************************************************************************
.
LOGM0000  READ      CONTROLF,HUND03;*242,PTCNHL7L
.davupi   MATCH     "1",PTCNHL7L                 * logging HL7 messages ?
.davupi   GOTO      LOGM9999 IF NOT EQUAL        * no - finished
.davupi   MATCH     " ",PTCNHL7L                 * logging HL7 messages ?
.davupi   GOTO      LOGM9999 IF EQUAL
.davupi   MATCH     "0",PTCNHL7L                 * logging HL7 messages ?
.davupi   GOTO      LOGM9999 IF EQUAL
.davupi   MATCH     "1",PTCNHL7L                 * logging HL7 messages ?
.davupi   GOTO      LOGM9999 IF EQUAL
.
          BRANCH    MLOGFLAG,LOGM2000:           * sent message
                             LOGM5000:           * ack. error
                             LOGM2000            * full ack. message
.
.         Get the current date/time
.
LOGM2000  CALL      IBACLOCK
.
.         If we are sending a new message (MLOGFLAG=0), then check if
.         the date has changed since we sent the last message.  If so,
.         then we need to close yesterday's log file and open a new one
.         for today.
.
          IF        MLOGFLAG = 0
            PACK      CURRDATE,CCC,CYY,CMM,CDD
            REP       " 0",CURRDATE
            MATCH     SAVEDATE,CURRDATE          * same day still ?
            GOTO      LOGM3000 IF EQUAL          * yes
.
            CLOSE     TEXTFILE                   * no - close yesterday's log
            CALL      LOGO0000                   * open new log file for today
          ENDIF
.
LOGM3000  MOVE      CTIMEIS,TIMSTAMP
          REP       " 0",TIMSTAMP
.
          BRANCH    MLOGFLAG,LOGM3500:           * sent message
                             LOGM5000:           * ack. validation errors
                             LOGM6000:           * full acknowledgement message
                             LOGM5000            * connection to socket
.
.         Write start of new message processing
.
          ENDSET    ERORTEXT
          APPEND    TIMSTAMP,ERORTEXT
          RESET     ERORTEXT
          WRITE     TEXTFILE,SEQ;DASHLINE        * write line to start new mess.
          WRITE     TEXTFILE,SEQ;*+,ERORTEXT
          GOTO      LOGM9999
.
.         Write message sent details
.
LOGM3500  WRITE     TEXTFILE,SEQ;*+,SEGSTRNG;    * write message content
          GOTO      LOGM9999
.
.         Write error
.
LOGM5000  IF        MLOGFLAG = 4
            WRITE     TEXTFILE,MINUS3;DASHLINE
            WRITE     TEXTFILE,SEQ;*+,ERORTEXT
          ELSE
            WRITE     TEXTFILE,SEQ;*+,ERORTEXT
          ENDIF
          GOTO      LOGM9999
.
.         Write full acknowledgement message
.
LOGM6000  WRITE     TEXTFILE,SEQ;TIMECAP2,TIMSTAMP
          WRITE     TEXTFILE,SEQ;*+,RECVMESS
.
LOGM9999  RETURN
+
.*****************************************************************************
.*                          LOGO0000               Called by: CNECT000       *
.*                                                            LOGM0000       *
.*        Load the log filename with the path and current date and then      *
.*        OPEN or PREP the file.                                             *
.* Requires: CDDRCTRY - cd directory path from DPATH in RUN script           *
.* Returns: SAVEDATE - saved log filename date                               *
.*****************************************************************************
.
LOGO0000  CALL      IBACLOCK
.
          PACK      SAVEDATE,CCC,CYY,CMM,CDD
          REP       " 0",SAVEDATE
.
          MOVE      SP100,FULLPATH
          CLEAR     FULLPATH
          APPEND    CDDRCTRY,FULLPATH
          APPEND    SAVEDATE,FULLPATH
          APPEND    ".upi",FULLPATH
          RESET     FULLPATH
.
.         Open the file and if it doesn't exist, then PREP it.
.
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      TEXTFILE,FULLPATH            * open text file
          TRAPCLR   IO
          IF        OVRCD = 1
            PREP      TEXTFILE,FULLPATH          * create & open text file
          ENDIF
.
LOGO9999  RETURN
+
.*****************************************************************************
.*                         VMES0000                                          *
.*          Validate message specific fields                                 *
.*   Previously, we have performed all the general HL7 validations.  Now we  *
.*   need to validate fields which are specific to the IBA database for      *
.*   the relevant messages.                                                  *
.*****************************************************************************
.
VMES0000                                         * validate additional fields
          GOTO      VMES9999
.
VMES9999  RETURN
+
.*****************************************************************************
.*                              EROR0000           Called by:  Lots          *
.*                       Error handling routine                              *
.* Requires: ERRORCNT - current error count                                  *
.*           ERRORDSC - error description                                    *
.*           ERRORNUM - error number                                         *
.* Returns:  ERORLINE - error description for error count = 1 (to be         *
.*                      returned in acknowledgement message - MSA.3)         *
.*           ERRORCNT - updated error count                                  *
.*           ERORNUMB - first error number                                   *
.*****************************************************************************
.
EROR0000  IF        DISPFLAG = 1
            DISPLAY   *+,ERRORDSC,*-,*R,*N;
          ELSE
          ENDIF
          ADD       ONE,ERRORCNT                 * increment error count
.
.         Write the error to the log file
.
.dav1     WRITE     TEXTFILE,SEQ;ERRORNUM,SP2,ERRORDSC
.
.dav1     If this is the first error message, then store this to send
.dav1     back in the acknowledgement message - MSA.3 & MSA.6.
.
.dav1     IF        ERRORCNT = 1
            MOVE      ERRORDSC,ERORLINE
.
            MOVE      ERRORNUM,ERORNUMB
            IF        ERORNUMB = 100
              MOVE      "Segment sequence error",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 101
              MOVE      "Required field missing",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 102
              MOVE      "Data type error",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 103
              MOVE      "Table value not found",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 200
              MOVE      "Unsupported message type",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 201
              MOVE      "Unsupported event code",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 202
              MOVE      "Unsupported procssing id",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 203
              MOVE      "Unsupported version id",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 204
              MOVE      "Unknown key identifier",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 205
              MOVE      "Duplicate key identifier",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 206
              MOVE      "Application record locked",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 207
              MOVE      "Application internal error",ERORTEXT
              GOTO      EROR9000
            ENDIF
            MOVE      "Unknown internal error",ERORTEXT
.
EROR9000    MOVE      TWO,MLOGFLAG
            CALL      LOGM0000                     * write to log file
.dav1       MOVE      ERRORDSC,ALTERDSC
.dav1       REP       " _",ALTERDSC
.dav1       CALL      ALTUSR00                   * email alert
.dav1     ENDIF
.
EROR9999  RETURN
+
.*****************************************************************************
.*                               CONV0000              Called by: Lots       *
.*        Convert HL7 escape sequences to their corresponding characters     *
.*        Field Separator         "\F\" becomes "|"                          *
.*        Component separator     "\S\" becomes "^"                          *
.*        Sub-component separator "\T\" becomes "&"                          *
.*        Repetition separator    "\R\" becomes "~"                          *
.*        Escape character        "\E\" becomes "\"                          *
.*        Hexidecimal Tab         "\X09\" becomes " "                        *
.* Requires:  OLDSTRNG  - field on which to check for escape sequences       *
.* Returns:   NEWSTRNG  - field with escape sequences converted              *
.*****************************************************************************
.
.         Load the FP position of the parsed string (which will
.         always be one)
.
CONV0000  MOVE      ONE,FPPOSITN
.
.         Initialise the last position of the escape sequence just
.         processed (set to zero as it is only relevant later on when
.         an escape sequence has been found)
.
          MOVE      ZERO,LASTPOSN
.
.         Clear the new string variable that we will be loading into
.
          CLEAR     NEWSTRNG
.
.         Remove trailing blanks from the parsed string
.
          STRIP     OLDSTRNG
.
.         Save the LL position of the parsed string as this will be used
.         to reposition the LL pointer later on
.
          MOVELPTR  OLDSTRNG,LLPOSITN
.
.         If the string is null, then we don't need to do anything more as
.         the new string is also null
.
          COMPARE   ZERO,LLPOSITN
          GOTO      CONV9999 IF EQUAL
.
.         There are characters to be processed in the parsed string,
.         so check if there are any more escape sequences
.
CONV0500  SCAN      "\",OLDSTRNG                 * backslash found in string ?
          GOTO      CONV8000 IF NOT EQUAL        * no - finished
.
.         A backslash has been found, so see if it is the start of an
.         escape sequence we are handling.  If so, then load the appropriate
.         character that will replace the escape sequence and set the
.         flag to identify which escape sequence was found (this is
.         important later on as escape sequences are either 3 characters
.         or 5 characters in length).
.
          MATCH     PIPESEQN,OLDSTRNG            * \F\ field separator ?
          IF        @EQUAL & !@LESS
            MOVE      ONE,SPCHFLAG               * yes
            MOVE      MSH001,ANS                 * load field separator char.
            GOTO      CONV5000
          ENDIF
.
          MATCH     CARTSEQN,OLDSTRNG            * \S\ component separator ?
          IF        @EQUAL & !@LESS
            MOVE      TWO,SPCHFLAG               * yes
            MOVE      COMSEPAR,ANS
            GOTO      CONV5000
          ENDIF
.
          MATCH     AMPRSEQN,OLDSTRNG            * \T\ subcomponent separator ?
          IF        @EQUAL & !@LESS
            MOVE      THREE,SPCHFLAG             * yes
            MOVE      SUBSEPAR,ANS
            GOTO      CONV5000
          ENDIF
.
          MATCH     TILDSEQN,OLDSTRNG            * \R\ repetition separator ?
          IF        @EQUAL & !@LESS
            MOVE      FOUR,SPCHFLAG              * yes
            MOVE      REPSEPAR,ANS
            GOTO      CONV5000
          ENDIF
.
          MATCH     BSLASEQN,OLDSTRNG            * \E\ escape character ?
          IF        @EQUAL & !@LESS
            MOVE      FIVE,SPCHFLAG              * yes
            MOVE      ESCSEPAR,ANS
            GOTO      CONV5000
          ENDIF
.
          MATCH     TABSEQN,OLDSTRNG             * \X09\ hexidecimal tab ?
          IF        @EQUAL & !@LESS
            MOVE      SIX,SPCHFLAG               * yes
            MOVE      SP1,ANS
            GOTO      CONV5000
          ENDIF
.
.         The backslash is not associated with a known escape sequence,
.         so treat it as a normal character and continue
.
          BUMP      OLDSTRNG                     * move to next character
          GOTO      CONV7000 IF EOS              * eos - finished
          GOTO      CONV0500                     * back to search for next "\"
.
.         We've found a valid escape sequence, so save the starting position
.         of the current string and check if we have consecutive escape
.         sequences (the last position will be 1 character position less
.         than the starting position we are currently on).
.         If there were consecutive escape sequences, or the escape sequence
.         occurred at the start of the parsed string, then simply load the
.         replacement character into the new string and reposition on the
.         character after the escape sequence so we can continue.
.         If there weren't consecutive escape sequences, or the escape
.         sequence wasn't at the start of the parsed string, then we
.         need to reposition the FP and LL for the previous string of normal
.         characters, load this into the new string, reposition the FP back
.         to the start of the escape sequence and reset the LL to the end
.         of the parsed string.
.
CONV5000  MOVEFPTR  OLDSTRNG,STRTPOSN
          ASSIGN    (STRTPOSN-LASTPOSN),POSNDIFF
          IF        STRTPOSN <> 1 & POSNDIFF <> 1
            BUMP      OLDSTRNG,-1                * go back to previous character
            LENSET    OLDSTRNG                   * set LL to FP position
            RESET     OLDSTRNG,FPPOSITN          * move FP back to start
            APPEND    OLDSTRNG,NEWSTRNG          * append string
          ENDIF
          APPEND    ANS,NEWSTRNG                 * append replacement character
.
          IF        STRTPOSN <> 1 & POSNDIFF <> 1
            ENDSET    OLDSTRNG                   * move FP back to LL position
            SETLPTR   OLDSTRNG,LLPOSITN          * move LL back to EOS
          ENDIF
.
.         Move past the escape sequence and position to get the next string.
.         The number of characters we move will depend on the escape sequence
.         and whether or not we are on consecutive escape sequences.
.
          IF        SPCHFLAG < 6
            IF        STRTPOSN = 1 | POSNDIFF = 1
              BUMP      OLDSTRNG,3               * moved past escape sequence
            ELSE
              BUMP      OLDSTRNG,4               * moved past escape sequence
            ENDIF
            GOTO      CONV8500 IF EOS            * eos - finished
            ASSIGN    (STRTPOSN+2),LASTPOSN      * save last esc seq position
          ELSE
            IF        STRTPOSN = 1 | POSNDIFF = 1
              BUMP      OLDSTRNG,5               * moved past escape sequence
            ELSE
              BUMP      OLDSTRNG,6               * moved past escape sequence
            ENDIF
            GOTO      CONV8500 IF EOS            * eos - finished
            ASSIGN    (STRTPOSN+4),LASTPOSN      * save last esc seq position
          ENDIF
.
          MOVEFPTR  OLDSTRNG,FPPOSITN            * save FP for the next string
          GOTO      CONV0500                     * back to search for next "\"
.
.         EOS encountered on BUMP command, so process as per above logic except
.         no need to load any more characters into the new string and if the
.         last character found was a "\", then we need to include this in
.         the load to new string.
.
CONV7000  MOVEFPTR  OLDSTRNG,STRTPOSN
          ASSIGN    (STRTPOSN-LASTPOSN),POSNDIFF
          IF        STRTPOSN <> 1 & POSNDIFF <> 1
            IF        STRTPOSN <> LLPOSITN
              BUMP      OLDSTRNG,-1              * go back to previous character
              LENSET    OLDSTRNG                 * set LL to FP position
            ENDIF
            RESET     OLDSTRNG,FPPOSITN          * move FP back to start
            APPEND    OLDSTRNG,NEWSTRNG          * append string
          ELSE
            IF        STRTPOSN = LLPOSITN
              APPEND    OLDSTRNG,NEWSTRNG        * append string
            ENDIF
          ENDIF
.
          IF        STRTPOSN <> 1 & POSNDIFF <> 1
            ENDSET    OLDSTRNG                   * move FP back to LL position
            SETLPTR   OLDSTRNG,LLPOSITN          * move LL back to EOS
          ENDIF
.
          GOTO      CONV8500
.
.         If we found a "\" somewhere which was not part of an escape
.         sequence and there were no escape sequences found and we're
.         at the end of the parsed string, then we can load the full
.         string into new string, so reset the FP on the parsed string
.
CONV8000  IF        LASTPOSN = 0 & FPPOSITN =1
            RESET     OLDSTRNG
          ENDIF
.
          APPEND    OLDSTRNG,NEWSTRNG            * append string
CONV8500  RESET     NEWSTRNG                     * reset new string
          STRIP     NEWSTRNG
.
CONV9999  RETURN
+
.*****************************************************************************
.*                              PALIT000                                     *
.*                 Process aliases from PID.9 and write to ALIATMP1          *
.*****************************************************************************
.
.         If the first element of the PID.9 array is not populated
.         (ie, it has the following format ..||..), then we don't need
.         to do anything
.
PALIT000  MOVELPTR  PID00901[1],FORM3            * field populated ?
          COMPARE   ZERO,FORM3
          GOTO      PALIT999 IF EQUAL            * no - finished
.
.         If the first element of the PID.9 array is null (ie, it has
.         the following format ..|""|..), then we don't need to do any more.
.
          MATCH     BLANKSTR,PID00901[1]         * null field ?
          GOTO      PALIT999 IF EQUAL            * yes - finished
.
.         There is one or more aliases present, so add all the new alias
.         records that have been sent
.
PALIT200  MOVE      ZERO,COUNTER                 * initialise loop counter
          WHILE     COUNTER < 80
            ADD       ONE,COUNTER                * increment counter
.
            MOVELPTR  PID00901[COUNTER],FORM3    * field populated ?
            COMPARE   ZERO,FORM3
            GOTO      PALIT999 IF EQUAL          * no - finished
.
            MOVE      COUNTER,ALIACNTR
            PACK      ALIASURN,PID00901[COUNTER],SP100
            PACK      ALIAFNME,PID00902[COUNTER],SP100
            PACK      ALIASNME,PID00903[COUNTER],SP100
.
PALIT250    PACK      KEY33,ALIAMSID,ALIAUPIN,ALIACNTR
            CALL      RATEMP1
            IF        OVRCD = 1
              CALL      WRTEMP1
            ELSE
              MOVE      ALIACNTR,F3
              ADD       ONE,F3
              MOVE      F3,ALIACNTR
              GOTO      PALIT250
            ENDIF
          DO
.
PALIT999  RETURN
+
.*****************************************************************************
.*                              PNOK1000                                     *
.*                 Process contacts from NK1 and write to NOK1TMP1           *
.*****************************************************************************
.
PNOK1000  MOVE      NK100101,COUNTER
          COMPARE   ONE,COUNTER
          GOTO      PNOK1100 IF NOT EQUAL        * only delete UPI records once
.
          PACK      KEY13,D10,SP70               * delete records for this UPI
          CALL      RSTEMP2                      * position at start of file
          CALL      RKTEMP2                      * read next record
          BRANCH    OVRCD,PNOK1100               * eof - finished
.
          MATCH     D10,NOK1UPIN
          GOTO      PNOK1100 IF NOT EQUAL        * no more records for this UPI
.
          PACK      KEY13,NOK1UPIN,NOK1CNTR
          CALL      DETEMP2                      * delete current record
          GOTO      PNOK1000                     * get next record
.
PNOK1100  MOVELPTR  NK100701,FORM3               * contact type populated ?
          COMPARE   ZERO,FORM3
          GOTO      PNOK1999 IF EQUAL            * no - finished
.
          MATCH     BLANKSTR,NK100701            * null field ?
          GOTO      PNOK1999 IF EQUAL            * yes - finished
.
PNOK1200  MOVE      ONE,COUNTER
          MOVE      COUNTER,NOK1CNTR             * initialise segment counter
.
          MOVE      D10,NOK1UPIN                 * UPI number
.
          PACK      NOK1SURN,NK100201,SP100      * surname
          PACK      NOK1FNME,NK100202,SP100      * 1st given name
          PACK      NOK1SNME,NK100203,SP100      * 2nd given name
          PACK      NOK1TITL,NK100205,SP100      * title
.
          PACK      NOK1RELP,NK100301,SP100      * relationship
.
          PACK      NOK1ADD1,NK100401,SP100      * address 1
          PACK      NOK1ADD2,NK100402,SP100      * address 2
          PACK      NOK1ADD3,NK100403,SP100      * address 3
          PACK      NOK1ADD4,NK100404,SP100      * address 4
          PACK      NOK1POST,NK100405,SP100      * post code
.
          MOVE      ONE,F4                       * initialise counter
          WHILE     F4 < 3
            MOVELPTR  NK100501[F4],FORM3         * identifier populated ?
            IF        FORM3 = 0
              GOTO      PNOK1250                 * no - finished
            ENDIF
            MATCH     "02",NK100503[F4]          * communication type
            IF        @EQUAL
              PACK      NOK1TELP,NK100501[F4],SP100    * Home Phone
            ENDIF
            MATCH     "04",NK100503[F4]          * communication type
            IF        @EQUAL
              PACK      NOK1TELM,NK100501[F4],SP100    * Mobile
            ENDIF
PNOK1250    ADD       ONE,F4                     * increment counter
          DO
.
          PACK      NOK1TELB,NK100601[1],SP100   * business phone
.
          PACK      NOK1TYPE,NK100701,SP100      * contact role
.
PNOK1400  REP       QUOTESPC,NOK1SURN            * replace quotes with blanks
          REP       QUOTESPC,NOK1FNME
          REP       QUOTESPC,NOK1SNME
          REP       QUOTESPC,NOK1TITL
          REP       QUOTESPC,NOK1RELP
          REP       QUOTESPC,NOK1ADD1
          REP       QUOTESPC,NOK1ADD2
          REP       QUOTESPC,NOK1ADD3
          REP       QUOTESPC,NOK1ADD4
          REP       QUOTESPC,NOK1POST
          REP       QUOTESPC,NOK1TELP
          REP       QUOTESPC,NOK1TELM
          REP       QUOTESPC,NOK1TELB
.
PNOK1500  PACK      KEY13,NOK1UPIN,NOK1CNTR
          CALL      RATEMP2
          IF        OVRCD = 1
            CALL      WRTEMP2
          ELSE
            MOVE      NOK1CNTR,F3
            ADD       ONE,F3
            MOVE      F3,NOK1CNTR
            GOTO      PNOK1500
          ENDIF
.
PNOK1999  RETURN
+
.*****************************************************************************
.*                              CREAT000                                     *
.*                    Create new temporary tables                            *
.*****************************************************************************
.
CREAT000  CALL      TFILENAM                     * get new tempfile A name
          MOVE      TFILNAME,ALIATFNM
.
          CALL      TFILENAM                     * get new tempfile B name
          MOVE      TFILNAME,NOK1TFNM
.
          CALL      KILLT000                     * remove existing file
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ISBUILD,ALIATFNM,UKEYA
          EXECUTE   CMDLINE,TASKID               * create temporary index file
.
          OPEN      ALIATMP1,ALIATFNM            * open temp index file
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ISBUILD,NOK1TFNM,UKEYB
          EXECUTE   CMDLINE,TASKID               * create temporary index file
.
          OPEN      NOK1TMP1,NOK1TFNM            * open temp index file
.
CREAT999  RETURN
+
.****************************************************************************
.*                              KILLT000                                    *
.*               Close and erase the temporary tables                       *
.****************************************************************************
.
KILLT000  CLOSE     ALIATMP1                     * close file
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ERASE,ALIATFNM       * set file erase command
          EXECUTE   CMDLINE,TASKID               * erase temp file
.
          CLOSE     NOK1TMP1                     * close file
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ERASE,NOK1TFNM       * set file erase command
          EXECUTE   CMDLINE,TASKID               * erase temp file
.
KILLT999 RETURN
+
.****************************************************************************
.*                              CTMPT000                                    *
.*               Clear all records from the temporary tables                *
.****************************************************************************
.
.         Delete Temp file 1 records
.
CTMPT000  MOVE      SP70,KEY33
          CALL      RSTEMP1                      * position at start of file
          CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,CTMPT999               * eof - finished
.
          PACK      KEY33,ALIAMSID,ALIAUPIN,ALIACNTR
          CALL      DETEMP1                      * delete current record
          GOTO      CTMPT000                     * get next record
.
.         Delete Temp file 2 records
.
CTMPT100  MOVE      SP70,KEY13
          CALL      RSTEMP2                      * position at start of file
          CALL      RKTEMP2                      * read next record
          BRANCH    OVRCD,CTMPT999               * eof - finished
.
          PACK      KEY13,NOK1UPIN,NOK1CNTR
          CALL      DETEMP2                      * delete current record
          GOTO      CTMPT100                     * get next record
.
CTMPT999  RETURN
+
.****************************************************************************
.*        IO ROUTINES FOR TEMPORARY FILE                                    *
.****************************************************************************
.
.         Alias Temp File I/O routines
.
RATEMP1   MOVE      ZERO,OVRCD
          READ      ALIATMP1,KEY33;ANS
          GOTO      OVERCOND IF OVER
          RETURN
.
RSTEMP1   READ      ALIATMP1,KEY33;;
          RETURN
.
RDTEMP1   MOVE      ZERO,OVRCD
          READ      ALIATMP1,KEY33;ALIAMSID,ALIAUPIN,ALIACNTR,ALIASURN,ALIAFNME:
                                   ALIASNME
          GOTO      OVERCOND IF OVER
          RETURN
.
RKTEMP1   MOVE      ZERO,OVRCD
          READKS    ALIATMP1;ALIAMSID,ALIAUPIN,ALIACNTR,ALIASURN,ALIAFNME:
                             ALIASNME
          GOTO      OVERCOND IF OVER
          RETURN
.
RPTEMP1   MOVE      ZERO,OVRCD
          READKP    ALIATMP1;ALIAMSID,ALIAUPIN,ALIACNTR,ALIASURN,ALIAFNME:
                             ALIASNME
          GOTO      OVERCOND IF OVER
          RETURN
.
WRTEMP1   WRITE     ALIATMP1,KEY33;ALIAMSID,ALIAUPIN,ALIACNTR,ALIASURN,ALIAFNME:
                                   ALIASNME
          RETURN
.
UPTEMP1   UPDATE    ALIATMP1;ALIAMSID,ALIAUPIN,ALIACNTR,ALIASURN,ALIAFNME:
                             ALIASNME
          RETURN
.
DETEMP1   DELETE    ALIATMP1,KEY33
          RETURN
.
.         Next-Of-Kin Temp File I/O routines
.
RATEMP2   MOVE      ZERO,OVRCD
          READ      NOK1TMP1,KEY13;ANS
          GOTO      OVERCOND IF OVER
          RETURN
.
RSTEMP2   READ      NOK1TMP1,KEY13;;
          RETURN
.
RDTEMP2   MOVE      ZERO,OVRCD
          READ      NOK1TMP1,KEY13;NOK1UPIN,NOK1CNTR,NOK1SURN,NOK1FNME:
                                   NOK1SNME,NOK1TITL,NOK1RELP,NOK1ADD1,NOK1ADD2:
                                   NOK1ADD3,NOK1ADD4,NOK1POST,NOK1TELP,NOK1TELM:
                                   NOK1TELB,NOK1TYPE
          GOTO      OVERCOND IF OVER
          RETURN
.
RKTEMP2   MOVE      ZERO,OVRCD
          READKS    NOK1TMP1;NOK1UPIN,NOK1CNTR,NOK1SURN,NOK1FNME:
                             NOK1SNME,NOK1TITL,NOK1RELP,NOK1ADD1,NOK1ADD2:
                             NOK1ADD3,NOK1ADD4,NOK1POST,NOK1TELP,NOK1TELM:
                             NOK1TELB,NOK1TYPE
          GOTO      OVERCOND IF OVER
          RETURN
.
RPTEMP2   MOVE      ZERO,OVRCD
          READKP    NOK1TMP1;NOK1UPIN,NOK1CNTR,NOK1SURN,NOK1FNME:
                             NOK1SNME,NOK1TITL,NOK1RELP,NOK1ADD1,NOK1ADD2:
                             NOK1ADD3,NOK1ADD4,NOK1POST,NOK1TELP,NOK1TELM:
                             NOK1TELB,NOK1TYPE
          GOTO      OVERCOND IF OVER
          RETURN
.
WRTEMP2   WRITE     NOK1TMP1,KEY13;NOK1UPIN,NOK1CNTR,NOK1SURN,NOK1FNME:
                                   NOK1SNME,NOK1TITL,NOK1RELP,NOK1ADD1,NOK1ADD2:
                                   NOK1ADD3,NOK1ADD4,NOK1POST,NOK1TELP,NOK1TELM:
                                   NOK1TELB,NOK1TYPE
          RETURN
.
UPTEMP2   UPDATE    NOK1TMP1;NOK1UPIN,NOK1CNTR,NOK1SURN,NOK1FNME:
                             NOK1SNME,NOK1TITL,NOK1RELP,NOK1ADD1,NOK1ADD2:
                             NOK1ADD3,NOK1ADD4,NOK1POST,NOK1TELP,NOK1TELM:
                             NOK1TELB,NOK1TYPE
          RETURN
.
DETEMP2   DELETE    NOK1TMP1,KEY13
          RETURN
+
