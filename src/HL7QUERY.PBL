.***************************************************************************
.* System    :   System Management                                         *
.* Program   :   HL7QUERY                                                  *
.* Desc      :   HL7 Message Receiving Server                              *
.***************************************************************************
.* Date      :   16/12/2010                                                *
.* Author    :   Steve Armstrong                                           *
.* Function  :   This program will accept HL7 Query messages via a TCP/IP  *
.*               port.  It will then validate the message and send an      *
.*               acknowledgement message back to the sender.  All messages *
.*               received are recorded for reviewing.                      *
.*               The first stage of message validation is purely at the    *
.*               HL7 level.  If this validation is successful, then the    *
.*               message will be processed by a subroutine specific for the*
.*               message type.  This subroutine will validate data against *
.*               the webPAS data tables then, if successful, send a        *
.*               response with the current patient details.                *
.*                                                                         *
.*       Note:   Each read from the socket (via RECV) is into a buffer     *
.*               which can hold 4000 characters.  We may receive as few as *
.*               one character or as many as 4000 characters on any given  *
.*               read (RECV), so we need to keep reading while there are   *
.*               characters coming through.                                *
.*               For example, a message which is 30 characters long, may   *
.*               come through in 3 reads (RECV), the first read receiving  *
.*               10 characters, the second 15 characters, and the third    *
.*               5 characters.  It may also be the case that characters    *
.*               from two separate messages may come through in a single   *
.*               read ie, the tail of one message and the start of the     *
.*               next message.                                             *
.*                                                                         *
.*  Segments Validated                                                     *
.*            MSH - Message Header                                         *
.*            QRD - Query Definition                                       *
.*            QRF - Query Filter                                           *
.*                                                                         *
.*  HL7 Messages Processed                                                 *
.*            A19 - Query                                                  *
.*                                                                         *
.***************************************************************************
.*  Mod's     :                                                            *
.***************************************************************************
.*       V12.00.02 15/10/2025  J.Tan            TSK 0967027                *
.*                 Recompiled for HL7COMN - Check Pooling file for Type=018*
.*       V12.00.01 30/05/2025  Don Nguyen       TSK 0955096                *
.*                 Alphanumeric visit number changes                       *
.***************************************************************************
.*       V11.05.01 12/02/2025  Davin            TSK 0954821                *
.*                 Recompiled for HL7COMN - added components to PV1.3 (EMR)*
.***************************************************************************
.*       V11.04.02 10/05/2024  Davin            TSK 0944894                *
.*                 Only populate SAVAPPLI/SAVFACIL with received components*
.*       V11.04.01 07/05/2024  Davin            TSK 0944894                *
.*                 Populate SAVAPPLI/SAVFACIL after validating MSH segment *
.*                 to cater for blanks in components 2 or 3                *
.***************************************************************************
.*       V11.03.02 03/08/2023  Davin            TSK 0907196                *
.*                 Recompiled for HL7COMN - send time of birth in PID.7    *
.*       V11.03.01 14/11/2022  Davin            TSK 0923862                *
.*                 Recompiled for HL7COMN - Moved ZXV.105 / Added ZXV.106  *
.***************************************************************************
.*       V11.02.05 28/07/2022  Davin            TSK 0918020                *
.*                 Recompiled for HL7COMN - added ZXV.103/ZXV.104/ZXV.105  *
.*       V11.02.04 26/04/2022  Davin            TSK 0903453                *
.*                 Recompiled for HL7COMN - added ZXP.70 and ZXP.71        *
.*       V11.02.03 09/03/2022  Davin            TSK 0908733                *
.*                 Recompiled for HL7COMN - allow 6 lines of text in DG1.4 *
.*       V11.02.02 11/03/2022  Davin            TSK 0885553                *
.*                 Removed read on pathsp that is not required (GVIS5000)  *
.*       V11.02.01 23/02/2022  Davin            TSK 0885553                *
.*                 Send response data for latest INP/OUT/EMR visit if      *
.*                 ptcnra19=2 (PVIS0000/GVIS0000)                          *
.*                 Recompiled for HL7COMN - added routines from HL7CISIN   *
.***************************************************************************
.*       V11.01.02 19/04/2021  Davin            TSK 0900672                *
.*                 Recompiled for HL7COMN - added ZXV.101/102 (WRZXV800)   *
.*       V11.01.01 12/04/2021  Davin            TSK 0901390                *
.*                 Recompiled for HL7COMN - added ZXP.64-68 (PMI User Def) *
.***************************************************************************
.*       V11.00.05 25/11/2020  Thanh T          TSK 0878747                *
.*                 Changed for HL7COMN as MLTBIR00 added for multiple      *
.*                 birth details                                           *
.*       V11.00.04 04/06/2020  Davin            TSK 0881876                *
.*                 Recompiled for HL7COMN - changed ZXP.63                 *
.*                 (Verified Address)                                      * 
.*       V11.00.03 22/04/2020  Davin            TSK 0881876                *
.*                 Recompiled for HL7COMN - added ZXP.63 (Verified Address)*
.*       V11.00.02 16/04/2020  Davin            TSK 0879163                *
.*                 Recompiled for HL7COMN - populate PID.8 with Cat.G value*
.*       V11.00.01 16/04/2020  Davin            TSK 0887136                *
.*                 Recompiled for HL7COMN - added ZXP.61,ZXP.62,cdtype AMB *
.***************************************************************************
.*        V10.15.03 12/11/2019  Davin            TSK 0861253               *
.*                  Recompiled for HL7COMN - O/P telehealth fields for ZXV *
.*        V10.15.02 31/10/2019  Thanh T          TSK 0856646               *
.*                  Recompiled for HL7CISVR changes                        *
.*        V10.15.01 07/10/2019  Ken Bell         TSK 0875392               *
.*                  Recompiled for HL7COMN - Cancelled WC Claim in PV1     *
.***************************************************************************
.*        V10.14.04 02/08/2019  Davin            TSK 0878929               *
.*                  Recompiled for HL7COMN - max alert comment lines ZAL.14*
.*        V10.14.03 03/07/2019  Davin            TSK 0876159               *
.*                  Recompiled for HL7COMN - send W not F in DG1006 for A13*
.*        V10.14.02 15/05/2019  Steve Armstrong  TSK 0865461               *
.*                  Recompiled for changes to HL7COMN                      *
.*        V10.14.01 25/02/2019  Davin           TSK 0866465                *
.*                  Recompiled for changes to HL7COMN                      *
.***************************************************************************
.*        V10.13.08 15/11/2018  Steve Armstrong  TSK 0861628               *
.*                  Recompiled for changes to HL7COMN (Sending NDIS Expiry *
.*                  Date (ZXP.60).                                         *
.*        V10.13.07 23/10/2018  Steve Armstrong  TSK 0863512               *
.*                  Recompiled for changes to HL7COMN, HL7CISVR & HL7CLRVR *
.*                  (ZXV.88 & ZXV.89).                                     *
.*        V10.13.06 25/09/2018  Steve Armstrong  TSK 0850366               *
.*                  Recompiled for changes to HL7COMN.                     *
.*        V10.13.05 03/09/2018  Davin            TSK 0859667               *
.*                  Recompiled for HL7COMN - added option 3 to ptcnadig    *
.*        V10.13.04 16/08/2018  Steve Armstrong  TSK 0861701               *
.*                  Recompiled for HL7COMN - check for HEXDASH             *
.*        V10.13.03 14/08/2018  Davin            TSK 0857732               *
.*                  Recompiled for HL7COMN - mods from UPI testing         *
.*        V10.13.02 24/07/2018  Steve Armstrong  TSK 0860696               *
.*                  Recompiled for changes to HL7COMN                      *
.*        V10.13.01 23/07/2018  Steve Armstrong  TSK 0860614               *
.*                  Recompiled for changes to HL7COMN                      *
.***************************************************************************
.*        V10.12.01 05/06/2018  Davin            TSK 0851377               *
.*                  Recompiled for HL7COMN                                 *
.***************************************************************************
.*        V10.11.04 27/11/2017  Thanh Tieu       TSK 0821710               *
.*                  Recompiled as PATMISTD/HL7CISVR changed                *
.*        V10.11.03 18/09/2017  Davin            TSK 0840094               *
.*                  Recompiled for HL7COMN                                 *
.*        V10.11.02 14/09/2017  Thanh T.         TSK 0821710               *
.*                  Audit Amission/outpatient visit comments               *
.*        V10.11.01 21/07/2017  Davin            TSK 0838315               *
.*                  Recompiled for changes to HL7COMN.                     *
.***************************************************************************
.*        V10.10.05 05/05/2017  Steve Armstrong  TSK 0836111               *
.*                  Recompiled for changes to HL7COMN.                     *
.*        V10.10.04 19/04/2017  Steve Armstrong  TSK 0834336               *
.*                  Recompiled for changes to HL7COMN.                     *
.*                  Added read on PTCNH7LN.                                *
.*                  18/04/2017  Steve Armstrong TSK 0833052                *
.*                  Recompiled for changes to HL7COMN, HL7CISVR & HL7CLRVR.*
.*        V10.10.03 27/03/2017  Steve Armstrong TSK 0830704 & 0833314      *
.*                  Recompiled for changes to HL7COMN, HL7CISVR and        *
.*                  HL7CLRVR.                                              *
.*                  21/03/2017  Steve Armstrong TSK 0832066                *
.*                  Recompiled for changes to HL7COMN.                     *
.*        V10.10.02 14/03/2017  Steve Armstrong TSK 0323865                *
.*                  Recompiled for changes to HL7COMN                      *
.*        V10.10.01 06/03/2017  Steve Armstrong TSK 0829263                *
.*                  Recompiled for changes to HL7COMN                      *
.***************************************************************************
.*        V10.08.01 12/04/2016  Steve Armstrong  TSK 0814510               *
.*                  Mods to check parameter to see if message is turned    *
.*                  on and can be processed.                               *
.***************************************************************************
.*        V10.07.06 19/02/2016  Steve Armstrong CAR 0809786                *
.*                  Recompiled for changes to HL7COMN for PID.3            *
.*        V10.07.05 09/02/2016  Steve Armstrong CAR 0809500                *
.*                  Recompiled for changes to HL7COMN for ZXP.58           *
.*        V10.07.04 05/02/2016  Steve Armstrong CAR 0813285                *
.*                  Recompiled for changes to HL7COMN for PID.15           *
.*        V10.07.03 07/01/2016  Davin           CAR 0310749                *
.*                  Recompiled for changes to HL7CISVR for ZXV.31          *
.*        V10.07.02 29/12/2015  Steve Armstrong CAR 0322741                *
.*                  Added read of PTCNGNDR and recompiled for changes to   *
.*                  HL7COMN.                                               *
.*        V10.07.01 25/11/2015  Steve Armstrong CAR 310749                 *
.*                  Recompiled for changes to HL7COMN for ZXV.31 and       *
.*                  HL7CISVR.                                              *
.***************************************************************************
.*        V10.06.01 05/06/2015  Davin           CAR 316872 NZNDHB          *
.*                  Recompiled for HL7COMN - mailing address in PID.11(NZ) *
.*        V10.05.05 17/02/2015  Steve Armstrong  CAR 312284                *
.*                  Added IO TRAP's around LISTEN and ACCEPT on socket.    *
.*        V10.05.04 27/11/2014  Jill Parkinson CAR 286621                  *
.*                  Added read of PTCNHDPS for WRPID000                    *
.*        V10.05.03 05/11/2014  Steve Armstrong  CAR 306617                *
.*                  Recompiled for changes to HL7CISVR, HL7CLRVR and       *
.*                  HL7COMN                                                *
.*        V10.05.02 28/08/2014  Steve Armstrong  CAR 305388                *
.*                  Recompiled for changes to HL7COMN.                     *
.*        V10.05.01 22/07/2014  Davin            CAR 251384                *
.*                  Recompiled for HL7COMN - added ZXV.50 (tier 2 code)    *
.******************************************************************************
.*        V10.04.03 12/06/2014  Steve Armstrong  CAR 301639                *
.*                  Added call to TFILENAM in INIT0000 (replaces original  *
.*                  call in HL7COMN).                                      *
.*                  Also added call to KILTMP00 on exit of program.        *
.*        V10.04.02 23/05/2014  Steve Armstrong  CAR 301458                *
.*                  Recompiled for changes to HL7COMN.                     *
.*                  Also added OPEN of IBAPOST1.                           *
.*        V10.04.01 28/04/2014  Steve Armstrong  CAR 261630                *
.*                  Mods for non-port based tempfile use.                  *
.***************************************************************************
.*        V10.03.07 29/11/2013  Davin            CAR 294691                *
.*                  Recompiled for changes to HL7COMN.                     *
.*        V10.03.06 18/05/2013  Steve Armstrong   CAR 268961               *
.*                  Recompiled for changes to PMSQVIFD                     *
.*        V10.03.05 14/06/2013  Steve Armstrong  CAR 286898                *
.*                  Added OPEN of PATMWSA1                                 *
.*        V10.03.04 09/05/2013  Steve Armstrong  CAR 285194                *
.*                  Changed to use hl7query.us1 instead of hl7recvr.us1    *
.*                  for email alerts.                                      *
.*                  Added new WAH segments to response message (ZAL, ZXP,  *
.*                  ZSD & ZXV).                                            *
.*        V10.03.03 21/02/2012  Steve Armstrong  CAR 260482                *
.*                  Recompiled for changes to HL7CISVR.                    *
.*                  21/02/2012  Steve Armstrong  CAR 259400                *
.*                  Recompiled for changes to HL7COMN.                     *
.*                  Removed FD's now declared in HL7CISVR.                 *
.*                  Changes to handle alias temp file.                     *
.*        V10.03.02 28/02/2012  Steve Armstrong  CAR 257428                *
.*                  Recompiled for changes to HL7COMN.                     *
.*        V10.03.01 17/11/2011  Steve Armstrong  CAR 251665                *
.*                  Recompiled for changes to HL7COMN.                     *
.***************************************************************************
.*        V10.02.02 22/07/2011  Steve Armstrong  CAR 246136                *
.*                  Recompiled for changes to HL7COMN.                     *
.*        V10.02.01 22/06/2011  Steve Armstrong  CAR 240722                *
.*                  Recompiled for changes to HL7COMN.                     *
.***************************************************************************
.*        V10.01.01 05/01/2011  Davin Sloan      CAR 230955                *
.*                  Added PMSHCLFD and recompiled for changes to HL7COMN.  *
.*        V10.01.00 16/12/2010  Steve Armstrong   CAR 235587               *
.*                  Copied from HL7RECVR and modified to handle QRY^A19    *
.*                  only.                                                  *
.***************************************************************************
.
          INC       STD002FD
.
.         File Definitions
.         ----------------
.
          INC       EMRLOCFD/INC
          INC       EMRSITFD/INC
          INC       HL7CISVR/INC
          INC       OPRNURFD/INC
          INC       OUTCTYFD/INC
          INC       OUTDIAFD/INC
          INC       OUTRF1FD/INC
          INC       OUTMA1FD/INC
          INC       PATATRFD/INC
          INC       PATATRTD/INC
          INC       TFILEVAR/INC
          INC       VISXDCFD/INC
          INC       COMPARFD/INC
          INC       IBAPOLFD/INC
.
LISSOCKT  SOCKET    ASCII,FIXED=1   * socket on which to listen for connections
.
.
. LOCAL VARIABLES
. ---------------
ACCPTCNT  FORM      1
ALTERDSC  DIM       50            * error description for email alert
A19FAIL   FORM      8
A19RECV   FORM      8
A19SUCC   FORM      8
.
CDDRCTRY  DIM       80
COMPCNT   FORM      2             * component count for a field
COMPFLAG  FORM      1             * Component Flag
.                                         0 = Component character not set
.                                         1 = Component character set
COMSEPAR  DIM       1             * component separator variable
COUNTR    FORM      2
CSEC      DIM       2
CURRDATE  DIM       8
.
DATETIME  DIM       14            * message date/time (ccyymmddhhmmss)
DIM2C     DIM       2             * century variable (cc)
DIM2Y     DIM       2             * year variable    (yy)
DIM2M     DIM       2             * month variable   (mm)
DIM2D     DIM       2             * day variable     (dd)
DIM2H     DIM       2             * hour variable    (hh)
DIM2N     DIM       2             * minute variable  (mm)
DIM2S     DIM       2             * second variable  (ss)
DIM4      DIM       4             * full year work variable (ccyy)
DIM8      DIM       8             * date/time work variable 
.                                         (ccyymmdd) or (hh:mm:ss)
DIM9      DIM       9
DIM12     DIM       12            * reference no. work variable
DIM14     DIM       14            * date/time work variable (ccyymmddhhmmss)
DIM50     DIM       50
DIM500    DIM       500
DISPFLAG  FORM      1             * display to screen flag
.                                     0 = don't display messages to screen
.                                     1 = display messages to screen (debug)
DPATHVAR  DIM       100
DVCOLOUR  DIM       3
.
EMRVDOCT  DIM       10
ERRORDSC  DIM       70            * error description for acknowledgement
ERRORCNT  FORM      4             * error count
ERRORNUM  FORM      3             * HL7 error number
ERORLINE  DIM       80            * save variable for 1st error description
ERORNUMB  FORM      3             * HL7 error number for MSH segment
.
FIELDNO   FORM      3             * segment field counter
FNAME     DIM       8
FORM3     FORM      3
FORM17P2  FORM      17.2
FULLPATH  DIM       100
.
HOURTM    DIM       2
.
LASTA19F  FORM      3             * last A19 field received for QRD segment
LINKDHCG  DIM       10            * practice
LINKDHCP  DIM       10            * hcp
.
MESSTYPE  DIM       3             * message type (ie A01)
MINTIME   DIM       2
.
MSH00101  DIM       500           * MSH Component variables
MSH00201  DIM       500
MSH00301  DIM       500
MSH00302  DIM       500
MSH00303  DIM       500
MSH00401  DIM       500
MSH00402  DIM       500
MSH00403  DIM       500
MSH00501  DIM       500
MSH00502  DIM       500
MSH00503  DIM       500
MSH00601  DIM       500
MSH00602  DIM       500
MSH00603  DIM       500
MSH00701  DIM       500
MSH00801  DIM       500
MSH00901  DIM       500
MSH00902  DIM       500
MSH00903  DIM       500
MSH01001  DIM       500
MSH01101  DIM       500
MSH01102  DIM       500
MSH01201  DIM       500
MSH01202  DIM       500
MSH01203  DIM       500
MSH01301  DIM       500
MSH01401  DIM       500
MSH01501  DIM       500
MSH01601  DIM       500
MSH01701  DIM       500
MSH01801  DIM       500
MSH01901  DIM       500
MSH01902  DIM       500
MSH01903  DIM       500
MSH01904  DIM       500
MSH01905  DIM       500
MSH01906  DIM       500
MSH02001  DIM       500
.
NMPNUMB   DIM       20
.
PREVCHAR  DIM       1
.
QRD00101  DIM       500
QRD00201  DIM       500
QRD00301  DIM       500
QRD00401  DIM       500
QRD00501  DIM       500
QRD00601  DIM       500
QRD00701  DIM       500
QRD00702  DIM       500
QRD00801  DIM       500
QRD00802  DIM       500
QRD00803  DIM       500
QRD00804  DIM       500
QRD00805  DIM       500
QRD00806  DIM       500
QRD00807  DIM       500
QRD00808  DIM       500
QRD00809  DIM       500
QRD00810  DIM       500
QRD00811  DIM       500
QRD00812  DIM       500
QRD00813  DIM       500
QRD00814  DIM       500
QRD00815  DIM       500
QRD00901  DIM       500
QRD00902  DIM       500
QRD00903  DIM       500
QRD00904  DIM       500
QRD00905  DIM       500
QRD00906  DIM       500
QRD01001  DIM       500
QRD01002  DIM       500
QRD01003  DIM       500
QRD01004  DIM       500
QRD01005  DIM       500
QRD01006  DIM       500
QRD01101  DIM       500
QRD01102  DIM       500
QRD01201  DIM       500
QRF00101  DIM       500
QRF00201  DIM       500
QRF00301  DIM       500
QRF00401  DIM       500
QRF00501  DIM       500
QRF00601  DIM       500
QRF00701  DIM       500
QRF00801  DIM       500
QRF00901  DIM       500
QRF00902  DIM       500
QRF00903  DIM       500
QRF00904  DIM       500
QRF00905  DIM       500
QRF00906  DIM       500
QRF00907  DIM       500
QRF00908  DIM       500
QRF00909  DIM       500
QRF00910  DIM       500
QRF00911  DIM       500
QRF00912  DIM       500
.
RECVMESS  DIM       4000          * message buffer
.
SAVAPPLI  DIM       180           * save application variable
SAVEBDAT  DIM       8             * saved birth date
SAVEDATE  DIM       8
SAVEHOSP  DIM       3
SAVFACIL  DIM       180           * save facility variable
SAVHFUND  DIM       6             * save health fund variable
SAVHTBLE  DIM       8             * save health fund table
SAVMESID  DIM       20            * saved incoming message id
SECTIME   DIM       2
SEGCOUNT  FORM      2             * segment sequence count
SEGMENT   DIM       3                  * 3 character HL7 segment code
SEGNUMBR  FORM      2             * segment number
.                                     1 = MSH
.                                     2 = QRD
.                                     3 = QRF
SENTMESS  DIM       4000
STRNGLEN  FORM      4
.
TCPIPORT  DIM       40            * receiving machine name and port number
TIMSTAMP  DIM       8
TMPSTRNG  DIM       4000          * buffer for reading in message
TXTFNAME  DIM       8             * text file name variable
.
VISNUMBR  DIM       8
VISITNUM  DIM       8
.
.
. PROGRAM CONSTANTS
. -----------------
ANSSA     INIT      "SA"
ANSSP     INIT      "SP"
ACTVCAPT  INIT      "Message Type not activated"
CARET     INIT      "^"
CATCZ     INIT      "CZ"
CATea     INIT      "ea"
CATeb     INIT      "eb"
CATec     INIT      "ec"
CATed     INIT      "ed"
CATel     INIT      "el"
CATet     INIT      "et"
CATRX     INIT      "RX"
CATTC     INIT      "tc"
CRETURN   INIT      015                * Carriage Return
.
DASHLINE  INIT      "--------------------------------------------------":
                    "------------------------------"
.
ENDBLOCK  INIT      034                * End of Block
ENVVNAME  INIT      "DPATH"
ERORTEXT  DIM       26
EVNSEGMT  INIT      "EVN"
.
MINUS3    FORM      "-3"
MSHSEGMT  INIT      "MSH"
MTYPEA19  INIT      "A19"
.
PIPE      INIT      "|"
QRDSEGMT  INIT      "QRD"
QRFSEGMT  INIT      "QRF"
.
SENDCAPN  INIT      "Acknowledgement Message sent at: "
SP100     INIT      "                                                  ":
                    "                                                  "
STRTBLOK  INIT      013                * Start of Block
.
TILDA30   INIT      "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
TIMECAPT  INIT      "Message received at: "
.
.
.
.-----------------------------------------------------------------------
PRGID     INIT      "HL7QUERY"
PRGNAM    INIT      "HL7 Query Message Receiving Server"
VERSION   INIT      "V12.00.02"
.-----------------------------------------------------------------------
+
.*************************************************************************
.*                             MAIN0000                                  *
.*                  Main processing routine                              *
.*************************************************************************
.
MAIN0000  CALL      SETX0000                     * set up common
.
          CALL      INIT0000                     * initialisation routine
          BRANCH    EXIT,MAIN9999
.
          CALL      CRTMP000                     * create alias temp file
.
          CALL      PROC0000                     * listen for & process message
.
          CALL      KILTMP00                * remove existing file
.
MAIN9999  STOP
+
.*****************************************************************************
.*                         INIT0000                Called by: MAIN0000       *
.*               Initialisation routine                                      *
.*****************************************************************************
.
INIT0000  CALL      DISPHEAD                     * display screen header
.
          CALL      TFILENAM                     * get new tempfile name
          MOVE      TFILNAME,TEMPFILE
.
          DISPLAY   *P1:24,*EL,*P54:24,"Opening":
                    *P64:24,"controlf"
          OPEN      CONTROLF,"controlf"
.
          READ      CONTROLF,TEN;*79,CAPPRVNO         * hospital approval no.
          READ      CONTROLF,TEN3;*188,CMABINS:       * TAC Insurance Co.
                                  *194,CVETINS        * Vet. Affairs Ins. Co.
          READ      CONTROLF,TWENTY1;*45,PTCNDRSM:
                                     *138,PTCNNHII    * using nhi ?
          READ      CONTROLF,SEVENTY9;*82,PTCNDSCI
          READ      CONTROLF,EIGHTY;*250,PTCNHDPS
          READ      CONTROLF,EIGHTY8;*56,PTCNHADF:
                                     *59,PTCNI10D:
                                     *245,PTCNH7ED:
                                     *247,PTCNSZSD
          READ      CONTROLF,HUND03;*196,PTCNCATA:    * allergy category
                                    *217,PTCNCKDG:    * sending U/R check digit
                                    *241,PTCNCLCD:
                                    *243,PTCNADIG:    * sending free text
                                    *244,PTCNNNK1     * sending non-compl. NK1
          READ      CONTROLF,HUND05;*217,PTCNGDV4:
                                    *227,PTCNGDV5
          READ      CONTROLF,HUND09;*151,PTCNGDV3
          READ      CONTROLF,HUND10;*61,PTCNGDV7:
                                    *69,PTCNGDV8:
                                    *77,PTCNGDV9:
                                    *85,PTCNGDVX:
                                    *93,PTCNOLOC:
                                    *94,PTCNPV04:
                                    *95,PTCNPV18:
                                    *96,PTCNPV36:
                                    *97,PTCNPW36
          READ      CONTROLF,HUND12;*94,PTCNH7ME:
                                    *95,PTCNH7IN:
                                    *96,PTCNH7AC:
                                    *97,PTCNH7HS:
                                    *98,PTCNH7AD:
                                    *99,PTCNH7A5:
                                    *239,PTCNGDV6
          READ      CONTROLF,HUND14;*141,PTCNH7LS:
                                    *219,PTCNUSGN
          READ      CONTROLF,HUND16;*249,PTCNRTUR
          READ      CONTROLF,HUND17;*220,PTCNGDX1
          READ      CONTROLF,HUND18;*112,PTCNSLPD:
                                    *138,PTCNNEWC:
                                    *150,PTCNH7AL:
                                    *154,PTCNUHSC:
                                    *155,PTCNH7WD:
                                    *180,PTCNEDDD
          READ      CONTROLF,HUND19;*122,PTCNDEDI:
                                    *182,PTCNEPIS
          READ      CONTROLF,HUND23;*209,PTCNUTOM:
                                    *211,PTCNGNDR:
                                    *213,PTCNMHSW:
                                    *225,PTCNRA19
          READ      CONTROLF,HUND24;*146,PTCNH7LN:
                                    *156,PTCNH7IL:
                                    *160,PTCNSZLS:
                                    *211,PTCNSDRG:
                                    *214,PTCNSZEC:
                                    *217,PTCNSZBR:
                                    *221,PTCNUHDD
          READ      CONTROLF,HUND25;*155,PTCNEPMI:
                                    *234,PTCNBMYH:
                                    *248,PTCNTOFB
          READ      CONTROLF,HUND28;*109,PTCNB31R:
                                    *110,PTCNEVN4:
                                    *224,PTCNSNTY
.
.         Check the category being used for allergies (H1-H9)
.
          MATCH     ANSH,PTCNCATA
          IF        @EQUAL
            UNPACK    PTCNCATA,ANS,ANS
            MOVE      ZERO,FORM1
            MOVE      ANS,FORM1
            BRANCH    FORM1,INIT0500,INIT0500,INIT0500,INIT0500,INIT0500:
                            INIT0500,INIT0500,INIT0500,INIT0500
          ENDIF
.
          DISPLAY   *P1:24,*EL,*B,"Allergy alert category not set",*W5;
.         MOVE      "Not_Applicable",MESSAGID
.         MOVE      "Allergy_alert_category_not_set",ERRMESSG
.         CALL      ALTUSR00                   * send email warning
          GOTO      INIT9100
.
INIT0500  DISPLAY   *P64:24,"alllnkaf";
          OPEN      ALLLNKA2,"alllnkaf"
.
          DISPLAY   *P64:24,"allprraf";
          OPEN      ALLPRRA1,"allprraf"
.
          DISPLAY   *P64:24,"allrefaf";
          OPEN      ALLREFA1,"allrefaf"
.
          DISPLAY   *P64:24,"catcomaf";
          OPEN      CATCOMA1,"catcomaf"
.
          DISPLAY   *P64:24,"emrcliaf";
          OPEN      EMRCLIA1,"emrcliaf"
.
          DISPLAY   *P64:24,"emrhisaf";
          OPEN      EMRHISA1,"emrhisaf"
.
          DISPLAY   *P64:24,"emricdaf";
          OPEN      EMRICDA1,"emricdaf"
.
          DISPLAY   *P64:24,"emrlocaf";
          OPEN      EMRLOCA1,"emrlocaf"
.
          DISPLAY   *P64:24,"emrsitaf";
          OPEN      EMRSITA1,"emrsitaf"
.
          DISPLAY   *P64:24,"emrvcdaf";
          OPEN      EMRVCDA1,"emrvcdaf"
.
          DISPLAY   *P64:24,"emrvisaf"
          OPEN      EMRVISA1,"emrvisaf"
          OPEN      EMRVISA3,"emrvisaf"
.
          DISPLAY   *P64:24,"ibaalvaf"
          OPEN      IBAALVA1,"ibaalvaf"
.
          DISPLAY   *P64:24,"ibapostf"
          OPEN      IBAPOST1,"ibapostf"
.
          DISPLAY   *P64:24,"mehdlsaf";
          OPEN      MEHDLSA1,"mehdlsaf"
.
          DISPLAY   *P64:24,"mehds1af";
          OPEN      MEHDS1A1,"mehds1af"
.
          DISPLAY   *P64:24,"mehhlsaf";
          OPEN      MEHHLSA1,"mehhlsaf"
.
          DISPLAY   *P64:24,"mehvi1af";
          OPEN      MEHVI1A1,"mehvi1af"
.
          DISPLAY   *P64:24,"mrtlocaf";
          OPEN      MRTLOCA1,"mrtlocaf"
.
          DISPLAY   *P64:24,"mrtmasaf";
          OPEN      MRTMASA1,"mrtmasaf"
.
          DISPLAY   *P64:24,"nhiethaf"
          OPEN      NHIETHA1,"nhiethaf"
.
          DISPLAY   *P64:24,"oprnuraf";
          OPEN      OPRNURA1,"oprnuraf"
.
          DISPLAY   *P64:24,"outsitaf"
          OPEN      OUTSITA1,"outsitaf"
.
          DISPLAY   *P64:24,"outthiaf";
          OPEN      OUTTHIA1,"outthiaf"
.
          DISPLAY   *P64:24,"patalrtf"
          OPEN      PATALRT1,"patalrtf"
.
          DISPLAY   *P64:24,"vismdtaf";
          OPEN      VISMDTA1,"vismdtaf"
          DISPLAY   *P64:24,"vismtxaf";
          OPEN      VISMTXA1,"vismtxaf"
.
          DISPLAY   *P64:24,"patma1af"
          OPEN      PATMA1A1,"patma1af"
          OPEN      PATMX1A1,"patmx1af"
.
          DISPLAY   *P64:24,"patonlvf";
          OPEN      PATONLV2,"patonlvf"
.
          DISPLAY   *P64:24,"patcodes"
          OPEN      PATCODE1,"patcodes"
.
          DISPLAY   *P64:24,"patdadaf";
          OPEN      PATDADA1,"patdadaf"
.
          DISPLAY   *P64:24,"patdo1af"
          OPEN      PATDO1A1,"patdo1af"
.
          DISPLAY   *P64:24,"patdschf"
          OPEN      PATDSCH1,"patdschf"
.
          DISPLAY   *P64:24,"patecoaf";
          OPEN      PATECOA1,"patecoaf"
.
          DISPLAY   *P64:24,"patecdaf"
          OPEN      PATECDA1,"patecdaf"
.
          DISPLAY   *P64:24,"patgsrnf"
          OPEN      PATGSRN1,"patgsrnf"
.
          DISPLAY   *P64:24,"pathspaf"
          OPEN      PATHSPA1,"pathspaf"
.
          DISPLAY   *P64:24,"patin1af"
          OPEN      PATIN1A1,"patin1af"
.
          DISPLAY   *P64:24,"patinvrf"
          OPEN      PATINVR3,"patinvrf"
.
          DISPLAY   *P64:24,"patlinkf"
          OPEN      PATLINK1,"patlinkf"
.
.         DISPLAY   *P64:24,"patmchgf"
.         OPEN      PATMCHG1,"patmchgf"
.
          DISPLAY   *P64:24,"patmi1af"
          OPEN      PATMI1A1,"patmi1af"
.
          IF        PTCNNHII = 1
            DISPLAY   *P64:24,"patmwsaf";
            OPEN      PATMWSA1,"patmwsaf"
          ENDIF
.
          DISPLAY   *P64:24,"patre1af"
          OPEN      PATRE1A1,"patre1af"
.
          DISPLAY   *P64:24,"pattranf"
          OPEN      PATTRAN2,"pattranf"
.
          DISPLAY   *P64:24,"patvadaf";
          OPEN      PATVADA1,"patvadaf"
.
          DISPLAY   *P64:24,"patwc1af";
          OPEN      PATWC1A1,"patwc1af"
.
          DISPLAY   *P64:24,"patwmabf";
          OPEN      PATWMAB1,"patwmabf"
.
          DISPLAY   *P64:24,"patwr1af";
          OPEN      PATWR1A1,"patwr1af"
.
          DISPLAY   *P64:24,"patwvetf";
          OPEN      PATWVET1,"patwvetf"
.
          DISPLAY   *P64:24,"pmsaidaf"
          OPEN      PMSAIDA1,"pmsaidaf"
.
          DISPLAY   *P64:24,"pmsalnaf"
          OPEN      PMSALNA1,"pmsalnaf"
.
          DISPLAY   *P64:24,"pmsccdaf"
          OPEN      PMSCCDA1,"pmsccdaf"
.
          DISPLAY   *P64:24,"pmscexaf"
          OPEN      PMSCEXA1,"pmscexaf"
.
          DISPLAY   *P64:24,"pmsdivaf";
          OPEN      PMSDIVA2,"pmsdivaf"
.
          DISPLAY   *P64:24,"pmsdtcaf";
          OPEN      PMSDTCA1,"pmsdtcaf"
.
          DISPLAY   *P64:24,"pmshcpaf"
          OPEN      PMSHCPA1,"pmshcpaf"
.
          DISPLAY   *P64:24,"pmshcgaf";
          OPEN      PMSHCGA1,"pmshcgaf"
.
          DISPLAY   *P64:24,"pmshclaf"
          OPEN      PMSHCLA1,"pmshclaf"
.
          DISPLAY   *P64:24,"pmsnutaf";
          OPEN      PMSNUTA1,"pmsnutaf"
.
          DISPLAY   *P64:24,"pmspx2af"
          OPEN      PMSPX2A1,"pmspx2af"
.
          DISPLAY   *P64:24,"pmsrelaf"
          OPEN      PMSRELA1,"pmsrelaf"
.
          DISPLAY   *P64:24,"pmstemaf";
          OPEN      PMSTEMA1,"pmstemaf"
.
          DISPLAY   *P64:24,"patvisaf"
          OPEN      PATVISA1,"patvisaf"
          OPEN      PATVISA2,"patvisaf"
          OPEN      PATVISA4,"patvisaf"
.
          DISPLAY   *P64:24,"pmsvx1af"
          OPEN      PMSVX1A1,"pmsvx1af"
.
          DISPLAY   *P64:24,"pmswx1af"
          OPEN      PMSWX1A1,"pmswx1af"
.
          DISPLAY   *P64:24,"viscmtaf";
          OPEN      VISCMTA1,"viscmtaf"
.
          DISPLAY   *P64:24,"visxdcaf";
          OPEN      VISXDCA1,"visxdcaf"
.
          DISPLAY   *P64:24,"watopaaf";
          OPEN      WATOPAA2,"watopaaf"
.
          DISPLAY   *P64:24,"watopsaf";
          OPEN      WATOPSA2,"watopsaf"
.
          DISPLAY   *P64:24,"wattr1af";
          OPEN      WATTR1A1,"wattr1af"
.
          DISPLAY   *P64:24,"websecaf"
          OPEN      WEBSECA1,"websecaf"
.
          DISPLAY   *P64:24,"patatraf"
          OPEN      PATATRA3,"patatraf"
.
INIT0600  MOVE      ZERO,HEROTABL
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          DISPLAY   *P64:24,"pmsuhlaf";
          OPEN      PMSUHLA1,"pmsuhlaf"
          TRAPCLR   IO
          IF        OVRCD=1
            MOVE      ONE,HEROTABL          * not using HERO Location table
          ENDIF
.
          MOVE      ZERO,COMPTABL
          MOVE      ZERO,OVRCD              * Trap to check if comparaf exists
          TRAP      OVERCOND IF IO
          DISPLAY   *P64:24,"comparaf";
          OPEN      COMPARA1,"comparaf"
          TRAPCLR   IO
          IF        OVRCD=1
            MOVE      ONE,COMPTABL          * not using common system parameter
          ENDIF
.
          MOVE      ZERO,IBAPTABL
          MOVE      ZERO,OVRCD              * Trap to check if 2nd index exists
          TRAP      OVERCOND IF IO
          DISPLAY   *P64:24,"ibapolaf";
          OPEN      IBAPOLA2,"ibapolaf"      * open Patient Pooling table
          TRAPCLR   IO
          IF        OVRCD=1
            MOVE      ONE,IBAPTABL          * not using common system parameter
          ENDIF
.
.         Get the first directory in the DPATH (cd directory) as this will
.         be where the log file will be created/updated if required
.
          GETENV    ENVVNAME,DPATHVAR            * get DPATH
          IF        @OVER
            DISPLAY   *P1:24,*EL,*B,"Problem getting DPATH (1)",*W5;
            GOTO      INIT9100
          ENDIF
.         
          MOVE      SP100,CDDRCTRY               * clear cd directory variable
          CLEAR     CDDRCTRY
          SCAN      ":",DPATHVAR                 * find end of first directory
          IF        @EOS
            DISPLAY   *P1:24,*EL,*B,"Problem getting DPATH (2)",*W5;
            GOTO      INIT9100
          ENDIF
.
          IF        @EQUAL
            MOVEFPTR  DPATHVAR,FORM3
            SUB       ONE,FORM3
            RESET     DPATHVAR
            SETLPTR   DPATHVAR,FORM3
          ENDIF
.
          MOVE      DPATHVAR,CDDRCTRY
          ENDSET    CDDRCTRY
          APPEND    SLASH,CDDRCTRY
          RESET     CDDRCTRY
.
          MOVE      ZERO,A08XFLAG
          MOVE      ONE,REFLFLAG                 * not O/P referral message
          MOVE      "1000",RPLYTIME
.
INIT2000  KEYIN     *P1:8,"Display messages to the screen (",*V2LON,*DV:
                    ANSY,*HOFF,*DV,SLASH,*V2LON,*DV,ANSN,*HOFF,") :":
                    *P40:8,*V2LON,ANS
.
          PACK      ANS,ANS,SP1
          REP       UPPLOW,ANS
.
          MATCH     ANSY,ANS
          IF        @EQUAL
            MOVE      ONE,DISPFLAG
            GOTO      INIT9050
          ENDIF
.
          MATCH     ANSN,ANS
          IF        @EQUAL
            MOVE      ZERO,DISPFLAG
            GOTO      INIT9000
          ENDIF
.
          BEEP
          GOTO      INIT2000
.
INIT9000  CALL      BACK0000
.
INIT9050  MOVE      ZERO,EXIT
          GOTO      INIT9999
.
INIT9100  MOVE      ONE,EXIT
.
INIT9999  RETURN
+
.*****************************************************************************
.*                              PROC0000             Called by: MAIN0000     *
.*           Listen for and process an incoming message                      *
.*****************************************************************************
.
.         Get the solicited socket on which we will be listening.
.
PROC0000  IF        DISPFLAG = 1
            DISPLAY   *P1:4,*EF;
          ENDIF
.
          READ      CONTROLF,ZERO;*209,IBCNQSSA
          MATCH     SP20,IBCNQSSA                * blank socket ?
          GOTO      PROC9100 IF EQUAL            * yes
.
.         Set port
.
          MOVE      IBCNQSSA,TCPIPORT
          STRIP     TCPIPORT
.
.         Listen on the port for a connection
.
          IF        DISPFLAG = 1
            DISPLAY   "Listening on port: ",TCPIPORT,*R,*N;
          ENDIF
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          LISTEN    LISSOCKT,TCPIPORT,REUSEADDR
          TRAPCLR   IO
          BRANCH    OVRCD,PROC9700
.
          MOVE      ZERO,ACCPTCNT                * init. accept try count
.
          IF        DISPFLAG = 1
            DISPLAY   "Accepting connections on port: ",TCPIPORT,*R,*N;
          ENDIF
PROC0100  MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          ACCEPT    COMSOCKT,LISSOCKT
          TRAPCLR   IO
          BRANCH    OVRCD,PROC9800
.
          MOVE      ZERO,ACCPTCNT                * init. accept try count
.
          IF        DISPFLAG = 1
            DISPLAY   "Accepted connection on port: ",TCPIPORT,*R,*N;
          ENDIF
.
.         Wait for a new message to come through
.
PROC0500  IF        DISPFLAG = 1
            DISPLAY   "Waiting for next message....",*R,*N;
          ENDIF
.
          CLOSE     TEXTFILE                     * close text file
.
          CALL      CLER0000                     * clear mess. buffer and flags
.
          CALL      GTSTR000                     * get next 4000 chars (or less)
          BRANCH    EXIT,PROC9500:               * timeout
                         PROC9000                * connection lost
.
.         Search the string for a start of block (ASCII 11) character
.
          SCAN      STRTBLOK,TMPSTRNG            * sob found ?
          GOTO      PROC0500 IF NOT EQUAL        * no - ignore message
.
          APPEND    STRTBLOK,RECVMESS            * yes
.
          IF        DISPFLAG = 1
            DISPLAY   "Start of Block found",*R,*N;
          ENDIF
          CALL      OLOG0000                     * open message log file
.
.         The next segment needs to be processed, so read in the next segment id
.
PROC4000  CALL      GSEG0000                     * validate segment code
          BRANCH    EXIT,PROC9500:               * connection timeout
                         PROC9000:               * connection lost
                         PROC4000:               * start of block
                         PROC6000:               * end of block
                         PROC4000                * end of segment
.
          IF        DISPFLAG = 1
            DISPLAY   "Processing segment: [",SEGMENT,"]",*R,*N;
          ENDIF
.
.         We need to validate the segment for the message type, and
.         make sure that the segment is in the correct sequence for the
.         message
.
          CALL      VSEG0000                     * validate segment
          IF        EXIT = 0
            ADD       ONE,SEGCOUNT               * increment segment count
            CALL      VA190000                   * validate segment sequence
          ENDIF
.
.         If a valid segment id has been found, clear the segment fields
.
          PERFORM   SEGNUMBR,CMSH0000:           * MSH
                             CQRD0000:           * QRD
                             CQRF0000            * QRF
.
          MOVE      ZERO,FIELDNO                 * initialise seg. field count
.
.         Read in the rest of the segment until an end of segment character
.         (ASCII 13 - Carriage return) is found.
.
PROC5000  CALL      GCHR0000                     * get next character in message
          BRANCH    EXIT,PROC9500:               * connection timeout
                         PROC9000:               * connection lost
                         PROC4000:               * start of block
                         PROC6000:               * end of block
                         PROC5500:               * end of segment
                         PROC0500:               * no field separator
                         PROC0500                * missing encoding char(s)
.
.         Check if the character just read is a component separator,
.         as long as the field is not MSH-02 (which is where the component
.         separator is set).
.
          MATCH     MSHSEGMT,SEGMENT             * MSH segment & second field?
          IF        @EQUAL
            IF        FIELDNO = 2
              GOTO      PROC5100
            ENDIF
          ENDIF
.
.         If the character just read is a component separator, then reset
.         the previous field as long as there was data in the previous
.         field (ie the previous character was not a field separator or a
.         component separator).
.
          MATCH     ANS,COMSEPAR                 * no - check if comp. separator
          IF        @EQUAL
            MATCH     PREVCHAR,ANS
            IF        !@EQUAL
              MATCH     PREVCHAR,MSH00101
              IF        !@EQUAL
                MATCH     PREVCHAR,COMSEPAR
                IF        !@EQUAL
                  CALL      RFLD0000             * reset component just loaded
                ENDIF
              ENDIF
            ENDIF
            ADD       ONE,COMPCNT                * increment component count
            GOTO      PROC5200                   * only load into full message
          ENDIF
.
.         A valid character has been found so load it into the relevant
.         segment field/component (according to FIELDNO/COMPCNT).
.
PROC5100  PERFORM   SEGNUMBR,LMSH0000:           * MSH
                             LQRD0000:           * QRD
                             LQRF0000            * QRF
.
PROC5200  APPEND    ANS,RECVMESS                 * append char. to full message
          MOVE      ANS,PREVCHAR                 * save character
          GOTO      PROC5000
.
PROC5500  IF        DISPFLAG = 1
            DISPLAY   "Validating segment: [",SEGMENT,"]",*R,*N;
          ENDIF
.
          PERFORM   SEGNUMBR,VMSH0000:           * MSH
                             VQRD0000:           * QRD
                             VQRF0000            * QRF
.
          IF        DISPFLAG = 1
            DISPLAY   "[",SEGMENT,"] segment validated",*R,*N;
          ENDIF
.
          MATCH     ANS,ENDBLOCK                 * end of message received ?
          GOTO      PROC4000 IF NOT EQUAL        * no - get next segment
.
.         The end of message (EOB) has been found
.
PROC6000  RESET     RECVMESS
          IF        DISPFLAG = 1
            DISPLAY   "End of Block received",*R,*N;  * display full message
            STRIP     RECVMESS
            MOVE      ZERO,COUNTR
            MOVELPTR  RECVMESS,FORM4
            DISPLAY   "Full Message received is ",FORM4," bytes (excluding ":
                      "control characters):",*R,*N;
            WHILE     FORM4 > 0
              ADD       ONE,COUNTR
              MOVE      RECVMESS,ANS
              IF        COUNTR = 1
                DISPLAY   "[";
              ENDIF
              DISPLAY   *HON,ANS,*HOFF;
              IF        COUNTR = 70
                DISPLAY   "]",*R,*N;
                MOVE      ZERO,COUNTR
              ENDIF
              SUB       ONE,FORM4
              BUMP      RECVMESS
            DO
            DISPLAY   "]",*R,*N;
            RESET     RECVMESS
          ENDIF
.
.         All HL7 validations have been performed, so now we need to
.         validate message specific fields before writing the data to the
.         database
.
          IF        DISPFLAG = 1
            DISPLAY   "Validating message specific fields",*R,*N;
          ENDIF
.
.         If there are no errors, then process the messages
.
          COMPARE   ZERO,ERRORCNT                * any errors ?
          GOTO      PROC7000 IF NOT EQUAL        * yes - don't process
.
.         Check if the message is turned on (activated)
.
          MATCH     "1",PTCNRA19                 * find latest inpatient visit
          IF        !@EQUAL
            MATCH     "2",PTCNRA19               * find latest INP/EMR/OUT visit
            IF        !@EQUAL
              MOVE      "Message Type not activated",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
              WRITE     TEXTFILE,SEQ;ACTVCAPT
              GOTO      PROC7000
            ENDIF
          ENDIF
.
.         Process the QRY^A19 message regardless of whether this is a
.         test or production message as we are not updating or writing to
.         webPAS, just sending back data in a response.
.
          MATCH     "1",PTCNRA19                 * find latest inpatient visit
          IF        @EQUAL
            CALL      PA190000                   * process message
          ENDIF
          MATCH     "2",PTCNRA19                 * find latest INP/EMR/OUT visit
          IF        @EQUAL
            CALL      PVIS0000                   * process message
          ENDIF
.
PROC7000  WRITE     TEXTFILE,SEQ;*+,RECVMESS     * write message content
.
          IF        ERRORCNT = 0
            CALL      USST0000                   * update successful stats
          ELSE
            CALL      UFST0000                   * update failed/rejected stats
          ENDIF
.
.         Send the reply acknowledgement message
.
          CLOCK     TIME,CTIMEIS
          REP       " 0",CTIMEIS
          WRITE     TEXTFILE,SEQ;
          WRITE     TEXTFILE,SEQ;SENDCAPN,CTIMEIS
          IF        DISPFLAG = 1
            DISPLAY   "Sending Acknowledgement",*R,*N;
          ENDIF
          CALL      WMSH0000                     * format MSH segment
          BRANCH    EXIT,PROC9000:               * connection lost
                         PROC9600                * timeout
.
          CALL      WMSA0000                     * format MSA segment
          BRANCH    EXIT,PROC9000:               * connection lost
                         PROC9600                * timeout
.
.         If this is an A19 message, then send the rest of the segments
.         for the response
.
          CALL      RESP0000
          BRANCH    EXIT,PROC9000:               * connection lost
                         PROC9600                * timeout
.
.         Finish sending message with an end of block character and carriage
.         return
.
          IF        DISPFLAG = 1
            DISPLAY   "Sending end of message [",*HON,ENDBLOCK,ASK:
                      *HOFF,"]:  (* = carriage return)",*R,*N;
          ENDIF
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF SIGPIPE
          WRITE     COMSOCKT,2,1000;ENDBLOCK,CRETURN
          TRAPCLR   SIGPIPE
          GOTO      PROC9600 IF TIMEOUT          * timeout expired
          BRANCH    OVRCD,PROC9000               * connection lost
.
          GOTO      PROC0500                     * get next message
.
PROC9000  IF        DISPFLAG = 1
            DISPLAY   "Connection lost",*R,*N;
          ENDIF
          GOTO      PROC9900
.
PROC9100  IF        DISPFLAG = 1
            DISPLAY   "Solicited Socket not set up",*R,*N;
          ENDIF
          GOTO      PROC9900
.
PROC9500  IF        DISPFLAG = 1
            DISPLAY   "Timeout waiting for incoming message",*R,*N;
          ENDIF
          GOTO      PROC0500
.
PROC9600  IF        DISPFLAG = 1
            DISPLAY   "Timeout waiting for outgoing message",*R,*N;
          ENDIF
          GOTO      PROC9900
.
PROC9700  IF        DISPFLAG = 1
            DISPLAY   "Unable to listen on socket",*R,*N;
          ENDIF
          GOTO      PROC9999
.
PROC9800  IF        DISPFLAG = 1
            DISPLAY   "Unable to accept a socket connection",*R,*N;
          ENDIF
          ADD       ONE,ACCPTCNT                 * increment accept try count
          IF        ACCPTCNT < 5
            GOTO      PROC0100
          ELSE
            GOTO      PROC9999
          ENDIF
.
.         Close the communications socket and start again
.
PROC9900  CLOSE     COMSOCKT
          GOTO      PROC0100
.
PROC9999  RETURN
+
.*****************************************************************************
.*                          GTSTR000               Called by: PROC0000       *
.*                                                            GSEG0000       *
.*                                                            GCHR0000       *
.*        Read the next 4000 characters (or less) from the socket            *
.* Returns:   TMPSTRNG - buffer containing character string read in          *
.*            EXIT      0 = read ok                                          *
.*                      1 = timeout expired                                  *
.*                      2 = connection lost                                  *
.*****************************************************************************
.
GTSTR000  RECV      COMSOCKT,4000,30000;TMPSTRNG; * read first 4000 characters
          GOTO      GTSTR910 IF TIMEOUT          * timeout expired
          GOTO      GTSTR920 IF OVER             * connection lost
          IF        @LESS
.>>>>>>                                          * there are no more chars
.                                                  to be read
          ENDIF
.
.         Data received
.
          IF        DISPFLAG = 1
            STRIP     TMPSTRNG
            MOVE      ZERO,COUNTR
            MOVELPTR  TMPSTRNG,FORM4
            DISPLAY   "Received ",FORM4," bytes:  (* = carriage return)",*R,*N;
            WHILE     FORM4 > 0
              ADD       ONE,COUNTR
              MATCH     CRETURN,TMPSTRNG
              IF        @EQUAL
                MOVE      ASK,ANS
              ELSE
                MOVE      TMPSTRNG,ANS
              ENDIF
              IF        COUNTR = 1
                DISPLAY   "[";
              ENDIF
              DISPLAY   *HON,ANS,*HOFF;
              IF        COUNTR = 70
                DISPLAY   "]",*R,*N;
                MOVE      ZERO,COUNTR
              ENDIF
              SUB       ONE,FORM4
              BUMP      TMPSTRNG
            DO
            DISPLAY     "]",*R,*N;
            RESET       TMPSTRNG
          ENDIF
.
          MOVE      ZERO,EXIT
          GOTO      GTSTR999
.
GTSTR910  MOVE      ONE,EXIT                     * timeout
          GOTO      GTSTR999
.
GTSTR920  MOVE      TWO,EXIT                     * connection lost
          GOTO      GTSTR999
.
GTSTR999  RETURN
+
.*****************************************************************************
.*                              GDTM0000           Called by: WMSH0000       *
.*        Get the datetime the message is being sent                         *
.* Returns: DATETIME (ccyymmddhhmmss) - current date & time                  *
.*****************************************************************************
.
GDTM0000  OPEN      CONTROLF,"controlf"
          CALL      IBACLOCK
          UNPACK    CTIMEIS,HOURTM,ANS,MINTIME,ANS,SECTIME
          PACK      DATETIME,CCC,CYY,CMM,CDD,HOURTM,MINTIME,SECTIME
          REP       " 0",DATETIME
.
GDTM9999  RETURN
+
.*****************************************************************************
.*                                 LMSH0000        Called by: PROC0000       *
.*                          Load the MSH fields                              *
.*****************************************************************************
.
LMSH0000  BRANCH    FIELDNO,LMSH9999:            * Field Separator
                            LMSH0200:            * Encoding Characters
                            LMSH0300:            * Sending Application
                            LMSH0400:            * Sending Facility
                            LMSH0500:            * Receiving Application
                            LMSH0600:            * Receiving Facility
                            LMSH0700:            * Date/Time of Message
                            LMSH0800:            * Security
                            LMSH0900:            * Message Type
                            LMSH1000:            * Message Control ID
                            LMSH1100:            * Processing ID
                            LMSH1200:            * Version ID
                            LMSH1300:            * Sequence Number
                            LMSH1400:            * Continuation Pointer
                            LMSH1500:            * Accept Acknowledgement Type
                            LMSH1600:            * Appl. Acknowledgement Type
                            LMSH1700:            * Country Code
                            LMSH1800:            * Character Set
                            LMSH1900:            * Principal Language of Message
                            LMSH2000             * Alt. Char Set Hand Scheme
.
.         Invalid MSH field received, so ignore it
.
          GOTO      LMSH9999
.
. Note: MSH00101 is set in GCHR0000
.
.         MSH-02 Encoding Characters (ST)
.
LMSH0200  BRANCH    COMPCNT,LMSH0201
          GOTO      LMSH9999
.
LMSH0201  APPEND    ANS,MSH00201
          GOTO      LMSH9999
.
.         MSH-03 Sending Application (HD)
.
LMSH0300  BRANCH    COMPCNT,LMSH0301:            * namespace ID
                            LMSH0302:            * universal ID
                            LMSH0303             * universal ID type
          GOTO      LMSH9999
.
LMSH0301  APPEND    ANS,MSH00301                 * load namespace id (IS)
          GOTO      LMSH9999
.
LMSH0302  APPEND    ANS,MSH00302                 * load universal id (ST)
          GOTO      LMSH9999
.
LMSH0303  APPEND    ANS,MSH00303                 * load universal id type (ID)
          GOTO      LMSH9999
.
.         MSH-04 Sending Facility
.
LMSH0400  BRANCH    COMPCNT,LMSH0401:            * namespace ID
                            LMSH0402:            * universal ID
                            LMSH0403             * universal ID type
          GOTO      LMSH9999
.
LMSH0401  APPEND    ANS,MSH00401                 * load namespace id (IS)
          GOTO      LMSH9999
.
LMSH0402  APPEND    ANS,MSH00402                 * load universal id (ST)
          GOTO      LMSH9999
.
LMSH0403  APPEND    ANS,MSH00403                 * load universal id type (ID)
          GOTO      LMSH9999
.
.         MSH-05 Receiving Application
.
LMSH0500  BRANCH    COMPCNT,LMSH0501:            * namespace ID
                            LMSH0502:            * universal ID
                            LMSH0503             * universal ID type
          GOTO      LMSH9999
.
LMSH0501  APPEND    ANS,MSH00501                 * load namespace id (IS)
          GOTO      LMSH9999
.
LMSH0502  APPEND    ANS,MSH00502                 * load universal id (ST)
          GOTO      LMSH9999
.
LMSH0503  APPEND    ANS,MSH00503                 * load universal id type (ID)
          GOTO      LMSH9999
.
.         MSH-06 Receiving Facility
.
LMSH0600  BRANCH    COMPCNT,LMSH0601:            * namespace ID
                            LMSH0602:            * universal ID
                            LMSH0603             * universal ID type
          GOTO      LMSH9999
.
LMSH0601  APPEND    ANS,MSH00601                 * load namespace id (IS)
          GOTO      LMSH9999
.
LMSH0602  APPEND    ANS,MSH00602                 * load universal id (ST)
          GOTO      LMSH9999
.
LMSH0603  APPEND    ANS,MSH00603                 * load universal id type (ID)
          GOTO      LMSH9999
.
.         MSH-07 Date/Time of Message (TS)
.
LMSH0700  BRANCH    COMPCNT,LMSH0701
          GOTO      LMSH9999
.
LMSH0701  APPEND    ANS,MSH00701
          GOTO      LMSH9999
.
.         MSH-08 Security (ST)
.
LMSH0800  BRANCH    COMPCNT,LMSH0801
          GOTO      LMSH9999
.
LMSH0801  APPEND    ANS,MSH00801
          GOTO      LMSH9999
.
.         MSH-09 Message Type (CM)
.
LMSH0900  BRANCH    COMPCNT,LMSH0901:            * message type
                            LMSH0902:            * trigger event
                            LMSH0903             * message structure
          GOTO      LMSH9999
.         
LMSH0901  APPEND    ANS,MSH00901                 * load message type (ID)
          GOTO      LMSH9999
.         
LMSH0902  APPEND    ANS,MSH00902                 * load trigger event (ID)
          GOTO      LMSH9999
.
LMSH0903  APPEND    ANS,MSH00903                 * load message structure (ID)
          GOTO      LMSH9999
.
.         MSH-10 Message Control ID (ST)
.
LMSH1000  BRANCH    COMPCNT,LMSH1001
          GOTO      LMSH9999
.
LMSH1001  APPEND    ANS,MSH01001
          GOTO      LMSH9999
.
.         MSH-11 Processing ID (PT)
.
LMSH1100  BRANCH    COMPCNT,LMSH1101:            * processing id
                            LMSH1102             * processing mode
          GOTO      LMSH9999
.         
LMSH1101  APPEND    ANS,MSH01101                 * load processing id (ID)
          GOTO      LMSH9999
.         
LMSH1102  APPEND    ANS,MSH01102                 * load processing mode (ID)
          GOTO      LMSH9999
.
.         MSH-12 Version ID (VID)
.
LMSH1200  BRANCH    COMPCNT,LMSH1201:            * version ID
                            LMSH1202:            * internationalisation code
                            LMSH1203             * internal version ID
          GOTO      LMSH9999
.         
LMSH1201  APPEND    ANS,MSH01201                 * load version id (ID)
          GOTO      LMSH9999
.         
LMSH1202  APPEND    ANS,MSH01202                 * load intern'ln code (CE)
          GOTO      LMSH9999
.
LMSH1203  APPEND    ANS,MSH01203                 * load internal version id (CE)
          GOTO      LMSH9999
.
.         MSH-13 Sequence Number (NM)
.
LMSH1300  BRANCH    COMPCNT,LMSH1301
          GOTO      LMSH9999
.
LMSH1301  APPEND    ANS,MSH01301
          GOTO      LMSH9999
.
.         MSH-14 Continuation Pointer (ST)
.
LMSH1400  BRANCH    COMPCNT,LMSH1401
          GOTO      LMSH9999
.
LMSH1401  APPEND    ANS,MSH01401
          GOTO      LMSH9999
.
.         MSH-15 Accept Acknowledgement Type (ID)
.
LMSH1500  BRANCH    COMPCNT,LMSH1501
          GOTO      LMSH9999
.
LMSH1501  APPEND    ANS,MSH01501
          GOTO      LMSH9999
.
.         MSH-16 Application Acknowledgement Type (ID)
.
LMSH1600  BRANCH    COMPCNT,LMSH1601
          GOTO      LMSH9999
.
LMSH1601  APPEND    ANS,MSH01601
          GOTO      LMSH9999
.
.         MSH-17 Country Code (ID)
.
LMSH1700  BRANCH    COMPCNT,LMSH1701
          GOTO      LMSH9999
.
LMSH1701  APPEND    ANS,MSH01701
          GOTO      LMSH9999
.
.         MSH-18 Character Set (ID)
.
LMSH1800  BRANCH    COMPCNT,LMSH1801
          GOTO      LMSH9999
.
LMSH1801  APPEND    ANS,MSH01801
          GOTO      LMSH9999
.
.          MSH-19 Principal Language of Message (CE)
.
LMSH1900  BRANCH    COMPCNT,LMSH1901:            * identifier
                            LMSH1902:            * text
                            LMSH1903:            * name of coding system
                            LMSH1904:            * alternate identifier
                            LMSH1905:            * alternate text
                            LMSH1906             * name of alternate coding syst
          GOTO      LMSH9999
.         
LMSH1901  APPEND    ANS,MSH01901                 * load identifier (ID)
          GOTO      LMSH9999
.         
LMSH1902  APPEND    ANS,MSH01902                 * load text (ST)
          GOTO      LMSH9999
.
LMSH1903  APPEND    ANS,MSH01903                 * load name of cod. system (ST)
          GOTO      LMSH9999
.         
LMSH1904  APPEND    ANS,MSH01904                 * load alternate ident. (ID)
          GOTO      LMSH9999
.         
LMSH1905  APPEND    ANS,MSH01905                 * load aternate text (ST)
          GOTO      LMSH9999
.
LMSH1906  APPEND    ANS,MSH01906                 * load name alt cod system (ST)
          GOTO      LMSH9999
.
.          MSH-20 Alternate Character Set Handling (ID)
.
LMSH2000  BRANCH    COMPCNT,LMSH2001
          GOTO      LMSH9999
.
LMSH2001  APPEND    ANS,MSH02001
          GOTO      LMSH9999
.
LMSH9999  RETURN
+
.*****************************************************************************
.*                                 LQRD0000        Called by: PROC0000       *
.*                          Load the QRD fields                              *
.*****************************************************************************
.
LQRD0000  BRANCH    FIELDNO,LQRD0100:            * Query Date/Time
                            LQRD0200:            * Query Format Code
                            LQRD0300:            * Query Priority
                            LQRD0400:            * Query ID
                            LQRD0500:            * Deferred Response Type
                            LQRD0600:            * Deferred Response Date/Time
                            LQRD0700:            * Quantity Limited Request
                            LQRD0800:            * Who Subject Filter
                            LQRD0900:            * What Subject Filter
                            LQRD1000:            * What Department Data Code
                            LQRD1100:            * What Data Code Value Qual.
                            LQRD1200             * Query Results Level
.
.         Invalid QRD field received, so ignore it
.
          GOTO      LQRD9999
.
.         QRD-01  Query Date/Time (TS)
.
LQRD0100  BRANCH    COMPCNT,LQRD0101
          GOTO      LQRD9000
.
LQRD0101  APPEND    ANS,QRD00101
          GOTO      LQRD9000
.
.         QRD-02  Query Format Code (ID)
.
LQRD0200  BRANCH    COMPCNT,LQRD0201
          GOTO      LQRD9000
.
LQRD0201  APPEND    ANS,QRD00201
          GOTO      LQRD9000
.
.         QRD-03  Query Priority (ID)
.
LQRD0300  BRANCH    COMPCNT,LQRD0301
          GOTO      LQRD9000
.
LQRD0301  APPEND    ANS,QRD00301
          GOTO      LQRD9000
.
.         QRD-04  Query ID (ST)
.
LQRD0400  BRANCH    COMPCNT,LQRD0401
          GOTO      LQRD9000
.
LQRD0401  APPEND    ANS,QRD00401
          GOTO      LQRD9000
.
.         QRD-05  Deferred Response Type (ID)
.
LQRD0500  BRANCH    COMPCNT,LQRD0501
          GOTO      LQRD9000
.
LQRD0501  APPEND    ANS,QRD00501
          GOTO      LQRD9000
.
.         QRD-06  Deferred Response Date/Time (TS)
.
LQRD0600  BRANCH    COMPCNT,LQRD0601
          GOTO      LQRD9000
.
LQRD0601  APPEND    ANS,QRD00601
          GOTO      LQRD9000
.
.         QRD-07 Quantity Limited Request (CQ)
.
LQRD0700  BRANCH    COMPCNT,LQRD0701:            * quantity (NM)
                            LQRD0702             * units (CE)
          GOTO      LQRD9000
.
LQRD0701  APPEND    ANS,QRD00701                 * quantity (NM)
          GOTO      LQRD9000
.
LQRD0702  APPEND    ANS,QRD00702                 * units (CE)
          GOTO      LQRD9000
.
.         QRD-08 Who Subject Filter (XCN)
.
LQRD0800  BRANCH    COMPCNT,LQRD0801:            * ID number (ST)
                            LQRD0802:            * family name (ST)
                            LQRD0803:            * given name (ST)
                            LQRD0804:            * middle name (ST)
                            LQRD0805:            * suffix (ST)
                            LQRD0806:            * prefix (ST)
                            LQRD0807:            * degree (IS)
                            LQRD0808:            * source table (IS)
                            LQRD0809:            * assigning authority (HD)
                            LQRD0810:            * name type code (ID)
                            LQRD0811:            * identifier check digit (ST)
                            LQRD0812:            * check digit scheme (ID)
                            LQRD0813:            * identifier type code (IS)
                            LQRD0814:            * assigning facility (HD)
                            LQRD0815             * name representation code (ID)
          GOTO      LQRD9000
.
LQRD0801  APPEND    ANS,QRD00801                 * ID number (NM)
          GOTO      LQRD9000
.
LQRD0802  APPEND    ANS,QRD00802                 * family name (ST)
          GOTO      LQRD9000
.
LQRD0803  APPEND    ANS,QRD00803                 * given name (ST)
          GOTO      LQRD9000
.
LQRD0804  APPEND    ANS,QRD00804                 * middle name (ST)
          GOTO      LQRD9000
.
LQRD0805  APPEND    ANS,QRD00805                 * suffix (ST)
          GOTO      LQRD9000
.
LQRD0806  APPEND    ANS,QRD00806                 * prefix (ST)
          GOTO      LQRD9000
.
LQRD0807  APPEND    ANS,QRD00807                 * degree (IS)
          GOTO      LQRD9000
.
LQRD0808  APPEND    ANS,QRD00808                 * source table (IS)
          GOTO      LQRD9000
.
LQRD0809  APPEND    ANS,QRD00809                 * assigning authority (HD)
          GOTO      LQRD9000
.
LQRD0810  APPEND    ANS,QRD00810                 * name type code (ID)
          GOTO      LQRD9000
.
LQRD0811  APPEND    ANS,QRD00811                 * identifier check digit (ST)
          GOTO      LQRD9000
.
LQRD0812  APPEND    ANS,QRD00812                 * check digit scheme (ID)
          GOTO      LQRD9000
.
LQRD0813  APPEND    ANS,QRD00813                 * identifier type code (IS)
          GOTO      LQRD9000
.
LQRD0814  APPEND    ANS,QRD00814                 * assigning facility (HD)
          GOTO      LQRD9000
.
LQRD0815  APPEND    ANS,QRD00815                 * name representation code (ID)
          GOTO      LQRD9000
.
.         QRD-09 What Subject Filter (CE)
.
LQRD0900  BRANCH    COMPCNT,LQRD0901:            * identifier (ID)
                            LQRD0902:            * text (ST)
                            LQRD0903:            * name of coding system (ST)
                            LQRD0904:            * alternate identifier (ID)
                            LQRD0905:            * alternate text (ST)
                            LQRD0906             * name alt. coding system (ST)
          GOTO      LQRD9000
.
LQRD0901  APPEND    ANS,QRD00901                 * identifier (ID)
          GOTO      LQRD9000
.
LQRD0902  APPEND    ANS,QRD00902                 * text (ST)
          GOTO      LQRD9000
.
LQRD0903  APPEND    ANS,QRD00903                 * name of coding system (ST)
          GOTO      LQRD9000
.
LQRD0904  APPEND    ANS,QRD00904                 * alternate identifier (ID)
          GOTO      LQRD9000
.
LQRD0905  APPEND    ANS,QRD00905                 * alternate text (ST)
          GOTO      LQRD9000
.
LQRD0906  APPEND    ANS,QRD00906                 * name alt. coding system (ST)
          GOTO      LQRD9000
.
.         QRD-10 What Department Date Code (CE)
.
LQRD1000  BRANCH    COMPCNT,LQRD1001:            * identifier (ID)
                            LQRD1002:            * text (ST)
                            LQRD1003:            * name of coding system (ST)
                            LQRD1004:            * alternate identifier (ID)
                            LQRD1005:            * alternate text (ST)
                            LQRD1006             * name alt. coding system (ST)
          GOTO      LQRD9000
.
LQRD1001  APPEND    ANS,QRD01001                 * identifier (ID)
          GOTO      LQRD9000
.
LQRD1002  APPEND    ANS,QRD01002                 * text (ST)
          GOTO      LQRD9000
.
LQRD1003  APPEND    ANS,QRD01003                 * name of coding system (ST)
          GOTO      LQRD9000
.
LQRD1004  APPEND    ANS,QRD01004                 * alternate identifier (ID)
          GOTO      LQRD9000
.
LQRD1005  APPEND    ANS,QRD01005                 * alternate text (ST)
          GOTO      LQRD9000
.
LQRD1006  APPEND    ANS,QRD01006                 * name alt. coding system (ST)
          GOTO      LQRD9000
.
.         QRD-11 What Data Code Value Qual .(CM)
.
LQRD1100  BRANCH    COMPCNT,LQRD1101:            * first data code value (ST)
                            LQRD1102             * last data code value (ST)
          GOTO      LQRD9000
.
LQRD1101  APPEND    ANS,QRD01101                 * first data code value (ST)
          GOTO      LQRD9000
.
LQRD1102  APPEND    ANS,QRD01102                 * last data code value (ST)
          GOTO      LQRD9000
.
.         QRD-12  Query Results Level (ID)
.
LQRD1200  BRANCH    COMPCNT,LQRD1201
          GOTO      LQRD9000
.
LQRD1201  APPEND    ANS,QRD01201
          GOTO      LQRD9000
.
LQRD9000  MOVE      FIELDNO,LASTA19F
.
LQRD9999  RETURN
+
.*****************************************************************************
.*                                 LQRF0000        Called by: PROC0000       *
.*                          Load the QRF fields                              *
.*****************************************************************************
.
LQRF0000  BRANCH    FIELDNO,LQRF0100:            * Where Subject Filter
                            LQRF0200:            * When Data Start Date Time
                            LQRF0300:            * When Data End Date Time
                            LQRF0400:            * What User Qualifier
                            LQRF0500:            * Other QRY Subject Filter
                            LQRF0600:            * Which Date/Time Qualifier
                            LQRF0700:            * Which Date/Time Status Qual.
                            LQRF0800:            * Date/Time Selection Qualifier
                            LQRF0900             * When Quantity/Timing Qual.
.
.         Invalid QRF field received, so ignore it
.
          GOTO      LQRF9999
.
.         QRF-01  Where Subject Filter (ST)
.
LQRF0100  BRANCH    COMPCNT,LQRF0101
          GOTO      LQRF9999
.
LQRF0101  APPEND    ANS,QRF00101
          GOTO      LQRF9999
.
.         QRF-02  When Data Start Date/Time (TS)
.
LQRF0200  BRANCH    COMPCNT,LQRF0201
          GOTO      LQRF9999
.
LQRF0201  APPEND    ANS,QRF00201
          GOTO      LQRF9999
.
.         QRF-03  When Data End Date/Time (TS)
.
LQRF0300  BRANCH    COMPCNT,LQRF0301
          GOTO      LQRF9999
.
LQRF0301  APPEND    ANS,QRF00301
          GOTO      LQRF9999
.
.         QRF-04  What User Qualifier (ST)
.
LQRF0400  BRANCH    COMPCNT,LQRF0401
          GOTO      LQRF9999
.
LQRF0401  APPEND    ANS,QRF00401
          GOTO      LQRF9999
.
.         QRF-05  Other QRY Subject Filter (ST)
.
LQRF0500  BRANCH    COMPCNT,LQRF0501
          GOTO      LQRF9999
.
LQRF0501  APPEND    ANS,QRF00501
          GOTO      LQRF9999
.
.         QRF-06  Which Date/Time Qualifier (ID)
.
LQRF0600  BRANCH    COMPCNT,LQRF0601
          GOTO      LQRF9999
.
LQRF0601  APPEND    ANS,QRF00601
          GOTO      LQRF9999
.
.         QRF-07  Which Date/Time Status Qualifier (ID)
.
LQRF0700  BRANCH    COMPCNT,LQRF0701
          GOTO      LQRF9999
.
LQRF0701  APPEND    ANS,QRF00701
          GOTO      LQRF9999
.
.         QRF-08  Date/Time Selection Qualifier (ID)
.
LQRF0800  BRANCH    COMPCNT,LQRF0801
          GOTO      LQRF9999
.
LQRF0801  APPEND    ANS,QRF00801
          GOTO      LQRF9999
.
.         QRF-09  When Quantity/Timing Qualifier (TQ)
.
LQRF0900  BRANCH    COMPCNT,LQRF0901:            * quantity (CQ)
                            LQRF0902:            * interval (CM)
                            LQRF0903:            * duration (CM)
                            LQRF0904:            * start date/time (TS)
                            LQRF0905:            * end date/time (TS)
                            LQRF0906:            * priority (ST)
                            LQRF0907:            * condition (ST)
                            LQRF0908:            * text (TX)
                            LQRF0909:            * conjunction (ID)
                            LQRF0910:            * order sequencing (CM)
                            LQRF0911:            * occurrence duration (CE)
                            LQRF0912             * total occurrencs (NM)
          GOTO      LQRF9999
.
LQRF0901  APPEND    ANS,QRF00901                 * quantity (CQ)
          GOTO      LQRF9999
.
LQRF0902  APPEND    ANS,QRF00902                 * interval (CM)
          GOTO      LQRF9999
.
LQRF0903  APPEND    ANS,QRF00903                 * duration (CM)
          GOTO      LQRF9999
.
LQRF0904  APPEND    ANS,QRF00904                 * start date/time (TS)
          GOTO      LQRF9999
.
LQRF0905  APPEND    ANS,QRF00905                 * end date/time (TS)
          GOTO      LQRF9999
.
LQRF0906  APPEND    ANS,QRF00906                 * priority (ST)
          GOTO      LQRF9999
.
LQRF0907  APPEND    ANS,QRF00907                 * condition (ST)
          GOTO      LQRF9999
.
LQRF0908  APPEND    ANS,QRF00908                 * text (ST)
          GOTO      LQRF9999
.
LQRF0909  APPEND    ANS,QRF00909                 * conjunction (ID)
          GOTO      LQRF9999
.
LQRF0910  APPEND    ANS,QRF00910                 * order sequencing (CM)
          GOTO      LQRF9999
.
LQRF0911  APPEND    ANS,QRF00911                 * occurrence duration (CE)
          GOTO      LQRF9999
.
LQRF0912  APPEND    ANS,QRF00912                 * total occurrencs (NM)
          GOTO      LQRF9999
.
LQRF9999  RETURN
+
.*****************************************************************************
.*                               CMSH0000          Called by: PROC0000       *
.*                     Clear all MSH variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CMSH0000  PACK      MSH00101,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00201,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00301,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00302,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00303,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00401,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00402,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00403,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00501,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00502,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00503,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00601,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00602,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00603,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00701,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00801,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00901,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00902,SP100,SP100,SP100,SP100,SP100
          PACK      MSH00903,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01001,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01101,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01102,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01201,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01202,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01203,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01301,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01401,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01501,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01601,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01701,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01801,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01901,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01902,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01903,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01904,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01905,SP100,SP100,SP100,SP100,SP100
          PACK      MSH01906,SP100,SP100,SP100,SP100,SP100
          PACK      MSH02001,SP100,SP100,SP100,SP100,SP100
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     MSH00101
          CLEAR     MSH00201
          CLEAR     MSH00301
          CLEAR     MSH00302
          CLEAR     MSH00303
          CLEAR     MSH00401
          CLEAR     MSH00402
          CLEAR     MSH00403
          CLEAR     MSH00501
          CLEAR     MSH00502
          CLEAR     MSH00503
          CLEAR     MSH00601
          CLEAR     MSH00602
          CLEAR     MSH00603
          CLEAR     MSH00701
          CLEAR     MSH00801
          CLEAR     MSH00901
          CLEAR     MSH00902
          CLEAR     MSH00903
          CLEAR     MSH01001
          CLEAR     MSH01101
          CLEAR     MSH01102
          CLEAR     MSH01201
          CLEAR     MSH01202
          CLEAR     MSH01203
          CLEAR     MSH01301
          CLEAR     MSH01401
          CLEAR     MSH01501
          CLEAR     MSH01601
          CLEAR     MSH01701
          CLEAR     MSH01801
          CLEAR     MSH01901
          CLEAR     MSH01902
          CLEAR     MSH01903
          CLEAR     MSH01904
          CLEAR     MSH01905
          CLEAR     MSH01906
          CLEAR     MSH02001
.
CMSH9999  RETURN
+
.*****************************************************************************
.*                               CQRD0000          Called by: PROC0000       *
.*                     Clear all QRD variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CQRD0000  PACK      QRD00101,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00201,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00301,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00401,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00501,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00601,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00701,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00702,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00801,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00802,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00803,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00804,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00805,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00806,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00807,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00808,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00809,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00810,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00811,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00812,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00813,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00814,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00815,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00901,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00902,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00903,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00904,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00905,SP100,SP100,SP100,SP100,SP100
          PACK      QRD00906,SP100,SP100,SP100,SP100,SP100
          PACK      QRD01001,SP100,SP100,SP100,SP100,SP100
          PACK      QRD01002,SP100,SP100,SP100,SP100,SP100
          PACK      QRD01003,SP100,SP100,SP100,SP100,SP100
          PACK      QRD01004,SP100,SP100,SP100,SP100,SP100
          PACK      QRD01005,SP100,SP100,SP100,SP100,SP100
          PACK      QRD01006,SP100,SP100,SP100,SP100,SP100
          PACK      QRD01101,SP100,SP100,SP100,SP100,SP100
          PACK      QRD01102,SP100,SP100,SP100,SP100,SP100
          PACK      QRD01201,SP100,SP100,SP100,SP100,SP100
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     QRD00101
          CLEAR     QRD00201
          CLEAR     QRD00301
          CLEAR     QRD00401
          CLEAR     QRD00501
          CLEAR     QRD00601
          CLEAR     QRD00701
          CLEAR     QRD00702
          CLEAR     QRD00801
          CLEAR     QRD00802
          CLEAR     QRD00803
          CLEAR     QRD00804
          CLEAR     QRD00805
          CLEAR     QRD00806
          CLEAR     QRD00807
          CLEAR     QRD00808
          CLEAR     QRD00809
          CLEAR     QRD00810
          CLEAR     QRD00811
          CLEAR     QRD00812
          CLEAR     QRD00813
          CLEAR     QRD00814
          CLEAR     QRD00815
          CLEAR     QRD00901
          CLEAR     QRD00902
          CLEAR     QRD00903
          CLEAR     QRD00904
          CLEAR     QRD00905
          CLEAR     QRD00906
          CLEAR     QRD01001
          CLEAR     QRD01002
          CLEAR     QRD01003
          CLEAR     QRD01004
          CLEAR     QRD01005
          CLEAR     QRD01006
          CLEAR     QRD01101
          CLEAR     QRD01102
          CLEAR     QRD01201
.
CQRD9999  RETURN
+
.*****************************************************************************
.*                               CQRF0000          Called by: PROC0000       *
.*                     Clear all QRF variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CQRF0000  PACK      QRF00101,SP100,SP100,SP100,SP100,SP100
          PACK      QRF00201,SP100,SP100,SP100,SP100,SP100
          PACK      QRF00301,SP100,SP100,SP100,SP100,SP100
          PACK      QRF00401,SP100,SP100,SP100,SP100,SP100
          PACK      QRF00501,SP100,SP100,SP100,SP100,SP100
          PACK      QRF00601,SP100,SP100,SP100,SP100,SP100
          PACK      QRF00701,SP100,SP100,SP100,SP100,SP100
          PACK      QRF00801,SP100,SP100,SP100,SP100,SP100
          PACK      QRF00901,SP100,SP100,SP100,SP100,SP100
          PACK      QRF00902,SP100,SP100,SP100,SP100,SP100
          PACK      QRF00903,SP100,SP100,SP100,SP100,SP100
          PACK      QRF00904,SP100,SP100,SP100,SP100,SP100
          PACK      QRF00905,SP100,SP100,SP100,SP100,SP100
          PACK      QRF00906,SP100,SP100,SP100,SP100,SP100
          PACK      QRF00907,SP100,SP100,SP100,SP100,SP100
          PACK      QRF00908,SP100,SP100,SP100,SP100,SP100
          PACK      QRF00909,SP100,SP100,SP100,SP100,SP100
          PACK      QRF00910,SP100,SP100,SP100,SP100,SP100
          PACK      QRF00911,SP100,SP100,SP100,SP100,SP100
          PACK      QRF00912,SP100,SP100,SP100,SP100,SP100
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     QRF00101
          CLEAR     QRF00201
          CLEAR     QRF00301
          CLEAR     QRF00401
          CLEAR     QRF00501
          CLEAR     QRF00601
          CLEAR     QRF00701
          CLEAR     QRF00801
          CLEAR     QRF00901
          CLEAR     QRF00902
          CLEAR     QRF00903
          CLEAR     QRF00904
          CLEAR     QRF00905
          CLEAR     QRF00906
          CLEAR     QRF00907
          CLEAR     QRF00908
          CLEAR     QRF00909
          CLEAR     QRF00910
          CLEAR     QRF00911
          CLEAR     QRF00912
.
CQRF9999  RETURN
+
.*****************************************************************************
.*                           RFLD0000              Called by: GCHR0000       *
.*           Reset the HL7 component field just loaded        PROC0000       *
.*****************************************************************************
.
RFLD0000  PERFORM   SEGNUMBR,RMSH0000:           * MSH
                             RQRD0000:           * QRD
                             RQRF0000            * QRF
.
RFLD9999  RETURN
+
.*****************************************************************************
.*                              RMSH0000           Called by: RFLD0000       *
.*                      Reset all MSH variables                              *
.*    Also need to save some variables to send back in the acknowledgement   *
.*    message.                                                               *
.*****************************************************************************
.
RMSH0000  BRANCH    FIELDNO,RMSH0100:            * Field Separator
                            RMSH0200:            * Encoding Characters
                            RMSH0300:            * Sending Application
                            RMSH0400:            * Sending Facility
                            RMSH0500:            * Receiving Application
                            RMSH0600:            * Receiving Facility
                            RMSH0700:            * Date/Time of Message
                            RMSH0800:            * Security
                            RMSH0900:            * Message Type
                            RMSH1000:            * Message Control ID
                            RMSH1100:            * Processing ID
                            RMSH1200:            * Version ID
                            RMSH1300:            * Sequence Number
                            RMSH1400:            * Continuation Pointer
                            RMSH1500:            * Accept Acknowledgement Type
                            RMSH1600:            * Applic'n Acknowledgment Type
                            RMSH1700:            * Country Code
                            RMSH1800:            * Character Set
                            RMSH1900:            * Principal Language of Message
                            RMSH2000             * Alt. Char. Set Hand. Scheme
          GOTO      RMSH9999
.
.         MSH-01 - Field Separator (already set)
.
RMSH0100  GOTO      RMSH9999
.
.         MSH-02 - Encoding Characters
.
RMSH0200  BRANCH    COMPCNT,RMSH0201
          GOTO      RMSH9999
.
RMSH0201  RESET     MSH00201
          GOTO      RMSH9999
.
.         MSH-03 - Sending Application
.
RMSH0300  BRANCH    COMPCNT,RMSH0301:
                            RMSH0302:
                            RMSH0303
          GOTO      RMSH9999
.
RMSH0301  RESET     MSH00301
          GOTO      RMSH9999
.
RMSH0302  RESET     MSH00302
          GOTO      RMSH9999
.
RMSH0303  RESET     MSH00303
.0944894  PACK      SAVAPPLI,MSH00301,CARET,MSH00302,CARET,MSH00303
          GOTO      RMSH9999
.
.         MSH-04 - Sending Facility
.
RMSH0400  BRANCH    COMPCNT,RMSH0401:
                            RMSH0402:
                            RMSH0403 
          GOTO      RMSH9999
.
RMSH0401  RESET     MSH00401
          GOTO      RMSH9999
.
RMSH0402  RESET     MSH00402
          GOTO      RMSH9999
.
RMSH0403  RESET     MSH00403
.0944894  PACK      SAVFACIL,MSH00401,CARET,MSH00402,CARET,MSH00403
          GOTO      RMSH9999
.
.         MSH-05 - Receiving Application
.
RMSH0500  BRANCH    COMPCNT,RMSH0501:
                            RMSH0502:
                            RMSH0503
          GOTO      RMSH9999
.
RMSH0501  RESET     MSH00501
          GOTO      RMSH9999
.
RMSH0502  RESET     MSH00502
          GOTO      RMSH9999
.
RMSH0503  RESET     MSH00503
          GOTO      RMSH9999
.
.         MSH-06 - Receiving Facility
.
RMSH0600  BRANCH    COMPCNT,RMSH0601:
                            RMSH0602:
                            RMSH0603
          GOTO      RMSH9999
.
RMSH0601  RESET     MSH00601
          GOTO      RMSH9999
.
RMSH0602  RESET     MSH00602
          GOTO      RMSH9999
.
RMSH0603  RESET     MSH00603
          GOTO      RMSH9999
.
.         MSH-07 - Date/Time of Message
.
RMSH0700  BRANCH    COMPCNT,RMSH0701
          GOTO      RMSH9999
.
RMSH0701  RESET     MSH00701
          GOTO      RMSH9999
.
.         MSH-08 - Security
.
RMSH0800  BRANCH    COMPCNT,RMSH0801
          GOTO      RMSH9999
.
RMSH0801  RESET     MSH00801
          GOTO      RMSH9999
.
.         MSH-09 - Message Type
.
RMSH0900  BRANCH    COMPCNT,RMSH0901:
                            RMSH0902:
                            RMSH0903
          GOTO      RMSH9999
.
RMSH0901  RESET     MSH00901
          GOTO      RMSH9999
.
RMSH0902  RESET     MSH00902
          GOTO      RMSH9999
.
RMSH0903  RESET     MSH00903
          GOTO      RMSH9999
.
.         MSH-10 - Message Control ID
.
RMSH1000  BRANCH    COMPCNT,RMSH1001
          GOTO      RMSH9999
.
RMSH1001  RESET     MSH01001
          MOVE      MSH01001,SAVMESID
          GOTO      RMSH9999
.
.         MSH-11 - Processing ID
.
RMSH1100  BRANCH    COMPCNT,RMSH1101:
                            RMSH1102
          GOTO      RMSH9999
.
RMSH1101  RESET     MSH01101
          GOTO      RMSH9999
.
RMSH1102  RESET     MSH01102
          GOTO      RMSH9999
.
.         MSH-12 - Version ID
.
RMSH1200  BRANCH    COMPCNT,RMSH1201:
                            RMSH1202:
                            RMSH1203
          GOTO      RMSH9999
.
RMSH1201  RESET     MSH01201
          GOTO      RMSH9999
.
RMSH1202  RESET     MSH01202
          GOTO      RMSH9999
.
RMSH1203  RESET     MSH01203
          GOTO      RMSH9999
.
.         MSH-13 - Sequence Number
.
RMSH1300  BRANCH    COMPCNT,RMSH1301
          GOTO      RMSH9999
.
RMSH1301  RESET     MSH01301
          GOTO      RMSH9999
.
.         MSH-14 - Continuation Pointer
.
RMSH1400  BRANCH    COMPCNT,RMSH1401
          GOTO      RMSH9999
.
RMSH1401  RESET     MSH01401
          GOTO      RMSH9999
.
.         MSH-15 - Accept Acknowledgement Type
.
RMSH1500  BRANCH    COMPCNT,RMSH1501
          GOTO      RMSH9999
.
RMSH1501  RESET     MSH01501
          GOTO      RMSH9999
.
.         MSH-16 - Application Acknowledgment Type
.
RMSH1600  BRANCH    COMPCNT,RMSH1601
          GOTO      RMSH9999
.
RMSH1601  RESET     MSH01601
          GOTO      RMSH9999
.
.         MSH-17 - Country Code
.
RMSH1700  BRANCH    COMPCNT,RMSH1701
          GOTO      RMSH9999
.
RMSH1701  RESET     MSH01701
          GOTO      RMSH9999
.
.         MSH-18 - Character Set
.
RMSH1800  BRANCH    COMPCNT,RMSH1801
          GOTO      RMSH9999
.
RMSH1801  RESET     MSH01801
          GOTO      RMSH9999
.
.         MSH-19 - Principal Language of Message
.
RMSH1900  BRANCH    COMPCNT,RMSH1901:
                            RMSH1902:
                            RMSH1903:
                            RMSH1904:
                            RMSH1905:
                            RMSH1906
          GOTO      RMSH9999
.
RMSH1901  RESET     MSH01901
          GOTO      RMSH9999
.
RMSH1902  RESET     MSH01902
          GOTO      RMSH9999
.
RMSH1903  RESET     MSH01903
          GOTO      RMSH9999
.
RMSH1904  RESET     MSH01904
          GOTO      RMSH9999
.
RMSH1905  RESET     MSH01905
          GOTO      RMSH9999
.
RMSH1906  RESET     MSH01906
          GOTO      RMSH9999
.
.         MSH-20 - Alternate Character Set Handling Scheme
.
RMSH2000  BRANCH    COMPCNT,RMSH2001
          GOTO      RMSH9999
.
RMSH2001  RESET     MSH02001
          GOTO      RMSH9999
.
RMSH9999  RETURN
+
.*****************************************************************************
.*                                 RQRD0000        Called by: PROC0000       *
.*                          Load the QRD fields                              *
.*****************************************************************************
.
RQRD0000  BRANCH    FIELDNO,RQRD0100:            * Query Date/Time
                            RQRD0200:            * Query Format Code
                            RQRD0300:            * Query Priority
                            RQRD0400:            * Query ID
                            RQRD0500:            * Deferred Response Type
                            RQRD0600:            * Deferred Response Date/Time
                            RQRD0700:            * Quantity Limited Request
                            RQRD0800:            * Who Subject Filter
                            RQRD0900:            * What Subject Filter
                            RQRD1000:            * What Department Data Code
                            RQRD1100:            * What Data Code Value Qual.
                            RQRD1200             * Query Results Level
.
.         Invalid QRD field, so ignore it
.
          GOTO      RQRD9999
.
.         QRD-01  Query Date/Time (TS)
.
RQRD0100  BRANCH    COMPCNT,RQRD0101
          GOTO      RQRD9999
.
RQRD0101  RESET     QRD00101
          GOTO      RQRD9999
.
.         QRD-02  Query Format Code (ID)
.
RQRD0200  BRANCH    COMPCNT,RQRD0201
          GOTO      RQRD9999
.
RQRD0201  RESET     QRD00201
          GOTO      RQRD9999
.
.         QRD-03  Query Priority (ID)
.
RQRD0300  BRANCH    COMPCNT,RQRD0301
          GOTO      RQRD9999
.
RQRD0301  RESET     QRD00301
          GOTO      RQRD9999
.
.         QRD-04  Query ID (ST)
.
RQRD0400  BRANCH    COMPCNT,RQRD0401
          GOTO      RQRD9999
.
RQRD0401  RESET     QRD00401
          GOTO      RQRD9999
.
.         QRD-05  Deferred Response Type (ID)
.
RQRD0500  BRANCH    COMPCNT,RQRD0501
          GOTO      RQRD9999
.
RQRD0501  RESET     QRD00501
          GOTO      RQRD9999
.
.         QRD-06  Deferred Response Date/Time (TS)
.
RQRD0600  BRANCH    COMPCNT,RQRD0601
          GOTO      RQRD9999
.
RQRD0601  RESET     QRD00601
          GOTO      RQRD9999
.
.         QRD-07 Quantity Limited Request (CQ)
.
RQRD0700  BRANCH    COMPCNT,RQRD0701:            * quantity (NM)
                            RQRD0702             * units (CE)
          GOTO      RQRD9999
.
RQRD0701  RESET     QRD00701                     * quantity (NM)
          GOTO      RQRD9999
.
RQRD0702  RESET     QRD00702                     * units (CE)
          GOTO      RQRD9999
.
.         QRD-08 Who Subject Filter (XCN)
.
RQRD0800  BRANCH    COMPCNT,RQRD0801:            * ID number (ST)
                            RQRD0802:            * family name (ST)
                            RQRD0803:            * given name (ST)
                            RQRD0804:            * middle name (ST)
                            RQRD0805:            * suffix (ST)
                            RQRD0806:            * prefix (ST)
                            RQRD0807:            * degree (IS)
                            RQRD0808:            * source table (IS)
                            RQRD0809:            * assigning authority (HD)
                            RQRD0810:            * name type code (ID)
                            RQRD0811:            * identifier check digit (ST)
                            RQRD0812:            * check digit scheme (ID)
                            RQRD0813:            * identifier type code (IS)
                            RQRD0814:            * assigning facility (HD)
                            RQRD0815             * name representation code (ID)
          GOTO      RQRD9999
.
RQRD0801  RESET     QRD00801                     * ID number (NM)
          GOTO      RQRD9999
.
RQRD0802  RESET     QRD00802                     * family name (ST)
          GOTO      RQRD9999
.
RQRD0803  RESET     QRD00803                     * given name (ST)
          GOTO      RQRD9999
.
RQRD0804  RESET     QRD00804                     * middle name (ST)
          GOTO      RQRD9999
.
RQRD0805  RESET     QRD00805                     * suffix (ST)
          GOTO      RQRD9999
.
RQRD0806  RESET     QRD00806                     * prefix (ST)
          GOTO      RQRD9999
.
RQRD0807  RESET     QRD00807                     * degree (IS)
          GOTO      RQRD9999
.
RQRD0808  RESET     QRD00808                     * source table (IS)
          GOTO      RQRD9999
.
RQRD0809  RESET     QRD00809                     * assigning authority (HD)
          GOTO      RQRD9999
.
RQRD0810  RESET     QRD00810                     * name type code (ID)
          GOTO      RQRD9999
.
RQRD0811  RESET     QRD00811                     * identifier check digit (ST)
          GOTO      RQRD9999
.
RQRD0812  RESET     QRD00812                     * check digit scheme (ID)
          GOTO      RQRD9999
.
RQRD0813  RESET     QRD00813                     * identifier type code (IS)
          GOTO      RQRD9999
.
RQRD0814  RESET     QRD00814                     * assigning facility (HD)
          GOTO      RQRD9999
.
RQRD0815  RESET     QRD00815                     * name representation code (ID)
          GOTO      RQRD9999
.
.         QRD-09 What Subject Filter (CE)
.
RQRD0900  BRANCH    COMPCNT,RQRD0901:            * identifier (ID)
                            RQRD0902:            * text (ST)
                            RQRD0903:            * name of coding system (ST)
                            RQRD0904:            * alternate identifier (ID)
                            RQRD0905:            * alternate text (ST)
                            RQRD0906             * name alt. coding system (ST)
          GOTO      RQRD9999
.
RQRD0901  RESET     QRD00901                     * identifier (ID)
          GOTO      RQRD9999
.
RQRD0902  RESET     QRD00902                     * text (ST)
          GOTO      RQRD9999
.
RQRD0903  RESET     QRD00903                     * name of coding system (ST)
          GOTO      RQRD9999
.
RQRD0904  RESET     QRD00904                     * alternate identifier (ID)
          GOTO      RQRD9999
.
RQRD0905  RESET     QRD00905                     * alternate text (ST)
          GOTO      RQRD9999
.
RQRD0906  RESET     QRD00906                     * name alt. coding system (ST)
          GOTO      RQRD9999
.
.         QRD-10 What Department Date Code (CE)
.
RQRD1000  BRANCH    COMPCNT,RQRD1001:            * identifier (ID)
                            RQRD1002:            * text (ST)
                            RQRD1003:            * name of coding system (ST)
                            RQRD1004:            * alternate identifier (ID)
                            RQRD1005:            * alternate text (ST)
                            RQRD1006             * name alt. coding system (ST)
          GOTO      RQRD9999
.
RQRD1001  RESET     QRD01001                     * identifier (ID)
          GOTO      RQRD9999
.
RQRD1002  RESET     QRD01002                     * text (ST)
          GOTO      RQRD9999
.
RQRD1003  RESET     QRD01003                     * name of coding system (ST)
          GOTO      RQRD9999
.
RQRD1004  RESET     QRD01004                     * alternate identifier (ID)
          GOTO      RQRD9999
.
RQRD1005  RESET     QRD01005                     * alternate text (ST)
          GOTO      RQRD9999
.
RQRD1006  RESET     QRD01006                     * name alt. coding system (ST)
          GOTO      RQRD9999
.
.         QRD-11 What Data Code Value Qual .(CM)
.
RQRD1100  BRANCH    COMPCNT,RQRD1101:            * first data code value (ST)
                            RQRD1102             * last data code value (ST)
          GOTO      RQRD9999
.
RQRD1101  RESET     QRD01101                     * first data code value (ST)
          GOTO      RQRD9999
.
RQRD1102  RESET     QRD01102                     * last data code value (ST)
          GOTO      RQRD9999
.
.         QRD-12  Query Results Level (ID)
.
RQRD1200  BRANCH    COMPCNT,RQRD1201
          GOTO      RQRD9999
.
RQRD1201  RESET     QRD01201
          GOTO      RQRD9999
.
RQRD9999  RETURN
+
.*****************************************************************************
.*                                 RQRF0000        Called by: PROC0000       *
.*                          Load the QRF fields                              *
.*****************************************************************************
.
RQRF0000  BRANCH    FIELDNO,RQRF0100:            * Where Subject Filter
                            RQRF0200:            * When Data Start Date Time
                            RQRF0300:            * When Data End Date Time
                            RQRF0400:            * What User Qualifier
                            RQRF0500:            * Other QRY Subject Filter
                            RQRF0600:            * Which Date/Time Qualifier
                            RQRF0700:            * Which Date/Time Status Qual.
                            RQRF0800:            * Date/Time Selection Qualifier
                            RQRF0900             * When Quantity/Timing Qual.
.
.         Invalid QRF field received, so ignore it
.
          GOTO      RQRF9999
.
.         QRF-01  Where Subject Filter (ST)
.
RQRF0100  BRANCH    COMPCNT,RQRF0101
          GOTO      RQRF9999
.
RQRF0101  RESET     QRF00101
          GOTO      RQRF9999
.
.         QRF-02  When Data Start Date/Time (TS)
.
RQRF0200  BRANCH    COMPCNT,RQRF0201
          GOTO      RQRF9999
.
RQRF0201  RESET     QRF00201
          GOTO      RQRF9999
.
.         QRF-03  When Data End Date/Time (TS)
.
RQRF0300  BRANCH    COMPCNT,RQRF0301
          GOTO      RQRF9999
.
RQRF0301  RESET     QRF00301
          GOTO      RQRF9999
.
.         QRF-04  What User Qualifier (ST)
.
RQRF0400  BRANCH    COMPCNT,RQRF0401
          GOTO      RQRF9999
.
RQRF0401  RESET     QRF00401
          GOTO      RQRF9999
.
.         QRF-05  Other QRY Subject Filter (ST)
.
RQRF0500  BRANCH    COMPCNT,RQRF0501
          GOTO      RQRF9999
.
RQRF0501  RESET     QRF00501
          GOTO      RQRF9999
.
.         QRF-06  Which Date/Time Qualifier (ID)
.
RQRF0600  BRANCH    COMPCNT,RQRF0601
          GOTO      RQRF9999
.
RQRF0601  RESET     QRF00601
          GOTO      RQRF9999
.
.         QRF-07  Which Date/Time Status Qualifier (ID)
.
RQRF0700  BRANCH    COMPCNT,RQRF0701
          GOTO      RQRF9999
.
RQRF0701  RESET     QRF00701
          GOTO      RQRF9999
.
.         QRF-08  Date/Time Selection Qualifier (ID)
.
RQRF0800  BRANCH    COMPCNT,RQRF0801
          GOTO      RQRF9999
.
RQRF0801  RESET     QRF00801
          GOTO      RQRF9999
.
.         QRF-09  When Quantity/Timing Qualifier (TQ)
.
RQRF0900  BRANCH    COMPCNT,RQRF0901:            * quantity (CQ)
                            RQRF0902:            * interval (CM)
                            RQRF0903:            * duration (CM)
                            RQRF0904:            * start date/time (TS)
                            RQRF0905:            * end date/time (TS)
                            RQRF0906:            * priority (ST)
                            RQRF0907:            * condition (ST)
                            RQRF0908:            * text (TX)
                            RQRF0909:            * conjunction (ID)
                            RQRF0910:            * order sequencing (CM)
                            RQRF0911:            * occurrence duration (CE)
                            RQRF0912             * total occurrencs (NM)
          GOTO      RQRF9999
.
RQRF0901  RESET     QRF00901                     * quantity (CQ)
          GOTO      RQRF9999
.
RQRF0902  RESET     QRF00902                     * interval (CM)
          GOTO      RQRF9999
.
RQRF0903  RESET     QRF00903                     * duration (CM)
          GOTO      RQRF9999
.
RQRF0904  RESET     QRF00904                     * start date/time (TS)
          GOTO      RQRF9999
.
RQRF0905  RESET     QRF00905                     * end date/time (TS)
          GOTO      RQRF9999
.
RQRF0906  RESET     QRF00906                     * priority (ST)
          GOTO      RQRF9999
.
RQRF0907  RESET     QRF00907                     * condition (ST)
          GOTO      RQRF9999
.
RQRF0908  RESET     QRF00908                     * text (ST)
          GOTO      RQRF9999
.
RQRF0909  RESET     QRF00909                     * conjunction (ID)
          GOTO      RQRF9999
.
RQRF0910  RESET     QRF00910                     * order sequencing (CM)
          GOTO      RQRF9999
.
RQRF0911  RESET     QRF00911                     * occurrence duration (CE)
          GOTO      RQRF9999
.
RQRF0912  RESET     QRF00912                     * total occurrencs (NM)
          GOTO      RQRF9999
.
RQRF9999  RETURN
+
.*****************************************************************************
.*                            VMSH0000             Called by: PROC0000       *
.*      Validate that the mandatory MSH fields are not null or spaces        *
.*****************************************************************************
.
.         Encoding Characters
.
VMSH0000  MOVELPTR  MSH00201,FORM3               * null ?
          COMPARE   FOUR,FORM3                   * all encoding chars present ?
          GOTO      VMSH2000 IF NOT LESS         * yes
.
          MOVE      "MSH-02: Encoding characters incomplete",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         Message Type - Component 1
.
VMSH2000  MOVELPTR  MSH00901,FORM3               * null ?
          IF        FORM3 = 0
            GOTO      VMSH2500                   * yes - error
          ENDIF
          MATCH     SP3,MSH00901                 * no, is it blank ?
          GOTO      VMSH2500 IF EQUAL            * yes - error
          GOTO      VMSH3000
.
VMSH2500  MOVE      "MSH-09: Message Type not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         Message Type - Component 2
.
VMSH3000  MOVELPTR  MSH00902,FORM3               * null ?
          IF        FORM3 = 0
            GOTO      VMSH3500                   * yes - error
          ENDIF
          MATCH     SP3,MSH00902                 * no, is it blank ?
          GOTO      VMSH3500 IF EQUAL            * yes - error
          MOVE      MSH00902,MESSTYPE
.
          CALL      VTYP0000                     * valid message type ?
          GOTO      VMSH5000
.
VMSH3500  MOVE      "MSH-09: Trigger Event not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         Message Control ID
.
VMSH5000  MOVELPTR  MSH01001,FORM3               * null ?
          IF        FORM3 = 0
            GOTO      VMSH5500                   * yes - error
          ENDIF
          MATCH     MSH01001,SP100               * no, is it blank ?
          GOTO      VMSH6000 IF NOT EQUAL        * no
.
VMSH5500  MOVE      "MSH-10: Message Control ID not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         Processing Id
.
VMSH6000  MOVELPTR  MSH01101,FORM3               * null ?
          IF        FORM3 = 0
            GOTO      VMSH6500                   * yes
          ENDIF
          MATCH     SP1,MSH01101                 * no, is it blank ?
          GOTO      VMSH6500 IF EQUAL            * no
.
          MATCH     ANSP,MSH01101                * Production ?
          GOTO      VMSH7000 IF EQUAL            * yes - ok
.
          MATCH     ANSD,MSH01101                * Debugging ?
          GOTO      VMSH7000 IF EQUAL            * yes - ok
.
          MATCH     ANST,MSH01101                * Training ?
          GOTO      VMSH7000 IF EQUAL            * yes - ok
.
VMSH6500  MOVE      "MSH-11: Processing ID not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         Version Id
.
VMSH7000  MOVELPTR  MSH01201,FORM3               * null ?
          IF        FORM3 = 0
            GOTO      VMSH7500                   * yes
          ENDIF
          MATCH     SP5,MSH01201                 * no, is it blank ?
          GOTO      VMSH7700 IF NOT EQUAL        * no
.
VMSH7500  MOVE      "MSH-12: Version ID not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
VMSH7700  MATCH     "2.3.1",MSH01201
          IF        !@EQUAL
            MOVE      "MSH-12: Version ID not valid",ERRORDSC
            MOVE      "203",ERRORNUM
            CALL      EROR0000
          ENDIF
.
.0944894  Save sending application (up to 3 possible components)
VMSH9000  PACK      SAVAPPLI,SP70,SP70,SP70
          CLEAR     SAVAPPLI
.
          STRIP     MSH00301
          STRIP     MSH00302
          STRIP     MSH00303
.
          MOVELPTR  MSH00301,FORM3
          COMPARE   ZERO,FORM3
          GOTO      VMSH9400 IF EQUAL            * not populated
.
          MOVE      MSH00301,SAVAPPLI
          ENDSET    SAVAPPLI
          MOVELPTR  MSH00303,FORM3
          IF        FORM3 > 0
            APPEND    CARET,SAVAPPLI
            APPEND    MSH00302,SAVAPPLI
            APPEND    CARET,SAVAPPLI
            APPEND    MSH00303,SAVAPPLI
            GOTO      VMSH9300
          ENDIF
          MOVELPTR  MSH00302,FORM3
          IF        FORM3 > 0
            APPEND    CARET,SAVAPPLI
            APPEND    MSH00302,SAVAPPLI
          ENDIF
VMSH9300  RESET     SAVAPPLI
.
.0944894  Save sending facility (up to 3 possible components)
VMSH9400  PACK      SAVFACIL,SP70,SP70,SP70
          CLEAR     SAVFACIL
.
          STRIP     MSH00401
          STRIP     MSH00402
          STRIP     MSH00403
.
          MOVELPTR  MSH00401,FORM3
          COMPARE   ZERO,FORM3
          GOTO      VMSH9999 IF EQUAL            * not populated
.
          MOVE      MSH00401,SAVFACIL
          ENDSET    SAVFACIL
          MOVELPTR  MSH00403,FORM3
          IF        FORM3 > 0
            APPEND    CARET,SAVFACIL
            APPEND    MSH00402,SAVFACIL
            APPEND    CARET,SAVFACIL
            APPEND    MSH00403,SAVFACIL
            GOTO      VMSH9500
          ENDIF
          MOVELPTR  MSH00402,FORM3
          IF        FORM3 > 0
            APPEND    CARET,SAVFACIL
            APPEND    MSH00402,SAVFACIL
          ENDIF
VMSH9500  RESET     SAVFACIL
.
VMSH9999  RETURN
+
.*****************************************************************************
.*                            VQRD0000             Called by: PROC0000       *
.*      Validate that the mandatory QRD fields are not null or spaces        *
.*****************************************************************************
.
.         Query Date/Time
.
VQRD0000  MOVELPTR  QRD00101,FORM3               * null ?
          IF        FORM3 = 0
            GOTO      VQRD0500                   * yes - error
          ENDIF
          MATCH     SP8,QRD00101                 * no, is it blank ?
          GOTO      VQRD0500 IF EQUAL            * yes
.
          MOVE      QRD00101,DIM14
          CALL      VDTM0000                     * date/time validation
          GOTO      VQRD1000
.
.         QRD-01 Error handling
.
VQRD0500  MOVE      "QRD-01: Query Date not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         Query Format Code
.
VQRD1000  MOVELPTR  QRD00201,FORM3               * null ?
          IF        FORM3 = 0
            GOTO      VQRD1500                   * yes - error
          ENDIF
          MATCH     SP1,QRD00201                 * no, is it blank ?
          GOTO      VQRD1500 IF EQUAL            * yes
.
.         Check that the type is "D" (Response is in display format),
.         "R" (Response is in record-oriented format) or "T" (Response is in
.         tabular format)
.
          MATCH     "D",QRD00201
          GOTO      VQRD1400 IF EQUAL
.
          MATCH     "R",QRD00201
          GOTO      VQRD2000 IF EQUAL
.
          MATCH     "T",QRD00201
          GOTO      VQRD1400 IF EQUAL
.
.         QRD-02 Error handling
.
          MOVE      "QRD-02: Query Format Code not valid",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
          GOTO      VQRD2000
.
VQRD1400  MOVE      "QRD-02: Query Format Code not available",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VQRD2000
.
VQRD1500  MOVE      "QRD-02: Query Format Code not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         Query Priority
.
VQRD2000  MOVELPTR  QRD00301,FORM3               * null ?
          IF        FORM3 = 0
            GOTO      VQRD2500                   * yes - error
          ENDIF
          MATCH     SP1,QRD00301                 * no, is it blank ?
          GOTO      VQRD2500 IF EQUAL            * yes
.
.         Validate for "D" (Deferred) or "I" (Immediate)
.
          MATCH     "D",QRD00301
          GOTO      VQRD2400 IF EQUAL
.
          MATCH     "I",QRD00301
          GOTO      VQRD3000 IF EQUAL
.
.         QRD-03 Error handling
.
          MOVE      "QRD-03: Query Priority not valid",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
          GOTO      VQRD3000
.
VQRD2400  MOVE      "QRD-03: Query Priority not available",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VQRD3000
.
VQRD2500  MOVE      "QRD-03: Query Priority not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.         
.         Query ID
.         
VQRD3000  MOVELPTR  QRD00401,FORM3               * null ?
          IF        FORM3 = 0
            GOTO      VQRD3500                   * yes - error
          ENDIF
          MATCH     QRD00401,SP100               * no, is it blank ?
          GOTO      VQRD3500 IF EQUAL            * yes
          GOTO      VQRD5000
.
.         QRD-03 Error handling
.
VQRD3500  MOVE      "QRD-04: Query ID not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         Quantity Limited Request - Quantity (NM) component
.
VQRD5000  MOVELPTR  QRD00701,FORM3               * null ?
          IF        FORM3 = 0
            GOTO      VQRD5500                   * yes - error
          ENDIF
          MATCH     QRD00701,SP100               * no, is it blank ?
          GOTO      VQRD5500 IF EQUAL            * yes
.
.         Check that the field is numeric
.
          TYPE      QRD00701
          IF        !@EQUAL
            MOVE      "QRD-07: Quantity not numeric",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VQRD6000
          ENDIF
.
.         Check that the field has no decimal place
.
          SCAN      DOT,QRD00701
          IF        @EQUAL
            MOVE      "QRD-07: Quantity not an integer",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
          RESET     QRD00701
.
.         Check that the field is "1"
.
          IF        FORM3 > 1
            MOVE      "QRD-07: Quantity too large",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
.
          MOVE      QRD00701,FORM1
          COMPARE   ONE,FORM1
          IF        !@EQUAL
            MOVE      "QRD-07: Quantity not 1",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
          GOTO      VQRD6000
.
VQRD5500  MOVE      "QRD-07: Quantity not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         Quantity Limited Request - Units (CE) component
.
VQRD6000  MOVELPTR  QRD00702,FORM3               * null ?
          COMPARE   ZERO,FORM3
          GOTO      VQRD6500 IF EQUAL            * yes
.
          MATCH     SP2,QRD00702                 * no, is it blank ?
          GOTO      VQRD6500 IF EQUAL            * yes
.
.         Check that the field has a valid value
.
          MATCH     "CH",QRD00702                * characters ?
          GOTO      VQRD6100 IF EQUAL            * yes
.
          MATCH     "LI",QRD00702                * lines ?
          GOTO      VQRD6100 IF EQUAL            * yes
.
          MATCH     "PG",QRD00702                * pages ?
          GOTO      VQRD6100 IF EQUAL            * yes
.
          MATCH     "RD",QRD00702                * records ?
          GOTO      VQRD7000 IF EQUAL            * yes
.
          MATCH     "ZO",QRD00702                * locally defined ?
          GOTO      VQRD6100 IF EQUAL            * yes
.
          MOVE      "QRD-07: Quantity Limited Amount units not valid",ERRORDSC
          MOVE      "103",ERRORNUM
          CALL      EROR0000
          GOTO      VQRD7000
.
VQRD6100  MOVE      "QRD-07: Quantity Limited Amount units not available",ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
          GOTO      VQRD7000
.
VQRD6500  MOVE      "QRD-07: Quantity Limited Amount units not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         Who Subject Filter (U/R Number) - ID Number (ST) component
.
VQRD7000  MOVE      QRD00801,DIM500
          SQUEEZE   DIM500                       * remove spaces
          MOVELPTR  DIM500,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VQRD7100                   * yes - error
          ENDIF 
          MATCH     DIM500,SP100                 * no, is it blank ?
          GOTO      VQRD7100 IF EQUAL            * yes
.
          IF        FORM3 > 8
            MOVE      "QRD-08: Who Subject Filter id number too large",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VQRD7200
          ENDIF
.
.         Need to right justify U/R number
.
          PACK      KEY8,DIM500,SP8
          RJUSTIFY  KEY8
          MOVE      KEY8,DIM500
          CALL      RDMAST1                      * U/R on file ?
          IF        OVRCD = 1
            MOVE      "QRD-08: Who Subject Filter id number not valid",ERRORDSC
            MOVE      "204",ERRORNUM
            CALL      EROR0000
          ENDIF
          GOTO      VQRD7200
.
VQRD7100  MOVE      "QRD-08: Who Subject Filter id number not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         Who Subject Filter (U/R Number) - Source Table (IS) component
.
VQRD7200  MOVELPTR  QRD00808,FORM3               * null ?
          IF        FORM3 = 0
            GOTO      VQRD7300                   * yes - error
          ENDIF 
          MATCH     QRD00808,SP100               * no, is it blank ?
          GOTO      VQRD7300 IF EQUAL            * yes
          GOTO      VQRD7400
.
VQRD7300  MOVE      "QRD-08: Who Subject Filter source table not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         Who Subject Filter (U/R Number) - Assigning Authority (HD) component
.
VQRD7400  MOVELPTR  QRD00809,FORM3               * null ?
          IF        FORM3 = 0
            GOTO      VQRD7500                   * yes - error
          ENDIF 
          MATCH     QRD00809,SP100               * no, is it blank ?
          GOTO      VQRD7500 IF EQUAL            * yes
          GOTO      VQRD8000
.
VQRD7500  MOVE      "QRD-08: Who Subject Filter assigning authority not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         What Subject Filter - Identifier (ID) component
.
VQRD8000  MOVELPTR  QRD00901,FORM3               * null ?
          IF        FORM3 = 0
            GOTO      VQRD8100                   * yes - error
          ENDIF 
          MATCH     QRD00901,SP100               * no, is it blank ?
          GOTO      VQRD8100 IF EQUAL            * yes
.
.         Check that the request is for most recent inpatient visit (single
.         record)
.
          MATCH     "MRI",QRD00901
          IF        !@EQUAL
            MOVE      "QRD-09: What Subject Filter identifier not available",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
          ENDIF
          GOTO      VQRD8200
.
VQRD8100  MOVE     "QRD-09: What Subject Filter identifier not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         What Subject Filter - Name of Coding System (ST) component
.
VQRD8200  MOVELPTR  QRD00903,FORM3               * null ?
          IF        FORM3 = 0
            GOTO      VQRD8300                   * yes - error
          ENDIF 
          MATCH     QRD00903,SP100               * no, is it blank ?
          GOTO      VQRD8300 IF EQUAL            * yes
          GOTO      VQRD9000
.
VQRD8300  MOVE     "QRD-09: What Subject Filter name of coding system not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         What Department Data Code - Identifier (ID) component
.
VQRD9000  MOVELPTR  QRD01001,FORM3               * null ?
          IF        FORM3 = 0
            GOTO      VQRD9100                   * yes - error
          ENDIF 
          MATCH     QRD01001,SP100               * no, is it blank ?
          GOTO      VQRD9100 IF EQUAL            * yes
          GOTO      VQRD9200
.
VQRD9100  MOVE     "QRD-10: What Department Data Code not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
.         What Department Data Code - Name of Coding System (ST) component
.
VQRD9200  MOVELPTR  QRD01003,FORM3               * null ?
          IF        FORM3 = 0
            GOTO      VQRD9300                   * yes - error
          ENDIF 
          MATCH     QRD01003,SP100               * no, is it blank ?
          GOTO      VQRD9300 IF EQUAL            * yes
          GOTO      VQRD9999
.
VQRD9300  MOVE     "QRD-10: What Department Data Code name of coding system not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
VQRD9999  RETURN
+
.*****************************************************************************
.*                            VQRF0000             Called by: PROC0000       *
.*      Validate that the mandatory QRF fields are not null or spaces        *
.*****************************************************************************
.
.         Where Subject Filter
.
VQRF0000  MOVELPTR  QRF00101,FORM3               * null ?
          IF        FORM3 = 0
            GOTO      VQRF0500                   * yes - error
          ENDIF
          MATCH     SP8,QRF00101                 * no, is it blank ?
          GOTO      VQRF0500 IF EQUAL            * yes
          GOTO      VQRF9999
.
.         QRF-01 Error handling
.
VQRF0500  MOVE      "QRF-01: Where Subject Filter not present",ERRORDSC
          MOVE      "101",ERRORNUM
          CALL      EROR0000
.
VQRF9999  RETURN
+
.*****************************************************************************
.*                       VTYP0000                  Called by: VMSH0000       *
.*    Check if the message type (from MSH009) is one we are able to process  *
.* Requires:  MESSTYPE - 3 character message type (eg A01)                   *
.*****************************************************************************
.
VTYP0000  MATCH     "A19",MESSTYPE
          IF        @EQUAL
            CALL      URST0000                   * update received stats
            GOTO      VTYP9999
          ENDIF
.
          MOVE      "MSH-09: Message Type not available",ERRORDSC
          MOVE      "200",ERRORNUM
          CALL      EROR0000
.
VTYP9999  RETURN
+
.*****************************************************************************
.*                                  GSEG0000       Called by: PROC0000       *
.*                        Get the next segment code                          *
.* This routine is called when we are expecting the next segment.  It will   *
.* get the next 3 characters in the message and use this as the segment id.  *
.*                                                                           *
.* Returns: EXIT   0 = segment id read                                       *
.*                 1 = connection timed out                                  *
.*                 2 = connection lost                                       *
.*                 3 = start of block found                                  *
.*                 4 = end of block found                                    *
.*                 5 = end of segment found (CR)                             *
.*          SEGMENT = 3 character HL7 segment id (eg MSH)                    *
.*****************************************************************************
.
GSEG0000  CLEAR     SEGMENT
          MOVE      ZERO,COUNTER                 * initialise character counter
          WHILE     COUNTER < 3
            BUMP      TMPSTRNG                   * move to next character
            IF        @EOS
              CALL      GTSTR000                 * get next 4000 chars (or less)
              BRANCH    EXIT,GSEG9100:           * timeout
                             GSEG9200            * connection lost
            ENDIF
            MOVE      TMPSTRNG,ANS               * save character
.
            MATCH     CRETURN,ANS                * carriage return found ?
            GOTO      GSEG9500 IF EQUAL          * yes
.
            MATCH     ENDBLOCK,ANS               * end of block found ?
            IF        @EQUAL
              APPEND    ENDBLOCK,RECVMESS        * yes
              APPEND    CRETURN,RECVMESS
              GOTO      GSEG9400
            ENDIF
.
            MATCH     STRTBLOK,ANS               * start of block found ?
            GOTO      GSEG9300 IF EQUAL          * yes
.
            APPEND    ANS,SEGMENT                * load segment id
            ADD       ONE,COUNTER                * increment counter
          DO
.
          RESET     SEGMENT
          APPEND    SEGMENT,RECVMESS             * add seg. to full message
.
          MOVE      ZERO,EXIT
          GOTO      GSEG9999
.
GSEG9100  MOVE      ONE,EXIT
          GOTO      GSEG9999
.
GSEG9200  MOVE      TWO,EXIT
          GOTO      GSEG9999
.
GSEG9300  MOVE      THREE,EXIT
          GOTO      GSEG9999
.
GSEG9400  MOVE      FOUR,EXIT
          GOTO      GSEG9999
.
GSEG9500  MOVE      FIVE,EXIT
.
GSEG9999  RETURN
+
.*****************************************************************************
.*                          GCHR0000               Called by: PROC0000       *
.*                 Get the next character in the message string              *
.* Returns:  EXIT  0 = ok to continue                                        *
.*                 1 = connection timeout                                    *
.*                 2 = connection lost                                       *
.*                 3 = start of block                                        *
.*                 4 = end of block                                          *
.*                 5 = end of segment (CR)                                   *
.*                 6 = field separator blank (MSH00101 only)                 *
.*                 7 = encoding character(s) missing (MSH00201 only)         *
.*           ANS  - character just read in                                   *
.*****************************************************************************
.
GCHR0000  BUMP      TMPSTRNG                     * move to next field
          IF        @EOS
            CALL      GTSTR000                   * get next 4000 chars (or less)
            BRANCH    EXIT,GCHR9100:             * timeout
                           GCHR9200              * connection lost
          ENDIF
.
          MOVE      TMPSTRNG,ANS                 * save character
.
.         If this is the first field of the MSH segment, then we need to
.         load the field separator.
.
          MATCH     MSHSEGMT,SEGMENT             * MSH segment & first field?
          IF        @EQUAL
            IF        FIELDNO = 0
              MATCH     SP1,ANS                  * yes - blank separator ?
              GOTO      GCHR9600 IF EQUAL        * yes - error
.
              ADD       ONE,FIELDNO              * increment seg. field number
              MOVE      ANS,MSH00101             * no - load field separator
              MOVE      ZERO,COMPFLAG            * set for no component flag
              MOVE      SP1,PREVCHAR             * initialise previous character
            ENDIF
          ENDIF
.
.         Check if this is a field separator and if so, save to the full
.         message buffer (for message display later), increment the segment
.         field number, initialse the component count, then get the next
.         character.
.
          MATCH     MSH00101,ANS                 * field separator found ?
          IF        @EQUAL
            MATCH     PREVCHAR,ANS               * yes
            IF        !@EQUAL
              MATCH     PREVCHAR,COMSEPAR        * yes
              IF        !@EQUAL
                CALL      RFLD0000               * reset component just loaded
              ENDIF
            ENDIF
            ADD       ONE,FIELDNO                * increment seg. field number
            MOVE      ONE,COMPCNT                * init. field component count
            APPEND    ANS,RECVMESS               * add to full message buffer
            MOVE      ANS,PREVCHAR
            GOTO      GCHR0000                   * get next field
          ENDIF
.
.         Check that the encoding characters have been sent in MSH-02 if we
.         have just started processing MSH-03 (component 1)
.
          MATCH     MSHSEGMT,SEGMENT
          IF        @EQUAL
            IF        FIELDNO = 3 & COMPCNT = 1 & COMPFLAG = 0
              RESET     MSH00201
              MOVELPTR  MSH00201,FORM3
              IF        FORM3 <> 4
                GOTO      GCHR9700
               ELSE
                MOVE      MSH00201,COMSEPAR
                MOVE      ONE,COMPFLAG           * set component flag
              ENDIF
            ENDIF
          ENDIF
.
.         Check if end of segment found
.
          MATCH     CRETURN,ANS                  * carriage return found ?
          IF        @EQUAL
            APPEND    ANS,RECVMESS
            CALL      RFLD0000                   * reset component just loaded
            GOTO      GCHR9500
          ENDIF
.
.         Check if end of block (message) found
.
          MATCH     ENDBLOCK,ANS                 * end of block found ?
          IF        @EQUAL
            CALL      RFLD0000                   * reset component just loaded
            GOTO      GCHR9400
          ENDIF
.
.         Check if start of block found
.
          MATCH     STRTBLOK,ANS                 * start of block found ?
          IF        @EQUAL
            CALL      CLER0000                   * clear mess. buffer sand flags
            GOTO      GCHR9300                   * start again
          ENDIF
.
          MOVE      ZERO,EXIT
          GOTO      GCHR9999
.
GCHR9100  MOVE      ONE,EXIT
          GOTO      GCHR9999
.
GCHR9200  MOVE      TWO,EXIT
          GOTO      GCHR9999
.
GCHR9300  MOVE      THREE,EXIT
          GOTO      GCHR9999
.
GCHR9400  MOVE      FOUR,EXIT
          GOTO      GCHR9999
.
GCHR9500  MOVE      FIVE,EXIT
          GOTO      GCHR9999
.
GCHR9600  IF        DISPFLAG = 1
            DISPLAY   "MSH-01: Field Separator not set",*R,*N;
          ENDIF
          MOVE      SIX,EXIT
          GOTO      GCHR9999
.
GCHR9700  IF        DISPFLAG = 1
            DISPLAY   "MSH-02: Missing Encoding Character(s)",*R,*N;
          ENDIF
          MOVE      SEVEN,EXIT
.
GCHR9999  RETURN
+
.*****************************************************************************
.*                            CLER0000             Called by: GCHR0000       *
.*              Clear message buffers and flags               PROC0000       *
.*****************************************************************************
.
CLER0000  PACK      RECVMESS,SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100
          CLEAR     RECVMESS                     * clear full message buffer
          MOVE      ZERO,ERRORCNT                * initialise error flag
          MOVE      SP20,SAVMESID                * initialise message id
          MOVE      ZERO,SEGCOUNT                * initialise segment seq. count
.
          PACK      SEGSTRNG,SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100
          CLEAR     SEGSTRNG                     * clear segment string
          PACK      SENTMESS,SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100,SP100,SP100,SP100,SP100,SP100
          CLEAR     SENTMESS                     * clear full message buffer
.
          MOVE      SP100,ERORLINE               * clear first error
          CLEAR     ERORLINE
          CLEAR     ERORLINE
          MOVE      ZERO,ERORNUMB                * initialise first error
          MOVE      "Message accepted",ERORTEXT  * default for no error
.
          MOVE      SP6,SAVHFUND                 * initialise health fund vars.
          MOVE      SP8,SAVHTBLE
.
          MOVE      ZERO,PV150CNT                * init. PV1.50 repeat count
.
          CALL      CLRTMP00                     * clear alias temp file
.
CLER9999  RETURN
+
.*****************************************************************************
.*                              VSEG0000           Called by: PROC0000       *
.*   Validate that the segment found is relevant, and in the correct         *
.*   sequence, for the message type.                                         *
.* Requires:  SEGMENT - 3 character segment id                               *
.* Returns:   EXIT  0 = valid segment                                        *
.*                  1 = invalid segment                                      *
.*            SEGNUMBR - Segment number                                      *
.*                    0 = unknown segment                                    *
.*                    1 = MSH                                                *
.*                    2 = QRD                                                *
.*                    3 = QRF                                                *
.*****************************************************************************
.
VSEG0000  MATCH     MSHSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      ONE,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     QRDSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TWO,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     QRFSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      THREE,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MOVE      "Segment not valid",ERRORDSC
          MOVE      "100",ERRORNUM
          CALL      EROR0000
          MOVE      ZERO,SEGNUMBR
.
          MOVE      ONE,EXIT
          GOTO      VSEG9999
.
VSEG9000  MOVE      ZERO,EXIT
.
VSEG9999  RETURN
+
.******************************************************************************
.*                                  BACK0000              Called by: INIT0000 *
.*                          Display Background Screen                         *
.******************************************************************************
.
BACK0000  DISPLAY   *P1:4,*EF
          BOX       16,2,2,79,24
          HLINE     *G33,5,2,2
          HLINE     *G37,5,3,39
          HLINE     *G31,5,40,40
          HLINE     *G37,5,41,78
          HLINE     *G34,5,79,79
          HLINE     *G30,24,40,40
          VLINE     *G39,40,6,23
          DISPLAY   *P30:3,*HON,*V2LON," MESSAGE STATISTICS ";
.
          CALL      IBACLOCK
          PACK      KEY8,CCC,CYY,CMM,CDD
          UNPACK    KEY8,CCENT,CYEAR,CMON,CDAY
          CALL      PACDATE
          REP       " 0",CPCDATE
          CLOCK     TIME,CTIMEIS
.
          DISPLAY   *P4:4,"Activated on ",*V2LON,CPCDATE,*HOFF:
                    "  @  ",*V2LON,CTIMEIS,*HOFF:
                    *P41:4,"Current status... ",*V2LON,*HON,"Waiting";
.
          DISPLAY   *P4:6,*V2LON,*ULON,"Message":
                    *P12:6,"Received",*P21:6,"Successful",*P32:6,"Rejected":
                    *P42:6,*V2LON,*ULON,"Message":
                    *P50:6,"Received",*P59:6,"Successful":
                    *P70:6,"Rejected",*HOFF:
                    *P6:7,"A19"
.
.         Initialise counters
.
          MOVE      ZERO,A19RECV
          MOVE      ZERO,A19FAIL
          MOVE      ZERO,A19SUCC
.
BACK9999  RETURN
+
.*****************************************************************************
.*                          WMSH0000               Called by: PROC0000       *
.*        Format and write the message header segment                        *
.* Returns:  EXIT   0 = message sent ok                                      *
.*                  1 = connection lost, message not sent                    *
.*                  2 = timeout, message not sent                            *
.*****************************************************************************
.
WMSH0000  CALL      GDTM0000                     * get message date/time
.
.         If displaying messages, prepare the reply message variable
.
          MOVE      PIPE,MSH001                  * set field delimiter
.
          MOVE      "^~\&",MSH002                * set encoding chars.
.
          MOVE      "ibaPAS",MSH003              * set sending application
          ENDSET    MSH003
          APPEND    CARET,MSH003
          APPEND    PRGID,MSH003
          APPEND    VERSION,MSH003
          APPEND    CARET,MSH003
          APPEND    ANSL,MSH003
          RESET     MSH003
.
          MOVE      CAPPRVNO,MSH004              * set sending facility
          STRIP     MSH004
.
          MOVE      SAVAPPLI,MSH005              * set receiving application
          STRIP     MSH005
.
          MOVE      SAVFACIL,MSH006              * set receiving facility
.
          MOVE      DATETIME,MSH007              * set message date/time
          STRIP     MSH007
.
          CLEAR     MSH008                       * set security
.
.         Set message type
.
          MATCH     MTYPEA19,MESSTYPE
          IF        @EQUAL
            PACK      MSH009,ANSA,ANSD,ANSR,CARET,MESSTYPE
          ELSE
            PACK      MSH009,ANSA,ANSC,ANSK,CARET,MESSTYPE
          ENDIF
.
.         Generate and set message id
.
          MOVE      "  0",PRXCODE                * System Lock Sector 0
          CALL      GETSLK00                     * Get System Lock-Sector 0
          READ      CONTROLF,ZERO;*87,IBCNMESI   * read next message id
          MOVE      IBCNMESI,MSH010              * set message id
          ADD       ONE,IBCNMESI
          WRITAB    CONTROLF,ZERO;*87,IBCNMESI
          CALL      RELSLK00                     * Release System Lock-Sector 0
          SQUEEZE   MSH010
.
          MOVE      ANSP,MSH011                  * set processing id
.
          MOVE      "2.3.1",MSH012                 * set version id
.
          CLEAR     MSH013                       * set sequence number
.
          CLEAR     MSH014                       * set continuation pointer
.
          CLEAR     MSH015                       * set accept ackn. type
.
          CLEAR     MSH016                       * set applic. ackn. type
.
          CLEAR     MSH017                       * set country code
.
          CLEAR     MSH018                       * set character set
.
          MOVE      "en^^ISO 639-1",MSH019       * set principal language
.
          MOVE      "MSH",SEGMENT
          PACK      SEGSTRNG,STRTBLOK,SEGMENT:
                             MSH001,MSH002,PIPE,MSH003,PIPE,MSH004,PIPE:
                             MSH005,PIPE,MSH006,PIPE,MSH007,PIPE,MSH008,PIPE:
                             MSH009,PIPE,MSH010,PIPE,MSH011,PIPE,MSH012,PIPE:
                             MSH013,PIPE,MSH014,PIPE,MSH015,PIPE,MSH016,PIPE:
                             MSH017,PIPE,MSH018,PIPE,MSH019,CRETURN
.
          CALL      SENDM000                     * send message
          BRANCH    EXIT,WMSH9100:               * connection lost
                         WMSH9200                * timeout
.
          MOVE      ZERO,EXIT                    * sent ok
          GOTO      WMSH9999
.
WMSH9100  MOVE      ONE,EXIT
          GOTO      WMSH9999
.
WMSH9200  MOVE      TWO,EXIT
          GOTO      WMSH9999
.
WMSH9999  RETURN
+
.*****************************************************************************
.*                          WMSA0000               Called by: PROC0000       *
.*        Format and write the message acknowledgement segment               *
.* Returns:  EXIT   0 = message sent ok                                      *
.*                  1 = connection lost, message not sent                    *
.*                  2 = timeout, message not sent                            *
.*****************************************************************************
.
WMSA0000  MOVE      SP2,MSA001                   * clear all MSA fields
          MOVE      SP20,MSA002
          MOVE      SP100,MSA003
          MOVE      SP15,MSA004
          MOVE      SP1,MSA005
          MOVE      SP100,MSA006
          CLEAR     MSA001
          CLEAR     MSA002
          CLEAR     MSA003
          CLEAR     MSA004
          CLEAR     MSA005
          CLEAR     MSA006
.
.         Set MSA-01, Acknowledgement Code
.
          IF        ERRORCNT = 0
            MOVE      "AA",MSA001
          ELSE
            IF        ERORNUMB > 199
              MOVE      "AR",MSA001
            ELSE
              MOVE      "AE",MSA001
            ENDIF
          ENDIF
.
.         Set MSA-02, Message Control ID
.
          MOVE      SAVMESID,MSA002
.
.         Set MSA-03, Text message
.
          IF        ERRORCNT > 0
            MOVE      ERORLINE,MSA003
            STRIP     MSA003
          ENDIF
.
.         Set MSA-04, Expected Sequence Number
.
.         Set MSA-05, Delayed Acknowledgement Type
.
.         Set MSA-06, Error Condition
.
          MOVE      ERORNUMB,MSA006
          SQUEEZE   MSA006
          ENDSET    MSA006
          APPEND    CARET,MSA006
          APPEND    ERORTEXT,MSA006
          APPEND    CARET,MSA006
          APPEND    "HL7",MSA006
          RESET     MSA006
.
          MOVE      "MSA",SEGMENT
          PACK      SEGSTRNG,SEGMENT,PIPE:
                             MSA001,PIPE,MSA002,PIPE,MSA003,PIPE,MSA004,PIPE:
                             MSA005,PIPE,MSA006,CRETURN
.
          CALL      SENDM000                     * send message
          BRANCH    EXIT,WMSA9100:               * connection lost
                         WMSA9200                * timeout
.
          MOVE      ZERO,EXIT                    * sent ok
          GOTO      WMSA9999
.
WMSA9100  MOVE      ONE,EXIT
          GOTO      WMSA9999
.
WMSA9200  MOVE      TWO,EXIT
          GOTO      WMSA9999
.
WMSA9999  RETURN
+
.*****************************************************************************
.*                              VDTM0000           Called by: VFT10000       *
.*                  Validate a date/time field                VQRD0000       *
.* Requires:  DIM14 - Date in format ccyymmddhhmmss                          *
.*            FORM3 - Length of QRD00101                                     *
.* Returns:   ERRORCNT - error count                                         *
.*****************************************************************************
.
VDTM0000  COMPARE   EIGHT,FORM3                * QRD-01 requires date only
          GOTO      VDTM0100 IF NOT LESS
.
          MOVE      "QRD-01: Transaction Date is incomplete",ERRORDSC
          MOVE      "102",ERRORNUM
          CALL      EROR0000
          GOTO      VDTM9999
.
.         Validate that the date/time is numeric
.
VDTM0100  TYPE      DIM14
          IF        !@EQUAL
            MOVE      "QRD-01: Transaction Date is not numeric",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VDTM9999
          ENDIF
.
          UNPACK    DIM14,DIM2C,DIM2Y,DIM2M,DIM2D,DIM2H,DIM2N,DIM2S
.
.         Validate the century is >= 20
.
          MOVE      DIM2C,FORM2
          IF        FORM2 < 20
            MOVE      "QRD-01: Transaction Century is not valid",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VDTM9999
          ENDIF
.
.         Validate the month
.
          MOVE      DIM2M,FORM2
          IF        FORM2 < 1 | FORM2 > 12
            MOVE      "QRD-01: Transaction Month is not valid",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VDTM9999
          ENDIF
.
.         Validate the day is:
.              < 32 for January, March, May, July, August, October & December
.              < 31 for April, June, September & November
.              < 29 for February, except in a leap year where it is < 30
.
          BRANCH    FORM2,VDTM1000:              * Jan
                          VDTM3000:              * Feb
                          VDTM1000:              * Mar
                          VDTM2000:              * Apr
                          VDTM1000:              * May
                          VDTM2000:              * Jun
                          VDTM1000:              * Jul
                          VDTM1000:              * Aug
                          VDTM2000:              * Sep
                          VDTM1000:              * Oct
                          VDTM2000:              * Nov
                          VDTM1000               * Dec
.
.         Validate days for month of 31 days
.
VDTM1000  MOVE      DIM2D,FORM2
          IF        FORM2 < 1 | FORM2 > 31
            GOTO      VDTM3900
          ENDIF
          GOTO      VDTM4000
.
.         Validate days for month of 30 days
.
VDTM2000  MOVE      DIM2D,FORM2
          IF        FORM2 < 1 | FORM2 > 30
            GOTO      VDTM3900
          ENDIF
          GOTO      VDTM4000
.
.         Validate days for February
.         A leap year is one where:
.           1. Every year divisible by 4 is a leap year.
.           2. But every year divisible by 100 is NOT a leap year
.           3. Unless the year is also divisible by 400, then it is still a
.              leap year.
.
VDTM3000  MOVE      DIM2D,FORM2
          PACK      DIM4,DIM2C,DIM2Y
          MOVE      DIM4,FORM4
          IF        (FORM4%4) = 0
            IF        (FORM4%100) = 0
              IF        (FORM4%400) = 0
                GOTO      VDTM3200
              ENDIF
            ELSE
              GOTO      VDTM3200
            ENDIF
          ENDIF
.
.         Check for normal Feb days
.
VDTM3100  IF        FORM2 < 1 | FORM2 > 28
            GOTO      VDTM3900
          ENDIF
          GOTO      VDTM4000
.
.         Check for leap year Feb days
.
VDTM3200  IF        FORM2 < 1 | FORM2 > 29
            GOTO      VDTM3900
          ENDIF
          GOTO      VDTM4000
.
VDTM3900  MOVE      "QRD-01: Transaction Day is not valid",ERRORDSC
          MOVE      "102",ERRORNUM
          CALL      EROR0000
          GOTO      VDTM9999
.
.         Make sure that the transaction date is not in the future 
.
VDTM4000  COMPARE   TEN4,FORM3                   * time present ?
          GOTO      VDTM9999 IF LESS             * no - finished
.
          MOVE      DIM14,SAVEDATE               * save transaction date
          CALL      IBACLOCK
          PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
.
          MOVE      DIM14,DIM8
          MATCH     DIM8,CURRDATE
          IF        @LESS
            MOVE      "QRD-01: Transaction Date in the future",ERRORDSC
            MOVE      "207",ERRORNUM
            CALL      EROR0000
            GOTO      VDTM9999
          ENDIF
.
.         Validate the hour
.
          MOVE      DIM2H,FORM2
          IF        FORM2 < 0 | FORM2 > 23
            MOVE      "QRD-01: Transaction Hour not valid",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VDTM9999
          ENDIF
.
.         Validate the minute
.
          MOVE      DIM2N,FORM2
          IF        FORM2 < 0 | FORM2 > 59
            MOVE      "QRD-01: Transaction Minutes not valid",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VDTM9999
          ENDIF
.
.         Validate the second
.
          MOVE      DIM2S,FORM2
          IF        FORM2 < 0 | FORM2 > 59
            MOVE      "QRD-01: Transaction Seconds not valid",ERRORDSC
            MOVE      "102",ERRORNUM
            CALL      EROR0000
            GOTO      VDTM9999
          ENDIF
.
.         Make sure that the transaction time is not in the future
.
          MATCH     DIM8,CURRDATE
          IF        @EQUAL
            PACK      DIM8,DIM2H,COLON,DIM2N,COLON,DIM2S
            MATCH     DIM8,CTIMEIS
            IF        @LESS
              MOVE      "QRD-01: Transaction Time in the future",ERRORDSC
              MOVE      "207",ERRORNUM
              CALL      EROR0000
            ENDIF
            GOTO      VDTM9999
          ENDIF
.
VDTM9999  RETURN
+
.*****************************************************************************
.*                              EROR0000           Called by:  Lots          *
.*                       Error handling routine                              *
.* Requires: ERRORCNT - current error count                                  *
.*           ERRORDSC - error description                                    *
.*           ERRORNUM - error number                                         *
.* Returns:  ERORLINE - error description for error count = 1 (to be         *
.*                      returned in acknowledgement message - MSA-03)        *
.*           ERRORCNT - updated error count                                  *
.*           ERORNUMB - first error number                                   *
.*****************************************************************************
.
EROR0000  IF        DISPFLAG = 1
            DISPLAY   *+,ERRORDSC,*-,*R,*N;
          ELSE
          ENDIF
          ADD       ONE,ERRORCNT                 * increment error count
.
.         Write the error to the log file
.
          WRITE     TEXTFILE,SEQ;ERRORNUM,SP2,ERRORDSC
.
.         If this is the first error message, then store this to send
.         back in the acknowledgement message - MSA-03 & MSA-06.
.
          IF        ERRORCNT = 1
            MOVE      ERRORDSC,ERORLINE
.
            MOVE      ERRORNUM,ERORNUMB
            IF        ERORNUMB = 100
              MOVE      "Segment sequence error",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 101
              MOVE      "Required field missing",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 102
              MOVE      "Data type error",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 103
              MOVE      "Table value not found",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 200
              MOVE      "Unsupported message type",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 201
              MOVE      "Unsupported event code",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 202
              MOVE      "Unsupported procssing id",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 203
              MOVE      "Unsupported version id",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 204
              MOVE      "Unknown key identifier",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 205
              MOVE      "Duplicate key identifier",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 206
              MOVE      "Application record locked",ERORTEXT
              GOTO      EROR9000
            ENDIF
            IF        ERORNUMB = 207
              MOVE      "Application internal error",ERORTEXT
              GOTO      EROR9000
            ENDIF
            MOVE      "Unknown internal error",ERORTEXT
.
.           If this is the first error message, then send an email alert.
.           Load the error description and replace blanks with underscores
.           so the description is passed as a single variable to the script
.           for an email alert to be sent
.
EROR9000    MOVE      ERRORDSC,ALTERDSC
            REP       " _",ALTERDSC
            CALL      ALTUSR00                   * email alert
          ENDIF
.
EROR9999  RETURN
+
.*****************************************************************************
.*                              VA190000           Called by: PROC0000       *
.*              Validate the QRY-A19 message segments                        *
.*****************************************************************************
.
VA190000  BRANCH    SEGCOUNT,VA190100:           * segment 1 - should be MSH
                             VA190200:           * segment 2 - should be QRD
                             VA190300            * segment 3 - should be QRF
.
          GOTO      VA199100
.
VA190100  MATCH     MSHSEGMT,SEGMENT
          GOTO      VA199100 IF NOT EQUAL
          GOTO      VA199999
.
VA190200  MATCH     QRDSEGMT,SEGMENT
          GOTO      VA199100 IF NOT EQUAL
          GOTO      VA199999
.
VA190300  MATCH     QRFSEGMT,SEGMENT
          GOTO      VA199100 IF NOT EQUAL
          GOTO      VA199999
.
VA199100  MOVE      "Segment sequence not valid",ERRORDSC
          MOVE      "100",ERRORNUM
          CALL      EROR0000
.
VA199999  RETURN
+
.*****************************************************************************
.*                              XXXX0000           Called by: PROC0000       *
.*           Dummy generic routine for messages not handled                  *
.*****************************************************************************
.
XXXX0000
.
XXXX9999  RETURN
+
.*****************************************************************************
.*                             URST0000            Called by: VTYP0000       *
.*        Update stats on screen for messages received                       *
.*****************************************************************************
.
URST0000  BRANCH    DISPFLAG,URST9999            * not displaying
.
          ADD       ONE,A19RECV
          DISPLAY   *P12:7,A19RECV;
.
URST9999  RETURN
+
.*****************************************************************************
.*                             UFST0000            Called by: PROC0000       *
.*        Update stats on screen for messages which failed processing        *
.*****************************************************************************
.
UFST0000  BRANCH    DISPFLAG,UFST9999            * not displaying
.
          ADD       ONE,A19FAIL
          DISPLAY   *P32:7,A19FAIL;
.
UFST9999  RETURN
+
.*****************************************************************************
.*                             USST0000            Called by: PROC0000       *
.*        Update stats on screen for successfully processed messages         *
.*****************************************************************************
.
USST0000  BRANCH    DISPFLAG,USST9999            * not displaying
.
          ADD       ONE,A19SUCC
          DISPLAY   *P21:7,A19SUCC;
.
USST9999  RETURN
+
.*****************************************************************************
.*                              PA190000           Called by: PROC0000       *
.*                   Process the A19 message                                 *
.* Requires: Valid read on patma1af/patmx1af from validation of U/R          *
.*           (PID00301).                                                     *
.*****************************************************************************
.
.         Get the pmi master extension 2 record
.
PA190000  MOVE      PURNO,KEY8
          CALL      RDPMPX21                     * pmi ext. 2 record found ?
          BRANCH    OVRCD,PA199100               * eof - error
.
.         Get the national id
.
          CALL      PMIGTNID
          MOVE      NMPNUMB,PTNINMPI
.
.         Need to get the current or most recent I/P visit for the U/R
.
          PACK      KEY26,PURNO,SP1,THREE,TILDA30
          CALL      RSPTVIS4                     * position on last I/P for U/R
PA190500  CALL      RPPTVIS4                     * read previous record
          BRANCH    OVRCD,PA192000               * eof - no visit found
.
          MATCH     " 3",PTVITYPE                * I/P still ?
          GOTO      PA192000 IF NOT EQUAL        * no - no visit found
.
          MATCH     PURNO,PVIURNO                * same U/R still ?
          GOTO      PA192000 IF NOT EQUAL        * no - no visit found
.
.         The most recent visit record for the patient has been found, so
.         get the corresponding admission record
.
          MOVE      PVIBILL,KEY8
          CALL      RDPTMIS1                     * admission record found ?
          BRANCH    OVRCD,PA190500               * no - get next visit
.
.         The admission record has been found, so check its status.  Only
.         use current admissions, discharged admissions or on-leave admissions.
.
          IF        ASTAT < 2 | ASTAT > 4
            GOTO      PA190500                   * ignore visit
          ENDIF
.
.         Get the visit extension record for the admission
.
          MOVE      AADMNO,KEY8
          CALL      RDPMVX11                     * visit ext. record found ?
          BRANCH    OVRCD,PA190500               * eof - ignore visit
.
.         Get the latest transfer record for the admission
.
          PACK      KEY30,AADMNO,TILDA30
          CALL      RDSTRAN2                     * position on last admission
          CALL      RDPTRAN2                     * read previous record
          BRANCH    OVRCD,PA190500               * eof - ignore visit
.
          MATCH     TADMN,AADMNO                 * same admission still ?
          GOTO      PA190500 IF NOT EQUAL        * no - ignore visit
          PACK      SAVKEY30,TADMN,TDATE,TTIME,TWARD,TBED  * save key
.
.         Get the discharge record if the patient is discharged
.
          COMPARE   THREE,ASTAT                  * discharged ?
          GOTO      PA191000 IF NOT EQUAL        * no
.
          MOVE      AADMNO,KEY8
          CALL      RDDSCH1                      * discharge record found ?
          BRANCH    OVRCD,PA190500               * no - ignore visit
.
.         Get the PRA record for the admission
.
PA191000  MOVE      AADMNO,KEY8
          CALL      RDPTRES1                     * PRA record found ?
          BRANCH    OVRCD,PA190500               * no - ignore visit
.
.         Get the ward/bed record
.
          PACK      KEY6,TWARD,TBED
          CALL      RDWARD1                      * ward/bed record found ?
          BRANCH    OVRCD,PA190500               * no - ignore visit
.
.         We have found all the relevant records for this visit in order
.         to send an A19 message.  Set the message number to be an A08
.         as would be sent from HL7CISIN, so all the visit fields are
.         populated accordingly.
.
          MOVE      AADMNO,VISITNUM              * load visit number (0885553)
          MOVE      EIGHT,MESSNUMB               * set as for A08 (I/P update)
          GOTO      PA199999
.
.         There are no I/P visits for this patient, so we only need to send
.         the PMI details.  Set the message number to be an A31
.         as would be sent from HL7CISIN, so all the fields are
.         populated accordingly.
.
PA192000  MOVE      SP8,AADMNO
          MOVE      SP8,VISITNUM                 * blank visit number (0885553)
          MOVE      TWENTY2,MESSNUMB             * set as for A31 (PMI Update)
          GOTO      PA199999
.
PA199100  MOVE      "PMI record (pmspx2af) not found for U/R ",ERRORDSC
          ENDSET    ERRORDSC
          APPEND    PURNO,ERRORDSC
          RESET     ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
.
PA199999  RETURN
+
.*****************************************************************************
.*                               PVIS0000 (code based on HL7REGEN)           *
.*                       Process the A19 message                             *
.* Requires: Valid read on patma1af/patmx1af from validation of U/R          *
.*           (PID00301).                                                     *
.* Returns : Latest Inpatient, Emergency or Outpatient visit from patvisaf   *
.*****************************************************************************
.
.         Get the pmi master extension 2 record
.
PVIS0000  MOVE      PURNO,KEY8
          CALL      RDPMPX21                     * pmi ext. 2 record found ?
          BRANCH    OVRCD,PVIS9100               * eof - error
.
.         Get the national id
.
          CALL      PMIGTNID
          MOVE      NMPNUMB,PTNINMPI
.
.         Need to get the current or most recent INP/EMR/OUT visit for the U/R
.
          PACK      KEY24,PURNO,TILDA30
          CALL      RSPTVIS2                     * position on last visit for UR
PVIS0500  CALL      RPPTVIS2                     * read previous record
          BRANCH    OVRCD,PVIS2000               * eof - no visit found
.
          MATCH     PURNO,PVIURNO                * same U/R still ?
          GOTO      PVIS2000 IF NOT EQUAL        * no - no visit found
.
          MOVE      PVIBILL,VISITNUM             * save visit number
.
PVIS1000  CALL      GVIS0000                     * get visit number
          BRANCH    EXIT,PVIS0500                * no visit found
.
.         We have found all the relevant records for this visit in order
.         to send an A19 message.  Set the message number to be an A08
.         as would be sent from HL7CISIN, so all the visit fields are
.         populated accordingly.
.
          GOTO      PVIS9999
.
.         There are no visits for this patient, so we only need to send
.         the PMI details.  Set the message number to be an A31
.         as would be sent from HL7CISIN, so all the fields are
.         populated accordingly.
.
PVIS2000  MOVE      SP8,AADMNO
          MOVE      TWENTY2,MESSNUMB             * set as for A31 (PMI Update)
          GOTO      PVIS9999
.
PVIS9100  MOVE      "PMI record (pmspx2af) not found for U/R ",ERRORDSC
          ENDSET    ERRORDSC
          APPEND    PURNO,ERRORDSC
          RESET     ERRORDSC
          MOVE      "207",ERRORNUM
          CALL      EROR0000
.
PVIS9999  RETURN
+
.*****************************************************************************
.*                               GVIS0000 (code based on HL7REGEN)           *
.* Requires: Visit number                                                    *
.* Returns : PMI and Visit based records relevant to the type of visit       *
.*           EXIT  0 = valid visit number details found                      *
.*                 1 = no visit details found                                *
.*****************************************************************************
GVIS0000  PACK      VISITNUM,VISITNUM,SP8
          MATCH     SP8,VISITNUM                 * visit number populated ?
          GOTO      GVIS9100 IF EQUAL            * no
.
.         See if a visit extension (pmsvx1af) record exists.  If it does exist,
.         it could be an ED, I/P or O/P visit, otherwise exit with no visit
.
          MOVE      VISITNUM,KEY8
          CALL      RDPMVX11                     * visit ext. record found ?
          BRANCH    OVRCD,GVIS9100               * no - exit
.
.         Get the patvisaf record to find out the visit type.  If no record
.         exists, it could be an O/P booking or O/P DNA.
.
          MOVE      SP6,PVISITE                  * clear O/P site variable
          MOVE      VISITNUM,KEY8
          CALL      RDPTVIS1                     * patvisaf record found ?
          BRANCH    OVRCD,GVIS2000               * no -check for O/P booking/DNA
.
          BRANCH    PVITYPE,GVIS1000:            * ED
                            GVIS2000:            * O/P
                            GVIS3000             * I/P
.
          GOTO      GVIS9100
.
.         ED visit, so get the visit details
.         ----------------------------------
GVIS1000  MOVE      VISITNUM,KEY8
          CALL      RDEMVIS1                     * visit record on file ?
          BRANCH    OVRCD,GVIS9100
.
          MOVE      VISITNUM,KEY8
          CALL      RDPMVX11
          BRANCH    OVRCD,GVIS9100
.
          MOVE      TEN,MESSNUMB                 * set as for A08 (EMR update)
          GOTO      GVIS5000
.
.         O/P visit, so get the booking details
.         -------------------------------------
GVIS2000  MATCH     SP6,PVISITE                  * site blank ?
          GOTO      GVIS2100 IF EQUAL            * yes - possible O/P booking
.
          MOVE      PVISITE,KEY6
          CALL      RDSITA1                      * site record found ?
          BRANCH    OVRCD,GVIS9100
.
          MATCH     SP3,OSTFILE
          IF        @EQUAL
            GOTO      GVIS9100
          ENDIF
          GOTO      GVIS2200
.
GVIS2100  MOVE      SP6,KEY6
          CALL      RDSSITA1                     * position at start of file
GVIS2150  CALL      RDKSITA1                     * read next record
          BRANCH    OVRCD,GVIS9100
.
.         Open the O/P booking extension file
.
GVIS2200  CLOSE     OUTBB1A1                     * close current file
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          PACK      CFNAME,OSTFILE,FILBB1A1
          OPEN      OUTBB1A1,CFNAME              * open new file
          TRAPCLR   IO
          COMPARE   ZERO,OVRCD                   * file opened ?
          GOTO      GVIS2300 IF EQUAL            * yes
.
          MATCH     SP6,PVISITE                  * site blank ?
          IF        @EQUAL
            GOTO      GVIS2150                   * get next site record
          ELSE
            GOTO      GVIS9100
          ENDIF
.
.         Get the booking B record
.
GVIS2300  MOVE      VISITNUM,KEY8
          CALL      RDBOKB1
          COMPARE   ZERO,OVRCD                   * booking B record found ?
          GOTO      GVIS2400 IF EQUAL            * yes
.
          MATCH     SP6,PVISITE                  * site blank ?
          IF        @EQUAL
            GOTO      GVIS2150                   * get next site record
          ELSE
            GOTO      GVIS9100
          ENDIF
.
.         Open the O/P booking file
.
GVIS2400  CLOSE     OUTBOKA6                     * close current file
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          PACK      CFNAME,OSTFILE,FILBOKA6
          OPEN      OUTBOKA6,CFNAME              * open new file
          TRAPCLR   IO
          COMPARE   ZERO,OVRCD                   * file opened ?
          GOTO      GVIS2500 IF EQUAL            * yes
.
          MATCH     SP6,PVISITE                  * site blank ?
          IF        @EQUAL
            GOTO      GVIS2150                   * get next site record
          ELSE
            GOTO      GVIS9100
          ENDIF
.
GVIS2500  PACK      KEY36,VISITNUM,SP70
          CALL      RDSBOKA6                     * position before visit number
          CALL      RDKBOKA6                     * read next record
          COMPARE   ZERO,OVRCD                   * booking A record found ?
          GOTO      GVIS2600 IF EQUAL            * yes
.
          MATCH     SP6,PVISITE                  * site blank ?
          IF        @EQUAL
            GOTO      GVIS2150                   * get next site record
          ELSE
            GOTO      GVIS9100
          ENDIF
.
GVIS2600  RJUSTIFY  VISITNUM
          MATCH     OBAOUTNO,VISITNUM            * same visit number ?
          GOTO      GVIS2700 IF EQUAL            * yes
.
          MATCH     SP6,PVISITE                  * site blank ?
          IF        @EQUAL
            GOTO      GVIS2150                   * get next site record
          ELSE
            GOTO      GVIS9100
          ENDIF
.
.         If there was a patvisaf record for the visit, then it must have
.         a status of attended.
.         If there was no patvisaf record for the visit, then it must have
.         a status of booked or DNA.
.
GVIS2700  MATCH     SP6,PVISITE                  * site blank ?
          IF        @EQUAL
            IF        OBASTAT <> 1 & OBASTAT <> 5
              GOTO      GVIS9100
            ENDIF
          ELSE
            IF        OBASTAT <> 4
              GOTO      GVIS9100
            ENDIF
          ENDIF
.
          IF        OBASTAT = 1 | OBASTAT = 5
            MOVE      TWO,PVITYPE                * for DGCLICUR
            MOVE      OBAOUTNO,PVIBILL           * for DGCLICUR (CAR 296884)
          ENDIF
.
          MOVE      NINE,MESSNUMB                * set as for A08 (OUT update)
          GOTO      GVIS5000
.
.         I/P visit, so get the admission details (same code as PA190000)
.         ---------------------------------------
GVIS3000  MOVE      VISITNUM,KEY8
          CALL      RDPTMIS1                     * admission on file ?
          BRANCH    OVRCD,GVIS9100
.
.         The admission record has been found, so check its status.  Only
.         use current admissions, discharged admissions or on-leave admissions.
.
          IF        ASTAT < 2 | ASTAT > 4
            GOTO      GVIS9100                   * ignore visit
          ENDIF
.
.         Get the visit extension record for the admission
.
          MOVE      AADMNO,KEY8
          CALL      RDPMVX11                     * visit ext. record found ?
          BRANCH    OVRCD,GVIS9100               * eof - ignore visit
.
.         Get the latest transfer record for the admission
.
          PACK      KEY30,AADMNO,TILDA30
          CALL      RDSTRAN2                     * position on last admission
          CALL      RDPTRAN2                     * read previous record
          BRANCH    OVRCD,GVIS9100               * eof - ignore visit
.
          MATCH     TADMN,AADMNO                 * same admission still ?
          GOTO      GVIS9100 IF NOT EQUAL        * no - ignore visit
          PACK      SAVKEY30,TADMN,TDATE,TTIME,TWARD,TBED  * save key
.
.         Get the discharge record if the patient is discharged
.
          COMPARE   THREE,ASTAT                  * discharged ?
          GOTO      GVIS3200 IF NOT EQUAL        * no
.
          MOVE      AADMNO,KEY8
          CALL      RDDSCH1                      * discharge record found ?
          BRANCH    OVRCD,GVIS9100               * no - ignore visit
.
.         Get the ward/bed record
.
GVIS3200  PACK      KEY6,TWARD,TBED
          CALL      RDWARD1                      * ward/bed record found ?
          BRANCH    OVRCD,GVIS9100               * no - ignore visit
.
          MOVE      EIGHT,MESSNUMB               * set as for A08 (INP update)
          GOTO      GVIS5000
.
GVIS5000  MOVE      VISITNUM,KEY8
          CALL      RDPTRES1                     * pra record on file ?
          IF        OVRCD = 1
            PACK      PKNAME,SP70,SP20           * no
            MOVE      SP35,PKADD1
            MOVE      SP35,PKADD2
            MOVE      SP35,PKSUBR
            MOVE      SP35,PKADD4
            MOVE      SP8,PKPOST
            MOVE      SP20,PKTELEP
            MOVE      SP20,PKTELEB
            MOVE      SP10,PKRELP
            MOVE      SP20,PTREMOBL
          ENDIF
.
          MOVE      ZERO,EXIT
          GOTO      GVIS9999
.
GVIS9100  MOVE      ONE,EXIT
.
GVIS9999  RETURN
+
.*****************************************************************************
.*                          OLOG0000               Called by: PROC0000       *
.*                Create/Open Day log file                                   *
.*****************************************************************************
.
.         Get the current date for the log file name
.
OLOG0000  CALL      IBACLOCK                     * get current date/time
          MOVE      CTIMEIS,TIMSTAMP
          REP       " 0",TIMSTAMP
.
.         Load the filename with the path and current date
.
          MOVE      SP100,FULLPATH
          CLEAR     FULLPATH
          APPEND    CDDRCTRY,FULLPATH
          PACK      TXTFNAME,CCC,CYY,CMM,CDD
          REP       " 0",TXTFNAME
          APPEND    TXTFNAME,FULLPATH
          APPEND    ".qry",FULLPATH
          RESET     FULLPATH
.
.         Open the file and if it doesn't exist, then PREP it.
.
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      TEXTFILE,FULLPATH            * open text file
          TRAPCLR   IO
          IF        OVRCD = 1
            PREP      TEXTFILE,FULLPATH          * create & open text file
          ENDIF
.
          WRITE     TEXTFILE,MINUS3;DASHLINE     * write line to start new mess.
          WRITE     TEXTFILE,SEQ;TIMECAPT,TIMSTAMP  * write current time
.
OLOG9999  RETURN
+
.*****************************************************************************
.*                                 ALTUSR00        Called by: EROR0000       *
.*      Alert user of Interface error by executing a script to send an email *
.*****************************************************************************
.
ALTUSR00  MOVE      "hl7query.us1 ",KEY13
          PACK      CMDLINE,KEY13,PRGID,SP1,SAVMESID,SP1,ERRORNUM,SP1,ALTERDSC:
                    SP100
          EXECUTE   CMDLINE,TASKID
.
ALTUSR99  RETURN
+
.*****************************************************************************
.*                             RESP0000            Called by: PROC0000       *
.*                   Send the remainder of the A19 response                  *
.*****************************************************************************
.
RESP0000  MOVE      VISITNUM,VISNUMBR            * load visit number (0885553)
.         
.         Format message
.         
          CALL      WQRD0000                     * format QRD segment
          BRANCH    EXIT,RESP9100:               * connection lost
                         RESP9200                * timeout
.
          COMPARE   ZERO,ERRORCNT                * any errors ?
          GOTO      RESP9000 IF NOT EQUAL        * yes - finished
.
          CALL      WRPID000                     * format PID segment
          BRANCH    EXIT,RESP9100:               * connection lost
                         RESP9200                * timeout
.
          CALL      WRNK1000                     * format NK1 segment
          BRANCH    EXIT,RESP9100:               * connection lost
                         RESP9200                * timeout
.
          CALL      WRPV1000                     * format PV1 segment
          BRANCH    EXIT,RESP9100:               * connection lost
                         RESP9200                * timeout
.
          CALL      WRAL1000                     * format & write AL1 segment
          BRANCH    EXIT,RESP9100:               * connection lost
                         RESP9200                * timeout
.
          COMPARE   TWENTY2,MESSNUMB             * PMI only message ?
          IF        @EQUAL
            CALL      WRZAL000                   * yes - format ZAL segment
            BRANCH    EXIT,RESP9100:             * connection lost
                           RESP9200              * timeout
.
            CALL      WRZXP000                   * format ZXP segment
            BRANCH    EXIT,RESP9100:             * connection lost
                           RESP9200              * timeout
.
            CALL      WRZSD000                   * format ZSD segment
            BRANCH    EXIT,RESP9100:             * connection lost
                           RESP9200              * timeout
            GOTO      RESP9000
          ENDIF
.
          CALL      WRDG1000                     * format DG1 segment
          BRANCH    EXIT,RESP9100:               * connection lost
                         RESP9200                * timeout
.
          CALL      WRIN1000                     * format IN1 segment
          BRANCH    EXIT,RESP9100:               * connection lost
                         RESP9200                * timeout
.
          CALL      WRZAL000                     * yes - format ZAL segment
          BRANCH    EXIT,RESP9100:               * connection lost
                         RESP9200                * timeout
.
          CALL      WRZXP000                     * format ZXP segment
          BRANCH    EXIT,RESP9100:               * connection lost
                         RESP9200                * timeout
.
          CALL      WRZXV000                     * format ZXV segment
          BRANCH    EXIT,RESP9100:               * connection lost
                         RESP9200                * timeout
.
RESP9000  WRITE     TEXTFILE,SEQ;ENDBLOCK,CRETURN
          MOVE      ZERO,EXIT
          GOTO      RESP9999
.
RESP9100  MOVE      ONE,EXIT
          GOTO      RESP9999
.
RESP9200  MOVE      TWO,EXIT
.
RESP9999  RETURN
+
.*****************************************************************************
.*                             WQRD0000            Called by: RESP0000       *
.*             Write the QRD segment with the same data that was received    *
.*****************************************************************************
.
WQRD0000  APPEND    ANSQ,SEGSTRNG
          APPEND    ANSR,SEGSTRNG
          APPEND    ANSD,SEGSTRNG
.
.         The field LASTA19F represent the last field of the QRD segment
.         received with the A19 query, so we only need to return the same
.         data in the response message.
.
          COMPARE   ZERO,LASTA19F                * any QRD fields populated ?
          GOTO      WQRD9000 IF EQUAL            * no
          APPEND    PIPE,SEGSTRNG                * yes
.
.         Set QRD-01, Query Date/Time
.
          APPEND    QRD00101,SEGSTRNG
          APPEND    PIPE,SEGSTRNG
.
          COMPARE   ONE,LASTA19F                 * last field loaded ?
          GOTO      WQRD9000 IF EQUAL            * yes
.
.         Set QRD-02, Query Format Code
.
          APPEND    QRD00201,SEGSTRNG
          APPEND    PIPE,SEGSTRNG
.
          COMPARE   TWO,LASTA19F                 * last field loaded ?
          GOTO      WQRD9000 IF EQUAL            * yes
.
.         Set QRD-03, Query Priority
.
          APPEND    QRD00301,SEGSTRNG
          APPEND    PIPE,SEGSTRNG
.
          COMPARE   THREE,LASTA19F               * last field loaded ?
          GOTO      WQRD9000 IF EQUAL            * yes
.
.         Set QRD-04, Query ID
.
          APPEND    QRD00401,SEGSTRNG
          APPEND    PIPE,SEGSTRNG
.
          COMPARE   FOUR,LASTA19F                * last field loaded ?
          GOTO      WQRD9000 IF EQUAL            * yes
.
.         Set QRD-05, Deferred Response Type
.
          APPEND    QRD00501,SEGSTRNG
          APPEND    PIPE,SEGSTRNG
.
          COMPARE   FIVE,LASTA19F                * last field loaded ?
          GOTO      WQRD9000 IF EQUAL            * yes
.
.         Set QRD-06, Deferred Response Date/Time
.
          APPEND    QRD00601,SEGSTRNG
          APPEND    PIPE,SEGSTRNG
.
.         Set QRD-07, Quantity Limited Request
.
          COMPARE   SIX,LASTA19F                 * last field loaded ?
          GOTO      WQRD9000 IF EQUAL            * yes
.
.         QRD-07 Component 1
.
          APPEND    QRD00701,SEGSTRNG
.
.         QRD-07 Component 2
.
          MOVELPTR  QRD00702,FORM3
          COMPARE   ZERO,FORM3
          GOTO      WQRD0800 IF EQUAL
.
          APPEND    CARET,SEGSTRNG
          APPEND    QRD00702,SEGSTRNG
.
.         Set QRD-08, Who Subject Filter
.
WQRD0800  APPEND    PIPE,SEGSTRNG
.
          COMPARE   SEVEN,LASTA19F               * last field loaded ?
          GOTO      WQRD9000 IF EQUAL            * yes
.
.         Find the last component populated for QRD-08
.
          MOVE      TEN5,FORM2                   * initialise counter
          WHILE     FORM2 > 0
            LOAD      DIM500,FORM2,QRD00801,QRD00802,QRD00803,QRD00804,QRD00805:
                                   QRD00806,QRD00807,QRD00808,QRD00809,QRD00810:
                                   QRD00811,QRD00812,QRD00813,QRD00814,QRD00815
            MOVELPTR  DIM500,FORM3
            COMPARE   ZERO,FORM3                 * component populated ?
            GOTO      WQRD0801 IF NOT EQUAL      * yes
            SUB       ONE,FORM2                  * decrement counter
          DO
.
          GOTO      WQRD0900                     * no components populated
.
.         QRD-08 Component 1
.
WQRD0801  APPEND    QRD00801,SEGSTRNG
.
          COMPARE   TWO,FORM2                    * last component written ?
          GOTO      WQRD0900 IF LESS             * yes
.
.         QRD-08 Component 2
.
          APPEND    CARET,SEGSTRNG
          APPEND    QRD00802,SEGSTRNG
.
          COMPARE   THREE,FORM2                  * last component written ?
          GOTO      WQRD0900 IF LESS             * yes
.
.         QRD-08 Component 3
.
          APPEND    CARET,SEGSTRNG
          APPEND    QRD00803,SEGSTRNG
.
          COMPARE   FOUR,FORM2                   * last component written ?
          GOTO      WQRD0900 IF LESS             * yes
.
.         QRD-08 Component 4
.
          APPEND    CARET,SEGSTRNG
          APPEND    QRD00804,SEGSTRNG
.
          COMPARE   FIVE,FORM2                   * last component written ?
          GOTO      WQRD0900 IF LESS             * yes
.
.         QRD-08 Component 5
.
          APPEND    CARET,SEGSTRNG
          APPEND    QRD00805,SEGSTRNG
.
          COMPARE   SIX,FORM2                    * last component written ?
          GOTO      WQRD0900 IF LESS             * yes
.
.         QRD-08 Component 6
.
          APPEND    CARET,SEGSTRNG
          APPEND    QRD00806,SEGSTRNG
.
          COMPARE   SEVEN,FORM2                  * last component written ?
          GOTO      WQRD0900 IF LESS             * yes
.
.         QRD-08 Component 7
.
          APPEND    CARET,SEGSTRNG
          APPEND    QRD00807,SEGSTRNG
.
          COMPARE   EIGHT,FORM2                  * last component written ?
          GOTO      WQRD0900 IF LESS             * yes
.
.         QRD-08 Component 8
.
          APPEND    CARET,SEGSTRNG
          APPEND    QRD00808,SEGSTRNG
.
          COMPARE   NINE,FORM2                   * last component written ?
          GOTO      WQRD0900 IF LESS             * yes
.
.         QRD-08 Component 9
.
          APPEND    CARET,SEGSTRNG
          APPEND    QRD00809,SEGSTRNG
.
          COMPARE   TEN,FORM2                    * last component written ?
          GOTO      WQRD0900 IF LESS             * yes
.
.         QRD-08 Component 10
.
          APPEND    CARET,SEGSTRNG
          APPEND    QRD00810,SEGSTRNG
.
          COMPARE   TEN1,FORM2                   * last component written ?
          GOTO      WQRD0900 IF LESS             * yes
.
.         QRD-08 Component 11
.
          APPEND    CARET,SEGSTRNG
          APPEND    QRD00811,SEGSTRNG
.
          COMPARE   TEN2,FORM2                   * last component written ?
          GOTO      WQRD0900 IF LESS             * yes
.
.         QRD-08 Component 12
.
          APPEND    CARET,SEGSTRNG
          APPEND    QRD00812,SEGSTRNG
.
          COMPARE   TEN3,FORM2                   * last component written ?
          GOTO      WQRD0900 IF LESS             * yes
.
.         QRD-08 Component 13
.
          APPEND    CARET,SEGSTRNG
          APPEND    QRD00813,SEGSTRNG
.
          COMPARE   TEN4,FORM2                   * last component written ?
          GOTO      WQRD0900 IF LESS             * yes
.
.         QRD-08 Component 14
.
          APPEND    CARET,SEGSTRNG
          APPEND    QRD00814,SEGSTRNG
.
          COMPARE   TEN5,FORM2                   * last component written ?
          GOTO      WQRD0900 IF LESS             * yes
.
.         QRD-08 Component 15
.
          APPEND    CARET,SEGSTRNG
          APPEND    QRD00815,SEGSTRNG
.
.         Set QRD-09, What Subject Filter
.
WQRD0900  APPEND    PIPE,SEGSTRNG
.
          COMPARE   EIGHT,LASTA19F               * last field loaded ?
          GOTO      WQRD9000 IF EQUAL            * yes
.
.         Find the last component populated for QRD-09
.
          MOVE      SIX,FORM2                    * initialise counter
          WHILE     FORM2 > 0
            LOAD      DIM500,FORM2,QRD00901,QRD00902,QRD00903,QRD00904,QRD00905:
                                   QRD00906
            MOVELPTR  DIM500,FORM3
            COMPARE   ZERO,FORM3                 * component populated ?
            GOTO      WQRD0901 IF NOT EQUAL      * yes
            SUB       ONE,FORM2                  * decrement counter
          DO
.
          GOTO      WQRD1000                     * no components populated
.
.         QRD-09 Component 1
.
WQRD0901  APPEND    QRD00901,SEGSTRNG
.
          COMPARE   TWO,FORM2                    * last component written ?
          GOTO      WQRD1000 IF LESS             * yes
.
.         QRD-09 Component 2
.
          APPEND    CARET,SEGSTRNG
          APPEND    QRD00902,SEGSTRNG
.
          COMPARE   THREE,FORM2                  * last component written ?
          GOTO      WQRD1000 IF LESS             * yes
.
.         QRD-09 Component 3
.
          APPEND    CARET,SEGSTRNG
          APPEND    QRD00903,SEGSTRNG
.
          COMPARE   FOUR,FORM2                   * last component written ?
          GOTO      WQRD1000 IF LESS             * yes
.
.         QRD-09 Component 4
.
          APPEND    CARET,SEGSTRNG
          APPEND    QRD00904,SEGSTRNG
.
          COMPARE   FIVE,FORM2                   * last component written ?
          GOTO      WQRD1000 IF LESS             * yes
.
.         QRD-09 Component 5
.
          APPEND    CARET,SEGSTRNG
          APPEND    QRD00905,SEGSTRNG
.
          COMPARE   SIX,FORM2                    * last component written ?
          GOTO      WQRD1000 IF LESS             * yes
.
.         QRD-09 Component 6
.
          APPEND    CARET,SEGSTRNG
          APPEND    QRD00906,SEGSTRNG
.
.         Set QRD-10, What Department Data Code
.
WQRD1000  APPEND    PIPE,SEGSTRNG
.
          COMPARE   NINE,LASTA19F                * last field loaded ?
          GOTO      WQRD9000 IF EQUAL            * yes
.
.         Find the last component populated for QRD-10
.
          MOVE      SIX,FORM2                    * initialise counter
          WHILE     FORM2 > 0
            LOAD      DIM500,FORM2,QRD01001,QRD01002,QRD01003,QRD01004,QRD01005:
                                   QRD01006
            MOVELPTR  DIM500,FORM3
            COMPARE   ZERO,FORM3                 * component populated ?
            GOTO      WQRD1001 IF NOT EQUAL      * yes
            SUB       ONE,FORM2                  * decrement counter
          DO
.
          GOTO      WQRD1100                     * no components populated
.
.         QRD-10 Component 1
.
WQRD1001  APPEND    QRD01001,SEGSTRNG
.
          COMPARE   TWO,FORM2                    * last component written ?
          GOTO      WQRD1100 IF LESS             * yes
.
.         QRD-10 Component 2
.
          APPEND    CARET,SEGSTRNG
          APPEND    QRD01002,SEGSTRNG
.
          COMPARE   THREE,FORM2                  * last component written ?
          GOTO      WQRD1100 IF LESS             * yes
.
.         QRD-10 Component 3
.
          APPEND    CARET,SEGSTRNG
          APPEND    QRD01003,SEGSTRNG
.
          COMPARE   FOUR,FORM2                   * last component written ?
          GOTO      WQRD1100 IF LESS             * yes
.
.         QRD-10 Component 4
.
          APPEND    CARET,SEGSTRNG
          APPEND    QRD01004,SEGSTRNG
.
          COMPARE   FIVE,FORM2                   * last component written ?
          GOTO      WQRD1100 IF LESS             * yes
.
.         QRD-10 Component 5
.
          APPEND    CARET,SEGSTRNG
          APPEND    QRD01005,SEGSTRNG
.
          COMPARE   SIX,FORM2                    * last component written ?
          GOTO      WQRD1100 IF LESS             * yes
.
.         QRD-10 Component 6
.
          APPEND    CARET,SEGSTRNG
          APPEND    QRD01006,SEGSTRNG
.
.         Set QRD-11, What Data Code Value Qual.
.
WQRD1100  APPEND    PIPE,SEGSTRNG
.
          COMPARE   TEN,LASTA19F                 * last field loaded ?
          GOTO      WQRD9000 IF EQUAL            * yes
.
.         QRD-11 Component 1
.
          APPEND    QRD01101,SEGSTRNG
.
.         QRD-11 Component 2
.
          MOVELPTR  QRD01102,FORM3
          COMPARE   ZERO,FORM3
          GOTO      WQRD1200 IF EQUAL
.
          APPEND    CARET,SEGSTRNG
          APPEND    QRD01102,SEGSTRNG
.
.         Set QRD-12, Query Results Level
.
WQRD1200  APPEND    PIPE,SEGSTRNG
.
          COMPARE   TEN1,LASTA19F                * last field loaded ?
          GOTO      WQRD9000 IF EQUAL            * yes
.
          APPEND    QRD01201,SEGSTRNG
          APPEND    PIPE,SEGSTRNG
.
.         All the segment fields have been loaded, so send the segment
.
WQRD9000  BUMP      SEGSTRNG,SEQ
          APPEND    CRETURN,SEGSTRNG
          RESET     SEGSTRNG
.
          MOVE      "QRD",SEGMENT
          CALL      SENDM000                     * send message
          BRANCH    EXIT,WQRD9100:               * connection lost
                         WQRD9200                * timeout
.
          MOVE      ZERO,EXIT                    * sent ok
          GOTO      WQRD9999
.
WQRD9100  MOVE      ONE,EXIT
          GOTO      WQRD9999
.
WQRD9200  MOVE      ONE,EXIT
.
WQRD9999  RETURN
+
.*****************************************************************************
.*                         GTPL0000                Called by: ADPV1000       *
.*             Get the previous location                                     *
.* Returns:  EXIT  0 = previous tran record found                            *
.*                 1 = previous tran record not found                        *
.* Requires: read on current pattranf record.                                *
.*           WRDSTRNG - previous ward code.                                  *
.*           BEDSTRNG - previous bed code.                                   *
.*****************************************************************************
.
GTPL0000  MOVE      TWARD,WRDSTRNG               * initialise ward/bed strings
          MOVE      TBED,BEDSTRNG
.
.         Check the tran records for this visit to get the previous location.
.
          MOVE      SAVKEY30,KEY30
          CALL      RDSTRAN2                     * position on current tran rec.
GTPL0500  CALL      RDPTRAN2                     * read previous tran record
          BRANCH    OVRCD,GTPL9100               * eof - no previous location
.
          MATCH     AADMNO,TADMN                 * same admission still ?
          GOTO      GTPL9100 IF NOT EQUAL        * no - finish
.
.         Previous tran record found, so check if the ward/bed has changed
.
          MATCH     WRDSTRNG,TWARD               * same ward ?
          IF        @EQUAL
            MATCH     BEDSTRNG,TBED              * yes - same bed ?
            GOTO      GTPL0500 IF EQUAL          * yes - get previous tran rec.
          ENDIF
.
.         Previous Ward/Bed found
.
          MOVE      TWARD,WRDSTRNG               * load ward/bed fields
          MOVE      TBED,BEDSTRNG
.
          MOVE      ZERO,EXIT
          GOTO      GTPL9999
.
GTPL9100  MOVE      ONE,EXIT
.
GTPL9999  RETURN
+
AHZXV000
.0885553  EMZXV000
ENZXV000
RDPMQPT1
RDPMQVI1
BPV10000
.0885553  EDG10000
.0885553  ODG10000
WDG10000
MHDG1000
.0885553  OPV10000
.0885553  EPV10000
LPV10000
.0885553  LVIN0000
TPV10000
WLZXV000
LOGM0000  RETURN
+
.*****************************************************************************
.         I/O Includes
.*****************************************************************************
.
          INC       STD002IO
.
          INC       CLEMRVIS
          INC       DAYOFWEK
          INC       HL7CLRVR
          INC       HL7COMN
          INC       PMIGTNID
          INC       TFILENAM
.
          INC       CATCOMIO/INC
          INC       EMRCLIIO/INC
          INC       EMRHISIO/INC
          INC       EMRICDIO/INC
          INC       EMRLOCIO/INC
          INC       EMRSITIO/INC
          INC       EMRVCDIO/INC
          INC       EMRVISIO/INC
          INC       ALLLNKIO/INC
          INC       ALLPRRIO/INC
          INC       ALLREFIO/INC
          INC       IBAALVIO/INC
          INC       IBAPOSIO/INC
          INC       MEHDLSIO/INC
          INC       MEHDS1IO/INC
          INC       MEHHLSIO/INC
          INC       MEHVI1IO/INC
          INC       MRTLOCIO/INC
          INC       MRTMASIO/INC
          INC       NHIETHIO/INC
          INC       NHIMASIO/INC
          INC       OPRNURIO/INC
          INC       OUTBOAIO/INC
          INC       OUTBB1IO/INC
          INC       OUTCLIIO/INC
          INC       OUTCTYIO/INC
          INC       OUTDIAIO/INC
          INC       OUTMA1IO/INC
          INC       OUTSITIO/INC
          INC       OUTTHIIO/INC
          INC       PATALRIO/INC
          INC       VISMDTIO/INC
          INC       VISMTXIO/INC
.
          INC       PATATRIO/INC
          INC       PATCODIO/INC
          INC       PATDADIO/INC
          INC       PATDO1IO/INC
          INC       PATDSCIO/INC
          INC       PATECDIO/INC
          INC       PATECOIO/INC
          INC       PATGSRIO/INC
          INC       PATHSPIO/INC
          INC       PATICDIO/INC
          INC       PATIN1IO/INC
          INC       PATINVIO/INC
          INC       PATLINIO/INC
          INC       PATMA1IO/INC
          INC       PATMI1IO/INC
          INC       PATNIDIO/INC
          INC       PATONLIO/INC
          INC       PATRE1IO/INC
          INC       PATTRNIO/INC
          INC       PATVADIO/INC
          INC       PATVISIO/INC
          INC       PATWC1IO/INC
          INC       PATWMAIO/INC
          INC       PATWR1IO/INC
          INC       PATWVEIO/INC
          INC       PMSAIDIO/INC
          INC       PMSALNIO/INC
          INC       PMSCCDIO/INC
          INC       PMSCEXIO/INC
          INC       PMSDIVIO/INC
          INC       PMSDTCIO/INC
          INC       PMSHCLIO/INC
          INC       PMSHCGIO/INC
          INC       PMSHCPIO/INC
          INC       PMSNUTIO/INC
          INC       PMSPX2IO/INC
          INC       PMSRELIO/INC
          INC       PMSTEMIO/INC
          INC       PMSVX1IO/INC
          INC       PMSWX1IO/INC
          INC       VISCMTIO/INC
          INC       VISXDCIO/INC
          INC       COMPARIO/INC
          INC       IBAPOLIO/INC
          INC       WATOPAIO/INC
          INC       WATOPSIO/INC
          INC       WATTR1IO/INC
          INC       WEBERRIO/INC
          INC       WEBSECIO/INC
