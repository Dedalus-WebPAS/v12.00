.*****************************************************************************
.* System    :   Patient Management System                                   *
.* Program   :   CONVSECT                                                    *
.* Desc      :   Data Migration Program to upload mental health section data *
.*               from a third party legacy system into the Mental Health     *
.*               webPAS module.                                              *
.*****************************************************************************
.* Date      :   16/03/2011                                                  *
.* Author    :   Steve Armstrong                                             *
.* Function  :   This program will loop through the convsect.txt file and    *
.*               for each valid record found, it will write a new mehdlsaf   *
.*               record for the patient.                                     *
.* Mods      :                                                               *
.*        V10.08.01  31/10/2016  Steve Armstrong   TSK 0822023               *
.*                   Added new MSECREMD field to detail record (Type 1)      *
.*****************************************************************************
.*        V10.04.01  17/03/2014  Steve Armstrong   CAR 296128                *
.*                   Added display of warning message if error records found.*
.*****************************************************************************
.*        V10.02.00  16/03/2011  Steve Armstrong   CAR 240683                *
.*                   Created program                                         *
.*****************************************************************************
.
          INC       STD001FD
.
. FILE DESCRIPTION INCLUDES
. -------------------------
          INC       ALLCASFD/INC
          INC       MEHCONFD/INC
          INC       MEHDLSFD/INC
          INC       MEHHLSFD/INC
          INC       PATCODFD/INC
          INC       PATMA1FD/INC
          INC       PMSHCPFD/INC
.
.         Mental Health Section upload file layout - convsect.txt
.         Mental Health Section Header
.
MHSECUPL  FILE      HL7, FIXED=4000         * Pipe delimited upload file
.                                             4096 is maximum
.
.         Fields must be pipe delimited and in the following sequence.
.         Field lengths are irrelevant other than the fact that where
.         a field is longer than allowed, the extra data will be ignored.
.
MSECTYPE  DIM       1       1     * Record Type
.                                     0 = Header Record
.PIPE     DIM       1       2     * Pipe Delimiter
MSECURNO  DIM       8       3     * U/R Number (patma1af)             (mhhlurno)
.PIPE     DIM       1      11     * Pipe Delimiter
MSECSREF  DIM       3      12     * Source of Referral (Cat S)        (mhhlsref)
.PIPE     DIM       1      15     * Pipe Delimiter
MSECRSCL  DIM       10     16     * Responsible Clinician (pmshcpaf)  (mhhlrscl)
.PIPE     DIM       1      26     * Pipe Delimiter
MSECCSTM  DIM       10     27     * Case Team (allcasaf)              (mhhlcstm)
.PIPE     DIM       1      37     * Pipe Delimiter
MSECKWRK  DIM       10     38     * Key Worker (pmshcpaf)             (mhhlkwrk)
.PIPE     DIM       1      48     * Pipe Delimiter
MSECCUID  DIM       10     49     * WEB User Id Created               (mhhlcuid)
.PIPE     DIM       1      59     * Pipe Delimiter
MSECCDAT  DIM       8      60     * Date Record Created (ccyymmdd)    (mhhlcdat)
.PIPE     DIM       1      68     * Pipe Delimiter
MSECCTIM  DIM       8      69     * Time Record Created (hh:mm:ss)    (mhhlctim)
.PIPE     DIM       1      77     * Pipe Delimiter
MSECUUID  DIM       10     78     * WEB User Id Updated               (mhhluuid)
.PIPE     DIM       1      88     * Pipe Delimiter
MSECUDAT  DIM       8      89     * Date Record Updated (ccyymmdd)    (mhhludat)
.PIPE     DIM       1      97     * Pipe Delimiter
MSECUTIM  DIM       8      98     * Time Record Updated (hh:mm:ss)    (mhhlutim)
.PIPE     DIM       1     106     * Pipe Delimiter
MSECCOMM  DIM       100   107     * Comments                          (mhhlcomm)
.
. End of Record           207
.
.
.
.         Mental Health Section Detail Record layout
.
.         Fields must be pipe delimited and in the following sequence.
.         Field lengths are irrelevant other than the fact that where
.         a field is longer than allowed, the extra data will be ignored.
.
.MSECTYPE DIM       1       1     * Record Type
.                                     1 = Detail Record
.PIPE     DIM       1       2     * Pipe Delimiter
.MSECURNO DIM       8       3     * U/R Number (patma1af)             (mhdlurno)
.PIPE     DIM       1      11     * Pipe Delimiter
MSECSDAT  DIM       8      12     * Start Date (ccyymmdd)             (mhdlsdat)
.PIPE     DIM       1      20     * Pipe Delimiter
MSECSTIM  DIM       8      21     * Start Time (hh:mm:ss)             (mhdlstim)
.PIPE     DIM       1      29     * Pipe Delimiter
MSECSCOD  DIM       3      30     * Section Code (Cat LS)             (mhdlscod)
.PIPE     DIM       1      33     * Pipe Delimiter
MSECRDAT  DIM       8      34     * Review Date (ccyymmdd)            (mhdlrdat)
.PIPE     DIM       1      42     * Pipe Delimiter
MSECRTIM  DIM       8      43     * Review Time (hh:mm:ss)            (mhdlrtim)
.PIPE     DIM       1      51     * Pipe Delimiter
MSECEDAT  DIM       8      52     * End Date (ccyymmdd)               (mhdledat)
.PIPE     DIM       1      60     * Pipe Delimiter
MSECETIM  DIM       8      61     * End Time (hh:mm:ss)               (mhdletim)
.PIPE     DIM       1      69     * Pipe Delimiter
.MSECCUID DIM       10     70     * WEB User Id Created               (mhdlcuid)
.PIPE     DIM       1      80     * Pipe Delimiter
.MSECCDAT DIM       8      81     * Date Record Created (ccyymmdd)    (mhdlcdat)
.PIPE     DIM       1      89     * Pipe Delimiter
.MSECCTIM DIM       8      90     * Time Record Created (hh:mm:ss)    (mhdlctim)
.PIPE     DIM       1      98     * Pipe Delimiter
.MSECUUID DIM       10     99     * WEB User Id Updated               (mhdluuid)
.PIPE     DIM       1     109     * Pipe Delimiter
.MSECUDAT DIM       8     110     * Date Record Updated (ccyymmdd)    (mhdludat)
.PIPE     DIM       1     118     * Pipe Delimiter
.MSECUTIM DIM       8     119     * Time Record Updated (hh:mm:ss)    (mhdlutim)
.PIPE     DIM       1     127     * Pipe Delimiter
MSECCMNT  DIM       100   128     * Comment Line 1                    (mhdlcmnt)
.PIPE     DIM       1     228     * Pipe Delimiter
MSECCMN2  DIM       100   229     * Comment Line 2                    (mhdlcmn2)
.PIPE     DIM       1     329     * Pipe Delimiter
MSECREMD  DIM       8     330     * Reminder Date (ccyymmdd)          (mhdlremd)
.
. End of Record           338
.
.
.
. LOCAL VARIABLE DEFINITION
. -------------------------
CODCOUNT  FORM      8             * code error record count
CURRCENT  FORM      2             * current century
CURRDATE  DIM       8             * current date
.
DATEFLG1  FORM      1             * Date Type flag
.                                     0 = full date (ccyymmdd)
.                                     1 = partial date (ccyymm)
DATEFLG2  FORM      1             * Dates Allowed flag
.                                     0 = any date allowed
.                                     1 = future dates not allowed
.                                     2 = only future dates allowed
DETCOUNT  FORM      4             * detail record count per header record
DIM1A     DIM       1
DIM1B     DIM       1
DIM2C     DIM       2
DIM2D     DIM       2
DIM2H     DIM       2
DIM2M     DIM       2
DIM2S     DIM       2
DIM2Y     DIM       2
DIM4      DIM       4
DIM44     DIM       44
DTECOUNT  FORM      8             * date error record count
DTLCOUNT  FORM      8             * detail record added count
DUPCOUNT  FORM      8             * duplicate record count
.
ERORDESC  DIM       70
ERORFLAG  FORM      1             * Field Validation Error Flag
.                                     0 = No Errors on Field Validations
.                                     1 = Errors on Field Validations
.
FORM8     FORM      8
FORM10    FORM      10
.
HEDCOUNT  FORM      8             * header record added count
.
MANCOUNT  FORM      8             * mandatory field error record count
.
NUMCOUNT  FORM      8             * numeric error record count
.
RECCOUNT  FORM      8             * record read counter
.
SAVEEDAT  DIM       8             * saved end date
SAVEETIM  DIM       8             * saved end time
SAVERDAT  DIM       8             * saved most recent start date
SAVERTIM  DIM       8             * saved most recent end time
SAVESDAT  DIM       8             * saved start date
SAVESTIM  DIM       8             * saved start time
SAVEURNO  DIM       8
SAVKEY16  DIM       16
SEQCOUNT  FORM      8             * out of sequence record count
.
TEMPCATG  DIM       6             * Category (or HF for HF Table validation)
TEMPCODE  DIM       10            * Coded field (length = max code field length)
TEMPDATE  DIM       8
TEMPTIME  DIM       8
TEMPTYPE  FORM      1             * Type of coded field
TIMCOUNT  FORM      8             * time error record count
TMPFIELD  DIM       8             * Field name
TMPSTRNG  DIM       40            * Temporary string (max field length)
TYPEFORM  FORM      1             * record type numeric
.                                       0 = header record
.                                       1 = detail record
.
UNKCOUNT  FORM      8             * unknown U/R counter
.
VCHKFLAG  FORM      1             * Validation flag
.                                     0 = writing data to database
.                                     1 = only validating import data file
.
.
.
. PROGRAM CONSTANTS
. -----------------
PIPE      INIT      "|"
.
.
.
PRGID     INIT      "CONVSECT"
PRGNAM    INIT      "Upload Patient Mental Health Sections"
VERSION   INIT      "V12.00.00"
+
.*****************************************************************************
.*                              MAIN0000                                     *
.*                      Controlling Logic (Mainline code)                    *
.*****************************************************************************
.
MAIN0000  CALL      INIT0000               * initialisation and open files
.
MAIN0100  CALL      OPTN0000               * select options
          BRANCH    EXIT,MAIN9999          * EXIT = 1 if 0 chosen in menu
          BRANCH    COPTION,MAIN1000       * proceed with upload
.
MAIN1000  CALL      OPEN0000               * open upload file
          BRANCH    EXIT,MAIN0100          * file not found
.
          CALL      ASKQ0000               * validation run only ?
.
          CALL      CONTQST                * Ok to continue ?
          BRANCH    CEXIT,MAIN2000:        * yes
                          MAIN0100:        * no
                          MAIN0100         * cancel
.
MAIN2000  CALL      UPLD0000               * process upload
.
MAIN9999  CHAIN     PGM                    * chain back to program
+
.*****************************************************************************
.*                                INIT0000             Called by: MAIN0000   *
.*                             initialisation                                *
.*  The initialisation routine is used to display headings and open files.   *
.*****************************************************************************
.
INIT0000  CALL      DISPHEAD                  * display heading
.
          DISPLAY   *P56:24,*EL,"Opening ":
                    *P64:24,"patcodes";
          OPEN      PATCODE1,"patcodes"
.
          DISPLAY   *P64:24,"allcasaf";
          OPEN      ALLCASA1,"allcasaf"
.
          DISPLAY   *P64:24,"mehdlsaf";
          OPEN      MEHDLSA1,"mehdlsaf"
.
          DISPLAY   *P64:24,"mehhlsaf";
          OPEN      MEHHLSA1,"mehhlsaf"
.
          DISPLAY   *P64:24,"patma1af";
          OPEN      PATMA1A1,"patma1af"
          OPEN      PATMX1A1,"patmx1af"
.
          DISPLAY   *P64:24,"pmshcpaf";
          OPEN      PMSHCPA1,"pmshcpaf"
.
          DISPLAY   *P64:24,"controlf";
          OPEN      CONTROLF,"controlf"
.
          MOVE      ONE,CNOUNDLN
.
INIT9999  RETURN
+
.*****************************************************************************
.*                                OPTN0000             Called by: MAIN0000   *
.*                        get user options or exit                           *
.*    Returns:  EXIT    = FALSE (0)  Run data upload                         *
.*                        TRUE  (1)  Exit selected                           *
.*****************************************************************************
.
OPTN0000  DISPLAY   *P1:3,*EF,*P1:4,*V2LON,ZERO,*HOFF,". Exit":
                    *P1:5,*V2LON,ONE,*HOFF,". Run Data Upload"
.
OPTN0500  KEYIN     *P1:7,*EL,"Select Option : ":
                    *P17:7,*V2LON,COPTION
.
          COMPARE   ZERO,COPTION                 * exit selected ?
          GOTO      OPTN9500 IF EQUAL            * yes
.
          BRANCH    COPTION,OPTN9000             * run data upload
.
          BEEP
          GOTO      OPTN0500
.
OPTN9000  MOVE      ZERO,EXIT
          GOTO      OPTN9999
.
OPTN9500  MOVE      ONE,EXIT
.
OPTN9999  RETURN
+
.*****************************************************************************
.*                               OPEN0000              Called by: MAIN0000   *
.*                  Open upload file (convsect.txt)                          *
.*****************************************************************************
.
OPEN0000  MOVE      ZERO,OVRCD
.
          TRAP      OVERCOND IF IO
          OPEN      MHSECUPL,"convsect"
          TRAPCLR   IO
          BRANCH    OVRCD,OPEN9100
.
          MOVE      ZERO,EXIT
          GOTO      OPEN9999
.
OPEN9100  DISPLAY   *P1:24,*EL,*B,"Upload file - convsect.txt - not found.  ";
          CALL      HITENTER
          MOVE      ONE,EXIT
.
OPEN9999  RETURN
+
.*****************************************************************************
.*                               ASKQ0000              Called by: MAIN0000   *
.*                  Ask if running validation only                           *
.* Returns: VCHKFLAG  - validation flag                                      *
.*                       0 = normal mode                                     *
.*                       1 = validation only mode                            *
.*****************************************************************************
.
ASKQ0000  MOVE      ANSY,ANS
          KEYIN     *P1:10,*EL,"Validation only (",*V2LON,*DV,ANSY,*HOFF:
                    *DV,SLASH,*V2LON,*DV,ANSN,*HOFF,") ?":
                    *P25:10,*V2LON,*RV,ANS
.
          PACK      ANS,ANS,SP1
          REP       UPPLOW,ANS
.
          MATCH     ANSY,ANS                     * Y input ?
          IF        @EQUAL
            DISPLAY   *P25:10,*V2LON,DYES,*HOFF:
                      *P35:10,"(No data will be uploaded)"
            MOVE      ONE,VCHKFLAG               * yes
            GOTO      ASKQ9999
          ENDIF
.
          MATCH     ANSN,ANS                     * N input ?
          IF        @EQUAL
            DISPLAY   *P25:10,*V2LON,DNO,*HOFF:
                      *P35:10,"(Data will be uploaded)"
            MOVE      ZERO,VCHKFLAG              * yes
            GOTO      ASKQ9999
          ENDIF
.
          GOTO      ASKQ0000                     * invalid input
.
ASKQ9999  RETURN
+
.******************************************************************************
.*                                  UPLD0000              Called by: MAIN0000 *
.*                  Process the Patient Mental Health Section upload records  *
.******************************************************************************
.
UPLD0000  CALL      IBACLOCK
          PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
          MOVE      CCC,CURRCENT
.
          DISPLAY   *P1:13,"Processing ",*V2LON,"convsect.txt",*HOFF:
                    *P1:15,"Started    : ",*V2LON,CTIMEIS,*HOFF:
                    *P1:17,"U/R Number : ":
                    *P1:18,"Records    : "
.
          MOVE      ZERO,RECCOUNT                * initialise records read
          MOVE      ZERO,HEDCOUNT                * init. added header rec. count
          MOVE      ZERO,DTLCOUNT                * init. added detail rec. count
          MOVE      ZERO,CODCOUNT                * init. code error record count
          MOVE      ZERO,DUPCOUNT                * initialise dup. record count
          MOVE      ZERO,DTECOUNT                * init. date error record count
          MOVE      ZERO,TIMCOUNT                * init. time error record count
          MOVE      ZERO,MANCOUNT                * init. mand error record count
          MOVE      ZERO,NUMCOUNT                * init. num error record count
          MOVE      ZERO,UNKCOUNT                * init. unknown pt record count
          MOVE      ZERO,SEQCOUNT                * init. seq. error record count
          MOVE      ZERO,DETCOUNT                * init. detail record count
          MOVE      SP8,SAVEURNO                 * initialise saved U/R
          MOVE      SP8,SAVESDAT                 * clear saved start date
          MOVE      SP8,SAVESTIM                 * clear saved start time
          MOVE      SP8,SAVERDAT                 * clear saved recent start date
          MOVE      SP8,SAVERTIM                 * clear saved recent start time
          MOVE      SP8,SAVEEDAT                 * clear saved end date
          MOVE      SP8,SAVEETIM                 * clear saved end time
          MOVE      SP20,SAVKEY16                * init. mehhlsaf key
.
          CALL      HEAD0000                     * Print the report header
.
.         Loop through upload file records.
.         Load in the first two fields as they are common to both header and
.         detail records.
.
UPLD1000  READ      MHSECUPL,SEQ;MSECTYPE,MSECURNO;
          GOTO      UPLD9000 IF OVER
.
          ADD       ONE,RECCOUNT                 * increment records read
          IF        (RECCOUNT%1000) = 0 | RECCOUNT = 1
            DISPLAY   *P14:17,*V2LON,MSECURNO:
                      *P14:18,*V2LON,RECCOUNT;
          ENDIF
.
          PACK      MSECTYPE,MSECTYPE,SP1
          MATCH     SP1,MSECTYPE
          IF        @EQUAL
            MOVE      SP70,DIM44
            MOVE      SP8,SAVEURNO
            MOVE      "MH section record type is blank ",ERORDESC
            CALL      PERR0000                   * print error line
            ADD       ONE,MANCOUNT               * increment mand. record count
            READ      MHSECUPL,SEQ;ANS
            GOTO      UPLD1000
          ENDIF
.
          TYPE      MSECTYPE
          IF        !@EQUAL
            MOVE      SP70,DIM44
            MOVE      SP8,SAVEURNO
            MOVE      "MH section record type is not numeric ",ERORDESC
            CALL      PERR0000                   * print error line
            ADD       ONE,NUMCOUNT               * incr. numeric erorr rec count
            READ      MHSECUPL,SEQ;ANS
            GOTO      UPLD1000
          ENDIF
.
          MOVE      ZERO,TYPEFORM
          MOVE      MSECTYPE,TYPEFORM
          COMPARE   TYPEFORM,ONE                 * MH section rec. type 0 or 1 ?
          IF        @LESS
            MOVE      SP70,DIM44
            MOVE      SP8,SAVEURNO
            MOVE      "MH section record type is not valid ",ERORDESC
            CALL      PERR0000                   * print error line
            ADD       ONE,NUMCOUNT               * incr. numeric erorr rec count
            READ      MHSECUPL,SEQ;ANS
            GOTO      UPLD1000
          ENDIF
.
          IF       TYPEFORM = 0
            READ      MHSECUPL,SEQ;MSECSREF,MSECRSCL,MSECCSTM,MSECKWRK,MSECCUID:
                                   MSECCDAT,MSECCTIM,MSECUUID,MSECUDAT,MSECUTIM:
                                   MSECCOMM
          ELSE
            READ      MHSECUPL,SEQ;MSECSDAT,MSECSTIM,MSECSCOD,MSECRDAT,MSECRTIM:
                                   MSECEDAT,MSECETIM,MSECCUID,MSECCDAT,MSECCTIM:
                                   MSECUUID,MSECUDAT,MSECUTIM,MSECCMNT,MSECCMN2:
                                   MSECREMD
          ENDIF
          GOTO      UPLD9000 IF OVER
.
          CALL      POUT0000                     * pad out fields with spaces
.
          BRANCH    TYPEFORM,UPLD2000            * detail record
.
.         Header record
.
          CALL      UPRV0000                     * update previous header rec.
.
          MOVE      SP8,SAVESDAT                 * clear saved start date
          MOVE      SP8,SAVESTIM                 * clear saved start time
          MOVE      SP8,SAVEEDAT                 * clear saved end date
          MOVE      SP8,SAVEETIM                 * clear saved end time
          MOVE      SP8,SAVERDAT                 * clear saved most recent start date
          MOVE      SP8,SAVERTIM                 * clear saved most recent start time
          MOVE      ZERO,DETCOUNT                * init. detail record count
          MOVE      SP20,SAVKEY16                * init. mehhlsaf key
.
.         Clear the relevant database variables
.
          CALL      CLMEHHLS                     * clear header variables
          CALL      CLPATMAS                     * clear patient master vars.
.
.         Only need to validate U/R for header entries as the detail records
.         that may follow, should always have the same U/R (and this is
.         validated for detail records).
.
          CALL      VURN0000                     * validate U/R
          IF        EXIT = 1 & VCHKFLAG = 0
            GOTO      UPLD1000                   * errors on validation
          ENDIF
.
          MOVE      MSECURNO,SAVEURNO            * save U/R number
          GOTO      UPLD3000
.
.         This is a detail record
.
UPLD2000  CALL      CLMEHDLS                     * clear detail variables
.
          MATCH     MSECURNO,SAVEURNO            * same U/R as header record?
          IF        !@EQUAL
            MOVE      SP70,DIM44
            MOVE      "Detail record out of sequence ",ERORDESC
            CALL      PERR0000                   * print error line
            ADD       ONE,SEQCOUNT               * increment seq. record count
            GOTO      UPLD1000                   * get next record
          ENDIF
.
UPLD3000  CALL      MAND0000                     * check for Mandatory fields
          IF        EXIT = 1 & VCHKFLAG = 0
            GOTO      UPLD1000                   * errors on validation
          ENDIF
.
          CALL      DVAL0000                     * date validation
          IF        EXIT = 1 & VCHKFLAG = 0
            GOTO      UPLD1000                   * errors on validation
          ENDIF
.
          CALL      TVAL0000                     * time validation
          IF        EXIT = 1 & VCHKFLAG = 0
            GOTO      UPLD1000                   * errors on validation
          ENDIF
.
          CALL      SETV0000                     * set up file variables
.
          CALL      CVAL0000                     * validate coded fields
          IF        EXIT = 1 & VCHKFLAG = 0
            GOTO      UPLD1000                   * errors on validation
          ENDIF
.
          BRANCH    TYPEFORM,UPLD7000            * detail record
.
.         We have a valid header record
.           
          PACK      KEY16,MHHLURNO,MHHLUNIQ
          CALL      RAMHHLS1
          IF        OVRCD = 1
            BRANCH    VCHKFLAG,UPLD1000          * error checking only
            CALL      WRMHHLS1                   * write new record
            ADD       ONE,HEDCOUNT               * increment header record count
            MOVE      KEY16,SAVKEY16             * save header key
          ELSE
            MOVE      "MH section header record already exists ",ERORDESC
            CALL      PERR0000                   * print error line
            ADD       ONE,DUPCOUNT               * increment dupl. record count
          ENDIF
.
          GOTO      UPLD1000                     * get next record
.
.         We have a valid detail record
.           
UPLD7000  PACK      KEY32,MHDLURNO,MHDLUNIQ,MHDLSDAT,MHDLSTIM
          CALL      RAMHDLS1
          IF        OVRCD = 1
            BRANCH    VCHKFLAG,UPLD1000          * error checking only
.
            ADD       ONE,DETCOUNT               * increment detail record count
.
            CALL      SAVE0000                   * save date/times
.
            CALL      WRMHDLS1                   * write new record
            ADD       ONE,DTLCOUNT               * increment detail record count
          ELSE
            MOVE      "MH section detail record already exists ",ERORDESC
            CALL      PERR0000                   * print error line
            ADD       ONE,DUPCOUNT               * increment dupl. record count
          ENDIF
.
          GOTO      UPLD1000                     * get next record
.
.         Upload completed
.
UPLD9000  CALL      UPRV0000                     * update previous header rec.
.
          ASSIGN    (CODCOUNT+DUPCOUNT+DTECOUNT+TIMCOUNT+MANCOUNT+NUMCOUNT+UNKCOUNT+SEQCOUNT),FORM10
          IF        FORM10 > 0
            CALL      LINE0000                   * print bottom line if errors
          ENDIF
.
          COMPARE   CLNO,FIFTY1                  * room for stats ?
          CALL      HEAD0000 IF LESS             * no - new page req'd.
.
          CLOCK     TIME,CTIMEIS
          DISPLAY   *P14:18,*V2LON,RECCOUNT,*HOFF:
                    *P1:21,"Finished   : ",*V2LON,CTIMEIS
.
.         Warn the user if there were any records with errors
.
          IF        FORM10 > 0
            DISPLAY   *P1:22,*V2LON,*BLINKON,"Warning:  Records found with ":
                      "errors.  Refer to error report."
          ENDIF
.
          DISPLAY   *P1:24,*EL,*B,"Upload complete.  ";
          CALL      HITENTER
.
          PRINT     *N:
                    *1,"Total records read                    - ",RECCOUNT,*N:
                    *1,"Header Records added                  - ",HEDCOUNT,*N:
                    *1,"Detail Records added                  - ",DTLCOUNT,*N:
                    *1,"Duplicate Records detected            - ",DUPCOUNT,*N:
                    *1,"Records with invalid codes detected   - ",CODCOUNT,*N:
                    *1,"Records with invalid dates detected   - ",DTECOUNT,*N:
                    *1,"Records with invalid times detected   - ",TIMCOUNT,*N:
                    *1,"Records with blank mandatory fields   - ",MANCOUNT,*N:
                    *1,"Records with unknown U/R numbers      - ",UNKCOUNT,*N:
                    *1,"Records with invalid numbers detected - ",NUMCOUNT,*N:
                    *1,"Records out of sequence               - ",SEQCOUNT:
                    *N,*N,*1,"*** End of Report ***"
.
UPLD9999  RETURN
+
.****************************************************************************
.*                             MAND0000                Called by: UPLD0000  *
.*                 Check for standard Mandatory fields                      *
.* Returns: EXIT   0 = all mandatory fields are populated                   *
.*                 1 = one or more mandatory fields are blank               *
.*          MANCOUNT - updated count of records with mandatory fields       *
.*                     missing                                              *
.****************************************************************************
.
MAND0000  MOVE      ZERO,ERORFLAG                * init. validation error flag
.
          BRANCH    TYPEFORM,MAND1000            * detail record type
.
          GOTO      MAND9000                     * header records
.
.         Detail records only
.
MAND1000  MOVE      MSECSDAT,TMPSTRNG
          MOVE      "MSECSDAT",TMPFIELD          * start date
          CALL      CHKM0000
.
          MOVE      MSECSTIM,TMPSTRNG
          MOVE      "MSECSTIM",TMPFIELD          * start time
          CALL      CHKM0000
.
          MOVE      MSECSCOD,TMPSTRNG
          MOVE      "MSECSCOD",TMPFIELD          * section code
          CALL      CHKM0000
.
          MOVE      MSECRDAT,TMPSTRNG
          MOVE      "MSECRDAT",TMPFIELD          * review date
          CALL      CHKM0000
.
          MOVE      MSECRTIM,TMPSTRNG
          MOVE      "MSECRTIM",TMPFIELD          * review time
          CALL      CHKM0000
.
MAND9000  BRANCH    ERORFLAG,MAND9100            * errors on mand. fields
.
          MOVE      ZERO,EXIT                    * no errors on mand. fields
          GOTO      MAND9999
.
MAND9100  ADD       ONE,MANCOUNT                 * incr. mand error record count
          MOVE      ONE,EXIT
.
MAND9999  RETURN
+
.*****************************************************************************
.*                            CHKM0000             Called by: MAND0000       *
.*                    Check if a mandatory field is blank                    *
.* Requires: TMPSTRNG - field to be checked                                  *
.*           TMPFIELD - 8 character field name                               *
.* Returns:  ERORFLAG = 1   field is blank (error)                           *
.*****************************************************************************
.
CHKM0000  MATCH     TMPSTRNG,SP8                 * blank field ?
          GOTO      CHKM9999 IF NOT EQUAL        * no - finished
.
          MOVE      "Mandatory Field blank ",ERORDESC
          ENDSET    ERORDESC
          APPEND    LBRACK,ERORDESC
          APPEND    TMPFIELD,ERORDESC
          APPEND    RBRACK,ERORDESC
          APPEND    SP70,ERORDESC
          RESET     ERORDESC
          CALL      PERR0000                     * print error line
.
          MOVE      ONE,ERORFLAG                 * set error flag
.
CHKM9999  RETURN
+
.******************************************************************************
.*                                  HEAD0000              Called by: UPLD0000 *
.*                           Print The Report Header                 PERR0000 *
.******************************************************************************
.
HEAD0000  MOVE      "- Error Report",CPHDROPT
          CALL      HEAD132                 * Print the report header
.
          PRINT     *1,"< convsect.txt >"
.
          CALL      LINE0000                     * draw line across page
.
          PRINT     *1,PIPE,*3,"Record",*12,PIPE,*14,"Type",*19,PIPE:
                    *21,"U/R No.",*30,PIPE,*32,"Patient Name":
                    *71,PIPE,*73,"Error Description",*132,PIPE
.
          CALL      LINE0000                     * draw line across page
.
          MOVE      SEVEN,CLNO                   * initialise line count
.
HEAD9999  RETURN
+
.****************************************************************************
.*                            LINE0000                 Called by: HEAD0000  *
.*                      Draw line across page                               *
.****************************************************************************
.
LINE0000  PRINT     "*-----------------------------------------------":
                    "------------------------------------------------":
                    "-----------------------------------*"
.
LINE9999  RETURN
+
.******************************************************************************
.*                                  SETV0000              Called by: UPLD0000 *
.*                       Load the record variables                            *
.******************************************************************************
.
SETV0000  BRANCH    TYPEFORM,SETV5000            * detail record
.
.         Header record
.
SETV0500  BRANCH    VCHKFLAG,SETV1000            * validation only
.
          READ      CONTROLF,SIXTY9;*86,MHCNUNIQ  * get next unique id
          MOVE      MHCNUNIQ,FORM8
          IF        FORM8 = 99999999
            MOVE      ZERO,MHCNUNIQ
          ENDIF
          ADD       ONE,MHCNUNIQ
          WRITAB    CONTROLF,SIXTY9;*86,MHCNUNIQ
          MOVE      FORM8,MHHLUNIQ
.
          PACK      KEY16,MSECURNO,MHHLUNIQ
          CALL      RAMHHLS1                     * U/R - Unique id on file ?
          COMPARE   ZERO,OVRCD
          GOTO      SETV0500 IF EQUAL            * yes  - get next number
.
SETV1000  MOVE      ZERO,MHHLSTAT                * status (active)
          MOVE      ONE,MHHLCURR                 * current (yes)
          MOVE      MSECSREF,MHHLSREF            * source of referral
          MOVE      MSECRSCL,MHHLRSCL            * responsible clinician
          MOVE      MSECCSTM,MHHLCSTM            * case team
          MOVE      MSECKWRK,MHHLKWRK            * key worker
          MOVE      MSECCUID,MHHLCUID            * web user id created
          MOVE      MSECCDAT,MHHLCDAT            * date record created
          MOVE      MSECCTIM,MHHLCTIM            * time record created
          MOVE      MSECUUID,MHHLUUID            * web user id updated
          MOVE      MSECUDAT,MHHLUDAT            * date record updated
          MOVE      MSECUTIM,MHHLUTIM            * time record updated
          MOVE      MSECCOMM,MHHLCOMM            * comments
.
.         If there is no user id for creation of the record, then
.         default to program name and date/time of upload.
.
          MATCH     SP10,MSECCUID
          IF        @EQUAL
            MOVE      "CONVSECT  ",MHHLCUID
            MOVE      CURRDATE,MHHLCDAT
            MOVE      CTIMEIS,MHHLCTIM
          ENDIF
.
          GOTO      SETV9999
.
.         Detail record
.
SETV5000  MOVE      MSECURNO,MHDLURNO            * u/r number
          MOVE      MHHLUNIQ,MHDLUNIQ            * unique number
          MOVE      MSECSDAT,MHDLSDAT            * start date
          MOVE      MSECSTIM,MHDLSTIM            * start time
          MOVE      ZERO,MHDLACTV                * status (active)
          MOVE      MSECSCOD,MHDLSCOD            * section code
          MOVE      MSECRDAT,MHDLRDAT            * review date
          MOVE      MSECRTIM,MHDLRTIM            * review time
          MOVE      MSECEDAT,MHDLEDAT            * end date
          MOVE      MSECETIM,MHDLETIM            * end time
          MOVE      MSECCUID,MHDLCUID            * web user id created
          MOVE      MSECCDAT,MHDLCDAT            * date record created
          MOVE      MSECCTIM,MHDLCTIM            * time record created
          MOVE      MSECUUID,MHDLUUID            * web user id updated
          MOVE      MSECUDAT,MHDLUDAT            * date record updated
          MOVE      MSECUTIM,MHDLUTIM            * time record updated
          MOVE      MSECCMNT,MHDLCMNT            * comment line 1
          MOVE      MSECCMN2,MHDLCMN2            * comment line 2
          MOVE      MSECREMD,MHDLREMD            * reminder date
.
.         If there is no user id for creation of the record, then
.         default to program name and date/time of upload.
.
          MATCH     SP10,MSECCUID
          IF        @EQUAL
            MOVE      "CONVSECT  ",MHDLCUID
            MOVE      CURRDATE,MHDLCDAT
            MOVE      CTIMEIS,MHDLCTIM
          ENDIF
.
SETV9999  RETURN
+
.*****************************************************************************
.*                            POUT0000             Called by: UPLD0000       *
.*            Pad out all the record fields with spaces given that we        *
.*            are dealing with pipe delimited records                        *
.*****************************************************************************
.
POUT0000  PACK      MSECURNO,MSECURNO,SP8
          RJUSTIFY  MSECURNO
.
          BRANCH    TYPEFORM,POUT1000            * detail record
.
.         Header record
.
          PACK      MSECSREF,MSECSREF,SP70
          PACK      MSECRSCL,MSECRSCL,SP70
          PACK      MSECCSTM,MSECCSTM,SP70
          PACK      MSECKWRK,MSECKWRK,SP70
          PACK      MSECCUID,MSECCUID,SP70
          PACK      MSECCDAT,MSECCDAT,SP70
          PACK      MSECCTIM,MSECCTIM,SP70
          PACK      MSECUUID,MSECUUID,SP70
          PACK      MSECUDAT,MSECUDAT,SP70
          PACK      MSECUTIM,MSECUTIM,SP70
          PACK      MSECCOMM,MSECCOMM,SP70,SP70
          GOTO      POUT9999
.
.         Detail record
.
POUT1000  PACK      MSECSDAT,MSECSDAT,SP70
          PACK      MSECSTIM,MSECSTIM,SP70
          PACK      MSECSCOD,MSECSCOD,SP70
          PACK      MSECRDAT,MSECRDAT,SP70
          PACK      MSECRTIM,MSECRTIM,SP70
          PACK      MSECEDAT,MSECEDAT,SP70
          PACK      MSECETIM,MSECETIM,SP70
          PACK      MSECCUID,MSECCUID,SP70
          PACK      MSECCDAT,MSECCDAT,SP70
          PACK      MSECCTIM,MSECCTIM,SP70
          PACK      MSECUUID,MSECUUID,SP70
          PACK      MSECUDAT,MSECUDAT,SP70
          PACK      MSECUTIM,MSECUTIM,SP70
          PACK      MSECCMNT,MSECCMNT,SP70,SP70
          PACK      MSECCMN2,MSECCMN2,SP70,SP70
          PACK      MSECREMD,MSECREMD,SP70
.
POUT9999  RETURN
+
.*****************************************************************************
.*                              DVAL0000           Called by: UPLD0000       *
.*                  Validate all date fields                                 *
.* Returns:  EXIT - 0 = No date validation errors                            *
.*                  1 = Date validation errors                               *
.*          DTECOUNT - updated count of records with date field errors       *
.*****************************************************************************
.
DVAL0000  MOVE      ZERO,ERORFLAG                * init. validation error flag
.                            
          BRANCH    TYPEFORM,DVAL1000            * suspension type only
.         
.         Header record
.
          MOVE      MSECCDAT,TEMPDATE            * date record created
          MOVE      ZERO,DATEFLG1                * ccyymmdd
          MOVE      ONE,DATEFLG2                 * future date not allowed
          MOVE      "MSECCDAT",TMPFIELD
          CALL      VDAT0000
.
          MOVE      MSECUDAT,TEMPDATE            * date record updated
          MOVE      ZERO,DATEFLG1                * ccyymmdd
          MOVE      ONE,DATEFLG2                 * future date not allowed
          MOVE      "MSECUDAT",TMPFIELD
          CALL      VDAT0000
.
          GOTO      DVAL9000
.
.         Detail Record
.
DVAL1000  MOVE      MSECSDAT,TEMPDATE            * start date
          MOVE      ZERO,DATEFLG1                * ccyymmdd
          MOVE      ONE,DATEFLG2                 * future date not allowed
          MOVE      "MSECSDAT",TMPFIELD
          CALL      VDAT0000
.
          COMPARE   ZERO,PCEASE                  * patient deceased ?
          GOTO      DVAL1010 IF EQUAL            * no
.
.         The patient is deceased.
.         If the end date is blank, then populate it with the date of death.
.
          MATCH     SP8,MSECEDAT
          IF        @EQUAL
            MOVE      PDECDTE,MSECEDAT
            MOVE      "23:59:59",MSECETIM
            GOTO      DVAL1010
          ENDIF
.
.         Validate the end date is not greater than the date of death.  If it
.         is, then populate it with the date of death.
.
          MATCH     MSECEDAT,PDECDTE
          IF        @LESS
            MOVE      PDECDTE,MSECEDAT
            MOVE      "23:59:59",MSECETIM
          ENDIF
.
DVAL1010  MOVE      MSECEDAT,TEMPDATE            * end date
          MOVE      ZERO,DATEFLG1                * ccyymmdd
          MOVE      ONE,DATEFLG2                 * future date not allowed
          MOVE      "MSECEDAT",TMPFIELD
          CALL      VDAT0000
.
          MATCH     SP8,MSECEDAT                 * blank "end" date ?
          GOTO      DVAL1100 IF EQUAL            * yes
.
          MATCH     MSECSDAT,MSECEDAT
          IF        @LESS
            MOVE      "End Date less than Start Date ",ERORDESC
            CALL      PERR0000                   * print error line
            MOVE      ONE,ERORFLAG               * set error flag
            GOTO      DVAL9000
          ENDIF
.
DVAL1100  MOVE      MSECRDAT,TEMPDATE            * review date
          MOVE      ZERO,DATEFLG1                * ccyymmdd
          MOVE      ZERO,DATEFLG2                * any date allowed
          MOVE      "MSECRDAT",TMPFIELD
          CALL      VDAT0000
.
          MOVE      MSECCDAT,TEMPDATE            * date record created
          MOVE      ZERO,DATEFLG1                * ccyymmdd
          MOVE      ONE,DATEFLG2                 * future date not allowed
          MOVE      "MSECCDAT",TMPFIELD
          CALL      VDAT0000
.
          MOVE      MSECUDAT,TEMPDATE            * date record updated
          MOVE      ZERO,DATEFLG1                * ccyymmdd
          MOVE      ONE,DATEFLG2                 * future date not allowed
          MOVE      "MSECUDAT",TMPFIELD
          CALL      VDAT0000
.
          MOVE      MSECREMD,TEMPDATE            * reminder date
          MOVE      ZERO,DATEFLG1                * ccyymmdd
          MOVE      TWO,DATEFLG2                 * only future date allowed
          MOVE      "MSECREMD",TMPFIELD
          CALL      VDAT0000
.
DVAL9000  BRANCH    ERORFLAG,DVAL9100            * errors on date validation
.
          MOVE      ZERO,EXIT                    * no errors on date validation
          GOTO      DVAL9999
.
DVAL9100  ADD       ONE,DTECOUNT                 * incr. date error record count
          MOVE      ONE,EXIT
.
DVAL9999  RETURN
+
.*****************************************************************************
.*                              VDAT0000           Called by: DVAL0000       *
.*                  Validate a date field                                    *
.* Requires:  TEMPDATE - Date in format ccyymmdd                             *
.*            DATEFLG1 - Date Type flag                                      *
.*                          0 = full date (ccyymmdd)                         *
.*                          1 = partial date (ccyymm)                        *
.*            DATEFLG2 - Dates Allowed flag                                  *
.*                          0 = any date allowed                             *
.*                          1 = no future dates allowed                      *
.*            TMPFIELD - Date field name                                     *
.* Returns:   ERORFLAG = 1 if an error in date validation occurs.            *
.*****************************************************************************
.
VDAT0000  MATCH     SP8,TEMPDATE                 * blank date ?
          GOTO      VDAT9999 IF EQUAL            * yes
.
.         Validate that the date has been fully populated
.
          SQUEEZE   TEMPDATE
          MOVELPTR  TEMPDATE,FORM1
          IF        DATEFLG1 = 0 & FORM1 <> 8 | DATEFLG1 = 1 & FORM1 <> 6
            MOVE      "Insufficient digits ",ERORDESC
            CALL      DERR0000
            GOTO      VDAT9999
          ENDIF
.
.         Validate that the date is numeric
.
VDAT0100  TYPE      TEMPDATE
          IF        !@EQUAL
            MOVE      "Not numeric ",ERORDESC
            CALL      DERR0000
            GOTO      VDAT9999
          ENDIF
.
          UNPACK    TEMPDATE,DIM2C,DIM2Y,DIM2M,DIM2D
.
.         Validate the century is >= 18 and <= current century
.
          MOVE      DIM2C,FORM2
          IF        FORM2 < 18 | FORM2 > CURRCENT
            MOVE      "Century not valid ",ERORDESC
            CALL      DERR0000
            GOTO      VDAT9999
          ENDIF
.
.         Validate the month
.
          MOVE      DIM2M,FORM2
          IF        FORM2 < 1 | FORM2 > 12
            MOVE      "Month not valid ",ERORDESC
            CALL      DERR0000
            GOTO      VDAT9999
          ENDIF
.
          COMPARE   ONE,DATEFLG1                 * short date (ccyymm) ?
          GOTO      VDAT9999 IF EQUAL            * yes - finished
.
.         Validate the day is:
.              < 32 for January, March, May, July, August, October & December
.              < 31 for April, June, September & November
.              < 29 for February, except in a leap year where it is < 30
.
          BRANCH    FORM2,VDAT1000:              * Jan
                          VDAT3000:              * Feb
                          VDAT1000:              * Mar
                          VDAT2000:              * Apr
                          VDAT1000:              * May
                          VDAT2000:              * Jun
                          VDAT1000:              * Jul
                          VDAT1000:              * Aug
                          VDAT2000:              * Sep
                          VDAT1000:              * Oct
                          VDAT2000:              * Nov
                          VDAT1000               * Dec
.
.         Validate days for month of 31 days
.
VDAT1000  MOVE      DIM2D,FORM2
          IF        FORM2 < 1 | FORM2 > 31
            GOTO      VDAT3900
          ENDIF
          GOTO      VDAT4000
.
.         Validate days for month of 30 days
.
VDAT2000  MOVE      DIM2D,FORM2
          IF        FORM2 < 1 | FORM2 > 30
            GOTO      VDAT3900
          ENDIF
          GOTO      VDAT4000
.
.         Validate days for February
.         A leap year is one where:
.           1. Every year divisible by 4 is a leap year.
.           2. But every year divisible by 100 is NOT a leap year
.           3. Unless the year is also divisible by 400, then it is still a
.              leap year.
.
VDAT3000  MOVE      DIM2D,FORM2
          PACK      DIM4,DIM2C,DIM2Y
          MOVE      DIM4,FORM4
          IF        (FORM4%4) = 0
            IF        (FORM4%100) = 0
              IF        (FORM4%400) = 0
                GOTO      VDAT3200
              ENDIF
            ELSE
              GOTO      VDAT3200
            ENDIF
          ENDIF
.
.         Check for normal Feb days
.
VDAT3100  IF        FORM2 < 1 | FORM2 > 28
            GOTO      VDAT3900
          ENDIF
          GOTO      VDAT4000
.
.         Check for leap year Feb days
.
VDAT3200  IF        FORM2 < 1 | FORM2 > 29
            GOTO      VDAT3900
          ENDIF
          GOTO      VDAT4000
.
VDAT3900  MOVE      "Day not valid ",ERORDESC
          CALL      DERR0000
          GOTO      VDAT9999
.
VDAT4000  COMPARE   ZERO,DATEFLG2                * any date allowed ?
          GOTO      VDAT9999 IF EQUAL            * yes
.
          BRANCH    DATEFLG2,VDAT5000:           * date cannot be in the future
                             VDAT6000            * date must be in the future
.
.         Make sure the date is not in the future
.
VDAT5000  MATCH     TEMPDATE,CURRDATE
          IF        @LESS
            MOVE      "Cannot be in the future ",ERORDESC
            CALL      DERR0000
            GOTO      VDAT9999
          ENDIF
          GOTO      VDAT9999
.
.         Make sure the date is in the future
.
VDAT6000  MATCH     TEMPDATE,CURRDATE
          IF        !@LESS
            MOVE      "Must be in the future ",ERORDESC
            CALL      DERR0000
          ENDIF
.
VDAT9999  RETURN
+
.*****************************************************************************
.*                            DERR0000             Called by: VDAT0000       *
.*                    Process date error                                     *
.* Requires: TMPFIELD - field name                                           *
.*           ERORDESC - error description                                    *
.* Returns:  ERORFLAG = 1 if an error in date validation occurs.             *
.*****************************************************************************
.
DERR0000  ENDSET    ERORDESC
          APPEND    LBRACK,ERORDESC
          APPEND    TMPFIELD,ERORDESC
          APPEND    RBRACK,ERORDESC
          APPEND    SP70,ERORDESC
          RESET     ERORDESC
          CALL      PERR0000                     * print error line
.
          MOVE      ONE,ERORFLAG                 * set date error flag
.
DERR9999  RETURN
+
.*****************************************************************************
.*                              TVAL0000           Called by: UPLD0000       *
.*                  Validate all time fields                                 *
.* Returns:  EXIT - 0 = No time validation errors                            *
.*                  1 = Time validation errors                               *
.*          TIMCOUNT - updated count of records with time field errors       *
.*****************************************************************************
.
TVAL0000  MOVE      ZERO,ERORFLAG                * init. validation error flag
.
          BRANCH    TYPEFORM,TVAL1000            * detail record
.
.         Header record
.
          MOVE      MSECCDAT,TEMPDATE
          MOVE      MSECCTIM,TEMPTIME            * time record created
          MOVE      "MSECCTIM",TMPFIELD
          CALL      VTIM0000
.
          MOVE      MSECUDAT,TEMPDATE
          MOVE      MSECUTIM,TEMPTIME            * time record updated
          MOVE      "MSECUTIM",TMPFIELD
          CALL      VTIM0000
.
          GOTO      TVAL9000
.
.         Detail record
.
TVAL1000  MOVE      MSECSDAT,TEMPDATE            * start date
          MOVE      MSECSTIM,TEMPTIME            * start time
          MOVE      "MSECSTIM",TMPFIELD
          CALL      VTIM0000
.
          MOVE      MSECRDAT,TEMPDATE            * review date
          MOVE      MSECRTIM,TEMPTIME            * review time
          MOVE      "MSECRTIM",TMPFIELD
          CALL      VTIM0000
.
          MOVE      MSECEDAT,TEMPDATE            * end date
          MOVE      MSECETIM,TEMPTIME            * end time
          MOVE      "MSECETIM",TMPFIELD
          CALL      VTIM0000
.
          MOVE      MSECCDAT,TEMPDATE
          MOVE      MSECCTIM,TEMPTIME            * time record created
          MOVE      "MSECCTIM",TMPFIELD
          CALL      VTIM0000
.
          MOVE      MSECUDAT,TEMPDATE
          MOVE      MSECUTIM,TEMPTIME            * time record updated
          MOVE      "MSECUTIM",TMPFIELD
          CALL      VTIM0000
.
TVAL9000  BRANCH    ERORFLAG,TVAL9100            * errors on time validation
.
          MOVE      ZERO,EXIT                    * no errors on time validation
          GOTO      TVAL9999
.
TVAL9100  ADD       ONE,TIMCOUNT                 * incr. time error record count
          MOVE      ONE,EXIT
.
TVAL9999  RETURN
+
.*****************************************************************************
.*                            VTIM0000             Called by: TVAL0000       *
.*                    Validate time fields                                   *
.* Requires:  TEMPTIME - Time in format hh:mm:ss                             *
.*            TEMPDATE - Date in format ccyymmdd                             *
.*            TMPFIELD - Time field name                                     *
.* Returns:   ERORFLAG = 1 if an error in time validation occurs.            *
.*****************************************************************************
.
VTIM0000  MATCH     SP8,TEMPTIME                 * blank time ?
          GOTO      VTIM9999 IF EQUAL            * yes
.
          MATCH     SP8,TEMPDATE                 * blank date ?
          IF        @EQUAL
            MOVE      "Time without corresponding date ",ERORDESC
            CALL      TERR0000
            GOTO      VTIM9999
          ENDIF
.
          UNPACK    TEMPTIME,DIM2H,DIM1A,DIM2M,DIM1B,DIM2S    * (hh:mm:ss)
.
.         Make sure colon's separate the hours, minutes and seconds
.
          MATCH     DIM1A,DIM1B
          GOTO      VTIM1000 IF NOT EQUAL
.
          MATCH     COLON,DIM1A
          GOTO      VTIM1000 IF NOT EQUAL
.
          GOTO      VTIM2000
.
VTIM1000  MOVE      "Format not valid ",ERORDESC
          CALL      TERR0000
          GOTO      VTIM9999
.
.         Validate the hour
.
VTIM2000  MOVE      DIM2H,FORM2
          IF        FORM2 < 0 | FORM2 > 23
            MOVE      "Hour not valid ",ERORDESC
            CALL      TERR0000
            GOTO      VTIM9999
          ENDIF
.
.         Validate the minute
.
          MOVE      DIM2M,FORM2
          IF        FORM2 < 0 | FORM2 > 59
            MOVE      "Minutes not valid ",ERORDESC
            CALL      TERR0000
            GOTO      VTIM9999
          ENDIF
.
.         Validate the second
.
          MOVE      DIM2S,FORM2
          IF        FORM2 < 0 | FORM2 > 59
            MOVE      "Seconds not valid ",ERORDESC
            CALL      TERR0000
            GOTO      VTIM9999
          ENDIF
.
          MATCH     SP8,TEMPDATE                 * date blank ?
          GOTO      VTIM9999 IF EQUAL            * yes
.
.         Make sure that the transaction time is not in the future
.
          MATCH     "MSECRTIM",TMPFIELD          * review time being checked ?
          GOTO      VTIM9999 IF EQUAL            * yes - can be in the future
.
          MATCH     TEMPDATE,CURRDATE
          IF        @EQUAL
            MATCH     TEMPTIME,CTIMEIS
            IF        @LESS
              MOVE      "Time in the future ",ERORDESC
              CALL      TERR0000
            ENDIF
          ENDIF
.
VTIM9999  RETURN
+
.*****************************************************************************
.*                            TERR0000             Called by: VTIM0000       *
.*                    Process time error                                     *
.* Requires: TMPFIELD - field name                                           *
.*           ERORDESC - error description                                    *
.* Returns:  ERORFLAG = 1 if an error in time validation occurs.             *
.*****************************************************************************
.
TERR0000  ENDSET    ERORDESC
          APPEND    LBRACK,ERORDESC
          APPEND    TMPFIELD,ERORDESC
          APPEND    RBRACK,ERORDESC
          APPEND    SP70,ERORDESC
          RESET     ERORDESC
          CALL      PERR0000                     * print error line
.
          MOVE      ONE,ERORFLAG                 * set time error flag
.
TERR9999  RETURN
+
.*****************************************************************************
.*                           CVAL0000              Called by: UPLD0000       *
.*                 Validate all the relevant coded fields.                   *
.*        This validation is performed on the database fields just prior     *
.*        to writing the data and after any mappings have been performed.    *
.* Returns:  EXIT - 0 = No code validation errors                            *
.*                  1 = Code validation errors                               *
.*          CODCOUNT - updated count of records with coded field errors      *
.*****************************************************************************
.
CVAL0000  MOVE      ZERO,ERORFLAG                * init. validation error flag
.
          BRANCH    TYPEFORM,CVAL5000            * detail record
.
.         Header record
.
          MATCH     SP3,MSECSREF                 * blank code ?
          GOTO      CVAL0100 IF EQUAL            * yes - no validation req'd
.
          PACK      TEMPCATG,ANSS,SP1
          PACK      TEMPCODE,MSECSREF,SP10       * source of referral
          MOVE      "MSECSREF",TMPFIELD
          MOVE      ONE,TEMPTYPE                 * patcodes
          CALL      VCOD0000
.
CVAL0100  MATCH     SP10,MSECRSCL                * blank code ?
          GOTO      CVAL0200 IF EQUAL            * yes - no validation req'd
.
          PACK      TEMPCODE,MSECRSCL,SP10       * responsible clinician
          MOVE      "MSECRSCL",TMPFIELD
          MOVE      TWO,TEMPTYPE                 * pmshcpaf (HCP)
          CALL      VCOD0000
.
CVAL0200  MATCH     SP10,MSECCSTM                * blank code ?
          GOTO      CVAL0300 IF EQUAL            * yes - no validation req'd
.
          PACK      TEMPCODE,MSECCSTM,SP10       * case team
          MOVE      "MSECCSTM",TMPFIELD
          MOVE      THREE,TEMPTYPE               * allcasaf
          CALL      VCOD0000
.
CVAL0300  MATCH     SP10,MSECKWRK                * blank code ?
          GOTO      CVAL9000 IF EQUAL            * yes - no validation req'd
.
          PACK      TEMPCODE,MSECKWRK,SP10       * key worker
          MOVE      "MSECKWRK",TMPFIELD
          MOVE      TWO,TEMPTYPE                 * pmshcpaf (HCP)
          CALL      VCOD0000
.
          GOTO      CVAL9000
.
.         Detail record
.
CVAL5000  MATCH     SP3,MSECSCOD                 * blank code ?
          GOTO      CVAL0100 IF EQUAL            * yes - no validation req'd
.
          PACK      TEMPCATG,ANSL,ANSS
          PACK      TEMPCODE,MSECSCOD,SP10       * section code
          MOVE      "MSECSCOD",TMPFIELD
          MOVE      ONE,TEMPTYPE                 * patcodes
          CALL      VCOD0000
.
CVAL9000  BRANCH    ERORFLAG,CVAL9100            * errors on code validation
.
          MOVE      ZERO,EXIT                    * no errors on code validation
          GOTO      CVAL9999
.
CVAL9100  ADD       ONE,CODCOUNT                 * incr. code error record count
          MOVE      ONE,EXIT
.
CVAL9999  RETURN
+
.*****************************************************************************
.*                           VCOD0000              Called by: CVAL0000       *
.*                   Validate a coded field                                  *
.* Requires: TEMPCATG - temporary category variable                          *
.*           TEMPCODE - temporary code variable                              *
.*           TEMPTYPE - temporary code type                                  *
.*           TMPFIELD - temporary field name                                 *
.* Returns:  ERORFLAG = 1 if an error in code validation occurs.             *
.*****************************************************************************
.
VCOD0000  BRANCH    TEMPTYPE,VCOD1000:           * patcodes (category-codes)
                             VCOD2000:           * pmshcpaf (HCP)
                             VCOD3000            * allcasaf (case team)
.
.         Validate a category-coded field (patcodes)
.
VCOD1000  PACK      KEY5,TEMPCATG,TEMPCODE
          CALL      RDCODE1                      * valid code ?
          BRANCH    OVRCD,VCOD9100               * no - error
          GOTO      VCOD9999                     * yes
.
.         Validate a HCP field (pmshcpaf)
.
VCOD2000  MOVE      TEMPCODE,KEY10
          CALL      RDPMHCP1                     * valid code ?
          BRANCH    OVRCD,VCOD9100               * no - error
          GOTO      VCOD9999                     * yes
.
.         Validate a case team field (allcasaf)
.
VCOD3000  MOVE      TEMPCODE,KEY10
          CALL      RDALCAS1                     * valid code ?
          BRANCH    OVRCD,VCOD9100               * no - error
          GOTO      VCOD9999                     * yes
.
VCOD9100  MOVE      "Invalid coded field ",ERORDESC
          ENDSET    ERORDESC
          APPEND    LBRACK,ERORDESC
          APPEND    TMPFIELD,ERORDESC
          APPEND    RBRACK,ERORDESC
          APPEND    SP70,ERORDESC
          RESET     ERORDESC
          CALL      PERR0000                     * print error
.
          MOVE      ONE,ERORFLAG                 * set code error flag
.
VCOD9999  RETURN
+
.*****************************************************************************
.*                              PERR0000           Called by: UPLD0000       *
.*                   Print an error detail line               CHKM0000       *
.* Requires: Valid read on PMI records (for name fields)      DERR0000       *
.*           ERORDESC - error description                     TERR0000       *
.*           CLNO - current page line count                   VURN0000       *
.* Returns:  CLNO - updated page line count                   NERR0000       *
.*                                                            VCOD0000       *
.*****************************************************************************
.
PERR0000  COMPARE   CLNO,SIXTY3                  * page full ?
          IF        @LESS
            CALL      LINE0000                   * yes - print bottom line
            CALL      HEAD0000                   * print header
          ENDIF
.
          MOVE      PSNAME,PACSNAME              * format patient name
          MOVE      PGNAME,PACGNAME
          MOVE      PTITL,PACTITLE
          MOVE      TWO,PACFRMT
          CALL      PACNAME
          MOVE      PACFNAME,DIM44
.
PERR1000  PRINT     *1,PIPE,*3,RECCOUNT,*12,PIPE,*15,MSECTYPE,*19,PIPE:
                    *21,MSECURNO,*30,PIPE,*32,DIM44,*71,PIPE:
                    *73,ERORDESC,*132,PIPE
          ADD       ONE,CLNO                     * increment page line count
.
PERR9999  RETURN
+
.*****************************************************************************
.*                              VURN0000           Called by: UPLD0000       *
.*                        Validate U/R Number                                *
.* Requires: MSECURNO - U/R number (right justified)                         *
.* Returns:  Valid read on PMI data                                          *
.*           EXIT  0 = PMI record found - ok to continue                     *
.*                 1 = PMI record not found - ignore record                  *
.*          UNKCOUNT - updated count of unknown U/R numbers                  *
.*          MHHLURNO - U/R number right justified                            *
.*****************************************************************************
.
VURN0000  MATCH     SP8,MSECURNO                 * blank U/R ?
          IF        @EQUAL
            MOVE      "U/R missing ",ERORDESC    * yes
            GOTO      VURN9150
          ENDIF
.
          MOVE      MSECURNO,KEY8
          CALL      RDMAST1                      * U/R on file ?
          BRANCH    OVRCD,VURN9100               * no - error
.
          COMPARE   ONE,PSTAT                    * merged U/R ?
          GOTO      VURN9000 IF NOT EQUAL        * no
.
.         We have a merged U/R record, so get the new U/R
.
          MATCH     PPSNAME,SP20                 * blank previous name field ?
          GOTO      VURN9100 IF EQUAL            * yes - error
.
          MOVE      PPSNAME,MSECURNO             * no - load new U/R
          GOTO      VURN0000                     * get new pmi record
.
VURN9000  MOVE      MSECURNO,MHHLURNO            * load U/R number
          MOVE      ZERO,EXIT
          GOTO      VURN9999
.
VURN9100  MOVE      "PMI Record not found ",ERORDESC
VURN9150  CALL      PERR0000                     * print error line
          ADD       ONE,UNKCOUNT                 * increment unknown U/R count
          MOVE      ONE,EXIT
.
VURN9999  RETURN
+
.*****************************************************************************
.*                             UPRV0000            Called by: UPLD0000       *
.*             Update the previous header record.                            *
.*        The header record (mehhlsaf) start date/time fields should         *
.*        correspond to the start date/time of the first detail record       *
.*        (mehdlsaf).                                                        *
.*        The header record (mehhlsaf) end date/time fields should           *
.*        correspond to the end date/time of the last detail record          *
.*        (mehdlsaf) if populated.                                           *
.*                                                                           *
.*        Either we have just read a new header record, or we have read the  *
.*        last record on the upload file.  We now need to update the         *
.*        previous header record with the Start Date/Time of the first       *
.*        detail record and the End Date/Time (if populated) of the last     *
.*        detail record.  We only need to do this where at least one detail  *
.*        record has beeen written.                                          *
.* Requires: DETCOUNT - detail record count for the last header record       *
.*           SAVKEY16 - key for the previous mehhlsaf record                 *
.*           VCHKFLAG - run mode flag                                        *
.*                       0 = normal mode (write mode)                        *
.*                       1 = validation only                                 *
.*           SAVESDAT - start date (ccyymmdd)                                *
.*           SAVESTIM - start time (hh:mm:ss)                                *
.*           SAVERDAT - most recent start date (ccyymmdd)                           *
.*           SAVERTIM - most recent start time (hh:mm:ss)                           *
.*           SAVEEDAT - end date (ccyymmdd)                                  *
.*           SAVEETIM - end time (hh:mm:ss)                                  *
.*****************************************************************************
.
UPRV0000  BRANCH    VCHKFLAG,UPRV9999            * validation only
.
          MATCH     SAVKEY16,SP20                * blank header key ?
          GOTO      UPRV9999 IF EQUAL            * yes - finished
.
          MOVE      SAVKEY16,KEY16
          CALL      RDMHHLS1                     * record on file ?
          BRANCH    OVRCD,UPRV9999               * no - finished
.
          COMPARE   ZERO,DETCOUNT                * any detail records written ?
          IF        @EQUAL
            MOVE      CURRDATE,MHHLSDAT          * no - default to current
            MOVE      CTIMEIS,MHHLSTIM           *      start date/time
          ELSE
            MOVE      SAVESDAT,MHHLSDAT          * load start date
            MOVE      SAVESTIM,MHHLSTIM          * load start time
            MOVE      SAVEEDAT,MHHLEDAT          * load end date
            MOVE      SAVEETIM,MHHLETIM          * load end time
          ENDIF
.
UPRV9000  CALL      UPMHHLS1                     * update previous header rec.
.
UPRV9999  RETURN
+
.*****************************************************************************
.*                             SAVE0000            Called by: UPLD0000       *
.*            Save start date/time and end date/time detail variables        *
.*            (see UPRV0000 for further information)                         *
.*****************************************************************************
.
.         Check if the start date/time of this detail record is prior to
.         the save date/time and if so, save these as the new start date/time.
.         Note: Start Date/Time are mandatory fields.
.
SAVE0000  MATCH     SP8,SAVESDAT                 * blank saved date
          GOTO      SAVE1000 IF EQUAL            * yes - update save variables
.
          MATCH     MHDLSDAT,SAVESDAT            * save date < detail date ?
          GOTO      SAVE5000 IF LESS             * yes - no need to update
.
.         The saved start date/time is either equal to or greater
.         than the detail record start date/time
.
          MATCH     MHDLSDAT,SAVESDAT            * save date > detail date ?
          GOTO      SAVE1000 IF NOT EQUAL        * yes - update save variables
.
.         Start dates are the same, so check the start time
.
          MATCH     SAVESTIM,MHDLSTIM            * detail time < save time ?
          GOTO      SAVE5000 IF NOT LESS         * no - no need to update
.
SAVE1000  MOVE      MHDLSDAT,SAVESDAT            * save start date
          MOVE      MHDLSTIM,SAVESTIM            * save start time
.
.         Check if the start date/time of this detail record makes it the most
.         recent detail record and if so, save the end date/time.
.
SAVE5000  MATCH     SP8,SAVERDAT                 * last start date blank ?
          GOTO      SAVE6000 IF EQUAL            * yes - load end date/time
.
          MATCH     SAVESDAT,SAVERDAT            * more recent detail record ?
          GOTO      SAVE6000 IF LESS             * yes - load end date/time
          GOTO      SAVE9999 IF NOT EQUAL        * no - finished
.
.         The start date of this record is the same as the start date of the
.         most recent record so far, so compare the times to see which
.         is more recent.
.
          MATCH     SAVESTIM,SAVERTIM            * more recent detail record ?
          GOTO      SAVE9999 IF NOT LESS         * no - finished
.
SAVE6000  MOVE      SAVESDAT,SAVERDAT            * save last start date
          MOVE      SAVESTIM,SAVERTIM            * save last start time
          MOVE      MHDLEDAT,SAVEEDAT            * save end date
          MOVE      MHDLETIM,SAVEETIM            * save end time
.
SAVE9999  RETURN
+
. =========================================================================
.         I/O Includes
. =========================================================================
.
          INC       STD001IO
.
          INC       CLMEHDLS
          INC       CLMEHHLS
          INC       CLPATMAS
.
          INC       ALLCASIO/INC
          INC       MEHDLSIO/INC
          INC       MEHHLSIO/INC
          INC       PATCODIO/INC
          INC       PATMA1IO/INC
          INC       PMSHCPIO/INC
