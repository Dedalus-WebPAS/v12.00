.******************************************************************************
.* System         : Patient Billing                                           *
.* Program        : IBAPMS04.PBL                                              *
.* Name           : Eclipse In Hospital Claims Extract                        *
.******************************************************************************
.* Date           : 09/12/2008                                                *
.* Author         : Steve Armstrong                                           *
.* Function       : Extract Eclipse In Hospital Claims                        *
.*                  User is given 3 options upon entering program:            *
.*                     1. Create Health Fund Extract                          *
.*                     2. Create Claim Code Extract                           *
.*                  Option 1 will loop through pmsectaf table and load any    *
.*                           unextracted records for the selected health fund *
.*                           into a temporary table from which they are then  *
.*                           displayed to the user.  The user can select      *
.*                           which records to extract, then proceed with the  *
.*                           extraction.                                      *
.*                  Option 2 will loop through pmsectaf table and load any    *
.*                           unextracted records for the selected claim code  *
.*                           into a temporary table from which they are then  *
.*                           displayed to the user.  The user can select      *
.*                           which records to extract, then proceed with the  *
.*                           extraction.                                      *
.*                                                                            *
.* Modifications  :                                                           *
.*                                                                            *
.*        V12.00.01 16/05/2025  Ebon Clements TSK 0955096                     *
.*                  Alphanueric visit number changes                          *
.*        V11.02.03 17/06/2022  J.Tan         TSK 0918312                     *
.*                  Recompiled for PATFN2RD - to use OVRCD instead of EXIT    *
.*        V11.02.02 20/05/2022  J.Tan         TSK 0814566                     *
.*                  Removed opening patfn2af file                             *
.*        V11.02.01 28/03/2022  J.Tan          TSK 0814566                    *
.*                  Added PATFN2RD -  Hospital & Eff.date to patfn2af         *
.*        V11.01.03 16/04/2021  Peter Vela     TSK 0904859                    *
.*                  Added Other to PatientGender and BabyGender               *
.*        V11.01.02 22/02/2021  J.Tan          TSK 0888639                    *
.*                  Changed patmmbs counter record to DIM3                    *
.*        V11.01.01 16/02/2021  Peter Vela     TSK 0902770                    *
.*                  Added CMBSCMIX to GCEQ1900 - to copy SVB Service Code /   *
.*                  Service Code Type Code to the ACD segment on Casemix      *
.*                  Visit. Same logic as task 0900097 applied to "Other"      *
.*                  Eclipse Type of Service                                   *
.*        V11.00.11 30/11/2020  Peter Vela     TSK 0900097                    *
.*                  Validate Daycase/CMBS mapped Casemix visit in LACC7010    *
.*        V11.00.10 24/11/2020  Peter Vela     TSK 0900178                    *
.*                  Added Medibank validation in LACC0000                     *
.*                  for Casepayment/Add On Ind/BedLevelCode                   *
.*        V11.00.09 12/11/2020  Peter Vela     TSK 0899701                    *
.*                  Fixed length UKEY2                                        *
.*        V11.00.08 12/11/2020  Peter Vela     TSK 0899701                    *
.*                  Added service date to temp file 2                         *
.*        V11.00.07 12/10/2020  Peter Vela     TSK 0898033                    *
.*                  Added check for CTHETR before OPRDETA3 read               *
.*        V11.00.06 06/10/2020  Peter Vela     TSK 0897808                    *
.*                  Commented out ACD.06                                      *
.*        V11.00.05 06/07/2020  Peter Vela     TSK 0894180                    *
.*                  Fixed Insurance invoice rebate amount display             *
.*                  WMIG0000                                                  *
.*        V11.00.04 11/06/2020  Peter Vela     TSK 0892975                    *
.*                  Fixed effective date key for all calls to PATITMRD        *
.*        V11.00.03 15/05/2020  Peter Vela     TSK 0891872                    *
.*                  Fixed effective date key when calling PATITMRD in         *
.*                  WPSG0000                                                  *
.*        V11.00.02 11/03/2020  J.Tan          TSK 0838262                    *
.*                  Added Effective from and to date to MBS Item file         *
.*        V11.00.01 25/02/2020  Peter Vela                TSK 0876044         *
.*                  Fixed casemix date validation in LACC7000                 *
.*        V10.14.06 03/10/2019  Peter Vela                TSK 0882312         *
.*                  Added NumberOfDays = Maximum Inlier Days  validation in   *
.*                  WSVB0000                                                  *
.*        V10.14.05 30/09/2019  Peter Vela                TSK 0882407         *
.*                  Changed Maximum Inlier Days validation in WSVB0000        *
.*        V10.14.04 05/09/2019  Peter Vela                TSK 0876535         *
.*                  Fixed Maximum Inlier Days validation in WSVB0000          *
.*        V10.14.03 28/08/2019  Peter Vela                TSK 0876535         *
.*                  Mods to NumberOfDays (SVBSEG04) to include                *
.*                  leave days.                                               *
.*        V10.14.02 12/06/2019  Peter Vela                TSK 0876233         *
.*                  Added DRG Version 10 to WDMG1000                          *
.*        V10.14.01 14/05/2019  Nicole Torrisi            TSK 0871696         *
.*                  Mods to output blank PatientAdmissionWeight instead of    *
.*                  outputting "0000" when not required                       *
.******************************************************************************
.*        V10.13.07 10/01/2019  Steve Armstrong           TSK 0863318         *
.*                  Mods to ensure consecutive ME or AM records consistently  *
.*                  send a CMBS code once the first CMBS item code has been   *
.*                  sent.                                                     *
.*        V10.13.06 08/01/2019  Steve Armstrong           TSK 0858467         *
.*                  Mods to revert back to calculate MV charges based on      *
.*                  TNODAYS, but where TNODAYS is zero (daycase), then treat  *
.*                  as a single day. (original change made for Task: 0317714) *
.*                  Also changed the ACC/CCG tempfile to record MV            *
.*                  accommodation records via a new field (ACDCCG21) to       *
.*                  allow processing of additional MV charges (via AMVC0000). *
.*        V10.13.05 18/12/2018  Steve Armstrong           TSK 0868079         *
.*                  Further changes to setting of PatientAdmissionWeight      *
.*                  (PATSEG02) to record an admission weight > 9000 as 0001.  *
.*        V10.13.04 03/09/2018  Steve Armstrong           TSK 0859606         *
.*                  Further changes to setting of PatientAdmissionWeight      *
.*                  (PATSEG02) to have a maximum value of 9000 grams.         *
.*        V10.13.03 27/08/2018  Steve Armstrong           TSK 0862366         *
.*                  Changes to WTFR0000 & SDTR0000 to send a TFR segment      *
.*                  where DischargeTypeCode (EPDSEG09) is "01", "02", "03" or *
.*                  "04", but to only make FacilityId mandatory for "01" and  *
.*                  "03".                                                     *
.*        V10.13.02 27/08/2018  Steve Armstrong           TSK 0859606         *
.*                  Fixed setting of PatientAdmissionWeight (PATSEG02) to     *
.*                  have a maximum value of 9000 grams.                       *
.*        V10.13.01 24/08/2018  Steve Armstrong           TSK 0858731         *
.*                  Fixed setting of ACD/CCG ServiceCodeTypeCode to "M" for   *
.*                  CMBS items with an Eclipse Equivalent value.              *
.******************************************************************************
.*        V10.12.01 29/03/2018  Steve Armstrong           TSK 0847355         *
.*                  Fixed sending of TFR segment to match Eclipse Working     *
.*                  Group rules.                                              *
.******************************************************************************
.*        V10.11.06 17/10/2017  Thanh T.                  TSK 0845990         *
.*                  Mods for extracting claim when the patient's gender is    *
.*                  Other.                                                    * 
.*        V10.11.05 09/10/2017  Steve Armstrong           TSK 0845775         *
.*                  Mods for Facility ID (Provider Number - TFRSEG01)         *
.*                  to be mandatory only where Transfer FacilityId (TFRSEG05) *
.*                  is "A" or DischargeTypeCode (EPDSEG09) is "01" or "03".   *
.*        V10.11.04 25/09/2017  Steve Armstrong           TSK 0845865         *
.*                  Mods to check if Health Fund is sending MOR segment       *
.*        V10.11.03 08/09/2017  Ebon Clements             TSK 0818097         *
.*                  Added excluded newborn functionality -  EXNB0000          *
.*        V10.11.02 10/08/2017  Peter Vela                TSK 0837619         *
.*                  Added IHC Adjustment functionality                        *
.*                  Added Adjustment to PreviousClaimCode                     *
.*                  Added PreviousTransactionID                               *
.*        V10.11.01 24/07/2017  Peter Vela                TSK 0837619         *
.*                  Added extraction for PTMCEHCP in MIGSEG03 in GEEQ9000     *
.*                  Added extraction for PTCMEHCP in SVBSEG05 in GCEQ9000     *
.******************************************************************************
.*        V10.10.04 21/04/2017  Don Nguyen                TSK 0833456         *
.*                  Modified LACC0000 to default blank for                    *
.*                  CriticalCareLevelCode (ACDCCG05).                         *
.*                  Only use the ICULEVEL value for CriticalCareLevelCode if  *
.*                  ICU or CCU.                                               *
.*                  21/04/2017  Don Nguyen                TSK 0832164         *
.*                  Fixed I * P crash (update of pmsectaf); Added branch EXIT *
.*                  statement after our call to WCID0000 in WRIT0000.         *
.*        V10.10.03 23/03/2017  Steve Armstrong           TSK 0835185         *
.*                  Fixed to only add prefix (PTEDOSET) in front of all       *
.*                  diagnosis codes only where Eclipse Server Adaptor is      *
.*                  Service Pack 1                                            *
.*        V10.10.02 17/03/2017  Richa Phogat   TSK 0832066                    *
.*                  Changed DVA Card Number collected from PMCDCNUM.PMSCCDFD  * 
.*                  instead of PREPAT.PATMA1FD                                *
.*        V10.10.01 15/03/2017  Steve Armstrong           TSK 0835185         *
.*                  Mods to add prefix (PTEDOSET) in front of all diagnosis   *
.*                  codes.                                                    *
.******************************************************************************
.*        V10.09.02 15/02/2017  Peter Vela                TSK 0833456         *
.*                  Don't set CriticalCareLevel if HDU (CCG.01)               *
.*        V10.09.01 05/01/2017  Steve Armstrong           TSK 0317714         *
.*                  Mods to increment ACSCOUNT where a miscellaneous charge   *
.*                  patdtraf record is found for mechanical ventilation       *
.*                  (WACS2100).                                               *
.*                  Also fixed LACC3500 where MV charge was using NODAYS      *
.*                  (Accommodation days) which are not necessarily the same   *
.*                  as the miscellaneous charge quantity for MV.  This has now*
.*                  been changed to use SAVTSERV.                             *
.******************************************************************************
.*        V10.08.04 02/11/2016  Steve Armstrong           TSK 0287747         *
.*                  Mods to use CTHETR parameter to determine if theatre      *
.*                  system is in use and if not, to load AnaestheticTypeCode  *
.*                  (PSGSEG01) from pmsvx1af.pmvxudf15.                       *
.*        V10.08.03 26/08/2016  Don Nguyen                TSK 0312570         *
.*                  Recompiled for GETDRG (GTDRG000)                          *
.*                  Added PMSEDGFD/IO and GETEFDRG                            *
.*        V10.08.02 15/07/2016  Steve Armstrong           TSK 0819111         *
.*                  Mods to populate PSG ChargeRaisedCde (PSGSEG03) with      *
.*                  "C" when ChargeAmount is zero and TotalChargeAmount is    *
.*                  non-zero.                                                 *
.*        V10.08.01 12/05/2016  Steve Armstrong           TSK 0818875         *
.*                  Fixed validation range for Associated No. when populating *
.*                  EPDSEG11 (EpisodeTypeCode). Valid values are 1 - 16       *
.*                  instead of 1 -14.                                         *
.******************************************************************************
.*        V10.07.02 04/12/2015  Peter Vela                CAR 315830          *
.*                  Added DRG and CMBS mapping to GCEQ0000                    *
.*        V10.07.01 04/11/2015  Peter Vela                CAR 294157          *
.*                  Reset Palliative Care Days in PLOS0000                    *
.******************************************************************************
.*        V10.06.03 26/08/2015  Jeni Tan/Steve Armstrong  CAR 315167          *
.*                  Mods to check theatre unique id for ACD, CCG and PSG      *
.*                  records.                                                  *
.*        V10.06.02 25/08/2015  Peter Vela       CAR 320966                   *
.*                  Added new validations for invalid character in:           *
.*                  PatientAliasFamilyName                                    *
.*                  PatientAliasFirst                                         *
.*                  PatientFamilyName                                         *
.*                  PatientFirstName                                          *
.*                  PatientSecondInitial                                      *
.*        V10.06.01 23/06/2015  Peter Vela       CAR 318448                   *
.*                  Fixed admission weight edit                               *
.******************************************************************************
.*        V10.05.04 14/11/2014  Peter Vela       CAR 294157                   *
.*                  Added functionality for PTCNECUP -                        *
.*                  Using 2012 Eclipse Update                                 *
.*        V10.05.03 25/11/2014  Steve Armstrong  CAR 282328                   *
.*                  Mods to process Mechanical Ventilation charges as part of *
.*                  accommodation (ACD/CCG).                                  *
.*        V10.05.02 27/10/2014  Peter Vela    CAR 294157                      *
.*                  November 2012 Update                                      *
.*                  PATSEG02 - Collect PatientAdmissionWeight if < 365 days   *
.*                  old.                                                      *
.*                  DMGSEG03 - Principal Diagnosis increased to DIM 6         *
.*                  ADDSEG01 to ADDSEG49 - Additional Diagnosis fields        *
.*                  increased to DIM 6.                                       * 
.*                  CCGSEG13 - Added CCU Hours to CCG segment                 *
.*                  EPDSEG21 - Added Psychiatric Care Days to EPD segment     *
.*                  EPDSEG22 - Added Palliative Care Days to EPD Segment      *
.*                  EPDSEG23 - Added Number Of Qualified Days  For New Borns  *
.*                  Added Non-DRG Morbidity Segment                           *
.*                  Added Admission FIM Scores                                *
.*                  Added Discharge FIM Scores                                *
.*                  Modified REM segment - WREM0000                           *
.*        V10.05.01 18/09/2014  Davin         CAR 304204                      *
.*                  Recompiled for GETDRG - get drg vers based on disch date  *
.******************************************************************************
.*        V10.04.01 14/03/2014  Peter Vela       CAR 245505                   *
.*                  Removed MIG.02 Misc Charge Code more than 5 char in length*
.******************************************************************************
.*        V10.03.16 25/11/2013  Steve Armstrong  CAR 294496                   *
.*                  Mods to handle Assoc # values 15 & 16 for Cat CC          *
.*                  (EPDSEG11).                                               *
.*        V10.03.15 14/11/2013  Peter Vela     CAR 280949                     *
.*                  Commented out admission date / leave day validation       *
.*                  LEAV0000                                                  *
.*        V10.03.14 07/08/2013  Steve Armstrong  CAR 289909                   *
.*                  Mods to use PTCMCNID for contract code and also modified  *
.*                  NFND0000 so that it looks for an eclipse equivalent on    *
.*                  a matching patcmxaf record using the full key, then blank *
.*                  health fund, then default claim code.                     *
.*                  25/07/2013  Steve Armstrong  CAR 289233                   *
.*                  Removed check for "PY" in ttype when looping through      *
.*                  patdtraf looking for accommodation records for ACS        *
.*                  segment.                                                  *
.*        V10.03.13 22/07/2013  Peter Vela       CAR 288938                   *
.*                  Added assignment to ICDRDDTE @ GICD0000                   *
.*        V10.03.12 18/06/2013  Steve Armstrong  CAR 287000                   *
.*                  Fixed setting of ACSSEG05 (Number of Days) to get set to  *
.*                  "1" where its a sameday patient.                          *
.*        V10.03.11 08/02/2013  J.Tan          CAR 275004                     *
.*                  Fixed NFND000 to check for blank Eclipse Eq/Type of Serv. *
.*        V10.03.10 05/02/2013  J.Tan          CAR 275004                     *
.*                  Fixed ACD/CCG records for Items with Eclipse Equiv.mapping*
.*        V10.03.09 26/02/2013  J.Tan          CAR 281477                     *
.*                  Mods searching for Eclipse Equivalent/Type of Service     *
.*        V10.03.08 31/12/2012 Patrick Adair   CAR 261630                     *
.*                  Removed port number from temp file name                   *
.*        V10.03.07 05/09/2012  J.Tan          CAR 267784                     *
.*                  Mods Checking for TCINDC19 Claim Code                     *
.*        V10.03.06 18/06/2012  Steve Armstrong  CAR 244246                   *
.*                  Mods to ServiceCode (SVBSEG05) and ServiceCodeTypeCode    *
.*                  (SVBSEG06) to handle Eclipse Equivalent for casemix       *
.*                  invoices.  Also changed setting of ServiceCode and        *
.*                  ServiceCodeTypeCode for accommodation segments to be the  *
.*                  same as that for the SVB segment equivalent fields where  *
.*                  the accommodation period coincides with the SVB period.   *
.*                  Removed unused local variables and constants.             *
.*        V10.03.05 15/06/2012  Steve Armstrong  CAR 263714                   *
.*                  Mods to CriticalCareLevelCode (CCGSEG04) to set this      *
.*                  field if Indicator 9 has a value of 0 - 7 instead of just *
.*                  1 - 2.                                                    *
.*        V10.03.04 30/05/2012  Steve Armstrong  CAR 262019                   *
.*                  Mods to NumberOfDays (ACDSEG05 & EPDSEG13) to include     *
.*                  leave days.                                               *
.*                  (ie, calulation is based on the difference between the    *
.*                  invoice from/to dates).                                   *
.*        V10.03.03 20/04/2012  Steve Armstrong  CAR 247683                   *
.*                  Mods to use PTEDTYPE instead of PTEDCODE when identifying *
.*                  morphology codes.                                         *
.*        V10.03.02 18/04/2012  Steve Armstrong  CAR 247683                   *
.*                  Mods to not send morphology codes in DMG segment.         *
.*        V10.03.01 25/11/2011  Steve Armstrong  CAR 252274                   *
.*                  Fixed issue in WACC0000 when checking change from         *
.*                  Surgical/Advanced Surgical/Obstetrics to Medical/Advanced *
.*                  Medical so that it ignores a change from ACD to CCG.      *
.******************************************************************************
.*        V10.02.04 12/10/2011  Steve Armstrong  CAR 252938                   *
.*                  Commented out the WREM0000 routine until the 10.01        *
.*                  billing changes have been completed.                      *
.*        V10.02.03 04/10/2011  Mike Laming      CAR 252337                   *
.*                  Mod to GEEQ100 to correct key length of PATMCHRD KEY29    *
.*        V10.02.02 29/04/2011  Steve Armstrong  CAR 240644                   *
.*                  Mods to populate payment model (CIDSEG08) with "EPM" if   *
.*                  HF is set up for billing mechanical ventilation.          *
.*        V10.02.01 28/03/2011  Mike Laming   CAR 240107                      *
.*                  Mods to PATECDaf & PATECOaf variables & Keys - file change*
.******************************************************************************
.*        V10.01.08 23/03/2011  Steve Armstrong  CAR 240129                   *
.*                  Mods to read pmspx2af when dealing with baby record in    *
.*                  ANB segment.                                              *
.*        V10.01.07 23/02/2011  Steve Armstrong  CAR 238478                   *
.*                  Mods to populate Patient Classification in EPD segment    *
.*                  using last patdtraf accommodation record for discharged   *
.*                  patients.                                                 *
.*        V10.01.06 11/02/2012  J.Tan            CAR 233050                   *
.*                  Removed effective dates from casemix funding              *
.*        V10.01.05 07/01/2011  Mike Laming      CAR 205376                   *
.*                  Remove warning message SVB.01 at WSVB5500                 *
.*        V10.01.04 06/01/2011  Jill Parkinson   CAR 233088                   *
.*                  Changed to use PMVXFNDM instead of AFNDMM                 *
.*        V10.01.03 21/12/2010  Davin            CAR 236045                   *
.*                  Add one to array counter (lstcount) if array limit        *
.*                  reached (in wlod0000)                                     *
.*        V10.01.02 20/12/2010  Mike Laming   CAR 233046                      *
.*                  Mods to Misc.Charges PATMCHFD - Key change, logic changes *
.*        V10.01.01 23/11/2010  Steve Armstrong  CAR 234225                   *
.*                  Mods to CCG.02 error - SAVEIND6 not being set correctly.  *
.*                  12/11/2010  Steve Armstrong  CAR 233227                   *
.*                  Re-added REM segment using new Eclipse specific comments  *
.*                  (vismdtaf & vismtxaf).                                    *
.******************************************************************************
.*        V10.00.16 21/10/2010  Steve Armstrong  CAR 232187                   *
.*                  Mods to fix Mechanical Ventilation hours since change     *
.*                  from 4-digit number to 5-digit number on paticuaf.        *
.*        V10.00.15 19/10/2010  Steve Armstrong  CAR 231068                   *
.*                  Further restructuring of LACC0000 to determine if         *
.*                  accommodation record is critical care or not.             *
.*        V10.00.14 04/10/2010  Steve Armstrong  CAR 231068                   *
.*                  Merged code for processing non-critical care              *
.*                  accommodation records (ACD) and critical care             *
.*                  accommodation records (CCG) into a single routine so that *
.*                  all accommodation records can be processed in date        *
.*                  sequence.                                                 *
.*                  Changes for CriticalCareTypeCode to use a TCINDC9 value   *
.*                  of "0" for telemetry instead of "8".  Also fixed CICU0000 *
.*                  routine to include the new telemetry value in its logic.  *
.*        V10.00.13 23/09/2010  Steve Armstrong  CAR 230585                   *
.*                  Mods in WACC0000 routine to process CCG and ACD records   *
.*                  together by date looking for a change from                *
.*                  Medical/Advanced Medical to Surgical/Advanced Surgical,   *
.*                  instead of checking all ACD records first, then all CCG   *
.*                  records.  Added ACCTEMP4 index to achieve this.           *
.*                  Also added check when writing ACD/CCG records to use the  *
.*                  previous accommodation service code/type if not populated *
.*                  for the current accommodation record.                     *
.*        V10.00.12 14/09/2010  Steve Armstrong  CAR 230082                   *
.*                  Added check on blank TheatreBand Code (PSGSEG08/MSGSEG05) *
.*                  Also fixed read on oprdetaf to use index 3 instead of     *
.*                  index 1.                                                  *
.*        V10.00.11 13/09/2010  Steve Armstrong  CAR 230082                   *
.*                  Added check on PTITLWRD in WMSG0000 to be same as check   *
.*                  in WPSG0000.                                              *
.*        V10.00.10 02/09/2010  Steve Armstrong  CAR 228299                   *
.*                - Mods to use new PTITLWRD field in determing Labour Ward   *
.*                  charges.                                                  *
.*                - Also commented out Mech. Ventilation code until a         *
.*                  final solution is determined for these charges.  An       *
.*                  error message has been added to indicate that all mech.   *
.*                  ventilation related claims should be processed manually.  *
.*                - Mods to treat CCG records the same as for ACD records in  *
.*                  terms of Medical/Advanced Medical records which precede   *
.*                  Surgical/Advanced Surgical/Obstetrics records being sent  *
.*                  with ICD service code and type.                           *
.*                - Mods to make sure that all surgical, advanced surgical    *
.*                  and obstetric accommodation records for non-sameday       *
.*                  patients, have a CMBS code where they are preceded by a   *
.*                  similar type accommodation record.                        *
.*        V10.00.09 24/08/2010  Steve Armstrong  CAR 228913                   *
.*                  Added OPEN on OPRDETA1                                    *
.*        V10.00.08 23/08/2010  Steve Armstrong  CAR 228847                   *
.*                  Recompiled for changes to PATIN1IO                        *
.*        V10.00.07 20/08/2010  Steve Armstrong  CAR 228300                   *
.*                  Mods for processing miscellaneous charge (MIG) records to *
.*                  ignore patdtraf records where patdtraf.ptdtepsd is set    *
.*                  to "1", as these are mechanical ventilation records and   *
.*                  are processed as part of accommodation (ACD/CCG) segments.*
.*                  16/08/2010  Steve Armstrong  CAR 228299                   *
.*                  Mods to check theatre bookings for PSG/MSG records to     *
.*                  see if booking status is cancelled.  If it is, then       *
.*                  treat as labour ward (TheatreBandCode field).  Also       *
.*                  added TMPUNQID to the temp file for MSG charges.          *
.*                  16/08/2010  Steve Armstrong  CAR 228308                   *
.*                  Mods to pad out program codes to 11 characters.           *
.*        V10.00.06 12/08/2010  Steve Armstrong  CAR 225413                   *
.*                  Mods to check if theatre items are linked to a theatre    *
.*                  booking (for PSG/MSG) in order to determine if they are   *
.*                  labour ward related items or not.                         *
.*                  09/08/2010  Steve Armstrong  CAR 227608                   *
.*                  Mods to send ICD code in CCG segment instead of           *
.*                  CMBS code where patient has been admitted as a Medical    *
.*                  patient and subsequently changes to a Surgical patient    *
.*                  after surgery.  The Medical records get sent with an ICD  *
.*                  code while the subsequent Surgical records get sent with  *
.*                  a CMBS code.  Same change as done for ACD segment in CAR  *
.*                  199267.                                                   *
.*                  Also made mods to validate CMBS items are the same date   *
.*                  as the start date for the ACD/CCG segment.                *
.*                  20/07/2010  Steve Armstrong  CAR 219471                   *
.*                  Mods for mechanical ventilation for EPM agreements        *
.*                  22/06/2010  Steve Armstrong  CAR 206701                   *
.*                  Mods to handle theatre miscellaneous charges (for PSG &   *
.*                  MSG).                                                     *
.*                  Mods for additional Eclipse miscellaneous charge types    *
.*                  based on changes from the Eclipse Working Group.          *
.*        V10.00.05 06/07/2010  Jill Parkinson CAR 225495                     *
.*                  Fixed paticuaf field lengths                              *
.*        V10.00.04 07/04/2010  Steve Armstrong  CAR 219231                   *
.*                  Mods to set NHOSDAYC to "1" in INIT0000 so that LOS for   *
.*                  sameday patients will always be returned as 1 day instead *
.*                  of zero days, when calling NHOSPDAY.                      *
.*        V10.00.03 30/04/2010  J.Tan     CAR 220887                          *
.*                  Mods checking for Active/Inactive of Misc.charge          *
.*        V10.00.02 14/04/2010  Steve Armstrong  CAR 218544                   *
.*                  Mods to use pmsdvaaf instead of Cat A HDP Eq. for DVA     *
.*                  accommodation service.                                    *
.*                  Also removed code to prefix DVA accommodation service     *
.*                  codes starting with "X", with an "H", as the "H" has been *
.*                  added as part of F00PMDVA & FX211370.                     *
.*                  Mods to ACD.09 error message to reflect use of pmsdvaaf.  *
.*                  07/04/2010  Steve Armstrong  CAR 219433                   *
.*                  Mods to CCG.02 error message to reflect use of pmsdvaaf   *
.*                  31/03/2010  Steve Armstrong  CAR 219213                   *
.*                  Mods to PatientFundUPI (PATSEG09) to send spaces if       *
.*                  not entered and to also validate that any input is        *
.*                  numeric.                                                  *
.*                  30/03/2010  Steve Armstrong  CAR 219024                   *
.*                  Added code for CAR 218405 for the CCG segment where       *
.*                  there is a private room add-on and an ACD record is       *
.*                  created from the CCG.                                     *
.*                  Also fixed re-setting of ACDSEG09 to only occur for same  *
.*                  day.                                                      *
.*        V10.00.01 22/03/2010  Steve Armstrong  CAR 218405                   *
.*                  Mods to set ACD PatientClassificationCode to "D1" for     *
.*                  sameday patient where EPD PatientClassification is "PS"   *
.*                  or "RE".                                                  *
.******************************************************************************
.*        V9.12.30  05/03/2010  Steve Armstrong  CAR 217615                   *
.*                  Mods to use standard logic to determine                   *
.*                  TheatreBandingCode (PSGSEG08/MSGSEG05) rather than using  *
.*                  associated number from Cat CL.                            *
.*        V9.12.29  01/03/2010  Steve Armstrong  CAR 212096                   *
.*                  Mods for Unplanned Theatre visit (Cat KB - EPDSEG20) to   *
.*                  allow HDP Equiv. of "9", but send it as a "2".            *
.*        V9.12.28  18/02/2010  Steve Armstrong  CAR 216482                   *
.*                  Mods to palliative care setting (EPDSEG15) to use Cat. CC *
.*                  in addition to Cat. KG. to bring it in line with INP91.   *
.*        V9.12.27  16/02/2010  Steve Armstrong  CAR 206845                   *
.*                  Mods to delete zero $ record from temp file as well as    *
.*                  pmsectaf.                                                 *
.*        V9.12.26  05/12/2010  Steve Armstrong  CAR 215620                   *
.*                  Fixed setting of CCG from and to date to ddmmccyy format  *
.*        V9.12.25  28/01/2010  Steve Armstrong  CAR 214864                   *
.*                  Mods to fix check on OVRCD after RATEMP3 (was looking     *
.*                  for OVRCD = 1 instead of 0).                              *
.*                  25/01/2010  Steve Armstrong  CAR 214860                   *
.*                  Mods to set default claim code whether single hospital    *
.*                  or multi campus.                                          *
.*        V9.12.24  19/01/2010  Peter Vela       CAR 214039                   *
.*                  Removed append of 'N' to MIGSEG03 (service code)          *
.*        V9.12.23  24/12/2009  Steve Armstrong  CAR 213110                   *
.*                  Mods to treat Medical/Obstetrics cases the same as        *
.*                  Medical/Surgical cases when determining the service code  *
.*                  for ACD segments.                                         *
.*        V9.12.22  26/11/2009  Peter Vela       CAR 199097                   *
.*                  Changed read of patdo1af to pmshcpaf                      *
.*                  19/11/2009  Steve Armstrong  CAR 210559                   *
.*                  Mods to SVB segment for population of ToDate.  Where the  *
.*                  number of days in hospital is less than the maximum       *
.*                  inlier days, the number of days should still be used, but *
.*                  the ToDate should remain as the discharge date (or the    *
.*                  current date if the patient is still admitted), rather    *
.*                  than recalculating it based on the number of days (which  *
.*                  excludes leave days).                                     *
.*                  18/11/2009  Steve Armstrong  CAR 199267                   *
.*                  Also mods to send ICD code in ACD segment instead of      *
.*                  CMBS code where patient has been admitted as a Medical    *
.*                  patient and subsequently changes to a Surgical patient    *
.*                  after surgery.  The Medical records get sent with an ICD  *
.*                  code while the subsequent Surgical records get sent with  *
.*                  a CMBS code.                                              *
.*                  18/11/2009  Steve Armstrong  CAR 211370                   *
.*                  Also mods to source DVA Service Code for accommodation    *
.*                  from pmsdvaaf for Cat BT only.                            *
.*                  03/12/2009  Steve Armstrong  CAR 210336                   *
.*                  Mods to not append "N" at the end of Rehab and Psych      *
.*                  program codes (now part of maintenance set up).           *
.*                  18/11/2009  Steve Armstrong  CAR 206737                   *
.*                  Mods to critical care accommodation records where         *
.*                  there is a private room add on, to record the standard    *
.*                  charge in the ACD segment instead of in the CCG segment.  *
.*                  The private room add on charge remains in the CCG segment.*
.*                  The changes include using a temp file to capture all ACD  *
.*                  and CCG data before writing them to the extract file.     *
.*        V9.12.21  17/11/2009  Steve Armstrong  CAR 210257                   *
.*                  Mods to remove spaces from Health Fund Membership no.     *
.*        V9.12.20  17/11/2009  Steve Armstrong  CAR 210254                   *
.*                  Added validation that Critical Care level code is not     *
.*                  blank for ICU or CCU patients (CCGSEG04)                  *
.*        V9.12.19  17/11/2009  Steve Armstrong  CAR 208616                   *
.*                  Mods to not send LPD records where the patient went on    *
.*                  leave and returned the same day.                          *
.*        V9.12.18  28/09/2009  Steve Armstrong  CAR 206954                   *
.*                  Mods to read parameter PTCNDSCI.                          *
.*        V9.12.17  24/09/2009  Steve Armstrong  CAR 206703                   *
.*                  Mods to send the full Eclipse ProgramNum (ACDSEG10)       *
.*                  of 11 characters.                                         *
.*        V9.12.16  23/09/2009  Steve Armstrong  CAR 206703                   *
.*                  Mods to send the full 8 character program code            *
.*                  (ACDSEG10), not just the last 4 characters.               *
.*        V9.12.15  17/09/2009  Steve Armstrong  CAR 206402                   *
.*                  Mods to ignore a leading zero on the patient's Medicare   *
.*                  Reference Number.                                         *
.*                  Also, mods to send "Other" as a service type code         *
.*                  Also mods to remove "-" from CMBS codes as well as alpha  *
.*                  characters.                                               *
.*                  08/09/2009  J.Tan            CAR 205303                   *
.*                  Added Casemix Contract ID to pathlfaf file                *
.*        V9.12.14  08/09/2009  Steve Armstrong  CAR 205534                   *
.*                  Mods to cater for user defined CMBS codes with alpha      *
.*                  characters in ACD, CCG, PSG and MSG segments.             *
.*        V9.12.13  24/08/2009  Peter Vela       CAR 204336                   *
.*                  Check for cancelled theatre details record (oprdetaf)     *
.*                  If cancelled then read next and extract                   *
.*                  AnaestheticTypeCode                                       *
.*        V9.12.12  17/08/2009  Peter Vela       CAR 203723                   *
.*                  Added validation for PTFXECLP.patfx1af Eclipse Participant*
.*                  Health Fund Extension file.                               *
.*        V9.12.11  11/08/2009  Peter Vela       CAR 203604                   *
.*                  Packed spaces in KEY4 variable for Admission Weight       *
.*                  after CALCAGE                                             *
.*        V9.12.10  30/07/2009  Peter Vela       CAR 202653                   *
.*                  Assigned 1 to NHOSDAYC before call to NHOSPDAY (WSVB0000) *
.*        V9.12.09  30/07/2009  Peter Vela       CAR 202644                   *
.*                  Changed GICD0000 to check all ICD10 editions              *
.*        V9.12.08  24/07/2009  Peter Vela       CAR 201596                   *
.*                  Squeeze DVA number to get rid of the spaces before        *
.*                  extracting                                                *
.*        V9.12.07  09/07/2009  Peter Vela       CAR 200944                   *
.*                  Commented out validation for nursing home when checking   *
.*                  for transfer destination (Ask Steve about this when he    *
.*                  get back from leave) WTFR9000                             *
.*        V9.12.06  03/06/2009  Steve Armstrong  CAR 198224                   *
.*                  Mods to cater for left or right justified medicare ref. # *
.*        V9.12.05  03/06/2009  Steve Armstrong  CAR 198163                   *
.*                  Mods to always set preceding ACD BedLevelCode to          *
.*                  "Shared" when there is a subsequent ACD being sent        *
.*                  for an add-on.                                            *
.*        V9.12.04  01/06/2009  Steve Armstrong  CAR 192640                   *
.*                  Fixed setting of leave days in ACS & ACD segment.         *
.*        V9.12.03  27/05/2009  Steve Armstrong  CAR 197636                   *
.*                  Fixed segment id for add-on record to be CCG instead of   *
.*                  ACD.                                                      *
.*        V9.12.02  19/05/2009  Steve Armstrong  CAR 195565                   *
.*                  Mods to send two ACD segments where there is an add on    *
.*                  associated with a patdtraf accommodation charge           *
.*                  (one ACD for the standard accommodation charge and one    *
.*                  for the add on charge).                                   *
.*                  Also mods to send the contract code if this is a per diem *
.*                  invoice for a short stay outlier casemix patient.         *
.*        V9.12.01  14/05/2009  Steve Armstrong  CAR 196427                   *
.*                  Added check on length of DVA number.                      *
.******************************************************************************
.*        V9.11.05  30/04/2009  Steve Armstrong  CAR 195821                   *
.*                  Mods to set saved admission type according to whether     *
.*                  Category A or Category BT is being used.                  *
.*                  Also removed setting of KEY8 for RDITEM in WSVB0000 as it *
.*                  should be KEY9 anyway, and this key is already set.       *
.*        V9.11.04  27/04/2009  Steve Armstrong  CAR 195528                   *
.*                  Mods to allow for SVB ServiceCodeTypeCode value of "Other"*
.*        V9.11.03  01/04/2009  Steve Armstrong  CAR 193606                   *
.*                  Completed functionality for Multi-hospital.               *
.*                  Also fixed GST for Lumspum in SVB segment to use PTDTGSTL *
.*                  instead of PTDTGSTM.                                      *
.*                  Added check for DVA concession card.                      *
.*        V9.11.02  11/02/2009  Steve Armstrong  CAR 183976                   *
.*                  Fixed MentalHealthLegalStatusCode to use Cat LS instead   *
.*                  of Cat CC or D1-D5.                                       *
.*                  Also, mods to ignore certificates that have types not     *
.*                  supported by Eclipse.                                     *
.*                  Also fixed loading of PTMXMCCD as it is left justified    *
.*                  in V9 as compared to right justified in V6.               *
.*                  Also fixed ReadmissionCode (EPDSEG17) so that it defaults *
.*                  to "8" if pmvxurea is blank.                              *
.*                  Mods to add GST to ACD $ total.                           *
.*                  Mods to ignore invoices which have a "Credit All" against *
.*                  them.                                                     *
.*        V9.11.01  02/02/2009  Steve Armstrong  CAR 188915                   *
.*                  Fixed loading of second initial (PATSEG14).               *
.*                  Mods to load default parameter contact details if         *
.*                  health fund/insurance co. contact details are blank.      *
.*                  (CIDSEG11-13)                                             *
.*        V9.11.00  09/12/2008  Steve Armstrong  CAR 183976                   *
.*                  Ported from V6.16.21 and modified for webPAS.             *
.******************************************************************************

          INC       STD001FD
.
          INC       IBACONFD/INC
          INC       IBAGEDFD/INC
          INC       IBASEQFD/INC                 * Sequential Numbers File
          INC       OPRDEAFD/INC            * Operation detail file
          INC       MEHLEGFD/INC            * Lagal Status
          INC       PATCALAG/INC            * Calculate age include
          INC       PATCERFD/INC            * certificates
          INC       PATCFAFD/INC
          INC       PATCLCFD/INC            * certificate line comments
          INC       PATCMPFD/INC            * Complex mapping file
          INC       PATCODFD/INC            * Codes file
          INC       PATCONFD/INC            * Control file
          INC       PATCHCFD/INC            * Code changes file
          INC       PATCMXFD/INC            * Casemix Funding file
          INC       PATCRTFD/INC            * Certificate file
          INC       PMSAPGFD/INC
          INC       PMSUPGFD/INC
          INC       PMSCIDFD/INC            * Contract id
          INC       PATDO1FD/INC            * Doctor file
          INC       PATDSCFD/INC            * Disch file
          INC       PATDTRFD/INC            * DTR file
          INC       PATDGWFD/INC            * DTR file
          INC       PATECDFD/INC            * Patient episode disease file
          INC       PATECOFD/INC            * Patient episode operation file
          INC       PATFIMFD/INC            * Patient FIM Scores
          INC       PATFN1FD/INC            * Health fund file
          INC       PATFN2FD/INC            * Health fund extension 1
          INC       PATFX1FD/INC            * Health fund extension 2
          INC       PATHDFFD/INC            * Daily fee for inliers/high outlier
          INC       PATHGPFD/INC            * Health fund group file
          INC       PATHSPFD/INC            * Hospital file
          INC       PATICDFD/INC            * ICD disease file
          INC       PATICOFD/INC            * ICD operation file
          INC       PATICUFD/INC            * ICU file
          INC       PATINVFD/INC            * Invoice file
          INC       PATIN1FD/INC            * Insurance file
          INC       PATITMFD/INC            * Item file
          INC       PATLINFD/INC            * U/R Link file
          INC       PATMA1FD/INC            * Master file
          INC       PATMCHFD/INC            * Miscellaneous charges file
          INC       PATMI1FD/INC            * Admin file
          INC       PATMMBFD/INC            * Patient MBS file
          INC       PATPARFD/INC            * Eclipse Participants
          INC       PATPCPFD/INC            * Eclipse Participant Capabilities
          INC       PATPGRFD/INC            * Patient grouper file
          INC       PATTRNFD/INC            * Transfer file
          INC       PATVISFD/INC
          INC       PATVADFD/INC            * Transfer source file
          INC       PATDADFD/INC            * Patient transfer destination file
          INC       PATWC1FD/INC
          INC       PATWMAFD/INC            * TAC file
          INC       PATWVEFD/INC            * DVA file
          INC       PMSCCDFD/INC
          INC       PMSDVAFD/INC
          INC       PMSEBHFD/INC            * Eclipse batch header file
          INC       PMSECAFD/INC            * Eclipse Claims Audit/History Table
          INC       PMSECTFD/INC            * Eclipse Claims Table
          INC       PMSHCPFD/INC
          INC       PMSPX2FD/INC
          INC       PMSTSPFD/INC            * transport data
          INC       PMSVX1FD/INC
          INC       TFILEVAR/INC                 * Generate Temp File Name
          INC       VISMDTFD/INC
          INC       VISMTXFD/INC
          INC       WEBSECFD/INC
          INC       WEBERRFD/INC                 * Web Server Error Logging
          INC       PMSEDGFD/INC       * Effective DRG Dates
.
EXTFILE1  FILE      ASCII,FIXED=256
EXTRFILE  FILE      ASCII,FIXED=53          * file length is irrelevant as we
.                                              only need to know if it exists
.
.         Temporary File Definitions
.         --------------------------
.
.         Filename : pms04axx.dat          (xx = port id)
.
LSTTEMP1  IFILE SQL, FIXED=46, KEY="U1-8,9-16"
.
.NAME     TYPE    LENGTH     PHYSICAL     START     DESCRIPTION
.----     ----    ------     --------     -----     -----------
LISTADMN  DIM       8           8           1       Admission Number
LISTINVN  DIM       8           8           9       Invoice Number
LISTURNO  DIM       8           8          17       U/R Number
LISTDATE  DIM       8           8          25       Invoice Date (ccyymmdd)
LISTAMNT  FORM      12.2        8          33       Outstanding Invoice Amount
LISTFLAG  FORM      1           2          41       Extract Flag
.                                                     0 = Extract
.                                                     1 = Don't extract
LISTHOSP  DIM       3           3          43       Hospital Code
.
.End of Record                             46
.
.         Temporary File Definition for Accommodation Data (ACD & CCG)
.         ------------------------------------------------------------
.
.         Filename : pms04cxx.dat          (xx = port id)
.
ACCTEMP3  IFILE SQL, FIXED=97, KEY="U1-1,26-33,3-3"
ACCTEMP4  IFILE SQL, FIXED=97, KEY="U26-33,3-3,1-1"
.
.NAME     TYPE    LENGTH  PHYSICAL  START  DESCRIPTION
.----     ----    ------  --------  -----  -----------
ACDCCG01  DIM       1        1        1    Record Type
.                                               A = ACD
.                                               C = CCG
ACDCCG02  DIM       1        1        2    BedBandCode (ACD only)
ACDCCG03  DIM       1        1        3    AddOnInd (ACD & CCG)
ACDCCG04  DIM       2        2        4    BedLevelCode (ACD Only)
ACDCCG05  DIM       1        1        6    CriticalCareLevelCode (CCG Only)
ACDCCG06  DIM       9        9        7    ChargeAmount (ACD & CCG)
ACDCCG07  DIM       1        1        16   ChargeRaisedCde (ACD & CCG)
ACDCCG08  DIM       9        9        17   DayRate (ACD & CCG)
ACDCCG09  DIM       8        8        26   FromDate (ACD & CCG) (ccyymmdd)
ACDCCG10  DIM       4        4        34   NumberOfDays (ACD & CCG)
ACDCCG11  DIM       2        2        38   PatientClassificationCode
ACDCCG12  DIM       11       11       40   ProgramNum (ACD Only)
ACDCCG13  DIM       11       11       51   ServiceCode (ACD & CCG)
ACDCCG14  DIM       1        1        62   ServiceCodeTypeCode (ACD &CCG)
ACDCCG15  DIM       8        8        63   ToDate (ACD & CCG) (ccyymmdd)
ACDCCG16  DIM       3        3        71   CriticalCareTypeCode (CCG Only)
ACDCCG17  DIM       4        4        74   ICUHrs (CCG Only)
ACDCCG18  DIM       11       11       78   ICD Code (for ACD/CCG
.                                                    Medical/Advanced Medical)
ACDCCG19  FORM      1        2        89   Day Type (from patdtraf.ptdtdtyp)
ACDCCG20  DIM       4        4        91   CCUHrs (CCG Only)
ACDCCG21  FORM      2        2        95   Mechanical Ventilation Record Flag
.                                           0 = No
.                                           1 = Yes
.End of Record                        97
.
.         Temporary File Definition for MSG Data
.         --------------------------------------
.
.         Filename : pms04bxx.dat          (xx = port id)
.
MSGTEMP2  IFILE SQL, FIXED=41, KEY="U1-5"
.
.NAME     TYPE    LENGTH     PHYSICAL     START     DESCRIPTION
.----     ----    ------     --------     -----     -----------
TMPSEQNO  DIM       5           5           1       Sequence Number
TMPITEMN  DIM       9           9           6       Theatre Item Number
TMPAMNT   FORM      12.2        8          15       Theatre Item Amount
TMPUNQID  DIM       10          10         23       Unique Theatre Id
TMPSDATE  DIM       8           8          33       Service Date
.
.End of Record                             41
.
.
.
. LOCAL VARIABLE DEFINITION
. -------------------------
ACCCOUNT  FORM      2                       * ACD record count
ACCTOTAL  FORM      12.2
ACSCOUNT  FORM      2                       * ACS accommodation record count
ACSTOTAL  FORM      12.2
ADMINO    DIM       8                       * Admin no
ADDONIND  DIM       1                       * add on indicator
ADDONAMT  DIM       9                       * add on amount
ADDONCHG  DIM       1                       * add on charge
ADDONRAT  DIM       9                       * add on rate
ADSOURCE  FORM      1                       * admission source flag
.                                                 0 =  admission source record
.                                                 1 = no admission source record
AFMARRAY  DIM       1[18]                   * Admission Fim Scores Array
.
BATCHNO   DIM       6
BATCHNUM  DIM       8
BJDAY     FORM      3                       * For CALCAGE
.
CNTRCEFR  FORM      1
CEFFDATE  DIM       8
CALDAYS   FORM      4                       * For NHOSPDAY
CALLPOSN  FORM      1
CCAREFLG  FORM      1                       * critical care flag
.                                              0 = non-critical care accomm flag
.                                              1 = critical care accomm flag
CDYSDAYS  FORM      6                       * For CALCDAYS
CDYSFDTE  DIM       8                       * For CALCDAYS
CDYSTDTE  DIM       8                       * For CALCDAYS
CDYSYEAR  FORM      2                       * For CALCDAYS
CERCOUNT  FORM      2
CERCOMNT  DIM       50[10]
CJDAY     FORM      3                       * For CALCAGE
CLAMCODE  DIM       3
CLAMDESC  DIM       20
CMDLINE   DIM       60
CODCNT    FORM      3
CODE      DIM       2                       * For PATCODKY
CODEOA    DIM       3                       * code from Cat OA
COUNTER   FORM      2
CURRDATE  DIM       8                       * Current date (ccyymmdd)
CURNTINV  FORM      3                       * Current invoice for an admission
.CONTRCID  DIM       6
CMCODE    DIM       9
CMBSCMIX  DIM       1
.
DATECALC  DATE      8
DATECALD  DIM       8
DDRGCODE  DIM       4
DFMARRAY  DIM       1[18]                   * Discharge Fim Scores Array
DMDCCODE  DIM       4
DIM2A     DIM       2
DIM3      DIM       3
DIM5      DIM       5
DIM6      DIM       6
DIM4      DIM       4
DIM7      DIM       7
DIM8      DIM       8
DIM8A     DIM       8
DIM8B     DIM       8
DIM9      DIM       9
DIM10     DIM       10
DIM11     DIM       11
DIM15     DIM       15
DIM20     DIM       20
DIM100    DIM       100
DIM500    DIM       500
DISARY    DIM       7[50]                   * Disease array
DRGVER    DIM       3
DSSOURCE  FORM      1                       * discharge destination flag
.                                                 0 = discharge dest. record
.                                                 1 = no discharge dest. record
.
ECLKEY3   DIM       3
ENDDTE8   DIM       8
ENDDATE   DIM       8
ENDTME    DIM       5                       * End time (hh:mm)
ERRCT     FORM      5                       * Error counter
ERRFLG    FORM      1                       * Error flag
ERRMSG    DIM       105                     * Error message
EXTFNAME  DIM       127                     * Extract file name
FILENAME  DIM       8
FIRSTFLG  FORM      1                       * first record flag
.                                                0 = no
.                                                1 = yes
FLAGDIM3  DIM       3
FORM3     FORM      3
FORM5     FORM      5
FORM6     FORM      6
FORM6A    FORM      6
FORM12P2  FORM      12.2
FORM8     FORM      8
FORM9     FORM      9
FORM9A    FORM      9
FORM9B    FORM      9
FORM9C    FORM      9
FOUNDLNK  FORM      1             * found U/R link flag
.                                     0 = link found (for unqualified baby)
.                                     1 = no link found ( for unqualified baby)
.                                     2 = sending qualified baby
FRM12P2A  FORM      12.2
FRM12P2B  FORM      12.2
FRMTDTTM  DIM       20
FROMDATE  DIM       8                       * From date for NHOSPDAY
.
HOSPCODE  DIM       3
.
ICULEVEL  DIM       1
INCLFLAG  FORM      1             * include flag
.                                    0 = include all
.                                    1 = exclude all
INDCATR9  DIM       1
INVAMTCT  FORM      12.2                    * Invoice amount
INVCOUNT  FORM      3                       * Total invoices for an admission
INVFRDTE  DIM       8                       * Invoice from date
INVNO     DIM       8                  
INVTODTE  DIM       8                       * Invoice to date
.
KEY1A     DIM       1
KEY2A     DIM       2
KEY15A    DIM       15
KEY21A    DIM       21
.
LEAVDATE  DIM       8
LEAVDAY   FORM      4
LEAVTOTL  FORM      4
LINCOUNT  FORM      3                       * total characters in line
LISTARRY  DIM       50[50]
LPDCOUNT  FORM      2                       * LPD record count
LSTCOUNT  FORM      2
.
LPDWRK01  DIM       8[99]
LPDWRK02  DIM       8[99]
LPDWRK03  DIM       4[99]
LPDWRKFR  DIM       8
LPDWRKTO  DIM       8
LPDWRKDY  DIM       4
LPDWRKCN  FORM      3
.
SVBTDAYS  FORM      4
MAXMDAYS  FORM      4
MSGCOUNT  FORM      5
MVCHARGE  FORM      12.2
MVENTFLG  FORM      1                       * MV flag
.                                             0 = mv charge not found
.                                             1 = mv charge found
MVTOTDAY  FORM      4                       * MV total days
.
NOINVDYS  DIM       4                       * No of invoice days
NBRDAYS   FORM      4                       * No of days in hospital
NUMBDAYS  FORM      4
.
OPRARY    DIM       7[50]                   * Operation array
.
PCCFORM6  FORM      6
PLVCARRY  DIM       1[22]                   * PLV character array
PLVNARRY  FORM      2[22]                   * PLV numeric array
PREVDATE  DIM       8                       * previous invoive date (ccyymmdd)
PREVINVN  DIM       8
PREVITEM  DIM       9
PROVARRY  DIM       1[8]                    * provider number character array
PRVNARRY  FORM      2[7]                    * provider number numeric array
PROVFLAG  FORM      1                       * provider flag
.                                                1 = Hospital Facility
.                                                2 = Admission Transfer Facility
.                                                3 = Discharge Transfer Facility
.                                                4 = Doctor Provider
PSAGETYP  DIM       6                       * age type description (CALCAGE)
PSAGECON  DIM       3                       * age converted value (CALCAGE)
PSGCOUNT  FORM      5
.
RECCNT    FORM      5
RETNDATE  DIM       8
.                                              0 = No
SAMDAYFL  FORM      1                       * Sameday flag
.                                              0 = not sameday
.                                              1 = sameday (adm date=disch date)
SKEY9     DIM       9
SAVEADMN  DIM       8
SAVETREF  DIM       8
SAVFDATE  DIM       8
SAVECODE  DIM       9
SAVASSC1  FORM      6                       * saved assoc # (Cat A)
SAVASSC2  FORM      6                       * saved assoc # (Cat CC)
SAVBTHN   FORM      8
SAVEDATE  DIM       8                       * saved theatre date (ddmmccyy)
SAVEDVAS  DIM       9                       * saved DVA Service Code
SAVEHOSP  DIM       3
SAVEICDC  DIM       11
SAVEIND6  DIM       1
SAVEIND9  DIM       1
SAVEITEM  DIM       9
SAVEUNIQ  DIM       10
SAVEPCCD  DIM       2                       * saved PatientClassificationCode
SAVESESS  DIM       2                       * saved theatre session
SAVINVDT  DIM       8                       * Saved invoice date (ccyymmdd)
SAVINVNO  DIM       8                       * Saved invoice no
SAVKEY22  DIM       22
SAVKEY35  DIM       35
SAVPCLAS  FORM      6                       * Saved PatientClassificationCode
SAVPRVBN  DIM       8                       * Save previous batch number
SAVPURNO  DIM       8
SAVSAMED  FORM      1                       * sameday status as number
SAVSCODE  DIM       11                      * Saved ServiceCode
SAVSTCOD  DIM       1                       * Saved ServiceCodeTypeCode
SAVTBAND  FORM      6                       * save theatre band
SAVTSERV  FORM      5                       * saved mech. vent. day total
SERVDATE  DIM       8
SKEY18    DIM       18
STATDESC  DIM       6
STRTTME   DIM       5                       * Start time (hh:mm)
SUBTOTAL  FORM      12.2
.
TEMPFIL1  DIM       8
TEMPFIL2  DIM       8                       * temporary MSG file
TEMPFIL3  DIM       8                       * temporary ACD/CCG file
THTRDATE  DIM       8                       * theatre date
TMPKEY    DIM       16[17]
TMPSTRNG  DIM       30
TODATE    DIM       8                       * To date for NHOSPDAY
TOTAMTCT  FORM      12.2                    * Total amount counter
.
VALDFLG   FORM      1                       * Validation flag
.
WARCT     FORM      5                       * Warning counter
WORKBABY  FORM      5
WORKPSYC  FORM      5                       * Psychiatric Care Days work var
WORKPLOS  FORM      4
WRDCOUNT  FORM      2                       * total characters in word
WRTCT     FORM      5                       * Write counter
.                                              1 = Yes
CFPAYCOD  DIM       3        * 3M Codefinder PAY Code
.
.
. PROGRAM CONSTANTS
. -----------------
ALPTOBLK  INIT      "- A B C D E F G H I J K L M N O P Q R S T U V W X Y Z "
ALPTOBL2  INIT      "' - A B C D E F G H I J K L M N O P Q R S T U V W X Y Z "
CATAND    INIT      "AND"
CATAM     INIT      "AM"
CATAS     INIT      "AS"
CATCCU    INIT      "CCU"
CATCR     INIT      "cr"
CATCT     INIT      "ct"
CATD      INIT      "D "
CATD1     INIT      "D1"
CATD2     INIT      "D2"
CATD3     INIT      "D3"
CATD4     INIT      "D4"
CATDD     INIT      "DD"
CATEC     INIT      "EC"
CATHDU    INIT      "HDU"
CATICU    INIT      "ICU"
CATME     INIT      "ME"
CATNCU    INIT      "NCU"
CATNH     INIT      "NH"
CATOB     INIT      "OB"
CATOT     INIT      "OT"
CATPCU    INIT      "PCU"
CATPS     INIT      "PS"
CATRE     INIT      "RE"
CATSCN    INIT      "SCN"
CATSU     INIT      "SU"
CATTEL    INIT      "TEL"
CATU1     INIT      "U1"
CATU2     INIT      "U2"
CATU3     INIT      "U3"
CATU4     INIT      "U4"
CATU5     INIT      "U5"
CATVI     INIT      "VI"
CATV2     INIT      "V2"
.
CERTTYPB  INIT      "B "
CERTTYPC  INIT      "C "
CERTYP3B  INIT      "3B"
CERTYPPS  INIT      "PS"
CERTYPRE  INIT      "RE"
CERTYPNE  INIT      "NE"
CERTYPCC  INIT      "CC"
CERTYPED  INIT      "ED"
CERTYPAC  INIT      "AC"
CERTYPHC  INIT      "HC"
CERTYPIC  INIT      "IC"
CERTYPWC  INIT      "WC"
CERTYPSU  INIT      "SU"
CERTYPEL  INIT      "EL"
CERTYPPE  INIT      "PE"
CERTYPOS  INIT      "OS"
CERTYPNS  INIT      "NS"
CERTYPSP  INIT      "SP"
CERTYPLY  INIT      "LY"
CERTYPDE  INIT      "DE"
CERTYPMU  INIT      "MU"
CERTYPDO  INIT      "DO"
CERTYPRD  INIT      "RD"
CERTYPAD  INIT      "AD"
CERTYPEX  INIT      "EX"
CERTYPEC  INIT      "EC"
CERTYPFL  INIT      "FL"
CERTYPMB  INIT      "MB"
CERTYPOO  INIT      "OO"
CERTYPAE  INIT      "AE"
CERTYPOU  INIT      "OU"
CERTYPDR  INIT      "DR"
CERTYPOT  INIT      "OT"
.
CHARNUM1  INIT      "1"
CHARNUM2  INIT      "2"
CHARNUM3  INIT      "3"
CHARNUM4  INIT      "4"
CODEPR    INIT      "PR"
CODEPU    INIT      "PU"
.
DASH      INIT      "-"
.
ERASE     INIT      "iserase "
.
FIELD     FORM      2
FNAM1     INIT      "pms04a"
FNAM2     INIT      "pms04b"
FNAM3     INIT      "pms04c"
.
ISBUILD   INIT      "isbuild "
.
MISCOD01  INIT      "AP00"
MISCOD02  INIT      "CM00"
MISCOD03  INIT      "DE00"
MISCOD04  INIT      "DR00"
MISCOD05  INIT      "DS00"
MISCOD06  INIT      "DX00"
MISCOD07  INIT      "OC00"
MISCOD08  INIT      "OH00"
MISCOD09  INIT      "OT00"
MISCOD10  INIT      "PC00"
MISCOD11  INIT      "PH00"
MISCOD12  INIT      "PS00"
MISCOD13  INIT      "PX00"
MISCOD14  INIT      "RC00"
MISCOD15  INIT      "RH00"
MISCOD16  INIT      "RE00"
.
PIPE      INIT      "|"
.
SP11      INIT      "           "
SP40      INIT      "                                        "
SP60      INIT      "                                                  ":
                    "          "
SP80      INIT      "                                                  ":
                    "                              "
TILDA01   INIT      "~"
TILDA40   INIT      "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
TXT       INIT      ".txt"
.
UKEY1     INIT      " 46 U1-8,9-16"
UKEY2     INIT      " 41 U1-5"
UKEY3     INIT      " 97 U1-1,26-33,3-3 U26-33,3-3,1-1"
.
.
. ----- Eclipse Data Variables -----
.
. HDR segment       Len    Pos
.-------------      ---    ---
.~        DIM       1      1
.HDR      DIM       3      2
HDRSEG01  DIM       8      5     * Batch Number
HDRSEG02  DIM       8      13    * Location Id
HDRSEG03  DIM       10     21    * Certificate Id
HDRSEG04  DIM       60     31    * Sender Id
HDRSEG05  DIM       1      91    * Test/Production Flag (T/P)
. End of Segment           92
.
.
. CID segment       Len    Pos
.-------------      ---    ---
.~        DIM       1      1
.CID      DIM       3      2
CIDSEG01  DIM       20     5     * AccountReferenceId
CIDSEG02  DIM       2      25    * ClaimTypeCode
CIDSEG03  DIM       1      27    * CompensableClaimCode
CIDSEG04  DIM       1      28    * ContiguousClaimCode
CIDSEG05  DIM       8      29    * FacilityId
CIDSEG06  DIM       1      37    * FacilityTypeCode
CIDSEG07  DIM       3      38    * FundBrandId
CIDSEG08  DIM       20     41    * PaymentModel
CIDSEG09  DIM       1      61    * PreviousClaimCode
CIDSEG10  DIM       24     62    * PreviousTransactionId
CIDSEG11  DIM       128    86    * SenderContactEmail
CIDSEG12  DIM       40     214   * SenderContactPersonName
CIDSEG13  DIM       19     254   * SenderContactPersonPhone
CIDSEG14  DIM       9      273   * TotalChargeAmount
CIDSEG15  DIM       9      282   * TotalHospitalChargeAmount
CIDSEG16  DIM       9      291   * TotalMedicalChargeAmount
CIDSEG17  DIM       1      300   * UrgencyCode
. End of Segment           301
.
.
. PAT segment       Len    Pos
.-------------      ---    ---
.~        DIM       1      1
.PAT      DIM       3      2
PATSEG01  DIM       4      5     * PatientAddressPostcode
PATSEG02  DIM       4      9     * PatientAdmissionWeight
PATSEG03  DIM       40     13    * PatientAliasFamilyName
PATSEG04  DIM       40     53    * PatientAliasFirst
PATSEG05  DIM       8      93    * PatientDateOfBirth
PATSEG06  DIM       40     101   * PatientFamilyName
PATSEG07  DIM       40     141   * PatientFirstName
PATSEG08  DIM       19     181   * PatientFundMembershipNum
PATSEG09  DIM       2      200   * PatientFundUPI
PATSEG10  DIM       1      202   * PatientGender
PATSEG11  DIM       10     203   * PatientMedicareCardNum
PATSEG12  DIM       20     213   * PatientMedicalRecordId
PATSEG13  DIM       1      233   * PatientReferenceNum
PATSEG14  DIM       1      234   * PatientSecondInitial
PATSEG15  DIM       8      235   * SymptomAwarenessDate
. End of Segment           243
.
.
. EPD segment       Len    Pos
.-------------      ---    ---
.~        DIM       1      1
.EPD      DIM       3      2
EPDSEG01  DIM       1      5     * AccommodationStatusCode
EPDSEG02  DIM       1      6     * AdmissionCategoryCode
EPDSEG03  DIM       8      7     * AdmissionDate
EPDSEG04  DIM       4      15    * AdmissionTime
EPDSEG05  DIM       4      19    * AnticipatedLengthOfStay
EPDSEG06  DIM       8      23    * DischargeDate
EPDSEG07  DIM       1      31    * DischargeIntentionCode
EPDSEG08  DIM       4      32    * DischargeTime
EPDSEG09  DIM       2      36    * DischargeTypeCode
EPDSEG10  DIM       15     38    * EpisodeId
EPDSEG11  DIM       3      53    * EpisodeTypeCode
EPDSEG12  DIM       1      56    * FacilityContractStatusCode
EPDSEG13  DIM       4      57    * LengthOfStay 
EPDSEG14  DIM       1      61    * MentalHealthLegalStatusCode 
EPDSEG15  DIM       1      62    * PalliativeCareStatusCode 
EPDSEG16  DIM       2      63    * PatientClassificationCode
EPDSEG17  DIM       1      65    * ReadmissionCode
EPDSEG18  DIM       1      66    * ReferralSourceCode
EPDSEG19  DIM       1      67    * SamedayCode
EPDSEG20  DIM       1      68    * UnplannedTheatreCode
EPDSEG21  DIM       5      69    * TotalPsychiatricCareDays
EPDSEG22  DIM       4      74    * PalliativeCareDays
EPDSEG23  DIM       5      78    * NumberOfQualifiedDaysForNewborns
. End of Segment           83
.
.
. SVB segment       Len    Pos
.-------------      ---    ---
.~        DIM       1      1
.SVB      DIM       3      2
SVBSEG01  DIM       9      5     * ChargeAmount
SVBSEG02  DIM       1      14    * ChargeRaisedCde
SVBSEG03  DIM       8      15    * FromDate
SVBSEG04  DIM       4      23    * NumberOfDays
SVBSEG05  DIM       11     27    * ServiceCode
SVBSEG06  DIM       1      38    * ServiceCodeTypeCode
SVBSEG07  DIM       8      39    * ToDate
. End of Segment           47
.
.
. ANB segment       Len    Pos
.-------------      ---    ---
.~        DIM       1      1
.ANB      DIM       3      2
ANBSEG01  DIM       8      5     * BabyDateOfBirth
ANBSEG02  DIM       40     13    * BabyFamilyName
ANBSEG03  DIM       40     53    * BabyFirstName
ANBSEG04  DIM       1      93    * BabyGender
ANBSEG05  DIM       1      94    * BabySecondInitial
. End of Segment           95
.
.
. TFR segment       Len    Pos
.-------------      ---    ---
.~        DIM       1      1
.TFR      DIM       3      2
TFRSEG01  DIM       8      5     * FacilityId
TFRSEG02  DIM       4      13    * PreviousProviderDays
TFRSEG03  DIM       2      17    * PreviousProviderHours
TFRSEG04  DIM       8      19    * ServiceDate
TFRSEG05  DIM       1      27    * TransferCde
TFRSEG06  DIM       1      28    * TransferTypeCode
. End of Segment           29
.
.
. ACS segment       Len    Pos
.-------------      ---    ---
.~        DIM       1      1
.ACS      DIM       3      2
ACSSEG01  DIM       4      5     * AccommodationDays
ACSSEG02  DIM       1      9     * ChargeRaisedCde
ACSSEG03  DIM       8      10    * FromDate
ACSSEG04  DIM       4      18    * LeaveDays
ACSSEG05  DIM       4      22    * NumberOfDays
ACSSEG06  DIM       8      26    * ToDate
ACSSEG07  DIM       9      34    * TotalChargeAmount
ACSSEG08  DIM       4      43    * NonCertifiedDaysOfStay
. End of Segment           47
.
.
. ACD segment       Len    Pos
.-------------      ---    ---
.~        DIM       1      1
.ACD      DIM       3      2
ACDSEG01  DIM       1      5     * BedBandCode
ACDSEG02  DIM       1      6     * BedLevelAddOnInd
ACDSEG03  DIM       2      7     * BedLevelCode
ACDSEG04  DIM       9      9     * ChargeAmount
ACDSEG05  DIM       1      18    * ChargeRaisedCde
ACDSEG06  DIM       9      19    * DayRate
ACDSEG07  DIM       8      28    * FromDate
ACDSEG08  DIM       4      36    * NumberOfDays
ACDSEG09  DIM       2      40    * PatientClassificationCode
ACDSEG10  DIM       11     42    * ProgramNum
ACDSEG11  DIM       11     53    * ServiceCode
ACDSEG12  DIM       1      64    * ServiceCodeTypeCode
ACDSEG13  DIM       8      65    * ToDate
. End of Segment           73
.
.
. CCG segment       Len    Pos
.-------------      ---    ---
.~        DIM       1      1
.CCG      DIM       3      2
CCGSEG01  DIM       9      5     * ChargeAmount
CCGSEG02  DIM       1      14    * ChargeRaisedCde
CCGSEG03  DIM       1      15    * CriticalCareAddOnInd
CCGSEG04  DIM       1      16    * CriticalCareLevelCode
CCGSEG05  DIM       3      17    * CriticalCareTypeCode
CCGSEG06  DIM       9      20    * DayRate
CCGSEG07  DIM       8      29    * FromDate
CCGSEG08  DIM       4      37    * ICUHrs
CCGSEG09  DIM       4      41    * NumberOfDays
CCGSEG10  DIM       11     45    * ServiceCode
CCGSEG11  DIM       1      56    * ServiceCodeTypeCode
CCGSEG12  DIM       8      57    * ToDate
CCGSEG13  DIM       4      65    * CCUHrs
. End of Segment           69
.
.
. LPD segment       Len    Pos
.-------------      ---    ---
.~        DIM       1      1
.LPD      DIM       3      2
LPDSEG01  DIM       8      5     * FromDate
LPDSEG02  DIM       8      13    * ToDate
LPDSEG03  DIM       4      21    * NumberOfDays
. End of Segment           25
.
.
. PSG segment       Len    Pos
.-------------      ---    ---
.~        DIM       1      1
.PSG      DIM       3      2
PSGSEG01  DIM       1      5     * AnaestheticTypeCode
PSGSEG02  DIM       9      6     * ChargeAmount
PSGSEG03  DIM       1      15    * ChargeRaisedCde
PSGSEG04  DIM       11     16    * ServiceCode
PSGSEG05  DIM       1      27    * ServiceCodeTypeCode
PSGSEG06  DIM       8      28    * ServiceDate
PSGSEG07  DIM       4      36    * ServiceTime
PSGSEG08  DIM       3      40    * TheatreBandCode
PSGSEG09  DIM       1      43    * TheatreBandTypeCode
PSGSEG10  DIM       1      44    * TheatreCategoryCode
PSGSEG11  DIM       4      45    * TheatreMins
PSGSEG12  DIM       9      49    * TotalChargeAmount
. End of Segment           58
.
.
. MSG segment       Len    Pos
.-------------      ---    ---
.~        DIM       1      1
.MSG      DIM       3      2
MSGSEG01  DIM       9      5     * ChargeAmount
MSGSEG02  DIM       1      14    * ChargeRaisedCde
MSGSEG03  DIM       11     15    * ServiceCode
MSGSEG04  DIM       1      26    * ServiceCodeTypeCode
MSGSEG05  DIM       3      27    * TheatreBandCode
MSGSEG06  DIM       1      30    * TheatreBandTypeCode
MSGSEG07  DIM       1      31    * TheatreCategoryCode
. End of Segment           32
.
.
. TRG segment
.-------------
TRGSEG01  DIM       15           * AmbulanceReferenceId
TRGSEG02  DIM       9            * ChargeAmount
TRGSEG03  DIM       1            * ChargeRaisedCde
TRGSEG04  DIM       4            * DistanceKms
TRGSEG05  DIM       40           * FromLocality
TRGSEG06  DIM       8            * ServiceDate
TRGSEG07  DIM       4            * StartTime
TRGSEG08  DIM       40           * ToLocality
TRGSEG09  DIM       4            * TransportHoursMins
TRGSEG10  DIM       1            * TransportTypeCode
.
.
. MIG segment       Len    Pos
.-------------      ---    ---
.~        DIM       1      1
.MIG      DIM       3      2
MIGSEG01  DIM       9      5     * ChargeAmount
MIGSEG02  DIM       1      14    * ChargeRaisedCde
MIGSEG03  DIM       11     15    * ServiceCode
MIGSEG04  DIM       8      26    * ServiceDate
MIGSEG05  DIM       9      34    * ServiceRate
MIGSEG06  DIM       2      43    * ServiceQuantity
MIGSEG07  DIM       30     45    * Text
. End of Segment           75
.
.
. DMG segment       Len    Pos
.-------------      ---    ---
.~        DIM       1      1
.DMG      DIM       3      2
DMGSEG01  DIM       4      5     * DRGCode
DMGSEG02  DIM       2      9     * DRGVersion
DMGSEG03  DIM       6      11    * PrincipalDiagnosis
DMGSEG04  DIM       4      17    * VentilationHrs
.
OLDDMG03  DIM       5      11    * PrincipalDiagnosis
.
. Additional Diagnosis Segment (49 times)
.----------------------------------------------
.ADDSEG01 DIM       6      21    * AdditionalDiagnosis
.ADDSEG02 DIM       6      27    * AdditionalDiagnosis
.ADDSEG03 DIM       6      33    * AdditionalDiagnosis
.ADDSEG04 DIM       6      39    * AdditionalDiagnosis
.ADDSEG05 DIM       6      45    * AdditionalDiagnosis
.ADDSEG06 DIM       6      51    * AdditionalDiagnosis
.ADDSEG07 DIM       6      57    * AdditionalDiagnosis
.ADDSEG08 DIM       6      63    * AdditionalDiagnosis
.ADDSEG09 DIM       6      69    * AdditionalDiagnosis
.ADDSEG10 DIM       6      75    * AdditionalDiagnosis
.ADDSEG11 DIM       6      81    * AdditionalDiagnosis
.ADDSEG12 DIM       6      87    * AdditionalDiagnosis
.ADDSEG13 DIM       6      93    * AdditionalDiagnosis
.ADDSEG14 DIM       6      99    * AdditionalDiagnosis
.ADDSEG15 DIM       6      105   * AdditionalDiagnosis
.ADDSEG16 DIM       6      111   * AdditionalDiagnosis
.ADDSEG17 DIM       6      117   * AdditionalDiagnosis
.ADDSEG18 DIM       6      123   * AdditionalDiagnosis
.ADDSEG19 DIM       6      129   * AdditionalDiagnosis
.ADDSEG20 DIM       6      135   * AdditionalDiagnosis
.ADDSEG21 DIM       6      141   * AdditionalDiagnosis
.ADDSEG22 DIM       6      147   * AdditionalDiagnosis
.ADDSEG23 DIM       6      153   * AdditionalDiagnosis
.ADDSEG24 DIM       6      159   * AdditionalDiagnosis
.ADDSEG25 DIM       6      165   * AdditionalDiagnosis
.ADDSEG26 DIM       6      171   * AdditionalDiagnosis
.ADDSEG27 DIM       6      177   * AdditionalDiagnosis
.ADDSEG28 DIM       6      183   * AdditionalDiagnosis
.ADDSEG29 DIM       6      189   * AdditionalDiagnosis
.ADDSEG30 DIM       6      195   * AdditionalDiagnosis
.ADDSEG31 DIM       6      201   * AdditionalDiagnosis
.ADDSEG32 DIM       6      207   * AdditionalDiagnosis
.ADDSEG33 DIM       6      213   * AdditionalDiagnosis
.ADDSEG34 DIM       6      219   * AdditionalDiagnosis
.ADDSEG35 DIM       6      225   * AdditionalDiagnosis
.ADDSEG36 DIM       6      231   * AdditionalDiagnosis
.ADDSEG37 DIM       6      237   * AdditionalDiagnosis
.ADDSEG38 DIM       6      243   * AdditionalDiagnosis
.ADDSEG39 DIM       6      249   * AdditionalDiagnosis
.ADDSEG40 DIM       6      255   * AdditionalDiagnosis
.ADDSEG41 DIM       6      261   * AdditionalDiagnosis
.ADDSEG42 DIM       6      267   * AdditionalDiagnosis
.ADDSEG43 DIM       6      273   * AdditionalDiagnosis
.ADDSEG44 DIM       6      279   * AdditionalDiagnosis
.ADDSEG45 DIM       6      285   * AdditionalDiagnosis
.ADDSEG46 DIM       6      291   * AdditionalDiagnosis
.ADDSEG47 DIM       6      297   * AdditionalDiagnosis
.ADDSEG48 DIM       6      303   * AdditionalDiagnosis
.ADDSEG49 DIM       6      309   * AdditionalDiagnosis
.
. Procedures Segment (50 times)
.------------------------------------
.PROSEG01 DIM       7      315   * Procedures
.PROSEG02 DIM       7      322   * Procedures
.PROSEG03 DIM       7      329   * Procedures
.PROSEG04 DIM       7      336   * Procedures
.PROSEG05 DIM       7      343   * Procedures
.PROSEG06 DIM       7      350   * Procedures
.PROSEG07 DIM       7      357   * Procedures
.PROSEG08 DIM       7      364   * Procedures
.PROSEG09 DIM       7      371   * Procedures
.PROSEG10 DIM       7      378   * Procedures
.PROSEG11 DIM       7      385   * Procedures
.PROSEG12 DIM       7      392   * Procedures
.PROSEG13 DIM       7      399   * Procedures
.PROSEG14 DIM       7      406   * Procedures
.PROSEG15 DIM       7      413   * Procedures
.PROSEG16 DIM       7      420   * Procedures
.PROSEG17 DIM       7      427   * Procedures
.PROSEG18 DIM       7      434   * Procedures
.PROSEG19 DIM       7      441   * Procedures
.PROSEG20 DIM       7      448   * Procedures
.PROSEG21 DIM       7      455   * Procedures
.PROSEG22 DIM       7      462   * Procedures
.PROSEG23 DIM       7      469   * Procedures
.PROSEG24 DIM       7      476   * Procedures
.PROSEG25 DIM       7      483   * Procedures
.PROSEG26 DIM       7      490   * Procedures
.PROSEG27 DIM       7      497   * Procedures
.PROSEG28 DIM       7      504   * Procedures
.PROSEG29 DIM       7      511   * Procedures
.PROSEG30 DIM       7      518   * Procedures
.PROSEG31 DIM       7      525   * Procedures
.PROSEG32 DIM       7      532   * Procedures
.PROSEG33 DIM       7      539   * Procedures
.PROSEG34 DIM       7      546   * Procedures
.PROSEG35 DIM       7      553   * Procedures
.PROSEG36 DIM       7      560   * Procedures
.PROSEG37 DIM       7      567   * Procedures
.PROSEG38 DIM       7      574   * Procedures
.PROSEG39 DIM       7      581   * Procedures
.PROSEG40 DIM       7      588   * Procedures
.PROSEG41 DIM       7      595   * Procedures
.PROSEG42 DIM       7      602   * Procedures
.PROSEG43 DIM       7      609   * Procedures
.PROSEG44 DIM       7      616   * Procedures
.PROSEG45 DIM       7      623   * Procedures
.PROSEG46 DIM       7      630   * Procedures
.PROSEG47 DIM       7      637   * Procedures
.PROSEG48 DIM       7      644   * Procedures
.PROSEG49 DIM       7      651   * Procedures
.PROSEG50 DIM       7      658   * Procedures
. End of Segment           665
.
.
. MOR segment
.-------------
.~        DIM       1      1
.DMG      DIM       3      2
MORSEG01  DIM       4      5     * ANSNAPClass
MORSEG02  DIM       7      9     * AROCImpairmentCode
MORSEG03  DIM       1      16    * AssessmentOnlyCode
MORSEG04  DIM       11     17    * CasemixCode
MORSEG05  DIM       1      28    * CasemixCodeTypeCode
MORSEG06  DIM       15     29    * ANSNAPId
MORSEG07  DIM       8      44    * DischargePlanDate
MORSEG08  DIM       8      52    * MultiDisciplinaryRehabPlanDate
.
.
. Admission FIM Score
.--------------------
.AFSSEG01  DIM       1      60    * AdmissionFIMScore 1
.AFSSEG02  DIM       1      61    * AdmissionFIMScore 2
.AFSSEG03  DIM       1      62    * AdmissionFIMScore 3
.AFSSEG04  DIM       1      63    * AdmissionFIMScore 4
.AFSSEG05  DIM       1      64    * AdmissionFIMScore 5
.AFSSEG06  DIM       1      65    * AdmissionFIMScore 6
.AFSSEG07  DIM       1      66    * AdmissionFIMScore 7
.AFSSEG08  DIM       1      67    * AdmissionFIMScore 8
.AFSSEG09  DIM       1      68    * AdmissionFIMScore 9
.AFSSEG10  DIM       1      69    * AdmissionFIMScore 10
.AFSSEG11  DIM       1      70    * AdmissionFIMScore 11
.AFSSEG12  DIM       1      71    * AdmissionFIMScore 12
.AFSSEG13  DIM       1      72    * AdmissionFIMScore 13
.AFSSEG14  DIM       1      73    * AdmissionFIMScore 14
.AFSSEG15  DIM       1      74    * AdmissionFIMScore 15
.AFSSEG16  DIM       1      75    * AdmissionFIMScore 16
.AFSSEG17  DIM       1      76    * AdmissionFIMScore 17
.AFSSEG18  DIM       1      77    * AdmissionFIMScore 18
.
.
. Discharge FIM Score
.--------------------
.DFSSEG01  DIM       1      78    * DischargeFIMScore 1
.DFSSEG02  DIM       1      79    * DischargeFIMScore 2
.DFSSEG03  DIM       1      80    * DischargeFIMScore 3
.DFSSEG04  DIM       1      81    * DischargeFIMScore 4
.DFSSEG05  DIM       1      82    * DischargeFIMScore 5
.DFSSEG06  DIM       1      83    * DischargeFIMScore 6
.DFSSEG07  DIM       1      84    * DischargeFIMScore 7
.DFSSEG08  DIM       1      85    * DischargeFIMScore 8
.DFSSEG09  DIM       1      86    * DischargeFIMScore 9
.DFSSEG10  DIM       1      87    * DischargeFIMScore 10
.DFSSEG11  DIM       1      88    * DischargeFIMScore 11
.DFSSEG12  DIM       1      89    * DischargeFIMScore 12
.DFSSEG13  DIM       1      90    * DischargeFIMScore 13
.DFSSEG14  DIM       1      91    * DischargeFIMScore 14
.DFSSEG15  DIM       1      92    * DischargeFIMScore 15
.DFSSEG16  DIM       1      93    * DischargeFIMScore 16
.DFSSEG17  DIM       1      94    * DischargeFIMScore 17
.DFSSEG18  DIM       1      95    * DischargeFIMScore 18
.
.
. CER segment       Len    Pos
.-------------      ---    ---
.~        DIM       1      1
.CER      DIM       3      2
CERSEG01  DIM       2      5     * CertificateTypeCode
CERSEG02  DIM       8      7     * CertifyingProviderNum
CERSEG03  DIM       40     15    * CertifyingProviderName
CERSEG04  DIM       8      55    * IssueDateDate
CERSEG05  DIM       8      63    * FromDate
CERSEG06  DIM       4      71    * NumberOfDays
CERSEG07  DIM       8      75    * ToDate
.CERSEG08 DIM       500    83    * Text
. End of Segment           583
.
.
. MED segment
.-------------
MEDSEG01  DIM       9            * ChargeAmount
MEDSEG02  DIM       1            * ChargeRaisedCde
MEDSEG03  DIM       8            * PayeeProviderNum
MEDSEG04  DIM       11           * ServiceCode
MEDSEG05  DIM       1            * ServiceCodeTypeCode
MEDSEG06  DIM       8            * ServiceDate
MEDSEG07  DIM       40           * ServicingProviderName
MEDSEG08  DIM       8            * ServicingProviderNum
.
.
. REM segment       Len    Pos
.-------------      ---    ---
.~        DIM       1      1
.REM      DIM       3      2
.REMSEG01 DIM       500    5     * Text
. End of Segment           505
.
.-----------------------------------------------------------------------
PRGID     INIT      "IBAPMS04"
PRGNAM    INIT      "Eclipse In Hospital Claims Extract"
VERSION   INIT      "V12.00.01"
.-----------------------------------------------------------------------
+
.******************************************************************************
.*                                   MAIN0000                                 *
.*                                 Main Module                                *
.******************************************************************************
.
MAIN0000  CALL      INIT0000                * Initialise variables & open files
          CALL      CTMP0000                * Create tempfiles
.
MAIN0500  CALL      GHSP0000                * get hospital code
          BRANCH    EXIT,MAIN9000           * nothing/exitchar entered
.
MAIN1000  CALL      OPTN0000                * Choose main option
          BRANCH    EXIT,MAIN0500           * EXIT
          BRANCH    OPTION,MAIN2000:        * Health Fund Extract 
                           MAIN4000         * Claim Code Extract
.
.         By Health Fund
.
MAIN2000  CALL      GFND0000                * get health fund code
          BRANCH    EXIT,MAIN1000           * nothing/exitchar entered
.
          CALL      RERR0000                * reset any error records
          CALL      LOAD0000                * load HF records to temp file
          CALL      DCLM0000                * display waiting HF records
          BRANCH    EXIT,MAIN0500           * cancel selected
.
          CALL      HEAD0000                * Print report header
          CALL      VALD0000                * Validate the tempfile
          CALL      QUES0000                * Extract question
          BRANCH    EXIT,MAIN3000
.
          CALL      WRIT0000                * Write to the files
MAIN3000  CALL      TAIL0000                * Print report tail
.
          GOTO      MAIN1000
.
.         By Claim Code
.
MAIN4000  CALL      GCLM0000                * get claim code
          BRANCH    EXIT,MAIN1000           * nothing/exitchar entered
.
          CALL      RERR0000                * reset any error records
          CALL      LOAD0000                * load claim records to temp file
          CALL      DCLM0000                * display waiting claim records
          BRANCH    EXIT,MAIN0500           * cancel selected
.
          CALL      HEAD0000                * Print report header
          CALL      VALD0000                * Validate the tempfile
          CALL      QUES0000                * Extract question
          BRANCH    EXIT,MAIN5000
.
          CALL      WRIT0000                * Write to the files
MAIN5000  CALL      TAIL0000                * Print report tail
          GOTO      MAIN1000
.
MAIN9000  CALL      KILL0000                * Kill tempfile
.
MAIN9999  CHAIN     PGM
+
.******************************************************************************
.*                                  INIT0000              Called by: MAIN0000 *
.*                       Initialise Variable & Open Files                     *
.******************************************************************************
.
INIT0000  CALL      DISPHEAD                * Display screen heading
.
          DISPLAY   *P56:24,"Opening controlf"
          OPEN      CONTROLF,"controlf"
.
          DISPLAY   *P64:24,"ibagedaf"
          OPEN      IBAGEDA1,"ibagedaf"
.
          DISPLAY   *P64:24,"patceraf"
          OPEN      PATCERA1,"patceraf"
.
          DISPLAY   *P64:24,"patclcaf"
          OPEN      PATCLCA1,"patclcaf"
.
          DISPLAY   *P64:24,"patcodes"
          OPEN      PATCODE1,"patcodes"
.
          DISPLAY   *P64:24,"patchcof"
          OPEN      PATCHCO1,"patchcof"
.
          DISPLAY   *P64:24,"patcrtaf"
          OPEN      PATCRTA1,"patcrtaf"
.
          DISPLAY   *P64:24,"patdgwaf"
          OPEN      PATDGWA1,"patdgwaf"
.
          DISPLAY   *P64:24,"patdo1af"
          OPEN      PATDO1A1,"patdo1af"
.
          DISPLAY   *P64:24,"patdschf"
          OPEN      PATDSCH1,"patdschf"
.
          DISPLAY   *P64:24,"patdtraf"
          OPEN      PATDTRA1,"patdtraf"
          OPEN      PATDTRA2,"patdtraf"
          OPEN      PATDTRA4,"patdtraf"
.
          DISPLAY   *P64:24,"patcmxaf"
          OPEN      PATCMXA2,"patcmxaf"
.
          DISPLAY   *P64:24,"pmsapgaf"
          OPEN      PMSAPGA1,"pmsapgaf"
.
          DISPLAY   *P64:24,"pmsupgaf"
          OPEN      PMSUPGA1,"pmsupgaf"
.
          DISPLAY   *P64:24,"pmsccdaf"
          OPEN      PMSCCDA1,"pmsccdaf"
.
          DISPLAY   *P64:24,"pmsdvaaf"
          OPEN      PMSDVAA1,"pmsdvaaf"
.
          DISPLAY   *P64:24,"pmsebhaf"
          OPEN      PMSEBHA1,"pmsebhaf"
          OPEN      PMSEBHA2,"pmsebhaf"
.
          DISPLAY   *P64:24,"pmsecaaf"
          OPEN      PMSECAA1,"pmsecaaf"
.
          DISPLAY   *P64:24,"pmshcpaf"
          OPEN      PMSHCPA1,"pmshcpaf"
.
          DISPLAY   *P64:24,"patecdaf"
          OPEN      PATECDA1,"patecdaf"
          OPEN      PATECDA2,"patecdaf"
.
          DISPLAY   *P64:24,"patecoaf"
          OPEN      PATECOA2,"patecoaf"
.
          DISPLAY   *P64:24,"patfimaf"
          OPEN      PATFIMA1,"patfimaf"
.
          DISPLAY   *P64:24,"patfn1af"
          OPEN      PATFN1A1,"patfn1af"
.
          DISPLAY   *P64:24,"patfx1af"
          OPEN      PATFX1A1,"patfx1af"
.
          DISPLAY   *P64:24,"pathdfaf"
          OPEN      PATHDFA1,"pathdfaf"
.
          DISPLAY   *P64:24,"pathspaf"
          OPEN      PATHSPA1,"pathspaf"
.
          DISPLAY   *P64:24,"pathgrpf"
          OPEN      PATHGRP1,"pathgrpf"
.
          DISPLAY   *P64:24,"patin1af"
          OPEN      PATIN1A1,"patin1af"
.
          DISPLAY   *P64:24,"pati10df"
          OPEN      PATI10D1,"pati10df"
.
          DISPLAY   *P64:24,"pati10of"
          OPEN      PATI10O1,"pati10of"
.
          DISPLAY   *P64:24,"paticddf"
          OPEN      PATICDD1,"paticddf"
.
          DISPLAY   *P64:24,"paticdof"
          OPEN      PATICDO1,"paticdof"
.
          DISPLAY   *P64:24,"paticuaf"
          OPEN      PATICUA1,"paticuaf"
.
          DISPLAY   *P64:24,"patinvrf"
          OPEN      PATINVR1,"patinvrf"
          OPEN      PATINVR3,"patinvrf"
.
          DISPLAY   *P64:24,"patitemn"
          OPEN      PATITEM1,"patitemn"
.
          DISPLAY   *P64:24,"mehlegaf"
          OPEN      MEHLEGA1,"mehlegaf"
.
          DISPLAY   *P64:24,"patlinkf"
          OPEN      PATLINK1,"patlinkf"
.
          DISPLAY   *P64:24,"patma1af"
          OPEN      PATMA1A1,"patma1af"
          OPEN      PATMX1A1,"patmx1af"
.
          DISPLAY   *P64:24,"patmchgf"
          OPEN      PATMCHG1,"patmchgf"
.
          DISPLAY   *P64:24,"patmi1af"
          OPEN      PATMI1A1,"patmi1af"
          OPEN      PATMI1A3,"patmi1af"
.
          DISPLAY   *P64:24,"patvadaf"
          OPEN      PATVADA1,"patvadaf"
.
          DISPLAY   *P64:24,"patdadaf"
          OPEN      PATDADA1,"patdadaf"
.
          DISPLAY   *P64:24,"patmmbsf"
          OPEN      PATMMBS1,"patmmbsf"
          OPEN      PATMMBS2,"patmmbsf"
.
          DISPLAY   *P64:24,"patparaf"
          OPEN      PATPARA1,"patparaf"
.
          DISPLAY   *P64:24,"patpcpaf"
          OPEN      PATPCPA1,"patpcpaf"
.
          DISPLAY   *P64:24,"pattranf"
          OPEN      PATTRAN2,"pattranf"
.
          DISPLAY   *P64:24,"patvisaf"
          OPEN      PATVISA1,"patvisaf"
.
          DISPLAY   *P64:24,"patwc1af"
          OPEN      PATWC1A1,"patwc1af"
.
          DISPLAY   *P64:24,"patwmabf"
          OPEN      PATWMAB1,"patwmabf"
.
          DISPLAY   *P64:24,"patwvetf"
          OPEN      PATWVET1,"patwvetf"
.
          DISPLAY   *P64:24,"pmsectaf"
          OPEN      PMSECTA1,"pmsectaf"
          OPEN      PMSECTA2,"pmsectaf"
          OPEN      PMSECTA3,"pmsectaf"
          OPEN      PMSECTA4,"pmsectaf"
.
          DISPLAY   *P64:24,"pmstspaf"
          OPEN      PMSTSPA1,"pmstspaf"
.
          DISPLAY   *P64:24,"pmspx2af"
          OPEN      PMSPX2A1,"pmspx2af"
.
          DISPLAY   *P64:24,"pmsvx1af"
          OPEN      PMSVX1A1,"pmsvx1af"
.
          DISPLAY   *P64:24,"vismdtaf"
          OPEN      VISMDTA1,"vismdtaf"
.
          DISPLAY   *P64:24,"vismtxaf"
          OPEN      VISMTXA1,"vismtxaf"
.
          DISPLAY   *P64:24,"websecaf"
          OPEN      WEBSECA3,"websecaf"
.
          READ      CONTROLF,ZERO;*43,IBCNMHOS,*85,IBCNUGST
          READ      CONTROLF,TEN;*79,CAPPRVNO
          READ      CONTROLF,TEN3;*194,CVETINS,*245,CHOSTYP
          READ      CONTROLF,TEN5;*189,CTHETR
          READ      CONTROLF,TWENTY1;*45,PTCNDRSM
          READ      CONTROLF,SEVENTY7;*220,PTCNEDRG
          READ      CONTROLF,SEVENTY9;*82,PTCNDSCI
          READ      CONTROLF,EIGHTY;*250,PTCNHDPS
          READ      CONTROLF,EIGHTY8;*59,PTCNI10D,*241,PTCNCSTA
          READ      CONTROLF,HUND03;*43,PTCNDFIN
          READ      CONTROLF,HUND10;*115,PTCNUEDI,*116,PTCNEDIH,*228,PTCNHCCC:
                                    *242,PTCNMBRL
          READ      CONTROLF,HUND14;*145,PTCNCLID,*153,PTCNECLO,*214,PTCNUTPD
          READ      CONTROLF,HUND16;*69,PTCNSCEM,*149,PTCNSCPN,*189,PTCNSCPP
          READ      CONTROLF,HUND23;*122,PTCNECUP
.
          IF        CTHETR = 1
            DISPLAY   *P64:24,"oprdetaf";
            OPEN      OPRDETA1,"oprdetaf"
            OPEN      OPRDETA2,"oprdetaf"
            OPEN      OPRDETA3,"oprdetaf"
          ENDIF
.
          PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
          CLOCK     TIME,CTIMEIS
.
          MOVE      ONE,CNEWDS
          MOVE      ONE,NHOSDAYC
.
          CALL      LARY0000                     * load PLV arrays
.
          CALL      OPICO1
          CALL      OPICO2
          CALL      OPICD1
          CALL      OPICD2
.
INIT9999  RETURN
+
.******************************************************************************
.*                                  OPTN0000              Called by: MAIN0000 *
.*                                Select Option                               *
.******************************************************************************
.
OPTN0000  MOVE      ZERO,EXIT
          MOVE      ZERO,OPTION
          HLINE     *G37,2,57,80
          DISPLAY   *P40:4,*EF:
                    *P1:6,*V2LON,"0",*HOFF," = Exit":
                    *P1:7,*V2LON,"1",*HOFF," = Create Health Fund Extract ":
                    *P1:8,*V2LON,"2",*HOFF," = Create Claim Code Extract ":
                    *P1:10,"Select Option : ";
.
OPTN1000  KEYIN     *P17:10,*V2LON,OPTION;
.
          COMPARE   ZERO,OPTION
          GOTO      OPTN9500 IF EQUAL
.
          BRANCH    OPTION,OPTN2000:             * HF extract
                           OPTN2000              * Claim Code extract
.
          BEEP
          GOTO      OPTN1000
.
OPTN2000  COMPARE   ONE,PTCNUEDI
          GOTO      OPTN2500 IF EQUAL
.
          DISPLAY   *P1:24,"Hospital not using the EDI Module. "; 
          CALL      HITEXIT
          GOTO      OPTN9500
.
OPTN2500  MATCH     SP70,PTCNECLO
          IF        @EQUAL
            DISPLAY   *P1:24,*B,"Eclipse Outbound Path blank. ";
            CALL      HITENTER
            GOTO      OPTN9500
          ENDIF
.
          BRANCH    OPTION,OPTN3000:             * create HF extract
                           OPTN3100              * create Claim Code extract
.
OPTN3000  DISPLAY   *P57:2,*V2LON,"- Health Fund Extract ";
          MOVE      "- H.F. Extract",CPHDROPT
          GOTO      OPTN9000
.
OPTN3100  DISPLAY   *P57:2,*V2LON,"- Claim Code Extract ";
          MOVE      "- Claim Code Extract",CPHDROPT
.
OPTN9000  MOVE      ZERO,EXIT
          GOTO      OPTN9999
.
OPTN9500  MOVE      ONE,EXIT
.
OPTN9999  RETURN
+
.*****************************************************************************
.*                                 GFND0000        Called by: MAIN0000       *
.*               Get the user to keyin a health fund code                    *
.* Returns: EXIT   0 = Valid Health Fund selected                            *
.*                 1 = nothing, exitchar or spaces input                     *
.*          SAVTBAND - Theatre Band                                          *
.*****************************************************************************
.
GFND0000  MOVE      TEN5,EVERT
          MOVE      TEN5,ECOL
          MOVE      SP6,CKYIDEF6
          MOVE      ZERO,CKYIMAND
          MOVE      ZERO,CKYIMODE
.
          DISPLAY   *P1:15,*EF,"Health Fund :";
          CALL      PATFNDKY
          BRANCH    EXIT,GFND9100:               * nothing input
                         GFND9100:               * exitchar input
                         GFND9100                * spaces input
.
.         Check if the health fund is participating in EDI
.
          MOVE      HCODE,KEY6
          CALL      RDPTFX11
          IF        OVRCD = 1
            DISPLAY   *P1:24,*EL,*B,"Health Fund extension record not found.  ";
            CALL      HITENTER
            GOTO      GFND0000
          ENDIF
.
          COMPARE   THREE,PTFXEXTR               * using Eclipse ?
          IF        !@EQUAL
            DISPLAY   *P1:24,*EL,*B,"Health Fund not using Eclipse.  ";
            CALL      HITENTER
            GOTO      GFND0000
          ENDIF
.
.         Check the health fund's Participant code
.
          MOVE      SP70,ECLKEY3
          MATCH     SP70,PTFXECLP
          IF        @EQUAL | @EOS
            MATCH     SP3,PTHFHGRP                 * blank health fund group ?
            IF        @EQUAL
              DISPLAY   *P1:24,*EL,*B,"Participant code blank.  ";    * yes
              CALL      HITENTER
              GOTO      GFND0000
            ELSE
              MOVE      PTHFHGRP,ECLKEY3
            ENDIF
          ELSE
            MOVE    PTFXECLP,ECLKEY3
          ENDIF
.
          MOVE      ECLKEY3,KEY3
          CALL      RDPTPAR1                     * participant code on file ?
          IF        OVRCD = 1
            DISPLAY   *P1:24,*EL,*B,"Participant code not found.  ";  * no
            CALL      HITENTER
            GOTO      GFND0000
          ENDIF
.
.         Make sure that the participant is not DVA
.
          MATCH     CVETINS,ECLKEY3
          IF        @EQUAL
            DISPLAY   *P1:24,*EL,*B,"Process DVA claims by claim code.  ";
            CALL      HITENTER
            GOTO      GFND9100
          ENDIF
.
.         Check that the participant has IHC capability
.
          MOVE      ECLKEY3,KEY3
          PACK      KEY9,KEY3,ANSI,ANSH,ANSC,SP3
          CALL      RDPTPCP1
          IF        OVRCD = 1
            DISPLAY   *P1:24,*EL,*B,"Participant cannot accept IHC's.  ";
            CALL      HITENTER
            GOTO      GFND0000
          ENDIF
.
.         Valid health fund entered
.
          DISPLAY   *P30:15,*V2LON,HFNAME;
          CALL      CLRF0000                     * clear temp file records
          MOVE      HFBAND,SAVTBAND              * save HF theatre band
.
          MOVE      ZERO,EXIT
          GOTO      GFND9999
.
GFND9100  MOVE      ONE,EXIT
.
GFND9999  RETURN
+
.*****************************************************************************
.*                                 GCLM0000        Called by: MAIN0000       *
.*               Get the user to keyin a claim code                          *
.* Returns: EXIT   0 = Valid Claim Code selected                             *
.*                 1 = nothing, exitchar or spaces input                     *
.*          CLAMCODE - Claim code (Cat CL)                                   *
.*          CLAMDESC - Calim Code description                                *
.*          SAVTBAND - Theatre Band                                          *
.*****************************************************************************
.
GCLM0000  MATCH     SP6,CVETINS
          IF        @EQUAL
            DISPLAY   *P1:24,*EL,*B,"Insurance code for DVA is blank.  ";
            CALL      HITENTER
            GOTO      GCLM9100
          ENDIF
.
.         Check the insurer's record
.
          PACK      KEY6,CVETINS,SP6
          CALL      RDINSR1                      * insurance company on file ?
          IF        OVRCD = 1
            DISPLAY   *P1:24,*EL,*B,"Insurance code not found.  ";  * no
            CALL      HITENTER
            GOTO      GCLM9100
          ENDIF
.
.         Check the insurer's Participant code
.
          MOVE      CVETINS,KEY3
          CALL      RDPTPAR1                     * participant code on file ?
          IF        OVRCD = 1
            DISPLAY   *P1:24,*EL,*B,"Participant code not found.  ";  * no
            CALL      HITENTER
            GOTO      GCLM9100
          ENDIF
.
.         Check that the participant has IHC capability
.
          MOVE      CVETINS,KEY3
          PACK      KEY9,KEY3,ANSI,ANSH,ANSC,SP3
          CALL      RDPTPCP1
          IF        OVRCD = 1
            DISPLAY   *P1:24,*EL,*B,"Participant (",*V2LON,CVETINS,*HOFF:
                      ") cannot accept IHC's.  ";
            CALL      HITENTER
            GOTO      GCLM9100
          ENDIF
.
GCLM1000  MOVE      TEN5,EVERT
          MOVE      TEN4,ECOL
          PACK      CODE,ANSC,ANSL
          MOVE      SP3,CKYIDEF3
          MOVE      ZERO,CKYIMAND
          MOVE      ZERO,CKYIMODE
.
          DISPLAY   *P1:15,*EF,"Claim Code :";
          CALL      PATCODKY
          BRANCH    EXIT,GCLM9100:               * nothing input
                         GCLM9100:               * exitchar input
                         GCLM9100                * spaces input
.
.         Valid claim code entered, so check that this is a DVA code
.
          MOVE      ZERO,FORM1
          WHILE     FORM1 < 5
            ADD       ONE,FORM1
            LOAD      ANS,FORM1,TCINDC1,TCINDC2,TCINDC3,TCINDC4,TCINDC5
            MATCH     ANSV,ANS                   * DVA code ?
            GOTO      GCLM5000 IF EQUAL          * yes
          DO
.
          DISPLAY   *P1:24,*EL,*B,"Claim code not DVA related.  ";
          CALL      HITENTER
          GOTO      GCLM1000
.
GCLM5000  DISPLAY   *P30:15,*V2LON,TDESC;
          MOVE      ACODE,CLAMCODE               * save claim code
          MOVE      TDESC,CLAMDESC               * save claim code description
          MOVE      TCFORM6,SAVTBAND             * save DVA theatre band
          CALL      CLRF0000                     * clear temp file records
.
          MOVE      ZERO,EXIT
          GOTO      GCLM9999
.
GCLM9100  MOVE      ONE,EXIT
.
GCLM9999  RETURN
+
.*****************************************************************************
.*                                 GHSP0000        Called by: MAIN0000       *
.*               Get the user to keyin a hospital code                       *
.* Returns: EXIT   0 = Valid Hospital selected                               *
.*                 1 = nothing, exitchar or spaces input                     *
.*          HOSPCODE - 3 character hospital code                             *
.*****************************************************************************
.
GHSP0000  HLINE     *G37,2,57,80
          MOVE      FOUR,EVERT
          MOVE      TEN2,ECOL
          MOVE      SP3,CKYIDEF3
          MOVE      ZERO,CKYIMAND
          MOVE      ZERO,CKYIMODE
.
          DISPLAY   *P1:3,*EF,*P1:4,"Hospital :":
                    *P1:24,"(",*V2LON,EXITCHAR,*HOFF," to exit)"
          CALL      PATHSPKY
          BRANCH    EXIT,GHSP8000:               * nothing input
                         GHSP9100:               * exitchar input
                         GHSP8000                * spaces input
.
.         Valid health fund entered
.
          DISPLAY   *P16:4,PTHSNAME;
          GOTO      GHSP9000
.
GHSP8000  DISPLAY   *P16:4,*V2LON,"All"
.
GHSP9000  MOVE      KEY3,HOSPCODE
          MOVE      ZERO,EXIT
          GOTO      GHSP9999
.
GHSP9100  MOVE      ONE,EXIT
.
GHSP9999  RETURN
+
.******************************************************************************
.*                                  HEAD0000              Called by: MAIN0000 *
.*                             Print Report Header                            *
.******************************************************************************
.
HEAD0000  CALL      HEAD132
.
          IF        OPTION = 1
            PRINT     *N,*1,"Health Fund:",*14,HCODE,*25,HFNAME
          ELSE
            PRINT     *N,*1,"Claim Code:",*13,CLAMCODE,*24,CLAMDESC
          ENDIF
.
          CALL      UND132
          PRINT     *1,PIPE,*3,"Invoice",*12,PIPE,*14,"Admission",*24,PIPE:
                    *26,"U/R Number",*37,PIPE,*39,"Error",*132,PIPE
          CALL      UND132
          MOVE      EIGHT,CLNO
.
HEAD9000  MOVE      ZERO,EXIT
.
HEAD9999  RETURN
+
.******************************************************************************
.*                                  VALD0000              Called by: MAIN0000 *
.*                            Validate The Tempfile                           *
.******************************************************************************
.
VALD0000  MOVE      ONE,VALDFLG                  * set validation flag
.
.         Initialise counters
.
          MOVE      ZERO,RECCNT                  * records
          MOVE      ZERO,ERRCT                   * errors
          MOVE      ZERO,WARCT                   * warnings
.
          MOVE      ZERO,TOTAMTCT                * clear the tot. amount counter
          MOVE      ZERO,WRTCT
          DISPLAY   *P1:24,*EL,"Validating : ";
.
          MOVE      SP20,KEY16
VALD0500  CALL      RSTEMP1                      * Positiion at start of file
VALD1000  CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,VALD9000               * eof - finished
.
          BRANCH    LISTFLAG,VALD1000            * excluded from extract
.
          MOVE      LISTADMN,ADMINO
          MOVE      LISTINVN,INVNO 
          MOVE      LISTURNO,PURNO 
.
          MOVE      LISTADMN,KEY8
          CALL      RDMISS1                      * admission record found ?
          IF        OVRCD = 1
            MOVE      "GEN.02-Missing admission file record",ERRMSG
            CALL      PERR0000
          ELSE
            MOVE      LISTADMN,KEY8
            CALL      RDPMVX11                   * visit extension found ?
            IF        OVRCD = 1
              MOVE      "GEN.10-Missing visit extension record",ERRMSG
              CALL      PERR0000
            ENDIF
          ENDIF
.
          CALL      CLPATDSC                     * clear disch file variables
          IF        ASTAT = 3
            MOVE      LISTADMN,KEY8
            CALL      RDDSCH1                    * discharge record found ?
            IF        OVRCD = 1
              MOVE      "GEN.03-Missing discharge file record",ERRMSG
              CALL      PERR0000
            ENDIF
          ENDIF
.
          MOVE      LISTURNO,KEY8
          CALL      RDMAST1                      * pmi master record found ?
          IF        OVRCD = 1
            MOVE      "GEN.04-Missing master file record",ERRMSG
            CALL      PERR0000
          ENDIF
.
          MOVE      LISTURNO,KEY8
          CALL      RDPMPX21                     * pmi extension record found ?
          IF        OVRCD = 1
            MOVE      "GEN.05-Missing pmi extension record",ERRMSG
            CALL      PERR0000
          ENDIF
.
          READ      CONTROLF,TWENTY;*193,PTCNDCLM  * default claim code
.
          COMPARE   ONE,IBCNMHOS                 * using multi-hospital ?
          GOTO      VALD2000 IF NOT EQUAL        * no
.
          MATCH     SP3,LISTHOSP                 * blank hospital code ?
          GOTO      VALD2000 IF EQUAL            * yes - using default parameter
.
          MOVE      LISTHOSP,KEY3
          CALL      RDPTHSP1                     * hospital record found ?
          IF        OVRCD = 1
            MOVE      "GEN.11-Missing hospital record",ERRMSG
            CALL      PERR0000
          ENDIF
.
          MOVE      PTHSDCLM,PTCNDCLM            * default claim code
.
.         Get the original pmsectaf record
.
VALD2000  IF        OPTION = 1
            PACK      KEY35,LISTHOSP,SP1,ZERO,HCODE,LISTADMN,LISTINVN,SP30
          ELSE
            PACK      KEY35,LISTHOSP,SP1,ZERO,CLAMCODE,SP3,LISTADMN,LISTINVN:
                            SP30
          ENDIF
          CALL      RDPMECT1                     * record found ?
          BRANCH    OVRCD,VALD1000               * no - ignore
.
          PACK      SAVKEY35,PMECHOSP,PMECFLAG,PMECHFND,PMECADMN,PMECINVN,SP30
.
          MOVE      PMECFLAG,ERRFLG              * initialise error flag ERRFLG
          DISPLAY   *P15:24,*V2LON,INVNO,SP2,ADMINO;
.
          ADD       ONE,RECCNT                   * increment record count
.
          MOVE      PMECINVN,KEY8
          CALL      RDINV1                       * invoice found ?
          IF        OVRCD = 1
            MOVE      "GEN.01-Missing invoice file record",ERRMSG
            CALL      PERR0000
          ENDIF
.
.         Determine the from date for the invoice
.
          CALL      FDAT0000
.
.         Determine the to date for the invoice
.
          MOVE      PINVDTE,INVTODTE             * default to date to inv. date
          MATCH     SP8,DDATE                    * patient discharged ?
          GOTO      VALD3000 IF EQUAL            * no
.
          MATCH     DDATE,PINVDTE                * invoice date < disch date
          GOTO      VALD3000 IF LESS             * yes
.
          MOVE      DDATE,INVTODTE               * Default to date to disch date
.
VALD3000  MOVE      ZERO,INVAMTCT                * clear invoice amount counter
          MOVE      ZERO,SUBTOTAL                * clear subtotal
.
          MOVE      INVFRDTE,FROMDATE
          MOVE      INVTODTE,TODATE
          CALL      NHOSPDAY                     * calc. no of days in hospital
          MOVE      NBRDAYS,NOINVDYS
          REP       " 0",NOINVDYS                * no of invoice days
.
          IF        RECCNT = 1
            CALL      WHDR0000                   * write header details
          ENDIF
          CALL      WCID0000                     * write claim id details
          BRANCH    EXIT,VALD0500                * 0 claim,ignore claim(deleted)
          CALL      WPAT0000                     * write patient details
          CALL      WEPD0000                     * write episode details
          CALL      WSVB0000                     * write bungle/single value
          CALL      WANB0000                     * write newborn baby details
          CALL      WTFR0000                     * write transfer details
          CALL      WACS0000                     * write accom summary details
          CALL      CACC0000                     * clear accomm. temp file
          CALL      LACC0000                     * load accom details
          CALL      WACC0000                     * write ACD & CCG records
          IF        LEAVTOTL <> 0
            CALL      WLPD0000
          ENDIF
.
          CALL      VACS0000                     * Validate ACS segment
.
          CALL      WPSG0000                     * write prin. services details
.>>>>>    CALL      WTRG0000                     * write transport group details
          CALL      WMIG0000                     * write misc services details
          CALL      WDMG0000                     * write DRG morbidity details
.
          MATCH     "1",PTCNECUP
          IF        @EQUAL
            CALL      WMOR0000                   * write Non DRG Morbidity det.
          ENDIF
.
          CALL      WCER0000                     * write certificate details
.>>>>>    CALL      WMED0000                     * write medical service details
.
          MATCH     "1",PTCNECUP
          IF        @EQUAL
            CALL      WREM0000                     * write remarks
          ENDIF
.
          ADD       INVAMTCT,TOTAMTCT            * increment tot. amount counter
          MOVE      INVTODTE,INVFRDTE            * set invoice from date
.
          COMPARE   ONE,ERRFLG  
          IF        @EQUAL
            MOVE      ONE,PMECFLAG
            CALL      UPPMECT1
          ENDIF
.
          GOTO      VALD1000
.
VALD9000  MOVE      ZERO,EXIT
.
VALD9999  RETURN
+
.******************************************************************************
.*                                  QUES0000              Called by: MAIN0000 *
.*                              Extract Question                              *
.******************************************************************************
.
QUES0000  DISPLAY   *P1:19,*EF:
                    *P1:20,*EF,"Total Records Read     : ",*V2LON,RECCNT,*HOFF:
                    *P1:21,"Total Number of Errors : ",*V2LON,ERRCT,*HOFF:
                    *P1:22,"Total Number Warnings  : ",*V2LON,WARCT,*HOFF;
.
          COMPARE   ZERO,RECCNT
          GOTO      QUES1000 IF NOT EQUAL   * No data found
.
          DISPLAY   *P1:24,*EL,*B,"No data found. Extract not created.  ";
          CALL      HITENTER
          GOTO      QUES9500
.
QUES1000  COMPARE   ZERO,ERRCT
          IF        !@EQUAL
            DISPLAY   *P1:24,*EL,*B,"Errors found.  ";
            CALL      HITENTER
            GOTO      QUES3000
          ENDIF
.
          GOTO      QUES9000                     * no errors - extract
.
.         Not doing extraction, reset status of records back to "0"
.
QUES3000  CALL      RERR0000
          GOTO      QUES9500
.
QUES9000  MOVE      ZERO,EXIT
          GOTO      QUES9999
.
QUES9500  MOVE      ONE,EXIT
.
QUES9999  RETURN
+
.******************************************************************************
.*                                  WRIT0000              Called by: MAIN0000 *
.*                             Write To The Files                             *
.******************************************************************************
.
WRIT0000  MOVE      ZERO,VALDFLG                 * set flag for writing
.
          MOVE      NINE,EVERT                   * initialise line count
          MOVE      ZERO,TOTAMTCT                * clear total amount counter
          MOVE      ZERO,WRTCT
          DISPLAY   *P1:24,*EL,"Writing : ";
.
          MOVE      SP20,KEY16
WRIT0500  CALL      RSTEMP1                      * Positiion at start of file
WRIT1000  CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,WRIT8000               * eof - finished
.
          BRANCH    LISTFLAG,WRIT1000            * excluded from extract
.
          MOVE      LISTADMN,ADMINO
          MOVE      LISTINVN,INVNO 
          MOVE      LISTURNO,PURNO 
.
          MOVE      LISTINVN,KEY8
          CALL      RDINV1                       * invoice found ?
          BRANCH    OVRCD,WRIT1000               * no - ignore record
.
          MATCH     ZEROVISN,PINVADM             * zero admission number ?
          GOTO      WRIT1000 IF EQUAL            * yes - ignore record
.
          MOVE      LISTADMN,KEY8
          CALL      RDMISS1                      * admission record found ?
          BRANCH    OVRCD,WRIT1000               * no - ignore record
.
          MOVE      LISTADMN,KEY8
          CALL      RDPMVX11                     * visit extension found ?
          BRANCH    OVRCD,WRIT1000               * no - ignore record
.
          CALL      CLPATDSC                     * clear disch file variables
          IF        ASTAT = 3
            MOVE      LISTADMN,KEY8
            CALL      RDDSCH1                    * discharge record found ?
            BRANCH    OVRCD,WRIT1000             * no - ignore record
          ENDIF
.
          MOVE      LISTURNO,KEY8
          CALL      RDMAST1                      * pmi master record found ?
          BRANCH    OVRCD,WRIT1000               * no - ignore record
.
          MOVE      LISTURNO,KEY8
          CALL      RDPMPX21                     * pmi extension found ?
          BRANCH    OVRCD,WRIT1000               * no - ignore record
.
          READ      CONTROLF,TWENTY;*193,PTCNDCLM * default claim code
.
          COMPARE   ONE,IBCNMHOS                 * using multi-hospital ?
          GOTO      WRIT1100 IF NOT EQUAL        * no
.
          MATCH     SP3,LISTHOSP                 * yes - blank hospital id ?
          GOTO      WRIT1100 IF EQUAL            * yes
.
          MOVE      LISTHOSP,KEY3
          CALL      RDPTHSP1                     * hospital record found ?
          BRANCH    OVRCD,WRIT1000               * no - ignore record
.
          MOVE      PTHSDCLM,PTCNDCLM            * default claim code
.
.         Get the original pmsectaf record
.
WRIT1100  IF        OPTION = 1
            PACK      KEY35,LISTHOSP,SP1,ZERO,HCODE,LISTADMN,LISTINVN,SP30
          ELSE
            PACK      KEY35,LISTHOSP,SP1,ZERO,CLAMCODE,SP3,LISTADMN:
                            LISTINVN,SP30
          ENDIF
          CALL      RDPMECT1
          BRANCH    OVRCD,WRIT1000               * shouldn't happen
.
          PACK      SAVKEY35,PMECHOSP,PMECFLAG,PMECHFND,PMECADMN,PMECINVN,SP30
.
          MATCH     SP8,PMECBATN                 * blank batch number ?
          GOTO      WRIT1000 IF NOT EQUAL        * no - ignore record
.
          COMPARE   ZERO,WRTCT                   * processing first record ?
          GOTO      WRIT1300 IF NOT EQUAL        * no
.
          CALL      PREP0000                     * prepare extract file
.
WRIT1300  ADD       ONE,WRTCT
          IF        WRTCT%1000=1
            DISPLAY   *P11:24,*V2LON,INVNO,SP2,ADMINO;
          ENDIF
.
.         Determine the invoice from date
.
          CALL      FDAT0000
.
.         Determine the invoice to date
.
          MOVE      PINVDTE,INVTODTE             * def. to date to invoice date
          MATCH     SP8,DDATE                    * patient discharged ?
          GOTO      WRIT3000 IF EQUAL            * no
.
          MATCH     DDATE,PINVDTE                * invoice date < disch dat
          GOTO      WRIT3000 IF LESS             * yes
.
          MOVE      DDATE,INVTODTE               * default to date to disch date
.
WRIT3000  MOVE      ZERO,INVAMTCT                * clear invoice amount counter
          MOVE      ZERO,SUBTOTAL                * clear subtotal
.
          MOVE      INVFRDTE,FROMDATE
          MOVE      INVTODTE,TODATE
          CALL      NHOSPDAY                     * calc. no of days in hospital
          MOVE      NBRDAYS,NOINVDYS
          REP       " 0",NOINVDYS                * no of invoice days
.
          IF        WRTCT = 1
            CALL      WHDR0000                   * write header details
          ENDIF
          CALL      WCID0000                     * write claim id details
          BRANCH    EXIT,WRIT0500                * 0 claim,ignore claim(deleted)
          CALL      WPAT0000                     * write patient details
          CALL      WEPD0000                     * write episode details
          CALL      WSVB0000                     * write bungle/single value det
          CALL      WANB0000                     * write newborn baby details
          CALL      WTFR0000                     * write transfer details
          CALL      WACS0000                     * write accom summary details
          CALL      CACC0000                     * clear accomm. temp file
          CALL      LACC0000                     * load accom details
          CALL      WACC0000                     * write ACD & CCG records
          IF        LEAVTOTL <> 0
            CALL      WLPD0000
          ENDIF
.
          CALL      VACS0000                     * Validate ACS segment
.
          CALL      WPSG0000                     * write principal services dets
.>>>>>    CALL      WTRG0000                     * write transport group details
          CALL      WMIG0000                     * write misc services details
          CALL      WDMG0000                     * write DRG morbidity details
.
          MATCH     "1",PTCNECUP
          IF        @EQUAL
            CALL      WMOR0000                   * write Non DRG Morbidity dets
          ENDIF
.
          CALL      WCER0000                     * write certificate details
.>>>>>    CALL      WMED0000                     * write medical service details
.
          MATCH     "1",PTCNECUP
          IF        @EQUAL
            CALL      WREM0000                   * write remarks
          ENDIF
.
          CALL      WTLR0000                     * write trailer
.
          ADD       INVAMTCT,TOTAMTCT            * increm. total amount counter
          MOVE      INVTODTE,INVFRDTE            * set invoice from date
.
          CALL      PROC0000                     * check/update pmsectaf records
.
.         A claim has been successfully extracted, so write the claim
.         details to the report without any error details
.
          COMPARE   "55",CLNO                    * page full ?
          CALL      HEAD0000 IF NOT LESS         * yes
.
          PACK      ERRMSG,SP30,SP30
          PRINT     *1,PIPE,*3,INVNO,*12,PIPE,*14,ADMINO,*24,PIPE,*27,PURNO:
                    *37,PIPE,*39,ERRMSG,*132,PIPE
          ADD       ONE,CLNO
.
          GOTO      WRIT1000
.
.         Update batch and move extract file
.
WRIT8000  CALL      UPBT0000
.
          BRANCH    OPTION,WRIT8500:        * By health fund
                           WRIT8500         * By claim code
          GOTO      WRIT9000
.
WRIT8500  DISPLAY   *P1:20,*EF,"Total records read      : ",*V2LON,RECCNT,*HOFF:
                    *P1:21,"Total records extracted : ",*V2LON,WRTCT,*HOFF:
                    *P1:22,*EF,"Processing Extract file : ",*V2LON,*+,FILENAME:
                    *-,TXT,*HOFF:
                    *P1:24,*HOFF,*B,"Extract finished.  ";
          CALL      HITENTER
.
WRIT9000  MOVE      ZERO,EXIT
.
WRIT9999  RETURN
+
.******************************************************************************
.*                                  PROC0000              Called by: WRIT0000 *
.*    Check if re-submission, Update records in pmsectaf accordingly          *
.******************************************************************************
.
PROC0000  MOVE      SP10,SAVPRVBN
.
          MOVE      SAVBTHN,PMECBATN             * load the batch number
          MOVE      TWO,PMECFLAG                 * update status to "extracted"
          MOVE      CIDSEG04,PMECCCFL            * save contiguous claim flag
          MOVE      LISTAMNT,PMECAMTC            * load claim amount
          CALL      UPPMECT1                     * update record
.
.         Write a record to the claims audit/history table for this claim
.
          MOVE      PMECINVN,PMEAINVN
          CALL      IBACLOCK
          PACK      PMEADATE,CCC,CYY,CMM,CDD
          REP       " 0",PMEADATE
          MOVE      CTIMEIS,PMEATIME
          MOVE      SAVBTHN,PMEABATN
          MOVE      TWO,PMEASTAT
          MOVE      " 0",PMEATYPE
          MOVE      PMEBOPER,PMEAOPER
          MOVE      SP30,PMEATRID
          MOVE      SP30,PMEASPAR
          CALL      WRPMECA1
.
.         Check if this claim was the result of a resubmission
.
          MATCH     SP8,PMECPBAT                 * blank previous batch ?
          GOTO      PROC9999 IF EQUAL            * yes - not a resubmission
.
.         Update the next batch number in the original source claim for this
.         resubmission
. 
          MOVE      PMECPBAT,SAVPRVBN            * save previous batch number
          PACK      KEY35,PMECHOSP,TEN5,PMECHFND,PMECADMN,PMECINVN,SAVPRVBN
          CALL      RDPMECT1
          BRANCH    OVRCD,PROC9999        
.
          MOVE      SAVBTHN,PMECNBAT
          CALL      UPPMECT1
.
PROC9999  RETURN
+
.******************************************************************************
.*                                  PREP0000              Called by: WRIT0000 *
.*                            Prep extract file                               *
.******************************************************************************
.
.         Get the next batch number
.
PREP0000  MOVE      " 98",PRXCODE                * System Lock Sector 98     
          CALL      GETSLK00                     * Get System Lock-Sector 98 
.
          READ      CONTROLF,NINTY8;*157,PTCNBTHN
          UNPACK    PTCNBTHN,DIM2,BATCHNO
.  
          MOVE      BATCHNO,FORM6A
.
          COMPARE   "999999",FORM6A 
          IF        @EQUAL
            MOVE      ZERO,PTCNBTHN              * Initialise the batch number
          ENDIF
.
          ADD       ONE,PTCNBTHN                 * Increment next batch number
          WRITAB    CONTROLF,NINTY8;*157,PTCNBTHN
.
          CALL      RELSLK00                     * Release System Lock-Sector 98
.
          MOVE      FORM6A,SAVBTHN
          MOVE      FORM6A,BATCHNO               * load new batch number
.
.         Format the extract filename
.
          REP       " 0",BATCHNO
.
.         If multi-hospital is turned on, use the hospital prefix if not
.         blank, otherwise use the default prefix parameter.
.
          COMPARE   ONE,IBCNMHOS                 * using multi-hospital ?
          GOTO      PREP1000 IF NOT EQUAL        * no
.
          MATCH     SP3,PMECHOSP                 * blank hospital code ?
          GOTO      PREP1000 IF EQUAL            * yes - use default parameter
.
          MATCH     SP2,PTHSEDIP                 * blank hospital prefix ?
          GOTO      PREP1000 IF EQUAL            * yes - use default parameter
.
          PACK      FILENAME,PTHSEDIP,BATCHNO    * use hospital specific prefix
          GOTO      PREP2000
.
.         Use default parameter for hospital prefix
.
PREP1000  PACK      FILENAME,PTCNEDIH,BATCHNO
PREP2000  PACK      EXTFNAME,FILENAME
          PREP      EXTFILE1,EXTFNAME
.
          MOVE      SAVBTHN,PMEBBTHN
          PACK      PMEBHFND,PMECHFND,SP10
          MOVE      ZERO,PMEBBHTL
          MOVE      RECCNT,PMEBTRIB
          CALL      IBACLOCK
          PACK      PMEBDTBC,CCC,CYY,CMM,CDD
          REP       " 0",PMEBDTBC
          MOVE      CTIMEIS,PMEBTMBC
.
          MOVE      SP10,PMEBOPER
          PACK      KEY14,PASSCODE,SP20
          CALL      RSWBSE3
          CALL      RKWBSE3
          IF        OVRCD = 0
            MATCH     PASSCODE,WBSEPCD
            IF        @EQUAL
              MOVE      WBSEUID,PMEBOPER
            ENDIF
          ENDIF
.
          IF        OPTION = 1
            MOVE      ZERO,PMEBEETP
          ELSE
            MOVE      ONE,PMEBEETP
          ENDIF
          PACK      PMEBEFNM,FILENAME,SP20
          PACK      PMEBSPAR,SP30,SP10
          CALL      WRPMEBH1
.
          MOVE      ZERO,TOTAMTCT                * Clear the total amt counter
.
PREP9999  RETURN
+
.******************************************************************************
.*                                  UPBT0000              Called by: WRIT0000 *
.*        Update batch totals and move extract file to outbound directory     *
.******************************************************************************
.
UPBT0000  MOVE      SAVBTHN,KEY8
          CALL      RDPMEBH1
          IF        OVRCD = 1
            DISPLAY   *P1:24,*EL,*B,"Error writing pmsebhaf record.  ";
            CALL      HITENTER
            GOTO      UPBT1000
          ENDIF
.
          MOVE      TOTAMTCT,PMEBBHTL          * update batch total
          MOVE      HDRSEG02,PMEBLOCN          * update location
          MOVE      HDRSEG04,PMEBSNID          * update sender id
          CALL      UPPMEBH1
.
.         Move extract file file to output path
.
UPBT1000  MOVE      ZERO,HLEF
          CALL      GETSCR00
          STRIP     PTCNECLO
          CLEAR     CMDLINE
          APPEND    "mv ",CMDLINE
          APPEND    FILENAME,CMDLINE
          APPEND    ".txt ",CMDLINE
          APPEND    PTCNECLO,CMDLINE
          RESET     CMDLINE
          EXECUTE   CMDLINE,TASKID
.
          CALL      PUTSCR00
.
UPBT9999  RETURN
+
.******************************************************************************
.*                                  TAIL0000              Called by: MAIN0000 *
.*                              Print Report Tail                             *
.******************************************************************************
.
TAIL0000  CALL      UND132
.
          PRINT     *N,*1,"Total Records Read      : ",RECCNT:
                    *N,*1,"Total Number of Errors  : ",ERRCT:
                    *N,*1,"Total Number of Warnings: ",WARCT:
                    *N,*N,*1,"Total Records Extracted : ",WRTCT
.
          IF        RECCNT =0
            PRINT     *N,*1,"No Extract file created"
            GOTO      TAIL2000
          ENDIF
          BRANCH    VALDFLG,TAIL9000
.
TAIL1000  PRINT     *N,*1,"Extract filename created : ",*+,FILENAME,*-,TXT
.
TAIL2000  PRINT     *N,*N,"*** End of Report ***"
.
          CALL      RERR0000                     * reset error records
.
TAIL9000  MOVE      ZERO,EXIT
.
TAIL9999  RETURN
+
.*****************************************************************************
.*                             CTMP0000            Called by: MAIN0000       *
.*                      Create temporary files                               *
.*****************************************************************************
.
CTMP0000  CALL      TFILENAM                     * Generate temporary file name
          MOVE      TFILNAME,TEMPFIL1
.
          CALL      TFILENAM                     * Generate temporary file name
          MOVE      TFILNAME,TEMPFIL2
.
          CALL      TFILENAM                     * Generate temporary file name
          MOVE      TFILNAME,TEMPFIL3
.
          CALL      KILL0000
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ISBUILD,TEMPFIL1,UKEY1
          EXECUTE   CMDLINE,TASKID
          OPEN      LSTTEMP1,TEMPFIL1
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ISBUILD,TEMPFIL2,UKEY2
          EXECUTE   CMDLINE,TASKID               * create temporary index file
          OPEN      MSGTEMP2,TEMPFIL2            * open temp index file
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ISBUILD,TEMPFIL3,UKEY3
          EXECUTE   CMDLINE,TASKID               * create temporary index file
          OPEN      ACCTEMP3,TEMPFIL3            * open temp index file
          OPEN      ACCTEMP4,TEMPFIL3            * open temp index file
.
CTMP9999  RETURN
+
.*****************************************************************************
.*                             KILL0000             Called by: MAIN0000      *
.*                   erase temporary file                      CREA0000      *
.*****************************************************************************
.
KILL0000  CLOSE     LSTTEMP1                     * close file
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ERASE,TEMPFIL1       * set file erase command
          EXECUTE   CMDLINE,TASKID               * erase temp file
.
          CLOSE     MSGTEMP2                     * close file
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ERASE,TEMPFIL2       * set file erase command
          EXECUTE   CMDLINE,TASKID               * erase temp file
.
          CLOSE     ACCTEMP3                     * close file
          CLOSE     ACCTEMP4                     * close file
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ERASE,TEMPFIL3       * set file erase command
          EXECUTE   CMDLINE,TASKID               * erase temp file
.
KILL9999  RETURN
+
.*****************************************************************************
.*                             CLRF0000            Called by: GFND0000       *
.*               Clear all temporary table records            GCLM0000       *
.*****************************************************************************
.
CLRF0000  MOVE      SP20,KEY16
          CALL      RSTEMP1                      * position at start of file
          CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,CLRF9999               * end of file - finished
.
          PACK      KEY16,LISTADMN,LISTINVN
          CALL      DETEMP1                      * delete record
	  GOTO      CLRF0000                     * get next record
.
CLRF9999  RETURN
+
.*****************************************************************************
.*                              RERR0000           Called by: MAIN0000       *
.*             Reset error records back to zero status (Not Sent)            *
.*             just in case there were any problems with a previous          *
.*             batch and the error records were not set back to zero.        *
.*****************************************************************************
.
RERR0000  MOVE      HOSPCODE,SAVEHOSP            * initialise hospital
          MOVE      ZERO,FIRSTFLG                * initialise flag
.
          IF        OPTION = 1
            PACK      KEY35,HOSPCODE,SP1,ONE,HCODE,SP30,SP10
          ELSE
            PACK      KEY35,HOSPCODE,SP1,ONE,CLAMCODE,SP3,SP30,SP10
          ENDIF
RERR0500  CALL      RSPMECT1                     * position in file
          CALL      RKPMECT1                     * read next record
          BRANCH    OVRCD,RERR9999               * eof - finished
.
          IF        FIRSTFLG = 0
            MATCH     SP3,HOSPCODE               * all hospitals extract ?
            IF        @EQUAL
              MOVE      PMECHOSP,SAVEHOSP        * yes-load first hospital code
            ENDIF
            MOVE      ONE,FIRSTFLG               * set first flag to no
          ENDIF
.
          MATCH     SP3,HOSPCODE                 * all hospitals extract ?
          GOTO      RERR5000 IF NOT EQUAL        * no
.
.         We are running an extract for all hospitals
.
          MATCH     SAVEHOSP,PMECHOSP            * same hospital still ?
          IF        !@EQUAL
            MOVE      PMECHOSP,SAVEHOSP          * no - save new hospital code
            IF        OPTION = 1
              PACK      KEY35,PMECHOSP,SP1,ONE,HCODE,SP30,SP10
            ELSE
              PACK      KEY35,PMECHOSP,SP1,ONE,CLAMCODE,SP3,SP30,SP10
            ENDIF
            GOTO      RERR0500
          ENDIF
.
          COMPARE   ONE,PMECFLAG                 * error record still ?
          GOTO      RERR4000 IF NOT EQUAL        * no - get next hospital
.
          IF        OPTION = 1
            MATCH     HCODE,PMECHFND             * same health fund still ?
            GOTO      RERR4000 IF NOT EQUAL      * no - finished
          ELSE
            MATCH     CLAMCODE,PMECHFND          * same claim code still ?
            GOTO      RERR4000 IF NOT EQUAL      * no - finished
          ENDIF
.
          GOTO      RERR8000
.
RERR4000  PACK      KEY35,PMECHOSP,TILDA40
          GOTO      RERR0500
.
.         We are running an extract for a given hospital id
.
RERR5000  MATCH     HOSPCODE,PMECHOSP            * same hospital still ?
          GOTO      RERR9999 IF NOT EQUAL        * no - finished
.
          COMPARE   ONE,PMECFLAG                 * error record still ?
          GOTO      RERR9999 IF NOT EQUAL        * no - finished
.
          IF        OPTION = 1
            MATCH     HCODE,PMECHFND             * same health fund still ?
            GOTO      RERR9999 IF NOT EQUAL      * no - finished
          ELSE
            MATCH     CLAMCODE,PMECHFND          * same claim code still ?
            GOTO      RERR9999 IF NOT EQUAL      * no - finished
          ENDIF
.
.         Reset the record status to "Waiting"
.
RERR8000  PACK      SAVKEY35,PMECHOSP,PMECFLAG,PMECHFND,PMECADMN,PMECINVN:
                             PMECBATN
          MOVE      ZERO,PMECFLAG                * yes - reset flag to "0"
          CALL      UPPMECT1                     * update record
          MOVE      SAVKEY35,KEY35               * load key to reposition
          GOTO      RERR0500                     * get next record
.
RERR9999  RETURN
+
.*****************************************************************************
.*                             LOAD0000               Called by: MAIN0000    *
.*        Load all invoice records waiting to be extracted for the           *
.*        selected health fund or claim code                                 *
.*****************************************************************************
.
LOAD0000  MATCH     "IBARSH",PGM                 * using web front-end ?
          IF        @EQUAL
            CALL      WLOD0000                   * yes - load list array
            GOTO      LOAD9999
          ENDIF
.
.         Program is running from the character system
.
          IF        OPTION = 1
            DISPLAY   *P39:4," Health Fund : ",*V2LON,HCODE,*HOFF,SP2,HFNAME
          ELSE
            DISPLAY   *P39:4," Claim Code : ",*V2LON,CLAMCODE,*HOFF,SP2:
                      CLAMDESC
          ENDIF
.
          PACK      KEY35,HOSPCODE,SP1,ZERO,SP30,SP10
LOAD0400  CALL      RSPMECT1                     * position in file
LOAD0500  CALL      RKPMECT1                     * read next record
          BRANCH    OVRCD,LOAD9999               * end of file
.
          MATCH     SP3,HOSPCODE                 * all hospitals ?
          IF        !@EQUAL
            MATCH     HOSPCODE,PMECHOSP          * no - same hospital still ?
            GOTO      LOAD9999 IF NOT EQUAL      * no - finished
          ENDIF
.
          COMPARE   ZERO,PMECFLAG                * waiting for extract still ?
          IF        !@EQUAL
            PACK      KEY35,PMECHOSP,TILDA40
            GOTO      LOAD0400                   * get next record
          ENDIF
.
.         Check for Processing by Health Fund option
.
          IF        OPTION = 1
            MATCH     HCODE,PMECHFND             * same health fund ?
            GOTO      LOAD0500 IF NOT EQUAL      * no - ignore record
.
            COMPARE   ZERO,PMECEETP              * health fund claim type ?
            GOTO      LOAD0500 IF NOT EQUAL      * no - ignore record
            GOTO      LOAD2000                   * yes
          ENDIF
.
.         Processing by claim code option
.
LOAD1000  MOVE      PMECADMN,KEY8
          CALL      RDMISS1                      * admission on file ?
          BRANCH    OVRCD,LOAD0500               * no - ignore record
.
          MATCH     SP3,ACLAIM                   * blank claim code ?
          GOTO      LOAD0500 IF EQUAL            * yes - ignore record
.
          CALL      EXNB0000                     * Excluded newborn
          BRANCH    EXIT,LOAD0500
.
.         Check we have the same claim code
.
          MATCH     CLAMCODE,ACLAIM              * same claim code ?
          GOTO      LOAD0500 IF NOT EQUAL        * no - ignore record
.
          COMPARE   ONE,PMECEETP                 * claim code claim type ?
          GOTO      LOAD0500 IF NOT EQUAL        * no - ignore record
.
.         A waiting record for the health fund/claim code has been found,
.         so get the invoice details and calculate the amount outstanding.
.
LOAD2000  MOVE      PMECINVN,KEY8
          CALL      RDINV1                       * invoice record found ?
          IF        OVRCD = 1
            MOVE      SP8,PINVDTE                * no
            MOVE      ZERO,PINVAMT
          ELSE
.                                          *** CAR 20135 Ignore Cancelled Inv.
.                                          * ignore (split) Pat.Invoice C-65745
            MATCH    ZEROVISN,PINVADM
            IF       @EQUAL
              GOTO      LOAD9000                 * delete claim
            ENDIF
.
            IF        PINVTYP = 2
              GOTO      LOAD9000                 * delete claim
            ENDIF
.
            ASSIGN    (PINVAMT+PINVPATA+PINVHFDA+PINVOTHA+PINVJOUR),FORM12P2
            IF        IBCNUGST=2
              ADD       PTINGSTJ,FORM12P2
            ENDIF
          ENDIF
.
          MOVE      PMECADMN,LISTADMN
          MOVE      PMECINVN,LISTINVN
          MOVE      PMECURNO,LISTURNO
          MOVE      PINVDTE,LISTDATE
          MOVE      FORM12P2,LISTAMNT
          MOVE      ZERO,LISTFLAG
          MOVE      PMECHOSP,LISTHOSP
          CALL      WRTEMP1                      * write temp file record
.
          GOTO      LOAD0500                     * get next record
.
.         The current record is not going to be extracted, so delete it
.         and reposition in pmsectaf
.
LOAD9000  PACK      SAVKEY35,PMECHOSP,PMECFLAG,PMECHFND,PMECADMN,PMECINVN:
                             PMECBATN
          MOVE      SAVKEY35,KEY35
          CALL      DEPMECT1                 * delete cancelled/zero invoices
          MOVE      SAVKEY35,KEY35
          CALL      RSPMECT1
          GOTO      LOAD0500
.
LOAD9999  RETURN
+
.*****************************************************************************
.*                             WLOD0000               Called by: LOAD0000    *
.*      The extract is being run from the web front-end, so load the passed  *
.*      array variables into the tempfile.                                   *
.* Requires: an array occurrence for each claim to be extracted.  The array  *
.*           has the following format:                                       *
.*                    Hospital Id      - char(3)                             *
.*                    Admission Number - char(8)  right justified            *
.*                    Invoice Number   - char(8)  right justified            *
.*                    U/R Number       - char(8)  right justified            *
.*                    Invoice Date     - char(8)  ccyymmdd                   *
.*                    Outstanding Invoice Amount - char(15)                  *
.*****************************************************************************
.
.         Clear list array
.
WLOD0000  MOVE      ZERO,LSTCOUNT
          WHILE     LSTCOUNT < 50
            ADD       ONE,LSTCOUNT
            PACK      LISTARRY[LSTCOUNT],SP30,SP20
          DO
.
.         Receive list array input from web front-end via keyin until
.         a blank record is received (end of array) or limit is reached
.
          MOVE      ZERO,LSTCOUNT
          WHILE     LSTCOUNT < 50
            ADD       ONE,LSTCOUNT
            KEYIN     LISTARRY[LSTCOUNT]
            PACK      LISTARRY[LSTCOUNT],LISTARRY[LSTCOUNT],SP70
            MATCH     SP70,LISTARRY[LSTCOUNT]    * last array record ?
            GOTO      WLOD1000 IF EQUAL          * yes
          DO
.
          ADD       ONE,LSTCOUNT            * only if array limit reached
.
.         Write each array record to the temp file
.
WLOD1000  WHILE     LSTCOUNT > 1
            SUB       ONE,LSTCOUNT
            UNPACK    LISTARRY[LSTCOUNT],LISTHOSP,LISTADMN,LISTINVN,LISTURNO:
                                         LISTDATE,DIM15
            MOVE      ZERO,LISTFLAG
            MOVE      DIM15,LISTAMNT
            CALL      WRTEMP1
          DO
.
WLOD9999  RETURN
+
.*****************************************************************************
.*                             DCLM0000               Called by: MAIN0000    *
.*      Display records waiting for extraction for the selected Health Fund  *
.*      or Claim Code.                                                       *
.* Returns:  EXIT  0 = Process claim extract                                 *
.*                 1 = Cancel selected                                       *
.*****************************************************************************
.
DCLM0000  DISPLAY   *P48:5,*V2LON,"Outstanding":
                    *P1:6,*EF,*ULON,"Item",*P6:6,"Admission":
                    *P16:6,"Invoice ",*P25:6,"U/R No. ",*P34:6,"Invoice Date":
                    *P47:6,"    Invoice Amount",*P66:6,"Extract"
.
          MATCH     SP3,HOSPCODE
          IF        @EQUAL
            DISPLAY   *P74:6,*V2LON,*ULON,"Hosp"
          ENDIF
.
          MOVE      ONE,CPAGENO
          MOVE      SIX,CVERT                    * Reset line number
          MOVE      ZERO,FIELD                   * Reset record count
.
          MOVE      SP20,KEY16
          CALL      RSTEMP1                      * position in file
DCLM1000  CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,DCLM5000               * end of file
.
          ADD       ONE,CVERT                    * increment line count
.
          COMPARE   TWENTY3,CVERT                * page full ?
          GOTO      DCLM4000 IF NOT LESS         * yes
.
DCLM3000  ADD       ONE,FIELD                    * increment field count
.
          MATCH     SP8,LISTDATE                 * invoice date blank ?
          IF        @EQUAL
            MOVE      "Invoice   ",CPCDATE
            MOVE      "  not found",DIM15
          ELSE
            UNPACK    LISTDATE,CCENT,CYEAR,CMON,CDAY
            CALL      PACDATE
            MOVE      LISTAMNT,DIM15
          ENDIF
.
.         Only display extract flag if record is NOT set for extraction
.
          MOVE      DYES,FLAGDIM3
          LOAD      FLAGDIM3,LISTFLAG,DNO
          PACK      FLAGDIM3,FLAGDIM3,SP1
.
          IF        LISTFLAG = 1
            DISPLAY   *P1:CVERT,*V2LON,*HON,FIELD,*HOFF,*HON,SP4:
                      LISTADMN,SP1,LISTINVN,SP1,LISTURNO,SP2,CPCDATE:
                      SP5,DIM15,SP3,FLAGDIM3,SP2
            MATCH     SP3,HOSPCODE
            IF        @EQUAL
              DISPLAY   *P74:CVERT,*HON,LISTHOSP
            ENDIF
          ELSE
            DISPLAY   *P1:CVERT,*V2LON,FIELD,*HOFF,*P7:CVERT,LISTADMN:
                      *P16:CVERT,LISTINVN,*P25:CVERT,LISTURNO:
                      *P35:CVERT,CPCDATE,*P50:CVERT,DIM15,*P68:CVERT,FLAGDIM3
            MATCH     SP3,HOSPCODE
            IF        @EQUAL
              DISPLAY   *P74:CVERT,LISTHOSP
            ENDIF
          ENDIF
          PACK      TMPKEY[FIELD],LISTADMN,LISTINVN
          GOTO      DCLM1000
.
.         new page needed 
.
DCLM4000  BRANCH    CPAGENO,DCLM4500
.
.         in middle pages : Next & First options
.
DCLM4100  MOVE      "1",CALLPOSN                 * set call position
          CALL      KEYC0000                     * keyin response
          BRANCH    EXIT,DCLM9999:               * exit
                         DCLM7000:               * next
                         DCLM8000:               * previous
                         DCLM6000:               * swap extract flag
                         DCLM6500:               * include all
                         DCLM6600                * exclude all
          GOTO      DCLM9000                     * post
.
.         on first page : Next option
.
DCLM4500  MOVE      "2",CALLPOSN                 * set call position
          CALL      KEYC0000                     * keyin response
          BRANCH    EXIT,DCLM9999:               * exit
                         DCLM7000:               * next
                         DCLM5900:               * previous
                         DCLM6000:               * swap extract flag
                         DCLM6500:               * include all
                         DCLM6600                * exclude all
          GOTO      DCLM9000                     * post
.
.         end of data
.
DCLM5000  BRANCH    CPAGENO,DCLM5500
.
.         in middle pages : First option
.
DCLM5100  MOVE      "3",CALLPOSN                 * set call position
          CALL      KEYC0000                     * keyin response
          BRANCH    EXIT,DCLM9999:               * exit
                         DCLM5900:               * next
                         DCLM8000:               * prev
                         DCLM6000:               * swap extract flag
                         DCLM6500:               * include all
                         DCLM6600                * exclude all
          GOTO      DCLM9000                     * post
.
.         on first page : No options
.
DCLM5500  MOVE      "4",CALLPOSN                 * set call position
          CALL      KEYC0000                     * keyin response
          BRANCH    EXIT,DCLM9999:               * exit
                         DCLM5900:               * next
                         DCLM5900:               * previous
                         DCLM6000:               * swap extract flag
                         DCLM6500:               * include all
                         DCLM6600                * exclude all
          GOTO      DCLM9000                     * post
.
DCLM5900  BEEP
DCLM5910  BRANCH    CALLPOSN,DCLM4100,DCLM4500,DCLM5100,DCLM5500
.         
.         A valid selection has been made so swap the extract flag value
.
DCLM6000  MOVE      TMPKEY[FORM2],KEY16     
          CALL      RDTEMP1
          BRANCH    OVRCD,DCLM0000
.
          IF        LISTFLAG = 0
            MOVE      ONE,LISTFLAG
          ELSE
            MOVE      ZERO,LISTFLAG
          ENDIF
          CALL      UPTEMP1
.
.         Now redisplay the current screen again
.
          MOVE      TMPKEY[1],KEY16
          CALL      RDTEMP1
          BRANCH    OVRCD,DCLM0000
.
          MOVE      SEVEN,CVERT
          DISPLAY   *P1:CVERT,*EF
          MOVE      ZERO,FIELD
          GOTO      DCLM3000
.
.         Set all records for extract
.
DCLM6500  MOVE      ZERO,INCLFLAG
          GOTO      DCLM6700
.
.         Set all records to be excluded from extract
.
DCLM6600  MOVE      ONE,INCLFLAG
DCLM6700  COMPARE   ZERO,FIELD                   * any records displayed ?
          GOTO      DCLM0000 IF EQUAL            * no - finished
.
          CALL      RSET0000
          MOVE      TMPKEY[1],KEY16
          CALL      RDTEMP1                      * reread first record on screen
          BRANCH    OVRCD,DCLM0000
.
          MOVE      SEVEN,CVERT
          DISPLAY   *P1:CVERT,*EF
          MOVE      ZERO,FIELD
          GOTO      DCLM3000                     * redisplay list
.
.         next screen selected
.
DCLM7000  MOVE      SEVEN,CVERT
          ADD       ONE,CPAGENO
          DISPLAY   *P1:CVERT,*EF
          MOVE      ZERO,FIELD
          GOTO      DCLM3000
.
.         previous screen selected
.
DCLM8000  MOVE      TMPKEY[1],KEY16
          CALL      RDTEMP1                      * reread first record on screen
          MOVE      ZERO,FORM2                   * initialise count
          WHILE     FORM2 <= 15
            CALL      RPTEMP1                    * read previous record
            BRANCH    OVRCD,DCLM0000             * start of file
.
            ADD       ONE,FORM2                  * increment count
          DO
.
          MOVE      SEVEN,CVERT                  * reset line position
          SUB       ONE,CPAGENO                  * decrement page number
          MOVE      ZERO,FIELD                   * reset record counter
          DISPLAY   *P1:CVERT,*EF
          GOTO      DCLM3000
.
DCLM9000  MOVE      ZERO,CPAGENO                 * initialise print variables
          MOVE      ZERO,CNOUNDLN
          CALL      IBACLOCK
.
          MOVE      ZERO,EXIT
          GOTO      DCLM9999
.
DCLM9100  MOVE      ONE,EXIT
.
DCLM9999  RETURN
+
.*****************************************************************************
.*                             RSET0000            Called by: DCLM0000       *
.*   Reset all records for either inclusion or exclusion as required         *
.* Requires: INCLFLAG  0 = set all records for inclusion in extract          *
.*                     1 = set all records for exclusion from extract        *
.*****************************************************************************
.
RSET0000  MOVE      SP20,KEY16
          CALL      RSTEMP1                      * position at start of file
RSET0500  CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,RSET9999               * end of file - finished
.
          MOVE      INCLFLAG,LISTFLAG            * set inclusion flag
          CALL      UPTEMP1                      * update record
	  GOTO      RSET0500                     * get next record
.
RSET9999  RETURN
+
.*****************************************************************************
.*                  KEYC0000                    Called by : DCLM0000         *
.*        Keyin response to prompt                                           *
.*        Returns : EXIT = 0      Post entered                               *
.*                  EXIT = 1      Exit entered                               *
.*                  EXIT = 2      Next entered                               *
.*                  EXIT = 3      Prev entered                               *
.*                  EXIT = 4      Extract flag swapped                       *
.*                  EXIT = 5      Include All                                *
.*                  EXIT = 6      Exclude All                                *
.*****************************************************************************
.
KEYC0000  DISPLAY   *P1:24,*EL,"Select Item, (",*V2LON,ANSI,*HOFF:
                    ")nclude all, e(",*V2LON,ANSX,*HOFF,")clude all, (":
                    *V2LON,ANSP,*HOFF,")ost, (",*V2LON,ANSC,*HOFF,")ancel";
          MOVE      FIFTY8,CCOL
          IF        CALLPOSN = 1 | CALLPOSN = 2
            DISPLAY   ", (",*V2LON,ANSN,*HOFF,")ext";
            ADD       EIGHT,CCOL
          ENDIF
          IF        CALLPOSN = 1 | CALLPOSN = 3
            DISPLAY   ", p(",*V2LON,ANSR,*HOFF,")ev.";
            ADD       NINE,CCOL
          ENDIF
.
          DISPLAY   " :  ";
          ADD       FOUR,CCOL
.
KEYC1000  KEYIN     *PCCOL:24,*V2LON,*JR,DIM2:
                    *PCCOL:24,*DV,DIM2
          PACK      DIM2,DIM2,SP2
          UNPACK    DIM2,ANS,ANS
          REP       UPPLOW,ANS              
.
          MATCH     ANSC,ANS                * cancel selected ?
          GOTO      KEYC9100 IF EQUAL       * yes
.
          MATCH     ANSN,ANS                * next page selected ?
          GOTO      KEYC9200 IF EQUAL       * yes
.
          MATCH     ANSR,ANS                * previous page selected ?
          GOTO      KEYC9300 IF EQUAL       * yes
.
          MATCH     ANSP,ANS                * post selected ?
          GOTO      KEYC9000 IF EQUAL       * yes
.
          MATCH     ANSI,ANS                * include all selected ?
          GOTO      KEYC9500 IF EQUAL       * yes
.
          MATCH     ANSX,ANS                * exclude all selected ?
          GOTO      KEYC9600 IF EQUAL       * yes
.         
          TYPE      DIM2
          GOTO      KEYC5000 IF EQUAL       * a number entered
.         
KEYC1500  BEEP
          GOTO      KEYC1000
.         
.         number entered directly
.         
KEYC5000  MOVE      DIM2,FORM2
.
          COMPARE   FORM2,ZERO              * number < 1 ?
          GOTO      KEYC1500 IF NOT LESS    * yes - invalid
.
          COMPARE   FORM2,FIELD             * number in range ?
          GOTO      KEYC1500 IF LESS        * no - too high
.
          GOTO      KEYC9400
.
KEYC9000  MOVE      ZERO,EXIT               * post
          GOTO      KEYC9999
.
KEYC9100  MOVE      ONE,EXIT                * exit
          GOTO      KEYC9999
.
KEYC9200  MOVE      TWO,EXIT                * next
          GOTO      KEYC9999
.
KEYC9300  MOVE      THREE,EXIT              * previous
          GOTO      KEYC9999
.
KEYC9400  MOVE      FOUR,EXIT               * swap extract flag
          GOTO      KEYC9999
.
KEYC9500  MOVE      FIVE,EXIT               * include all
          GOTO      KEYC9999
.
KEYC9600  MOVE      SIX,EXIT                * exclude all
          GOTO      KEYC9999
.
KEYC9999  RETURN
+
.******************************************************************************
.*                             WHDR0000            Called by: WRIT0000        *
.*                  Write the header segment                  VALD0000        *
.******************************************************************************
.
WHDR0000  MOVE      SAVBTHN,HDRSEG01             * load batch number
          REP       " 0",HDRSEG01
.
.         Load the Location ID.
.         If multi-hospital is turned on, use the hospital location if not 
.         blank, otherwise use the default location parameter.
.
          COMPARE   ONE,IBCNMHOS                 * using multi-hospital ?
          GOTO      WHDR1000 IF NOT EQUAL        * no
.
          MATCH     SP3,PMECHOSP                 * blank hospital ?
          GOTO      WHDR1000 IF EQUAL            * yes - default to parameter
.
          MATCH     SP8,PTHSLOCN                 * blank location for hosp. ?
          GOTO      WHDR1000 IF EQUAL            * yes - default to parameter
.
          MOVE      PTHSLOCN,HDRSEG02            * set location id
          GOTO      WHDR2000
.
.         Use the default location parameter
.
WHDR1000  MATCH     SP8,PTCNCLID
          IF        @EQUAL
            MOVE      "HDR.01-Current Location not set up",ERRMSG
            CALL      PERR0000
          ELSE
            MOVE      PTCNCLID,HDRSEG02          * set location id
          ENDIF
.
WHDR2000  PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
.
.         Get the certificate that covers today
.
          PACK      KEY16,HDRSEG02,CURRDATE
          CALL      RDPTCTI1                     * record found for today ?
          COMPARE   ZERO,OVRCD
          GOTO      WHDR9000 IF EQUAL            * yes - use this certificate id
.
          CALL      RPPTCTI1                     * no - read previous record
          IF        OVRCD = 0
            MATCH     CURRDATE,PTCITDTE           * within date range ?
            GOTO      WHDR9000 IF NOT LESS       * yes - use this certificate id
          ENDIF
.
          MOVE      "HDR.02-Current Certificate not available",ERRMSG
          CALL      PERR0000
.
WHDR9000  MATCH     SP10,PTCIIDEN
          IF        @EQUAL
            MOVE      "HDR.03-Certificate Identifier blank",ERRMSG
            CALL      PERR0000
          ELSE
            MOVE      PTCIIDEN,HDRSEG03          * load certificate identifier
          ENDIF
.
          MATCH     SP60,PTCISNID
          IF        @EQUAL
            MOVE      "HDR.04-Sender Id blank",ERRMSG
            CALL      PERR0000
          ELSE
            MOVE      PTCISNID,HDRSEG04          * load sender id
          ENDIF
.
.         Load the Test/Production flag for the claim based on the setting for
.         either the Health Fund or the claim code.
.
          IF        OPTION = 1
            MOVE      PTFXTFLG,HDRSEG05
          ELSE
            MOVE      PTCNUTPD,HDRSEG05
          ENDIF
.
          BRANCH    VALDFLG,WHDR9999             * validation only
.
          WRITE     EXTFILE1,SEQ;TILDA01,ANSH,ANSD,ANSR:
                                 HDRSEG01,HDRSEG02,HDRSEG03,HDRSEG04,HDRSEG05
.
WHDR9999  RETURN
+
.******************************************************************************
.*                                  WCID0000              Called by: VALD0000 *
.*                           Write Claim Id Details                & WRIT0000 *
.******************************************************************************
.
.         Note: CIDSEG04 is set prior to WCID0000 being called, so
.         it is not cleared here.
.
WCID0000  UNPACK    SP70,CIDSEG01,CIDSEG02,CIDSEG03,CIDSEG05
          UNPACK    SP70,CIDSEG06,CIDSEG07,CIDSEG08,CIDSEG09,CIDSEG10
          PACK      CIDSEG11,SP70,SP70
          UNPACK    SP70,CIDSEG12,CIDSEG13,CIDSEG14
          UNPACK    SP70,CIDSEG15,CIDSEG16,CIDSEG17
          REP       " 0",CIDSEG06
          REP       " 0",CIDSEG14
          REP       " 0",CIDSEG15
          REP       " 0",CIDSEG16
          REP       " 0",CIDSEG17
.
.         Load AccountReferenceId (Invoice Number)
.
          PACK      CIDSEG01,INVNO,SP20
          SQUEEZE   CIDSEG01
          PACK      CIDSEG01,CIDSEG01,SP20
.
.         Load ClaimTypeCde & FacilityTypeCode.
.         Check if this is a private or public provider and whether or not
.         it is a day facility.  For multi-hospital, use the hospital file
.         field, otherwise, use the default parameters.
.
          COMPARE   ONE,IBCNMHOS                 * using multi-hospital ?
          GOTO      WCID0500 IF NOT EQUAL        * no - use parameters
.
.         Using Multi-hospital
.
          MATCH     SP3,PMECHOSP                 * blank hospital code ?
          GOTO      WCID0500 IF EQUAL            * yes - use default parameters
.
          MATCH     SP1,PTHSHOST                 * blank hospital type ?
          GOTO      WCID0500 IF EQUAL            * yes - use default parameters
.
          TYPE      PTHSHOST                     * numeric value ?
          IF        !@EQUAL
            MOVE      "CID.02-Hospital Type is not numeric",ERRMSG
            CALL      PERR0000
            GOTO      WCID0900
          ENDIF
.
          MOVE      PTHSHOST,FORM1               * hospital type valid ?
          IF        FORM1 > 3
            MOVE      "CID.03-Hospital Type is not valid",ERRMSG
            CALL      PERR0000
            GOTO      WCID0900
          ENDIF
.
          ADD       ONE,FORM1
          LOAD      CIDSEG02,FORM1,CODEPR,CODEPU,CODEPR,CODEPU
          LOAD      CIDSEG06,FORM1,CHARNUM2,CHARNUM1,CHARNUM3,CHARNUM4
          GOTO      WCID0900
.
.         Not using Multi-hospital
.
WCID0500  IF        PTCNDFIN = 0
            IF        CHOSTYP = 0
              PACK      CIDSEG02,ANSP,ANSR       * private - not day facility
              MOVE      TWO,CIDSEG06
            ELSE
              IF        CHOSTYP = 1
                PACK      CIDSEG02,ANSP,ANSU     * public - not day facility
                MOVE      ONE,CIDSEG06
              ENDIF
            ENDIF
          ELSE
            IF        CHOSTYP = 0
              PACK      CIDSEG02,ANSP,ANSR       * private day facility
              MOVE      THREE,CIDSEG06
            ELSE
              IF        CHOSTYP = 1
                PACK      CIDSEG02,ANSP,ANSU     * public day facility
                MOVE      FOUR,CIDSEG06
              ENDIF
            ENDIF
          ENDIF
.
          MATCH     SP2,CIDSEG02
          IF        @EQUAL
            MOVE      "CID.09-ClaimTypeCde is mandatory",ERRMSG
            CALL      PERR0000
          ENDIF
.
.         If this is a public Hospital DVA claim, then
.         this claim is not available (for the time being).
.
WCID0900  COMPARE   TWO,OPTION                   * DVA claim ?
          GOTO      WCID1000 IF NOT EQUAL        * no
.
          MATCH     "PU",CIDSEG02
          IF        @EQUAL
            MOVE      "CID.11-DVA claim not available to public hospital",ERRMSG
            CALL      PERR0000
          ENDIF
.
WCID1000  MATCH     SP1,CIDSEG06
          IF        @EQUAL
            MOVE      "CID.10-FacilityTypeCode is mandatory",ERRMSG
            CALL      PERR0000
          ENDIF
.
.         Load FacilityId
.
          IF        IBCNMHOS = 1
            MOVE      PTHSAPPR,DIM8
          ELSE
            MOVE      CAPPRVNO,DIM8
          ENDIF
          MOVE      ONE,PROVFLAG                 * set flag to hospital facility
          CALL      VPRN0000                     * valid provider ?
          BRANCH    EXIT,WCID1050                * no
.
          IF        IBCNMHOS = 1
            MOVE      PTHSAPPR,CIDSEG05          * Hospital Facility Provider #
          ELSE
            MOVE      CAPPRVNO,CIDSEG05          * Hospital Facility Provider #
          ENDIF
.
.         Load FundBrandId
.
WCID1050  IF        OPTION = 1
            MOVE      ECLKEY3,CIDSEG07           * load HF participant code
          ELSE
            MOVE      CVETINS,CIDSEG07           * load DVA participant code
          ENDIF
.
.         Load SenderContactEmail.
.         If extracting by health fund, then use the health fund contact if not
.         blank, otherwise default to the parameter contact value.
.         If extracting by claim code, then use the insurance contact if not
.         blank, otherwise default to the parameter contact value.
.
          IF        OPTION = 1
            MATCH     SP80,PTFXSCEM
            IF        !@EQUAL
              PACK      CIDSEG11,PTFXSCEM,SP70,SP70
              GOTO      WCID1100
            ENDIF
          ELSE
            MATCH     SP80,PTINSCEM
            IF        !@EQUAL
              PACK      CIDSEG11,PTINSCEM,SP70,SP70
              GOTO      WCID1100
            ENDIF
          ENDIF
          PACK      CIDSEG11,PTCNSCEM,SP70,SP70
.
WCID1100  SCAN      "@",CIDSEG11
          IF        @EOS
            MOVE      "CID.01-SenderContactEmail address not valid",ERRMSG
            CALL      PERR0000
          ENDIF
          RESET     CIDSEG11
.
.         Load SenderContactPersonName
.         If extracting by health fund, then use the health fund contact if not
.         blank, otherwise default to the parameter contact value.
.         If extracting by claim code, then use the insurance contact if not
.         blank, otherwise default to the parameter contact value.
.
          IF        OPTION = 1
            MATCH     SP40,PTFXSCPN
            IF        !@EQUAL
              MOVE      PTFXSCPN,CIDSEG12
              GOTO      WCID1200
            ENDIF
          ELSE
            MATCH     SP40,PTINSCPN
            IF        !@EQUAL
              MOVE      PTINSCPN,CIDSEG12
              GOTO      WCID1200
            ENDIF
          ENDIF
          PACK      CIDSEG12,PTCNSCPN,SP70
.
.         Load SenderContactPersonPhone
.         If extracting by health fund, then use the health fund contact if not
.         blank, otherwise default to the parameter contact value.
.         If extracting by claim code, then use the insurance contact if not
.         blank, otherwise default to the parameter contact value.
.
WCID1200  IF        OPTION = 1
            MATCH     SP20,PTFXSCPP
            IF        !@EQUAL
              MOVE      PTFXSCPP,CIDSEG13
              GOTO      WCID2000
            ENDIF
          ELSE
            MATCH     SP20,PTINSCPP
            IF        !@EQUAL
              MOVE      PTINSCPP,CIDSEG13
              GOTO      WCID2000
            ENDIF
          ENDIF
          PACK      CIDSEG13,PTCNSCPP,SP70
.
.         Check if ContiguousClaimCde is "M"iddle or "L"ast invoice
.         in a contiguous claim
.
WCID2000  MATCH     ANSM,CIDSEG04
          IF        !@EQUAL
            MATCH     ANSL,CIDSEG04
            GOTO      WCID3000 IF NOT EQUAL
          ENDIF
.
.         We are processing a "M"iddle or "L"ast invoice, so get the
.         previous invoice's claim details
.
          MATCH      SP8,PREVINVN                * previous invoice blank ?
          GOTO       WCID3000 IF EQUAL           * yes - shouldn't happen
.
          PACK       KEY24,ADMINO,PREVINVN,TILDA40
          CALL       RSPMECT4                    * position in file
WCID2050  CALL       RPPMECT4                    * read previous record
          BRANCH     OVRCD,WCID2100              * eof - shouldn't happen
.
          MOVE       ADMINO,DIM8
          MATCH      DIM8,PMECADMN               * same admission still ?
          GOTO       WCID2100 IF NOT EQUAL       * no
.
          MATCH      PREVINVN,PMECINVN           * same invoice still ?
          GOTO       WCID2100 IF NOT EQUAL       * no
.
          COMPARE    TWO,PMECFLAG                * record sent ?
          GOTO       WCID2050 IF LESS            * no
.
.         Check if the previous claim was "N" (not in a series) or "L" (last
.         in a series).  If this is the case, then the current claim we are
.         processing is an additional unexpected claim, so set the extract
.         field.
.
          MATCH      ANSN,PMECCCFL
          IF         !@EQUAL
            MATCH      ANSL,PMECCCFL
            GOTO       WCID2100 IF NOT EQUAL
          ENDIF
.
.         Set PreviousClaimCde
.
          MOVE      ANSS,CIDSEG09                * set for supplement
.
.         Set PreviousTransactionId
.
          MOVE      PMECTRID,CIDSEG10
.
WCID2100  CALL      RPOS0000                     * reposition on pmsectaf record
.
          GOTO      WCID4000      
.
.         Set PreviousTransactionId for Adjustment
.
WCID3000  MATCH     "1",PMVXEAFL
          IF        @EQUAL
            MOVE      PMECPCTI,CIDSEG10
          ENDIF
.
.         Set PreviousClaimCode
.
          MATCH     "1",PMVXEAFL
          IF        @EQUAL
            MOVE      ANSA,CIDSEG09
          ENDIF
.
.         Load CompensationClaimCde
.
WCID4000  MOVE      ANSN,CIDSEG03                * Default WCO flag to no
          COMPARE   TWO,OPTION                   * DVA claim ?
          GOTO      WCID5000 IF EQUAL            * yes
.
          PACK      KEY5,ANSC,ANSL,ACLAIM
          CALL      RDCODE1                      * Code on file ?
          IF        OVRCD = 1
            MOVE      "CID.04-Claim code (",ERRMSG
            ENDSET    ERRMSG
            APPEND    ACLAIM,ERRMSG
            APPEND    " - Cat CL) not found",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
          ENDIF
          MOVE      ACLAIM,CLAMCODE              * save claim code
.
.         Check for indicator 1-5 set to "W" (Workers Comp)
.
          MOVE      ZERO,FORM1
          WHILE     FORM1 < FIVE
            ADD       ONE,FORM1
            MOVE      SP1,DIM1
            LOAD      DIM1,FORM1,TCINDC1,TCINDC2,TCINDC3,TCINDC4,TCINDC5
            MATCH     ANSW,DIM1
            IF        @EQUAL
              MOVE      ANSY,CIDSEG03              * Workers comp patient
              GOTO      WCID5000
            ENDIF
          DO
.
.         Load TotalChargeAmount, TotalHospitalChargeAmount &
.         TotalMedicalChargeAmount
.
WCID5000  MOVE      PINVAMT,INVAMTCT
          MOVE      INVAMTCT,KEY15
          UNPACK    KEY15,KEY5,KEY7,KEY1,KEY2
          PACK      KEY9,KEY7,KEY2
          REP       " 0",KEY9
.
          MOVE      KEY9,CIDSEG14                * TotalChargeAmount
          MOVE      KEY9,CIDSEG15                * TotalHospitalChargeAmount
.
.         Load the UrgencyCode
.
          MOVE      NINE,CIDSEG17                * default to "unknown"
          MATCH     SP3,ACLSS
          IF        !@EQUAL
            PACK      KEY5,ANSP,SP1,ACLSS
            CALL      RDCODE1
            IF        OVRCD = 0
              MATCH     SP6,THCSCOD
              IF        !@EQUAL
                UNPACK    THCSCOD,ANS,ANS,ANS
                MATCH     "1",ANS
                GOTO      WCID7000 IF EQUAL
.
                MATCH     "2",ANS
                GOTO      WCID7000 IF EQUAL
.
                MATCH     "3",ANS
                GOTO      WCID7000 IF EQUAL
              ENDIF
            ENDIF
          ENDIF
          GOTO      WCID8000
.
WCID7000  MOVE      ANS,CIDSEG17
.
.         If the Total Charge this Claim (CIDSEG14) is zero, then this
.         claim should not be sent. CAR 54427
.
WCID8000  IF        VALDFLG = 1
            MOVE      ZERO,EXIT
            PACK      KEY6,PMECHFND
            CALL      RDPTFX11
            BRANCH    OVRCD,WCID8500             * read health fund extn record
.
            MATCH     "1",PTFXZINV
            GOTO      WCID8800 IF EQUAL          * don't remove zero invoices
.
WCID8500    MATCH     "000000000",CIDSEG14       * yes - zero total claim ?
            IF        @EQUAL
              MOVE      SAVKEY35,KEY35           * yes - del claim from pmsectaf
              CALL      DEPMECT1
              PACK      KEY16,ADMINO,INVNO
              CALL      DETEMP1                  * delete from tmp file (206845)
              MOVE      ONE,EXIT
            ENDIF
          ENDIF
.
.         If this is a health fund claim and "Billing Mechanical Ventilation
.         Hours" is turned on, then set the Payment Model (CIDSEG08) to "EPM".
.
WCID8800  IF        OPTION = 1
            PACK      KEY17,PMECHFND,PMVXMHOS,ADATE
            CALL      PATFN2RD                   * HF ext. 2 record found ?
            BRANCH    OVRCD,WCID9000             * no
.
            COMPARE   ONE,PTFNBMVH               * yes - MV turned on ?
            GOTO      WCID9000 IF NOT EQUAL      * no
.
            PACK      CIDSEG08,ANSE,ANSP,ANSM,SP20
          ENDIF
.
WCID9000  BRANCH    VALDFLG,WCID9999             * Only validating data - exit
.
.         Write the CID segment data to the extract file.
.         Note: need to add SP1 after field 11 (SenderContactEmail) as this
.         field can only be 127 characters in length in ibaPAS, whereas the
.         field is defined by Medicare as 128 characters.
.
          WRITE     EXTFILE1,SEQ;TILDA01,ANSC,ANSI,ANSD:
                                 CIDSEG01,CIDSEG02,CIDSEG03,CIDSEG04,CIDSEG05:
                                 CIDSEG06,CIDSEG07,CIDSEG08,CIDSEG09,CIDSEG10:
                                 CIDSEG11,CIDSEG12,CIDSEG13,CIDSEG14:
                                 CIDSEG15,CIDSEG16,CIDSEG17
.
WCID9999  RETURN
+
.******************************************************************************
.*                                  WPAT0000              Called by: VALD0000 *
.*                            Write Patient Details                & WRIT0000 *
.******************************************************************************
.
WPAT0000  UNPACK    SP70,PATSEG01,PATSEG02,PATSEG03
          UNPACK    SP70,PATSEG04,PATSEG05
          UNPACK    SP70,PATSEG06
          UNPACK    SP70,PATSEG07,PATSEG08
          UNPACK    SP70,PATSEG09,PATSEG10,PATSEG11,PATSEG12,PATSEG13:
                         PATSEG14,PATSEG15
          REP       " 0",PATSEG01
          REP       " 0",PATSEG02
.
.         Load PatientAddressPostCode
.
          MOVE      PPOST,PATSEG01
          MATCH     SP4,PATSEG01
          IF        @EQUAL
            MOVE      "9999",PATSEG01
          ENDIF
.
.         Load PatientAdmissionWeight
.
          PACK      AGEDATE,ADATE
          CALL      CALCAGE                      * Calculate age
.
          MOVE      ZERO,FORM6
          MOVE      ABWGHT,FORM6
          IF        FORM6 > 9000
            MOVE      "  0001",FORM6             * Task 0868079
          ENDIF
.
          MATCH     "1",PTCNECUP
          IF        @EQUAL
            IF        PSAGEDAY < 365
              IF        FORM6 = 0
                MOVE      "PAT.01-Missing PatientAdmissionWeight",ERRMSG
                CALL      PERR0000
              ENDIF
            ENDIF
          ELSE
            IF        PSAGEDAY < 29
              IF        FORM6 = 0
                MOVE      "PAT.01-Missing PatientAdmissionWeight",ERRMSG
                CALL      PERR0000
              ENDIF
            ENDIF
          ENDIF
.
          MOVE      FORM6,KEY6
          UNPACK    KEY6,ANS,ANS,PATSEG02
          REP       " 0",PATSEG02
.
.         Task 0871696
          MATCH     "0000",PATSEG02
          IF        @EQUAL
            PACK      PATSEG02,SP70
          ENDIF
.
.         Load PatientAliasFamilyName
.
          PACK      PATSEG03,PMVXHFSN,SP70
          REP       UPPLOW,PATSEG03
          REP       ALPTOBL2,PATSEG03
          SQUEEZE   PATSEG03
          MATCH     SP70,PATSEG03
          IF        !@EOS
            MOVE      "PAT.11-Invalid characters in PatientAliasFamilyName",ERRMSG
            CALL      PERR0000
          ENDIF
          PACK      PATSEG03,SP70,SP70
.
          MOVE      PMVXHFSN,PATSEG03
.
.         Load PatientAliasFirstName
.
          PACK      PATSEG04,PMVXHFGN,SP70
          REP       UPPLOW,PATSEG04
          REP       ALPTOBL2,PATSEG04
          SQUEEZE   PATSEG04
          MATCH     SP70,PATSEG04
          IF        !@EOS
            MOVE      "PAT.12-Invalid characters in PatientAliasFirstName",ERRMSG
            CALL      PERR0000
          ENDIF
          PACK      PATSEG04,SP70,SP70
.
          PACK      PATSEG04,PMVXHFGN,SP30,SP10
.
.         Load PatientDateOfBirth
.
          MATCH     SP8,PBDATE
          IF        @EQUAL
            MOVE      "PAT.06-PatientDateOfBirth is blank",ERRMSG
            CALL      PERR0000              
          ELSE
            UNPACK    PBDATE,CCENT,CYEAR,CMON,CDAY
            PACK      PATSEG05,CDAY,CMON,CCENT,CYEAR
          ENDIF
.
.         Load PatientFamilyName
.
          PACK      PATSEG06,PSNAME,SP70
          REP       UPPLOW,PATSEG06
          REP       ALPTOBL2,PATSEG06
          SQUEEZE   PATSEG06
          MATCH     SP70,PATSEG06
          IF        !@EOS
            MOVE      "PAT.13-Invalid characters in PatientFamilyName",ERRMSG
            CALL      PERR0000
          ENDIF
          PACK      PATSEG06,SP70,SP70
.
          PACK      PATSEG06,PSNAME,SP30,SP10    * Surname
          MATCH     SP40,PATSEG06
          IF        @EQUAL
            MOVE      "PAT.07-PatientFamilyName is blank",ERRMSG
            CALL      PERR0000              
          ENDIF
.
.         Load PatientFirstName
.
          PACK      PATSEG07,PMPXFNAM,SP70
          REP       UPPLOW,PATSEG07
          REP       ALPTOBL2,PATSEG07
          SQUEEZE   PATSEG07
          MATCH     SP70,PATSEG07
          IF        !@EOS
            MOVE      "PAT.14-Invalid characters in PatientFirstName",ERRMSG
            CALL      PERR0000
          ENDIF
          PACK      PATSEG07,SP70,SP70
.
          PACK      PATSEG07,PMPXFNAM
          MATCH     SP40,PATSEG07
          IF        @EQUAL
            MOVE      "PAT.08-PatientFirstName is blank",ERRMSG
            CALL      PERR0000              
          ENDIF
.
.         Load PatientFundMembershipNum
.
          COMPARE   ONE,OPTION                   * health fund extract ?
          IF        @EQUAL
            MATCH     SP20,PMVXFNDM              * yes
            IF        @EQUAL
              MOVE      "PAT.02-PatientFundMembershipNum is blank",ERRMSG
              CALL      PERR0000
            ELSE
              MOVE      PMVXFNDM,PATSEG08        * Health fund membership no
              SQUEEZE   PATSEG08
              PACK      PATSEG08,PATSEG08,SP20
            ENDIF
            GOTO      WPAT2000
          ENDIF
.
.         This is a DVA extract, so get the DVA number. If there is a
.         DVA concession card on file, use the number from that
.
          CALL      CONC0000                     * DVA conc card on file ?
          BRANCH    EXIT,WPAT1000                * no
.
          MOVE      DIM20,PATSEG08               * yes
          GOTO      WPAT2000
.
WPAT1000  MATCH     SP70,DIM20  
          IF        @EQUAL
            MOVE      "PAT.03-DVA number is blank",ERRMSG
            CALL      PERR0000
          ELSE
            STRIP     DIM20
            MOVELPTR  DIM20,FORM2
            IF        FORM2 > 9
              MOVE      "PAT.09-DVA number is too long",ERRMSG
              CALL      PERR0000
            ENDIF
          ENDIF
.
.         Load PatientFundUPI
.
WPAT2000  MOVE      SP2,PATSEG09                 * set default to spaces
          MATCH     SP2,PMVXFUPI                 * blank Fund UPI ?
          GOTO      WPAT2100 IF EQUAL            * yes
.
.         Fund UPI is not blank so make sure it's numeric
.
          MOVE      PMVXFUPI,DIM2
          SQUEEZE   DIM2
          TYPE      DIM2
          IF        !@EQUAL
            MOVE      "PAT.10-Patient Fund UPI not numeric",ERRMSG
            CALL      PERR0000
            GOTO      WPAT2100
          ENDIF
.
.         Fund UPI is numeric, so load according to the number of digits
.
          MOVELPTR  DIM2,FORM1
          IF        FORM1 = 1
            PACK      PATSEG09,ZERO,DIM2
          ELSE
            MOVE      DIM2,PATSEG09
          ENDIF
.
.         Load PatientGender
.
WPAT2100  MOVE      PSEX,KEY1
          REP       "M1F2U9I3R3O3",KEY1              * Patient sex
.
          PACK      KEY5,ANSG,SP1,PSEX,SP70
          CALL      RDCODE1
          IF        OVRCD=0
            MOVE      TCINDC3,KEY1
          ENDIF
.
          MATCH     "1",KEY1
          IF        !@EQUAL
            MATCH     "2",KEY1
            IF        !@EQUAL
              MATCH     "3",KEY1
              IF        !@EQUAL
                MATCH     "9",KEY1
                IF        !@EQUAL
                  MOVE      "PAT.04-PatientGender (",ERRMSG
                  ENDSET    ERRMSG
                  APPEND    PSEX,ERRMSG
                  APPEND    ") not valid",ERRMSG
                  RESET     ERRMSG
                  CALL      PERR0000
                ENDIF
              ENDIF
            ENDIF
          ENDIF
          MOVE      KEY1,PATSEG10
.
.         Load PatientMedicareCardNum & PatientReferenceNum
.
          MATCH     SP10,PMEDI
          IF        !@EQUAL
            MOVE      PMEDI,PATSEG11
            MATCH     SP2,PTMXMCCD
            IF        @EQUAL
              MOVE      "PAT.05-PatientReferenceNum is blank",ERRMSG
              CALL      PERR0000
            ELSE
              MOVE      PTMXMCCD,DIM2
              SQUEEZE   DIM2                     * remove blanks
              MATCH     "0",DIM2                 * leading zero ?
              IF        @EQUAL
                UNPACK    DIM2,ANS,PATSEG13      * yes - take second char.
              ELSE
                MOVE      DIM2,PATSEG13
              ENDIF
            ENDIF
          ENDIF
.
.         Load PatientMedicalRecordId (U/R)
.
          MOVE      PURNO,PATSEG12
          SQUEEZE   PATSEG12
          PACK      PATSEG12,PATSEG12,SP20
.
.         Load PatientSecondInitial
.
WPAT3000  PACK      PATSEG14,PMPXSNAM,SP70
          REP       UPPLOW,PATSEG14
          REP       ALPTOBL2,PATSEG14
          SQUEEZE   PATSEG14
          MATCH     SP70,PATSEG14
          IF        !@EOS
            MOVE      "PAT.15-Invalid characters in PatientSecondInitial",ERRMSG
            CALL      PERR0000
          ENDIF
          PACK      PATSEG14,SP70,SP70
.
          MOVE      PMPXSNAM,PATSEG14
.
.         Load SymptomAwarenessDate
.
          UNPACK    PTMIDFAS,DIM4,DIM2,DIM2A
          PACK      PATSEG15,DIM2A,DIM2,DIM4
.
          BRANCH    VALDFLG,WPAT9999             * Only validating data, exit
.
          WRITE     EXTFILE1,SEQ;TILDA01,ANSP,ANSA,ANST:
                                 PATSEG01,PATSEG02,PATSEG03,PATSEG04,PATSEG05:
                                 PATSEG06,PATSEG07,PATSEG08,PATSEG09,PATSEG10:
                                 PATSEG11,PATSEG12,PATSEG13,PATSEG14,PATSEG15
.
WPAT9999  RETURN
+
.******************************************************************************
.*                                  WEPD0000              Called by: VALD0000 *
.*                            Write Episode Details                & WRIT0000 *
.******************************************************************************
.
WEPD0000  UNPACK    SP70,EPDSEG01,EPDSEG02,EPDSEG03,EPDSEG04,EPDSEG05
          UNPACK    SP70,EPDSEG06,EPDSEG07,EPDSEG08,EPDSEG09,EPDSEG10
          UNPACK    SP70,EPDSEG11,EPDSEG12,EPDSEG13,EPDSEG14,EPDSEG15
          UNPACK    SP70,EPDSEG16,EPDSEG17,EPDSEG18,EPDSEG19,EPDSEG20
          UNPACK    SP70,EPDSEG21,EPDSEG22,EPDSEG23
          REP       " 0",EPDSEG02
          REP       " 0",EPDSEG04
          REP       " 0",EPDSEG05
          REP       " 0",EPDSEG08
          REP       " 0",EPDSEG11
          REP       " 0",EPDSEG12
          REP       " 0",EPDSEG14
          REP       " 0",EPDSEG15
          REP       " 0",EPDSEG18
          REP       " 0",EPDSEG19
          REP       " 0",EPDSEG20
.
.         Initialise PatientClassificationCode save variable
.
          MOVE      ZERO,PCCFORM6
.
.         Load AccommodationStatusCode
.
          MOVE      ANSA,EPDSEG01                * set to admitted
.
.         Load AdmissionCategoryCode
.
          MATCH     SP3,ACARE                    * blank care class ?
          GOTO      WEPD0050 IF EQUAL            * yes
.
          PACK      KEY5,ANSC,ANSC,ACARE
          CALL      RDCODE1                      * code on file ?
          BRANCH    OVRCD,WEPD0050               * no
.
          TYPE      TCINDC9                      * numeric indicator 9 ?
          IF        !@EQUAL
            MOVE      "EPD.01-AdmissionCategoryCode (",ERRMSG
            ENDSET    ERRMSG
            APPEND    ACARE,ERRMSG
            APPEND    " - Cat CC, Indicator 9) not numeric",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      WEPD0050
          ENDIF
.
          MOVE      ZERO,FORM1
          MOVE      TCINDC9,FORM1 
          IF        FORM1 < 1 | FORM1 > 6
            MOVE      "EPD.23-AdmissionCategoryCode (",ERRMSG
            ENDSET    ERRMSG
            APPEND    ACARE,ERRMSG
            APPEND    " - Cat CC, Indicator 9) not valid",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      WEPD0050
          ENDIF
.
          MOVE      TCINDC9,EPDSEG02
.
.         Load AdmissionDate
.
WEPD0050  UNPACK    ADATE,CCENT,CYEAR,CMON,CDAY
          PACK      EPDSEG03,CDAY,CMON,CCENT,CYEAR 
.
.         Load AdmissionTime
.
          UNPACK    ATIME,CHOUR,KEY1,CMIN,KEY3
          PACK      EPDSEG04,CHOUR,CMIN
          REP       " 0",EPDSEG04
.
.         Load AnticipatedLengthOfStay
.
          MOVE      ASTAY,FORM4
          MOVE      FORM4,EPDSEG05
          REP       " 0",EPDSEG05
.
.         Load DischargeDate
.
          UNPACK    DDATE,CCENT,CYEAR,CMON,CDAY
          PACK      EPDSEG06,CDAY,CMON,CCENT,CYEAR
.
.         Load DischargeIntentionCode
.
          MATCH     SP3,PMVXUDIN                 * code blank ?
          GOTO      WEPD0100 IF EQUAL            * yes
.
          PACK      KEY5,ANSK,ANSN,PMVXUDIN
          CALL      RDCODE1                      * code on file ?
          BRANCH    OVRCD,WEPD0100               * no
.
          MOVE      THCSCOD,ANS
          TYPE      ANS                          * numeric HDP Equivalent ?
          IF        !@EQUAL
            MOVE      "EPD.02-DischargeIntentionCode (",ERRMSG
            ENDSET    ERRMSG
            APPEND    PMVXUDIN,ERRMSG
            APPEND    " - Cat ",ERRMSG
            APPEND    ANSK,ERRMSG
            APPEND    ANSN,ERRMSG
            APPEND    ", HDP Eq.) not numeric",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      WEPD0100
          ENDIF
.
          MOVE      ZERO,FORM1
          MOVE      ANS,FORM1
          IF        FORM1 < 1 | (FORM1 > 5 & FORM1 <> 8 & FORM1 <> 9)
            MOVE      "EPD.24-DischargeIntentionCode (",ERRMSG
            ENDSET    ERRMSG
            APPEND    PMVXUDIN,ERRMSG
            APPEND    " - Cat ",ERRMSG
            APPEND    ANSK,ERRMSG
            APPEND    ANSN,ERRMSG
            APPEND    ", HDP Eq.) not valid",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      WEPD0100
          ENDIF
.
          MOVE      THCSCOD,EPDSEG07
.
.         Load DischargeTime
.
WEPD0100  MOVE      SP4,KEY4
          MATCH     SP8,DTIME
          IF        !@EQUAL
            UNPACK    DTIME,CHOUR,KEY1,CMIN,KEY3
            PACK      KEY4,CHOUR,CMIN
            REP       " 0",KEY4
          ENDIF
          MOVE      KEY4,EPDSEG08
.
.         Set DischargeTypeCode.
.         If the patient is not discharged, then the ContiguousClaimCde
.         cannot be set to "N"(not in series) or "L" (last in series).
.
          MATCH     SP8,DDATE                    * discharge date blank ?
          IF        @EQUAL
            MATCH     ANSN,CIDSEG04              * yes - claim not in series ?
            IF        !@EQUAL
              MATCH     ANSL,CIDSEG04            * no - claim last in series ?
              GOTO      WEPD0500 IF NOT EQUAL    * no - field not required
            ENDIF
            MOVE      "EPD.22-Discharge Status not consistent with admission invoice series",ERRMSG
            CALL      PERR0000
            GOTO      WEPD0500                   * yes - patient not discharged
          ENDIF
.
          MOVE      "09",EPDSEG09                * default mode to "other"
          MOVE      CATDD,TCODE
.
          COMPARE   ZERO,PTCNDRSM                * separation cat set up ?
          GOTO      WEPD0500 IF EQUAL            * no
.
          LOAD      TCODE,PTCNDRSM,CATD,CATDD
          MOVE      DDEST,ACODE
          LOAD      ACODE,PTCNDRSM,DSTAT,DDEST
.
          MATCH     SP3,ACODE                    * blank code ?
          GOTO      WEPD0500 IF EQUAL            * yes
.
          PACK      KEY5,TCODE,ACODE
          CALL      RDCODE1                      * code on file ?
          BRANCH    OVRCD,WEPD0500               * no
.
          TYPE      TCINDC5                      * numeric value ?
          IF        !@EQUAL
            MOVE      "EPD.03-DischargeTypeCode (",ERRMSG
            ENDSET    ERRMSG
            APPEND    ACODE,ERRMSG
            APPEND    " - Cat ",ERRMSG
            APPEND    TCODE,ERRMSG
            APPEND    ", Indicator 5) not numeric",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      WEPD0500
          ENDIF
.
          MOVE      ZERO,FORM1
          MOVE      TCINDC5,FORM1
          IF        FORM1 < 1 | FORM1 > 9
            MOVE      "EPD.04-DischargeTypeCode (",ERRMSG
            ENDSET    ERRMSG
            APPEND    ACODE,ERRMSG
            APPEND    " - Cat ",ERRMSG
            APPEND    TCODE,ERRMSG
            APPEND    ", Indicator 5) not numeric",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      WEPD0500
          ENDIF
.
          PACK      EPDSEG09,ZERO,TCINDC5
.
.         Load EpisodeId (Admission Number)
.
WEPD0500  PACK      EPDSEG10,ADMINO,SP20
          SQUEEZE   EPDSEG10
          PACK      EPDSEG10,EPDSEG10,SP20
.
.         Load EpisodeTypeCode.
.         Get last care class change for invoice date.
.
          MOVE      ACARE,ACODE                  * Load care class
          PACK      KEY24,ADMINO,TILDA40
          CALL      RDSCHCO1                     * Position on code changes
WEPD1000  CALL      RDPCHCO1                     * read previous record
          BRANCH    OVRCD,WEPD2000               * eof - finished
.
          MATCH     ADMINO,CHADMN                * same admission still ?
          GOTO      WEPD2000 IF NOT EQUAL        * no - finished
.
          MATCH     CHDATE,PINVDTE               * Inv. date => code change date
          GOTO      WEPD2000 IF NOT LESS         * yes - finished
.
          MATCH     "CC",CHCATG                  * care class change ?
          GOTO      WEPD1000 IF NOT EQUAL        * no - get next record
.
          MOVE      CHCODE,ACODE                 * yes
.
WEPD2000  MATCH     SP3,ACODE                    * care class code blank ?
          IF        @EQUAL
            MOVE      "EPD.05-Blank care class (Cat CC) code",ERRMSG
            CALL      PERR0000
            GOTO      WEPD3000
          ENDIF
.
          PACK      KEY5,ANSC,ANSC,ACODE
          CALL      RDCODE1                      * Code on file ?
          IF        OVRCD = 1
            MOVE      "EPD.06-Care class code (",ERRMSG
            ENDSET    ERRMSG
            APPEND    ACODE,ERRMSG
            APPEND    " - Cat CC) not found",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      WEPD3000
          ENDIF
.
          IF        TCFORM6 < 1 | TCFORM6 > 16
            MOVE      "EPD.07-Care class code (",ERRMSG
            ENDSET    ERRMSG
            APPEND    ACODE,ERRMSG
            APPEND    " - Cat CC, Assoc. ##) not valid",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      WEPD3000
          ENDIF
.
          MOVE      TCFORM6,SAVASSC2             * save care class assoc #
          BRANCH    TCFORM6,WEPD2001:            * acute care
                            WEPD2002:            * rehab care to designated unit
                            WEPD2003:            * rehab care via designed pgm
                            WEPD2004:            * rehab care prin. clin. intent
                            WEPD2005:            * pall. care to designated unit
                            WEPD2006:            * pall. care via designed pgm
                            WEPD2007:            * pall. care prin. clin. intent
                            WEPD2008:            * geriatric eval. & management
                            WEPD2009:            * psychogeriatric care
                            WEPD2010:            * maintenance care
                            WEPD2011:            * newborn care
                            WEPD2012:            * other admitted patient care
                            WEPD2013:            * organ procurement-posthumous
                            WEPD2014:            * hospital boarder
                            WEPD2015:            * rehabilitation care
                            WEPD2016             * palliative care
          GOTO      WEPD3000
.
WEPD2001  PACK      EPDSEG11,SP1,TEN
          GOTO      WEPD3000
.
WEPD2002  PACK      EPDSEG11,SP1,TWENTY1
          GOTO      WEPD3000
.
WEPD2003  PACK      EPDSEG11,SP1,TWENTY2
          GOTO      WEPD3000
.
WEPD2004  PACK      EPDSEG11,SP1,TWENTY3
          GOTO      WEPD3000
.
WEPD2005  PACK      EPDSEG11,SP1,THIRTY1
          GOTO      WEPD3000
.
WEPD2006  PACK      EPDSEG11,SP1,THIRTY2
          GOTO      WEPD3000
.
WEPD2007  PACK      EPDSEG11,SP1,THIRTY3
          GOTO      WEPD3000
.
WEPD2008  PACK      EPDSEG11,SP1,FORTY
          GOTO      WEPD3000
.
WEPD2009  PACK      EPDSEG11,SP1,FIFTY
          GOTO      WEPD3000
.
WEPD2010  PACK      EPDSEG11,SP1,SIXTY
          GOTO      WEPD3000
.
WEPD2011  PACK      EPDSEG11,SP1,SEVENTY
          GOTO      WEPD3000
.
WEPD2012  PACK      EPDSEG11,SP1,EIGHTY
          GOTO      WEPD3000
.
WEPD2013  PACK      EPDSEG11,SP1,NINTY
          GOTO      WEPD3000
.
WEPD2014  MOVE      HUNDRED,EPDSEG11
          GOTO      WEPD3000
.
WEPD2015  PACK      EPDSEG11,SP1,TWENTY
          GOTO      WEPD3000
.
WEPD2016  PACK      EPDSEG11,SP1,THIRTY
.
.         Load FacilityContractStatusCode
.         If this is a private hospital claim, then this field is mandatory
.
WEPD3000  MATCH     SP3,ASRCE                    * referral source code blank ?
          IF        @EQUAL
            MATCH     "PR",CIDSEG02              * yes
            IF        @EQUAL
              MOVE      "EPD.19-Source of Referral (Cat S) is mandatory",ERRMSG
              CALL      PERR0000
            ENDIF
            GOTO      WEPD3050
          ENDIF
.
          PACK      KEY5,ANSS,SP1,ASRCE
          CALL      RDCODE1                      * code on file ?
          IF        OVRCD = 1
            MATCH     "PR",CIDSEG02              * yes
            IF        @EQUAL
              MOVE      "EPD.25-Source of Referral code (",ERRMSG
              ENDSET    ERRMSG
              APPEND    ASRCE,ERRMSG
              APPEND    " - Cat S) not found",ERRMSG
              RESET     ERRMSG
              CALL      PERR0000
            ENDIF
            GOTO      WEPD3050
          ENDIF
.
          TYPE      TCINDC6
          IF        !@EQUAL
            MOVE      "EPD.08-Source of Referral code (",ERRMSG
            ENDSET    ERRMSG
            APPEND    ASRCE,ERRMSG
            APPEND    " - Cat S, Indicator 6) not numeric",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      WEPD3050
          ENDIF
.
          MOVE      ZERO,FORM1
          MOVE      TCINDC6,FORM1
          IF        FORM1 < 1 | (FORM1 > 3 & FORM1 <> 9)
            MOVE      "EPD.26-Source of Referral code (",ERRMSG
            ENDSET    ERRMSG
            APPEND    ASRCE,ERRMSG
            APPEND    " - Cat S, Indicator 6) not valid",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      WEPD3050
          ENDIF
.
          MOVE      TCINDC6,EPDSEG12
.
.         Load LengthOfStay (only if patient is discharged)
.
WEPD3050  MOVE      ZERO,SAMDAYFL                * initialise same day flag
          MATCH     SP8,DDATE                    * discharged ?
          GOTO      WEPD3060 IF EQUAL            * no
.
.         Load NumberOfDays
.
          DAYSEP    ADATE,DDATE,FORM4
          IF        FORM4 = 0
            MOVE      ONE,SAMDAYFL               * set same day flag
            MOVE      ONE,FORM4
          ENDIF
          MOVE      FORM4,EPDSEG13
          REP       " 0",EPDSEG13
.
.         Load MentalHealthLegalStatusCode
.
WEPD3060  MOVE      "8",EPDSEG14                 * set default value
.
          PACK      KEY21,ADMINO,INVTODTE,TILDA40
          CALL      RSMHLEG1                     * position for last MH status
          CALL      RPMHLEG1                     * read previous record
          BRANCH    OVRCD,WEPD3070               * eof - check visit file
.
          MATCH     AADMNO,MHLEADMN              * same admission still ?
          GOTO      WEPD3070 IF NOT EQUAL        * no - check visit file
.
          MATCH     SP3,MHLESTAT                 * blank legal status ?
          GOTO      WEPD3070 IF EQUAL            * yes - check visit file
.
          PACK      KEY5,ANSL,ANSS,MHLESTAT
          CALL      RDCODE1
          IF        OVRCD = 0
            MOVE      PTCDNHCP,ANS
            TYPE      ANS                        * numeric national HCP value ?
            IF        !@EQUAL
              MOVE      "EPD.09-Mental Health Legal Status code (",ERRMSG
              ENDSET    ERRMSG
              APPEND    MHLESTAT,ERRMSG
              APPEND    " - Cat LS",ERRMSG
              APPEND    ", Nat. HDP Eq.) not numeric",ERRMSG
              RESET     ERRMSG
              CALL      PERR0000
              GOTO      WEPD3100
            ENDIF
.
.           Check that the value is valid
.
            MOVE      ZERO,FORM1
            MOVE      ANS,FORM1
            IF        FORM1 < 1 | (FORM1 > 3 & FORM1 <> 8)
              MOVE      "EPD.10-Mental Health Legal Status code (",ERRMSG
              ENDSET    ERRMSG
              APPEND    MHLESTAT,ERRMSG
              APPEND    " - Cat LS",ERRMSG
              APPEND    ", Nat. HDP Eq.) not valid",ERRMSG
              RESET     ERRMSG
              CALL      PERR0000
              GOTO      WEPD3100
            ENDIF
.
            MOVE      PTCDNHCP,EPDSEG14          * valid value
            GOTO      WEPD3100
          ENDIF
.
WEPD3070  MATCH     SP3,PMVXMHLS                 * blank legal status ?
          GOTO      WEPD3100 IF EQUAL            * yes - use default value
.
          PACK      KEY5,ANSL,ANSS,PMVXMHLS    
          CALL      RDCODE1
          IF        OVRCD = 0
            MOVE      PTCDNHCP,ANS
            TYPE      ANS                        * numeric national HCP value ?
            IF        !@EQUAL
              MOVE      "EPD.32-Mental Health Legal Status code (",ERRMSG
              ENDSET    ERRMSG
              APPEND    PMVXMHLS,ERRMSG
              APPEND    " - Cat LS",ERRMSG
              APPEND    ", Nat. HDP Eq.) not numeric",ERRMSG
              RESET     ERRMSG
              CALL      PERR0000
              GOTO      WEPD3100
            ENDIF
.
.           Check that the value is valid
.
            MOVE      ZERO,FORM1
            MOVE      ANS,FORM1
            IF        FORM1 < 1 | (FORM1 > 3 & FORM1 <> 8)
              MOVE      "EPD.33-Mental Health Legal Status code (",ERRMSG
              ENDSET    ERRMSG
              APPEND    PMVXMHLS,ERRMSG
              APPEND    " - Cat LS",ERRMSG
              APPEND    ", Nat. HDP Eq.) not valid",ERRMSG
              RESET     ERRMSG
              CALL      PERR0000
              GOTO      WEPD3100
            ENDIF
.
            MOVE      PTCDNHCP,EPDSEG14
            GOTO      WEPD3100
          ENDIF
.
.         Load PalliativeCareStatusCode.
.         If pmsvx1af.pmvxpalc is populated and has a valid HDP equivalent,
.         then use this, otherwise, if the care class has a valid associated
.         number (from EPDSEG11), then use this, otherwise default to
.         "no" palliative care.
.
WEPD3100  MOVE      TWO,EPDSEG15                 * default no palliative care
.
.         Check if the care class (Cat. CC - EPDSEG11) is for palliative care
.
          IF        SAVASSC2 > 4 & SAVASSC2 < 8
            MOVE      ONE,EPDSEG15               * set for palliative care
          ENDIF
.
.         Check if there is involvement with palliative care (Cat KG)
.
          MATCH     SP3,PMVXPALC                 * blank code ?
          GOTO      WEPD4000 IF EQUAL            * yes
.
          PACK      KEY5,ANSK,ANSG,PMVXPALC
          CALL      RDCODE1                      * code on file ?
          BRANCH    OVRCD,WEPD4000               * no
.
          MOVE      THCSCOD,ANS
          TYPE      ANS                          * numeric HDP Equiv. ?
          GOTO      WEPD3200 IF EQUAL            * yes - check for valid code
.
          MOVE      "EPD.11-Palliative Care Status code (",ERRMSG
          ENDSET    ERRMSG
          APPEND    PMVXPALC,ERRMSG
          APPEND    " - Cat ",ERRMSG
          APPEND    ANSK,ERRMSG
          APPEND    ANSG,ERRMSG
          APPEND    ", HDP Eq.) not numeric",ERRMSG
          RESET     ERRMSG
          CALL      PERR0000
          GOTO      WEPD4000
.
WEPD3200  MOVE      ZERO,FORM1
          MOVE      ANS,FORM1
          IF        FORM1 <> 1 & FORM1 <> 2
            MOVE      "EPD.20-Palliative Care Status code (",ERRMSG
            ENDSET    ERRMSG
            APPEND    PMVXPALC,ERRMSG
            APPEND    " - Cat ",ERRMSG
            APPEND    ANSK,ERRMSG
            APPEND    ANSG,ERRMSG
            APPEND    ", HDP Eq.) not valid",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      WEPD4000
          ENDIF
          MOVE      ANS,EPDSEG15
.
.         Load PatientClassificationCode
.
WEPD4000  COMPARE   THREE,ASTAT                  * is pt. discharged ?
          GOTO      WEPD4500 IF NOT EQUAL        * no
.
.         The pt. is discharged so get the last accommodation record
.         from patdtraf and use the admission type from tadmtyp (CAR 238478).
.         If a patient changes admission type on the day of discharge, then
.         the admission type (patmi1af.atype) may differ from pattranf.tatype,
.         thus causing a discrepancy between the Patient Classification in the
.         EPD and ACD segments.
.
          PACK      KEY23,ADMINO,INVNO,ONE,TILDA40
          CALL      RDSDTRN4                     * position after admis & inv.
          CALL      RDPDTRN4                     * read next record
          BRANCH    OVRCD,WEPD4500               * eof
.
          MATCH     ADMINO,TADMNO                * same admission still ?
          GOTO      WEPD4500 IF NOT EQUAL        * no
.
          MATCH     INVNO,TREF                   * same invoice still ?
          GOTO      WEPD4500 IF NOT EQUAL        * no
.
          COMPARE   ONE,TRECTYPE                 * accommodation record ?
          GOTO      WEPD4500 IF NOT EQUAL        * no
.
.         Last accommodation record has been found, so check that there
.         is an admission type recorded
.
          MATCH     SP3,TADMTYP                  * blank adm. type ?
          GOTO      WEPD4500 IF EQUAL            * yes - default back to atype
.
          MOVE      TADMTYP,DIM3                 * load admission type
          GOTO      WEPD4600
.
WEPD4500  MATCH     SP3,ATYPE                    * admission type blank ?
          IF        @EQUAL
            MOVE      "EPD.12-Blank admission type (Cat A) code",ERRMSG
            CALL      PERR0000
            GOTO      WEPD5000
          ENDIF
          MOVE      ATYPE,DIM3                   * load admission type
.
WEPD4600  PACK      KEY5,ANSA,SP1,DIM3
          CALL      RDCODE1                      * code on file ?
          IF        OVRCD = 1
            MOVE      "EPD.13-Admission Type code (",ERRMSG
            ENDSET    ERRMSG
            APPEND    DIM3,ERRMSG
            APPEND    " - Cat A) not found",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      WEPD5000
          ENDIF
.
          IF        TCFORM6 < 1 | TCFORM6 > 14
            MOVE      "EPD.14-Admission Type code (",ERRMSG
            ENDSET    ERRMSG
            APPEND    ACODE,ERRMSG 
            APPEND    " - Cat A, Assoc. ##) not valid",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      WEPD5000
          ENDIF
.
          LOAD      EPDSEG16,TCFORM6,CATD1,CATD2,CATD3,CATD4,CATAM:
                                     CATME,CATSU,CATAS,CATOB,CATPS:
                                     CATRE,CATNH,CATEC,CATOT
          MOVE      TCFORM6,PCCFORM6             * save patient class. code
.
.         Load ReadmissionCode
.
WEPD5000  MOVE      "8",EPDSEG17
          MATCH     SP3,PMVXUREA                 * blank code ?
          GOTO      WEPD5100 IF EQUAL            * yes
.
          PACK      KEY5,ANSK,ANSO,PMVXUREA      * no
          CALL      RDCODE1                      * code on file ?
          IF        OVRCD = 1
            MATCH     "PR",CIDSEG02              * yes - private hosp. claim ?
            IF        @EQUAL
              MOVE      "EPD.27-Readmission code (",ERRMSG
              ENDSET    ERRMSG
              APPEND    PMVXUREA,ERRMSG
              APPEND    " - Cat ",ERRMSG
              APPEND    ANSK,ERRMSG
              APPEND    ANSO,ERRMSG
              APPEND    ") not found",ERRMSG
              RESET     ERRMSG
              CALL      PERR0000
            ENDIF
            GOTO      WEPD5100
          ENDIF
.
          UNPACK    THCSCOD,DIM2,EPDSEG17        * Pos.3 of HDP Equivalent
.
          MATCH     SP1,EPDSEG17                 * field blank ?
          IF        @EQUAL
            MATCH     "PR",CIDSEG02              * yes - private hosp. claim ?
            GOTO      WEPD5100 IF NOT EQUAL      * no - not mandatory
          ENDIF
.
          TYPE      EPDSEG17
          IF        !@EQUAL
            MOVE      "EPD.28-Readmission code (",ERRMSG
            ENDSET    ERRMSG
            APPEND    PMVXUREA,ERRMSG
            APPEND    " - Cat ",ERRMSG
            APPEND    ANSK,ERRMSG
            APPEND    ANSO,ERRMSG
            APPEND    ", HDP Eq. Pos. 3) not numeric",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      WEPD5100
          ENDIF
.
          MOVE      ZERO,FORM1
          MOVE      EPDSEG17,FORM1
          IF        FORM1 < 1 | (FORM1 > 3 & FORM1 <> 8)
            MOVE      "EPD.29-Readmission code (",ERRMSG
            ENDSET    ERRMSG
            APPEND    PMVXUREA,ERRMSG
            APPEND    " - Cat ",ERRMSG
            APPEND    ANSK,ERRMSG
            APPEND    ANSO,ERRMSG
            APPEND    ", HDP Eq. Pos. 3) not valid",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
          ENDIF
.
.         Load ReferralSourceCode
.
WEPD5100  MATCH     SP3,ASRCE                    * blank source of referral ?
          IF        @EQUAL
            MOVE      "EPD.21-Blank referral source (Cat S) code",ERRMSG
            CALL      PERR0000
            GOTO      WEPD6000                   * yes
          ENDIF
.
          PACK      KEY5,ANSS,SP1,ASRCE
          CALL      RDCODE1                      * code on file ?
          IF        OVRCD = 1
            MOVE      "EPD.15-Referral Source code (",ERRMSG
            ENDSET    ERRMSG
            APPEND    ASRCE,ERRMSG             
            APPEND    " - Cat S) not found",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      WEPD6000
          ENDIF
.
          TYPE      TCINDC3                      * is value numeric ?
          IF        !@EQUAL
            MOVE      "EPD.17-Referral Source code (",ERRMSG
            ENDSET    ERRMSG
            APPEND    ASRCE,ERRMSG
            APPEND    " - Cat S, Indicator 3) not numeric",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      WEPD6000
          ENDIF
.
          MOVE      TCINDC3,FORM1
          IF        FORM1 < 0 | FORM1 > 9 | FORM1 = 3
            MOVE      "EPD.16-Referral Source code (",ERRMSG
            ENDSET    ERRMSG
            APPEND    ASRCE,ERRMSG
            APPEND    " - Cat S, Indicator 3) not valid",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      WEPD6000
          ENDIF
.
          MOVE      TCINDC3,EPDSEG18
.
.         Set SameDayCode
.
WEPD6000  CALL      PATGILOS                     * get intended LOS
          MOVE      KEY1,EPDSEG19
          MOVE      KEY1,SAVSAMED                * save sameday code
.
.         Set UnplannedTheatreCode
.
          MATCH     SP3,PMVXUVTH                 * blank code ?
          GOTO      WEPD7000 IF EQUAL            * yes - use default value
.
          PACK      KEY5,ANSK,ANSB,PMVXUVTH
          CALL      RDCODE1                      * code on file ?
          IF        OVRCD = 1
            MOVE      "EPD.18-Unplanned Theatre Visit code (",ERRMSG
            ENDSET    ERRMSG
            APPEND    PMVXUVTH,ERRMSG
            APPEND    " - Cat ",ERRMSG
            APPEND    ANSK,ERRMSG
            APPEND    ANSB,ERRMSG
            APPEND    ") not found",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      WEPD7000
          ENDIF
.
          MOVE      THCSCOD,ANS
          TYPE      ANS
          IF        !@EQUAL
            MOVE      "EPD.30-Unplanned Theatre Visit code (",ERRMSG
            ENDSET    ERRMSG
            APPEND    PMVXUVTH,ERRMSG
            APPEND    " - Cat ",ERRMSG
            APPEND    ANSK,ERRMSG
            APPEND    ANSB,ERRMSG
            APPEND    ", HDP Eq.) not numeric",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      WEPD7000
          ENDIF
.
          MOVE      THCSCOD,EPDSEG20
.
          MOVE      ZERO,FORM1
          MOVE      EPDSEG20,FORM1
          IF        FORM1 < 1 | (FORM1 > 2 & FORM1 <> 9)
            MOVE      "EPD.31-Unplanned Theatre Visit code (",ERRMSG
            ENDSET    ERRMSG
            APPEND    PMVXUVTH,ERRMSG
            APPEND    " - Cat ",ERRMSG
            APPEND    ANSK,ERRMSG
            APPEND    ANSB,ERRMSG
            APPEND    ", HDP Eq.) not valid",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      WEPD7000
          ENDIF
.
.         If HDP Equiv. is set to "9" (for NSW Extract), then we need to
.         change this to "2" for Eclipse (and HCP Extract) - CAR 212096.
.
          IF        FORM1 = 9
            MOVE      TWO,EPDSEG20
          ENDIF
.
          GOTO      WEPD8000
.
WEPD7000  MOVE      TWO,EPDSEG20
.
.         Set TotalPsychiatricCareDays
.
WEPD8000  MATCH     "1",PTCNECUP
          GOTO      WEPD9000 IF NOT EQUAL
.
          MATCH     "PS",EPDSEG16
          GOTO      WEPD8100 IF NOT EQUAL
.
          COMPARE   ONE,SAMDAYFL
          IF        @EQUAL
.
            MATCH     SP70,DIM3
            GOTO      WEPD8100 IF EQUAL
.
            PACK      KEY5,ANSA,SP1,DIM3
            CALL      RDCODE1
            BRANCH    OVRCD,WEPD8100
.
            MATCH     "P",TCINDC3
            GOTO      WEPD8100 IF NOT EQUAL
.
            MOVE      ONE,FORM5
          ELSE
            CALL      CPSY0000
          ENDIF
.
          MOVE      FORM5,EPDSEG21
          REP       " 0",EPDSEG21
.
.         Set PalliativeCareDays
.
WEPD8100  CALL      PLOS0000
.
.         Set NumberOfQualifiedDaysForNewborns
.
WEPD8200  COMPARE   ONE,SAMDAYFL
          IF        @EQUAL
.
            MATCH     SP70,DIM3
            GOTO      WEPD9000 IF EQUAL
.
            PACK      KEY5,ANSA,SP1,DIM3
            CALL      RDCODE1
            BRANCH    OVRCD,WEPD9000
.
            CMATCH    "Q",PTCDNHCP
            GOTO      WEPD9000 IF NOT EQUAL
.
            MOVE      ONE,FORM5
.
          ELSE
            CALL      CBBY0000
          ENDIF
.
          MOVE      FORM5,EPDSEG23
          REP       " 0",EPDSEG23
.
WEPD9000  BRANCH    VALDFLG,WEPD9999             * Only validating data, exit
.
          MATCH     "1",PTCNECUP
          IF        @EQUAL
            WRITE     EXTFILE1,SEQ;TILDA01,ANSE,ANSP,ANSD:
                                   EPDSEG01,EPDSEG02,EPDSEG03,EPDSEG04,EPDSEG05:
                                   EPDSEG06,EPDSEG07,EPDSEG08,EPDSEG09,EPDSEG10:
                                   EPDSEG11,EPDSEG12,EPDSEG13,EPDSEG14,EPDSEG15:
                                   EPDSEG16,EPDSEG17,EPDSEG18,EPDSEG19,EPDSEG20:
                                   EPDSEG21,EPDSEG22,EPDSEG23
          ELSE
            WRITE     EXTFILE1,SEQ;TILDA01,ANSE,ANSP,ANSD:
                                   EPDSEG01,EPDSEG02,EPDSEG03,EPDSEG04,EPDSEG05:
                                   EPDSEG06,EPDSEG07,EPDSEG08,EPDSEG09,EPDSEG10:
                                   EPDSEG11,EPDSEG12,EPDSEG13,EPDSEG14,EPDSEG15:
                                   EPDSEG16,EPDSEG17,EPDSEG18,EPDSEG19,EPDSEG20
          ENDIF
.
WEPD9999  RETURN
+
.******************************************************************************
.*                                  WSVB0000              Called by: VALD0000 *
.*                      Write Bundle/Single Value Details          & WRIT0000 *
.******************************************************************************
.
WSVB0000  UNPACK    SP70,SVBSEG01,SVBSEG02,SVBSEG03,SVBSEG04,SVBSEG05
          UNPACK    SP70,SVBSEG06,SVBSEG07
          MOVE      SP70,CMBSCMIX
          REP       " 0",SVBSEG01
          REP       " 0",SVBSEG04
.
          CALL      WKLP0000
.
          MATCH     ANSN,CIDSEG04                * first invoice for admission ?
          IF        !@EQUAL
            MATCH     ANSF,CIDSEG04
            GOTO      WSVB9999 IF NOT EQUAL      * no - finished
          ENDIF
.
          COMPARE   ONE,PTINCMIX                 * casemix invoice ?
          GOTO      WSVB9999 IF NOT EQUAL        * no - finished
.
.         Load ServiceTypeCodeType & ServiceCode.
.         Load the admission provisional DRG as the default casemix code.
.
          PACK      KEY9,PTMIPDRG,SP9
          MATCH     SP8,DDATE                    * patient discharged ?
          GOTO      WSVB1000 IF EQUAL            * no
.
.         Get the discharge DRG
.
          MATCH     DDATE,PINVDTE                * invoice date < disch. date ?
          GOTO      WSVB1000 IF LESS             * yes
.
.         Load the discharge provisional DRG as the default casemix code
.
          PACK      KEY9,PTDSDDRG,SP9
          MATCH     SP9,PTINCMCD                 * blank invoice casemix code ?
          IF        !@EQUAL
            MOVE      PTINCMCD,KEY9              * no - load this DRG
          ENDIF
.
WSVB1000  PACK      KEY11,KEY9,SP20
          MATCH     SP20,KEY11                   * casemix code blank ?
          GOTO      WSVB9999 IF EQUAL            * yes - finished
.
          PACK      CMCODE,KEY9,SP70
.         PACK      KEY9,ACLAIM,AFUNDH
.         CALL      GETCNEFF               * Get Contract Effective From
.         BRANCH    EXIT,WSVB9999
.
.         PACK      PTMIPCMX,CMCODE,SP70
.         PACK      KEY18,ACLAIM,AFUNDH,CMCODE,SP70
.         MOVE      ADATE,CEFFDATE
.         LOAD      CEFFDATE,CNTRCEFR,ADATE,DDATE
.
.         If Contract Effective From is 'For Discharges From', Discharged date
.         is blank and TCINDC19=D, default Effective date to Current date
.
.         IF        CNTRCEFR=2
.           PACK      DDATE,DDATE,SP70
.           MATCH     SP70,DDATE
.           IF        @EQUAL
.             PACK      KEY5,ANSC,ANSL,ACLAIM
.             CALL      RDCODE1
.             IF        OVRCD=0
.               MATCH     "D",TCINDC19
.               IF        @EQUAL
.                 PACK      CEFFDATE,CCC,CYY,CMM,CDD,SP70
.                 REP       " 0",CEFFDATE
.               ENDIF
.             ENDIF
.           ENDIF
.         ENDIF
.
.         CALL      VALCMXFN              * get the contract ID (CONTRCID)
.         BRANCH    EXIT,WSVB9999
.
WSVB1300  CALL      NFND0000                     * Check with blank health fund
          BRANCH    EXIT,WSVB1500                * eclipse equiv/type/serv blank
.
WSVB1400  CALL      GCEQ0000                     * get Eclipse Equivalent
          BRANCH    EXIT,WSVB9999                * error
          GOTO      WSVB2000
.
WSVB1500  MOVE      KEY11,SVBSEG05
.
          MOVE      ANSO,KEY1A                   * default Code type - "Other"
          PACK      KEY4,KEY11
          PACK      KEY7,KEY4,SP10
          CALL      RSPTDGW1                     * position on DRG
          CALL      RKPTDGW1                     * read next record
          IF        OVRCD = 0
            MATCH     PTDWDRGC,KEY4              * same DRG still ?
            IF        @EQUAL
              MOVE      ANSD,KEY1A               * yes - set code type to DRG
              GOTO      WSVB2000
            ENDIF
          ENDIF
.
          MOVE      KEY11,KEY9
          PACK      KEY17,KEY9,ADATE,SP70
          CALL      PATITMRD                     * MBS item ?
          IF        OVRCD = 0
            MOVE      ANSC,KEY1A                 * yes
          ENDIF
.
WSVB2000  MOVE      KEY1A,SVBSEG06
.
.         Load ChargeAmount & ChargeRaisedCde
.
          MOVE      ZERO,FORM12P2                * initialise charge amount
.
          PACK      KEY23,ADMINO,INVNO,ONE,SP30
          CALL      RDSDTRN4                     * position on admis & invoice
WSVB3000  CALL      RDKDTRN4                     * read next record
          BRANCH    OVRCD,WSVB4000               * eof
.
          MATCH     ADMINO,TADMNO                * same admission still ?
          GOTO      WSVB4000 IF NOT EQUAL        * no
.
          MATCH     INVNO,TREF                   * same invoice still ?
          GOTO      WSVB4000 IF NOT EQUAL        * no
.
          COMPARE   ONE,TRECTYPE                 * accommodation record ?
          GOTO      WSVB4000 IF NOT EQUAL        * no
.
.         MATCH     "PY",TTYPE                   * accommodation payment ?
.         GOTO      WSVB3000 IF EQUAL            * yes - ignore record
.
.         Increment the fixed charge amnt
.
          ASSIGN    (FORM12P2+PTDTLSPT+PTDTLSRB),FORM12P2
          IF        IBCNUGST=2
            ADD       PTDTGSTL,FORM12P2
          ENDIF
          GOTO      WSVB3000
.
WSVB4000  COMPARE   ZERO,FORM12P2                * zero charge amount ?
          GOTO      WSVB9999 IF EQUAL            * yes - finished
.
          CALL      FTOT0000                     * format numeric totals
          MATCH     ANSC,KEY1
          IF        @EQUAL
            ADD       FORM12P2,SUBTOTAL          * increment subtotal
          ENDIF
          MOVE      KEY9,SVBSEG01      
          MOVE      KEY1,SVBSEG02
.
.         Load FromDate
.
          UNPACK    INVFRDTE,CCENT,CYEAR,CMON,CDAY
          PACK      SVBSEG03,CDAY,CMON,CCENT,CYEAR
.
          MOVE      CCENT,CC                     * conv. fromdate to julian day
          MOVE      CYEAR,YY
          MOVE      CMON,MM
          MOVE      CDAY,DD
          CALL      DMYCON
.
.         Loop through the "daily fee for inliers/high outliers" file (pathdfaf)
.         and get the maximum day for an inlier for the casemix code
.
          MOVE      KEY11,KEY9                   * reload casemix code
.
          MOVE      ZERO,MAXMDAYS                * initialise max. days
.
          PACK      KEY14,AFUNDH,AFNDTB
          CALL      RDFUND1                      * fund-table record found ?
          BRANCH    OVRCD,WSVB5150               * no
.
.         First check for inlier records using claim code, health fund,
.         health fund table type and casemix code.
.
          PACK      KEY31,PTINCNID,ACLAIM,AFUNDH,PTHFBCAT,KEY9,SP30
          CALL      RSPTHDF1                     * position in file
WSVB5000  CALL      RKPTHDF1                     * read next record
          BRANCH    OVRCD,WSVB5100               * eof - finished
.
          MATCH     PTINCNID,PTHDCNID            * same Contract ID ?
          GOTO      WSVB5100 IF NOT EQUAL        * no - finished
.
          MATCH     ACLAIM,PTHDCLMN              * same claim still ?
          GOTO      WSVB5100 IF NOT EQUAL        * no - finished
.
          MATCH     AFUNDH,PTHDHFND              * same fund still ?
          GOTO      WSVB5100 IF NOT EQUAL        * no - finished
.
          MATCH     PTHFBCAT,PTHDTABT            * same table type still ?
          GOTO      WSVB5100 IF NOT EQUAL        * no - finished
.
          MATCH     KEY9,PTHDCASM                * same casemix code still ?
          GOTO      WSVB5100 IF NOT EQUAL        * no - finished
.
          COMPARE   ONE,PTHDDTYP                 * inlier ?
          IF        @EQUAL
            COMPARE   PTHDEDAY,MAXMDAYS          * yes - greater end day ?
            IF        @LESS
              MOVE      PTHDEDAY,MAXMDAYS        * yes - save ending day
            ENDIF
          ENDIF
          GOTO      WSVB5000                     * get next record
.
WSVB5100  COMPARE   ZERO,MAXMDAYS                * inlier record found ?
          GOTO      WSVB6000 IF NOT EQUAL        * yes
.
.         Inlier record not found, so check using blank health fund, health
.         fund table type and casemix code
.
WSVB5150  PACK      KEY31,PTINCNID,ACLAIM,SP6,SP3,KEY9,SP30
          CALL      RSPTHDF1                     * position in file
WSVB5200  CALL      RKPTHDF1                     * read next record
          BRANCH    OVRCD,WSVB5300               * eof - finished
.
          MATCH     PTINCNID,PTHDCNID            * same Contract ID ?
          GOTO      WSVB5300 IF NOT EQUAL        * no - finished
.
          MATCH     ACLAIM,PTHDCLMN              * same claim still ?
          GOTO      WSVB5300 IF NOT EQUAL        * no - finished
.
          MATCH     SP6,PTHDHFND                 * blank fund still ?
          GOTO      WSVB5300 IF NOT EQUAL        * no - finished
.
          MATCH     SP3,PTHDTABT                 * blank table type still ?
          GOTO      WSVB5300 IF NOT EQUAL        * no - finished
.
          MATCH     KEY9,PTHDCASM                * same casemix code still ?
          GOTO      WSVB5300 IF NOT EQUAL        * no - finished
.
          COMPARE   ONE,PTHDDTYP                 * inlier ?
          IF        @EQUAL
            COMPARE   PTHDEDAY,MAXMDAYS          * yes - greater end day ?
            IF        @LESS
              MOVE      PTHDEDAY,MAXMDAYS        * yes - save ending day
            ENDIF
          ENDIF
          GOTO      WSVB5200                     * get next record
.
WSVB5300  COMPARE   ZERO,MAXMDAYS                * inlier record found ?
          GOTO      WSVB6000 IF NOT EQUAL        * yes
.
.         Inlier record not found, so check using default claim code, blank
.         health fund, health fund table type and casemix code
.
          PACK      KEY31,PTINCNID,PTCNDCLM,SP6,SP3,KEY9,SP30
          CALL      RSPTHDF1                     * position in file
WSVB5400  CALL      RKPTHDF1                     * read next record
          BRANCH    OVRCD,WSVB5500               * eof - finished
.
          MATCH     PTINCNID,PTHDCNID            * same Contract ID ?
          GOTO      WSVB5500 IF NOT EQUAL        * no - finished
.
          MATCH     PTCNDCLM,PTHDCLMN            * default claim still ?
          GOTO      WSVB5500 IF NOT EQUAL        * no - finished
.
          MATCH     SP6,PTHDHFND                 * blank fund still ?
          GOTO      WSVB5500 IF NOT EQUAL        * no - finished
.
          MATCH     SP3,PTHDTABT                 * blank table type still ?
          GOTO      WSVB5500 IF NOT EQUAL        * no - finished
.
          MATCH     KEY9,PTHDCASM                * same casemix code still ?
          GOTO      WSVB5500 IF NOT EQUAL        * no - finished
.
          COMPARE   ONE,PTHDDTYP                 * inlier ?
          IF        @EQUAL
            COMPARE   PTHDEDAY,MAXMDAYS          * yes - greater end day ?
            IF        @LESS
              MOVE      PTHDEDAY,MAXMDAYS        * yes - save ending day
            ENDIF
          ENDIF
          GOTO      WSVB5400                     * get next record
.
.         See if a valid inlier record has been found, and if not, write
.         a warning for this invoice.
.
WSVB5500  COMPARE   ZERO,MAXMDAYS                * inlier record found ?
....                                                * start           *D-205376
....      IF        @EQUAL
....        MOVE      "SVB.01-Warning: Inlier record not found for casemix code (",ERRMSG
....        ENDSET    ERRMSG
....        APPEND    KEY9,ERRMSG
....        APPEND    ")",ERRMSG
....        RESET     ERRMSG
....        CALL      PWRN0000
....      ENDIF                                     * end             *D-205376
.
.         If the LOS is less than the maximum inlier days, then load LOS,
.         otherwise, load maximum inlier days.
.
WSVB6000  MOVE      ADATE,FROMDATE               * load from date from adm. date
          UNPACK    CURRDATE,TODATE              * Def. to date to current date
          MATCH     SP8,DDATE                    * blank discharge date ?
          IF        !@EQUAL
            MOVE      DDATE,TODATE               * no-use disch date for to date
          ENDIF
.
.          CALL      NHOSPDAY                     * calc. no of days in hospital
          DAYSEP    FROMDATE,TODATE,FORM4
.
.         If this is a same day patient, then NBRDAYS should be set to "1"
.         by NHOSPDAY.  In this case, there is no need to change JULDAY as
.         the "ToDate" should be set to the same date as the
.         "FromDate", even though the "NumberOfDays" is set to "1".
.
          MATCH     FROMDATE,TODATE              * same day patient ?
          IF        @EQUAL
.            IF        NBRDAYS = 1
.              MOVE      NBRDAYS,SVBSEG04         * load NumberOfDays
.              GOTO      WSVB8000
.            ENDIF
.
            IF        FORM4 = 0
               MOVE     ONE,FORM4
               MOVE     FORM4,SVBSEG04
               GOTO     WSVB8000
            ENDIF
          ENDIF
.
.         Not a same day patient.
.         Where the number of days in hospital is less than the maximum
.         inlier days, the number of days should still be used, but
.         the ToDate should remain as the discharge date (or the
.         current date if the patient is still admitted), rather
.         than recalculating it based on the number of days (which
.         excludes leave days).
.
.          IF        NBRDAYS < MAXMDAYS
.            UNPACK    TODATE,CCENT,CYEAR,CMON,CDAY
.            PACK      SVBSEG07,CDAY,CMON,CCENT,CYEAR  * load ToDate   * 210559
.            REP       " 0",SVBSEG07
.            MOVE      NBRDAYS,SVBSEG04           * load NumberOfDays
.            REP       " 0",SVBSEG04
.            GOTO      WSVB9000
.          ENDIF
.
          IF        FORM4 < MAXMDAYS | FORM4 = MAXMDAYS
            UNPACK    TODATE,CCENT,CYEAR,CMON,CDAY
            PACK      SVBSEG07,CDAY,CMON,CCENT,CYEAR  * load ToDate
            REP       " 0",SVBSEG07
            MOVE      FORM4,SVBSEG04           * load NumberOfDays
            REP       " 0",SVBSEG04
            GOTO      WSVB9000
          ENDIF
.
          IF        MAXMDAYS = ZERO
            UNPACK    TODATE,CCENT,CYEAR,CMON,CDAY
            PACK      SVBSEG07,CDAY,CMON,CCENT,CYEAR  * load ToDate
            REP       " 0",SVBSEG07
            MOVE      FORM4,SVBSEG04           * load NumberOfDays
            REP       " 0",SVBSEG04
            GOTO      WSVB9000
          ENDIF
.
          ADD       MAXMDAYS,JULDAY              * increment julian day
          MOVE      JULDAY,JWKDAY                * conv. julian day to greg.date
          MOVE      JULYR,JWKYER
          MOVE      JULCC,JWKCC
          CALL      JULCON
          PACK      DIM8,CC,YY,MM,DD             * Todate of maximum inlier
          REP       " 0",DIM8
.
          MOVE      ZERO,SVBTDAYS
          ADD       MAXMDAYS,SVBTDAYS           
.
.         PRINT     *N,*1,"SVB Segment Start WHILE LOOP"
.         PRINT     *N,*1,"Maximum Inlier Days To Date: ",DIM8
.
          MOVE      ZERO,LPDWRKCN
          WHILE     LPDWRKCN < 99
            ADD       ONE,LPDWRKCN
.
            MATCH     SP70,LPDWRK01[LPDWRKCN]
            IF        !@EQUAL & !@EOS
.
              UNPACK    LPDWRK01[LPDWRKCN],DIM2A,DIM2,DIM4
              PACK      DIM8A,DIM4,DIM2,DIM2A
              REP       " 0",DIM8A
.
              MATCH     DIM8,DIM8A
              IF        @LESS
.
.               PRINT     *N,*1,"Leave From Date: ",LPDWRK01[LPDWRKCN]
.               PRINT     *N,*1,"Leave To Date: ",LPDWRK02[LPDWRKCN]
.               PRINT     *N,*1,"Leave Days: ",LPDWRK03[LPDWRKCN]
.
                MOVE      ZERO,FORM4
                MOVE      LPDWRK03[LPDWRKCN],FORM4
.               ADD       FORM4,JULDAY
                ADD       FORM4,SVBTDAYS
.
.               MOVE      JULDAY,JWKDAY      
.               MOVE      JULYR,JWKYER
.               MOVE      JULCC,JWKCC
.               CALL      JULCON
.               PACK      DIM8B,DD,MM,CC,YY
.               REP       " 0",DIM8B
.               PRINT     *N,*1,"New SVB ToDate: ",DIM8B
.               PRINT     *N,*1,"New SVB NumberOf Days: ",SVBTDAYS
.               PRINT     *N
.
              ENDIF
            ENDIF
          DO
.
.         PRINT     *N,*1,"End WHILE LOOP"
.
          MOVE      SVBTDAYS,SVBSEG04            * load NumberOfDays
          REP       " 0",SVBSEG04
.
          MOVE      FROMDATE,DATECALC
          ADD       SVBTDAYS,DATECALC
          MOVE      DATECALC,DATECALD
          REP       " 0",DATECALD
.         
          UNPACK    DATECALD,CCENT,CYEAR,CMON,CDAY
          PACK      SVBSEG07,CDAY,CMON,CCENT,CYEAR           
.
          GOTO      WSVB9000         
.
WSVB8000  REP       " 0",SVBSEG04
.
.         Load ToDate
.
          MOVE      JULDAY,JWKDAY                * conv. julian day to greg.date
          MOVE      JULYR,JWKYER
          MOVE      JULCC,JWKCC
          CALL      JULCON
          PACK      SVBSEG07,DD,MM,CC,YY
          REP       " 0",SVBSEG07
.
WSVB9000  BRANCH    VALDFLG,WSVB9999             * validation only
.
          WRITE     EXTFILE1,SEQ;TILDA01,ANSS,ANSV,ANSB:
                                 SVBSEG01,SVBSEG02,SVBSEG03,SVBSEG04,SVBSEG05:
                                 SVBSEG06,SVBSEG07
.
WSVB9999  RETURN
+
.******************************************************************************
.*                                  WANB0000              Called by: VALD0000 *
.*                           Write Newborn Baby details            & WRIT0000 *
.******************************************************************************
.
WANB0000  UNPACK    SP70,ANBSEG01,ANBSEG02
          UNPACK    SP70,ANBSEG03,ANBSEG04,ANBSEG05
.
          MOVE      ONE,FOUNDLNK                 * initialise flag for no link
.
.         First check if the patient that we are claiming for is a newborn.
.         The patient must be < 29 days old at admission date (from PATSEG02)
.
          COMPARE   TWENTY9,PSAGEDAY             * valid new born ?
          IF        @LESS
            MOVE      TWO,FOUNDLNK               * set flag (sending qual. baby)
            GOTO      WANB1700
          ENDIF
.
.         The patient is not a newborn, so check if we are processing
.         a claim for a female patient
.
          MATCH     "2",PATSEG10                 * female patient ?
          GOTO      WANB9999 IF NOT EQUAL        * no - finished
.
.         The patient is female, so check if there are any linked U/R's
.
          MOVE      PURNO,SAVPURNO               * save mother's U/R
          PACK      KEY16,PURNO,SP20
          CALL      RDSLINK1                     * position in link file for U/R
WANB0500  CALL      RDKLINK1                     * read next record
          BRANCH    OVRCD,WANB8000               * eof - finished
.
          MATCH     SAVPURNO,LINKFUR             * same U/R still ?
          GOTO      WANB8000 IF NOT EQUAL        * no - finished
.
.         A linked U/R has been found for this patient, so check if
.         the link reason code is for a Mother/Child relationship (Indicator 1,
.         Category LU = "M").
.
          MATCH     SP3,LINKREA                  * link reason blank ?
          GOTO      WANB0500 IF EQUAL            * yes - ignore
.
          PACK      KEY5,ANSL,ANSU,LINKREA
          CALL      RDCODE1                      * code on file ?
          BRANCH    OVRCD,WANB0500               * no - ignore
.         
          MATCH     ANSM,TCINDC1                 * Indicator 1 set to "M" ?
          GOTO      WANB0500 IF NOT EQUAL        * no - ignore
.
.         Check if we are using unqualified status or date of birth to 
.         validate a mother/baby link.
.
          MOVE      ZERO,FOUNDLNK                * set flag for link found
          COMPARE   ONE,PTCNMBRL                 * using DOB validation ?
          GOTO      WANB1500 IF EQUAL            * yes
.         
.         Using unqualified status to validate mother/baby link.
.         The link reason is a valid mother/baby link, so check if this
.         patient was admitted during the mother's inpatient stay
.
          PACK      KEY16,INVFRDTE,SP20
          CALL      RDSMISS3                     * position in admission file
WANB1000  CALL      RDKMISS3                     * read next record
          BRANCH    OVRCD,WANB0500               * eof - get next linked U/R
.
          MATCH     ADATE,INVTODTE               * moth. disch. date < admit dte
          GOTO      WANB0500 IF LESS             * yes - get next linked U/R
.
          MATCH     LINKTUR,AURNO                * same U/R number ?
          GOTO      WANB1000 IF NOT EQUAL        * no - ignore admission
.
.         This linked U/R was admitted while the patient was admitted, so
.         check if it was an unqualified baby (Category A, Indicator 2 = "U")
.
          MATCH     SP3,ATYPE                    * blank admission type ?
          GOTO      WANB1000 IF EQUAL            * yes - ignore admission
.
          PACK      KEY5,ANSA,SP1,ATYPE
          CALL      RDCODE1                      * admission type found ?
          BRANCH    OVRCD,WANB1000               * no - ignore admission
.
          MATCH     ANSU,TCINDC2                 * unqualified baby ?
          GOTO      WANB1000 IF NOT EQUAL        * no - ignore admission
.
.         The linked U/R is a valid unqualifed newborn, or we are using
.         DOB to validate the mother/baby link, so get the baby's PMI details
.
WANB1500  MOVE      LINKTUR,KEY8
          CALL      RDMAST1                      * PMI record found ?
          IF        OVRCD = 1
            MOVE      "ANB.01-Baby's PMI record not found",ERRMSG
            CALL      PERR0000
            GOTO      WANB1000
          ENDIF
.
          MOVE      LINKTUR,KEY8
          CALL      RDPMPX21                     * PMI ext. record found ?
          IF        OVRCD = 1
            MOVE      "ANB.06-Baby's PMI extension record not found",ERRMSG
            CALL      PERR0000
            GOTO      WANB1000
          ENDIF
.
          COMPARE   ONE,PTCNMBRL                 * using DOB validation ?
          IF        @EQUAL
            MATCH     ADATE,PBDATE               * dob < admit date ?
            GOTO      WANB0500 IF LESS           * yes - no match
.
            IF        ASTAT = 3
              MOVE      DDATE,ENDDATE            * discharge date is end date
            ELSE
              CALL      IBACLOCK                 * use current date as end date
              MOVE      CCC,CCENT
              MOVE      CYY,CYEAR
              MOVE      CMM,CMON
              MOVE      CDD,CDAY
              PACK      ENDDATE,CCENT,CYEAR,CMON,CDAY
              REP       " 0",ENDDATE
            ENDIF
            MATCH       PBDATE,ENDDATE           * DOB > discharge/end date ?
            GOTO        WANB0500 IF LESS         * yes - no match
          ENDIF
.
.         Load the ANB segment fields.
.         Load BabyDateOfBirth.
.
WANB1700  MATCH     SP8,PBDATE
          IF        @EQUAL
            MOVE      "ANB.04-BabyDateOfBirth is blank",ERRMSG
            CALL      PERR0000              
          ELSE
            UNPACK    PBDATE,CCENT,CYEAR,CMON,CDAY
            PACK      ANBSEG01,CDAY,CMON,CCENT,CYEAR
          ENDIF
.
.         Load BabyFamilyName
.
          PACK      ANBSEG02,PSNAME,SP30,SP10
          MATCH     SP40,ANBSEG02
          IF        @EQUAL
            MOVE      "ANB.05-BabyFamilyName is blank",ERRMSG
            CALL      PERR0000              
          ENDIF
.
.         Load BabyFirstName
.
          PACK      ANBSEG03,PMPXFNAM,SP30,SP10
          MATCH     SP40,ANBSEG03
          IF        @EQUAL
            MOVE      "ANB.02-BabyFirstName is blank",ERRMSG
            CALL      PERR0000              
          ENDIF
.
.         Load BabyGender
.
          MOVE      PSEX,KEY1
          REP       "M1F2U9I3R3O3",KEY1              * load baby sex
.
          PACK      KEY5,ANSG,SP1,PSEX,SP70
          CALL      RDCODE1
          IF        OVRCD=0
            MOVE      TCINDC3,KEY1
          ENDIF
.
          MATCH     "1",KEY1
          IF        !@EQUAL
            MATCH     "2",KEY1
            IF        !@EQUAL
              MATCH     "3",KEY1
              IF        !@EQUAL
                MATCH     "9",KEY1
                IF        !@EQUAL
                  MOVE      "ANB.03-BabyGender not valid",ERRMSG
                  CALL      PERR0000
                ENDIF
              ENDIF
            ENDIF
          ENDIF
          MOVE      KEY1,ANBSEG04
.
.         Load BabySecondInitial
.
          MOVE      PMPXSNAM,ANBSEG05
.
.         If we are sending a qualified baby, only one ANB record is sent
.
          IF        VALDFLG = 1
            IF      FOUNDLNK = 2
              GOTO    WANB9999                   * validation only & qual. baby
            ELSE
              GOTO    WANB0500                   * validation only & unqual baby
            ENDIF
          ENDIF
.
.         Write ANB record
.
          WRITE     EXTFILE1,SEQ;TILDA01,ANSA,ANSN,ANSB:
                                 ANBSEG01,ANBSEG02,ANBSEG03,ANBSEG04,ANBSEG05
.
          COMPARE   TWO,FOUNDLNK                 * sending qual. baby ?
          GOTO      WANB9999 IF EQUAL            * yes - finished
.
          GOTO      WANB0500                     * get next linked U/R
.
.         If there were linked U/R's found, re-read the Mother's PMI &
.         admission records before proceeding
.
WANB8000  BRANCH    FOUNDLNK,WANB9999            * no linked U/R's found
.
          MOVE      ADMINO,KEY8
          CALL      RDMISS1
          MOVE      AURNO,KEY8
          CALL      RDMAST1
          MOVE      AURNO,KEY8
          CALL      RDPMPX21
.
WANB9999  RETURN
+
.******************************************************************************
.*                                  WTFR0000              Called by: VALD0000 *
.*                           Write Transfer Details                & WRIT0000 *
.******************************************************************************
.
WTFR0000  MOVE      ONE,ADSOURCE                 * set for no admission TFR
          MOVE      ONE,DSSOURCE                 * set for no discharge TFR
.
.         First check if we need to send an admission transfer record
.         (ReferralSourceCode = Admitted patient transferred from
.         another hospital)
.
          MATCH     "1",EPDSEG18                 * transfer from another hosp?
          IF        @EQUAL
            MOVE      ZERO,ADSOURCE              * yes - set flag for adm TFR
          ENDIF
.
.         Next check if we need to send a discharge transfer record
.         (DischargeTypeCode =:
.            - Acute Hospital
.            - Nursing Home
.            - Psychiatric Hospital
.            - Other Health Facility)
.
          MATCH     "01",EPDSEG09                * sent to acute hospital ?
          GOTO      WTFR1000 IF EQUAL            * yes
.
          MATCH     "02",EPDSEG09                * sent to nursing home ?
          GOTO      WTFR1000 IF EQUAL            * yes
.
          MATCH     "03",EPDSEG09                * sent to psychiatric hospital?
          GOTO      WTFR1000 IF EQUAL            * yes
.
          MATCH     "04",EPDSEG09                * sent to other health facil.?
          GOTO      WTFR1000 IF EQUAL            * yes
.
.         We don't need to send a discharge transfer record, so
.         if we aren't sending an admission transfer record, then we're
.         finished
.
          BRANCH    ADSOURCE,WTFR9999            * finished
          GOTO      WTFR2000
.
.         We need to send a discharge TFR segment, so set the flag
.
WTFR1000  MOVE      ZERO,DSSOURCE                * set flag for discharge TFR
.
.         We need to send one or more TFR segments, so first see if
.         there is transfer destination record (patdadaf)
.
WTFR2000  MOVE      SP5,PTDADCTS                 * initialise transfer sources
          MOVE      SP5,PTDAADTS
.
          PACK      KEY8,ADMINO,SP70
          CALL      RDPTDAD1
.
          BRANCH    ADSOURCE,WTFR3000            * not sending adm transfer
.
.         Check for admission transfer source code
.
          MATCH     SP70,PTDAADTS                * admis. trans. source blank ?
          GOTO      WTFR2500 IF NOT EQUAL        * no
.
          MOVE      "TFR.12-Missing admission transfer source record",ERRMSG
          CALL      PERR0000
          GOTO      WTFR3000
.
.         Load PreviousProviderDays
.
WTFR2500  MOVE      ADYHOSP,FORM4
          MOVE      FORM4,TFRSEG02               * Days of hospitalisation
          REP       " 0",TFRSEG02
.
.         Load TransferTypeCode
.
          MOVE      ANSX,TFRSEG06                * X for Unknown
.
          CALL      SATR0000                     * set admission transfer record
          CALL      WREC0000                     * write record
.
.         Check for discharge transfer record
.
WTFR3000  BRANCH    DSSOURCE,WTFR9999            * not sending dis. transfer
.
          MATCH     SP70,PTDADCTS                * disch. trans. source blank ?
          GOTO      WTFR3500 IF NOT EQUAL        * no
.
          MATCH     "01",EPDSEG09                * Acute Hospital ?
          IF        !@EQUAL
            MATCH     "03",EPDSEG09              * no - Psychiatric Hospital ?
            GOTO      WTFR3500 IF NOT EQUAL      * no
          ENDIF
.
          MOVE      "TFR.12-Missing transfer destination record",ERRMSG
          CALL      PERR0000
          GOTO      WTFR9999
.
.         Load PreviousProviderDays
.
WTFR3500  MOVE      ADYHOSP,FORM4
          MOVE      FORM4,TFRSEG02               * Days of hospitalisation
          REP       " 0",TFRSEG02
.
.         Load TransferTypeCode
.
          MOVE      ANSX,TFRSEG06                * X for Unknown
.
          CALL      SDTR0000                     * set discharge transfer record
          CALL      WREC0000                     * write record
.
WTFR9999  RETURN
+
.*****************************************************************************
.*                            SATR0000             Called by: WTFR0000       *
.*                   Set admission transfer details                          *
.*****************************************************************************
.
SATR0000  UNPACK    SP70,TFRSEG01,TFRSEG03,TFRSEG04,TFRSEG05
          REP       " 0",TFRSEG03
.
.         Load TransferCde
.
          MOVE      ANSA,TFRSEG05                * set for admission
.
.         Load ServiceDate
.
          UNPACK    ADATE,CCENT,CYEAR,CMON,CDAY
          PACK      TFRSEG04,CDAY,CMON,CCENT,CYEAR
.
.         Get the transfer source record
.
          PACK      KEY5,PTDAADTS,SP70
          CALL      RDPTVAD1                     * source record found ?
          BRANCH    OVRCD,SATR9000               * no
.
.         Load FacilityId (Mandatory for Admission record)
.
          MOVE      TWO,PROVFLAG                 * set to adm. transf. facility
          MOVE      PTVAPROV,DIM8
          CALL      VPRN0000                     * valid provider ?
          BRANCH    EXIT,SATR9999                * no - error
.
          PACK      TFRSEG01,PTVAPROV,SP70       * yes
          GOTO      SATR9999
.
SATR9000  MOVE      "TFR.01-Admission Transfer Source Code (",ERRMSG
          ENDSET    ERRMSG
          APPEND    PTDAADTS,ERRMSG
          APPEND    ") not found",ERRMSG
          RESET     ERRMSG
          CALL      PERR0000
          GOTO      SATR9999
.
SATR9999  RETURN
+
.*****************************************************************************
.*                       SDTR0000                  	Called by: WTFR0000  *
.*             Set discharge transfer details                                *
.*****************************************************************************
.
SDTR0000  UNPACK    SP70,TFRSEG01,TFRSEG03,TFRSEG04,TFRSEG05
          REP       " 0",TFRSEG03
.
.         Load TransferCde
.
          MOVE      ANSS,TFRSEG05                * set for discharge
.
.         Load ServiceDate
.
          UNPACK    DDATE,CCENT,CYEAR,CMON,CDAY
          PACK      TFRSEG04,CDAY,CMON,CCENT,CYEAR
.
.         Get the transfer source record if present
.
          MATCH     SP5,PTDADCTS                 * blank transfer source ?
          GOTO      SDTR9999 IF EQUAL            * yes - finished
.
          PACK      KEY5,PTDADCTS,SP70
          CALL      RDPTVAD1                     * source record found ?
          BRANCH    OVRCD,SDTR9000               * no
.
.         Load FacilityId
.         This field is only mandatory where the DischargeTypeCode is
.         Acute or Psychiatric Hospital
.
          MATCH     "01",EPDSEG09                * Acute Hospital ?
          IF        !@EQUAL
            MATCH     "03",EPDSEG09              * no - Psychiatric Hospital ?
            GOTO      SDTR9999 IF NOT EQUAL      * no
          ENDIF
.
.         Field is mandatory, so validate
.
          MOVE      THREE,PROVFLAG               * set to dis. transf. facility
          MOVE      PTVAPROV,DIM8
          CALL      VPRN0000                     * valid provider ?
          BRANCH    EXIT,SDTR9999                * no - error
.
          PACK      TFRSEG01,PTVAPROV,SP70       * yes
          GOTO      SDTR9999
.
SDTR9000  MOVE      "TFR.02-Discharge Transfer Source Code (",ERRMSG
          ENDSET    ERRMSG
          APPEND    PTDADCTS,ERRMSG
          APPEND    ") not found",ERRMSG
          RESET     ERRMSG
          CALL      PERR0000
          GOTO      SDTR9999
.
SDTR9999  RETURN
+
.******************************************************************************
.*                            WREC0000             Called by: SATR0000        *
.*                     Write transfer record                  SDTR0000        *
.* Requires: TFRSEGxx variables set                                           *
.******************************************************************************
.
WREC0000  BRANCH    VALDFLG,WREC9999             * Only validating data
.
          WRITE     EXTFILE1,SEQ;TILDA01,ANST,ANSF,ANSR:
                                 TFRSEG01,TFRSEG02,TFRSEG03:
                                 TFRSEG04,TFRSEG05,TFRSEG06
WREC9999  RETURN
+
.******************************************************************************
.*                                  WACS0000              Called by: VALD0000 *
.*                     Write Accommodation Summary Details         & WRIT0000 *
.******************************************************************************
.
WACS0000  UNPACK    SP70,ACSSEG01,ACSSEG02,ACSSEG03,ACSSEG04,ACSSEG05:
                         ACSSEG06,ACSSEG07,ACSSEG08
          REP       " 0",ACSSEG01
          REP       " 0",ACSSEG04
          REP       " 0",ACSSEG05
          REP       " 0",ACSSEG07
          REP       " 0",ACSSEG08
.
          MOVE      ZERO,ACSTOTAL                * initialise ACS total charge
.
          MOVE      ZERO,ACSCOUNT                * init. accom. record count
          MOVE      ZERO,ACCCOUNT                * init. ACD/CCG record count
          MOVE      ZERO,LPDCOUNT                * initialise LPD record count
.
          MOVE      ZERO,LEAVTOTL                * initialise total leave days
          MOVE      ZERO,MVENTFLG                * initialise MV flag
          MOVE      ZERO,SAVTSERV                * ini. total MV days
.
.         Load AccommodationDays
.
          MOVE      NOINVDYS,ACSSEG01
          MATCH     "0000",NOINVDYS
          IF        @EQUAL
            MOVE      "ACS.01-AccommodationDays is zero",ERRMSG
            CALL      PERR0000
          ENDIF
.
.         Loop through transfer file records for this admission
.
          PACK      KEY30,ADMINO,SP30
          CALL      RDSTRAN2                     * position on admission no.
WACS0500  CALL      RDKTRAN2                     * read next record
          BRANCH    OVRCD,WACS1000               * eof - finished
.
          MATCH     TADMN,ADMINO                 * same admission still ?
          GOTO      WACS1000 IF NOT EQUAL        * no - finished
.
          MATCH     ANSD,TMOVE                   * discharge record ?
          GOTO      WACS1000 IF EQUAL            * yes
.
          MATCH     ANSL,TMOVE                   * leave record ?
          GOTO      WACS0500 IF NOT EQUAL        * no
.
          MATCH     TDATE,INVFRDTE         * invoice start date < on leave date?
          IF        @LESS
            MOVE      TDATE,LEAVDATE       * yes, use TDATE to calc. leavedays
          ELSE
            MOVE      INVFRDTE,LEAVDATE    * no, use invoice start date
          ENDIF
.
          CALL      RDKTRAN2                     * read next record
          BRANCH    OVRCD,WACS0750               * eof - finished
.
          MATCH     TADMN,ADMINO                 * same admission still ?
          GOTO      WACS0750 IF NOT EQUAL        * no - finished
.
          MATCH     ANSR,TMOVE                   * return record ?
          GOTO      WACS0750 IF NOT EQUAL        * no
.
          MATCH     TDATE,INVFRDTE          * return date <= invoice start date?
          GOTO      WACS0500 IF NOT LESS    * yes, ignore record
.
          MATCH     INVTODTE,TDATE          * Is return date < invoice to date
          GOTO      WACS0750 IF NOT LESS    * no
.
          MOVE      TDATE,RETNDATE               * load return date
          GOTO      WACS0800
.
WACS0750  MOVE      INVTODTE,RETNDATE            * end invoice date
.
WACS0800  REP       " 0",LEAVDATE
          REP       " 0",RETNDATE
.
          CALL      LEAV0000                     * calculate bed days for leave
          ADD       LEAVDAY,LEAVTOTL             * increment leave days
          GOTO      WACS0500                     * get next tran record
.
.         Load FromDate
.
WACS1000  UNPACK    INVFRDTE,CCENT,CYEAR,CMON,CDAY
          PACK      ACSSEG03,CDAY,CMON,CCENT,CYEAR
.
.         Load ToDate
.
          UNPACK    INVTODTE,CCENT,CYEAR,CMON,CDAY
          PACK      ACSSEG06,CDAY,CMON,CCENT,CYEAR
.
.         Load LeaveDays
.
          MOVE      LEAVTOTL,ACSSEG04
          REP       " 0",ACSSEG04
.
.         Load NumberOfDays
.
          DAYSEP    INVFRDTE,INVTODTE,FORM4
          IF        FORM4 = 0
            MOVE      ONE,FORM4                  * added for CAR 287000
          ENDIF
          MOVE      FORM4,ACSSEG05
          REP       " 0",ACSSEG05
.
.         Load TotalChargeAmount & ChargeRaisedCde.
.         Loop through patdtraf looking for accommodation charges.
.
          MOVE      ZERO,FORM12P2                * initialise accom charge amt
          PACK      KEY23,ADMINO,INVNO,ONE,SP30
          CALL      RDSDTRN4                     * position on invoice no.
WACS2000  CALL      RDKDTRN4                     * read next record
          BRANCH    OVRCD,WACS3000               * eof - finished
.
          MATCH     ADMINO,TADMNO                * same admission still ?
          GOTO      WACS3000 IF NOT EQUAL        * no - finished
.
          MATCH     INVNO,TREF                   * same invoice no. ?
          GOTO      WACS3000 IF NOT EQUAL        * no - finished
.
.         There may be miscellaneous charge records for mechanical ventilation,
.         so we need to include these in accommodation charges.
.         There will be an accommodation record for mechanical ventilation,
.         but this will have a zero charge.
.
          BRANCH    TRECTYPE,WACS2200:           * accommodation
                             WACS2000:           * theatre
                             WACS2100            * miscellaneous
          GOTO      WACS3000
.
.         This is a mechanical ventilation miscellaneous charge record,
.         so we need to save the daily MV charge rate for use later in LACC0000.
.         There should only ever be one miscellaneous charge record for MV.
.
WACS2100  COMPARE   ONE,PTDTEPSD                 * mech. ventilation record ?
          GOTO      WACS2000 IF NOT EQUAL        * no - finished
.
          ADD       ONE,ACSCOUNT                 * incr. accomm. record count
.
          MOVE      ONE,MVENTFLG                 * set flag for MV charge found
          MOVE      TPATAMTT,MVCHARGE            * save total charge
          IF        IBCNUGST=2
            ADD       PTDTGSTM,MVCHARGE          * add GST amount
          ENDIF
          ADD       MVCHARGE,FORM12P2            * increment accom charge amount
          ASSIGN    (MVCHARGE/TSERVS),MVCHARGE   * save daily charge
          MOVE      TSERVS,SAVTSERV              * save mech. vent day total
          GOTO      WACS3000
.
WACS2200  COMPARE   ONE,PTDTEPSD                 * mech. ventilation record ?
          GOTO      WACS2000 IF EQUAL            * yes - ignore
.
          ADD       ONE,ACSCOUNT                 * incr. accomm. record count
.
          ADD       TPATAMTT,FORM12P2            * increment accom charge amount
          IF        IBCNUGST=2
            ADD       PTDTGSTM,FORM12P2          * add GST amount
          ENDIF
          GOTO      WACS2000                     * get next record
.
WACS3000  COMPARE   ZERO,ACSCOUNT                * any accomm. records for inv.?
          GOTO      WACS4000 IF EQUAL            * no - finished
.
          CALL      FTOT0000                     * Format numeric totals
          MATCH     ANSC,KEY1
          IF        @EQUAL
            MOVE      FORM12P2,ACSTOTAL          * save ACS Total charge
            ADD       FORM12P2,SUBTOTAL          * increment subtotal
          ENDIF
          MOVE      KEY9,ACSSEG07
          MOVE      KEY1,ACSSEG02
.
.         Load NonCertifiedDaysOfStay
.
WACS4000  BRANCH    VALDFLG,WACS9999             * Only validating data
.
          MATCH     "1",PTCNECUP
          IF        @EQUAL
            WRITE     EXTFILE1,SEQ;TILDA01,ANSA,ANSC,ANSS:
                                   ACSSEG01,ACSSEG02,ACSSEG03,ACSSEG04,ACSSEG05:
                                   ACSSEG06,ACSSEG07,ACSSEG08
          ELSE
            WRITE     EXTFILE1,SEQ;TILDA01,ANSA,ANSC,ANSS:
                                   ACSSEG01,ACSSEG02,ACSSEG03,ACSSEG04,ACSSEG05:
                                   ACSSEG06,ACSSEG07
          ENDIF
.
WACS9999  RETURN
+
.******************************************************************************
.*                                  LACC0000              Called by: VALD0000 *
.*                         Load Accommodation Details              & WRIT0000 *
.* Important Note:  All ACD (and CCG) segment data needs to be written to a   *
.*                  temporary table as some CCG records may need to be        *
.*                  written as ACD records (where there is a CCG Private      *
.*                  Room Add On).  This can only be determined after both     *
.*                  the ACD & CCG records have be collated.                   *
.******************************************************************************
.
.         Initailise variables
.
LACC0000  MOVE      ZERO,ACCTOTAL                * accomm. total amount
          MOVE      ZERO,MVTOTDAY                * mv total days
          MOVE      SP9,PREVITEM                 * previous item code
          MOVE      ZERO,SAVPCLAS                * PatientClassificationCode
          MOVE      SP20,SAVSCODE                * ServiceCode
          MOVE      SP1,SAVSTCOD                 * ServiceCodeTypeCode
.
          PACK      KEY22,ADMINO,PINVNO,SP30
          CALL      RDSDTRN1                     * position for admiss/invoice
LACC0500  CALL      RDKDTRN1                     * read next record
          BRANCH    OVRCD,LACC9000               * eof - finished
.
          MATCH     TADMNO,ADMINO                * same admission still ?
          GOTO      LACC9000 IF NOT EQUAL        * no - finished
.
          MATCH     TREF,PINVNO                  * same invoice still ?
          GOTO      LACC9000 IF NOT EQUAL        * no - finished
.
.         We only need accommodation records
.
          COMPARE   ONE,TRECTYPE                 * accommodation record ?
          GOTO      LACC0500 IF NOT EQUAL        * no - ignore record
.
.         We have an accommodation record, so check if this record is     
.         for a leave period. If so, it can be ignored.
.
          MATCH     "PATIENT ON LEAVE              ",TDDESC   * on-leave record?
          GOTO      LACC0500 IF EQUAL            * yes - ignore record
.
.         Initialise ACD/CCG fields
.
          UNPACK    SP70,ACDCCG01,ACDCCG02,ACDCCG03,ACDCCG04,ACDCCG05
          UNPACK    SP70,ACDCCG06,ACDCCG07,ACDCCG08,ACDCCG09,ACDCCG10
          UNPACK    SP70,ACDCCG11,ACDCCG12,ACDCCG13,ACDCCG14,ACDCCG15
          UNPACK    SP70,ACDCCG16,ACDCCG17,ACDCCG18,ACDCCG20
          MOVE      ZERO,ACDCCG19
          MOVE      ZERO,ACDCCG21
.         REP       " 0",ACDCCG05
          REP       " 0",ACDCCG06
          REP       " 0",ACDCCG08
          REP       " 0",ACDCCG10
          REP       " 0",ACDCCG17
          REP       " 0",ACDCCG20
.
          MOVE      SP1,ADDONIND                 * initialise add-on fields
          MOVE      SP9,ADDONAMT
          REP       " 0",ADDONAMT
          MOVE      SP1,ADDONCHG
          MOVE      SP9,ADDONRAT
          REP       " 0",ADDONRAT
.
          MOVE      SP9,SAVEDVAS                 * initialise DVA Service Code
          MOVE      ZERO,SAVASSC1                * initialise Assoc # Cat A
          MOVE      SP11,SAVEICDC                * initialise ICD code
          MOVE      SP1,SAVEIND6                 * initialise ICU level
          MOVE      SP1,SAVEIND9                 * initialise indicator 9
.
.         We have a valid accommodation record.
.
.         Load BedBandCode. (Currently not populated - needs to be off Cat
.         BT, but all indicators are being used already).  As this is an
.         optional field, we will see if there is a problem with leaving the
.         field blank.
.
.         Load FromDate
.
          PACK      ACDCCG09,DTFCENT,DTFYEAR,DTFMONTH,DTFDAY
          REP       " 0",ACDCCG09
          PACK      CDYSFDTE,DTFCENT,DTFYEAR,DTFMONTH,DTFDAY
          REP       " 0",CDYSFDTE
.
.         Load ToDate
.
          PACK      ACDCCG15,TTCENT,TTYEAR,TTMONTH,TTDAY
          REP       " 0",ACDCCG15
          PACK      CDYSTDTE,TTCENT,TTYEAR,TTMONTH,TTDAY
          REP       " 0",CDYSTDTE
.
.         Load NumberOfDays
.
          MOVE      ONE,NBRDAYS                  * initialise for same day
          MATCH     CDYSFDTE,CDYSTDTE            * same day ?
          IF        !@EQUAL
            CALL      CALCDAYS                   * no - calc no. of days leave
            SUB       ONE,CDYSDAYS
            MOVE      CDYSDAYS,NBRDAYS
          ENDIF
          MOVE      NBRDAYS,ACDCCG10
          REP       " 0",ACDCCG10
.
.         Load PatientClassificationCode.
.         Get the admission type.  To do this, get the corresponding transfer 
.         record for this accommodation record using the accommodation "from"
.         date and reading the last transfer record for this date.
.
          PACK      KEY30,TADMNO,CDYSFDTE,TILDA40
          CALL      RDSTRAN2                     * position in file
          CALL      RDPTRAN2                     * read next record
          IF        OVRCD = 1
            MOVE      "ACC.01-Transfer record not found",ERRMSG
            CALL      PERR0000
            GOTO      LACC3500
          ENDIF
.
          MATCH     TADMNO,ADMINO                * same admission still ?
          IF        !@EQUAL
            MOVE      "ACC.01-Transfer record not found",ERRMSG
            CALL      PERR0000
            GOTO      LACC3500
          ENDIF
.
.         The corresponding transfer record has been found, so check the 
.         admission type.
.         Check if admission type is blank.
.
          MATCH     SP3,TATYPE                   * admission type blank ?
          IF        @EQUAL
            MOVE      "ACC.02-Transfer Admission Type (Cat A) is blank",ERRMSG
            CALL      PERR0000
            GOTO      LACC3500
          ENDIF
.
.         Admission Type is not blank.
.         Get category/codes record for admission type code
.
          PACK      KEY5,ANSA,SP1,TATYPE
          CALL      RDCODE1                      * code on file ?
          IF        OVRCD = 1
            MOVE      "ACC.03-Transfer Admission Type (",ERRMSG
            ENDSET    ERRMSG
            APPEND    TATYPE,ERRMSG
            APPEND    " - Cat A) not found",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      LACC3500
          ENDIF
.
.         Save Category A values
.
          MOVE      TCINDC6,SAVEIND6             * save Indicator 6
          MOVE      TCINDC9,SAVEIND9             * save Indicator 9
.
.         Category/Code record found for admission type, so check value of
.         TCFORM6.
.
          IF        TCFORM6 < 1 | TCFORM6 > 14
            MOVE      "ACC.04-Admission Type code (",ERRMSG
            ENDSET    ERRMSG
            APPEND    TATYPE,ERRMSG
            APPEND    " - Cat A, Assoc. ##) not valid",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      LACC1000
          ENDIF
.
.         Load PatientClassificationCode TCFORM6 based on TATYPE (Cat A)
.
          LOAD      ACDCCG11,TCFORM6,CATD1,CATD2,CATD3,CATD4,CATAM:
                                     CATME,CATSU,CATAS,CATOB,CATPS:
                                     CATRE,CATNH,CATEC,CATOT
          MOVE      TCFORM6,SAVASSC1
.
.         If the admission and discharge dates are the same and the
.         PatientClassificationCode (EPDSEG16) is "PS" or "RE", then
.         reset the ACD PatientClassificationCode to "D1" (CAR 218405).
.
LACC1000  IF        SAMDAYFL = 1
            MATCH   "PS",EPDSEG16
            IF      !@EQUAL
              MATCH   "RE",EPDSEG16
              GOTO     LACC1200 IF NOT EQUAL
            ENDIF
            PACK      ACDCCG11,ANSD,ONE
          ENDIF
.
.         Get the transfer bed type which may be used for critical care
.         accommodation (if PTCNHCCC = 1) and will be used bed level code
.
LACC1200  MATCH     SP3,TRBTYP
          IF        @EQUAL
            MOVE      "ACC.05-Transfer Bed Type (Cat BT) is blank",ERRMSG
            CALL      PERR0000
            GOTO      LACC3500
          ENDIF
.
          PACK      KEY5,ANSB,ANST,TRBTYP
          CALL      RDCODE1                      * code on file ?
          IF        OVRCD = 1
            MOVE      "ACC.06-Transfer Bed Type (",ERRMSG
            ENDSET    ERRMSG
            APPEND    TRBTYP,ERRMSG
            APPEND    " - Cat BT) not found",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      LACC3500
          ENDIF
.
.         Check if this is Critical Care accommodation using Indicator 9
.         from Cat A or Cat BT and set critical care flag accordingly
.
LACC1500  IF        PTCNHCCC = 1
            MOVE      TCINDC9,INDCATR9           * using Cat BT
            MOVE      TCINDC2,ICULEVEL
          ELSE
            MOVE      SAVEIND9,INDCATR9          * using Cat A
            MOVE      SAVEIND6,ICULEVEL
          ENDIF
          CALL      CICU0000
          MOVE      EXIT,CCAREFLG                * set critical care flag
.                                                    0 = non-critical care
.                                                    1 = critical care
.
          BRANCH    OPTION,LACC2000              * HF claim
.
.         This is a DVA claim, so get the DVA service code from pmsdvaaf
.
          IF        CCAREFLG = 1 & PTCNHCCC = 1
            PACK      KEY5,ANSB,ANST,TRBTYP
          ELSE
            PACK      KEY5,ANSA,SP1,TATYPE
          ENDIF
          CALL      RDPMDVA1                     * DVA Accomm. Serv. Code found?
          BRANCH    OVRCD,LACC2000               * no
.
          MATCH     SP9,PMDVSERV                 * blank DVA Service Code ?
          GOTO      LACC2000 IF EQUAL            * yes
.
          MOVE      PMDVSERV,SAVEDVAS            * save DVA Service Code
.
LACC2000  BRANCH    CCAREFLG,LACC3200            * critical care accommodation
.
.         This is a Non-Critical Care Accommodation record.
.         Load ProgramNum.
.         Check if this is a Psychiatric or Rehabilitation patient.
.
          IF        SAVASSC1 <> 10 & SAVASSC1 <> 11
            GOTO      LACC2500                   * not psych or rehab
          ENDIF
.
          MOVE      ADMINO,KEY8
          CALL      RDVISA1                      * visit record on file ?
          BRANCH    OVRCD,LACC2300               * no
.
          MATCH     SP8,PMVXPRGM                 * program code blank ?
          GOTO      LACC2300 IF EQUAL            * yes
.
          CALL      PADO0000                     * pad out program code
          BRANCH    EXIT,LACC2300                * invalid program code
.
          IF        SAVASSC1 = 10
            MOVE      CATPS,ACDCCG12             * load program code prefix
          ELSE
            MOVE      CATRE,ACDCCG12
          ENDIF
          ENDSET    ACDCCG12
          APPEND    "00",ACDCCG12
          APPEND    DIM7,ACDCCG12                * load service code
          APPEND    SP20,ACDCCG12
          RESET     ACDCCG12
          GOTO      LACC2500
.
LACC2300  MOVE      "ACD.01-Warning: Program Code not found",ERRMSG
          CALL      PWRN0000                     * print a warning message
.
.         Load BedLevelCode
.         First check if this is an Outreach patient using Cat BT TRBTYP
.
LACC2500  MATCH     "4",THCSCOD                  * hospital in the home ?
          IF        @EQUAL
            PACK      ACDCCG04,ANSO,SP2          * yes
            GOTO      LACC3500
          ENDIF
.
.         Not an Outreach patient, so check if indicator 4 is blank
.
          MATCH     SP1,TCINDC4                  * indicator 4 blank ?
          GOTO      LACC3000 IF EQUAL            * yes
.
          TYPE      TCINDC4                      * indicator 4 numeric ?
          GOTO      LACC3000 IF EQUAL            * yes - error
.
.         Set Bed Level Code (ie Shared, Private, etc)
.
          PACK      ACDCCG04,TCINDC4,SP2
          MOVE      TCINDC4,KEY1
          REP       "F1L2P3S4",KEY1
          MOVE      ZERO,FORM1
          MOVE      KEY1,FORM1
          BRANCH    FORM1,LACC3500:              * fund specified
                          LACC3500:              * luxury room
                          LACC3500:              * private room
                          LACC3500               * shared room
.
LACC3000  MOVE      "ACD.02-Bed Level code (",ERRMSG
          ENDSET    ERRMSG
          APPEND    TRBTYP,ERRMSG
          APPEND    " - Cat BT, Indicator 4) not valid",ERRMSG
          RESET     ERRMSG
          CALL      PERR0000
          GOTO      LACC3500
.
.         This is Critical Care Accommodation record.
.         Load CriticalCareTypeCode.
.
LACC3200  MOVE      INDCATR9,FORM1
          MOVE      CATTEL,ACDCCG16
          LOAD      ACDCCG16,FORM1,CATICU,CATHDU,CATCCU,CATSCN,CATPCU:
                                   CATNCU,CATAND
.
.         Check if we need a CriticalCareLevel code
.
.         COMPARE   TWO,FORM1
.         GOTO      LACC3500 IF EQUAL
.
.         COMPARE   EIGHT,FORM1
.         GOTO      LACC3500 IF NOT LESS
.
.
.         Only use the ICULEVEL value for CATICU & CATCCU;
.         default blank value for the others.
.
          BRANCH    FORM1,LACC3300,LACC3500,LACC3300,LACC3500,LACC3500:
                          LACC3500,LACC3500
          GOTO      LACC3500
.
.         Validate CriticalCareLevel code
.
LACC3300  MATCH     SP1,ICULEVEL
          IF        @EQUAL
            MOVE      "CCG.01-CriticalCareLevel not set",ERRMSG
            CALL      PERR0000
            GOTO      LACC3500
          ENDIF
.
          TYPE      ICULEVEL
          IF        !@EQUAL
            MOVE      "CCG.02-CriticalCareLevel not numeric",ERRMSG
            CALL      PERR0000
            GOTO      LACC3500
          ENDIF
.
          MOVE      ICULEVEL,FORM1
          IF        FORM1 < 1 | FORM1 > 3
            MOVE      "CCG.03-CriticalCareLevel not valid",ERRMSG
            CALL      PERR0000
            GOTO      LACC3500
          ENDIF
.
          MOVE      ICULEVEL,ACDCCG05            * set ICU level
.
.         Set default BedLevelAddOnInd
.
LACC3500  MOVE      ANSN,ACDCCG03                * default to N for per diem
.
          COMPARE   ONE,PTDTEPSD                 * mech. ventilation record ?
          GOTO      LACC3700 IF NOT EQUAL        * no
.
          IF        MVENTFLG = 0
            MOVE      "ACC.07-Mechanical ventilation charge not found",ERRMSG
            CALL      PERR0000
            GOTO      LACC5000
          ENDIF
.
          MOVE      MVCHARGE,FRM12P2A
          UNPACK    SP70,KEY15,KEY7,KEY2,KEY1
          MOVE      FRM12P2A,KEY15
          UNPACK    KEY15,KEY5,KEY7,KEY1,KEY2
          PACK      ACDCCG08,KEY7,KEY2
          REP       " 0",ACDCCG08
.
          IF        TNODAYS = 0
            MOVE      MVCHARGE,FORM12P2          * for day case use day charge
            ADD       ONE,MVTOTDAY               * increment mv total days
          ELSE
            ASSIGN    (MVCHARGE*TNODAYS),FORM12P2
            ADD       TNODAYS,MVTOTDAY           * increment mv total days
          ENDIF
          CALL      FTOT0000                     * Format numeric totals
          MATCH     ANSC,KEY1
          IF        @EQUAL
            ADD       FORM12P2,ACCTOTAL          * save ACD Total charge
          ENDIF
          MOVE      KEY9,ACDCCG06
          MOVE      KEY1,ACDCCG07
          MOVE      ONE,ACDCCG21                 * set flag for mech. vent rec
          GOTO      LACC5000
.
.         Load DayRate
.         If this is a casepayment and there is an add-on charge, then
.         we need to send an ACD segment for the standard day rate and
.         a second ACD segment for the add-on rate.  The amount in TPATAMTI
.         is a lump sum based on the standard day rate plus the add-on charge,
.         so we need to calculate accordingly, using the add-on charge
.         in PTDTADPT and PTDTADRB.
.         First calculate the standard daily rate.
.
LACC3700  ASSIGN    (TPATAMTI-(PTDTADPT+PTDTADRB)),FRM12P2A
          UNPACK    SP70,KEY15,KEY7,KEY2,KEY1
          MOVE      FRM12P2A,KEY15
          UNPACK    KEY15,KEY5,KEY7,KEY1,KEY2
          PACK      ACDCCG08,KEY7,KEY2
          REP       " 0",ACDCCG08
.
.         Load Standard ChargeAmount & ChargeRaisedCde
.
          ASSIGN    (NBRDAYS*FRM12P2A),FORM12P2
          IF        IBCNUGST=2
            CALL      GGST0000                   * get GST rate
            ASSIGN    (FORM12P2+((IBGEAMNT*FRM12P2A*NBRDAYS)/100)),FORM12P2
          ENDIF
          CALL      FTOT0000                     * Format numeric totals
          MATCH     ANSC,KEY1
          IF        @EQUAL
            ADD       FORM12P2,ACCTOTAL          * save ACD Total charge
          ENDIF
          MOVE      KEY9,ACDCCG06
          MOVE      KEY1,ACDCCG07
.
.         If there is an add-on, calculate that rate.
.         Also need to reset ACDCCG04 (BedLevelCode) to "Shared", where
.         a subsequent ACD segment is being written for a private room add-on,
.         so the first ACD segment is sent as "Shared" and the second add-on
.         ACD segment is sent as "Private".
.
          IF        PTDTCCU = 1 & PTINCMIX = 1
            ASSIGN    (PTDTADPT+PTDTADRB),FRM12P2B
            UNPACK    SP70,KEY15,KEY7,KEY2,KEY1
            MOVE      FRM12P2B,KEY15
            UNPACK    KEY15,KEY5,KEY7,KEY1,KEY2
            PACK      ADDONRAT,KEY7,KEY2
            REP       " 0",ADDONRAT
            MOVE      ANSY,ADDONIND
            PACK      ACDCCG04,ANSS,SP1
.
.           Load Add-on ChargeAmount & ChargeRaisedCde
.
            ASSIGN    (NBRDAYS*FRM12P2B),FORM12P2
            IF        IBCNUGST=2
              CALL      GGST0000                  * get GST rate
              ASSIGN    (FORM12P2+((IBGEAMNT*FRM12P2B*NBRDAYS)/100)),FORM12P2
            ENDIF
            CALL      FTOT0000                   * Format numeric totals
            MATCH     ANSC,KEY1
            IF        @EQUAL
              ADD       FORM12P2,ACCTOTAL        * save ACD Total charge
            ENDIF
            MOVE      KEY9,ADDONAMT
            MOVE      KEY1,ADDONCHG
          ENDIF
.
.         Get the service type & code (DVA, CMBS, DRG, ICD or Other)
.
LACC5000  BRANCH    OPTION,LACC7000              * Health Fund claim
.
.         This is a DVA claim, so if this is a casemix invoice, then
.         use the casemix code for DVA service code.
.
          MOVE      ANSV,ACDCCG14                * load DVA service type
.
          COMPARE   ONE,PTINCMIX                 * casemix invoice ?
          IF        @EQUAL
            PACK      ACDCCG13,PTINCMCD,SP20     * yes - load DVA service code
            GOTO      LACC8500
          ENDIF
.
.         The DVA claim is a per diem invoice, so use the Cat. A
.         National HCP Equivalent OR the Cat BT related DVA service code.
.
          MATCH     SP9,SAVEDVAS                 * blank DVA Serv. Code(Cat A) ?
          IF        @EQUAL
            IF        CCAREFLG = 1
              MOVE      "CCG.04-Admission type code (",ERRMSG
            ELSE
              MOVE      "ACD.03-Admission type code (",ERRMSG
            ENDIF
            ENDSET    ERRMSG
            IF        CCAREFLG = 1 & PTCNHCCC = 1
              APPEND    TRBTYP,ERRMSG
              APPEND    " - Cat BT, DVA Eq.) is blank",ERRMSG
            ELSE
              APPEND    TATYPE,ERRMSG
              APPEND    " - Cat A, DVA Eq.) is blank",ERRMSG
            ENDIF
            RESET     ERRMSG
            CALL      PERR0000
          ELSE
            PACK      ACDCCG13,SAVEDVAS,SP20     * load DVA service code
          ENDIF
          GOTO      LACC8500
.
.         This is a health fund claim.
.         If this is a casemix invoice, then use the contract code
.         as the service code and determine the service type
.
LACC7000  COMPARE   ONE,PTINCMIX                 * casemix invoice ?
          GOTO      LACC8000 IF NOT EQUAL        * no
.
.         This is a casemix invoice, so if the accommodation period
.         lies within the period of the casemix billing, then use the
.         service code/type from the SVB segment, otherwise, use the
.         standard method to determine how the fields should be populated
.
          PACK      SAVKEY22,DTADMNO,TREF,DTTRANSN1,SP70
.
          MOVE      DTADMNO,SAVEADMN
          MOVE      TREF,SAVETREF
.
          PACK      KEY22,SAVEADMN,SAVETREF,SP70
          CALL      RDSDTRN1                     * position for admiss/invoice
LACC7010  CALL      RDKDTRN1                     * read next record
          BRANCH    OVRCD,LACC7100               * eof - finished
.
          MATCH     SAVEADMN,DTADMNO             * same admission still ?
          GOTO      LACC7100 IF NOT EQUAL        * no - finished
.
          MATCH     TREF,PINVNO                  * same invoice still ?
          GOTO      LACC7100 IF NOT EQUAL        * no - finished
.
          MATCH     PTINCNID,PTDTCNID
          GOTO      LACC7010 IF NOT EQUAL
.
          COMPARE   ZERO,PTDTDTYP
.         GOTO      LACC7010 IF EQUAL
          IF        @EQUAL
            COMPARE   ZERO,TNODAYS               * Is this a day case
            GOTO      LACC7010 IF NOT EQUAL
 
            MATCH     "1",CMBSCMIX               * Is it mapped to cmbs
            GOTO      LACC7010 IF NOT EQUAL
          ENDIF
.
.         UNPACK    SVBSEG03,CDAY,CMON,CCENT,CYEAR
.         PACK      DIM8,CCENT,CYEAR,CMON,CDAY
.
          PACK      DIM8,DTFCENT,DTFYEAR,DTFMONTH,DTFDAY
          REP       " 0",DIM8
          MATCH     DIM8,ACDCCG09
          GOTO      LACC7100 IF LESS
.
.         UNPACK    SVBSEG07,CDAY,CMON,CCENT,CYEAR
.         PACK      DIM8,CCENT,CYEAR,CMON,CDAY
.
          PACK      DIM8,TTCENT,TTYEAR,TTMONTH,TTDAY
          REP       " 0",DIM8
          MATCH     ACDCCG15,DIM8
          GOTO      LACC7100 IF LESS
.
          MOVE      SVBSEG05,ACDCCG13
          MOVE      SVBSEG06,ACDCCG14
.
          MOVE      SAVKEY22,KEY22
          CALL      RDDTRN1
.
.
          GOTO      LACC8600
.
.         Check if this is a CMBS code or a DRG
.
LACC7100  MOVE      SAVKEY22,KEY22
          CALL      RDDTRN1
.
          MOVE      ANSC,ACDCCG14                * default CMBS service type
          PACK      ACDCCG13,PTINCMCD,SP20       * load contract code
.
          UNPACK    PTINCMCD,KEY4,KEY5
          MATCH     SP5,KEY5                     * last 5 chars blank ?
          GOTO      LACC8200 IF NOT EQUAL        * no - use CMBS
.
          MOVE      "999",KEY3                   * yes - check for DRG
          PACK      KEY7,KEY4,KEY3,SP10
          CALL      RSPTDGW1                     * position on last version
          CALL      RPPTDGW1                     * read previous record
          BRANCH    OVRCD,LACC8200               * eof - assume CMBS
.
          MATCH     KEY4,PTDWDRGC                * same DRG still ?
          GOTO      LACC8200 IF NOT EQUAL        * no
.
          MOVE      ANSD,ACDCCG14                * yes - set to service type DRG
          GOTO      LACC8200
.
.         This is a not a casemix invoice, so try to get the first patdtraf
.         CMBS theatre item that is not on patmmbsf.
.
LACC8000  MOVE      SP9,SAVEITEM
.
          PACK      KEY23,ADMINO,INVNO,TWO,SP30
          CALL      RDSDTRN4                     * position in dtr for admission
LACC8050  CALL      RDKDTRN4                     * read next record
          BRANCH    OVRCD,LACC8100
.
          MATCH     ADMINO,TADMNO                * same admission still ?
          GOTO      LACC8100 IF NOT EQUAL        * no - finished
.
          MATCH     INVNO,TREF                   * same invoice still ?
          GOTO      LACC8100 IF NOT EQUAL        * no - finished
.
          COMPARE   TWO,TRECTYPE                 * theatre item ?
          GOTO      LACC8100 IF NOT EQUAL        * no - finished
.
.         The CMBS item date should be the same as the ACD segment
.         start date where a surgical/obstetric procedure is performed.
.         Ignore the item if the item date doesn't match the accommodation
.         'from' date unless it's a sameday patient (CAR 227608).
.
          IF        SAMDAYFL = 0
            PACK      DIM8,TFCENT,TFYEAR,TFMONTH,TFDAY
            REP       " 0",DIM8
            MATCH     ACDCCG09,DIM8              * same date as from date ?
            GOTO      LACC8050 IF NOT EQUAL      * no - ignore record
          ENDIF
.
.         Look for the first theatre item entered from the Theatre system,
.         as opposed to any entered via medical records coding (MBS item input).
.         Save the first theatre item found in case there is no item
.         which is only on patdtraf and not on patmmbsf.
.
          MATCH     SP9,SAVEITEM                 * blank saved item ?
          IF        @EQUAL
            MOVE      TITEMNO,SAVEITEM           * yes - save the first MBS item
          ENDIF
.
.         Theatre record found, now make sure it doesn't exist on patmmbsf
.
          PACK      KEY20,TITEMNO,ADMINO,SP20
          CALL      RDSMMBS2                     * position in patmmbsf
          CALL      RDKMMBS2                     * read next record
          BRANCH    OVRCD,LACC8080               * eof - item doesn't exist
.
          MATCH     TITEMNO,MMCODE               * same item code still ?
          GOTO      LACC8080 IF NOT EQUAL        * no - item doesn't exist
.
          MATCH     ADMINO,MMADMN                * same admission no. still ?
          GOTO      LACC8080 IF NOT EQUAL        * no - item doesn't exist
.
          MATCH     PTDTUNIQ,PTMMOPID            * same unique id ? (CAR 315167)
          GOTO      LACC8080 IF NOT EQUAL        * no - item doesn't exist
.
.         Item on patmmbsf - ignore
.
          GOTO      LACC8050                     * get next patdtraf thetr item
.
.         A theatre item was found that doesn't exist on patmmbsf,
.         so load using CMBS item.  If this is a surgical, advanced surgical
.         or obstetric pt. classification, and a non-sameday visit, then
.         save this CMBS item number in case there is a subsequent accommodation
.         segment with the same pt. classification where there is no
.         corresponding theatre item for the start date of the accommodation
.         record.
.
LACC8080  PACK      ACDCCG13,TITEMNO,SP20        * load service code
          MOVE      ANSC,ACDCCG14                * load service type
          IF        SAMDAYFL = 0 & (SAVASSC1 = 7 | SAVASSC1 = 8 | SAVASSC1 = 9)
            MOVE      TITEMNO,PREVITEM           * save as previous item
          ENDIF
          GOTO      LACC8200
.
.         There were no theatre items found that didn't exist on patmmbsf, so
.         check if a theatre item was found that existed on patmmbsf
.
LACC8100  MATCH     SP9,SAVEITEM
          IF        !@EQUAL
            MOVE      SAVEITEM,TITEMNO           * reload item code
            GOTO      LACC8080
          ENDIF
.
.         There was no CMBS item found.
.         If this accommodation record has a surgical, advanced surgical or
.         obstetric pt. classification, then it should have a CMBS item,
.         so use the one from the previous ACD segment.
.
          IF        SAMDAYFL = 0 & (SAVASSC1 = 7 | SAVASSC1 = 8 | SAVASSC1 = 9)
            MATCH     SP9,PREVITEM
            IF        !@EQUAL
              PACK      ACDCCG13,PREVITEM,SP20   * load service code
              MOVE      ANSC,ACDCCG14            * load service type
            ENDIF
          ENDIF
.
.         Check if primary ICD10 code is on file
.
LACC8200  MOVE      "  1",KEY3                                        *I-240107
          PACK      KEY13,ADMINO,SP1,ONE,KEY3,SP10                    *C-240107
          CALL      RDPTECD1                     * icd code on file ?
          BRANCH    OVRCD,LACC8500               * no
.
.         Where a patient is admitted with a PatientClassificationCode of
.         Medical or Advanced Medical and then subsequently changes to
.         Surgical, Advanced Surgical or Obstetrics (post surgery), the
.         ServiceCode for the preceding Medical and/or Advanced Medical
.         ACD segments, needs to be the ICD code (instead of the usual CMBS
.         code).  Hence, the diagnosis code is sent first in the
.         Medical/Advanced Medical segment to indicate the patient's diagnosis
.         (and therefore the reason for the surgery), then the CMBS code is
.         sent in the Surgical/ Advanced Surgical/Obstetrics segment to show
.         the procedure performed.
.         As such, if this is a Medical or Advanced Medical ACD segment,
.         we need to capture the ICD code as well as the CMBS code now, as
.         we don't know yet whether the PatientClassificationCode will change
.         to Surgical, Advanced Surgical or Obstetrics in subsequent
.         accommodation records for this admission.  This can then be
.         determined when we are processing the ACD records later on from the
.         temp file (WACC0000), and we can send either the CMBS code or the
.         ICD code accordingly.
.
          MATCH     SP11,ACDCCG13                * service code populated ?
          GOTO      LACC8300 IF EQUAL            * no - load ICD code
.
          IF        SAVASSC1 = 5 | SAVASSC1 = 6
            MOVE      PTEDCODE,DIM9
            REP       ". ",DIM9
            SQUEEZE   DIM9
            PACK      SAVEICDC,DIM9,SP10         * load ICD code (Med/Ad. Med)
          ENDIF
.
          GOTO      LACC8500
.
LACC8300  MOVE      ANSI,ACDCCG14                * yes - load service type
          MOVE      PTEDCODE,DIM9
          REP       ". ",DIM9
          SQUEEZE   DIM9
          PACK      ACDCCG13,DIM9,SP10           * load service code
.
.         First make sure that any items that we are assuming are CMBS items,
.         actually exist on the CMBS item table.  If the code is a valid
.         CMBS item and this is NOT a DVA claim, then remove any alpha
.         characters and hyphens from CMBS item codes, as the item code may be
.         user defined for a different band charge.
.         If this is not a valid CMBS item and this is NOT a DVA claim, then
.         set the type to "Other".
.
LACC8500  MATCH     ANSC,ACDCCG14                * CMBS service type ?
          IF        @EQUAL
            IF        OPTION = 1
              MOVE      ACDCCG13,KEY9
              PACK      DIM8,TFCENT,TFYEAR,TFMONTH,TFDAY
              REP       " 0",DIM8
              PACK      KEY17,KEY9,DIM8,SP70
              CALL      PATITMRD                 * CMBS item ?
              IF        OVRCD = 1
                MOVE      ANSO,ACDCCG14          * no - set to type "Other"
              ELSE
                MATCH     SP11,PTITECEQ          * blank eclipse equivalent ?
                IF        @EQUAL
                  REP       ALPTOBLK,ACDCCG13    * yes - remove alpha characters
                  SQUEEZE   ACDCCG13
                  PACK      ACDCCG13,ACDCCG13,SP20
                ELSE
                  MOVE      PTITECTS,FORM2
                  LOAD      ACDCCG13,FORM2,MISCOD01:     * Ext. Aid/Prosth.
                                           MISCOD02:     * Cosmetics
                                           MISCOD03:     * Dental
                                           MISCOD04:     * Drugs (not in use)
                                           MISCOD05:     * Disposables 
                                           MISCOD06:     * Exc. Drug List 
                                           MISCOD07:     * Other - Clinic
                                           MISCOD08:     * Other - Home
                                           MISCOD09:     * Other
                                           MISCOD10:     * Psych - Clinic
                                           MISCOD11:     * Psych - Home
                                           MISCOD12:     * Psych
                                           MISCOD13:     * C'wealth Prosth.
                                           MISCOD14:     * Rehab - Clinic
                                           MISCOD15:     * Rehab - Home
                                           MISCOD16      * Rehab
                  ENDSET    ACDCCG13
                  APPEND    PTITECEQ,ACDCCG13
                  APPEND    SP70,ACDCCG13
                  RESET     ACDCCG13
.
                  MOVE      ANSM,ACDCCG14     * set for Misc. charge (0858731)
                ENDIF
              ENDIF
            ENDIF
          ENDIF
.         
.         Load ICUHrs and CCUHrs for Critical Care records only
.
LACC8600  IF        CCAREFLG = 1
            MOVE      ADMINO,KEY8
            CALL      RDPTICU1
            IF        OVRCD = 0
              MOVE      PTICUINT,FORM4
              MOVE      FORM4,ACDCCG17
              REP       " 0",ACDCCG17
.
              MATCH     "1",PTCNECUP
              IF        @EQUAL
                MOVE      PTICUCCU,FORM4
                MOVE      FORM4,ACDCCG20
                REP       " 0",ACDCCG20
              ENDIF
            ENDIF
          ENDIF
.
          ADD       ONE,ACCCOUNT                 * incr. ACD/CCG record count
.
.         If there is a private room add on critical care accommodation charge,
.         then write the standard room charge as a normal ACD record instead of
.         a CCG record.  Only the private room add on charge will be written
.         as a CCG record.
.         If this is a non-critical care accommodation record, then also
.         write a normal ACD accommodation record.
.
          MOVE      ANSA,ACDCCG01                * set for ACD record
          IF        CCAREFLG = 1
            MATCH     ANSY,ADDONIND
            IF        !@EQUAL
              MOVE      ANSC,ACDCCG01            * set for CCG record
            ENDIF
          ENDIF
.
          MOVE      PTDTDTYP,ACDCCG19            * load patdtraf day type
          IF        SAVASSC1 = 5 | SAVASSC1 = 6
            MOVE      SAVEICDC,ACDCCG18          * load ICD Diagnosis code
          ENDIF
.
.         Before we write the record, check if we have consecutive ME or AM
.         records.  If the previous record processed was an ME or AM record
.         and the ServiceCodeTypeCode was CMBS, then subsequent consecutive
.         AM or ME records should also have a CMBS code based on the fact that
.         a procedure has occurred. So if we have an ICD code (based on the
.         fact that there was no theatre record found), then we need to change
.         it from an ICD code back to a CMBS code using the same code as the
.         previous record. (Task: 0863318)
.
          IF       (SAVASSC1 = 5 | SAVASSC1 = 6) & (SAVPCLAS = 5 | SAVPCLAS = 6)
            MATCH    ANSI,ACDCCG14
            IF       @EQUAL
              MATCH    ANSC,SAVSTCOD
              IF       @EQUAL
                MOVE     ACDCCG13,ACDCCG18
                MOVE     SAVSTCOD,ACDCCG14
                MOVE     SAVSCODE,ACDCCG13
                IF       SAVASSC1 = 5
                  MOVE     "AM",ACDCCG11
                ELSE
                  MOVE     "ME",ACDCCG11
                ENDIF
              ENDIF
            ENDIF
          ENDIF
.
          MATCH     ANSY,ADDONIND                * private room add on charge ?
          IF        !@EQUAL
            COMPARE   ONE,PTINCMIX                 * casemix invoice ?
            IF        @EQUAL
              MATCH     "MPL",CIDSEG07
              IF        @EQUAL
                MATCH     "P",ACDCCG04
                IF        @EQUAL
                  MOVE       "S",ACDCCG04
                ENDIF
              ENDIF
            ENDIF
          ENDIF
.
          PACK      KEY10,ACDCCG01,ACDCCG09,ACDCCG03
          CALL      RATEMP3                      * record on file already ?
          IF        OVRCD = 0
            IF        CCAREFLG = 1
              MOVE      "CCG.05-Record already exists on temp file",ERRMSG
            ELSE
              MOVE      "ACD.04-Record already exists on temp file",ERRMSG
            ENDIF
            CALL      PERR0000
          ELSE
            CALL      WRTEMP3
          ENDIF
.
.         Save current PatientClassificationCode, ServiceCodeTypeCode
.         and ServiceCode (Task: 0863318)
.
          MOVE      SAVASSC1,SAVPCLAS            * PatientClassificationCode
          MOVE      ACDCCG13,SAVSCODE            * ServiceCode
          MOVE      ACDCCG14,SAVSTCOD            * ServiceCodeTypeCode
.
.         If there is an add on non-critical care or critical care
.         accommodation charge, then write a second accommodation record
.         for the private room add-on.
.
          MATCH     ANSY,ADDONIND                * private room add on charge ?
          GOTO      LACC0500 IF NOT EQUAL        * no
.
          MOVE      ZERO,ACDCCG21
.
          IF        CCAREFLG = 1
            MOVE      ANSC,ACDCCG01              * set for CCG record
          ELSE
            MOVE      ANSA,ACDCCG01              * set for ACD record
          ENDIF
          MOVE      ADDONIND,ACDCCG03            * load BedLevelAddOnInd
          PACK      ACDCCG04,ANSP,SP1            * load BedLevelCode
          MOVE      ADDONAMT,ACDCCG06            * load ChargeAmount
          MOVE      ADDONCHG,ACDCCG07            * load ChargeRaisedCde
          MOVE      ADDONRAT,ACDCCG08            * load DayRate
.
          PACK      KEY10,ACDCCG01,ACDCCG09,ACDCCG03
          CALL      RATEMP3                      * record on file already ?
          IF        OVRCD = 0
            IF        CCAREFLG = 1
              MOVE      "CCG.06-Record already exists on temp file",ERRMSG
            ELSE
              MOVE      "ACD.05-Record already exists on temp file",ERRMSG
            ENDIF
            CALL      PERR0000
          ELSE
            CALL      WRTEMP3
          ENDIF
.
          GOTO      LACC0500                     * get next patdtraf record
.
.         We have completed all the accommodation segments, so check
.         that the ACD & CCG subtotals add up to the ACS-TotalChargeAmount
.
LACC9000  IF        MVENTFLG = 1 & (SAVTSERV > MVTOTDAY)
            CALL      AMVC0000
          ENDIF
.
          IF        ACSTOTAL <> ACCTOTAL
            MOVE      "GEN.07-ACS TotalChargeAmount (",ERRMSG
            ENDSET    ERRMSG
            APPEND    ACSTOTAL,ERRMSG
            APPEND    ") inconsistent with ACD/CCG subtotals",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
          ENDIF
.
LACC9999  RETURN
+
.*****************************************************************************
.*                                  AMVC0000       Called by: LACC0000       *
.*                        Adjust Mechanical Ventilation Charge               *
.*        MV days can be greater than the actual accommodation days based    *
.*        on the settings for MV additional days for the Health Fund.        *
.*        For such cases, we need to change the daily rate of the last       *
.*        MV accommodation record relative to the number of extra days.      *
.*        By doing this, the accommodation days remain balanced along with   *
.*        the accommodation charges.                                         *
.*****************************************************************************
.
AMVC0000  PACK      KEY10,TILDA40
          CALL      RSTEMP4                      * position after last record
AMVC0500  CALL      RPTEMP4                      * read previous record
          BRANCH    OVRCD,AMVC9999               * eof - finished
.
          COMPARE   ONE,ACDCCG21                 * MV accommodation record ?
          GOTO      AMVC0500 IF NOT EQUAL        * no - get next record
.
.         We've found the last MV accommodation record, so we need to adjust
.         the daily rate to cater for the extra MV days, leaving the
.         NumberOfDays the same.
.
          MOVE      ACDCCG10,FORM4
          MOVE      ACDCCG08,FORM9A
          MOVE      ACDCCG06,FORM9C
          ASSIGN    ((SAVTSERV - MVTOTDAY) * FORM9A),FORM9B
          ADD       FORM9B,FORM9A                * update daily rate
          MOVE      FORM9A,ACDCCG08
          REP       " 0",ACDCCG08
.
          ADD       FORM9B,FORM9C                * update total charge
          MOVE      FORM9C,ACDCCG06
          REP       " 0",ACDCCG06
          CALL      UPTEMP4
.
.         Now we also need to adjust the accommodation charge total to
.         reflect the above change
.
          ASSIGN    (FORM9B/100 + ACCTOTAL),ACCTOTAL
.
AMVC9999  RETURN
+
.******************************************************************************
.*                                  WLPD0000              Called by: VALD0000 *
.*                      Write Leave Period Details                 & WRIT0000 *
.******************************************************************************
.
WLPD0000  UNPACK    SP70,LPDSEG01,LPDSEG02,LPDSEG03
          REP       " 0",LPDSEG03
.
.         Loop through the transfer file for this admission for for
.         on leave records
.
          PACK      KEY30,ADMINO,SP30
          CALL      RDSTRAN2                     * position on admission
WLPD1000  CALL      RDKTRAN2                     * read next record
          BRANCH    OVRCD,WLPD9999
.
          MATCH     TADMN,ADMINO                 * same admission still ?
          GOTO      WLPD9999 IF NOT EQUAL        * no - finished
.
          MATCH     ANSD,TMOVE                   * discharge record ?
          GOTO      WLPD9999 IF EQUAL            * yes - finished
.
          MATCH     ANSL,TMOVE                   * leave record ?
          GOTO      WLPD1000 IF NOT EQUAL        * no - ignore record
.
          MATCH     TDATE,INVFRDTE               * date > invoice from date ?
          IF        @LESS
            MOVE      TDATE,LEAVDATE             * yes - load leave date
          ELSE
            MOVE      INVFRDTE,LEAVDATE          * no - use invoice start date
          ENDIF
.
          CALL      RDKTRAN2                     * read next record
          BRANCH    OVRCD,WLPD2000               * eof
.
          MATCH     TADMN,ADMINO                 * same admission still ?
          GOTO      WLPD2000 IF NOT EQUAL        * no - use invoice end date
.
          MATCH     ANSR,TMOVE                   * return from leave ?
          GOTO      WLPD2000 IF NOT EQUAL        * no - use invoice end date
.
          MATCH     TDATE,INVFRDTE               * date <= invoice from date ?
          GOTO      WLPD1000 IF NOT LESS         * no = get next record
.
          MATCH     INVTODTE,TDATE               * date >= invoice to date ?
          GOTO      WLPD2000 IF NOT LESS         * yes - use invoice end date
.
          MOVE      TDATE,RETNDATE               * use return date
          GOTO      WLPD3000
.
WLPD2000  MOVE      INVTODTE,RETNDATE            * use inv. to date for return
.
.         Load FromDate
.
WLPD3000  UNPACK    LEAVDATE,DIM4,DIM2,DIM2A
          PACK      LPDSEG01,DIM2A,DIM2,DIM4
          REP       " 0",LPDSEG01
.
.         Load ToDate
.
          UNPACK    RETNDATE,DIM4,DIM2,DIM2A
          PACK      LPDSEG02,DIM2A,DIM2,DIM4
          REP       " 0",LPDSEG02
.
.         Load NumberOfDays
.
.         PRINT     *N,*1,"WLPD0000 Leave Calculation"
          CALL      LEAV0000
.         PRINT     *N
.
.         If patient went on leave and returned the same day,
.         then ignore this leave record (CAR 208616)
.
          COMPARE   ZERO,LEAVDAY
          GOTO      WLPD1000 IF EQUAL
.
          MOVE      LEAVDAY,LPDSEG03
          REP       " 0",LPDSEG03
.
          ADD       ONE,LPDCOUNT                 * increment LPD record count
.
          BRANCH    VALDFLG,WLPD9999             * only validating.
.
          WRITE     EXTFILE1,SEQ;TILDA01,ANSL,ANSP,ANSD:
                                 LPDSEG01,LPDSEG02,LPDSEG03
          GOTO      WLPD1000
.
WLPD9999  RETURN
+
.*****************************************************************************
.*                                 WPSG0000              Called by: VALD0000 *
.*                     Write Principal Services Details           & WRIT0000 *
.*    For each theatre date, we need to collate the principle procedure and  *
.*    any related secondary procedures for this admission.  Therefore, for   *
.*    each theatre date, where there are CMBS items on file, there will be   *
.*    at least a principle procedure (the details of which will be written   *
.*    as a PSG segment), and possibly one or more secondary procedures (the  *
.*    details of which will be written as an MSG segment for each procedure).*
.*    Where there are multiple theatre dates and procedures, there may be    *
.*    multiple PSG and MSG segments written in the following sequence:       *
.*    eg. PSG (Date1)                                                        *
.*        MSG (Date1)                                                        *
.*        MSG (Date1)                                                        *
.*        PSG (Date2)                                                        *
.*        MSG (Date2)                                                        *
.*****************************************************************************
.
WPSG0000  MOVE      SP8,SAVEDATE                 * initialise saved theatre date
          MOVE      SP2,SAVESESS                 * initialise saves theatre sess
          MOVE      ZERO,PSGCOUNT                * initialise PSG count
.
          PACK      KEY23,ADMINO,INVNO,TWO,SP30
          CALL      RDSDTRN4                     * position in dtr for admission
WPSG0500  CALL      RDKDTRN4                     * read next record
          BRANCH    OVRCD,WPSG9000
.
          MATCH     ADMINO,TADMNO                * same admission still ?
          GOTO      WPSG9000 IF NOT EQUAL        * no - finished
.
          MATCH     INVNO,TREF                   * same invoice still ?
          GOTO      WPSG9000 IF NOT EQUAL        * no - finished
.
          COMPARE   TWO,TRECTYPE                 * theatre item ?
          GOTO      WPSG9000 IF NOT EQUAL        * no - finished
.
.         A valid theatre item has been found, so check if this item is for
.         the same date.  If so, it must be a non-primary procedure which will
.         become an MSG record.  We have to write the PSG segment before we
.         can write any associated MSG segments, however, we need to read all
.         the MSG records to get the TotalChargeAmount for PSG.  Therefore,
.         write any MSG data to the temp file so that it can be processed
.         and written after the PSG has been written.
.
          PACK      THTRDATE,TFDAY,TFMONTH,TFCENT,TFYEAR
          REP       " 0",THTRDATE                * save opr. date as ddmmccyy
          MATCH     THTRDATE,SAVEDATE            * same theatre date still ?
          IF        @EQUAL
            MATCH     TSESSION,SAVESESS          * same theatre session still ?
            IF        @EQUAL
              CALL      GMSG0000                 * yes - get the MSG data
              GOTO      WPSG0500                 * get the next dtr record
            ENDIF
          ENDIF
.
.         This is a new theatre date, so check if we need to complete writing
.         the previous PSG segment and all the associated MSG records
.
          COMPARE   ZERO,PSGCOUNT                * first procedure ?
          IF        !@EQUAL
            CALL      XPSG0000                   * no - write remaining data
          ENDIF
.
.         As this is a new theatre date, this item will be the principle
.         procedure for that date.  We therefore need to write a new
.         PSG segment.
.
          UNPACK    SP70,PSGSEG01,PSGSEG02,PSGSEG03,PSGSEG04,PSGSEG05
          UNPACK    SP70,PSGSEG06,PSGSEG07,PSGSEG08,PSGSEG09,PSGSEG10
          UNPACK    SP70,PSGSEG11,PSGSEG12
          REP       " 0",PSGSEG02
          REP       " 0",PSGSEG07
          REP       " 0",PSGSEG11
          REP       " 0",PSGSEG12
          MOVE      SP70,SAVEUNIQ                * initialise Unique id
.
          MOVE      ZERO,MSGCOUNT                * initialise MSG count
          CALL      CMSG0000                     * clear MSG temp file
          MOVE      ZERO,FORM12P2                * initialise amount
.
.         Load the PSG fields
.
          ADD       ONE,PSGCOUNT                 * increment PSG count
.
.         Load ServiceDate
.
          MOVE      THTRDATE,PSGSEG06            * load service date
          MOVE      PSGSEG06,SAVEDATE            * save the theatre date
          MOVE      TSESSION,SAVESESS            * save session
.
.         We have found an MBS record for the principle item.
.         Load TheatreBandCode.
.
          PACK      KEY9,TITEMNO,SP10
.
          UNPACK    SAVEDATE,CDAY,CMON,CCENT,CYEAR
          PACK      KEY8,CCENT,CYEAR,CMON,CDAY
          REP       " 0",KEY8
.
          PACK      KEY17,KEY9,KEY8,SP70
          CALL      PATITMRD                     * item code on file ?
          IF        OVRCD = 1
            MOVE      "PSG.01-Item code (",ERRMSG        * no
            ENDSET    ERRMSG
            APPEND    TITEMNO,ERRMSG
            APPEND    ") not found.",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      WPSG0500
          ENDIF
.
.         Load ServiceCode & ServiceCodeTypeCode.
.         If this is a DVA claim, then load using patitemn.ptitserv if not blank
.
          MOVE      TITEMNO,SAVEITEM             * save theatre item code
          MOVE      PTDTUNIQ,SAVEUNIQ            * save unique id
          IF        OPTION = 2
            MATCH     SP9,PTITSERV               * DVA code blank ?
            IF        !@EQUAL
              MOVE      ANSV,PSGSEG05            * no - load DVA service type
              PACK      PSGSEG04,PTITSERV,SP20   * load DVA service code
              GOTO      WPSG1000
            ENDIF
          ENDIF
.
          PACK      PSGSEG04,TITEMNO,SP20
          MOVE      ANSC,PSGSEG05                * load ser code type ind.
.
.         First make sure that any items that we are assuming are CMBS items,
.         actually exist on the CMBS item table.  If the code is a valid
.         CMBS item and this is NOT a DVA claim, then remove any alpha
.         characters and hyphens from CMBS item codes, as the item code may be
.         user defined for a different band charge.
.         If this is not a valid CMBS item and this is NOT a DVA claim, then
.         set the type to "Other".
.
          COMPARE   TWO,OPTION                   * DVA claim ?
          GOTO      WPSG1000 IF EQUAL            * yes
.
          UNPACK    SAVEDATE,CDAY,CMON,CCENT,CYEAR
          PACK      KEY8,CCENT,CYEAR,CMON,CDAY
          REP       " 0",KEY8
.
          MOVE      PSGSEG04,KEY9
          PACK      KEY17,KEY9,KEY8,SP70
          CALL      PATITMRD                     * CMBS item ?
          IF        OVRCD = 1
            MOVE      ANSO,PSGSEG05              * no - set to type "Other"
            GOTO      WPSG1000
          ENDIF
.
.         We have a valid item code.
.         See if there is an eclipse equivalent for this item and if so,
.         process it as a miscellaneous item.
.
          MATCH     SP11,PTITECEQ                * blank eclipse equivalent ?
          GOTO      WPSG0800 IF EQUAL            * yes
.
          MOVE      PTITECEQ,DIM11               * no
          SQUEEZE   DIM11
          MOVELPTR  DIM11,FORM2
          IF        FORM2 <> 7
            MOVE      "PSG.13-Service code not 7 characters",ERRMSG
            CALL      PERR0000
            GOTO      WPSG0500
          ENDIF
.
          MOVE      ANSM,PSGSEG05                * set for misc. code
.
.         Get the type of service as this will form part of the
.         service code
.
          MATCH     SP2,PTITECTS                 * type of service blank ?
          IF        @EQUAL
            MOVE      "PSG.14-Type of Service is blank",ERRMSG
            CALL      PERR0000
            GOTO      WPSG0500
          ENDIF
.
          TYPE      PTITECTS                     * type of service numeric ?
          IF        !@EQUAL
            MOVE      "PSG.15-Type of Service is not numeric",ERRMSG
            CALL      PERR0000
            GOTO      WPSG0500
          ENDIF
.
          MOVE      PTITECTS,FORM2
          IF        FORM2 < 1 | FORM2 > 16
            MOVE      "PSG.16-Type of Service is not valid",ERRMSG
            CALL      PERR0000
            GOTO      WPSG0500
          ENDIF
.
.         Load the miscellaneous service code prefix
.
          LOAD      PSGSEG04,FORM2,MISCOD01:     * Ext. Aid/Prosth. (not in use)
                                   MISCOD02:     * Cosmetics
                                   MISCOD03:     * Dental
                                   MISCOD04:     * Drugs (not in use)
                                   MISCOD05:     * Disposables (not in use)
                                   MISCOD06:     * Exc. Drug List (not in use)
                                   MISCOD07:     * Other - Clinic
                                   MISCOD08:     * Other - Home
                                   MISCOD09:     * Other
                                   MISCOD10:     * Psych - Clinic
                                   MISCOD11:     * Psych - Home
                                   MISCOD12:     * Psych
                                   MISCOD13:     * C'wealth Prosth. (not in use)
                                   MISCOD14:     * Rehab - Clinic
                                   MISCOD15:     * Rehab - Home
                                   MISCOD16      * Rehab
.
          ENDSET    PSGSEG04
          APPEND    PTITECEQ,PSGSEG04
          RESET     PSGSEG04
          GOTO      WPSG0850
.
.         We have a valid CMBS item, so remove any alpha characters
.
WPSG0800  REP       ALPTOBLK,PSGSEG04
          SQUEEZE   PSGSEG04
          PACK      PSGSEG04,PSGSEG04,SP20
.
.         Get the theatre band
.
WPSG0850  IF        SAVTBAND = 0
            MOVE      "PSG.17-Health Fund Theatre Band not valid",ERRMSG
            CALL      PERR0000
            GOTO      WPSG0500
          ENDIF
.
          MOVE      SP3,DIM3
          LOAD      DIM3,SAVTBAND,IBAND1,IBAND2,IBAND3,IBAND4,IBAND5:
                                  IBAND6,IBAND7,IBAND8,IBAND9,IBAND10:
                                  IBAND11,IBAND12,IBAND13,IBAND14,IBAND15:
                                  IBAND16
.
          MATCH     SP3,DIM3                     * blank band ?
          IF        @EQUAL
            MOVE      "PSG.12-Theatre Band (",ERRMSG
            ENDSET    ERRMSG
            APPEND    SAVTBAND,ERRMSG
            APPEND    ") not set up for item ",ERRMSG
            APPEND    PSGSEG04,ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      WPSG0500
          ENDIF
.
.         Get the HDP Equivalent from the Cat TB code, but if it doesn't
.         exist, don't give an error yet as this may be over-written anyway
.         if it is a LW (Labour ward) item.  Just reset DIM3 with spaces.
.
          PACK      KEY5,ANST,ANSB,DIM3
          CALL      RDCODE1                      * code on file ?
          IF        OVRCD = 1
            MOVE      SP3,DIM3                   * no - reset theatre band
            GOTO      WPSG0900
          ENDIF
.
          MATCH     SP3,THCSCOD                  * HDP Equiv. blank ?
          IF        @EQUAL
            MOVE      SP3,DIM3                   * yes - reset theatre band
            GOTO      WPSG0900
          ENDIF
.
          MOVE      THCSCOD,DIM3                 * no - use HDP Equiv.
.
WPSG0900  SQUEEZE   DIM3
          PACK      PSGSEG08,DIM3,SP3
          GOTO      WPSG2000
.
.         DVA claim so validate theatre band
.
WPSG1000  MOVE      SAVTBAND,TCFORM6
          IF        TCFORM6 = 0
            MOVE      "PSG.02-Claim code (",ERRMSG
            ENDSET    ERRMSG
            APPEND    CLAMCODE,ERRMSG
            APPEND    " - Cat CL, Assoc. ##) not valid.",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000      
            GOTO      WPSG0500
          ENDIF
.
          MOVE      TCFORM6,DIM6
          SQUEEZE   DIM6
          PACK      PSGSEG08,DIM6,SP3
.
.         Load TheatreBandTypeCode
.         Check to see if this is a labour ward item.
.
WPSG2000  MATCH     "1",PTITLWRD                 * labour ward item ?
          GOTO      WPSG2500 IF NOT EQUAL        * no
.
.         If this theatre charge is linked to a theatre booking
.         (patdtraf.ptdtuniq is not blank), then treat it as a normal charge,
.         otherwise treat it as a labour ward charge (CAR 225413).
.
          MATCH     SP10,PTDTUNIQ                * theatre booking ?
          GOTO      WPSG2100 IF EQUAL            * no
          GOTO      WPSG2100 IF EOS
.
          COMPARE   ONE,CTHETR
          GOTO      WPSG2100 IF NOT EQUAL
.
          MOVE      PTDTUNIQ,KEY10               * yes
          CALL      RDOPDEA3                     * op. detail record on file ?
          BRANCH    OVRCD,WPSG2100               * no
.
          COMPARE   THREE,OPDASTAT               * cancelled theatre booking ?
          GOTO      WPSG2500 IF NOT EQUAL        * yes
.
WPSG2100  MOVE      "LW ",PSGSEG08               * treat as labour ward
          MOVE      ANSO,PSGSEG09
          GOTO      WPSG3000
.
.         Check now if an error occurred on Cat TB code
.
WPSG2500  MATCH     SP3,PSGSEG08
          IF        @EQUAL
            MOVE      "PSG.18-Theatre band code (",ERRMSG
            ENDSET    ERRMSG
            APPEND    DIM3,ERRMSG
            APPEND    " - Cat TB, HDP Equiv.) not set up.",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000      
          ENDIF
.
          IF        PTCNHDPS = 6
            MOVE      ANSW,PSGSEG09
          ELSE
            MOVE      ANSN,PSGSEG09
          ENDIF
.
.         Load TheatreCategoryCode
.
WPSG3000  MATCH     "1",PTITTCCD
          IF        @EQUAL
            MOVE      ANSC,PSGSEG10
          ELSE
            MOVE      ANSS,PSGSEG10
          ENDIF
.
.         Load ChargeAmount & ChargeRaisedCde
.
          MOVE      TPATAMTT,FORM12P2
          IF        IBCNUGST=2
            ADD       PTDTGSTM,FORM12P2          * add GST amount
          ENDIF
          CALL      FTOT0000                     * Format numeric totals
.
          MOVE      KEY9,PSGSEG02
          MOVE      KEY1,PSGSEG03
          GOTO      WPSG0500                     * get next dtr record
.
.         All theatre DTR records have been processed for this admission,
.         so check if any procedures were found, and if so, complete writing
.         the PSG sgement, then any related MSG records in the temp file.
.
.         Note: a PSG segment must be present when the PatientClassificationCode
.         is set to OB, SU, AS, D2, D3 or D4
.
WPSG9000  COMPARE   ZERO,PSGCOUNT                * any procedures found ?
          GOTO      WPSG9700 IF NOT EQUAL        * yes - finish segment
.
          BRANCH    PCCFORM6,WPSG9999:
                             WPSG9500:         * D2 - Day Band 2
                             WPSG9500:         * D3 - Day Band 3
                             WPSG9500:         * D4 - Day Band 4
                             WPSG9999:
                             WPSG9999:
                             WPSG9500:         * SU - Surgical
                             WPSG9500:         * AS - Advanced Surgical
                             WPSG9500:         * OB - Obstetrics
                             WPSG9999:
                             WPSG9999:
                             WPSG9999:
                             WPSG9999:
                             WPSG9999
          GOTO      WPSG9999
.
WPSG9500  MOVE      "PSG.03-PSG Segment missing",ERRMSG
          CALL      PERR0000      
          GOTO      WPSG9999
.
WPSG9700  CALL      XPSG0000                     * yes - write remaining data
.
WPSG9999  RETURN
+
.******************************************************************************
.*                                  WMSG0000              Called by: WPSG0000 *
.*   Write all the procedures from the temporary file to the extract file     *
.*   as MSG segments                                                          *
.******************************************************************************
.
WMSG0000  MOVE      SP5,KEY5
          CALL      RSTEMP2                      * position at start of file
WMSG0500  CALL      RKTEMP2                      * read next record
          BRANCH    OVRCD,WMSG9999               * eof - finished
.
          UNPACK    SP70,MSGSEG01,MSGSEG02,MSGSEG03,MSGSEG04,MSGSEG05:
                         MSGSEG06,MSGSEG07
          REP       " 0",MSGSEG01
.
.         Load ChargeAmount & ChargeRaisedCde
.
          MOVE      TMPAMNT,FORM12P2
          CALL      FTOT0000                     * format numeric totals
          MOVE      KEY9,MSGSEG01
          MOVE      KEY1,MSGSEG02
.
.         Load TheatreBandCode
.         
          PACK      KEY9,TMPITEMN,SP10
          PACK      KEY17,KEY9,TMPSDATE,SP70
          CALL      PATITMRD                     * item code on file ?
          IF        OVRCD = 1
            MOVE      "MSG.01-Item code (",ERRMSG * no
            ENDSET    ERRMSG
            APPEND    TMPITEMN,ERRMSG
            APPEND    ") not found.",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
          ENDIF
.
.         Load ServiceCode & ServiceCodeTypeCode.
.         If this is a DVA claim, then load using patitemn.ptitserv if not blank
.
          IF        OPTION = 2
            MATCH     SP6,PTITSERV               * DVA code blank ?
            IF        !@EQUAL
              MOVE      ANSV,MSGSEG04            * no - load DVA service type
              PACK      MSGSEG03,PTITSERV,SP20   * load DVA service code
              GOTO      WMSG1000
            ENDIF
          ENDIF
.
.         Set using CMBS code
.
          PACK      MSGSEG03,TMPITEMN,SP20
          MOVE      ANSC,MSGSEG04                * load service type
.
.         First make sure that any items that we are assuming are CMBS items,
.         actually exist on the CMBS item table.  If the code is a valid
.         CMBS item and this is NOT a DVA claim, then remove any alpha
.         characters and hyphens from CMBS item codes, as the item code may be
.         user defined for a different band charge.
.         If this is not a valid CMBS item and this is NOT a DVA claim, then
.         set the type to "Other".
.
          COMPARE   TWO,OPTION                   * DVA claim ?
          GOTO      WMSG1000 IF EQUAL            * yes
.
          MOVE      MSGSEG03,KEY9
          PACK      KEY17,KEY9,TMPSDATE,SP70
          CALL      PATITMRD                     * CMBS item ?
          IF        OVRCD = 1
            MOVE      ANSO,MSGSEG04              * no - set to type "Other"
            GOTO      WMSG1000
          ENDIF
.
.         We have a valid item code.
.         See if there is an eclipse equivalent for this item and if so,
.         process it as a miscellaneous item.
.
          MATCH     SP11,PTITECEQ                * blank eclipse equivalent ?
          GOTO      WMSG0800 IF EQUAL            * yes
.
          MOVE      PTITECEQ,DIM11               * no
          SQUEEZE   DIM11
          MOVELPTR  DIM11,FORM2
          IF        FORM2 <> 7
            MOVE      "MSG.04-Service code not 7 characters",ERRMSG
            CALL      PERR0000
            GOTO      WMSG0500
          ENDIF
.
          MOVE      ANSM,MSGSEG04                * set for misc. code
.
.         Get the type of service as this will form part of the
.         service code
.
          MATCH     SP2,PTITECTS                 * type of service blank ?
          IF        @EQUAL
            MOVE      "MSG.05-Type of Service is blank",ERRMSG
            CALL      PERR0000
            GOTO      WMSG0500
          ENDIF
.
          TYPE      PTITECTS                     * type of service numeric ?
          IF        !@EQUAL
            MOVE      "MSG.06-Type of Service is not numeric",ERRMSG
            CALL      PERR0000
            GOTO      WMSG0500
          ENDIF
.
          MOVE      PTITECTS,FORM2
          IF        FORM2 < 1 | FORM2 > 16
            MOVE      "MSG.07-Type of Service is not valid",ERRMSG
            CALL      PERR0000
            GOTO      WMSG0500
          ENDIF
.
.         Load the miscellaneous service code prefix
.         
          LOAD      MSGSEG03,FORM2,MISCOD01:     * Ext. Aid/Prosth. (not in use)
                                   MISCOD02:     * Cosmetics
                                   MISCOD03:     * Dental
                                   MISCOD04:     * Drugs (not in use)
                                   MISCOD05:     * Disposables (not in use)
                                   MISCOD06:     * Exc. Drug List (not in use)
                                   MISCOD07:     * Other - Clinic
                                   MISCOD08:     * Other - Home
                                   MISCOD09:     * Other
                                   MISCOD10:     * Psych - Clinic
                                   MISCOD11:     * Psych - Home
                                   MISCOD12:     * Psych
                                   MISCOD13:     * C'wealth Prosth. (not in use)
                                   MISCOD14:     * Rehab - Clinic
                                   MISCOD15:     * Rehab - Home
                                   MISCOD16      * Rehab
.           
          ENDSET    MSGSEG03
          APPEND    PTITECEQ,MSGSEG03
          RESET     MSGSEG03
          GOTO      WMSG0850
.
.         We have a valid CMBS item, so remove any alpha characters
.
WMSG0800  REP       ALPTOBLK,MSGSEG03
          SQUEEZE   MSGSEG03
          PACK      MSGSEG03,MSGSEG03,SP20
.
.         Get the theatre band
.
WMSG0850  IF        SAVTBAND = 0
            MOVE      "MSG.08-Health Fund Theatre Band not valid",ERRMSG
            CALL      PERR0000
            GOTO      WMSG0500
          ENDIF
.
          MOVE      SP3,DIM3
          LOAD      DIM3,SAVTBAND,IBAND1,IBAND2,IBAND3,IBAND4,IBAND5:
                                  IBAND6,IBAND7,IBAND8,IBAND9,IBAND10:
                                  IBAND11,IBAND12,IBAND13,IBAND14,IBAND15:
                                  IBAND16
.
          MATCH     SP3,DIM3                     * blank band ?
          IF        @EQUAL
            MOVE      "MSG.03-Theatre Band (",ERRMSG
            ENDSET    ERRMSG
            APPEND    SAVTBAND,ERRMSG
            APPEND    ") not set up for item ",ERRMSG
            APPEND    MSGSEG03,ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      WMSG0500
          ENDIF
.
.         Get the HDP Equivalent from the Cat TB code, but if it doesn't
.         exist, don't give an error yet as this may be over-written anyway
.         if it is a LW (Labour ward) item.
.
          PACK      KEY5,ANST,ANSB,DIM3
          CALL      RDCODE1                      * code on file ?
          IF        OVRCD = 1
            MOVE      SP3,DIM3                   * no - reset theatre band
            GOTO      WMSG0900
          ENDIF
.
          MATCH     SP3,THCSCOD                  * HDP Equiv. blank ?
          IF        @EQUAL
            MOVE      SP3,DIM3                   * no - reset theatre band
            GOTO      WMSG0900
          ENDIF
.
          MOVE      THCSCOD,DIM3                 * no - use HDP Equiv.
.
WMSG0900  SQUEEZE   DIM3
          PACK      MSGSEG05,DIM3,SP3
          GOTO      WMSG2000
.
.         DVA claim so validate theatre band
.
WMSG1000  MOVE      SAVTBAND,TCFORM6
          IF        TCFORM6 = 0
            MOVE      "MSG.02-Claim code (",ERRMSG
            ENDSET    ERRMSG
            APPEND    CLAMCODE,ERRMSG
            APPEND    " - Cat CL, Assoc. ##) not valid.",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      WMSG0500
          ENDIF
.         
          MOVE      TCFORM6,DIM6
          SQUEEZE   DIM6
          PACK      MSGSEG05,DIM6,SP3
.
.         Load TheatreBandTypeCode
.         Check to see if this is a labour ward item.
.
WMSG2000  MATCH     "1",PTITLWRD                 * labour ward item ?
          GOTO      WMSG2500 IF NOT EQUAL        * no
.
.         If this theatre charge is linked to a theatre booking
.         (patdtraf.ptdtuniq is not blank), then treat it as a normal charge,
.         otherwise treat it as a labour ward charge (CAR 225413).
.
          MATCH     SP10,TMPUNQID                * theatre booking ?
          GOTO      WMSG2100 IF EQUAL            * no 
          GOTO      WMSG2100 IF EOS
.
          COMPARE   ONE,CTHETR
          GOTO      WMSG2100 IF NOT EQUAL
.
          MOVE      TMPUNQID,KEY10               * yes
          CALL      RDOPDEA3                     * op. detail record on file ?
          BRANCH    OVRCD,WMSG2100               * no
.
          COMPARE   THREE,OPDASTAT               * cancelled theatre booking ?
          GOTO      WMSG2500 IF NOT EQUAL        * yes
.
WMSG2100  MOVE      "LW ",MSGSEG05               * treat as labour ward
          MOVE      ANSO,MSGSEG06
          GOTO      WMSG3000
.
.         Check now if an error occurred on Cat TB code
.
WMSG2500  MATCH     SP3,MSGSEG05
          IF        @EQUAL
            MOVE      "MSG.09-Theatre band (",ERRMSG 
            ENDSET    ERRMSG 
            APPEND    DIM3,ERRMSG
            APPEND    " - Cat TB, HDP Equiv.) not set up.",ERRMSG
            RESET     ERRMSG 
            CALL      PERR0000
          ENDIF
.
          IF        PTCNHDPS = 6
            MOVE      ANSW,MSGSEG06
          ELSE
            MOVE      ANSN,MSGSEG06
          ENDIF
.
.         Load TheatreCategoryCode
.
WMSG3000  MATCH     "1",PTITTCCD
          IF        @EQUAL
            MOVE      ANSC,MSGSEG07
          ELSE
            MOVE      ANSS,MSGSEG07
          ENDIF
.
          BRANCH    VALDFLG,WMSG9999             * validation only
.
.         Write MSG record
.
          WRITE     EXTFILE1,SEQ;TILDA01,ANSM,ANSS,ANSG:
                                 MSGSEG01,MSGSEG02,MSGSEG03,MSGSEG04,MSGSEG05:
                                 MSGSEG06,MSGSEG07
.
          GOTO      WMSG0500                     * get next record
.
WMSG9999  RETURN
+
.******************************************************************************
.*                                  WTRG0000              Called by: VALD0000 *
.*                           Write Transport Group Details         & WRIT0000 *
.******************************************************************************
.
WTRG0000  
.         MOVE      ADMINO,KEY8
.         CALL      RDPMTSP1                     * transport data on file ?
.         BRANCH    OVRCD,WTRG9999               * no - finished
.
.         UNPACK    SP70,TRGSEG01,TRGSEG02,TRGSEG03,TRGSEG04,TRGSEG05
.         UNPACK    SP70,TRGSEG06,TRGSEG07,TRGSEG08,TRGSEG09,TRGSEG10
.         REP       " 0",TRGSEG02
.         REP       " 0",TRGSEG04
.         REP       " 0",TRGSEG07
.         REP       " 0",TRGSEG09
.
.         Load AmbulanceReferenceId
.
.         MOVE      PMTSARID,TRGSEG01
.
.         Load ChargeAmount & ChargeRaisedCde
.
.         COMPARE   ZERO,PMTSCAMT                * any charge ?
.         GOTO      WTRG9999 IF EQUAL            * no - ignore record
.
.         MOVE      PMTSCAMT,FORM12P2
.         CALL      FTOT0000                     * Format numeric total
.         MATCH     ANSC,KEY1
.         IF        @EQUAL
.           ADD       FORM12P2,SUBTOTAL          * increment subtotal
.         ENDIF
.         MOVE      KEY9,TRGSEG02
.         MOVE      KEY1,TRGSEG03
.
.         Load DistanceKms
.
.         MOVE      PMTSDKMS,TRGSEG04
.         REP       " 0",TRGSEG04
.         MATCH     "0000",TRGSEG04
.         IF        @EQUAL
.           MOVE      "TRG.01-DistanceKms is zero",ERRMSG
.           CALL      PERR0000
.         ENDIF
.
.         Load FromLocality
.
.         MOVE      PMTSFLOC,TRGSEG05
.         MATCH     SP40,TRGSEG05
.         IF        @EQUAL
.           MOVE      "TRG.02-FromLocality is blank",ERRMSG
.           CALL      PERR0000
.         ENDIF
.
.         Load ServiceDate
.
.         UNPACK    PMTSSDTE,CCENT,CYEAR,CMON,CDAY
.         PACK      TRGSEG06,CDAY,CMON,CCENT,CYEAR
.         MATCH     SP8,TRGSEG06
.         IF        @EQUAL
.           MOVE      "TRG.03-ServiceDate is blank",ERRMSG
.           CALL      PERR0000
.         ENDIF
.
.         Load StartTime
.
.         MOVE      PMTSSTIM,TRGSEG07
.         MATCH     SP4,TRGSEG07
.         IF        @EQUAL
.           MOVE      "TRG.04-StartTime is blank",ERRMSG
.           CALL      PERR0000
.         ENDIF
.
.         Load ToLocality
.
.         MOVE      PMTSTLOC,TRGSEG08
.         MATCH     SP40,TRGSEG08
.         IF        @EQUAL
.           MOVE      "TRG.05-ToLocality is blank",ERRMSG
.           CALL      PERR0000
.         ENDIF
.
.         Load TransportHrsMins
.
.         MOVE      PMTSTHRS,TRGSEG09
.         REP       " 0",TRGSEG09
.         MATCH     "0000",TRGSEG09
.         IF        @EQUAL
.           MOVE      "TRG.06-TransportHrsMins is zero",ERRMSG
.           CALL      PERR0000
.         ENDIF
.
.         Load TransportTypeCode
.
.         MOVE      PMTSTYCD,TRGSEG10
.
.         BRANCH    VALDFLG,WTRG9999             * validation only
.
.         WRITE     EXTFILE1,SEQ;TILDA01,ANST,ANSR,ANSG:
.                                TRGSEG01,TRGSEG02,TRGSEG03,TRGSEG04,TRGSEG05:
.                                TRGSEG06,TRGSEG07,TRGSEG08,TRGSEG09,TRGSEG10
.
WTRG9999  RETURN
+
.******************************************************************************
.*                                  WMIG0000              Called by: VALD0000 *
.*                    Write Miscellaneous Services Details         & WRIT0000 *
.******************************************************************************
.
WMIG0000  UNPACK    SP70,MIGSEG01,MIGSEG02,MIGSEG03,MIGSEG04,MIGSEG05
          UNPACK    SP70,MIGSEG06,MIGSEG07
          REP       " 0",MIGSEG01
          REP       " 0",MIGSEG05
          REP       " 0",MIGSEG06
.
.         Loop through patdtraf looking for miscellaneous charge records
.
          PACK      KEY23,ADMINO,INVNO,THREE,SP30
          CALL      RDSDTRN4                     * position on adm & invoice
WMIG1000  CALL      RDKDTRN4                     * read next record
          BRANCH    OVRCD,WMIG9000               * eof - finished
.
          MATCH     ADMINO,TADMNO                * same admission still ?
          GOTO      WMIG9000 IF NOT EQUAL        * no - finished
.
          MATCH     INVNO,TREF                   * same invoice still ?
          GOTO      WMIG9000 IF NOT EQUAL        * no - finished
.
          COMPARE   THREE,TRECTYPE               * miscellaneous charge record ?
          GOTO      WMIG9000 IF NOT EQUAL        * no - finished
.
.         Ignore mechanical ventilation records, as these are processed as
.         accommodation records with ACD/CCG segments
.
          COMPARE   ONE,PTDTEPSD                 * mech. ventilation record ?
          GOTO      WMIG1000 IF EQUAL            * yes - ignore record (228300)
.
.         A miscellaneous charge record has been found, so get the
.         Eclipse equivalent code
.
          CALL      GEEQ0000                     * EDI equivalent code found ?
          BRANCH    EXIT,WMIG1000                * no - ignore record
.
.         Load ChargeAmount & ChargeRaisedCde
.
          IF        PINVTYP = 1
            MOVE      TSERVS,FORM2
            ASSIGN    (TREBATE*FORM2),FORM12P2
.           MOVE      TREBATE,FORM12P2
          ELSE
            MOVE      TPATAMTT,FORM12P2
          ENDIF
          IF        IBCNUGST=2
            ADD       PTDTGSTM,FORM12P2          * add GST
          ENDIF
.
          IF        FORM12P2 < 0
            MOVE      "MIG.03-Misc. Charge code (",ERRMSG
            ENDSET    ERRMSG
            APPEND    TITEMNO,ERRMSG
            APPEND    ") with negative amount",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
          ENDIF
.
          CALL      FTOT0000                     * format numeric totals
          MATCH     ANSC,KEY1
          IF        @EQUAL
            ADD       FORM12P2,SUBTOTAL          * increment subtotal
          ENDIF
          MOVE      KEY9,MIGSEG01
          MOVE      KEY1,MIGSEG02
.
.         Load ServiceDate
.
          PACK      MIGSEG04,TFDAY,TFMONTH,TFCENT,TFYEAR
          REP       " 0",MIGSEG04
.
.         Load ServiceQuantity
.
          MOVE      TSERVS,FORM2
          MOVE      FORM2,KEY2A
          REP       " 0",KEY2A
          MATCH     "00",KEY2A
          IF        @EQUAL
            MOVE      "01",KEY2A
            MOVE      KEY2A,FORM2
          ENDIF
          MOVE      KEY2A,MIGSEG06
.
.         Load ServiceRate
.
          IF        PINVTYP = 1
.           ASSIGN    (TREBATE/FORM2),FORM12P2
            MOVE      TREBATE,FORM12P2
          ELSE
            ASSIGN    (TPATAMTT/FORM2),FORM12P2
          ENDIF
          CALL      FTOT0000                     * format numeric totals
          MOVE      KEY9,MIGSEG05
.
.         Load Text
.
          PACK      MIGSEG07,MDESC,SP30
.
          BRANCH    VALDFLG,WMIG1000             * validation only
.
          WRITE     EXTFILE1,SEQ;TILDA01,ANSM,ANSI,ANSG:
                                 MIGSEG01,MIGSEG02,MIGSEG03,MIGSEG04,MIGSEG05:
                                 MIGSEG06,MIGSEG07
          GOTO      WMIG1000
.
.         We have completed all the segments with charge amounts in them,
.         so check that the subtotals add up to the TotalHospitalChargeAmount
.
WMIG9000  COMPARE   INVAMTCT,SUBTOTAL
          IF        !@EQUAL
            MOVE      "GEN.06-TotalHospitalChargeAmount inconsistent with subtotals",ERRMSG
            CALL      PERR0000
          ENDIF
.
WMIG9999  RETURN
+
.******************************************************************************
.*                                  WDMG0000              Called by: VALD0000 *
.*                         Write DRG Morbidity Details             & WRIT0000 *
.******************************************************************************
.
WDMG0000  UNPACK    SP70,DMGSEG01,DMGSEG02,DMGSEG03,DMGSEG04
          REP       " 0",DMGSEG04
.
.         Clear array for procedures and diagnoses
.
          MOVE      ZERO,CODCNT
          REPEAT
            ADD       ONE,CODCNT
            MOVE      SP5,DISARY[CODCNT]
            MOVE      SP7,OPRARY[CODCNT]
          UNTIL     CODCNT >= 50
.
          CALL      GICD0000                     * get ICD10 disease & op. codes
.
          MATCH     SP5,DISARY[1]                * principal diagnosis found ?
          IF        @EQUAL
            MOVE      "DMG.01-Principal Diagnosis not found",ERRMSG
            CALL      PERR0000
          ELSE
            MOVE      DISARY[1],DMGSEG03         * write disease code
          ENDIF
.
.         Load VentilationHrs
.
          PACK      KEY8,ADMINO
          CALL      RDPTICU1                     * ICU record on file ?
          IF        OVRCD = 0
            MOVE      PTICUMEC,FORM4             * yes
            MOVE      FORM4,DMGSEG04
            REP       " 0",DMGSEG04
          ENDIF
.
.         Get the DRG & MDC codes for this admission
.
WDMG1000  CALL      GETDRG
.
.         Load DRGcode & DRGVersion
.
          PACK      DMGSEG01,DDRGCODE,SP4
          UNPACK    DRGVER,KEY1,DMGSEG02
.
          MATCH     "100",DRGVER
          IF        @EQUAL
            PACK      DMGSEG02,ANSA,ZERO,SP70
          ENDIF
.
.         The DRGcode & the DRGVersion must be populated if this is a Private
.         Hospital claim and the claim is the last in a series OR the claim is
.         not in a series.
.
          MATCH     "PR",CIDSEG02                * private hospital claim ?
          GOTO      WDMG9000 IF NOT EQUAL        * no
.
          MATCH     ANSN,CIDSEG04                * Claim not in series ?
          IF        !@EQUAL
            MATCH     ANSL,CIDSEG04              * no - claim last in series ?
            GOTO      WDMG9000 IF NOT EQUAL      * no
          ENDIF
.
          MATCH     SP4,DMGSEG01                 * DRGCode blank ?
          IF        @EQUAL
            MOVE      "DMG.02-DRGCode is blank",ERRMSG  * yes
            CALL      PERR0000
          ENDIF
.
          MATCH     SP2,DMGSEG02                 * blank DRGversion ?
          IF        @EQUAL
            MOVE      "DMG.03-DRGversion is blank",ERRMSG  * yes
            CALL      PERR0000
          ENDIF
.
WDMG9000  BRANCH    VALDFLG,WDMG9999             * validation only
.
          MATCH     "1",PTCNECUP
          IF        @EQUAL
            WRITE     EXTFILE1,SEQ;TILDA01,ANSD,ANSM,ANSG:
                                   DMGSEG01,DMGSEG02,DMGSEG03,DMGSEG04;
          ELSE
            MOVE      DMGSEG03,OLDDMG03
            WRITE     EXTFILE1,SEQ;TILDA01,ANSD,ANSM,ANSG:
                                   DMGSEG01,DMGSEG02,OLDDMG03,DMGSEG04;
          ENDIF
.
          CALL      WODC0000                     * write remaining dis. & ops
.
WDMG9999  RETURN
+
.******************************************************************************
.*                                  WMOR0000              Called by: VALD0000 *
.*                           Write Non-DRG Morbidity               & WRIT0000 *
.******************************************************************************
.
.         First check if we need to send the MOR segment if this is a
.         Health Fund extract
.
WMOR0000  BRANCH    OPTION,WMOR0050:             * Health Fund extract
                           WMOR9999              * Claim Code extract
.
WMOR0050  MATCH     "1",PTFXSMOR                 * sending MOR segment ?
          GOTO      WMOR9999 IF NOT EQUAL        * no - finished
.
          UNPACK    SP70,MORSEG01,MORSEG02,MORSEG03,MORSEG04,MORSEG05:
                         MORSEG06,MORSEG07,MORSEG08
.
.         Clear array for admission fim scores and discharge fim scores
.
          MOVE      ZERO,CODCNT
          REPEAT
            ADD       ONE,CODCNT
            MOVE      SP70,AFMARRAY[CODCNT]
            MOVE      SP70,DFMARRAY[CODCNT]
          UNTIL     CODCNT >= 18
.
          PACK      KEY31,AURNO,ATYPE,ACLAIM,AFUNDH,Z70
          CALL      RSPMUPG1
WMOR0100  CALL      RPPMUPG1
          BRANCH    OVRCD,WMOR9999
.
          MATCH     AURNO,PMUGURNO
          GOTO      WMOR9999 IF NOT EQUAL
.
          MATCH     ATYPE,PMUGATYP
          GOTO      WMOR9999 IF NOT EQUAL
.
          MATCH     SP70,PMUGCLAM
          IF        !@EQUAL
            MATCH     ACLAIM,PMUGCLAM
            GOTO      WMOR0100 IF NOT EQUAL
          ELSE
            MATCH     AFUNDH,PMUGFUND
            GOTO      WMOR0100 IF NOT EQUAL
.
            PACK      KEY14,AFUNDH,AFNDTB,SP70
            CALL      RDFUND1
            BRANCH    OVRCD,WMOR0100
.
            MATCH     PTHFBCAT,PMUGTABT
            GOTO      WMOR0100 IF NOT EQUAL
          ENDIF
.
          MATCH     SP70,PMUGEDAT
          IF        !@EQUAL
            MATCH     ADATE,PMUGEDAT
            GOTO      WMOR0100 IF LESS
          ENDIF
.
          PACK      KEY31,PMUGURNO,PMUGATYP,PMUGCLAM,PMUGFUND,PMUGTABT,PMUGEDAT
          CALL      RDPMAPG1
          BRANCH    OVRCD,WMOR9999
.
          PACK      MORSEG01,PMAGSNAP,SP70
.
          PACK      MORSEG02,PMAGICDE,SP70 
.
          PACK      MORSEG03,PMAGASSO,SP70
.
          PACK      MORSEG04,SP70
.
          PACK      MORSEG05,ANSS,SP70
.
          PACK      MORSEG06,AURNO,DASH,ONE,SP70
.
          MATCH     SP70,PMUGRDDT
          IF        !@EQUAL
            UNPACK    PMUGRDDT,CCENT,CYEAR,CMON,CDAY
            PACK      MORSEG07,CDAY,CMON,CCENT,CYEAR,SP70
          ENDIF
.
          MATCH     SP70,PMUGRPDT
          IF        !@EQUAL
            UNPACK    PMUGRPDT,CCENT,CYEAR,CMON,CDAY
            PACK      MORSEG08,CDAY,CMON,CCENT,CYEAR,SP70
          ENDIF
.
          MATCH     SP70,MORSEG01
          IF        @EQUAL
            PACK      KEY70,MORSEG02,MORSEG03,MORSEG06,MORSEG07,MORSEG08,SP70
            MATCH     SP70,KEY70
            IF        !@EQUAL
              MOVE      "MOR.01-ANSNAPClass is blank.",ERRMSG  * yes
              CALL      PERR0000    
            ENDIF  
          ENDIF
.
          MATCH     SP70,MORSEG02
          IF        @EQUAL
            PACK      KEY70,MORSEG01,MORSEG03,MORSEG06,MORSEG07,MORSEG08,SP70
            MATCH     SP70,KEY70
            IF        !@EQUAL
              MOVE      "MOR.02-AROCImpairmentCode is blank.",ERRMSG  * yes
              CALL      PERR0000
            ENDIF
          ENDIF
.
          MATCH     SP70,MORSEG03
          IF        @EQUAL
            PACK      KEY70,MORSEG01,MORSEG02,MORSEG06,MORSEG07,MORSEG08,SP70
            MATCH     SP70,KEY70
            IF        !@EQUAL
              MOVE      "MOR.03-AssessmentOnlyCode is blank.",ERRMSG  * yes
              CALL      PERR0000
            ENDIF
          ENDIF
.
          MATCH     SP70,MORSEG06
          IF        @EQUAL
            PACK      KEY70,MORSEG01,MORSEG02,MORSEG03,MORSEG07,MORSEG08,SP70
            MATCH     SP70,KEY70
            IF        !@EQUAL
              MOVE      "MOR.04-ANSNAPId is blank.",ERRMSG  * yes
              CALL      PERR0000
            ENDIF
          ENDIF
.
          MATCH     SP70,MORSEG07
          IF        @EQUAL
            PACK      KEY70,MORSEG01,MORSEG02,MORSEG03,MORSEG06,MORSEG08,SP70
            MATCH     SP70,KEY70
            IF        !@EQUAL
              MOVE      "MOR.05-DischargePlanDate is blank.",ERRMSG  * yes
              CALL      PERR0000
            ENDIF
          ENDIF
.
          MATCH     SP70,MORSEG08
          IF        @EQUAL
            PACK      KEY70,MORSEG01,MORSEG02,MORSEG03,MORSEG06,MORSEG07,SP70
            MATCH     SP70,KEY70
            IF        !@EQUAL
              MOVE      "MOR.06-MultiDisciplinaryRehabPlanDate is blank.",ERRMSG  * yes
              CALL      PERR0000
            ENDIF
          ENDIF
.
          BRANCH    VALDFLG,WMOR9000             * validation only
.
          WRITE     EXTFILE1,SEQ;TILDA01,ANSM,ANSO,ANSR:
                                 MORSEG01,MORSEG02,MORSEG03,MORSEG04,MORSEG05:
                                 MORSEG06,MORSEG07,MORSEG08;
.
WMOR9000  CALL      WADF0000
.
WMOR9999  RETURN
+
.******************************************************************************
.*                                  WCER0000              Called by: VALD0000 *
.*                           Write Certificates                    & WRIT0000 *
.******************************************************************************
.
.         Loop through the certifcates for this U/R
.
WCER0000  PACK      KEY19,AURNO,SP20
          CALL      RSPTCER1                     * position on U/R
WCER1000  CALL      RKPTCER1                     * read next record
          BRANCH    OVRCD,WCER9999               * eof - finished
.
          MATCH     AURNO,PTCEURNO               * same U/R still ?
          GOTO      WCER9999 IF NOT EQUAL        * no - finished
.
.         A valid certificate record has been found, so check if the
.         date range for the certificate overlaps the visit date range
.
          IF        ASTAT = 3
            MOVE      DDATE,ENDDATE              * discharge date is end date
          ELSE
            CALL      IBACLOCK                   * use current date as end date
            MOVE      CCC,CCENT
            MOVE      CYY,CYEAR
            MOVE      CMM,CMON
            MOVE      CDD,CDAY
            PACK      ENDDATE,CCENT,CYEAR,CMON,CDAY
            REP       " 0",ENDDATE
          ENDIF
.
          MATCH     PTCEFDAT,ADATE
          IF        @LESS
            MATCH     PTCEFDAT,ENDDATE
            GOTO      WCER1000 IF LESS
          ENDIF
.
          MATCH     ENDDATE,PTCETDAT
          IF        @LESS
            MATCH     ADATE,PTCETDAT
            GOTO      WCER1000 IF LESS
          ENDIF
.
.         The certificate applies to this visit, so load the data fields.
.
          UNPACK    SP70,CERSEG01,CERSEG02,CERSEG03,CERSEG04,CERSEG05
          UNPACK    SP70,CERSEG06,CERSEG07
          REP       " 0",CERSEG06
.
.         Load CertificateTypeCode.
.
          PACK      KEY5,CATCR,PTCETYPE
          CALL      RDCODE1                      * certificate type code found ?
          IF        OVRCD = 0
            IF        (TCFORM6>0 & TCFORM6<36) & TCFORM6 <> 8 & TCFORM6 <> 10
              LOAD      CERSEG01,TCFORM6,CERTTYPB,CERTTYPC,CERTYP3B,CERTYPPS:
                                         CERTYPRE,CERTYPNE,CERTYPCC,SP1:
                                         CERTYPED,SP1,CERTYPAC,CERTYPHC:
                                         CERTYPIC,CERTYPWC,CERTYPSU,CERTYPEL:
                                         CERTYPPE,CERTYPOS,CERTYPNS,CERTYPSP:
                                         CERTYPLY,CERTYPDE,CERTYPMU,CERTYPDO:
                                         CERTYPRD,CERTYPAD,CERTYPEX,CERTYPEC:
                                         CERTYPFL,CERTYPMB,CERTYPOO,CERTYPAE:
                                         CERTYPOU,CERTYPDR,CERTYPOT
              GOTO      WCER2000
            ENDIF
          ENDIF
.
.         Associated # not set for Certificate Type (Cat cr)
.
          IF        TCFORM6 = 0
            MOVE      "CER.01-Certificate type code (",ERRMSG
            ENDSET    ERRMSG
            APPEND    PTCETYPE,ERRMSG
            APPEND    " - Cat cr) not valid",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
          ELSE
            GOTO      WCER1000                   * ignore other certificates
          ENDIF
.
.         Load CertifyingProviderNum (3B certficates only)
.         & CertifyingProviderName
.
WCER2000  MATCH     SP6,PTCEDCOD                 * blank doctor code ?
          IF        @EQUAL
            IF        TCFORM6 = 3
              MOVE      "CER.02-No certifying doctor for certificate (",ERRMSG
              ENDSET    ERRMSG
              APPEND    PTCETYPE,ERRMSG
              APPEND    " - Cat cr)",ERRMSG
              RESET     ERRMSG
              CALL      PERR0000
            ELSE
              MOVE      "CER.03-Warning: No certifying doctor for certificate (",ERRMSG
              ENDSET    ERRMSG
              APPEND    PTCETYPE,ERRMSG
              APPEND    " - Cat cr)",ERRMSG
              RESET     ERRMSG
              CALL      PWRN0000
            ENDIF
            GOTO      WCER3000
          ENDIF
.
          MOVE      PTCEDCOD,KEY10
          CALL      RDPMHCP1                     * doctor code found ?
          IF        OVRCD = 1
            MOVE      "CER.04-Certifying doctor code (",ERRMSG
            ENDSET    ERRMSG
            APPEND    PTCEDCOD,ERRMSG
            APPEND    ") not found for certificate code (",ERRMSG
            APPEND    PTCETYPE,ERRMSG
            APPEND    " - Cat cr)",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      WCER3000
          ENDIF
.
.         A valid doctor record has been found.
.
          MOVE      PMHCSNAM,PACSNAME              * format name
          MOVE      PMHCGNAM,PACGNAME
          MOVE      PMHCTITL,PACTITLE
          MOVE      ONE,PACFRMT
          CALL      PACNAME
.
.         If formatted name is > 40 characters, then only load surname
.
          STRIP     PACFNAME
          MOVELPTR  PACFNAME,FORM2
          IF        FORM2 > 40
            PACK      CERSEG03,PMHCSNAM,SP30,SP10
          ELSE
            MOVE      PACFNAME,CERSEG03
          ENDIF
.
          MATCH     SP10,PMHCPRV1                * provider no. blank ?
          IF        @EQUAL
            COMPARE   THREE,TCFORM6              * 3B certificate ?
            IF        @EQUAL
              MOVE      "CER.05-No provider no. for certifying doctor code (",ERRMSG
              ENDSET    ERRMSG
              APPEND    PTCEDCOD,ERRMSG
              APPEND    ") for cert. code (",ERRMSG
              APPEND    PTCETYPE,ERRMSG
              APPEND    " - Cat cr)",ERRMSG
              RESET     ERRMSG
              CALL      PERR0000
            ELSE
              MOVE      "CER.06-Warning: No provider no. for certifying doctor code (",ERRMSG
              ENDSET    ERRMSG
              APPEND    PTCEDCOD,ERRMSG
              APPEND    ") for certificate code (",ERRMSG
              APPEND    PTCETYPE,ERRMSG
              APPEND    " - Cat cr)",ERRMSG
              RESET     ERRMSG
              CALL      PWRN0000
            ENDIF
            GOTO      WCER3000
          ENDIF
.
.         A provider number has been found, so validate it
.
          MOVE      PMHCPRV1,DIM8
          MOVE      FOUR,PROVFLAG                * set flag to doctor provider
          CALL      VPRN0000                     * valid provider ?
          BRANCH    EXIT,WCER3000                * no
          MOVE      PMHCPRV1,CERSEG02            * load provider no.
.
.         Load IssueDate
.
WCER3000  UNPACK    PTCESDAT,CCENT,CYEAR,CMON,CDAY
          PACK      CERSEG04,CDAY,CMON,CCENT,CYEAR
          REP       " 0",CERSEG04
.
.         Load FromDate
.
          UNPACK    PTCEFDAT,CCENT,CYEAR,CMON,CDAY
          PACK      CERSEG05,CDAY,CMON,CCENT,CYEAR
          REP       " 0",CERSEG05
.
.         Load NumberOfDays
.
          DAYSEP    PTCEFDAT,PTCETDAT,NUMBDAYS
          IF        NUMBDAYS = 0
            MOVE      ONE,NUMBDAYS               * set to "1" for sameday visit
          ENDIF
          MOVE      NUMBDAYS,CERSEG06
          REP       " 0",CERSEG06
.
.         Load ToDate
.
          UNPACK    PTCETDAT,CCENT,CYEAR,CMON,CDAY
          PACK      CERSEG07,CDAY,CMON,CCENT,CYEAR
          REP       " 0",CERSEG07
.
.         See if there are any comments associated with this certificate.
.         We are using the first 10 comment lines to populate "Text".
.
          MOVE      ZERO,CERCOUNT                * clear comment fields
          WHILE     CERCOUNT< 10
            ADD       ONE,CERCOUNT
            PACK      CERCOMNT[CERCOUNT],SP30,SP20
          DO
.
          MOVE      ZERO,CERCOUNT                * initialise comment line count
          PACK      KEY22,PTCEURNO,PTCETYPE,PTCEFDAT,SP30
          CALL      RSPTCLC1                     * position in file
WCER3500  CALL      RKPTCLC1                     * read next record
          BRANCH    OVRCD,WCER4000               * eof - no comments
.
          MATCH     PTCEURNO,PTCLURNO            * same U/R still ?
          GOTO      WCER4000 IF NOT EQUAL        * no - no comments
.
          MATCH     PTCETYPE,PTCLTYPE            * same type still ?
          GOTO      WCER4000 IF NOT EQUAL        * no - no comments
.
          MATCH     PTCEFDAT,PTCLFDAT            * same from date still ?
          GOTO      WCER4000 IF NOT EQUAL        * no - no comments
.
.         A comment line has been found for this ur/type/from date
.
          ADD       ONE,CERCOUNT                 * increment counter
          MOVE      PTCLTEXT,CERCOMNT[CERCOUNT]  * load comment line
.
          COMPARE   TEN,CERCOUNT                 * max. comment reached ?
          GOTO      WCER3500 IF LESS             * no - get next comment
.
.         Check if any comments were found.
.         We need to check if this is a 3B certificate or Type C certificate
.         as the "Text" is a mandatory field for these certificate types
.
WCER4000  COMPARE   ZERO,CERCOUNT                * any comments found ?
          GOTO      WCER5000 IF NOT EQUAL        * yes
.
          IF        TCFORM6 = 3 | TCFORM6 = 2
            MOVE      "CER.07-Certificate text not found for certificate code (",ERRMSG
            ENDSET    ERRMSG
            APPEND    PTCETYPE,ERRMSG
            APPEND    " - Cat cr)",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
          ELSE
            MOVE      "CER.08-Warning: Certificate text not found for certificate code (",ERRMSG
            ENDSET    ERRMSG
            APPEND    PTCETYPE,ERRMSG
            APPEND    " - Cat cr)",ERRMSG
            RESET     ERRMSG
            CALL      PWRN0000
          ENDIF
.
WCER5000  BRANCH    VALDFLG,WCER1000             * Only validating data
.
          WRITE     EXTFILE1,SEQ;TILDA01,ANSC,ANSE,ANSR:
                                 CERSEG01,CERSEG02,CERSEG03,CERSEG04:
                                 CERSEG05,CERSEG06,CERSEG07,CERCOMNT[1]:
                                 CERCOMNT[2],CERCOMNT[3],CERCOMNT[4]:
                                 CERCOMNT[5],CERCOMNT[6],CERCOMNT[7]:
                                 CERCOMNT[8],CERCOMNT[9],CERCOMNT[10]
.
          GOTO      WCER1000                     * get next certificate record
.
WCER9999  RETURN
+
.******************************************************************************
.*                                  WMED0000              Called by: VALD0000 *
.*                           Write Medical Services                & WRIT0000 *
.******************************************************************************
.
WMED0000  UNPACK    SP70,MEDSEG01,MEDSEG02,MEDSEG03,MEDSEG04,MEDSEG05
          UNPACK    SP70,MEDSEG06,MEDSEG07,MEDSEG08
          REP       " 0",MEDSEG01
.
          BRANCH    VALDFLG,WMED9999             * validation only
.
          WRITE     EXTFILE1,SEQ;TILDA01,ANSM,ANSE,ANSD:
                                 MEDSEG01,MEDSEG02,MEDSEG03,MEDSEG04,MEDSEG05:
                                 MEDSEG06,MEDSEG07,MEDSEG08
.
WMED9999  RETURN
+
.******************************************************************************
.*                                  WREM0000              Called by: VALD0000 *
.*                           Write Remarks Details                 & WRIT0000 *
.******************************************************************************
.
WREM0000  CLEAR     DIM500
          MOVE      ZERO,COUNTER
.
          PACK      KEY17,ADMINO,ZERO,ONE,ZERO,TILDA40
          CALL      RSVSMDT1                     * position on admission no.
WREM0500  CALL      RPVSMDT1                     * read previous record
          BRANCH    OVRCD,WREM9000               * eof - finished
.
          MOVE      ADMINO,DIM8
          MATCH     DIM8,VSMDVISN                * same admission still ?
          GOTO      WREM9000 IF NOT EQUAL        * no - finished
.
          MATCH     "010",VSMDTYPE               * same comment type still ?
          GOTO      WREM9000 IF NOT EQUAL        * no - finished
.
          MATCH     "1",VSMDDELT                 * deleted comment ?
          GOTO      WREM0500 IF EQUAL            * yes - ignore record
.
          MOVE      ZERO,COUNTER                 * initialise counter
.
.         A valid Eclipse note record has been found, so get the comment lines
.
          PACK      KEY20,VSMDVISN,VSMDTYPE,VSMDNOTE,SP20
          CALL      RSVSMTX1                     * position on visit
WREM1500  CALL      RKVSMTX1                     * read next record
          BRANCH    OVRCD,WREM0500               * eof - get next note header
.
          MATCH     VSMDVISN,VSMTVISN            * same visit still ?
          GOTO      WREM0500 IF NOT EQUAL        * no - get next note header
.
          MATCH     VSMDTYPE,VSMTTYPE            * same note type still ?
          GOTO      WREM0500 IF NOT EQUAL        * no - get next note header
.
          MATCH     VSMDNOTE,VSMTNOTE            * same note number still ?
          GOTO      WREM0500 IF NOT EQUAL        * no - get next note header
.
          ADD       ONE,COUNTER                  * increment counter
          COMPARE   ONE,COUNTER                  * first note line ?
          GOTO      WREM1550 IF NOT EQUAL        * no
.
.         Load the first comment line with the date and time of the note input
.
          UNPACK    VSMDDATE,CCENT,CYEAR,CMON,CDAY
          CALL      PACDATE
          PACK      FRMTDTTM,CPCDATE,SP1,VSMDTIME,SP1
          MOVE      TWENTY,LINCOUNT              * initialise line char. count
.
.         CLEAR     DIM500                       * clear comment line
          APPEND    FRMTDTTM,DIM500              * load note date/time
.
.         Find the next word of the note line
.
WREM1550  CLEAR     TMPSTRNG                     * clear word string
          MOVE      VSMTCMNT,DIM100
          STRIP     DIM100                       * remove trailing blanks
.
WREM1600  MATCH     SP1,DIM100                   * blank character ?
          IF        @EQUAL
            MOVELPTR  TMPSTRNG,WRDCOUNT          * yes
            COMPARE   ZERO,WRDCOUNT              * do we have a word ?
            GOTO      WREM1800 IF NOT EQUAL      * yes - load word
          ELSE
            MOVE      DIM100,ANS                 * load character
            APPEND    ANS,TMPSTRNG
          ENDIF
.
WREM1700  BUMP      DIM100                       * position on next charater
.         GOTO      WREM1500 IF EOS              * end of note
          IF        @EOS
            RESET     TMPSTRNG
.
            ASSIGN    (500-LINCOUNT),FORM3
            IF        FORM3 < WRDCOUNT
              RESET     DIM500
              PACK      DIM500,DIM500,SP70,SP70,SP70,SP70,SP70,SP70,SP70,SP70
              IF        VALDFLG = 0
                WRITE     EXTFILE1,SEQ;TILDA01,ANSR,ANSE,ANSM,DIM500
              ENDIF
.
              CLEAR     DIM500                     * clear comment line
              APPEND    FRMTDTTM,DIM500            * load note date/time
              APPEND    "(cont.) ",DIM500
              MOVE      TWENTY8,LINCOUNT           * initialise line char. count
            ENDIF
.
            ADD       WRDCOUNT,LINCOUNT            * increment line count
            APPEND    TMPSTRNG,DIM500              * append word
            IF        LINCOUNT < 500
              APPEND    SP1,DIM500
              ADD       ONE,LINCOUNT               * increment line count
            ENDIF
            CLEAR     TMPSTRNG
            GOTO      WREM1500
          ENDIF
          GOTO      WREM1600
.
.         Append the word to the comments line, but only if there is room.
.         If not enough room, use the existing comment to write a REM segment,
.         then start a new comment line with this word.
.
WREM1800  RESET     TMPSTRNG
.
          ASSIGN    (500-LINCOUNT),FORM3
          IF        FORM3 < WRDCOUNT
            RESET     DIM500
            PACK      DIM500,DIM500,SP70,SP70,SP70,SP70,SP70,SP70,SP70,SP70
            IF        VALDFLG = 0
              WRITE     EXTFILE1,SEQ;TILDA01,ANSR,ANSE,ANSM,DIM500
            ENDIF
.
            CLEAR     DIM500                     * clear comment line
            APPEND    FRMTDTTM,DIM500            * load note date/time
            APPEND    "(cont.) ",DIM500
            MOVE      TWENTY8,LINCOUNT           * initialise line char. count
          ENDIF
.
          ADD       WRDCOUNT,LINCOUNT            * increment line count
          APPEND    TMPSTRNG,DIM500              * append word
          IF        LINCOUNT < 500
            APPEND    SP1,DIM500
            ADD       ONE,LINCOUNT               * increment line count
          ENDIF
          CLEAR     TMPSTRNG
          GOTO      WREM1700
.
WREM9000  BRANCH    VALDFLG,WREM9999             * validation only
.
          COMPARE   ZERO,COUNTER                 * any comments found ?
          GOTO      WREM9999 IF EQUAL            * no - finished
.
.         At least one comment record has been written, so we need to complete
.         the current REM segment.
.
          RESET     DIM500
          PACK      DIM500,DIM500,SP70,SP70,SP70,SP70,SP70,SP70,SP70,SP70
          WRITE     EXTFILE1,SEQ;TILDA01,ANSR,ANSE,ANSM,DIM500
.
WREM9999  RETURN
+
.******************************************************************************
.*                                  WTLR0000              Called by: WRIT0000 *
.*                           Write Trailer                                    *
.******************************************************************************
.
WTLR0000  WRITE     EXTFILE1,SEQ;TILDA01,ANST,ANSL,ANSR
.
WTLR9999  RETURN
+
.*****************************************************************************
.*                                  PERR0000              Called by: Lots    *
.*                             Print Error Message                           *
.* Requires: ERRMSG - error description                                      *
.*           INVNO  - invoice number                                         *
.*           ADMINO - admission number                                       *
.*           PURNO  - U/R number                                             *
.*****************************************************************************
.
PERR0000  COMPARE   ONE,VALDFLG                  * validation ?
          GOTO      PERR9999 IF NOT EQUAL        * no - finished
.
          COMPARE   "55",CLNO                    * page full ?
          CALL      HEAD0000 IF NOT LESS         * yes
.
          PACK      ERRMSG,ERRMSG,SP30,SP30
          PRINT     *1,PIPE,*3,INVNO,*12,PIPE,*14,ADMINO,*24,PIPE,*27,PURNO:
                    *37,PIPE,*39,ERRMSG,*132,PIPE
          ADD       ONE,CLNO
.
          MOVE      ONE,ERRFLG              * Error flag - yes
          ADD       ONE,ERRCT             * Increment the error counter
.
PERR9999  RETURN
+
.******************************************************************************
.*                                  PWRN0000              Called by: Lots     *
.*                            Print Warning Message                           *
.* Requires: ERRMSG - warning  description                                    *
.*           INVNO  - invoice number                                          *
.*           ADMINO - admission number                                        *
.*           PURNO  - U/R number                                              *
.******************************************************************************
.
PWRN0000  COMPARE   ONE,VALDFLG                  * validation ?
          GOTO      PWRN9999 IF NOT EQUAL        * no - finished
.
          COMPARE   "55",CLNO                    * page full ?
          CALL      HEAD0000 IF NOT LESS         * yes
.
          PACK      ERRMSG,ERRMSG,SP30,SP30
          PRINT     *1,PIPE,*3,INVNO,*12,PIPE,*14,ADMINO,*24,PIPE,*27,PURNO:
                    *37,PIPE,*39,ERRMSG,*132,PIPE
          ADD       ONE,CLNO
.
          ADD       ONE,WARCT                    * increment the warning counter
.
PWRN9999  RETURN
+
.******************************************************************************
.*                                  FTOT0000              Called by: Lots     *
.*                            Format Numeric Totals                           *
.* Requires: FORM12P2 - numeric amount                                        *
.* Returns:  KEY1 - charge raised code                                        *
.*           KEY9 - amount in cents                                           *
.******************************************************************************
.
FTOT0000  IF        FORM12P2 > 9999999.99
            MOVE      "GEN.12-Amount greater than 9999999.99",ERRMSG
            CALL      PERR0000
          ENDIF
.
          PACK      KEY15A,SP10,SP5
          MOVE      FORM12P2,KEY15A
          UNPACK    KEY15A,KEY5,KEY7,KEY1,KEY2
          PACK      KEY9,KEY7,KEY2
.
          MOVE      SP1,KEY1
          IF        FORM12P2 = 0
            MOVE      ANSI,KEY1                  * info only
          ELSE
            MOVE      ANSC,KEY1
          ENDIF
          REP       " 0",KEY9
.
.>>>>>>   We used to process credits, but now any reversing of claims is
.         done by sending an adjustment instead.  Not sure if the software
.         will handle this.  Do we need to have an error on credits, or
.         do they need to be handled differently
.
FTOT9999  RETURN
+
.******************************************************************************
.*                                  CTIM0000              Called by: WPSG0000 *
.*                               Calculate Time                               *
.* Returns:   EXIT  0 = Valid time                                            *
.*                  1 = Invalid time                                          *
.*            FORM4 - Theatre Time in minutes                                 *
.******************************************************************************
.
CTIM0000  MOVE      ZERO,FORM4
          UNPACK    STRTTME,CHOUR,KEY1,CMIN
          MATCH     SP2,CHOUR
          GOTO      CTIM9500 IF EQUAL       * Invalid time
.
          MOVE      CHOUR,IHOUR
          MOVE      CMIN,IMIN
          ASSIGN    (IHOUR*60)+IMIN,FORM9
.
          UNPACK    ENDTME,CHOUR,KEY1,CMIN
          MATCH     SP2,CHOUR
          GOTO      CTIM9500 IF EQUAL       * Invalid time
.
          MOVE      CHOUR,IHOUR
          MOVE      CMIN,IMIN
          ASSIGN    (IHOUR*60)+IMIN-FORM9,FORM9
.
          IF        FORM9>=0
            MOVE      FORM9,FORM4
          ELSE
            ASSIGN    (FORM9+1440),FORM4    * 1440 = minutes in a day
          ENDIF
.
          COMPARE   ZERO,FORM4
          GOTO      CTIM9500 IF EQUAL       * Invalid time
.
          MOVE      ZERO,EXIT
          GOTO      CTIM9999
.
CTIM9500  MOVE      ONE,EXIT
.
CTIM9999  RETURN
+
.******************************************************************************
.*                                  GEEQ0000              Called by: WMIG0000 *
.*        Get The EDI Equivalent Code for a Miscellaneous Charge Code         *
.* Requires:   TITEMNO - Miscellaneous Charge code                            *
.*             Valid read on patmi1af.                                        *
.*             SERVDATE - Service Date                                        *
.*             PTCNDCLM - Default Claim Code                                  *
.* Returns:    EXIT  0 = EDI Equivalent code found                            *
.*                   1 = EDI Equivalent code not found                        *
.*             MIGSEG03 - Service code                                        *
.******************************************************************************
.
GEEQ0000  MOVE      ZERO,COUNTER                 * initialise counter
          PACK      SERVDATE,TFCENT,TFYEAR,TFMONTH,TFDAY  
          REP       " 0",SERVDATE
.
          UNPACK    SP20,PTHFBCAT           * change "H/F Table" to "Table Type"
          PACK      KEY14,AFUNDH,AFNDTB,SP20
          CALL      RDFUND1                 * "Table Type code" now in PTHFBCAT
.
.         Look for a matching record in patmchgf for the item code using
.         the following criteria:
.            1. claim code, health fund/table, item code
.            2. claim code, blank health fund/table, item code
.            3. zero claim code, blank health fund/table, item code
.
GEEQ1000  PACK      KEY29,ACLAIM,AFUNDH,PTHFBCAT,TITEMNO,SERVDATE,SP10
          CALL      PATMCHRD                * find Miscellaneous Charge Item
          IF        EXIT = 1
.                                           * try a blank Health Fund
            PACK      KEY29,ACLAIM,SP6,SP3,TITEMNO,SERVDATE,SP10
            CALL      PATMCHRD              * find Miscellaneous Charge Item
            IF        EXIT = 1
.                                           * set Hospital default
              PACK      KEY29,PTCNDCLM,SP6,SP3,TITEMNO,SERVDATE,SP10
              CALL      PATMCHRD            * find Miscellaneous Charge Item
              BRANCH    EXIT,GEEQ1090       * not found or invalid
            ENDIF
          ENDIF
.
GEEQ1080  MATCH     SP11,PTMCECEQ              * blank Eclipse equivalent ?
          IF        @EQUAL
            PACK      DIM11,MCHARGE,SP20       * yes - use charge code
          ELSE
            MOVE      PTMCECEQ,DIM11           * no - use Eclipse equiv.
          ENDIF
.
.         If this is a DVA claim, then simply send the item code as it
.         has been entered.
.
          IF        OPTION = 2
            STRIP     DIM11
.           MOVELPTR  DIM11,FORM2
.           IF        FORM2 > 5
.             MOVE      "MIG.02-Misc. Charge code (",ERRMSG
.             ENDSET    ERRMSG
.             APPEND    DIM11,ERRMSG
.             APPEND    ") more than 5 characters in length",ERRMSG
.             RESET     ERRMSG
.             CALL      PERR0000
.             GOTO      GEEQ9500
.           ENDIF
            PACK      DIM11,DIM11,SP20
            MOVE      DIM11,MIGSEG03
            GOTO      GEEQ9100
          ENDIF
.
.         This is not a DVA claim, so check if the Type of Service is set
.         to a valid value 
.
          MOVE      ZERO,FORM2
          MOVE      PTMCECTS,FORM2
          BRANCH    FORM2,GEEQ1100:            * external aid/prosthetics
                          GEEQ1200:            * cosmetics
                          GEEQ1300:            * dental
                          GEEQ1400:            * drugs
                          GEEQ1500:            * disposables
                          GEEQ1600:            * exceptional drug list
                          GEEQ1700:            * other - clinic
                          GEEQ1800:            * other - home
                          GEEQ1900:            * other
                          GEEQ2000:            * psych - clinic
                          GEEQ2100:            * psych - home
                          GEEQ2200:            * psych
                          GEEQ2300:            * c'wealth prosthetics
                          GEEQ2400:            * rehab - clinic
                          GEEQ2500:            * rehab - home
                          GEEQ2600             * rehab
.
.         Valid miscellaneous charge record not found
.
GEEQ1090  MOVE      "MIG.01-Misc. Charge code (",ERRMSG
          ENDSET    ERRMSG
          APPEND    TITEMNO,ERRMSG
          APPEND    ") record not found with Eclipse Equivalent",ERRMSG
          RESET     ERRMSG
          CALL      PERR0000
          GOTO      GEEQ9500
.
.         External Aid/Prosthetics
.
GEEQ1100  PACK      MIGSEG03,ANSA,ANSP
          GOTO      GEEQ9000
.
.         Cosmetics
.
GEEQ1200  PACK      MIGSEG03,ANSC,ANSM
          GOTO      GEEQ9000
.
.         Dental
.
GEEQ1300  PACK      MIGSEG03,ANSD,ANSE
          GOTO      GEEQ9000
.
.         Drugs
.
GEEQ1400  PACK      MIGSEG03,ANSD,ANSR
          GOTO      GEEQ9000
.
.         Disposables
.
GEEQ1500  PACK      MIGSEG03,ANSD,ANSS
          GOTO      GEEQ9000
.
.         Exceptional Drug List
.
GEEQ1600  PACK      MIGSEG03,ANSD,ANSX
          GOTO      GEEQ9000
.
.         Other - Clinic
.
GEEQ1700  PACK      MIGSEG03,ANSO,ANSC
          GOTO      GEEQ9000
.
.         Other - Home
.
GEEQ1800  PACK      MIGSEG03,ANSO,ANSH
          GOTO      GEEQ9000
.
.         Other
.
GEEQ1900  PACK      MIGSEG03,ANSO,ANST
          GOTO      GEEQ9000
.
.         Psych - Clinic
.
GEEQ2000  PACK      MIGSEG03,ANSP,ANSC
          GOTO      GEEQ9000
.
.         Psych - Home
.
GEEQ2100  PACK      MIGSEG03,ANSP,ANSH
          GOTO      GEEQ9000
.
.         Psych
.
GEEQ2200  PACK      MIGSEG03,ANSP,ANSS
          GOTO      GEEQ9000
.
.         Prosthetic on C'wealth Schedule
.
GEEQ2300  PACK      MIGSEG03,ANSP,ANSX
          GOTO      GEEQ9000
.
.         Rehab - Clinic
.
GEEQ2400  PACK      MIGSEG03,ANSR,ANSC
          GOTO      GEEQ9000
.
.         Rehab - Home
.
GEEQ2500  PACK      MIGSEG03,ANSR,ANSH
          GOTO      GEEQ9000
.
.         Rehab
.
GEEQ2600  PACK      MIGSEG03,ANSR,ANSE
          GOTO      GEEQ9000
.
.         Finish formatting ServiceCode
.
GEEQ9000  ENDSET    MIGSEG03
.
          MATCH     SP70,PTMCEHCP
          IF        !@EQUAL
            APPEND    PTMCEHCP,MIGSEG03
          ELSE
            APPEND    "00",MIGSEG03                * set default health provider
          ENDIF
.
          APPEND    DIM11,MIGSEG03
          RESET     MIGSEG03
          STRIP     MIGSEG03
          ENDSET    MIGSEG03
.
          APPEND    SP20,MIGSEG03
          RESET     MIGSEG03
.
GEEQ9100  MOVE      ZERO,EXIT
          GOTO      GEEQ9999
.
GEEQ9500  MOVE      ONE,EXIT
.
GEEQ9999  RETURN
+
.******************************************************************************
.*                            NFND0000             Called by: WSVB0000        *
.*   See if there is an Eclipse Equivalent in Casemix funding for the DRG     *
.* Requires: PTINCNID - casemix contract code                                 *
.*           ACLAIM   - claim code                                            *
.*           AFUNDH   - health fund                                           *
.*           CMCODE   - DRG code                                              *
.* Returns:  Exit   0 = Eclipse Equivalent found (and valid read on patcmxaf) *
.*                  1 = No Eclipse Equivalent found                           *
.******************************************************************************
.
.         First, try using claim code, health fund and DRG to see if
.         a record exists on patcmxaf
.
NFND0000  PACK      KEY24,PTINCNID,ACLAIM,AFUNDH,CMCODE
          CALL      RDPTCMX2
          BRANCH    OVRCD,NFND1000
.
          MATCH     SP70,PTCMECEQ                * blank equivalent ?
          GOTO      NFND1000 IF EQUAL            * yes - use DRG
.
          MATCH     SP70,PTCMECTS                * blank service type ?
          GOTO      NFND1000 IF EQUAL            * yes - use DRG
.
          GOTO      NFND9000
.
.         Next, try using claim code, blank health fund and DRG to see if
.         a record exists on patcmxaf
.
NFND1000  PACK      KEY24,PTINCNID,ACLAIM,SP6,CMCODE
          CALL      RDPTCMX2
          BRANCH    OVRCD,NFND2000
.
          MATCH     SP70,PTCMECEQ                * blank equivalent ?
          GOTO      NFND2000 IF EQUAL            * yes - use DRG
.
          MATCH     SP70,PTCMECTS                * blank service type ?
          GOTO      NFND2000 IF EQUAL            * yes - use DRG
.
          GOTO      NFND9000
.
.         Finally, try using default claim code, blank health fund and DRG
.         to see if a record exists on patcmxaf
.
NFND2000  PACK      KEY24,PTINCNID,PTCNDCLM,SP6,CMCODE
          CALL      RDPTCMX2
          BRANCH    OVRCD,NFND9100
.
          MATCH     SP70,PTCMECEQ                * blank equivalent ?
          GOTO      NFND9100 IF EQUAL            * yes - use DRG
.
          MATCH     SP70,PTCMECTS                * blank service type ?
          GOTO      NFND9100 IF EQUAL            * yes - use DRG
.
NFND9000  MOVE      ZERO,EXIT
          GOTO      NFND9999
.
NFND9100  MOVE      ONE,EXIT
.
NFND9999  RETURN
+
.******************************************************************************
.*                                  GCEQ0000              Called by: WSVB0000 *
.*           Load the EDI Equivalent Code for a Casemix Code                  *
.* Requires:   PTCMECTS - Eclipse type or service                             *
.*             PTCMECEQ - Eclipse Equivalent Code                             *
.* Returns:    EXIT  0 = EDI Equivalent code found                            *
.*                   1 = EDI Equivalent code not found                        *
.*             SVBSEG05 - Service Code                                        *
.*             KEY1A    - Service Type Code                                   *
.******************************************************************************
.
GCEQ0000  MOVE      ZERO,FORM2
          MOVE      PTCMECTS,FORM2
          BRANCH    FORM2,GCEQ1100:            * external aid/prosthetics
                          GCEQ1200:            * cosmetics
                          GCEQ1300:            * dental
                          GCEQ1400:            * drugs
                          GCEQ1500:            * disposables
                          GCEQ1600:            * exceptional drug list
                          GCEQ1700:            * other - clinic
                          GCEQ1800:            * other - home
                          GCEQ1900:            * other
                          GCEQ2000:            * psych - clinic
                          GCEQ2100:            * psych - home
                          GCEQ2200:            * psych
                          GCEQ2300:            * c'wealth prosthetics
                          GCEQ2400:            * rehab - clinic
                          GCEQ2500:            * rehab - home
                          GCEQ2600:            * rehab
                          GCEQ2700:            * Map to DRG
                          GCEQ2800             * Map to CMBS
.
.         Invalid service code type
.
GCEQ1090  MOVE      "SVB.05-Service Code Type not valid",ERRMSG
          CALL      PERR0000
          GOTO      GCEQ9500
.
.         External Aid/Prosthetics
.
GCEQ1100  PACK      SVBSEG05,ANSA,ANSP
          GOTO      GCEQ9000
.
.         Cosmetics
.
GCEQ1200  PACK      SVBSEG05,ANSC,ANSM
          GOTO      GCEQ9000
.
.         Dental
.
GCEQ1300  PACK      SVBSEG05,ANSD,ANSE
          GOTO      GCEQ9000
.
.         Drugs
.
GCEQ1400  PACK      SVBSEG05,ANSD,ANSR
          GOTO      GCEQ9000
.
.         Disposables
.
GCEQ1500  PACK      SVBSEG05,ANSD,ANSS
          GOTO      GCEQ9000
.
.         Exceptional Drug List
.
GCEQ1600  PACK      SVBSEG05,ANSD,ANSX
          GOTO      GCEQ9000
.
.         Other - Clinic
.
GCEQ1700  PACK      SVBSEG05,ANSO,ANSC
          GOTO      GCEQ9000
.
.         Other - Home
.
GCEQ1800  PACK      SVBSEG05,ANSO,ANSH
          GOTO      GCEQ9000
.
.         Other
.
GCEQ1900  PACK      SVBSEG05,ANSO,ANST
          MOVE      "1",CMBSCMIX
          GOTO      GCEQ9000
.
.         Psych - Clinic
.
GCEQ2000  PACK      SVBSEG05,ANSP,ANSC
          GOTO      GCEQ9000
.
.         Psych - Home
.
GCEQ2100  PACK      SVBSEG05,ANSP,ANSH
          GOTO      GCEQ9000
.
.         Psych
.
GCEQ2200  PACK      SVBSEG05,ANSP,ANSS
          GOTO      GCEQ9000
.
.         Prosthetic on C'wealth Schedule
.
GCEQ2300  PACK      SVBSEG05,ANSP,ANSX
          GOTO      GCEQ9000
.
.         Rehab - Clinic
.
GCEQ2400  PACK      SVBSEG05,ANSR,ANSC
          GOTO      GCEQ9000
.
.         Rehab - Home
.
GCEQ2500  PACK      SVBSEG05,ANSR,ANSH
          GOTO      GCEQ9000
.
.         Rehab
.
GCEQ2600  PACK      SVBSEG05,ANSR,ANSE
          GOTO      GCEQ9000
.
.         Map to DRG
.
GCEQ2700  PACK      SVBSEG05,PTCMECEQ,SP70
          MOVE      ANSD,KEY1A
          GOTO      GCEQ9250
.
.         Map to CMBS
.
GCEQ2800  PACK      SVBSEG05,PTCMECEQ,SP70
          MOVE      ANSC,KEY1A
          MOVE      "1",CMBSCMIX
          GOTO      GCEQ9250
.
.         Finish formatting ServiceCode
.
GCEQ9000  ENDSET    SVBSEG05
.
          MATCH     SP70,PTCMEHCP
          IF        !@EQUAL
            APPEND    PTCMEHCP,SVBSEG05
          ELSE
            APPEND    "00",SVBSEG05                * set default health provider
          ENDIF
.
          APPEND    PTCMECEQ,SVBSEG05
          APPEND    SP20,SVBSEG05
          RESET     SVBSEG05
.
          MOVE      ANSM,KEY1A                   * set as Miscellaneous
.
GCEQ9250  MOVE      ZERO,EXIT
          GOTO      GCEQ9999
.
GCEQ9500  MOVE      ONE,EXIT
.
GCEQ9999  RETURN
+
.******************************************************************************
.*                                  GICD0000              Called by: WDMG0000 *
.*                               Get ICD10 Codes                              *
.******************************************************************************
.
.         First, load any disease codes for the admission.
.
GICD0000  MOVE      ZERO,CODCNT                  * initialise code counter
.
          PACK      KEY16,ADMINO,SP20                                 *C-240107
          CALL      RSPTECD2                     * position on admission no.
GICD1000  CALL      RKPTECD2                     * read next record
          BRANCH    OVRCD,GICD2000               * eof - finished diseases
.
          MATCH     ADMINO,PTEDADMN              * same admission still ?
          GOTO      GICD2000 IF NOT EQUAL        * no - finished diseases
.
          MATCH     ANSM,PTEDTYPE                * morphology code ?
          GOTO      GICD1000 IF EQUAL            * yes - ignore record
.
.         MATCH     PTCNI10D,PTEDDTCD            * using ICD-9 ?
.         IF        @LESS
.           PACK      KEY9,PTEDCODE              * yes
.           CALL      RD10T9D1                   * code on file ?
.           BRANCH    OVRCD,GICD1000             * no - ignore record
.
.           MOVE      DICD10CD,PTEDCODE          * load mapped ICD10 dis. code
.         ENDIF
.
.         Get the details for the ICD10 code
.
.         PACK      KEY9,PTEDCODE
.         CALL      RDPT10D1                     * code on file ?
.         BRANCH    OVRCD,GICD1000               * no - ignore record
.
          MOVE      DDATE,ICDRDDTE
.
          PACK      KEY9,PTEDCODE
          CALL      RDPTICD1
          BRANCH    OVRCD,GICD1000
.
          COMPARE   ONE,ICDRDVER          * ICD9?
          IF        @EQUAL
            MOVE      DICD10CD,PTEDCODE          * load mapped ICD10 dis. code
          ENDIF
.
          ADD       ONE,CODCNT                   * increment counter
          REP       ". - / ",PTEDCODE            * format code
          SQUEEZE   PTEDCODE
.
          MATCH     "1",PTCNECUP
          GOTO      GICD1500 IF NOT EQUAL
.
.         Task 0835185: Added prefix for onset type to diagnosis code
.
          MOVE      PTEDOSET,ANS
          REP       " 9",ANS
          TYPE      ANS
          IF        !@EQUAL
            MOVE      "DMG.04-Onset type not numeric",ERRMSG
            CALL      PERR0000
          ENDIF
.
          MOVE      ANS,FORM1
          IF        FORM1 <> 1 & FORM1 <> 2 & FORM1 <> 9
            MOVE      "DMG.05-Onset type not valid",ERRMSG
            CALL      PERR0000
          ENDIF
.
.         For QLD sites, transpose "1" to "2" and vica versa.
.
          IF        PTCNHDPS = 4
            MATCH     "1",ANS
            IF        @EQUAL
              MOVE      "2",ANS
            ELSE
              MATCH     "2",ANS
              IF        @EQUAL
                MOVE      "1",ANS
              ENDIF
            ENDIF
          ENDIF
.
GICD1500  MATCH     "1",PTCNECUP
          IF        @EQUAL
            PACK      DISARY[CODCNT],ANS,PTEDCODE,SP10  * load diagnosis code
          ELSE
            PACK      DISARY[CODCNT],PTEDCODE,SP10      * load diagnosis code
          ENDIF
.
          COMPARE   FIFTY,CODCNT                 * code count < 50 ?
          GOTO      GICD1000 IF LESS             * yes - get next disease code
.
.         Now load any operation codes for the admission.
.
GICD2000  MOVE      ZERO,CODCNT                  * initialise code counter
.
          PACK      KEY16,ADMINO,SP20                                 *C-240107
          CALL      RSPTECO2                     * position on admission no.
GICD3000  CALL      RKPTECO2                     * read next record
          BRANCH    OVRCD,GICD9999               * eof - finished
.
          MATCH     ADMINO,PTEOADMN              * same admission still ?
          GOTO      GICD9999 IF NOT EQUAL        * no - finished
.
          MATCH     ANSX,PTEOTYPE                * operation type "X" ?
          GOTO      GICD3000 IF EQUAL            * yes - ignore record
.
.         MATCH     PTCNI10D,PTEODTCD            * ICD-9 code ?
.         IF        @LESS
.           PACK      KEY9,PTEOCODE              * yes
.           CALL      RD10T9O1                   * code on file ?
.           BRANCH    OVRCD,GICD3000             * no - ignore record
.
.           MOVE      OICD10CD,PTEOCODE          * load mapped ICD10 op. code
.         ENDIF
.
.         PACK      KEY9,PTEOCODE
.         CALL      RDPT10O1                     * code on file ?
.         BRANCH    OVRCD,GICD3000               * no - ignore record
.
          PACK      KEY9,PTEOCODE
          CALL      RDPTICO1
          BRANCH    OVRCD,GICD3000
.
          COMPARE   ONE,ICDRDVER          * ICD9?
          IF        @EQUAL
            MOVE      OICD10CD,PTEOCODE          * load mapped ICD10 dis. code
          ENDIF
.
          MATCH     PTCNEDRG,PTEOCODE            * dummy code ?
          GOTO      GICD3000 IF EQUAL            * yes - ignore record
.
          ADD       ONE,CODCNT                   * increment code count
          REP       ". - / ",PTEOCODE            * format code
          SQUEEZE   PTEOCODE
          PACK      PTEOCODE,PTEOCODE,SP10
          MOVE      PTEOCODE,OPRARY[CODCNT]      * load code
.
          COMPARE   FIFTY,CODCNT                 * code count < 50 ?
          GOTO      GICD3000 IF LESS             * yes - get next op code
.
GICD9999  RETURN
+
.******************************************************************************
.*                                  WODC0000              Called by: WDMG0000 *
.*                           Write Operation & Disease Codes                  *
.******************************************************************************
.
.         First, write the remaining 49 disease codes
.
WODC0000  MOVE      TWO,CODCNT                   * initialise counter
          REPEAT
            MATCH     "1",PTCNECUP
            IF        @EQUAL
              MOVE      DISARY[CODCNT],KEY6
              WRITE     EXTFILE1,SEQ;KEY6;         * write disease code
            ELSE
              MOVE      DISARY[CODCNT],KEY5
              WRITE     EXTFILE1,SEQ;KEY5; 
            ENDIF
            ADD       ONE,CODCNT                 * increment counter
          UNTIL     CODCNT > 50
.
.         Now write all the operation codes
.
          MOVE      ONE,CODCNT                   * initialise counter
          REPEAT
            MOVE      OPRARY[CODCNT],KEY7
            IF        CODCNT = 50
              WRITE     EXTFILE1,SEQ;KEY7        * write last operation code
            ELSE
              WRITE     EXTFILE1,SEQ;KEY7;       * write operation code
            ENDIF
            ADD       ONE,CODCNT                 * increment counter
          UNTIL     CODCNT > 50
.
WODC9999  RETURN
+           
.******************************************************************************
.*                                  LEAV0000              Called by: WRIT0000 *
.*          Calculate the bed days for leave                                  *
.* Requires: LEAVDATE: Date on leave (ccyymmdd)                               *
.*           RETNDATE: Date returned from leave (ccyymmdd)                    *
.* Returns:  LEAVDAYS: Number of days on leave                                *
.******************************************************************************
.
LEAV0000  MOVE      ZERO,LEAVDAY                 * initialise leave days
.
.         PRINT     *N,"Leave Date: ",LEAVDATE
.         PRINT     *N,"Return Date: ",RETNDATE
.
          MOVE      LEAVDATE,CDYSFDTE            * set from date
          MOVE      RETNDATE,CDYSTDTE            * set to Date
          CALL      CALCDAYS                     * calc no. of days leave
          SUB       ONE,CDYSDAYS
.               
          COMPARE   ZERO,CDYSDAYS                * +ve?
          IF        @LESS | @EQUAL
            MOVE      ZERO,CDYSDAYS         
          ELSE
.
.           If the patient goes on leave on the admission date don't count
.           the day as a leave day
.
.           PACK      KEY8,ADATE,SP10
.           MATCH     KEY8,LEAVDATE
.           IF        @EQUAL
.             SUB       ONE,CDYSDAYS
.           ENDIF
          ENDIF
          ADD       CDYSDAYS,LEAVDAY              * set leave days
          MOVE      SP8,LEAVDATE
          MOVE      SP8,RETNDATE
.
.         PRINT     *N,"Leave Days: ",LEAVDAY
.
LEAV9999  RETURN
+
.*****************************************************************************
.*                              CICU0000               Called by: LACC0000   *
.*               Check if ICU (Critical Care) stay                           *
.* Requires: Successful READ on patcodes using TATYPE (Cat A) or TRBTYP      *
.*           Cat BT                                                          *
.*           INDCATR9 - Indicator 9 from Cat A or Cat BT.                    *
.* Returns : EXIT    0 = Non-ICU stay                                        *
.*                   1 = ICU stay                                            *
.*****************************************************************************
.
CICU0000  TYPE      INDCATR9
          IF        @EQUAL
            MOVE      INDCATR9,FORM1
            COMPARE   EIGHT,FORM1                * valid value (0-7) ?
            GOTO      CICU9100 IF LESS           * yes
          ENDIF
.
          MOVE      ZERO,EXIT                    * set for non-icu stay
          GOTO      CICU9999
.
CICU9100  MOVE      ONE,EXIT                     * set for icu stay
.
CICU9999  RETURN
+
.*****************************************************************************
.*                       XPSG0000                  Called by: WPSG0000       *
.*              Write the remaining PSG segment details and the associated   *
.*              MSG segments                                                 *
.*****************************************************************************
.
XPSG0000  CALL      FTOT0000                     * Format numeric totals
          MATCH     ANSC,KEY1
          IF        @EQUAL
            ADD       FORM12P2,SUBTOTAL          * increment subtotal
          ENDIF
.
          MOVE      KEY9,PSGSEG12                * load TotalChargeAmount
.
.         If we are using the Eclipse 2012 Server Adaptor, and there are
.         theatre charges in one or more of the MSG segments and the PSG
.         segment has a zero charge amount and a non-zero total charge amount,
.         then set the PSG ChargeRaisedCde (PSGSEG03) to "C".
.
          MATCH     "1",PTCNECUP                 * using Eclipse 2012 SA ?
          GOTO      XPSG1000 IF NOT EQUAL        * no
.
          MATCH     "000000000",PSGSEG02         * PSG ChargeAmount zero?
          GOTO      XPSG1000 IF NOT EQUAL        * no
.
          MATCH     "000000000",PSGSEG12         * PSG TotalChargeAmount zero ?
          GOTO      XPSG1000 IF EQUAL            * yes
.
          MOVE      ANSC,PSGSEG03                * set PSG ChargeRaisedCde = "C"
.
.         Load ServiceTime & TheatreMins.
.         First, see if there is a theatre time on patmmbsf.
.
XPSG1000  PACK      KEY11,ADMINO,SP10
          CALL      RDSMMBS1                     * position on admission no.
XPSG4500  CALL      RDKMMBS1                     * read next record
          BRANCH    OVRCD,XPSG5000               * eof - finished
.
          MATCH     ADMINO,MMADMN                * same admission still ?
          GOTO      XPSG5000 IF NOT EQUAL        * no - finished
.
          MATCH     SAVEITEM,MMCODE              * same item number ?
          GOTO      XPSG4500 IF NOT EQUAL        * no - get next record
.
          MATCH     SAVEUNIQ,PTMMOPID            * same unique id ? (CAR 315167)
          GOTO      XPSG4500 IF NOT EQUAL        * no - get next record
.
          MOVE      MMSTIM,STRTTME               * load opr. start time
          MOVE      MMETIM,ENDTME                * load opr. end time
          MATCH     SP5,MMSTIM                   * start time blank ?
          IF        !@EQUAL
            MOVE      MMSTIM,DIM5
            REP       ": ",DIM5
            SQUEEZE   DIM5
            MOVE      DIM5,PSGSEG07              * no - use as service date
          ENDIF
.
          CALL      CTIM0000                     * Calculate theatre time
          COMPARE   ONE,EXIT                     * valid theatre time ?
          GOTO      XPSG6000 IF NOT EQUAL        * yes
.
.         No theatre time on patmmbsf, so check if there is one on patecoaf
.
XPSG5000  PACK      KEY16,ADMINO,SP20                                 *C-240107
          CALL      RSPTECO2                     * position on admission no.
XPSG5500  CALL      RKPTECO2                     * read next record
          BRANCH    OVRCD,XPSG6000               * eof - finished
.
          MATCH     ADMINO,PTEOADMN              * same admission still ?
          GOTO      XPSG6000 IF NOT EQUAL        * no - finished
.
          MATCH     SAVEITEM,PTEOCODE            * same item number ?
          GOTO      XPSG5500 IF NOT EQUAL        * no - get next record
.
          MOVE      PTEOSTTM,STRTTME             * load start time
          MOVE      PTEOEDTM,ENDTME              * load end time
.
          MATCH     SP5,PTEOSTTM                 * blank start time ?
          IF        !@EQUAL
            MOVE      PTEOSTTM,DIM5
            REP       ": ",DIM5
            SQUEEZE   DIM5
            MOVE      DIM5,PSGSEG07              * no - use as service date
          ENDIF
.
          CALL      CTIM0000                     * calculate theatre time
.
XPSG6000  REP       " 0",PSGSEG07
          IF        FORM4 = 0
            MOVE      "PSG.04-Warning: ADM type: ",ERRMSG
            PACK      ERRMSG,ERRMSG,ATYPE
            ENDSET    ERRMSG
            APPEND    " : No time in theatre or procedure room",ERRMSG
            RESET     ERRMSG
            CALL      PWRN0000
          ENDIF
.
          MOVE      FORM4,PSGSEG11               * theatre mins
          REP       " 0",PSGSEG11
.
.         Load AnaestheticTypeCode
.         This is only mandatory if SameDayCode is "0" (sameday overnight)
.         or "1" (sameday).
.         If not using theatre, then determine AnaestheticTypeCode using
.         PMVXUD15, otherwise use OPDAANAE.
.
          MOVE      SP1,TCINDC1
          IF        CTHETR <> 1
            MOVE      PMVXUD15,CODEOA            * not using theatre system
            GOTO      XPSG7100
          ENDIF
.
          PACK      KEY31,ADMINO,SP30            * using theatre system
          CALL      RSOPDEA2                     * position on admission no.
XPSG7000  CALL      RKOPDEA2                     * read next record
          BRANCH    OVRCD,XPSG8000               * eof - finished
.
          MOVE      ADMINO,CKYIDEF8
          MATCH     CKYIDEF8,OPDAADMN            * same admission still ?
          GOTO      XPSG8000 IF NOT EQUAL        * no - finished
.
          MATCH     "3",DOPDASTA
          GOTO      XPSG7000 IF EQUAL
.
          MOVE      OPDAANAE,CODEOA
.
XPSG7100  MATCH     SP3,CODEOA                   * anaesthetic code blank ?
          IF        @EQUAL
            IF        SAVSAMED <> 2
              MOVE      "PSG.05-Anaesthetic Type code (Cat OA) is blank",ERRMSG
              CALL      PERR0000
            ENDIF
            GOTO      XPSG8000
          ENDIF
.
          PACK      KEY5,ANSO,ANSA,CODEOA        * no
          CALL      RDCODE1                      * code on file ?
          IF        OVRCD = 1
            IF        SAVSAMED <> 2
              MOVE      "PSG.06-Anaesthetic Type code (",ERRMSG
              ENDSET    ERRMSG
              APPEND    CODEOA,ERRMSG
              APPEND    " - Cat OA) not found",ERRMSG
              RESET     ERRMSG
              CALL      PERR0000
            ELSE
              MOVE      SP1,TCINDC1
              MOVE      "PSG.07-Warning: Anaesthetic Type code (",ERRMSG
              ENDSET    ERRMSG
              APPEND    CODEOA,ERRMSG
              APPEND    " - Cat OA) not found",ERRMSG
              RESET     ERRMSG
              CALL      PWRN0000
            ENDIF
            GOTO      XPSG8000
          ENDIF
.
          TYPE      TCINDC1                      * numeric indicator 1 ?
          IF        !@EQUAL
            IF        SAVSAMED <> 2
              MOVE      "PSG.08-Anaesthetic Type code (",ERRMSG
              ENDSET    ERRMSG
              APPEND    CODEOA,ERRMSG
              APPEND    " - Cat OA, Ind. 1) not numeric",ERRMSG
              RESET     ERRMSG
              CALL      PERR0000
            ELSE
              MOVE      SP1,TCINDC1
              MOVE      "PSG.09-Warning: Anaesthetic Type code (",ERRMSG
              ENDSET    ERRMSG
              APPEND    CODEOA,ERRMSG
              APPEND    " - Cat OA, Ind. 1) not numeric",ERRMSG
              RESET     ERRMSG
              CALL      PWRN0000
            ENDIF
            GOTO      XPSG8000
          ENDIF
.
          MOVE      ZERO,FORM1                   * yes
          MOVE      TCINDC1,FORM1
          BRANCH    FORM1,XPSG8000:              * local
                          XPSG8000:              * general
                          XPSG8000:              * regional
                          XPSG8000:              * intravenous
                          XPSG8000               * no anaesthetic
.
          IF        SAVSAMED <> 2
            MOVE      "PSG.10-Anaesthetic Type code (",ERRMSG
            ENDSET    ERRMSG
            APPEND    CODEOA,ERRMSG
            APPEND    " - Cat OA, Ind. 1) not valid",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
          ELSE
            MOVE      SP1,TCINDC1
            MOVE      "PSG.11-Warning: Anaesthetic Type code (",ERRMSG
            ENDSET    ERRMSG
            APPEND    CODEOA,ERRMSG
            APPEND    " - Cat OA, Ind. 1) not valid",ERRMSG
            RESET     ERRMSG
            CALL      PWRN0000
          ENDIF
.
XPSG8000  BRANCH    VALDFLG,XPSG9000             * validation only
.
          MOVE      TCINDC1,PSGSEG01
          REP       "1L2G3R4I5N N",PSGSEG01
.
          WRITE     EXTFILE1,SEQ;TILDA01,ANSP,ANSS,ANSG:
                                 PSGSEG01,PSGSEG02,PSGSEG03,PSGSEG04,PSGSEG05:
                                 PSGSEG06,PSGSEG07,PSGSEG08,PSGSEG09,PSGSEG10:
                                 PSGSEG11,PSGSEG12
.
.         We have completed writing the PSG segment, so now write all the
.         MSG records in the temporary file (as all are related to this PSG).
.
XPSG9000  CALL      WMSG0000                     * write secondary procedures
.
XPSG9999  RETURN
+
.******************************************************************************
.*                                  GMSG0000              Called by: WPSG0000 *
.*            Get the MSG data relating to the current theatre date           *
.*            and write it to the temp file                                   *
.******************************************************************************
.
GMSG0000  ADD       TPATAMTT,FORM12P2            * increm. for TotalChargeAmount
          IF        IBCNUGST=2
            ADD       PTDTGSTM,FORM12P2          * add GST amount
          ENDIF
.
          ADD       ONE,MSGCOUNT                 * increment MSG record count
          MOVE      MSGCOUNT,TMPSEQNO            * load sequence number
          MOVE      TITEMNO,TMPITEMN             * load item number
          MOVE      TPATAMTT,TMPAMNT             * load item amount
          IF        IBCNUGST=2
            ADD       PTDTGSTM,TMPAMNT           * add GST amount
          ENDIF
.
          MOVE      PTDTUNIQ,TMPUNQID            * save unique theatre id
          PACK      TMPSDATE,TFCENT,TFYEAR,TFMONTH,TFDAY,SP70
          REP       " 0",TMPSDATE
.
          CALL      WRTEMP2                      * write MSG tempfile record
.
GMSG9999  RETURN
+
.******************************************************************************
.*                                  CMSG0000              Called by: WPSG0000 *
.*           Clear all MSG items from the temporary file                      *
.******************************************************************************
.
CMSG0000  MOVE      SP5,KEY5
          CALL      RSTEMP2                      * position at start of file
          CALL      RKTEMP2                      * read next record
          BRANCH    OVRCD,CMSG9999               * eof - finished
.
          PACK      KEY5,TMPSEQNO
          CALL      DETEMP2                      * delete record
          GOTO      CMSG0000                     * get next record
.
CMSG9999  RETURN
+
.*****************************************************************************
.*                          RPOS0000               Called by: WCID0000       *
.*        Reposition on original pmsectaf record to restore the fields       *
.*****************************************************************************
.
RPOS0000  MOVE      SAVKEY35,KEY35
          CALL      RDPMECT1
.
RPOS9999  RETURN
+
.*****************************************************************************
.*                             VPRN0000            Called by: WCID0000       *
.*                Validate the provider no                    SATR0000       *
.* Requires: DIM8 - Provider  number                          SDTR0000       *
.*           PROVFLAG - Type of provider                      WCER0000       *
.*                          1 = Hospital facility                            *
.*                          2 = Admission Source facility                    *
.*                          3 = Discharge Source facility                    *
.*                          4 = Certifying Doctor                            *
.*           PLVCARRY - PLV character array                                  *
.*           PLVNARRY - PLV numeric array                                    *
.* Returns:  EXIT   0 = valid provider no                                    *
.*                  1 = invalid provider no                                  *
.*****************************************************************************
.
VPRN0000  COMPARE   FOUR,PROVFLAG                * doctor provider ?
          GOTO      VPRN0500 IF EQUAL            * yes - check already done
.
          MATCH     SP8,DIM8                     * blank provider number ?
          IF        @EQUAL
            IF        PROVFLAG = 1
              MOVE      "CID.05-Hospital ",ERRMSG
              ENDSET    ERRMSG
            ELSE
              IF        PROVFLAG = 2
                MOVE      "TFR.03-Admission transfer source (",ERRMSG
                ENDSET    ERRMSG
                APPEND    PTDAADTS,ERRMSG
                APPEND    ") ",ERRMSG
              ELSE
                MOVE      "TFR.04-Discharge transfer source (",ERRMSG
                ENDSET    ERRMSG
                APPEND    PTDADCTS,ERRMSG
                APPEND    ") ",ERRMSG
              ENDIF
            ENDIF
            APPEND    "provider no. is blank",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      VPRN9100
          ENDIF
.
.         Validate the provider number.
.         First make sure it is 8 characters in length.
.
VPRN0500  STRIP     DIM8
          MOVELPTR  DIM8,FORM1
          IF        FORM1 <> 8
            IF        PROVFLAG = 1
              MOVE      "CID.06-Hospital ",ERRMSG
              ENDSET    ERRMSG
            ELSE
              IF        PROVFLAG = 2
                MOVE      "TFR.05-Admission transfer source (",ERRMSG
                ENDSET    ERRMSG
                APPEND    PTDAADTS,ERRMSG
                APPEND    ") ",ERRMSG
              ELSE
                IF        PROVFLAG = 3
                  MOVE      "TFR.06-Discharge transfer source (",ERRMSG
                  ENDSET    ERRMSG
                  APPEND    PTDADCTS,ERRMSG
                  APPEND    ") ",ERRMSG
                ELSE
                  MOVE      "CER.09-Certifying doctor (",ERRMSG
                  ENDSET    ERRMSG
                  APPEND    PTCEDCOD,ERRMSG
                  APPEND    ") ",ERRMSG
                ENDIF
              ENDIF
            ENDIF
            APPEND    "provider no. is incorrect length",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      VPRN9100
          ENDIF
.
.         Check that the first 6 characters are numeric for a doctor provider,
.         or the first 7 characters are numeric for a facility provider.
.>>>>     At this stage we are assuming that the seventh digit is always numeric
.         for hospitals.  Need to check this with Pip.
.
          COMPARE   FOUR,PROVFLAG                * doctor provider ?
          IF        @EQUAL
            UNPACK    DIM8,DIM6,DIM2             * yes
            TYPE      DIM6
            IF        !@EQUAL
              MOVE      "CER.10-Certifying Doctor (",ERRMSG
              ENDSET    ERRMSG
              APPEND    PTCEDCOD,ERRMSG
              APPEND    ") provider no. does not have 6 digits",ERRMSG
              RESET     ERRMSG
              CALL      PERR0000
              GOTO      VPRN9100
            ELSE
              GOTO      VPRN0600
            ENDIF
          ENDIF
.
          UNPACK    DIM8,DIM7,DIM1
          TYPE      DIM7
          IF        !@EQUAL
            IF        PROVFLAG = 1
              MOVE      "CID.07-Hospital ",ERRMSG
              ENDSET    ERRMSG
            ELSE
              IF        PROVFLAG = 2
                MOVE      "TFR.07-Admission transfer source (",ERRMSG
                ENDSET    ERRMSG
                APPEND    PTDAADTS,ERRMSG
                APPEND    ") ",ERRMSG
              ELSE
                MOVE      "TFR.08-Discharge transfer source (",ERRMSG
                ENDSET    ERRMSG
                APPEND    PTDADCTS,ERRMSG
                APPEND    ") ",ERRMSG
              ENDIF
            ENDIF
            APPEND    "provider no. does not have 7 digits",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      VPRN9100
          ENDIF
.
.         Validate the check digit.
.         The algorithm used for the Provider Check Digit is:
.                   (digit 1 * 3) +
.                   (digit 2 * 5) +
.                   (digit 3 * 8) +
.                   (digit 4 * 4) +
.                   (digit 5 * 2) +
.                   (digit 6) +
.                   (PLV * 6)
.                   Divide the result by 11
.
.         The Practice Location Character (PLV) indicates the order of the
.         practices that a provider has been registered at. Each Practice
.         Location Character is allocated a Practice Location Value (PLV) that
.         is used in the Provider Check Digit Routine.  The values are below:
.
.                   Character  Value  Character  Value  
.                       0        0        G        16 
.                       1        1        H        17 
.                       2        2        J        18 
.                       3        3        K        19 
.                       4        4        L        20 
.                       5        5        M        21 
.                       6        6        N        22 
.                       7        7        P        23 
.                       8        8        Q        24 
.                       9        9        R        25 
.                       A        10       T        26 
.                       B        11       U        27 
.                       C        12       V        28 
.                       D        13       W        29 
.                       E        14       X        30 
.                       F        15       Y        31 
.
.         The remainder is allocated an alpha that is the provider check digit
.         (See table below for details). 
.               Remainder  Check-digit  
.                   0          Y  
.                   1          X  
.                   2          W  
.                   3          T  
.                   4          L  
.                   5          K  
.                   6          J  
.                   7          H  
.                   8          F  
.                   9          B  
.                  10          A  
.
.         Calculate the Practice Location Character (PLV).
.         If the seventh character in the provider number is a numeric, then
.         the PLV will equal the value of the seventh character.
.         If the seventh character in the provider number is not numeric, then
.         determine the PLV based on the table above.
.
VPRN0600  UNPACK    DIM8,PROVARRY[1],PROVARRY[2],PROVARRY[3],PROVARRY[4]:
                         PROVARRY[5],PROVARRY[6],PROVARRY[7],PROVARRY[8]  
.
          MOVE      ZERO,FORM1
          WHILE     FORM1 < 7
            ADD       ONE,FORM1
            MOVE      PROVARRY[FORM1],PRVNARRY[FORM1]
          DO
.
          TYPE      PROVARRY[7]                  * seventh char. numeric ?
          GOTO      VPRN0700 IF EQUAL            * yes
.
          MOVE      ZERO,FORM2
          WHILE     FORM2 < 22
            ADD       ONE,FORM2
            MATCH     PROVARRY[7],PLVCARRY[FORM2] * 7th character match ?
            IF        @EQUAL
              MOVE      PLVNARRY[FORM2],PRVNARRY[7]  * yes - load value
              GOTO      VPRN0700
            ENDIF
          DO
.
VPRN0700  MOVE      ZERO,FORM4                   * initialise total
          MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 8
            MOVE      PRVNARRY[COUNTER],FORM2
            BRANCH    COUNTER,VPRN1000:
                              VPRN2000:
                              VPRN3000:
                              VPRN4000:
                              VPRN5000:
                              VPRN6000:
                              VPRN7000
.
VPRN1000    ASSIGN    ((FORM2*3) + FORM4),FORM4
            GOTO      VPRN8000
.
VPRN2000    ASSIGN    ((FORM2*5) + FORM4),FORM4
            GOTO      VPRN8000
.
VPRN3000    ASSIGN    ((FORM2*8) + FORM4),FORM4
            GOTO      VPRN8000
.
VPRN4000    ASSIGN    ((FORM2*4) + FORM4),FORM4
            GOTO      VPRN8000
.
VPRN5000    ASSIGN    ((FORM2*2) + FORM4),FORM4
            GOTO      VPRN8000
.
VPRN6000    ASSIGN    (FORM2 + FORM4),FORM4
            GOTO      VPRN8000
.
VPRN7000    ASSIGN    ((FORM2*6) + FORM4),FORM4
.
VPRN8000    ADD       ONE,COUNTER                * increment FP counter
          DO
.
          ASSIGN    (FORM4%11),FORM2             * remainder when divided by 11
          MOVE      ANSY,ANS                     * set default check digit
          LOAD      ANS,FORM2,ANSX,ANSW,ANST,ANSL,ANSK,ANSJ,ANSH,ANSF,ANSB,ANSA
.
          MATCH     ANS,PROVARRY[8]
          IF        !@EQUAL
            IF        PROVFLAG = 1
              MOVE      "CID.08-Hospital ",ERRMSG
              ENDSET    ERRMSG
            ELSE
              IF        PROVFLAG = 2
                MOVE      "TFR.09-Admission transfer source (",ERRMSG
                ENDSET    ERRMSG
                APPEND    PTDAADTS,ERRMSG
                APPEND    ") ",ERRMSG
              ELSE
                IF        PROVFLAG = 3
                  MOVE      "TFR.10-Discharge transfer source (",ERRMSG
                  ENDSET    ERRMSG
                  APPEND    PTDADCTS,ERRMSG
                  APPEND    ") ",ERRMSG
                ELSE
                  MOVE      "CER.11-Certifying Doctor (",ERRMSG
                  ENDSET    ERRMSG
                  APPEND    PTCEDCOD,ERRMSG
                  APPEND    ") ",ERRMSG
                ENDIF
              ENDIF
            ENDIF
            APPEND    "provider no. check digit not valid",ERRMSG
            RESET     ERRMSG
            CALL      PERR0000
            GOTO      VPRN9100
          ENDIF
.
          MOVE      ZERO,EXIT
          GOTO      VPRN9999
.
VPRN9100  MOVE      ONE,EXIT
.
VPRN9999  RETURN
+
.*****************************************************************************
.*                               LARY0000          Called by: INIT0000       *
.*          Load the array variables for the provider number PLV's           *
.*****************************************************************************
.
.         Load the characters used in the seventh position of the
.         provider number
.
LARY0000  MOVE      ANSA,PLVCARRY[1]
          MOVE      ANSB,PLVCARRY[2]
          MOVE      ANSC,PLVCARRY[3]
          MOVE      ANSD,PLVCARRY[4]
          MOVE      ANSE,PLVCARRY[5]
          MOVE      ANSF,PLVCARRY[6]
          MOVE      ANSG,PLVCARRY[7]
          MOVE      ANSH,PLVCARRY[8]
          MOVE      ANSJ,PLVCARRY[9]
          MOVE      ANSK,PLVCARRY[10]
          MOVE      ANSL,PLVCARRY[11]
          MOVE      ANSM,PLVCARRY[12]
          MOVE      ANSN,PLVCARRY[13]
          MOVE      ANSP,PLVCARRY[14]
          MOVE      ANSQ,PLVCARRY[15]
          MOVE      ANSR,PLVCARRY[16]
          MOVE      ANST,PLVCARRY[17]
          MOVE      ANSU,PLVCARRY[18]
          MOVE      ANSV,PLVCARRY[19]
          MOVE      ANSW,PLVCARRY[20]
          MOVE      ANSX,PLVCARRY[21]
          MOVE      ANSY,PLVCARRY[22]
.
.         Load the corresponding numbers associated with the characters
.         used in the seventh position of the provider number
.
          MOVE      TEN,PLVNARRY[1]
          MOVE      TEN1,PLVNARRY[2]
          MOVE      TEN2,PLVNARRY[3]
          MOVE      TEN3,PLVNARRY[4]
          MOVE      TEN4,PLVNARRY[5]
          MOVE      TEN5,PLVNARRY[6]
          MOVE      TEN6,PLVNARRY[7]
          MOVE      TEN7,PLVNARRY[8]
          MOVE      TEN8,PLVNARRY[9]
          MOVE      TEN9,PLVNARRY[10]
          MOVE      TWENTY,PLVNARRY[11]
          MOVE      TWENTY1,PLVNARRY[12]
          MOVE      TWENTY2,PLVNARRY[13]
          MOVE      TWENTY3,PLVNARRY[14]
          MOVE      TWENTY4,PLVNARRY[15]
          MOVE      TWENTY5,PLVNARRY[16]
          MOVE      TWENTY6,PLVNARRY[17]
          MOVE      TWENTY7,PLVNARRY[18]
          MOVE      TWENTY8,PLVNARRY[19]
          MOVE      TWENTY9,PLVNARRY[20]
          MOVE      THIRTY,PLVNARRY[21]
          MOVE      THIRTY1,PLVNARRY[22]
.
LARY9999  RETURN
+
.*****************************************************************************
.*                            FDAT0000             Called by: VALD0000       *
.*                                                            WRIT0000       *
.*        Get the fromdate for the invoice, as well as loading the           *
.*        ContiguousClaimCde field for the CID segment.                      *
.* Requires: LISTADMN - admission number                                     *
.*           LISTINVN - invoice number                                       *
.*           ADATE - From valid read on patmissf                             *
.* Returns:  INVFRDTE - invoice from date                                    *
.*           CIDSEG04 - ContiguousClaimCde                                   *
.*****************************************************************************
.
.         Loop through the invoice file for invoices for this admission no. to
.         determine whether this is a contiguous claim or not.
.
.         The following logic applies:
.         One invoice (discharged), set to "N"
.         One invoice (not discharged), set to "F"
.         First of two or more invoices, set to "F"
.         Last of two or more invoices (discharged), set to "L"
.         Last of two or more invoices (not discharged), set to "M"
.         Not first or last of more than two invoices, set to "M"
.
FDAT0000  MOVE      SP8,PREVINVN            * initialise previous invoice no.
          MOVE      SP8,INVFRDTE            * initialise invoice from date
          MOVE      SP8,SAVINVNO            * initialise saved invoice no.
          MOVE      SP8,SAVINVDT            * initialise saved invoice date
          MOVE      SP8,PREVDATE            * initialise previous invoice date
          MOVE      ZERO,CURNTINV           * initialise current inv. for admiss
          MOVE      ZERO,INVCOUNT           * initialise inv. count for admiss.
          MOVE      ANSN,CIDSEG04           * Default invoice to not in series
.
          PACK      KEY16,LISTADMN,SP20
          CALL      RDSINV3                      * position on admission no.
FDAT0500  CALL      RDKINV3                      * read next record
          BRANCH    OVRCD,FDAT1000               * eof - finished looping
.
          MATCH     LISTADMN,PINVADM                * same admission still ?
          GOTO      FDAT1000 IF NOT EQUAL        * no - finished looping
.
.         Make sure the invoice is not a "Credit All" invoice
.
          MATCH     "1",PTINCRST                 * Credit All ?
          GOTO      FDAT0500 IF EQUAL            * yes - ignore
.
.         Make sure the Invoice in not a Patient Portion Invoice       *I-82516
.
          COMPARE   TWO,PINVTYP                                        *I-82516
          GOTO      FDAT0500 IF EQUAL       * bypass it if it is.      *I-82516
.
.         Make sure that the invoice was raised electronically (exists on
.         pmsectaf)
.
          PACK      KEY16,PINVNO,SP20
          CALL      RDPMECT2
          IF        OVRCD = 1
            CALL      RKPMECT2                   * read next record
            BRANCH    OVRCD,FDAT0500             * eof - not electronic invoice
          ENDIF
.
          MATCH     PINVNO,PMECINVN              * same invoice still ?
          GOTO      FDAT0500 IF NOT EQUAL        * no - not electronic invoice
.
.         An invoice for the admission has been found.
.         Check if this is the same invoice that we are currently processing.
.         If so, save the counter for the invoice position. We also need to
.         save the previous invoice number in case this is a contiguous claim
.         which is either "M"iddle or "L"ast.
.
          ADD       ONE,INVCOUNT                 * increment invoice counter
          MATCH     LISTINVN,PINVNO              * same invoice number ?
          IF        @EQUAL
            MOVE      INVCOUNT,CURNTINV          * yes
            MOVE      SAVINVNO,PREVINVN          * save the previous invoice no.
            MOVE      SAVINVDT,PREVDATE          * save the previous inv. date
          ENDIF
          MOVE      PINVNO,SAVINVNO              * save new invoice number
          MOVE      PINVDTE,SAVINVDT             * save new invoice date
.
          GOTO      FDAT0500                     * get next invoice record
.
.         All the invoice records for the admission have been read, so now
.         determine where the current invoice lies relative to any other
.         invoices for the admission.
.
FDAT1000  IF        INVCOUNT = 1 & CURNTINV = 1
            IF        ASTAT = 3
              MOVE      ANSN,CIDSEG04            * one invoice, discharged
            ELSE
              MOVE      ANSF,CIDSEG04            * one invoice, not discharged
            ENDIF
            GOTO      FDAT9000
          ENDIF
.
.         If there is more than one invoice for the admission, and the current
.         invoice is the first, then set as "F"irst
.
          IF        (CURNTINV = 1) & (INVCOUNT >= 2)
            MOVE      ANSF,CIDSEG04
            GOTO      FDAT9000
          ENDIF
.
.         If there is more than one invoice for the admission, and the current
.         invoice is the last, then set as "M"iddle or ""L"ast according
.         to discharge status
.
          IF        (INVCOUNT >= 2) & (CURNTINV = INVCOUNT)
            IF        ASTAT = 3
              MOVE      ANSL,CIDSEG04            * last invoice, discharged
            ELSE
              MOVE      ANSM,CIDSEG04            * last invoice, not discharged
            ENDIF
            GOTO      FDAT9000
          ENDIF
.
.         If the current invoice is not the first or the last invoice for the
.         admission, then set to "M"iddle
.
          IF      (CURNTINV > 1) & (CURNTINV < INVCOUNT)
            MOVE      ANSM,CIDSEG04              * middle invoice
          ENDIF
.
.         Re-read the current invoice and pmsectaf records
.
FDAT9000  MOVE      LISTINVN,KEY8
          CALL      RDINV1
.
          CALL      RPOS0000
.
          MATCH     SP8,PREVDATE
          IF        @EQUAL
            MOVE      ADATE,INVFRDTE
          ELSE
            MOVE      PREVDATE,INVFRDTE
          ENDIF
.
FDAT9999  RETURN
+
.*****************************************************************************
.*                          VACS0000               Called by: VALD0000       *
.*       Validate that the ACS segment is consistent with     WRIT0000       *
.*       the ACD, CCG and LPD segments                                       *
.*****************************************************************************
.
VACS0000  COMPARE   ZERO,ACSCOUNT                * ACS record written ?
          GOTO      VACS5000 IF EQUAL            * no
.
.         There was an ACS record written for this invoice, so make sure that
.         there is at least one ACD, CCG or LPD record
.
          IF        (ACCCOUNT + LPDCOUNT) = 0
            MOVE      "GEN.08-ACS record without ACD, CCG or LPD record",ERRMSG
            CALL      PERR0000
          ENDIF
          GOTO      VACS9999
.
.         There was no ASC record written for this invoice, so make sure that
.         there are no ACD, CCG or LPD records
.
VACS5000  IF        (ACCCOUNT + LPDCOUNT) > 0
            MOVE      "GEN.09-ACS record missing",ERRMSG
            CALL      PERR0000
          ENDIF
.
VACS9999  RETURN
+
.*****************************************************************************
.*                              CONC0000           Called by: WPAT0000       *
.*     See if the patient has concession card of DVA type on file            *
.* Requires: PURNO - U/R number                                              *
.* Returns:  EXIT  0 = valid concession card found                           *
.*                 1 = no valid concession card found                        *
.*           DIM20 - Concession Card Number                                  *
.*****************************************************************************
.
CONC0000  MOVE      SP20,DIM20                   * init. conc card number
.
          PACK      KEY19,PURNO,TILDA40
          CALL      RSPMCCD1                     * position on U/R
CONC0500  CALL      RPPMCCD1                     * read previous record
          BRANCH    OVRCD,CONC9100               * eof - nothing found
.
          MATCH     PURNO,PMCDURNO               * same U/R still ?
          GOTO      CONC9100 IF NOT EQUAL        * no - nothing found
.
.         Check if the card type is DVA or Pension (Cat ct, Indicator 1
.
          PACK      KEY5,CATCT,PMCDCTYP
          CALL      RDCODE1                      * code on file ?
          BRANCH    OVRCD,CONC0500               * no - ignore record
.
          MATCH     SP1,TCINDC1                  * blank indicator 1 ?
          GOTO      CONC0500 IF EQUAL            * yes - ignore record
.
          TYPE      TCINDC1                      * numeric indicator 1 
          GOTO      CONC0500 IF NOT EQUAL        * no - ignore record
.
          MATCH     "3",TCINDC1                  * DVA card type ?
          GOTO      CONC0500 IF NOT EQUAL        * no - ignore record
.
.         A DVA concession card has been found, so check
.         if there is an expiry date
.
          MATCH     SP8,PMCDEXDT                 * expiry date blank ?
          GOTO      CONC1000 IF EQUAL            * yes - assume valid
.
.         There is an expiry date for the card, so check that the
.         card is current
.
          CALL      IBACLOCK
          PACK      DIM8,CCC,CYY,CMM,CDD
          REP       " 0",DIM8
.
          MATCH     DIM8,PMCDEXDT                * card valid for date ?
          GOTO      CONC9100 IF LESS             * no - nothing found
.
.         Concession card is current
.
CONC1000  MATCH     SP20,PMCDCNUM                * card number blank ?
          GOTO      CONC9100 IF EQUAL            * yes - nothing found
.
          MOVE      PMCDCNUM,DIM20               * load concession card number
.
          SQUEEZE   DIM20
          PACK      DIM20,DIM20,SP70
.
          MOVE      ZERO,EXIT
          GOTO      CONC9999
.
CONC9100  MOVE      ONE,EXIT
.
CONC9999  RETURN
+
.*****************************************************************************
.*                           GGST0000              Called by: LACC0000       *
.*                      Get the GST rate                                     *
.* Returns: IBGEAMNT - GST precentage                                        *
.*****************************************************************************
.
GGST0000  COMPARE  ZERO,PTDTGSTM                 * GST amount present ?
          GOTO     GGST9000 IF EQUAL             * no - finished
.
          MATCH    SP6,PTDTGSTC                  * blank GST code ?
          GOTO     GGST9000 IF EQUAL             * yes
.
          MOVE     PINVDTE,KEY8
          REP      " 0",KEY8
.
          PACK     KEY14,PTDTGSTC,KEY8
          CALL     RDIBGE1                       * GST rate found for curr date?
          COMPARE  ZERO,OVRCD
          GOTO     GGST9999 IF EQUAL             * yes - finished
.
          CALL     RPIBGE1                       * no - read previous record
          BRANCH   OVRCD,GGST9000                * no - GST record found
.
          MATCH    PTDTGSTC,IBGECODE             * same code ?
          GOTO     GGST9999 IF EQUAL
.
GGST9000  MOVE     ZERO,IBGEAMNT                 * default to 0% GST
.
GGST9999  RETURN
+
.*****************************************************************************
.*                            WACC0000             Called by: WRIT0000       *
.*     Loop through the tempfile with all the ACD and CCG records            *
.*     and write all the ACD and CCG accommodation segments.                 *
.*****************************************************************************
.
WACC0000  MOVE      ZERO,FORM4                   * initialise mv days
.
.         Check if there are sequential Medical/Advanced Medical ACD
.         records with subsequent Surgical/Advanced Surgical/Obstetrics ACD
.         records, and if so, change the service code in the Medical/Advanced
.         Medical records to the ICD code instead of the CMBS code.
.         Note: This check only applies to Health Fund claims, NOT DVA Claims.
.
WACC2000  COMPARE   TWO,OPTION                   * DVA claims extract ?
          GOTO      WACC8000 IF EQUAL            * yes - write ACD/CCG segments
.
          MOVE      SP2,SAVEPCCD                 * initialise save variable
.
          MOVE      TILDA40,KEY10
          CALL      RSTEMP4                      * pos'n at end of ACD//CCG recs
WACC2500  CALL      RPTEMP4                      * read previous record
          BRANCH    OVRCD,WACC8000               * eof - finished check
.
          MATCH     SAVEPCCD,ACDCCG11            * same Patient Classification ?
          GOTO      WACC2500 IF EQUAL            * yes - get previous record
.
          MATCH     SP3,SAVEPCCD                 * no - first record ?
          IF        @EQUAL
            MOVE      ACDCCG11,SAVEPCCD          * yes - save Patient Class'n
            GOTO      WACC2500                   * get previous record
          ENDIF
.
.         This record has a different patient classification, so
.         check if the current record is classification Medical or Advanced
.         Medical
.
          MATCH     ACDCCG11,CATME               * Medical classification ?
          IF        !@EQUAL
            MATCH     ACDCCG11,CATAM             * no - Adv. Medical class'n ?
            IF        !@EQUAL
              MOVE      ACDCCG11,SAVEPCCD        * no - save new pt. class'n
              GOTO      WACC2500                 * get previous record
            ENDIF
          ENDIF
.
.         We have a Medical or Advanced Medical classification, so check
.         if the next record was either Surgical, Advanced Surgical or
.         Obstetrics
.
          MATCH     SAVEPCCD,CATSU               * Surgical classification ?
          GOTO      WACC3000 IF EQUAL            * yes
.
          MATCH     SAVEPCCD,CATAS               * Adv. Surg. classification ?
          GOTO      WACC3000 IF EQUAL            * yes
.
          MATCH     SAVEPCCD,CATOB               * Obstetrics classification ?
          GOTO      WACC3000 IF EQUAL            * yes
.
.         The pt. classification has changed to Medical or Advanced Medical,
.         but not from Surgical, Advanced Surgical or Obstetrics.
.
          MOVE      ACDCCG11,SAVEPCCD            * save new pt. class'n
          GOTO      WACC2500                     * get next record
.
.         We have a Medical or Advanced Medical classification record where
.         the next record was Surgical, Advanced Surgical or Obstetrics.  So
.         we need to update the Medical record to use the ICD code as the
.         service code.  We only need to do this if the charge is per diem,
.         otherwise, we still need to use the casepayment code.
.
WACC3000  MATCH     SP11,ACDCCG18                * ICD code blank ?
          GOTO      WACC4000 IF EQUAL            * yes
.
          COMPARE   ZERO,ACDCCG19                * per diem ?
          GOTO      WACC4000 IF NOT EQUAL        * no
.
          MOVE      ACDCCG18,ACDCCG13            * load ICD code
          MOVE      ANSI,ACDCCG14                * load ICD code type
          CALL      UPTEMP4                      * update record
.
.         Now make the same change in any sequential Medical/Advanced Medical
.         records prior to this record.
.
WACC4000  CALL      RPTEMP4                      * read previous record
          BRANCH    OVRCD,WACC8000               * eof - finished check
.
          MATCH     ACDCCG11,CATME               * Medical classification ?
          IF        !@EQUAL
            MATCH     ACDCCG11,CATAM             * no - Adv. Medical class'n ?
            GOTO      WACC8000 IF NOT EQUAL      * no - finished check
          ENDIF
.
          GOTO      WACC3000
.
.         Now write each ACD/CCG record to the extract file
.
WACC8000  MOVE      SP20,DIM11                   * initialise previous item
          MOVE      SP1,DIM1                     * initialise previous type
.
          MOVE      SP10,KEY10
          CALL      RSTEMP3                      * position at start of file
WACC8500  CALL      RKTEMP3                      * read next record
          BRANCH    OVRCD,WACC9999               * eof - finished
.
.         Change date from ccyymmdd format to ddmmccyy for extract
.
          UNPACK    ACDCCG09,CCENT,CYEAR,CMON,CDAY
          PACK      ACDCCG09,CDAY,CMON,CCENT,CYEAR         * set FromDate
          UNPACK    ACDCCG15,CCENT,CYEAR,CMON,CDAY
          PACK      ACDCCG15,CDAY,CMON,CCENT,CYEAR         * set ToDate
.
.         Check to see if there was a service code/type for the item.  If not,
.         then use the item from the previous accommodation record.
.
          MATCH     SP11,ACDCCG13                * blank service code ?
          GOTO      WACC8700 IF NOT EQUAL        * no
.
.          MATCH     SP11,DIM11                   * yes - previous item blank ?
.          GOTO      WACC8600 IF NOT EQUAL        * no
..
.          MATCH     ANSA,ACDCCG01
.          IF        @EQUAL
.            MOVE      "ACD.06-CMBS Item not found for surgical/obstetric patient",ERRMSG
.          ELSE
.            MOVE      "CCG.07-CMBS Item not found for surgical/obstetric patient",ERRMSG
.          ENDIF
.          CALL      PERR0000
.          GOTO      WACC8800
.
WACC8600  MOVE      DIM11,ACDCCG13
          MOVE      DIM1,ACDCCG14
          GOTO      WACC8800
.
WACC8700  MOVE      ACDCCG13,DIM11               * save service code and type
          MOVE      ACDCCG14,DIM1
.
WACC8800  MATCH     ANSA,ACDCCG01                * ACD Record ?
          GOTO      WACC9000 IF NOT EQUAL        * no - process CCG
.
.         Write ACD Segment
.
          BRANCH    VALDFLG,WACC8500             * validation only
.
          MOVE      ACDCCG02,ACDSEG01            * set BedBandCode
          MOVE      ACDCCG03,ACDSEG02            * set BedLevelAddOnInd
          MOVE      ACDCCG04,ACDSEG03            * set BedLevelCode
          MOVE      ACDCCG06,ACDSEG04            * set ChargeAmount
          MOVE      ACDCCG07,ACDSEG05            * set ChargeRaisedCde
          MOVE      ACDCCG08,ACDSEG06            * set DayRate
          MOVE      ACDCCG09,ACDSEG07            * set FromDate
          MOVE      ACDCCG10,ACDSEG08            * set NumberOfDays
          MOVE      ACDCCG11,ACDSEG09            * set PatientClassificationCode
          MOVE      ACDCCG12,ACDSEG10            * set ProgramNum
          MOVE      ACDCCG13,ACDSEG11            * set ServiceCode
          MOVE      ACDCCG14,ACDSEG12            * set ServiceCodeTypeCode
          MOVE      ACDCCG15,ACDSEG13            * set ToDate
.
          WRITE     EXTFILE1,SEQ;TILDA01,ANSA,ANSC,ANSD:
                                 ACDSEG01,ACDSEG02,ACDSEG03,ACDSEG04:
                                 ACDSEG05,ACDSEG06,ACDSEG07,ACDSEG08:
                                 ACDSEG09,ACDSEG10,ACDSEG11,ACDSEG12:
                                 ACDSEG13
.
          GOTO      WACC8500
.
.         Write CCG Segment
.
WACC9000  BRANCH    VALDFLG,WACC8500             * validation only
.
          MOVE      ACDCCG06,CCGSEG01            * load ChargeAmount
          MOVE      ACDCCG07,CCGSEG02            * load ChargeRaisedCde
          MOVE      ACDCCG03,CCGSEG03            * load CriticalCareAddOnInd
          MOVE      ACDCCG05,CCGSEG04            * load CriticalCareLevelCode
          MOVE      ACDCCG16,CCGSEG05            * load CriticalCareTypeCode
          MOVE      ACDCCG08,CCGSEG06            * load DayRate
          MOVE      ACDCCG09,CCGSEG07            * load FromDate
          MOVE      ACDCCG17,CCGSEG08            * load ICUHours
          MOVE      ACDCCG10,CCGSEG09            * load NumberOfDays
          MOVE      ACDCCG13,CCGSEG10            * load ServiceCode
          MOVE      ACDCCG14,CCGSEG11            * load ServiceCodeTypeCode
          MOVE      ACDCCG15,CCGSEG12            * load ToDate
.
          MATCH     "1",PTCNECUP
          IF        @EQUAL
.
            MOVE      ACDCCG20,CCGSEG13            * load CCUHours
.
            WRITE     EXTFILE1,SEQ;TILDA01,ANSC,ANSC,ANSG:
                                   CCGSEG01,CCGSEG02,CCGSEG03,CCGSEG04:
                                   CCGSEG05,CCGSEG06,CCGSEG07,CCGSEG08:
                                   CCGSEG09,CCGSEG10,CCGSEG11,CCGSEG12:
                                   CCGSEG13
          ELSE
.
            WRITE     EXTFILE1,SEQ;TILDA01,ANSC,ANSC,ANSG:
                                   CCGSEG01,CCGSEG02,CCGSEG03,CCGSEG04:
                                   CCGSEG05,CCGSEG06,CCGSEG07,CCGSEG08:
                                   CCGSEG09,CCGSEG10,CCGSEG11,CCGSEG12 
          ENDIF
.
          GOTO      WACC8500
.
WACC9999  RETURN
+
.******************************************************************************
.*                                  CACC0000              Called by: VALD0000 *
.*     Clear all accommodation records (ACD & CCG) from the temporary file    *
.******************************************************************************
.
CACC0000  MOVE      SP10,KEY10
          CALL      RSTEMP3                      * position at start of file
          CALL      RKTEMP3                      * read next record
          BRANCH    OVRCD,CACC9999               * eof - finished
.
          PACK      KEY10,ACDCCG01,ACDCCG09,ACDCCG03
          CALL      DETEMP3                      * delete record
          GOTO      CACC0000                     * get next record
.
CACC9999  RETURN
+
.******************************************************************************
.*                                  PADO0000              Called by: LACC0000 *
.*     Pad out the program code to 7-characters using leading zeroes          *
.* Requires: Valid read on pmsvx1af (for PMVXPRGM).                           *
.* Returns:  DIM7 - 7-character program code (padded with leading zeroes).    *
.*           EXIT   0 = Valid program code                                    *
.*                  1 = Invalid program code                                  *
.******************************************************************************
.
PADO0000  MOVE      PMVXPRGM,DIM8
          SQUEEZE   DIM8
          MOVELPTR  DIM8,FORM1
          BRANCH    FORM1,PADO1000:              * one character
                          PADO2000:              * two characters
                          PADO3000:              * three characters
                          PADO4000:              * four characters
                          PADO5000:              * five characters
                          PADO6000:              * six characters
                          PADO7000               * seven characters
.
.         Invalid program code
.
          MOVE      "ACD.07-Program code not valid",ERRMSG
          CALL      PERR0000
          GOTO      PADO9100
.
PADO1000  PACK      DIM7,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,DIM8
          GOTO      PADO9000
.
PADO2000  PACK      DIM7,ZERO,ZERO,ZERO,ZERO,ZERO,DIM8
          GOTO      PADO9000
.
PADO3000  PACK      DIM7,ZERO,ZERO,ZERO,ZERO,DIM8
          GOTO      PADO9000
.
PADO4000  PACK      DIM7,ZERO,ZERO,ZERO,DIM8
          GOTO      PADO9000
.
PADO5000  PACK      DIM7,ZERO,ZERO,DIM8
          GOTO      PADO9000
.
PADO6000  PACK      DIM7,ZERO,DIM8
          GOTO      PADO9000
.
PADO7000  MOVE      DIM8,DIM7
.
PADO9000  MOVE      ZERO,EXIT
          GOTO      PADO9999
.
PADO9100  MOVE      ONE,EXIT
.
PADO9999  RETURN
+
.******************************************************************************
.*                                  CPSY0000              Called by: WEPD0000 *
.*                   Calculate Total Psychiatric Care Days                    *
.******************************************************************************
CPSY0000  MOVE      ZERO,WORKPSYC           * Reset psychiatric LOS
.
          PACK      KEY30,ADMINO,SP20
          CALL      RDSTRAN2                * Position on & read the transfer
CPSY1000  CALL      RDKTRAN2                  file
          IF        OVRCD=1 
            GOTO      CPSY7000              * Error
          ENDIF
.
          MATCH     ADMINO,TADMN
          GOTO      CPSY7000 IF NOT EQUAL    * Error
.
          CMATCH    ANSA,TMOVE
          GOTO      CPSY2000 IF EQUAL       * Admission record
.
          CMATCH    ANSL,TMOVE
          GOTO      CPSY3000 IF EQUAL       * Leave record
.
          CMATCH    ANSR,TMOVE
          GOTO      CPSY4000 IF EQUAL       * Return from leave record
.
          CMATCH    ANSC,TMOVE
          GOTO      CPSY5000 IF EQUAL       * Change record
.
          CMATCH    ANSD,TMOVE
          GOTO      CPSY6000 IF EQUAL       * Discharge record
.
          GOTO      CPSY5000                * Assume change record
.
. ----- Admission Record -----
.
CPSY2000  PACK      CDYSFDTE,TDATE          * Save details
          MOVE      TATYPE,STATYPE
          GOTO      CPSY1000
.
. ----- Leave Record -----
.
CPSY3000  CALL      LEND0000                * Process end of a period
          GOTO      CPSY1000
.
. ----- Return Record -----
.
CPSY4000  PACK      CDYSFDTE,TDATE          * Save Details
          MOVE      TATYPE,STATYPE
          GOTO      CPSY1000
.
. ----- Change Record -----
.
CPSY5000  CALL      LEND0000                * Process end of a period
          PACK      CDYSFDTE,TDATE          * Save Details 
          MOVE      TATYPE,STATYPE
          GOTO      CPSY1000
.
. ----- Discharge Record -----
.
CPSY6000  CALL      LEND0000                * Process end of a period
          GOTO      CPSY8000
.
. ----- Error -----
.
CPSY7000  MOVE      DDATE,TDATE             * Assume discharge date
          CALL      LEND0000                * Process end of a period
.
. ----- Finished -----
.
CPSY8000  MOVE      WORKPSYC,FORM5
.
CPSY9999  RETURN
+
.******************************************************************************
.*                                  LEND0000              Called by: CPSY0000 *
.*              Process End Of Period Details For Psychiatric Care Days       *
.******************************************************************************
LEND0000  PACK      CDYSTDTE,TDATE
          MATCH     CDYSTDTE,CDYSFDTE
          GOTO      LEND9999 IF NOT LESS
.
          CALL      CALCDAYS                * Calculate diff between dates
          SUB       ONE,CDYSDAYS            * We dont want inclusive dates
.
          MATCH     SP70,STATYPE
          GOTO      LEND9999 IF EQUAL       * Dont allow blank codes
.
          PACK      KEY5,ANSA,SP1,STATYPE   * Using admin type for psychiatric
          CALL      RDCODE1                 * Cat."A "
          BRANCH    OVRCD,LEND9999
.
          MATCH     "P",TCINDC3
          GOTO      LEND9999 IF NOT EQUAL
.
          ADD       CDYSDAYS,WORKPSYC
.
LEND9999  RETURN
.******************************************************************************
.*                                  PLOS0000              Called by: GDAT0000 *
.*              Calculate The Palliative Care Days for the Patient            *
.******************************************************************************
PLOS0000  MOVE      ZERO,WORKPLOS           * Reset palliative LOS
          MOVE      WORKPLOS,EPDSEG22
          PACK      SAVFDATE,ADATE,SP70
          PACK      KEY24,ADMINO,SP70
          CALL      RDSCHCO1
PLOS1000  CALL      RDKCHCO1
          BRANCH    OVRCD,PLOS5000
.
          MOVE      ADMINO,DIM8
          MATCH     DIM8,DCHADMN
          GOTO      PLOS5000 IF NOT EQUAL
.
          MATCH     "CC",CHCATG
          GOTO      PLOS1000 IF NOT EQUAL
.
          PACK      CDYSFDTE,SAVFDATE       * All palliative care days
          PACK      SAVFDATE,CHDATE
.
          PACK      KEY5,ANSC,ANSC,CHCODE,SP70
          CALL      RDCODE1
          BRANCH    OVRCD,PLOS1000
.
          MOVE      ZERO,FORM3
          SQUEEZE   PTCDNHCP
          MOVE      PTCDNHCP,FORM3
          IF        FORM3<30 | FORM3>33
            GOTO      PLOS1000              * Not palliative care stay
          ENDIF
.
          PACK      CDYSTDTE,CHDATE
          MATCH     CHDATE,ENDDTE8
          IF        @LESS
            PACK      CDYSTDTE,ENDDTE8
          ENDIF
          CALL      CALCDAYS
          ADD       CDYSDAYS,WORKPLOS
          GOTO      PLOS1000
.
PLOS5000  MATCH     SP70,ACARE
          GOTO      PLOS9999 IF EQUAL
.
          PACK      KEY5,ANSC,ANSC,ACARE,SP70
          CALL      RDCODE1
          BRANCH    OVRCD,PLOS9999
.
          MOVE      ZERO,FORM3
          SQUEEZE   PTCDNHCP
          MOVE      PTCDNHCP,FORM3
          IF        FORM3>29 & FORM3<34
            GOTO      PLOS6000              * Palliative care days
          ELSE
            GOTO      PLOS9999              * Not palliative care days
          ENDIF
.
PLOS6000  PACK      CDYSFDTE,SAVFDATE       * Calculate palliative care days
          PACK      CDYSTDTE,DDATE
          MATCH     DDATE,ENDDTE8
          IF        @LESS
            PACK      CDYSTDTE,ENDDTE8
          ENDIF
          CALL      CALCDAYS
          SUB       ONE,CDYSDAYS            * We dont want inclusive dates
          MOVE      CDYSDAYS,WORKPLOS
          GOTO      PLOS9990
.
PLOS9990  MOVE      WORKPLOS,EPDSEG22
PLOS9999  RETURN
+
.******************************************************************************
.*                                  CBBY0000              Called by: WEPD0000 *
.*                   Calculate Number Of Qualified Days For Newborns          *
.******************************************************************************
CBBY0000  MOVE      ZERO,WORKBABY           * Reset qual days for newborns
.
          PACK      KEY30,ADMINO,SP20
          CALL      RDSTRAN2                * Position on & read the transfer
CBBY1000  CALL      RDKTRAN2                  file
          IF        OVRCD=1 
            GOTO      CBBY7000              * Error
          ENDIF
.
          MATCH     ADMINO,TADMN
          GOTO      CBBY7000 IF NOT EQUAL   * Error
.
          CMATCH    ANSA,TMOVE
          GOTO      CBBY2000 IF EQUAL       * Admission record
.
          CMATCH    ANSL,TMOVE
          GOTO      CBBY3000 IF EQUAL       * Leave record
.
          CMATCH    ANSR,TMOVE
          GOTO      CBBY4000 IF EQUAL       * Return from leave record
.
          CMATCH    ANSC,TMOVE
          GOTO      CBBY5000 IF EQUAL       * Change record
.
          CMATCH    ANSD,TMOVE
          GOTO      CBBY6000 IF EQUAL       * Discharge record
.
          GOTO      CBBY5000                * Assume change record
.
. ----- Admission Record -----
.
CBBY2000  PACK      CDYSFDTE,TDATE          * Save details
          MOVE      TATYPE,STATYPE
          GOTO      CBBY1000
.
. ----- Leave Record -----
.
CBBY3000  CALL      LBBY0000                * Process end of a period
          GOTO      CBBY1000
.
. ----- Return Record -----
.
CBBY4000  PACK      CDYSFDTE,TDATE          * Save Details
          MOVE      TATYPE,STATYPE
          GOTO      CBBY1000
.
. ----- Change Record -----
.
CBBY5000  CALL      LBBY0000                * Process end of a period
          PACK      CDYSFDTE,TDATE          * Save Details
          MOVE      TATYPE,STATYPE
          GOTO      CBBY1000
.
. ----- Discharge Record -----
.
CBBY6000  CALL      LBBY0000                * Process end of a period
          GOTO      CBBY8000
.
. ----- Error -----
.
CBBY7000  MOVE      DDATE,TDATE             * Assume discharge date
          CALL      LBBY0000                * Process end of a period
.
. ----- Finished -----
.
CBBY8000  MOVE      WORKBABY,FORM5
.
CBBY9999  RETURN
+
.******************************************************************************
.*                                  LBBY0000              Called by: CPSY0000 *
.*          Process End Of Period Details For Num Of Qual Days For NewB       *
.******************************************************************************
LBBY0000  PACK      CDYSTDTE,TDATE
          MATCH     CDYSTDTE,CDYSFDTE
          GOTO      LBBY9999 IF NOT LESS
.
          CALL      CALCDAYS                * Calculate diff between dates
          SUB       ONE,CDYSDAYS            * We dont want inclusive dates
.
          MATCH     SP70,STATYPE
          GOTO      LBBY9999 IF EQUAL       * Dont allow blank codes
.
          PACK      KEY5,ANSA,SP1,STATYPE   * Using admin type for psychiatric
          CALL      RDCODE1                 * Cat."A "
          BRANCH    OVRCD,LBBY9999
.
          CMATCH    "Q",PTCDNHCP
          GOTO      LBBY9999 IF NOT EQUAL
.
          ADD       CDYSDAYS,WORKBABY
.
LBBY9999  RETURN
+
.******************************************************************************
.*                                  WADF0000              Called by: WMOR0000 *
.*                   Write Admission and Discharge FIM scores                 *
.******************************************************************************
.
.         First, write the 18 Admission FIM scores    
.
WADF0000  CALL      GADF0000
.
          MOVE      ONE,CODCNT                   * initialise counter
          REPEAT
            MATCH     SP70,AFMARRAY[CODCNT]
            IF        @EQUAL
              MOVE      "MOR.07-Admission FIM score ",ERRMSG  * yes
              MOVE      " is blank.",KEY10
              PACK      ERRMSG,ERRMSG,CODCNT,KEY10,SP70
              CALL      PERR0000
            ENDIF 
.
            IF        VALDFLG<>1 
              MOVE      AFMARRAY[CODCNT],KEY1
              WRITE     EXTFILE1,SEQ;KEY1;         * write adm FIM score
            ENDIF
.
            ADD       ONE,CODCNT                 * increment counter
          UNTIL     CODCNT > 18
.
.         Now write the 18 Discharge FIM scores
.
          MOVE      ONE,CODCNT                   * initialise counter
          REPEAT
.
            MATCH     SP70,DFMARRAY[CODCNT]
            IF        @EQUAL
              MOVE      "MOR.08-Discharge FIM score ",ERRMSG  * yes
              MOVE      " is blank.",KEY10
              PACK      ERRMSG,ERRMSG,CODCNT,KEY10,SP70
              CALL      PERR0000
            ENDIF
.
            IF        VALDFLG<>1
              MOVE      DFMARRAY[CODCNT],KEY1
              IF        CODCNT = 18
                WRITE     EXTFILE1,SEQ;KEY1        * write dis FIM score
              ELSE
                WRITE     EXTFILE1,SEQ;KEY1;       * write dis FIM score
              ENDIF
            ENDIF
.
            ADD       ONE,CODCNT                 * increment counter
          UNTIL     CODCNT > 18
.
WADF9999  RETURN
+
.******************************************************************************
.*                                  GADF0000              Called by: WADF0000 *
.*                   Get Admission and Discharge FIM Scores                   *
.******************************************************************************
GADF0000  PACK      KEY24,ADMINO,SP70
          CALL      RSPTFIM1
GADF1000  CALL      RKPTFIM1
          BRANCH    OVRCD,GADF5000
.
          MOVE      ADMINO,DIM8
          MATCH     DIM8,PTFIVISN
          GOTO      GADF5000 IF NOT EQUAL
.
          MATCH     ANSA,PTFITYPE
          GOTO      GADF1000 IF NOT EQUAL
.
          MOVE      PTFIEATS,FORM1
          MOVE      FORM1,AFMARRAY[1];
.
          MOVE      PTFIGRMS,FORM1
          MOVE      FORM1,AFMARRAY[2];
.
          MOVE      PTFIBTHS,FORM1
          MOVE      FORM1,AFMARRAY[3];
.
          MOVE      PTFIUPBS,FORM1
          MOVE      FORM1,AFMARRAY[4];
.
          MOVE      PTFILWBS,FORM1
          MOVE      FORM1,AFMARRAY[5];
.
          MOVE      PTFITLTS,FORM1
          MOVE      FORM1,AFMARRAY[6];
.
          MOVE      PTFIBLMS,FORM1
          MOVE      FORM1,AFMARRAY[7];
.
          MOVE      PTFIBWMS,FORM1
          MOVE      FORM1,AFMARRAY[8];
.
          MOVE      PTFITBDS,FORM1
          MOVE      FORM1,AFMARRAY[9];
.
          MOVE      PTFITTLS,FORM1
          MOVE      FORM1,AFMARRAY[10];
.
          MOVE      PTFITBTS,FORM1
          MOVE      FORM1,AFMARRAY[11];
.
          MOVE      PTFILOCS,FORM1
          MOVE      FORM1,AFMARRAY[12];
.
          MOVE      PTFISTRS,FORM1
          MOVE      FORM1,AFMARRAY[13];
.
          MOVE      PTFICOMS,FORM1
          MOVE      FORM1,AFMARRAY[14];
.
          MOVE      PTFIEXPS,FORM1
          MOVE      FORM1,AFMARRAY[15];
.
          MOVE      PTFISCIS,FORM1
          MOVE      FORM1,AFMARRAY[16];
.
          MOVE      PTFIPRBS,FORM1
          MOVE      FORM1,AFMARRAY[17];
.
          MOVE      PTFIMEMS,FORM1
          MOVE      FORM1,AFMARRAY[18];
.
GADF5000  PACK      KEY24,ADMINO,SP70
          CALL      RSPTFIM1
GADF6000  CALL      RKPTFIM1
          BRANCH    OVRCD,GADF9999
.
          MOVE      ADMINO,DIM8
          MATCH     DIM8,PTFIVISN
          GOTO      GADF9999 IF NOT EQUAL
.
          MATCH     ANSD,PTFITYPE
          GOTO      GADF6000 IF NOT EQUAL
.
          MOVE      PTFIEATS,FORM1
          MOVE      FORM1,DFMARRAY[1];
.
          MOVE      PTFIGRMS,FORM1
          MOVE      FORM1,DFMARRAY[2];
.
          MOVE      PTFIBTHS,FORM1
          MOVE      FORM1,DFMARRAY[3];
.
          MOVE      PTFIUPBS,FORM1
          MOVE      FORM1,DFMARRAY[4];
.
          MOVE      PTFILWBS,FORM1
          MOVE      FORM1,DFMARRAY[5];
.
          MOVE      PTFITLTS,FORM1
          MOVE      FORM1,DFMARRAY[6];
.
          MOVE      PTFIBLMS,FORM1
          MOVE      FORM1,DFMARRAY[7];
.
          MOVE      PTFIBWMS,FORM1
          MOVE      FORM1,DFMARRAY[8];
.
          MOVE      PTFITBDS,FORM1
          MOVE      FORM1,DFMARRAY[9];
.
          MOVE      PTFITTLS,FORM1
          MOVE      FORM1,DFMARRAY[10];
.
          MOVE      PTFITBTS,FORM1
          MOVE      FORM1,DFMARRAY[11];
.
          MOVE      PTFILOCS,FORM1
          MOVE      FORM1,DFMARRAY[12];
.
          MOVE      PTFISTRS,FORM1
          MOVE      FORM1,DFMARRAY[13];
.
          MOVE      PTFICOMS,FORM1
          MOVE      FORM1,DFMARRAY[14];
.
          MOVE      PTFIEXPS,FORM1
          MOVE      FORM1,DFMARRAY[15];
.
          MOVE      PTFISCIS,FORM1
          MOVE      FORM1,DFMARRAY[16];
.
          MOVE      PTFIPRBS,FORM1
          MOVE      FORM1,DFMARRAY[17];
.
          MOVE      PTFIMEMS,FORM1
          MOVE      FORM1,DFMARRAY[18];
.
GADF9999  RETURN
+
.******************************************************************************
.*                                  WKLP0000              Called by: WSVB0000 *
.* Load all leave periods into an array. Used to calculate SVB segment        *
.* NumberOfDays and ToDate. Maximum leave periods that can be loaded is 99.   *
.* If LOS is less than maximum inlier days then NumberOfDays is the LOS.      *
.* If LOS is greater than maximum inlier days then NumberOfDays is the maximum*
.* inlier days plus all the leave periods inside the maximum inlier days      *
.* period.                                                                    *
.******************************************************************************
.
WKLP0000  MOVE      ZERO,LPDWRKCN
.
          WHILE     LPDWRKCN < 99
            ADD       ONE,LPDWRKCN
            UNPACK    SP70,LPDWRK01[LPDWRKCN],LPDWRK02[LPDWRKCN]:
                           LPDWRK03[LPDWRKCN]
            REP       " 0",LPDWRK03[LPDWRKCN]
          DO
.
          MOVE      ZERO,LPDWRKCN
.
.         Loop through the transfer file for this admission for for
.         on leave records
.
          PACK      KEY30,ADMINO,SP30
          CALL      RDSTRAN2                     * position on admission
WKLP1000  CALL      RDKTRAN2                     * read next record
          BRANCH    OVRCD,WKLP9999
.
          MATCH     TADMN,ADMINO                 * same admission still ?
          GOTO      WKLP9999 IF NOT EQUAL        * no - finished
.
          MATCH     ANSD,TMOVE                   * discharge record ?
          GOTO      WKLP9999 IF EQUAL            * yes - finished
.
          MATCH     ANSL,TMOVE                   * leave record ?
          GOTO      WKLP1000 IF NOT EQUAL        * no - ignore record
.
          MOVE      SP70,LPDWRKFR
          MOVE      SP70,LPDWRKTO
          MOVE      SP70,LPDWRKDY
.
          MATCH     TDATE,INVFRDTE               * date > invoice from date ?
          IF        @LESS
            MOVE      TDATE,LEAVDATE             * yes - load leave date
          ELSE
            MOVE      INVFRDTE,LEAVDATE          * no - use invoice start date
          ENDIF
.
          CALL      RDKTRAN2                     * read next record
          BRANCH    OVRCD,WKLP2000               * eof
.
          MATCH     TADMN,ADMINO                 * same admission still ?
          GOTO      WKLP2000 IF NOT EQUAL        * no - use invoice end date
.
          MATCH     ANSR,TMOVE                   * return from leave ?
          GOTO      WKLP2000 IF NOT EQUAL        * no - use invoice end date
.
          MATCH     TDATE,INVFRDTE               * date <= invoice from date ?
          GOTO      WKLP1000 IF NOT LESS         * no = get next record
.
          MATCH     INVTODTE,TDATE               * date >= invoice to date ?
          GOTO      WKLP2000 IF NOT LESS         * yes - use invoice end date
.
          MOVE      TDATE,RETNDATE               * use return date
          GOTO      WKLP3000
.
WKLP2000  MOVE      INVTODTE,RETNDATE            * use inv. to date for return
.
.         Load FromDate
.
WKLP3000  UNPACK    LEAVDATE,DIM4,DIM2,DIM2A
          PACK      LPDWRKFR,DIM2A,DIM2,DIM4
          REP       " 0",LPDWRKFR
.
.         Load ToDate
.
          UNPACK    RETNDATE,DIM4,DIM2,DIM2A
          PACK      LPDWRKTO,DIM2A,DIM2,DIM4
          REP       " 0",LPDWRKTO
.
.         Load NumberOfDays
.
.         PRINT     *N,*1,"WKLP0000 Leave Calculation"
          CALL      LEAV0000
.         PRINT     *N
.
.         If patient went on leave and returned the same day,
.         then ignore this leave record (CAR 208616)
.
          COMPARE   ZERO,LEAVDAY
          GOTO      WKLP1000 IF EQUAL
.
          MOVE      LEAVDAY,LPDWRKDY
          REP       " 0",LPDWRKDY
.
          ADD       ONE,LPDWRKCN                
.
          COMPARE   NINTY9,LPDWRKCN
          GOTO      WKLP9999 IF NOT LESS
.
          MOVE      LPDWRKFR,LPDWRK01[LPDWRKCN]
          MOVE      LPDWRKTO,LPDWRK02[LPDWRKCN]
          MOVE      LPDWRKDY,LPDWRK03[LPDWRKCN]
.
          GOTO      WKLP1000
.
WKLP9999  RETURN
+
.*****************************************************************************
.*        IO ROUTINES FOR TEMPORARY FILE                                     *
.*****************************************************************************
.
.         First tempfile routines
.
RSTEMP1   READ      LSTTEMP1,KEY16;;
          RETURN
.
RDTEMP1   MOVE      ZERO,OVRCD
          READ      LSTTEMP1,KEY16;LISTADMN,LISTINVN,LISTURNO,LISTDATE,LISTAMNT:
                                   LISTFLAG,LISTHOSP
          GOTO      OVERCOND IF OVER
          RETURN
.
RKTEMP1   MOVE      ZERO,OVRCD
          READKS    LSTTEMP1;LISTADMN,LISTINVN,LISTURNO,LISTDATE,LISTAMNT:
                             LISTFLAG,LISTHOSP
          GOTO      OVERCOND IF OVER
          RETURN
.
RPTEMP1   MOVE      ZERO,OVRCD
          READKP    LSTTEMP1;LISTADMN,LISTINVN,LISTURNO,LISTDATE,LISTAMNT:
                             LISTFLAG,LISTHOSP
          GOTO      OVERCOND IF OVER
          RETURN
.
UPTEMP1   UPDATE    LSTTEMP1;LISTADMN,LISTINVN,LISTURNO,LISTDATE,LISTAMNT:
                             LISTFLAG,LISTHOSP
          RETURN
.
WRTEMP1   WRITE     LSTTEMP1,KEY16;LISTADMN,LISTINVN,LISTURNO,LISTDATE,LISTAMNT:
                                   LISTFLAG,LISTHOSP
          RETURN
.
DETEMP1   DELETE    LSTTEMP1,KEY16
          RETURN
.
.         Second Temp File routines for miscellaneous charge (MSG) records
.
RSTEMP2   READ      MSGTEMP2,KEY5;;
          RETURN
.
RKTEMP2   MOVE      ZERO,OVRCD
          READKS    MSGTEMP2;TMPSEQNO,TMPITEMN,TMPAMNT,TMPUNQID,TMPSDATE
          GOTO      OVERCOND IF OVER
          RETURN
.
WRTEMP2   WRITE     MSGTEMP2,KEY5;TMPSEQNO,TMPITEMN,TMPAMNT,TMPUNQID,TMPSDATE
          RETURN
.
DETEMP2   DELETE    MSGTEMP2,KEY5
          RETURN
.
.         Third Temp File routines for accommodation records (ACD & CCG)
.
RATEMP3   RESET     KEY10
          MOVE      ZERO,OVRCD
          READ      ACCTEMP3,KEY10;ANS
          GOTO      OVERCOND IF OVER
          RETURN
.
RSTEMP3   READ      ACCTEMP3,KEY10;;
          RETURN
.
RKTEMP3   MOVE      ZERO,OVRCD
          READKS    ACCTEMP3;ACDCCG01,ACDCCG02,ACDCCG03,ACDCCG04,ACDCCG05:
                             ACDCCG06,ACDCCG07,ACDCCG08,ACDCCG09,ACDCCG10:
                             ACDCCG11,ACDCCG12,ACDCCG13,ACDCCG14,ACDCCG15:
                             ACDCCG16,ACDCCG17,ACDCCG18,ACDCCG19,ACDCCG20:
                             ACDCCG21
          GOTO      OVERCOND IF OVER
          RETURN
.
RPTEMP3   MOVE      ZERO,OVRCD
          READKP    ACCTEMP3;ACDCCG01,ACDCCG02,ACDCCG03,ACDCCG04,ACDCCG05:
                             ACDCCG06,ACDCCG07,ACDCCG08,ACDCCG09,ACDCCG10:
                             ACDCCG11,ACDCCG12,ACDCCG13,ACDCCG14,ACDCCG15:
                             ACDCCG16,ACDCCG17,ACDCCG18,ACDCCG19,ACDCCG20:
                             ACDCCG21
          GOTO      OVERCOND IF OVER
          RETURN
.
WRTEMP3   WRITE     ACCTEMP3,KEY10;ACDCCG01,ACDCCG02,ACDCCG03,ACDCCG04,ACDCCG05:
                                   ACDCCG06,ACDCCG07,ACDCCG08,ACDCCG09,ACDCCG10:
                                   ACDCCG11,ACDCCG12,ACDCCG13,ACDCCG14,ACDCCG15:
                                   ACDCCG16,ACDCCG17,ACDCCG18,ACDCCG19,ACDCCG20:
                                   ACDCCG21
          RETURN
.
UPTEMP3   UPDATE    ACCTEMP3;ACDCCG01,ACDCCG02,ACDCCG03,ACDCCG04,ACDCCG05:
                             ACDCCG06,ACDCCG07,ACDCCG08,ACDCCG09,ACDCCG10:
                             ACDCCG11,ACDCCG12,ACDCCG13,ACDCCG14,ACDCCG15:
                             ACDCCG16,ACDCCG17,ACDCCG18,ACDCCG19,ACDCCG20:
                             ACDCCG21
          RETURN
.
DETEMP3   DELETE    ACCTEMP3,KEY10
          RETURN
.
.         Second index of third temp file
.
RSTEMP4   READ      ACCTEMP4,KEY10;;
          RETURN
.
RPTEMP4   MOVE      ZERO,OVRCD
          READKP    ACCTEMP4;ACDCCG01,ACDCCG02,ACDCCG03,ACDCCG04,ACDCCG05:
                             ACDCCG06,ACDCCG07,ACDCCG08,ACDCCG09,ACDCCG10:
                             ACDCCG11,ACDCCG12,ACDCCG13,ACDCCG14,ACDCCG15:
                             ACDCCG16,ACDCCG17,ACDCCG18,ACDCCG19,ACDCCG20:
                             ACDCCG21
          GOTO      OVERCOND IF OVER
          RETURN
.
UPTEMP4   UPDATE    ACCTEMP4;ACDCCG01,ACDCCG02,ACDCCG03,ACDCCG04,ACDCCG05:
                             ACDCCG06,ACDCCG07,ACDCCG08,ACDCCG09,ACDCCG10:
                             ACDCCG11,ACDCCG12,ACDCCG13,ACDCCG14,ACDCCG15:
                             ACDCCG16,ACDCCG17,ACDCCG18,ACDCCG19,ACDCCG20:
                             ACDCCG21
          RETURN
+
.==============================================================================
.
          INC       STD001IO
.
          INC       CALCAGE                 * Calculate patients age
          INC       CALCDAYS                * Calculate diff between 2 dates
          INC       CLPATDSC                * Clear the disch variables
          INC       EXCLNEWB
          INC       GETDRG                  * Get DRG & MDC codes
          INC       NHOSPDAY                * Calculate no of days in hospital
          INC       PATCODKY                * Keyin a codes file code
          INC       PATFNDKY                * Keyin a health fund
          INC       PATGILOS                * Get intended LOS
          INC       PATHSPKY                * hospital code keyin
          INC       PATM10T9                * Map ICD10 to ICD9 codes
          INC       PATMCHRD                * Miscellaneous Charges read routine
.         INC       VALCMXFN
.         INC       GETCNEFF
          INC       TFILENAM                     * Generate Temp File Name
          INC       VALCONTR
          INC       GETEFDRG
          INC       PATITMRD
          INC       PATFN2RD
.
          INC       IBAGEDIO/INC
          INC       IBASEQIO/INC                 * Sequential Numbers File
          INC       MEHLEGIO/INC            * Legal Status
          INC       OPRDEAIO/INC            * Operation detail file
          INC       PATCERIO/INC            * certificates
          INC       PATCLCIO/INC            * certificate line comments
          INC       PATCRTIO/INC            * certificates
          INC       PMSCIDIO/INC            * Contract id
          INC       PATCMPIO/INC            * Complex mapping file
          INC       PATCODIO/INC            * Codes file
          INC       PATCHCIO/INC            * Code changes file
          INC       PATCMXIO/INC            * Casemix Funding file
          INC       PATCFAIO/INC
          INC       PATDADIO/INC            * Patient transfer destination file
          INC       PATDO1IO/INC            * Doctor file
          INC       PATDSCIO/INC            * Disch file
          INC       PATDTRIO/INC            * DTR file
          INC       PATDGWIO/INC            * DTR file
          INC       PATECDIO/INC            * Patient episode disease file
          INC       PATECOIO/INC            * Patient episode operation file
          INC       PATFIMIO/INC            * Patient FIM Scores
          INC       PATFN1IO/INC            * Health fund file
          INC       PATFN2IO/INC            * Health fund extension 1
          INC       PATFX1IO/INC            * Health fund extension 2
          INC       PATHDFIO/INC
          INC       PATHGPIO/INC            * Health fund group file
          INC       PATHSPIO/INC            * Hospital file
          INC       PATICDIO/INC            * ICD disease file
          INC       PATICOIO/INC            * ICD operation file
          INC       PATICUIO/INC            * ICU file
          INC       PATINVIO/INC            * Invoice file
          INC       PATIN1IO/INC            * Insurance file
          INC       PATITMIO/INC            * Item file
          INC       PATLINIO/INC            * U/R Link file
          INC       PATMA1IO/INC            * Master file
          INC       PATMCHIO/INC            * Miscellaneous charges file
          INC       PATMI1IO/INC            * Admin file
          INC       PATMMBIO/INC            * Patient MBS file
          INC       PATPARIO/INC            * Eclipse Participants
          INC       PATPCPIO/INC            * Eclipse Participant Capabilities
          INC       PATPGRIO/INC            * Patient grouper file
          INC       PATTRNIO/INC            * Transfer file
          INC       PATVADIO/INC            * Transfer source file
          INC       PATVISIO/INC
          INC       PATWC1IO/INC            * WCO file
          INC       PATWMAIO/INC            * TAC file
          INC       PATWVEIO/INC            * DVA file
          INC       PMSAPGIO/INC
          INC       PMSUPGIO/INC
          INC       PMSCCDIO/INC
          INC       PMSDVAIO/INC
          INC       PMSEBHIO/INC            * Eclipse batch header file
          INC       PMSECAIO/INC            * Eclipse Claims Audit/History Table
          INC       PMSECTIO/INC            * Eclipse Claims Table
          INC       PMSHCPIO/INC
          INC       PMSPX2IO/INC
          INC       PMSTSPIO/INC            * transport data
          INC       PMSVX1IO/INC
          INC       VISMDTIO/INC
          INC       VISMTXIO/INC
          INC       WEBSECIO/INC
          INC       WEBERRIO/INC                 * Web Server Error Logging
          INC       PMSEDGIO/INC       * Effective DRG Dates
+
