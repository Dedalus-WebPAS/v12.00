.******************************************************************************
.*                                                                            *
.*                                 PRIINVPR                                   *
.*                                 --------                                   *
.*                                                                            *
.*    Include to load the relevant details and print the invoice for a single *
.*    debtor number including line-up prints. The parameter to select an      *
.*    invoice is PRCNLAYT.                                                    *
.*                                                                            *
.*    AUTHOR        :  DIG                                                    *
.*                                                                            *
.*    DATE          :  01/07/1991                                             *
.*                                                                            *
.*    MODIFICATIONS :                                                         *
.*                                                                            *
.******************************************************************************
.*        V11.05.01 03/02/2025  Peter Vela       TSK 0939466                  *
.*                  Mods to process TMPDSKM (Eclipse DVAW)                    *
.*        V11.04.01 09/07/2024  J.Tan            TSK 0934944                  *
.*                  Mod to check Referral Provider no from a linked Practice  *
.*        V11.04.04 11/04/2024  J.Tan         TSK 0941662                     *
.*                  Mod PRDTGSTM - GST of Total amt(Item amt x Quantity)      *
.*        V11.04.03 28/03/2024  PJ Le Febour     TSK 0929044g                 * 
.                   restore upd  WBIMCUID WBIMCDAT WBIMCTIM before WRWBIMC1   *
.*        V11.04.02 15/03/2024  PJ Le Febour     TSK 0929044e                 * 
.                   backout upd  WBIMCUID WBIMCDAT WBIMCTIM before WRWBIMC1   *
.*        V11.04.01 22/02/2024  PJ Le Febour     TSK 0929044db                *
.                   update WBIMCUID WBIMCDAT WBIMCTIM before callWRWBIMC1     * 
.*        V11.03.01 20/03/2023 J.Tan          TSK 0847250                     *
.*                  Moved common routines (print invoice Head & Tail) to      *
.*                  PRIINVHT for bulk re-print invoice                        *
.*        V11.02.03 19/05/2022 J.Tan           TSK 0837128                    *
.*                  Mod PRES0000 - Default PRFA to use Cat CL indic 24        *
.*        V11.02.02 22/04/2022  J.Tan          TSK 0837128                    *
.*                  Mod for Default PRFA based on claim code                  *
.*        V11.02.01 01/02/2022   Peter Vela     TSK 0902857                   *
.*                  Added check for WebServices parameter at call to WRIMW000 *
.*        V11.01.03 20/07/2021   J.Tan          TSK 0908902                   *
.*                  Fixed printing Insurance company for multi pages invoice  *
.*        V11.01.02 18/05/2021   J.Tan          TSK 0308555                   *
.*                  Mod PRTAC000 printing Insurance company                   *
.*        V11.01.01 28/04/2021   Tracey Nguyen  TSK 0308555                   *
.*                  Added routine PRTAC000 to print WorkCover and TAC Details *
.*        V11.00.05 11/11/2020   Peter Vela     TSK 0898361                   *
.*                  Added initialisation of WBIMCTYP                          *
.*        V11.00.04 20/10/2020   Peter Vela     TSK 0898361                   *
.*                  Added WebServices IMCW                                    *
.*        V11.00.03 05/05/2019   J.Tan          TSK 0891314                   *
.*                  Mod to close TMPCASH and initialise CURRDEP,NBNKDEPS      *
.*        V11.00.02 24/04/2020  Peter Vela       TSK 0874025                  *
.*                  Populate PRECPRAC before write to priectaf                *
.*        V11.00.01 22/04/2020   Peter Vela     TSK 0874025                   *
.*                  Added PRECPRAC before write to PRIECTFD                   *
.*        V10.14.04 20/08/2019   Thanh T.       TSK 0879967                   *
.*                  Changed PRIPR999 to remove the CLOSE for TMPCASH File to  *
.*                  the issue of attempt to read on closed file               *
.*        V10.14.03 08/04/2019   Peter Vela     TSK 0871522                   *
.*                  Changed PRINPRAC to SAVPRAC IN WRECT000                   *
.*        V10.14.02 20/03/2019  J.Tan            TSK 0857392                  *
.*                  Changed RCP Transaction count from DIM3 to DIM5           *
.*        V10.14.01 06/02/2019   Peter Vela     TSK 0870096                   *
.*                  Fixed execute on IBAPRI07                                 *
.******************************************************************************
.*        V10.13.04 21/11/2018  Peter Vela    TSK 0866770                     *
.*                  Added validation for TMPROVR,PRHRROVR for Eclipse IMC     *
.*        V10.13.03 02/11/2018  Peter Vela    TSK 0863035                     *
.*                  Added validation to TMPROVR, assign value from PRHRROVR   *
.*                  if Eclipse PCS claim                                      *
.*        V10.13.02 25/09/2018  J.Tan         TSK 0836727                     *
.*                  Added Restrictive Override code                           *
.*        V10.13.01 26/07/2018  J.Tan          TSK 0848506                    *
.*                  Changed PP Doctor from DIM6 to DIM10                      *
.*                  08/08/2018  Ania P         TSK 0838558                    *
.*                  Closed/Deleted TMPCASH after usage                        *
.*        V10.12.02 15/05/2018   J.Tan         TSK 0856329                    *
.*                  Fixed printing the last item at the end of page (Lingard) *
.*        V10.12.01 27/04/2018  J.Tan          Task 0845996                   *
.*                  Mod to update CMDEUDAT,CMDEUTIM and CMDEUUID              *
.*        V10.11.04 18/09/2017  Peter Vela       TSK 0837619                  *
.*                  Removed functionality for PRHTAICF PRHTASPF               *
.*        V10.11.03 29/08/2017  Peter Vela       TSK 0837619                  *
.*                  Added PRHTLVIS                                            *
.*                  Changed PRHRROVR to PRHTROVR                              *
.*        V10.11.02 03/08/2017  Peter Vela       TSK 0387619                  *
.*                  Added TMPMPOV to TMPSDCD                                  *
.*        V10.11.01 27/07/2017   Peter Vela     TSK 0837619                   *
.*                  Added TMPRPER and TMPROVR                                 *
.*                  01/08/2017   J.Tan                                        *
.*                  Added CLPRIDTR                                            *
.*        V10.08.02 20/06/2016   Peter Vela     TSK 0294177                   *
.*                  Added Eclipse IMC functionality                           *
.*        V10.08.01 07/04/2016   Peter Vela     CAR 0294177                   *
.*                  Added TMPACOI and TMPTDUR                                 *
.*                  Increased size of temp file PRITM2XX                      *
.*        V10.07.02  21/12/2015  J.Tan          CAR 0303942                   *
.*                  Mods to setup Payment code                                *
.*        V10.07.01 13/10/2015  J.Tan          CAR 310329                     *
.*                  Mods to set PRDTEFFD - Date item assigned to Fees Invoiced*
.*        V10.06.02 15/07/2015  J.Tan          CAR 319450                     *
.*                  Removed error message for User Defined Stationery code    *
.*        V10.06.01 12/03/2015  Jill Parkinson CAR 314213                     *
.*                  Removed isadd from tempfile                               *
.*        V10.04.11 16/06/2014  Peter Vela       CAR 302147                   *
.*                  Moved journal amount 1 line down PRINV230                 *
.*        V10.04.10 10/06/2014  Jill Parkinson CAR 301639                     *
.*                  Removed calls to TFILENAM in CREATP00 -must be in INIT0000*
.*        V10.04.09 17/04/2014  Peter Vela       CAR 285260                   *
.*                  Moved Cabrini invoice tail one line down in PRINV230      *
.*        V10.04.08 03/08/2012  Ebon Clements    CAR 261630                   *
.*                  Removed port number from temp files                       *
.*        V10.04.07 15/04/2014 Peter Vela    CAR 285260                       *
.*                  Fixed print alignment again for journal codes in PRINV230 *
.*        V10.04.06 14/04/2014 Peter Vela    CAR 285260                       *
.*                  Fixed print alignment for journal codes in PRINV230       *
.*        V10.04.05 11/04/2014 Peter Vela    CAR 285260                       *
.*                  Added new line print at PRINV230                          *
.*        V10.04.04 31/03/2014 Peter Vela    CAR 285260                       *
.*                  Added check for PRCNPJCI - Print Journal Code on Invoice  *
.*                  Standard and Cabrini layouts                              
.*        V10.04.03 04/03/2014 J.Tan          CAR 297922                      *
.*                  Mods checking PP Service Doctor for deposits              *
.*        V10.04.02 23/01/2014 Patrick Adair  CAR 265844                      *
.*                  new fields for PRA State and Mobile phone                 *
.*        V10.04.01 16/12/2013 J.Tan         CAR 294414                       *
.*                  Mods PRCSH000 to check Register type                      *
.*        V10.03.04 09/12/2013 J.Tan         CAR 280726                       *
.*                  Mods checking TCINDC3 catg GI for Inp.from Other Hosp.    *
.*        V10.03.03 19/11/2013 Ania P        CAR 292460                       *
.*                  Changed position of PROVIDER and REFERRAL PERIOD          *
.*        V10.03.02 05/07/2010 J.Tan         CAR 288042                       *
.*                  Check PRGID for Range of Medical practice (added chkmprac)*
.*        V10.03.01 09/05/2010 J.Tan         CAR 222041                       *
.*                   Fixed checking range of Medical practice for WEBFLAG=0   *
.*        V10.00.07 22/09/2010 J.Tan         CAR 230162                       *
.*                   Mods to print Insurance code for payment                 *
.*        V10.00.06 15/09/2010 J.Tan         CAR 230162                       *
.*                  Fixed reprint receipt                                     *
.*        V10.00.05 21/06/2010 J.Tan         CAR 213683                       *
.*                  Fixed printing SJOG multiple pages of invoice             *
.*        V10.00.04 26/05/2010 J.Tan         CAR 222645                       *
.*                  Fixed multiple deposits                                   *
.*        V10.00.03 22/04/2010 J.Tan         CAR 210750                       *
.*                  Modified SJOG layout to print 30 chars of item desc.      *
.*        V10.00.02 19/04/2010  J.Tan        CAR 219670                       *
.*                  Mods to set date/time updated to rcpdteaf file            *
.*        V10.00.01 19/03/2010 J.Tan         CAR 218400                       *
.*                  Fixed I*C on prifinsf                                     *
.*        V9.12.05  11/03/2010 J.Tan         CAR 217734                       *
.*                  Fixed checking refunded deposits                          *
.*        V9.12.04  09/12/2009 Mike Laming   CAR 210835                       *
.*                  Added logic for Private Practice Outstanding Debt alert   *
.*        V9.12.03  22/09/2009 Peter Vela    CAR 194715                       *
.*                  Fixed isbuild statement for pritm3XX                      *
.*        V9.12.02  28/07/2009 Mike Laming   CAR 123419                       *
.*                  Another mod to PATHL000 to correct "Item Stepdown"        *
.*        V9.12.01  17/06/2009 J.Tan         CAR 198435                       *
.*                  Mods SJOG layout to print 27 chars of item description    *
.*        V9.11.04  01/04/2009 Mike Laming   CAR 123419                       *
.*                  Mods to PATHL000 to correct "Item Stepdown" routine       *
.*        V9.11.03  06/03/2009 J.Tan      CAR 188205                          *
.*                  Mods to print 'Non-bank deposit' as 'Payment recieved'    *
.*        V9.11.02  08/01/2009  Steve Armstrong  CAR 185927                   *
.*                  Removed isadd on temp file and included extra index in    *
.*                  isbuild (now that CMDLINE has been extended in length).   *
.*                  08/01/2009 J.Tan      CAR 178415                          *
.*                  Added Medical Practice to prifinsf                        *
.*        V9.11.01  08/10/2008 J.Tan      CAR 180349                          *
.*                  Mods for Cabrini invoice not to print referral details    *
.******************************************************************************
.*        V9.10.05  29/08/2008 J.Tan      CAR 176993                          *
.*                  Mods for Cabrini invoice layout                           *
.*        V9.10.04  22/07/2008 Ebon Clements CAR 173815                       *
.*                  Added print service time test to SJOG invoice             *
.*                  layout - PRINV925                                         *
.*        V9.10.03  23/05/2008 J.Tan      CAR 169149                          *
.*                  Added Date and Time invoice created/updated               *
.*        V9.10.02  05/05/2008 J.Tan      CAR 162313                          *
.*                  Added Deposit status to comdepaf file                     *
.*        V9.10.01  02/05/2008 J.Tan      CAR 166477                          *
.*                  Mods to initialise referral details                       *
.******************************************************************************
.*        V9.09.01  24/07/2007 J.Tan      CAR 145426                          *
.*                  Added parameter for No rounding on Adjustment             *
.******************************************************************************
.*        V9.08.01  14/05/2007 Peter Vela CAR 136586                          *
.*                  Added Provider Number and Referral Period to PRDOC000     *
.******************************************************************************
.*        V9.06.01  01/05/2006 Peter Vela CAR 102393                          *
.*                  Added assignmentof relationship in LOADT000               *
.******************************************************************************
.*        V9.04.09  06/10/05 J.Tan    CAR 79018                               *
.*                  Fixed rounding up item amount                             *
.*        V9.04.08  16/08/05 Davin    CAR 62750                               *
.*                  Mods for removing redefined amount variables              *
.*        V9.04.07  10/06/2005 J.Tan  CAR 56701                               *
.*                  Mods for HIC Item invoice file                            *
.*        V9.04.06  29/12/2004 J.Tan  CAR 56039                               *
.*                  Fixed printing invoice with zero amount of items          *
.*        V9.04.05  16/12/2004 J.Tan  CAR 55893                               *
.*                  Fixed printing invoice for West wimmera layout            *
.*        V9.04.04  19/11/2004 J.Tan  CAR 55143                               *
.*                  Fixed printing item with zero amount                      *
.*        V9.04.03  16/11/2004 J.Tan  CAR 55143                               *
.*                  Removed Form feed for the tail of SVHM invoice layout     *
.*        V9.04.02  03/10/2004 J.Tan  CAR 53063                               *
.*                  Mods PRFA to default to PRFA from prihreaf file           *
.*        V9.04.01  13/08/2004 J.Tan  CAR 52531                               *
.*                  Fixed I*C on pristatf                                     *
.******************************************************************************
.*        V9.03.15  13/08/2004 J.Tan  CAR 52504                               *
.*                  Mods checking for PP deposit register                     *
.*        V9.03.14  02/08/2004 J.Tan  CAR 52033                               *
.*                  Mods printing no of service and unit price of items       *
.*        V9.03.13  16/07/2004 J.Tan  CAR 51544                               *
.*                  Fixed PRFA                                                *
.*        V9.03.12  30/06/2004 J.Tan  CAR 51112                               *
.*                  Mods checking for unreleased non-banked deposit           *
.*                  Mods checking for refund deposit                          *
.*        V9.03.11  01/06/2004 J.Tan  CAR 50273                               *
.*                  Fixed invoice date for rcpdteaf file                      *
.*                 Exclude cancelled non-bank deposit                         *
.*        V9.03.10  31/05/2004  J.Tan  CAR 50111                              *
.*                  Fixed PRFA and VSCANPMI will always be set to 1 for U/R   *
.*        V9.03.09  17/05/2004  J.Tan  CAR 49824                              *
.*                  Mods to open RCPDTEA1 file                                *
.*        V9.03.08  14/05/2004  J.Tan  CAR 49827                              *
.*                  Fixed displaying deposit                                  *
.*        V9.03.07  01/04/2004  J.Tan  CAR 44116                              *
.*                  Mods for credit note                                      *
.*        V9.03.06  24/03/2004  Lina Vo                                       *
.*                  Added changed for new fileds PRDTPFLG & PRDTS4B3          *
.*        V9.03.05  15/03/2004  J.Tan                                         *
.*                  Removed CLOSE RCPDTEA1 to fix I*C errors.                 *
.*        V9.03.04  15/03/2004  J.Tan                                         *
.*                  Mods for checking flag account status                     *
.*        V9.03.03  04/03/2004  J.Tan                                         *
.*                  Added Referral and encounter number                       *
.*        V9.03.02  02/03/2004  Lina Vo      CAR 47921                        *
.*                  Removed use of PRIDBTFD & IO.                             *
.*        V9.03.01  29/01/2004  J.Tan                                         *
.*                  Replaced pridep with comdepaf                             *
.******************************************************************************
.*        V9.02.08  28/02/2003  Dean Cramer CAR 36347                         *
.*                  Fix where patient printed on claom invoices as PRA        *
.*        V9.02.07  12/11/2002  Dean Cramer Defect 20086                      *
.*                  Fix where multiple invoices droppin some PRAs             *
.*        V9.02.06  22/11/2002  Dean Cramer Defect 20086                      *
.*                  Include patre1af for PRA's (Non RCH - UR present)         *
.*                  Include branch 6 in RESC0000 (contact 6 in PMPX2)         *
.*        V9.02.05  30/08/2002  Dean Cramer                                   *
.*                  Close patmesgf at LDTAL000 as may be opened eslewhere     *
.*                  Mods to initialise gst amount for displaying              *
.*        V9.02.04  28/08/2002  J.Tan                                         *
.*                  Fixed outstanding balance not include GST as invoice total*
.*                  already includes GST                                      *
.*        V9.02.03  26/07/2002  Dean Cramer                                   *
.*                  Mods Person Responsible for account - RESC0000            *
.*                  Mods to open pmspx2af file (I*C)                          *
.*                  Mods to shift Cash & Journals amount to right of invoice  *
.*                  for RCH format.                                           *
.*        V9.02.02  10/01/2002  J.Tan                                         *
.*                  Mods for split income                                     *
.*        V9.02.01  02/10/2001  J.Tan                                         *
.*                  Mods to use PMSHCPFD instead of PATDO1FD                  *
.*                                                                            *
.******************************************************************************
.*    FILES NEEDED  :  PRIINVVR  PRIINVIT  PRIVRDEB                           *
.*                                                                            *
.*                     Assume the 1st index needs to be opened except where   *
.*                     stated.                                                *
.*                     PATCODFD + IO  INC       PMSHCPFD + IO                 *
.*                     PATDRGFD + IO (2nd index)     PATMESFD + IO            *
.*                     PATMA1FD + IO                                          *
.*                     PATMX1FD + IO                                          *
.*                     PMSPX2FD + IO                                          *
.*                     PRIAUIFD + IO                 PRICONFD                 *
.*                     COMDEPFD + IO                                          *
.*                     PRIDTRFD + IO                 PRIHDBFD + IO (2nd index)*
.*                     PRIHISFD + IO  PRIHOLFD + IO  PRIHREFD + IO            *
.*                     PRIHTRFD + IO  PRIINVFD + IO  PRIITMFD + IO            *
.*                     PRIMABFD + IO  PRIMGPFD + IO  PRIMULFD + IO            *
.*                     PRIPRAFD + IO                 PRITESFD + IO            *
.*                     PRIVAFFD + IO  PRIWCOFD + IO                           *
.*                     RCPDTEFD + IO                                          *
.*                                                                            *
.*                     PRICALFS.PBL (and associated files)                    *
.*                                                                            *
.*    PARAMETERS    :  PRIINVLD - FLAGHOLD (set to TRUE)                      *
.*                              - VDEBTOR  (debtor number)                    *
.*                              - VSCANPMI (= 0 if a debtor number            *
.*                                          = 1 if a PMI number)              *
.*                              - TEMPUNQ  (relevant unique identifier)       *
.*                                                                            *
.*                     PRIINVPR - Requires the debtor number keyed in using   *
.*                                the PRIKYDEB include, OR, if not, a call to *
.*                                the LDDETAIL module for the relevant debtor.*
.*                              - COPINV (= 1 if re-printing the invoice)     *
.*                                                                            *
.*    RETURNS       :  PRIINVLD - FLAGHOLD (= TRUE if account is to be held   *
.*                                            otherwise set to FALSE)         *
.*                              - EXIT = TRUE if there are no transactions to *
.*                                        be invoiced for the given unique    *
.*                                        identifier for the given debtor OR  *
.*                                        the above parameter is set.         *
.*                                                                            *
.*                     PRIINVPR - EXIT = TRUE if we are running the General   *
.*                                       Ledger Interface and there are no    *
.*                                       records on the FMSPRIFD file for the *
.*                                       given details. *** not used any more *
.*                                                                            *
.*    MODULES       :  LINUP000 - Do a line-up print for an invoice           *
.*                                                                            *
.*                     CREATP00 - Create the temp files used for loading and  *
.*                                printing invoices and processing the        *
.*                                pathology items.                            *
.*                                                                            *
.*                     CLRTF000 - Clear the temp files used for loading and   *
.*                                printing invoices and processing the        *
.*                                pathology items.                            *
.*                                                                            *
.*                     PRIINVLD - Load the temp files with the data required  *
.*                                to print the invoice(s).  This module will  *
.*                                load for a given unique identifier for a    *
.*                                given debtor. All referrals for that id are *
.*                                loaded using PRLHR000.                      *
.*                                                                            *
.*                     PRLHR000 - Load the details for a single referral rec. *
.*                                                                            *
.*                     PRIINVPR - Print the invoice(s) for a given debtor.    *
.*                                                                            *
.*                     PATHL000 - Called from PRIINVLD to load the pathology  *
.*                                temporary file with the relevent details.   *
.*                                                                            *
.*                     PPTMP000 - Process the pathology temp file to get the  *
.*                                correct amounts to charge etc, and write    *
.*                                these details back to the temp file used to *
.*                                print the invoice(s).                       *
.*                                                                            *
.*                     DMYCONV  - Convert a DDMMYYCC date to Julian format.   *
.*                                This routine was copied from DMYCON to cater*
.*                                for a FORM 4 field as the day no. returned  *
.*                                                                            *
.*                     JULCONV  - Convert a Julian date to DDMMYYCC format.   *
.*                                This routine was copied from JULCON to cater*
.*                                for a FORM 4 field as the day number passed *
.*                                to the routine.                             *
.*                                                                            *
.*    COMMENTS      :  PRIINVLD - This module will load the temp file with one*
.*                                unique identifier for a given debtor at a   *
.*                                time so if you need to print for a debtor   *
.*                                you should call this module repeatedly for  *
.*                                every unique identifier for the given debtor*
.*                                                                            *
.*                     PRIINVPR - This module assumes you are printing for one*
.*                                debtor at a time.  Therefore if you are pro-*
.*                                cessing multiple debtors you must clear and *
.*                                reload temp file after printing each debtor.*
.*                                This module will also handle Bulk Billing   *
.*                                and interface to General Ledger.            *
.*                                                                            *
.*                     PPTMP000 - This module processes pathology items in    *
.*                                to get the correct amount to charge.  The   *
.*                                whole idea of pathology billing is extremely*
.*                                ugly and subsequently the code is quite ugly*
.*                                also.  This is of course the fault of the   *
.*                                Government who have made the system for     *
.*                                pathology billing ridiculously complex. The *
.*                                following will attempt to describe what the *
.*                                code is trying to achieve.  This module pro-*
.*                                cesses the pathology temp file in 3 steps :-*
.*                                                                            *
.*                                STEP 1 : For each multiple service code on  *
.*                                         the temp file for a particular     *
.*                                         service date we want to total all  *
.*                                         the procedures performed.          *
.*                                         Using this information we then want*
.*                                         to read the Multiple Item File to  *
.*                                         get the rec with the last effective*
.*                                         date <= our service date and the   *
.*                                         number of procedures <= our total  *
.*                                         procedure count.  We use the item  *
.*                                         from the record found to read the  *
.*                                         Item File and get the proper amount*
.*                                         to charge, with which we update the*
.*                                         total amount on the temp file.     *
.*                                                                            *
.*                                STEP 2 : For each record on the temp file   *
.*                                         without a multiple service code we *
.*                                         use the item details & the service *
.*                                         date to read the Item Group File to*
.*                                         get the first rec.with an effective*
.*                                         date <= our service date. Then for *
.*                                         every secondary item found on the  *
.*                                         Item Group File with the date of   *
.*                                         the record just found and for the  *
.*                                         relevent item we search the temp   *
.*                                         file and zero the total amount as  *
.*                                         these items are not chargable.     *
.*                                                                            *
.*                                STEP 3 : For each record on the temp file   *
.*                                         without a multiple service code we *
.*                                         use the item details & the service *
.*                                         date to read the Item File to get  *
.*                                         the rec. with the item commencement*
.*                                         date <= our service date. We then  *
.*                                         check the maximum no. of requests  *
.*                                         field & if it is zero we ignore it *
.*                                         and get the next temp file record. *
.*                                         If it is not zero we check the     *
.*                                         period of days field and calculate *
.*                                         the date this amount of days - 1   *
.*                                         prior to the service date.  We     *
.*                                         subtract one because we want to    *
.*                                         include the service date in our    *
.*                                         processing.  Using the date        *
.*                                         calculated & the item details etc, *
.*                                         etc, we read the Pathology Tests   *
.*                                         History File up to and including   *
.*                                         service date & if the item appears *
.*                                         the same amount of times as our    *
.*                                         maximum number of requests, we zero*
.*                                         the total amount on the temp file  *
.*                                         as this item is not chargeable. If *
.*                                         the item does not appear the       *
.*                                         relevent amount of times we write  *
.*                                         a new record to the Pathology Tests*
.*                                         History File.                      *
.*                                                                            *
.******************************************************************************
.
.******************************************************************************
.*                                  LINUP0000                                 *
.*                 Routine to do the line-up print of the invoice             *
.******************************************************************************
LINUP000  READ      CONTROLF,THIRTY3;*170,PRCNLAYT
.
          IF        IBCNUGST=2 & PTCNINVB=1
            MOVE      "122",FORM3
          ELSE
            MOVE      "68",FORM3
          ENDIF
.
.------ Branch on the required invoice layout -------
.
          BRANCH    PRCNLAYT,LINUP800,LINUP200,LINUP300,LINUP400,LINUP500:
                             LINUP600,LINUP700,LINUP800,LINUP400
.                                                     
.------ print the standard line-up (S.A.W.M.) ------
.
          PRINT     *N,*N,*N,*N,*N,*N:
                    *N,*3,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                      *44,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,*3,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                      *44,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,*3,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                      *44,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,*3,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                      *44,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",*N,*N,*N:
                    *N,*3,"UR:XXXXXXXX",*71,"XXXXXXXX":
                    *N,*22,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,*3,"XXXXXXXX",*71,"XX/XX/XX",*N,*N,*N,*N:
                    *N,*3,"XX/XX/XX",*13,"XXXXXXXXX ":
                          "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",*FORM3,"XXXXXXXX.XX":
                    *N,*3,"XX/XX/XX",*13,"XXXXXXXXX ":
                          "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",*FORM3,"XXXXXXXX.XX":
                    *N,*3,"XX/XX/XX",*13,"XXXXXXXXX ":
                          "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",*FORM3,"XXXXXXXX.XX":
                    *N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N:
                    *N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N:
                    *N,*FORM3,"XXXXXXXXX.XX",*N,*N,*N,*N:
                    *N,*FORM3,"XXXXXXXXX.XX",*N:
                     *N,*3,"XX/XX/XX",*14,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                       *FORM3,"XXXXXXXXX.XX",*N:
                    *N,*FORM3,"XXXXXXXXX.XX":
                    *N,*13,"UR:XXXXXXXX",*25,"XX/XX/XX",*N,*F;
          GOTO      LINUP999
.
.------ we are using the Warburton invoice line-up ------
.
LINUP100  PRINT     *N,*N,*N,*N,*N,*N,*N,*N,*N,*N:
                    *N,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                   *42,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                   *42,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                   *42,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                   *42,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,*N,*N,*FORM3,"XXXXXXXX":
                    *N,*N,*N,*FORM3,"XX/XX/XX",*N,*N,*N,*N,*N:
                    *N,"XX/XX/XX",*11,"XXXX":
                   *18,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",*FORM3,"XXXXXXXX.XX":
                    *N,"XX/XX/XX",*11,"XXXX":
                   *18,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",*FORM3,"XXXXXXXX.XX":
                    *N,"XX/XX/XX",*11,"XXXX":
                   *18,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",*FORM3,"XXXXXXXX.XX":
                    *N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N:
                    *N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N:
                    *N,*FORM3,"XXXXXXXXX.XX",*N,*N,*N,*N:
                    *N,*FORM3,"XXXXXXXXX.XX":
                     *N,*N,"XX/XX/XX",*12,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                       *FORM3,"XXXXXXXXX.XX",*N:
                    *N,*FORM3,"XXXXXXXXX.XX":
                    *N,*23,"XXXXXXXX",*36,"XX/XX/XX":
                    *N,*N
          GOTO      LINUP999
.
.------ we are using HRH's invoice line-up ------
.
LINUP200  PRINT     *N,*N,*N,*N,*N:
                    *N,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                   *42,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                   *42,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                   *42,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                   *42,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,*N,*N,*FORM3,"XXXXXXXX":
                    *N,*N,*N,*FORM3,"XX/XX/XX",*N,*N,*N,*N,*N:
                    *N,"XX/XX/XX",*11,"XXXX":
                   *18,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",*69,"XXXXXXXX.XX":
                    *N,"XX/XX/XX",*11,"XXXX":
                   *18,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",*69,"XXXXXXXX.XX":
                    *N,"XX/XX/XX",*11,"XXXX":
                   *18,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",*69,"XXXXXXXX.XX":
                    *N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N:
                    *N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N:
                    *N,*FORM3,"XXXXXXXXX.XX",*N,*N,*N,*N:
                    *N,*FORM3,"XXXXXXXXX.XX":
                    *N,*N,"XX/XX/XX",*12,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                      *FORM3,"XXXXXXXXX.XX":
                    *N,*N,*FORM3,"XXXXXXXXX.XX":
                    *N,*23,"XXXXXXXX",*36,"XX/XX/XX"
          GOTO      LINUP999
.
.------ we are using Melbourne Clinic's invoice line-up ------
.
LINUP300  PRINT     *N,*N,*N,*N,*N,*N,*N,*N,*N:
                       *3,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                      *44,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,*3,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                      *44,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,*3,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                      *44,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,*3,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                      *44,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,*N,*N,*N,"XXXXXXXX",*71,"XXXXXXXX":
                    *N,*N,*N,*71,"XX/XX/XX",*N:
                    *N,*N,*N,"XX/XX/XX",*12,"XX/XX/XX":
                      *26,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",*FORM3,"XXXXXXXX.XX":
                       *N,"XX/XX/XX",*12,"XX/XX/XX":
                      *26,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",*FORM3,"XXXXXXXX.XX":
                       *N,"XX/XX/XX",*12,"XX/XX/XX":
                      *26,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",*FORM3,"XXXXXXXX.XX":
                    *N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N:
                    *N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N:
                    *N,*FORM3,"XXXXXXXX.XX",*N,*N:
                    *N,*N,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,*FORM3,"XXXXXXXX.XX":
                    *N,*N,"XX/XX/XX",*12,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                       *FORM3,"XXXXXXXX.XX":
                    *N,*N,*FORM3,"XXXXXXXX.XX":
                    *N,*24,"XXXXXXXX",*34,"XX/XX/XX":
                    *N,*N,*N,*N,*N
          GOTO      LINUP999
.
.------ we are using Royal Children's invoice line-up ------
.
LINUP400  PRINT     ESC,"=",*N,*N,*60,"XXXXXXXXXXXXXXX",*N,*N:
                    *N,*60,"XXXXXXXXXXXXXXXXXXX",*N:
                    *N,"XXXXXX NUMBER",*69,"XXXXXXXX":
                    *N,"XXXXXXXX",*56,"COPY",*N,*N,*70,"XX/XX/XX",*N:
                    *N,*N,*21,"PROVIDER : XXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    "   9999999999",*N:
                    *N,*13,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *53,"XXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,*13,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *53,"XXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,*13,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *53,"XXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,*13,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *53,"XXXXXXXXXXXXXXXXXXXXXXXXXXXX",*N,*N,*N:
                    *N,"DATE",*11,"ITEM      DESCRIPTION":
                    *45,"NO.OF SERVICES  COST",*N:
                    *N,"REFERED BY XXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    "(XXXXXX) - PROVIDER ## XXXXXXXXXX",*N:
                    *1,"REF. DETAILS : ":
                    "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,"REFERRAL DATE : XX/XX/XXXX",*N:
                    *N,"XX/XX/XX",*11,"XXXXXX":
                    *21,"XXXXXXXXXXXXXXXXXXXXXXXXX",*46,"XXXXX X ":
                    "XXXXXXXX.XX",*FORM3,"XXXXXXXX.XX":
                    *N,"XX/XX/XX",*11,"XXXXXX":
                    *21,"XXXXXXXXXXXXXXXXXXXXXXXXX",*46,"XXXXX X ":
                    "XXXXXXXX.XX",*FORM3,"XXXXXXXX.XX":
                    *N,"XX/XX/XX",*11,"XXXXXX":
                    *21,"XXXXXXXXXXXXXXXXXXXXXXXXX",*46,"XXXXX X ":
                    "XXXXXXXX.XX",*FORM3,"XXXXXXXX.XX":
                    *N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N:
                    *N,*N,*N,*N,*N,*N,*N,*N,*N:
                 *1,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",*N:
                 *1,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",*N:
                    *N,*N,*FORM3,"XXXXXXXXX.XX",*N,*N,*N:
                    *N,*35,"XXXXXXXXXXXXXXXXXXXX",*FORM3,"XXXXXXXXX.XX",*N:
                    *N,"XX/XX/XX",*12,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *FORM3,"XXXXXXXXX.XX",*N,*N:
                    *FORM3,"XXXXXXXXX.XX",*N: 
                    *5,"XXXXX",*11,"XXXXXXXX",*23,"XXXXXXXX",*F;
          GOTO      LINUP999
.
.------ we are using Lingard invoice line-up ------
.
LINUP500  PRINT     *N: 
                     *2,"****************************************":
                    *43,"******************************",*N:
                     *2,"*************************":
                    *43,"*************************",*N:
                     *2,"*************************":
                    *43,"*************************",*N:
                     *2,"*****************************":
                    *43,"*****************************":
                    *N,*N,*N,*N:
                    *2,"********",*16,"**/**/**",*26,"******/******":
                    *70,"********",*N,*N:
                    *19,"MEDICAL SERVICES PROVIED BY ",*N:
                    *2,"**********",*19,"******************************":
                    *50,"(******)",*59,"PROVIDER ## **********":
                    *N,*N,*N,*N,*N,*N:
                    *2,"REFERRED BY ******************************":
                    *40,"PROVIDER ## **********",*N:
                    *2,"REFFERAL DATE : **/**/****",*N,*N:
                    *2,"**/**/**",*11,"*********":
                    *22,"*************************",*48,"***** X ********.**":
                    *FORM3,"*********.**",*N:
                    *2,"**/**/**",*11,"*********":
                    *22,"*************************",*48,"***** X ********.**":
                    *FORM3,"*********.**",*N:
                    *N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N:
                    *N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N:
                    *FORM3,"*********.**",*N,*N,*N,*N,*N:
                    *FORM3,"*********.**",*N,*N:
                    *2,"**/**/**",*13,"******************************",*N,*N:
                    *FORM3,"*********.**",*N:
                    *25,"********",*45,"********":
                    *N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N
          GOTO      LINUP999  
.
.------ we are using Modbury invoice line-up ------
.
LINUP600  PRINT     *N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N:
                    *N,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *42,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *42,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *42,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *42,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,*N,*N,*N,"XX:XXXXXXXX",*56,"COPY",*69,"XXXXXXXX":
                    *N,*N,"MEDICAL SERVICES PROVIDED BY ":
                    "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX",*60," (XXXXXX)":
                    *N,*30,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXX":  
                    *68,"XX/XX/XX",*N:
                    *30,"PROVIDER ## XXXXXXXXXXX",*N:
                    *N,"DATE",*11,"ITEM     DESCRIPTION":
                    *45,"NO.OF SERVICES  COST",*N,*N:
                    *N,"REFERED BY XXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    "(XXXXXX) - PROVIDER ## XXXXXXXXXX",*N:
                    *1,"REF. DETAILS : ":
                    "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,"REFERRAL DATE : XX/XX/XXXX",*N:
                    *N,"XX/XX/XX",*10,"XXXXXX":
                    *21,"XXXXXXXXXXXXXXXXXXXXXXXXXX",*47,"XXXXX X ":
                    "XXXXXXX.XX",*FORM3,"XXXXXXXX.XX":
                    *N,"XX/XX/XX",*10,"XXXXXX":
                    *21,"XXXXXXXXXXXXXXXXXXXXXXXXXX",*47,"XXXXX X ":
                    "XXXXXXX.XX",*FORM3,"XXXXXXXX.XX":
                    *N,"XX/XX/XX",*10,"XXXXXX":
                    *21,"XXXXXXXXXXXXXXXXXXXXXXXXXX",*47,"XXXXX X ":
                    "XXXXXXX.XX",*FORM3,"XXXXXXXX.XX":
                    *N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N:
                    *N,*N,*N,*N,*N,*N:
                 *1,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",*N:
                 *1,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",*N:
                    *N,*N,*FORM3,"XXXXXXXXX.XX",*N,*N,*N,*N:
                    *N,*FORM3,"XXXXXXXXX.XX":
                    *N,*N,"XX/XX/XX",*12,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,*N,*11,"XXXXXX NUMBER",*N:
                    *11,"XXXXX",*22,"XXXXXXXXXX.XX",*N,*N 
          GOTO      LINUP999  
.
.------ we are using St.Edmonds invoice line-up ------
.
LINUP700  PRINT     *N,*N,*N:
                    *3,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *44,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,*3,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *44,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,*3,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *44,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,*3,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *44,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,*N,*N,*N,*3,"XXXXXXXXXX",*58,"COPY",*71,"XXXXXXXX":
                    *N,*N,*16,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,*16,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXX":  
                    *70,"XX/XX/XX",*N:
                    *16,"PROVIDER ## XXXXXXXXXXX",*N,*N,*N,*N:
                    *N,*3,"REFERED BY XXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    "  (XXXXXX) - PROVIDER ## XXXXXXXXXX",*N:
                    *3,"REF. DETAILS : ":
                    "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,*3,"REFERRAL DATE : XX/XX/XXXX",*N:
                    *N,*3,"XX/XX/XX",*14,"XX/XX/XX":
                    *26,"XXXXXXXXXXXXXXXXX",*44,"   (XXXXXXXXXXXXXXX)":
                    *64,"XX.XX",*FORM3,"XXXXXXXX.XX":
                    *N,*3,"XX/XX/XX",*14,"XX/XX/XX":
                    *26,"XXXXXXXXXXXXXXXXX",*44,"   (XXXXXXXXXXXXXXX)":
                    *64,"XX.XX",*FORM3,"XXXXXXXX.XX":
                    *N,*3,"XX/XX/XX",*14,"XX/XX/XX":
                    *26,"XXXXXXXXXXXXXXXXX",*44,"   (XXXXXXXXXXXXXXX)":
                    *64,"XX.XX",*FORM3,"XXXXXXXX.XX":
                    *N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N:
                    *N,*N,*N,*N,*N,*N:
                 *3,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",*N:
                 *3,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",*N:
                    *N,*N,*FORM3,"XXXXXXXX.XX":
                    *N,*N,*N:
                    *3,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    " XXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,*3,"XXXXXXXXXXXXXXXXXXXXXXXXX":
                    " XXXX/XXXXXXXXXXXXXXXXXXX",*N,*FORM3,"XXXXXXXX.XX":
                    *N,*3,"XX/XX/XX",*14,"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX":
                    *N,*N,*N,*13,"XXXXXXXX",*25,"XXXXXXXX",*N,*N,*N,*N,*N 
          GOTO      LINUP999
.
.
.------ we are using West Wimmera invoice line-up ------
.
LINUP800  CALL      SINVH000                * set up header stationery code
          CALL      LINUPPIH                * print templated lineup header
.
          PRINT     *1,"**/**/**",*10,"**/**/**",*19,"***":
                    *23,"******************************",*FORM3,"*******.**":
                    *FORM3,"*******.**":
                    *N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N,*N:
                    *54,"INVOICE TOTAL",*FORM3,"*******.**"
.
          CALL      SINVT000                * set up tail stationery code
          CALL      LINUPPIT                * print templated lineup tail
.
LINUP999  RETURN
+
.
.******************************************************************************
.*                                   PRIINVPR                                 *
.*           This routine will print the invoice for a given debtor           *
.******************************************************************************
PRIINVPR  READ      CONTROLF,ZERO;*85,IBCNUGST,*132,IBCNUMCI
          READ      CONTROLF,THIRTY3;*71,PRCNNAME,PRCNTELE,PRCNADDR,PRCNJOUR:
                                    *164,PRCNSDAT,PRCNLAYT,*213,PRCNDAPS
          READ      CONTROLF,THIRTY4;*199,PRCNAFEE,*226,PRCNNRND,*231,PRCNPJCI
.
          MOVE      ZERO,CHKMPRAC
          MOVE      ZERO,NBNKDEPS
          MOVE      ZERO,CURRDEP
.
          MATCH     "IBAPRI20",PRGID
          GOTO      PRIPR020 IF EQUAL
          MATCH     "IBAPRI19",PRGID
          GOTO      PRIPR020 IF EQUAL
          MATCH     "IBAPRI37",PRGID
          GOTO      PRIPR020 IF EQUAL
.
          MOVE      ONE,CHKMPRAC
.
PRIPR020  MATCH     "1",IBCNUMCI            * Using medclaims
          IF        @EQUAL
            OPEN      HICITIA1,"hicitiaf"
          ENDIF
       
          MOVE      FALSE,EXIT
          MOVE      ZERO,CRDNFLAG
          MOVE      FALSE,FLAGEND3
          UNPACK    SP70,SAVPRAC,SAVCLAIM,SAVSDOCT,SAVRDOCT,SAVPIND
          MOVE      ZERO,SAVUNIQ
          MOVE      SP8,SAVRDATE
          UNPACK    SP70,VRFDCNAM,VRFDOCT,VRFDPROV,VREFERD,REFDATE
          PACK      KEY80,SP30,SP30,SP30
          CALL      RSTMPR2
.
.------ read through the temp file ------
.
PRIPR100  CALL      RKTMPR2
          BRANCH    OVRCD,PRIPR900
          MOVE      TMPITEM,TMPOITEM        * save original TMPITEM   *I-123419
          MOVE      TMPSITEM,TMPOSITM       * save original TMPSITEM  *I-123419
          MATCH     SP9,TMPSTEP             * is item stepdown'ed     *I-123419
          IF        !@EQUAL
            MOVE      TMPSTEP,TMPITEM
            MOVE      TMPSTSB,TMPSITEM
          ENDIF
.
          CALL      CHBUL000                * check for bulk billed patient
.
          MATCH     SP6,SAVPRAC             * see if we have the first record
          GOTO      PRIPR500 IF EQUAL
.
          COMPARE   TMPUIDEN,SAVUNIQ        * match unique id
          GOTO      PRIPR400 IF NOT EQUAL
.
          MATCH     SAVPRAC,TMPPRAC         * match practices
          GOTO      PRIPR400 IF NOT EQUAL
.
          MATCH     SAVCLAIM,TMPCLAIM       * match claim codes
          GOTO      PRIPR400 IF NOT EQUAL
.
          MATCH     SAVSDOCT,TMPSDOCT       * match service doctors
          GOTO      PRIPR400 IF NOT EQUAL
.
          CALL      GPIND0000               * get patient indicator
          MATCH     SAVTCIND,TCINDC1        * match patient indicator
          GOTO      PRIPR400 IF NOT EQUAL
.
.------ see if we need to print referring doctor details ------
.
PRIPR200  MATCH     SAVRDOCT,TMPRDOCT       * same referral doctor?
          GOTO      PRIPR250 IF NOT EQUAL   * no
.
          MATCH     SAVRDATE,TMPRDATE       * same referral date?
          GOTO      PRIPR250 IF NOT EQUAL   * no
.
          GOTO      PRIPR300                * ref. details are same as previous
.
PRIPR250  CALL      LDREF000                * load the referring doctor details
          CALL      PRDOC000                * print referring doctor details
.
.------ continue processing the current transaction ------
.
PRIPR300  CALL      WRDTRP00                * write to debtors transaction file
          CALL      DSINV000                * display invoice on screen
.
          IF        TMPIFLAG <> TWO
            CALL      PRINV000                * print the current transaction
          ENDIF
.
          CALL      UPINV000                * update the invoice file
          CALL      WRBUL000                * write to the bulk billing file if
.                                             appropriate
          CALL      WRHIS000                * write to the test history file
          CALL      UPFIN000                * update the financial summary file
          CALL      WRHIC000                * check if need to write to hic inv
.
          GOTO      PRIPR100
.
.------ we have had a change in medical practice, claim code, or service ------
.------ doctor so print the end of the current invoice ------
.
PRIPR400  CALL      LDTAL000                * load the invoice tail details
          CALL      CASHD000                * process cash deposits
          CALL      DSITL000                * display invoice tail
          CALL      PRITL000                * print the invoice tail
          CALL      UPSTI000                * update financial statistics file
          CALL      DEHTR000                * delete holding file transactions
.                                             and update the referral file
          IF        WEBFLAG=0
            CALL      CLSPRINT              * close and print the spool file
          ENDIF
.
.------ get the new invoice number and print the header details ------
.
PRIPR500  MOVE      TMPPRAC,SAVPRAC
          MOVE      TMPCLAIM,SAVCLAIM
          MOVE      TMPSDOCT,SAVSDOCT
          MOVE      TMPUIDEN,SAVUNIQ
          MOVE      TMPPIND,SAVPIND
          MOVE      SP6,SAVRDOCT
.
          CALL      GPIND000                * get patient indicator from codes
          MOVE      TCINDC1,SAVTCIND          file - returns SAVTCIND
.
          IF        WEBFLAG=0
            CALL      OPNPRINT                * open the spool file
          ENDIF
          CALL      GENIN000                * generate the invoice number
          CALL      WRINV000                * write a new invoice record
          CALL      UPDCL000                * update the relevant claim files
.                                             and load the claim details 
          CALL      LDHED000                * load the header details
          CALL      DISHD000                * display inv. header on the screen
          CALL      PIHED000                * print invoice header and claim 
.                                             details if appropriate
          GOTO      PRIPR200
.
.------ we have reached the end of the temp file so display the tail ------
.------ details for for current invoice ------
.
PRIPR900  MOVE      TRUE,FLAGEND3
          CALL      LDTAL000                * load the invoice tail details
          CALL      CASHD000                * process cash deposits
          CALL      DSITL000                * display invoice tail
          CALL      PRITL000                * print the invoice tail
          CALL      UPSTI000                * update financial statistics file
          CALL      DEHTR000                * delete holding file transactions
.                                             and update the referral file
          IF        WEBFLAG=0
            CALL      CLSPRINT              * close and print the spool file
          ENDIF
.
          MATCH     "1",PTCNWSIN
          IF        @EQUAL
            CALL      WRIMW000                * check if webservices raise claim
          ELSE
            CALL      WRECT000                * check if eclipse raise and claim
          ENDIF
.
          GOTO      PRIPR999
.
.------ the interface file does not exist ------
.
PRIPR990  DISPLAY   *P1:24,*EL,*B,*V2LON,"File ",FILEOPEN," not found.    ";
          CALL      HITENTER
          MOVE      TRUE,EXIT
.
PRIPR999  CLOSE     TMPCASH,DELETE
          RETURN
+
.**********************************************************************
.*                               CHBUL000                             *
.*           Check to see if this patient is to be Bulk Billed        *
.**********************************************************************
CHBUL000  MOVE      FALSE,FLAGBULK          * initialise the bulk bill flag
.
          MATCH     SP3,TMPBULK             * see if bulk bill code exists
          GOTO      CHBUL999 IF EQUAL
.
          PACK      KEY5,CODEGB,TMPBULK
          CALL      RDCODE1                 * read the patient codes file
          BRANCH    OVRCD,CHBUL999
.
          MOVE      ONE,COUNTR
.
          WHILE     COUNTR < SIX
             LOAD   TEMPINDC,COUNTR,TCINDC1,TCINDC2,TCINDC3,TCINDC4,TCINDC5
.
             TYPE   TEMPINDC                * see if we have a number
             GOTO   CHBUL300 IF EQUAL
             REP    "C1W2V3H4S5M6",TEMPINDC
.
             TYPE   TEMPINDC                * see if we have a number
             GOTO   CHBUL300 IF NOT EQUAL
             MOVE   TRUE,FLAGBULK           * set bulk billing flag
             GOTO   CHBUL999
.
.------ increment the counter and continue loop ------
.
CHBUL300     ADD    ONE,COUNTR
          DO
.
CHBUL999  RETURN
+
.**********************************************************************
.*                               GENIN000                             *
.*          Routine to generate the next invoice number               *
.**********************************************************************
GENIN000  MOVE      " 33",PRXCODE   * System Lock Sector 33
          CALL      GETSLK00        * Get System Lock of Sector 33
          READ      CONTROLF,THIRTY3;*43,PRCNINVN
          ADD       ONE,PRCNINVN
          WRITAB    CONTROLF,THIRTY3;*43,PRCNINVN
          CALL      RELSLK00        * Release System Lock of Sector 33
.
          SUB       ONE,PRCNINVN
          MOVE      PRCNINVN,KEY8
          CALL      RDPRIN1                 * read the private practice invoice
          BRANCH    OVRCD,GENIN999            file
          GOTO      GENIN000
.
GENIN999  RETURN
+
.**********************************************************************
.*                               WRINV000                             *
.*              Routine to write a new invoice record                 *
.**********************************************************************
WRINV000  PACK      PRINDATE,CCC,CYY,CMM,CDD
          REP       " 0",PRINDATE
..          MOVE      PRDBSNAM,PRINNAME
          LOAD      PRINNAME,TMPSCAN,PSNAME
          MOVE      TMPDEBT,PRINDEBT
          MOVE      TMPSCAN,PRINSCAN
          MOVE      TMPUIDEN,PRINUNIQ
          MOVE      TMPPRAC,PRINPRAC
          MOVE      TMPSDOCT,PRINDOCT
          MOVE      TMPCLAIM,PRINCLAM
          MOVE      TMPCLNUM,PRINCNUM
          MOVE      TMPADATE,PRINADTE
          MOVE      ZERO,PRINITOT
          MOVE      ZERO,PRINPAMT
          MOVE      ZERO,PRINHAMT
          MOVE      ZERO,PRINIAMT
          MOVE      ZERO,PRINMAMT
          MOVE      ZERO,PRINVAMT
          MOVE      ZERO,PRINOTHA
          MOVE      ZERO,PRINJAMT
          MOVE      ZERO,PRINPEND
          MOVE      ONE,PRINTRAN
          MOVE      TMPRESP,PRINNAMR
          MOVE      TMPRADD1,PRINPRA1
          MOVE      TMPRADD2,PRINPRA2
          MOVE      TMPRADD3,PRINPRA3
          MOVE      TMPRADD4,PRINPRA4
          MOVE      TMPRPOST,PRINPOST
          MOVE      TMPRPTEL,PRINTELP
          MOVE      TMPRBTEL,PRINTELB
          MOVE      TMPRMPHN,PRINMPHN
          MOVE      TMPRREL,PRINRELP
          MOVE      ZERO,PRINGSTA
          MOVE      ZERO,PRINGSTJ
          MOVE      "0",PRINCNST
          MOVE      ZERO,PRINCNTT
          PACK      PRINSPAR,SP20,SP3
          MOVE      PRCNINVN,KEY8
          UNPACK    SP70,PRINUDAT,PRINUTIM,PRINUUID
          PACK      PRINCDAT,CCC,CYY,CMM,CDD
          REP       " 0",PRINCDAT             * date created
          CLOCK     TIME,PRINCTIM             * time created
          MOVE      USERID,PRINCUID           * web user id
.
          CALL      WRPRIN1                 * write to the private practice
.                                             invoice file
.                                                                     *I-210835
          IF        PRINSCAN = 1
            PROC      FLAGDEBP                * Flag PMI Outstanding Debt
          ENDIF
.
WRINV999  RETURN
.
.**********************************************************************
.*                               WRHIC000                             *
.*                  Write to HIC invoice file                         *
.**********************************************************************
WRHIC000  MATCH     "1",IBCNUMCI            * Using medclaims
          GOTO      WRHIC999 IF NOT EQUAL
          MATCH     SP70,TMPHICI
          GOTO      WRHIC999 IF EQUAL
.
          MOVE      PRCNINVN,HCITINVN        * invoice number
          MOVE      PRINDATE,HCITIDAT        * invoice date
          MOVE      PRDTAMNT,HCITIINV        * item invoice amount
          UNPACK    TMPHICI,HCITCLMN,HCITVISN,HCITTRAN
          MOVE      SP70,HCITSPAR
.
          PACK      KEY26,HCITINVN,HCITCLMN,HCITVISN,HCITTRAN
          CALL      RAHCITI1
          COMPARE   ZERO,OVRCD
          GOTO      WRHIC999 IF EQUAL        * already exist
          CALL      WRHCITI1
WRHIC999  RETURN
+
.**********************************************************************
.*                               WRBUL000                             *
.*      Routine to write to the bulk billing file if appropriate      *
.**********************************************************************
WRBUL000  COMPARE   ZERO,FLAGBULK           * skip if we are not bulk billing
          GOTO      WRBUL999 IF EQUAL         the patient
.
          OPEN      PRIBULK1,"pribulkf"
          MOVE      ZERO,PRBBCLAM
          MOVE      TMPSDOCT,PRBBDOCT
          MOVE      TMPBULK,PRBBBULK
          MOVE      TMPBCODE,PRBBCODE
          MOVE      TMPMASS,PRBBMEDN
          MOVE      SP8,PRBBDATE
          MOVE      ZERO,PRBBSTAT
          MOVE      SP8,PRBBRDAT
          MOVE      SP3,PRBBREGR
          MOVE      PRDTAMNT,FORM8P2
.
          IF        IBCNUGST=2
            CALL      GGST0000             * Get GST Amount
            MOVE      FORM8P2,PRBBGSTM
            MULT      IBGEAMNT,PRBBGSTM    * GST amount
            DIV       "100.00",PRBBGSTM    * Divide by 100 to get wanted fig.
          ENDIF
.
          MOVE      FORM8P2,PRBBAMNT
          MOVE      ZERO,PRBBPAID
          MOVE      ZERO,PRBBDISC
          MOVE      SP30,PRBBSPAR
          MOVE      PRCNINVN,PRBBINVN
          MOVE      TMPITEM,PRBBITMN
          PACK      KEY28,PRBBCLAM,PRBBINVN,PRBBITMN,PRBBREGR
.
          CALL      RDPRBB1
          IF        OVRCD=1
            CALL      WRPRBB1                 * write to the bulk billing file
          ELSE
            ADD       FORM8P2,PRBBAMNT
            CALL      UPPRBB1
          ENDIF
.
WRBUL999  CLOSE     PRIBULK1
          RETURN
+
.**********************************************************************
.*                               WRHIS000                             *
.*     Routine to write a record to the test history file if required *
.**********************************************************************
WRHIS000  IF        TMPMAXR = 0
            GOTO      WRHIS999               * no test history required
          ENDIF
.                                           * original Item & Sub-item are saved
.                                           * in TMPOITEM & TMPOSITM
          PACK      KEY37,TMPDEBT,TMPSCAN,TMPSDATE,TMPSTIME,TMPIFLAG:
                          TMPOITEM,TMPOSITM
          CALL      RDPRTH1
          IF        OVRCD = 1
            MOVE      TMPSERVS,PRTHNUMB      * number of procedures
            CALL      WRPRTH1
          ELSE
            ADD       TMPSERVS,PRTHNUMB      * number of procedures
            CALL      UPPRTH1
          ENDIF
WRHIS999  RETURN
+
.**********************************************************************
.*                               UPDCL000                             *
.*     Routine to update the relevant claim file with the invoice     *
.*     number and load the claim details to print if required         *
.**********************************************************************
UPDCL000  MOVE      ZERO,COUNTR
          MOVE      SP3,CLAIMTYP
          MOVE      SP20,CLAIMNUM
          MOVE      SP10,CLAIMDTE
          MOVE      SP30,EMPLNAME
.
          MATCH     SP3,TMPCLAIM            * see if the claim type exists
          GOTO      UPDCL999 IF EQUAL
.
          PACK      KEY5,CODECL,TMPCLAIM
          CALL      RDCODE1                 * read the patient codes file
          BRANCH    OVRCD,UPDCL999
.
.------ check the next patient indicator ------
.
UPDCL100  ADD       ONE,COUNTR
.
          COMPARE   SIX,COUNTR               * see if no more indicators to
          GOTO      UPDCL999 IF EQUAL         process
.
          LOAD      INDICATR,COUNTR,TCINDC1,TCINDC2,TCINDC3,TCINDC4,TCINDC5
.
          CMATCH    ANSW,INDICATR           * see if we have a workers
          GOTO      UPDCL200 IF EQUAL         compensation claim
.
          CMATCH    ANSM,INDICATR           * see if we have a M.A.B. claim
          GOTO      UPDCL300 IF EQUAL         
.
          CMATCH    ANSV,INDICATR           * see if we have a veterans affairs
          GOTO      UPDCL400 IF EQUAL         claim
          GOTO      UPDCL100
.
. ------- Workers Compensation -------
.
UPDCL200  OPEN      PRIWCOM1,"priwcomf"
          PACK      KEY16,ZEROUR,TMPCLNUM
          CALL      RDPRWC1                 * read the workers compensation
          BRANCH    OVRCD,UPDCL299            claim file
.
          MOVE      PRCNINVN,PRWCINVN
          CALL      UPPRWC1                 * update the workers compensation
.                                             claim file
          MATCH     SP3,CLAIMTYP            * see if the claim type exists
          GOTO      UPDCL299 IF NOT EQUAL
.
          MOVE      "WC ",CLAIMTYP
          MOVE      PRWCCLMN,CLAIMNUM
          MOVE      PRWCNAME,EMPLNAME
.
          MATCH     SP8,TMPADATE            * see if the accident date exists
          GOTO      UPDCL299 IF EQUAL
.
          UNPACK    TMPADATE,CCENT,CYEAR,CMON,CDAY
          CALL      PACDATE                 * pack the date
          MOVE      CPCDATE,CLAIMDTE
.
.------ close the workers compensation claim file ------
.
UPDCL299  GOTO      UPDCL100
.
. ------- Motor Accident Board -------
.
UPDCL300  OPEN      PRIMABD1,"primabdf"
          PACK      KEY16,ZEROUR,TMPCLNUM
          CALL      RDPRMA1                 * read the transport accident 
          BRANCH    OVRCD,UPDCL399            commission file
          MOVE      PRCNINVN,PRMAINVN
          CALL      UPPRMA1                 * update the transport accident
.                                             commission file
          MATCH     SP3,CLAIMTYP            * see if the claim type exists
          GOTO      UPDCL399 IF NOT EQUAL
          MOVE      "TAC",CLAIMTYP
          MOVE      PRMAREFN,CLAIMNUM
.
          MATCH     SP8,TMPADATE            * see if the accident date exists
          GOTO      UPDCL399 IF EQUAL
.
          UNPACK    TMPADATE,CCENT,CYEAR,CMON,CDAY
          CALL      PACDATE                 * pack the date
          MOVE      CPCDATE,CLAIMDTE
.
.------ close the transport accident commission file ------
.
UPDCL399  GOTO      UPDCL100
.
. ------- Veterans Affairs -------
.
UPDCL400  OPEN      PRIVAFD1,"privafdf"
          PACK      KEY16,ZEROUR,TMPCLNUM
          CALL      RDPRVA1                 * read the veterans affairs file
          BRANCH    OVRCD,UPDCL499
          MOVE      PRCNINVN,PRVAINVN
          CALL      UPPRVA1                 * update the veterans affairs file
.
          MATCH     SP3,CLAIMTYP            * see if the claim type exists
          GOTO      UPDCL499 IF NOT EQUAL
          MOVE      "VA ",CLAIMTYP
          MOVE      PRVACLAM,CLAIMNUM
.
.------ close the veterans affairs file ------
.
UPDCL499  GOTO      UPDCL100
.
UPDCL999  RETURN
+
.**********************************************************************
.*                                LDHED000                            *
.*              Load the details for the invoice header               *
.**********************************************************************
LDHED000  MOVE      "** Unknown Medical Practice **",PRPRDESC
          MOVE      TMPPRAC,KEY6
          CALL      RDPRPR1                 * read the medical practice file
.
          MOVE      TMPSDOCT,VSVDOCT
          MOVE      "                              ",VSVDCNAM
          MOVE      "                              ",PRIMTYPE
          MOVE      SP10,VSVDPROV
.          MOVE      "ERROR - Unknown Doctor Code   ",VSVDCNAM
.          MOVE      "ERROR - Unknown Doctor Type   ",PRIMTYPE
          PACK      KEY10,VSVDOCT,SP10
          CALL      RDPMHCP1                * read the doctors file
          BRANCH    OVRCD,LDHED999
.
          MOVE      PMHCSNAM,PACSNAME
          MOVE      PMHCGNAM,PACGNAME
          MOVE      PMHCTITL,PACTITLE
          MOVE      ONE,PACFRMT
          CALL      PACNAME                 * pack the doctors name
          MOVE      PACFNAME,VSVDCNAM
          MOVE      PMHCPRV1,VSVDPROV
.
          MATCH     SP3,PMHCSPC1            * see if the doctors type exists
          GOTO      LDHED999 IF EQUAL
.
          PACK      KEY5,CODEDT,PMHCSPC1
          CALL      RDCODE1                 * read the patient codes file
          BRANCH    OVRCD,LDHED999
          MOVE      TDESC,PRIMTYPE
.
LDHED999  RETURN
+
.**********************************************************************
.*                               DISHD000                             *
.*           Display the invoice header details on the screen         *
.**********************************************************************
DISHD000  BRANCH    FLAGBULK,DISHD999       * skip if bulk billing the patient
.
          UNPACK    PRINDATE,CCENT,CYEAR,CMON,CDAY
          DISPLAY   *P1:10,*EF,*P1:11,"Service Doctor : ":
                    *V2LON,VSVDOCT,SP2,VSVDCNAM,*HOFF,*P56:11,"Invoice Date : ":
                    *V2LON,CDAY,SLASH,CMON,SLASH,CCENT,CYEAR;
.
.
          IF        IBCNUGST=2
            DISPLAY   *P1:12,"   Date   ":
                      *P12:12,"Code     ",*P22:12,"Description             ":
                      *P22:13,*ULON,"No. of Services      ",*P40:13,"GST Exc.":
                      *P54:13,"GST Amount ",*P70:13,"     Amount";
            MOVE      TEN4,CVERT
          ELSE
            DISPLAY   *P1:12,*ULON,"   Date   ":
                      *P12:12,"Code     ",*P22:12,"Description             ":
                      *P47:12,"No. of Services      ",*P70:12,"     Amount";
            MOVE      TEN3,CVERT
          ENDIF
.
          MOVE      ZERO,INVTOTAL
          MOVE      ZERO,GSTTOTAL
          MOVE      ZERO,CURRDEP
          DISPLAY   *P1:23,"Generating Invoice : ",*V2LON,PRCNINVN;
.
DISHD999  RETURN
+
.**********************************************************************
.*                               LDREF000                             *
.*          Routine to load the referring doctor details              *
.**********************************************************************
LDREF000  MOVE      TMPREFD,VREFERD
          MOVE      TMPRDOCT,VRFDOCT
          MOVE      TMPRDOCT,SAVRDOCT
          MOVE      TMPRDATE,SAVRDATE
          MOVE      SP10,REFDATE
          MOVE      SP10,RPERIOD
.
          MATCH     SP8,TMPRDATE            * see if the referral date exists
          GOTO      LDREF100 IF EQUAL
.
          UNPACK    TMPRDATE,CCENT,CYEAR,CMON,CDAY
          CALL      PACDATE                 * pack date into the required format
          MOVE      CPCDATE,REFDATE
.
          PACK      KEY5,ANSR,ANSF,TMPREFP
          CALL      RDCODE1
          IF        OVRCD=0
            MOVE      TDESC,RPERIOD
          ENDIF
.------ load the rest of the referring doctor details ------
.
LDREF100  MOVE      "                              ",VRFDCNAM
          MOVE      SP10,VRFDPROV
.          MOVE      "DOCTOR - Unknown Doctor Code  ",VRFDCNAM
.
          MOVE      SP70,VREFRPER
          PACK      KEY27,TMPUIDEN,TMPPRAC,TMPSDOCT,TMPPIND,SP70
          CALL      RDPRHR1
          IF        OVRCD=0
            MATCH     SP70,PRHRRFPD
            IF        !@EQUAL & !@EOS
              PACK      KEY5,ANSR,ANSF,PRHRRFPD,SP70
              CALL      RDCODE1
              IF        OVRCD=0
                MOVE      TDESC,VREFRPER
              ENDIF
            ENDIF
.
            MATCH     SP70,PRHRREFD
            IF        !@EQUAL & !@EOS
              OPEN      PMSHCLA1,"pmshclaf"
              PACK      KEY20,PRHRREFD,PRHRHCPP,SP70
              CALL      RDPMHCL1
              IF        OVRCD=0
                MATCH     SP70,PMHLPRV1
                IF        !@EQUAL
                  MOVE      PMHLPRV1,VRFDPROV  * provider from a Linked Practice
                ENDIF
              ENDIF
            ENDIF
          ENDIF
.
          PACK      KEY10,VRFDOCT,SP10
          CALL      RDPMHCP1                * read the patient Doctors file
          BRANCH    OVRCD,LDREF999
.
          MOVE      PMHCSNAM,PACSNAME
          MOVE      PMHCGNAM,PACGNAME
          MOVE      PMHCTITL,PACTITLE
          MOVE      ONE,PACFRMT
          CALL      PACNAME                 * pack the doctor's name
          MOVE      PACFNAME,VRFDCNAM
          MATCH     SP70,VRFDPROV
          IF        @EQUAL
            MOVE      PMHCPRV1,VRFDPROV
          ENDIF
.
LDREF999  RETURN
+
.**********************************************************************
.*                                WRDTRP00                            *
.*            Routine to write to the debtors transaction file        *
.**********************************************************************
WRDTRP00  CALL      CLPRIDTR
.
          MOVE      ONE,PRDTTRAN 
          MOVE      TMPDEBT,PRDTDEBT
          MOVE      TMPSCAN,PRDTSCAN
          MOVE      TMPSDATE,PRDTSDAT
          MOVE      TMPRDATE,PRDTRDTE
          MOVE      TMPSTIME,PRDTSTIM
          MOVE      TMPIDESC,PRDTDESC
          MOVE      TMPPRAC,PRDTPRAC
          MOVE      TMPSDOCT,PRDTDOCT
          MOVE      TMPSERVS,PRDTSERV
          MOVE      TMPRDOCT,PRDTREFD
          MOVE      TMPREFP,PRDTRFPD
          MOVE      TMPREFD,PRDTREFT
          MOVE      TMPCLAIM,PRDTCLAM
          MOVE      TMPPIND,PRDTCODE
          MOVE      TMPMESG,PRDTMESS
          MOVE      TMPOPS,PRDTOPS
          MOVE      ONE,PRDTRTYP
          MOVE      TMPIFLAG,PRDTIFLG
.
          MOVE      TMPITEM,PRDTITMN
          MOVE      TMPSITEM,PRDTSUBN
          MOVE      TMPMFLAG,PRDTMFLG
          MOVE      TMPGSTA,PRDTGSTA
          MOVE      TMPGSTC,PRDTGSTC
          MOVE      TMPREFN,PRDTREFN
          MOVE      TMPENCN,PRDTENCN
          MOVE      ZERO,PRDTGSTM
          MOVE      "0",PRDTAPAY
          MOVE      TMPPFLAG,PRDTPFLG
          MOVE      TMPS4B3,PRDTS4B3
          MOVE      TMPHOSI,PRDTHOSI
          MOVE      TMPROVC,PRDTROVC
          MOVE      TMPDSKM,PRDTDSKM
.
          PACK      KEY22,TMPIFLAG,TMPITEM,TMPSITEM,TMPSDATE
          CALL      RDPRIT1                 * read the item file
          COMPARE   ZERO,OVRCD
          GOTO      WRDTRP10 IF EQUAL
.
          CALL      RPPRIT1                 * get the previous record on the 
          BRANCH    OVRCD,WRDTRP20            item file
.
          MATCH     PRITSUBN,TMPSITEM       * see if we have the same sub-item
          GOTO      WRDTRP20 IF NOT EQUAL
.
          MATCH     PRITITMN,TMPITEM        * see if we have the same item
          GOTO      WRDTRP20 IF NOT EQUAL
.
          COMPARE   PRITFLAG,TMPIFLAG       * see if we have the item type
          GOTO      WRDTRP20 IF NOT EQUAL
.
.------ we have a set code ------
.
WRDTRP10  MOVE      PRITSETC,PRDTSETC
          GOTO      WRDTRP30
.
.------ assume no set code, and not a fixed charged item -------
WRDTRP20  MOVE      SP3,PRDTSETC
          MOVE      TWO,PRITFIXD        * not fixed charged
.
.------ set up the rest of the variables ------
.
WRDTRP30  MOVE      "DB",PRDTTTYP
          MOVE      ONE,PRDTINVP
          MOVE      TMPUDEF1,PRDTUDF1
          MOVE      TMPUDEF2,PRDTUDF2
          MOVE      TMPUDEF3,PRDTUDF3
          MOVE      TMPUDEF4,PRDTUDF4
          MOVE      TMPADMN,PRDTADMN
          MOVE      TMPMASS,PRDTMEDA
          PACK      PRDTEFFD,CCC,CYY,CMM,CDD
          REP       " 0",PRDTEFFD
          MOVE      TMPACOI,PRDTACOI 
          MOVE      TMPTDUR,PRDTTDUR
          MOVE      TMPRPER,PRDTRPER
          MOVE      TMPROVR,PRDTROVR
          MOVE      TMPMPOV,PRDTMPOV
          MOVE      TMPDSOV,PRDTDSOV
          MOVE      TMPSTXT,PRDTSTXT
          MOVE      TMPASPF,PRDTASPF
          MOVE      TMPASPC,PRDTASPC
.          MOVE      TMPAICF,PRDTAICF
          MOVE      TMPAICV,PRDTAICV
          MOVE      TMPNMPT,PRDTNMPT
          MOVE      TMPLSPN,PRDTLSPN
          MOVE      TMPSDCD,PRDTSDCD
          MOVE      TMPLVIS,PRDTLVIS
.
.         Calculate the appropriate percentage of the schedule fee for
.         this practice, doctor, claim code and patient indicator
.
          MOVE      ONEHUND,PRDOFEEP
          PACK      KEY22,TMPPRAC,TMPSDOCT,TMPCLAIM,TMPPIND
          CALL      RDPRDO1                 * read the private practice doctor
.                                             file
          MOVE      TMPITOT,TEMPTOTV
          MULT      TMPSERVS,TEMPTOTV       * Total Amount
          MOVE      TMPITOT,TEMPAMNT
          MULT      TMPSERVS,TEMPAMNT       * Total Amount
          CALL      GETAJ000                * get the adjusted amount
          MOVE      TEMPAMNT,PRDTAMNT
.
          MOVE      TMPIAMNT,TEMPTOTV
          MOVE      TMPIAMNT,TEMPAMNT
          CALL      GETAJ000                * get the adjusted amount
          MOVE      TEMPAMNT,PRDTIAMT
.
          IF        IBCNUGST=2
            CALL      GGST0000             * Get GST Amount
            MOVE      PRDTAMNT,FORM8P2
            MULT      IBGEAMNT,FORM8P2     * GST amount
            DIV       "100.00",FORM8P2     * Divide by 100 to get wanted fig.
            MOVE      FORM8P2,PRDTGSTM
            IF        PRCNDAPS=1
              IF        PRDTRTYP=1 | PRDTRTYP=3
                MOVE      "1",PRDTAPAY
              ENDIF
            ENDIF
          ENDIF
.
.------ read the debtors transaction file with the current debtor number ------
.
WRDTRP40  PACK      KEY22,TMPUIDEN,PRCNINVN,PRDTTRAN
          CALL      RAPRDT1                 * read the private practice debtors
          BRANCH    OVRCD,WRDTRP50            transaction file
          ADD       ONE,PRDTTRAN
          GOTO      WRDTRP40
.
.------ write to the private practice debtors transaction file ------
.
WRDTRP50  CALL      WRPRDT1
          ADD       ONE,PRDTTRAN
.
WRDTRP99  RETURN
+
.***************************************************************************
.*                              ISEXC000               Called by: WRDTRP00 *
.*                    Check for an exception charge                        *
.***************************************************************************
ISEXC000  OPEN      PRIEXCA1,"priexcaf"
          PACK      KEY25,TMPCLAIM,TMPIFLAG,TMPITEM,TMPSITEM,TMPSDATE
          CALL      RDPREX1
          IF        OVRCD = 0
            MOVE      ONE,EXIT                   * exception charge applies
            GOTO      ISEXC900
          ENDIF
.
ISEXC100  CALL      RPPREX1
          BRANCH    OVRCD,ISEXC800
.
          MATCH     TMPCLAIM,PREXCLM             * same claim code ?
          GOTO      ISEXC800 IF NOT EQUAL        * no
.
          COMPARE   TMPIFLAG,PREXFLAG            * same item type ?
          GOTO      ISEXC800 IF NOT EQUAL        * no
.
          MATCH     TMPITEM,PREXITMN             * same item number ?
          GOTO      ISEXC800 IF NOT EQUAL        * no
.
          MATCH     TMPSITEM,PREXSUBN            * same item number ?
          GOTO      ISEXC800 IF NOT EQUAL        * no
.
          MATCH     PREXDAT1,TMPSDATE            * service date < start date ?
          GOTO      ISEXC100 IF LESS             * yes, try another record
.
          MATCH     SP8,PREXDAT2                 * do we have an ending date ?
          IF        !@EQUAL
            MATCH     TMPSDATE,PREXDAT2          * ending date < service date ?
            GOTO      ISEXC800 IF LESS           * yes
          ENDIF
.
          MOVE      ONE,EXIT                     * exception charge applies
          GOTO      ISEXC900
.
ISEXC800  MOVE      ZERO,EXIT                    * no exception charging
.
ISEXC900  CLOSE     PRIEXCA1
ISEXC999  RETURN
+
.**********************************************************************
.*                                GETAJ000                            *
.*      Routine to get an adjusted invoice amount if appropriate      *
.**********************************************************************
GETAJ000  BRANCH    PRITFIXD,GETAJ999       * fixed charge item
.
.         If an exception charge applies, just use that charge
.
          CALL      ISEXC000                * exception charge apply?
          IF        EXIT = 1
            IF        PRITKEYI = 0
              MOVE      PREXCHRG,TEMPAMNT   * use this charge
            ENDIF
            GOTO      GETAJ999              * don't apply doctor percentage
          ENDIF
.
.         Modify the charge by the doctor's percentage
.
          MOVE      TEMPAMNT,FORM8P4
          MULT      PRDOFEEP,FORM8P4
          DIV       ONEHUND,FORM8P4
          MOVE      FORM8P4,TEMPAMNT
.
          MATCH     "1",PRCNNRND
          GOTO      GETAJ020 IF EQUAL       * No rounding
.
          MOVE      TEMPAMNT,VDIM15
.
          CALL      ROUND000                * round the amount to the nearest
.                                             highest 5 cents
          ADD       FORM0P2,TEMPAMNT
.
GETAJ020  COMPARE   FORM85P0,PRDOFEEP       * see if we are charging 85% of
          GOTO      GETAJ999 IF NOT EQUAL     the scheduled fee
.
          MATCH     SP3,TMPPIND             * see if the patient indicator
          GOTO      GETAJ999 IF EQUAL         exists
.
          PACK      KEY5,CODEGI,TMPPIND
          CALL      RDCODE1                 * read patient codes file
          BRANCH    OVRCD,GETAJ999
.
          MATCH     ANSO,TCINDC1            * see if we have an outpatient
          GOTO      GETAJ999 IF NOT EQUAL
.
.****** we are not sure at the moment whether or not we need the test ******
.****** for a medicare patient ******
.
...        MATCH     SP3,TMPCLAIM            * see if the claim type exists
...        GOTO      GETAJ999 IF EQUAL         
..
...        PACK      KEY5,CODECL,TMPCLAIM
...        CALL      RDCODE1                 * read patient codes file
...        BRANCH    OVRCD,GETAJ999
..
...        MATCH     ANSC,TCINDC1            * see if we have a medicare type
...        GOTO      GETAJ999 IF NOT EQUAL     claim
.
          MOVE      TEMPTOTV,FORM8P2
          SUB       TEMPAMNT,FORM8P2
.
          MOVE      PRDTSDAT,KEY8
          CALL      RDPRMG1                 * read the Medicare Gap file
          COMPARE   ZERO,OVRCD
          GOTO      GETAJ100 IF EQUAL
.
          CALL      RPPRMG1                 * get the previous Medicare Gap
          BRANCH    OVRCD,GETAJ999            file record
.
.------ check the gap difference ------
.
GETAJ100  COMPARE   FORM8P2,PRMGVALU        * see if the difference is more 
          GOTO      GETAJ999 IF NOT LESS      than the medicare gap allowed
.
          MOVE      TEMPTOTV,TEMPAMNT
          SUB       PRMGVALU,TEMPAMNT
.
          MATCH     "1",PRCNNRND
          GOTO      GETAJ999 IF EQUAL       * No rounding
.
          MOVE      TEMPAMNT,VDIM15
.
          CALL      ROUND000                * round the amount to the nearest
.                                             highest 5 cents
          ADD       FORM0P2,TEMPAMNT
.
GETAJ999  RETURN
+
.**********************************************************************
.*                                ROUND000                            *
.*     Routine to get the value required to round up an amount to     *
.*     the nearest highest 5 cents                                    *
.**********************************************************************
ROUND000  UNPACK    VDIM15,KEY14,DIM1
          MOVE      DIM1,FORM1
          MOVE      ZERO,FORM0P2
          LOAD      FORM0P2,FORM1,FORMP04,FORMP03,FORMP02,FORMP01,ZERO,FORMP04:
                                  FORMP03,FORMP02,FORMP01
.
ROUND999  RETURN
+
.**********************************************************************
.*                                DSINV000                            *
.*          Routine to display an invoice line on the screen          *
.**********************************************************************
DSINV000  BRANCH    FLAGBULK,DSINV999       * skip if bulk billing the patient
.
          UNPACK    PRDTSDAT,CCENT,CYEAR,CMON,CDAY
          CALL      PACDATE                 * pack the date
.
          MOVE      PRDTAMNT,LINTOTL
          MOVE      "Not Applicable ",HOWPAID
          LOAD      HOWPAID,PRDTMETH,HPCASH,HPCHEQ,HPCRED,HPMERC,HPMONEY
.
          COMPARE   "23",CVERT              * see if the screen is full
          GOTO      DSINV050 IF LESS
          MOVE      TEN3,CVERT
          DISPLAY   *P1:CVERT,*EF;
.
.------ branch on the transaction record type ------
.
DSINV050  BRANCH    PRDTRTYP OF DSINV100,DSINV200,DSINV300
.
DSINV100  MOVE      ZERO,LINGSTA
          MOVE      PRDTIAMT,FORM82
          COMPARE   ZERO,LINTOTL            * see if the total is zero
          GOTO      DSINV150 IF EQUAL
.
          IF        IBCNUGST=2
            CALL      GGST0000
            MOVE      LINTOTL,LINGSTA
            MULT      IBGEAMNT,LINGSTA     * GST amount
            DIV       "100.00",LINGSTA     * Divide by 100 to get wanted fig.
.
            MOVE      LINTOTL,FORM8P2
            ADD       LINGSTA,FORM8P2
            DISPLAY   *P1:CVERT,*EL,CPCDATE,*P12:CVERT,PRDTITMN,SP1,PRDTDESC;
            ADD       ONE,CVERT
            IF        CVERT>23
              MOVE      TEN3,CVERT
              DISPLAY   *P1:CVERT,*EF;
            ENDIF
            DISPLAY   *P22:CVERT,PRDTSERV," X ",FORM82,*P40:CVERT,LINTOTL:
                      *P54:CVERT,LINGSTA,*P70:CVERT,FORM8P2
            ADD       LINGSTA,GSTTOTAL
.
          ELSE
            DISPLAY   *P1:CVERT,*EL,CPCDATE,*P12:CVERT,PRDTITMN,SP1,PRDTDESC:
                      *P47:CVERT,PRDTSERV," X ",FORM82,*P70:CVERT,LINTOTL;
          ENDIF
.
          ADD       ONE,CVERT
          ADD       LINTOTL,INVTOTAL
          GOTO      DSINV999
.
.------ LINTOTL is zero so display everything except LINTOTL ------
.
DSINV150  MOVE      SP4,DISPS4B3
          LOAD      DISPS4B3,TMPS4B3,S4B3
          DISPLAY   *P1:CVERT,*EL,CPCDATE,*P12:CVERT,PRDTITMN,SP1,PRDTDESC:
                    *P47:CVERT,PRDTSERV," X ",FORM82,*P70:CVERT,DISPS4B3;
          ADD       ONE,CVERT
          ADD       LINTOTL,INVTOTAL
          GOTO      DSINV999
.
.------ Transaction is a Cash Receipt ------
.
DSINV200  DISPLAY   *P1:CVERT,*EL,CPCDATE,*P12:CVERT,PRDTDESC:
                    *P47:CVERT,PRDTRECN,*P57:CVERT,HOWPAID,*P70:CVERT,LINTOTL;
          ADD       ONE,CVERT
          ADD       LINTOTL,INVTOTAL
          GOTO      DSINV999
.
.------ Journals ------
.
DSINV300  DISPLAY   *P1:CVERT,*EL,CPCDATE,*P12:CVERT,PRDTDESC:
                    *P47:CVERT," Journal",*P57:CVERT,HOWPAID,*P70:CVERT,LINTOTL;
          ADD       ONE,CVERT
          ADD       LINTOTL,INVTOTAL
.
DSINV999  RETURN
+
.**********************************************************************
.*                                UPFIN000                            *
.*           Routine to update the financial summary file             *
.**********************************************************************
UPFIN000  OPEN      PRIFINS1,"prifinsf"
          OPEN      PRIFIGA1,"prifigaf"
          MOVE      ANSA,PRFNTYPE
          IF        PRCNAFEE=0
            PACK      PRFNCODE,ANSM,PRDTSETC,TMPIFLAG,TMPITEM,TMPSITEM,SP70
          ELSE
           PACK   PRFNCODE,ANSM,TMPSDOCT,PRDTSETC,TMPIFLAG,TMPITEM,TMPSITEM,SP70
          ENDIF
.
          MOVE      PRDTPRAC,PRFNMPRA
          MOVE      PRINDATE,FSTDATE
          MOVE      PRDTAMNT,FSTAMNT
          MOVE      ZERO,FGSTFLAG
          CALL      PRICALFS                * calculate and write to the fins
.
          IF        IBCNUGST=2
            MOVE      PRDTGSTM,FSTAMNT
            MOVE      ONE,FGSTFLAG
            CALL      PRICALFS                * calculate and write to the fins
          ENDIF
.
UPFIN999  RETURN
+
.******************************************************************************
.* GGST0000 : Get percentage of Item GST                                      *
.******************************************************************************
GGST0000  MOVE     ZERO,IBGEAMNT            * Initialise GST percentage amount
          COMPARE  TWO,IBCNUGST
          GOTO     GGST9999 IF NOT EQUAL    * not using Aust.GST
.
          BRANCH   PRDTGSTA,GGST6000        * GST payable
          GOTO     GGST9000                 * GST free
.
GGST6000  OPEN     IBAGEDA1,"ibagedaf"
          MOVE     ZERO,IBGEAMNT             * zero GST percentage
          PACK     KEY8,CCC,CYY,CMM,CDD
          REP      " 0",KEY8
          PACK     KEY14,PRDTGSTC,KEY8
          CALL     RDIBGE1
          COMPARE  ZERO,OVRCD
          GOTO     GGST9000 IF EQUAL         * found GST amount for current date
.
          CALL     RPIBGE1                   * read previous record
          BRANCH   OVRCD,GGST8000
.
          MATCH    PRDTGSTC,IBGECODE         * Same code ?
          GOTO     GGST9000 IF EQUAL
.
GGST8000  MOVE     ZERO,IBGEAMNT
.
GGST9000  CLOSE    IBAGEDA1
GGST9999  RETURN
+
.**********************************************************************
.*                                DEHTR000                            *
.*  Routine to delete records from the Holding file for Transactions  *
.*  and update the Referral File for a given unique identifier        *
.**********************************************************************
DEHTR000  PACK      KEY62,SAVUNIQ,SAVPRAC,SAVSDOCT,SAVPIND,SP30,SP30
          CALL      RSPRHT1                 * position on the transactions
          CALL      RKPRHT1                   holding file
          BRANCH    OVRCD,DEHTR500
.
          COMPARE   PRHTUNIQ,SAVUNIQ        * see if we have the same unique
          GOTO      DEHTR500 IF NOT EQUAL     identifier
.
          MATCH     PRHTPRAC,SAVPRAC        * same practice ?
          GOTO      DEHTR500 IF NOT EQUAL
.
          MATCH     PRHTDOCT,SAVSDOCT       * same service doctor ?
          GOTO      DEHTR500 IF NOT EQUAL
.
          MATCH     PRHTPIND,SAVPIND        * same patient indicator ?
          GOTO      DEHTR500 IF NOT EQUAL
.
          PACK      KEY62,PRHTUNIQ,PRHTPRAC,PRHTDOCT,PRHTPIND,PRHTREFD,PRHTRDAT:
                          PRHTFLAG,PRHTITMN,PRHTSUBN,PRHTNUMB
.
          CALL      DEPRHT1                 * delete fr.Holding Transaction file
          GOTO      DEHTR000
.
.------ position on the holding referral file ------
.
DEHTR500  PACK      KEY27,SAVUNIQ,SAVPRAC,SAVSDOCT,SAVPIND
          CALL      RDPRHR1                 * read the holding referral record
          BRANCH    OVRCD,DEHTR999
.
          MOVE      ZERO,PRHRPINV           * invoice printed
          CALL      UPPRHR1                 * update the holding referral file
.
DEHTR999  RETURN
+
.**********************************************************************
.*                                LDTAL000                            *
.*              Load the details for the invoice tail                 *
.**********************************************************************
LDTAL000  READ      CONTROLF,THIRTY4;*2,PRCNADD1,PRCNADD2,PRCNADD3,PRCNPOST
.
          OPEN      PATMESG1,"patmesgf"
          PACK      PMLINE1,SP30,SP30,SP5
          PACK      PMLINE2,SP30,SP30,SP5
          MOVE      TMPMESG,KEY3
          CALL      RDMESG1                 * read the message file
.
          MOVE      "Unknown Doctor Code",SHORTDOC
          MOVE      VSVDOCT,KEY6
          PACK      KEY10,VSVDOCT,SP10
          CALL      RDPMHCP1                * read the doctor file
          BRANCH    OVRCD,LDTAL999
          PACK      SHORTDOC,PMHCTITL,SP1,PMHCSNAM
.
LDTAL999  RETURN
+
.**********************************************************************
.*                                DSITL000                            *
.*            Routine to display invoice tail on the screen           *
.**********************************************************************
DSITL000  BRANCH    FLAGBULK,DSITL999       * skip if bulk billing the patient
.
          CALL      CHPAG000                * see if we need to paginate
.
          IF        IBCNUGST=2
            ADD       GSTTOTAL,INVTOTAL
          ENDIF
.
          DISPLAY   *P51:CVERT,*V2LON,"Invoice Total  :  ",INVTOTAL;
          ADD       TWO,CVERT
.
          COMPARE   ZERO,CURRDEP            * there is nothing else to display
          GOTO      DSITL999 IF EQUAL         if we have no deposits
.
          CALL      CHPAG000                * see if we need to paginate
.
          DISPLAY   *P51:CVERT,*V2LON,"Payment Total  :  ",CURRDEP;
          ADD       TWO,CVERT
.
          CALL      CHPAG000                * see if we need to paginate
.
          SUB       CURRDEP,INVTOTAL
          DISPLAY   *P51:CVERT,*V2LON,"Outstanding    :  ",INVTOTAL;
.
DSITL999  RETURN
+
.**********************************************************************
.*                               CHPAG000                             *
.*     Routine to check to see if we need to paginate when we are     *
.*     displaying the invoice tail.                                   *
.**********************************************************************
CHPAG000  COMPARE   TWENTY3,CVERT           * see if we have a full screen
          GOTO      CHPAG999 IF LESS
.
          MOVE      TEN3,CVERT
          DISPLAY   *P1:CVERT,*EF;
          ADD       ONE,CVERT
.
CHPAG999  RETURN
+
.**********************************************************************
.*                               UPSTI000                             *
.*      Routine to update the financial statistics invoice total      *
.**********************************************************************
UPSTI000  OPEN      PRISTAT1,"pristatf"
          OPEN      PATDRGA2,"patdrgaf"
          DISPLAY   *P1:24,*EL,*V2LON,*BLINKON,"Adjusting Statistics file.":
                    *HOFF,"  Please wait...";
          PACK      KEY14,PRINDATE,SP6
          CALL      RDSDRGA2                * position on the date range file
          CALL      RDKDRGA2
          BRANCH    OVRCD,UPSTI900
.
          MATCH     DRGFDTE,PRINDATE        * see if the invoice date is in a
          GOTO      UPSTI900 IF LESS          date range
.
          MOVE      DRGYR,PRSTYEAR
          MOVE      DRGNUM,FORM2
          MOVE      PRINPRAC,PRSTPRAC
          MOVE      PRINDOCT,PRSTDOCT
          PACK      KEY20,PRSTYEAR,PRSTPRAC,PRSTDOCT
          CALL      RDPRST1                 * read the private practice 
          BRANCH    OVRCD,UPSTI500            financial statistics file
.
          LOAD      SAVAMT,FORM2,PRSTIP01,PRSTIP02,PRSTIP03,PRSTIP04:
                                 PRSTIP05,PRSTIP06,PRSTIP07,PRSTIP08:
                                 PRSTIP09,PRSTIP10,PRSTIP11,PRSTIP12,PRSTIP13
          ADD       PRINITOT,SAVAMT
          STORE     SAVAMT,FORM2,PRSTIP01,PRSTIP02,PRSTIP03,PRSTIP04:
                                 PRSTIP05,PRSTIP06,PRSTIP07,PRSTIP08:
                                 PRSTIP09,PRSTIP10,PRSTIP11,PRSTIP12,PRSTIP13
.
          CALL      UPPRST1                 * update the private practice
          GOTO      UPSTI900                  financial statistics file
.
.------ Record doesn't exist - create new record with zero opening balance ----
.
UPSTI500  MOVE      ZERO,COUNTR
UPSTI600  ADD       ONE,COUNTR
          COMPARE   COUNTR,FORTY             * see if all fields have been 
          GOTO      UPSTI700 IF LESS          processed
.
          STORE     ZERO,COUNTR,PRSTOBAL,PRSTIP01,PRSTIP02,PRSTIP03,PRSTIP04:
                                PRSTIP05,PRSTIP06,PRSTIP07,PRSTIP08,PRSTIP09:
                                PRSTIP10,PRSTIP11,PRSTIP12,PRSTIP13,PRSTCP01:
                                PRSTCP02,PRSTCP03,PRSTCP04,PRSTCP05,PRSTCP06:
                                PRSTCP07,PRSTCP08,PRSTCP09,PRSTCP10,PRSTCP11:
                                PRSTCP12,PRSTCP13,PRSTJP01,PRSTJP02,PRSTJP03:
                                PRSTJP04,PRSTJP05,PRSTJP06,PRSTJP07,PRSTJP08:
                                PRSTJP09,PRSTJP10,PRSTJP11,PRSTJP12,PRSTJP13
          GOTO      UPSTI600
.
.------ Add amount to appropriate field ------
.
UPSTI700  LOAD      SAVAMT,FORM2,PRSTIP01,PRSTIP02,PRSTIP03,PRSTIP04:
                                 PRSTIP05,PRSTIP06,PRSTIP07,PRSTIP08:
                                 PRSTIP09,PRSTIP10,PRSTIP11,PRSTIP12,PRSTIP13
          ADD       PRINITOT,SAVAMT
          STORE     SAVAMT,FORM2,PRSTIP01,PRSTIP02,PRSTIP03,PRSTIP04:
                                 PRSTIP05,PRSTIP06,PRSTIP07,PRSTIP08:
                                 PRSTIP09,PRSTIP10,PRSTIP11,PRSTIP12,PRSTIP13
          CALL      WRPRST1                 * write to the private practice
.                                             financial statistics file
UPSTI900  DISPLAY   *P1:24,*EL;
UPSTI999  RETURN
+
.**********************************************************************
.*                               UPSTD000                             *
.* Routine to update the financial statistics deposit & journal totals*
.**********************************************************************
UPSTD000  OPEN      PRISTAT1,"pristatf"
          OPEN      PATDRGA2,"patdrgaf"
          OPEN      RCPDTEA1,"rcpdteaf"
          PACK      KEY17,CMDERECN,CMDETCNT
          CALL      RDRCDTE1
          BRANCH    OVRCD,UPSTD900
.
          PACK      KEY14,PRDTSDAT,SP6
          CALL      RDSDRGA2                * position on the date range file
          CALL      RDKDRGA2
          BRANCH    OVRCD,UPSTD900
.
          MATCH     DRGFDTE,PRDTSDAT        * see if the invoice date is in a
          GOTO      UPSTD900 IF LESS          date range
.
          MOVE      DRGYR,PRSTYEAR
          MOVE      DRGNUM,FORM2
          MOVE      PRDTPRAC,PRSTPRAC
          MOVE      PRDTDOCT,PRSTDOCT
          PACK      KEY20,PRSTYEAR,PRSTPRAC,PRSTDOCT
          CALL      RDPRST1                 * read the private practice 
          BRANCH    OVRCD,UPSTD500            financial statistics file
.
          LOAD      SAVAMT,FORM2,PRSTCP01,PRSTCP02,PRSTCP03,PRSTCP04:
                                 PRSTCP05,PRSTCP06,PRSTCP07,PRSTCP08:
                                 PRSTCP09,PRSTCP10,PRSTCP11,PRSTCP12,PRSTCP13
          ADD       RCDTAMNT,SAVAMT         * deposit amount
          STORE     SAVAMT,FORM2,PRSTCP01,PRSTCP02,PRSTCP03,PRSTCP04:
                                 PRSTCP05,PRSTCP06,PRSTCP07,PRSTCP08:
                                 PRSTCP09,PRSTCP10,PRSTCP11,PRSTCP12,PRSTCP13
.
          IF        RCDTDISC<>0
            LOAD      SAVAMT,FORM2,PRSTJP01,PRSTJP02,PRSTJP03,PRSTJP04:
                                   PRSTJP05,PRSTJP06,PRSTJP07,PRSTJP08:
                                   PRSTJP09,PRSTJP10,PRSTJP11,PRSTJP12,PRSTJP13
            SUB       RCDTDISC,SAVAMT        * reverse sign for journals
            STORE     SAVAMT,FORM2,PRSTJP01,PRSTJP02,PRSTJP03,PRSTJP04:
                                   PRSTJP05,PRSTJP06,PRSTJP07,PRSTJP08:
                                   PRSTJP09,PRSTJP10,PRSTJP11,PRSTJP12,PRSTJP13
          ENDIF
          CALL      UPPRST1                 * update the private practice
          GOTO      UPSTD900                  financial statistics file
.
.------ Record doesn't exist - create new record with zero opening balance ----
.
UPSTD500  MOVE      ZERO,COUNTR
UPSTD600  ADD       ONE,COUNTR
          COMPARE   COUNTR,FORTY            * see if all fields have been 
          GOTO      UPSTD700 IF LESS          processed
.
          STORE     ZERO,COUNTR,PRSTOBAL,PRSTIP01,PRSTIP02,PRSTIP03,PRSTIP04:
                                PRSTIP05,PRSTIP06,PRSTIP07,PRSTIP08,PRSTIP09:
                                PRSTIP10,PRSTIP11,PRSTIP12,PRSTIP13,PRSTCP01:
                                PRSTCP02,PRSTCP03,PRSTCP04,PRSTCP05,PRSTCP06:
                                PRSTCP07,PRSTCP08,PRSTCP09,PRSTCP10,PRSTCP11:
                                PRSTCP12,PRSTCP13,PRSTJP01,PRSTJP02,PRSTJP03:
                                PRSTJP04,PRSTJP05,PRSTJP06,PRSTJP07,PRSTJP08:
                                PRSTJP09,PRSTJP10,PRSTJP11,PRSTJP12,PRSTJP13
          GOTO      UPSTD600
.
UPSTD700  LOAD      SAVAMT,FORM2,PRSTCP01,PRSTCP02,PRSTCP03,PRSTCP04:
                                 PRSTCP05,PRSTCP06,PRSTCP07,PRSTCP08:
                                 PRSTCP09,PRSTCP10,PRSTCP11,PRSTCP12,PRSTCP13
          ADD       RCDTAMNT,SAVAMT         * deposit amount
          STORE     SAVAMT,FORM2,PRSTCP01,PRSTCP02,PRSTCP03,PRSTCP04:
                                 PRSTCP05,PRSTCP06,PRSTCP07,PRSTCP08:
                                 PRSTCP09,PRSTCP10,PRSTCP11,PRSTCP12,PRSTCP13
.
          IF        RCDTDISC<>0
            LOAD      SAVAMT,FORM2,PRSTJP01,PRSTJP02,PRSTJP03,PRSTJP04:
                                   PRSTJP05,PRSTJP06,PRSTJP07,PRSTJP08:
                                   PRSTJP09,PRSTJP10,PRSTJP11,PRSTJP12,PRSTJP13
            SUB       RCDTDISC,SAVAMT        * reverse sign for journals
            STORE     SAVAMT,FORM2,PRSTJP01,PRSTJP02,PRSTJP03,PRSTJP04:
                                   PRSTJP05,PRSTJP06,PRSTJP07,PRSTJP08:
                                   PRSTJP09,PRSTJP10,PRSTJP11,PRSTJP12,PRSTJP13
          ENDIF
          CALL      WRPRST1                 * write to the private practice
.                                             financial statistics file
UPSTD900  
UPSTD999  RETURN
+
.******************************************************************************
.*                                   CASHD000                                 *
.*                Routine to process cash deposits for Private Practice       *
.******************************************************************************
CASHD000  MOVE      FALSE,FLAGCASH          * initialise cash deposits flag
          BRANCH    FLAGBULK,CASHD999       * for bulk billing - ignore
.
          OPEN      RCPREGA1,"rcpregaf" 
          OPEN      COMDEPA4,"comdepaf"
          OPEN      RCPDTEA1,"rcpdteaf"
          OPEN      RCPDTEA5,"rcpdteaf"
          OPEN      RCPBNKA1,"rcpbnkaf"
          PREP      TMPCASH,"tempcash"
.
          MOVE      ZERO,DEPTOTAL
          MOVE      ZERO,CURRDEP
.         UNPACK    PRDTSCAN,ANS,KEY1
          MOVE      "1",KEY1
          MOVE      "0",CMDESTAT
          PACK      KEY33,CMDESTAT,PRDTDEBT,KEY1,PRDTPRAC,SP20
          CALL      RSCMDEP4                * position on Cash Deposits file
.
.------ read through the cash deposits file ------
.
CASHD100  CALL      RKCMDEP4
          BRANCH    OVRCD,CASHD120
.
          MATCH     "0",CMDESTAT            * check deposit status
          GOTO      CASHD120 IF NOT EQUAL
.
          MATCH     "1",CMDESFLG           * compare scan flags
          GOTO      CASHD120 IF NOT EQUAL
.
          MATCH     PRDTDEBT,CMDEURNO       * match debtor numbers
          GOTO      CASHD120 IF NOT EQUAL
.
          MATCH     PRDTPRAC,CMDEPRAC       * match medical practices
          GOTO      CASHD120 IF NOT EQUAL
.
          MATCH     SP70,CMDESDOC
          IF        !@EQUAL
            MATCH     PRDTDOCT,CMDESDOC       * match service doctor
            GOTO      CASHD100 IF NOT EQUAL
          ENDIF
.
          MATCH     SP70,CMDEREFD
          GOTO      CASHD110 IF EQUAL          * Refunded
          MATCH     "00000000",CMDEREFD
          GOTO      CASHD100 IF NOT EQUAL      * Refunded
.
CASHD110  PACK      KEY17,CMDERECN,CMDETCNT
          CALL      RDRCDTE1
          BRANCH    OVRCD,CASHD100
.
          ADD       RCDTAMNT,DEPTOTAL       * get out total cash deposits
          MOVE      TRUE,FLAGCASH           * set cash deposits flag
.
          GOTO      CASHD100
.
.         Check for any non-banked deposits
.
CASHD120  MOVE      ZERO,NBNKDEPS
          PACK      KEY25,PRDTDEBT,SP70
          CALL      RSRCDTE5
CASHD140  CALL      RKRCDTE5
          BRANCH    OVRCD,CASHD200
.
          MATCH     PRDTDEBT,RCDTURNO
          GOTO      CASHD200 IF NOT EQUAL
          MATCH     PRDTPRAC,RCDTPRAC       * match medical practices
          GOTO      CASHD140 IF NOT EQUAL
.
          MATCH     SP70,RCDTSDOC
          IF        !@EQUAL
            MATCH     PRDTDOCT,RCDTSDOC       * match service doctor
            GOTO      CASHD140 IF NOT EQUAL
          ENDIF
.
          MATCH     SP10,RCDTINVN          * Invoice number must be blank
          GOTO      CASHD140 IF NOT EQUAL
          MATCH     SP10,RCDTRELD
          GOTO      CASHD140 IF NOT EQUAL   * has been released
.
          MOVE      RCDTREGI,KEY3
          CALL      RDREGA1
          BRANCH    OVRCD,CASHD140 
          COMPARE   "96",REGIBACD
          GOTO      CASHD140 IF NOT EQUAL   * Not PP Deposit register
.
          PACK      KEY12,RCDTRECN
          CALL      RDRCBNK1
          BRANCH    OVRCD,CASHD140
          MATCH     "1",RCBNSTAT            * check if cancelled
          GOTO      CASHD140 IF EQUAL
.
          ADD       RCDTAMNT,NBNKDEPS
          MOVE      TRUE,FLAGCASH           * set cash deposits flag
.
          PACK      RCDTINVN,SP4,PRCNINVN
          PACK      RCDTUDAT,CCC,CYY,CMM,CDD
          REP       " 0",RCDTUDAT           * date updated
          CLOCK     TIME,RCDTUTIM           * time updated
          MOVE      USERID,RCDTUUID         * web user id
          CALL      UPRCDTE5
          GOTO      CASHD140
.
.------ if we have cash deposits for the given debtor and medical practice ----
.------ get our invoice record and figure out how much is outstanding on -----
.------ the invoice ------
.
CASHD200  COMPARE   FALSE,FLAGCASH
          GOTO      CASHD900 IF EQUAL
.
          MOVE      PRCNINVN,KEY8
          CALL      RDPRIN1                 * read the P.P. invoice file
          BRANCH    OVRCD,CASHD900
.
.         ASSIGN    (PRINPAMT + PRINHAMT + PRINIAMT + PRINMAMT + PRINVAMT + PRINOTHA + PRINGSTA + PRINGSTJ ),FORM8P2
          ASSIGN    (PRINPAMT + PRINHAMT + PRINIAMT + PRINMAMT + PRINVAMT + PRINOTHA + PRINGSTJ ),FORM8P2
          MOVE      DEPTOTAL,PINVPAID
          ASSIGN    PRINITOT + FORM8P2,OUTSTAND
.
.------ if our deposits total less than the amount outstanding on the ------
.------ invoice, then we can simply write all the deposits away to the ------
.------ appropriate files ------
.
          PACK      PRINUDAT,CCC,CYY,CMM,CDD
          REP       " 0",PRINUDAT             * date updated
          CLOCK     TIME,PRINUTIM             * time updated
          MOVE      USERID,PRINUUID           * web user id
.
          IF        DEPTOTAL <= OUTSTAND
            MULT      "-1",DEPTOTAL
            ADD       DEPTOTAL,PRINPAMT
            ADD       DEPTOTAL,PRINPEND
.
            CALL      UPPRIN1               * update P.P. invoice file
            CALL      DEDTR000              * write the deposits to DTR, etc
.                                                                     *I-210835
            IF        PRINSCAN = 1
              PROC      FLAGDEBP            * Flag PMI Outstanding Debt
            ENDIF
          ELSE
.
.------ we have more deposits than is outstanding on the invoice, SO, ------
.------ if this is the last record for the current debtor and practice ------
.------ then we will write all the deposits to the appropriate files ------
.------ which will leave the account in credit ------
.
            MATCH     PRDTDEBT,TMPDEBT      * match debtor numbers
            IF        !@EQUAL | (FLAGEND3 = TRUE)
              MULT      "-1",DEPTOTAL
              ADD       DEPTOTAL,PRINPAMT
              ADD       DEPTOTAL,PRINPEND
.
              CALL      UPPRIN1             * update P.P. invoice file
              CALL      DEDTR000            * write the deposits to DTR file
.                                                                     *I-210835
              IF        PRINSCAN = 1
                PROC      FLAGDEBP          * Flag PMI Outstanding Debt
              ENDIF
            ELSE
              MATCH     PRDTPRAC,TMPPRAC    * match medical practices
              IF        !@EQUAL
                MULT      "-1",DEPTOTAL
                ADD       DEPTOTAL,PRINPAMT
                ADD       DEPTOTAL,PRINPEND
.
                CALL      UPPRIN1           * update P.P. invoice file
                CALL      DEDTR000          * write the deposits to DTR file
.                                                                     *I-210835
                IF        PRINSCAN = 1
                  PROC      FLAGDEBP        * Flag PMI Outstanding Debt
                ENDIF
              ELSE
.
.------ we know we are still going to print at least another one invoice -----
.------ for the current debtor and practice, SO, we want to write away ------
.------ all deposits to balance the current invoice and save the rest of ------
.------ the deposits for the next invoice. However, if the current invoice ----
.------ is already in credit it would be pointless putting it further into ----
.------ credit when we may be able to allocate more deposits to the next ------
.------ invoice. Therefore in this case we will ignore the current invoice ----
.
                IF        OUTSTAND > 0   
                  MULT      "-1",OUTSTAND
                  ADD       OUTSTAND,PRINPAMT
                  ADD       OUTSTAND,PRINPEND
                  MULT      "-1",OUTSTAND
.
                  CALL      UPPRIN1         * update the P.P. invoice file
                  CALL      SDDTR000        * write some deposits to DTR file
.                                                                     *I-210835
                  IF        PRINSCAN = 1
                    PROC      FLAGDEBP      * Flag PMI Outstanding Debt
                  ENDIF
                ENDIF
              ENDIF
            ENDIF
          ENDIF
.
CASHD900  
.
CASHD999  RETURN
+
.******************************************************************************
.*                                  DEDTR000                                  *
.*        Routine to write all the deposits for a debtor to the DTR file      *
.******************************************************************************
DEDTR000  OPEN      COMDEPA4,"comdepaf"
          OPEN      RCPDTEA1,"rcpdteaf"
          UNPACK    PRDTSCAN,ANS,KEY1
.
DEDTR020  MOVE      "0",CMDESTAT
          MOVE      "1",KEY1
          PACK      KEY33,CMDESTAT,PRDTDEBT,KEY1,PRDTPRAC,SP20
          CALL      RSCMDEP4                * get the next available record
DEDTR030  CALL      RKCMDEP4                  on the deposit file
          BRANCH    OVRCD,DEDTR999
.
          MATCH     "0",CMDESTAT        * Check deposit status
          GOTO      DEDTR999 IF NOT EQUAL
.
          MATCH     "1",CMDESFLG       * compare scan flags
          GOTO      DEDTR999 IF NOT EQUAL
.
          MATCH     PRDTDEBT,CMDEURNO       * match debtors
          GOTO      DEDTR999 IF NOT EQUAL
.
          MATCH     PRDTPRAC,CMDEPRAC       * match medical practices
          GOTO      DEDTR999 IF NOT EQUAL
.
          MATCH     SP70,CMDESDOC
          IF        !@EQUAL
            MATCH     PRDTDOCT,CMDESDOC       * match service doctor
            GOTO      DEDTR030 IF NOT EQUAL
          ENDIF
.
          MOVE      ZERO,RCDTAMNT
          PACK      KEY17,CMDERECN,CMDETCNT
          CALL      RDRCDTE1
.
          CALL      WRCDP000                * write cash deposits to the files
          BRANCH    EXIT,DEDTR999
.
          CALL      UPSTD000                * update the financial stats file
.
          MOVE      "1",CMDESTAT            * deposit status
          PACK      CMDEAINV,SP4,PRCNINVN   * invoice number
          PACK      CMDEREFD,CCC,CYY,CMM,CDD
          REP       " 0",CMDEREFD           * Date invoice raised
          CALL      IBACLOCK
          MOVE      CTIMEIS,CMDEREFT        * Time invoice is written to
.
          PACK      CMDEUDAT,CCC,CYY,CMM,CDD
          REP       " 0",CMDEUDAT           * date updated
          CLOCK     TIME,CMDEUTIM           * time updated
          MOVE      USERID,CMDEUUID         * web user id
          CALL      UPCMDEP4
.
          GOTO      DEDTR020
.
DEDTR999  RETURN
+
.******************************************************************************
.*                                  SDDTR000                                  *
.*     Routine to write some of the deposits for a debtor to the DTR file.    *
.*     This is for the case when we have more deposits than the amount        *
.*     outstanding for a particular invoice, but we know we still have more   *
.*     invoices to print for this debtor. Therefore we will allocate as much  *
.*     of the deposits as we can for this particular invoice, and save the    *
.*     rest for later.                                                        *
.******************************************************************************
SDDTR000  MOVE      ZERO,DEPTOTAL
          OPEN      COMDEPA4,"comdepaf"
          OPEN      RCPDTEA1,"rcpdteaf"
.
.------ get the next available record on the cash deposits file ------
.
SDDTR100  
.         UNPACK    PRDTSCAN,ANS,KEY1
          MOVE      "1",KEY1
          MOVE      "0",CMDESTAT
          PACK      KEY33,CMDESTAT,PRDTDEBT,KEY1,PRDTPRAC,SP20
          CALL      RSCMDEP4
SDDTR200  CALL      RKCMDEP4
          BRANCH    OVRCD,SDDTR999
.
          MATCH     "0",CMDESTAT            * Deposit held
          GOTO      SDDTR999 IF NOT EQUAL
          MATCH     "1",CMDESFLG           * compare scan flags
          GOTO      SDDTR999 IF NOT EQUAL
.
          MATCH     PRDTDEBT,CMDEURNO       * match debtor numbers
          GOTO      SDDTR999 IF NOT EQUAL
.
          MATCH     PRDTPRAC,CMDEPRAC       * match medical practices
          GOTO      SDDTR999 IF NOT EQUAL
.
          MATCH     SP70,CMDESDOC
          IF        !@EQUAL
            MATCH     PRDTDOCT,CMDESDOC       * match service doctor
            GOTO      SDDTR200 IF NOT EQUAL
          ENDIF
.
          MOVE      ZERO,RCDTAMNT
          PACK      KEY17,CMDERECN,CMDETCNT
          CALL      RDRCDTE1
          BRANCH    OVRCD,SDDTR999
.
          ADD       RCDTAMNT,DEPTOTAL       * add to our total of deposits
.
.------ we have more deposits now than is owing on the invoice SO ------
.------ if we subtract the current deposit from our total and then ------
.------ subtract this amount from the amount outstanding, we should ------
.------ get the amount of the current deposit that we want to allocate ------
.------ to the current invoice to balance it ------
.
.         IF        DEPTOTAL > OUTSTAND
.           SUB       RCDTAMNT,DEPTOTAL
.           ASSIGN    (OUTSTAND - DEPTOTAL),RCDTAMNT
.           MOVE      RCDTAMNT,SAVDEP
.
.           COMPARE   ZERO,RCDTAMNT           * if this happens the invoice 
.           GOTO      SDDTR999 IF EQUAL         was balanced with the previous
.                                               deposit, so ignore
.           CALL      WRCDP000                * write cash deposits to files
.
.           UNPACK    PRDTSCAN,ANS,KEY1
.           MOVE      "0",CMDESTAT
.           PACK      KEY33,CMDESTAT,PRDTDEBT,KEY1,PRDTPRAC,CMDERECN,CMDETCNT
.           CALL      RDCMDEP4                * read the cash deposits file
.
.           SUB       SAVDEP,RCDTAMNT
.           CALL      UPRCDTE1                * update the cash deposits file
.                                               with the new deposit amount
.           GOTO      SDDTR999                  not yet allocated
.
.------ we still have not reached the amount outstanding on the invoice ------
.------ SO write away the current cash deposit ------
.
.         ELSE
.
            CALL      WRCDP000                * write cash deposits to files
.
            MOVE      "1",CMDESTAT
            PACK      CMDEAINV,SP4,PRINNUMB,SP70
            PACK      CMDEREFD,PRINDATE
            REP       " 0",CMDEREFD           * Date invoice raised
            CALL      IBACLOCK
            MOVE      CTIMEIS,CMDEREFT        * Time invoice is written to
.
            PACK      CMDEUDAT,CCC,CYY,CMM,CDD
            REP       " 0",CMDEUDAT           * date updated
            CLOCK     TIME,CMDEUTIM           * time updated
            MOVE      USERID,CMDEUUID         * web user id
            CALL      UPCMDEP4
.
            GOTO      SDDTR100
.         ENDIF
.
.
SDDTR999  RETURN
+
.******************************************************************************
.*                                   WRCDP000                                 *
.*        Routine to write the cash deposits to the appropriate files         *
.******************************************************************************
WRCDP000  MOVE      FALSE,EXIT
          OPEN      PRIAUIA1,"priauiaf"     * open Cash Deposits Inv. Audit
          OPEN      PRIFINS1,"prifinsf"     * open Financial Summary file
          OPEN      PRIFIGA1,"prifigaf"     * open GST Financial Summary file
          OPEN      RCPDTEA1,"rcpdteaf"
          MOVE      PRCNINVN,DIM8
          PACK      KEY22,SAVUNIQ,PRCNINVN,Z20
          CALL      RSPRDT1                 * position on the last record on
          CALL      RPPRDT1                   DTR for given details
          BRANCH    OVRCD,WRCDP900
.
          MATCH     PRDTINVN,DIM8           * match invoice numbers
          GOTO      WRCDP900 IF NOT EQUAL
.
          COMPARE   PRDTUNIQ,SAVUNIQ        * compare unique identifiers
          GOTO      WRCDP900 IF NOT EQUAL
.
          ADD       ONE,PRDTTRAN
          MOVE      CMDETDAT,PRDTSDAT
          MOVE      SP6,PRDTSTIM
          MOVE      SP30,PRDTDESC
.         MOVE      "CASH DEPOSIT",PRDTDESC
          CLEAR     PRDTDESC
          MATCH     SP70,RCDTDPTY
          GOTO      WRCDP200 IF NOT EQUAL
.
          MOVE      "P",KEY1
          PACK      KEY12,RCDTRECN
          CALL      RDRCBNK1
          IF        OVRCD=0
            MOVE      RCBNTTYP,F1
            LOAD      KEY1,F1,ANSH,ANSI,ANSG,ANSH
          ENDIF
          MATCH     "H",KEY1
          IF        @EQUAL
            APPEND    "FROM HEALTH FUND ",PRDTDESC
          ELSE
            MATCH     "I",KEY1
            IF        @EQUAL
              APPEND    "FROM INSURANCE  ",PRDTDESC
            ELSE
              APPEND    "FROM PATIENT    ",PRDTDESC
            ENDIF
          ENDIF
          APPEND    RCBNRCOD,PRDTDESC
          GOTO      WRCDP400
.
WRCDP200  PACK      KEY5,ANSD,ANSP,RCDTDPTY,SP70
          CALL      RDCODE1
          IF        OVRCD=0
            APPEND    "DEPOSIT - ",PRDTDESC
            APPEND    TDESC,PRDTDESC
          ENDIF
.
WRCDP400  APPEND    SP70,PRDTDESC
          RESET     PRDTDESC
          MOVE      RCDTAMNT,PRDTAMNT
          MULT      "-1",PRDTAMNT
          MOVE      TWO,PRDTRTYP
          MOVE      ONE,PRDTSERV
          MOVE      ONE,PRDTIFLG
          MOVE      SP10,PRDTITMN
          MOVE      SP3,PRDTSUBN
          MOVE      SP3,PRDTSETC
          UNPACK    CMDERECN,KEY4,PRDTRECN
          MOVE      "PY ",PRDTTTYP
          MOVE      ONE,PRDTINVP
          PACK      PRDTCDAT,CCC,CYY,CMM,CDD
          REP       " 0",PRDTCDAT
          CLOCK     TIME,PRDTCTIM
          MOVE      ZERO,PRDTIAMT
          MOVE      SP10,PRDTMEDA
          MOVE      ZERO,PRDTGSTA
          MOVE      SP10,PRDTGSTC
          MOVE      ZERO,PRDTGSTM
          PACK      PRDTEFFD,CCC,CYY,CMM,CDD
          REP       " 0",PRDTEFFD
.
.         Use the first payment code
.
          OPEN      RCPBDTA1,"rcpbdtaf"
          MOVE      SP70,PRDTPCOD
          PACK      KEY15,RCDTRECN,SP70
          CALL      RSRCBDT1
          CALL      RKRCBDT1
          IF        OVRCD=0
            MATCH     RCDTRECN,RCBDRECN      * Same receipt number?
            IF        @EQUAL
              MOVE      RCBDPCOD,PRDTPCOD    * Payment type
            ENDIF
          ENDIF
.
          PACK      KEY22,PRDTUNIQ,PRDTINVN,PRDTTRAN
          CALL      WRPRDT1
.
          MOVE      PRDTTRAN,PRINTRAN
          ADD       ONE,PRINTRAN
.
          PACK      PRINUDAT,CCC,CYY,CMM,CDD
          REP       " 0",PRINUDAT             * date updated
          CLOCK     TIME,PRINUTIM             * time updated
          MOVE      USERID,PRINUUID           * web user id
          CALL      UPPRIN1                 * update the invoice file
.                                                                     *I-210835
          IF        PRINSCAN = 1
            PROC      FLAGDEBP                * Flag PMI Outstanding Debt
          ENDIF
.
          PACK      KEY18,PRDTDEBT,PRDTSCAN,PRCNINVN
          CALL      RDPRAI1                 * read the cash deposits 
.                                             invoiced audit file
          IF        OVRCD = 0
            ADD       RCDTAMNT,PRAIAMNT
            CALL      UPPRAI1               * update the cash deposits
.                                             invoiced audit file
          ELSE
            PACK      PRAIIDTE,CCC,CYY,CMM,CDD
            REP       " 0",PRAIIDTE
            MOVE      CMDETDAT,PRAIDDTE
            MOVE      PASSCODE,PRAIOPER
            MOVE      PORTNO,PRAIPORT
            MOVE      RCDTAMNT,PRAIAMNT
            CALL      WRPRAI1               * write to the cash deposits
.                                             invoiced audit file
          ENDIF
.
          WRITE     TMPCASH,SEQ;CMDERECN,CMDETCNT,RCDTAMNT
          ADD       RCDTAMNT,CURRDEP
.
.------ write cash deposits to the financial summary file ------
.
          MOVE      ANSB,PRFNTYPE
          PACK      PRFNCODE,ANSA,SP30
          MOVE      PRINDATE,FSTDATE
          MOVE      PRDTAMNT,FSTAMNT
          MOVE      PRDTPRAC,PRFNMPRA
.
          MULT      "-1",FSTAMNT            * make the amount positive
          MOVE      ZERO,FGSTFLAG
          CALL      PRICALFS                * calculate and write to the
          GOTO      WRCDP920                  financial summary file
.
.------ no DTR record found for given unique identifier and invoice number ----
.
WRCDP900  MOVE      TRUE,EXIT
.
WRCDP920  PACK      KEY17,CMDERECN,CMDETCNT
          CALL      RDRCDTE1
          IF        OVRCD=0
            PACK      RCDTINVN,SP4,PRCNINVN
            PACK      RCDTUDAT,CCC,CYY,CMM,CDD
            REP       " 0",RCDTUDAT           * date updated
            CLOCK     TIME,RCDTUTIM           * time updated
            MOVE      USERID,RCDTUUID         * web user id
            CALL      UPRCDTE1
          ENDIF
          CLOSE     PRIAUIA1                * close Cash Deposits Inv. Audit
WRCDP999  RETURN
+
.******************************************************************************
.*                                   PRIINVLD                                 *
.*      This routine will load the temporary file with the relevant details   *
.*      for a given unique identifier for a given debtor                      *
.******************************************************************************
PRIINVLD  MOVE      FALSE,FLAGSOME
          BRANCH    CHKMPRAC,PRILD100
.
          MOVE      ONE,VSCANPMI
          PACK      KEY10,VDEBTOR,VSCANPMI
          OPEN      PRIHOLA1,"priholdf"
          CALL      RDPRHO1
.         CLOSE     PRIHOLA1
          BRANCH    OVRCD,PRILD100
.
          BRANCH    PRHOHOLD,PRILD990       * skip if account is on hold
.
.------ get the details for this unique identifier ------
.
PRILD100  MOVE      FALSE,FLAGHOLD
          MOVE      TEMPUNQ,KEY8
          CALL      RDPRHD2                 * read the holding header file
          BRANCH    OVRCD,PRILD990
.
          IF        CHKMPRAC=1
            PACK      KEY27,TEMPUNQ,TMPPRAC,TMPSDOCT,TMPPIND,SP20
            CALL      RDPRHR1
          ELSE
            PACK      KEY27,TEMPUNQ,SPRAC,SP20
            CALL      RSPRHR1                 * get the first record 
            CALL      RKPRHR1                 * get the next record on the 
          ENDIF
          BRANCH    OVRCD,PRILD990            holding referral file
.
          COMPARE   PRHRUNIQ,TEMPUNQ        * compare unique identifiers
          GOTO      PRILD990 IF NOT EQUAL
.
          IF        CHKMPRAC=1
            MATCH     PRHRPRAC,TMPPRAC
            GOTO      PRILD990 IF NOT EQUAL
            MATCH     PRHRDOCT,TMPSDOCT
            GOTO      PRILD990 IF NOT EQUAL
            MATCH     PRHRPIND,TMPPIND
            GOTO      PRILD990 IF NOT EQUAL
          ELSE
            PACK      EPRAC,EPRAC,SP70
            MATCH     SP70,EPRAC
            IF        !@EQUAL
              MATCH     PRHRPRAC,EPRAC
              GOTO      PRILD990 IF LESS
            ENDIF
          ENDIF
          GOTO      PRILD260
.
.------ get the next record on the holding referral file ------
.
PRILD250  CALL      RKPRHR1
          BRANCH    OVRCD,PRILD990
.
          COMPARE   PRHRUNIQ,TEMPUNQ        * compare unique identifiers
          GOTO      PRILD990 IF NOT EQUAL
.
          IF        CHKMPRAC=1
            MATCH     PRHRPRAC,TMPPRAC
            GOTO      PRILD990 IF NOT EQUAL
            MATCH     PRHRDOCT,TMPSDOCT
            GOTO      PRILD990 IF NOT EQUAL
            MATCH     PRHRPIND,TMPPIND
            GOTO      PRILD990 IF NOT EQUAL
          ELSE
            PACK      EPRAC,EPRAC,SP70
            MATCH     SP70,EPRAC
            IF        !@EQUAL
              MATCH     PRHRPRAC,EPRAC
              GOTO      PRILD990 IF LESS
            ENDIF
          ENDIF
.
.------ Process this referral record ------
.
PRILD260  CALL      PRLHR000                * load transactions for referral
          BRANCH    CHKMPRAC,PRILD990
          GOTO      PRILD250
.
.
.------ we have finished processing this debtors unique identifier so ------
.------ if no records have been found then records don't exist for this ------
.------ debtor's unique identifier OR patient's account is on hold ------
.
PRILD990  MOVE      FALSE,EXIT
          BRANCH    FLAGSOME,PRILD999       * see if we have found some records
.                                             for this unique identifier
          MOVE      TRUE,EXIT
          GOTO      PRILD999
.
PRILD999  RETURN
+
.**********************************************************************
.*                               PRLHR000                             *
.*   Routine to load the details for a single referral                *
.**********************************************************************
PRLHR000  PACK      DIM27,PRHRUNIQ,PRHRPRAC,PRHRDOCT,PRHRPIND
          PACK      KEY62,TEMPUNQ,PRHRPRAC,PRHRDOCT,PRHRPIND,SP30,SP30
          MOVE      ZERO,F1
...       CALL      RSPRHT1                 * get the first record on the 
.                                             holding transaction file
          PACK      KEY70,TEMPUNQ,PRHRPRAC,PRHRDOCT,PRHRPIND,SP30,SP30
          CALL      RSPRHT4                 * get the first record on the 
.                                             holding transaction file
.
.------ get the next record on the holding transaction file ------
PRLHR300  CALL      RKPRHT4                            * was RKPRHT1  *C-123419
          BRANCH    OVRCD,PRLHR999
.
          COMPARE   TEMPUNQ,PRHTUNIQ        * compare unique identifiers
          GOTO      PRLHR999 IF NOT EQUAL
.
          PACK      KEY27,PRHTUNIQ,PRHTPRAC,PRHTDOCT,PRHTPIND
.
          MATCH     KEY27,DIM27             * only continue if we have the
          GOTO      PRLHR999 IF NOT EQUAL     same key value 
.
          COMPARE   ZERO,PRHTPFLG           * skip if not a pathology test code
          GOTO      PRLHR400 IF EQUAL
.
          CALL      PATHL000                * write the pathology test code
          BRANCH    EXIT,PRLHR400             details to the temp file
.
          MOVE      TRUE,FLAGSOME
          GOTO      PRLHR300
.
.
.------ we are not processing a pathology test code OR ------
.------ we are processing a S4B3 ----
.
PRLHR400  CALL      LOADT000                * load the temp file variables
.
          MOVE      TRUE,FLAGSOME
          IF        PRCNRDOC = 0
             PACK      KEY80,VDEBTOR,VSCANPMI,PRHRPRAC,PRHDCLAM,PRHRDOCT:
                             PRHRPIND,PRHRRDAT,PRHRREFD,PRHTDATE,PRHTTIME:
                             PRHTFLAG,ITEM,PRHTSUBN,PRHTNUMB
          ELSE
             PACK      KEY80,VDEBTOR,VSCANPMI,PRHRPRAC,PRHDCLAM,PRHRDOCT:
                             PRHRPIND,PRHTRDAT,PRHTREFD,PRHTDATE,PRHTTIME:
                             PRHTFLAG,ITEM,PRHTSUBN,PRHTNUMB
          ENDIF
          CALL      RATMPR2                 * see if record exists on the temp
          BRANCH    OVRCD,PRLHR500            file
          GOTO      PRLHR300
.
.------ write a new record to the temp file ------
.
PRLHR500  MOVE      VDEBTOR,TMPDEBT
          MOVE      "1",TMPSCAN
          MOVE      PRHRPRAC,TMPPRAC
          MOVE      PRHDCLAM,TMPCLAIM
          MOVE      PRHRDOCT,TMPSDOCT
          IF        PRCNRDOC = 0
             MOVE      PRHRRDAT,TMPRDATE
             MOVE      PRHRREFD,TMPRDOCT
          ELSE
             MOVE      PRHTRDAT,TMPRDATE
             MOVE      PRHTREFD,TMPRDOCT
          ENDIF
          MOVE      PRHTRFPD,TMPREFP
          MOVE      PRHRPIND,TMPPIND
          MOVE      PRHTDATE,TMPSDATE
          MOVE      PRHTTIME,TMPSTIME
          MOVE      PRHTFLAG,TMPIFLAG
          MOVE      ITEM,TMPITEM
          MOVE      PRHTSUBN,TMPSITEM
          MOVE      PRHTNUMB,TMPTRAN
          MOVE      PRHTGSTA,TMPGSTA
          MOVE      PRHTGSTC,TMPGSTC
          MOVE      PRHTREFN,TMPREFN
          MOVE      PRHTENCN,TMPENCN
          MOVE      PRHTPFLG,TMPPFLAG
          MOVE      PRHTS4B3,TMPS4B3
          MOVE      PRHTITMN,TMPHITM
          MOVE      PRHTSUBN,TMPHSUB
          MOVE      PRHTNUMB,TMPHTRN
          MOVE      PRHTHICI,TMPHICI 
          MOVE      PRHTACOI,TMPACOI
          MOVE      PRHTTDUR,TMPTDUR
          MOVE      PRHRRPER,TMPRPER
          MOVE      PRHTROVR,TMPROVR
.
          MATCH     "1",PTCNUESF
          IF        @EQUAL
            MATCH     SP70,PRHRTACC
            IF        !@EQUAL
              MOVE      "ta",CATEGORY
              MOVE      PRHRTACC,CODE
.
              PACK      KEY5,CATEGORY,CODE,SP70
              CALL      RDCODE1
              IF        OVRCD=0
                MATCH     "5",TCINDC1
                IF        @EQUAL
                  MOVE      PRHRROVR,TMPROVR
                  GOTO      PRLHR600
                ENDIF
              ENDIF
            ENDIF
          ENDIF
.
          MATCH     "1",PTCNUIMC
          IF        @EQUAL
            MATCH     SP70,PRHRTACC
            IF        !@EQUAL
              MOVE      "ta",CATEGORY
              MOVE      PRHRTACC,CODE
.
              PACK      KEY5,CATEGORY,CODE,SP70
              CALL      RDCODE1
              IF        OVRCD=0
                MATCH     "1",TCINDC1
                IF        @EQUAL
                  MOVE      PRHRROVR,TMPROVR
                  GOTO      PRLHR600
                ENDIF
.
                MATCH     "2",TCINDC1
                IF        @EQUAL
                  MOVE      PRHRROVR,TMPROVR
                  GOTO      PRLHR600
                ENDIF
.
                MATCH     "6",TCINDC1
                IF        @EQUAL
                  MOVE      PRHRROVR,TMPROVR
                  GOTO      PRLHR600
                ENDIF
.
                MATCH     "7",TCINDC1
                IF        @EQUAL
                  MOVE      PRHRROVR,TMPROVR
                  GOTO      PRLHR600
                ENDIF
              ENDIF
            ENDIF
          ENDIF
.
PRLHR600  MOVE      PRHTMPOV,TMPMPOV
          MOVE      PRHTDSOV,TMPDSOV
          MOVE      PRHTSTXT,TMPSTXT
          MOVE      PRHTASPF,TMPASPF
          MOVE      PRHTASPC,TMPASPC
.          MOVE      PRHTAICF,TMPAICF
          MOVE      PRHTAICV,TMPAICV
          MOVE      PRHTNMPT,TMPNMPT
          MOVE      PRHTLSPN,TMPLSPN
          MOVE      PRHTSDCD,TMPSDCD
          MOVE      PRHTLVIS,TMPLVIS
          MOVE      PRHTHOSI,TMPHOSI
          MOVE      PRHTROVC,TMPROVC
          MOVE      PRHTDSKM,TMPDSKM
          CALL      WRTMPR2
          GOTO      PRLHR300
.
PRLHR999  RETURN
+
.**********************************************************************
.*                               PATHL000                             *
.*   Routine to process a pathology test code and write the relevant  *
.*   details to the pathology temp file                               *
.**********************************************************************
PATHL000  MOVE      ZERO,EXIT
.                            Each Pathology Item must also be recorded on the
.                            Pathology Test table (this is now done automaticlly
.                            so the Test Item should always exist)
.
          PACK      KEY17,PRHTITMN,PRHTDATE
          CALL      RDPRTE1                 * read the private practice
          COMPARE   ZERO,OVRCD                pathology test file
          GOTO      PATHL100 IF EQUAL
.
          CALL      RPPRTE1                 * get the previous private practice
          BRANCH    OVRCD,PATHL950            pathology test file record
.
          MATCH     PRHTITMN,PRTECODE       * match test codes
          GOTO      PATHL950 IF NOT EQUAL
.
.                            * ------ load the temp file variables ------
PATHL100  CALL      LOADT000                * load temp2 file variables
.
.                                           * load temp3 file variables
.
.                                           * load Pathology Test table Items
          MOVE      PRTEITMN,ITEM           * default to MBS Item
          LOAD      ITEM,PRHTFLAG,PRTEAMAN  * change to AMA if flag set to AMA
          MOVE      ITEM,TMPITEM
          MOVE      PRTESUBN,TMPSITEM
          MOVE      PRTEABRV,TMPABBRV       * standard abbreviation
          MOVE      PRTEDESC,TMPIDESC
          MOVE      ZERO,TMPMITEM           * not an inserted multiple item.
.
.                                           * other Holding Table variables
          MOVE      PRHTFLAG,TMPIFLAG
          MOVE      PRHTDATE,TMPSDATE
          MOVE      PRHTTIME,TMPSTIME
.
          PACK      KEY22,TMPIFLAG,TMPITEM,TMPSITEM,TMPSDATE
          CALL      PATHIT00                * read Item File for Stepdown vars.
          BRANCH    EXIT,PATHL950           * EXIT = not a valid Pathology Item
.
          UNPACK    SP30,TMPSTEP,TMPSTSB    * blank stepdown Item No. <=======
          MOVE      PRITMAXR,TMPMAXR        * maximum no. of requests
          MOVE      PRITDAYS,TMPMAXD        * within this number of days
          MOVE      PRITSFEE,TMPIAMNT       * fee for this item
          MOVE      PRITSFEE,TMPITOT        * fee for this item
.
.                            * ----- check if the Item is required for Stepdown
PATHL200  COMPARE   ZERO,PRITMAXR           * check the maximum number
          GOTO      PATHL900 IF EQUAL       * if none, just write this item
.
          MATCH     SP9,PRITSTEP            * is there an item to step-down to?
          GOTO      PATHL900 IF EQUAL       * if not, just write this item
.
          MATCH     SP5,PRTEMSER            * we only want blank service codes
          GOTO      PATHL900 IF NOT EQUAL   * if not, just write this item
.
.
.                            * ----------- Stepdown process ----------
PATHL300  MOVE      ZERO,REQUESTS           * initialise number of tests found
          UNPACK    SP30,TMPSTEP,TMPSTSB    * clear the stepdown Item
.
          MOVE      TMPSDATE,CALCDATE       * Service date - from PRHTDATE
          SUB       TMPMAXD,CALCDATE        * Max no of days - from PRITDAYS
          ADD       ONE,CALCDATE
          MOVE      CALCDATE,WORKDATE
          REP       " 0",WORKDATE           * "from date" to look for tests
          MOVE      TMPSDATE,KEY8
.
.                           * ------ read through the Pathology History file
.                                           * position on the history file
          PACK      KEY37,TMPDEBT,TMPSCAN,WORKDATE,SP20
          CALL      RSPRTH1
PATHL350  CALL      RKPRTH1                 * read next Pathology History item
          BRANCH    OVRCD,PATHL400
.
          MATCH     TMPDEBT,PRTHDEBT        * compare debtor numbers
          GOTO      PATHL400 IF NOT EQUAL
.
          COMPARE   PRTHSCAN,TMPSCAN        * compare scan flags
          GOTO      PATHL400 IF NOT EQUAL
.
          MATCH     PRTHDATE,TMPSDATE       * match service dates
          GOTO      PATHL350 IF LESS
.
          COMPARE   PRTHFLAG,TMPIFLAG       * compare item flags
          GOTO      PATHL350 IF NOT EQUAL
.
          MATCH     PRTHITEM,TMPITEM        * match item numbers
          GOTO      PATHL350 IF NOT EQUAL
.
          MATCH     PRTHSUBN,TMPSITEM       * match sub-item numbers
          GOTO      PATHL350 IF NOT EQUAL
.
          ADD       PRTHNUMB,REQUESTS       * increment number of tests ******
          GOTO      PATHL350
.
.                            * ----- now write this record (to save data) before
.                            * ----- re-reading temp3 file to count number of
.                            * ----- Items on pathology temp3 file
.
PATHL400  MOVE      SP1,KEY1
....      MOVE      DIM34,TMPIDESC          * ---- used for testing ----
          CALL      WRTMP000                * write to temp3 file
          MOVE      KEY85,SAVKEY85          * save the key for this record
.
.                                           * read through temp3 & count Items
          PACK      KEY14,DPRITFLG,PRITITMN,PRITSUBN,SP30
          PACK      KEY85,KEY14,SP30,SP30,SP30     * use key 2
          PACK      KEY30,KEY14,SP30               * use key 3
          CALL      RSTMPR33
.
PATHL500  CALL      RKTMPR33                * get the next temp3 record
          BRANCH    OVRCD,PATHL550
.
          PACK      DIM14A,DTMPIFLG,TMPITEM,TMPSITEM
          MATCH     DIM14A,KEY14            * compare the keys
          GOTO      PATHL550 IF NOT EQUAL
.
          MATCH     WORKDATE,TMPSDATE       * check if service date in range
          GOTO      PATHL500 IF LESS
.
          ADD       TMPSERVS,REQUESTS       * count the services
          GOTO      PATHL500
.
.                            * ----- check if max no. of requests is exceeded --
PATHL550  COMPARE   PRITMAXR,REQUESTS
          GOTO      PATHL999 IF LESS        * if no stepdown, finish this Item
.
.                            * ----- number of Requests are >= to Maximum No. -
.                            * ----- retrieve last record to process stepdown
PATHL600  MOVE      SAVKEY85,KEY85
          CALL      RDTMPR3                 * read in record again
.
.                            * ----- stepdown occurs in middle of TMPSERVS ---
          SUB       TMPSERVS,REQUESTS
.                                           * TMPMAXR from PRITMAXR
          ADD       ONE,REQUESTS            * to cater for "Equal" being stepdwn
          IF        REQUESTS < TMPMAXR
            MOVE      TMPSERVS,FORM3
            ASSIGN    (TMPMAXR-REQUESTS),TMPSERVS
            SUB       TMPSERVS,FORM3
            CALL      UPTMPR3               * update with new number of services
            MOVE      FORM3,TMPSERVS
          ELSE
            CALL      DETMPR3               * delete record & write as stepdown
            MOVE      TMPSERVS,FORM3        * to get past zero test
          ENDIF
.                                           * no.of services still to be written
          COMPARE   ZERO,FORM3
          GOTO      PATHL999 IF EQUAL
.
.                            * now write a record with stepdown & excess
...       PACK      KEY22,TMPIFLAG,TMPITEM,TMPSITEM,TMPSDATE,SP30
...       CALL      PATHIT00                * read Item File for Stepdown vars.
          MOVE      PRITSTEP,TMPSTEP        * set "stepdown item" from this Item
          MOVE      PRITSTSB,TMPSTSB
.
          PACK      KEY22,DPRITFLG,PRITSTEP,PRITSTSB,TMPSDATE,SP30
          CALL      PATHIT00                * read Stepdown item's Item record
          MOVE      PRITDESC,TMPIDESC       * change to stepdown description
          MOVE      PRITSFEE,TMPIAMNT       * change to stepdown amount
          MOVE      PRITSFEE,TMPITOT        * change to stepdown amount
.
.                            * ----- change the key to make this unique ----
          GOTO      PATHL900                * write the new Item and finish
.
.------ post this record to the pathology temp3 file  and finish ------
.
PATHL900  CALL      WRTMP000                * post to temp3 file
          GOTO      PATHL999
.
.------ test code does not exist on the pathology test file ------
.
PATHL950  MOVE      ONE,EXIT
.
PATHL999  RETURN
+
.**********************************************************************
.*                               PATHIT00                             *
.*     Routine to read Item Record and process any Exception Charging *
.*            ( expects KEY22 to be loaded with Key variables)        *
.**********************************************************************
PATHIT00  MOVE      ZERO,EXIT
          UNPACK    KEY22,KEY14,DIM14A
          CALL      RDPRIT1                 * read the item file
          COMPARE   ZERO,OVRCD
          GOTO      PATHIT20 IF EQUAL
.
          CALL      RPPRIT1                 * get the previous item file record
          BRANCH    OVRCD,PATHIT90
.
          PACK      DIM14A,PRITFLAG,PRITITMN,PRITSUBN
          MATCH     KEY14,DIM14A            * same Item type/Item/Subitem ?
          GOTO      PATHIT90 IF NOT EQUAL
.
.------ we have a valid item file record so check exception pricing ---
.
PATHIT20  CALL      ISEXC000                * is exception charging needed?
          IF        EXIT = 1
            MOVE      PREXCHRG,PRITSFEE     * use this charge instead
          ENDIF
          GOTO      PATHIT99
.
.------ no item file record found. ------
.
PATHIT90  MOVE      ONE,EXIT
.
PATHIT99  RETURN
+
.**********************************************************************
.*                               WRTMP000                             *
.*     Routine to post a record to the pathology temp file            *
.**********************************************************************
WRTMP000  IF        PRCNRDOC = 0
             PACK      KEY85,PRTEMSER,PRHTDATE,PRHTTIME,TMPITEM,PRTESUBN:
                             PRTETESN,VDEBTOR,VSCANPMI,PRHRPRAC,PRHDCLAM:
                             PRHRDOCT,PRHRRDAT,PRHRREFD,PRHTFLAG,PRHTNUMB
             MOVE      PRHRRDAT,TMPRDATE
             MOVE      PRHRREFD,TMPRDOCT
          ELSE
             PACK      KEY85,PRTEMSER,PRHTDATE,PRHTTIME,TMPITEM,PRTESUBN:
                             PRTETESN,VDEBTOR,VSCANPMI,PRHRPRAC,PRHDCLAM:
                             PRHRDOCT,PRHTRDAT,PRHTREFD,PRHTFLAG,PRHTNUMB
             MOVE      PRHTRDAT,TMPRDATE
             MOVE      PRHTREFD,TMPRDOCT
          ENDIF
          MOVE      PRTEMSER,TMPSCODE
          MOVE      PRHTDATE,TMPSDATE
          MOVE      PRHTTIME,TMPSTIME
...       MOVE      TMPITEM,TMPITEM
          MOVE      PRTESUBN,TMPSITEM
          MOVE      PRTETESN,TMPROCS
          MOVE      VDEBTOR,TMPDEBT
          MOVE      "1",TMPSCAN
          MOVE      PRHRPRAC,TMPPRAC
          MOVE      PRHDCLAM,TMPCLAIM
          MOVE      PRHRDOCT,TMPSDOCT
          MOVE      PRHTFLAG,TMPIFLAG
          MOVE      PRHTNUMB,TMPTRAN
          MOVE      PRHTGSTA,TMPGSTA
          MOVE      PRHTGSTC,TMPGSTC
          MOVE      PRHTRFPD,TMPREFP
          MOVE      PRHTREFN,TMPREFN
          MOVE      PRHTENCN,TMPENCN
.
          MOVE      PRHTITMN,TMPHITM
          MOVE      PRHTSUBN,TMPHSUB
          MOVE      PRHTNUMB,TMPHTRN
          CALL      RATMPR3                 * read the pathology temp file
          BRANCH    OVRCD,WRTMP700
.
.         This combination already exists. This could happen if there are
.         several tests with different test codes, but common MBS item
.         codes. In this case, simply increment the transaction number,
.         and try again.
.
          MOVE      TMPIDESC,DIM14A
.         
          ADD       ONE,PRHTNUMB
          GOTO      WRTMP000
.
.------ see if a multiple services code exists ------
.
WRTMP700  MATCH     SP5,PRTEMSER
          GOTO      WRTMP800 IF EQUAL
          MOVE      ZERO,TMPITOT
          MOVE      TRUE,TMPMFLAG
.
.------ write a record to the pathology temp file ------
.
WRTMP800  CALL      WRTMPR3
.
WRTMP999  RETURN
+
.**********************************************************************
.*                               PPTMP000                             *
.*     Routine to process the pathology temp file and write the       *
.*     relevent details to the temp file for printing the invoices    *
.**********************************************************************
PPTMP000  MOVE      FALSE,FLAGEND3
          MOVE      SP5,SAVSCODE
          MOVE      SP8,SAVSDATE
          MOVE      SP5,SAVSTIME
          MOVE      ZERO,PROCS
          PACK      KEY85,SP30,SP30,SP30
          CALL      RSTMPR3                 * see if records exist on the
          CALL      RKTMPR3                   pathology temp file
          BRANCH    OVRCD,PPTMP999
          GOTO      PPTMP110
.
.##########  STEP 1 ##########
.
.------ read through the pathology temp file ------
.
PPTMP100  CALL      RKTMPR3
          COMPARE   ZERO,OVRCD
          GOTO      PPTMP110 IF EQUAL
.
          MATCH     SP5,SAVSCODE            * see if we have found any records
          GOTO      PPTMP500 IF EQUAL         with a multiple services code
          MOVE      TRUE,FLAGEND3           * set we have reached the end of 
          GOTO      PPTMP200                  the temp file flag
.
.------ see if we have a multiple service code ------
.
PPTMP110  MATCH     SP5,TMPSCODE
          GOTO      PPTMP100 IF EQUAL
.
          MATCH     SP5,SAVSCODE            * see if this is the first service
          GOTO      PPTMP150 IF NOT EQUAL     code
          MOVE      TMPSCODE,SAVSCODE
          MOVE      TMPSDATE,SAVSDATE
          MOVE      TMPSTIME,SAVSTIME
          MOVE      TMPIFLAG,SAVIFLAG
          MOVE      TMPROCS,PROCS
          MULT      TMPSERVS,PROCS
          MOVE      TMPABBRV,CONCATDS       * initialise description
          STRIP     CONCATDS                * remove trailing blanks
          GOTO      PPTMP100
.
.------ we have another multiple service so see if it is the same as the ------
.------ last ------
.
PPTMP150  MATCH     SAVSCODE,TMPSCODE
          GOTO      PPTMP200 IF NOT EQUAL
.
          MATCH     SAVSDATE,TMPSDATE       * make sure we have the same 
          GOTO      PPTMP200 IF NOT EQUAL     service date
.
          MATCH     SAVSTIME,TMPSTIME       * make sure we have the same 
          GOTO      PPTMP200 IF NOT EQUAL     service time
.
          MULT      TMPSERVS,TMPROCS
          ADD       TMPROCS,PROCS
          PACK      CONCATDS,CONCATDS,SP1,TMPABBRV
          STRIP     CONCATDS                * remove trailing blanks from desc
          GOTO      PPTMP100
.
.------ the service codes OR service date has changed so using the saved ------
.------ service code and service date and number of procedures, read the ------
.------ multiple item file ------
.
PPTMP200  PACK      KEY16,SAVSCODE,SAVSDATE,PROCS
          CALL      RDPRMU1
          COMPARE   ZERO,OVRCD
          GOTO      PPTMP230 IF EQUAL
.
.------ get the previous multiple item file record ------
.
PPTMP220  CALL      RPPRMU1
          BRANCH    OVRCD,PPTMP300
.
          MATCH     SAVSCODE,PRMUCODE       * match multiple service codes
          GOTO      PPTMP300 IF NOT EQUAL
.
          COMPARE   PRMUNUMB,PROCS          * we want a record with < or =
          GOTO      PPTMP220 IF LESS          our number of procedures
.
.------ we have found an appropriate record ------
.------ so now we want to read the item file with the item from the ------
.------ multiple item file to get the correct amount to charge ------
.
PPTMP230  MOVE      PRMUITMN,ITEM
          LOAD      ITEM,SAVIFLAG,PRMUAMAN
          MOVE      ZERO,FORM1              * adding for a multiple service
          CALL      ADITM000                * add item to temp file
.
.------ we have finished processing this record so see if we are at the ------
.------ end of the temp file. If not save the current details and continue ----
.------ processing otherwise go to the next step ------
.
PPTMP300  BRANCH    FLAGEND3,PPTMP500
          MOVE      TMPSCODE,SAVSCODE
          MOVE      TMPSDATE,SAVSDATE
          MOVE      TMPSTIME,SAVSTIME
          MOVE      TMPIFLAG,SAVIFLAG
          MOVE      TMPROCS,PROCS
          MULT      TMPSERVS,PROCS
          MOVE      TMPABBRV,CONCATDS       * initialise description
          STRIP     CONCATDS                * remove trailing blanks
          GOTO      PPTMP100
.
.##########  STEP 2 ##########
.
.------ position on the pathology temp file ------
.
PPTMP500  OPEN      PRIGRPA1,"prigrpaf"
          PACK      KEY85,SP30,SP30,SP30
          CALL      RSTMPR3
.
.------ get the next record on the pathology temp file ------
.
PPTMP510  CALL      RKTMPR3
          BRANCH    OVRCD,PPTMP600
.
          MATCH     SP5,TMPSCODE            * we only want items without
          GOTO      PPTMP600 IF NOT EQUAL     multiple service codes
.
.         Get effective date for this item so that when we read the group
.         record, we get the same effective date
.
          CALL      GETDT000
          PACK      KEY34,TMPIFLAG,TMPITEM,TMPSITEM,PRITDAT1,Z20
          CALL      RSPRGP1                 * get the relevent record from the
          CALL      RPPRGP1                   item group file
          BRANCH    OVRCD,PPTMP510
.
          MATCH     TMPSITEM,PRGPSUB1       * match sub-item numbers
          GOTO      PPTMP510 IF NOT EQUAL
.
          MATCH     TMPITEM,PRGPITM1        * match item numbers
          GOTO      PPTMP510 IF NOT EQUAL
.
          COMPARE   TMPIFLAG,PRGPFLAG       * compare item flags
          GOTO      PPTMP510 IF NOT EQUAL
.
          MATCH     PRITDAT1,PRGPDATE       * same date ?
          GOTO      PPTMP510 IF NOT EQUAL   * no
.
          MOVE      TMPSDATE,SAVEDATE
          MOVE      TMPSITEM,SAVSITEM
          MOVE      TMPITEM,SAVITEM
          MOVE      TMPIFLAG,SAVIFLAG
          PACK      SAVKEY85,TMPSCODE,TMPSDATE,TMPSTIME,TMPITEM,TMPSITEM:
                             TMPROCS,TMPDEBT,TMPSCAN,TMPPRAC,TMPCLAIM:
                             TMPSDOCT,TMPRDATE,TMPRDOCT,TMPIFLAG,TMPTRAN
.
.------ position on the temp file for this item ------
.
PPTMP530  PACK      KEY85,PRGPFLAG,PRGPITM2,PRGPSUB2,SP30,SP30,SP30
          CALL      RSTMPR32
.
.------ get the next temp file record ------
.
PPTMP550  CALL      RKTMPR32
          BRANCH    OVRCD,PPTMP570
.
          MATCH     PRGPSUB2,TMPSITEM       * match sub-item numbers
          GOTO      PPTMP570 IF NOT EQUAL
.
          MATCH     PRGPITM2,TMPITEM        * match items
          GOTO      PPTMP570 IF NOT EQUAL
.
          COMPARE   PRGPFLAG,TMPIFLAG       * compare item flags
          GOTO      PPTMP570 IF NOT EQUAL
.
          MATCH     TMPSDATE,SAVEDATE       * same service date ?
          GOTO      PPTMP550 IF NOT EQUAL   * no.
.
          MOVE      ZERO,TMPITOT
          CALL      UPTMPR32                * update the temp file
          GOTO      PPTMP550
.
.------ get the next previous record from the group file ------
.
PPTMP570  CALL      RPPRGP1
          BRANCH    OVRCD,PPTMP590
.
          MATCH     PRITDAT1,PRGPDATE       * match effective dates
          GOTO      PPTMP590 IF NOT EQUAL
.
          MATCH     SAVSITEM,PRGPSUB1       * match sub-item numbers
          GOTO      PPTMP590 IF NOT EQUAL
.
          MATCH     SAVITEM,PRGPITM1        * match item numbers
          GOTO      PPTMP590 IF NOT EQUAL
.
          COMPARE   SAVIFLAG,PRGPFLAG       * compare item flags
          GOTO      PPTMP530 IF EQUAL
.
.------ no more relevent items on the group file so re-position on the ------
.------ temp file and continue processing ------
.
PPTMP590  MOVE      SAVKEY85,KEY85
          CALL      RDTMPR3
          GOTO      PPTMP510
.
.##########  STEP 3 ##########
.
.------ position on the pathology temp file ------
.
PPTMP600  CLOSE     PRIGRPA1
          OPEN      PRISPTA1,"prisptaf"
          PACK      KEY85,SP30,SP30,SP30
          CALL      RSTMPR3
.
.------ get the next record on the pathology temp file ------
.
PPTMP610  CALL      RKTMPR3
          BRANCH    OVRCD,PPTMP900
.
.         Use the service date for this item so that when we read the special
.         test record, we get the appropriate effective date
.
          PACK      KEY34,TMPIFLAG,TMPITEM,TMPSITEM,TMPSDATE,Z20
          CALL      RSPRSP1                 * get the relevent record from the
          CALL      RPPRSP1                   special pathology test file
          BRANCH    OVRCD,PPTMP610
.
          MATCH     TMPSITEM,PRSPSUB1       * match sub-item numbers
          GOTO      PPTMP610 IF NOT EQUAL
.
          MATCH     TMPITEM,PRSPITM1        * match item numbers
          GOTO      PPTMP610 IF NOT EQUAL
.
          COMPARE   TMPIFLAG,PRSPFLAG       * compare item flags
          GOTO      PPTMP610 IF NOT EQUAL
.
          MATCH     PRSPEDAT,TMPSDATE       * check service date ?
          GOTO      PPTMP610 IF LESS        * no
.
          MOVE      TMPSDATE,SAVSDATE
          MOVE      TMPSITEM,SAVSITEM
          MOVE      TMPITEM,SAVITEM
          MOVE      TMPIFLAG,SAVIFLAG
          PACK      SAVKEY85,TMPSCODE,TMPSDATE,TMPSTIME,TMPITEM,TMPSITEM:
                             TMPROCS,TMPDEBT,TMPSCAN,TMPPRAC,TMPCLAIM:
                             TMPSDOCT,TMPRDATE,TMPRDOCT,TMPIFLAG,TMPTRAN
.
.------ position on the temp file for the item 2nd item in pair------
.
PPTMP630  PACK      KEY85,PRSPFLAG,PRSPITM2,PRSPSUB2,SP30,SP30,SP30
          CALL      RSTMPR32
.
.------ get the next temp file record ------
.
PPTMP650  CALL      RKTMPR32
          BRANCH    OVRCD,PPTMP670
.
          MATCH     PRSPSUB2,TMPSITEM       * match sub-item numbers
          GOTO      PPTMP670 IF NOT EQUAL
.
          MATCH     PRSPITM2,TMPITEM        * match items
          GOTO      PPTMP670 IF NOT EQUAL
.
          COMPARE   PRSPFLAG,TMPIFLAG       * compare item flags
          GOTO      PPTMP670 IF NOT EQUAL
.
          MATCH     TMPSDATE,SAVSDATE       * same service dates ?
          GOTO      PPTMP650 IF NOT EQUAL   * no, try again
.
.         Check if this item is to be "deleted" (eg. multiple servives)
.
          IF        TMPITOT = 0.0 & TMPIAMNT <> 0.0 & TMPSERVS > 0
            GOTO      PPTMP650              * ignore items changed to zero
          ENDIF
.
. ------  We have found a match.  Zero this item and the original, ------
. ------  and add a new item for the combination.                  ------
.
          MOVE      ZERO,TMPITOT
          CALL      UPTMPR32                * update the temp file
.
          MOVE      SAVKEY85,KEY85
          CALL      RDTMPR3
          MOVE      ZERO,TMPITOT
          CALL      UPTMPR3
.
          MOVE      PRSPITMN,ITEM
          MOVE      PRSPSUBN,PRMUSUBN
          MOVE      TMPSDATE,SAVSDATE
          MOVE      TMPIFLAG,SAVIFLAG
          MOVE      ONE,FORM1               * not a multiple service add
          CALL      ADITM000
          GOTO      PPTMP610                * finished this item, get next one
.
.------ get the next previous record from the special test file ------
.
PPTMP670  CALL      RPPRSP1
          BRANCH    OVRCD,PPTMP690
.
          MATCH     SAVSITEM,PRSPSUB1       * match sub-item numbers
          GOTO      PPTMP690 IF NOT EQUAL
.
          MATCH     SAVITEM,PRSPITM1        * match item numbers
          GOTO      PPTMP690 IF NOT EQUAL
.
          COMPARE   SAVIFLAG,PRSPFLAG       * compare item flags
          GOTO      PPTMP690 IF NOT EQUAL
.
          MATCH     PRSPEDAT,SAVSDATE       * check service date ?
          GOTO      PPTMP690 IF LESS        * no
.
          COMPARE   SAVIFLAG,PRSPFLAG       * compare item flags
          GOTO      PPTMP630 IF EQUAL
.
.------ no more relevent items on the special test file so re-position ------
.------ on the temp file and continue processing ------
.
PPTMP690  MOVE      SAVKEY85,KEY85
          CALL      RDTMPR3
          GOTO      PPTMP610
.
.------ we have finished processing the temp file so we want to write ------
.------ all the pathology details to the temp file for printing the ------
.------ invoices ------
.
PPTMP900  CLOSE     PRISPTA1
          PACK      KEY85,SP30,SP30,SP30
          CALL      RSTMPR3
.
.------ read through the pathology temp file ------
.
PPTMP910  CALL      RKTMPR3
          BRANCH    OVRCD,PPTMP999
.
          MATCH     SP5,TMPSCODE            * multiple item code ?
          GOTO      PPTMP910 IF NOT EQUAL   * yes, ignore this record
.
          IF        TMPITOT = 0.0 & TMPIAMNT <> 0.0 & TMPSERVS > 0
            GOTO      PPTMP910              * ignore items changed to zero
          ENDIF
.
          PACK      KEY80,TMPDEBT,TMPSCAN,TMPPRAC,TMPCLAIM,TMPSDOCT,TMPPIND:
                          TMPRDATE,TMPRDOCT,TMPSDATE,TMPSTIME,TMPIFLAG,TMPITEM:
                          TMPSITEM,TMPTRAN
.
          CALL      RATMPR2                 * read the temp file for printing
          COMPARE   ZERO,OVRCD                invoices
          GOTO      PPTMP910 IF EQUAL
          MOVE      SP70,TMPHICI 
          MOVE      SP70,TMPACOI
          MOVE      SP70,TMPTDUR
          MOVE      SP70,TMPRPER
          MOVE      SP70,TMPROVR
          MOVE      SP70,TMPMPOV
          MOVE      SP70,TMPDSOV
          MOVE      SP70,TMPSTXT
          MOVE      SP70,TMPASPF
          MOVE      SP70,TMPASPC
.          MOVE      SP70,TMPAICF
          MOVE      SP70,TMPAICV
          MOVE      SP70,TMPNMPT
          MOVE      SP70,TMPLSPN
          MOVE      SP70,TMPSDCD
          MOVE      SP70,TMPLVIS
          MOVE      SP70,TMPHOSI
          MOVE      SP70,TMPROVC
          MOVE      SP70,TMPDSKM
          CALL      WRTMPR2                 * write to the temp file for
          GOTO      PPTMP910                  printing invoices
.
PPTMP999  RETURN
+
.**********************************************************************
.*                            GETDT000           Called by: PPTMP000  *
.*           get the effective date for this item                     *
.*      RETURNS: PRITDAT1 (blank if effecttive date not found         *
.**********************************************************************
GETDT000  PACK      KEY22,TMPIFLAG,TMPITEM,TMPSITEM,TMPSDATE
          CALL      RDPRIT1                 * read the P.P. item file
          IF        OVRCD = 1
            CALL      RPPRIT1               * get the previous item file record
            BRANCH    OVRCD,GETDT900
.
            COMPARE   TMPIFLAG,PRITFLAG     * see if the item flag has changed
            GOTO      GETDT900 IF NOT EQUAL
.
            MATCH     TMPITEM,PRITITMN      * see if the item code has changed
            GOTO      GETDT900 IF NOT EQUAL
.
            MATCH     TMPSITEM,PRITSUBN     * see if the sub-item number has
            GOTO      GETDT900 IF NOT EQUAL   changed
          ENDIF
          GOTO      GETDT999                     * Valid item record found
.
GETDT900  MOVE      SP8,PRITDAT1
.
GETDT999  RETURN
+
.**********************************************************************
.*                            ADITM000           Called by: PPTMP000  *
.*           Add a new item to the temporary pathology test file      *
.**********************************************************************
ADITM000  PACK      KEY22,SAVIFLAG,ITEM,PRMUSUBN,SAVSDATE
          CALL      RDPRIT1                 * read the item file
          COMPARE   ZERO,OVRCD
          GOTO      ADITM250 IF EQUAL
.
          CALL      RPPRIT1                 * get the previous record on the
          BRANCH    OVRCD,ADITM999            item file
.
          MATCH     PRMUSUBN,PRITSUBN       * match sub-item numbers
          GOTO      ADITM999 IF NOT EQUAL
.
          MATCH     ITEM,PRITITMN           * match item numbers
          GOTO      ADITM999 IF NOT EQUAL
.
          COMPARE   SAVIFLAG,PRITFLAG       * compare item flags
          GOTO      ADITM999 IF NOT EQUAL
.
.------ we have the correct record on the item file so get the temp file ------
.------ record we are processing, writee with the correct item amount, ------
.------ and get the record we were currently positioned on to continue ------
.------ processing ------
.
ADITM250  PACK      SAVKEY85,TMPSCODE,TMPSDATE,TMPSTIME,TMPITEM,TMPSITEM:
                             TMPROCS,TMPDEBT,TMPSCAN,TMPPRAC,TMPCLAIM:
                             TMPSDOCT,TMPRDATE,TMPRDOCT,TMPIFLAG,TMPTRAN
.
.         If this is a multiple service add, FORM1 = 0
.
          IF        FORM1 = 0
            CALL      RPTMPR3               * get last record of multiple
            PACK      TMPIDESC,CONCATDS,SP30
          ELSE
            PACK      TMPIDESC,PRITDESC,SP30
          ENDIF
.
          MOVE      SP5,TMPSCODE            * not a multiple item itself
          MOVE      ONE,TMPMITEM            * is an inserted item
          MOVE      PRITITMN,TMPITEM        * set item code
          MOVE      PRITSUBN,TMPSITEM       * set sub-item code
          MOVE      SP4,TMPABBRV            * no abbreviation
          MOVE      ONE,TMPROCS             * one item only
          MOVE      ONE,TMPSERVS            * one item only
          CALL      ISEXC000                * is exception charging needed?
          IF        EXIT = 1
            MOVE      PREXCHRG,PRITSFEE     * use this charge instead
          ENDIF
          MOVE      PRITSFEE,TMPIAMNT       * item amount
          MOVE      PRITSFEE,TMPITOT        * set item fee
.
ADITM260  ADD       ONE,TMPTRAN             * increment transaction number
          PACK      KEY85,TMPSCODE,TMPSDATE,TMPSTIME,TMPITEM,TMPSITEM,TMPROCS:
                          TMPDEBT,TMPSCAN,TMPPRAC,TMPCLAIM,TMPSDOCT:
                          TMPRDATE,TMPRDOCT,TMPIFLAG,TMPTRAN
          CALL      RATMPR3
          COMPARE   ZERO,OVRCD              * already no temp file ?
          GOTO      ADITM260 IF EQUAL       * yes, try next transaction no.
          CALL      WRTMPR3                 * add to the temp file
.
          MOVE      SAVKEY85,KEY85          * restore original key
          CALL      RDTMPR3                 * restore original record
ADITM999  RETURN
+
.**********************************************************************
.*                               LOADT000                             *
.*        Routine to load the temporary files variables with their    *
.*        respective values.                                          *
.**********************************************************************
LOADT000  MOVE      PRHRPIND,TMPPIND
          MOVE      PRHDACCD,TMPADATE
          IF        PRCNRDOC = 0
             MOVE      PRHRREFT,TMPREFD     * Referring Doc. Referral Details
          ELSE
             MOVE      PRHTREFT,TMPREFD     * Billing Holding Referral Details
          ENDIF
          MOVE      PRHROCOD,TMPOPS
          MOVE      PRHRMESS,TMPMESG
          MOVE      PRHTSERN,TMPSERVS
          MOVE      PRHTIDES,TMPIDESC
          MOVE      PRHTIAMT,TMPIAMNT
.
          MOVE      PRHRNAME,PRANAME      * default person resp. for a/c details
          MOVE      PRHRADD1,PRAADD1
          MOVE      PRHRADD2,PRAADD2
          MOVE      PRHRADD3,PRAADD3
          MOVE      PRHRADD4,PRAADD4
          MOVE      PRHRPOST,PRAPOST
          MOVE      PRHRTELP,PRAPPHON
          MOVE      PRHRTELB,PRABPHON
          MOVE      PRHRMPHN,PRAMPHON
          MOVE      PRHRRELP,PRARREL
.
          MATCH     PRANAME,SP45
          IF        @EQUAL
            MATCH     SP70,PRHDCLAM
            IF        !@EQUAL
              CALL      PRES0000          * Check PRFA based on claim code
              COMPARE   ZERO,OVRCD
              GOTO      RESC9999 IF EQUAL
            ENDIF
          ENDIF
.
          IF PRCNLAYT=4            
            CALL RESC0000                   * get Responsible Person data
           ELSE
            CALL SESC0000                   * get Responsible Person NON RCH
          ENDIF
.
...       MOVE      PRHRNAME,TMPRESP        ( replaced by above )
...       MOVE      PRHRADD1,TMPRADD1
...       MOVE      PRHRADD2,TMPRADD2
...       MOVE      PRHRADD3,TMPRADD3
...       MOVE      PRHRPOST,TMPRPOST
...       MOVE      PRHRTELP,TMPRPTEL
...       MOVE      PRHRTELB,TMPRBTEL
...       MOVE      PRHRRELP,TMPRREL
.
          MOVE      PRHRUDF1,TMPUDEF1
          MOVE      PRHRUDF2,TMPUDEF2
          MOVE      PRHRUDF3,TMPUDEF3
          MOVE      PRHRUDF4,TMPUDEF4
          MOVE      PRHDUNIQ,TMPUIDEN
          MOVE      PRHRUNCL,TMPCLNUM
          MOVE      PRHRADMN,TMPADMN
          MOVE      PRHTIAMT,TMPITOT
          MOVE      PRHTPFLG,TMPPFLAG
          MOVE      PRHTS4B3,TMPS4B3
          MOVE      PRHRBULK,TMPBULK
          MOVE      PRHRBCOD,TMPBCODE
          MOVE      PRHTMEDA,TMPMASS
          MOVE      FALSE,TMPMFLAG
.
          MOVE      PRHTITMN,ITEM
          MOVE      PRHTGSTA,TMPGSTA
          MOVE      PRHTGSTC,TMPGSTC
          MOVE      PRHRRFPD,TMPREFP
          MOVE      PRHTREFN,TMPREFN
          MOVE      PRHTENCN,TMPENCN
.
.                                           * clear the stepdown variables
          MOVE      ZERO,TMPMAXR
          MOVE      ZERO,TMPMAXD
          UNPACK    SP30,TMPSTEP,TMPSTSB
.
          COMPARE   ZERO,PRHTS4B3           * see if we are processing an S4B3
          GOTO      LOADT999 IF EQUAL
.
..ML..    PACK      KEY17,PRHTITMN,PRHTDATE
..ML..    CALL      RDPRTE1                 * read the private practice
..ML..    COMPARE   ZERO,OVRCD                pathology test file
..ML..    GOTO      LOADT100 IF EQUAL
..ML..
..ML..    CALL      RPPRTE1                 * get the previous private practice
..ML..    BRANCH    OVRCD,LOADT999            pathology test file record
..ML..
..ML..    MATCH     PRHTITMN,PRTECODE       * match test codes
..ML..    GOTO      LOADT999 IF NOT EQUAL
.
.------ load the item details ------
.
..ML..LOADT100  MOVE      PRTEDESC,TMPIDESC
..ML..    MOVE      PRTEITMN,ITEM
..ML..    LOAD      ITEM,PRHTFLAG,PRTEAMAN
.
LOADT999  RETURN
.*********************************************************************
.         Subroutine to get Responsible Person  RCH                       
.*********************************************************************
RESC0000  
.         COMPARE   ZERO,VSCANPMI 
.         GOTO      RESC9000 IF EQUAL
.
          MATCH     PRANAME,SP45
          GOTO      RESC9000 IF NOT EQUAL
.
          OPEN      PMSPX2A1,"pmspx2af"
          MOVE      PRHDDEBT,KEY8
          CALL      RDPMPX21
          IF        OVRCD=1
             GOTO     RESC9000    
           ELSE
             MOVE     PMPXCONP,FORM1
          ENDIF
          COMPARE   ZERO,FORM1
          IF        @EQUAL
             MOVE     TWO,FORM1
          ENDIF
.
          BRANCH    FORM1,RESC1000,RESC2000,RESC3000,RESC3000,RESC3000,RESC9000
.
RESC1000  MOVE      PMPXMTLE,PACTITLE
          MOVE      PMPXMSNA,PACSNAME
          MOVE      PMPXMGNA,ANS
          MOVE      ANS,PACGNAME
          MOVE      ONE,PACFRMT
          CALL      PACNAME
          MOVE      PACFNAME,TMPRESP 
          PACK      TMPRADD1,PMPXMAD1,SP30
          PACK      TMPRADD2,PMPXMAD2,SP30
          PACK      TMPRADD3,PMPXMAD3,SP30
          PACK      TMPRADD3,PMPXMAD4,SP30
          PACK      TMPRPOST,PMPXMPOS,SP30
          MOVE      PMPXMPNO,TMPRPTEL
          MOVE      PMPXMBNO,TMPRBTEL
          PACK      TMPRREL,SP70
          MOVE      "MOTHER",TMPRREL
.
          MATCH     SP45,TMPRESP
          GOTO      RESC9999 IF NOT EQUAL
.
          GOTO      RESC6000
.
RESC2000  MOVE      PMPXFTLE,PACTITLE
          MOVE      PMPXFSNA,PACSNAME
          MOVE      PMPXFGNA,ANS
          MOVE      ANS,PACGNAME
          MOVE      ONE,PACFRMT
          CALL      PACNAME
          MOVE      PACFNAME,TMPRESP 
          PACK      TMPRADD1,PMPXFAD1,SP30
          PACK      TMPRADD2,PMPXFAD2,SP30
          PACK      TMPRADD3,PMPXFAD3,SP30
          PACK      TMPRADD4,PMPXFAD4,SP30
          PACK      TMPRPOST,PMPXFPOS,SP30
          MOVE      PMPXFPNO,TMPRPTEL
          MOVE      PMPXFBNO,TMPRBTEL
          PACK      TMPRREL,SP70
          MOVE      "FATHER",TMPRREL
.
          MATCH     SP45,TMPRESP
          GOTO      RESC9999 IF NOT EQUAL
.
          GOTO      RESC6000
.
RESC3000  MOVE      PRHDDEBT,KEY8
          CALL      RDMAST1
          IF        OVRCD=1
             GOTO     RESC9000    
          ENDIF
.
          COMPARE   FOUR,FORM1
          GOTO      RESC4000 IF EQUAL
.
          COMPARE   FIVE,FORM1
          GOTO      RESC5000 IF EQUAL
.
          PACK      TMPRESP,PNKNAME,SP30
          PACK      TMPRADD1,PNKADD1,SP30
          PACK      TMPRADD2,PNKADD2,SP30
          PACK      TMPRADD4,PNKADD4,SP30
          PACK      TMPRADD3,PNKSUBR,SP30
          PACK      TMPRPOST,PNKPOST,SP30
          MOVE      PNKTELP,TMPRPTEL
          MOVE      PNKTELB,TMPRBTEL
          MOVE      PNKRELP,TMPRREL
.
          MATCH     SP45,TMPRESP
          GOTO      RESC9999 IF NOT EQUAL
.
          GOTO      RESC6000
.
RESC4000  PACK      TMPRESP,PTMXECNM,SP30
          PACK      TMPRADD1,PTMXECA1,SP30
          PACK      TMPRADD2,PTMXECA2,SP30
          PACK      TMPRADD3,PTMXECA3,SP30
          PACK      TMPRADD4,PTMXECA4,SP30
          PACK      TMPRPOST,PTMXECPC,SP30
          MOVE      PTMXECPP,TMPRPTEL
          MOVE      PTMXECBP,TMPRBTEL
          MOVE      PTMXECRE,TMPRREL
.
          MATCH     SP45,TMPRESP
          GOTO      RESC9999 IF NOT EQUAL
.
          GOTO      RESC6000
.
RESC5000  PACK      TMPRESP,PTMXNRNM,SP30
          PACK      TMPRADD1,PTMXNRA1,SP30
          PACK      TMPRADD2,PTMXNRA2,SP30
          PACK      TMPRADD3,PTMXNRA3,SP30
          PACK      TMPRADD4,PTMXNRA4,SP30
          PACK      TMPRPOST,PTMXNRPC,SP30
          MOVE      PTMXNRPP,TMPRPTEL
          MOVE      PTMXNRBP,TMPRBTEL
          MOVE      PTMXNRRE,TMPRREL
.
          MATCH     SP45,TMPRESP
          GOTO      RESC9999 IF NOT EQUAL
.
RESC6000  MOVE      PTITL,PACTITLE
          MOVE      PSNAME,PACSNAME
          MOVE      PGNAME,PACGNAME
          MOVE      ONE,PACFRMT
          CALL      PACNAME
          MOVE      PACFNAME,TMPRESP
.
          ENDSET    TMPRESP
          APPEND    SP45,TMPRESP
          RESET     TMPRESP
.
          MOVE      PADD1,TMPRADD1
          MOVE      PADD2,TMPRADD2
          MOVE      PADD4,TMPRADD4
.
          MOVE      PSUBRB,TMPRADD3
          ENDSET    TMPRADD3
          APPEND    SP25,TMPRADD3
          RESET     TMPRADD3
.
          MOVE      PPOST,TMPRPOST
          MOVE      PTELEP,TMPRPTEL  
          MOVE      PTELEB,TMPRBTEL
          MOVE      "SELF      ",TMPRREL
.
          GOTO      RESC9999
.
RESC9000  MOVE      PRHRNAME,TMPRESP
          MOVE      PRHRADD1,TMPRADD1
          MOVE      PRHRADD2,TMPRADD2
          MOVE      PRHRADD3,TMPRADD3
          MOVE      PRHRADD4,TMPRADD4
          MOVE      PRHRPOST,TMPRPOST
          MOVE      PRHRTELP,TMPRPTEL
          MOVE      PRHRTELB,TMPRBTEL
          MOVE      PRHRMPHN,TMPRMPHN
          MOVE      PRHRRELP,TMPRREL
.
          MATCH     SP45,TMPRESP 
          GOTO      RESC9999 IF NOT EQUAL
.
..          MOVE      PRDBRNAM,TMPRESP 
..          MOVE      PRDBRAD1,TMPRADD1
..          MOVE      PRDBRAD2,TMPRADD2
..          MOVE      PRDBRAD3,TMPRADD3
..          MOVE      PRDBRPOS,TMPRPOST
..          MOVE      PRDBRTEP,TMPRPTEL
..          MOVE      PRDBRTEB,TMPRBTEL
..          MOVE      PRDBRREL,TMPRREL
.
          MATCH     SP45,TMPRESP
          GOTO      RESC9999 IF NOT EQUAL
.
.         Use debtor file (Patient Self)
.
..          PACK      TMPRESP,PRDBGNAM,PRDBSNAM,SP30
..          MOVE      PRDBADD1,TMPRADD1
..          MOVE      PRDBADD2,TMPRADD2
..          MOVE      PRDBADD3,TMPRADD3
..          MOVE      PRDBPOST,TMPRPOST
..          MOVE      PRDBTELP,TMPRPTEL 
..          MOVE      PRDBTELB,TMPRBTEL
..          MOVE      "SELF   ",TMPRREL
.
RESC9999  RETURN
+
.*********************************************************************
.         Subroutine to get Responsible Person NON RCH                
.*********************************************************************
SESC0000  
.         COMPARE   ZERO,VSCANPMI 
.         GOTO      SESC9000 IF EQUAL
.
          MATCH     PRANAME,SP45
          GOTO      SESC1000 IF EQUAL
.
          MOVE      PRANAME,TMPRESP              * person resp. for a/c details
          MOVE      PRAADD1,TMPRADD1
          MOVE      PRAADD2,TMPRADD2
          MOVE      PRAADD3,TMPRADD3
          MOVE      PRAADD4,TMPRADD4
          MOVE      PRAPOST,TMPRPOST
          MOVE      PRAPPHON,TMPRPTEL
          MOVE      PRABPHON,TMPRBTEL
          MOVE      PRAMPHON,TMPRMPHN
          MOVE      PRARREL,TMPRREL
          GOTO      SESC9999
.
SESC1000  OPEN      PATMA1A1,"patma1af"
          OPEN      PATMX1A1,"patmx1af"
          MOVE      PRHDDEBT,KEY8
          CALL      RDMAST1
          IF        OVRCD=1
             GOTO     SESC9000    
          ENDIF
.
          MOVE      PTITL,PACTITLE
          MOVE      PSNAME,PACSNAME
          MOVE      PGNAME,PACGNAME
          MOVE      ONE,PACFRMT
          CALL      PACNAME
          MOVE      PACFNAME,TMPRESP
.
          ENDSET    TMPRESP
          APPEND    SP45,TMPRESP
          RESET     TMPRESP
.
          MOVE      PADD1,TMPRADD1
          MOVE      PADD2,TMPRADD2
          MOVE      PADD4,TMPRADD4
.
          MOVE      PSUBRB,TMPRADD3
          ENDSET    TMPRADD3
          APPEND    SP25,TMPRADD3
          RESET     TMPRADD3
.
          MOVE      PPOST,TMPRPOST
          MOVE      PTELEP,TMPRPTEL  
          MOVE      PTELEB,TMPRBTEL
          MOVE      "SELF      ",TMPRREL
.
          GOTO      SESC9999
.
SESC9000  MOVE      PRHRNAME,TMPRESP
          MOVE      PRHRADD1,TMPRADD1
          MOVE      PRHRADD2,TMPRADD2
          MOVE      PRHRADD3,TMPRADD3
          MOVE      PRHRADD4,TMPRADD4
          MOVE      PRHRPOST,TMPRPOST
          MOVE      PRHRTELP,TMPRPTEL
          MOVE      PRHRTELB,TMPRBTEL
          MOVE      PRHRMPHN,TMPRMPHN
          MOVE      PRHRRELP,TMPRREL
.
          MATCH     SP45,TMPRESP 
          GOTO      SESC9999 IF NOT EQUAL
.
..          MOVE      PRDBRNAM,TMPRESP 
..          MOVE      PRDBRAD1,TMPRADD1
..          MOVE      PRDBRAD2,TMPRADD2
..          MOVE      PRDBRAD3,TMPRADD3
..          MOVE      PRDBRPOS,TMPRPOST
..          MOVE      PRDBRTEP,TMPRPTEL
..          MOVE      PRDBRTEB,TMPRBTEL
..          MOVE      PRDBRREL,TMPRREL
.
          MATCH     SP45,TMPRESP
          GOTO      SESC9999 IF NOT EQUAL
.
.         Use debtor file (Patient Self)
.
..          PACK      TMPRESP,PRDBGNAM,PRDBSNAM,SP30
..          MOVE      PRDBADD1,TMPRADD1
..          MOVE      PRDBADD2,TMPRADD2
..          MOVE      PRDBADD3,TMPRADD3
..          MOVE      PRDBPOST,TMPRPOST
..          MOVE      PRDBTELP,TMPRPTEL 
..          MOVE      PRDBTELB,TMPRBTEL
..          MOVE      "SELF   ",TMPRREL
.
SESC9999  RETURN
+
.**********************************************************************
.*                              CREATP00                              *
.*                   Create the Indexed Temp Files                    *
.**********************************************************************
CREATP00  CALL      RMTMP000                * kill the temp files if they exist
.
          CLEAR     CMDLINE
          APPEND    "isbuild ",CMDLINE
          APPEND    FNAME2,CMDLINE
          APPEND    " 755 u1-29,78-80,30-77",CMDLINE
          APPEND    SP30,CMDLINE
          RESET     CMDLINE
.
          EXECUTE   CMDLINE,TASKID
          OPEN      PRITM2XX,FNAME2
.
          CLEAR     CMDLINE
          APPEND    "isbuild ",CMDLINE
          APPEND    FNAME3,CMDLINE
          APPEND    " 591 u1-5,6-13,76-80,14-22,23-25,26-75,81-82,83-85",CMDLINE
          APPEND    " u81-82,14-22,23-25,1-5,6-13,26-75,76-80,83-85",CMDLINE
          APPEND    " u81-82,14-22,23-25,6-13,76-80,83-85",CMDLINE
          APPEND    SP70,CMDLINE
          RESET     CMDLINE
          EXECUTE   CMDLINE,TASKID
.
          OPEN      PRITM3XX,FNAME3
          OPEN      PRITM3XY,FNAME3
          OPEN      PRITM3YY,FNAME3                                   *I-123419
          CALL      CLRTF000                     * clear temp files
.
CREATP99  RETURN
+
.**********************************************************************
.*                                RMTMP000                            *
.*             Kill the temp files if they already exist              *
.**********************************************************************
RMTMP000  CLEAR     CMDLINE
          CLOSE     PRITM2XX
          APPEND    "iserase ",CMDLINE
          APPEND    FNAME2,CMDLINE
          RESET     CMDLINE
.
          EXECUTE   CMDLINE,TASKID
.
          CLEAR     CMDLINE
          CLOSE     PRITM3XX
          CLOSE     PRITM3XY
          CLOSE     PRITM3YY                                          *I-123419
          APPEND    "iserase ",CMDLINE
          APPEND    FNAME3,CMDLINE
          RESET     CMDLINE
.
          EXECUTE   CMDLINE,TASKID
.
RMTMP999  RETURN
+
.**********************************************************************
.*                               CLRTF000                             *
.*          Routine the clear the temp files for each debtor          *
.**********************************************************************
CLRTF000  PACK      KEY80,SP30,SP30,SP20
          CALL      RSTMPR2                 * position at the start of the
          CALL      RKTMPR2                   temp file
          BRANCH    OVRCD,CLRTF100
.
          PACK      KEY80,TMPDEBT,TMPSCAN,TMPPRAC,TMPCLAIM,TMPSDOCT,TMPPIND:
                          TMPRDATE,TMPRDOCT,TMPSDATE,TMPSTIME,TMPIFLAG,TMPITEM:
                          TMPSITEM,TMPTRAN
          CALL      DETMPR2                 * delete from the temp file
          GOTO      CLRTF000
.
.------ clear the pathology temp file ------
.
CLRTF100  PACK      KEY85,SP30,SP30,SP30
          CALL      RSTMPR3                 * position at the start of the
          CALL      RKTMPR3                   temp file
          BRANCH    OVRCD,CLRTF999
.
          PACK      KEY85,TMPSCODE,TMPSDATE,TMPSTIME,TMPITEM,TMPSITEM,TMPROCS:
                          TMPDEBT,TMPSCAN,TMPPRAC,TMPCLAIM,TMPSDOCT,TMPRDATE:
                          TMPRDOCT,TMPIFLAG,TMPTRAN
          CALL      DETMPR3                 * delete from the temp file
          GOTO      CLRTF100
.
CLRTF999  RETURN
+
. *****************************************************************************
. * Subroutine : JULCONV                                                      *
. * Function   : Convert a julian date to gregorian format (DDMMYYCC)         *
. * Parameters : JWKDAY4  - Julian day of year                                *
. *              JWKYER   - Julian year (YY)                                  *
. *              JWKCC    - Julian century (CC)                               *
. * Returns    : DD       - Day of month      (eg. 23 = 23rd of month)        *
. *              MM       - Month of year     (eg. 11 = November)             *
. *              YY       - Year of century   (eg. 89 )                       *
. *              CC       - Century           (eg. 19 = 1900 to 1999)         *
. *****************************************************************************
JULCONV   MOVE      JWKDAY4,JULDAY4          * convert to a form field
          MOVE      JWKYER,JULYR             * convert to a form field
          MOVE      JWKCC,JULCC              * convert to a form field
.
.         If JULDAY4 is not in the range 1-365 (or 1-366 for a leap year)
.         then adjust the year appropriately to make it in this range.
.
          MOVE      JULYR,YY                 * current year
          MOVE      JULCC,CC                 * current century
          CALL      JULCHKDA                 * make sure it is the right range
.
          MOVE      ZERO,MM                  * initialise month
          MOVE      YY,JULYR                 * save year
          MOVE      CC,JULCC                 * save century
.
JULCO100  ADD       ONE,MM                   * increment month
.
.         Get the number of days upto the start of this month
.
          LOAD      JULWK FROM MM OF JJAN,JFEB,JMAR,JAPR,JMAY,JJUN:
                                     JJUL,JAUG,JSEP,JOCT,JNOV,JDEC
.
.         Special case, allow for the current year being a leap year
.
          COMPARE   THREE,MM                 * after february ?
          GOTO      JULCO300 IF LESS         * no, not affected by leap year
.
.         The leap year flag is "1" for a leap year, and "0" otherwise. Thus
.         we can use this flag as the number of days extra in the current year.
.
          ADD       LEAPYR,JULWK
.
.         Check if the day number (julian day) is in this month
.
JULCO300  COMPARE   JULDAY4,JULWK            * have we past the month ?
          GOTO      JULCO500 IF NOT LESS     * yes. Go back to previous month
.
.         Day is greater than or equal to this month, keep looking.
.
          MOVE      JULWK,JHOLD              * remember the number of days
.
.         If the current month is december, then we have finished loop.
.         Otherwise, loop forward to the next month, and check it.
.
          COMPARE   TEN2,MM                  * reached december ?
          GOTO      JULCO100 IF LESS         * no, try next month
          ADD       ONE,MM                   * adjust for SUB ONE,MM below
.
.         Go back to the previous month. This is because we have check one
.         month too many.
.
JULCO500  SUB       JHOLD,JULDAY4            * calculate the day of the month
          MOVE      JULDAY4,DD               * return value
          SUB       ONE,MM                   * go back to previous month
          RETURN
+
. *****************************************************************************
. * Subroutine : JULCHKDA                                                     *
. * Function   : Make sure julian date is in the range of 1-365 (or 1-366)    *
. * Parameters : JULDAY4  - Julian day of year                                *
. *              YY       - Julian year (YY)                                  *
. *              CC       - Julian century (CC)                               *
. * Returns    : JULDAY4  - Julian day                                        *
. *              YY       - Julian year (YY)                                  *
. *              CC       - Julian century (CC)                               *
. *****************************************************************************
JULCHKDA  CALL      JULLEAPY                  * set leap year flag
.
.         Check if we should be in the next year
.
          BRANCH    LEAPYR,JULCH100           * allow for leap year
.
          COMPARE   "366",JULDAY4             * non-leap year ends on day 365
          GOTO      JULCH500 IF LESS          * not into next year
          SUB       "365",JULDAY4             * bring back into this year
          GOTO      JULCH300                  * increment year
.
JULCH100  COMPARE   "367",JULDAY4             * leap year ends on day 366
          GOTO      JULCH500 IF LESS          * not into next year
          SUB       "366",JULDAY4             * bring back into this year
.
.         We have moved into the next year. Increment year by one.
.
JULCH300  ADD       ONE,YY                    * increment year
          COMPARE   ZERO,YY                   * check for a new century
          GOTO      JULCHKDA IF NOT EQUAL     * no, recheck julian date
          ADD       ONE,CC                    * increment century
          GOTO      JULCHKDA                  * recheck julian date
.
.         Check if we should be in the previous year
.
JULCH500  COMPARE   ONE,JULDAY4               * check if julian day is below 1
          GOTO      JULCH999 IF NOT LESS      * not in previous year
.
.         We have moved in to the previous year. Decrement year by one.
.
          COMPARE   ZERO,YY                   * year zero ?
          GOTO      JULCH600 IF EQUAL         * yes, decrement century as well
          SUB       ONE,YY                    * goto previous year
          GOTO      JULCH800                  * fix up day number
.
JULCH600  MOVE      "99",YY                   * new year
          SUB       ONE,CC                    * decrement century
.
.         Fix up day number for this new year
.
JULCH800  CALL      JULLEAPY                  * set leap year flag
          ADD       "365",JULDAY4             * days in previous year
          ADD       LEAPYR,JULDAY4            * adjust for leap year
          GOTO      JULCHKDA                  * recheck julian date
.
JULCH999  RETURN
+
. *****************************************************************************
. * Subroutine : JULLEAPY                                                     *
. * Function   : Set the leap year flag if current year is a leap year        *
. * Parameters : YY       - Julian year (YY)                                  *
. *              CC       - Julian century (CC)                               *
. * Returns    : LEAPYR   - Leap year flag  0 = No, 1 = Yes                   *
. *****************************************************************************
JULLEAPY  MOVE      YY,JULWK                 * work variable
.
.         Check if the year is divisible by four. If it isn't, then this is not
.         a leap year.
.
          DIV       FOUR,JULWK               * divide by four, truncating
          MULT      FOUR,JULWK               * multiple to get modulus
.
          COMPARE   YY,JULWK                 * are they still the same ?
          GOTO      JLEAP900 IF NOT EQUAL    * no, this is not a leap year
.
.         The year is divisible by four. We probably have a leap year. However
.         there is one special case to handle. If the year is divisible by
.         100, and not 400, then this is NOT a leap year (the last time this
.         happenned was in 1900, then next time is 2100).
.
          COMPARE   ZERO,YY                  * year 0 (divisible by 100) ?
          GOTO      JLEAP800 IF NOT EQUAL    * no, this is a leap year
          MOVE      CC,JULWK                 * work variable
          DIV       FOUR,JULWK               * divide by four, truncating
          MULT      FOUR,JULWK               * multiple to get modulus
.
          COMPARE   CC,JULWK                 * are they still the same ?
          GOTO      JLEAP900 IF NOT EQUAL    * no, this is not a leap year
.
JLEAP800  MOVE      ONE,LEAPYR               * This is a leap year
          GOTO      JLEAP999
.
JLEAP900  MOVE      ZERO,LEAPYR              * This is not a leap year
.
JLEAP999  RETURN
+
. *****************************************************************************
. * Subroutine : DMYCONV                                                      *
. * Function   : Convert a gregorian date to julian format (DDDYYCC)          *
. * Parameters : DD       - Day of month      (eg. 23 = 23rd of month)        *
. *              MM       - Month of year     (eg. 11 = November)             *
. *              YY       - Year of century   (eg. 89 )                       *
. *              CC       - Century           (eg. 19 = 1900 to 1999)         *
. * Return     : JULDAY4  - Julian day of year                                *
. *              JULYR    - Julian year (YY)                                  *
. *              JULCC    - Julian century (CC)                               *
. *****************************************************************************
DMYCONV   CALL      DMYLEAPY                  * determine if a leap year
.
.        Get the number of days prior to the start of the month
.
          LOAD      JULDAY4 FROM MM OF JJAN,JFEB,JMAR,JAPR,JMAY,JJUN:
                                       JJUL,JAUG,JSEP,JOCT,JNOV,JDEC
.
.         Special case, allow for the current year being a leap year
.
          COMPARE   THREE,MM                  * march or later ?
          GOTO      DMYCO200 IF LESS          * no, don't worry about leapyears
.
.         The leap year flag is "1" for a leap year, and "0" otherwise. Thus
.         we can use this flag as the number of days extra in the current year.
.
          ADD       LEAPYR,JULDAY4
.
.         We have the number of days before the start of the month. Just
.         add the number of days in the month
.
DMYCO200  ADD       DD,JULDAY4
          MOVE      YY,JULYR                 * set the year
          MOVE      CC,JULCC                 * set the century
          RETURN
+
. *****************************************************************************
. * Subroutine : DMYLEAPY                                                     *
. * Function   : Set the leap year flag if current year is a leap year        *
. * Parameters : YY       - Julian year (YY)                                  *
. *              CC       - Julian century (CC)                               *
. * Returns    : LEAPYR   - Leap year flag  0 = No, 1 = Yes                   *
. *****************************************************************************
DMYLEAPY  MOVE      YY,JULWK                 * work variable
.
.         Check if the year is divisible by four. If it isn't, then this is not
.         a leap year.
.
          DIV       FOUR,JULWK               * divide by four, truncating
          MULT      FOUR,JULWK               * multiple to get modulus
.
          COMPARE   YY,JULWK                 * are they still the same ?
          GOTO      DMYLE900 IF NOT EQUAL    * no, this is not a leap year
.
.         The year is divisible by four. We probably have a leap year. However
.         there is one special case to handle. If the year is divisible by
.         100, and not 400, then this is NOT a leap year (the last time this
.         happenned was in 1900, then next time is 2100).
.
          COMPARE   ZERO,YY                  * year 0 (divisible by 100) ?
          GOTO      DMYLE800 IF NOT EQUAL    * no, this is a leap year
          MOVE      CC,JULWK                 * work variable
          DIV       FOUR,JULWK               * divide by four, truncating
          MULT      FOUR,JULWK               * multiple to get modulus
.
          COMPARE   CC,JULWK                 * are they still the same ?
          GOTO      DMYLE900 IF NOT EQUAL    * no, this is not a leap year
.
DMYLE800  MOVE      ONE,LEAPYR               * This is a leap year
          GOTO      DMYLE999
.
DMYLE900  MOVE      ZERO,LEAPYR              * This is not a leap year
.
DMYLE999  RETURN
+
.****************************************************************************
.*                                GPIND000                                  *
.*                       Get the patient  indicator                         *
.****************************************************************************
GPIND000  MOVE      SP1,TCINDC1
.
          PACK      TMPPIND,TMPPIND,SP3
          MATCH     SP3,TMPPIND
          GOTO      GPIND999 IF EQUAL
.
          PACK      KEY5,CODEGI,TMPPIND
          CALL      RDCODE1
          BRANCH    OVRCD,GPIND999
.
GPIND999  RETURN
+
.****************************************************************************
.*                                WRECT000                                  *
.****************************************************************************
WRECT000  
.         MATCH     "1",RACLINDC
.         GOTO      WRECT999 IF NOT EQUAL
.
.         MATCH     SP70,PTCNIMCO                * eclipse outbound path set?
.         GOTO      WRECT999 IF EQUAL
.
          MATCH     "1",PTCNUIMC
          GOTO      WRECT999 IF NOT EQUAL
.
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      PRIECTA1,"priectaf"
          TRAPCLR   IO
          BRANCH    OVRCD,WRECT999
.
          MOVE      ZERO,PRECFLAG 
          MOVE      SP70,PRECBATN
          MOVE      PRINUNIQ,PRECUNIQ
          MOVE      PRDTDEBT,PRECURNO
          MOVE      PRINNUMB,PRECINVN
          MOVE      SP70,PRECPBAT
          MOVE      SP70,PRECNBAT
          MOVE      SP70,PRECTRID
          MOVE      ZERO,PRECAMTC
          MOVE      ZERO,PRECAMFP
          MOVE      ZERO,PRECAMMP
          MOVE      SP70,PRECPDAT
          MOVE      SP70,PRECSTAT
          MOVE      HEALTHFD,PRECHFND
.
          MOVE      SP70,PRECEETP
          MATCH     SP70,PRHRE028
          IF        !@EQUAL & !@EOS
            MOVE      "ta",CATEGORY
            MOVE      PRHRE028,CODE
            CALL      GETCOD00 
.
            MATCH     "1",TCINDC1
            IF        @EQUAL
              MOVE      "0",PRECEETP
              GOTO      WRECT500
            ENDIF
.
            MATCH     "2",TCINDC1
            IF        @EQUAL
              MOVE      "0",PRECEETP
              GOTO      WRECT500
            ENDIF
.
            MATCH     "6",TCINDC1
            IF        @EQUAL
              MOVE      "1",PRECEETP
              GOTO      WRECT500
            ENDIF
.
            MATCH     "7",TCINDC1
            IF        @EQUAL
              MOVE      "2",PRECEETP
              GOTO      WRECT500
            ENDIF
            GOTO      WRECT999
          ELSE
            GOTO      WRECT999
          ENDIF
.
WRECT500  IF        IBCNMHOS = 1
            MOVE      SP70,PRECHOSP                * from where ????
.
.           MATCH     SP70,PRINPRAC
            MATCH     SP70,SAVPRAC
            IF        !@EQUAL
.             PACK      KEY6,PRINPRAC,SP70
              PACK      KEY6,SAVPRAC,SP70
              CALL      RDPRPR1
              IF        OVRCD=0
                MATCH     SP70,PRPRREGI
                IF        !@EQUAL
                  PACK      KEY3,PRPRREGI,SP70
                  CALL      RDREGA1
                  IF        OVRCD=0
                    MOVE      REGHOSP,PRECHOSP                    
                  ENDIF
                ENDIF
              ENDIF
            ENDIF
.
          ELSE
            MOVE      SP70,PRECHOSP
          ENDIF
.
          MOVE      PRINPRAC,PRECPRAC
          MOVE      SP70,PRECSPAR
.
          PACK      KEY35,PRECHOSP,PRECFLAG,PRECHFND,PRECUNIQ,PRECINVN,PRECBATN:
                          SP70
          CALL      RAPRECT1
          IF        OVRCD = 1
            CALL      WRPRECT1
          ENDIF
.
          MATCH     "1",RACLINDC
          GOTO      WRECT999 IF NOT EQUAL
.
          MATCH     SP70,PTCNIMCO                * eclipse outbound path set?
          GOTO      WRECT999 IF EQUAL
.
          CALL      SECLX000
.
WRECT999  RETURN
+
.--------------------------------------------------------------------------
.*                             SECLX000                                   *
.*               Schedule Eclipse Extract (IBAPRI07)                      *
.--------------------------------------------------------------------------
SECLX000  MOVE      "IBAPRI07",SCHDPGID
          MOVE      "Eclipse IMC Claims Extract",SCHDDESC
          PACK      SCHDDATE,CCC,CYY,CMM,CDD
          REP       " 0",SCHDDATE
          CLOCK     TIME,SCHDTIME
          MOVE      "S  ",SCHDPRNT           * initialise to spool
          MATCH     SP70,SELPRINT
          IF        !@EQUAL
            MOVE      SELPRINT,SCHDPRNT      * printer code
          ENDIF
          MOVE      "IBAPRI07",SETDFPRG
          MOVE      "8",SETDFRPT
          CALL      SETDEF00                 * save default printer
.
.         Write Keyin parameters
.
          MOVE      ONE,COUNT
          IF        IBCNMHOS = 1
            MOVE      PRECHOSP,KEYSTARR[COUNT]
          ELSE
            MOVE      SP3,KEYSTARR[COUNT]
          ENDIF
.
          ADD       ONE,COUNT
          MOVE      ONE,OPTNFLAG
.
          MATCH     "2",PRECEETP
          IF        @EQUAL
            MOVE       TWO,OPTNFLAG
          ENDIF
          MOVE      OPTNFLAG,KEYSTARR[COUNT]    * extract by fund(1)/med(2)
.
          COMPARE   TWO,OPTNFLAG 
          GOTO      SECLX500 IF EQUAL
.     
          ADD       ONE,COUNT
          MOVE      PRECHFND,KEYSTARR[COUNT]    * health fund
.
          MOVE      THREE,F3                    * first 3 keyins
          GOTO      SECLX600
.
SECLX500  MOVE      TWO,F3
.
SECLX600  ADD       ONE,COUNT
          CLEAR     ECCLMARR
.
          IF        IBCNMHOS=ONE
            APPEND    PRECHOSP,ECCLMARR
          ELSE
            APPEND    SP3,ECCLMARR
          ENDIF
          APPEND    PRECUNIQ,ECCLMARR
          APPEND    PRECINVN,ECCLMARR
          APPEND    PRECURNO,ECCLMARR
          APPEND    PRINDATE,ECCLMARR
.
          ASSIGN    (PRINITOT+PRINPAMT+PRINHAMT+PRINIAMT+PRINMAMT+PRINVAMT+PRINOTHA+PRINJAMT+PRINCNTT),PRECAMTC
          IF        IBCNUGST=2
            ADD       PRINGSTJ,PRECAMTC
          ENDIF
.
          APPEND    PRECAMTC,ECCLMARR
          RESET     ECCLMARR
          MOVE      ECCLMARR,KEYSTARR[COUNT]    * to be extracted
.
          ADD       ONE,F3                  * eclipse claims keyins
.
          ADD       ONE,COUNT
          PACK      KEYSTARR[COUNT],SP70         * blank record to signal exit
          ADD       ONE,F3
.
          ADD       ONE,COUNT
          MOVE      ANSP,KEYSTARR[COUNT]         * (P)ost
.>>>>
.>>>>     ADD       ONE,COUNT
.>>>>     MOVE      ANSY,KEYSTARR[COUNT]         * (Y) to extract (if ok)
.>>>>
          ADD       ONE,COUNT
          MOVE      SP70,KEYSTARR[COUNT]         * (Enter) to exit
          ADD       ONE,COUNT
          MOVE      "\",KEYSTARR[COUNT]          * (\) to exit
.
          ADD       THREE,F3                     * add last 3 keyins (if error)
.>>>>     ADD       FOUR,F3                      * add last 4 keyins (if ok)
          MOVE      F3,KEYSTCNT                  * Number of Keyins
.
          CALL      SCHPRO00   * Schedule Extract
.
SECLX999  RETURN
+
.****************************************************************************
.*                                WRIMW000                                  *
.****************************************************************************
WRIMW000  MATCH     "1",PTCNWSIN
          GOTO      WRIMW999 IF NOT EQUAL
.
          MATCH     "1",PTCNIMCW
          GOTO      WRIMW999 IF NOT EQUAL
.
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      WEBIMCA1,"webimcaf"
          TRAPCLR   IO
          BRANCH    OVRCD,WRIMW999
.
          MOVE      ZERO,WBIMFLAG
          MOVE      SP70,WBIMBATN
          MOVE      PRINUNIQ,WBIMUNIQ
          MOVE      PRDTDEBT,WBIMURNO
          MOVE      PRINNUMB,WBIMINVN
          MOVE      SP70,WBIMPBAT
          MOVE      SP70,WBIMNBAT
          MOVE      SP70,WBIMTRID
          MOVE      ZERO,WBIMAMTC
          MOVE      ZERO,WBIMAMFP
          MOVE      ZERO,WBIMAMMP
          MOVE      SP70,WBIMPDAT
          MOVE      SP70,WBIMSTAT
          MOVE      HEALTHFD,WBIMHFND
.
          MOVE      SP70,WBIMEETP
          MATCH     SP70,PRHRE028
          IF        !@EQUAL & !@EOS
            MOVE      "ta",CATEGORY
            MOVE      PRHRE028,CODE
            CALL      GETCOD00
.
            MATCH     "1",TCINDC1
            IF        @EQUAL
              MOVE      "0",WBIMEETP
              GOTO      WRIMW500
            ENDIF
.
            MATCH     "2",TCINDC1
            IF        @EQUAL
              MOVE      "0",WBIMEETP
              GOTO      WRIMW500
            ENDIF
.
            MATCH     "6",TCINDC1
            IF        @EQUAL
              MOVE      "1",WBIMEETP
              GOTO      WRIMW500
            ENDIF
.
            MATCH     "7",TCINDC1
            IF        @EQUAL
              MOVE      "2",WBIMEETP
              GOTO      WRIMW500
            ENDIF
            GOTO      WRIMW999
          ELSE
            GOTO      WRIMW999
          ENDIF
.
WRIMW500  IF        IBCNMHOS = 1
            MOVE      SP70,WBIMHOSP                * from where ????
.
.           MATCH     SP70,PRINPRAC
            MATCH     SP70,SAVPRAC
            IF        !@EQUAL
.             PACK      KEY6,PRINPRAC,SP70
              PACK      KEY6,SAVPRAC,SP70
              CALL      RDPRPR1
              IF        OVRCD=0
                MATCH     SP70,PRPRREGI
                IF        !@EQUAL
                  PACK      KEY3,PRPRREGI,SP70
                  CALL      RDREGA1
                  IF        OVRCD=0
                    MOVE      REGHOSP,WBIMHOSP
                  ENDIF
                ENDIF
              ENDIF
            ENDIF
.
          ELSE
            MOVE      SP70,WBIMHOSP
          ENDIF
.
          MOVE      PRINPRAC,WBIMPRAC
          MOVE      SP70,WBIMMSID
          MOVE      SP70,WBIMCTYP
          MOVE      SP70,WBIMSPAR
.
          PACK      KEY35,WBIMHOSP,WBIMFLAG,WBIMHFND,WBIMUNIQ,WBIMINVN,WBIMBATN:
                          SP70
          CALL      RAWBIMC1
          IF        OVRCD = 1
            CALL      IBACLOCK
            PACK      WBIMCDAT,CCC,CYY,CMM,CDD
            REP       " 0",WBIMCDAT
            MOVE      CTIMEIS,WBIMCTIM
            MOVE      USERID,WBIMCUID
            CALL      WRWBIMC1
          ENDIF
.
          MATCH     "1",RACLINDC
          GOTO      WRIMW999 IF NOT EQUAL
.
          CALL      SWEBX000
.
WRIMW999  RETURN
+
.--------------------------------------------------------------------------
.*                             SWEBX000                                   *
.*               Schedule WebServices Extract (IBAWEB07)                  *
.--------------------------------------------------------------------------
SWEBX000  MOVE      "IBAWEB07",SCHDPGID
          MOVE      "WebServices IMCW Raise and Claim Extract",SCHDDESC
          PACK      SCHDDATE,CCC,CYY,CMM,CDD
          REP       " 0",SCHDDATE
          CLOCK     TIME,SCHDTIME
          MOVE      "S  ",SCHDPRNT           * initialise to spool
          MATCH     SP70,SELPRINT
          IF        !@EQUAL
            MOVE      SELPRINT,SCHDPRNT      * printer code
          ENDIF
          MOVE      "IBAWEB07",SETDFPRG
          MOVE      "8",SETDFRPT
          CALL      SETDEF00                 * save default printer
.
.         Write Keyin parameters
.
          MOVE      ONE,COUNT
          IF        IBCNMHOS = 1
            MOVE      WBIMHOSP,KEYSTARR[COUNT]
          ELSE
            MOVE      SP3,KEYSTARR[COUNT]
          ENDIF
.
          ADD       ONE,COUNT
          MOVE      ONE,OPTNFLAG
.
          MATCH     "2",WBIMEETP
          IF        @EQUAL
            MOVE       TWO,OPTNFLAG
          ENDIF
          MOVE      OPTNFLAG,KEYSTARR[COUNT]    * extract by fund(1)/med(2)
.
          COMPARE   TWO,OPTNFLAG
          GOTO      SWEBX500 IF EQUAL
.
          ADD       ONE,COUNT
          MOVE      WBIMHFND,KEYSTARR[COUNT]    * health fund
.
          MOVE      THREE,F3                    * first 3 keyins
          GOTO      SWEBX600
.
SWEBX500  MOVE      TWO,F3
.
SWEBX600  ADD       ONE,COUNT
          CLEAR     ECCLMARR
.
          IF        IBCNMHOS=ONE
            APPEND    WBIMHOSP,ECCLMARR
          ELSE
            APPEND    SP3,ECCLMARR
          ENDIF
          APPEND    WBIMUNIQ,ECCLMARR
          APPEND    WBIMINVN,ECCLMARR
          APPEND    WBIMURNO,ECCLMARR
          APPEND    PRINDATE,ECCLMARR
.
          ASSIGN    (PRINITOT+PRINPAMT+PRINHAMT+PRINIAMT+PRINMAMT+PRINVAMT+PRINOTHA+PRINJAMT+PRINCNTT),WBIMAMTC
          IF        IBCNUGST=2
            ADD       PRINGSTJ,WBIMAMTC
          ENDIF
.
          APPEND    WBIMAMTC,ECCLMARR
          RESET     ECCLMARR
          MOVE      ECCLMARR,KEYSTARR[COUNT]    * to be extracted
.
          ADD       ONE,F3                  * webservices claims keyins
.
          ADD       ONE,COUNT
          PACK      KEYSTARR[COUNT],SP70         * blank record to signal exit
          ADD       ONE,F3
.
          ADD       ONE,COUNT
          MOVE      ANSP,KEYSTARR[COUNT]         * (P)ost
.>>>>
.>>>>     ADD       ONE,COUNT
.>>>>     MOVE      ANSY,KEYSTARR[COUNT]         * (Y) to extract (if ok)
.>>>>
          ADD       ONE,COUNT
          MOVE      SP70,KEYSTARR[COUNT]         * (Enter) to exit
          ADD       ONE,COUNT
          MOVE      "\",KEYSTARR[COUNT]          * (\) to exit
.
          ADD       THREE,F3                     * add last 3 keyins (if error)
.>>>>     ADD       FOUR,F3                      * add last 4 keyins (if ok)
          MOVE      F3,KEYSTCNT                  * Number of Keyins
.
          CALL      SCHPRO00   * Schedule Extract
.
SWEBX999  RETURN
+
.
.****************************************************************************
*         Check PRFA based on claim code
.****************************************************************************
PRES0000  MATCH     SP70,PRHDCLAM
          GOTO      PRES9000 IF EQUAL             * blank claim code
.
          PACK      KEY5,ANSC,ANSL,PRHDCLAM,SP70
          CALL      RDCODE1
          BRANCH    OVRCD,PRES9999
.
          MATCH     "P",TCINDC24
          GOTO      PRES9000 IF NOT EQUAL
.
          OPEN      PATIN1A1,"patin1af"
          PACK      KEY6,PRHDCLAM,SP70
          CALL      RDINSR1
          BRANCH    OVRCD,PRES9999
.
          PACK      TMPRESP,INAME,SP30
          PACK      TMPRADD1,IADD1,SP70
          PACK      TMPRADD2,IADD2,SP70
          PACK      TMPRADD3,IADD3,SP70
          PACK      TMPRADD4,IADD4,SP70
          PACK      TMPRPOST,IPOST,SP70
          MOVE      TMPRBTEL,ITELEB,SP70
          PACK      TMPRPTEL,SP70
          PACK      TMPRREL,SP70
          GOTO      PRES9999
.
PRES9000  MOVE      ONE,OVRCD
PRES9999  RETURN
.
.****************************************************************************
          INC       PRIINVHT
          INC       PMSOSPTM                                          *I-210835
