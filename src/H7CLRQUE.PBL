.***************************************************************************
.* System    :   Broadcast API Messages                                    *
.* Program   :   H7CLRQUE                                                  *
.* Desc      :   Program for clearing broadcast message holding tables     *
.***************************************************************************
.* Date      :   06/12/2001                                                *
.* Author    :   Steve Armstrong                                           *
.* Function  :   This program will be executed by a script which will pass *
.*               a number of hours.  Using the hours passed, the program   *
.*               calculate the date/time for record deletion, ie all       *
.*               records on or before this date will be deleted.           *
.*                                                                         *
.* Mods      :                                                             *
.***************************************************************************
.*  V11.04.03  28/03/2024 Thanh T                TSK 0935314               *
.*             Recompiled for PMSQDRFD changes                             *
.*  V11.04.02  09/01/2024 Thanh T                TSK 0936263               *
.*             Added OPEN PMSQPXA1 index                                   *
.*  V11.04.01  11/12/2023 Thanh T                TSK 0935728               *
.*             Recompiled for OPRQUEFD changes                             *
.*  V11.02.01  09/02/2022  Thanh T       TSK 0905641                       *
.*             Recompiled as OUTMA1FD/WATTR1FD changes                     *
.*  V11.01.01  11/06/2021  Jill Parkinson Task                             *
.*             Changed to allow up to a 5 digit hour to be entered         *
.*  V10.15.01  13/11/2019  Davin            TSK 0861253                    *
.*             Added OUTTHIFD for O/P telehealth fields                    *
.***************************************************************************
.*  V10.14.00  27/02/2019  Steve Armstrong   CAR 0870686                   *
.*             Created new program based on DGCLRQUE and added a new       *
.*             Option 2 for clearing out orphaned child holding table      *
.*             records.                                                    *
.*             Also changed from STD002FD/IO to STD001FD/IO so can run as  *
.*             standard program.                                           *
.***************************************************************************
.
          INC       STD001FD
.
. FILE DESCRIPTION INCLUDES
. -------------------------
          INC       ALLCONFD/INC                                       *I-90201
          INC       ALLQUEFD/INC                                       *I-90201
          INC       ALLAEFFD/INC
          INC       ALLENCFD/INC                                       *I-90201
          INC       ALLERCFD/INC
          INC       ALLREFFD/INC                                       *I-90201
          INC       BOKQUEFD/INC
          INC       BOKRC1FD/INC
          INC       BOKRX1FD/INC
          INC       EMRCONFD/INC
          INC       EMRQUEFD/INC
          INC       EMRVISFD/INC
          INC       HL7CISFD/INC
          INC       HL7INBFD/INC
          INC       MEHLERFD/INC
          INC       MRTCONFD/INC                                       *I-90201
          INC       MRTQUEFD/INC                                       *I-90201
          INC       MRTHISFD/INC                                       *I-90201
          INC       MRTMASFD/INC                                       *I-90201
          INC       NHIMASFD/INC
          INC       OPRCONFD/INC
          INC       OPRDEAFD/INC
          INC       OPRQUEFD/INC
          INC       OUTBOAFD/INC
          INC       OUTBB1FD/INC
          INC       OUTCANFD/INC
          INC       OUTCONFD/INC
          INC       OUTCTYFD/INC
          INC       OUTMA1FD/INC
          INC       OUTQMAFD/INC
          INC       OUTQTYFD/INC
          INC       OUTRF1FD/INC
          INC       OUTRQUFD/INC
          INC       OUTRSHFD/INC
          INC       OUTQUEFD/INC
          INC       OUTTHIFD/INC
          INC       PATCONFD/INC
          INC       PATDSCFD/INC
          INC       PATMA1FD/INC
          INC       PATMI1FD/INC
          INC       PATNIDFD/INC
          INC       PATONLFD/INC
          INC       PATRE1FD/INC
          INC       PATTRNFD/INC
          INC       PATWR1FD/INC
          INC       PMSBRQFD/INC
          INC       PMSPX2FD/INC
          INC       PMSCCDFD/INC
          INC       PMSHCPFD/INC
          INC       PMSQCCFD/INC
          INC       PMSQDRFD/INC
          INC       PMSQPTFD/INC
          INC       PMSQVIFD/INC
          INC       PMSVX1FD/INC
          INC       WATCONFD/INC
          INC       WATQUEFD/INC
          INC       WATTR1FD/INC
          INC       WATTX1FD/INC
.
. LOCAL VARIABLE DEFINITION
. -------------------------
DGATEFLG  FORM      1             * Data gate messaging flag
.                                    0 = No Datagate messaging turned on
.                                    1 = Datagate messaging turned on
DIM2A     DIM       2
DIM2B     DIM       2
DIM5      DIM       5
FLAGA     DIM       1            * allqueaf flag
.                                    Y = clear orphaned records
.                                    N = ignore file
FLAGB     DIM       1            * bokqueaf flag
.                                    Y = clear orphaned records
.                                    N = ignore file
FLAGC     DIM       1            * emrqueaf flag
.                                    Y = clear orphaned records
.                                    N = ignore file
FLAGD     DIM       1            * oprqueaf flag
.                                    Y = clear orphaned records
.                                    N = ignore file
FLAGE     DIM       1            * outqmaaf flag
.                                    Y = clear orphaned records
.                                    N = ignore file
FLAGF     DIM       1            * outqtyaf flag
.                                    Y = clear orphaned records
.                                    N = ignore file
FLAGG     DIM       1            * outqueaf flag
.                                    Y = clear orphaned records
.                                    N = ignore file
FLAGH     DIM       1            * outrquaf flag
.                                    Y = clear orphaned records
.                                    N = ignore file
FLAGI     DIM       1            * pmsqdraf flag
.                                    Y = clear orphaned records
.                                    N = ignore file
FLAGJ     DIM       1            * pmsqptaf flag
.                                    Y = clear orphaned records
.                                    N = ignore file
FLAGK     DIM       1            * pmsqviaf flag
.                                    Y = clear orphaned records
.                                    N = ignore file
FLAGL     DIM       1            * watqueaf flag
.                                    Y = clear orphaned records
.                                    N = ignore file
HOURVALU  FORM      2
MESSAGID  FORM      20
MINTVALU  FORM      2
PASSTIME  FORM      5.1           * time keyed in (hrs)
SAVKEY20  DIM       20
SAVKEY22  DIM       22
SAVTXWRD  DIM       1
STRTDTTM  DIM       16            * full date/time (ccyymmddhh:mm:ss)
TOTLMINS  FORM      8
WORKDATE  DIM       8
WORKTIME  FORM      4
.
.
. PROGRAM CONSTANTS
. -----------------
DAYMINS   FORM      "1440"        * minutes in a day
SP16      INIT      "                "
.
.
PRGID     INIT      "H7CLRQUE"
PRGNAM    INIT      "Clear Broadcast Message Holding Tables"
VERSION   INIT      "V12.00.00"
+
.**************************************************************************
.*                              MAIN0000                                  *
.*                      Controlling Logic (Mainline code)                 *
.**************************************************************************
.
MAIN0000  CALL      INIT0000                * initialisation and open files
.
MAIN0500  CALL      OPTN0000                * get option to run
          BRANCH    EXIT,MAIN9999           * exit selected
          BRANCH    COPTION,MAIN1000:       * remove old delivered records
                            MAIN2000        * clean up orphaned records
.
.         Remove old delivered records
.
MAIN1000  CALL      GHRS0000                * get hours old
.
          CALL      GDTM0000                * Calculate starting date/time
.
          CALL      LOOP0000                * Delete appropriate records
          GOTO      MAIN0500
.
.         Clean up orphaned records
.
MAIN2000  CALL      DISP0000                * display input fields
.
          CALL      ACPT0000                * keyin orphaned files to clear
.
          CALL      SLCT0000                * edit orphaned files to clear
          BRANCH    EXIT,MAIN9999           * exit selected
.
          CALL      DELO0000                * delete orphaned records
          GOTO      MAIN0500
.
MAIN9999  CHAIN     PGM                     * chain back to program
+
.****************************************************************************
.*                                INIT0000             Called by: MAIN0000  *
.*                             initialisation                               *
.*  The initialisation routine is used to display headings and open files.  *
.****************************************************************************
.
INIT0000  CALL      DISPHEAD                  * display heading
.
          DISPLAY   *P56:24,*EL,"Opening ":
                    *P64:24,"hl7inbaf";
          OPEN      HL7INB01,"hl7inbaf"
          OPEN      HL7INB03,"hl7inbaf"
.
          DISPLAY   *P64:24,"hl7cisaf";
          OPEN      HL7CISA1,"hl7cisaf"
          OPEN      HL7CISA3,"hl7cisaf"
.
          DISPLAY   *P64:24,"allqueaf";                                *I-90201
          OPEN      ALLQUEA1,"allqueaf"                                *I-90201
.
          DISPLAY   *P64:24,"bokqueaf";
          OPEN      BOKQUEA1,"bokqueaf"
.
          DISPLAY   *P64:24,"emrqueaf";
          OPEN      EMRQUEA1,"emrqueaf"
.
          DISPLAY   *P64:24,"mrtqueaf";                                *I-90201
          OPEN      MRTQUEA1,"mrtqueaf"                                *I-90201
.
          DISPLAY   *P64:24,"oprqueaf";
          OPEN      OPRQUEA1,"oprqueaf"
.
          DISPLAY   *P64:24,"outqueaf";
          OPEN      OUTQUEA1,"outqueaf"
.
          DISPLAY   *P64:24,"outqmaaf";
          OPEN      OUTQMAA1,"outqmaaf"
.
          DISPLAY   *P64:24,"outqtyaf";
          OPEN      OUTQTYA1,"outqtyaf"
.
          DISPLAY   *P64:24,"outrquaf";
          OPEN      OUTRQUA1,"outrquaf"
.
          DISPLAY   *P64:24,"pmsqccaf";
          OPEN      PMSQCCA1,"pmsqccaf"
.
          DISPLAY   *P64:24,"pmsqdraf";
          OPEN      PMSQDRA1,"pmsqdraf"
.
          DISPLAY   *P64:24,"pmsqptaf";
          OPEN      PMSQPTA1,"pmsqptaf"
          OPEN      PMSQPXA1,"pmsqpxaf"
.
          DISPLAY   *P64:24,"pmsqviaf";
          OPEN      PMSQVIA1,"pmsqviaf"
.
          DISPLAY   *P64:24,"watqueaf";
          OPEN      WATQUEA1,"watqueaf"
.
          DISPLAY   *P64:24,"controlf";
          OPEN      CONTROLF,"controlf"
          READ      CONTROLF,THIRTY2;*102,OTCNDGON:
                                     *103,OTCNDGOR:
                                     *104,OTCNDGOC:
                                     *105,OTCNDGOD:
                                     *106,OTCNDGOA:
                                     *107,OTCNDGOB
          READ      CONTROLF,THIRTY7;*239,WTCNDGWA:
                                     *240,WTCNDGWC
          READ      CONTROLF,SIXTY8;*239,OPCNDGUB:
                                    *240,OPCNDGCB
          READ      CONTROLF,SEVENTY9;*115,PTCNDGUP:
                                      *116,PTCNDGUA:
                                      *117,PTCNDGMU:
                                      *239,PTCNDGAD:
                                      *240,PTCNDGDS:
                                      *241,PTCNDGTR:
                                      *242,PTCNDGRG
          READ      CONTROLF,EIGHTY9;*177,EMCNDGAE:
                                     *178,EMCNDGEC:
                                     *179,EMCNDGCE
          READ      CONTROLF,NINTY7;*101,MRCNDGRM
          READ      CONTROLF,HUND03;*41,PTCNDGHA:
                                    *42,PTCNDGHD
          READ      CONTROLF,HUND05;*105,PTCNDGPO:
                                    *106,PTCNDGPR:
                                    *107,PTCNDGPA:
                                    *164,PTCNDGPE
          READ      CONTROLF,HUND06;*4,ALCNDGEA:
                                    *5,ALCNDGED
          READ      CONTROLF,HUND10;*239,PTCNDGCP
.
.         Check if there are any IBA proprietary messages turned on
.         and if so, set the DGATEFLG accordingly so that we can check the
.         hl7inbaf header table as well as the HL7 header table (hl7cisaf)
.
          MOVE      ZERO,DGATEFLG                * default flag to "No"
.
          COMPARE   ONE,OTCNDGON
          GOTO      INIT9000 IF EQUAL
.
          COMPARE   ONE,OTCNDGOR
          GOTO      INIT9000 IF EQUAL
.
          COMPARE   ONE,OTCNDGOC
          GOTO      INIT9000 IF EQUAL
.
          COMPARE   ONE,OTCNDGOD
          GOTO      INIT9000 IF EQUAL
.
          COMPARE   ONE,OTCNDGOA
          GOTO      INIT9000 IF EQUAL
.
          COMPARE   ONE,OTCNDGOB
          GOTO      INIT9000 IF EQUAL
.
          COMPARE   ONE,WTCNDGWA
          GOTO      INIT9000 IF EQUAL
.
          COMPARE   ONE,WTCNDGWC
          GOTO      INIT9000 IF EQUAL
.
          COMPARE   ONE,OPCNDGUB
          GOTO      INIT9000 IF EQUAL
.
          COMPARE   ONE,OPCNDGCB
          GOTO      INIT9000 IF EQUAL
.
          COMPARE   ONE,PTCNDGUP
          GOTO      INIT9000 IF EQUAL
.
          COMPARE   ONE,PTCNDGUA
          GOTO      INIT9000 IF EQUAL
.
          COMPARE   ONE,PTCNDGMU
          GOTO      INIT9000 IF EQUAL
.
          COMPARE   ONE,PTCNDGAD
          GOTO      INIT9000 IF EQUAL
.
          COMPARE   ONE,PTCNDGDS
          GOTO      INIT9000 IF EQUAL
.
          COMPARE   ONE,PTCNDGTR
          GOTO      INIT9000 IF EQUAL
.
          COMPARE   ONE,PTCNDGRG
          GOTO      INIT9000 IF EQUAL
.
          COMPARE   ONE,EMCNDGAE
          GOTO      INIT9000 IF EQUAL
.
          COMPARE   ONE,EMCNDGEC
          GOTO      INIT9000 IF EQUAL
.
          COMPARE   ONE,EMCNDGCE
          GOTO      INIT9000 IF EQUAL
.
          COMPARE   ONE,MRCNDGRM
          GOTO      INIT9000 IF EQUAL
.
          COMPARE   ONE,PTCNDGHA
          GOTO      INIT9000 IF EQUAL
.
          COMPARE   ONE,PTCNDGHD
          GOTO      INIT9000 IF EQUAL
.
          COMPARE   ONE,PTCNDGPO
          GOTO      INIT9000 IF EQUAL
.
          COMPARE   ONE,PTCNDGPR
          GOTO      INIT9000 IF EQUAL
.
          COMPARE   ONE,PTCNDGPA
          GOTO      INIT9000 IF EQUAL
.
          COMPARE   ONE,PTCNDGPE
          GOTO      INIT9000 IF EQUAL
.
          COMPARE   ONE,ALCNDGEA
          GOTO      INIT9000 IF EQUAL
.
          COMPARE   ONE,ALCNDGED
          GOTO      INIT9000 IF EQUAL
.
          COMPARE   ONE,PTCNDGCP
          GOTO      INIT9000 IF EQUAL
.
          GOTO      INIT9999
.
INIT9000  MOVE      ONE,DGATEFLG                 * set flag to "Yes"
.
INIT9999  RETURN
+
.*****************************************************************************
.*                                OPTN0000             Called by: MAIN0000   *
.*                        get user options or exit                           *
.*    Returns:  EXIT    = FALSE (0)  Ok to continue                          *
.*                        TRUE  (1)  Exit option selected                    *
.*              COPTION = 1 = clean up old delivered records                 *
.*                        2 = clean up orphaned records                      *
.*****************************************************************************
.
OPTN0000  DISPLAY   *P1:3,*EF,*P1:4,*V2LON,ZERO,*HOFF,". Exit":
                    *P1:5,*V2LON,ONE,*HOFF,". Clean up old delivered records":
                    *P1:6,*V2LON,TWO,*HOFF,". Clean up orphaned records"
.
OPTN0500  KEYIN     *P1:8,*EL,"Select Option : ":
                    *P17:8,*V2LON,COPTION
.
          COMPARE   ZERO,COPTION                 * exit selected ?
          GOTO      OPTN9500 IF EQUAL            * yes
.
          BRANCH    COPTION,OPTN9000:            * clean-up old delivered recs
                            OPTN9000             * clean up orphaned recs
.
          BEEP
          GOTO      OPTN0500
.
OPTN9000  MOVE      ZERO,EXIT
          GOTO      OPTN9999
.
OPTN9500  MOVE      ONE,EXIT
.
OPTN9999  RETURN
+
.*****************************************************************************
.*                               GHRS0000          Called by: MAIN0000       *
.*            Get number of hours old for deleting                           *
.* Returns:  PASSTIME  - number of hours old (to 1 decimal place) for        *
.*                       deleting delivered records                          *
.*****************************************************************************
.
GHRS0000  KEYIN     *P1:10,*EL,"Number of hours ? ",PASSTIME
.
          COMPARE   PASSTIME,ZERO
          IF        !@LESS
            DISPLAY   *P1:24,*EL,*B,"Hours must be greater than zero.  ";
            CALL      HITENTER
            GOTO      GHRS0000
          ENDIF
.
GHRS9999  RETURN
+
.**************************************************************************
.*                               GDTM0000              Called by: MAIN0000*
.*             Calculate the starting date and time                       *
.* Requires: PASSTIME  (time passed from the Unix script - hours to 1     *
.*                      decimal place)                                    *
.* Returns:  STRTDTTM  (starting date and time for deletion of prior      *
.*                      records)                                          *
.**************************************************************************
.
.         Get the current date and time
.
GDTM0000  CALL      IBACLOCK
          PACK      WORKDATE,CCC,CYY,CMM,CDD
          REP       " 0",WORKDATE
          REP       " 0",CTIMEIS
.
          ASSIGN    (PASSTIME*60),TOTLMINS      * convert passed time to minutes
.
.         If passed minutes is more than 1 day (1440 mins), then keep
.         subtracting 1 day (1440 mins) from the total minutes passed until
.         this is < 1440.  For each 1440 minutes subtracted, subtract one from
.         the working date.
.
          WHILE     TOTLMINS >= DAYMINS
            SUB       DAYMINS,TOTLMINS
            UNPACK    WORKDATE,CCENT,CYEAR,CMON,CDAY
            MOVE      CCENT,CC
            MOVE      CYEAR,YY
            MOVE      CMON,MM
            MOVE      CDAY,DD
            CALL      DMYCON
            SUB       ONE,JULDAY
            MOVE      JULDAY,JWKDAY
            MOVE      JULYR,JWKYER
            MOVE      JULCC,JWKCC
            CALL      JULCON
            PACK      WORKDATE,CC,YY,MM,DD
            REP       " 0",WORKDATE
          DO
.
.         If there is zero minutes left, then the passed time was a multiple
.         of days, so set the full value for date/time
.
          COMPARE   ZERO,TOTLMINS
          IF        @EQUAL
            UNPACK    CTIMEIS,DIM2A,ANS,DIM2B,ANS,ANS,ANS
            PACK      DIM5,DIM2A,COLON,DIM2B
            PACK      STRTDTTM,WORKDATE,DIM5,COLON,SIXTY
            GOTO      GDTM9999
          ENDIF
.
.         The remaining minutes need to be subtracted
.
          UNPACK    CTIMEIS,DIM2A,ANS,DIM2B,ANS,ANS,ANS
          MOVE      DIM2A,HOURVALU               * load current hour
          MOVE      DIM2B,MINTVALU               * load current minute
.
.         Calculate the number of minutes passed 00:00 for the current time
.
          ASSIGN    ((HOURVALU*60)+MINTVALU),WORKTIME
.
.         If the total minutes left is more than the current time in minutes,
.         then we need to subtract another day
.
          IF        TOTLMINS > WORKTIME
            UNPACK    WORKDATE,CCENT,CYEAR,CMON,CDAY
            MOVE      CCENT,CC
            MOVE      CYEAR,YY
            MOVE      CMON,MM
            MOVE      CDAY,DD
            CALL      DMYCON
            SUB       ONE,JULDAY
            MOVE      JULDAY,JWKDAY
            MOVE      JULYR,JWKYER
            MOVE      JULCC,JWKCC
            CALL      JULCON
            PACK      WORKDATE,CC,YY,MM,DD
            REP       " 0",WORKDATE
            SUB       WORKTIME,TOTLMINS          * calculate mins for prev. day
            ASSIGN    (DAYMINS-TOTLMINS),TOTLMINS
          ELSE
            ASSIGN    (WORKTIME-TOTLMINS),TOTLMINS * calc. mins for current day
          ENDIF
.
          ASSIGN    (TOTLMINS/60),HOURVALU       * calculate time of day
          ASSIGN    (TOTLMINS%60),MINTVALU
          PACK      DIM5,HOURVALU,COLON,MINTVALU
          REP       " 0",DIM5
          PACK      STRTDTTM,WORKDATE,DIM5,COLON,SIXTY
.
GDTM9999  RETURN
+
.**************************************************************************
.*                               INBH0000                                 *
.*           Loop through hl7inbaf for valid message ids to be deleted    *
.**************************************************************************
.         Position in hl7inbaf according to the calculated date/time
.
INBH0000  PACK      KEY37,ANSD,STRTDTTM,SP70
          CALL      RSH7INB3                     * position in file
INBH1000  CALL      RPH7INB3                     * read previous record
          BRANCH    OVRCD,INBH9500               * eof - finish
.
.         The delivery date should always be populated for a "D" record,
.         but check just in case.
.
          MATCH     SP16,H7INDDAT                * delivery date blank ?
          GOTO      INBH9500 IF EQUAL            * yes - finish
.
          MOVE      H7INMESI,MESSAGID
          MOVE      H7INMESI,KEY20
          CALL      RDH7INB1                     * record found using index 1 ?
          BRANCH    OVRCD,INBH1000               * no  - check next record
.
          CALL      DEH7INB1                     * delete record
.
          CALL      H7CI0000                     * check for hl7cisaf record
          BRANCH    EXIT,INBH0000                * can't delete child records
.
INBH9000  MOVE      ZERO,EXIT                    * ok to delete child records
          GOTO      INBH9999
.
INBH9500  MOVE      ONE,EXIT                     * no more hl7inbaf records
INBH9999  RETURN
+
.**************************************************************************
.*                               H7CI0000                                 *
.*           Check hl7cisaf for valid message id to be deleted            *
.**************************************************************************
H7CI0000  MOVE      H7INMESI,KEY20
          CALL      RDH7CIS1                     * record found using index 1 ?
          BRANCH    OVRCD,H7CI9000               * no - finished
.
          MATCH     "D",H7CISTAT                 * delivered ?
          GOTO      H7IN9500 IF NOT EQUAL        * no - finished
.
          MATCH     SP16,H7CIDDAT                * delivery date blank ?
          GOTO      H7CI9500 IF EQUAL            * yes - finished
.
          MATCH     STRTDTTM,H7CIDDAT            * delivery date < start date ?
          GOTO      H7CI9500 IF NOT LESS         * no - finished
.
          CALL      DEH7CIS1                     * delete header record
.
H7CI9000  MOVE      ZERO,EXIT                    * ok to delete child records
          GOTO      H7CI9999
.
H7CI9500  MOVE      ONE,EXIT                     * don't delete child records
H7CI9999  RETURN
+
.**************************************************************************
.*                               CISH0000                                 *
.*           Loop through hl7cisaf for valid message ids to be deleted    *
.**************************************************************************
.         Position in hl7cisaf according to the calculated date/time
.
CISH0000  PACK      KEY37,ANSD,STRTDTTM,SP70
          CALL      RSH7CIS3                     * position in file
CISH1000  CALL      RPH7CIS3                     * read previous record
          BRANCH    OVRCD,CISH9500               * eof - finish
.
.         The delivery date should always be populated for a "D" record,
.         but check just in case.
.
          MATCH     SP16,H7CIDDAT                * delivery date blank ?
          GOTO      CISH9500 IF EQUAL            * yes - finish
.
          MOVE      H7CIMESI,MESSAGID
          MOVE      H7CIMESI,KEY20
          CALL      RDH7CIS1                     * record found using index 1 ?
          BRANCH    OVRCD,CISH1000               * no  - check next record
.
          CALL      DEH7CIS1                     * delete record
.
          CALL      H7IN0000                     * check for hl7inbaf record
          BRANCH    EXIT,CISH0000                * can't delete child records
.
CISH9000  MOVE      ZERO,EXIT                    * ok to delete child records
          GOTO      CISH9999
.
CISH9500  MOVE      ONE,EXIT                     * no more hl7inbaf records
CISH9999  RETURN
+
.**************************************************************************
.*                               H7IN0000                                 *
.*           Check hl7inbaf for valid message id to be deleted            *
.**************************************************************************
H7IN0000  MOVE      H7CIMESI,KEY20
          CALL      RDH7INB1                     * record found using index 1 ?
          BRANCH    OVRCD,H7IN9000               * no - finished
.
          MATCH     "D",H7INSTAT                 * delivered ?
          GOTO      H7IN9500 IF NOT EQUAL        * no - finished
.
          MATCH     SP16,H7INDDAT                * delivery date blank ?
          GOTO      H7IN9500 IF EQUAL            * yes - finished
.
          MATCH     STRTDTTM,H7INDDAT            * delivery date < start date ?
          GOTO      H7IN9500 IF NOT LESS         * no - finished
.
          CALL      DEH7INB1                     * delete header record
.
H7IN9000  MOVE      ZERO,EXIT                    * ok to delete child records
          GOTO      H7IN9999
.
H7IN9500  MOVE      ONE,EXIT                     * don't delete child records
H7IN9999  RETURN
+
.**************************************************************************
.*                               LOOP0000              Called by: MAIN0000*
.*           Loop backwards through file(s) from starting date/time       *
.*           and delete all delievered message records                    *
.**************************************************************************
LOOP0000  CALL      INBH0000                     * check for hl7inbaf records
          BRANCH    EXIT,LOOP1000                * finished checking hl7inbaf
.
          CALL      PROC0000                     * delete holding table records
          GOTO      LOOP0000
.
LOOP1000  CALL      CISH0000                     * check for hl7cisaf records
          BRANCH    EXIT,LOOP9999                * finished checking hl7cisaf
.
          CALL      PROC0000                     * delete holding table records
          GOTO      LOOP1000
.
LOOP9999  RETURN
+
.**************************************************************************
.*                               PROC0000                                 *
.*           Check holding files for child records & delete them          *
.**************************************************************************
.
.         Check for child bokqueaf records
.
PROC0000  MOVE      MESSAGID,KEY20
          CALL      RDBKQUE1                     * bokqueaf record on file ?
          BRANCH    OVRCD,PROC0100               * no  - check next file
.
          CALL      DEBKQUE1                     * delete record
.
.         Check for child outqueaf records
.
PROC0100  MOVE      MESSAGID,KEY20
          CALL      RDOTQUE1                     * outqueaf record on file ?
          BRANCH    OVRCD,PROC0200               * no  - check next file
.
          CALL      DEOTQUE1                     * delete record
.
.         Check for child pmsqptaf records
.
PROC0200  MOVE      MESSAGID,KEY20
          CALL      RDPMQPT1                     * pmsqptaf record on file ?
          BRANCH    OVRCD,PROC0300               * no  - check next file
.
          CALL      DEPMQPT1                     * delete record
.
.         Check for child pmsqviaf records
.
PROC0300  PACK      KEY22,MESSAGID,SP30
          CALL      RSPMQVI1                     * position in file
          CALL      RKPMQVI1                     * read next record
          BRANCH    OVRCD,PROC0400               * eof  - check next file
.
          COMPARE   MESSAGID,PMQVMESI            * message id still same ?
          GOTO      PROC0400 IF NOT EQUAL        * no - check next file
.
          PACK      KEY22,PMQVMESI,PMQVTRAN
          CALL      DEPMQVI1                     * delete record
          GOTO      PROC0300
.
.         Check for child watqueaf records
.
PROC0400  MOVE      MESSAGID,KEY20
          CALL      RDWTQUE1                     * watqueaf record on file ?
          BRANCH    OVRCD,PROC0500               * no  - check next file
.
          CALL      DEWTQUE1                     * delete record
.
.         Check for child mrtqueaf records
.
PROC0500  MOVE      MESSAGID,KEY20
          CALL      RDMRQUE1                     * mrtqueaf record on file ?
          BRANCH    OVRCD,PROC0600               * no  - check next file
.
          CALL      DEMRQUE1                     * delete record
.
.         Check for child allqueaf records
.
PROC0600  MOVE      MESSAGID,KEY20
          CALL      RDALQUE1                     * allqueaf record on file ?
          BRANCH    OVRCD,PROC0700               * no  - check next file
.
          CALL      DEALQUE1                     * delete record
.
.         Check for child emrqueaf records
.
PROC0700  MOVE      MESSAGID,KEY20
          CALL      RDEMQUE1                     * emrqueaf record on file ?
          BRANCH    OVRCD,PROC0800               * no  - check next file
.
          CALL      DEEMQUE1                     * delete record
.
.         Check for child pmsqccaf records
.
PROC0800  MOVE      MESSAGID,KEY20
          CALL      RDPMQCC1                     * pmsqccaf record on file ?
          BRANCH    OVRCD,PROC0900               * no  - check next file
.
          CALL      DEPMQCC1                     * delete record
.
.         Check for child pmsqdraf records
.
PROC0900  MOVE      MESSAGID,KEY20
          CALL      RDPMQDR1                     * pmsqdraf record on file ?
          BRANCH    OVRCD,PROC1000               * no  - check next file
.
          CALL      DEPMQDR1                     * delete record
.
.         Check for child oprqueaf records
.
PROC1000  MOVE      MESSAGID,KEY20
          CALL      RDOPQUE1                     * oprqueaf record on file ?
          BRANCH    OVRCD,PROC1100               * no  - check next file
.
          CALL      DEOPQUE1                     * delete record
.
.         Check for child outrquaf records
.
PROC1100  MOVE      MESSAGID,KEY20
          CALL      RDOTRQU1                     * outrquaf record on file ?
          BRANCH    OVRCD,PROC1200               * no  - check next file
.
          CALL      DEOTRQU1                     * delete record
.
.         Check for child outqmaaf records
.
PROC1200  MOVE      MESSAGID,KEY20
          CALL      RDOTQMA1                     * outqmaaf record on file ?
          BRANCH    OVRCD,PROC1300               * no  - check next file
.
          CALL      DEOTQMA1                     * delete record
.
.         Check for child outqtyaf records
.
PROC1300  MOVE      MESSAGID,KEY20
          CALL      RDOTQTY1                     * outqtyaf record on file ?
          BRANCH    OVRCD,PROC9999               * no  - check next file
.
          CALL      DEOTQTY1                     * delete record
.
PROC9999  RETURN
+
.*****************************************************************************
.*                          DISP0000               Called by: MAIN0000       *
.*                 Display input fields                                      *
.*****************************************************************************
.
DISP0000  DISPLAY   *P1:10,*V2LON,*ULON,*EF,"Clear Orphaned Tables",*HOFF:
                    *P1:11,*V2LON," 1",*HOFF,". allqueaf (",*V2LON,ANSY,*HOFF:
                                             SLASH,*V2LON,ANSN,*HOFF,"): ":
                    *P1:12,*V2LON," 2",*HOFF,". bokqueaf (",*V2LON,ANSY,*HOFF:
                                             SLASH,*V2LON,ANSN,*HOFF,"): ":
                    *P1:13,*V2LON," 3",*HOFF,". emrqueaf (",*V2LON,ANSY,*HOFF:
                                             SLASH,*V2LON,ANSN,*HOFF,"): ":
                    *P1:14,*V2LON," 4",*HOFF,". oprqueaf (",*V2LON,ANSY,*HOFF:
                                             SLASH,*V2LON,ANSN,*HOFF,"): ":
                    *P1:15,*V2LON," 5",*HOFF,". outqmaaf (",*V2LON,ANSY,*HOFF:
                                             SLASH,*V2LON,ANSN,*HOFF,"): ":
                    *P1:16,*V2LON," 6",*HOFF,". outqtyaf (",*V2LON,ANSY,*HOFF:
                                             SLASH,*V2LON,ANSN,*HOFF,"): ":
                    *P1:17,*V2LON," 7",*HOFF,". outqueaf (",*V2LON,ANSY,*HOFF:
                                             SLASH,*V2LON,ANSN,*HOFF,"): ":
                    *P1:18,*V2LON," 8",*HOFF,". outrquaf (",*V2LON,ANSY,*HOFF:
                                             SLASH,*V2LON,ANSN,*HOFF,"): ":
                    *P1:19,*V2LON," 9",*HOFF,". pmsqdraf (",*V2LON,ANSY,*HOFF:
                                             SLASH,*V2LON,ANSN,*HOFF,"): ":
                    *P1:20,*V2LON,"10",*HOFF,". pmsqptaf (",*V2LON,ANSY,*HOFF:
                                             SLASH,*V2LON,ANSN,*HOFF,"): ":
                    *P1:21,*V2LON,"11",*HOFF,". pmsqviaf (",*V2LON,ANSY,*HOFF:
                                             SLASH,*V2LON,ANSN,*HOFF,"): ":
                    *P1:22,*V2LON,"12",*HOFF,". watqueaf (",*V2LON,ANSY,*HOFF:
                                             SLASH,*V2LON,ANSN,*HOFF,"): "
.
DISP9999  RETURN
+
.*****************************************************************************
.*                          ACPT0000               Called by: MAIN0000       *
.*                Allow keyins for clearing orphaned files                   *
.*****************************************************************************
.
ACPT0000  MOVE      ANSN,FLAGA                  * set defaults to No
          MOVE      ANSN,FLAGB
          MOVE      ANSN,FLAGC
          MOVE      ANSN,FLAGD
          MOVE      ANSN,FLAGE
          MOVE      ANSN,FLAGF
          MOVE      ANSN,FLAGG
          MOVE      ANSN,FLAGH
          MOVE      ANSN,FLAGI
          MOVE      ANSN,FLAGJ
          MOVE      ANSN,FLAGK
          MOVE      ANSN,FLAGL
.
          CALL      FLGA0000                     * allqueaf
          CALL      FLGB0000                     * bokqueaf
          CALL      FLGC0000                     * emrqueaf
          CALL      FLGD0000                     * oprqueaf
          CALL      FLGE0000                     * outqmaaf
          CALL      FLGF0000                     * outqtyaf
          CALL      FLGG0000                     * outqueaf
          CALL      FLGH0000                     * outrquaf
          CALL      FLGI0000                     * pmsqdraf
          CALL      FLGJ0000                     * pmsqptaf
          CALL      FLGK0000                     * pmsqviaf
          CALL      FLGL0000                     * watqueaf
.
ACPT9999  RETURN
+
.*****************************************************************************
.*                          FLGA0000               Called by: ACPT0000       *
.*              Check if allqueaf is being checked for orphan records        *
.*****************************************************************************
.
FLGA0000  KEYIN     *P21:11,*EL,*V2LON,*RV,FLAGA
          REP       UPPLOW,FLAGA
          MATCH     ANSN,FLAGA
          IF        @EQUAL
            DISPLAY   *P21:11,*V2LON,"No"
          ELSE
            MATCH     ANSY,FLAGA
            IF        @EQUAL
              DISPLAY   *P21:11,*V2LON,"Yes"
            ELSE
              DISPLAY   *P1:24,*EL,*B,"Must be Y or N.  ";
              CALL      HITENTER
              GOTO      FLGA0000
            ENDIF
          ENDIF
.
FLGA9999  RETURN
+
.*****************************************************************************
.*                          FLGB0000               Called by: ACPT0000       *
.*              Check if bokqueaf is being checked for orphan records        *
.*****************************************************************************
.
FLGB0000  KEYIN     *P21:12,*EL,*V2LON,*RV,FLAGB
          REP       UPPLOW,FLAGB
          MATCH     ANSN,FLAGB
          IF        @EQUAL
            DISPLAY   *P21:12,*V2LON,"No"
          ELSE
            MATCH     ANSY,FLAGB
            IF        @EQUAL
              DISPLAY   *P21:12,*V2LON,"Yes"
            ELSE
              DISPLAY   *P1:24,*EL,*B,"Must be Y or N.  ";
              CALL      HITENTER
              GOTO      FLGB0000
            ENDIF
          ENDIF
.
FLGB9999  RETURN
+
.*****************************************************************************
.*                          FLGC0000               Called by: ACPT0000       *
.*              Check if emrqueaf is being checked for orphan records        *
.*****************************************************************************
.
FLGC0000  KEYIN     *P21:13,*EL,*V2LON,*RV,FLAGC
          REP       UPPLOW,FLAGC
          MATCH     ANSN,FLAGC
          IF        @EQUAL
            DISPLAY   *P21:13,*V2LON,"No"
          ELSE
            MATCH     ANSY,FLAGC
            IF        @EQUAL
              DISPLAY   *P21:13,*V2LON,"Yes"
            ELSE
              DISPLAY   *P1:24,*EL,*B,"Must be Y or N.  ";
              CALL      HITENTER
              GOTO      FLGC0000
            ENDIF
          ENDIF
.
FLGC9999  RETURN
+
.*****************************************************************************
.*                          FLGD0000               Called by: ACPT0000       *
.*              Check if oprqueaf is being checked for orphan records        *
.*****************************************************************************
.
FLGD0000  KEYIN     *P21:14,*EL,*V2LON,*RV,FLAGD
          REP       UPPLOW,FLAGD
          MATCH     ANSN,FLAGD
          IF        @EQUAL
            DISPLAY   *P21:14,*V2LON,"No"
          ELSE
            MATCH     ANSY,FLAGD
            IF        @EQUAL
              DISPLAY   *P21:14,*V2LON,"Yes"
            ELSE
              DISPLAY   *P1:24,*EL,*B,"Must be Y or N.  ";
              CALL      HITENTER
              GOTO      FLGD0000
            ENDIF
          ENDIF
.
FLGD9999  RETURN
+
.*****************************************************************************
.*                          FLGE0000               Called by: ACPT0000       *
.*              Check if outqmaaf is being checked for orphan records        *
.*****************************************************************************
.
FLGE0000  KEYIN     *P21:15,*EL,*V2LON,*RV,FLAGE
          REP       UPPLOW,FLAGE
          MATCH     ANSN,FLAGE
          IF        @EQUAL
            DISPLAY   *P21:15,*V2LON,"No"
          ELSE
            MATCH     ANSY,FLAGE
            IF        @EQUAL
              DISPLAY   *P21:15,*V2LON,"Yes"
            ELSE
              DISPLAY   *P1:24,*EL,*B,"Must be Y or N.  ";
              CALL      HITENTER
              GOTO      FLGE0000
            ENDIF
          ENDIF
.
FLGE9999  RETURN
+
.*****************************************************************************
.*                          FLGF0000               Called by: ACPT0000       *
.*              Check if outqtyaf is being checked for orphan records        *
.*****************************************************************************
.
FLGF0000  KEYIN     *P21:16,*EL,*V2LON,*RV,FLAGF
          REP       UPPLOW,FLAGF
          MATCH     ANSN,FLAGF
          IF        @EQUAL
            DISPLAY   *P21:16,*V2LON,"No"
          ELSE
            MATCH     ANSY,FLAGF
            IF        @EQUAL
              DISPLAY   *P21:16,*V2LON,"Yes"
            ELSE
              DISPLAY   *P1:24,*EL,*B,"Must be Y or N.  ";
              CALL      HITENTER
              GOTO      FLGF0000
            ENDIF
          ENDIF
.
FLGF9999  RETURN
+
.*****************************************************************************
.*                          FLGG0000               Called by: ACPT0000       *
.*              Check if outqueaf is being checked for orphan records        *
.*****************************************************************************
.
FLGG0000  KEYIN     *P21:17,*EL,*V2LON,*RV,FLAGG
          REP       UPPLOW,FLAGG
          MATCH     ANSN,FLAGG
          IF        @EQUAL
            DISPLAY   *P21:17,*V2LON,"No"
          ELSE
            MATCH     ANSY,FLAGG
            IF        @EQUAL
              DISPLAY   *P21:17,*V2LON,"Yes"
            ELSE
              DISPLAY   *P1:24,*EL,*B,"Must be Y or N.  ";
              CALL      HITENTER
              GOTO      FLGG0000
            ENDIF
          ENDIF
.
FLGG9999  RETURN
+
.*****************************************************************************
.*                          FLGH0000               Called by: ACPT0000       *
.*              Check if outrquaf is being checked for orphan records        *
.*****************************************************************************
.
FLGH0000  KEYIN     *P21:18,*EL,*V2LON,*RV,FLAGH
          REP       UPPLOW,FLAGH
          MATCH     ANSN,FLAGH
          IF        @EQUAL
            DISPLAY   *P21:18,*V2LON,"No"
          ELSE
            MATCH     ANSY,FLAGH
            IF        @EQUAL
              DISPLAY   *P21:18,*V2LON,"Yes"
            ELSE
              DISPLAY   *P1:24,*EL,*B,"Must be Y or N.  ";
              CALL      HITENTER
              GOTO      FLGH0000
            ENDIF
          ENDIF
.
FLGH9999  RETURN
+
.*****************************************************************************
.*                          FLGI0000               Called by: ACPT0000       *
.*              Check if pmsqdraf is being checked for orphan records        *
.*****************************************************************************
.
FLGI0000  KEYIN     *P21:19,*EL,*V2LON,*RV,FLAGI
          REP       UPPLOW,FLAGI
          MATCH     ANSN,FLAGI
          IF        @EQUAL
            DISPLAY   *P21:19,*V2LON,"No"
          ELSE
            MATCH     ANSY,FLAGI
            IF        @EQUAL
              DISPLAY   *P21:19,*V2LON,"Yes"
            ELSE
              DISPLAY   *P1:24,*EL,*B,"Must be Y or N.  ";
              CALL      HITENTER
              GOTO      FLGI0000
            ENDIF
          ENDIF
.
FLGI9999  RETURN
+
.*****************************************************************************
.*                          FLGJ0000               Called by: ACPT0000       *
.*              Check if pmsqptaf is being checked for orphan records        *
.*****************************************************************************
.
FLGJ0000  KEYIN     *P21:20,*EL,*V2LON,*RV,FLAGJ
          REP       UPPLOW,FLAGJ
          MATCH     ANSN,FLAGJ
          IF        @EQUAL
            DISPLAY   *P21:20,*V2LON,"No"
          ELSE
            MATCH     ANSY,FLAGJ
            IF        @EQUAL
              DISPLAY   *P21:20,*V2LON,"Yes"
            ELSE
              DISPLAY   *P1:24,*EL,*B,"Must be Y or N.  ";
              CALL      HITENTER
              GOTO      FLGJ0000
            ENDIF
          ENDIF
.
FLGJ9999  RETURN
+
.*****************************************************************************
.*                          FLGK0000               Called by: ACPT0000       *
.*              Check if pmsqviaf is being checked for orphan records        *
.*****************************************************************************
.
FLGK0000  KEYIN     *P21:21,*EL,*V2LON,*RV,FLAGK
          REP       UPPLOW,FLAGK
          MATCH     ANSN,FLAGK
          IF        @EQUAL
            DISPLAY   *P21:21,*V2LON,"No"
          ELSE
            MATCH     ANSY,FLAGK
            IF        @EQUAL
              DISPLAY   *P21:21,*V2LON,"Yes"
            ELSE
              DISPLAY   *P1:24,*EL,*B,"Must be Y or N.  ";
              CALL      HITENTER
              GOTO      FLGK0000
            ENDIF
          ENDIF
.
FLGK9999  RETURN
+
.*****************************************************************************
.*                          FLGL0000               Called by: ACPT0000       *
.*              Check if watqueaf is being checked for orphan records        *
.*****************************************************************************
.
FLGL0000  KEYIN     *P21:22,*EL,*V2LON,*RV,FLAGL
          REP       UPPLOW,FLAGL
          MATCH     ANSN,FLAGL
          IF        @EQUAL
            DISPLAY   *P21:22,*V2LON,"No"
          ELSE
            MATCH     ANSY,FLAGL
            IF        @EQUAL
              DISPLAY   *P21:22,*V2LON,"Yes"
            ELSE
              DISPLAY   *P1:24,*EL,*B,"Must be Y or N.  ";
              CALL      HITENTER
              GOTO      FLGL0000
            ENDIF
          ENDIF
.
FLGL9999  RETURN
+
.*****************************************************************************
.*                            SLCT0000             Called by: MAIN0000       *
.*                Allow user to edit orphaned files for clearing             *
.*****************************************************************************
.
SLCT0000  CALL      MAINQST                      * Select Item, Post, Cancel
          COMPARE   ZERO,CCITEM                  * Post selected ?
          GOTO      SLCT9000 IF EQUAL            * yes
          GOTO      SLCT9100 IF LESS             * Cancel selected
.
          PERFORM   CCITEM,FLGA0000:             * allqueaf
                           FLGB0000:             * bokqueaf
                           FLGC0000:             * emrqueaf
                           FLGD0000:             * oprqueaf
                           FLGE0000:             * outqmaaf
                           FLGF0000:             * outqtyaf
                           FLGG0000:             * outqueaf
                           FLGH0000:             * outrquaf
                           FLGI0000:             * pmsqdraf
                           FLGJ0000:             * pmsqptaf
                           FLGK0000:             * pmsqviaf
                           FLGL0000              * watqueaf
.
          GOTO      SLCT0000
.
SLCT9000  MOVE      ZERO,EXIT                    * Post was selected
          GOTO      SLCT9999
.
.         Cancel was selected. Set the exit flag to tell the calling routine.
.
SLCT9100  MOVE      ONE,EXIT                     * Cancel was selected
.
SLCT9999  RETURN
+
.*****************************************************************************
.*                             DELO0000            Called by: MAIN0000       *
.*  Delete any orphaned holding table records with no corresponding          *
.*  header table record for the selected holding tables                      *
.*****************************************************************************
.
DELO0000  DISPLAY   *P1:24,*EL,"Processing";
.
          MATCH     ANSY,FLAGA                   * clean allqueaf ?
          GOTO      DELO0100 IF NOT EQUAL        * no
.
.         Clean orphaned allqueaf records
.
          DISPLAY   *P12:24,*EL,"allqueaf: ";
          MOVE      SP20,KEY20
DELO0050  CALL      RSALQUE1                     * position in file
DELO0070  CALL      RKALQUE1                     * read next record
          BRANCH    OVRCD,DELO0100               * eof - finished allqueaf
.
          MOVE      ALQUMESI,KEY20
          CALL      RDH7CIS1
          IF        OVRCD = 1
            IF        DGATEFLG = 1
              CALL      RDH7INB1
              COMPARE   ZERO,OVRCD
              GOTO      DELO0070 IF EQUAL
            ENDIF
.
            DISPLAY   *P22:24,*EL,*V2LON,KEY20;
            MOVE      ALQUMESI,SAVKEY20
            CALL      DEALQUE1                   * delete record
.
            MOVE      SAVKEY20,KEY20             * set key for reposition
            GOTO      DELO0050
          ENDIF
.
          GOTO      DELO0070
.
DELO0100  MATCH     ANSY,FLAGB                   * clean bokqueaf ?
          GOTO      DELO0200 IF NOT EQUAL        * no
.
.         Clean orphaned bokqueaf records
.
          DISPLAY   *P12:24,*EL,"bokqueaf: ";
          MOVE      SP20,KEY20
DELO0150  CALL      RSBKQUE1                     * position in file
DELO0170  CALL      RKBKQUE1                     * read next record
          BRANCH    OVRCD,DELO0200               * eof - finished bokqueaf
.
          MOVE      BKQUMESI,KEY20
          CALL      RDH7CIS1
          IF        OVRCD = 1
            IF        DGATEFLG = 1
              CALL      RDH7INB1
              COMPARE   ZERO,OVRCD
              GOTO      DELO0170 IF EQUAL
            ENDIF
.
            DISPLAY   *P22:24,*EL,*V2LON,KEY20;
            MOVE      BKQUMESI,SAVKEY20
            CALL      DEBKQUE1                   * delete record
.
            MOVE      SAVKEY20,KEY20             * set key for reposition
            GOTO      DELO0150
          ENDIF
.
          GOTO      DELO0170
.
DELO0200  MATCH     ANSY,FLAGC                   * clean emrqueaf ?
          GOTO      DELO0300 IF NOT EQUAL        * no
.
.         Clean orphaned emrqueaf records
.
          DISPLAY   *P12:24,*EL,"emrqueaf: ";
          MOVE      SP20,KEY20
DELO0250  CALL      RSEMQUE1                     * position in file
DELO0270  CALL      RKEMQUE1                     * read next record
          BRANCH    OVRCD,DELO0300               * eof - finished emrqueaf
.
          MOVE      EMQUMESI,KEY20
          CALL      RDH7CIS1
          IF        OVRCD = 1
            IF        DGATEFLG = 1
              CALL      RDH7INB1
              COMPARE   ZERO,OVRCD
              GOTO      DELO0270 IF EQUAL
            ENDIF
.
            DISPLAY   *P22:24,*EL,*V2LON,KEY20;
            MOVE      EMQUMESI,SAVKEY20
            CALL      DEEMQUE1                   * delete record
.
            MOVE      SAVKEY20,KEY20             * set key for reposition
            GOTO      DELO0250
          ENDIF
.
          GOTO      DELO0270
.
DELO0300  MATCH     ANSY,FLAGD                   * clean oprqueaf ?
          GOTO      DELO0400 IF NOT EQUAL        * no
.
.         Clean orphaned oprqueaf records
.
          DISPLAY   *P12:24,*EL,"oprqueaf: ";
          MOVE      SP20,KEY20
DELO0350  CALL      RSOPQUE1                     * position in file
DELO0370  CALL      RKOPQUE1                     * read next record
          BRANCH    OVRCD,DELO0400               * eof - finished oprqueaf
.
          MOVE      OPQUMESI,KEY20
          CALL      RDH7CIS1
          IF        OVRCD = 1
            IF        DGATEFLG = 1
              CALL      RDH7INB1
              COMPARE   ZERO,OVRCD
              GOTO      DELO0370 IF EQUAL
            ENDIF
.
            DISPLAY   *P22:24,*EL,*V2LON,KEY20;
            MOVE      OPQUMESI,SAVKEY20
            CALL      DEOPQUE1                   * delete record
.
            MOVE      SAVKEY20,KEY20             * set key for reposition
            GOTO      DELO0350
          ENDIF
.
          GOTO      DELO0370
.
DELO0400  MATCH     ANSY,FLAGE                   * clean outqmaaf ?
          GOTO      DELO0500 IF NOT EQUAL        * no
.
.         Clean orphaned outqmaaf records
.
          DISPLAY   *P12:24,*EL,"outqmaaf: ";
          MOVE      SP20,KEY20
DELO0450  CALL      RSOTQMA1                     * position in file
DELO0470  CALL      RKOTQMA1                     * read next record
          BRANCH    OVRCD,DELO0500               * eof - finished outqmaaf
.
          MOVE      OTQMMESI,KEY20
          CALL      RDH7CIS1
          IF        OVRCD = 1
            IF        DGATEFLG = 1
              CALL      RDH7INB1
              COMPARE   ZERO,OVRCD
              GOTO      DELO0470 IF EQUAL
            ENDIF
.
            DISPLAY   *P22:24,*EL,*V2LON,KEY20;
            MOVE      OTQMMESI,SAVKEY20
            CALL      DEOTQMA1                   * delete record
.
            MOVE      SAVKEY20,KEY20             * set key for reposition
            GOTO      DELO0450
          ENDIF
.
          GOTO      DELO0470
.
DELO0500  MATCH     ANSY,FLAGF                   * clean outqtyaf ?
          GOTO      DELO0600 IF NOT EQUAL        * no
.
.         Clean orphaned outqtyaf records
.
          DISPLAY   *P12:24,*EL,"outqtyaf: ";
          MOVE      SP20,KEY20
DELO0550  CALL      RSOTQTY1                     * position in file
DELO0570  CALL      RKOTQTY1                     * read next record
          BRANCH    OVRCD,DELO0600               * eof - finished outqtyaf
.
          MOVE      OTQTMESI,KEY20
          CALL      RDH7CIS1
          IF        OVRCD = 1
            IF        DGATEFLG = 1
              CALL      RDH7INB1
              COMPARE   ZERO,OVRCD
              GOTO      DELO0570 IF EQUAL
            ENDIF
.
            DISPLAY   *P22:24,*EL,*V2LON,KEY20;
            MOVE      OTQTMESI,SAVKEY20
            CALL      DEOTQTY1                   * delete record
.
            MOVE      SAVKEY20,KEY20             * set key for reposition
            GOTO      DELO0550
          ENDIF
.
          GOTO      DELO0570
.
DELO0600  MATCH     ANSY,FLAGG                   * clean outqueaf ?
          GOTO      DELO0700 IF NOT EQUAL        * no
.
.         Clean orphaned outqueaf records
.
          DISPLAY   *P12:24,*EL,"outqueaf: ";
          MOVE      SP20,KEY20
DELO0650  CALL      RSOTQUE1                     * position in file
DELO0670  CALL      RKOTQUE1                     * read next record
          BRANCH    OVRCD,DELO0700               * eof - finished outqueaf
.
          MOVE      OTQUMESG,KEY20
          CALL      RDH7CIS1
          IF        OVRCD = 1
            IF        DGATEFLG = 1
              CALL      RDH7INB1
              COMPARE   ZERO,OVRCD
              GOTO      DELO0670 IF EQUAL
            ENDIF
.
            DISPLAY   *P22:24,*EL,*V2LON,KEY20;
            MOVE      OTQUMESG,SAVKEY20
            CALL      DEOTQUE1                   * delete record
.
            MOVE      SAVKEY20,KEY20             * set key for reposition
            GOTO      DELO0650
          ENDIF
.
          GOTO      DELO0670
.
DELO0700  MATCH     ANSY,FLAGH                   * clean outrquaf ?
          GOTO      DELO0800 IF NOT EQUAL        * no
.
.         Clean orphaned outrquaf records
.
          DISPLAY   *P12:24,*EL,"outrquaf: ";
          MOVE      SP20,KEY20
DELO0750  CALL      RSOTRQU1                     * position in file
DELO0770  CALL      RKOTRQU1                     * read next record
          BRANCH    OVRCD,DELO0800               * eof - finished outrquaf
.
          MOVE      OTRQMESG,KEY20
          CALL      RDH7CIS1
          IF        OVRCD = 1
            IF        DGATEFLG = 1
              CALL      RDH7INB1
              COMPARE   ZERO,OVRCD
              GOTO      DELO0770 IF EQUAL
            ENDIF
.
            DISPLAY   *P22:24,*EL,*V2LON,KEY20;
            MOVE      OTRQMESG,SAVKEY20
            CALL      DEOTRQU1                   * delete record
.
            MOVE      SAVKEY20,KEY20             * set key for reposition
            GOTO      DELO0750
          ENDIF
.
          GOTO      DELO0770
.
DELO0800  MATCH     ANSY,FLAGI                   * clean pmsqdraf ?
          GOTO      DELO0900 IF NOT EQUAL        * no
.
.         Clean orphaned pmsqdraf records
.
          DISPLAY   *P12:24,*EL,"pmsqdraf: ";
          MOVE      SP20,KEY20
DELO0850  CALL      RSPMQDR1                     * position in file
DELO0870  CALL      RKPMQDR1                     * read next record
          BRANCH    OVRCD,DELO0900               * eof - finished pmsqdraf
.
          MOVE      PMQRMESI,KEY20
          CALL      RDH7CIS1
          IF        OVRCD = 1
            IF        DGATEFLG = 1
              CALL      RDH7INB1
              COMPARE   ZERO,OVRCD
              GOTO      DELO0870 IF EQUAL
            ENDIF
.
            DISPLAY   *P22:24,*EL,*V2LON,KEY20;
            MOVE      PMQRMESI,SAVKEY20
            CALL      DEPMQDR1                   * delete record
.
            MOVE      SAVKEY20,KEY20             * set key for reposition
            GOTO      DELO0850
          ENDIF
.
          GOTO      DELO0870
.
DELO0900  MATCH     ANSY,FLAGJ                   * clean pmsqptaf ?
          GOTO      DELO1000 IF NOT EQUAL        * no
.
.         Clean orphaned pmsqptaf records
.
          DISPLAY   *P12:24,*EL,"pmsqptaf: ";
          MOVE      SP20,KEY20
DELO0950  CALL      RSPMQPT1                     * position in file
DELO0970  CALL      RKPMQPT1                     * read next record
          BRANCH    OVRCD,DELO1000               * eof - finished pmsqptaf
.
          MOVE      PMQPMESI,KEY20
          CALL      RDH7CIS1
          IF        OVRCD = 1
            IF        DGATEFLG = 1
              CALL      RDH7INB1
              COMPARE   ZERO,OVRCD
              GOTO      DELO0970 IF EQUAL
            ENDIF
.
            DISPLAY   *P22:24,*EL,*V2LON,KEY20;
            MOVE      PMQPMESI,SAVKEY20
            CALL      DEPMQPT1                   * delete record
.
            MOVE      SAVKEY20,KEY20             * set key for reposition
            GOTO      DELO0950
          ENDIF
.
          GOTO      DELO0970
.
DELO1000  MATCH     ANSY,FLAGK                   * clean pmsqviaf ?
          GOTO      DELO1100 IF NOT EQUAL        * no
.
.         Clean orphaned pmsqviaf records
.
          DISPLAY   *P12:24,*EL,"pmsqviaf: ";
          MOVE      SP30,KEY22
DELO1050  CALL      RSPMQVI1                     * position in file
DELO1070  CALL      RKPMQVI1                     * read next record
          BRANCH    OVRCD,DELO1100               * eof - finished pmsqviaf
.
          MOVE      PMQVMESI,KEY20
          CALL      RDH7CIS1
          IF        OVRCD = 1
            IF        DGATEFLG = 1
              CALL      RDH7INB1
              COMPARE   ZERO,OVRCD
              GOTO      DELO1070 IF EQUAL
            ENDIF
.
            DISPLAY   *P22:24,*EL,*V2LON,KEY20;
            PACK      SAVKEY22,PMQVMESI,PMQVTRAN
            MOVE      SAVKEY22,KEY22
            CALL      DEPMQVI1                   * delete record
.
            MOVE      SAVKEY22,KEY22             * set key for reposition
            GOTO      DELO1050
          ENDIF
.
          GOTO      DELO1070
.
DELO1100  MATCH     ANSY,FLAGL                   * clean watqueaf ?
          GOTO      DELO9000 IF NOT EQUAL        * no
.
.         Clean orphaned watqueaf records
.
          DISPLAY   *P12:24,*EL,"watqueaf: ";
          MOVE      SP20,KEY20
DELO1150  CALL      RSWTQUE1                     * position in file
DELO1170  CALL      RKWTQUE1                     * read next record
          BRANCH    OVRCD,DELO9000               * eof - finished watqueaf
.
          MOVE      WTQUMESI,KEY20
          CALL      RDH7CIS1
          IF        OVRCD = 1
            IF        DGATEFLG = 1
              CALL      RDH7INB1
              COMPARE   ZERO,OVRCD
              GOTO      DELO1170 IF EQUAL
            ENDIF
.
            DISPLAY   *P22:24,*EL,*V2LON,KEY20;
            MOVE      WTQUMESI,SAVKEY20
            CALL      DEWTQUE1                   * delete record
.
            MOVE      SAVKEY20,KEY20             * set key for reposition
            GOTO      DELO1150
          ENDIF
.
          GOTO      DELO1170
.
DELO9000  DISPLAY   *P1:24,*EL,"Processing completed.  ";
          CALL      HITENTER
.
DELO9999  RETURN
+
. =========================================================================
.         I/O Includes
. =========================================================================
.
          INC       STD001IO
          INC       CLPMSQPX
.
          INC       ALLQUEIO/INC                                       *I-90201
          INC       BOKQUEIO/INC
          INC       EMRQUEIO/INC
          INC       EMRVISIO/INC
          INC       HL7CISIO/INC
          INC       HL7INBIO/INC
          INC       MRTQUEIO/INC                                       *I-90201
          INC       OPRQUEIO/INC
          INC       OUTQMAIO/INC
          INC       OUTQTYIO/INC
          INC       OUTQUEIO/INC
          INC       OUTRQUIO/INC
          INC       PMSQCCIO/INC
          INC       PMSQDRIO/INC
          INC       PMSQPTIO/INC
          INC       PMSQVIIO/INC
          INC       WATQUEIO/INC
