.***************************************************************************
.* System    :   Datagate Interface                                        *
.* Program   :   DGMESSIM.PBL                                              *
.* Desc      :   Datagate Message Simulator                                *
.***************************************************************************
.* Date      :   07/06/2004                                                *
.* Author    :   Steve Armstrong          CAR 53342                        *
.* Function  :   This program will simulate the DataGate interface engine  *
.*               allowing broadcast messages from ibaPAS to be processed   *
.*               and acknowledged without DataGate actually installed.     *
.*               The program has been written to allow execution from the  *
.*               command line and background running.                      *
.*                                                                         *
.*               Important Note: The application triggering the broadcast  *
.*                               message needs to be run with Interpreter  *
.*                               8.46 minimum.                             *
.*                                                                         *
.*               For each broadcast message from ibaPAS, DataGate expects  *
.*               to receive the following:                                 *
.*                         Start of Block (ASCII 1, Hex 01)                *
.*                         Block Type     (ASCII 16, Hex 10)               *
.*                         Message Data                                    *
.*                         End of Block   (ASCII 2, Hex 02)                *
.*                                                                         *
.*               DataGate will then return the following acknowledgment:   *
.*                         Positive Acknowledgement  (ASCII 4, Hex 04)     *
.*                         Negative Acknowledgement  (ASCII 5, Hex 05)     *
.*                                                                         *
.* Mods:                                                                   *
.*        V9.08.01 23/03/2007  Steve Armstrong   CAR 136760                *
.*                 Added processing of ZGP segment.                        *
.***************************************************************************
.*        V9.03.01 23/09/2004  Steve Armstrong   CAR 53342                 *
.*                 Enhanced program to cater for IBA Proprietary or HL7    *
.*                 message formats.  Also provided additional data display.*
.***************************************************************************
.
          INC       STD002FD
.
. FILE DESCRIPTION INCLUDES
. -------------------------
COMSOCKT  SOCKET    ASCII,FIXED=1    * Socket on which to communicate
LISSOCKT  SOCKET    ASCII,FIXED=1    * Socket on which to listen for connections
.
.
. LOCAL VARIABLE DEFINITION
. -------------------------
CISMNUMB  FORM      2             * Message number
.                                           1 = admission (A01)
.                                           2 = transfer (A02)
.                                           3 = discharge (A03)
.                                           4 = new O/P booking (A04)
.                                           5 = not in use
.                                           6 = not in use
.                                           7 = not in use
.                                           8 = update (A08)
.                                           9 = not in use
.                                          10 = not in use
.                                          11 = not in use
.                                          12 = not in use
.                                          13 = not in use
.                                          14 = not in use
.                                          15 = not in use
.                                          16 = not in use
.                                          17 = not in use
.                                          18 = not in use
.                                          19 = not in use
.                                          20 = not in use
.                                          21 = not in use
.                                          22 = not in use
.                                          23 = not in use
.                                          24 = not in use
.                                          25 = not in use
.                                          26 = not in use
.                                          27 = not in use
.                                          28 = not in use
.                                          29 = not in use
.                                          30 = not in use
.                                          31 = not in use
.                                          32 = not in use
.                                          33 = not in use
.                                          34 = A34 (Merge)
COUNTER   FORM      2             * string position counter
COUNTR    FORM      2
.
ERORFLAG  FORM      1             * error flag
.                                     0 = no errors occured
.                                     1 = errors occured
EVN001    DIM       3             * EVN fields
EVN002    DIM       26
EVN003    DIM       26
EVN004    DIM       3
EVN005    DIM       60
EVN006    DIM       26
.
FIELDNO   FORM      3             * segment field counter
FORM3     FORM      3
.
MESSAGE   DIM       999
MESSTYPE  DIM       3             * message type (ie A01)
.
MRG001    DIM       20            * MRG fields
MRG002    DIM       20
MRG003    DIM       20
MRG004    DIM       20
MRG005    DIM       20
MRG006    DIM       20
MRG007    DIM       48
.
MSH001    DIM       1             * MSH fields
MSH002    DIM       4
MSH003    DIM       180
MSH004    DIM       180
MSH005    DIM       180
MSH006    DIM       180
MSH007    DIM       26
MSH008    DIM       40
MSH009    DIM       7
MSH010    DIM       20
MSH011    DIM       3
MSH012    DIM       8
MSH013    DIM       15
MSH014    DIM       180
MSH015    DIM       2
MSH016    DIM       2
MSH017    DIM       2
MSH018    DIM       6
MSH019    DIM       60
MTYPARRY  DIM       3[34]
.
NK1001    DIM      4
NK1002    DIM     48
NK1003    DIM     60
NK1004    DIM    106
NK1005    DIM     40
NK1006    DIM     40
NK1007    DIM     60
NK1008    DIM      8
NK1009    DIM      8
NK1010    DIM     60
NK1011    DIM     20
NK1012    DIM     20
NK1013    DIM     60
NK1014    DIM      2
NK1015    DIM      1
NK1016    DIM     26
NK1017    DIM      2
NK1018    DIM      2
NK1019    DIM      4
NK1020    DIM     60
NK1021    DIM      2
NK1022    DIM      1
NK1023    DIM      1
NK1024    DIM      2
NK1025    DIM      3
NK1026    DIM     48
NK1027    DIM     80
NK1028    DIM      3
NK1029    DIM     80
NK1030    DIM     48
NK1031    DIM     40
NK1032    DIM    106
NK1033    DIM     32
NK1034    DIM      2
NK1035    DIM      1
NK1036    DIM      2
NK1037    DIM     16
.
PID001    DIM       4             * PID fields
PID002    DIM       20
PID003    DIM       20
PID004    DIM       20
PID005    DIM       53
PID006    DIM       48
PID007    DIM       26
PID008    DIM       1
PID009    DIM       48
PID010    DIM       3
PID011    DIM       152
PID012    DIM       4
PID013    DIM       40
PID014    DIM       40
PID015    DIM       60
PID016    DIM       3
PID017    DIM       3
PID018    DIM       20
PID019    DIM       16
PID020    DIM       25
PID021    DIM       20
PID022    DIM       3
PID023    DIM       60
PID024    DIM       2
PID025    DIM       2
PID026    DIM       4
PID027    DIM       60
PID028    DIM       80
PID029    DIM       26
PID030    DIM       1
.
PV1001    DIM       4             * PV1 fields
PV1002    DIM       1
PV1003    DIM       80
PV1004    DIM       3
PV1005    DIM       20
PV1006    DIM       80
PV1007    DIM       60
PV1008    DIM       60
PV1009    DIM       60
PV1010    DIM       3
PV1011    DIM       80
PV1012    DIM       2
PV1013    DIM       2
PV1014    DIM       3
PV1015    DIM       2
PV1016    DIM       2
PV1017    DIM       60
PV1018    DIM       2
PV1019    DIM       20
PV1020    DIM       50
PV1021    DIM       2
PV1022    DIM       2
PV1023    DIM       2
PV1024    DIM       2
PV1025    DIM       8
PV1026    DIM       12
PV1027    DIM       3
PV1028    DIM       2
PV1029    DIM       1
PV1030    DIM       8
PV1031    DIM       10
PV1032    DIM       12
PV1033    DIM       12
PV1034    DIM       1
PV1035    DIM       8
PV1036    DIM       3
PV1037    DIM       25
PV1038    DIM       2
PV1039    DIM       2
PV1040    DIM       1
PV1041    DIM       2
PV1042    DIM       80
PV1043    DIM       80
PV1044    DIM       26
PV1045    DIM       26
PV1046    DIM       12
PV1047    DIM       12
PV1048    DIM       12
PV1049    DIM       12
PV1050    DIM       20
PV1051    DIM       1
PV1052    DIM       60
.
SEGMENT   DIM       3             * 3 character HL7 segment code
SEGNUMBR  FORM      2             * segment number
.                                     1 = MSH
.                                     2 = EVN
.                                     3 = PID
.                                     4 = PV1
.                                     5 = MRG
.                                     6 = ZPT
.                                     7 = NK1
.                                     8 = ZGP
STRNGLEN  FORM      4
.
TCPIPORT  DIM       30            * Port on which to listen
TMPSTRNG  DIM       127
.
ZGP001    DIM       6
ZGP002    DIM       20
ZGP003    DIM       25
ZGP004    DIM       1
ZGP005    DIM       1
ZGP006    DIM       1
ZGP007    DIM       35
ZGP008    DIM       35
ZGP009    DIM       35
ZGP010    DIM       8
ZGP011    DIM       3
ZGP012    DIM       20
ZGP013    DIM       12
ZPT001    DIM       24
ZPT002    DIM       24
ZPT003    DIM       12
ZPT004    DIM       26
.
.
. PROGRAM CONSTANTS
. -----------------
CRETURN   INIT      015
DATABLOK  INIT      020
ENDBLOCK  INIT      002
EVNSEGMT  INIT      "EVN"
MRGSEGMT  INIT      "MRG"
MSHSEGMT  INIT      "MSH"
NEGTVACK  INIT      005
NK1SEGMT  INIT      "NK1"
PIDSEGMT  INIT      "PID"
PV1SEGMT  INIT      "PV1"
POSTVACK  INIT      004
RPLYBLOK  INIT      021
SP100     INIT      "                                                  ":
                    "                                                  "
STRTBLOK  INIT      001
ZGPSEGMT  INIT      "ZGP"
ZPTSEGMT  INIT      "ZPT"
.
.
PRGID     INIT      "DGMESSIM"
PRGNAM    INIT      "DataGate Message Simulator"
VERSION   INIT      "V12.00.00"
+
.**************************************************************************
.*                              ML0000                                    *
.*                      Controlling Logic (Mainline code)                 *
.**************************************************************************
.
MAIN0000  CALL      SETX0000               * set up common variables
          CALL      INIT0000               * initialisation and open files
.
MAIN0100  CALL      OPTN0000               * select options
          BRANCH    EXIT,MAIN9999          * EXIT = 1 if 0 chosen in menu
          BRANCH    COPTION,MAIN1000:      * HL7 Messages
                            MAIN1000       * IBA Proprietary Messages
.
MAIN1000  CALL      TCPP0000               * get TCP/IP port
          BRANCH    EXIT,MAIN0100          * nothing entered
.
          BRANCH    COPTION,MAIN3000:      * HL7 Messages
                            MAIN2000       * IBA Proprietary Messages
.
MAIN2000  CALL      PROC0000               * process IBA proprietary messages
          GOTO      MAIN9999
.
MAIN3000  CALL      HL7M0000               * process HL7 messages
.
MAIN9999  STOP
+
.****************************************************************************
.*                                INIT0000             Called by: MAIN0000  *
.*                             initialisation                               *
.*  The initialisation routine is used to display headings and open files.  *
.****************************************************************************
.
INIT0000  CALL      DISPHEAD                     * display heading
.
          MOVE      "A01",MTYPARRY[1]
          MOVE      "A02",MTYPARRY[2]
          MOVE      "A03",MTYPARRY[3]
          MOVE      "A04",MTYPARRY[4]
          MOVE      SP3,MTYPARRY[5]
          MOVE      SP3,MTYPARRY[6]
          MOVE      SP3,MTYPARRY[7]
          MOVE      "A08",MTYPARRY[8]
          MOVE      SP3,MTYPARRY[9]
          MOVE      SP3,MTYPARRY[10]
          MOVE      SP3,MTYPARRY[11]
          MOVE      SP3,MTYPARRY[12]
          MOVE      SP3,MTYPARRY[13]
          MOVE      SP3,MTYPARRY[14]
          MOVE      SP3,MTYPARRY[15]
          MOVE      SP3,MTYPARRY[16]
          MOVE      SP3,MTYPARRY[17]
          MOVE      SP3,MTYPARRY[18]
          MOVE      SP3,MTYPARRY[19]
          MOVE      SP3,MTYPARRY[20]
          MOVE      SP3,MTYPARRY[21]
          MOVE      SP3,MTYPARRY[22]
          MOVE      SP3,MTYPARRY[23]
          MOVE      SP3,MTYPARRY[24]
          MOVE      SP3,MTYPARRY[25]
          MOVE      SP3,MTYPARRY[26]
          MOVE      SP3,MTYPARRY[27]
          MOVE      SP3,MTYPARRY[28]
          MOVE      SP3,MTYPARRY[29]
          MOVE      SP3,MTYPARRY[30]
          MOVE      SP3,MTYPARRY[31]
          MOVE      SP3,MTYPARRY[32]
          MOVE      SP3,MTYPARRY[33]
          MOVE      "A34",MTYPARRY[34]
.
INIT9999  RETURN
+
.****************************************************************************
.*                                OPTN0000             Called by: ML0000    *
.*                        get user options or exit                          *
.*                                                                          *
.*    Returns:  EXIT    = FALSE (0)  Ok to continue                         *
.*                        TRUE  (1)  Exit option selected                   *
.****************************************************************************
.
OPTN0000  DISPLAY   *P1:3,*EF,*P1:4,*V2LON,ZERO,*HOFF,". Exit":
                    *P1:5,*V2LON,ONE,*HOFF,". Receive HL7 Messages":
                    *P1:6,*V2LON,TWO,*HOFF,". Receive IBA Proprietary Messages"
.
OPTN0500  KEYIN     *P1:8,*EL,"Select Option : ":
                    *P17:8,*V2LON,COPTION
.
          COMPARE   ZERO,COPTION                 * exit selected ?
          GOTO      OPTN9500 IF EQUAL            * yes
.
          BRANCH    COPTION,OPTN9000:            * HL7 Messages
                            OPTN9000             * IBA Proprietary Messages
.
          BEEP
          GOTO      OPTN0500
.
OPTN9000  MOVE      ZERO,EXIT
          GOTO      OPTN9999
.
OPTN9500  MOVE      ONE,EXIT
.
OPTN9999  RETURN
+
.*****************************************************************************
.*                                 TCPP0000          Called by: MAIN0000     *
.*                 Keyin the TCP/IP port number                              *
.* Returns:   TCPIPORT - TCP/IP port number                                  *
.*            EXIT   0 = Port number input                                   *
.*                   1 = nothing input                                       *
.*****************************************************************************
.
TCPP0000  KEYIN     *P1:10,*EF,"Port Number: ":   * get the TCP/IP port number
                    *P14:10,*V2LON,TCPIPORT
.
          PACK      TCPIPORT,TCPIPORT,SP30,SP10
          MATCH     SP30,TCPIPORT                * anything entered ?
          GOTO      TCPP9100 IF EQUAL            * no - finished
.
          STRIP     TCPIPORT                     * remove trailing blanks
.
          MOVE      ZERO,EXIT
          GOTO      TCPP9999
.
TCPP9100  MOVE      ONE,EXIT
.
TCPP9999  RETURN
+
.*****************************************************************************
.*                              PROC0000             Called by: MAIN0000     *
.*                  Open the connection and listen for a message.            *
.*                  When amessage is received, display it to the screen.     *
.*****************************************************************************
.
.         Listen on the port for a connection
.
PROC0000  DISPLAY   *P1:12,*EF,"Listening on port: ",TCPIPORT
          LISTEN    LISSOCKT,TCPIPORT,REUSEADDR
.
PROC0100  DISPLAY   "Accepting connections on port: ",TCPIPORT,*R,*N;
          ACCEPT    COMSOCKT,LISSOCKT
          DISPLAY   "Accepted connection on port: ",TCPIPORT,*R,*N;
.
.         Set TRAP to pick up if remote process has disconnected or terminated
.
          TRAP       PROC9500 IF SIGPIPE
.
.         Wait for a SOB character to indicate a message has been received
.
PROC0500  DISPLAY    "Waiting for next message....",*R,*N;
          CALL      GTSTR000                     * get next 127 chars 
          BRANCH    EXIT,PROC9500:               * timeout
                         PROC9000                * connection lost
.
.         Search the string for a start of block (ASCII 11) character
.
PROC0600  SCAN      STRTBLOK,TMPSTRNG            * sob found ?
          GOTO      PROC0500 IF NOT EQUAL        * no - ignore message
.
PROC0700  DISPLAY   "Start of Block found",*R,*N;
.
          PACK       MESSAGE,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100
          CLEAR      MESSAGE
          MOVE       ZERO,ERORFLAG               * initialise error flag
          APPEND     STRTBLOK,MESSAGE
.
.         Get the data type character
.
          BUMP      TMPSTRNG                     * get the next character
          IF        @EOS
            CALL      GTSTR000                   * get next 127 chars 
            BRANCH    EXIT,PROC9500:             * timeout
                           PROC9000              * connection lost
          ENDIF
.
          MOVE      TMPSTRNG,ANS
          MATCH     ANS,DATABLOK                 * data character received ?
          GOTO      PROC0500 IF NOT EQUAL        * yes
.
          DISPLAY   "Data Type found",*R,*N;
          APPEND    DATABLOK,MESSAGE
          DISPLAY   "Processing message body",*R,*N;
.
.         Get the rest of the message
.
PROC1000  BUMP      TMPSTRNG                     * get the next character
          IF        @EOS
            CALL      GTSTR000                   * get next 127 chars 
            BRANCH    EXIT,PROC9500:             * timeout
                           PROC9000              * connection lost
          ENDIF
.
          MOVE      TMPSTRNG,ANS                 * load next character    
.
          MATCH     STRTBLOK,ANS                 * start of block found ?
          GOTO      PROC0700 IF EQUAL            * yes - new message
.
          MATCH     ENDBLOCK,ANS                 * end of block found ?
          GOTO      PROC2000 IF EQUAL            * yes - end of curr. mess.
.
          APPEND    ANS,MESSAGE                  * load char. into message
          GOTO      PROC1000                     * get next character
.
.         The end of message (EOB) has been found
.
PROC2000  APPEND    ANS,MESSAGE                  * load eob into message
          RESET     MESSAGE
          DISPLAY   "End of Block received",*R,*N;  * display full message
          STRIP     MESSAGE
          MOVE      ZERO,COUNTR
          MOVELPTR  MESSAGE,FORM3
          DISPLAY   "Full Message received is ",FORM3," bytes (excluding ":
                    "control characters):",*R,*N;
          WHILE     FORM3 > 0
            ADD       ONE,COUNTR
            MATCH     CRETURN,MESSAGE
            IF        @EQUAL
              MOVE      ASK,ANS
            ELSE
              MOVE      MESSAGE,ANS
            ENDIF
            IF        COUNTR = 1
              DISPLAY   "[";
            ENDIF
            DISPLAY   *HON,ANS,*HOFF;
            IF        COUNTR = 70
              DISPLAY   "]",*R,*N;
              MOVE      ZERO,COUNTR
            ENDIF
            SUB       ONE,FORM3
            BUMP      MESSAGE
          DO
          DISPLAY   "]",*R,*N;
          RESET     MESSAGE
.
          WRITE      COMSOCKT;STRTBLOK,RPLYBLOK,POSTVACK,ENDBLOCK;
          DISPLAY   "Acknowledgement Accept sent",*R,*N;
          DISPLAY   "[",*HON,STRTBLOK,RPLYBLOK,POSTVACK,ENDBLOCK,*HOFF:
                    "]",*R,*N;
.
.         Get the next character which should be the start of the
.         next message.
.
          BUMP      TMPSTRNG                     * get the next character
          GOTO      PROC0500 IF EOS              * eos - get next string
.
          DISPLAY   "Processing next message....",*R,*N;
          GOTO      PROC0600                     * wait for next sob
.
PROC9000  CLOSE      COMSOCKT                    * Close server side
          GOTO       PROC0100

PROC9500  CLOSE      COMSOCKT                    * Close server side
          CLOSE      LISSOCKT                    * Close listener
.
PROC9999  RETURN
+
.*****************************************************************************
.*                              HL7M0000             Called by: MAIN0000     *
.*                  Open the connection and listen for a message.            *
.*                  When amessage is received, display it to the screen.     *
.*****************************************************************************
.
.         Listen on the port for a connection
.
HL7M0000  DISPLAY   *P1:12,*EF,"Listening on port: ",TCPIPORT
          LISTEN    LISSOCKT,TCPIPORT,REUSEADDR
.
HL7M0100  DISPLAY   "Accepting connections on port: ",TCPIPORT,*R,*N;
          ACCEPT    COMSOCKT,LISSOCKT
          DISPLAY   "Accepted connection on port: ",TCPIPORT,*R,*N;
.
.         Set TRAP to pick up if remote process has disconnected or terminated
.
          TRAP       HL7M9500 IF SIGPIPE
.
.         Wait for a SOB character to indicate a message has been received
.
HL7M0500  DISPLAY    "Waiting for next message....",*R,*N;
          CALL      GTSTR000                     * get next 127 chars
          BRANCH    EXIT,HL7M9500:               * timeout
                         HL7M9000                * connection lost
.
.         Search the string for a start of block (ASCII 11) character
.
HL7M0600  SCAN      STRTBLOK,TMPSTRNG            * sob found ?
          GOTO      HL7M0500 IF NOT EQUAL        * no - ignore message
.
HL7M0700  DISPLAY   "Start of Block found",*R,*N;
.
          PACK       MESSAGE,SP100,SP100,SP100,SP100,SP100,SP100,SP100:
                             SP100,SP100,SP100
          CLEAR      MESSAGE
          APPEND     STRTBLOK,MESSAGE
.
.         Get the data type character
.
          BUMP      TMPSTRNG                     * get the next character
          IF        @EOS
            CALL      GTSTR000                   * get next 127 chars
            BRANCH    EXIT,HL7M9500:             * timeout
                           HL7M9000              * connection lost
          ENDIF
.
          MOVE      TMPSTRNG,ANS
          MATCH     ANS,DATABLOK                 * data character received ?
          GOTO      HL7M0500 IF NOT EQUAL        * yes
.
          DISPLAY   "Data Type found",*R,*N;
          APPEND    DATABLOK,MESSAGE
          DISPLAY   "Processing message body",*R,*N;
.
.         The next segment needs to be processed, so read in the next segment id
.
HL7M4000  CALL      GSEG0000                     * validate segment code
          BRANCH    EXIT,HL7M9500:               * connection timeout
                         HL7M9000:               * connection lost
                         HL7M4000:               * start of block
                         HL7M6000:               * end of block
                         HL7M4000                * end of segment
.
          DISPLAY   "Processing segment: [",SEGMENT,"]",*R,*N;
.
.         We need to validate the segment for the message type, and
.         make sure that the segment is in the correct sequence for the
.         message
.
          CALL      VSEG0000                     * validate segment
.
.         If a valid segment id has been found, clear the segment fields
.
          PERFORM   SEGNUMBR,CMSH0000:           * MSH
                             CEVN0000:           * EVN
                             CPID0000:           * PID
                             CPV10000:           * PV1
                             CMRG0000:           * MRG
                             CZPT0000:           * ZPT
                             CNK10000:           * NK1
                             CZGP0000            * ZGP
.
          MOVE      ZERO,FIELDNO                 * initialise seg. field count
.
.         Read in the rest of the segment until an end of segment character
.         (ASCII 13 - Carriage return) is found.
.
HL7M5000  CALL      GCHR0000                     * get next character in message
          BRANCH    EXIT,HL7M9500:               * connection timeout
                         HL7M9000:               * connection lost
                         HL7M4000:               * start of block
                         HL7M5500:               * end of block
                         HL7M5500:               * end of segment
                         HL7M0500                * no field separator
.
.         A valid character has been found so load it into the relevant
.         segment field (according to FIELDNO).
.
          PERFORM   SEGNUMBR,LMSH0000:           * MSH
                             LEVN0000:           * EVN
                             LPID0000:           * PID
                             LPV10000:           * PV1
                             LMRG0000:           * MRG
                             LZPT0000:           * ZPT
                             LNK10000:           * NK1
                             LZGP0000            * ZGP
.
          GOTO      HL7M5000
.
.         The end of segment has been found, so reset all the segment fields.
.
HL7M5500  PERFORM   SEGNUMBR,RMSH0000:           * MSH
                             REVN0000:           * EVN
                             RPID0000:           * PID
                             RPV10000:           * PV1
                             RMRG0000:           * MRG
                             RZPT0000:           * ZPT
                             RNK10000:           * NK1
                             RZGP0000            * ZGP
.
          DISPLAY   "Validating segment: [",SEGMENT,"]",*R,*N;
.
          PERFORM   SEGNUMBR,VMSH0000:           * MSH
                             VEVN0000:           * EVN
                             VPID0000:           * PID
                             VPV10000:           * PV1
                             VMRG0000:           * MRG
                             VZPT0000:           * ZPT
                             VNK10000:           * NK1
                             VZGP0000            * ZGP
.
          DISPLAY   "[",SEGMENT,"] segment validated",*R,*N;
.
          MATCH     ANS,ENDBLOCK                 * end of message received ?
          GOTO      HL7M4000 IF NOT EQUAL        * no - get next segment
.
.         The end of message (EOB) has been found
.
HL7M6000  APPEND    ENDBLOCK,MESSAGE
          RESET     MESSAGE
          DISPLAY   "End of Block received",*R,*N;  * display full message
          MOVE      ZERO,COUNTR
          MOVELPTR  MESSAGE,FORM3
          DISPLAY   "Full Message received is ",FORM3," bytes (excluding ":
                    "control characters):",*R,*N;
          WHILE     FORM3 > 0
            ADD       ONE,COUNTR
            MATCH     CRETURN,MESSAGE
            IF        @EQUAL
              MOVE      ASK,ANS
            ELSE
              MOVE      MESSAGE,ANS
            ENDIF
            IF        COUNTR = 1
              DISPLAY   "[";
            ENDIF
            DISPLAY   *HON,ANS,*HOFF;
            IF        COUNTR = 70
              DISPLAY   "]",*R,*N;
              MOVE      ZERO,COUNTR
            ENDIF
            SUB       ONE,FORM3
            BUMP      MESSAGE
          DO
          DISPLAY   "]",*R,*N;
          RESET     MESSAGE
.
.         Send the reply acknowledgement message
.
          DISPLAY   "Sending Acknowledgement",*R,*N;
.
          IF        ERORFLAG = 0
            PACK      MESSAGE,STRTBLOCK,RPLYBLOK,POSTVACK,ENDBLOCK
          ELSE
            PACK      MESSAGE,STRTBLOCK,RPLYBLOK,NEGTVACK,ENDBLOCK
          ENDIF
.
          MOVELPTR  MESSAGE,STRNGLEN
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF SIGPIPE
          WRITE     COMSOCKT,STRNGLEN,1000;MESSAGE;
          TRAPCLR   SIGPIPE                              * clear trap
          GOTO      HL7M9600 IF TIMEOUT                  * timeout expired
          BRANCH    OVRCD,HL7M9000                       * connection lost
.
          DISPLAY   "Acknowledgement sent",*R,*N;
          DISPLAY   "[",*HON,*+,MESSAGE,*-,*HOFF,"]",*R,*N;
.
          GOTO      HL7M0500                     * get next message
.
HL7M9000  DISPLAY   "Connection lost",*R,*N;
          GOTO      HL7M9900
.
HL7M9100  DISPLAY   "Solicited Socket not set up",*R,*N;
          GOTO      HL7M9900
.
HL7M9500  DISPLAY   "Timeout waiting for incoming message",*R,*N;
          GOTO      HL7M0500
.
HL7M9600  DISPLAY   "Timeout waiting for outgoing message",*R,*N;
          GOTO      HL7M9900
.
.         Close the sockets and start again
.
HL7M9900  CLOSE     COMSOCKT
          CLOSE     LISSOCKT
          GOTO      HL7M0100
.
HL7M9999  RETURN
+
.*****************************************************************************
.*                          GTSTR000               Called by: PROC0000       *
.*        Read the next 127 characters (or less) from the socket             *
.* Returns:   TMPSTRNG - buffer containing character string read in          *
.*            EXIT      0 = read ok                                          *
.*                      1 = timeout expired                                  *
.*                      2 = connection lost                                  *
.*****************************************************************************
.
GTSTR000  RECV      COMSOCKT,127,30000;TMPSTRNG; * read first 127 characters
          GOTO      GTSTR910 IF TIMEOUT          * timeout expired
          GOTO      GTSTR920 IF OVER             * connection lost
          IF        @LESS
.>>>>>>                                          * there are no more chars
.                                                  to be read
          ENDIF
.
.         Data received
.
          STRIP     TMPSTRNG
          MOVE      ZERO,COUNTR
          MOVELPTR  TMPSTRNG,FORM3
          DISPLAY   "Received ",FORM3," bytes:  (* = carriage return)",*R,*N;
          WHILE     FORM3 > 0
            ADD       ONE,COUNTR
            MATCH     CRETURN,TMPSTRNG
            IF        @EQUAL
              MOVE      ASK,ANS
            ELSE
              MOVE      TMPSTRNG,ANS
            ENDIF
            IF        COUNTR = 1
              DISPLAY   "[";
            ENDIF
            DISPLAY   *HON,ANS,*HOFF;
            IF        COUNTR = 70
              DISPLAY   "]",*R,*N;
              MOVE      ZERO,COUNTR
            ENDIF
            SUB       ONE,FORM3
            BUMP      TMPSTRNG
          DO
          DISPLAY     "]",*R,*N;
          RESET       TMPSTRNG
.
          MOVE      ZERO,EXIT
          GOTO      GTSTR999
.
GTSTR910  MOVE      ONE,EXIT                     * timeout
          GOTO      GTSTR999
.
GTSTR920  MOVE      TWO,EXIT                     * connection lost
          GOTO      GTSTR999
.
GTSTR999  RETURN
+
.*****************************************************************************
.*                               CMSH0000          Called by:                *
.*                     Clear all MSH variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CMSH0000  MOVE      SP100,MSH002
          PACK      MSH003,SP100,SP100
          PACK      MSH004,SP100,SP100
          PACK      MSH005,SP100,SP100
          PACK      MSH006,SP100,SP100
          MOVE      SP100,MSH007
          MOVE      SP100,MSH008
          MOVE      SP100,MSH009
          MOVE      SP100,MSH010
          MOVE      SP100,MSH011
          MOVE      SP100,MSH012
          MOVE      SP100,MSH013
          PACK      MSH014,SP100,SP100
          MOVE      SP100,MSH015
          MOVE      SP100,MSH016
          MOVE      SP100,MSH017
          MOVE      SP100,MSH018
          MOVE      SP100,MSH019
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     MSH002
          CLEAR     MSH003
          CLEAR     MSH004
          CLEAR     MSH005
          CLEAR     MSH006
          CLEAR     MSH007
          CLEAR     MSH008
          CLEAR     MSH009
          CLEAR     MSH010
          CLEAR     MSH011
          CLEAR     MSH012
          CLEAR     MSH013
          CLEAR     MSH014
          CLEAR     MSH015
          CLEAR     MSH016
          CLEAR     MSH017
          CLEAR     MSH018
          CLEAR     MSH019
.
CMSH9999  RETURN
+
.*****************************************************************************
.*                               CMRG0000          Called by:                *
.*                     Clear all MRG variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CMRG0000  MOVE      SP100,MRG001
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     MRG001
.
CMRG9999  RETURN
+
.*****************************************************************************
.*                               CEVN0000          Called by:                *
.*                     Clear all EVN variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CEVN0000  MOVE      SP100,EVN001
          MOVE      SP100,EVN002
          MOVE      SP100,EVN003
          MOVE      SP100,EVN004
          MOVE      SP100,EVN005
          MOVE      SP100,EVN006
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     EVN001
          CLEAR     EVN002
          CLEAR     EVN003
          CLEAR     EVN004
          CLEAR     EVN005
          CLEAR     EVN006
.
CEVN9999  RETURN
+
.*****************************************************************************
.*                               CPID0000          Called by:                *
.*                     Clear all PID variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CPID0000  MOVE      SP100,PID001
          MOVE      SP100,PID002
          MOVE      SP100,PID003
          MOVE      SP100,PID004
          MOVE      SP100,PID005
          MOVE      SP100,PID006
          MOVE      SP100,PID007
          MOVE      SP100,PID008
          MOVE      SP100,PID009
          MOVE      SP100,PID010
          PACK      PID011,SP100,SP100
          MOVE      SP100,PID012
          MOVE      SP100,PID013
          MOVE      SP100,PID014
          MOVE      SP100,PID015
          MOVE      SP100,PID016
          MOVE      SP100,PID017
          MOVE      SP100,PID018
          MOVE      SP100,PID019
          MOVE      SP100,PID020
          MOVE      SP100,PID021
          MOVE      SP100,PID022
          MOVE      SP100,PID023
          MOVE      SP100,PID024
          MOVE      SP100,PID025
          MOVE      SP100,PID026
          MOVE      SP100,PID027
          MOVE      SP100,PID028
          MOVE      SP100,PID029
          MOVE      SP100,PID030
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     PID001
          CLEAR     PID002
          CLEAR     PID003
          CLEAR     PID004
          CLEAR     PID005
          CLEAR     PID006
          CLEAR     PID007
          CLEAR     PID008
          CLEAR     PID009
          CLEAR     PID010
          CLEAR     PID011
          CLEAR     PID012
          CLEAR     PID013
          CLEAR     PID014
          CLEAR     PID015
          CLEAR     PID016
          CLEAR     PID017
          CLEAR     PID018
          CLEAR     PID019
          CLEAR     PID020
          CLEAR     PID021
          CLEAR     PID022
          CLEAR     PID023
          CLEAR     PID024
          CLEAR     PID025
          CLEAR     PID026
          CLEAR     PID027
          CLEAR     PID028
          CLEAR     PID029
          CLEAR     PID030
.
CPID9999  RETURN
+
.*****************************************************************************
.*                               CNK10000          Called by:                *
.*                     Clear all NK1 variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CNK10000  MOVE      SP100,NK1001
          MOVE      SP100,NK1002
          MOVE      SP100,NK1003
          PACK      NK1004,SP100,SP100
          MOVE      SP100,NK1005
          MOVE      SP100,NK1006
          MOVE      SP100,NK1007
          MOVE      SP100,NK1008
          MOVE      SP100,NK1009
          MOVE      SP100,NK1010
          MOVE      SP100,NK1011
          MOVE      SP100,NK1012
          MOVE      SP100,NK1013
          MOVE      SP100,NK1014
          MOVE      SP100,NK1015
          MOVE      SP100,NK1016
          MOVE      SP100,NK1017
          MOVE      SP100,NK1018
          MOVE      SP100,NK1019
          MOVE      SP100,NK1020
          MOVE      SP100,NK1021
          MOVE      SP100,NK1022
          MOVE      SP100,NK1023
          MOVE      SP100,NK1024
          MOVE      SP100,NK1025
          MOVE      SP100,NK1026
          MOVE      SP100,NK1027
          MOVE      SP100,NK1028
          MOVE      SP100,NK1029
          MOVE      SP100,NK1030
          MOVE      SP100,NK1031
          PACK      NK1032,SP100,SP100
          MOVE      SP100,NK1033
          MOVE      SP100,NK1034
          MOVE      SP100,NK1035
          MOVE      SP100,NK1036
          MOVE      SP100,NK1037
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     NK1001
          CLEAR     NK1002
          CLEAR     NK1003
          CLEAR     NK1004
          CLEAR     NK1005
          CLEAR     NK1006
          CLEAR     NK1007
          CLEAR     NK1008
          CLEAR     NK1009
          CLEAR     NK1010
          CLEAR     NK1011
          CLEAR     NK1012
          CLEAR     NK1013
          CLEAR     NK1014
          CLEAR     NK1015
          CLEAR     NK1016
          CLEAR     NK1017
          CLEAR     NK1018
          CLEAR     NK1019
          CLEAR     NK1020
          CLEAR     NK1021
          CLEAR     NK1022
          CLEAR     NK1023
          CLEAR     NK1024
          CLEAR     NK1025
          CLEAR     NK1026
          CLEAR     NK1027
          CLEAR     NK1028
          CLEAR     NK1029
          CLEAR     NK1030
          CLEAR     NK1031
          CLEAR     NK1032
          CLEAR     NK1033
          CLEAR     NK1034
          CLEAR     NK1035
          CLEAR     NK1036
          CLEAR     NK1037
.
CNK19999  RETURN
+
.*****************************************************************************
.*                               CPV10000          Called by:                *
.*                     Clear all PV1 variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CPV10000  MOVE      SP100,PV1001
          MOVE      SP100,PV1002
          MOVE      SP100,PV1003
          MOVE      SP100,PV1004
          MOVE      SP100,PV1005
          MOVE      SP100,PV1006
          MOVE      SP100,PV1007
          MOVE      SP100,PV1008
          MOVE      SP100,PV1009
          MOVE      SP100,PV1010
          MOVE      SP100,PV1011
          MOVE      SP100,PV1012
          MOVE      SP100,PV1013
          MOVE      SP100,PV1014
          MOVE      SP100,PV1015
          MOVE      SP100,PV1016
          MOVE      SP100,PV1017
          MOVE      SP100,PV1018
          MOVE      SP100,PV1019
          MOVE      SP100,PV1020
          MOVE      SP100,PV1021
          MOVE      SP100,PV1022
          MOVE      SP100,PV1023
          MOVE      SP100,PV1024
          MOVE      SP100,PV1025
          MOVE      SP100,PV1026
          MOVE      SP100,PV1027
          MOVE      SP100,PV1028
          MOVE      SP100,PV1029
          MOVE      SP100,PV1030
          MOVE      SP100,PV1031
          MOVE      SP100,PV1032
          MOVE      SP100,PV1033
          MOVE      SP100,PV1034
          MOVE      SP100,PV1035
          MOVE      SP100,PV1036
          MOVE      SP100,PV1037
          MOVE      SP100,PV1038
          MOVE      SP100,PV1039
          MOVE      SP100,PV1040
          MOVE      SP100,PV1041
          MOVE      SP100,PV1042
          MOVE      SP100,PV1043
          MOVE      SP100,PV1044
          MOVE      SP100,PV1045
          MOVE      SP100,PV1046
          MOVE      SP100,PV1047
          MOVE      SP100,PV1048
          MOVE      SP100,PV1049
          MOVE      SP100,PV1050
          MOVE      SP100,PV1051
          MOVE      SP100,PV1052
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     PV1001
          CLEAR     PV1002
          CLEAR     PV1003
          CLEAR     PV1004
          CLEAR     PV1005
          CLEAR     PV1006
          CLEAR     PV1007
          CLEAR     PV1008
          CLEAR     PV1009
          CLEAR     PV1010
          CLEAR     PV1011
          CLEAR     PV1012
          CLEAR     PV1013
          CLEAR     PV1014
          CLEAR     PV1015
          CLEAR     PV1016
          CLEAR     PV1017
          CLEAR     PV1018
          CLEAR     PV1019
          CLEAR     PV1020
          CLEAR     PV1021
          CLEAR     PV1022
          CLEAR     PV1023
          CLEAR     PV1024
          CLEAR     PV1025
          CLEAR     PV1026
          CLEAR     PV1027
          CLEAR     PV1028
          CLEAR     PV1029
          CLEAR     PV1030
          CLEAR     PV1031
          CLEAR     PV1032
          CLEAR     PV1033
          CLEAR     PV1034
          CLEAR     PV1035
          CLEAR     PV1036
          CLEAR     PV1037
          CLEAR     PV1038
          CLEAR     PV1039
          CLEAR     PV1040
          CLEAR     PV1041
          CLEAR     PV1042
          CLEAR     PV1043
          CLEAR     PV1044
          CLEAR     PV1045
          CLEAR     PV1046
          CLEAR     PV1047
          CLEAR     PV1048
          CLEAR     PV1049
          CLEAR     PV1050
          CLEAR     PV1051
          CLEAR     PV1052
.
CPV19999  RETURN
+
.*****************************************************************************
.*                               CZPT0000          Called by:                *
.*                     Clear all ZPT variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CZPT0000  MOVE      SP100,ZPT001
          MOVE      SP100,ZPT002
          MOVE      SP100,ZPT003
          MOVE      SP100,ZPT004
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     ZPT001
          CLEAR     ZPT002
          CLEAR     ZPT003
          CLEAR     ZPT004
.
CZPT9999  RETURN
+
.*****************************************************************************
.*                               CZGP0000          Called by:                *
.*                     Clear all ZGP variables                               *
.*****************************************************************************
.
.         Fill all variables with spaces so that no data is carried over
.         from a previous message.
.
CZGP0000  MOVE      SP100,ZGP001
          MOVE      SP100,ZGP002
          MOVE      SP100,ZGP003
          MOVE      SP100,ZGP004
          MOVE      SP100,ZGP005
          MOVE      SP100,ZGP006
          MOVE      SP100,ZGP007
          MOVE      SP100,ZGP008
          MOVE      SP100,ZGP009
          MOVE      SP100,ZGP010
          MOVE      SP100,ZGP011
          MOVE      SP100,ZGP012
          MOVE      SP100,ZGP013
.
.         Set the LL and FP to zero so that each character received for
.         the field can be APPENDed.
.
          CLEAR     ZGP001
          CLEAR     ZGP002
          CLEAR     ZGP003
          CLEAR     ZGP004
          CLEAR     ZGP005
          CLEAR     ZGP006
          CLEAR     ZGP007
          CLEAR     ZGP008
          CLEAR     ZGP009
          CLEAR     ZGP010
          CLEAR     ZGP011
          CLEAR     ZGP012
          CLEAR     ZGP013
.
CZGP9999  RETURN
+
.*****************************************************************************
.*                              RMSH0000           Called by:                *
.*                      Reset all MSH variables                              *
.*    Also need to save some variables to send back in the acknowledgement   *
.*    message.                                                               *
.*****************************************************************************
.
RMSH0000  RESET     MSH001
          RESET     MSH002
          RESET     MSH003
          RESET     MSH004
          RESET     MSH005
          RESET     MSH006
          RESET     MSH007
          RESET     MSH008
          RESET     MSH009
          RESET     MSH010
          RESET     MSH011
          RESET     MSH012
          RESET     MSH013
          RESET     MSH014
          RESET     MSH015
          RESET     MSH016
          RESET     MSH017
          RESET     MSH018
          RESET     MSH019
.
RMSH9999  RETURN
+
.*****************************************************************************
.*                              RMRG0000           Called by:                *
.*                      Reset all MRG variables                              *
.*    Also need to save some variables to send back in the acknowledgement   *
.*    message.                                                               *
.*****************************************************************************
.
RMRG0000  RESET     MRG001
          RESET     MRG002
          RESET     MRG003
          RESET     MRG004
          RESET     MRG005
          RESET     MRG006
          RESET     MRG007
.
RMRG9999  RETURN
+
.*****************************************************************************
.*                              REVN0000           Called by:                *
.*                         Reset all EVN variables                           *
.*****************************************************************************
.
REVN0000  RESET     EVN001
          RESET     EVN002
          RESET     EVN003
          RESET     EVN004
          RESET     EVN005
          RESET     EVN006
.
REVN9999  RETURN
+
.*****************************************************************************
.*                              RPID0000           Called by:                *
.*                         Reset all PID variables                           *
.*****************************************************************************
.
RPID0000  RESET     PID001
          RESET     PID002
          RESET     PID003
          RESET     PID004
          RESET     PID005
          RESET     PID006
          RESET     PID007
          RESET     PID008
          RESET     PID009
          RESET     PID010
          RESET     PID011
          RESET     PID012
          RESET     PID013
          RESET     PID014
          RESET     PID015
          RESET     PID016
          RESET     PID017
          RESET     PID018
          RESET     PID019
          RESET     PID020
          RESET     PID021
          RESET     PID022
          RESET     PID023
          RESET     PID024
          RESET     PID025
          RESET     PID026
          RESET     PID027
          RESET     PID028
          RESET     PID029
          RESET     PID030
.
RPID9999  RETURN
+
.*****************************************************************************
.*                              RNK10000           Called by:                *
.*                      Reset all NK1 variables                              *
.*    Also need to save some variables to send back in the acknowledgement   *
.*    message.                                                               *
.*****************************************************************************
.
RNK10000  RESET     NK1001
          RESET     NK1002
          RESET     NK1003
          RESET     NK1004
          RESET     NK1005
          RESET     NK1006
          RESET     NK1007
          RESET     NK1008
          RESET     NK1009
          RESET     NK1010
          RESET     NK1011
          RESET     NK1012
          RESET     NK1013
          RESET     NK1014
          RESET     NK1015
          RESET     NK1016
          RESET     NK1017
          RESET     NK1018
          RESET     NK1019
          RESET     NK1020
          RESET     NK1021
          RESET     NK1022
          RESET     NK1023
          RESET     NK1024
          RESET     NK1025
          RESET     NK1026
          RESET     NK1027
          RESET     NK1028
          RESET     NK1029
          RESET     NK1030
          RESET     NK1031
          RESET     NK1032
          RESET     NK1033
          RESET     NK1034
          RESET     NK1035
          RESET     NK1036
          RESET     NK1037
.
RNK19999  RETURN
+
.*****************************************************************************
.*                              RPV10000           Called by:                *
.*                         Reset all PV1 variables                           *
.*****************************************************************************
.
RPV10000  RESET     PV1001
          RESET     PV1002
          RESET     PV1003
          RESET     PV1004
          RESET     PV1005
          RESET     PV1006
          RESET     PV1007
          RESET     PV1008
          RESET     PV1009
          RESET     PV1010
          RESET     PV1011
          RESET     PV1012
          RESET     PV1013
          RESET     PV1014
          RESET     PV1015
          RESET     PV1016
          RESET     PV1017
          RESET     PV1018
          RESET     PV1019
          RESET     PV1020
          RESET     PV1021
          RESET     PV1022
          RESET     PV1023
          RESET     PV1024
          RESET     PV1025
          RESET     PV1026
          RESET     PV1027
          RESET     PV1028
          RESET     PV1029
          RESET     PV1030
          RESET     PV1031
          RESET     PV1032
          RESET     PV1033
          RESET     PV1034
          RESET     PV1035
          RESET     PV1036
          RESET     PV1037
          RESET     PV1038
          RESET     PV1039
          RESET     PV1040
          RESET     PV1041
          RESET     PV1042
          RESET     PV1043
          RESET     PV1044
          RESET     PV1045
          RESET     PV1046
          RESET     PV1047
          RESET     PV1048
          RESET     PV1049
          RESET     PV1050
          RESET     PV1051
          RESET     PV1052
.
RPV19999  RETURN
+
.*****************************************************************************
.*                              RZPT0000           Called by:                *
.*                      Reset all ZPT variables                              *
.*    Also need to save some variables to send back in the acknowledgement   *
.*    message.                                                               *
.*****************************************************************************
.
RZPT0000  RESET     ZPT001
          RESET     ZPT002
          RESET     ZPT003
          RESET     ZPT004
.
RZPT9999  RETURN
+
.*****************************************************************************
.*                              RZGP0000           Called by:                *
.*                      Reset all ZGP variables                              *
.*    Also need to save some variables to send back in the acknowledgement   *
.*    message.                                                               *
.*****************************************************************************
.
RZGP0000  RESET     ZGP001
          RESET     ZGP002
          RESET     ZGP003
          RESET     ZGP004
          RESET     ZGP005
          RESET     ZGP006
          RESET     ZGP007
          RESET     ZGP008
          RESET     ZGP009
          RESET     ZGP010
          RESET     ZGP011
          RESET     ZGP012
          RESET     ZGP013
.
RZGP9999  RETURN
+
.*****************************************************************************
.*                            VMSH0000             Called by:                *
.*      Validate that the mandatory MSH fields are not null or spaces        *
.*****************************************************************************
.
.         Encoding Characters
.
VMSH0000  MOVELPTR  MSH002,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VMSH0500                   * yes - error
          ENDIF
          MATCH     MSH002,SP100                 * no, is it blank ?
          GOTO      VMSH1000 IF NOT EQUAL        * no
.
VMSH0500  DISPLAY   "MSH002 - Encoding characters not present",*R,*N;
          MOVE      ONE,ERORFLAG
.
.         Message Type
.
VMSH1000  MOVELPTR  MSH009,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VMSH1500                   * yes - error
          ENDIF
          MATCH     MSH009,SP100                 * no, is it blank ?
          GOTO      VMSH1500 IF EQUAL            * yes - error
          UNPACK    MSH009,ANS,ANS,ANS,ANS,MESSTYPE
.
          CALL      VTYP0000                     * valid message type ?
          GOTO      VMSH2000
.
VMSH1500  DISPLAY   "MSH009 - Message Type not present",*R,*N;
          MOVE      ONE,ERORFLAG
.
.         Message Control ID
.
VMSH2000  MOVELPTR  MSH010,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VMSH2500                   * yes - error
          ENDIF
          MATCH     MSH010,SP100                 * no, is it blank ?
          GOTO      VMSH3000 IF NOT EQUAL        * no
.
VMSH2500  DISPLAY   "MSH010 - Message Control ID not present",*R,*N;
          MOVE      ONE,ERORFLAG
.
.         Processing Id
.
VMSH3000  MOVELPTR  MSH011,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VMSH3500                   * yes
          ENDIF
          MATCH     MSH011,SP100                 * no, is it blank ?
          GOTO      VMSH4000 IF NOT EQUAL        * no
.
VMSH3500  DISPLAY   "MSH011 - Processing ID not present",*R,*N;
          MOVE      ONE,ERORFLAG
.
.         Version Id
.
VMSH4000  MOVELPTR  MSH012,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VMSH4500                   * yes
          ENDIF
          MATCH     MSH012,SP100                 * no, is it blank ?
          GOTO      VMSH9999 IF NOT EQUAL        * no
.
VMSH4500  DISPLAY   "MSH012 - Version ID not present",*R,*N;
          MOVE      ONE,ERORFLAG
.
VMSH9999  RETURN
+
.*****************************************************************************
.*                            VMRG0000             Called by:                *
.*      Validate that the mandatory MRG fields are not null or spaces        *
.*****************************************************************************
.
VMRG0000  MOVELPTR  MRG001,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VMRG0500                   * yes - error
          ENDIF
          MATCH     MRG001,SP100                 * no, is it blank ?
          GOTO      VMRG9999 IF NOT EQUAL        * no
.
VMRG0500  DISPLAY   "MRG001 - Prior Internal Patient Id not present",*R,*N;
          MOVE      ONE,ERORFLAG
.
VMRG9999  RETURN
+
.*****************************************************************************
.*                            VEVN0000             Called by:                *
.*      Validate that the mandatory EVN fields are not null or spaces        *
.*****************************************************************************
.
.         Recorded Date/Time
.
VEVN0000  MOVELPTR  EVN002,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VEVN0500                   * yes - error
          ENDIF
          MATCH     EVN002,SP100                 * no, is it blank ?
          GOTO      VEVN9999 IF NOT EQUAL        * no
.
VEVN0500  DISPLAY   "EVN002 - Recorded date/time not present",*R,*N;
          MOVE      ONE,ERORFLAG
.
VEVN9999  RETURN
+
.*****************************************************************************
.*                            VPID0000             Called by:                *
.*      Validate that the mandatory PID fields are not null or spaces        *
.*****************************************************************************
.
.         Patient ID (Internal ID)
.
VPID0000  MOVELPTR  PID003,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VPID0500                   * yes - error
          ENDIF
          MATCH     PID003,SP100                 * no, is it blank ?
          GOTO      VPID1000 IF NOT EQUAL        * no
.
VPID0500  DISPLAY   "PID003 - Patient (Internal) ID not present",*R,*N;
          MOVE      ONE,ERORFLAG
.
.         Patient Name
.
VPID1000  MOVELPTR  PID005,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VPID1500                   * yes - error
          ENDIF
          MATCH     PID005,SP100                 * no, is it blank ?
          GOTO      VPID9999 IF NOT EQUAL        * no
.
VPID1500  DISPLAY   "PID005 - Patient Name not present",*R,*N;
          MOVE      ONE,ERORFLAG
.
VPID9999  RETURN
+
.*****************************************************************************
.*                            VNK10000             Called by:                *
.*      Validate that the mandatory NK1 fields are not null or spaces        *
.*****************************************************************************
.
VNK10000  MOVELPTR  NK1001,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VNK10500                   * yes - error
          ENDIF
          MATCH     NK1001,SP100                 * no, is it blank ?
          GOTO      VNK19999 IF NOT EQUAL        * no
.
VNK10500  DISPLAY   "NK1001 - Set ID not present",*R,*N;
          MOVE      ONE,ERORFLAG
.
VNK19999  RETURN
+
.*****************************************************************************
.*                            VPV10000             Called by:                *
.*      Validate that the mandatory PV1 fields are not null or spaces        *
.*****************************************************************************
.
.         Patient Class
.
VPV10000  MOVELPTR  PV1002,FORM3                 * null ?
          IF        FORM3 = 0
            GOTO      VPV10500                   * yes - error
          ENDIF
          MATCH     PV1002,SP100                 * no, is it blank ?
          GOTO      VPV19999 IF NOT EQUAL        * no
.
VPV10500  DISPLAY   "PV1002 - Patient Class not present",*R,*N;
          MOVE      ONE,ERORFLAG
.
VPV19999  RETURN
+
.*****************************************************************************
.*                            VZPT0000             Called by:                *
.*      Validate that the mandatory ZPT fields are not null or spaces        *
.*****************************************************************************
.
VZPT0000  
.
VZPT9999  RETURN
+
.*****************************************************************************
.*                            VZGP0000             Called by:                *
.*      Validate that the mandatory ZGP fields are not null or spaces        *
.*****************************************************************************
.
VZGP0000  
.
VZGP9999  RETURN
+
.*****************************************************************************
.*                                 LMSH0000        Called by:                *
.*                          Load the MSH fields                              *
.*****************************************************************************
.
LMSH0000  BRANCH    FIELDNO,LMSH9999:            * Field Separator 
                            LMSH0002:            * Encoding Characters
                            LMSH0003:            * Sending Application
                            LMSH0004:            * Sending Facility
                            LMSH0005:            * Receiving Application
                            LMSH0006:            * Receiving Facility
                            LMSH0007:            * Date/Time of Message
                            LMSH0008:            * Security
                            LMSH0009:            * Message Type
                            LMSH0010:            * Message Control ID
                            LMSH0011:            * Processing ID
                            LMSH0012:            * Version ID
                            LMSH0013:            * Sequence Number
                            LMSH0014:            * Continuation Pointer
                            LMSH0015:            * Accept Acknowledgement Type
                            LMSH0016:            * Appl. Acknowledgement Type
                            LMSH0017:            * Country Code
                            LMSH0018:            * Character Set
                            LMSH0019             * Principal Language of Message
.
.         Invalid MSH field received, so ignore it
.
          GOTO      LMSH9000
.
. Note: MSH001 is set in GCHR0000
.
.
LMSH0002  APPEND    ANS,MSH002                   * load encoding characters
          GOTO      LMSH9000
.
LMSH0003  APPEND    ANS,MSH003                   * load sending application
          GOTO      LMSH9000
.
LMSH0004  APPEND    ANS,MSH004                   * load sending facility
          GOTO      LMSH9000
.
LMSH0005  APPEND    ANS,MSH005                   * load receiving application
          GOTO      LMSH9000
.
LMSH0006  APPEND    ANS,MSH006                   * load receiving facility
          GOTO      LMSH9000
.
LMSH0007  APPEND    ANS,MSH007                   * load date/time of facility
          GOTO      LMSH9000
.
LMSH0008  APPEND    ANS,MSH008                   * load security
          GOTO      LMSH9000
.
LMSH0009  APPEND    ANS,MSH009                   * load message type
          GOTO      LMSH9000
.
LMSH0010  APPEND    ANS,MSH010                   * load control id
          GOTO      LMSH9000
.
LMSH0011  APPEND    ANS,MSH011                   * load processing id
          GOTO      LMSH9000
.
LMSH0012  APPEND    ANS,MSH012                   * load version id
          GOTO      LMSH9000
.
LMSH0013  APPEND    ANS,MSH013                   * load sequence number
          GOTO      LMSH9000
.
LMSH0014  APPEND    ANS,MSH014                   * load continuation pointer
          GOTO      LMSH9000
.
LMSH0015  APPEND    ANS,MSH015                   * load accept ackn. type
          GOTO      LMSH9000
.
LMSH0016  APPEND    ANS,MSH016                   * load applic. ackn. type
          GOTO      LMSH9000
.
LMSH0017  APPEND    ANS,MSH017                   * load country code
          GOTO      LMSH9000
.
LMSH0018  APPEND    ANS,MSH018                   * load character set
          GOTO      LMSH9000
.
LMSH0019  APPEND    ANS,MSH019                   * load princ. language of mess.
          GOTO      LMSH9000
.
LMSH9000  APPEND    ANS,MESSAGE                  * add char. to message buffer
.
LMSH9999  RETURN
+
.*****************************************************************************
.*                                 LMRG0000        Called by:                *
.*                          Load the MRG fields                              *
.*****************************************************************************
.
LMRG0000  BRANCH    FIELDNO,LMRG0001:            * Prior Patient ID - Internal
                            LMRG0002:            * Prior Alternate Patient Id
                            LMRG0003:            * Prior Patient Account No.
                            LMRG0004:            * Prior Patient Id - External
                            LMRG0005:            * Prior Visit Number
                            LMRG0006:            * Prior Alternate Visit Id
                            LMRG0007             * Prior Patient Name
.
.         Invalid MRG field received, so ignore it
.
          GOTO      LMRG9000
.
LMRG0001  APPEND    ANS,MRG001                   * Prior Patient ID - Internal
          GOTO      LMRG9000
.
LMRG0002  APPEND    ANS,MRG002                   * Prior Alternate Patient ID
          GOTO      LMRG9000
.
LMRG0003  APPEND    ANS,MRG003                   * Prior Patient Account No.
          GOTO      LMRG9000
.
LMRG0004  APPEND    ANS,MRG004                   * Prior Patient ID - External
          GOTO      LMRG9000
.
LMRG0005  APPEND    ANS,MRG005                   * Prior Visit Number
          GOTO      LMRG9000
.
LMRG0006  APPEND    ANS,MRG006                   * Prior Alternate Visit ID
          GOTO      LMRG9000
.
LMRG0007  APPEND    ANS,MRG007                   * Prior Patient Name
          GOTO      LMRG9000
.
LMRG9000  APPEND    ANS,MESSAGE                  * add char. to message buffer
.
LMRG9999  RETURN
+
.*****************************************************************************
.*                                 LEVN0000        Called by:                *
.*                          Load the EVN fields                              *
.*****************************************************************************
.
LEVN0000  BRANCH    FIELDNO,LEVN0001:            * Event Type Code
                            LEVN0002:            * Recorded Date/Time
                            LEVN0003:            * Date/Time Planned Event
                            LEVN0004:            * Event Reason Code
                            LEVN0005:            * Operator Id
                            LEVN0006             * Event Occurred
.
.         Invalid EVN field received, so ignore it
.
          GOTO      LEVN9000
.
LEVN0001  APPEND    ANS,EVN001                   * load event type code
          GOTO      LEVN9000
.
LEVN0002  APPEND    ANS,EVN002                   * load recorded date/time
          GOTO      LEVN9000
.
LEVN0003  APPEND    ANS,EVN003                   * load date/time planned event
          GOTO      LEVN9000
.
LEVN0004  APPEND    ANS,EVN004                   * load event reason code
          GOTO      LEVN9000
.
LEVN0005  APPEND    ANS,EVN005                   * load operator id
          GOTO      LEVN9000
.
LEVN0006  APPEND    ANS,EVN006                   * load event occurred
          GOTO      LEVN9000
.
LEVN9000  APPEND    ANS,MESSAGE                  * add char. to message buffer
.
LEVN9999  RETURN
+
.*****************************************************************************
.*                                 LPID0000        Called by:                *
.*                          Load the PID fields                              *
.*****************************************************************************
.
LPID0000  BRANCH    FIELDNO,LPID0001:            * Set ID - Patient ID
                            LPID0002:            * Patient ID (External)
                            LPID0003:            * Patient ID (Internal)
                            LPID0004:            * Alternate Patient ID
                            LPID0005:            * Patient Name
                            LPID0006:            * Mother's Maiden name
                            LPID0007:            * Date/Time of Birth
                            LPID0008:            * Gender
                            LPID0009:            * Patient Alias
                            LPID0010:            * Race
                            LPID0011:            * Patient Address Information
                            LPID0012:            * County Code
                            LPID0013:            * Contact Information
                            LPID0014:            * Contact Information
                            LPID0015:            * Language Spoken
                            LPID0016:            * Marital Status
                            LPID0017:            * Religion
                            LPID0018:            * Patient Account Number
                            LPID0019:            * SSN Number - Patient
                            LPID0020:            * Driver's License No - Patient
                            LPID0021:            * Mother's Identifier
                            LPID0022:            * Ethnic Group
                            LPID0023:            * Place of Birth
                            LPID0024:            * Multiple Birth Indicator
                            LPID0025:            * Birth Order
                            LPID0026:            * Citizenship
                            LPID0027:            * Veterans Military Status
                            LPID0028:            * Nationality
                            LPID0029:            * Patient Death Date/Time
                            LPID0030             * Patient Death Indicator
.
.         Invalid PID field received, so ignore it
.
          GOTO      LPID9000
.
LPID0001  APPEND    ANS,PID001                   * load set id - patient id
          GOTO      LPID9000
.
LPID0002  APPEND    ANS,PID002                   * load patient id (external)
          GOTO      LPID9000
.
LPID0003  APPEND    ANS,PID003                   * load patient id (internal)
          GOTO      LPID9000
.
LPID0004  APPEND    ANS,PID004                   * load alternate patient id
          GOTO      LPID9000
.
LPID0005  APPEND    ANS,PID005                   * load patient name
          GOTO      LPID9000
.
LPID0006  APPEND    ANS,PID006                   * load mother's maiden name
          GOTO      LPID9000
.
LPID0007  APPEND    ANS,PID007                   * load date/time of birth
          GOTO      LPID9000
.
LPID0008  APPEND    ANS,PID008                   * load gender
          GOTO      LPID9000
.
LPID0009  APPEND    ANS,PID009                   * load patient alias
          GOTO      LPID9000
.
LPID0010  APPEND    ANS,PID010                   * load race
          GOTO      LPID9000
.
LPID0011  APPEND    ANS,PID011                   * load patient address info.
          GOTO      LPID9000
.
LPID0012  APPEND    ANS,PID012                   * load county code
          GOTO      LPID9000
.
LPID0013  APPEND    ANS,PID013                   * load contact information
          GOTO      LPID9000
.
LPID0014  APPEND    ANS,PID014                   * load contact information
          GOTO      LPID9000
.
LPID0015  APPEND    ANS,PID015                   * load language spoken
          GOTO      LPID9000
.
LPID0016  APPEND    ANS,PID016                   * load marital status
          GOTO      LPID9000
.
LPID0017  APPEND    ANS,PID017                   * load religion
          GOTO      LPID9000
.
LPID0018  APPEND    ANS,PID018                   * load patient account no.
          GOTO      LPID9000
.
LPID0019  APPEND    ANS,PID019                   * load SSN number - patient
          GOTO      LPID9000
.
LPID0020  APPEND    ANS,PID020                   * load driver's license no.
          GOTO      LPID9000
.
LPID0021  APPEND    ANS,PID021                   * load mother's identifier
          GOTO      LPID9000
.
LPID0022  APPEND    ANS,PID022                   * load ethnic group
          GOTO      LPID9000
.
LPID0023  APPEND    ANS,PID023                   * load place of birth
          GOTO      LPID9000
.
LPID0024  APPEND    ANS,PID024                   * load multiple birth indicator
          GOTO      LPID9000
.
LPID0025  APPEND    ANS,PID025                   * load birth order
          GOTO      LPID9000
.
LPID0026  APPEND    ANS,PID026                   * load citizenship
          GOTO      LPID9000
.
LPID0027  APPEND    ANS,PID027                   * load veterans military status
          GOTO      LPID9000
.
LPID0028  APPEND    ANS,PID028                   * load nationality
          GOTO      LPID9000
.
LPID0029  APPEND    ANS,PID029                   * load patient death date/time
          GOTO      LPID9000
.
LPID0030  APPEND    ANS,PID030                   * load patient death indicator
          GOTO      LPID9000
.
LPID9000  APPEND    ANS,MESSAGE                  * add char. to message buffer
.
LPID9999  RETURN
+
.*****************************************************************************
.*                                 LNK10000        Called by:                *
.*                          Load the NK1 fields                              *
.*****************************************************************************
.
LNK10000  BRANCH    FIELDNO,LNK10001:            * Set Id
                            LNK10002:            * Name
                            LNK10003:            * Relationship
                            LNK10004:            * Address
                            LNK10005:            * Phone Number
                            LNK10006:            * Business Phone Number
                            LNK10007:            * Contact Role
                            LNK10008:            * Start Date
                            LNK10009:            * End Date
                            LNK10010:            * Next of Kin Job Title
                            LNK10011:            * Next of Kin Job Code/Class
                            LNK10012:            * Next of Kin Employee Number
                            LNK10013:            * Organisation Name
                            LNK10014:            * Marital Status
                            LNK10015:            * Sex
                            LNK10016:            * Date/Time of Birth
                            LNK10017:            * Living Dependency
                            LNK10018:            * Ambulatory Status
                            LNK10019:            * Citizenship
                            LNK10020:            * Primary Language
                            LNK10021:            * Living Arrangement
                            LNK10022:            * Publicity Indicator
                            LNK10023:            * Protection Indicator
                            LNK10024:            * Student Indicator
                            LNK10025:            * Religion
                            LNK10026:            * Mother's Maiden Name
                            LNK10027:            * Nationality
                            LNK10028:            * Ethnic Group
                            LNK10029:            * Contact Reason
                            LNK10030:            * Contact Person's Name
                            LNK10031:            * Contact Person's Telephone #
                            LNK10032:            * Contact Person's Address
                            LNK10033:            * Next of Kin Identifiers
                            LNK10034:            * Job Status
                            LNK10035:            * Race
                            LNK10036:            * Handicap
                            LNK10037             * Contact Person's Soc. Sec. #
.
.         Invalid NK1 field received, so ignore it
.
          GOTO      LNK19000
.
LNK10001  APPEND    ANS,NK1001                   * Set ID
          GOTO      LNK19000
.
LNK10002  APPEND    ANS,NK1002                   * Name
          GOTO      LNK19000
.
LNK10003  APPEND    ANS,NK1003                   * Relationship
          GOTO      LNK19000
.
LNK10004  APPEND    ANS,NK1004                   * Address
          GOTO      LNK19000
.
LNK10005  APPEND    ANS,NK1005                   * Phone Number
          GOTO      LNK19000
.
LNK10006  APPEND    ANS,NK1006                   * Business Phone Number
          GOTO      LNK19000
.
LNK10007  APPEND    ANS,NK1007                   * Contact Role
          GOTO      LNK19000
.
LNK10008  APPEND    ANS,NK1008                   * Start Date
          GOTO      LNK19000
.
LNK10009  APPEND    ANS,NK1009                   * End Date
          GOTO      LNK19000
.
LNK10010  APPEND    ANS,NK1010                   * Next of Kin Job Title
          GOTO      LNK19000
.
LNK10011  APPEND    ANS,NK1011                   * Next of Kin Job Code/Class
          GOTO      LNK19000
.
LNK10012  APPEND    ANS,NK1012                   * Next of Kin Employee Number
          GOTO      LNK19000
.
LNK10013  APPEND    ANS,NK1013                   * Organisation Name
          GOTO      LNK19000
.
LNK10014  APPEND    ANS,NK1014                   * Martial Status
          GOTO      LNK19000
.
LNK10015  APPEND    ANS,NK1015                   * Sex
          GOTO      LNK19000
.
LNK10016  APPEND    ANS,NK1016                   * Date/Time of Birth
          GOTO      LNK19000
.
LNK10017  APPEND    ANS,NK1017                   * Living Dependency
          GOTO      LNK19000
.
LNK10018  APPEND    ANS,NK1018                   * Ambulatory Status
          GOTO      LNK19000
.
LNK10019  APPEND    ANS,NK1019                   * Citizenship
          GOTO      LNK19000
.
LNK10020  APPEND    ANS,NK1020                   * Primary Language
          GOTO      LNK19000
.
LNK10021  APPEND    ANS,NK1021                   * Living Arrangement
          GOTO      LNK19000
.
LNK10022  APPEND    ANS,NK1022                   * Publicity Indicator
          GOTO      LNK19000
.
LNK10023  APPEND    ANS,NK1023                   * Protection Indicator
          GOTO      LNK19000
.
LNK10024  APPEND    ANS,NK1024                   * Student Indicator
          GOTO      LNK19000
.
LNK10025  APPEND    ANS,NK1025                   * Religion
          GOTO      LNK19000
.
LNK10026  APPEND    ANS,NK1026                   * Mother's Maiden Name
          GOTO      LNK19000
.
LNK10027  APPEND    ANS,NK1027                   * Nationality
          GOTO      LNK19000
.
LNK10028  APPEND    ANS,NK1028                   * Ethnic Group
          GOTO      LNK19000
.
LNK10029  APPEND    ANS,NK1029                   * Contact Reason
          GOTO      LNK19000
.
LNK10030  APPEND    ANS,NK1030                   * Contact Person's Name
          GOTO      LNK19000
.
LNK10031  APPEND    ANS,NK1031                   * Contact Person's Telephone #
          GOTO      LNK19000
.
LNK10032  APPEND    ANS,NK1032                   * Contact Person's Address
          GOTO      LNK19000
.
LNK10033  APPEND    ANS,NK1033                   * Next of in Identifiers
          GOTO      LNK19000
.
LNK10034  APPEND    ANS,NK1034                   * Job Status
          GOTO      LNK19000
.
LNK10035  APPEND    ANS,NK1035                   * Race
          GOTO      LNK19000
.
LNK10036  APPEND    ANS,NK1036                   * Handicap
          GOTO      LNK19000
.
LNK10037  APPEND    ANS,NK1037                   * Contact Person's Soc. Sec. #
          GOTO      LNK19000
.
LNK19000  APPEND    ANS,MESSAGE                  * add char. to message buffer
.
LNK19999  RETURN
+
.*****************************************************************************
.*                                 LPV10000        Called by:                *
.*                          Load the PV1 fields                              *
.*****************************************************************************
.
LPV10000  BRANCH    FIELDNO,LPV10001:            * Set ID
                            LPV10002:            * Patient Class
                            LPV10003:            * Assigned Pt. Location
                            LPV10004:            * Admission Type
                            LPV10005:            * Preadmit No.
                            LPV10006:            * Prior Pt. Location
                            LPV10007:            * Attending Doctor
                            LPV10008:            * Referring Doctor
                            LPV10009:            * Consulting Doctor
                            LPV10010:            * Hospital Service
                            LPV10011:            * Temporary Location
                            LPV10012:            * Preadmit Test Indicator
                            LPV10013:            * Readmission Indicator
                            LPV10014:            * Admit Source
                            LPV10015:            * Ambulatory Status
                            LPV10016:            * VIP Indicator
                            LPV10017:            * Admitting Doctor
                            LPV10018:            * Patient Type
                            LPV10019:            * Visit Number
                            LPV10020:            * Financial Class
                            LPV10021:            * Charge Price Indicator
                            LPV10022:            * Courtesy Code
                            LPV10023:            * Credit Rating
                            LPV10024:            * Contract Code
                            LPV10025:            * Contract Effective Date
                            LPV10026:            * Contract Amount
                            LPV10027:            * Contract Period
                            LPV10028:            * Interest Code
                            LPV10029:            * Transfer to Bad Debt Code
                            LPV10030:            * Transfer to Bad Debt Date
                            LPV10031:            * Bad Debt Agency Code
                            LPV10032:            * Bad Debt Transfer Amount
                            LPV10033:            * Bad Debt recovery Amount
                            LPV10034:            * Delete Account Indicator
                            LPV10035:            * Delete Account Date
                            LPV10036:            * Discharge Disposition
                            LPV10037:            * Discharged to Location
                            LPV10038:            * Diet Type
                            LPV10039:            * Servicing Facility
                            LPV10040:            * Bed Status
                            LPV10041:            * Account Status
                            LPV10042:            * Pending Location
                            LPV10043:            * Prior Temporary Location
                            LPV10044:            * Admit Date/Time
                            LPV10045:            * Discharge Date/Time
                            LPV10046:            * Current Patient Balance
                            LPV10047:            * Total Charges
                            LPV10048:            * Total Adjustments
                            LPV10049:            * Total Payments
                            LPV10050:            * Alternate Visit Id
                            LPV10051:            * Visit Indicator
                            LPV10052             * Other Healthcare Provider
.
.         Invalid PV1 field received, so ignore it
.
          GOTO      LPV19000
.
LPV10001  APPEND    ANS,PV1001                   * load set id
          GOTO      LPV19000
.
LPV10002  APPEND    ANS,PV1002                   * load patient class
          GOTO      LPV19000
.
LPV10003  APPEND    ANS,PV1003                   * load assigned pt. location
          GOTO      LPV19000
.
LPV10004  APPEND    ANS,PV1004                   * load admission type
          GOTO      LPV19000
.
LPV10005  APPEND    ANS,PV1005                   * load preadmit no.
          GOTO      LPV19000
.
LPV10006  APPEND    ANS,PV1006                   * load prior pt. location
          GOTO      LPV19000
.
LPV10007  APPEND    ANS,PV1007                   * load attending doctor
          GOTO      LPV19000
.
LPV10008  APPEND    ANS,PV1008                   * load referring doctor
          GOTO      LPV19000
.
LPV10009  APPEND    ANS,PV1009                   * load consulting doctor
          GOTO      LPV19000
.
LPV10010  APPEND    ANS,PV1010                   * load hospital service
          GOTO      LPV19000
.
LPV10011  APPEND    ANS,PV1011                   * load temporary location
          GOTO      LPV19000
.
LPV10012  APPEND    ANS,PV1012                   * load preadmit test indicator
          GOTO      LPV19000
.
LPV10013  APPEND    ANS,PV1013                   * load readmission indicator
          GOTO      LPV19000
.
LPV10014  APPEND    ANS,PV1014                   * load admit source
          GOTO      LPV19000
.
LPV10015  APPEND    ANS,PV1015                   * load ambulatory status
          GOTO      LPV19000
.
LPV10016  APPEND    ANS,PV1016                   * load vip indicator
          GOTO      LPV19000
.
LPV10017  APPEND    ANS,PV1017                   * load admitting doctor
          GOTO      LPV19000
.
LPV10018  APPEND    ANS,PV1018                   * load patient type
          GOTO      LPV19000
.
LPV10019  APPEND    ANS,PV1019                   * load visit number
          GOTO      LPV19000
.
LPV10020  APPEND    ANS,PV1020                   * load financial class
          GOTO      LPV19000
.
LPV10021  APPEND    ANS,PV1021                   * load charge price indicator
          GOTO      LPV19000
.
LPV10022  APPEND    ANS,PV1022                   * load courtesy code
          GOTO      LPV19000
.
LPV10023  APPEND    ANS,PV1023                   * load credit rating
          GOTO      LPV19000
.
LPV10024  APPEND    ANS,PV1024                   * load contract code
          GOTO      LPV19000
.
LPV10025  APPEND    ANS,PV1025                   * load contract eff. date
          GOTO      LPV19000
.
LPV10026  APPEND    ANS,PV1026                   * load contract amount
          GOTO      LPV19000
.
LPV10027  APPEND    ANS,PV1027                   * load contract period
          GOTO      LPV19000
.
LPV10028  APPEND    ANS,PV1028                   * load interest code
          GOTO      LPV19000
.
LPV10029  APPEND    ANS,PV1029                   * load transf. to bad debt code
          GOTO      LPV19000
.
LPV10030  APPEND    ANS,PV1030                   * load transf. to bad debt date
          GOTO      LPV19000
.
LPV10031  APPEND    ANS,PV1031                   * load bad debt agency code
          GOTO      LPV19000
.
LPV10032  APPEND    ANS,PV1032                   * load bad debt transfer amt.
          GOTO      LPV19000
.
LPV10033  APPEND    ANS,PV1033                   * load bad debt recovery amt.
          GOTO      LPV19000
.
LPV10034  APPEND    ANS,PV1034                   * load delete account indicator
          GOTO      LPV19000
.
LPV10035  APPEND    ANS,PV1035                   * load delete account date
          GOTO      LPV19000
.
LPV10036  APPEND    ANS,PV1036                   * load discharge disposition
          GOTO      LPV19000
.
LPV10037  APPEND    ANS,PV1037                   * load discharged to location
          GOTO      LPV19000
.
LPV10038  APPEND    ANS,PV1038                   * load diet type
          GOTO      LPV19000
.
LPV10039  APPEND    ANS,PV1039                   * load servicing facility
          GOTO      LPV19000
.
LPV10040  APPEND    ANS,PV1040                   * load bed status
          GOTO      LPV19000
.
LPV10041  APPEND    ANS,PV1041                   * load account status
          GOTO      LPV19000
.
LPV10042  APPEND    ANS,PV1042                   * load pending location
          GOTO      LPV19000
.
LPV10043  APPEND    ANS,PV1043                   * load prior temp. location
          GOTO      LPV19000
.
LPV10044  APPEND    ANS,PV1044                   * load admit date/time
          GOTO      LPV19000
.
LPV10045  APPEND    ANS,PV1045                   * load discharge date/time
          GOTO      LPV19000
.
LPV10046  APPEND    ANS,PV1046                   * load current pt. balance
          GOTO      LPV19000
.
LPV10047  APPEND    ANS,PV1047                   * load total charges
          GOTO      LPV19000
.
LPV10048  APPEND    ANS,PV1048                   * load total adjustments
          GOTO      LPV19000
.
LPV10049  APPEND    ANS,PV1049                   * load payments
          GOTO      LPV19000
.
LPV10050  APPEND    ANS,PV1050                   * load alternate visit id
          GOTO      LPV19000
.
LPV10051  APPEND    ANS,PV1051                   * load visit indicator
          GOTO      LPV19000
.
LPV10052  APPEND    ANS,PV1052                   * load other healthcare prov.
          GOTO      LPV19000
.
LPV19000  APPEND    ANS,MESSAGE                  * add char. to message buffer
.
LPV19999  RETURN
+
.*****************************************************************************
.*                                 LZPT0000        Called by:                *
.*                          Load the ZPT fields                              *
.*****************************************************************************
.
LZPT0000  BRANCH    FIELDNO,LZPT0001:            * Interpreter
                            LZPT0002:            * Employment Status
                            LZPT0003:            * Medicare Number
                            LZPT0004             * Medicare Expiry Date
.
.         Invalid ZPT field received, so ignore it
.
          GOTO      LZPT9000
.
LZPT0001  APPEND    ANS,ZPT001                   * Interpreter
          GOTO      LZPT9000
.
LZPT0002  APPEND    ANS,ZPT002                   * Employment Status
          GOTO      LZPT9000
.
LZPT0003  APPEND    ANS,ZPT003                   * Medicare Number
          GOTO      LZPT9000
.
LZPT0004  APPEND    ANS,ZPT004                   * Medicare Expiry Date
          GOTO      LZPT9000
.
LZPT9000  APPEND    ANS,MESSAGE                  * add char. to message buffer
.
LZPT9999  RETURN
+
.*****************************************************************************
.*                                 LZGP0000        Called by:                *
.*                          Load the ZGP fields                              *
.*****************************************************************************
.
LZGP0000  BRANCH    FIELDNO,LZGP0001:            * GP code
                            LZGP0002:            * Surname
                            LZGP0003:            * Given Names
                            LZGP0004:            * Middle Name
                            LZGP0005:            * Not used
                            LZGP0006:            * Not used
                            LZGP0007:            * Address Line 1
                            LZGP0008:            * Address Line 2
                            LZGP0009:            * Suburb
                            LZGP0010:            * Postcode
                            LZGP0011:            * State
                            LZGP0012:            * Phone
                            LZGP0013             * Fax
.
.         Invalid ZGP field received, so ignore it
.
          GOTO      LZGP9000
.
LZGP0001  APPEND    ANS,ZGP001                   * GP Code
          GOTO      LZGP9000
.
LZGP0002  APPEND    ANS,ZGP002                   * Surname
          GOTO      LZGP9000
.
LZGP0003  APPEND    ANS,ZGP003                   * Given Name
          GOTO      LZGP9000
.
LZGP0004  APPEND    ANS,ZGP004                   * Middle Name
          GOTO      LZGP9000
.
LZGP0005  APPEND    ANS,ZGP005                   * Not used
          GOTO      LZGP9000
.
LZGP0006  APPEND    ANS,ZGP006                   * Not used
          GOTO      LZGP9000
.
LZGP0007  APPEND    ANS,ZGP007                   * Address Line 1
          GOTO      LZGP9000
.
LZGP0008  APPEND    ANS,ZGP008                   * Address Line 2
          GOTO      LZGP9000
.
LZGP0009  APPEND    ANS,ZGP009                   * Suburb
          GOTO      LZGP9000
.
LZGP0010  APPEND    ANS,ZGP010                   * Postcode
          GOTO      LZGP9000
.
LZGP0011  APPEND    ANS,ZGP011                   * State
          GOTO      LZGP9000
.
LZGP0012  APPEND    ANS,ZGP012                   * Phone
          GOTO      LZGP9000
.
LZGP0013  APPEND    ANS,ZGP013                   * Fax
          GOTO      LZGP9000
.
LZGP9000  APPEND    ANS,MESSAGE                  * add char. to message buffer
.
LZGP9999  RETURN
+
.*****************************************************************************
.*                                  GSEG0000       Called by:                *
.*                        Get the next segment code                          *
.* This routine is called when we are expecting the next segment.  It will   *
.* get the next 3 characters in the message and use this as the segment id.  *
.*                                                                           *
.* Returns: EXIT   0 = segment id read                                       *
.*                 1 = connection timed out                                  *
.*                 2 = connection lost                                       *
.*                 3 = start of block found                                  *
.*                 4 = end of block found                                    *
.*                 5 = end of segment found (CR)                             *
.*          SEGMENT = 3 character HL7 segment id (eg MSH)                    *
.*****************************************************************************
.
GSEG0000  CLEAR     SEGMENT
          MOVE      ZERO,COUNTER                 * initialise character counter
          WHILE     COUNTER < 3
            BUMP      TMPSTRNG                   * move to next character
            IF        @EOS
              CALL      GTSTR000                 * get next 127 chars (or less)
              BRANCH    EXIT,GSEG9100:           * timeout
                             GSEG9200            * connection lost
            ENDIF
            MOVE      TMPSTRNG,ANS               * save character
.
            MATCH     CRETURN,ANS                * carriage return found ?
            GOTO      GSEG9500 IF EQUAL          * yes - ignore message
.
            MATCH     ENDBLOCK,ANS               * end of block found ?
            GOTO      GSEG9400 IF EQUAL          * yes - ignore message
.
            MATCH     STRTBLOK,ANS               * start of block found ?
            GOTO      GSEG9300 IF EQUAL          * yes - ignore message
.
            APPEND    ANS,SEGMENT                * load segment id
            ADD       ONE,COUNTER                * increment counter
          DO
.
          RESET     SEGMENT
          APPEND    SEGMENT,MESSAGE              * add seg. to full message
.
          MOVE      ZERO,EXIT
          GOTO      GSEG9999
.
GSEG9100  MOVE      ONE,EXIT
          GOTO      GSEG9999
.
GSEG9200  MOVE      TWO,EXIT
          GOTO      GSEG9999
.
GSEG9300  MOVE      THREE,EXIT
          GOTO      GSEG9999
.
GSEG9400  MOVE      FOUR,EXIT
          GOTO      GSEG9999
.
GSEG9500  MOVE      FIVE,EXIT
.
GSEG9999  RETURN
+
.*****************************************************************************
.*                          GCHR0000               Called by:                *
.*                 Get the next character in the message string              *
.* Returns:  EXIT  0 = ok to continue                                        *
.*                 1 = connection timeout                                    *
.*                 2 = connection lost                                       *
.*                 3 = start of block                                        *
.*                 4 = end of block                                          *
.*                 5 = end of segment (CR)                                   *
.*                 6 = field separator blank (MSH-MS001 only)                *
.*           ANS  - character just read in                                   *
.*****************************************************************************
.
GCHR0000  BUMP      TMPSTRNG                     * move to next field
          IF        @EOS
            CALL      GTSTR000                   * get next 127 chars (or less)
            BRANCH    EXIT,GCHR9100:             * timeout
                           GCHR9200              * connection lost
          ENDIF
.
          MOVE      TMPSTRNG,ANS                 * save character
.
.         If this is the first field of the MSH segment, then we need to
.         load the field separator.
.
          MATCH     MSHSEGMT,SEGMENT             * MSH segment & first field?
          IF        @EQUAL
            IF        FIELDNO = 0
              MATCH     SP1,ANS                  * yes - blank separator ?
              GOTO      GCHR9600 IF EQUAL        * yes - error
.
              ADD       ONE,FIELDNO              * increment seg. field number
              MOVE      ANS,MSH001               * no - load field separator
            ENDIF
          ENDIF
.
.         Check if this is a field separator and if so, save to the full
.         message buffer (for message display later), increment the segment
.         field number, then get the next character.
.
          MATCH     MSH001,ANS                   * field separator found ?
          IF        @EQUAL
            ADD       ONE,FIELDNO                * increment seg. field number
            APPEND    ANS,MESSAGE                * add to full message buffer
            GOTO      GCHR0000                   * get next field
          ENDIF
.
.         Check if end of segment found
.
          MATCH     CRETURN,ANS                  * carriage return found ?
          IF        @EQUAL
            APPEND    CRETURN,MESSAGE            * yes
            GOTO      GCHR9500
          ENDIF
.
.         Check if end of block (message) found
.
          MATCH     ENDBLOCK,ANS                 * end of block found ?
          GOTO      GCHR9400 IF EQUAL            * yes
.
.         Check if start of block found
.
          MATCH     STRTBLOK,ANS                 * start of block found ?
          GOTO      GCHR9300 IF EQUAL            * yes - ignore message
.
          MOVE      ZERO,EXIT
          GOTO      GCHR9999
.
GCHR9100  MOVE      ONE,EXIT
          GOTO      GCHR9999
.
GCHR9200  MOVE      TWO,EXIT
          GOTO      GCHR9999
.
GCHR9300  MOVE      THREE,EXIT
          GOTO      GCHR9999
.
GCHR9400  MOVE      FOUR,EXIT
          GOTO      GCHR9999
.
GCHR9500  MOVE      FIVE,EXIT
          GOTO      GCHR9999
.
GCHR9600  DISPLAY   "MSH001 - Field Separator not set",*R,*N;
          MOVE      SIX,EXIT
.
GCHR9999  RETURN
+
.*****************************************************************************
.*                       VTYP0000                  Called by:                *
.*    Check if the message type (from MSH009) is one we are able to process  *
.* Requires:  MESSTYPE - 3 character message type (eg A01)                   *
.*****************************************************************************
.
VTYP0000  MOVE      ZERO,COUNTER                 * initialise counter
          MOVE      ZERO,CISMNUMB                * initialse message no.
          WHILE     COUNTER < 34
            ADD       ONE,COUNTER                * increment counter
            MATCH     MESSTYPE,MTYPARRY[COUNTER]
            IF        @EQUAL
              MOVE      COUNTER,CISMNUMB
              GOTO      VTYP9999
            ENDIF
          DO
.
          DISPLAY   "MSH009 - Message Type not available",*R,*N;
          MOVE      ONE,ERORFLAG
.
VTYP9999  RETURN
+
.*****************************************************************************
.*                              VSEG0000           Called by:                *
.*   Validate that the segment found is relevant, and in the correct         *
.*   sequence, for the message type.                                         *
.* Requires:  SEGMENT - 3 character segment id                               *
.* Returns:   EXIT    0 = Valid segment                                      *
.*                    1 = Invalid segment                                    *
.*            SEGNUMBR - Segment number                                      *
.*                    0 = unknown segment                                    *
.*                    1 = MSH                                                *
.*                    2 = EVN                                                *
.*                    3 = PID                                                *
.*                    4 = PV1                                                *
.*                    5 = MRG                                                *
.*                    6 = ZPT                                                *
.*                    7 = NK1                                                *
.*                    8 = ZGP                                                *
.*****************************************************************************
.
VSEG0000  MATCH     MSHSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      ONE,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     EVNSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      TWO,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     PIDSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      THREE,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     PV1SEGMT,SEGMENT
          IF        @EQUAL
            MOVE      FOUR,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     MRGSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      FIVE,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     ZPTSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      SIX,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     NK1SEGMT,SEGMENT
          IF        @EQUAL
            MOVE      SEVEN,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MATCH     ZGPSEGMT,SEGMENT
          IF        @EQUAL
            MOVE      EIGHT,SEGNUMBR
            GOTO      VSEG9000
          ENDIF
.
          MOVE      ZERO,SEGNUMBR
          MOVE      ONE,EXIT
          GOTO      VSEG9999
.
VSEG9000  MOVE      ZERO,EXIT
.
VSEG9999  RETURN
+
. =========================================================================
.         I/O Includes
. =========================================================================
.
          INC       STD002IO
