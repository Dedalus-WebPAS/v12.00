.******************************************************************************
.* System         : Patient Billing                                           *
.* Program        : IBAADT22.PBL                                              *
.* Name           : Health Fund EDI Account Extract                           *
.******************************************************************************
.* Date           : 21/04/1998                                                *
.* Author         : Greg Horvat                                               *
.* Function       : Extract EDI details for the APHA (Version 2.1 & 2.2)      *
.* Modifications  :                                                           *
.*                                                                            *
.******************************************************************************
.* V12.00.02 14/07/2025  Thanh T         TSK 0961623                          *
.*           Added OPEN PATHSPA1 index to fix issue with Read attempt on      *
.*           closed file                                                      *
.* V12.00.01 22/05/2025 Thanh T         TSK 0955096                           *
.*           Changed for alphanumeric visit number                            *
.******************************************************************************
.*        V11.01.01 17/02/2021  Tracey Nguyen  TSK 0888639                    *
.*                  FD changed - patmmbsf.PATMMBS1 from KEY10 to KEY11        *
.******************************************************************************
.*        V10.14.01 18/02/2019  Ebon Clements  TSK 0829856                    *
.*                  Recompiled for GETEFDRG - Contract from effective date    *
.*        V10.08.01 26/08/2016  Don Nguyen      TSK 0312570                   *
.*                  Recompiled for GETDRG (GTDRG000)                          *
.*                  Added PMSEDGFD/IO and GETEFDRG                            *
.*        V10.05.01 18/09/2014  Davin           CAR 304204                    *
.*                  Recompiled for GETDRG - get drg vers based on disch date  *
.*        V10.03.01 19/12/2012 Patrick Adair    CAR 261630                    *
.*                  Removed port number from temp file name                   *
.*        V10.02.02 28/10/2011  Mike Laming    CAR 250267                     *
.*                  Correct vars for changed length of PTICUMEC at WDMG0000   *
.*        V10.02.01 28/03/2011  Mike Laming   CAR 240107                      *
.*                  Mods to PATECDaf & PATECOaf variables & Keys - file change*
.*        V10.01.01 17/12/2010  Mike Laming   CAR 233046                      *
.*                  Mods to Misc.Charges PATMCHFD - Key change, logic changes *
.*                  24/01/2011  J.Tan         CAR 233200                      *
.*                  Replaced PTCNHCPB with PTCNHCCC                           *
.*        V10.00.01 30/04/2010 J.Tan         CAR 220887                       *
.*                  Mods checking for Active/Inactive of Misc.charge          *
.*        V9.10.01  23/05/2008 J.Tan      CAR 169149                          *
.*                  Added Date and Time invoice created/updated               *
.*        V9.09.01  22/11/2007  Peter Vela   CAR 132624                       *
.*                  Recompiled for PATCHCFD                                   *
.*        V9.08.02  04/05/2007  Mike Laming  CAR 137125 HDP 2007 DRG 5.2      *
.*                  Mods to PATDGWFD - Add field PTDWDRGV (add to Keys)       *
.*        V9.08.01  15/03/2007  J.Tan          CAR 136149                     *
.*                  Mods to use default claim code from system parameter      *
.*        V9.03.01  16/09/2003  Lina Vo        CAR 40497                      *
.*                  Changed index and read of patmchgf to include effective   *
.*                  date.                                                     *
.*        V9.02.07  13/05/2002  Steve Downing  SRF 17414                      *
.*                  Fixed formatting of numeric totals when removing decimals *
.*        V9.02.06  26/03/2002  Greg Horvat      SRF 16248 Rebound            *
.*                  Stopped the program from writing SVB segment headers      *
.*                  when there were no casemix details for the patient        *
.*        V9.02.05  15/03/2002  Steve Downing  SRF 16270                      *
.*                  Fixed Service Code Type for DRG & CMBS patients           *
.*        V9.02.04  30/01/2002  Steve Downing                                 *
.*                  Mods to only create EXTFILE1 when being written to        *
.*        V9.02.03  06/11/2001  Tonii                                         *
.*                  Removed Episode flag for casemix funding                  *
.*        V9.02.02  01/11/2001  Greg Horvat                                   *
.*                  Recompiled for PATGILOS - Added xtra option to the        *
.*                  parameter PTCNDSCI                                        *
.*        V9.02.01  20/09/2001  Dean Cramer                                   *
.*                  Make so does not crash with unopened file EXTFILE1.       *
.*        V5.10.B01 26/02/2001  Jill Habasque                                 *
.*                  Mods for ABWGHT - changed to DIM 6                        *
.*        V5.09.B03 09/02/2001  Greg Horvat      SRF 8390                     *
.*                  - Changed to extract the DRG code & the DRG version no    *
.*                  - Recompiled for GETDRG - Changed to return the DRG ver   *
.*        V5.09.B02 02/02/2001  J.Tan                                         *
.*                  Mods for WEB                                              *
.*        V5.08.07  02/11/2000  Dean Cramer      SRF 6909                     *
.*                  Recompiled for GETDRG                                     *
.*                  Clear DRG & MDC code variables so previously read codes   *
.*                  are not returned when none are detected by the get process*
.*                  Also extract these codes from the discharge file for use  *
.*                  as default values.                                        *
.*        V5.08.06  25/10/2000  Dean Cramer   SRF 6710                        *
.*                  Recomplied for PATFNDDS via PATFNDKY                      *
.*                  Changed for health fund table code size increase to       *
.*                  8 characters                                              *
.*        V5.08.05  25.10.2000 J.Tan                                          *
.*                  Recompiled for WEB Report Scheduler                       *
.*        V5.08.04  15/09/2000  Jill Habasque                                 *
.*                  Changed to use GETDRG to get drg code                     *
.*        V5.08.03  31/08/2000  Tonii                                         *
.*                  Mods to display error message if psex is not M,F or U     *
.*        V5.08.02  28/08/2000  Tonii                                         *
.*                  Mods to accept Unknown as valid patient sex description   *
.*        V5.08.01  16/08/2000  Caleb Sharman                                 *
.*                  Changed Health Fund variables to be 8 chars               *
.*        V5.08.00  06/07/2000  Greg Horvat                                   *
.*                  Copied from release 6.07 version V6.07.02                 *
.*                                                                            *
.******************************************************************************
+
          INC       STD001FD
          INC       PATCALAG/INC            * Calculate age include
          INC       PATDHEAD/INC            * Varaibles for PATHEAD
.
          INC       OPRDEAFD/INC            * Operation detail file
          INC       PAT3MIFD/INC            * ICD9 mapping file
          INC       PATCMPFD/INC            * Complex mapping file
          INC       PATCODFD/INC            * Codes file
          INC       PATCONFD/INC            * Control file
          INC       PATCHCFD/INC            * Code changes file
          INC       PATDGWFD/INC            * DTR file
          INC       PATDSCFD/INC            * Disch file
          INC       PATDTRFD/INC            * DTR file
          INC       PATEBHFD/INC            * EDI batch header file
          INC       PATEBIFD/INC            * EDI batch invoice file
          INC       PATECDFD/INC            * Patient episode disease file
          INC       PATECOFD/INC            * Patient episode operation file
          INC       PATEDAFD/INC            * EDI audit file
          INC       PATFN1FD/INC            * Health fund file
          INC       PATHGPFD/INC            * Health fund group file
          INC       PATICDFD/INC            * ICD disease file
          INC       PATICOFD/INC            * ICD operation file
          INC       PATICUFD/INC            * ICU file
          INC       PATINVFD/INC            * Invoice file
          INC       PATMA1FD/INC            * Master file
          INC       PATCFAFD/INC
          INC       PATFX1FD/INC
          INC       PATMCHFD/INC            * Miscellaneous charges file
          INC       PATMI1FD/INC            * Admin file
          INC       PATMMBFD/INC            * Patient MBS file
          INC       PATPGRFD/INC            * patient grouper file
          INC       PATTRNFD/INC            * Transfer file
          INC       PATWC1FD/INC            * WCO file
          INC       PATWMAFD/INC            * TAC file
          INC       PATWVEFD/INC            * DVA file
          INC       PMSVX1FD/INC
          INC       PATHSPFD/INC
          INC       IBASEQFD/INC                 * Sequential Numbers File
          INC       TFILEVAR/INC                 * Generate Temp File Name
          INC       WEBERRFD/INC                 * Web Server Error Logging
          INC       PMSEDGFD/INC       * Effective DRG Dates
.
. ----- Tempfile variables -----
.
EXTFILE1  FILE      ASCII,FIXED=256
.
TEMP1     IFILE     SQL,FIXED=18, KEY="U1-8"
TEMP2     IFILE     SQL,FIXED=18, KEY="U17-17,9-16,1-8"
FILELIN1  INIT      " 18 U1-8 U17-17,9-16,1-8"
.
.Name     Type   Length   Physical   Start   Description
.----     ----   ------   --------   -----   -----------
INVNO     DIM       8         8        1     Invoice no
DADMINO   DIM       8         8        9     Admin no
DTERRFLG  DIM       1         1        17    Tempfile error flag
.
.End of Record                         18
.
. ----- Program variables -----
.
ACCSQCNT  FORM      5                       * Accom sequence count
ADMINO    DIM       8                       * Admin no
.
BJDAY     FORM      3                       * For CALCAGE
.
CALDAYS   FORM      4                       * For NHOSPDAY
CDYSDAYS  FORM      6                       * For CALCDAYS
CDYSFDTE  DIM       8                       * For CALCDAYS
CDYSTDTE  DIM       8                       * For CALCDAYS
CDYSYEAR  FORM      2                       * For CALCDAYS
CJDAY     FORM      3                       * For CALCAGE
CLMDESC   DIM       30                      * Claim type description
CLMINDC   DIM       1                       * Claim type indicator
CLMTYPE   DIM       6                       * Claim type
CODCNT    FORM      2
CODE      DIM       2                       * For PATCODKY
CMPCNT    FORM      1
CURRDATE   DIM       8                       * Current date (ccyymmdd)
.
DDRGCODE  DIM       4
DMDCCODE  DIM       4
DISARY    DIM       7[20]                   * Disease array
DRGVER    DIM       3
.
ENDDTE8   DIM       8                       * End date (ccyymmdd)
ENDTME    DIM       5                       * End time (hh:mm)
ERRCT     FORM      5                       * Error counter
ERRFLG    FORM      1                       * Error flag
ERRMSG    DIM       60                      * Error message
EXTFNAME  DIM       127                     * Extract file name
.
FINFLG    FORM      1                       * Finish flag
FNAMCODE  DIM       6                       * Filename for extract
FNAMEA    DIM       8
FORM5     FORM      5
FORM8P2   FORM      8.2
FORM9     FORM      9
FROMDATE  DIM       8                       * From date for NHOSPDAY
.
GRPCODE   DIM       6                       * Health fund group code
GRPDESC   DIM       30                      * Health fund group description
.
FNDCODE   DIM       6                       * Health fund code
FNDDESC   DIM       30                      * Health fund description
.
IBCNMHOS  FORM      1
ICUFLG    FORM      1                       * ICU flag
INVFRDTE  DIM       8                       * Invoice from date
INVAMTCT  FORM      7.2                     * Invoice amount counter
INVRECCT  FORM      5                       * Invoice record counter
INVTODTE  DIM       8                       * Invoice to date
.
KEY1A     DIM       1
KEY1B     DIM       1
KEY2A     DIM       2
KEY11A    DIM       11
KEY21A    DIM       21
KEY26A    DIM       26
.
LOFSTAY   FORM      1                       * Intended LOS
MAPFLG    FORM      1                       * Map flag
.
NOINVDYS  DIM       4                       * No of invoice days
NBRDAYS   FORM      4                       * No of days in hospital
.
OPRARY    DIM       7[20]                   * Operation array
OPRFLG    FORM      1                       * OPR flag
.
REDCT     FORM      5                       * Read counter
.
SAVADMIN  DIM       8                       * Save the admin no
SAVINVNO  DIM       8                       * Save the invoice no
SAVINVN2  DIM       8                       * Save the invoice no 2
SAVKEY10  DIM       10
SAVKEY30  DIM       30
STRTDTE8  DIM       8                       * Start date (ccyymmdd)
STRTTME   DIM       5                       * Start time (hh:mm)
.
TERRFLG   FORM      1                       * Tempfile error flag
TODATE    DIM       8                       * To date for NHOSPDAY
TOTRECCT  FORM      5                       * Total record counter
TOTAMTCT  FORM      7.2                     * Total amount counter
.
VALDFLG   FORM      1                       * Validation flag
.
WARCT     FORM      5                       * Warning counter
WRTCT     FORM      5                       * Write counter
WDATE1    DIM       8                       * For NHOSPDAY
WDATE2    DIM       8                       * For NHOSPDAY
.
CFPAYCOD  DIM       3        * 3M Codefinder PAY Code
.
.
. ----- Program constants -----
.
CATADN    INIT      "ADN"
CATAM     INIT      "AM"
CATAS     INIT      "AS"
CATCCU    INIT      "CCU"
CATD      INIT      "D "
CATD1     INIT      "D1"
CATD2     INIT      "D2"
CATD3     INIT      "D3"
CATD4     INIT      "D4"
CATDD     INIT      "DD"
CATEC     INIT      "EC"
CATHDU    INIT      "HDU"
CATICU    INIT      "ICU"
CATME     INIT      "ME"
CATNCU    INIT      "NCU"
CATNH     INIT      "NH"
CATOB     INIT      "OB"
CATOT     INIT      "OT"
CATPCU    INIT      "PCU"
CATPS     INIT      "PS"
CATRE     INIT      "RE"
CATSCN    INIT      "SCU"
CATSU     INIT      "SU"
CATU1     INIT      "U1"
CATU2     INIT      "U2"
CATU3     INIT      "U3"
CATU4     INIT      "U4"
CATU5     INIT      "U5"
CATVI     INIT      "VI"
.
TXT       INIT      ".txt"
.
ZED30     INIT      "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
ZERO2     INIT      "00"
ZERO4     INIT      "0000"
ZERO5     INIT      "00000"
ZERO6     INIT      "000000"
ZERO9     INIT      "000000000"
ZERO12    INIT      "000000000000"
.
TESTFLG   FORM      "0"                     * Test flag
.                                               0 - Normal EDI format
.                                               1 - New line for each segment
.
PRGID     INIT      "IBAADT22"
PRGNAM    INIT      "Health Fund EDI Extract"
VERSION   INIT      "V12.00.02"
+
.******************************************************************************
.*                                   ML0000                                   *
.*                                 Main Module                                *
.******************************************************************************
ML0000    CALL      INIT0000                * Initialise variables & open files
ML1000    CALL      OPTN0000                * Choose main option
          BRANCH    EXIT,ML9999
          BRANCH    COPTION,ML2000,ML4000
.
ML2000    CALL      HFGP0000                * Keyin the health fund group
          BRANCH    EXIT,ML1000,ML1000
.
ML3000    CALL      HFCD0000                * Keyin the health fund
          BRANCH    EXIT,ML2000,ML1000
          GOTO      ML5000
.
ML4000    CALL      CLTY0000                * Keyin the claim type
          BRANCH    EXIT,ML1000
.
ML5000    CALL      DATE0000                * Keyin the invoice date range
          BRANCH    EXIT,ML8000
.
          CALL      CONTQST                 * Ok to Continue (Y/N/C) ?
          BRANCH    CEXIT,ML6000,ML5000,ML1000
          GOTO      ML1000
.
ML6000    CALL      OPEN0000                * Open the tempfile
          CALL      LOAD0000                * Load the tempfile
          CALL      HEAD0000                * Print report header
          CALL      VALD0000                * Validate the tempfile
          CALL      QUES0000                * Extract question
          BRANCH    EXIT,ML7000
.
          CALL      WRIT0000                * Write to the files
ML7000    CALL      TAIL0000                * Print report tail
          CALL      KILL0000                * Delete the tempfile
          GOTO      ML1000
.
ML8000    BRANCH    COPTION,ML3000
          GOTO      ML4000
.
ML9999    CHAIN     PGM
+
.******************************************************************************
.*                                  INIT0000              Called by: ML0000   *
.*                       Initialise Variable & Open Files                     *
.******************************************************************************
INIT0000  CALL      DISPHEAD                * Display screen heading
          CALL      IBACLOCK
          PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
.
          DISPLAY   *P56:24,"Opening controlf"
          OPEN      CONTROLF,"controlf"
.
          DISPLAY   *P64:24,"patcodes"
          OPEN      PATCODE1,"patcodes"
.
          DISPLAY   *P64:24,"patchcof"
          OPEN      PATCHCO1,"patchcof"
.
          DISPLAY   *P64:24,"patdgwaf"
          OPEN      PATDGWA1,"patdgwaf"
.
          DISPLAY   *P64:24,"patdschf"
          OPEN      PATDSCH1,"patdschf"
.
          DISPLAY   *P64:24,"patdtraf"
          OPEN      PATDTRA3,"patdtraf"
.
          DISPLAY   *P64:24,"patebhaf"
          OPEN      PATEBHA1,"patebhaf"
.
          DISPLAY   *P64:24,"patebiaf"
          OPEN      PATEBIA1,"patebiaf"
.
          DISPLAY   *P64:24,"patecdaf"
          OPEN      PATECDA2,"patecdaf"
.
          DISPLAY   *P64:24,"patecoaf"
          OPEN      PATECOA2,"patecoaf"
.
          DISPLAY   *P64:24,"patfn1af"
          OPEN      PATFN1A1,"patfn1af"
.
          DISPLAY   *P64:24,"pathgrpf"
          OPEN      PATHGRP1,"pathgrpf"
.
          DISPLAY   *P64:24,"pati10df"
          OPEN      PATI10D1,"pati10df"
.
          DISPLAY   *P64:24,"pati10of"
          OPEN      PATI10O1,"pati10of"
.
          DISPLAY   *P64:24,"paticddf"
          OPEN      PATICDD1,"paticddf"
.
          DISPLAY   *P64:24,"paticdof"
          OPEN      PATICDO1,"paticdof"
.
          DISPLAY   *P64:24,"paticuaf"
          OPEN      PATICUA1,"paticuaf"
.
          DISPLAY   *P64:24,"patinvrf"
          OPEN      PATINVR1,"patinvrf"
          OPEN      PATINVR2,"patinvrf"
.
          DISPLAY   *P64:24,"patma1af"
          OPEN      PATMA1A1,"patma1af"
.
          DISPLAY   *P64:24,"patmchgf"
          OPEN      PATMCHG1,"patmchgf"
.
          DISPLAY   *P64:24,"patmi1af"
          OPEN      PATMI1A1,"patmi1af"
.
          DISPLAY   *P64:24,"patmmbsf"
          OPEN      PATMMBS1,"patmmbsf"
.
          DISPLAY   *P64:24,"patmx1af"
          OPEN      PATMX1A1,"patmx1af"
.
          DISPLAY   *P64:24,"pattranf"
          OPEN      PATTRAN2,"pattranf"
.
          DISPLAY   *P64:24,"patwc1af"
          OPEN      PATWC1A1,"patwc1af"
.
          DISPLAY   *P64:24,"patwmabf"
          OPEN      PATWMAB1,"patwmabf"
.
          DISPLAY   *P64:24,"patwvetf"
          OPEN      PATWVET1,"patwvetf"
.
          DISPLAY   *P64:24,"pmsvx1af"
          OPEN      PMSVX1A1,"pmsvx1af"
.
          DISPLAY   *P64:24,"pathspaf"
          OPEN      PATHSPA1,"pathspaf"
.
          READ      CONTROLF,ZERO;*43,IBCNMHOS
          READ      CONTROLF,TEN;*79,CAPPRVNO,*224,CAUDX
          READ      CONTROLF,TWENTY;*193,PTCNDCLM
          READ      CONTROLF,TWENTY1;*45,PTCNDRSM
          READ      CONTROLF,SEVENTY7;*220,PTCNEDRG
          READ      CONTROLF,SEVENTY9;*82,PTCNDSCI
          READ      CONTROLF,EIGHTY8;*59,PTCNI10D
          READ      CONTROLF,NINTY8;*165,PTCNAUED
          READ      CONTROLF,HUND05;*158,PTCNDGPV                     *I-137125
          READ      CONTROLF,HUND10;*228,PTCNHCCC
.
          IF        CAUDX<>1
            DISPLAY   *P64:24,"patedaaf"
            OPEN      PATEDAA1,"patedaaf"
          ENDIF
.
          DISPLAY   *P64:24,"oprdetaf";
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      OPRDETA2,"oprdetaf"
          TRAPCLR   IO
          MOVE      OVRCD,OPRFLG            * OPR flag
.
          DISPLAY   *P64:24,"pat3miaf";
          MOVE      ZERO,OVRCD
          TRAP      OVERCOND IF IO
          OPEN      PAT3MIA1,"pat3miaf"
          TRAPCLR   IO
          MOVE      OVRCD,MAPFLG            * Map flag
.
          PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
          CLOCK     TIME,CTIMEIS
          MOVE      ONE,CNEWDS
.
INIT9000  MOVE      ZERO,EXIT
INIT9999  RETURN
+
.******************************************************************************
.*                                  OPTN0000              Called by: ML0000   *
.*                                Select Option                               *
.******************************************************************************
OPTN0000  MOVE      ZERO,EXIT
          MOVE      ZERO,OPTION
          HLINE     *G37,2,52,80
          DISPLAY   *P1:3,*EF:
                    *P1:4,*V2LON,"0",*HOFF," = Exit":
                    *P1:5,*V2LON,"1",*HOFF," = Extract ICD9 codes (V2.1)":
                    *P1:6,*V2LON,"2",*HOFF," = Extract ICD9 codes (V2.2)":
                    *P1:7,*V2LON,"3",*HOFF," = Extract ICD10 codes (V2.2)":
                    *P1:9,"Select Option : ";
.
OPTN1000  KEYIN     *P17:9,*V2LON,*DV,UNDLN2,*P17:9,OPTION;
.
          COMPARE   ZERO,OPTION
          GOTO      OPTN9500 IF EQUAL
.
          BRANCH    OPTION,OPTN2000,OPTN3000,OPTN4000
.
          BEEP
          GOTO      OPTN1000
.
OPTN2000  DISPLAY   *P52:2,*V2LON,"- ICD9,  V2.1 ";
          MOVE      "- ICD9, V2.1",CPHDROPT
          GOTO      OPTN5000
.
OPTN3000  DISPLAY   *P52:2,*V2LON,"- ICD9,  V2.2 ";
          MOVE      "- ICD9, V2.2",CPHDROPT
          GOTO      OPTN5000
.
OPTN4000  DISPLAY   *P52:2,*V2LON,"- ICD10, V2.2 ";
          MOVE      "- ICD10, V2.2",CPHDROPT
.
OPTN5000  MOVE      ZERO,COPTION
          DISPLAY   *P1:3,*EF:
                    *P1:4,*V2LON,"0",*HOFF," = Exit":
                    *P1:5,*V2LON,"1",*HOFF," = By Health Fund Group Sequence":
                    *P1:6,*V2LON,"2",*HOFF," = By Claim Type Sequence":
                    *P1:8,"Select Option : ";
OPTN6000  KEYIN     *P17:8,*V2LON,*DV,UNDLN2,*P17:8,COPTION;
.
          COMPARE   ZERO,COPTION
          GOTO      OPTN0000 IF EQUAL
.
          BRANCH    COPTION,OPTN7000,OPTN8000
.
          BEEP
          GOTO      OPTN6000
.
OPTN7000  DISPLAY   *P65:2,*V2LON,", By H/F Group ";
          GOTO      OPTN9000
.
OPTN8000  DISPLAY   *P65:2,*V2LON,", By Claim Type ";
.
OPTN9000  MOVE      ZERO,EXIT
          GOTO      OPTN9999
.
OPTN9500  MOVE      ONE,EXIT
OPTN9999  RETURN
+
.******************************************************************************
.*                                  HFGP0000              Called by: ML0000   *
.*                         Keyin The Health Fund Group                        *
.******************************************************************************
HFGP0000  MOVE      "21",ECOL
          MOVE      "10",EVERT
          MOVE      SP6,CKYIDEF6
          MOVE      ZERO,CKYIMAND
.
HFGP1000  DISPLAY   *P1:EVERT,"Health Fund Group :",*EF;
          CALL      PATHGPKY                * Keyin a health fund group
          BRANCH    EXIT,HFGP5000,HFGP9100,HFGP9200
.                        Spaces   Nothing  Exit
.
          MOVE      PTHGCODE,GRPCODE
          MOVE      PTHGDESC,GRPDESC
          DISPLAY   *P31:EVERT,*EL,PTHGDESC;
.
. ----- Check to see if this health fund group is part of a health fund -----
.
          PACK      KEY14,SP20
          CALL      RDSFUND1                * Position on & read a health
HFGP2000  CALL      RDKFUND1                  fund file record
          BRANCH    OVRCD,HFGP4000
.
          MATCH     "0000    ",HFTABL
          GOTO      HFGP3000 IF NOT EQUAL   * Only want 1st record for HF
.
          MATCH     GRPCODE,PTHFHGRP
          GOTO      HFGP9000 IF EQUAL       * Correct health fund group found
.
HFGP3000  PACK      KEY14,HCODE,ZED30
          CALL      RDSFUND1                * Position on a health fund file rec
          GOTO      HFGP2000
.
HFGP4000  DISPLAY   *P1:24,*EL,*B,"No health funds set up for this health ":
                    "fund group.  ";
          CALL      HITENTER
.
          MATCH     "IBARSH99",PGM
          GOTO      HFGP9999 IF EQUAL
          GOTO      HFGP1000
.
HFGP5000  MOVE      SP6,GRPCODE
          MOVE      SP30,GRPDESC
          DISPLAY   *P31:EVERT,*EL;
.
HFGP9000  MOVE      ZERO,EXIT
          GOTO      HFGP9999
.
HFGP9100  MOVE      ONE,EXIT
          GOTO      HFGP9999
.
HFGP9200  MOVE      TWO,EXIT
HFGP9999  RETURN
+
.******************************************************************************
.*                                  HFCD0000              Called by: ML0000   *
.*                            Keyin The Health Fund                           *
.******************************************************************************
HFCD0000  MOVE      "21",ECOL
          MOVE      "12",EVERT
          MOVE      SP6,CKYIDEF6
          MOVE      ZERO,CKYIMAND
          MOVE      ZERO,CKYIMODE
.
          DISPLAY   *P1:EVERT,"Health Fund       :",*EF;
          CALL      PATFNDKY                * Keyin a health fund
          BRANCH    EXIT,HFCD9100,HFCD9200,HFCD1000
.                        Nothing  Exit     Spaces
.
          MOVE      HCODE,FNDCODE
          MOVE      HFNAME,FNDDESC
          MOVE      FNDCODE,FNAMCODE
          DISPLAY   *P31:EVERT,*EL,HFNAME;
          GOTO      HFCD9000
.
HFCD1000  MOVE      SP6,FNDCODE
          MOVE      SP30,FNDDESC
          DISPLAY   *P31:EVERT,*EL;
.
HFCD9000  MOVE      ZERO,EXIT
          GOTO      HFCD9999
.
HFCD9100  MOVE      ONE,EXIT
          GOTO      HFCD9999
.
HFCD9200  MOVE      TWO,EXIT
HFCD9999  RETURN
+
.******************************************************************************
.*                                  CLTY0000              Called by: ML0000   *
.*                            Keyin The Claim Type                            *
.******************************************************************************
CLTY0000  MOVE      "21",ECOL
          MOVE      "10",EVERT
          MOVE      "CL",CODE
          MOVE      SP3,CKYIDEF3
          MOVE      ZERO,CKYIMAND
          MOVE      ZERO,CKYIMODE
          MOVE      SP3,CLMTYPE
.
          DISPLAY   *P1:EVERT,"Claim Type        :",*EF;
          CALL      PATCODKY                * Keyin a codes file code
          BRANCH    EXIT,CLTY9500,CLTY9500
.                        Spaces   Exit
.
          MOVE      ACODE,CLMTYPE
          MOVE      CLMTYPE,FNAMCODE
          MOVE      TDESC,CLMDESC
          DISPLAY   *P31:EVERT,*EL,TDESC;
.
          MOVE      SP1,CLMINDC
          PACK      KEY5,ANSC,ANSL,CLMTYPE
          CALL      RDCODE1                 * Read the codes file
          IF        OVRCD=1
            DISPLAY   *P1:24,*EL,*B,"Invalid claim type.  ";
            CALL      HITENTER
            GOTO      CLTY0000
          ENDIF
.
          MOVE      ONE,FORM1
CLTY1000  COMPARE   FORM1,FIVE
          GOTO      CLTY9000 IF LESS        * 5 < counter
.
          MOVE      SP1,KEY1
          LOAD      KEY1,FORM1,TCINDC1,TCINDC2,TCINDC3,TCINDC4,TCINDC5
.
          MATCH     ANSM,KEY1
          IF        @EQUAL
            MOVE      ANSM,CLMINDC          * Claim type indicator - TAC
            GOTO      CLTY9000
          ENDIF
.
          MATCH     ANSV,KEY1
          IF        @EQUAL
            MOVE      ANSV,CLMINDC          * Claim type indicator - DVA
            GOTO      CLTY9000
          ENDIF
.
          MATCH     ANSW,KEY1
          IF        @EQUAL
            MOVE      ANSW,CLMINDC          * Claim type indicator - WCO
            GOTO      CLTY9000
          ENDIF
.
          ADD       ONE,FORM1
          GOTO      CLTY1000
.
CLTY9000  MOVE      ZERO,EXIT
          GOTO      CLTY9999
.
CLTY9500  MOVE      ONE,EXIT
CLTY9999  RETURN
+
.******************************************************************************
.*                                  DATE0000              Called by: ML0000   *
.*                        Keyin The Invoice Date Range                        *
.******************************************************************************
DATE0000  MOVE      "21",CCOL
          LOAD      CVERT,COPTION,TEN4,TEN2
          DISPLAY   *P1:CVERT,*EF,"Starting Date     : ";
          ADD       ONE,CVERT
          DISPLAY   *P1:CVERT,"Ending Date       : ";
.
          MOVE      ONE,CCANLDTE            * Blank cancel default
          MOVE      ZERO,CHIGHLT            * Use highlight
.
. ----- Enter starting date -----
.
DATE1000  SUB       ONE,CVERT
DATE2000  MOVE      CCC,CCENT
          UNPACK    SP6,CYEAR,CMON,CDAY
          CALL      KEYDATE                 * Keyin date
          BRANCH    OVRCD,DATE9500
          BRANCH    CQUEST,DATE2000
.
          PACK      STRTDTE8,CCENT,CYEAR,CMON,CDAY
          REP       " 0",STRTDTE8
.
          MATCH     STRTDTE8,CURRDATE
          IF        @LESS
            DISPLAY   *P1:24,*B,*EL,"Start date must not be after the current ":
                      "date.  ";
            CALL      HITENTER 
            GOTO      DATE2000
          ENDIF
.
. ----- Enter ending date -----
.
          ADD       ONE,CVERT
DATE3000  UNPACK    STRTDTE8,CCENT,CYEAR,CMON,CDAY
          CALL      KEYDATE                 * Keyin date
          BRANCH    OVRCD,DATE1000
          BRANCH    CQUEST,DATE3000
.
          PACK      ENDDTE8,CCENT,CYEAR,CMON,CDAY
          REP       " 0",ENDDTE8
.
          MATCH     ENDDTE8,CURRDATE
          IF        @LESS
            DISPLAY   *P1:24,*B,*EL,"End date must not be after the current ":
                      "date.  ";
            CALL      HITENTER 
            GOTO      DATE3000
          ENDIF
.
DATE5000  MATCH     STRTDTE8,ENDDTE8
          IF        @LESS
            DISPLAY   *P1:24,*B,*EL,"End date must be after the start date.  ";
            CALL      HITENTER 
            GOTO      DATE3000
          ENDIF
.
          MOVE      STRTDTE8,KEY4
          MATCH     KEY4,ENDDTE8
          IF        !@EQUAL
            DISPLAY   *P1:24,*B,*EL,"Both dates must be from the same ":
                      "financial year.  ";
            CALL    HITENTER
            GOTO    DATE0000
          ENDIF
.
DATE9000  MOVE      ZERO,EXIT
          GOTO      DATE9999
.
DATE9500  MOVE      ONE,EXIT
DATE9999  RETURN
+
.******************************************************************************
.*                                  OPEN0000              Called by: ML0000   *
.*                              Open The Tempfile                             *
.******************************************************************************
OPEN0000  CALL      TFILENAM                     * Generate temporary file name
          MOVE      TFILNAME,FNAMEA
.
          CALL      KILL0000                * Delete the tempfile
.
          CLEAR     KEY99
          APPEND    "isbuild ",KEY99
          APPEND    FNAMEA,KEY99
          APPEND    FILELIN1,KEY99
          RESET     KEY99
          EXECUTE   KEY99,TASKID
.
          OPEN      TEMP1,FNAMEA
          OPEN      TEMP2,FNAMEA
.
OPEN9000  MOVE      ZERO,EXIT
OPEN9999  RETURN
+
.******************************************************************************
.*                                  LOAD0000              Called by: ML0000   *
.*                              Load The Tempfile                             *
.******************************************************************************
LOAD0000  MOVE      ZERO,REDCT
          MOVE      ZERO,WRTCT
          DISPLAY   *P1:24,*EL,"Scanning : ",*P35:24,"Loading : ";
.
          PACK      KEY16,STRTDTE8,SP20
          CALL      RDSINV2                 * Position on & read an invoice
LOAD1000  CALL      RDKINV2                   file record
          BRANCH    OVRCD,LOAD9000
.
          MATCH     PINVDTE,ENDDTE8
          GOTO      LOAD9000 IF LESS        * End date < invoice date
.
          ADD       ONE,REDCT
          IF        REDCT%20=1
            DISPLAY   *P12:24,*V2LON,PINVNO,SP2,PINVADM;
          ENDIF
.
          COMPARE   THREE,PINVSYS
          GOTO      LOAD1000 IF NOT EQUAL   * Not an inpatient
.
          COMPARE   ZERO,PTINEDSF
          GOTO      LOAD1000 IF NOT EQUAL   * Only extract invoice with EDI of
.                                             not sent
          ASSIGN    PINVAMT+PINVJOUR,FORM8P2 * Total hospital charge
          COMPARE   ZERO,FORM8P2
          GOTO      LOAD1000 IF EQUAL       * Zero charge, ignore invoice
.
          MOVE      PINVNO,INVNO
          MOVE      PINVADM,ADMINO
          PACK      KEY8,PINVADM
          CALL      RDMISS1                 * Read an admin file record
          BRANCH    OVRCD,LOAD1000
.          
          COMPARE   ONE,ASTAT
          GOTO      LOAD1000 IF EQUAL       * Don't extract for pre-admitted
.          
          COMPARE   FIVE,ASTAT
          GOTO      LOAD1000 IF EQUAL       * Don't extract for cancelled adm
.
          BRANCH    COPTION,LOAD2000        * By health fund group
.
          PACK      KEY5,ANSC,ANSL,ACLAIM
          CALL      RDCODE1                 * Read a codes file record
          BRANCH    OVRCD,LOAD1000
.
          MATCH     CLMTYPE,ACLAIM
          GOTO      LOAD1000 IF NOT EQUAL   * Different claim type
          GOTO      LOAD4000
.
LOAD2000  MATCH     SP6,AFUNDH
          GOTO      LOAD1000 IF EQUAL       * Blank health fund
.
          PACK      KEY14,AFUNDH,ZERO4,SP20
          CALL      RDFUND1                 * Read a health fund file record
          BRANCH    OVRCD,LOAD1000
.
          MATCH     SP6,FNDCODE
          GOTO      LOAD3000 IF EQUAL       * Blank keyed in health fund
.
          MATCH     FNDCODE,HCODE
          GOTO      LOAD1000 IF NOT EQUAL   * Different health fund
.
LOAD3000  MATCH     SP6,PTHFHGRP
          GOTO      LOAD1000 IF EQUAL       * Blank health fund group
.
          PACK      KEY6,PTHFHGRP
          CALL      RDPAHGP1                * Read a health fund group file rec
          BRANCH    OVRCD,LOAD1000
.
          MATCH     GRPCODE,PTHGCODE
          GOTO      LOAD1000 IF NOT EQUAL   * Different health fund group
.
LOAD4000  MOVE      ZERO,TERRFLG            * Error flag - no
          PACK      KEY8,INVNO
          CALL      RATEMP1                 * Position read a tempfile record
          COMPARE   ONE,OVRCD
          GOTO      LOAD1000 IF NOT EQUAL   * Read already exists
.
          CALL      WRTEMP1                 * Write a tempfile record
.
          ADD       ONE,WRTCT
          IF        WRTCT%20=1
            DISPLAY   *P45:24,*V2LON,PINVNO,SP2,PINVADM;
          ENDIF
          GOTO      LOAD1000
.
LOAD9000  MOVE      ZERO,EXIT
LOAD9999  RETURN
+
.******************************************************************************
.*                                  HEAD0000              Called by: ML0000   *
.*                             Print Report Header                            *
.******************************************************************************
HEAD0000  CALL      HEAD80                  * Print 80 column header
          BRANCH    COPTION,HEAD1000        * By health fund group
.
          PRINT     *N,*20,"Claim Type        : ",CLMTYPE,SP2,CLMDESC,*N
          GOTO      HEAD2000
.
HEAD1000  PRINT     *N,*20,"Health Fund Group : ",GRPCODE,SP2,GRPDESC:
                    *N,*20,"Health Fund       : ",FNDCODE,SP2,FNDDESC,*N
.
HEAD2000  UNPACK    STRTDTE8,CCENT,CYEAR,CMON,CDAY
          CALL      PACDATE                 * Format the start date
          PRINT     *20,"Start Date        : ",CPCDATE
          UNPACK    ENDDTE8,CCENT,CYEAR,CMON,CDAY
          CALL      PACDATE                 * Format the end date
          PRINT     *20,"End Date          : ",CPCDATE,*N
          CALL      UND80
          PRINT     *1,"| Inv No | Adm No | Error",*80,"|"
          CALL      UND80
          ADD       "7",CLNO
.
HEAD9000  MOVE      ZERO,EXIT
HEAD9999  RETURN
+
.******************************************************************************
.*                                  VALD0000              Called by: ML0000   *
.*                            Validate The Tempfile                           *
.******************************************************************************
VALD0000  MOVE      ONE,VALDFLG             * Validation flag - yes error check
.
          MOVE      ZERO,REDCT
          MOVE      ZERO,ERRCT
          MOVE      ZERO,WARCT
          MOVE      ZEROVISN,SAVADMIN       * Clear the save admin no
          MOVE      SP8,SAVINVNO            * Clear the save invoice no
          MOVE      SP8,SAVINVN2            * Clear the save invoice no 2
          MOVE      ZERO,TOTAMTCT           * Clear the total amount counter
          MOVE      ZERO,TOTRECCT           * Clear the total record counter
          MOVE      ZERO,WRTCT
          DISPLAY   *P1:24,*EL,"Validating : ";
.
          PACK      KEY17,SP20
          CALL      RSTEMP2                 * Position on & read a tempfile
          CALL      RKTEMP2                   record
          BRANCH    OVRCD,VALD9000
.
          CALL      WHDR0000                * Write header details
          CALL      WPRO0000                * Write provider details
          CALL      WINS0000                * Write insurer details
.
          PACK      KEY17,SP20
          CALL      RSTEMP2                 * Position on & read a tempfile
VALD1000  CALL      RKTEMP2                   record
          BRANCH    OVRCD,VALD8000
.
          COMPARE   ONE,TERRFLG
          GOTO      VALD8000 IF EQUAL       * Error record found, finished
.
          ADD       ONE,REDCT
          IF        REDCT%10=1
            DISPLAY   *P14:24,*V2LON,INVNO,SP2,ADMINO;
          ENDIF
.
          PACK      KEY8,INVNO
          CALL      RDTEMP1                 * Read a tempfile record
          IF        OVRCD=1
            MOVE      "Missing tempfile file record",ERRMSG
            CALL      EMSG0000              * Print an error message
          ENDIF
          MOVE      TERRFLG,ERRFLG
.
          PACK      KEY8,INVNO
          CALL      RDINV1                  * Read an invoice file record
          IF        OVRCD=1
            MOVE      "Missing invoice file record",ERRMSG
            CALL      EMSG0000              * Print an error message
          ENDIF
.
          MATCH     SAVADMIN,ADMINO
          GOTO      VALD2000 IF EQUAL       * Same admin no, dont get details
.
          PACK      KEY8,ADMINO
          CALL      RDMISS1                 * Read an admin file record
          IF        OVRCD=1
            MOVE      "Missing admission file record",ERRMSG
            CALL      EMSG0000              * Print an error message
          ENDIF
.
          CALL      CLPATDSC                * Clear disch file variables
          IF        ASTAT=3
            PACK      KEY8,ADMINO
            CALL      RDDSCH1               * Read a disch file record
            IF        OVRCD=1
              MOVE      "Missing discharge file record",ERRMSG
              CALL      EMSG0000            * Print an error message
            ENDIF
          ENDIF
.
          PACK      KEY8,PINVUR
          CALL      RDMAST1                 * Read a master file record
          IF        OVRCD=1
            MOVE      "Missing master file record",ERRMSG
            CALL      EMSG0000              * Print an error message
          ENDIF
.
          MOVE      ADATE,INVFRDTE          * Invoice from date
          MOVE      ZERO,INVRECCT           * Clear the invoice record counter
          MOVE      ADMINO,SAVADMIN         * Save the admin no
.
VALD2000  MOVE      PINVDTE,INVTODTE        * Default to date to invoice date
          MATCH     SP8,DDATE
          GOTO      VALD3000 IF EQUAL       * Patient not discharged
.
          MATCH     DDATE,PINVDTE
          GOTO      VALD3000 IF LESS        * Invoice date < disch date
.
          MOVE      DDATE,INVTODTE          * Default to date to disch date
.
VALD3000  MOVE      ZERO,INVAMTCT           * Clear the invoice amount counter
          ADD       ONE,INVRECCT            * Increm the invoice record counter
          ADD       ONE,TOTRECCT            * Increment the total record counter
.
          MOVE      ZERO4,NOINVDYS          * No of invoice days
.
          CALL      WCID0000                * Write claim id details
          CALL      WPAT0000                * Write patient details
          CALL      WEPD0000                * Write episode details
          CALL      WSVB0000                * Write bungle/single value details
          CALL      WACS0000                * Write accom summary details
          CALL      WACD0000                * Write accom details
          CALL      WCCG0000                * Write critical care details
          CALL      WPSG0000                * Write principal services details
          CALL      WMSG0000                * Write mulitple services details
          CALL      WMIG0000                * Write misc services details
          CALL      WDMG0000                * Write DRG morbidity details
.
          ADD       INVAMTCT,TOTAMTCT       * Increment the total amount counter
          MOVE      INVTODTE,INVFRDTE       * Invoice from date
.
          MOVE      ERRFLG,TERRFLG
          COMPARE   ONE,TERRFLG
          CALL      UPTEMP1 IF EQUAL        * Error found, update tempfile
          GOTO      VALD1000
.
VALD8000  CALL      WTLR0000                * Write trailer details
.
VALD9000  MOVE      ZERO,EXIT
VALD9999  RETURN
+
.******************************************************************************
.*                                  QUES0000              Called by: ML0000   *
.*                              Extract Question                              *
.******************************************************************************
QUES0000  DISPLAY   *P1:20,*EF,"Total Records Read     : ",*V2LON,REDCT,*HOFF:
                    *P1:21,"Total Number of Errors : ",*V2LON,ERRCT,*HOFF:
                    *P1:22,"Total Number Warnings  : ",*V2LON,WARCT,*HOFF;
.
          COMPARE   ZERO,REDCT
          GOTO      QUES1000 IF NOT EQUAL   * No data found
.
          DISPLAY   *P1:24,*EL,*B,"No data found.  No extracted created.  ";
          CALL      HITENTER
.
          MATCH     "IBARSH99",PGM
          IF        @EQUAL
            KEYIN     ANS;
          ENDIF
          GOTO      QUES9500
.
QUES1000  MOVE      "1",CCOL
          IF        ERRCT<>0
            DISPLAY   *P1:24,*B,"Errors found.  ";
            MOVE      "16",CCOL
          ENDIF
          DISPLAY   *PCCOL:24,"Create extract file (",*V2LON,"Y",*HOFF,"/":
                    *V2LON,"N",*HOFF,") ? ";
          ADD       "28",CCOL
.
QUES2000  KEYIN     *PCCOL:24,*V2LON,ANS;
          REP       UPPLOW,ANS
.
          MATCH     "Y",ANS
          GOTO      QUES9000 IF EQUAL
.
          MATCH     "N",ANS
          GOTO      QUES9500 IF EQUAL
.
          BEEP
          GOTO      QUES2000
.
QUES9000  MOVE      ZERO,EXIT
          GOTO      QUES9999
.
QUES9500  MOVE      ONE,EXIT
QUES9999  RETURN
+
.******************************************************************************
.*                                  WRIT0000              Called by: ML0000   *
.*                             Write To The Files                             *
.******************************************************************************
WRIT0000  MOVE      ZERO,VALDFLG            * Validaion flag - no writing
.
          READ      CONTROLF,NINTY8;*157,PTCNBTHN
          ADD       ONE,PTCNBTHN
          WRITAB    CONTROLF,NINTY8;*157,PTCNBTHN
          SUB       ONE,PTCNBTHN
          STRIP     PTCNAUED
          PACK      EXTFNAME,PTCNAUED,FNAMCODE,PTCNBTHN,TXT
          REP       " 0",EXTFNAME
          PREP      EXTFILE1,EXTFNAME
.
          MOVE      ZEROVISN,SAVADMIN       * Clear the save admin no
          MOVE      ZERO,TOTAMTCT           * Clear the total amount counter
          MOVE      ZERO,TOTRECCT           * Clear the total record counter
          MOVE      ZERO,WRTCT
          DISPLAY   *P1:24,*EL,"Writing : ";
.
          CALL      WHDR0000                * Write header details
          CALL      WPRO0000                * Write provider details
          CALL      WINS0000                * Write insurer details
.
          PACK      KEY17,ZERO,SP20
          CALL      RSTEMP2                 * Position on & read a tempfile
WRIT1000  CALL      RKTEMP2                   record
          BRANCH    OVRCD,WRIT8000
.
          COMPARE   ONE,TERRFLG
          GOTO      WRIT8000 IF EQUAL       * Error record found, finished
.
          ADD       ONE,WRTCT
          IF        WRTCT%10=1
            DISPLAY   *P11:24,*V2LON,INVNO,SP2,ADMINO;
          ENDIF
.
          PACK      KEY8,INVNO
          CALL      RDINV1                  * Read an invoice file record
          BRANCH    OVRCD,WRIT1000
.
          MATCH     SAVADMIN,ADMINO
          GOTO      WRIT2000 IF EQUAL       * Same admin no, dont get details
.
          PACK      KEY8,ADMINO
          CALL      RDMISS1                 * Read an admin file record
          BRANCH    OVRCD,WRIT1000
          CALL      RDPMVX11
          BRANCH    OVRCD,WRIT1000
.
          CALL      CLPATDSC                * Clear disch file variables
          IF        ASTAT=3
            PACK      KEY8,ADMINO
            CALL      RDDSCH1               * Read a disch file record
            BRANCH    OVRCD,WRIT1000
          ENDIF
.
          PACK      KEY8,PINVUR
          CALL      RDMAST1                 * Read a master file record
          BRANCH    OVRCD,WRIT1000
.
          MOVE      ADATE,INVFRDTE          * Invoice from date
          MOVE      ZERO,INVRECCT           * Clear the invoice record counter
          MOVE      ADMINO,SAVADMIN         * Save the admin no
.
WRIT2000  MOVE      PINVDTE,INVTODTE        * Default to date to invoice date
          MATCH     SP8,DDATE
          GOTO      WRIT3000 IF EQUAL       * Patient not discharged
.
          MATCH     DDATE,PINVDTE
          GOTO      WRIT3000 IF LESS        * Invoice date < disch date
.
          MOVE      DDATE,INVTODTE          * Default to date to disch date
.
WRIT3000  MOVE      ZERO,INVAMTCT           * Clear the invoice amount counter
          ADD       ONE,INVRECCT            * Increm the invoice record counter
          ADD       ONE,TOTRECCT            * Increment the total record counter
.
          MOVE      INVFRDTE,FROMDATE
          MOVE      INVTODTE,TODATE
          CALL      NHOSPDAY                * Calculate no of days in hospital
          MOVE      NBRDAYS,NOINVDYS
          REP       " 0",NOINVDYS           * No of invoice days
.
          CALL      WCID0000                * Write claim id details
          CALL      WPAT0000                * Write patient details
          CALL      WEPD0000                * Write episode details
          CALL      WSVB0000                * Write bungle/single value details
          CALL      WACS0000                * Write accom summary details
          CALL      WACD0000                * Write accom details
          CALL      WCCG0000                * Write critical care details
          CALL      WPSG0000                * Write principal services details
          CALL      WMSG0000                * Write mulitple services details
          CALL      WMIG0000                * Write misc services details
          CALL      WDMG0000                * Write DRG morbidity details
.
          ADD       INVAMTCT,TOTAMTCT       * Increment the total amount counter
          MOVE      INVTODTE,INVFRDTE       * Invoice from date
.
          MOVE      ONE,PTINEDSF            * EDI sent flag - sent
          PACK      PTINUDAT,CCC,CYY,CMM,CDD
          REP       " 0",PTINUDAT           * date updated
          CLOCK     TIME,PTINUTIM           * time updated
          MOVE      PASSCODE,PTINUUID       * web user id
          CALL      UPINV1                  * Update an invoice file record
.
          BRANCH    CAUDX,WRIT4000          * Not using EDI audit flag
.
          MOVE      INVNO,PTEDINVN
          CALL      IBACLOCK
          PACK      PTEDDECM,CCC,CYY,CMM,CDD
          REP       " 0",PTEDDECM
          MOVE      CTIMEIS,PTEDTECM
          MOVE      PASSCODE,PTEDOPRR
          MOVE      PTINEDSF,PTEDEDSF
          MOVE      PTCNBTHN,PTEDBTHN
          MOVE      ZERO,PTEDEETP
          PACK      PTEDSPR1,SP30,SP20
.
          PACK      KEY8,PTEDINVN
          CALL      WRPTEDA1                * Write an EDI audit file record
.
WRIT4000  MOVE      PTCNBTHN,PTEIBTHN
          MOVE      INVNO,PTEIINVN
          PACK      PTEISPAR,SP30,SP10
.
          PACK      KEY16,PTEIBTHN,PTEIINVN
          CALL      RAPTEBI1                * Read an EDI batch inv file rec
          COMPARE   ONE,OVRCD
          CALL      WRPTEBI1 IF EQUAL       * Write an EDI batch inv file rec
          GOTO      WRIT1000
.
WRIT8000  CALL      WTLR0000                * Write trailer details
.
          MOVE      PTCNBTHN,PTEHBTHN
          MOVE      GRPCODE,PTEHHFGP
          MOVE      STRTDTE8,PTEHSTDT
          MOVE      ENDDTE8,PTEHEDDT
          MOVE      TOTAMTCT,PTEHBHTL
          MOVE      TOTRECCT,PTEHTRIB
          CALL      IBACLOCK
          PACK      PTEHDTBC,CCC,CYY,CMM,CDD
          REP       " 0",PTEHDTBC
          MOVE      CTIMEIS,PTEHTMBC
          MOVE      PASSCODE,PTEHOPER
          MOVE      ZERO,PTEHEETP
          PACK      PTEHSPAR,SP30,SP10
.
          PACK      KEY8,PTEHBTHN
          CALL      RAPTEBH1                * Read an EDI batch header file rec
          COMPARE   ONE,OVRCD
          CALL      WRPTEBH1 IF EQUAL       * Write an EDI batch header file rec
.
          STRIP     EXTFNAME
          DISPLAY   *P1:18,*EF,"Total records read      : ",*V2LON,REDCT,*HOFF:
                    *P1:19,"Total records extracted : ",*V2LON,WRTCT,*HOFF:
                    *P1:21,"Extract filename is : ",*P1:22,*V2LON,EXTFNAME:
                    *P1:24,*HOFF,*B,"Extract finished.  ";
          CALL      HITENTER
.
WRIT9000  MOVE      ZERO,EXIT
WRIT9999  RETURN
+
.******************************************************************************
.*                                  TAIL0000              Called by: ML0000   *
.*                              Print Report Tail                             *
.******************************************************************************
TAIL0000  CALL      UND80
          PRINT     *N,*1,"Total Records Read      : ",REDCT:
                    *N,*1,"Total Number of Errors  : ",ERRCT:
                    *N,*1,"Total Number of Warnings: ",WARCT:
                    *N,*N,*1,"Total Records Extracted : ",WRTCT
.
          IF        REDCT =0
            PRINT     *N,*1,"No Extract file created"
          ELSE
            PRINT     *N,*1,"Extract filename is : ",EXTFNAME
          ENDIF
.
          PRINT     *N,*N,"*** End of Report ***"
.
TAIL9000  MOVE      ZERO,EXIT
TAIL9999  RETURN
+
.******************************************************************************
.*                                  WHDR0000              Called by: VALD0000 *
.*                            Write Header Details                 & WRIT0000 *
.******************************************************************************
WHDR0000  BRANCH    VALDFLG,WHDR9000        * Only validating data, exit
.
          MOVE      PTCNBTHN,KEY8
          UNPACK    KEY8,KEY2,KEY6
          REP       " 0",KEY6               * Providers batch no
          CLOCK     TIME,KEY5
          UNPACK    KEY5,CHOUR,KEY1,CMIN    * Current time
          PACK      KEY8,CDD,CMM,CCC,CYY    * Current date
          REP       " 0",KEY8
.
          IF        OPTION=1
            MOVE      "~HDRHCLM0201",KEY12
          ELSE 
            MOVE      "~HDRHCLM0202",KEY12
          ENDIF
.
          IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;KEY12,SP4,ZERO5,KEY6,ZERO4:
                                   SP8,ANST,CHOUR,CMIN,KEY8
          ELSE
            WRITE     EXTFILE1,SEQ;KEY12,SP4,ZERO5,KEY6,ZERO4:
                                   SP8,ANST,CHOUR,CMIN,KEY8;
          ENDIF
.
WHDR9000  MOVE      ZERO,EXIT
WHDR9999  RETURN
+
.******************************************************************************
.*                                  WPRO0000              Called by: VALD0000 *
.*                           Write Provider Details                & WRIT0000 *
.******************************************************************************
WPRO0000  MOVE      "~PRO",KEY4
          MATCH     SP10,CAPPRVNO
          IF        @EQUAL
            MOVE      "Blank hospital approval number",ERRMSG
            CALL      EMSG0000              * Print an error message
          ENDIF
          BRANCH    VALDFLG,WPRO9000        * Only validating data, exit
.
          MOVE      CAPPRVNO,KEY9           * Hospital no
          PACK      KEY30,CNAME,SP30        * Hospital name
.
          WRITE     EXTFILE1,SEQ;KEY4,KEY9,KEY30,SP30,SP30:
                                 SP30,SP30,ZERO6,ZERO12;
.
          IF        OPTION=1
            IF        TESTFLG=1
              WRITE     EXTFILE1,SEQ;
            ELSE
              WRITE     EXTFILE1,SEQ;;
            ENDIF
          ELSE
            IF        TESTFLG=1
              WRITE     EXTFILE1,SEQ;ZERO
            ELSE
              WRITE     EXTFILE1,SEQ;ZERO;
            ENDIF
          ENDIF
.
WPRO9000  MOVE      ZERO,EXIT
WPRO9999  RETURN
+
.******************************************************************************
.*                                  WINS0000              Called by: VALD0000 *
.*                            Write Insurer Details                & WRIT0000 *
.******************************************************************************
WINS0000  BRANCH    VALDFLG,WINS9000        * Only validating data, exit
.
          MOVE      "~INS",KEY4
          BRANCH    COPTION,WINS1000        * By health fund group
.
          MOVE      CLMTYPE,KEY3            * Claim type
          MOVE      CLMDESC,KEY30           * Claim type description
          GOTO      WINS2000
.
WINS1000  MOVE      FNDCODE,KEY3
          MOVE      FNDDESC,KEY30
.
WINS2000  IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;KEY4,KEY3,KEY30,SP30,SP30:
                                   SP30,SP30
          ELSE
            WRITE     EXTFILE1,SEQ;KEY4,KEY3,KEY30,SP30,SP30:
                                   SP30,SP30;
          ENDIF
.
WINS9000  MOVE      ZERO,EXIT
WINS9999  RETURN
+
.******************************************************************************
.*                                  WCID0000              Called by: VALD0000 *
.*                           Write Claim Id Details                & WRIT0000 *
.******************************************************************************
WCID0000  BRANCH    VALDFLG,WCID3500        * Only validating data
.
          MOVE      ANSN,KEY1               * Default invoice no not in series
          COMPARE   ONE,INVRECCT
          GOTO      WCID0500 IF NOT EQUAL   * Not the 1st invoice for admin
.
          CALL      RKTEMP2                 * Read a next tempfile record
          BRANCH    OVRCD,WCID2000
.
          COMPARE   ONE,TERRFLG
          GOTO      WCID1500 IF EQUAL       * Error record found
.
          MATCH     AADMNO,ADMINO
          GOTO      WCID1500 IF NOT EQUAL   * Different admin no
.
          MOVE      ANSF,KEY1               * 1st invoice no in series
          GOTO      WCID1500
.
WCID0500  CALL      RKTEMP2                 * Read a next tempfile record
          BRANCH    OVRCD,WCID1000
.
          COMPARE   ONE,TERRFLG
          GOTO      WCID1000 IF EQUAL       * Error record found
.
          MATCH     AADMNO,ADMINO
          GOTO      WCID1000 IF NOT EQUAL   * Different admin no
.
          MOVE      ANSM,KEY1               * The inbetween inv no in series
          GOTO      WCID1500
.
WCID1000  MOVE      ANSL,KEY1               * Last invoice no in series
WCID1500  CALL      RPTEMP2                 * Read a previous tempfile record
WCID2000  MOVE      "~CID",KEY4
          MOVE      TOTRECCT,KEY5
          REP       " 0",KEY5
          PACK      KEY15,INVNO,SP20
          SQUEEZE   KEY15
          PACK      KEY15,KEY15,SP20
.
          WRITE     EXTFILE1,SEQ;KEY4,KEY5,KEY15,KEY1,SP1:
                                 ZERO4,SP8,SP6,ZERO5;
.
          MOVE      ANSN,KEY1A              * Default deposit flag to no
          MOVE      ZERO,FORM8P2            * Clear the deposit amount
          PACK      KEY31,ADMINO,INVNO,FIVE,SP30
          CALL      RDSDTRN3                * Position on & read a DTR file
WCID2500  CALL      RDKDTRN3                  record
          BRANCH    OVRCD,WCID3000
.
          MATCH     ADMINO,TADMNO
          GOTO      WCID3000 IF NOT EQUAL   * Different admin no
.
          MATCH     INVNO,TREF
          GOTO      WCID3000 IF NOT EQUAL   * Different invoice no
.
          COMPARE   FIVE,TRECTYPE
          GOTO      WCID3000 IF NOT EQUAL   * Not a cash receipt record
.
          MATCH     SP3,TDEPTYP
          GOTO      WCID2500 IF EQUAL       * Not a deposit, get next
.
          MOVE      ANSY,KEY1A              * Deposit payment
          ADD       TPATAMTT,FORM8P2        * Increment the deposit amount
          GOTO      WCID2500
.
WCID3000  MULT      "-1",FORM8P2
          CALL      FNTL0000                * Format numeric totals
.
          WRITE     EXTFILE1,SEQ;KEY1A,KEY9,ANSN;
.
          MOVE      ANSN,KEY1               * Default WCO flag to no
          MOVE      ANSN,KEY1A              * Default VET flag to no
WCID3500  PACK      KEY5,ANSC,ANSL,ACLAIM
          CALL      RDCODE1                 * Read the codes file
          IF        OVRCD=1
            MOVE      "Claim type not set up for admission",ERRMSG
            CALL      EMSG0000              * Print an error message
          ENDIF
          BRANCH    VALDFLG,WCID9000        * Only validating data, exit
.
          MOVE      ONE,FORM1
WCID4000  COMPARE   FORM1,FIVE
          GOTO      WCID4500 IF LESS        * 5 < counter
.
          MOVE      SP1,DIM1
          LOAD      DIM1,FORM1,TCINDC1,TCINDC2,TCINDC3,TCINDC4,TCINDC5
          MATCH     ANSV,DIM1
          IF        @EQUAL
            MOVE      "Y",KEY1A             * Veterian affairs patient
            GOTO      WCID4500
          ENDIF
.
          MATCH     ANSW,DIM1
          IF        @EQUAL
            MOVE      "Y",KEY1              * Workers comp patient
            GOTO      WCID4500
          ENDIF
.
          ADD       ONE,FORM1
          GOTO      WCID4000
.
WCID4500  WRITE     EXTFILE1,SEQ;KEY1,KEY1A;
.
          ASSIGN    PINVAMT+PINVJOUR,INVAMTCT * Total hospital charge
          MOVE      INVAMTCT,KEY10
          UNPACK    KEY10,KEY7,KEY1,KEY2
          PACK      KEY9,KEY7,KEY2
          REP       " 0",KEY9
.
          IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;KEY9,ZERO9,KEY9
          ELSE
            WRITE     EXTFILE1,SEQ;KEY9,ZERO9,KEY9;
          ENDIF
.
WCID9000  MOVE      ZERO,EXIT
WCID9999  RETURN
+
.******************************************************************************
.*                                  WPAT0000              Called by: VALD0000 *
.*                            Write Patient Details                & WRIT0000 *
.******************************************************************************
WPAT0000  MOVE      "~PAT",KEY4
          BRANCH    COPTION,WPAT3000        * By health fund group
.
          MATCH     SP1,CLMINDC
          GOTO      WPAT3000 IF EQUAL       * Blank claim type indicator
.
          MATCH     ANSM,CLMINDC
          GOTO      WPAT1000 IF NOT EQUAL   * Not a TAC patient
.
          MOVE      SP20,MREFNO
          PACK      KEY8,ADMINO
          CALL      RDWMAB1                 * Read a TAC file record
          IF        OVRCD=1
            MOVE      "Patient missing motor accident details",ERRMSG
            CALL      EMSG0000              * Print an error message
          ENDIF
.
          MATCH     SP20,MREFNO
          IF        @EQUAL
            MOVE      "Blank motor accident reference number",ERRMSG
            CALL      EMSG0000              * Print an error message
          ENDIF
          PACK      KEY20,MREFNO,SP20       * TAC reference no
          GOTO      WPAT4000
.
WPAT1000  MATCH     ANSV,CLMINDC
          GOTO      WPAT2000 IF NOT EQUAL   * Not a DVA patient
.
          MOVE      SP20,VCLMNO
          PACK      KEY8,ADMINO
          CALL      RDWVET1                 * Read a DVA file record
          IF        OVRCD=1
            MOVE      "Patient missing veterian affairs details",ERRMSG
            CALL      EMSG0000              * Print an error message
          ENDIF
.
          MATCH     SP20,VCLMNO
          IF        @EQUAL
            MOVE      "Blank veterian affairs claim number",ERRMSG
            CALL      EMSG0000              * Print an error message
          ENDIF
          PACK      KEY20,VCLMNO,SP20       * DVA reference no
          GOTO      WPAT4000
.
WPAT2000  MATCH     ANSW,CLMINDC
          GOTO      WPAT3000 IF NOT EQUAL   * Not a WCO patient
.
          MOVE      SP20,WCCLMNO
          PACK      KEY8,ADMINO
          CALL      RDWCOM1                 * Read a WCO file record
          IF        OVRCD=1
            MOVE      "Patient missing workers comp details",ERRMSG
            CALL      EMSG0000              * Print an error message
          ENDIF
.
          MATCH     SP20,WCCLMNO
          IF        @EQUAL
            MOVE      "Blank workers comp claim number",ERRMSG
            CALL      EMSG0000              * Print an error message
          ENDIF
          PACK      KEY20,WCCLMNO,SP20      * WCO claim no
          GOTO      WPAT4000
.
WPAT3000  MATCH     SP10,AFNDMM
          IF        @EQUAL
            MOVE      "Blank health fund membership number",ERRMSG
            CALL      EMSG0000              * Print an error message
          ENDIF
          PACK      KEY20,AFNDMM,SP20       * Health fund membership no
.
WPAT4000  BRANCH    VALDFLG,WPAT5000        * Only validating data
.
          PACK      KEY30,PGNAME,SP30       * Given name
          PACK      KEY28,PSNAME,SP30       * Surname
.
          MOVE      PSEX,KEY1
          REP       "M1F2U0",KEY1              * Patient sex
.
          MATCH     "1",KEY1
          IF        !@EQUAL
            MATCH     "2",KEY1
            IF        !@EQUAL
              MATCH     "0",KEY1
              IF        !@EQUAL
                MOVE      "Invalid sex type",ERRMSG
                CALL      EMSG0000            * Print an error message
              ENDIF
            ENDIF
          ENDIF
.
          UNPACK    PBDATE,CCENT,CYEAR,CMON,CDAY * DOB
.
          WRITE     EXTFILE1,SEQ;KEY4,KEY20,SP10,SP30,SP1:
                                 SP20,SP8,SP4,PPOST,KEY30:
                                 SP1,KEY28,SP8,KEY1,CDAY:
                                 CMON,CCENT,CYEAR;
.
          MOVE      SP4,KEY4
WPAT5000  PACK      AGEDATE,ADATE
          CALL      CALCAGE                 * Calculate age
          IF        PSAGEDAY<29
            MOVE      ZERO,FORM4
            UNPACK    ABWGHT,DIM2,KEY4
            MOVE      KEY4,FORM4
            IF        FORM4=0
              MOVE      "Missing an admission weight",ERRMSG
              CALL      EMSG0000            * Print an error message
            ENDIF
          ENDIF
          BRANCH    VALDFLG,WPAT9000        * Only validating data, exit
.
          REP       " 0",KEY4
          IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;KEY4
          ELSE
            WRITE     EXTFILE1,SEQ;KEY4;
          ENDIF
.
          BRANCH    OPTION,WPAT9000         * V2.1 EDI
.
          IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;ZERO
          ELSE
            WRITE     EXTFILE1,SEQ;ZERO;
          ENDIF
.
WPAT9000  MOVE      ZERO,EXIT
WPAT9999  RETURN
+
.******************************************************************************
.*                                  WEPD0000              Called by: VALD0000 *
.*                            Write Episode Details                & WRIT0000 *
.******************************************************************************
WEPD0000  BRANCH    VALDFLG,WEPD1000        * Only validating data
.
          MOVE      "~EPD",KEY4
          PACK      KEY15,ADMINO,SP20
          SQUEEZE   KEY15
          PACK      KEY15,KEY15,SP20
          WRITE     EXTFILE1,SEQ;KEY4,KEY15;
.
          MOVE      SP2,KEY2
WEPD1000  MATCH     SP3,ATYPE
          IF        @EQUAL
            MOVE      "Blank admission type",ERRMSG
            CALL      EMSG0000              * Print an error message
            GOTO      WEPD2000
          ENDIF
.
          PACK      KEY5,ANSA,SP1,ATYPE
          CALL      RDCODE1                 * Read a codes file record
          IF        OVRCD=1
            MOVE      "Missing admission type",ERRMSG
            CALL      EMSG0000              * Print an error message
            GOTO      WEPD2000
          ENDIF
.
          IF        TCFORM6<1 | TCFORM6>14
            MOVE  "Invalid PCS episode type code (Category A, assoc no)",ERRMSG
            CALL      EMSG0000              * Print an error message
            GOTO      WEPD2000
          ENDIF
.
          LOAD      KEY2,TCFORM6,CATD1,CATD2,CATD3,CATD4,CATAM:
                                 CATME,CATSU,CATAS,CATOB,CATPS:
                                 CATRE,CATNH,CATEC,CATOT * PCS episode type
.
WEPD2000  IF        VALDFLG<>1
            WRITE     EXTFILE1,SEQ;KEY2;
          ENDIF
.
          MOVE      ACARE,ACODE             * Admin file care class
          PACK      KEY24,ADMINO,ZED30
          CALL      RDSCHCO1                * Position on & read a code changes
WEPD3000  CALL      RDPCHCO1                  file record
          BRANCH    OVRCD,WEPD4000
.
          MATCH     ADMINO,CHADMN
          GOTO      WEPD4000 IF NOT EQUAL   * Different admin no
.
          MATCH     CHDATE,PINVDTE
          GOTO      WEPD4000 IF LESS        * Invoice date < code change date
.
          MATCH     "CC",CHCATG
          GOTO      WEPD3000 IF NOT EQUAL   * Not the care class category
.
          MOVE      CHCODE,ACODE            * Code changes file care class
.
WEPD4000  MOVE      SP2,KEY2
          MATCH     SP3,ACODE
          IF        @EQUAL
            MOVE      "Blank care class code",ERRMSG
            CALL      EMSG0000              * Print an error message
            GOTO      WEPD5000
          ENDIF
.
          PACK      KEY5,ANSC,ANSC,ACODE
          CALL      RDCODE1                 * Read a codes file record
          IF        OVRCD=1
            MOVE      "Missing care class code",ERRMSG
            CALL      EMSG0000              * Print an error message
            GOTO      WEPD5000
          ENDIF
.
          IF        TCFORM6<1 | TCFORM6>10
     MOVE "Invalid type of episode of care code (Category CC, assoc no)",ERRMSG
            CALL      EMSG0000              * Print an error message
            GOTO      WEPD5000
          ENDIF
.
          LOAD      KEY2,TCFORM6,TEN,TWENTY1,TWENTY2,TWENTY3,THIRTY1:
                                 THIRTY2,THIRTY3,FORTY,FIFTY,SIXTY * Eps type
.
WEPD5000  BRANCH    VALDFLG,WEPD6000        * Only validating data
.
          MOVE      ANSA,KEY1A              * Default accom status to admitted
          WRITE     EXTFILE1,SEQ;KEY2,KEY1A;
.
          CALL      PATGILOS                * Get intended LOS
          UNPACK    ADATE,CCENT,CYEAR,CMON,CDAY * Admin date
          WRITE     EXTFILE1,SEQ;KEY1,ZERO4,CDAY,CMON,CCENT,CYEAR;
.
          MOVE      SP2,KEY2
WEPD6000  MATCH     SP8,DDATE
          GOTO      WEPD7000 IF EQUAL       * Patient not discharged
.
          MOVE      "09",KEY2               * Default separation mode to other
          MOVE      CATDD,TCODE
          LOAD      TCODE,PTCNDRSM,CATD,CATDD
          MOVE      DDEST,ACODE
          LOAD      ACODE,PTCNDRSM,DSTAT,DDEST
          MATCH     SP3,ACODE
          GOTO      WEPD7000 IF EQUAL       * Blank separation mode
.
          PACK      KEY5,TCODE,ACODE
          CALL      RDCODE1                 * Read a codes file record
          BRANCH    OVRCD,WEPD7000
.
          TYPE      TCINDC5
          IF        !@EQUAL
            MOVE      "Invalid type of separation mode",ERRMSG
            CALL      EMSG0000              * Print an error message
            GOTO      WEPD7000
          ENDIF
.
          MOVE      ZERO,FORM1
          MOVE      TCINDC5,FORM1
          IF        FORM1<1 | FORM1>9
            MOVE      "Invalid type of separation mode",ERRMSG
            CALL      EMSG0000              * Print an error message
            GOTO      WEPD7000
          ENDIF
.
          PACK      KEY2,ZERO,TCINDC5       * Separation mode
WEPD7000  BRANCH    VALDFLG,WEPD8000        * Only validating data
.
          UNPACK    DDATE,CCENT,CYEAR,CMON,CDAY * Disch date
          WRITE     EXTFILE1,SEQ;CDAY,CMON,CCENT,CYEAR,KEY2;
.
          MOVE      ADATE,FROMDATE          * From date is the admin date
          UNPACK    CURRDATE,TODATE         * Default to date to current date
          MATCH     SP8,DDATE
          IF        !@EQUAL
            MOVE      DDATE,TODATE          * To date is the disch date
          ENDIF
          CALL      NHOSPDAY                * Calculate no of days in hospital
          MOVE      NBRDAYS,KEY4
          REP       " 0",KEY4
          UNPACK    ATIME,CHOUR,KEY1,CMIN,KEY3 * Admin time
          REP       " 0",CHOUR
          REP       " 0",CMIN
.
          WRITE     EXTFILE1,SEQ;KEY4,CHOUR,CMIN;
.
          MOVE      SP4,KEY4
          MATCH     SP8,DTIME
          IF        !@EQUAL
            UNPACK    DTIME,CHOUR,KEY1,CMIN,KEY3 * Disch time
            PACK      KEY4,CHOUR,CMIN
            REP       " 0",KEY4
          ENDIF
.
          IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;KEY4
          ELSE
            WRITE     EXTFILE1,SEQ;KEY4;
          ENDIF
.
WEPD8000  BRANCH    OPTION,WEPD9000         * V2.1 EDI
.
          MOVE      NINE,KEY1               * Default source of referral
          PACK      KEY5,ANSS,SP1,ASRCE
          CALL      RDCODE1                 * Read a codes file record
          IF        OVRCD=1
            MOVE      "Missing source of refferal data",ERRMSG
            CALL      EMSG0000              * Print an error message
            GOTO      WEPD8500
          ENDIF
.
          TYPE      TCINDC3                 * Is numeric ?
          IF        @EQUAL
            MOVE      TCINDC3,FORM1
            IF        FORM1<0 | FORM1>9 | FORM1=3
              MOVE      "Invalid source of referral",ERRMSG
              CALL      EMSG0000              * Print an error message
              GOTO      WEPD8500
            ELSE
              MOVE      TCINDC3,KEY1
            ENDIF
          ELSE
            MOVE      "Invalid source of referral",ERRMSG
            CALL      EMSG0000              * Print an error message
            GOTO      WEPD8500
          ENDIF
.
WEPD8500  BRANCH    VALDFLG,WEPD9000        * Only validating data, exit
.
          IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;KEY1,ZERO2,SP1,ZERO2,SP1,ZERO
          ELSE
            WRITE     EXTFILE1,SEQ;KEY1,ZERO2,SP1,ZERO2,SP1,ZERO;
          ENDIF
.
WEPD9000  MOVE      ZERO,EXIT
WEPD9999  RETURN
+
.******************************************************************************
.*                                  WSVB0000              Called by: VALD0000 *
.*                      Write Bungle/Single Value Details          & WRIT0000 *
.******************************************************************************
WSVB0000  BRANCH    VALDFLG,WSVB9000        * Only validating data, exit
.
          COMPARE   ONE,INVRECCT
          GOTO      WSVB9000 IF NOT EQUAL   * Not the 1st invoice for admin
.
          MATCH     ANSY,PTMICMXP
          GOTO      WSVB9000 IF NOT EQUAL   * No casemix accom charge on invoice
.
          MOVE      PTMIPCMX,KEY9           * Default casemix code to prov DRG
          MATCH     SP8,DDATE
          GOTO      WSVB1000 IF EQUAL       * Patient not discharged
.
          MATCH     DDATE,PINVDTE
          GOTO      WSVB1000 IF LESS        * Invoice date < disch date
.
          MOVE      PTDSDDRG,KEY9           * Default casemix code to disch DRG
          MATCH     SP9,PTINCMCD
          IF        !@EQUAL
            MOVE      PTINCMCD,KEY9         * Default casemix code to invoice
          ENDIF
.
WSVB1000  PACK      KEY11,KEY9,SP20
          MATCH     SP20,KEY11
          GOTO      WSVB9000 IF EQUAL       * No casemix code
.
          MOVE      ANSC,KEY1A              * Code type - MBS
          PACK      KEY4,KEY11
          PACK      KEY7,KEY4,SP10                                    *I-137125
...       CALL      RDPTDGW1                * Read a DRG file record
          CALL      RSPTDGW1
          CALL      RKPTDGW1                                          *I-137125
          IF        OVRCD<>1
            MATCH     KEY4,PTDWDRGC                                   *I-137125
            IF        @EQUAL
              MOVE      ANSD,KEY1A          * Code type - DRG
            ENDIF
          ENDIF
.
          MOVE      ZERO,FORM8P2            * Reset fixed charge amount
          PACK      KEY31,ADMINO,INVNO,ONE,SP30
          CALL      RDSDTRN3                * Position on & read a DTR file
WSVB3000  CALL      RDKDTRN3                  record
          BRANCH    OVRCD,WSVB4000
.
          MATCH     ADMINO,TADMNO
          GOTO      WSVB4000 IF NOT EQUAL   * Different admin no
.
          MATCH     INVNO,TREF
          GOTO      WSVB4000 IF NOT EQUAL   * Different invoice no
.
          COMPARE   ONE,TRECTYPE
          GOTO      WSVB4000 IF NOT EQUAL   * Not an accom record
.
          MATCH     "PY",TTYPE
          GOTO      WSVB3000 IF EQUAL       * Ignore accom payments
.
.         Increment the fixed charge amnt
.
          ASSIGN    FORM8P2+PTDTLSPT+PTDTLSRB,FORM8P2
          GOTO      WSVB3000
.
WSVB4000  COMPARE   ZERO,FORM8P2
          GOTO      WSVB9000 IF EQUAL       * No casemix accom charge on invoice
.
          MOVE      "~SVB",KEY4
          CALL      FNTL0000                * Format numeric totals
          UNPACK    INVFRDTE,CCENT,CYEAR,CMON,CDAY
          WRITE     EXTFILE1,SEQ;KEY4,KEY1A,KEY11,KEY9,KEY1:
                                 CDAY,CMON,CCENT,CYEAR;
.
          UNPACK    INVTODTE,CCENT,CYEAR,CMON,CDAY
          IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;CDAY,CMON,CCENT,CYEAR,NOINVDYS
          ELSE
            WRITE     EXTFILE1,SEQ;CDAY,CMON,CCENT,CYEAR,NOINVDYS;
          ENDIF
.
WSVB9000  MOVE      ZERO,EXIT
WSVB9999  RETURN
+
.******************************************************************************
.*                                  WACS0000              Called by: VALD0000 *
.*                     Write Accommodation Summary Details         & WRIT0000 *
.******************************************************************************
WACS0000  BRANCH    VALDFLG,WACS9000        * Only validating data, exit
.
          MOVE      "~ACS",KEY4
          UNPACK    INVFRDTE,CCENT,CYEAR,CMON,CDAY
          WRITE     EXTFILE1,SEQ;KEY4,CDAY,CMON,CCENT,CYEAR;
.
          UNPACK    INVTODTE,CCENT,CYEAR,CMON,CDAY
          WRITE     EXTFILE1,SEQ;CDAY,CMON,CCENT,CYEAR,NOINVDYS:
                                 ZERO4,NOINVDYS;
.
          MOVE      ZERO,FORM8P2            * Reset accom charge amount
          PACK      KEY31,ADMINO,INVNO,ONE,SP30
          CALL      RDSDTRN3                * Position on & read a DTR file
WACS1000  CALL      RDKDTRN3                  record
          BRANCH    OVRCD,WACS2000
.
          MATCH     ADMINO,TADMNO
          GOTO      WACS2000 IF NOT EQUAL   * Different admin no
.
          MATCH     INVNO,TREF
          GOTO      WACS2000 IF NOT EQUAL   * Different invoice no
.
          COMPARE   ONE,TRECTYPE
          GOTO      WACS2000 IF NOT EQUAL   * Not an accom record
.
          MATCH     "PY",TTYPE
          GOTO      WACS1000 IF EQUAL       * Ignore accom payments
.
          ADD       TPATAMTT,FORM8P2        * Increment the accom charge amount
          GOTO      WACS1000
.
WACS2000  CALL      FNTL0000                * Format numeric totals
          IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;KEY9,KEY1
          ELSE
            WRITE     EXTFILE1,SEQ;KEY9,KEY1;
          ENDIF
.
WACS9000  MOVE      ZERO,EXIT
WACS9999  RETURN
+
.******************************************************************************
.*                                  WACD0000              Called by: VALD0000 *
.*                         Write Accommodation Details             & WRIT0000 *
.******************************************************************************
WACD0000  MOVE      ZERO,ACCSQCNT
          MOVE      ZERO,FINFLG             * Finish flag - no
          MOVE      INVFRDTE,FROMDATE       * Admin type from date
          UNPACK    SP20,STWARD,STBED,STATYPE,STRBTYP
          MOVE      ZERO,FORM8P2
          PACK      KEY30,ADMINO,SP30
          CALL      RDSTRAN2                * Position on & read a transfer
          CALL      RDKTRAN2                  file record
          BRANCH    OVRCD,WACD9000
.
          MATCH     ADMINO,TADMN
          GOTO      WACD9000 IF NOT EQUAL   * Different admin no
.
          MATCH     ANSA,TMOVE
          GOTO      WACD9000 IF NOT EQUAL   * Not an admin record
          GOTO      WACD4500
.
WACD0500  CALL      RDKTRAN2                * Read a transfer file record
          BRANCH    OVRCD,WACD1500
.
          MATCH     ADMINO,TADMN
          GOTO      WACD1500 IF NOT EQUAL   * Different admin no
.
          MATCH     TDATE,INVFRDTE
          GOTO      WACD4500 IF NOT LESS    * Invoice from date >= transfer date
.
          MOVE      TDATE,CKYIDEF8
          PACK      KEY30,TADMN,TDATE,ZED30
          CALL      RDSTRAN2                * Position on & read a transfer
          CALL      RDPTRAN2                  file record
          BRANCH    OVRCD,WACD0500
.
          MATCH     ADMINO,TADMN
          GOTO      WACD0500 IF NOT EQUAL   * Different admin no
.
          MATCH     CKYIDEF8,TDATE
          GOTO      WACD0500 IF NOT EQUAL   * Different transfer date
.
          MATCH     INVTODTE,TDATE
          GOTO      WACD1500 IF NOT LESS    * Transfer date >= invoice to date
.
          MATCH     STWARD,TWARD
          GOTO      WACD1000 IF NOT EQUAL   * Different ward
.
          MATCH     STBED,TBED
          GOTO      WACD1000 IF NOT EQUAL   * Different bed
.
          MATCH     STATYPE,TATYPE
          GOTO      WACD1000 IF NOT EQUAL   * Different admin type
.
          MATCH     STRBTYP,TRBTYP
          GOTO      WACD1000 IF NOT EQUAL   * Different bed type
.
          MATCH     "01:00:00",TTIME
          GOTO      WACD4500 IF NOT EQUAL   * Not a stepdown rate change
.
WACD1000  MOVE      TDATE,TODATE            * Admin type to date
          GOTO      WACD2000
.
WACD1500  MOVE      ONE,FINFLG              * Finish flag - yes
          MOVE      INVTODTE,TODATE         * Admin type to date
.
WACD2000  CALL      CFIS0000                * Check for ICU/CCG stay
          BRANCH    ICUFLG,WACD4000
.
          ADD       ONE,ACCSQCNT            * Increment the accom sequence no
          MOVE      SP2,KEY2
          MATCH     SP3,STATYPE
          IF        @EQUAL
            MOVE      "Blank transfer admission type",ERRMSG
            CALL      EMSG0000              * Print an error message
            GOTO      WACD2500
          ENDIF
.
          PACK      KEY5,ANSA,SP1,STATYPE
          CALL      RDCODE1                 * Read a codes file record
          IF        OVRCD=1
            MOVE      "Missing transfer admission type",ERRMSG
            CALL      EMSG0000              * Print an error message
            GOTO      WACD2500
          ENDIF
.
          IF        TCFORM6<1 | TCFORM6>14
            MOVE  "Invalid PCS episode type code (Category A, assoc no)",ERRMSG
            CALL      EMSG0000              * Print an error message
            GOTO      WACD2500
          ENDIF
.
          LOAD      KEY2,TCFORM6,CATD1,CATD2,CATD3,CATD4,CATAM:
                                 CATME,CATSU,CATAS,CATOB,CATPS:
                                 CATRE,CATNH,CATEC,CATOT * PCS episode type
.
WACD2500  MOVE      "~ACD",KEY4
          MOVE      ACCSQCNT,KEY5
          REP       " 0",KEY5
.
          IF        VALDFLG<>1
            WRITE     EXTFILE1,SEQ;KEY4,KEY5,KEY2;
          ENDIF
.
          MOVE      SP2,KEY2
          MATCH     SP3,STRBTYP
          IF        @EQUAL
            MOVE      "Blank bed type",ERRMSG
            CALL      EMSG0000              * Print an error message
            GOTO      WACD3500
          ENDIF
.
          PACK      KEY5,ANSB,ANST,STRBTYP
          CALL      RDCODE1                 * Read a codes file record
          IF        OVRCD=1
            MOVE      "Missing bed type",ERRMSG
            CALL      EMSG0000              * Print an error message
            GOTO      WACD3500
          ENDIF
.
          MATCH     SP1,TCINDC4
          GOTO      WACD3000 IF EQUAL       * Blank indicator, error
.
          TYPE      TCINDC4
          GOTO      WACD3000 IF EQUAL       * Numeric indicator, error
.
          PACK      KEY2,TCINDC4,SP2
          MOVE      TCINDC4,KEY1
          REP       "F1L2P3S4",KEY1
          MOVE      ZERO,FORM1
          MOVE      KEY1,FORM1
          BRANCH    FORM1,WACD3500,WACD3500,WACD3500,WACD3500
.
WACD3000  MOVE      "Invalid bed level code (Category BT, 4th Ind)",ERRMSG
          CALL      EMSG0000                * Print an error message
.
WACD3500  UNPACK    FROMDATE,CCENT,CYEAR,CMON,CDAY
          IF        VALDFLG<>1
            WRITE     EXTFILE1,SEQ;KEY2,SP10,SP7,CDAY,CMON:
                                   CCENT,CYEAR;
          ENDIF
.
          PACK      SAVKEY30,TADMN,TDATE,TTIME,TWARD,TBED
          CALL      NHOSPDAY                * Calculate no of days in hospital
          MOVE      SAVKEY30,KEY30
          CALL      RDTRAN2                 * Read a transfer file record
.
          UNPACK    TODATE,CCENT,CYEAR,CMON,CDAY
          MOVE      NBRDAYS,KEY4
          REP       " 0",KEY4
          MULT      NBRDAYS,FORM8P2
          CALL      FNTL0000                * Format numeric totals
.
          IF        VALDFLG<>1
            IF        TESTFLG=1
              WRITE     EXTFILE1,SEQ;CDAY,CMON,CCENT,CYEAR,KEY4:
                                     ZERO9,KEY9,KEY1
            ELSE
              WRITE     EXTFILE1,SEQ;CDAY,CMON,CCENT,CYEAR,KEY4:
                                     ZERO9,KEY9,KEY1;
            ENDIF
          ENDIF
.
WACD4000  MOVE      TODATE,FROMDATE         * Admin type from date
WACD4500  MOVE      TWARD,STWARD            * Transfer ward
          MOVE      TBED,STBED              * Transfer bed
          MOVE      TATYPE,STATYPE          * Transfer admin type
          MOVE      TRBTYP,STRBTYP          * Transfer bed type
          ASSIGN    (TRATEF+TRATEH+PTTRADPT+PTTRADRB)-(TALLW+TDISC),FORM8P2
.
          COMPARE   ONE,FINFLG
          GOTO      WACD0500 IF NOT EQUAL   * Not the last trans rec for admin
.
WACD9000  MOVE      ZERO,EXIT
WACD9999  RETURN
+
.******************************************************************************
.*                                  WCCG0000              Called by: VALD0000 *
.*                         Write Critical Care Details             & WRIT0000 *
.******************************************************************************
WCCG0000  MOVE      ZERO,ACCSQCNT
          MOVE      ZERO,FINFLG             * Finish flag - no
          MOVE      INVFRDTE,FROMDATE       * Admin type from date
          UNPACK    SP20,STWARD,STBED,STATYPE,STRBTYP
          MOVE      ZERO,FORM8P2
          PACK      KEY30,ADMINO,SP30
          CALL      RDSTRAN2                * Position on & read a transfer
          CALL      RDKTRAN2                  file record
          BRANCH    OVRCD,WCCG9000
.
          MATCH     ADMINO,TADMN
          GOTO      WCCG9000 IF NOT EQUAL   * Different admin no
.
          MATCH     ANSA,TMOVE
          GOTO      WCCG9000 IF NOT EQUAL   * Not an admin record
          GOTO      WCCG5500
.
WCCG0500  CALL      RDKTRAN2                * Read a transfer file record
          BRANCH    OVRCD,WCCG1500
.
          MATCH     ADMINO,TADMN
          GOTO      WCCG1500 IF NOT EQUAL   * Different admin no
.
          MATCH     TDATE,INVFRDTE
          GOTO      WCCG5500 IF NOT LESS    * Invoice from date >= transfer date
.
          MOVE      TDATE,CKYIDEF8
          PACK      KEY30,TADMN,TDATE,ZED30
          CALL      RDSTRAN2                * Position on & read a transfer
          CALL      RDPTRAN2                  file record
          BRANCH    OVRCD,WCCG0500
.
          MATCH     ADMINO,TADMN
          GOTO      WCCG0500 IF NOT EQUAL   * Different admin no
.
          MATCH     CKYIDEF8,TDATE
          GOTO      WCCG0500 IF NOT EQUAL   * Different transfer date
.
          MATCH     INVTODTE,TDATE
          GOTO      WCCG1500 IF NOT LESS    * Transfer date >= invoice to date
.
          MATCH     STWARD,TWARD
          GOTO      WCCG1000 IF NOT EQUAL   * Different ward
.
          MATCH     STBED,TBED
          GOTO      WCCG1000 IF NOT EQUAL   * Different bed
.
          MATCH     STATYPE,TATYPE
          GOTO      WCCG1000 IF NOT EQUAL   * Different admin type
.
          MATCH     STRBTYP,TRBTYP
          GOTO      WCCG1000 IF NOT EQUAL   * Different bed type
.
          MATCH     "01:00:00",TTIME
          GOTO      WCCG5500 IF NOT EQUAL   * Not a stepdown rate change
.
WCCG1000  MOVE      TDATE,TODATE            * Admin type to date
          GOTO      WCCG2000
.
WCCG1500  MOVE      ONE,FINFLG              * Finish flag - yes
          MOVE      INVTODTE,TODATE         * Admin type to date
.
WCCG2000  CALL      CFIS0000                * Check for ICU/CCG stay
          COMPARE   ONE,ICUFLG
          GOTO      WCCG5000 IF NOT EQUAL   * Not an ICU/CCG stay
.
          ADD       ONE,ACCSQCNT            * Increment the accom sequence no
          MOVE      SP3,KEY3
          BRANCH    PTCNHCCC,WCCG3000       * Using bed type for ICU/CCG stay
.
          MATCH     SP3,STATYPE
          IF        @EQUAL
            MOVE      "Blank transfer admission type",ERRMSG
            CALL      EMSG0000              * Print an error message
            GOTO      WCCG4500
          ENDIF
.
          PACK      KEY5,ANSA,SP1,STATYPE
          CALL      RDCODE1                 * Read a codes file record
          IF        OVRCD=1
            MOVE      "Missing transfer admission type",ERRMSG
            CALL      EMSG0000              * Print an error message
            GOTO      WCCG4500
          ENDIF
.
          TYPE      TCINDC9
          GOTO      WCCG2500 IF NOT EQUAL   * Not numeric, error
.
          MOVE      TCINDC9,FORM1
          BRANCH    FORM1,WCCG4000,WCCG4000,WCCG4000,WCCG4000,WCCG4000:
                          WCCG4000,WCCG4000
.
WCCG2500  MOVE      "Invalid CC type code (Category A, assoc no)",ERRMSG
          CALL      EMSG0000                * Print an error message
          GOTO      WCCG4500
.
WCCG3000  MATCH     SP3,STRBTYP
          IF        @EQUAL
            MOVE      "Blank bed type",ERRMSG
            CALL      EMSG0000              * Print an error message
            GOTO      WCCG4500
          ENDIF
.
          PACK      KEY5,ANSB,ANST,STRBTYP
          CALL      RDCODE1                 * Read a codes file record
          IF        OVRCD=1
            MOVE      "Missing bed type",ERRMSG
            CALL      EMSG0000              * Print an error message
            GOTO      WCCG4500
          ENDIF
.
          TYPE      TCINDC9
          GOTO      WCCG3500 IF NOT EQUAL   * Not numeric, error
.
          MOVE      TCINDC9,FORM1
          BRANCH    FORM1,WCCG4000,WCCG4000,WCCG4000,WCCG4000,WCCG4000:
                          WCCG4000,WCCG4000
.
WCCG3500  MOVE      "Invalid CC type code (Category BT, assoc no)",ERRMSG
          CALL      EMSG0000                * Print an error message
          GOTO      WCCG4500
.
WCCG4000  LOAD      KEY3,FORM1,CATICU,CATHDU,CATCCU,CATSCN,CATPCU:
                               CATNCU,CATADN * CC type code
.
WCCG4500  MOVE      "~CCG",KEY4
          MOVE      ACCSQCNT,KEY5
          REP       " 0",KEY5
.
          UNPACK    FROMDATE,CCENT,CYEAR,CMON,CDAY
          IF        VALDFLG<>1
            WRITE     EXTFILE1,SEQ;KEY4,KEY5,KEY3,ZERO,SP1:
                                   SP10,SP1,CDAY,CMON,CCENT:
                                   CYEAR;
          ENDIF
.
          PACK      SAVKEY30,TADMN,TDATE,TTIME,TWARD,TBED
          CALL      NHOSPDAY                * Calculate no of days in hospital
          MOVE      SAVKEY30,KEY30
          CALL      RDTRAN2                 * Read a transfer file record
.
          UNPACK    TODATE,CCENT,CYEAR,CMON,CDAY
          MOVE      NBRDAYS,KEY4
          REP       " 0",KEY4
          MULT      NBRDAYS,FORM8P2
          CALL      FNTL0000                * Format numeric totals
          BRANCH    VALDFLG,WCCG5000        * Only validating data
.
          WRITE     EXTFILE1,SEQ;CDAY,CMON,CCENT,CYEAR,KEY4:
                                 ZERO9,KEY9,KEY1;
          IF        OPTION=1
            IF        TESTFLG=1
              WRITE     EXTFILE1,SEQ;
            ELSE
              WRITE     EXTFILE1,SEQ;;
            ENDIF
          ELSE
            IF        TESTFLG=1
              WRITE     EXTFILE1,SEQ;ZERO4
            ELSE
              WRITE     EXTFILE1,SEQ;ZERO4;
            ENDIF
          ENDIF
.
WCCG5000  MOVE      TODATE,FROMDATE         * Admin type from date
WCCG5500  MOVE      TWARD,STWARD            * Transfer ward
          MOVE      TBED,STBED              * Transfer bed
          MOVE      TATYPE,STATYPE          * Transfer admin type
          MOVE      TRBTYP,STRBTYP          * Transfer bed type
          ASSIGN    (TRATEF+TRATEH+PTTRADPT+PTTRADRB)-(TALLW+TDISC),FORM8P2
.
          COMPARE   ONE,FINFLG
          GOTO      WCCG0500 IF NOT EQUAL   * Not the last trans rec for admin
.
WCCG9000  MOVE      ZERO,EXIT
WCCG9999  RETURN
+
.******************************************************************************
.*                                  WPSG0000              Called by: VALD0000 *
.*                      Write Principal Services Details           & WRIT0000 *
.******************************************************************************
WPSG0000  BRANCH    VALDFLG,WPSG3000        * Only validating data
.
          MOVE      ANSC,KEY1A              * Ser code type ind - always C (MBS)
          PACK      KEY31,ADMINO,INVNO,TWO,SP30
          CALL      RDSDTRN3                * Position on & read a DTR file
          CALL      RDKDTRN3                  record
          BRANCH    OVRCD,WPSG9000
.
          MATCH     ADMINO,TADMNO
          GOTO      WPSG9000 IF NOT EQUAL   * Different admin no
.
          MATCH     INVNO,TREF
          GOTO      WPSG9000 IF NOT EQUAL   * Different invoice no
.
          COMPARE   TWO,TRECTYPE
          GOTO      WPSG9000 IF NOT EQUAL   * Not a theatre record
.
          MOVE      "~PSG",KEY4
          MOVE      INVRECCT,KEY5
          REP       " 0",KEY5
          PACK      KEY11,TITEMNO,SP20
          PACK      KEY8,TFDAY,TFMONTH,TFCENT,TFYEAR
          REP       " 0",KEY8
          MOVE      TPATAMTT,FORM8P2
          CALL      FNTL0000                * Format numeric totals
.
          WRITE     EXTFILE1,SEQ;KEY4,KEY5,KEY1A,KEY11,KEY8:
                                 SP2,KEY9;
.
WPSG1000  CALL      RDKDTRN3                * Read a next DTR file record
          BRANCH    OVRCD,WPSG2000
.
          MATCH     ADMINO,TADMNO
          GOTO      WPSG2000 IF NOT EQUAL   * Different admin no
.
          MATCH     INVNO,TREF
          GOTO      WPSG2000 IF NOT EQUAL   * Different invoice no
.
          COMPARE   TWO,TRECTYPE
          GOTO      WPSG2000 IF NOT EQUAL   * Not a theatre record
.
          ADD       TPATAMTT,FORM8P2
          GOTO      WPSG1000
.
WPSG2000  CALL      FNTL0000                * Format numeric totals
          WRITE     EXTFILE1,SEQ;KEY9,ZERO2;
.
WPSG3000  MOVE      KEY1,KEY1A
          CALL      PATGILOS                * Get intended LOS
          MOVE      KEY1,FORM1
          MOVE      FORM1,LOFSTAY           * Save intended LOS
          COMPARE   TWO,FORM1
          GOTO      WPSG4000 IF NOT EQUAL   * Sameday patient
.
          BRANCH    VALDFLG,WPSG9000        * Only validating data, exit
.
          IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;ZERO4,SP1,KEY1A
          ELSE
            WRITE     EXTFILE1,SEQ;ZERO4,SP1,KEY1A;
          ENDIF
          GOTO      WPSG9000              
.
WPSG4000  PACK      KEY11,ADMINO,SP10
          CALL      RDSMMBS1                * Position on & read a patient MBS
          CALL      RDKMMBS1                  file record
          BRANCH    OVRCD,WPSG5000
.
          MATCH     ADMINO,MMADMN
          GOTO      WPSG5000 IF NOT EQUAL   * Different admin no
.
          MOVE      MMSTIM,STRTTME
          MOVE      MMETIM,ENDTME
          CALL      CTIM0000                * Calculate time
          COMPARE   ONE,EXIT
          GOTO      WPSG6000 IF NOT EQUAL   * Valid theatre time
.
WPSG5000  PACK      KEY16,ADMINO,SP20                                 *C-240107
          CALL      RSPTECO2                * Position on & read a patient
          CALL      RKPTECO2                  episode operation file record
          BRANCH    OVRCD,WPSG6000
.
          MATCH     ADMINO,PTEOADMN
          GOTO      WPSG6000 IF NOT EQUAL   * Different admin no
.
          MOVE      PTEOSTTM,STRTTME
          MOVE      PTEOEDTM,ENDTME
          CALL      CTIM0000                * Calculate time
.
WPSG6000  IF        FORM4=0
            MOVE      "Warning ADM type: ",ERRMSG
            PACK      ERRMSG,ERRMSG,ATYPE
            ENDSET    ERRMSG
            APPEND    " : No time in theatre or procedure room",ERRMSG
            RESET     ERRMSG
            CALL      PMSG0000              * Print warning message
          ENDIF
.
          MOVE      SP1,KEY1B
          BRANCH    OPRFLG,WPSG8000         * Not using OPR, error
.
          PACK      KEY31,ADMINO,SP30
          CALL      RSOPDEA2                * Position on & operation detail
          CALL      RKOPDEA2                  file record
          BRANCH    OVRCD,WPSG8000
.
          MOVE      ADMINO,CKYIDEF8
          MATCH     CKYIDEF8,OPDAADMN
          GOTO      WPSG8000 IF NOT EQUAL   * Different admin no
.
          MATCH     SP3,OPDAANAE
          GOTO      WPSG7000 IF EQUAL       * Blank anaesthetic code
.
          PACK      KEY5,ANSO,ANSA,OPDAANAE
          CALL      RDCODE1                 * Read a codes file record
          BRANCH    OVRCD,WPSG7000
.
          TYPE      TCINDC1
          GOTO      WPSG7000 IF NOT EQUAL   * Non numeric anaesthetic type
.
          MOVE      ZERO,FORM1
          MOVE      TCINDC1,FORM1
          BRANCH    FORM1,WPSG8000,WPSG8000,WPSG8000,WPSG8000
.
WPSG7000  MOVE      "Invalid anaesthetic type code",ERRMSG
          COMPARE   TWO,LOFSTAY
          IF        @EQUAL
            CALL      EMSG0000              * Print an error message
          ELSE
            CALL      PMSG0000              * Print a warning message
          ENDIF
.
WPSG8000  BRANCH    VALDFLG,WPSG9000        * Only validating data, exit
.
          MOVE      FORM4,KEY4
          REP       " 0",KEY4
          MOVE      TCINDC1,KEY1B
          REP       "1L2G3R4I",KEY1B
.
          IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;KEY4,KEY1B,KEY1A
          ELSE
            WRITE     EXTFILE1,SEQ;KEY4,KEY1B,KEY1A;
          ENDIF
.
WPSG9000  MOVE      ZERO,EXIT
WPSG9999  RETURN
+
.******************************************************************************
.*                                  WMSG0000              Called by: VALD0000 *
.*                       Write Multiple Services Details           & WRIT0000 *
.******************************************************************************
WMSG0000  BRANCH    VALDFLG,WMSG9000        * Only validating data, exit
.
          MOVE      ZERO,FORM5
          MOVE      ANSC,KEY1A              * Ser code type ind - always C (MBS)
          PACK      KEY31,ADMINO,INVNO,TWO,SP30
          CALL      RDSDTRN3                * Position on & read a DTR file
WMSG1000  CALL      RDKDTRN3                  record
          BRANCH    OVRCD,WMSG9000
.
          MATCH     ADMINO,TADMNO
          GOTO      WMSG9000 IF NOT EQUAL   * Different admin no
.
          MATCH     INVNO,TREF
          GOTO      WMSG9000 IF NOT EQUAL   * Different invoice no
.
          COMPARE   TWO,TRECTYPE
          GOTO      WMSG9000 IF NOT EQUAL   * Not a theatre record
.
          ADD       ONE,FORM5               * Increment multi ser sequence no
          BRANCH    FORM5,WMSG1000          * Ignore 1st record
.
          MOVE      "~MSG",KEY4
          MOVE      FORM5,KEY5
          REP       " 0",KEY5
          PACK      KEY11,TITEMNO,SP20
          MOVE      TPATAMTT,FORM8P2
          CALL      FNTL0000                * Format numeric totals
.
          IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;KEY4,KEY5,KEY1A,KEY11,KEY9:
                                   KEY1
          ELSE
            WRITE     EXTFILE1,SEQ;KEY4,KEY5,KEY1A,KEY11,KEY9:
                                   KEY1;
          ENDIF
          GOTO      WMSG1000
.
WMSG9000  MOVE      ZERO,EXIT
WMSG9999  RETURN
+
.******************************************************************************
.*                                  WMIG0000              Called by: VALD0000 *
.*                    Write Miscellaneous Services Details         & WRIT0000 *
.******************************************************************************
WMIG0000  BRANCH    VALDFLG,WMIG9000        * Only validating data, exit
.
          MOVE      ZERO,FORM5
          MOVE      ANSC,KEY1               * Ser code type ind - always C (MBS)
          PACK      KEY31,ADMINO,INVNO,THREE,SP30
          CALL      RDSDTRN3                * Position on & read a DTR file
WMIG1000  CALL      RDKDTRN3                  record
          BRANCH    OVRCD,WMIG9000
.
          MATCH     ADMINO,TADMNO
          GOTO      WMIG9000 IF NOT EQUAL   * Different admin no
.
          MATCH     INVNO,TREF
          GOTO      WMIG9000 IF NOT EQUAL   * Different invoice no
.
          COMPARE   THREE,TRECTYPE
          GOTO      WMIG9000 IF NOT EQUAL   * Not a miscell charge record
.
          MOVE      SP10,PTMCEDIE
          CALL      GEEC0000                * Get EDI equivalent code
          BRANCH    EXIT,WMIG1000
.
          MOVE      "~MIG",KEY4
          ADD       ONE,FORM5               * Increment multi ser sequence no
          MOVE      FORM5,KEY5
          REP       " 0",KEY5
          PACK      KEY8,TFDAY,TFMONTH,TFCENT,TFYEAR
          REP       " 0",KEY8
.
          MOVE      TSERVS,FORM2
          MOVE      FORM2,KEY2A
          REP       " 0",KEY2A
          MATCH     "00",KEY2A
          IF        @EQUAL
            MOVE      "01",KEY2A
          ENDIF
.
          MOVE      TPATAMTT,FORM8P2
          CALL      FNTL0000                * Format numeric totals
          PACK      KEY10,PTMCEDIE,SP20     * EDI Equivalent
.
          IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;KEY4,KEY5,KEY10,SP30,KEY8:
                                   KEY2A,ZERO9,KEY9,KEY1
          ELSE
            WRITE     EXTFILE1,SEQ;KEY4,KEY5,KEY10,SP30,KEY8:
                                   KEY2A,ZERO9,KEY9,KEY1;
          ENDIF
          GOTO      WMIG1000
.
WMIG9000  MOVE      ZERO,EXIT
WMIG9999  RETURN
+
.******************************************************************************
.*                                  WDMG0000              Called by: VALD0000 *
.*                         Write DRG Morbidity Details             & WRIT0000 *
.******************************************************************************
WDMG0000  BRANCH    VALDFLG,WDMG1000        * Only validating data, exit
.
          MOVE      ZERO,CODCNT
          REPEAT
            ADD       ONE,CODCNT
            MOVE      SP7,DISARY[CODCNT]
            MOVE      SP7,OPRARY[CODCNT]
          UNTIL     CODCNT>=20
          MOVE      ZERO,CODCNT
.
          PERFORM   OPTION,GI9C0000,GI9C0000,GI1C0000 * Get ICD9/ICD10 codes
          BRANCH    EXIT,WDMG9000
.
          MOVE      "~DMG",KEY4;
          WRITE     EXTFILE1,SEQ;KEY4;
          PERFORM   OPTION,WV1C0000,WV2C0000,WV2C0000 * Write V2.1/V2.2 codes
.
          MOVE      ZERO4,KEY4
          PACK      KEY8,ADMINO
          CALL      RDPTICU1                * Read an ICU file record
          IF        OVRCD<>1
            MOVE      PTICUMEC,FORM4        * (form 5 to form 4)      *C-250267
            MOVE      FORM4,KEY4                                      *I-250267
            REP       " 0",KEY4
          ENDIF
.
          WRITE     EXTFILE1,SEQ;KEY4;
.
WDMG1000  CALL      GETDRG                  * Get DRG & MDC codes
          MATCH     SP3,DRGVER
          IF        @EQUAL
            MOVE      "Blank DRG version number",ERRMSG
            CALL      EMSG0000              * Print an error message
          ENDIF
          BRANCH    VALDFLG,WDMG9000        * Only validating data, exit
.
          PACK      KEY4,DDRGCODE,SP4
          UNPACK    DRGVER,KEY1,KEY2
.
          IF        TESTFLG=1
            WRITE     EXTFILE1,SEQ;KEY4,KEY2
          ELSE
            WRITE     EXTFILE1,SEQ;KEY4,KEY2;
          ENDIF
.
WDMG9000  MOVE      ZERO,EXIT
WDMG9999  RETURN
+
.******************************************************************************
.*                                  WTLR0000              Called by: VALD0000 *
.*                            Write Trailer Details                & WRIT0000 *
.******************************************************************************
WTLR0000  BRANCH    VALDFLG,WTLR9000        * Only validating data, exit
.
          MOVE      "~TLR",KEY4
          MOVE      TOTAMTCT,KEY10
          UNPACK    KEY10,KEY7,KEY1,KEY2
          PACK      KEY9,KEY7,KEY2          * Total claim amount
          REP       " 0",KEY9
          MOVE      TOTRECCT,KEY5
          REP       " 0",KEY5
.
          WRITE     EXTFILE1,SEQ;KEY4,KEY5,KEY9
.
WTLR9000  MOVE      ZERO,EXIT
WTLR9999  RETURN
+
.******************************************************************************
.*                                  KILL0000              Called by: ML0000   *
.*                             Delete The Tempfile                 & OPEN0000 *
.******************************************************************************
KILL0000  CLOSE     TEMP1
          CLOSE     TEMP2
.
          CLEAR     KEY99
          APPEND    "iserase ",KEY99
          APPEND    FNAMEA,KEY99
          RESET     KEY99
          EXECUTE   KEY99,TASKID
.
KILL9000  MOVE      ZERO,EXIT
KILL9999  RETURN
+
.******************************************************************************
.*                                  EMSG0000              Called by: Lots     *
.*                             Print Error Message                            *
.******************************************************************************
EMSG0000  COMPARE   ONE,VALDFLG
          GOTO      EMSG9000 IF NOT EQUAL   * Not validating, writing details
.
          COMPARE   "55",CLNO
          CALL      HEAD0000 IF NOT LESS    * Line counter >= 55 lines
.
          PACK      ERRMSG,ERRMSG,SP30,SP30
          PRINT     *1,"|",INVNO,"|",ADMINO,"|",ERRMSG,"|"
          ADD       ONE,CLNO
.
          MOVE      ONE,ERRFLG              * Error flag - yes
          MATCH     SAVINVNO,INVNO
          IF        !@EQUAL
            ADD       ONE,ERRCT             * Increment the error counter
            MOVE      INVNO,SAVINVNO
          ENDIF
.
EMSG9000  MOVE      ZERO,EXIT
EMSG9999  RETURN
+
.******************************************************************************
.*                                  PMSG0000              Called by: Lots     *
.*                            Print Warning Message                           *
.******************************************************************************
PMSG0000  COMPARE   ONE,VALDFLG
          GOTO      PMSG9000 IF NOT EQUAL   * Not validating, writing details
.
          COMPARE   "55",CLNO
          CALL      HEAD0000 IF NOT LESS    * Line counter >= 55 lines
.
          PACK      ERRMSG,ERRMSG,SP30,SP30
          PRINT     *1,"|",INVNO,"|",ADMINO,"|",ERRMSG,"|"
          ADD       ONE,CLNO
.
          MATCH     SAVINVN2,INVNO
          IF        !@EQUAL
            ADD       ONE,WARCT             * Increment the warning counter
            MOVE      INVNO,SAVINVN2
          ENDIF
.
PMSG9000  MOVE      ZERO,EXIT
PMSG9999  RETURN
+
.******************************************************************************
.*                                  FNTL0000              Called by: Lots     *
.*                            Format Numeric Totals                           *
.******************************************************************************
FNTL0000  PACK      KEY11A,SP10,SP1
          MOVE      FORM8P2,KEY11A
          UNPACK    KEY11A,KEY1,KEY7,KEY1,KEY2
          PACK      KEY9,KEY7,KEY2
.
          MOVE      SP1,KEY1
          IF        FORM8P2=0
            MOVE      "I",KEY1              * Credit charge indic - info only
          ENDIF
.
          SCAN      "-",KEY9
          IF        @EQUAL
            RESET     KEY9
            REP       "- ",KEY9
            MOVE      "C",KEY1              * Credit charge indic - credit
          ENDIF
          REP       " 0",KEY9
.
FNTL9000  MOVE      ZERO,EXIT
FNTL9999  RETURN
+
.******************************************************************************
.*                                  CFIS0000              Called by: WACD0000 *
.*                           Check For ICU/CCG Stay                & WCCG0000 *
.******************************************************************************
CFIS0000  MOVE      ZERO,ICUFLG             * ICU stay flag - no
          BRANCH    PTCNHCCC,CFIS1000       * Using bed type for ICU/CCG stay
.
          MATCH     SP3,STATYPE
          GOTO      CFIS9000 IF EQUAL       * Blank admin type
.
          PACK      KEY5,ANSA,SP1,STATYPE
          CALL      RDCODE1                 * Read a codes file record
          BRANCH    OVRCD,CFIS9000
          GOTO      CFIS2000
.
CFIS1000  MATCH     SP3,STRBTYP
          GOTO      CFIS9000 IF EQUAL       * Blank bed type
.
          PACK      KEY5,ANSB,ANST,STRBTYP
          CALL      RDCODE1                 * Read a codes file record
          BRANCH    OVRCD,CFIS9000
.
CFIS2000  TYPE      TCINDC9
          GOTO      CFIS9000 IF NOT EQUAL   * Not numeric, not an ICU stay
.
          MOVE      TCINDC9,FORM1
          BRANCH    FORM1,CFIS3000,CFIS3000,CFIS3000,CFIS3000,CFIS3000:
                          CFIS3000,CFIS3000
          GOTO      CFIS9000                * Not an ICU stay
.
CFIS3000  MOVE      ONE,ICUFLG              * ICU stay flag - yes
.
CFIS9000  MOVE      ZERO,EXIT
CFIS9999  RETURN
+
.******************************************************************************
.*                                  CTIM0000              Called by: WPSG0000 *
.*                               Calculate Time                               *
.******************************************************************************
CTIM0000  MOVE      ZERO,FORM4
          UNPACK    STRTTME,CHOUR,KEY1,CMIN
          MATCH     SP2,CHOUR
          GOTO      CTIM9500 IF EQUAL       * Invalid time
.
          MOVE      CHOUR,IHOUR
          MOVE      CMIN,IMIN
          ASSIGN    (IHOUR*60)+IMIN,FORM9
.
          UNPACK    ENDTME,CHOUR,KEY1,CMIN
          MATCH     SP2,CHOUR
          GOTO      CTIM9500 IF EQUAL       * Invalid time
.
          MOVE      CHOUR,IHOUR
          MOVE      CMIN,IMIN
          ASSIGN    (IHOUR*60)+IMIN-FORM9,FORM9
.
          IF        FORM9>=0
            MOVE      FORM9,FORM4
          ELSE
            ASSIGN    (FORM9+1440),FORM4    * 1440 = minutes in a day
          ENDIF
.
          COMPARE   ZERO,FORM4
          GOTO      CTIM9500 IF EQUAL       * Invalid time
.
CTIM9000  MOVE      ZERO,EXIT
          GOTO      CTIM9999
.
CTIM9500  MOVE      ONE,EXIT
CTIM9999  RETURN
+
.******************************************************************************
.*                                  GEEC0000              Called by: WMIG0000 *
.*                         Get The EDI Equivalent Code                        *
.******************************************************************************
GEEC0000  MOVE      ZERO,EXIT
.
          UNPACK    SP20,PTHFBCAT      * change "H/F Table" to "Table Type"
          PACK      KEY14,AFUNDH,AFNDTB,SP20
          CALL      RDFUND1            * "Table Type code" now in PTHFBCAT
.
          PACK      KEY29,ACLAIM,AFUNDH,PTHFBCAT,TITEMNO,CURRDATE,SP10
          CALL      PATMCHRD                * read Misc.Charges file 
          COMPARE   ONE,EXIT
          GOTO      GEEC1000 IF EQUAL
.
          MATCH     SP10,PTMCEDIE
          GOTO      GEEC1000 IF EOS         * No EDI equivalent code found
          GOTO      GEEC9000 IF NOT EQUAL   * EDI equivalent code found
.
.                                           * - try a blank health fund
GEEC1000  PACK      KEY29,ACLAIM,SP6,SP3,TITEMNO,CURRDATE,SP10
          CALL      PATMCHRD                * read Misc.Charges file 
          COMPARE   ONE,EXIT
          GOTO      GEEC1000 IF EQUAL
.
          MATCH     SP10,PTMCEDIE
          GOTO      GEEC1000 IF EOS         * No EDI equivalent code found
          GOTO      GEEC9000 IF NOT EQUAL   * EDI equivalent code found
.
.                                           * - last chance, try default Claim
          PACK      KEY29,PTCNDCLM,AFUNDH,PTHFBCAT,TITEMNO,CURRDATE,SP10
          CALL      PATMCHRD                * read Misc.Charges file 
          COMPARE   ZERO,EXIT
          GOTO      GEEC9000 IF EQUAL
.
          MATCH     SP10,PTMCEDIE
          GOTO      GEEC9500 IF EOS         * No EDI equivalent code found
          GOTO      GEEC9500 IF EQUAL       * Blank EDI equivalent code
.
GEEC9000  MOVE      ZERO,EXIT
          GOTO      GEEC9999
.
GEEC9500  MOVE      ONE,EXIT
GEEC9999  RETURN
+
.******************************************************************************
.*                                  GI9C0000              Called by: WDMG0000 *
.*                               Get ICD9 Codes                               *
.******************************************************************************
GI9C0000  MOVE      ZERO,CODCNT
          PACK      KEY16,ADMINO,SP20                                 *C-240107
          CALL      RSPTECD2                * Position on & read a patient
GI9C1000  CALL      RKPTECD2                  epsiode disease file record
          BRANCH    OVRCD,GI9C4000
.
          MATCH     ADMINO,PTEDADMN
          GOTO      GI9C4000 IF NOT EQUAL   * Different admin no
.
          MOVE      ZERO,CMPCNT             * Complex map counter - no
          MATCH     PTCNI10D,PTEDDTCD
          IF        !@LESS
            MOVE      PTEDCODE,PTCPCOD
            CALL      PATM10T9              * Map ICD10 to ICD9 codes
            MOVE      PTCP1MCD,PTEDCODE
            MOVE      ONE,CMPCNT            * Complex map counter - yes
          ENDIF
.
GI9C2000  PACK      KEY9,PTEDCODE
          CALL      RD10T9D1                * Read an ICD9 disease file record
          BRANCH    OVRCD,GI9C3000
.
          IF        MAPFLG=1
            PACK      KEY10,ANSD,PTEDCODE
            CALL      RDPA3MI1              * Read the 3M grouper mapping file
            IF        OVRCD<>1
              MOVE      PT3MMAP,PTEDCODE    * Replace ICD9 code with mapped code
            ENDIF
          ENDIF
.
          MATCH     ANSM,PTEDCODE
          GOTO      GI9C3000 IF EQUAL       * Don't send morphology codes
.
          ADD       ONE,CODCNT
          REP       ". - / ",PTEDCODE
          SQUEEZE   PTEDCODE
          PACK      PTEDCODE,PTEDCODE,SP10
          MOVE      PTEDCODE,DISARY[CODCNT]
.                    
          COMPARE   "20",CODCNT
          GOTO      GI9C4000 IF NOT LESS    * Code counter >= 20
.
GI9C3000  COMPARE   ZERO,CMPCNT
          GOTO      GI9C1000 IF EQUAL       * Not using complex mapping
.
          ADD       ONE,CMPCNT
          COMPARE   FOUR,CMPCNT
          GOTO      GI9C1000 IF NOT LESS    * Complex map counter >= 4
.
          MOVE      SP9,PTEDCODE
          LOAD      PTEDCODE,CMPCNT,PTCP1MCD,PTCP2MCD,PTCP3MCD
          MATCH     SP9,PTEDCODE
          GOTO      GI9C2000 IF NOT EQUAL   * Not blank code
          GOTO      GI9C1000
.
GI9C4000  COMPARE   ZERO,CODCNT
          GOTO      GI9C9500 IF EQUAL       * No coding found, exit
.
          MOVE      ZERO,CODCNT
          PACK      KEY16,ADMINO,SP20                                 *C-240107
          CALL      RSPTECO2                * Position on & read a patient
GI9C5000  CALL      RKPTECO2                  episode operation file record
          BRANCH    OVRCD,GI9C9000
.
          MATCH     ADMINO,PTEOADMN
          GOTO      GI9C9000 IF NOT EQUAL   * Different admin no
.
          MATCH     ANSX,PTEOTYPE
          GOTO      GI9C5000 IF EQUAL       * Ignore this operation code
.
          MOVE      ZERO,CMPCNT             * Complex map counter - no
          MATCH     PTCNI10D,PTEODTCD
          IF        !@LESS
            MOVE      PTEOCODE,PTCPCOD
            CALL      PATM10T9              * Map ICD10 to ICD9 codes
            MOVE      PTCP1MCD,PTEOCODE
            MOVE      ONE,CMPCNT            * Complex map counter - yes
          ENDIF
.
GI9C6000  PACK      KEY9,PTEOCODE
          CALL      RD10T9O1                * Read an ICD9 operation file record
          BRANCH    OVRCD,GI9C7000
.
          IF        MAPFLG=1
            PACK      KEY10,ANSO,PTEOCODE
            CALL      RDPA3MI1              * Read the 3M grouper mapping file
            IF        OVRCD<>1
              MOVE      PT3MMAP,PTEOCODE    * Replace ICD9 code with mapped code
            ENDIF
          ENDIF
.
          MATCH     PTCNEDRG,PTEOCODE
          GOTO      GI9C7000 IF EQUAL       * Exclude dummy code
.
          ADD       ONE,CODCNT
          REP       ". - / ",PTEOCODE
          SQUEEZE   PTEOCODE
          PACK      PTEOCODE,PTEOCODE,SP10
          MOVE      PTEOCODE,OPRARY[CODCNT]
.
          COMPARE   "20",CODCNT
          GOTO      GI9C9000 IF NOT LESS    * Code counter >= 20
.
GI9C7000  COMPARE   ZERO,CMPCNT
          GOTO      GI9C5000 IF EQUAL       * Not using complex mapping
.
          ADD       ONE,CMPCNT
          COMPARE   FOUR,CMPCNT
          GOTO      GI9C5000 IF NOT LESS    * Complex map counter >= 4
.
          MOVE      SP9,PTEOCODE
          LOAD      PTEOCODE,CMPCNT,PTCP1MCD,PTCP2MCD,PTCP3MCD
          MATCH     SP9,PTEOCODE
          GOTO      GI9C6000 IF NOT EQUAL   * Not blank code
          GOTO      GI9C5000
.
GI9C9000  MOVE      ZERO,EXIT
          GOTO      GI9C9999
.
GI9C9500  MOVE      ONE,EXIT
GI9C9999  RETURN
+
.******************************************************************************
.*                                  GI1C0000              Called by: WDMG0000 *
.*                               Get ICD10 Codes                              *
.******************************************************************************
GI1C0000  MOVE      ZERO,CODCNT
          PACK      KEY16,ADMINO,SP20                                 *C-240107
          CALL      RSPTECD2                * Position on & read a patient
GI1C1000  CALL      RKPTECD2                  epsiode disease file record
          BRANCH    OVRCD,GI1C2000
.
          MATCH     ADMINO,PTEDADMN
          GOTO      GI1C2000 IF NOT EQUAL   * Different admin no
.
          MATCH     PTCNI10D,PTEDDTCD
          IF        @LESS
            PACK      KEY9,PTEDCODE
            CALL      RD10T9D1              * Read an ICD9 disease file record
            BRANCH    OVRCD,GI1C1000
.
            MOVE      DICD10CD,PTEDCODE     * Mapped ICD10 disease code
          ENDIF
.
          PACK      KEY9,PTEDCODE
          CALL      RDPT10D1                * Read an ICD10 disease file record
          BRANCH    OVRCD,GI1C1000
.
          MATCH     "4",PT0DACRQ
          GOTO      GI1C1000 IF EQUAL       * Morphology code
.
          ADD       ONE,CODCNT
          REP       ". - / ",PTEDCODE
          SQUEEZE   PTEDCODE
          PACK      PTEDCODE,PTEDCODE,SP10
          MOVE      PTEDCODE,DISARY[CODCNT]
.
          COMPARE   "20",CODCNT
          GOTO      GI1C1000 IF LESS        * Code counter < 20
.
GI1C2000  MOVE      ZERO,CODCNT
          PACK      KEY16,ADMINO,SP20                                 *C-240107
          CALL      RSPTECO2                * Position on & read a patient
GI1C3000  CALL      RKPTECO2                  episode operation file record
          BRANCH    OVRCD,GI1C9000
.
          MATCH     ADMINO,PTEOADMN
          GOTO      GI1C9000 IF NOT EQUAL   * Different admin no
.
          MATCH     ANSX,PTEOTYPE
          GOTO      GI1C3000 IF EQUAL       * Ignore this operation code
.
          MATCH     PTCNI10D,PTEODTCD
          IF        @LESS
            PACK      KEY9,PTEOCODE
            CALL      RD10T9O1              * Read an ICD9 operation file record
            BRANCH    OVRCD,GI1C3000
.
            MOVE      OICD10CD,PTEOCODE     * Mapped ICD10 operation code
          ENDIF
.
          PACK      KEY9,PTEOCODE
          CALL      RDPT10O1                * Read an ICD10 operation file rec
          BRANCH    OVRCD,GI1C3000
.
          MATCH     PTCNEDRG,PTEOCODE
          GOTO      GI1C3000 IF EQUAL       * Exclude dummy code
.
          ADD       ONE,CODCNT
          REP       ". - / ",PTEOCODE
          SQUEEZE   PTEOCODE
          PACK      PTEOCODE,PTEOCODE,SP10
          MOVE      PTEOCODE,OPRARY[CODCNT]
.
          COMPARE   "21",CODCNT
          GOTO      GI1C3000 IF LESS        * Code counter < 21
.
GI1C9000  MOVE      ZERO,EXIT
          GOTO      GI1C9999
.
GI1C9500  MOVE      ONE,EXIT
GI1C9999  RETURN
+
.******************************************************************************
.*                                  WV1C0000              Called by: WDMG0000 *
.*                           Write Version 2.1 Codes                          *
.******************************************************************************
WV1C0000  MOVE      ONE,CODCNT
          MOVE      DISARY[CODCNT],KEY7
          WRITE     EXTFILE1,SEQ;KEY7;
          MOVE      OPRARY[CODCNT],KEY6
          WRITE     EXTFILE1,SEQ;KEY6;
.
          MOVE      TWO,CODCNT
          REPEAT
            MOVE      DISARY[CODCNT],KEY7
            WRITE     EXTFILE1,SEQ;KEY7;
            ADD       ONE,CODCNT
          UNTIL     CODCNT>15
.
          MOVE      TWO,CODCNT
          REPEAT
            MOVE      OPRARY[CODCNT],KEY6
            WRITE     EXTFILE1,SEQ;KEY6;
            ADD       ONE,CODCNT
          UNTIL     CODCNT>15
.
WV1C9000  MOVE      ZERO,EXIT
WV1C9999  RETURN
+
.******************************************************************************
.*                                  WV2C0000              Called by: WDMG0000 *
.*                           Write Version 2.2 Codes                          *
.******************************************************************************
WV2C0000  MOVE      ONE,CODCNT
          REPEAT
            MOVE      DISARY[CODCNT],KEY5
            WRITE     EXTFILE1,SEQ;KEY5;
            ADD       ONE,CODCNT
          UNTIL     CODCNT>20
.
          MOVE      ONE,CODCNT
          REPEAT
            MOVE      OPRARY[CODCNT],KEY7
            WRITE     EXTFILE1,SEQ;KEY7;
            ADD       ONE,CODCNT
          UNTIL     CODCNT>20
.
WV2C9000  MOVE      ZERO,EXIT
WV2C9999  RETURN
+
.******************************************************************************
.*                       I/O Routines For The Tempfile                        *
.******************************************************************************
RATEMP1   MOVE      ZERO,OVRCD
          RESET     KEY8
          READ      TEMP1,KEY8;ANS
          GOTO      OVERCOND IF OVER
          RETURN
.
RDTEMP1   MOVE      ZERO,OVRCD
          RESET     KEY8
          READ      TEMP1,KEY8;INVNO,DADMINO,DTERRFLG
          GOTO      OVERCOND IF OVER
          MOVE      DADMINO,ADMINO
          MOVE      DTERRFLG,TERRFLG
          RETURN
.
UPTEMP1   MOVE      ADMINO,DADMINO
          MOVE      TERRFLG,DTERRFLG
          UPDATE    TEMP1;INVNO,DADMINO,DTERRFLG
          RETURN
.
WRTEMP1   RESET     KEY8
          MOVE      ADMINO,DADMINO
          MOVE      TERRFLG,DTERRFLG
          WRITE     TEMP1,KEY8;INVNO,DADMINO,DTERRFLG
          RETURN
.
RSTEMP2   MOVE      ZERO,OVRCD
          RESET     KEY17
          READ      TEMP2,KEY17;;
          RETURN
.
RKTEMP2   MOVE      ZERO,OVRCD
          READKS    TEMP2;INVNO,DADMINO,DTERRFLG
          GOTO      OVERCOND IF OVER
          MOVE      DADMINO,ADMINO
          MOVE      DTERRFLG,TERRFLG
          RETURN
.
RPTEMP2   MOVE      ZERO,OVRCD
          READKP    TEMP2;INVNO,DADMINO,DTERRFLG
          GOTO      OVERCOND IF OVER
          MOVE      DADMINO,ADMINO
          MOVE      DTERRFLG,TERRFLG
          RETURN
+
.==============================================================================
.
          INC       STD001IO
.
          INC       CALCAGE                 * Calculate patients age
          INC       CALCDAYS                * Calculate diff between 2 dates
          INC       CLPATDSC                * Clear the disch variables
          INC       GETDRG                  * Get DRG & MDC codes
          INC       NHOSPDAY                * Calculate no of days in hospital
          INC       PATCODKY                * Keyin a codes file code
          INC       PATDEFCL                * routine DCLM0000
          INC       PATFNDKY                * Keyin a health fund
          INC       PATGILOS                * Get intended LOS
          INC       PATHGPKY                * Keyin a health fund group
          INC       PATM10T9                * Map ICD10 to ICD9 codes
          INC       PATMCHRD                * Miscellaneous Charges read routine
          INC       TFILENAM                * Generate Temp File Name
          INC       GETEFDRG
.
          INC       OPRDEAIO/INC            * Operation detail file
          INC       PAT3MIIO/INC            * ICD9 mapping file
          INC       PATCMPIO/INC            * Complex mapping file
          INC       PATCODIO/INC            * Codes file
          INC       PATCHCIO/INC            * Code changes file
          INC       PATDGWIO/INC            * DTR file
          INC       PATDSCIO/INC            * Disch file
          INC       PATDTRIO/INC            * DTR file
          INC       PATEBHIO/INC            * EDI batch header file
          INC       PATEBIIO/INC            * EDI batch invoice file
          INC       PATECDIO/INC            * Patient episode disease file
          INC       PATECOIO/INC            * Patient episode operation file
          INC       PATEDAIO/INC            * EDI audit file
          INC       PATCFAIO/INC
          INC       PATFX1IO/INC
          INC       PATFN1IO/INC            * Health fund file
          INC       PATHGPIO/INC            * Health fund group file
          INC       PATICDIO/INC            * ICD disease file
          INC       PATICOIO/INC            * ICD operation file
          INC       PATICUIO/INC            * ICU file
          INC       PATINVIO/INC            * Invoice file
          INC       PATMA1IO/INC            * Master file
          INC       PATMCHIO/INC            * Miscellaneous charges file
          INC       PATMI1IO/INC            * Admin file
          INC       PATMMBIO/INC            * Patient MBS file
          INC       PATPGRIO/INC            * patient grouper file
          INC       PATTRNIO/INC            * Transfer file
          INC       PATWC1IO/INC            * WCO file
          INC       PATWMAIO/INC            * TAC file
          INC       PATWVEIO/INC            * DVA file
          INC       PMSVX1IO/INC
          INC       PATHSPIO/INC
          INC       IBASEQIO/INC                 * Sequential Numbers File
          INC       WEBERRIO/INC                 * Web Server Error Logging
          INC       PMSEDGIO/INC       * Effective DRG Dates
+
.

