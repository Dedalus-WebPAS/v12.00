.******************************************************************************
.* System         : Private Practice                                          *
.* Program        : IBAPRI07.PBL                                              *
.* Name           : Eclipse In-Patient Medical Claims Extract                 *
.******************************************************************************
.* Date           : 05/05/2016                                                *
.* Author         : Steve Armstrong                                           *
.* Function       : Extract Eclipse In-Patient Medical Claims                 *
.*                  User is given 2 options upon entering program:            *
.*                     1. Create Health Fund Extract                          *
.*                     2. Create Medicare Only Extract                        *
.*                  Option 1 will loop through priectaf table and load any    *
.*                           unextracted records for the selected health fund *
.*                           into a temporary table from which they are then  *
.*                           displayed to the user.  The user can select      *
.*                           which records to extract, then proceed with the  *
.*                           extraction.                                      *
.*                  Option 2 will loop through priectaf table and load any    *
.*                           unextracted records without a health fund        *
.*                           into a temporary table from which they are then  *
.*                           displayed to the user.  The user can select      *
.*                           which records to extract, then proceed with the  *
.*                           extraction.                                      *
.*                                                                            *
.* Modifications  :                                                           *
.*        V11.01.02 29/10/2021  Davin            TSK 0855499                  *
.*                  Added validation for SRVSEG09 / PRDTITMN (WSRV2150)       *
.*        V11.01.01 19/03/2021  Peter Vela       TSK 0903807                  *
.*                  Removed CLM.8.1-BillingAgentId is mandatory               *
.*        V11.00.02 22/04/2020  Peter Vela       TSK 0874025                  *
.*                  Recompiled for PRIECTFD                                   *
.*        V11.00.01 17/04/2020  Peter Vela       TSK 0874025                  *
.*                  Recompiled for PRIECTFD                                   *
.*        V10.14.05 03/06/2019  Tracey Nguyen    TSK 0872823                  *
.*                  Modified WVCH5500 to first get the referring provider     *
.*                  number (VCHSEG21) from pmshclaf.pmhlprv1. If the field is *
.*                  blank or not found then read the pmshcpaf.pmshcprv1 for   *
.*                  the provider number                                       *
.*        V10.14.04 08/03/2019  Peter Vela       TSK 0871248                  *
.*                  Added Billing Agent flag for VPRN0000                     *
.*        V10.14.03 20/02/2019  Peter Vela       TSK 0870435                  *
.*                  Truncate everything after a / in ItemNum                  *
.*        V10.14.02 19/02/2019  Peter Vela       TSK 0870435                  *
.*                  Truncated ItemNum to 5 characters                         *
.*                  19/02/2019  Peter Vela       TSK 0870678                  *
.*                  Fixed Provider Number validation VPRN0000                 *
.*                  LARY0000 missing                                          *
.*        V10.14.01 04/02/2019  Peter Vela       TSK 0870052                  *
.*                  Fixed infinite loop in SRV.9.1                            *
.******************************************************************************
.*        V10.13.03 31/10/2018  Steve Armstrong  TSK 0858948                  *
.*                  Mods to still populate BillingAgentId (CLMSEG08) where    *
.*                  ClaimTypeCde is "AG" or "SC", just don't validate field   *
.*                  if not populated.                                         *
.*        V10.13.02 18/10/2018  Steve Armstrong  TSK 0858958                  *
.*                  Mods to NoOfPatientsSeen (SRVSEG12) field to be blank     *
.*                  where field is not populated.                             *
.*                  Also added further validation for other fields where      *
.*                  NoOfPatientsSeen is populated.                            *
.*                  18/10/2018  Steve Armstrong  TSK 0858948                  *
.*                  Mods to only populate BillingAgentId (CLMSEG08) where     *
.*                  ClaimTypeCde is "MO" or "MB".                             *
.*        V10.13.01 26/07/2018  J.Tan         TSK 0848506                     *
.*                  Changed PP Doctor from DIM6 to DIM10                      *
.******************************************************************************
.*        V10.11.11 12/12/2017  Peter Vela       TSK 0849662                  *
.*                  Modified ReferralOverrideTypeCde not to have a default    *
.*                  value                                                     *
.*                  Right justify and zero fill ReferralPeriod                *
.*        V10.11.10 10/10/2017  Steve Armstrong  TSK 0837619                  *
.*                  Mods to source FinancialInterestDisclosureInd (VCHSEG04)  *
.*                  from prihreff.prhrfidi instead of hard-coding field.      *
.*        V10.11.09 18/09/2017  Steve Armstrong  TSK 0837619                  *
.*                  Mods to sort invoice items by the combination of Servicing*
.*                  Doctor, IFC Issue Code and Compensation Claim Indicator,  *
.*                  the combination of which equates to a Voucher in the      *
.*                  Eclipse IMC Extract.                                      *
.*        V10.11.08 13/09/2017  Peter Vela       TSK 0837619                  *
.*                  Fixed several variables extraction from pridtr            *
.*        V10.11.07 11/09/2017  Peter Vela       TSK 0837619                  *
.*                  Added validations for PRDTIFLG IMC Details                *
.*        V10.11.06 29/08/2017  Peter Vela       TSK 0837619                  *
.*                  Added IMC Details functionality in PRIDTR                 *
.*        V10.11.05 09/08/2017  Peter Vela       TSK 0837619                  *
.*                  Default "H" into VCHSEG19 regardless of what VCHSEG25 is  *
.*        V10.11.04 09/08/2017  Peter Vela       TSK 0837619                  *
.*                  Right justified batch number in PREP0000                  *
.*        V10.11.03 04/08/2017  Peter Vela       TSK 0837619                  *
.*                  Fixed FundPayeeId extraction                              *
.*        V10.11.02 27/07/2017  Peter Vela       TSK 0837619                  *
.*                  Added Referral Period Type Code VCHSEG17                  *
.*                  Added Referral Period VCHSEG20                            *
.*                  Added Referral Issue Date VCHSEG18                        *
.*        V10.11.01 18/07/2017  Peter Vela       TSK 0294177                  *
.*                  Added functionality for Fund Payee ID CLMSEG23            *
.*        V10.08.00 05/05/2016  Steve Armstrong  TSK 0294177                  *
.*                  Program created based on IBAPMS04                         *
.******************************************************************************

          INC       STD001FD
.
          INC       IBACONFD/INC
          INC       IBASEQFD/INC
          INC       PATCODFD/INC
          INC       PATCONFD/INC
          INC       PATCRTFD/INC
          INC       PATDSCFD/INC
          INC       PATFN1FD/INC
          INC       PATFX1FD/INC
          INC       PATHSPFD/INC
          INC       PATMA1FD/INC
          INC       PATMI1FD/INC
          INC       PATPARFD/INC
          INC       PATPCPFD/INC
          INC       PRIECAFD/INC
          INC       PRIIBHFD/INC
          INC       PRIITMFD/INC
          INC       PMSFPHFD/INC
          INC       PMSHCLFD/INC
          INC       PMSHCPFD/INC
          INC       PMSPX2FD/INC
          INC       PMSVX1FD/INC
          INC       PRIDOCFD/INC
          INC       PRIDTRFD/INC
          INC       PRIECTFD/INC
          INC       PRIHDBFD/INC
          INC       PRIHREFD/INC
          INC       PRIINVFD/INC
          INC       PRIPRAFD/INC
          INC       RCPREGFD/INC
          INC       TFILEVAR/INC
          INC       WEBERRFD/INC
          INC       WEBSECFD/INC
.
EXTFILE1  FILE      ASCII,FIXED=256
.
.
.         Temporary File Definitions
.         --------------------------
.
.         Unsorted Invoice Listing for Eclipse Extract
.
LSTTEMP1  IFILE SQL, FIXED=52, KEY="U1-8,9-16"
.
.NAME     TYPE    LENGTH     PHYSICAL     START     DESCRIPTION
.----     ----    ------     --------     -----     -----------
LISTUNIQ  DIM       8           8           1       Unique Identifier
LISTINVN  DIM       8           8           9       Invoice Number
LISTURNO  DIM       8           8          17       U/R Number
LISTDATE  DIM       8           8          25       Invoice Date (ccyymmdd)
LISTAMNT  FORM      12.2        8          33       Outstanding Invoice Amount
LISTFLAG  FORM      1           2          41       Extract Flag
.                                                     0 = Extract
.                                                     1 = Don't extract
LISTHOSP  DIM       3           3          43       Hospital Code
LISTHFND  DIM       6           6          46       Health Fund
.
.End of Record                             52
.
.
.         Sorted Invoice Listing for Extraction
.         - will contain a record for each pridtraf item record for the single
.           invoice being processed, sorted by the service provider,
.           IFC issue code and compensation claim indicator, the combination of
.           which represents a Voucher
.
SRTTEMP1  IFILE SQL, FIXED=21, KEY="U1-10,11-13,14-14,15-20"
.
.NAME     TYPE    LENGTH     PHYSICAL     START     DESCRIPTION
.----     ----    ------     --------     -----     -----------
SORTSPRV  DIM       10           10         1       Servicing Provider
.                                                     (pmshcpaf)
SORTIFCC  DIM       3            3         11       IFC Issue Code (Cat ic)
SORTCCIN  DIM       1            1         14       Compensation Claim
.                                                   Indicator
SORTTRAN  DIM       6            6         15       Transaction Number
.                                                      (pridtraf.prdttran)
. End of Record                            21
.                 
.
.
.
. LOCAL VARIABLE DEFINITION
. -------------------------
BATCHNUM  DIM       8
BLAGFLAG  FORM      1
CALLPOSN  FORM      1
CLMARRAY  FORM      1[3]                    * claim type array
.                                             0 = No capability
.                                             1 = Capability
.                                              element 1 = AG
.                                              element 2 = SC
.                                              element 3 = MB
CMDLINE   DIM       100
COUNTER   FORM      2
CURRDATE  DIM       8                       * Current date (ccyymmdd)
.
DATEVAR1  DATE      8
DATEVAR2  DATE      8
DIM5      DIM       5
DIM6      DIM       6
DIM7      DIM       7
DIM8      DIM       8
DIM8A     DIM       8
DIM8B     DIM       8
DIM9      DIM       9
DIM10     DIM       10
DIM15     DIM       15
.
ERRCT     FORM      6                       * Error counter
ERRFLG    FORM      1                       * Error flag
ERRMSG    DIM       90                      * Error message
.
FIELD     FORM      2
FILENAME  DIM       8
FIRSTREC  FORM      1                       * first record flag
FLAGDIM3  DIM       3
.                                                0 = no
.                                                1 = yes
FORM12P2  FORM      12.2
FORM3     FORM      3
FORM5     FORM      5
FORM8     FORM      8
.
HOSPCODE  DIM       3
.
INCLFLAG  FORM      1                       * include flag
.                                             0 = include all
.                                    1          = exclude all
ITMCOUNT  FORM      2                       * item count
.
LISTARRY  DIM       50[50]
LONGFNAM  DIM       10
LSTCOUNT  FORM      2
.
PLVCARRY  DIM       1[22]                   * PLV character array
PLVNARRY  FORM      2[22]                   * PLV numeric array
PROVARRY  DIM       1[8]                    * provider number character array
PRVNARRY  FORM      2[7]                    * provider number numeric array
PROVFLAG  FORM      1                       * provider flag
.                                                1 = Hospital Facility
.                                                2 = Admission Transfer Facility
.                                                3 = Discharge Transfer Facility
.                                                4 = Doctor Provider
.
RECCNT    FORM      6
.
SAVBTHN   DIM       8
SAVEHOSP  DIM       3
SAVKEY35  DIM       35
SAVPRVBN  DIM       8
SAVEROVR  DIM       3
SAVELVIS  DIM       8
SAVESCCI  DIM       1
SAVESDOC  DIM       10
SAVESIFC  DIM       3
.
TEMPFILA  DIM       8
TEMPFILB  DIM       8
TMPKEY    DIM       16[17]
TOTAMTCT  FORM      12.2
.
VALDFLG   FORM      1                       * Validation flag
VCHCOUNT  FORM      2
.
WRTCT     FORM      6                       * Write counter
.
. PROGRAM CONSTANTS
. -----------------
ALPTOBLK  INIT      "' - A B C D E F G H I J K L M N O P Q R S T U V W X Y Z "
.
CATRF     INIT      "RF"
CATic     INIT      "ic"
CATst     INIT      "st"
CATSd     INIT      "Sd"
CATta     INIT      "ta"
CATro     INIT      "ro"
CODEAG    INIT      "AG"
CODESC    INIT      "SC"
CODEMB    INIT      "MB"
CODEMO    INIT      "MO"
.
ERASE     INIT      "iserase "
.
ISBUILD   INIT      "isbuild "
.
PIPE      INIT      "|"
.
TILDA01   INIT      "~"
TILDA40   INIT      "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
TXT       INIT      ".txt"
.
UKEYA     INIT      " 52 U1-8,9-16"
UKEYB     INIT      " 21 U1-10,11-13,14-14,15-20"
.
. ----- Eclipse Data Variables -----
.
. HDR segment       Len    Pos
.-------------      ---    ---
.~        DIM       1      1
.HDR      DIM       3      2
HDRSEG01  DIM       8      5     * Batch Number
HDRSEG02  DIM       8      13    * Location Id
HDRSEG03  DIM       10     21    * Certificate Id
HDRSEG04  DIM       60     31    * Sender Id
HDRSEG05  DIM       1      91    * Test/Production Flag (T/P)
. End of Segment           92
.
.
. CLM segment       Len    Pos
.-------------      ---    ---
.~        DIM       1      1
.CLM      DIM       3      2
CLMSEG01  DIM       1      5     * AccidentInd
CLMSEG02  DIM       1      6     * AccountPaidInd
CLMSEG03  DIM      20      7     * AccountReferenceId
CLMSEG04  DIM      30     27     * BankAccountName
CLMSEG05  DIM       9     57     * BankAccountNum
CLMSEG06  DIM       6     66     * BSBCode
CLMSEG07  DIM       1     72     * BenefitAssignmentAuthorised
CLMSEG08  DIM       8     73     * BillingAgentId
CLMSEG09  DIM      40     81     * ClaimantAddressLine1
CLMSEG10  DIM      40    121     * ClaimantAddressLine2
CLMSEG11  DIM      40    161     * ClaimantAddressLocality
CLMSEG12  DIM       4    201     * ClaimantAddressPostcode
CLMSEG13  DIM       8    205     * ClaimantDateOfBirth
CLMSEG14  DIM      40    213     * ClaimantFamilyName
CLMSEG15  DIM      40    253     * ClaimantFirstName
CLMSEG16  DIM      10    293     * ClaimantMedicareCardNum
CLMSEG17  DIM       1    303     * ClaimantReferenceNum
CLMSEG18  DIM       1    304     * ClaimSubmissionAuthorised
CLMSEG19  DIM       2    305     * ClaimTypeCde
CLMSEG20  DIM       8    307     * FacilityId
CLMSEG21  DIM       3    315     * FundBrandId
CLMSEG22  DIM      12    318     * FundPayeeId
CLMSEG23  DIM       8    330     * PrincipalProviderNum
CLMSEG24  DIM      19    338     * SenderContactPersonPhone
CLMSEG25  DIM      40    357     * SenderContactPersonName
. End of Segment         397
.
.
. VCH segment       Len    Pos
.-------------      ---    ---
.~        DIM       1      1
.VCH      DIM       3      2
VCHSEG01  DIM       8      5     * AdmissionDate
VCHSEG02  DIM       1     13     * CompensationClaimInd
VCHSEG03  DIM       8     14     * DischargeDate
VCHSEG04  DIM       1     22     * FinancialInterestDisclosureInd
VCHSEG05  DIM       1     23     * IFCIssueCde
VCHSEG06  DIM      40     24     * PatientAliasFamilyName
VCHSEG07  DIM      40     64     * PatientAliasFirstName
VCHSEG08  DIM       8    104     * PatientDateOfBirth
VCHSEG09  DIM      40    112     * PatientFamilyName
VCHSEG10  DIM      40    152     * PatientFirstName
VCHSEG11  DIM      19    192     * PatientFundMembershipNum
VCHSEG12  DIM       2    211     * PatientFundUPI
VCHSEG13  DIM       1    213     * PatientGender
VCHSEG14  DIM      10    214     * PatientMedicareCardNum
VCHSEG15  DIM       1    224     * PatientReferenceNum
VCHSEG16  DIM       1    225     * PatientSecondInitial
VCHSEG17  DIM       1    226     * ReferralPeriodTypeCde
VCHSEG18  DIM       8    227     * ReferralIssueDate
VCHSEG19  DIM       1    235     * ReferralOverrideTypeCde
VCHSEG20  DIM       2    236     * ReferralPeriod
VCHSEG21  DIM       8    238     * ReferringProviderNum
VCHSEG22  DIM       8    246     * RequestIssueDate
VCHSEG23  DIM       8    254     * RequestingProviderNum
VCHSEG24  DIM       1    262     * RequestTypeCde
VCHSEG25  DIM       1    263     * ServiceTypeCde
VCHSEG26  DIM       8    264     * ServicingProviderNum
. End of Segment         272
.
.
. SRV segment       Len    Pos
.-------------      ---    ---
.~        DIM       1      1
.SRV      DIM       3      2
SRVSEG01  DIM      12      5     * AccessionDateTime
SRVSEG02  DIM       1     17     * AfterCareOverrideInd
SRVSEG03  DIM       9     18     * ChargeAmount
SRVSEG04  DIM      12     27     * CollectionDateTime
SRVSEG05  DIM       8     39     * DateOfService
SRVSEG06  DIM       1     47     * DuplicateServiceOverrideInd
SRVSEG07  DIM       5     48     * EquipmentId
SRVSEG08  DIM       2     53     * FieldQuantity
SRVSEG09  DIM       5     55     * ItemNum
SRVSEG10  DIM       6     60     * LSPNum
SRVSEG11  DIM       1     66     * MultipleProcedureOverrideInd
SRVSEG12  DIM       2     67     * NoOfPatientsSeen
SRVSEG13  DIM       2     69     * RestrictiveOverrideCde
SRVSEG14  DIM       1     71     * Rule3ExemptInd
SRVSEG15  DIM       1     72     * S4B3ExemptInd
SRVSEG16  DIM       5     73     * SCPId
SRVSEG17  DIM       2     78     * SelfDeemedCde
SRVSEG18  DIM      50     80     * ServiceText
SRVSEG19  DIM       3    130     * TimeDuration
SRVSEG20  DIM       4    133     * TimeOfService
. End of Segment         137
.
.
.
PRGID     INIT      "IBAPRI07"
PRGNAM    INIT      "Eclipse IMC Extract"
VERSION   INIT      "V12.00.00"
+
.******************************************************************************
.*                                   MAIN0000                                 *
.*                                 Main Module                                *
.******************************************************************************
.
MAIN0000  CALL      INIT0000                * Initialise variables & open files
          CALL      CTMP0000                * Create tempfiles
.
MAIN0500  CALL      GHSP0000                * get hospital code
          BRANCH    EXIT,MAIN9999           * nothing/exitchar entered
.
MAIN1500  CALL      OPTN0000                * Choose main option
          BRANCH    EXIT,MAIN8000           * exit selected
          BRANCH    COPTION,MAIN2000:       * Health Fund Extract
                            MAIN4000        * Medicare Extract
.
.         By Health Fund
.
MAIN2000  CALL      GFND0000                * get health fund code
          BRANCH    EXIT,MAIN1500:          * nothing/exitchar entered
                         MAIN8000           * HF not valid for Eclipse/IMC
.
          CALL      HEAD0000                * Print report header
          CALL      CLRA0000                * clear temp file A records
          CALL      RERR0000                * reset any error records
          CALL      LOAD0000                * load HF records to temp file
          CALL      DCLM0000                * display waiting HF records
          BRANCH    EXIT,MAIN8000           * cancel selected
.
          CALL      VALD0000                * Validate the tempfile
          CALL      QUES0000                * Extract question
          BRANCH    EXIT,MAIN8000
.
          CALL      WRIT0000                * Write to the files
          GOTO      MAIN8000
.
.         Medicare only
.
MAIN4000  CALL      HEAD0000                * Print report header
.
          CALL      CLRA0000                * clear temp file A records
          CALL      RERR0000                * reset any error records
          CALL      LOAD0000                * load Medicare records to temp file
          CALL      DCLM0000                * display waiting Medicare records
          BRANCH    EXIT,MAIN8000           * cancel selected
.
          CALL      VALD0000                * Validate the tempfile
          CALL      QUES0000                * Extract question
          BRANCH    EXIT,MAIN8000
.
          CALL      WRIT0000                * Write to the files
.
MAIN8000  CALL      TAIL0000                * Print report tail
.
MAIN9000  CALL      KILL0000                * Kill tempfile
.
MAIN9999  CHAIN     PGM
+
.******************************************************************************
.*                                  INIT0000              Called by: MAIN0000 *
.*                       Initialise Variable & Open Files                     *
.******************************************************************************
.
INIT0000  CALL      DISPHEAD                * Display screen heading
.
          DISPLAY   *P56:24,"Opening controlf"
          OPEN      CONTROLF,"controlf"
.
          DISPLAY   *P64:24,"patcodes"
          OPEN      PATCODE1,"patcodes"
.
          DISPLAY   *P64:24,"patcrtaf"
          OPEN      PATCRTA1,"patcrtaf"
.
          DISPLAY   *P64:24,"patdschf"
          OPEN      PATDSCH1,"patdschf"
.
          DISPLAY   *P64:24,"patfn1af"
          OPEN      PATFN1A1,"patfn1af"
.
          DISPLAY   *P64:24,"patfx1af"
          OPEN      PATFX1A1,"patfx1af"
.
          DISPLAY   *P64:24,"pathspaf"
          OPEN      PATHSPA1,"pathspaf"
.
          DISPLAY   *P64:24,"patma1af"
          OPEN      PATMA1A1,"patma1af"
          OPEN      PATMX1A1,"patmx1af"
.
          DISPLAY   *P64:24,"patmi1af"
          OPEN      PATMI1A1,"patmi1af"
          OPEN      PATMI1A3,"patmi1af"
.
          DISPLAY   *P64:24,"patparaf"
          OPEN      PATPARA1,"patparaf"
.
          DISPLAY   *P64:24,"patpcpaf"
          OPEN      PATPCPA1,"patpcpaf"
.
          DISPLAY   *P64:24,"pmshclaf"
          OPEN      PMSHCLA1,"pmshclaf"
.
          DISPLAY   *P64:24,"pmshcpaf"
          OPEN      PMSHCPA1,"pmshcpaf"
.
          DISPLAY   *P64:24,"pmspx2af"
          OPEN      PMSPX2A1,"pmspx2af"
.
          DISPLAY   *P64:24,"pmsvx1af"
          OPEN      PMSVX1A1,"pmsvx1af"
.
          DISPLAY   *P64:24,"pmsfphaf"
          OPEN      PMSFPHA1,"pmsfphaf"
.
          DISPLAY   *P64:24,"pridoctf"
          OPEN      PRIDOCT1,"pridoctf"
.
          DISPLAY   *P64:24,"pridtraf"
          OPEN      PRIDTRA1,"pridtraf"
          OPEN      PRIDTRA4,"pridtraf"
.
          DISPLAY   *P64:24,"priecaaf"
          OPEN      PRIECAA1,"priecaaf"
.
          DISPLAY   *P64:24,"priectaf"
          OPEN      PRIECTA1,"priectaf"
.
          DISPLAY   *P64:24,"prihdbtf"
          OPEN      PRIHDBT2,"prihdbtf"
.
          DISPLAY   *P64:24,"prihreff"
          OPEN      PRIHREF1,"prihreff"
.
          DISPLAY   *P64:24,"priibhaf"
          OPEN      PRIIBHA1,"priibhaf"
.
          DISPLAY   *P64:24,"priinvof"
          OPEN      PRIINVO1,"priinvof"
.
          DISPLAY   *P64:24,"priitemf"
          OPEN      PRIITEM1,"priitemf"
.
          DISPLAY   *P64:24,"pripracf"
          OPEN      PRIPRAC1,"pripracf"
.
          DISPLAY   *P64:24,"rcpregaf"
          OPEN      RCPREGA1,"rcpregaf"
.
          DISPLAY   *P64:24,"websecaf"
          OPEN      WEBSECA3,"websecaf"
.
          READ      CONTROLF,ZERO;*43,IBCNMHOS
          READ      CONTROLF,TEN;*79,CAPPRVNO
          READ      CONTROLF,TEN3;*194,CVETINS
          READ      CONTROLF,HUND10;*115,PTCNUEDI,*116,PTCNEDIH
          READ      CONTROLF,HUND14;*145,PTCNCLID
          READ      CONTROLF,HUND16;*149,PTCNSCPN,*189,PTCNSCPP
          READ      CONTROLF,HUND19;*1,PTCNIMCO,*121,PTCNUTPM
          READ      CONTROLF,HUND24;*111,PTCNUIMC,*125,PTCNBAID
.
          PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
          CLOCK     TIME,CTIMEIS
.
          MOVE      ONE,VALDFLG                  * set validation flag
.
          CALL      LARY0000                     * load PLV arrays
.
INIT9999  RETURN
+
.******************************************************************************
.*                                  OPTN0000              Called by: MAIN0000 *
.*                                Select Option                               *
.******************************************************************************
.
OPTN0000  HLINE     *G37,2,50,80
          DISPLAY   *P40:4,*EF:
                    *P1:6,*V2LON,"0",*HOFF," = Exit":
                    *P1:7,*V2LON,"1",*HOFF," = Create HF IMC Extract ":
                    *P1:8,*V2LON,"2",*HOFF," = Create Medicare IMC Extract ":
                    *P1:10,"Select Option : ";
.
OPTN1000  KEYIN     *P17:10,*V2LON,COPTION;
.
          COMPARE   ZERO,COPTION                 * exit selected ?
          GOTO      OPTN9500 IF EQUAL            * yes - finished
.
          BRANCH    COPTION,OPTN2000:            * HF IMC extract
                            OPTN2000             * Medicare IMC extract
.
          BEEP
          GOTO      OPTN1000
.
OPTN2000  COMPARE   ONE,PTCNUEDI
          IF        !@EQUAL
            MOVE      "GEN.11-Hospital not using the EDI Module",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      OPTN9500
          ENDIF
.
          MATCH     "1",PTCNUIMC
          IF        !@EQUAL
            MOVE      "GEN.12-IMC Claiming not available",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      OPTN9500
          ENDIF
.
          MATCH     SP70,PTCNIMCO
          IF        @EQUAL
            MOVE      "GEN.13-Eclipse IMC Outbound Path blank",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      OPTN9500
          ENDIF
.
          IF        COPTION = 1
            DISPLAY   *P50:2,*V2LON,"- HF IMC Extract ";
            MOVE      "- HF IMC Extract",CPHDROPT
          ELSE
            DISPLAY   *P50:2,*V2LON,"- Medicare IMC Extract ";
            MOVE      "- Medicare IMC Extract",CPHDROPT
          ENDIF
.
OPTN9000  MOVE      ZERO,EXIT
          GOTO      OPTN9999
.
OPTN9500  MOVE      ONE,EXIT
.
OPTN9999  RETURN
+
.*****************************************************************************
.*                                 GFND0000        Called by: MAIN0000       *
.*               Get the user to keyin a health fund code                    *
.* Returns: EXIT   0 = Valid Health Fund selected                            *
.*                 1 = nothing, exitchar or spaces input                     *
.*                 2 = HF not valid for Eclipse IMC                          *
.*****************************************************************************
.
GFND0000  MOVE      TEN5,EVERT
          MOVE      TEN5,ECOL
          MOVE      SP6,CKYIDEF6
          MOVE      ZERO,CKYIMAND
          MOVE      ZERO,CKYIMODE
.
          DISPLAY   *P1:15,*EF,"Health Fund :";
          CALL      PATFNDKY
          BRANCH    EXIT,GFND9100:               * nothing input
                         GFND9100:               * exitchar input
                         GFND9100                * spaces input
.
.         Check if the Health Fund is participating in EDI
.
          MOVE      HCODE,KEY6
          CALL      RDPTFX11
          IF        OVRCD = 1
            MOVE      "CLM.21.1-Health Fund Extension record not on file",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      GFND9200
          ENDIF
.
          COMPARE   THREE,PTFXEXTR               * using Eclipse ?
          IF        !@EQUAL
            MOVE      "CLM.21.2-Health Fund not using Eclipse",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      GFND9200
          ENDIF
.
.         Check the Health Fund's Participant code
.
          MATCH     SP70,PTFXECLP
          IF        @EQUAL
            MOVE      "CLM.21.3-Participant Code is blank",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      GFND9200
          ENDIF
.
          MOVE      PTFXECLP,KEY3
          CALL      RDPTPAR1                     * participant code on file ?
          IF        OVRCD = 1
            MOVE      "CLM.21.4-Participant Code not on file",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      GFND9200
          ENDIF
.
.         Make sure that the participant is not DVA
.
          MATCH     CVETINS,PTFXECLP
          IF        @EQUAL
            MOVE      "CLM.21.5-DVA Claims cannot be processed",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      GFND9200
          ENDIF
.
.         Check that the participant has IMC capability amd load the
.         capabilities for checking later with CLMSEG19
.
          MOVE      ZERO,CLMARRAY[1]             * initialise HF claim array
          MOVE      ZERO,CLMARRAY[2]
          MOVE      ZERO,CLMARRAY[3]
.
          MOVE      PTFXECLP,KEY3
          PACK      KEY9,KEY3,ANSI,ANSM,ANSC,SP10
          CALL      RSPTPCP1
GFND1000  CALL      RKPTPCP1
          BRANCH    OVRCD,GFND5000
.
          MATCH     KEY3,PTPPCODE                * same participant still ?
          GOTO      GFND5000 IF NOT EQUAL        * no - finished
.
          MATCH     "IMC",PTPPCPID               * same capability still ?
          GOTO      GFND5000 IF NOT EQUAL        * no - finished
.
          MATCH     "AG ",PTPPSCID               * IMC Agreements capable ?
          IF        @EQUAL
            MOVE      ONE,CLMARRAY[1]            * yes
            GOTO      GFND1000
          ENDIF
.
          MATCH     "SC ",PTPPSCID               * IMC Schemes capable ?
          IF        @EQUAL
            MOVE      ONE,CLMARRAY[2]            * yes
            GOTO      GFND1000
          ENDIF
.
          MATCH     "MB ",PTPPSCID               * IMC Medicare Benefits cap. ?
          IF        @EQUAL
            MOVE      ONE,CLMARRAY[3]            * yes
          ENDIF
.
          GOTO      GFND1000
.
GFND5000  IF        CLMARRAY[1]=0 & CLMARRAY[2]=0 & CLMARRAY[3]=0
            MOVE      "CLM.21.6-Participant not IMC capable",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      GFND9200
          ENDIF
.
.         Valid health fund entered
.
          DISPLAY   *P30:15,HFNAME;
.
          MOVE      ZERO,EXIT
          GOTO      GFND9999
.
GFND9100  MOVE      ONE,EXIT
          GOTO      GFND9999
.
GFND9200  MOVE      TWO,EXIT
.
GFND9999  RETURN
+
.*****************************************************************************
.*                                 GHSP0000        Called by: MAIN0000       *
.*               Get the user to keyin a hospital code                       *
.* Returns: EXIT   0 = Valid Hospital selected                               *
.*                 1 = nothing, exitchar or spaces input                     *
.*          HOSPCODE - 3 character hospital code                             *
.*****************************************************************************
.
GHSP0000  HLINE     *G37,2,57,80
          MOVE      FOUR,EVERT
          MOVE      TEN2,ECOL
          MOVE      SP3,CKYIDEF3
          MOVE      ZERO,CKYIMAND
          MOVE      ZERO,CKYIMODE
.
          DISPLAY   *P1:3,*EF,*P1:4,"Hospital :":
                    *P1:24,"(",*V2LON,EXITCHAR,*HOFF," to exit)"
          CALL      PATHSPKY
          BRANCH    EXIT,GHSP8000:               * nothing input
                         GHSP9100:               * exitchar input
                         GHSP8000                * spaces input
.
.         Valid hospital entered
.
          DISPLAY   *P16:4,PTHSNAME;
          GOTO      GHSP9000
.
GHSP8000  DISPLAY   *P16:4,*V2LON,"All"
.
GHSP9000  MOVE      KEY3,HOSPCODE
          MOVE      ZERO,EXIT
          GOTO      GHSP9999
.
GHSP9100  MOVE      ONE,EXIT
.
GHSP9999  RETURN
+
.******************************************************************************
.*                                  HEAD0000              Called by: MAIN0000 *
.*                             Print Report Header                            *
.******************************************************************************
.
HEAD0000  CALL      HEAD132
.
          IF        COPTION = 1
            PRINT     *N,*1,"Health Fund: ",HCODE,*25,HFNAME
          ELSE
            PRINT     *N,*1,"Medicare Only"
          ENDIF
.
          CALL      UND132
          PRINT     *1,PIPE,*3,"Invoice",*12,PIPE,*14,"U/R No.",*23,PIPE:
                    *25,"Item",*35,PIPE,*37,"Error",*132,PIPE
          CALL      UND132
          MOVE      EIGHT,CLNO
.
HEAD9000  MOVE      ZERO,EXIT
.
HEAD9999  RETURN
+
.******************************************************************************
.*                                  VALD0000              Called by: MAIN0000 *
.*                   Validate the invoice records on the temp file            *
.******************************************************************************
.
.         Initialise counters
.
VALD0000  MOVE      ZERO,RECCNT                  * init. invoice record count
          MOVE      ZERO,ERRCT                   * init. error count
.
          MOVE      ZERO,TOTAMTCT                * clear total amount counter
          MOVE      ZERO,WRTCT
          DISPLAY   *P1:24,*EL,"Validating : ";
.
          MOVE      SP20,KEY16
          CALL      RSTEMP1                      * position at start of file
VALD0500  CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,VALD9999               * eof - finished
.
          BRANCH    LISTFLAG,VALD0500            * excluded from extract
.
          MOVE      ZERO,ERRFLG                  * initialise error flag
          ADD       ONE,RECCNT                   * incr. invoice record count
.
.         Get the original priectaf record
.
          PACK      KEY35,LISTHOSP,SP1,ZERO,LISTHFND,LISTUNIQ,LISTINVN,SP70
          CALL      RDPRECT1                     * record on file ?
          IF        OVRCD = 1
            MOVE      "GEN.1-Matching priectaf record not found",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VALD0500
          ENDIF
.
          MOVE      LISTURNO,KEY8
          CALL      RDMAST1                      * pmi master record found ?
          IF        OVRCD = 1
            MOVE      "GEN.7-Missing patma1af record",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VALD9000
          ENDIF
.
          MOVE      LISTURNO,KEY8
          CALL      RDPMPX21                     * pmi extension found ?
          IF        OVRCD = 1
            MOVE      "GEN.8-Missing pmspx2af record",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VALD9000
          ENDIF
.
          MOVE      LISTUNIQ,KEY8
          CALL      RDPRHD2                      * header record on file ?
          IF        OVRCD = 1
            MOVE      "GEN.2-Missing prihdbtf record",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VALD9000
          ENDIF
.
.         Validate if the claim is compensable
.
          MATCH     SP3,PRHDCLAM
          GOTO      VALD0550 IF EQUAL
.
          PACK      KEY5,ANSC,ANSL,PRHDCLAM
          CALL      RDCODE1
          BRANCH    OVRCD,VALD0550
.
          MOVE      ZERO,COUNTER
          WHILE     COUNTER < 5
            ADD       ONE,COUNTER
.
            LOAD      ANS,COUNTER,TCINDC1,TCINDC2,TCINDC3,TCINDC4,TCINDC5
            MATCH     ANSW,ANS
            GOTO      VALD0550 IF EQUAL
.
.           "V" is a valid compensable value, but we are not processing
.           DVA claims at this stage.
.
            MATCH     ANSV,ANS
            IF        @EQUAL
              MOVE      "GEN.16-DVA claims not currently handled",ERRMSG
              MOVE      SP9,DIM9
              CALL      PERR0000
              GOTO      VALD0550
            ENDIF
.
            MATCH     ANSM,ANS
            GOTO      VALD0550 IF EQUAL
          DO
.
.         There is only one pridtraf type 2 (IMC) record per invoice and
.         this is used to hold the linked visit and referral override values,
.         so find this record and save these two values for use later on.
.
VALD0550  MOVE      SP70,SAVELVIS                * clear the two values
          MOVE      SP70,SAVEROVR
.
          PACK      KEY22,LISTINVN,SP30
          CALL      RSPRDT4                      * position before invoice
VALD0600  CALL      RKPRDT4                      * read next record
          BRANCH    OVRCD,VALD0700
.
          MATCH     LISTINVN,PRDTINVN            * same invoice still ?
          GOTO      VALD0700 IF NOT EQUAL        * no - finished
.
          COMPARE   ONE,PRDTRTYP                 * item record ?
          GOTO      VALD0600 IF NOT EQUAL        * no - ignore record
.
          COMPARE   TWO,PRDTIFLG                 * IMC details record ?
          GOTO      VALD0600 IF NOT EQUAL        * no - get next pridtraf record
.
          MOVE      PRDTROVR,SAVEROVR            * yes - save the two values
          MOVE      PRDTLVIS,SAVELVIS
.
.         Now loop through the pridtraf records for the invoice to find
.         if there are any items for billing to be claimed
.
VALD0700  PACK      KEY22,LISTINVN,SP30
          CALL      RSPRDT4                      * position before invoice
VALD1000  CALL      RKPRDT4                      * read next record
          BRANCH    OVRCD,VALD1500               * eof - finished
.
          MATCH     LISTINVN,PRDTINVN            * same invoice still ?
          GOTO      VALD1500 IF NOT EQUAL        * no - finished
.
          COMPARE   ONE,PRDTRTYP                 * item record ?
          GOTO      VALD1000 IF NOT EQUAL        * no - ignore record
.
          COMPARE   TWO,PRDTIFLG                 * IMC details record ?
          GOTO      VALD1000 IF EQUAL            * yes - ignore record
.
.         This is the first pridtraf item record for the invoice, so get
.         the corresponding prihreff record now that we have the patient
.         indicator
.
          PACK      KEY27,PRDTUNIQ,PRDTPRAC,PRDTDOCT,PRDTCODE
          CALL      RDPRHR1
          IF        OVRCD = 1
            MOVE      "GEN.3-Missing prihreff record",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VALD9000
          ENDIF
.
          MOVE      PRHRDOCT,SAVESDOC            * save default service provider
          MOVE      PRHRISSC,SAVESIFC            * save default IFC issue code
.
.         Check if the patient was an Inpatient at the time
.
          CALL      CLPATMIS                     * clear admission variables
          CALL      CLPATDSC                     * clear discharge variables
.
          MATCH     SP8,SAVELVIS                 * blank linked visit field ?
          GOTO      VALD2000 IF EQUAL            * yes
.
          MOVE      SAVELVIS,KEY8
          CALL      RDMISS1                      * admission record found ?
          IF        OVRCD = 1
            MOVE      "GEN.5-Missing patmi1af record",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VALD9000
          ENDIF
.
          IF        ASTAT = 3
            MOVE      SAVELVIS,KEY8
            CALL      RDDSCH1                      * discharge record found ?
            IF        OVRCD = 1
              MOVE      "GEN.6-Missing patdschf record",ERRMSG
              MOVE      SP9,DIM9
              CALL      PERR0000
              GOTO      VALD9000
            ENDIF
          ENDIF
.
          GOTO      VALD2000
.
.         There were no IMC charges to be processed
.
VALD1500  MOVE      "GEN.4-No transactions for invoice",ERRMSG
          ENDSET    ERRMSG
          APPEND    LISTINVN,ERRMSG
          RESET     ERRMSG
          MOVE      SP9,DIM9
          CALL      PERR0000
          GOTO      VALD9000
.
.         There are items to be extracted, so load/write the segments/data
.
VALD2000  DISPLAY   *P15:24,*V2LON,LISTINVN,SP2,LISTUNIQ;
.
          IF        RECCNT = 1
            CALL      WHDR0000                   * write header details
          ENDIF
          CALL      WCLM0000                     * write claim details
.
.         Load all the items for claiming into the sorted temp file
.         before processing
.
          CALL      CLRB0000                     * clear temp file B
          CALL      LODS0000
.
.         Process all the service items for the current invoice and write
.         the relevant voucher and service segment records
.
          CALL      PITM0000
.
          CALL      WTLR0000                     * write trailer record
.
VALD9000  COMPARE   ONE,ERRFLG                   * any errors ?
          IF        @EQUAL
            MOVE      ONE,PRECFLAG               * yes
            CALL      UPPRECT1                   * update error flag
          ENDIF
.
          GOTO      VALD0500                     * get next record
.
VALD9999  RETURN
+
.******************************************************************************
.*                                  QUES0000              Called by: MAIN0000 *
.*                              Extract Question                              *
.******************************************************************************
.
QUES0000  DISPLAY   *P1:19,*EF:
                    *P1:20,*EF,"Total Records Read     : ",*V2LON,RECCNT,*HOFF:
                    *P1:21,"Total Number of Errors : ",*V2LON,ERRCT,*HOFF;
.
          COMPARE   ZERO,RECCNT
          GOTO      QUES1000 IF NOT EQUAL   * No data found
.
          DISPLAY   *P1:24,*EL,*B,"No data found. Extract not created.  ";
          CALL      HITENTER
          GOTO      QUES9500
.
QUES1000  COMPARE   ZERO,ERRCT
          IF        !@EQUAL
            DISPLAY   *P1:24,*EL,*B,"Errors found.  ";
            CALL      HITENTER
            GOTO      QUES3000
          ENDIF
.
          GOTO      QUES9000                     * no errors - extract
.
.         Not doing extraction, reset status of records back to "0"
.
QUES3000  CALL      RERR0000
          GOTO      QUES9500
.
QUES9000  MOVE      ZERO,EXIT
          GOTO      QUES9999
.
QUES9500  MOVE      ONE,EXIT
.
QUES9999  RETURN
+
.******************************************************************************
.*                                  PITM0000              Called by: VALD0000 *
.*         Process the current invoice transaction items and write   WRIT0000 *
.*         the relevant voucher (VCH) and service item (SRV) segment records. *
.******************************************************************************
.
PITM0000  MOVE      SP10,SAVESDOC                * initialise save variables
          MOVE      SP3,SAVESIFC
          MOVE      SP1,SAVESCCI
          MOVE      ZERO,VCHCOUNT                * initialise voucher count
.
          MOVE      SP20,KEY20
          CALL      RSTEMP2                      * pos'n at start of temp file
PITM0500  CALL      RKTEMP2                      * read next record
          BRANCH    OVRCD,PITM9999               * eof - finished
.
          MATCH     SAVESDOC,SORTSPRV            * same service provider still ?
          IF        @EQUAL
            MATCH     SAVESIFC,SORTIFCC          * yes - same IFC Issue code ?
            IF        @EQUAL
              MATCH     SAVESCCI,SORTCCIN        * yes - same Comp Claim Ind. ?
              GOTO      PITM5000 IF EQUAL        * yes - same voucher
            ENDIF
          ENDIF
.
.         The Service Doctor and/or the IFC Issue code and/or the
.         Compensation Claim Indicator have changed, so we need to create
.         a new voucher segment
.
          MOVE      SORTSPRV,SAVESDOC            * save new Service Provider
          MOVE      SORTIFCC,SAVESIFC            * save new IFCC Issue code
          MOVE      SORTCCIN,SAVESCCI            * save new Comp. Claim Ind.
          CALL      WVCH0000 
.
          MOVE      ZERO,ITMCOUNT                * init. item count
.
.         Create an SRV segment for a pridtraf item record.
.         First we need to read the relevant pridtraf record.
.
PITM5000  PACK      KEY22,LISTUNIQ,LISTINVN,SORTTRAN
          CALL      RDPRDT1
          IF        OVRCD = 1
            MOVE      "GEN.14-Transaction Record not found",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
          ELSE
            CALL      WSRV0000
          ENDIF
.
          GOTO      PITM0500                     * get the next record (item)
.
PITM9999  RETURN
+
.******************************************************************************
.*                                  WRIT0000              Called by: MAIN0000 *
.*                   Extract the invoice records on the temp file             *
.******************************************************************************
.
WRIT0000  MOVE      ZERO,VALDFLG                 * set flag for writing
          CALL      TFILENAM                     * get new extract file name
          MOVE      TFILNAME,FILENAME
.
.         Initialise counters
.
          MOVE      ZERO,RECCNT                  * init. invoice record count
          MOVE      ZERO,ERRCT                   * init. error count
.
          CALL      PREP0000                     * prepare extract file
.
          MOVE      ZERO,TOTAMTCT                * clear total amount counter
          MOVE      ZERO,WRTCT
          DISPLAY   *P1:24,*EL,"Writing : ";
.
          MOVE      SP20,KEY16
          CALL      RSTEMP1                      * position at start of file
WRIT0500  CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,WRIT9000               * eof - finished
.
          BRANCH    LISTFLAG,WRIT0500            * excluded from extract
.
          MOVE      ZERO,ERRFLG                  * initialise error flag
          ADD       ONE,RECCNT                   * incr. invoice record count
.
          PACK      KEY35,LISTHOSP,SP1,ZERO,LISTHFND,LISTUNIQ,LISTINVN
          CALL      RDPRECT1                     * record on file ?
          BRANCH    OVRCD,WRIT0500               * no - ignore invoice
.
          MOVE      LISTURNO,KEY8
          CALL      RDMAST1                      * pmi master record found ?
          BRANCH    OVRCD,WRIT0500               * no - ignore invoice
.
          MOVE      LISTURNO,KEY8
          CALL      RDPMPX21                     * pmi extension found ?
          BRANCH    OVRCD,WRIT0500               * no - ignore invoice
.
          MOVE      LISTUNIQ,KEY8
          CALL      RDPRHD2                      * header record on file ?
          BRANCH    OVRCD,WRIT0500               * no - ignore invoice
.
.         There is only one pridtraf type 2 (IMC) record per invoice and
.         this is used to hold the linked visit and referral override values,
.         so find this record and save these two values for use later on.
.
          MOVE      SP70,SAVELVIS                * clear the two values
          MOVE      SP70,SAVEROVR
.
          PACK      KEY22,LISTINVN,SP30
          CALL      RSPRDT4                      * position before invoice
WRIT0600  CALL      RKPRDT4                      * read next record
          BRANCH    OVRCD,WRIT0700
.
          MATCH     LISTINVN,PRDTINVN            * same invoice still ?
          GOTO      WRIT0700 IF NOT EQUAL        * no - finished
.
          COMPARE   ONE,PRDTRTYP                 * item record ?
          GOTO      WRIT0600 IF NOT EQUAL        * no - ignore record
.
          COMPARE   TWO,PRDTIFLG                 * IMC details record ?
          GOTO      WRIT0600 IF NOT EQUAL        * no - get next pridtraf record
.
          MOVE      PRDTROVR,SAVEROVR            * yes - save the two values
          MOVE      PRDTLVIS,SAVELVIS
.
.         Now loop through the pridtraf records for the invoice to find
.         if there are any items for billing to be claimed
.
WRIT0700  PACK      KEY22,LISTINVN,SP30
          CALL      RSPRDT4                      * position before invoice
WRIT1000  CALL      RKPRDT4                      * read next record
          BRANCH    OVRCD,WRIT0500               * eof - ignore invoice
.
          MATCH     LISTINVN,PRDTINVN            * same invoice still ?
          GOTO      WRIT0500 IF NOT EQUAL        * no - ignore invoice
.
          COMPARE   ONE,PRDTRTYP                 * item record ?
          GOTO      WRIT1000 IF NOT EQUAL        * no - ignore record
.
          COMPARE   TWO,PRDTIFLG                 * IMC details record ?
          GOTO      WRIT1000 IF EQUAL           * yes - get next pridtraf record
.
.         This is the first pridtraf item record for the invoice, so get
.         the corresponding prihreff record now that we have the patient
.         indicator
.
          PACK      KEY27,PRDTUNIQ,PRDTPRAC,PRDTDOCT,PRDTCODE
          CALL      RDPRHR1                      * referral record on file ?
          BRANCH    OVRCD,WRIT0500               * no - ignore invoice
.
          MOVE      PRHRDOCT,SAVESDOC            * save default service provider
          MOVE      PRHRISSC,SAVESIFC            * save default IFC issue code
.
.         Check if the patient was an Inpatient at the time
.
          CALL      CLPATMIS                     * clear admission variables
          CALL      CLPATDSC                     * clear discharge variables
.
          MATCH     SP8,SAVELVIS                 * blank linked visit field ?
          GOTO      WRIT2000 IF EQUAL            * yes
.
          MOVE      SAVELVIS,KEY8
          CALL      RDMISS1                      * admission record found ?
          BRANCH    OVRCD,WRIT0500               * no - ignore invoice
.
          IF        ASTAT = 3
            MOVE      SAVELVIS,KEY8
            CALL      RDDSCH1                    * discharge record found ?
            BRANCH    OVRCD,WRIT0500             * no - ignore invoice
          ENDIF
.
WRIT2000  DISPLAY   *P15:24,*V2LON,LISTINVN,SP2,LISTUNIQ;
          ADD       ONE,WRTCT                    * increment records extracted
.
          IF        RECCNT = 1
            CALL      WHDR0000                   * write header details
          ENDIF
          CALL      WCLM0000                     * write claim details
.
.         Load all the items for claiming into the sorted temp file
.         before processing
.
          CALL      CLRB0000                     * clear temp file B
          CALL      LODS0000
.
.         Process all the service items for the current invoice and write
.         the relevant voucher and service segment records
.
          CALL      PITM0000
.
          CALL      WTLR0000                     * write trailer record
.
          CALL      PROC0000                     * update priectaf records
.
.         A claim has been successfully extracted, so write the claim
.         details to the report without any error details
.
          COMPARE   "55",CLNO                    * page full ?
          CALL      HEAD0000 IF NOT LESS         * yes
.
          PACK      ERRMSG,SP70,SP70
          PRINT     *1,PIPE,*3,LISTINVN,*12,PIPE,*14,PURNO,*23,PIPE:
                    *25,DIM9,*35,PIPE,*37,ERRMSG,*132,PIPE
          ADD       ONE,CLNO
.
          GOTO      WRIT0500
.
.         Update batch and move extract file
.
WRIT9000  CALL      UPBT0000
.
          DISPLAY   *P1:20,*EF,"Total records read      : ",*V2LON,RECCNT,*HOFF:
                    *P1:21,"Total records extracted : ",*V2LON,WRTCT,*HOFF:
                    *P1:22,*EF,"Processing Extract file : ",*V2LON,*+,LONGFNAM:
                    *-,TXT,*HOFF:
                    *P1:24,*HOFF,*B,"Extract finished.  ";
          CALL      HITENTER
.
WRIT9999  RETURN
+
.******************************************************************************
.*                                  UPBT0000              Called by: WRIT0000 *
.*        Update batch totals and move extract file to outbound directory     *
.******************************************************************************
.
UPBT0000  MOVE      SAVBTHN,KEY8
          CALL      RDPRIBH1
          IF        OVRCD = 1
            DISPLAY   *P1:24,*EL,*B,"Error updating priibhaf record.  ";
            CALL      HITENTER
            GOTO      UPBT1000
          ENDIF
.
          MOVE      TOTAMTCT,PRIBBHTL            * update batch total
          MOVE      HDRSEG02,PRIBLOCN            * update location
          MOVE      HDRSEG04,PRIBSNID            * update sender id
          CALL      UPPRIBH1
.
.         Move extract file to output path
.
UPBT1000  MOVE      ZERO,HLEF
          CALL      GETSCR00
          STRIP     PTCNIMCO
          CLEAR     CMDLINE
          APPEND    "mv ",CMDLINE
          APPEND    FILENAME,CMDLINE
          APPEND    TXT,CMDLINE
          APPEND    SP1,CMDLINE
          APPEND    PTCNIMCO,CMDLINE
          APPEND    LONGFNAM,CMDLINE
          APPEND    TXT,CMDLINE
          RESET     CMDLINE
          EXECUTE   CMDLINE,TASKID
.
          CALL      PUTSCR00
.
          MATCH     "0       ",TASKID
          IF        !@EQUAL
            MOVE      "GEN.10-Unable to move extract file",ERRMSG
            ENDSET    ERRMSG
            APPEND    LONGFNAM,ERRMSG
            RESET     ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
          ENDIF
.
UPBT9999  RETURN
+
.******************************************************************************
.*                                  PROC0000              Called by: WRIT0000 *
.*    Check if re-submission, Update records in pmsectaf accordingly          *
.******************************************************************************
.
PROC0000  MOVE      SP10,SAVPRVBN
.
          MOVE      SAVBTHN,PRECBATN             * load the batch number
          MOVE      TWO,PRECFLAG                 * update status to "extracted"
          MOVE      LISTAMNT,PRECAMTC            * load claim amount
          CALL      UPPRECT1                     * update record
.
.         Write a record to the claims audit/history table for this claim
.
          MOVE      PRECINVN,PREAINVN
          CALL      IBACLOCK
          PACK      PREADATE,CCC,CYY,CMM,CDD
          REP       " 0",PREADATE
          MOVE      CTIMEIS,PREATIME
          MOVE      SAVBTHN,PREABATN
          MOVE      TWO,PREASTAT
          MOVE      " 0",PREATYPE
          MOVE      PRIBOPER,PREAOPER
          MOVE      SP30,PREATRID
          MOVE      SP70,PREASPAR
          CALL      WRPRECA1
.
.         Check if this claim was the result of a resubmission
.
          MATCH     SP8,PRECPBAT                 * blank previous batch ?
          GOTO      PROC9999 IF EQUAL            * yes - not a resubmission
.
.         Update the next batch number in the original source claim for this
.         resubmission
.
          MOVE      PRECPBAT,SAVPRVBN            * save previous batch number
          PACK      KEY35,PRECHOSP,TEN5,PRECHFND,PRECUNIQ,PRECINVN,SAVPRVBN
          CALL      RDPRECT1
          BRANCH    OVRCD,PROC9999
.
          MOVE      SAVBTHN,PRECNBAT
          CALL      UPPRECT1
.
PROC9999  RETURN
+
.*****************************************************************************
.*                                  PREP0000       Called by: WRIT0000       *
.*               Prep extract file and get next batch number                 *
.* Returns: SAVBTHN - saved batch number                                     *
.*****************************************************************************
.
.         Get the next batch number
.
PREP0000  MOVE      " 98",PRXCODE                * System Lock Sector 98
          CALL      GETSLK00                     * Get System Lock-Sector 98
.
          READ      CONTROLF,HUND24;*112,PTCNIMBN
          MOVE      PTCNIMBN,DIM8
          RJUSTIFY  DIM8
          MOVE      DIM8,FORM8
.
          COMPARE   "99999999",FORM8
          IF        @EQUAL
            MOVE      ZERO,FORM8                 * Initialise the batch number
          ENDIF
.
          ADD       ONE,FORM8                    * Increment next batch number
          MOVE      FORM8,PTCNIMBN
          WRITAB    CONTROLF,HUND24;*112,PTCNIMBN
.
          CALL      RELSLK00                     * Release System Lock-Sector 98
.
          MOVE      FORM8,SAVBTHN
          MOVE      SAVBTHN,BATCHNUM
          REP       " 0",BATCHNUM
.
.         If multi-hospital is turned on, use the hospital prefix if not
.         blank, otherwise use the default prefix parameter.
.
          COMPARE   ONE,IBCNMHOS                 * using multi-hospital ?
          GOTO      PREP1000 IF NOT EQUAL        * no
.
          MATCH     SP3,HOSPCODE                 * blank hospital code ?
          GOTO      PREP1000 IF EQUAL            * yes - use default parameter
.
          MATCH     SP2,PTHSEDIP                 * blank hospital prefix ?
          GOTO      PREP1000 IF EQUAL            * yes - use default parameter
.
          PACK      LONGFNAM,PTHSEDIP,BATCHNUM   * use hospital specific prefix
          GOTO      PREP2000
.
.         Use default parameter for hospital prefix
.
PREP1000  PACK      LONGFNAM,PTCNEDIH,BATCHNUM
PREP2000  PREP      EXTFILE1,FILENAME
.
          MOVE      SAVBTHN,PRIBBTHN
          IF        COPTION = 1
            PACK      PRIBHFND,HCODE,SP10
          ELSE
            MOVE      SP6,PRIBHFND
          ENDIF
          MOVE      ZERO,PRIBBHTL
          MOVE      RECCNT,PRIBTRIB
          CALL      IBACLOCK
          PACK      PRIBDTBC,CCC,CYY,CMM,CDD
          REP       " 0",PRIBDTBC
          MOVE      CTIMEIS,PRIBTMBC
.
          MOVE      SP10,PRIBOPER
          PACK      KEY14,PASSCODE,SP20
          CALL      RSWBSE3
          CALL      RKWBSE3
          IF        OVRCD = 0
            MATCH     PASSCODE,WBSEPCD
            IF        @EQUAL
              MOVE      WBSEUID,PRIBOPER
            ENDIF
          ENDIF
.
          IF        COPTION = 1
            MOVE      ZERO,PRIBEETP
          ELSE
            MOVE      ONE,PRIBEETP
          ENDIF
          PACK      PRIBEFNM,LONGFNAM,SP20
          MOVE      SP70,PRIBSPAR
          CALL      WRPRIBH1
.
PREP9999  RETURN
+
.******************************************************************************
.*                                  TAIL0000              Called by: MAIN0000 *
.*                              Print Report Tail                             *
.******************************************************************************
.
TAIL0000  CALL      UND132
.
          PRINT     *N,*1,"Total Records Read      : ",RECCNT:
                    *N,*1,"Total Number of Errors  : ",ERRCT:
                    *N,*N,*1,"Total Records Extracted : ",WRTCT
.
          IF        WRTCT =0
            PRINT     *N,*1,"No Extract file created"
            GOTO      TAIL2000
          ENDIF
          BRANCH    VALDFLG,TAIL9000
.
TAIL1000  PRINT     *N,*1,"Extract filename created : ",*+,LONGFNAM,*-,TXT
.
TAIL2000  PRINT     *N,"*** End of Report ***"
.
TAIL9000  MOVE      ZERO,EXIT
.
TAIL9999  RETURN
+
.*****************************************************************************
.*                             CTMP0000            Called by: MAIN0000       *
.*                      Create temporary files                               *
.*****************************************************************************
.
CTMP0000  CALL      TFILENAM                     * Generate temporary file names
          MOVE      TFILNAME,TEMPFILA
.
          CALL      TFILENAM
          MOVE      TFILNAME,TEMPFILB
.
          CALL      KILL0000
.
.         Creat and open temp file 1
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ISBUILD,TEMPFILA,UKEYA
          EXECUTE   CMDLINE,TASKID
          OPEN      LSTTEMP1,TEMPFILA
.
.         Creat and open temp file 2
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ISBUILD,TEMPFILB,UKEYB
          EXECUTE   CMDLINE,TASKID
          OPEN      SRTTEMP1,TEMPFILB
.
CTMP9999  RETURN
+
.*****************************************************************************
.*                             KILL0000             Called by: MAIN0000      *
.*                   erase temporary file                      CREA0000      *
.*****************************************************************************
.
.         Remove temp file 1
.
KILL0000  CLOSE     LSTTEMP1                     * close file
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ERASE,TEMPFILA       * set file erase command
          EXECUTE   CMDLINE,TASKID               * erase temp file
.
.         Remove temp file 2
.
          CLOSE     SRTTEMP1                     * close file
.
          CLEAR     CMDLINE
          PACK      CMDLINE,ERASE,TEMPFILB       * set file erase command
          EXECUTE   CMDLINE,TASKID               * erase temp file
.
KILL9999  RETURN
+
.*****************************************************************************
.*                             CLRA0000            Called by: MAIN0000       *
.*               Clear all temporary table records for invoice listing       *
.*****************************************************************************
.
.         Clear temp file 1
.
CLRA0000  MOVE      SP20,KEY16
          CALL      RSTEMP1                      * position at start of file
          CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,CLRA9999               * end of file - finished
.
          PACK      KEY16,LISTUNIQ,LISTINVN
          CALL      DETEMP1                      * delete record
          GOTO      CLRA0000                     * get next record
.
CLRA9999  RETURN
+
.*****************************************************************************
.*                             CLRB0000            Called by: MAIN0000       *
.*        Clear all temporary table records for item transaction records     *
.*****************************************************************************
.
.         Clear temp file 2
.
CLRB0000  MOVE      SP20,KEY20
          CALL      RSTEMP2                      * position at start of file
          CALL      RKTEMP2                      * read next record
          BRANCH    OVRCD,CLRB9999               * end of file - finished
.
          PACK      KEY20,SORTSPRV,SORTIFCC,SORTCCIN,SORTTRAN
          CALL      DETEMP2                      * delete record
          GOTO      CLRB0000                     * get next record
.
CLRB9999  RETURN
+
.*****************************************************************************
.*                              RERR0000           Called by: MAIN0000       *
.*             Reset error records back to zero status (Not Sent)            *
.*             just in case there were any problems with a previous          *
.*             batch and the error records were not set back to zero.        *
.*****************************************************************************
.
RERR0000  MOVE      HOSPCODE,SAVEHOSP            * initialise hospital
          MOVE      ZERO,FIRSTREC                * initialise flag
.
          PACK      KEY35,HOSPCODE,SP1,ONE,HCODE,SP30,SP10
RERR0500  CALL      RSPRECT1                     * position in file
          CALL      RKPRECT1                     * read next record
          BRANCH    OVRCD,RERR9999               * eof - finished
.
          BRANCH    FIRSTREC,RERR1000            * not first record
.
          MATCH     SP3,HOSPCODE                 * all hospitals extract ?
          GOTO      RERR0800 IF NOT EQUAL        * no
.
          MOVE      PRECHOSP,SAVEHOSP            * yes-load first hospital code
.
.         If this is the first record when using a blank hospital code,
.         it may have a status of waiting, so we need to
.         reposition on the first error record for the hospital, if
.         one exists
.
          COMPARE   ZERO,PRECFLAG                * waiting record ?
          GOTO      RERR0800 IF NOT EQUAL        * no
.
          PACK      KEY35,SAVEHOSP,SP1,ONE,HCODE,SP30,SP10
          GOTO      RERR0500
.
RERR0800  MOVE      ONE,FIRSTREC                 * set first flag to no
.
RERR1000  MATCH     SP3,HOSPCODE                 * all hospitals extract ?
          GOTO      RERR5000 IF NOT EQUAL        * no
.
.         We are running an extract for all hospitals
.
          MATCH     SAVEHOSP,PRECHOSP            * same hospital still ?
          IF        !@EQUAL
            MOVE      PRECHOSP,SAVEHOSP          * no - save new hospital code
            IF        COPTION = 1
              PACK      KEY35,PRECHOSP,SP1,ONE,HCODE,SP30,SP10
            ELSE
              PACK      KEY35,PRECHOSP,SP1,ONE,SP6,SP30,SP10
            ENDIF
            GOTO      RERR0500
          ENDIF
.
          COMPARE   ONE,PRECFLAG                 * error record still ?
          GOTO      RERR4000 IF NOT EQUAL        * no - get next hospital
.
          IF        COPTION = 1
            MATCH     HCODE,PRECHFND             * same health fund still ?
            GOTO      RERR4000 IF NOT EQUAL      * no - finished
          ELSE
            MATCH     SP6,PRECHFND               * blank HF still ?
            GOTO      RERR4000 IF NOT EQUAL      * no - finished
          ENDIF
.
          GOTO      RERR8000
.
RERR4000  PACK      KEY35,PRECHOSP,TILDA40
          GOTO      RERR0500
.
.         We are running an extract for a given hospital id
.
RERR5000  MATCH     HOSPCODE,PRECHOSP            * same hospital still ?
          GOTO      RERR9999 IF NOT EQUAL        * no - finished
.
          COMPARE   ONE,PRECFLAG                 * error record still ?
          GOTO      RERR9999 IF NOT EQUAL        * no - finished
.
          IF        COPTION = 1
            MATCH     HCODE,PRECHFND             * same health fund still ?
            GOTO      RERR9999 IF NOT EQUAL      * no - finished
          ELSE
            MATCH     SP6,PRECHFND               * blank HF still ?
            GOTO      RERR9999 IF NOT EQUAL      * no - finished
          ENDIF
.
.         Reset the record status to "Waiting"
.
RERR8000  PACK      SAVKEY35,PRECHOSP,PRECFLAG,PRECHFND,PRECUNIQ,PRECINVN:
                             PRECBATN
          MOVE      ZERO,PRECFLAG                * yes - reset flag to "0"
          CALL      UPPRECT1                     * update record
          MOVE      SAVKEY35,KEY35               * load key to reposition
          GOTO      RERR0500                     * get next record
.
RERR9999  RETURN
+
.*****************************************************************************
.*                             LOAD0000               Called by: MAIN0000    *
.*        Load all invoice records waiting to be extracted for the           *
.*        selected health fund or claim code                                 *
.*****************************************************************************
.
LOAD0000  MATCH     "IBARSH",PGM                 * using web front-end ?
          IF        @EQUAL
            CALL      WLOD0000                   * yes - load list array
            GOTO      LOAD9999
          ENDIF
.
.         Program is running from the character system
.
          PACK      KEY35,HOSPCODE,SP1,ZERO,SP30,SP10
LOAD0400  CALL      RSPRECT1                     * position in file
LOAD0500  CALL      RKPRECT1                     * read next record
          BRANCH    OVRCD,LOAD9999               * end of file
.
          MATCH     SP3,HOSPCODE                 * all hospitals ?
          IF        !@EQUAL
            MATCH     HOSPCODE,PRECHOSP          * no - same hospital still ?
            GOTO      LOAD9999 IF NOT EQUAL      * no - finished
          ENDIF
.
          COMPARE   ZERO,PRECFLAG                * waiting for extract still ?
          IF        !@EQUAL
            PACK      KEY35,PRECHOSP,TILDA40
            GOTO      LOAD0400                   * get next record
          ENDIF
.
.         Check for Processing by Health Fund option
.
          IF        COPTION = 1
            MATCH     HCODE,PRECHFND             * same health fund ?
            GOTO      LOAD0500 IF NOT EQUAL      * no - ignore record
.
            MATCH     "2",PRECEETP               * health fund claim type ?
            GOTO      LOAD0500 IF EQUAL          * no - ignore record
            GOTO      LOAD2000
          ENDIF
.
.         Processing by Medicare Only option
.
LOAD1000  MATCH     SP6,PRECHFND                 * blank HF ?
          GOTO      LOAD0500 IF NOT EQUAL        * no - ignore record
.
          MATCH     "2",PRECEETP                 * medicare only ?
          GOTO      LOAD0500 IF NOT EQUAL        * no - ignore record
.
.         A waiting record for the Health Fund/Medicare Only has been found,
.         so get the invoice details and calculate the amount outstanding.
.
LOAD2000  MOVE      PRECINVN,KEY8
          CALL      RDPRIN1                      * invoice on file ?
          BRANCH    OVRCD,LOAD9000               * no - delete record
.
          MOVE      PRECUNIQ,KEY8
          CALL      RDPRHD2                      * header record on file ?
          BRANCH    OVRCD,LOAD9000               * no - delete record
.
          MATCH     "1",PRINCNST                 * fully credited ?
          GOTO      LOAD9000 IF EQUAL            * yes - delete record
.
          ASSIGN    (PRINITOT+PRINPAMT+PRINHAMT+PRINIAMT+PRINMAMT+PRINVAMT+PRINOTHA+PRINJAMT+PRINCNTT),FORM12P2
          IF        IBCNUGST=2
            ADD       PRINGSTJ,FORM12P2
          ENDIF
.
.         Ignore zero balance invoices
.
          COMPARE   ZERO,FORM12P2                * zero balance invoice ?
          GOTO      LOAD9000 IF EQUAL            * yes - delete record
.
          MOVE      PRECUNIQ,LISTUNIQ
          MOVE      PRECINVN,LISTINVN
          MOVE      PRECURNO,LISTURNO
          MOVE      PRINDATE,LISTDATE
          MOVE      FORM12P2,LISTAMNT
          MOVE      ZERO,LISTFLAG
          MOVE      PRECHOSP,LISTHOSP
          MOVE      PRHDHFND,LISTHFND
          CALL      WRTEMP1                      * write temp file record
.
          GOTO      LOAD0500                     * get next record
.
.         The current record is not going to be extracted, so delete it
.         and reposition in priectaf
.
LOAD9000  PACK      SAVKEY35,PRECHOSP,PRECFLAG,PRECHFND,PRECUNIQ,PRECINVN:
                             PRECBATN
          MOVE      SAVKEY35,KEY35
          CALL      DEPRECT1                 * delete cancelled/zero invoices
          MOVE      SAVKEY35,KEY35
          CALL      RSPRECT1
          GOTO      LOAD0500
.
LOAD9999  RETURN
+
.*****************************************************************************
.*                             WLOD0000               Called by: LOAD0000    *
.*      The extract is being run from the web front-end, so load the passed  *
.*      array variables into the tempfile.                                   *
.* Requires: an array occurrence for each claim to be extracted.  The array  *
.*           has the following format:                                       *
.*                    Hospital Id      - char(3)                             *
.*                    Unique Id        - char(8)  right justified            *
.*                    Invoice Number   - char(8)  right justified            *
.*                    U/R Number       - char(8)  right justified            *
.*                    Invoice Date     - char(8)  ccyymmdd                   *
.*                    Outstanding Invoice Amount - char(15)                  *
.*****************************************************************************
.
.         Clear list array
.
WLOD0000  MOVE      ZERO,LSTCOUNT
          WHILE     LSTCOUNT < 50
            ADD       ONE,LSTCOUNT
            PACK      LISTARRY[LSTCOUNT],SP30,SP20
          DO
.
.         Receive list array input from web front-end via keyin until
.         a blank record is received (end of array) or limit is reached
.
          MOVE      ZERO,LSTCOUNT
          WHILE     LSTCOUNT < 50
            ADD       ONE,LSTCOUNT
            KEYIN     LISTARRY[LSTCOUNT]
            PACK      LISTARRY[LSTCOUNT],LISTARRY[LSTCOUNT],SP70
            MATCH     SP70,LISTARRY[LSTCOUNT]    * last array record ?
            GOTO      WLOD1000 IF EQUAL          * yes
          DO
.
          ADD       ONE,LSTCOUNT            * only if array limit reached
.
.         Write each array record to the temp file
.
WLOD1000  WHILE     LSTCOUNT > 1
            SUB       ONE,LSTCOUNT
            UNPACK    LISTARRY[LSTCOUNT],LISTHOSP,LISTUNIQ,LISTINVN,LISTURNO:
                                         LISTDATE,DIM15
            MOVE      HCODE,LISTHFND
            MOVE      ZERO,LISTFLAG
            MOVE      DIM15,LISTAMNT
            CALL      WRTEMP1
          DO
.
WLOD9999  RETURN
+
.*****************************************************************************
.*                             DCLM0000               Called by: MAIN0000    *
.*      Display records waiting for extraction for the selected Health Fund  *
.*      or Medicare Only                                                     *
.* Returns:  EXIT  0 = Process claim extract                                 *
.*                 1 = Cancel selected                                       *
.*****************************************************************************
.
DCLM0000  DISPLAY   *P48:5,*V2LON,"Outstanding":
                    *P1:6,*EF,*ULON,"Item",*P6:6,"Invoice ":
                    *P15:6,"Uniq. Id",*P24:6,"U/R No. ",*P33:6,"Invoice Date":
                    *P46:6," Invoice Amount ",*P65:6,"Extract"
.
          MATCH     SP3,HOSPCODE
          IF        @EQUAL
            DISPLAY   *P74:6,*V2LON,*ULON,"Hosp"
          ENDIF
.
          MOVE      ONE,CPAGENO
          MOVE      SIX,CVERT                    * Reset line number
          MOVE      ZERO,FIELD                   * Reset record count
.
          MOVE      SP20,KEY16
          CALL      RSTEMP1                      * position in file
DCLM1000  CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,DCLM5000               * end of file
.
          ADD       ONE,CVERT                    * increment line count
.
          COMPARE   TWENTY3,CVERT                * page full ?
          GOTO      DCLM4000 IF NOT LESS         * yes
.
DCLM3000  ADD       ONE,FIELD                    * increment field count
.
          MATCH     SP8,LISTDATE                 * invoice date blank ?
          IF        @EQUAL
            MOVE      "Invoice   ",CPCDATE
            MOVE      "  not found",DIM15
          ELSE
            UNPACK    LISTDATE,CCENT,CYEAR,CMON,CDAY
            CALL      PACDATE
            MOVE      LISTAMNT,DIM15
          ENDIF
.
.         Only display extract flag if record is NOT set for extraction
.
          MOVE      DYES,FLAGDIM3
          LOAD      FLAGDIM3,LISTFLAG,DNO
          PACK      FLAGDIM3,FLAGDIM3,SP1
.
          IF        LISTFLAG = 1
            DISPLAY   *P1:CVERT,*V2LON,*HON,FIELD,SP3:
                      LISTINVN,SP1,LISTUNIQ,SP1,LISTURNO,SP2,CPCDATE:
                      SP3,DIM15,SP5,FLAGDIM3,SP4
            MATCH     SP3,HOSPCODE
            IF        @EQUAL
              DISPLAY   *P74:CVERT,*HON,LISTHOSP,SP1
            ENDIF
          ELSE
            DISPLAY   *P1:CVERT,*V2LON,FIELD,*HOFF,*P6:CVERT,LISTINVN:
                      *P15:CVERT,LISTUNIQ,*P24:CVERT,LISTURNO:
                      *P34:CVERT,CPCDATE,*P47:CVERT,DIM15,*P67:CVERT,FLAGDIM3
            MATCH     SP3,HOSPCODE
            IF        @EQUAL
              DISPLAY   *P74:CVERT,LISTHOSP
            ENDIF
          ENDIF
          PACK      TMPKEY[FIELD],LISTUNIQ,LISTINVN
          GOTO      DCLM1000
.
.         new page needed
.
DCLM4000  BRANCH    CPAGENO,DCLM4500
.
.         in middle pages : Next & First options
.
DCLM4100  MOVE      "1",CALLPOSN                 * set call position
          CALL      KEYC0000                     * keyin response
          BRANCH    EXIT,DCLM9999:               * exit
                         DCLM7000:               * next
                         DCLM8000:               * previous
                         DCLM6000:               * swap extract flag
                         DCLM6500:               * include all
                         DCLM6600                * exclude all
          GOTO      DCLM9000                     * post
.
.         on first page : Next option
.
DCLM4500  MOVE      "2",CALLPOSN                 * set call position
          CALL      KEYC0000                     * keyin response
          BRANCH    EXIT,DCLM9999:               * exit
                         DCLM7000:               * next
                         DCLM5900:               * previous
                         DCLM6000:               * swap extract flag
                         DCLM6500:               * include all
                         DCLM6600                * exclude all
          GOTO      DCLM9000                     * post
.
.         end of data
.
DCLM5000  BRANCH    CPAGENO,DCLM5500
.
.         in middle pages : First option
.
DCLM5100  MOVE      "3",CALLPOSN                 * set call position
          CALL      KEYC0000                     * keyin response
          BRANCH    EXIT,DCLM9999:               * exit
                         DCLM5900:               * next
                         DCLM8000:               * prev
                         DCLM6000:               * swap extract flag
                         DCLM6500:               * include all
                         DCLM6600                * exclude all
          GOTO      DCLM9000                     * post
.
.         on first page : No options
.
DCLM5500  MOVE      "4",CALLPOSN                 * set call position
          CALL      KEYC0000                     * keyin response
          BRANCH    EXIT,DCLM9999:               * exit
                         DCLM5900:               * next
                         DCLM5900:               * previous
                         DCLM6000:               * swap extract flag
                         DCLM6500:               * include all
                         DCLM6600                * exclude all
          GOTO      DCLM9000                     * post
.
DCLM5900  BEEP
DCLM5910  BRANCH    CALLPOSN,DCLM4100,DCLM4500,DCLM5100,DCLM5500
.
.         A valid selection has been made so swap the extract flag value
.
DCLM6000  MOVE      TMPKEY[FORM2],KEY16
          CALL      RDTEMP1
          BRANCH    OVRCD,DCLM0000
.
          IF        LISTFLAG = 0
            MOVE      ONE,LISTFLAG
          ELSE
            MOVE      ZERO,LISTFLAG
          ENDIF
          CALL      UPTEMP1
.
.         Now redisplay the current screen again
.
          MOVE      TMPKEY[1],KEY16
          CALL      RDTEMP1
          BRANCH    OVRCD,DCLM0000
.
          MOVE      SEVEN,CVERT
          DISPLAY   *P1:CVERT,*EF
          MOVE      ZERO,FIELD
          GOTO      DCLM3000
.
.         Set all records for extract
.
DCLM6500  MOVE      ZERO,INCLFLAG
          GOTO      DCLM6700
.
.         Set all records to be excluded from extract
.
DCLM6600  MOVE      ONE,INCLFLAG
DCLM6700  COMPARE   ZERO,FIELD                   * any records displayed ?
          GOTO      DCLM0000 IF EQUAL            * no - finished
.
          CALL      RSET0000
          MOVE      TMPKEY[1],KEY16
          CALL      RDTEMP1                      * reread first record on screen
          BRANCH    OVRCD,DCLM0000
.
          MOVE      SEVEN,CVERT
          DISPLAY   *P1:CVERT,*EF
          MOVE      ZERO,FIELD
          GOTO      DCLM3000                     * redisplay list
.
.         next screen selected
.
DCLM7000  MOVE      SEVEN,CVERT
          ADD       ONE,CPAGENO
          DISPLAY   *P1:CVERT,*EF
          MOVE      ZERO,FIELD
          GOTO      DCLM3000
.
.         previous screen selected
.
DCLM8000  MOVE      TMPKEY[1],KEY16
          CALL      RDTEMP1                      * reread first record on screen
          MOVE      ZERO,FORM2                   * initialise count
          WHILE     FORM2 <= 15
            CALL      RPTEMP1                    * read previous record
            BRANCH    OVRCD,DCLM0000             * start of file
.
            ADD       ONE,FORM2                  * increment count
          DO
.
          MOVE      SEVEN,CVERT                  * reset line position
          SUB       ONE,CPAGENO                  * decrement page number
          MOVE      ZERO,FIELD                   * reset record counter
          DISPLAY   *P1:CVERT,*EF
          GOTO      DCLM3000
.
DCLM9000  MOVE      ZERO,CPAGENO                 * initialise print variables
          MOVE      ZERO,CNOUNDLN
          CALL      IBACLOCK
.
          MOVE      ZERO,EXIT
          GOTO      DCLM9999
.
DCLM9100  MOVE      ONE,EXIT
.
DCLM9999  RETURN
+
.*****************************************************************************
.*                             RSET0000            Called by: DCLM0000       *
.*   Reset all records for either inclusion or exclusion as required         *
.* Requires: INCLFLAG  0 = set all records for inclusion in extract          *
.*                     1 = set all records for exclusion from extract        *
.*****************************************************************************
.
RSET0000  MOVE      SP20,KEY16
          CALL      RSTEMP1                      * position at start of file
RSET0500  CALL      RKTEMP1                      * read next record
          BRANCH    OVRCD,RSET9999               * end of file - finished
.
          MOVE      INCLFLAG,LISTFLAG            * set inclusion flag
          CALL      UPTEMP1                      * update record
          GOTO      RSET0500                     * get next record
.
RSET9999  RETURN
+
.*****************************************************************************
.*                  KEYC0000                    Called by : DCLM0000         *
.*        Keyin response to prompt                                           *
.*        Returns : EXIT = 0      Post entered                               *
.*                  EXIT = 1      Exit entered                               *
.*                  EXIT = 2      Next entered                               *
.*                  EXIT = 3      Prev entered                               *
.*                  EXIT = 4      Extract flag swapped                       *
.*                  EXIT = 5      Include All                                *
.*                  EXIT = 6      Exclude All                                *
.*****************************************************************************
.
KEYC0000  DISPLAY   *P1:24,*EL,"Select Item, (",*V2LON,ANSI,*HOFF:
                    ")nclude all, e(",*V2LON,ANSX,*HOFF,")clude all, (":
                    *V2LON,ANSP,*HOFF,")ost, (",*V2LON,ANSC,*HOFF,")ancel";
          MOVE      FIFTY8,CCOL
          IF        CALLPOSN = 1 | CALLPOSN = 2
            DISPLAY   ", (",*V2LON,ANSN,*HOFF,")ext";
            ADD       EIGHT,CCOL
          ENDIF
          IF        CALLPOSN = 1 | CALLPOSN = 3
            DISPLAY   ", p(",*V2LON,ANSR,*HOFF,")ev.";
            ADD       NINE,CCOL
          ENDIF
.
          DISPLAY   " :  ";
          ADD       FOUR,CCOL
.
KEYC1000  KEYIN     *PCCOL:24,*V2LON,*JR,DIM2:
                    *PCCOL:24,*DV,DIM2
          PACK      DIM2,DIM2,SP2
          UNPACK    DIM2,ANS,ANS
          REP       UPPLOW,ANS
.
          MATCH     ANSC,ANS                * cancel selected ?
          GOTO      KEYC9100 IF EQUAL       * yes
.
          MATCH     ANSN,ANS                * next page selected ?
          GOTO      KEYC9200 IF EQUAL       * yes
.
          MATCH     ANSR,ANS                * previous page selected ?
          GOTO      KEYC9300 IF EQUAL       * yes
.
          MATCH     ANSP,ANS                * post selected ?
          GOTO      KEYC9000 IF EQUAL       * yes
.
          MATCH     ANSI,ANS                * include all selected ?
          GOTO      KEYC9500 IF EQUAL       * yes
.
          MATCH     ANSX,ANS                * exclude all selected ?
          GOTO      KEYC9600 IF EQUAL       * yes
.
          TYPE      DIM2
          GOTO      KEYC5000 IF EQUAL       * a number entered
.
KEYC1500  BEEP
          GOTO      KEYC1000
.
.         number entered directly
.
KEYC5000  MOVE      DIM2,FORM2
.
          COMPARE   FORM2,ZERO              * number < 1 ?
          GOTO      KEYC1500 IF NOT LESS    * yes - invalid
.
          COMPARE   FORM2,FIELD             * number in range ?
          GOTO      KEYC1500 IF LESS        * no - too high
.
          GOTO      KEYC9400
.
KEYC9000  MOVE      ZERO,EXIT               * post
          GOTO      KEYC9999
.
KEYC9100  MOVE      ONE,EXIT                * exit
          GOTO      KEYC9999
.
KEYC9200  MOVE      TWO,EXIT                * next
          GOTO      KEYC9999
.
KEYC9300  MOVE      THREE,EXIT              * previous
          GOTO      KEYC9999
.
KEYC9400  MOVE      FOUR,EXIT               * swap extract flag
          GOTO      KEYC9999
.
KEYC9500  MOVE      FIVE,EXIT               * include all
          GOTO      KEYC9999
.
KEYC9600  MOVE      SIX,EXIT                * exclude all
          GOTO      KEYC9999
.
KEYC9999  RETURN
+
.******************************************************************************
.*                             WHDR0000            Called by: WRIT0000        *
.*                  Write the Header segment                  VALD0000        *
.******************************************************************************
.
WHDR0000  MOVE      SAVBTHN,HDRSEG01             * load batch number
          REP       " 0",HDRSEG01
.
.         Load the Location ID.
.         If multi-hospital is turned on, use the hospital location if not
.         blank, otherwise use the default location parameter.
.
          COMPARE   ONE,IBCNMHOS                 * using multi-hospital ?
          GOTO      WHDR1000 IF NOT EQUAL        * no
.
          MATCH     SP3,LISTHOSP                 * blank hospital ?
          GOTO      WHDR1000 IF EQUAL            * yes - default to parameter
.
          MOVE      LISTHOSP,KEY3
          CALL      RDPTHSP1                     * hospital on file ?
          BRANCH    OVRCD,WHDR1000               * no - default to parameter
.
          MATCH     SP8,PTHSLOCN                 * blank location for hosp. ?
          GOTO      WHDR1000 IF EQUAL            * yes - default to parameter
.
          MOVE      PTHSLOCN,HDRSEG02            * set location id
          GOTO      WHDR2000
.
.         Use the default location parameter
.
WHDR1000  MATCH     SP8,PTCNCLID
          IF        @EQUAL
            MOVE      "HDR.2.1-Current Location not set up",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
          ELSE
            MOVE      PTCNCLID,HDRSEG02          * set location id
          ENDIF
.
WHDR2000  PACK      CURRDATE,CCC,CYY,CMM,CDD
          REP       " 0",CURRDATE
.
.         Get the certificate that covers today
.
          PACK      KEY16,HDRSEG02,CURRDATE
          CALL      RDPTCTI1                     * record found for today ?
          COMPARE   ZERO,OVRCD
          GOTO      WHDR9000 IF EQUAL            * yes - use this certificate id
.
          CALL      RPPTCTI1                     * no - read previous record
          IF        OVRCD = 0
            MATCH     CURRDATE,PTCITDTE          * within date range ?
            GOTO      WHDR9000 IF NOT LESS       * yes - use this certificate id
          ENDIF
.
          MOVE      "HDR.3.1-Current Certificate not available",ERRMSG
          MOVE      SP9,DIM9
          CALL      PERR0000
.
WHDR9000  MATCH     SP10,PTCIIDEN
          IF        @EQUAL
            MOVE      "HDR.3.2-Certificate Identifier blank",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
          ELSE
            MOVE      PTCIIDEN,HDRSEG03          * load certificate identifier
          ENDIF
.
          MATCH     SP70,PTCISNID
          IF        @EQUAL
            MOVE      "HDR.4.1-Sender Id blank",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
          ELSE
            MOVE      PTCISNID,HDRSEG04          * load sender id
          ENDIF
.
.         Load the Test/Production flag for the claim based on the setting for
.         either the Health Fund or the claim code.
.
          IF        COPTION = 1
            MOVE      PTFXTFLG,HDRSEG05
          ELSE
            MOVE      PTCNUTPM,HDRSEG05
          ENDIF
.
          BRANCH    VALDFLG,WHDR9999             * validation only
.
.
          WRITE     EXTFILE1,SEQ;TILDA01,ANSH,ANSD,ANSR:
                                 HDRSEG01,HDRSEG02,HDRSEG03,HDRSEG04,HDRSEG05
.
WHDR9999  RETURN
+
.******************************************************************************
.*                                  WCLM0000              Called by: VALD0000 *
.*                            Write Claim Details                  & WRIT0000 *
.******************************************************************************
.
WCLM0000  MOVE      SP70,CLMSEG01
          MOVE      SP70,CLMSEG02
          MOVE      SP70,CLMSEG03
          MOVE      SP70,CLMSEG04
          MOVE      SP70,CLMSEG05
          MOVE      SP70,CLMSEG06
          MOVE      SP70,CLMSEG07
          MOVE      SP70,CLMSEG08
          MOVE      SP70,CLMSEG09
          MOVE      SP70,CLMSEG10
          MOVE      SP70,CLMSEG11
          MOVE      SP70,CLMSEG12
          MOVE      SP70,CLMSEG13
          MOVE      SP70,CLMSEG14
          MOVE      SP70,CLMSEG15
          MOVE      SP70,CLMSEG16
          MOVE      SP70,CLMSEG17
          MOVE      SP70,CLMSEG18
          MOVE      SP70,CLMSEG19
          MOVE      SP70,CLMSEG20
          MOVE      SP70,CLMSEG21
          MOVE      SP70,CLMSEG22
          MOVE      SP70,CLMSEG23
          MOVE      SP70,CLMSEG24
          MOVE      SP70,CLMSEG25
.
.         Load AccidentInd
.
          MATCH     "1",PRHRACCI
          IF        @EQUAL
            MOVE      ANSY,CLMSEG01
          ELSE
            MOVE      ANSN,CLMSEG01
          ENDIF
.
.         Load AccountPaidInd
.
          MATCH     "1",PRHRACPD
          IF        @EQUAL
            MOVE      ANSY,CLMSEG02
          ELSE
            MOVE      ANSN,CLMSEG02
          ENDIF
.
.         Load AccountReferenceId
.
          PACK      CLMSEG03,PRECINVN,SP20
          SQUEEZE   CLMSEG03
          PACK      CLMSEG03,CLMSEG03,SP20
.
.         Load ClaimTypeCde
.
          MATCH     SP3,PRHRTACC
          IF        @EQUAL
            MOVE      "CLM.19.1-ClaimTypeCde cannot be blank",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WCLM3000
          ENDIF
.
          PACK      KEY5,CATta,PRHRTACC
          CALL      RDCODE1
          IF        OVRCD = 1
            MOVE      "CLM.19.2-ClaimTypeCde (",ERRMSG
            ENDSET    ERRMSG
            APPEND    PRHRTACC,ERRMSG
            APPEND    ") not on file",ERRMSG
            RESET     ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WCLM3000
          ENDIF
.
          MATCH     SP1,TCINDC1
          IF        @EQUAL
            MOVE      "CLM.19.3-ClaimTypeCde (",ERRMSG
            ENDSET    ERRMSG
            APPEND    PRHRTACC,ERRMSG
            APPEND    ") Indicator 1 is blank",ERRMSG
            RESET     ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WCLM3000
          ENDIF
.
          MATCH     "0",TCINDC1
          IF        @EQUAL
            MOVE      "CLM.19.4-ClaimTypeCde (",ERRMSG
            ENDSET    ERRMSG
            APPEND    PRHRTACC,ERRMSG
            APPEND    ") Indicator 1 is not set for electronic claiming",ERRMSG
            RESET     ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WCLM3000
          ENDIF
.
          TYPE      TCINDC1
          IF        !@EQUAL
            MOVE      "CLM.19.5-ClaimTypeCde (",ERRMSG
            ENDSET    ERRMSG
            APPEND    PRHRTACC,ERRMSG
            APPEND    ") Indicator 1 is not numeric",ERRMSG
            RESET     ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WCLM3000
          ENDIF
.
          MOVE      ZERO,FORM1
          MOVE      TCINDC1,FORM1
          BRANCH    FORM1,WCLM2000:              * AG
                          WCLM2000:              * SC
                          WCLM1000:              * BB
                          WCLM1000:              * DVA BB
                          WCLM1000:              * S & F
                          WCLM2000:              * MB
                          WCLM2000               * MO
.
WCLM1000  MOVE      "CLM.19.6-ClaimTypeCde (",ERRMSG
          ENDSET    ERRMSG
          APPEND    PRHRTACC,ERRMSG
          APPEND    ") Indicator 1 is not valid",ERRMSG
          RESET     ERRMSG
          MOVE      SP9,DIM9
          CALL      PERR0000
          GOTO      WCLM3000
.
WCLM2000  LOAD      CLMSEG19,FORM1,CODEAG,CODESC,SP2,SP2,SP2,CODEMB,CODEMO
.
.          MATCH     CODEMO,CLMSEG19              * Medicare Only claim ?
.          GOTO      WCLM3000 IF EQUAL            * yes
.
.         Make sure that the participant has capability for the claim type
.
.          IF        FORM1 = 1 & CLMARRAY[1] = 1
.            GOTO      WCLM3000
.          ENDIF
.
.          IF        FORM1 = 2 & CLMARRAY[2] = 1
.            GOTO      WCLM3000
.          ENDIF
.
.          IF        FORM1 = 6 & CLMARRAY[3] = 1
.            GOTO      WCLM3000
.          ENDIF
.
.          MOVE      "CLM.19.7-Participant not capable for IMC",ERRMSG
.          ENDSET    ERRMSG
.          APPEND    CLMSEG19,ERRMSG
.          APPEND    " capable",ERRMSG
.          RESET     ERRMSG
.          MOVE      SP9,DIM9
.          CALL      PERR0000
.
.         Load BenefitAssigmentAuthorised (requires claim type [FORM1]
.                                          to be set)
.
WCLM3000  BRANCH    FORM1,WCLM3200:              * AG
                          WCLM3200:              * SC
                          WCLM3200:              * BB
                          WCLM3200:              * DVA BB
                          WCLM3200:              * S & F
                          WCLM3100:              * MB
                          WCLM3100               * MO
          GOTO      WCLM3200
.
WCLM3100  MATCH     "1",PRHRBASS
          IF        !@EQUAL
            MOVE      "CLM.7.1-BenefitAssigmentAuthorised not set for submission",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
          ELSE
            MOVE      ANSY,CLMSEG07
          ENDIF
.
.         Load BillingAgentId & FacilityId
.
.         First, load the default parameter values for both
.
WCLM3200  MOVE      PTCNBAID,DIM8B               * load default parameter
          MOVE      CAPPRVNO,DIM8A               * load default facility id
.
          COMPARE   ONE,IBCNMHOS                 * using multi-campus ?
          GOTO      WCLM3500 IF NOT EQUAL        * no - use default parameter
.
.         We are using multi-hospital, so get the two values from the
.         hospital file (if they exist) - first we need to get the Medical
.         Practice record which is linked to a register and this is where
.         the hospital is identified.
.
          MATCH     SP6,PRHRPRAC                 * practice blank ?
          IF        @EQUAL
            MOVE      "CLM.20.5-Practice is blank",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WCLM4000
          ENDIF
.
          MOVE      PRHRPRAC,KEY6
          CALL      RDPRPR1                      * practice on file ?
          IF        OVRCD = 1
            MOVE      "CLM.20.6-Practice not on file",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WCLM4000
          ENDIF
.
          MATCH     SP3,PRPRREGI                 * register blank ?
          IF        @EQUAL
            MOVE      "CLM.20.7-Register is blank",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WCLM4000
          ENDIF
.
          MOVE      PRPRREGI,KEY3
          CALL      RDREGA1                      * register on file ?
          IF        OVRCD = 1
            MOVE      "CLM.20.8-Register not on file",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WCLM4000
          ENDIF
.
          MATCH     SP3,REGHOSP                  * hospital blank ?
          IF        @EQUAL
            MOVE      "CLM.20.9-Hospital is blank",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WCLM4000
          ENDIF
.
          MOVE      REGHOSP,KEY3
          CALL      RDPTHSP1                     * hospital on file ?
          IF        OVRCD = 1
            MOVE      "CLM.20.10-Hospital not on file",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WCLM4000
          ENDIF
.
.         Load the hospital FacilityId instead of the default parameter,
.         if the field is populated.
.
          MATCH     SP10,PTHSAPPR
          IF        !@EQUAL
            MOVE      PTHSAPPR,DIM8A
          ENDIF
.
.         Load the hospital BillingAgentId instead of the default parameter,
.         if the field is populated
.
          MATCH     SP8,PTHSORID
          IF        !@EQUAL
            MOVE      PTHSORID,DIM8B
          ENDIF
.
.         Validate BillingAgentId if populated
.
WCLM3500  MATCH     SP8,DIM8B
          IF        !@EQUAL
            MOVE      FOUR,PROVFLAG              * set flag to servicing doctor
            MOVE      DIM8B,DIM8
            MOVE      ONE,BLAGFLAG
            CALL      VPRN0000                   * valid provider ?
            BRANCH    EXIT,WCLM4000              * no
          ENDIF
.
.         Validate FacilityId (mandatory field)
.         
          MOVE      ONE,PROVFLAG                 * set flag to hospital facility
          MOVE      DIM8A,DIM8
          MOVE      ZERO,BLAGFLAG
          CALL      VPRN0000                     * valid provider ?
          BRANCH    EXIT,WCLM4000                * no
.
          MOVE      DIM8B,CLMSEG08               * BillingAgentId
          MOVE      DIM8A,CLMSEG20               * FacilityId
.
.         Check that BillingAgentId is populated for MO and MB claims
.
WCLM4000  MATCH     CODEMO,CLMSEG19
          IF        !@EQUAL
            MATCH     CODEMB,CLMSEG19
            GOTO      WCLM4500 IF NOT EQUAL
          ENDIF
.
.         MATCH     SP8,CLMSEG08
.         IF        @EQUAL
.           MOVE      "CLM.8.1-BillingAgentId is mandatory",ERRMSG
.           MOVE      SP9,DIM9
.           CALL      PERR0000
.         ENDIF
.
.         Load FundBrandId
.
WCLM4500  MATCH     CODEMO,CLMSEG19              * Medicare Only claim ?
          GOTO      WCLM5000 IF EQUAL            * yes
.
          MOVE      PTFXECLP,CLMSEG21            * load Eclipse participant code
.
.         Load FundPayeeId
.
WCLM5000  MATCH     SP70,PRHRDOCT 
          GOTO      WCLM5500 IF EQUAL
.
          MATCH     SP70,LISTHFND
          GOTO      WCLM5500 IF EQUAL
.
          PACK      DIM10,PRHRDOCT,SP70 
          PACK      KEY16,DIM10,LISTHFND,SP70
          CALL      RDPMFPH1
          BRANCH    OVRCD,WCLM5500
.
          MATCH     SP70,PMFPFPID
          GOTO      WCLM5500 IF EQUAL
.
          MOVE      PMFPFPID,CLMSEG22
.
.         Load PrincipalProviderNum
.
WCLM5500  PACK      KEY22,PRHRPRAC,PRHRDOCT,PRHDCLAM,PRHRPIND
          CALL      RDPRDO1
          IF        OVRCD = 1
            MOVE      "CLM.23.1-Service Doctor not on file",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WCLM6000
          ENDIF
.
          MOVE      PRDOPROV,DIM8
          MOVE      FOUR,PROVFLAG                * set flag to doctor provider
          MOVE      ZERO,BLAGFLAG
          CALL      VPRN0000                     * valid provider ?
          BRANCH    EXIT,WCLM6000                * no
.
          MOVE      PRDOPROV,CLMSEG23
.
.         Load SenderContactPersonPhone
.
WCLM6000  MOVE      PTCNSCPP,CLMSEG24
          SQUEEZE   CLMSEG24
          PACK      CLMSEG24,CLMSEG24,SP70
.
.         Load SenderContactPersonName
.
          MOVE      PTCNSCPN,CLMSEG25
.
WCLM9000  BRANCH    VALDFLG,WCLM9999             * validation only
.
          WRITE     EXTFILE1,SEQ;TILDA01,ANSC,ANSL,ANSM:
                                 CLMSEG01,CLMSEG02,CLMSEG03,CLMSEG04,CLMSEG05:
                                 CLMSEG06,CLMSEG07,CLMSEG08,CLMSEG09,CLMSEG10:
                                 CLMSEG11,CLMSEG12,CLMSEG13,CLMSEG14,CLMSEG15:
                                 CLMSEG16,CLMSEG17,CLMSEG18,CLMSEG19,CLMSEG20:
                                 CLMSEG21,CLMSEG22,CLMSEG23,CLMSEG24,CLMSEG25
.
WCLM9999  RETURN
+
.******************************************************************************
.*                                  WVCH0000              Called by: VALD0000 *
.*                            Write Voucher Details                & WRIT0000 *
.******************************************************************************
.
WVCH0000  ADD       ONE,VCHCOUNT                 * increment voucher count
          IF        VCHCOUNT > 16
            MOVE      "GEN.15-Too many vouchers for claim",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
          ENDIF
.
          MOVE      SP70,VCHSEG01
          MOVE      SP70,VCHSEG02
          MOVE      SP70,VCHSEG03
          MOVE      SP70,VCHSEG04
          MOVE      SP70,VCHSEG05
          MOVE      SP70,VCHSEG06
          MOVE      SP70,VCHSEG07
          MOVE      SP70,VCHSEG08
          MOVE      SP70,VCHSEG09
          MOVE      SP70,VCHSEG10
          MOVE      SP70,VCHSEG11
          MOVE      SP70,VCHSEG12
          MOVE      SP70,VCHSEG13
          MOVE      SP70,VCHSEG14
          MOVE      SP70,VCHSEG15
          MOVE      SP70,VCHSEG16
          MOVE      SP70,VCHSEG17
          MOVE      SP70,VCHSEG18
          MOVE      SP70,VCHSEG19
          MOVE      SP70,VCHSEG20
          MOVE      SP70,VCHSEG21
          MOVE      SP70,VCHSEG22
          MOVE      SP70,VCHSEG23
          MOVE      SP70,VCHSEG24
          MOVE      SP70,VCHSEG25
          MOVE      SP70,VCHSEG26
.
          REP       " 0",VCHSEG12
          REP       " 0",VCHSEG14
          REP       " 0",VCHSEG15
.
.         Load AdmissionDate
.
          MATCH     SP8,ADATE
          GOTO      WVCH0500 IF EQUAL
.
          MATCH     ADATE,CURRDATE
          IF        @LESS
            MOVE      "VCH.1.1-AdmissionDate cannot be in the future",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WVCH0500
          ENDIF
.
          MATCH     PBDATE,ADATE
          IF        @LESS
            MOVE      "VCH.1.2-AdmissionDate cannot be before PatientDateOfBirth",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WVCH0500
          ENDIF
.
          UNPACK    ADATE,CCENT,CYEAR,CMON,CDAY
          PACK      VCHSEG01,CDAY,CMON,CCENT,CYEAR
          REP       " 0",VCHSEG01
.
.         Load CompensationClaimInd
.
WVCH0500  MATCH     "1",SORTCCIN
          IF        @EQUAL
            MOVE      ANSY,VCHSEG02
          ELSE
            MOVE      ANSN,VCHSEG02
          ENDIF
.
.         Load DischargeDate
.
WVCH1000  MATCH     SP8,ADATE                    * blank admission date ?
          GOTO      WVCH1500 IF EQUAL            * yes
.
          COMPARE   THREE,ASTAT                  * patient discharged ?
          GOTO      WVCH1500 IF NOT EQUAL        * no
.
          MATCH     SP8,DDATE                    * blank discharge date
          IF        @EQUAL
            MOVE      "VCH.3.1-DischargeDate cannot be blank where patient is discharged",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WVCH1500
          ENDIF
.
          MATCH     ADATE,DDATE
          IF        @LESS
            MOVE      "VCH.3.2-DischargeDate cannot be less than AdmissionDate",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WVCH1500
          ENDIF
.
          MATCH     PBDATE,DDATE
          IF        @LESS
            MOVE      "VCH.3.3-DischargeDate cannot be before PatientDateOfBirth",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WVCH1500
          ENDIF
.
          UNPACK    DDATE,CCENT,CYEAR,CMON,CDAY
          PACK      VCHSEG03,CDAY,CMON,CCENT,CYEAR
          REP       " 0",VCHSEG03
.
.         Load FinancialInterestDisclosureInd
.
WVCH1500  MOVE      PRHRFIDI,VCHSEG04
          REP       " N0N1Y",VCHSEG04
          MATCH     ANSY,VCHSEG04
          GOTO      WVCH1550 IF EQUAL
.
          MATCH     ANSN,VCHSEG04
          GOTO      WVCH1550 IF EQUAL
.
          MOVE      "VCH.4.1-FinancialInterestDisclosureInd is not valid",ERRMSG
          MOVE      SP9,DIM9
          CALL      PERR0000

.         Load IFCIssueCde
.
WVCH1550  MATCH     SP3,SORTIFCC                 * blank IFC Issue code ?
          IF        @EQUAL
            MOVE      "VCH.5.1-IFCIssueCde is blank",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WVCH2000
          ENDIF
.
          PACK      KEY5,CATic,SORTIFCC
          CALL      RDCODE1                      * IFC issue code on file ?
          IF        OVRCD = 1
            MOVE      "VCH.5.2-IFCIssueCde (",ERRMSG
            ENDSET    ERRMSG
            APPEND    PRHRISSC,ERRMSG
            APPEND    ") is not on file",ERRMSG
            RESET     ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WVCH2000
          ENDIF
.
          MATCH     SP1,TCINDC1                  * blank Indicator 1 ?
          IF        @EQUAL
            MOVE      "VCH.5.3-Indicator 1 for IFCIssueCde (",ERRMSG
            ENDSET    ERRMSG
            APPEND    PRHRISSC,ERRMSG
            APPEND    ") is blank",ERRMSG
            RESET     ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WVCH2000
          ENDIF
.
          MATCH     ANSW,TCINDC1                 * Indicator 1 = W ?
          IF        @EQUAL
            MOVE      ANSW,VCHSEG05              * yes - valid
            GOTO      WVCH2000 IF EQUAL
          ENDIF
.
          MATCH     ANSX,TCINDC1                 * Indicator 1 = X ?
          IF        @EQUAL
            MOVE      ANSX,VCHSEG05              * yes - valid
            GOTO      WVCH2000 IF EQUAL
          ENDIF
.
.         IFCIssueCde is not W or X, so if ClaimTypeCde is "SC", then 
.         we don't have a valid value
.
          MATCH     "SC",CLMSEG19                * ClaimTypeCde "SC" ?
          GOTO      WVCH1600 IF EQUAL            * yes - error
.
          MATCH     ANSV,TCINDC1                 * Indicator 1 = V ?
          IF        @EQUAL
            MOVE      ANSV,VCHSEG05              * yes - valid
            GOTO      WVCH2000 IF EQUAL
          ENDIF
.
.         IFCIssueCde is not W, X or V, so if ClaimTypeCde is "AG", then 
.         we don't have a valid value
.
          MATCH     "AG",CLMSEG19                * ClaimTypeCde "AG" ?
          GOTO      WVCH1600 IF EQUAL            * yes - error
.
          MATCH     ANSN,TCINDC1                 * Indicator 1 = N ?
          IF        @EQUAL
            MOVE      ANSN,VCHSEG05              * yes - valid
            GOTO      WVCH2000 IF EQUAL
          ENDIF
.
          MOVE      "VCH.5.4-IFCIssueCde is not valid",ERRMSG
          MOVE      SP9,DIM9
          CALL      PERR0000
          GOTO      WVCH2000
.
WVCH1600  MOVE      "VCH.5.5-IFCIssueCde is not valid for ClaimTypeCde (",ERRMSG
          ENDSET    ERRMSG
          APPEND    CLMSEG19,ERRMSG
          APPEND    ")",ERRMSG
          RESET     ERRMSG
          MOVE      SP9,DIM9
          CALL      PERR0000
.
.         Load PatientAliasFamilyName
.
WVCH2000  MATCH     SP70,PMPXHFSN
          IF        !@EQUAL
            MOVE    PMPXHFSN,VCHSEG06
          ENDIF
.
.         Load PatientAliasFirstName
.
          MATCH     SP70,PMPXHFGN
          IF        !@EQUAL
            MOVE    PMPXHFGN,VCHSEG07
          ENDIF
.
.         Load PatientDateOfBirth
.
          MATCH     SP8,PBDATE
          IF        @EQUAL
            MOVE      "VCH.8.1-PatientDateOfBirth is blank",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
          ELSE
            UNPACK    PBDATE,CCENT,CYEAR,CMON,CDAY
            PACK      VCHSEG08,CDAY,CMON,CCENT,CYEAR
            REP       " 0",VCHSEG08
          ENDIF
.
.         Load PatientFamilyName
.
          PACK      VCHSEG09,PTMASNAM,SP70
          REP       UPPLOW,VCHSEG09
          REP       ALPTOBLK,VCHSEG09
          SQUEEZE   VCHSEG09
          MATCH     SP70,VCHSEG09
          IF        !@EOS
            MOVE      "VCH.9.1-PatientFamilyName contains invalid characters",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WVCH2500
          ENDIF
.
          PACK      VCHSEG09,PTMASNAM,SP30,SP10
          MATCH     SP70,VCHSEG09
          IF        @EQUAL
            MOVE      "VCH.9.2-PatientFamilyName is blank",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
          ENDIF
.
.         Load PatientFirstName
.
WVCH2500  PACK      VCHSEG10,PMPXFNAM,SP70
          REP       UPPLOW,VCHSEG10
          REP       ALPTOBLK,VCHSEG10
          SQUEEZE   VCHSEG10
          MATCH     SP70,VCHSEG10
          IF        !@EOS
            MOVE      "VCH.10.1-PatientFirstName contains invalid characters",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WVCH3000
          ENDIF
.
          MOVE      PMPXFNAM,VCHSEG10
          MATCH     SP70,VCHSEG10
          IF        @EQUAL
            MOVE      "VCH.10.2-PatientFirstName is blank",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
          ENDIF
.
.         Load PatientFundMembershipNum
.
WVCH3000  MATCH     "MO",CLMSEG19                * ClaimTypeCde "MO" ?
          GOTO      WVCH3500 IF EQUAL            * yes
.
          MATCH     SP20,PFNDMM                  * Fund membership blank ?
          IF        @EQUAL
            MOVE      "VCH.11.1-PatientFundMembershipNum is blank",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
          ELSE
            MOVE      PFNDMM,VCHSEG11
            SQUEEZE   VCHSEG11
            PACK      VCHSEG11,VCHSEG11,SP20
          ENDIF
.
.         Load PatientFundUPI
.
          MOVE      SP2,VCHSEG12                 * set default to spaces
          MATCH     SP2,PMPXFUPI                 * blank Fund UPI ?
          GOTO      WVCH3500 IF EQUAL            * yes
.
.         Fund UPI is not blank so make sure it's numeric
.
          MOVE      PMPXFUPI,DIM2
          SQUEEZE   DIM2
          TYPE      DIM2
          IF        !@EQUAL
            MOVE      "VCH.12.1-PatientFundUPI not numeric",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WVCH3500
          ENDIF
.
.         Fund UPI is numeric, so load according to the number of digits
.
          MOVELPTR  DIM2,FORM1
          IF        FORM1 = 1
            PACK      VCHSEG12,ZERO,DIM2
          ELSE
            MOVE      DIM2,VCHSEG12
          ENDIF
.
.         Load PatientGender
.
WVCH3500  MATCH     ANSM,PSEX
          IF        !@EQUAL
            MATCH     ANSF,PSEX
            GOTO      WVCH4000 IF NOT EQUAL
          ENDIF
          MOVE      PSEX,VCHSEG13
.
.         Load PatientMedicareCardNum & PatientReferenceNum
.
WVCH4000  MATCH     SP10,PMEDI                   * Medicare No. blank ?
          IF        @EQUAL
            MOVE      "VCH.14.1-PatientMedicareCardNum is blank",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WVCH4500
          ENDIF
.
          MOVE      PMEDI,VCHSEG14               * no
          MATCH     SP2,PTMXMCCD
          IF        @EQUAL
            MOVE      "VCH.14.2-PatientReferenceNum is blank",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
          ELSE
            MOVE      PTMXMCCD,DIM2
            SQUEEZE   DIM2                       * remove blanks
            MATCH     "0",DIM2                   * leading zero ?
            IF        @EQUAL
              UNPACK    DIM2,ANS,VCHSEG15        * yes - take second char.
            ELSE
              MOVE      DIM2,VCHSEG15
            ENDIF
          ENDIF
.
.         Load PatientSecondInitial
.
WVCH4500  PACK      VCHSEG16,PMPXSNAM,SP70
          REP       UPPLOW,VCHSEG16
          REP       ALPTOBLK,VCHSEG16
          SQUEEZE   VCHSEG16
          MATCH     SP70,VCHSEG16
          IF        !@EOS
            MOVE      "VCH.16.1-PatientSecondInitial contains invalid characters",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
          ENDIF
.
          MOVE      PMPXSNAM,VCHSEG16
.
.         Load      ReferralPeriodTypeCde
.
          MATCH     SP70,PRHRRFPD                * blank ReferralPeriodTypeCde
          GOTO      WVCH4700 IF EQUAL
.
          PACK      KEY5,CATRF,PRHRRFPD,SP70
          CALL      RDCODE1                      * code on file ?
          IF        OVRCD = 1
            MOVE      "VCH.17.2-ReferralPeriodTypeCde not on file",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WVCH4700
          ENDIF
.
          MATCH     SP1,TCINDC1                  * blank Indicator 1 ?
          GOTO      WVCH4700 IF EQUAL
.
          MATCH     ANSS,TCINDC1
          IF        !@EQUAL
            MATCH     ANSN,TCINDC1
            IF        !@EQUAL
              MATCH     ANSI,TCINDC1
              IF        !@EQUAL
                MOVE      "VCH.17.4-ReferralPeriodTypeCde Indicator 1 is invalid",ERRMSG
                MOVE      SP9,DIM9
                CALL      PERR0000
                GOTO      WVCH4700
              ENDIF
            ENDIF
          ENDIF
.
          MOVE      TCINDC1,VCHSEG17
.
.         Load      ReferralPeriod
.
WVCH4700  MATCH     "N",VCHSEG17
          GOTO      WVCH4800 IF NOT EQUAL
.
          MATCH     SP10,PRHRRPER               * ReferralPeriod blank ?
          IF        @EQUAL
            MOVE      "VCH.20.1-ReferralPeriod is blank",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WVCH4800
          ENDIF          
.
          MOVE      PRHRRPER,VCHSEG20
          RJUSTIFY  VCHSEG20
          REP       " 0",VCHSEG20
.
.         Load ServiceTypeCde
.
WVCH4800  MATCH     SP3,PRHRSTCD                 * blank service type ?
          IF        @EQUAL
            MOVE      "VCH.25.1-ServiceTypeCde is blank",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WVCH5000
          ENDIF
.
          PACK      KEY5,CATst,PRHRSTCD
          CALL      RDCODE1                      * code on file ?
          IF        OVRCD = 1
            MOVE      "VCH.25.2-ServiceTypeCde not on file",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WVCH5000
          ENDIF
.
          MATCH     SP1,TCINDC1                  * blank Indicator 1 ?
          IF        @EQUAL
            MOVE      "VCH.25.3-ServiceTypeCde Indicator 1 is blank",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WVCH5000
          ENDIF
.
          MATCH     ANSS,TCINDC1
          IF        !@EQUAL
            MATCH     ANSO,TCINDC1
            IF        !@EQUAL
              MOVE      "VCH.25.4-ServiceTypeCde Indicator 1 is invalid",ERRMSG
              MOVE      SP9,DIM9
              CALL      PERR0000
              GOTO      WVCH5000
            ENDIF
          ENDIF
.
          MOVE      TCINDC1,VCHSEG25
.
.         Load ReferralIssueDate
.
          MATCH     ANSS,VCHSEG25
          IF        @EQUAL
            MATCH     SP70,PRHRRDAT
            IF        !@EQUAL
              UNPACK    PRHRRDAT,CCENT,CYEAR,CMON,CDAY
              PACK      VCHSEG18,CDAY,CMON,CCENT,CYEAR
              REP       " 0",VCHSEG18
            ENDIF
          ENDIF
.
.         Load ServicingProviderNum
.
WVCH5000  PACK      KEY22,PRHRPRAC,SORTSPRV,PRHDCLAM,PRHRPIND
          CALL      RDPRDO1
          IF        OVRCD = 1
            MOVE      "VCH.26.4-Service Doctor not on file",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      WVCH5500
          ENDIF
.
          MOVE      PRDOPROV,DIM8
          MOVE      FOUR,PROVFLAG                * set flag to doctor provider
          MOVE      ZERO,BLAGFLAG
          CALL      VPRN0000                     * valid provider ?
          BRANCH    EXIT,WVCH5500                * no
.
          MOVE      PRDOPROV,VCHSEG26
.
.         Load ReferringProviderNum
.
.         Read the provider number from the linked HCP table 
.         (pmshclaf.pmhlprv1). If the field is blank or not found,
.         obtain the provider number from the HCP table (pmshcpaf.pmhcprv1)
.
WVCH5500  MATCH     SP70,PRHRREFD
          GOTO      WVCH6000 IF EQUAL
.
          PACK      KEY20,PRHRREFD,PRHRHCPP,SP70
          CALL      RDPMHCL1
          BRANCH    OVRCD,WVCH5510
.
          MATCH     SP70,PMHLPRV1
          GOTO      WVCH5510 IF EQUAL             
.
          MOVE      PMHLPRV1,DIM8
          MOVE      FOUR,PROVFLAG                * set flag to doctor provider
          MOVE      ZERO,BLAGFLAG
          CALL      VPRN0000                     * valid provider ?
          BRANCH    EXIT,WVCH6000                * no
.
          MOVE      PMHLPRV1,VCHSEG21            * Refer HCP prac Prov No     
          GOTO      WVCH6000
.
WVCH5510  PACK      KEY10,PRHRREFD,SP70
          CALL      RDPMHCP1
          BRANCH    OVRCD,WVCH6000
.
          MATCH     SP70,PMHCPRV1
          GOTO      WVCH6000 IF EQUAL
.
          MOVE      PMHCPRV1,DIM8
          MOVE      FOUR,PROVFLAG                * set flag to doctor provider
          MOVE      ZERO,BLAGFLAG
          CALL      VPRN0000                     * valid provider ?
          BRANCH    EXIT,WVCH6000                * no
.
          MOVE      PMHCPRV1,VCHSEG21            * HCP Provider No
.
.         Load ReferralOverrideTypeCde
.
WVCH6000  
.         MATCH     ANSS,VCHSEG25
.         IF        @EQUAL
.           MOVE      ANSH,VCHSEG19
.         ENDIF
.
.         MATCH     SP70,VCHSEG17
.         GOTO      WVCH9000 IF NOT EQUAL
.
.         MATCH     SP70,VCHSEG18
.         GOTO      WVCH9000 IF NOT EQUAL
.
.         MATCH     SP70,VCHSEG21
.         GOTO      WVCH9000 IF NOT EQUAL
.
          MATCH     SP70,SAVEROVR
          GOTO      WVCH9000 IF EQUAL
.
          PACK      KEY5,CATro,SAVEROVR,SP70
          CALL      RDCODE1                      * code on file ? 
          BRANCH    OVRCD,WVCH9000
.
          UNPACK    THCSCOD,KEY1
.
          MATCH     SP70,KEY1
          GOTO      WVCH9000 IF EQUAL
.
          MATCH     ANSL,KEY1
          IF        !@EQUAL
            MATCH     ANSE,KEY1
            IF        !@EQUAL
              MATCH     ANSH,KEY1
              IF        !@EQUAL
                MATCH     ANSN,KEY1
                IF        !@EQUAL
                  MOVE      "VCH.19.1-ReferralOverrideTypeCde HDP is invalid",ERRMSG
                  MOVE      SP9,DIM9
                  CALL      PERR0000
                  GOTO      WVCH9000
                ENDIF
              ENDIF
            ENDIF
          ENDIF
.
          MOVE      KEY1,VCHSEG19 
.
WVCH9000  BRANCH    VALDFLG,WVCH9999             * validation only
.
          WRITE     EXTFILE1,SEQ;TILDA01,ANSV,ANSC,ANSH:
                                 VCHSEG01,VCHSEG02,VCHSEG03,VCHSEG04,VCHSEG05:
                                 VCHSEG06,VCHSEG07,VCHSEG08,VCHSEG09,VCHSEG10:
                                 VCHSEG11,VCHSEG12,VCHSEG13,VCHSEG14,VCHSEG15:
                                 VCHSEG16,VCHSEG17,VCHSEG18,VCHSEG19,VCHSEG20:
                                 VCHSEG21,VCHSEG22,VCHSEG23,VCHSEG24,VCHSEG25:
                                 VCHSEG26
.
WVCH9999  RETURN
+
.******************************************************************************
.*                                  LODS0000              Called by: VALD0000 *
.*                 Load the sorted tempfile with all the items       WRIT0000 *
.*                 for the invoice being processed.
.******************************************************************************
.
LODS0000  GOTO      LODS0500                     * first pridtraf for processing
.
.         Get the next pridtraf record for processing
.
LODS0100  CALL      RKPRDT4                      * read next record
          BRANCH    OVRCD,LODS9999               * eof - finished
.
          MATCH     LISTINVN,PRDTINVN            * same invoice still ?
          GOTO      LODS9999 IF NOT EQUAL        * no - finished
.
          COMPARE   ONE,PRDTRTYP                 * item record ?
          GOTO      LODS0100 IF NOT EQUAL        * no - ignore record
.
          COMPARE   TWO,PRDTIFLG                 * IMC details record ?
          GOTO      LODS0100 IF EQUAL            * yes - ignore record
.
.         We have found a valid item so load the temp file fields.
.
.         Load Servicing Provider code - use pridtraf value if populated,
.         otherwise, use the default value from prihreff.
.
LODS0500  MATCH     SP10,PRDTASPC
          IF        @EQUAL
            MOVE      SAVESDOC,SORTSPRV
          ELSE
            MOVE      PRDTASPC,SORTSPRV
          ENDIF
.
.         Load IFC Issue code - use pridtraf value if populated, otherwise,
.         use the default value from prihreff.
.
          MATCH     SP3,PRDTAICV
          IF        @EQUAL
            MOVE      SAVESIFC,SORTIFCC
          ELSE
            MOVE      PRDTAICV,SORTIFCC
          ENDIF
.
.         Load Compensation Claim Indicator - use pridtraf value only
.
          MOVE      PRDTASPF,SORTCCIN
.
.         Load the transaction number so we can use this later to read
.         the pridtraf record directly.
.
          MOVE      PRDTTRAN,SORTTRAN
.
          PACK      KEY20,SORTSPRV,SORTIFCC,SORTCCIN,SORTTRAN
          CALL      RATEMP2
          IF        OVRCD = 1
            CALL      WRTEMP2
          ENDIF
.
          GOTO      LODS0100                     * get next pridtraf record
.
LODS9999  RETURN
+
.******************************************************************************
.*                                  WSRV0000              Called by: VALD0000 *
.*                            Write Service Details                & WRIT0000 *
.******************************************************************************
.
WSRV0000  ADD       ONE,ITMCOUNT                 * increment item count
.
          IF        ITMCOUNT > 14
            MOVE      "GEN.9-Too many items to claim - process manually or split invoice",ERRMSG
            MOVE      PRDTITMN,DIM9
            CALL      PERR0000
            GOTO      WSRV9999
          ENDIF
.
WSRV0500  MOVE      SP70,SRVSEG01                * Initialise all segment fields
          MOVE      SP70,SRVSEG02
          MOVE      SP70,SRVSEG03
          MOVE      SP70,SRVSEG04
          MOVE      SP70,SRVSEG05
          MOVE      SP70,SRVSEG06
          MOVE      SP70,SRVSEG07
          MOVE      SP70,SRVSEG08
          MOVE      SP70,SRVSEG09
          MOVE      SP70,SRVSEG10
          MOVE      SP70,SRVSEG11
          MOVE      SP70,SRVSEG12
          MOVE      SP70,SRVSEG13
          MOVE      SP70,SRVSEG14
          MOVE      SP70,SRVSEG15
          MOVE      SP70,SRVSEG16
          MOVE      SP70,SRVSEG17
          MOVE      SP70,SRVSEG18
          MOVE      SP70,SRVSEG19
          MOVE      SP70,SRVSEG20
.
          REP       " 0",SRVSEG03                * zero fill numeric fields
.         REP       " 0",SRVSEG08
          REP       " 0",SRVSEG20
.
.         Load AfterCareOverrideInd
.
          MATCH     "1",PRDTACOI
          IF        @EQUAL
            MOVE      ANSY,SRVSEG02
          ELSE
            MOVE      ANSN,SRVSEG02
          ENDIF
.
.         Load ChargeAmount
.
          ADD       PRDTAMNT,TOTAMTCT            * increm. total amount counter
          MOVE      PRDTAMNT,KEY15
          REP       ". ",KEY15
          SQUEEZE   KEY15
          RJUSTIFY  KEY15
          REP       " 0",KEY15
          UNPACK    KEY15,KEY6,SRVSEG03
.
.         Load DateOfService
.
          MATCH     PRDTSDAT,CURRDATE
          IF        @LESS
            MOVE      "SRV.5.1-DateOfService cannot be in the future",ERRMSG
            MOVE      PRDTITMN,DIM9
            CALL      PERR0000
            GOTO      WSRV2000
          ENDIF
.
          MOVE      PRDTSDAT,DATEVAR1
          MOVE      CURRDATE,DATEVAR2
          DAYSEP    DATEVAR1,DATEVAR2,FORM5
          IF        FORM5 > 729
            MOVE      "SRV.5.2-DateOfService cannot be more than 2 years ago",ERRMSG
            MOVE      PRDTITMN,DIM9
            CALL      PERR0000
            GOTO      WSRV2000
          ENDIF
.
          MATCH     PBDATE,PRDTSDAT
          IF        @LESS
            MOVE      "SRV.5.3-DateOfService cannot be before PatientDateOfBirth",ERRMSG
            MOVE      PRDTITMN,DIM9
            CALL      PERR0000
            GOTO      WSRV2000
          ENDIF
.
          MATCH     SP8,ADATE
          GOTO      WSRV1000 IF EQUAL
.
          MATCH     ADATE,PRDTSDAT
          IF        @LESS
            MOVE      "SRV.5.4-DateOfService cannot be before AdmissionDate",ERRMSG
            MOVE      PRDTITMN,DIM9
            CALL      PERR0000
            GOTO      WSRV2000
          ENDIF
.
          MATCH     SP8,DDATE                    * blank discharge date ?
          GOTO      WSRV1000 IF EQUAL            * yes
.
          MATCH     PRDTSDAT,DDATE
          IF        @LESS
            MOVE      "SRV.5.5-DischargeDate cannot be before DateofService",ERRMSG
            MOVE      PRDTITMN,DIM9
            CALL      PERR0000
            GOTO      WSRV2000
          ENDIF
.
WSRV1000  UNPACK    PRDTSDAT,CCENT,CYEAR,CMON,CDAY
          PACK      SRVSEG05,CDAY,CMON,CCENT,CYEAR
          REP       " 0",SRVSEG05
.
.         Load DuplicateServiceOverrideInd
.
WSRV2000  MATCH     "1",PRDTDSOV
          IF        @EQUAL
            MOVE      ANSY,SRVSEG06
          ELSE
            MOVE      ANSN,SRVSEG06
          ENDIF
.
.         ItemNum
.
.         MOVE      PRDTITMN,KEY9
.         STRIP     KEY9
.         MOVELPTR  KEY9,FORM1
.         IF        FORM1 > 5
.           MOVE      "SRV.9.1-ItemNum is too long",ERRMSG
.           MOVE      PRDTITMN,DIM9
.           CALL      PERR0000
.         ELSE
            PACK      PRDTITMN,PRDTITMN,SP70
.
            SCAN      "/",PRDTITMN
            GOTO      WSRV2100 IF NOT EQUAL
.
            LENSET    PRDTITMN
WSRV2100    RESET     PRDTITMN
            REP       "/ ",PRDTITMN
.
            MOVE      PRDTITMN,SRVSEG09
            PACK      SRVSEG09,SRVSEG09,SP70
.         ENDIF
.
WSRV2150  MOVE      PRDTITMN,D9
          SQUEEZE   D9
          REP       UPPLOW,D9
          MATCH     "0000",D9
          IF        !@EQUAL
            MATCH     "MISC",D9
            IF        !@EQUAL
              GOTO      WSRV2200
            ENDIF
          ENDIF
.
          MOVE      "SRV.9.2-ItemNum is not a MBS item",ERRMSG
          MOVE      PRDTITMN,DIM9
          CALL      PERR0000
.
.         Load MultipleProcedureOverrideInd
.
WSRV2200  MATCH     "1",PRDTMPOV
          IF        @EQUAL
            MOVE      ANSY,SRVSEG11
          ELSE
            MOVE      ANSN,SRVSEG11
          ENDIF
.
.         Load NoOfPatientsSeen
.
          MATCH     SP2,PRDTNMPT                 * field populated ?
          GOTO      WSRV2500 IF EQUAL            * no - ignore field
.
.         Make sure that MultipleProcedureOverrideInd (SRVSEG11) is not
.         set to "Y"
.
          MATCH     ANSY,SRVSEG11
          IF        @EQUAL
            MOVE      "SRV.12.1-MultipleProcedureOverrideInd cannot be populated when NoOfPatientsSeen is also populated",ERRMSG
            MOVE      PRDTITMN,DIM9
            CALL      PERR0000
          ENDIF
.
.         Make sure that ReferringProviderNum (VCHSEG21) is not populated
.
          MATCH     SP8,VCHSEG21
          IF        !@EQUAL
            MOVE      "SRV.12.2-ReferringProviderNum cannot be populated when NoOfPatientsSeen is also populated",ERRMSG
            MOVE      PRDTITMN,DIM9
            CALL      PERR0000
          ENDIF
.
.         Make sure that ReferralIssueDate (VCHSEG22) is not populated
.
          MATCH     SP8,VCHSEG22
          IF        !@EQUAL
            MOVE      "SRV.12.3-ReferralIssueDate cannot be populated when NoOfPatientsSeen is also populated",ERRMSG
            MOVE      PRDTITMN,DIM9
            CALL      PERR0000
          ENDIF
.
.         Make sure that ReferralPeriodTypeCde is not populated
.
          MATCH     SP1,VCHSEG17
          IF        !@EQUAL
            MOVE      "SRV.12.4-ReferralPeriodTypeCde cannot be populated when NoOfPatientsSeen is also populated",ERRMSG
            MOVE      PRDTITMN,DIM9
            CALL      PERR0000
          ENDIF
.
          MOVE      PRDTNMPT,SRVSEG12
          RJUSTIFY  SRVSEG12
          REP       " 0",SRVSEG12
.
.         Load ServiceText
.
WSRV2500  MOVE      PRDTSTXT,SRVSEG18
.
.         Load TimeDuration
.
          MATCH     SP3,PRDTTDUR                 * blank duration ?
          GOTO      WSRV3000 IF EQUAL            * yes - no further validation
.
          MOVE      ZERO,FORM3
          MOVE      PRDTTDUR,SRVSEG19
.
          RJUSTIFY  SRVSEG19
          REP       " 0",SRVSEG19
.
          TYPE      SRVSEG19
          IF        !@EQUAL
            MOVE      "SRV.19.1-TimeDuration not numeric",ERRMSG
            MOVE      PRDTITMN,DIM9
            CALL      PERR0000
            GOTO      WSRV3000
          ENDIF
.
          MOVE      SRVSEG19,FORM3
          COMPARE   ZERO,FORM3
          IF        @EQUAL
            MOVE      "SRV.19.2-TimeDuration cannot be zero",ERRMSG
            MOVE      PRDTITMN,DIM9
            CALL      PERR0000
            GOTO      WSRV3000
          ENDIF
.
.         Non-zero value, so must be a value divisible by 15
.
          IF        (FORM3%15) <> 0
            MOVE      "SRV.19.3-TimeDuration not a fifteen minute interval",ERRMSG
            MOVE      PRDTITMN,DIM9
            CALL      PERR0000
          ENDIF
.
.         Load FieldQuantity
.
WSRV3000  MATCH     ANSS,VCHSEG25                * Specialist service type ?
          GOTO      WSRV4000 IF NOT EQUAL        * no - ignore field
.
          PACK      KEY22,SP1,ZERO,PRDTITMN,SP3,PRDTSDAT
          CALL      RDPRIT1                      * item on file ?
          IF        OVRCD = 1
            CALL      RPPRIT1                    * no - read previous record
            BRANCH    OVRCD,WSRV4000             * eof - ignore field
.
            COMPARE   ZERO,PRITFLAG              * same item flag still ?
            GOTO      WSRV4000 IF NOT EQUAL      * no - ignore field
.
            MATCH     PRDTITMN,PRITITMN          * same item still ?
            GOTO      WSRV4000 IF NOT EQUAL      * no - ignore field
.
            MATCH     SP3,PRITSUBN               * sub-item blank still ?
            GOTO      WSRV4000 IF NOT EQUAL      * no - ignore field
          ENDIF
.
          COMPARE   TWO,PRITPATH                 * derived item ?
          GOTO      WSRV4000 IF NOT EQUAL        * no - ignore field
.
          ASSIGN    (FORM3/15),FORM2             * determine 15 min blocks
          MOVE      FORM2,SRVSEG08               * load no. of 15 min blocks
          MOVE      SP3,SRVSEG19
.
.         Load TimeOfService
.
WSRV4000  MOVE      PRDTSTIM,DIM5
          REP       " 0",DIM5
          REP       ": ",DIM5
          SQUEEZE   DIM5
          MOVE      DIM5,SRVSEG20
          PACK      SRVSEG20,SRVSEG20,SP4
.
.         Load      LSPN
.
          MOVE      PRDTLSPN,SRVSEG10
.
.         Load      SelfDeemedCode
.
          MATCH     SP70,PRDTSDCD
          GOTO      WSRV9000 IF EQUAL
          GOTO      WSRV9000 IF EOS
.
          PACK      KEY5,CATSd,PRDTSDCD,SP70
          CALL      RDCODE1
          IF        OVRCD=0
            MOVE      THCSCOD,SRVSEG17
          ENDIF
.
WSRV9000  BRANCH    VALDFLG,WSRV9999             * validation only
.
          WRITE     EXTFILE1,SEQ;TILDA01,ANSS,ANSR,ANSV:
                                 SRVSEG01,SRVSEG02,SRVSEG03,SRVSEG04,SRVSEG05:
                                 SRVSEG06,SRVSEG07,SRVSEG08,SRVSEG09,SRVSEG10:
                                 SRVSEG11,SRVSEG12,SRVSEG13,SRVSEG14,SRVSEG15:
                                 SRVSEG16,SRVSEG17,SRVSEG18,SRVSEG19,SRVSEG20
.
WSRV9999  RETURN
+
.******************************************************************************
.*                                  WTLR0000              Called by: WRIT0000 *
.*                           Write Trailer                                    *
.******************************************************************************
.
WTLR0000  BRANCH    VALDFLG,WTLR9999             * validation only
.
          WRITE     EXTFILE1,SEQ;TILDA01,ANST,ANSL,ANSR
.
WTLR9999  RETURN
+
.*****************************************************************************
.*                                  PERR0000              Called by: Lots    *
.*                             Print Error Message                           *
.* Requires: ERRMSG - error description                                      *
.*           INVNO  - invoice number                                         *
.*           DIM9   - Item number from prdtitmn                              *
.*           Valid read on prihreff record for invoice                       *
.*****************************************************************************
.
PERR0000  COMPARE   ONE,VALDFLG                  * validation ?
          GOTO      PERR9999 IF NOT EQUAL        * no - finished
.
          COMPARE   "55",CLNO                    * page full ?
          CALL      HEAD0000 IF NOT LESS         * yes
.
          PACK      ERRMSG,ERRMSG,SP70,SP70
          PRINT     *1,PIPE,*3,LISTINVN,*12,PIPE,*14,PURNO,*23,PIPE:
                    *25,DIM9,*35,PIPE,*37,ERRMSG,*132,PIPE
          ADD       ONE,CLNO
.
          MOVE      ONE,ERRFLG                   * set error flag
          ADD       ONE,ERRCT                    * incr. error counter
.
PERR9999  RETURN
+
.*****************************************************************************
.*                             VPRN0000            Called by: WCID0000       *
.*                Validate the provider no                    SATR0000       *
.* Requires: DIM8 - Provider  number                          SDTR0000       *
.*           PROVFLAG - Type of provider                      WCER0000       *
.*                          1 = Hospital facility                            *
.*                          4 = Servicing Doctor                             *
.*           PLVCARRY - PLV character array                                  *
.*           PLVNARRY - PLV numeric array                                    *
.* Returns:  EXIT   0 = valid provider no                                    *
.*                  1 = invalid provider no                                  *
.*****************************************************************************
.
VPRN0000  COMPARE   FOUR,PROVFLAG                * doctor provider ?
          GOTO      VPRN0100 IF EQUAL            * yes - check already done
.
          MATCH     SP8,DIM8                     * blank provider number ?
          IF        @EQUAL
            MOVE      "CLM.20.1-Hospital provider no. is blank",ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VPRN9100
          ENDIF
.
.         Validate the provider number.
.         First make sure it is 8 characters in length.
.
VPRN0100  STRIP     DIM8
          MOVELPTR  DIM8,FORM1
          IF        FORM1 <> 8
            IF        PROVFLAG = 1
              MOVE      "CLM.20.2-Hospital provider no. (",ERRMSG
              ENDSET    ERRMSG
            ELSE
              IF        BLAGFLAG=1
                MOVE      "VCH.26.1-BillingAgentId (",ERRMSG
              ELSE
                MOVE      "VCH.26.1-ServicingProviderNum (",ERRMSG
              ENDIF
              ENDSET    ERRMSG
            ENDIF
            APPEND    DIM8,ERRMSG
            APPEND    ") is incorrect length",ERRMSG
            RESET     ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VPRN9100
          ENDIF
.
.         Check that the first 6 characters are numeric for a doctor provider,
.
          COMPARE   FOUR,PROVFLAG
          GOTO      VPRN0500 IF NOT EQUAL
.
          UNPACK    DIM8,DIM6,DIM2
          TYPE      DIM6
          IF        !@EQUAL
            MOVE      "VCH.26.2-ServicingProviderNum (",ERRMSG
            ENDSET    ERRMSG
            APPEND    DIM8,ERRMSG
            APPEND    ") does not have 6 digits",ERRMSG
            RESET     ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VPRN9100
          ENDIF
          GOTO      VPRN0600
.
VPRN0500  UNPACK    DIM8,DIM7,DIM1
          TYPE      DIM7
          IF        !@EQUAL
            MOVE      "CLM.20.3-Hospital provider no. (",ERRMSG
            ENDSET    ERRMSG
            APPEND    DIM8,ERRMSG
            APPEND    ") does not have 7 digits",ERRMSG
            RESET     ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VPRN9100
          ENDIF
.
.         Validate the check digit.
.         The algorithm used for the Provider Check Digit is:
.                   (digit 1 * 3) +
.                   (digit 2 * 5) +
.                   (digit 3 * 8) +
.                   (digit 4 * 4) +
.                   (digit 5 * 2) +
.                   (digit 6) +
.                   (PLV * 6)
.                   Divide the result by 11
.
.         The Practice Location Character (PLV) indicates the order of the
.         practices that a provider has been registered at. Each Practice
.         Location Character is allocated a Practice Location Value (PLV) that
.         is used in the Provider Check Digit Routine.  The values are below:
.
.                   Character  Value  Character  Value  
.                       0        0        G        16 
.                       1        1        H        17 
.                       2        2        J        18 
.                       3        3        K        19 
.                       4        4        L        20 
.                       5        5        M        21 
.                       6        6        N        22 
.                       7        7        P        23 
.                       8        8        Q        24 
.                       9        9        R        25 
.                       A        10       T        26 
.                       B        11       U        27 
.                       C        12       V        28 
.                       D        13       W        29 
.                       E        14       X        30 
.                       F        15       Y        31 
.
.         The remainder is allocated an alpha that is the provider check digit
.         (See table below for details). 
.               Remainder  Check-digit  
.                   0          Y  
.                   1          X  
.                   2          W  
.                   3          T  
.                   4          L  
.                   5          K  
.                   6          J  
.                   7          H  
.                   8          F  
.                   9          B  
.                  10          A  
.
.         Calculate the Practice Location Character (PLV).
.         If the seventh character in the provider number is a numeric, then
.         the PLV will equal the value of the seventh character.
.         If the seventh character in the provider number is not numeric, then
.         determine the PLV based on the table above.
.
VPRN0600  UNPACK    DIM8,PROVARRY[1],PROVARRY[2],PROVARRY[3],PROVARRY[4]:
                         PROVARRY[5],PROVARRY[6],PROVARRY[7],PROVARRY[8]  
.
          MOVE      ZERO,FORM1
          WHILE     FORM1 < 7
            ADD       ONE,FORM1
            MOVE      PROVARRY[FORM1],PRVNARRY[FORM1]
          DO
.
          TYPE      PROVARRY[7]                  * seventh char. numeric ?
          GOTO      VPRN0700 IF EQUAL            * yes
.
          MOVE      ZERO,FORM2
          WHILE     FORM2 < 22
            ADD       ONE,FORM2
            MATCH     PROVARRY[7],PLVCARRY[FORM2] * 7th character match ?
            IF        @EQUAL
              MOVE      PLVNARRY[FORM2],PRVNARRY[7]  * yes - load value
              GOTO      VPRN0700
            ENDIF
          DO
.
VPRN0700  MOVE      ZERO,FORM4                   * initialise total
          MOVE      ONE,COUNTER                  * initialise counter
          WHILE     COUNTER < 8
            MOVE      PRVNARRY[COUNTER],FORM2
            BRANCH    COUNTER,VPRN1000:
                              VPRN2000:
                              VPRN3000:
                              VPRN4000:
                              VPRN5000:
                              VPRN6000:
                              VPRN7000
.
VPRN1000    ASSIGN    ((FORM2*3) + FORM4),FORM4
            GOTO      VPRN8000
.
VPRN2000    ASSIGN    ((FORM2*5) + FORM4),FORM4
            GOTO      VPRN8000
.
VPRN3000    ASSIGN    ((FORM2*8) + FORM4),FORM4
            GOTO      VPRN8000
.
VPRN4000    ASSIGN    ((FORM2*4) + FORM4),FORM4
            GOTO      VPRN8000
.
VPRN5000    ASSIGN    ((FORM2*2) + FORM4),FORM4
            GOTO      VPRN8000
.
VPRN6000    ASSIGN    (FORM2 + FORM4),FORM4
            GOTO      VPRN8000
.
VPRN7000    ASSIGN    ((FORM2*6) + FORM4),FORM4
.
VPRN8000    ADD       ONE,COUNTER                * increment FP counter
          DO
.
          ASSIGN    (FORM4%11),FORM2             * remainder when divided by 11
          MOVE      ANSY,ANS                     * set default check digit
          LOAD      ANS,FORM2,ANSX,ANSW,ANST,ANSL,ANSK,ANSJ,ANSH,ANSF,ANSB,ANSA
.
          MATCH     ANS,PROVARRY[8]
          IF        !@EQUAL
            IF        PROVFLAG = 1
              MOVE      "CLM.20.4-Hospital provider no. (",ERRMSG
            ELSE
              IF        BLAGFLAG=1
                MOVE      "VCH.26.3-BillingAgentId (",ERRMSG
              ELSE
                MOVE      "VCH.26.3-ServicingProviderNum (",ERRMSG
              ENDIF
            ENDIF
            ENDSET    ERRMSG
            APPEND    DIM8,ERRMSG
            APPEND    ") ",ERRMSG
            APPEND    "check digit is not valid",ERRMSG
            RESET     ERRMSG
            MOVE      SP9,DIM9
            CALL      PERR0000
            GOTO      VPRN9100
          ENDIF
.
          MOVE      ZERO,EXIT
          GOTO      VPRN9999
.
VPRN9100  MOVE      ONE,EXIT
.
VPRN9999  RETURN
+
.*****************************************************************************
.*                               LARY0000          Called by: INIT0000       *
.*          Load the array variables for the provider number PLV's           *
.*****************************************************************************
.
.         Load the characters used in the seventh position of the
.         provider number
.
LARY0000  MOVE      ANSA,PLVCARRY[1]
          MOVE      ANSB,PLVCARRY[2]
          MOVE      ANSC,PLVCARRY[3]
          MOVE      ANSD,PLVCARRY[4]
          MOVE      ANSE,PLVCARRY[5]
          MOVE      ANSF,PLVCARRY[6]
          MOVE      ANSG,PLVCARRY[7]
          MOVE      ANSH,PLVCARRY[8]
          MOVE      ANSJ,PLVCARRY[9]
          MOVE      ANSK,PLVCARRY[10]
          MOVE      ANSL,PLVCARRY[11]
          MOVE      ANSM,PLVCARRY[12]
          MOVE      ANSN,PLVCARRY[13]
          MOVE      ANSP,PLVCARRY[14]
          MOVE      ANSQ,PLVCARRY[15]
          MOVE      ANSR,PLVCARRY[16]
          MOVE      ANST,PLVCARRY[17]
          MOVE      ANSU,PLVCARRY[18]
          MOVE      ANSV,PLVCARRY[19]
          MOVE      ANSW,PLVCARRY[20]
          MOVE      ANSX,PLVCARRY[21]
          MOVE      ANSY,PLVCARRY[22]
.
.         Load the corresponding numbers associated with the characters
.         used in the seventh position of the provider number
.
          MOVE      TEN,PLVNARRY[1]
          MOVE      TEN1,PLVNARRY[2]
          MOVE      TEN2,PLVNARRY[3]
          MOVE      TEN3,PLVNARRY[4]
          MOVE      TEN4,PLVNARRY[5]
          MOVE      TEN5,PLVNARRY[6]
          MOVE      TEN6,PLVNARRY[7]
          MOVE      TEN7,PLVNARRY[8]
          MOVE      TEN8,PLVNARRY[9]
          MOVE      TEN9,PLVNARRY[10]
          MOVE      TWENTY,PLVNARRY[11]
          MOVE      TWENTY1,PLVNARRY[12]
          MOVE      TWENTY2,PLVNARRY[13]
          MOVE      TWENTY3,PLVNARRY[14]
          MOVE      TWENTY4,PLVNARRY[15]
          MOVE      TWENTY5,PLVNARRY[16]
          MOVE      TWENTY6,PLVNARRY[17]
          MOVE      TWENTY7,PLVNARRY[18]
          MOVE      TWENTY8,PLVNARRY[19]
          MOVE      TWENTY9,PLVNARRY[20]
          MOVE      THIRTY,PLVNARRY[21]
          MOVE      THIRTY1,PLVNARRY[22]
.
LARY9999  RETURN
+
.*****************************************************************************
.*        IO ROUTINES FOR TEMPORARY FILE                                     *
.*****************************************************************************
.
.         First tempfile routines
.
RSTEMP1   READ      LSTTEMP1,KEY16;;
          RETURN
.
RDTEMP1   MOVE      ZERO,OVRCD
          READ      LSTTEMP1,KEY16;LISTUNIQ,LISTINVN,LISTURNO,LISTDATE:
                                   LISTAMNT,LISTFLAG,LISTHOSP,LISTHFND
          GOTO      OVERCOND IF OVER
          RETURN
.
RKTEMP1   MOVE      ZERO,OVRCD
          READKS    LSTTEMP1;LISTUNIQ,LISTINVN,LISTURNO,LISTDATE,LISTAMNT:
                             LISTFLAG,LISTHOSP,LISTHFND
          GOTO      OVERCOND IF OVER
          RETURN
.
RPTEMP1   MOVE      ZERO,OVRCD
          READKP    LSTTEMP1;LISTUNIQ,LISTINVN,LISTURNO,LISTDATE,LISTAMNT:
                             LISTFLAG,LISTHOSP,LISTHFND
          GOTO      OVERCOND IF OVER
          RETURN
.
UPTEMP1   UPDATE    LSTTEMP1;LISTUNIQ,LISTINVN,LISTURNO,LISTDATE,LISTAMNT:
                             LISTFLAG,LISTHOSP,LISTHFND
          RETURN
.
WRTEMP1   WRITE     LSTTEMP1,KEY16;LISTUNIQ,LISTINVN,LISTURNO,LISTDATE:
                                   LISTAMNT,LISTFLAG,LISTHOSP,LISTHFND
          RETURN
.
DETEMP1   DELETE    LSTTEMP1,KEY16
          RETURN
.
.         Second tempfile routines
.
RATEMP2   MOVE      ZERO,OVRCD
          READ      SRTTEMP1,KEY20;ANS
          GOTO      OVERCOND IF OVER
          RETURN
.
RSTEMP2   READ      SRTTEMP1,KEY20;;
          RETURN
.
RDTEMP2   MOVE      ZERO,OVRCD
          READ      SRTTEMP1,KEY20;SORTSPRV,SORTIFCC,SORTCCIN,SORTTRAN
          GOTO      OVERCOND IF OVER
          RETURN
.
RKTEMP2   MOVE      ZERO,OVRCD
          READKS    SRTTEMP1;SORTSPRV,SORTIFCC,SORTCCIN,SORTTRAN
          GOTO      OVERCOND IF OVER
          RETURN
.
RPTEMP2   MOVE      ZERO,OVRCD
          READKP    SRTTEMP1;SORTSPRV,SORTIFCC,SORTCCIN,SORTTRAN
          GOTO      OVERCOND IF OVER
          RETURN
.
UPTEMP2   UPDATE    SRTTEMP1;SORTSPRV,SORTIFCC,SORTCCIN,SORTTRAN
          RETURN
.
WRTEMP2   WRITE     SRTTEMP1,KEY20;SORTSPRV,SORTIFCC,SORTCCIN,SORTTRAN
          RETURN
.
DETEMP2   DELETE    SRTTEMP1,KEY20
          RETURN
+
.*****************************************************************************
.         I/O Routines
.*****************************************************************************
.
          INC       STD001IO
.
          INC       CLPATDSC                * Clear the discharge variables
          INC       CLPATMIS                * Clear the admission variables
          INC       PATFNDKY
          INC       PATHSPKY
          INC       TFILENAM
.
          INC       IBASEQIO/INC
          INC       PATCODIO/INC
          INC       PATCRTIO/INC
          INC       PATDSCIO/INC
          INC       PATFN1IO/INC
          INC       PATFX1IO/INC
          INC       PATHSPIO/INC
          INC       PATMA1IO/INC
          INC       PATMI1IO/INC
          INC       PATPARIO/INC
          INC       PATPCPIO/INC
          INC       PRIECAIO/INC
          INC       PRIIBHIO/INC
          INC       PRIITMIO/INC
          INC       PMSFPHIO/INC
          INC       PMSHCLIO/INC
          INC       PMSHCPIO/INC
          INC       PMSPX2IO/INC
          INC       PMSVX1IO/INC
          INC       PRIDOCIO/INC
          INC       PRIDTRIO/INC
          INC       PRIECTIO/INC
          INC       PRIHDBIO/INC
          INC       PRIHREIO/INC
          INC       PRIINVIO/INC
          INC       PRIPRAIO/INC
          INC       RCPREGIO/INC
          INC       WEBERRIO/INC
          INC       WEBSECIO/INC

