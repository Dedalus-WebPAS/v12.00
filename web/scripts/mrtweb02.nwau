#!/bin/bash
shopt -s xpg_echo
#------------------------------------------------------------
#  When run from the command line we need to pass in two switches
#  Inputs : 1 - Grouper Input File Name
#           2 - Grouper output File Name
#
# ===========================================================

# variables
LOGFILE=/home/iba/mrtweb02.nwau.log
COMMAND=/opt/iba/bin

echo "====== STARTING ========" >> $LOGFILE
echo "ARGS: " $0 $1 $2 $3 $4 >> $LOGFILE
date >> $LOGFILE

DRGINP=${1}
PORT=`echo "${DRGINP}" | cut -c 7-8`
WORK=`pwd`
PORTDIR=`pwd`/$PORT

# create folder for temp files and link to grouper libraries
[ -d $PORTDIR ] || {
   mkdir $PORTDIR
}

#------------------------------------------------------------
#  User Variables to nominate icd10 change dates
#------------------------------------------------------------
E5DATE="20060701"    # End date ICD-10-AM 4th Ed
E6DATE="20080701"    # End date ICD-10-AM 5th Ed
E7DATE="20100701"    # End date ICD-10-AM 6th Ed
E8DATE="20130701"    # End date ICD-10-AM 7th Ed
E9DATE="20150701"    # End date ICD-10-AM 8th Ed
E10DATE="20170701"   # End Date ICD-10-AM 9th Ed
E11DATE="20190601"   # End Date ICD 10-AM 10th Ed
E12DATE="99999999"   # Proposed End Date ICD-10-AM 11th Ed

echo "DRG INPUT: " $DRGINP  >> $LOGFILE
echo "PORT: " $PORT >> $LOGFILE
echo "CURRENT DIR: " $WORK  >> $LOGFILE
echo "PORT DIR: " $PORTDIR  >> $LOGFILE

#------------------------------------------------------------
#  Grouper Variables GD to the parent dir of where 3M Quickgroup is installed
#------------------------------------------------------------
#export GD=/opt/3mintl/cgs
export GD=/opt/3mhis/cgs
#export JD=/opt/3mintl/cgs/jre
export JD=/opt/3mhis/cgs/jre
export GROUPING_TABLES_3M=$GD
export SHLIB_PATH=$GD/jars:$SHLIB_PATH:/usr/local/lib
export GROUPER_ERR_LOGFILE_3M=$GD/grouper.log
export PATH=$PATH:$GD/jars
export IFS="%"


# ---------------------- Split_DRG_Input --------------------
# Selects records from ${DRGINP} where Speparation date >= ${1} and < ${2}
# outputs to file ${3}
Split_DRG_Input()
{
echo `pwd` >> $LOGFILE
echo ${0} >> $LOGFILE
echo "SDate:" ${1}>> $LOGFILE
echo "EDate:" ${2} >> $LOGFILE 
echo "S3: "${3} >> $LOGFILE
cat ${DRGINP}.txt
awk -v "STARTDATE=${1}" -v "ENDDATE=${2}" '
{ SEPDATE=substr($0,36,10) ;
  split(SEPDATE,SEPDT,/\//);
  CHKDTE=SEPDT[3]*10000;
  CHKDTE+=SEPDT[2]*100;
  CHKDTE+=SEPDT[1];
  if ( CHKDTE >= STARTDATE  && CHKDTE < ENDDATE ) { print ( $0 ) }
  }
' ${DRGINP}.txt > ${3}
}
# --------- End Split_DRG_Input ----------

# ---------------------- Group_Edition --------------------
# Runs the grouper for the ICD-10-AM edition specified by ${1} using commands
# from file specified by ${2}
Group_Edition()
{
    echo "Edition ${1} file exists ... processing" >> $LOGFILE
    echo "Output file ${2} " >> $LOGFILE
 
    $GD/CGSXpres -error_log /tmp/3Mlog.log -input $PORTDIR/dinv${1}YY.txt -input_template $GD/templates/QGInputSched_NWAU_v2_0.dic -upload $PORTDIR/${2}XX.txt -upload_template $GD/templates/QGOutputSched_NWAU_v3_0.dic -schedule on
   
#    $GD/CGSXpres -error_log /tmp/3Mlog.log -input $PORTDIR/dinv${1}YY.txt -input_template $GD/templates/QGInputSched_NWAU_v2_0.dic -upload $PORTDIR/${2}XX.txt -upload_template $GD/templates/QGOutputSched_NWAU_v3_0.dic -schedule on

#    $GD/cgs_console -error_log /tmp/3Mlog.log -input $PORTDIR/dinv${1}YY.txt -input_template $GD/templates/QGInputSched_NWAU_v2_0.dic -upload $PORTDIR/${2}XX.txt -upload_template $GD/templates/QGOutputSched_NWAU_v3_0.dic -schedule on

    # split the files from a single combined output back to single output files for webPAS to read in

    while read line
    do
     
      if echo $line |grep "100$" >/dev/null
      then
	 echo $line >> $PORTDIR/dout10.txt
      elif echo $line |grep "090$" >/dev/null
      then
         echo $line >> $PORTDIR/dout90.txt
      elif echo $line |grep "080$" >/dev/null
      then
         echo $line >> $PORTDIR/dout80.txt
      elif echo $line |grep "070$" >/dev/null
      then
         echo $line >> $PORTDIR/dout70.txt
      elif echo $line |grep "062$" >/dev/null
      then
         echo $line >> $PORTDIR/dout62.txt
      elif echo $line |grep "060$" >/dev/null
      then
         echo $line >> $PORTDIR/dout60.txt
      elif echo $line |grep "052$" >/dev/null
      then
         echo $line >> $PORTDIR/dout52.txt
      elif echo $line |grep "051$" >/dev/null
      then
         echo $line >> $PORTDIR/dout51.txt
      elif echo $line |grep "050$" >/dev/null
      then
         echo $line >> $PORTDIR/dout50.txt
      elif echo $line |grep "042$" >/dev/null
      then
         echo $line >> $PORTDIR/dout42.txt
      elif echo $line |grep "041$" >/dev/null
      then
         echo $line >> $PORTDIR/dout41.txt
      fi
     done < ${2}XX.txt

    # move file back to where web PAS can pick it up

     cp $PORTDIR/dout10.txt $DD/tmp/dout10${PORT}.txt 
     cp $PORTDIR/dout90.txt $DD/tmp/dout90${PORT}.txt
     cp $PORTDIR/dout80.txt $DD/tmp/dout80${PORT}.txt
     cp $PORTDIR/dout70.txt $DD/tmp/dout70${PORT}.txt
     cp $PORTDIR/dout62.txt $DD/tmp/dout62${PORT}.txt
     cp $PORTDIR/dout60.txt $DD/tmp/dout60${PORT}.txt
     cp $PORTDIR/dout52.txt $DD/tmp/dout52${PORT}.txt
     cp $PORTDIR/dout51.txt $DD/tmp/dout51${PORT}.txt
     cp $PORTDIR/dout50.txt $DD/tmp/dout50${PORT}.txt
     cp $PORTDIR/dout42.txt $DD/tmp/dout42${PORT}.txt
     cp $PORTDIR/dout41.txt $DD/tmp/dout41${PORT}.txt
}
# --------- End Group_Edition ----------

# ---------------------- Clean_Up --------------------
# Removes file specified by ${1} if exists
Clean_Up()
{ 
   [[ -s ${1} ]] && rm ${1}
}
# --------- End Clean_Up ----------

#------------- Start of MAIN Logic -------------------------

echo "Removing temp files from previous run." >> $LOGFILE

Clean_Up $PORTDIR/dinv11.txt
Clean_Up $PORTDIR/dinv10.txt
Clean_Up $PORTDIR/dinv9.txt
Clean_Up $PORTDIR/dinv8.txt
Clean_Up $PORTDIR/dinv7.txt
Clean_Up $PORTDIR/dinv6.txt
Clean_Up $PORTDIR/dinv11YY.txt
Clean_Up $PORTDIR/dinv10YY.txt
Clean_Up $PORTDIR/dinv9YY.txt
Clean_Up $PORTDIR/dinv8YY.txt
Clean_Up $PORTDIR/dinv7YY.txt
Clean_Up $PORTDIR/dinv6YY.txt
Clean_Up $PORTDIR/dout41XX.txt
Clean_Up $PORTDIR/dout42XX.txt
Clean_Up $PORTDIR/dout50XX.txt
Clean_Up $PORTDIR/dout51XX.txt
Clean_Up $PORTDIR/dout52XX.txt
Clean_Up $PORTDIR/dout60XX.txt
Clean_Up $PORTDIR/dout62XX.txt
Clean_Up $PORTDIR/dout70XX.txt
Clean_Up $PORTDIR/dout80XX.txt
Clean_Up $PORTDIR/dout90XX.txt
Clean_Up $PORTDIR/dout10XX.txt
Clean_Up $PORTDIR/dout41.txt
Clean_Up $PORTDIR/dout42.txt
Clean_Up $PORTDIR/dout50.txt
Clean_Up $PORTDIR/dout51.txt
Clean_Up $PORTDIR/dout52.txt
Clean_Up $PORTDIR/dout60.txt
Clean_Up $PORTDIR/dout62.txt
Clean_Up $PORTDIR/dout70.txt
Clean_Up $PORTDIR/dout80.txt
Clean_Up $PORTDIR/dout90.txt
Clean_Up $PORTDIR/dout10.txt
Clean_Up $DD/tmp/dout52${PORT}.txt
Clean_Up $DD/tmp/dout51${PORT}.txt
Clean_Up $DD/tmp/dout50${PORT}.txt
Clean_Up $DD/tmp/dout42${PORT}.txt
Clean_Up $DD/tmp/dout41${PORT}.txt
Clean_Up $DD/tmp/dout60${PORT}.txt
Clean_Up $DD/tmp/dout62${PORT}.txt
Clean_Up $DD/tmp/dout70${PORT}.txt
Clean_Up $DD/tmp/dout80${PORT}.txt
Clean_Up $DD/tmp/dout90${PORT}.txt
Clean_Up $DD/tmp/dout10${PORT}.txt

Split_DRG_Input ${E11DATE} ${E12DATE} $PORTDIR/dinv11.txt

Split_DRG_Input ${E10DATE} ${E11DATE} $PORTDIR/dinv10.txt

Split_DRG_Input ${E9DATE} ${E10DATE} $PORTDIR/dinv9.txt

Split_DRG_Input ${E8DATE} ${E9DATE} $PORTDIR/dinv8.txt

Split_DRG_Input ${E7DATE} ${E8DATE} $PORTDIR/dinv7.txt

Split_DRG_Input ${E6DATE} ${E7DATE} $PORTDIR/dinv6.txt

echo "Running the grouper after Split DRG." >>$LOGFILE

# run grouper from temp file directory
cd $PORTDIR 

if [ -s $PORTDIR/dinv11.txt ]
  then
    for ver in DR10 DR90 DR80 DR70 DR62 DR60 DR52 DR51 DR50 DR42 DR41
	do
	rm -f dinv11XX.tmp
	 while read line
	 do
	  echo "${line}$ver" >> dinv11XX.tmp
	 done < dinv11.txt
	 cat dinv11XX.tmp >> dinv11YY.txt
	done

    Group_Edition 11 dout
fi


if [ -s $PORTDIR/dinv10.txt ]
  then
    for ver in CR90 CR80 CR70 CR62 CR60 CR52 CR51 CR50 CR42 CR41
        do
        rm -f dinv10XX.tmp
         while read line
         do
           echo "${line}$ver" >> dinv10XX.tmp
         done < dinv10.txt
         cat dinv10XX.tmp >> dinv10YY.txt
        done

   Group_Edition 10 dout
fi

# testing vic DRG for ICD 10, commented out normally

#if [ -s $PORTDIR/dinv10.txt ]
#  then
#    for ver in DR80 DR70 DR62 DR60 DR52 DR51 DR50 DR42 DR41
#        do
#        rm -f dinv10XX.tmp
#         while read line
#         do
#           echo "${line}$ver" >> dinv10XX.tmp
#         done < dinv10.txt
#         cat dinv10XX.tmp >> dinv10YY.txt
#        done
#
#   Group_Edition 10 dout
#fi

# end test

if [[ -s $PORTDIR/dinv9.txt ]]
then
for ver in BR80 BR70 BR62 BR60 BR52 BR51 BR50 BR42 BR41
          do
          rm -f dinv9XX.tmp
           while read line
           do
             echo "${line}$ver" >> dinv9XX.tmp
         done < dinv9.txt
           cat dinv9XX.tmp >> dinv9YY.txt
          done

    Group_Edition 9 dout
fi

if [[ -s $PORTDIR/dinv8.txt ]]
then 
for ver in AR80 AR70 AR62 AR60 AR52 AR51 AR50 AR42 AR41
	do
	rm -f dinv8XX.tmp
	 while read line
	 do
	   echo "${line}$ver" >> dinv8XX.tmp
         done < dinv8.txt
	 cat dinv8XX.tmp >> dinv8YY.txt
	done

    Group_Edition 8 dout 
fi

if [[ -s $PORTDIR/dinv7.txt ]]
then
for ver in PR62 PR60 PR52 PR51 PR50 PR42 PR41
        do
        rm -f dinv7XX.tmp
         while read line
         do
           echo "${line}$ver" >> dinv7XX.tmp
         done < dinv7.txt
         cat dinv7XX.tmp >> dinv7YY.txt
        done

    Group_Edition 7 dout  
fi

if [[ -s $PORTDIR/dinv6.txt ]]
then
for ver in QR52 QR51 QR50 QR42 QR41
        do
        rm -f dinv6XX.tmp
         while read line
         do
           echo "${line}$ver" >> dinv6XX.tmp
         done < dinv6.txt
         cat dinv6XX.tmp >> dinv6YY.txt
        done

    Group_Edition 6 dout
fi

date >> $LOGFILE

echo "====== ENDING ========" >> $LOGFILE
